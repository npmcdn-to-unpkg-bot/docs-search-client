{"index":"<h1>CMake Reference Documentation</h1>  <h2 id=\"command-line-tools\">Command-Line Tools</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake.1\">cmake(1)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/ctest.1\">ctest(1)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cpack.1\">cpack(1)</a></li> </ul>    <h2 id=\"interactive-dialogs\">Interactive Dialogs</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-gui.1\">cmake-gui(1)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/ccmake.1\">ccmake(1)</a></li> </ul>    <h2 id=\"reference-manuals\">Reference Manuals</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-buildsystem.7\">cmake-buildsystem(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-commands.7\">cmake-commands(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-compile-features.7\">cmake-compile-features(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-developer.7\">cmake-developer(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-generator-expressions.7\">cmake-generator-expressions(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-generators.7\">cmake-generators(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-language.7\">cmake-language(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-modules.7\">cmake-modules(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-packages.7\">cmake-packages(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-policies.7\">cmake-policies(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-properties.7\">cmake-properties(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-qt.7\">cmake-qt(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-toolchains.7\">cmake-toolchains(7)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/cmake-variables.7\">cmake-variables(7)</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/</a>\n  </p>\n</div>\n","manual/cpack.1":"<h1 id=\"manual:cpack(1)\">cpack(1)</h1>  <h2 id=\"synopsis\">Synopsis</h2> <pre data-language=\"python\">cpack -G &lt;generator&gt; [&lt;options&gt;]\n</pre>   <h2 id=\"description\">Description</h2> <p>The “cpack” executable is the CMake packaging program. CMake-generated build trees created for projects that use the INSTALL_* commands have packaging support. This program will generate the package.</p> <p>CMake is a cross-platform build system generator. Projects specify their build process with platform-independent CMake listfiles included in each directory of a source tree with the name CMakeLists.txt. Users build a project by using CMake to generate a build system for a native tool on their platform.</p>   <h2 id=\"options\">Options</h2> <dl class=\"docutils\"> <dt><code>-G &lt;generator&gt;</code></dt> <dd>\n<p class=\"first\">Use the specified generator to generate package.</p> <p class=\"last\">CPack may support multiple native packaging systems on certain platforms. A generator is responsible for generating input files for particular system and invoking that systems. Possible generator names are specified in the Generators section.</p> </dd> <dt><code>-C &lt;Configuration&gt;</code></dt> <dd>\n<p class=\"first\">Specify the project configuration</p> <p class=\"last\">This option specifies the configuration that the project was build with, for example ‘Debug’, ‘Release’.</p> </dd> <dt><code>-D &lt;var&gt;=&lt;value&gt;</code></dt> <dd>\n<p class=\"first\">Set a CPack variable.</p> <p class=\"last\">Set a variable that can be used by the generator.</p> </dd> <dt><code>--config &lt;config file&gt;</code></dt> <dd>\n<p class=\"first\">Specify the config file.</p> <p class=\"last\">Specify the config file to use to create the package. By default CPackConfig.cmake in the current directory will be used.</p> </dd> <dt><code>--verbose,-V</code></dt> <dd>\n<p class=\"first\">enable verbose output</p> <p class=\"last\">Run cpack with verbose output.</p> </dd> <dt><code>--debug</code></dt> <dd>\n<p class=\"first\">enable debug output (for CPack developers)</p> <p class=\"last\">Run cpack with debug output (for CPack developers).</p> </dd> <dt><code>-P &lt;package name&gt;</code></dt> <dd>\n<p class=\"first\">override/define CPACK_PACKAGE_NAME</p> <p class=\"last\">If the package name is not specified on cpack commmand line thenCPack.cmake defines it as CMAKE_PROJECT_NAME</p> </dd> <dt><code>-R &lt;package version&gt;</code></dt> <dd>\n<p class=\"first\">override/define CPACK_PACKAGE_VERSION</p> <p class=\"last\">If version is not specified on cpack command line thenCPack.cmake defines it from CPACK_PACKAGE_VERSION_[MAJOR|MINOR|PATCH]look into CPack.cmake for detail</p> </dd> <dt><code>-B &lt;package directory&gt;</code></dt> <dd>\n<p class=\"first\">override/define CPACK_PACKAGE_DIRECTORY</p> <p class=\"last\">The directory where CPack will be doing its packaging work.The resulting package will be found there. Inside this directoryCPack creates ‘_CPack_Packages’ sub-directory which is theCPack temporary directory.</p> </dd> <dt><code>--vendor &lt;vendor name&gt;</code></dt> <dd>\n<p class=\"first\">override/define CPACK_PACKAGE_VENDOR</p> <p class=\"last\">If vendor is not specified on cpack command line (or inside CMakeLists.txt) thenCPack.cmake defines it with a default value</p> </dd> </dl> <dl class=\"docutils\"> <dt><code>--help,-help,-usage,-h,-H,/?</code></dt> <dd>\n<p class=\"first\">Print usage information and exit.</p> <p class=\"last\">Usage describes the basic command line interface and its options.</p> </dd> <dt><code>--version,-version,/V [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Show program name/version banner and exit.</p> <p class=\"last\">If a file is specified, the version is written into it. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-full [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print all help manuals and exit.</p> <p class=\"last\">All manuals are printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-manual &lt;man&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print one help manual and exit.</p> <p class=\"last\">The specified manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-manual-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List help manuals available and exit.</p> <p class=\"last\">The list contains all manuals for which help may be obtained by using the <code>--help-manual</code> option followed by a manual name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-command &lt;cmd&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one command and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-commands.7#manual:cmake-commands(7)\" title=\"cmake-commands(7)\" id=\"index-0-manual:cmake-commands(7)\"><code>cmake-commands(7)</code></a> manual entry for <code>&lt;cmd&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-command-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List commands with help available and exit.</p> <p class=\"last\">The list contains all commands for which help may be obtained by using the <code>--help-command</code> option followed by a command name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-commands [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-commands manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-commands.7#manual:cmake-commands(7)\" title=\"cmake-commands(7)\" id=\"index-1-manual:cmake-commands(7)\"><code>cmake-commands(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-module &lt;mod&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one module and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-0-manual:cmake-modules(7)\"><code>cmake-modules(7)</code></a> manual entry for <code>&lt;mod&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-module-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List modules with help available and exit.</p> <p class=\"last\">The list contains all modules for which help may be obtained by using the <code>--help-module</code> option followed by a module name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-modules [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-modules manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-1-manual:cmake-modules(7)\"><code>cmake-modules(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policy &lt;cmp&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one policy and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>cmake-policies(7)</code></a> manual entry for <code>&lt;cmp&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policy-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List policies with help available and exit.</p> <p class=\"last\">The list contains all policies for which help may be obtained by using the <code>--help-policy</code> option followed by a policy name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policies [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-policies manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-1-manual:cmake-policies(7)\"><code>cmake-policies(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-property &lt;prop&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one property and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-0-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual entries for <code>&lt;prop&gt;</code> are printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-property-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List properties with help available and exit.</p> <p class=\"last\">The list contains all properties for which help may be obtained by using the <code>--help-property</code> option followed by a property name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-properties [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-properties manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-1-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variable &lt;var&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one variable and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-variables.7#manual:cmake-variables(7)\" title=\"cmake-variables(7)\" id=\"index-0-manual:cmake-variables(7)\"><code>cmake-variables(7)</code></a> manual entry for <code>&lt;var&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variable-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List variables with help available and exit.</p> <p class=\"last\">The list contains all variables for which help may be obtained by using the <code>--help-variable</code> option followed by a variable name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variables [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-variables manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-variables.7#manual:cmake-variables(7)\" title=\"cmake-variables(7)\" id=\"index-1-manual:cmake-variables(7)\"><code>cmake-variables(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> </dl>   <h2 id=\"see-also\">See Also</h2> <p>The following resources are available to get help using CMake:</p> <dl class=\"docutils\"> <dt>Home Page</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org\">https://cmake.org</a></p> <p class=\"last\">The primary starting point for learning about CMake.</p> </dd> <dt>Frequently Asked Questions</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/Wiki/CMake_FAQ\">https://cmake.org/Wiki/CMake_FAQ</a></p> <p class=\"last\">A Wiki is provided containing answers to frequently asked questions.</p> </dd> <dt>Online Documentation</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/documentation\">https://cmake.org/documentation</a></p> <p class=\"last\">Links to available documentation may be found on this web page.</p> </dd> <dt>Mailing List</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/mailing-lists\">https://cmake.org/mailing-lists</a></p> <p class=\"last\">For help and discussion about using cmake, a mailing list is provided at <a class=\"reference external\" href=\"mailto:cmake%40cmake.org\">cmake<span>@</span>cmake<span>.</span>org</a>. The list is member-post-only but one may sign up on the CMake web page. Please first read the full documentation at <a class=\"reference external\" href=\"https://cmake.org\">https://cmake.org</a> before posting questions to the list.</p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cpack.1.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cpack.1.html</a>\n  </p>\n</div>\n","manual/cmake-gui.1":"<h1 id=\"manual:cmake-gui(1)\">cmake-gui(1)</h1>  <h2 id=\"synopsis\">Synopsis</h2> <pre data-language=\"python\">cmake-gui [&lt;options&gt;]\ncmake-gui [&lt;options&gt;] (&lt;path-to-source&gt; | &lt;path-to-existing-build&gt;)\n</pre>   <h2 id=\"description\">Description</h2> <p>The “cmake-gui” executable is the CMake GUI. Project configuration settings may be specified interactively. Brief instructions are provided at the bottom of the window when the program is running.</p> <p>CMake is a cross-platform build system generator. Projects specify their build process with platform-independent CMake listfiles included in each directory of a source tree with the name CMakeLists.txt. Users build a project by using CMake to generate a build system for a native tool on their platform.</p>   <h2 id=\"options\">Options</h2> <dl class=\"docutils\"> <dt><code>--help,-help,-usage,-h,-H,/?</code></dt> <dd>\n<p class=\"first\">Print usage information and exit.</p> <p class=\"last\">Usage describes the basic command line interface and its options.</p> </dd> <dt><code>--version,-version,/V [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Show program name/version banner and exit.</p> <p class=\"last\">If a file is specified, the version is written into it. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-full [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print all help manuals and exit.</p> <p class=\"last\">All manuals are printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-manual &lt;man&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print one help manual and exit.</p> <p class=\"last\">The specified manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-manual-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List help manuals available and exit.</p> <p class=\"last\">The list contains all manuals for which help may be obtained by using the <code>--help-manual</code> option followed by a manual name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-command &lt;cmd&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one command and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-commands.7#manual:cmake-commands(7)\" title=\"cmake-commands(7)\" id=\"index-0-manual:cmake-commands(7)\"><code>cmake-commands(7)</code></a> manual entry for <code>&lt;cmd&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-command-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List commands with help available and exit.</p> <p class=\"last\">The list contains all commands for which help may be obtained by using the <code>--help-command</code> option followed by a command name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-commands [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-commands manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-commands.7#manual:cmake-commands(7)\" title=\"cmake-commands(7)\" id=\"index-1-manual:cmake-commands(7)\"><code>cmake-commands(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-module &lt;mod&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one module and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-0-manual:cmake-modules(7)\"><code>cmake-modules(7)</code></a> manual entry for <code>&lt;mod&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-module-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List modules with help available and exit.</p> <p class=\"last\">The list contains all modules for which help may be obtained by using the <code>--help-module</code> option followed by a module name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-modules [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-modules manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-1-manual:cmake-modules(7)\"><code>cmake-modules(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policy &lt;cmp&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one policy and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>cmake-policies(7)</code></a> manual entry for <code>&lt;cmp&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policy-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List policies with help available and exit.</p> <p class=\"last\">The list contains all policies for which help may be obtained by using the <code>--help-policy</code> option followed by a policy name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policies [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-policies manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-1-manual:cmake-policies(7)\"><code>cmake-policies(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-property &lt;prop&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one property and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-0-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual entries for <code>&lt;prop&gt;</code> are printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-property-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List properties with help available and exit.</p> <p class=\"last\">The list contains all properties for which help may be obtained by using the <code>--help-property</code> option followed by a property name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-properties [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-properties manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-1-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variable &lt;var&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one variable and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-variables.7#manual:cmake-variables(7)\" title=\"cmake-variables(7)\" id=\"index-0-manual:cmake-variables(7)\"><code>cmake-variables(7)</code></a> manual entry for <code>&lt;var&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variable-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List variables with help available and exit.</p> <p class=\"last\">The list contains all variables for which help may be obtained by using the <code>--help-variable</code> option followed by a variable name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variables [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-variables manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-variables.7#manual:cmake-variables(7)\" title=\"cmake-variables(7)\" id=\"index-1-manual:cmake-variables(7)\"><code>cmake-variables(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> </dl>   <h2 id=\"see-also\">See Also</h2> <p>The following resources are available to get help using CMake:</p> <dl class=\"docutils\"> <dt>Home Page</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org\">https://cmake.org</a></p> <p class=\"last\">The primary starting point for learning about CMake.</p> </dd> <dt>Frequently Asked Questions</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/Wiki/CMake_FAQ\">https://cmake.org/Wiki/CMake_FAQ</a></p> <p class=\"last\">A Wiki is provided containing answers to frequently asked questions.</p> </dd> <dt>Online Documentation</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/documentation\">https://cmake.org/documentation</a></p> <p class=\"last\">Links to available documentation may be found on this web page.</p> </dd> <dt>Mailing List</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/mailing-lists\">https://cmake.org/mailing-lists</a></p> <p class=\"last\">For help and discussion about using cmake, a mailing list is provided at <a class=\"reference external\" href=\"mailto:cmake%40cmake.org\">cmake<span>@</span>cmake<span>.</span>org</a>. The list is member-post-only but one may sign up on the CMake web page. Please first read the full documentation at <a class=\"reference external\" href=\"https://cmake.org\">https://cmake.org</a> before posting questions to the list.</p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-gui.1.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-gui.1.html</a>\n  </p>\n</div>\n","manual/ccmake.1":"<h1 id=\"manual:ccmake(1)\">ccmake(1)</h1>  <h2 id=\"synopsis\">Synopsis</h2> <pre data-language=\"python\">ccmake [&lt;options&gt;] (&lt;path-to-source&gt; | &lt;path-to-existing-build&gt;)\n</pre>   <h2 id=\"description\">Description</h2> <p>The “ccmake” executable is the CMake curses interface. Project configuration settings may be specified interactively through this GUI. Brief instructions are provided at the bottom of the terminal when the program is running.</p> <p>CMake is a cross-platform build system generator. Projects specify their build process with platform-independent CMake listfiles included in each directory of a source tree with the name CMakeLists.txt. Users build a project by using CMake to generate a build system for a native tool on their platform.</p>   <h2 id=\"options\">Options</h2> <dl class=\"docutils\"> <dt><code>-C &lt;initial-cache&gt;</code></dt> <dd>\n<p class=\"first\">Pre-load a script to populate the cache.</p> <p class=\"last\">When cmake is first run in an empty build tree, it creates a CMakeCache.txt file and populates it with customizable settings for the project. This option may be used to specify a file from which to load cache entries before the first pass through the project’s cmake listfiles. The loaded entries take priority over the project’s default values. The given file should be a CMake script containing SET commands that use the CACHE option, not a cache-format file.</p> </dd> <dt><code>-D &lt;var&gt;:&lt;type&gt;=&lt;value&gt;, -D &lt;var&gt;=&lt;value&gt;</code></dt> <dd>\n<p class=\"first\">Create a cmake cache entry.</p> <p>When cmake is first run in an empty build tree, it creates a CMakeCache.txt file and populates it with customizable settings for the project. This option may be used to specify a setting that takes priority over the project’s default value. The option may be repeated for as many cache entries as desired.</p> <p>If the <code>:&lt;type&gt;</code> portion is given it must be one of the types specified by the <a class=\"reference internal\" href=\"../command/set#command:set\" title=\"set\" id=\"index-0-command:set\"><code>set()</code></a> command documentation for its <code>CACHE</code> signature. If the <code>:&lt;type&gt;</code> portion is omitted the entry will be created with no type if it does not exist with a type already. If a command in the project sets the type to <code>PATH</code> or <code>FILEPATH</code> then the <code>&lt;value&gt;</code> will be converted to an absolute path.</p> <p class=\"last\">This option may also be given as a single argument: <code>-D&lt;var&gt;:&lt;type&gt;=&lt;value&gt;</code> or <code>-D&lt;var&gt;=&lt;value&gt;</code>.</p> </dd> <dt><code>-U &lt;globbing_expr&gt;</code></dt> <dd>\n<p class=\"first\">Remove matching entries from CMake cache.</p> <p>This option may be used to remove one or more variables from the CMakeCache.txt file, globbing expressions using * and ? are supported. The option may be repeated for as many cache entries as desired.</p> <p class=\"last\">Use with care, you can make your CMakeCache.txt non-working.</p> </dd> <dt><code>-G &lt;generator-name&gt;</code></dt> <dd>\n<p class=\"first\">Specify a build system generator.</p> <p class=\"last\">CMake may support multiple native build systems on certain platforms. A generator is responsible for generating a particular build system. Possible generator names are specified in the <a class=\"reference internal\" href=\"cmake-generators.7#manual:cmake-generators(7)\" title=\"cmake-generators(7)\" id=\"index-0-manual:cmake-generators(7)\"><code>cmake-generators(7)</code></a> manual.</p> </dd> <dt><code>-T &lt;toolset-name&gt;</code></dt> <dd>\n<p class=\"first\">Specify toolset name if supported by generator.</p> <p>Some CMake generators support a toolset name to be given to the native build system to choose a compiler. This is supported only on specific generators:</p> <pre data-language=\"python\">Visual Studio &gt;= 10\nXcode &gt;= 3.0\n</pre> <p class=\"last\">See native build system documentation for allowed toolset names.</p> </dd> <dt><code>-A &lt;platform-name&gt;</code></dt> <dd>\n<p class=\"first\">Specify platform name if supported by generator.</p> <p>Some CMake generators support a platform name to be given to the native build system to choose a compiler or SDK. This is supported only on specific generators:</p> <pre data-language=\"python\">Visual Studio &gt;= 8\n</pre> <p class=\"last\">See native build system documentation for allowed platform names.</p> </dd> <dt><code>-Wno-dev</code></dt> <dd>\n<p class=\"first\">Suppress developer warnings.</p> <p class=\"last\">Suppress warnings that are meant for the author of the CMakeLists.txt files. By default this will also turn off deprecation warnings.</p> </dd> <dt><code>-Wdev</code></dt> <dd>\n<p class=\"first\">Enable developer warnings.</p> <p class=\"last\">Enable warnings that are meant for the author of the CMakeLists.txt files. By default this will also turn on deprecation warnings.</p> </dd> <dt><code>-Werror=dev</code></dt> <dd>\n<p class=\"first\">Make developer warnings errors.</p> <p class=\"last\">Make warnings that are meant for the author of the CMakeLists.txt files errors. By default this will also turn on deprecated warnings as errors.</p> </dd> <dt><code>-Wno-error=dev</code></dt> <dd>\n<p class=\"first\">Make developer warnings not errors.</p> <p class=\"last\">Make warnings that are meant for the author of the CMakeLists.txt files not errors. By default this will also turn off deprecated warnings as errors.</p> </dd> <dt><code>-Wdeprecated</code></dt> <dd>\n<p class=\"first\">Enable deprecated functionality warnings.</p> <p class=\"last\">Enable warnings for usage of deprecated functionality, that are meant for the author of the CMakeLists.txt files.</p> </dd> <dt><code>-Wno-deprecated</code></dt> <dd>\n<p class=\"first\">Suppress deprecated functionality warnings.</p> <p class=\"last\">Suppress warnings for usage of deprecated functionality, that are meant for the author of the CMakeLists.txt files.</p> </dd> <dt><code>-Werror=deprecated</code></dt> <dd>\n<p class=\"first\">Make deprecated macro and function warnings errors.</p> <p class=\"last\">Make warnings for usage of deprecated macros and functions, that are meant for the author of the CMakeLists.txt files, errors.</p> </dd> <dt><code>-Wno-error=deprecated</code></dt> <dd>\n<p class=\"first\">Make deprecated macro and function warnings not errors.</p> <p class=\"last\">Make warnings for usage of deprecated macros and functions, that are meant for the author of the CMakeLists.txt files, not errors.</p> </dd> </dl> <dl class=\"docutils\"> <dt><code>--help,-help,-usage,-h,-H,/?</code></dt> <dd>\n<p class=\"first\">Print usage information and exit.</p> <p class=\"last\">Usage describes the basic command line interface and its options.</p> </dd> <dt><code>--version,-version,/V [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Show program name/version banner and exit.</p> <p class=\"last\">If a file is specified, the version is written into it. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-full [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print all help manuals and exit.</p> <p class=\"last\">All manuals are printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-manual &lt;man&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print one help manual and exit.</p> <p class=\"last\">The specified manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-manual-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List help manuals available and exit.</p> <p class=\"last\">The list contains all manuals for which help may be obtained by using the <code>--help-manual</code> option followed by a manual name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-command &lt;cmd&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one command and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-commands.7#manual:cmake-commands(7)\" title=\"cmake-commands(7)\" id=\"index-0-manual:cmake-commands(7)\"><code>cmake-commands(7)</code></a> manual entry for <code>&lt;cmd&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-command-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List commands with help available and exit.</p> <p class=\"last\">The list contains all commands for which help may be obtained by using the <code>--help-command</code> option followed by a command name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-commands [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-commands manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-commands.7#manual:cmake-commands(7)\" title=\"cmake-commands(7)\" id=\"index-1-manual:cmake-commands(7)\"><code>cmake-commands(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-module &lt;mod&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one module and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-0-manual:cmake-modules(7)\"><code>cmake-modules(7)</code></a> manual entry for <code>&lt;mod&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-module-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List modules with help available and exit.</p> <p class=\"last\">The list contains all modules for which help may be obtained by using the <code>--help-module</code> option followed by a module name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-modules [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-modules manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-1-manual:cmake-modules(7)\"><code>cmake-modules(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policy &lt;cmp&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one policy and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>cmake-policies(7)</code></a> manual entry for <code>&lt;cmp&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policy-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List policies with help available and exit.</p> <p class=\"last\">The list contains all policies for which help may be obtained by using the <code>--help-policy</code> option followed by a policy name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policies [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-policies manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-1-manual:cmake-policies(7)\"><code>cmake-policies(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-property &lt;prop&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one property and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-0-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual entries for <code>&lt;prop&gt;</code> are printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-property-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List properties with help available and exit.</p> <p class=\"last\">The list contains all properties for which help may be obtained by using the <code>--help-property</code> option followed by a property name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-properties [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-properties manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-1-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variable &lt;var&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one variable and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-variables.7#manual:cmake-variables(7)\" title=\"cmake-variables(7)\" id=\"index-0-manual:cmake-variables(7)\"><code>cmake-variables(7)</code></a> manual entry for <code>&lt;var&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variable-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List variables with help available and exit.</p> <p class=\"last\">The list contains all variables for which help may be obtained by using the <code>--help-variable</code> option followed by a variable name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variables [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-variables manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-variables.7#manual:cmake-variables(7)\" title=\"cmake-variables(7)\" id=\"index-1-manual:cmake-variables(7)\"><code>cmake-variables(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> </dl>   <h2 id=\"see-also\">See Also</h2> <p>The following resources are available to get help using CMake:</p> <dl class=\"docutils\"> <dt>Home Page</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org\">https://cmake.org</a></p> <p class=\"last\">The primary starting point for learning about CMake.</p> </dd> <dt>Frequently Asked Questions</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/Wiki/CMake_FAQ\">https://cmake.org/Wiki/CMake_FAQ</a></p> <p class=\"last\">A Wiki is provided containing answers to frequently asked questions.</p> </dd> <dt>Online Documentation</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/documentation\">https://cmake.org/documentation</a></p> <p class=\"last\">Links to available documentation may be found on this web page.</p> </dd> <dt>Mailing List</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/mailing-lists\">https://cmake.org/mailing-lists</a></p> <p class=\"last\">For help and discussion about using cmake, a mailing list is provided at <a class=\"reference external\" href=\"mailto:cmake%40cmake.org\">cmake<span>@</span>cmake<span>.</span>org</a>. The list is member-post-only but one may sign up on the CMake web page. Please first read the full documentation at <a class=\"reference external\" href=\"https://cmake.org\">https://cmake.org</a> before posting questions to the list.</p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/ccmake.1.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/ccmake.1.html</a>\n  </p>\n</div>\n","manual/cmake.1":"<h1 id=\"manual:cmake(1)\">cmake(1)</h1>  <h2 id=\"synopsis\">Synopsis</h2> <pre data-language=\"python\">cmake [&lt;options&gt;] (&lt;path-to-source&gt; | &lt;path-to-existing-build&gt;)\ncmake [(-D &lt;var&gt;=&lt;value&gt;)...] -P &lt;cmake-script-file&gt;\ncmake --build &lt;dir&gt; [&lt;options&gt;] [-- &lt;build-tool-options&gt;...]\ncmake -E &lt;command&gt; [&lt;options&gt;...]\ncmake --find-package &lt;options&gt;...\n</pre>   <h2 id=\"description\">Description</h2> <p>The “cmake” executable is the CMake command-line interface. It may be used to configure projects in scripts. Project configuration settings may be specified on the command line with the -D option.</p> <p>CMake is a cross-platform build system generator. Projects specify their build process with platform-independent CMake listfiles included in each directory of a source tree with the name CMakeLists.txt. Users build a project by using CMake to generate a build system for a native tool on their platform.</p>   <h2 id=\"cmake-options\">Options</h2> <dl class=\"docutils\" id=\"options\"> <dt><code>-C &lt;initial-cache&gt;</code></dt> <dd>\n<p class=\"first\">Pre-load a script to populate the cache.</p> <p class=\"last\">When cmake is first run in an empty build tree, it creates a CMakeCache.txt file and populates it with customizable settings for the project. This option may be used to specify a file from which to load cache entries before the first pass through the project’s cmake listfiles. The loaded entries take priority over the project’s default values. The given file should be a CMake script containing SET commands that use the CACHE option, not a cache-format file.</p> </dd> <dt><code>-D &lt;var&gt;:&lt;type&gt;=&lt;value&gt;, -D &lt;var&gt;=&lt;value&gt;</code></dt> <dd>\n<p class=\"first\">Create a cmake cache entry.</p> <p>When cmake is first run in an empty build tree, it creates a CMakeCache.txt file and populates it with customizable settings for the project. This option may be used to specify a setting that takes priority over the project’s default value. The option may be repeated for as many cache entries as desired.</p> <p>If the <code>:&lt;type&gt;</code> portion is given it must be one of the types specified by the <a class=\"reference internal\" href=\"../command/set#command:set\" title=\"set\" id=\"index-0-command:set\"><code>set()</code></a> command documentation for its <code>CACHE</code> signature. If the <code>:&lt;type&gt;</code> portion is omitted the entry will be created with no type if it does not exist with a type already. If a command in the project sets the type to <code>PATH</code> or <code>FILEPATH</code> then the <code>&lt;value&gt;</code> will be converted to an absolute path.</p> <p class=\"last\">This option may also be given as a single argument: <code>-D&lt;var&gt;:&lt;type&gt;=&lt;value&gt;</code> or <code>-D&lt;var&gt;=&lt;value&gt;</code>.</p> </dd> <dt><code>-U &lt;globbing_expr&gt;</code></dt> <dd>\n<p class=\"first\">Remove matching entries from CMake cache.</p> <p>This option may be used to remove one or more variables from the CMakeCache.txt file, globbing expressions using * and ? are supported. The option may be repeated for as many cache entries as desired.</p> <p class=\"last\">Use with care, you can make your CMakeCache.txt non-working.</p> </dd> <dt><code>-G &lt;generator-name&gt;</code></dt> <dd>\n<p class=\"first\">Specify a build system generator.</p> <p class=\"last\">CMake may support multiple native build systems on certain platforms. A generator is responsible for generating a particular build system. Possible generator names are specified in the <a class=\"reference internal\" href=\"cmake-generators.7#manual:cmake-generators(7)\" title=\"cmake-generators(7)\" id=\"index-0-manual:cmake-generators(7)\"><code>cmake-generators(7)</code></a> manual.</p> </dd> <dt><code>-T &lt;toolset-name&gt;</code></dt> <dd>\n<p class=\"first\">Specify toolset name if supported by generator.</p> <p>Some CMake generators support a toolset name to be given to the native build system to choose a compiler. This is supported only on specific generators:</p> <pre data-language=\"python\">Visual Studio &gt;= 10\nXcode &gt;= 3.0\n</pre> <p class=\"last\">See native build system documentation for allowed toolset names.</p> </dd> <dt><code>-A &lt;platform-name&gt;</code></dt> <dd>\n<p class=\"first\">Specify platform name if supported by generator.</p> <p>Some CMake generators support a platform name to be given to the native build system to choose a compiler or SDK. This is supported only on specific generators:</p> <pre data-language=\"python\">Visual Studio &gt;= 8\n</pre> <p class=\"last\">See native build system documentation for allowed platform names.</p> </dd> <dt><code>-Wno-dev</code></dt> <dd>\n<p class=\"first\">Suppress developer warnings.</p> <p class=\"last\">Suppress warnings that are meant for the author of the CMakeLists.txt files. By default this will also turn off deprecation warnings.</p> </dd> <dt><code>-Wdev</code></dt> <dd>\n<p class=\"first\">Enable developer warnings.</p> <p class=\"last\">Enable warnings that are meant for the author of the CMakeLists.txt files. By default this will also turn on deprecation warnings.</p> </dd> <dt><code>-Werror=dev</code></dt> <dd>\n<p class=\"first\">Make developer warnings errors.</p> <p class=\"last\">Make warnings that are meant for the author of the CMakeLists.txt files errors. By default this will also turn on deprecated warnings as errors.</p> </dd> <dt><code>-Wno-error=dev</code></dt> <dd>\n<p class=\"first\">Make developer warnings not errors.</p> <p class=\"last\">Make warnings that are meant for the author of the CMakeLists.txt files not errors. By default this will also turn off deprecated warnings as errors.</p> </dd> <dt><code>-Wdeprecated</code></dt> <dd>\n<p class=\"first\">Enable deprecated functionality warnings.</p> <p class=\"last\">Enable warnings for usage of deprecated functionality, that are meant for the author of the CMakeLists.txt files.</p> </dd> <dt><code>-Wno-deprecated</code></dt> <dd>\n<p class=\"first\">Suppress deprecated functionality warnings.</p> <p class=\"last\">Suppress warnings for usage of deprecated functionality, that are meant for the author of the CMakeLists.txt files.</p> </dd> <dt><code>-Werror=deprecated</code></dt> <dd>\n<p class=\"first\">Make deprecated macro and function warnings errors.</p> <p class=\"last\">Make warnings for usage of deprecated macros and functions, that are meant for the author of the CMakeLists.txt files, errors.</p> </dd> <dt><code>-Wno-error=deprecated</code></dt> <dd>\n<p class=\"first\">Make deprecated macro and function warnings not errors.</p> <p class=\"last\">Make warnings for usage of deprecated macros and functions, that are meant for the author of the CMakeLists.txt files, not errors.</p> </dd> <dt><code>-E &lt;command&gt; [&lt;options&gt;...]</code></dt> <dd>See <a class=\"reference internal\" href=\"#command-line-tool-mode\">Command-Line Tool Mode</a>.</dd> <dt><code>-L[A][H]</code></dt> <dd>\n<p class=\"first\">List non-advanced cached variables.</p> <p class=\"last\">List cache variables will run CMake and list all the variables from the CMake cache that are not marked as INTERNAL or ADVANCED. This will effectively display current CMake settings, which can then be changed with -D option. Changing some of the variables may result in more variables being created. If A is specified, then it will display also advanced variables. If H is specified, it will also display help for each variable.</p> </dd> <dt><code>--build &lt;dir&gt;</code></dt> <dd>\n<p class=\"first\">Build a CMake-generated project binary tree.</p> <p>This abstracts a native build tool’s command-line interface with the following options:</p> <pre data-language=\"python\">&lt;dir&gt;          = Project binary directory to be built.\n--target &lt;tgt&gt; = Build &lt;tgt&gt; instead of default targets.\n--config &lt;cfg&gt; = For multi-configuration tools, choose &lt;cfg&gt;.\n--clean-first  = Build target 'clean' first, then build.\n                 (To clean only, use --target 'clean'.)\n--use-stderr   = Ignored.  Behavior is default in CMake &gt;= 3.0.\n--             = Pass remaining options to the native tool.\n</pre> <p class=\"last\">Run cmake –build with no options for quick help.</p> </dd> <dt><code>-N</code></dt> <dd>\n<p class=\"first\">View mode only.</p> <p class=\"last\">Only load the cache. Do not actually run configure and generate steps.</p> </dd> <dt><code>-P &lt;file&gt;</code></dt> <dd>\n<p class=\"first\">Process script mode.</p> <p class=\"last\">Process the given cmake file as a script written in the CMake language. No configure or generate step is performed and the cache is not modified. If variables are defined using -D, this must be done before the -P argument.</p> </dd> <dt><code>--find-package</code></dt> <dd>\n<p class=\"first\">Run in pkg-config like mode.</p> <p class=\"last\">Search a package using find_package() and print the resulting flags to stdout. This can be used to use cmake instead of pkg-config to find installed libraries in plain Makefile-based projects or in autoconf-based projects (via share/aclocal/cmake.m4).</p> </dd> <dt><code>--graphviz=[file]</code></dt> <dd>\n<p class=\"first\">Generate graphviz of dependencies, see CMakeGraphVizOptions.cmake for more.</p> <p class=\"last\">Generate a graphviz input file that will contain all the library and executable dependencies in the project. See the documentation for CMakeGraphVizOptions.cmake for more details.</p> </dd> <dt><code>--system-information [file]</code></dt> <dd>\n<p class=\"first\">Dump information about this system.</p> <p class=\"last\">Dump a wide range of information about the current system. If run from the top of a binary tree for a CMake project it will dump additional information such as the cache, log files etc.</p> </dd> <dt><code>--debug-trycompile</code></dt> <dd>\n<p class=\"first\">Do not delete the try_compile build tree. Only useful on one try_compile at a time.</p> <p class=\"last\">Do not delete the files and directories created for try_compile calls. This is useful in debugging failed try_compiles. It may however change the results of the try-compiles as old junk from a previous try-compile may cause a different test to either pass or fail incorrectly. This option is best used for one try-compile at a time, and only when debugging.</p> </dd> <dt><code>--debug-output</code></dt> <dd>\n<p class=\"first\">Put cmake in a debug mode.</p> <p class=\"last\">Print extra information during the cmake run like stack traces with message(send_error ) calls.</p> </dd> <dt><code>--trace</code></dt> <dd>\n<p class=\"first\">Put cmake in trace mode.</p> <p class=\"last\">Print a trace of all calls made and from where.</p> </dd> <dt><code>--trace-expand</code></dt> <dd>\n<p class=\"first\">Put cmake in trace mode.</p> <p class=\"last\">Like <code>--trace</code>, but with variables expanded.</p> </dd> <dt><code>--warn-uninitialized</code></dt> <dd>\n<p class=\"first\">Warn about uninitialized values.</p> <p class=\"last\">Print a warning when an uninitialized variable is used.</p> </dd> <dt><code>--warn-unused-vars</code></dt> <dd>\n<p class=\"first\">Warn about unused variables.</p> <p class=\"last\">Find variables that are declared or set, but not used.</p> </dd> <dt><code>--no-warn-unused-cli</code></dt> <dd>\n<p class=\"first\">Don’t warn about command line options.</p> <p class=\"last\">Don’t find variables that are declared on the command line, but not used.</p> </dd> <dt><code>--check-system-vars</code></dt> <dd>\n<p class=\"first\">Find problems with variable usage in system files.</p> <p class=\"last\">Normally, unused and uninitialized variables are searched for only in CMAKE_SOURCE_DIR and CMAKE_BINARY_DIR. This flag tells CMake to warn about other files as well.</p> </dd> </dl> <dl class=\"docutils\"> <dt><code>--help,-help,-usage,-h,-H,/?</code></dt> <dd>\n<p class=\"first\">Print usage information and exit.</p> <p class=\"last\">Usage describes the basic command line interface and its options.</p> </dd> <dt><code>--version,-version,/V [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Show program name/version banner and exit.</p> <p class=\"last\">If a file is specified, the version is written into it. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-full [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print all help manuals and exit.</p> <p class=\"last\">All manuals are printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-manual &lt;man&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print one help manual and exit.</p> <p class=\"last\">The specified manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-manual-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List help manuals available and exit.</p> <p class=\"last\">The list contains all manuals for which help may be obtained by using the <code>--help-manual</code> option followed by a manual name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-command &lt;cmd&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one command and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-commands.7#manual:cmake-commands(7)\" title=\"cmake-commands(7)\" id=\"index-0-manual:cmake-commands(7)\"><code>cmake-commands(7)</code></a> manual entry for <code>&lt;cmd&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-command-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List commands with help available and exit.</p> <p class=\"last\">The list contains all commands for which help may be obtained by using the <code>--help-command</code> option followed by a command name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-commands [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-commands manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-commands.7#manual:cmake-commands(7)\" title=\"cmake-commands(7)\" id=\"index-1-manual:cmake-commands(7)\"><code>cmake-commands(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-module &lt;mod&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one module and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-0-manual:cmake-modules(7)\"><code>cmake-modules(7)</code></a> manual entry for <code>&lt;mod&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-module-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List modules with help available and exit.</p> <p class=\"last\">The list contains all modules for which help may be obtained by using the <code>--help-module</code> option followed by a module name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-modules [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-modules manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-1-manual:cmake-modules(7)\"><code>cmake-modules(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policy &lt;cmp&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one policy and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>cmake-policies(7)</code></a> manual entry for <code>&lt;cmp&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policy-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List policies with help available and exit.</p> <p class=\"last\">The list contains all policies for which help may be obtained by using the <code>--help-policy</code> option followed by a policy name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policies [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-policies manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-1-manual:cmake-policies(7)\"><code>cmake-policies(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-property &lt;prop&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one property and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-0-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual entries for <code>&lt;prop&gt;</code> are printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-property-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List properties with help available and exit.</p> <p class=\"last\">The list contains all properties for which help may be obtained by using the <code>--help-property</code> option followed by a property name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-properties [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-properties manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-1-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variable &lt;var&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one variable and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-variables.7#manual:cmake-variables(7)\" title=\"cmake-variables(7)\" id=\"index-0-manual:cmake-variables(7)\"><code>cmake-variables(7)</code></a> manual entry for <code>&lt;var&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variable-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List variables with help available and exit.</p> <p class=\"last\">The list contains all variables for which help may be obtained by using the <code>--help-variable</code> option followed by a variable name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variables [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-variables manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-variables.7#manual:cmake-variables(7)\" title=\"cmake-variables(7)\" id=\"index-1-manual:cmake-variables(7)\"><code>cmake-variables(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> </dl>   <h2 id=\"command-line-tool-mode\">Command-Line Tool Mode</h2> <p>CMake provides builtin command-line tools through the signature:</p> <pre data-language=\"python\">cmake -E &lt;command&gt; [&lt;options&gt;...]\n</pre> <p>Run <code>cmake -E</code> or <code>cmake -E help</code> for a summary of commands. Available commands are:</p> <dl class=\"docutils\"> <dt><code>chdir &lt;dir&gt; &lt;cmd&gt; [&lt;arg&gt;...]</code></dt> <dd>Change the current working directory and run a command.</dd> <dt><code>compare_files &lt;file1&gt; &lt;file2&gt;</code></dt> <dd>Check if <code>&lt;file1&gt;</code> is same as <code>&lt;file2&gt;</code>. If files are the same, then returns 0, if not itreturns 1.</dd> <dt><code>copy &lt;file&gt;... &lt;destination&gt;</code></dt> <dd>Copy files to <code>&lt;destination&gt;</code> (either file or directory). If multiple files are specified, the <code>&lt;destination&gt;</code> must be directory and it must exist.</dd> <dt><code>copy_directory &lt;dir&gt;... &lt;destination&gt;</code></dt> <dd>Copy directories to <code>&lt;destination&gt;</code> directory. If <code>&lt;destination&gt;</code> directory does not exist it will be created.</dd> <dt><code>copy_if_different &lt;file&gt;... &lt;destination&gt;</code></dt> <dd>Copy files to <code>&lt;destination&gt;</code> (either file or directory) if they have changed. If multiple files are specified, the <code>&lt;destination&gt;</code> must be directory and it must exist.</dd> <dt><code>echo [&lt;string&gt;...]</code></dt> <dd>Displays arguments as text.</dd> <dt><code>echo_append [&lt;string&gt;...]</code></dt> <dd>Displays arguments as text but no new line.</dd> <dt><code>env [--unset=NAME]... [NAME=VALUE]... COMMAND [ARG]...</code></dt> <dd>Run command in a modified environment.</dd> <dt><code>environment</code></dt> <dd>Display the current environment variables.</dd> <dt><code>make_directory &lt;dir&gt;...</code></dt> <dd>Create <code>&lt;dir&gt;</code> directories. If necessary, create parent directories too. If a directory already exists it will be silently ignored.</dd> <dt><code>md5sum &lt;file&gt;...</code></dt> <dd>Compute md5sum of files.</dd> <dt><code>remove [-f] &lt;file&gt;...</code></dt> <dd>Remove the file(s), use <code>-f</code> to force it. If a file does not exist it will be silently ignored.</dd> <dt><code>remove_directory &lt;dir&gt;</code></dt> <dd>Remove a directory and its contents. If a directory does not exist it will be silently ignored.</dd> <dt><code>rename &lt;oldname&gt; &lt;newname&gt;</code></dt> <dd>Rename a file or directory (on one volume).</dd> <dt><code>sleep &lt;number&gt;...</code></dt> <dd>Sleep for given number of seconds.</dd> <dt><code>tar [cxt][vf][zjJ] file.tar [&lt;options&gt;...] [--] [&lt;file&gt;...]</code></dt> <dd>\n<p class=\"first\">Create or extract a tar or zip archive. Options are:</p> <dl class=\"last docutils\"> <dt><code>--</code></dt> <dd>Stop interpreting options and treat all remaining arguments as file names even if they start in <code>-</code>.</dd> <dt><code>--files-from=&lt;file&gt;</code></dt> <dd>Read file names from the given file, one per line. Blank lines are ignored. Lines may not start in <code>-</code> except for <code>--add-file=&lt;name&gt;</code> to add files whose names start in <code>-</code>.</dd> <dt><code>--mtime=&lt;date&gt;</code></dt> <dd>Specify modification time recorded in tarball entries.</dd> <dt><code>--format=&lt;format&gt;</code></dt> <dd>Specify the format of the archive to be created. Supported formats are: <code>7zip</code>, <code>gnutar</code>, <code>pax</code>, <code>paxr</code> (restricted pax, default), and <code>zip</code>.</dd> </dl> </dd> <dt><code>time &lt;command&gt; [&lt;args&gt;...]</code></dt> <dd>Run command and return elapsed time.</dd> <dt><code>touch &lt;file&gt;</code></dt> <dd>Touch a file.</dd> <dt><code>touch_nocreate &lt;file&gt;</code></dt> <dd>Touch a file if it exists but do not create it. If a file does not exist it will be silently ignored.</dd> </dl>  <h3 id=\"unix-specific-command-line-tools\">UNIX-specific Command-Line Tools</h3> <p>The following <code>cmake -E</code> commands are available only on UNIX:</p> <dl class=\"docutils\"> <dt><code>create_symlink &lt;old&gt; &lt;new&gt;</code></dt> <dd>Create a symbolic link <code>&lt;new&gt;</code> naming <code>&lt;old&gt;</code>.</dd> </dl>   <h3 id=\"windows-specific-command-line-tools\">Windows-specific Command-Line Tools</h3> <p>The following <code>cmake -E</code> commands are available only on Windows:</p> <dl class=\"docutils\"> <dt><code>delete_regv &lt;key&gt;</code></dt> <dd>Delete Windows registry value.</dd> <dt><code>env_vs8_wince &lt;sdkname&gt;</code></dt> <dd>Displays a batch file which sets the environment for the provided Windows CE SDK installed in VS2005.</dd> <dt><code>env_vs9_wince &lt;sdkname&gt;</code></dt> <dd>Displays a batch file which sets the environment for the provided Windows CE SDK installed in VS2008.</dd> <dt><code>write_regv &lt;key&gt; &lt;value&gt;</code></dt> <dd>Write Windows registry value.</dd> </dl>    <h2 id=\"see-also\">See Also</h2> <p>The following resources are available to get help using CMake:</p> <dl class=\"docutils\"> <dt>Home Page</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org\">https://cmake.org</a></p> <p class=\"last\">The primary starting point for learning about CMake.</p> </dd> <dt>Frequently Asked Questions</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/Wiki/CMake_FAQ\">https://cmake.org/Wiki/CMake_FAQ</a></p> <p class=\"last\">A Wiki is provided containing answers to frequently asked questions.</p> </dd> <dt>Online Documentation</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/documentation\">https://cmake.org/documentation</a></p> <p class=\"last\">Links to available documentation may be found on this web page.</p> </dd> <dt>Mailing List</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/mailing-lists\">https://cmake.org/mailing-lists</a></p> <p class=\"last\">For help and discussion about using cmake, a mailing list is provided at <a class=\"reference external\" href=\"mailto:cmake%40cmake.org\">cmake<span>@</span>cmake<span>.</span>org</a>. The list is member-post-only but one may sign up on the CMake web page. Please first read the full documentation at <a class=\"reference external\" href=\"https://cmake.org\">https://cmake.org</a> before posting questions to the list.</p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake.1.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake.1.html</a>\n  </p>\n</div>\n","manual/cmake-policies.7":"<h1 id=\"manual:cmake-policies(7)\">cmake-policies(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#introduction\" id=\"id2\">Introduction</a></li> <li><a class=\"reference internal\" href=\"#all-policies\" id=\"id3\">All Policies</a></li> </ul>\n   <h2 id=\"introduction\">Introduction</h2> <p>Policies in CMake are used to preserve backward compatible behavior across multiple releases. When a new policy is introduced, newer CMake versions will begin to warn about the backward compatible behavior. It is possible to disable the warning by explicitly requesting the OLD, or backward compatible behavior using the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command. It is also possible to request <code>NEW</code>, or non-backward compatible behavior for a policy, also avoiding the warning. Each policy can also be set to either <code>NEW</code> or <code>OLD</code> behavior explicitly on the command line with the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;\" id=\"index-0-variable:CMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;\"><code>CMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;</code></a> variable.</p> <p>A policy is a deprecation mechanism and not a reliable feature toggle. A policy should almost never be set to <code>OLD</code>, except to silence warnings in an otherwise frozen or stable codebase, or temporarily as part of a larger migration path. The <code>OLD</code> behavior of each policy is undesirable and will be replaced with an error condition in a future release.</p> <p>The <a class=\"reference internal\" href=\"../command/cmake_minimum_required#command:cmake_minimum_required\" title=\"cmake_minimum_required\" id=\"index-0-command:cmake_minimum_required\"><code>cmake_minimum_required()</code></a> command does more than report an error if a too-old version of CMake is used to build a project. It also sets all policies introduced in that CMake version or earlier to <code>NEW</code> behavior. To manage policies without increasing the minimum required CMake version, the <a class=\"reference internal\" href=\"../command/if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if(POLICY)</code></a> command may be used:</p> <pre data-language=\"cmake\">if(POLICY CMP0990)\n  cmake_policy(SET CMP0990 NEW)\nendif()\n</pre> <p>This has the effect of using the <code>NEW</code> behavior with newer CMake releases which users may be using and not issuing a compatibility warning.</p> <p>The setting of a policy is confined in some cases to not propagate to the parent scope. For example, if the files read by the <a class=\"reference internal\" href=\"../command/include#command:include\" title=\"include\" id=\"index-0-command:include\"><code>include()</code></a> command or the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> command contain a use of <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-1-command:cmake_policy\"><code>cmake_policy()</code></a>, that policy setting will not affect the caller by default. Both commands accept an optional <code>NO_POLICY_SCOPE</code> keyword to control this behavior.</p> <p>The <a class=\"reference internal\" href=\"../variable/cmake_minimum_required_version#variable:CMAKE_MINIMUM_REQUIRED_VERSION\" title=\"CMAKE_MINIMUM_REQUIRED_VERSION\" id=\"index-0-variable:CMAKE_MINIMUM_REQUIRED_VERSION\"><code>CMAKE_MINIMUM_REQUIRED_VERSION</code></a> variable may also be used to determine whether to report an error on use of deprecated macros or functions.</p>   <h2 id=\"all-policies\">All Policies</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0000\">CMP0000</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0001\">CMP0001</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0002\">CMP0002</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0003\">CMP0003</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0004\">CMP0004</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0005\">CMP0005</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0006\">CMP0006</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0007\">CMP0007</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0008\">CMP0008</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0009\">CMP0009</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0010\">CMP0010</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0011\">CMP0011</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0012\">CMP0012</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0013\">CMP0013</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0014\">CMP0014</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0015\">CMP0015</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0016\">CMP0016</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0017\">CMP0017</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0018\">CMP0018</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0019\">CMP0019</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0020\">CMP0020</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0021\">CMP0021</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0022\">CMP0022</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0023\">CMP0023</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0024\">CMP0024</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0025\">CMP0025</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0026\">CMP0026</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0027\">CMP0027</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0028\">CMP0028</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0029\">CMP0029</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0030\">CMP0030</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0031\">CMP0031</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0032\">CMP0032</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0033\">CMP0033</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0034\">CMP0034</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0035\">CMP0035</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0036\">CMP0036</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0037\">CMP0037</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0038\">CMP0038</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0039\">CMP0039</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0040\">CMP0040</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0041\">CMP0041</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0042\">CMP0042</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0043\">CMP0043</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0044\">CMP0044</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0045\">CMP0045</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0046\">CMP0046</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0047\">CMP0047</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0048\">CMP0048</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0049\">CMP0049</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0050\">CMP0050</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0051\">CMP0051</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0052\">CMP0052</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0053\">CMP0053</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0054\">CMP0054</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0055\">CMP0055</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0056\">CMP0056</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0057\">CMP0057</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0058\">CMP0058</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0059\">CMP0059</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0060\">CMP0060</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0061\">CMP0061</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0062\">CMP0062</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0063\">CMP0063</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0064\">CMP0064</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../policy/cmp0065\">CMP0065</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-policies.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-policies.7.html</a>\n  </p>\n</div>\n","manual/cmake-generator-expressions.7":"<h1 id=\"manual:cmake-generator-expressions(7)\">cmake-generator-expressions(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#introduction\" id=\"id2\">Introduction</a></li> <li><a class=\"reference internal\" href=\"#logical-expressions\" id=\"id3\">Logical Expressions</a></li> <li><a class=\"reference internal\" href=\"#informational-expressions\" id=\"id4\">Informational Expressions</a></li> <li><a class=\"reference internal\" href=\"#output-expressions\" id=\"id5\">Output Expressions</a></li> </ul>\n   <h2 id=\"introduction\">Introduction</h2> <p>Generator expressions are evaluated during build system generation to produce information specific to each build configuration.</p> <p>Generator expressions are allowed in the context of many target properties, such as <a class=\"reference internal\" href=\"../prop_tgt/link_libraries#prop_tgt:LINK_LIBRARIES\" title=\"LINK_LIBRARIES\" id=\"index-0-prop_tgt:LINK_LIBRARIES\"><code>LINK_LIBRARIES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_tgt:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> and others. They may also be used when using commands to populate those properties, such as <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a>, <a class=\"reference internal\" href=\"../command/target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-0-command:target_include_directories\"><code>target_include_directories()</code></a>, <a class=\"reference internal\" href=\"../command/target_compile_definitions#command:target_compile_definitions\" title=\"target_compile_definitions\" id=\"index-0-command:target_compile_definitions\"><code>target_compile_definitions()</code></a> and others.</p> <p>This means that they enable conditional linking, conditional definitions used when compiling, and conditional include directories and more. The conditions may be based on the build configuration, target properties, platform information or any other queryable information.</p>   <h2 id=\"logical-expressions\">Logical Expressions</h2> <p>Logical expressions are used to create conditional output. The basic expressions are the <code>0</code> and <code>1</code> expressions. Because other logical expressions evaluate to either <code>0</code> or <code>1</code>, they can be composed to create conditional output:</p> <pre data-language=\"python\">$&lt;$&lt;CONFIG:Debug&gt;:DEBUG_MODE&gt;\n</pre> <p>expands to <code>DEBUG_MODE</code> when the <code>Debug</code> configuration is used, and otherwise expands to nothing.</p> <p>Available logical expressions are:</p> <dl class=\"docutils\"> <dt><code>$&lt;BOOL:...&gt;</code></dt> <dd>\n<code>1</code> if the <code>...</code> is true, else <code>0</code>\n</dd> <dt><code>$&lt;AND:?[,?]...&gt;</code></dt> <dd>\n<p class=\"first\"><code>1</code> if all <code>?</code> are <code>1</code>, else <code>0</code></p> <p class=\"last\">The <code>?</code> must always be either <code>0</code> or <code>1</code> in boolean expressions.</p> </dd> <dt><code>$&lt;OR:?[,?]...&gt;</code></dt> <dd>\n<code>0</code> if all <code>?</code> are <code>0</code>, else <code>1</code>\n</dd> <dt><code>$&lt;NOT:?&gt;</code></dt> <dd>\n<code>0</code> if <code>?</code> is <code>1</code>, else <code>1</code>\n</dd> <dt><code>$&lt;STREQUAL:a,b&gt;</code></dt> <dd>\n<code>1</code> if <code>a</code> is STREQUAL <code>b</code>, else <code>0</code>\n</dd> <dt><code>$&lt;EQUAL:a,b&gt;</code></dt> <dd>\n<code>1</code> if <code>a</code> is EQUAL <code>b</code> in a numeric comparison, else <code>0</code>\n</dd> <dt><code>$&lt;CONFIG:cfg&gt;</code></dt> <dd>\n<code>1</code> if config is <code>cfg</code>, else <code>0</code>. This is a case-insensitive comparison. The mapping in <a class=\"reference internal\" href=\"#\" title=\"MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;\"><code>MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;</code></a> is also considered by this expression when it is evaluated on a property on an <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target.</dd> <dt><code>$&lt;PLATFORM_ID:comp&gt;</code></dt> <dd>\n<code>1</code> if the CMake-id of the platform matches <code>comp</code>, otherwise <code>0</code>.</dd> <dt><code>$&lt;C_COMPILER_ID:comp&gt;</code></dt> <dd>\n<code>1</code> if the CMake-id of the C compiler matches <code>comp</code>, otherwise <code>0</code>.</dd> <dt><code>$&lt;CXX_COMPILER_ID:comp&gt;</code></dt> <dd>\n<code>1</code> if the CMake-id of the CXX compiler matches <code>comp</code>, otherwise <code>0</code>.</dd> <dt><code>$&lt;VERSION_GREATER:v1,v2&gt;</code></dt> <dd>\n<code>1</code> if <code>v1</code> is a version greater than <code>v2</code>, else <code>0</code>.</dd> <dt><code>$&lt;VERSION_LESS:v1,v2&gt;</code></dt> <dd>\n<code>1</code> if <code>v1</code> is a version less than <code>v2</code>, else <code>0</code>.</dd> <dt><code>$&lt;VERSION_EQUAL:v1,v2&gt;</code></dt> <dd>\n<code>1</code> if <code>v1</code> is the same version as <code>v2</code>, else <code>0</code>.</dd> <dt><code>$&lt;C_COMPILER_VERSION:ver&gt;</code></dt> <dd>\n<code>1</code> if the version of the C compiler matches <code>ver</code>, otherwise <code>0</code>.</dd> <dt><code>$&lt;CXX_COMPILER_VERSION:ver&gt;</code></dt> <dd>\n<code>1</code> if the version of the CXX compiler matches <code>ver</code>, otherwise <code>0</code>.</dd> <dt><code>$&lt;TARGET_POLICY:pol&gt;</code></dt> <dd>\n<code>1</code> if the policy <code>pol</code> was NEW when the ‘head’ target was created, else <code>0</code>. If the policy was not set, the warning message for the policy will be emitted. This generator expression only works for a subset of policies.</dd> <dt><code>$&lt;COMPILE_FEATURES:feature[,feature]...&gt;</code></dt> <dd>\n<code>1</code> if all of the <code>feature</code> features are available for the ‘head’ target, and <code>0</code> otherwise. If this expression is used while evaluating the link implementation of a target and if any dependency transitively increases the required <a class=\"reference internal\" href=\"../prop_tgt/c_standard#prop_tgt:C_STANDARD\" title=\"C_STANDARD\" id=\"index-0-prop_tgt:C_STANDARD\"><code>C_STANDARD</code></a> or <a class=\"reference internal\" href=\"../prop_tgt/cxx_standard#prop_tgt:CXX_STANDARD\" title=\"CXX_STANDARD\" id=\"index-0-prop_tgt:CXX_STANDARD\"><code>CXX_STANDARD</code></a> for the ‘head’ target, an error is reported. See the <a class=\"reference internal\" href=\"cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</dd> <dt><code>$&lt;COMPILE_LANGUAGE:lang&gt;</code></dt> <dd>\n<p class=\"first\"><code>1</code> when the language used for compilation unit matches <code>lang</code>, otherwise <code>0</code>. This expression used to specify compile options for source files of a particular language in a target. For example, to specify the use of the <code>-fno-exceptions</code> compile option (compiler id checks elided):</p> <pre data-language=\"cmake\">add_executable(myapp main.cpp foo.c bar.cpp)\ntarget_compile_options(myapp\n  PRIVATE $&lt;$&lt;COMPILE_LANGUAGE:CXX&gt;:-fno-exceptions&gt;\n)\n</pre> <p>This generator expression has limited use because it is not possible to use it with the Visual Studio generators. Portable buildsystems would not use this expression, and would create separate libraries for each source file language instead:</p> <pre data-language=\"cmake\">add_library(myapp_c foo.c)\nadd_library(myapp_cxx foo.c)\ntarget_compile_options(myapp_cxx PUBLIC -fno-exceptions)\nadd_executable(myapp main.cpp)\ntarget_link_libraries(myapp myapp_c myapp_cxx)\n</pre> <p>The <code>Makefile</code> and <code>Ninja</code> based generators can also use this expression to specify compile-language specific compile definitions and include directories:</p> <pre data-language=\"cmake\">add_executable(myapp main.cpp foo.c bar.cpp)\ntarget_compile_definitions(myapp\n  PRIVATE $&lt;$&lt;COMPILE_LANGUAGE:CXX&gt;:COMPILING_CXX&gt;\n)\ntarget_include_directories(myapp\n  PRIVATE $&lt;$&lt;COMPILE_LANGUAGE:CXX&gt;:/opt/foo/cxx_headers&gt;\n)\n</pre> </dd> </dl>   <h2 id=\"informational-expressions\">Informational Expressions</h2> <p>These expressions expand to some information. The information may be used directly, eg:</p> <pre data-language=\"python\">include_directories(/usr/include/$&lt;CXX_COMPILER_ID&gt;/)\n</pre> <p>expands to <code>/usr/include/GNU/</code> or <code>/usr/include/Clang/</code> etc, depending on the Id of the compiler.</p> <p>These expressions may also may be combined with logical expressions:</p> <pre data-language=\"python\">$&lt;$&lt;VERSION_LESS:$&lt;CXX_COMPILER_VERSION&gt;,4.2.0&gt;:OLD_COMPILER&gt;\n</pre> <p>expands to <code>OLD_COMPILER</code> if the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_VERSION\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_VERSION\"><code>CMAKE_CXX_COMPILER_VERSION</code></a> is less than 4.2.0.</p> <p>Available informational expressions are:</p> <dl class=\"docutils\"> <dt><code>$&lt;CONFIGURATION&gt;</code></dt> <dd>Configuration name. Deprecated. Use <code>CONFIG</code> instead.</dd> <dt><code>$&lt;CONFIG&gt;</code></dt> <dd>Configuration name</dd> <dt><code>$&lt;PLATFORM_ID&gt;</code></dt> <dd>The CMake-id of the platform. See also the <a class=\"reference internal\" href=\"../variable/cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-0-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a> variable.</dd> <dt><code>$&lt;C_COMPILER_ID&gt;</code></dt> <dd>The CMake-id of the C compiler used. See also the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_ID\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\"><code>CMAKE_&lt;LANG&gt;_COMPILER_ID</code></a> variable.</dd> <dt><code>$&lt;CXX_COMPILER_ID&gt;</code></dt> <dd>The CMake-id of the CXX compiler used. See also the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_ID\" id=\"index-1-variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\"><code>CMAKE_&lt;LANG&gt;_COMPILER_ID</code></a> variable.</dd> <dt><code>$&lt;C_COMPILER_VERSION&gt;</code></dt> <dd>The version of the C compiler used. See also the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_VERSION\" id=\"index-1-variable:CMAKE_&lt;LANG&gt;_COMPILER_VERSION\"><code>CMAKE_&lt;LANG&gt;_COMPILER_VERSION</code></a> variable.</dd> <dt><code>$&lt;CXX_COMPILER_VERSION&gt;</code></dt> <dd>The version of the CXX compiler used. See also the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_VERSION\" id=\"index-2-variable:CMAKE_&lt;LANG&gt;_COMPILER_VERSION\"><code>CMAKE_&lt;LANG&gt;_COMPILER_VERSION</code></a> variable.</dd> <dt><code>$&lt;TARGET_FILE:tgt&gt;</code></dt> <dd>Full path to main file (.exe, .so.1.2, .a) where <code>tgt</code> is the name of a target.</dd> <dt><code>$&lt;TARGET_FILE_NAME:tgt&gt;</code></dt> <dd>Name of main file (.exe, .so.1.2, .a).</dd> <dt><code>$&lt;TARGET_FILE_DIR:tgt&gt;</code></dt> <dd>Directory of main file (.exe, .so.1.2, .a).</dd> <dt><code>$&lt;TARGET_LINKER_FILE:tgt&gt;</code></dt> <dd>File used to link (.a, .lib, .so) where <code>tgt</code> is the name of a target.</dd> <dt><code>$&lt;TARGET_LINKER_FILE_NAME:tgt&gt;</code></dt> <dd>Name of file used to link (.a, .lib, .so).</dd> <dt><code>$&lt;TARGET_LINKER_FILE_DIR:tgt&gt;</code></dt> <dd>Directory of file used to link (.a, .lib, .so).</dd> <dt><code>$&lt;TARGET_SONAME_FILE:tgt&gt;</code></dt> <dd>File with soname (.so.3) where <code>tgt</code> is the name of a target.</dd> <dt><code>$&lt;TARGET_SONAME_FILE_NAME:tgt&gt;</code></dt> <dd>Name of file with soname (.so.3).</dd> <dt><code>$&lt;TARGET_SONAME_FILE_DIR:tgt&gt;</code></dt> <dd>Directory of with soname (.so.3).</dd> <dt><code>$&lt;TARGET_PDB_FILE:tgt&gt;</code></dt> <dd>\n<p class=\"first\">Full path to the linker generated program database file (.pdb) where <code>tgt</code> is the name of a target.</p> <p class=\"last\">See also the <a class=\"reference internal\" href=\"../prop_tgt/pdb_name#prop_tgt:PDB_NAME\" title=\"PDB_NAME\" id=\"index-0-prop_tgt:PDB_NAME\"><code>PDB_NAME</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/pdb_output_directory#prop_tgt:PDB_OUTPUT_DIRECTORY\" title=\"PDB_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:PDB_OUTPUT_DIRECTORY\"><code>PDB_OUTPUT_DIRECTORY</code></a> target properties and their configuration specific variants <a class=\"reference internal\" href=\"#\" title=\"PDB_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:PDB_NAME_&lt;CONFIG&gt;\"><code>PDB_NAME_&lt;CONFIG&gt;</code></a> and <a class=\"reference internal\" href=\"#\" title=\"PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a>.</p> </dd> <dt><code>$&lt;TARGET_PDB_FILE_NAME:tgt&gt;</code></dt> <dd>Name of the linker generated program database file (.pdb).</dd> <dt><code>$&lt;TARGET_PDB_FILE_DIR:tgt&gt;</code></dt> <dd>Directory of the linker generated program database file (.pdb).</dd> <dt><code>$&lt;TARGET_PROPERTY:tgt,prop&gt;</code></dt> <dd>\n<p class=\"first\">Value of the property <code>prop</code> on the target <code>tgt</code>.</p> <p class=\"last\">Note that <code>tgt</code> is not added as a dependency of the target this expression is evaluated on.</p> </dd> <dt><code>$&lt;TARGET_PROPERTY:prop&gt;</code></dt> <dd>Value of the property <code>prop</code> on the target on which the generator expression is evaluated.</dd> <dt><code>$&lt;INSTALL_PREFIX&gt;</code></dt> <dd>Content of the install prefix when the target is exported via <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(EXPORT)</code></a> and empty otherwise.</dd> <dt><code>$&lt;COMPILE_LANGUAGE&gt;</code></dt> <dd>The compile language of source files when evaluating compile options. See the unary version for notes about portability of this generator expression.</dd> </dl>   <h2 id=\"output-expressions\">Output Expressions</h2> <p>These expressions generate output, in some cases depending on an input. These expressions may be combined with other expressions for information or logical comparison:</p> <pre data-language=\"python\">-I$&lt;JOIN:$&lt;TARGET_PROPERTY:INCLUDE_DIRECTORIES&gt;, -I&gt;\n</pre> <p>generates a string of the entries in the <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-1-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a> target property with each entry preceeded by <code>-I</code>. Note that a more-complete use in this situation would require first checking if the INCLUDE_DIRECTORIES property is non-empty:</p> <pre data-language=\"python\">$&lt;$&lt;BOOL:${prop}&gt;:-I$&lt;JOIN:${prop}, -I&gt;&gt;\n</pre> <p>where <code>${prop}</code> refers to a helper variable:</p> <pre data-language=\"python\">set(prop \"$&lt;TARGET_PROPERTY:INCLUDE_DIRECTORIES&gt;\")\n</pre> <p>Available output expressions are:</p> <dl class=\"docutils\"> <dt><code>$&lt;0:...&gt;</code></dt> <dd>Empty string (ignores <code>...</code>)</dd> <dt><code>$&lt;1:...&gt;</code></dt> <dd>Content of <code>...</code>\n</dd> <dt><code>$&lt;JOIN:list,...&gt;</code></dt> <dd>Joins the list with the content of <code>...</code>\n</dd> <dt><code>$&lt;ANGLE-R&gt;</code></dt> <dd>A literal <code>&gt;</code>. Used to compare strings which contain a <code>&gt;</code> for example.</dd> <dt><code>$&lt;COMMA&gt;</code></dt> <dd>A literal <code>,</code>. Used to compare strings which contain a <code>,</code> for example.</dd> <dt><code>$&lt;SEMICOLON&gt;</code></dt> <dd>A literal <code>;</code>. Used to prevent list expansion on an argument with <code>;</code>.</dd> <dt><code>$&lt;TARGET_NAME:...&gt;</code></dt> <dd>Marks <code>...</code> as being the name of a target. This is required if exporting targets to multiple dependent export sets. The <code>...</code> must be a literal name of a target- it may not contain generator expressions.</dd> <dt><code>$&lt;LINK_ONLY:...&gt;</code></dt> <dd>Content of <code>...</code> except when evaluated in a link interface while propagating <a class=\"reference internal\" href=\"cmake-buildsystem.7#target-usage-requirements\"><span>Transitive Usage Requirements</span></a>, in which case it is the empty string. Intended for use only in an <a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-0-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> target property, perhaps via the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-1-command:target_link_libraries\"><code>target_link_libraries()</code></a> command, to specify private link dependencies without other usage requirements.</dd> <dt><code>$&lt;INSTALL_INTERFACE:...&gt;</code></dt> <dd>Content of <code>...</code> when the property is exported using <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install(EXPORT)</code></a>, and empty otherwise.</dd> <dt><code>$&lt;BUILD_INTERFACE:...&gt;</code></dt> <dd>Content of <code>...</code> when the property is exported using <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-0-command:export\"><code>export()</code></a>, or when the target is used by another target in the same buildsystem. Expands to the empty string otherwise.</dd> <dt><code>$&lt;LOWER_CASE:...&gt;</code></dt> <dd>Content of <code>...</code> converted to lower case.</dd> <dt><code>$&lt;UPPER_CASE:...&gt;</code></dt> <dd>Content of <code>...</code> converted to upper case.</dd> <dt><code>$&lt;MAKE_C_IDENTIFIER:...&gt;</code></dt> <dd>Content of <code>...</code> converted to a C identifier.</dd> <dt><code>$&lt;TARGET_OBJECTS:objLib&gt;</code></dt> <dd>List of objects resulting from build of <code>objLib</code>. <code>objLib</code> must be an object of type <code>OBJECT_LIBRARY</code>. This expression may only be used in the sources of <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> and <a class=\"reference internal\" href=\"../command/add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> commands.</dd> <dt><code>$&lt;SHELL_PATH:...&gt;</code></dt> <dd>Content of <code>...</code> converted to shell path style. For example, slashes are converted to backslashes in Windows shells and drive letters are converted to posix paths in MSYS shells. The <code>...</code> must be an absolute path.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-generator-expressions.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-generator-expressions.7.html</a>\n  </p>\n</div>\n","manual/cmake-modules.7":"<h1 id=\"manual:cmake-modules(7)\">cmake-modules(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#all-modules\" id=\"id2\">All Modules</a></li> </ul>\n   <h2 id=\"all-modules\">All Modules</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/addfiledependencies\">AddFileDependencies</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/bundleutilities\">BundleUtilities</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkccompilerflag\">CheckCCompilerFlag</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkcsourcecompiles\">CheckCSourceCompiles</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkcsourceruns\">CheckCSourceRuns</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkcxxcompilerflag\">CheckCXXCompilerFlag</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkcxxsourcecompiles\">CheckCXXSourceCompiles</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkcxxsourceruns\">CheckCXXSourceRuns</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkcxxsymbolexists\">CheckCXXSymbolExists</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkfortrancompilerflag\">CheckFortranCompilerFlag</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkfortranfunctionexists\">CheckFortranFunctionExists</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkfortransourcecompiles\">CheckFortranSourceCompiles</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkfunctionexists\">CheckFunctionExists</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkincludefilecxx\">CheckIncludeFileCXX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkincludefile\">CheckIncludeFile</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkincludefiles\">CheckIncludeFiles</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checklanguage\">CheckLanguage</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checklibraryexists\">CheckLibraryExists</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkprototypedefinition\">CheckPrototypeDefinition</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkstructhasmember\">CheckStructHasMember</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checksymbolexists\">CheckSymbolExists</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checktypesize\">CheckTypeSize</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/checkvariableexists\">CheckVariableExists</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakeaddfortransubdirectory\">CMakeAddFortranSubdirectory</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakebackwardcompatibilitycxx\">CMakeBackwardCompatibilityCXX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakedependentoption\">CMakeDependentOption</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakedeterminevsservicepack\">CMakeDetermineVSServicePack</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakeexpandimportedtargets\">CMakeExpandImportedTargets</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakefinddependencymacro\">CMakeFindDependencyMacro</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakefindframeworks\">CMakeFindFrameworks</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakefindpackagemode\">CMakeFindPackageMode</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakeforcecompiler\">CMakeForceCompiler</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakegraphvizoptions\">CMakeGraphVizOptions</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakepackageconfighelpers\">CMakePackageConfigHelpers</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakeparsearguments\">CMakeParseArguments</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakeprinthelpers\">CMakePrintHelpers</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakeprintsysteminformation\">CMakePrintSystemInformation</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakepushcheckstate\">CMakePushCheckState</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cmakeverifymanifest\">CMakeVerifyManifest</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cpackbundle\">CPackBundle</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cpackcomponent\">CPackComponent</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cpackcygwin\">CPackCygwin</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cpackdeb\">CPackDeb</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cpackdmg\">CPackDMG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cpackifw\">CPackIFW</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cpacknsis\">CPackNSIS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cpackpackagemaker\">CPackPackageMaker</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cpackrpm\">CPackRPM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cpack\">CPack</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/cpackwix\">CPackWIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/ctest\">CTest</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/ctestcoveragecollectgcov\">CTestCoverageCollectGCOV</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/ctestscriptmode\">CTestScriptMode</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/ctestuselaunchers\">CTestUseLaunchers</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/dart\">Dart</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/deployqt4\">DeployQt4</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/documentation\">Documentation</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/externaldata\">ExternalData</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/externalproject\">ExternalProject</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/featuresummary\">FeatureSummary</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findalsa\">FindALSA</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findarmadillo\">FindArmadillo</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findaspell\">FindASPELL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findavifile\">FindAVIFile</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findbison\">FindBISON</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findblas\">FindBLAS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findbacktrace\">FindBacktrace</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findboost\">FindBoost</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findbullet\">FindBullet</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findbzip2\">FindBZip2</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findcable\">FindCABLE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findcoin3d\">FindCoin3D</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findcuda\">FindCUDA</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findcups\">FindCups</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findcurl\">FindCURL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findcurses\">FindCurses</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findcvs\">FindCVS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findcxxtest\">FindCxxTest</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findcygwin\">FindCygwin</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/finddart\">FindDart</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/finddcmtk\">FindDCMTK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/finddevil\">FindDevIL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/finddoxygen\">FindDoxygen</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findexpat\">FindEXPAT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findflex\">FindFLEX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findfltk2\">FindFLTK2</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findfltk\">FindFLTK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findfreetype\">FindFreetype</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findgccxml\">FindGCCXML</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findgdal\">FindGDAL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findgettext\">FindGettext</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findgif\">FindGIF</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findgit\">FindGit</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findglew\">FindGLEW</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findglut\">FindGLUT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findgnuplot\">FindGnuplot</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findgnutls\">FindGnuTLS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findgsl\">FindGSL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findgtest\">FindGTest</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findgtk2\">FindGTK2</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findgtk\">FindGTK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findhdf5\">FindHDF5</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findhg\">FindHg</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findhspell\">FindHSPELL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findhtmlhelp\">FindHTMLHelp</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findice\">FindIce</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findicotool\">FindIcotool</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findimagemagick\">FindImageMagick</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findintl\">FindIntl</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/finditk\">FindITK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findjasper\">FindJasper</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findjava\">FindJava</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findjni\">FindJNI</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findjpeg\">FindJPEG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findkde3\">FindKDE3</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findkde4\">FindKDE4</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findlapack\">FindLAPACK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findlatex\">FindLATEX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findlibarchive\">FindLibArchive</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findliblzma\">FindLibLZMA</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findlibxml2\">FindLibXml2</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findlibxslt\">FindLibXslt</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findlua50\">FindLua50</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findlua51\">FindLua51</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findlua\">FindLua</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findmatlab\">FindMatlab</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findmfc\">FindMFC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findmotif\">FindMotif</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findmpeg2\">FindMPEG2</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findmpeg\">FindMPEG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findmpi\">FindMPI</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findopenal\">FindOpenAL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findopencl\">FindOpenCL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findopengl\">FindOpenGL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findopenmp\">FindOpenMP</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findopenscenegraph\">FindOpenSceneGraph</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findopenssl\">FindOpenSSL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findopenthreads\">FindOpenThreads</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosganimation\">FindosgAnimation</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgdb\">FindosgDB</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosg_functions\">Findosg_functions</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgfx\">FindosgFX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgga\">FindosgGA</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgintrospection\">FindosgIntrospection</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgmanipulator\">FindosgManipulator</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgparticle\">FindosgParticle</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgpresentation\">FindosgPresentation</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgproducer\">FindosgProducer</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgqt\">FindosgQt</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosg\">Findosg</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgshadow\">FindosgShadow</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgsim\">FindosgSim</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgterrain\">FindosgTerrain</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgtext\">FindosgText</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgutil\">FindosgUtil</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgviewer\">FindosgViewer</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgvolume\">FindosgVolume</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findosgwidget\">FindosgWidget</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findpackagehandlestandardargs\">FindPackageHandleStandardArgs</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findpackagemessage\">FindPackageMessage</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findperllibs\">FindPerlLibs</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findperl\">FindPerl</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findphp4\">FindPHP4</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findphysfs\">FindPhysFS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findpike\">FindPike</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findpkgconfig\">FindPkgConfig</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findpng\">FindPNG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findpostgresql\">FindPostgreSQL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findproducer\">FindProducer</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findprotobuf\">FindProtobuf</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findpythoninterp\">FindPythonInterp</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findpythonlibs\">FindPythonLibs</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findqt3\">FindQt3</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findqt4\">FindQt4</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findqt\">FindQt</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findquicktime\">FindQuickTime</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findrti\">FindRTI</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findruby\">FindRuby</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findsdl_image\">FindSDL_image</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findsdl_mixer\">FindSDL_mixer</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findsdl_net\">FindSDL_net</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findsdl\">FindSDL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findsdl_sound\">FindSDL_sound</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findsdl_ttf\">FindSDL_ttf</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findselfpackers\">FindSelfPackers</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findsquish\">FindSquish</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findsubversion\">FindSubversion</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findswig\">FindSWIG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findtcl\">FindTCL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findtclsh\">FindTclsh</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findtclstub\">FindTclStub</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findthreads\">FindThreads</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findtiff\">FindTIFF</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findunixcommands\">FindUnixCommands</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findvtk\">FindVTK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findwget\">FindWget</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findwish\">FindWish</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findwxwidgets\">FindwxWidgets</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findwxwindows\">FindwxWindows</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findxctest\">FindXCTest</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findxalanc\">FindXalanC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findxercesc\">FindXercesC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findx11\">FindX11</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findxmlrpc\">FindXMLRPC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/findzlib\">FindZLIB</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/fortrancinterface\">FortranCInterface</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/generateexportheader\">GenerateExportHeader</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/getprerequisites\">GetPrerequisites</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/gnuinstalldirs\">GNUInstallDirs</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/installrequiredsystemlibraries\">InstallRequiredSystemLibraries</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/macroaddfiledependencies\">MacroAddFileDependencies</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/processorcount\">ProcessorCount</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/selectlibraryconfigurations\">SelectLibraryConfigurations</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/squishtestscript\">SquishTestScript</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/testbigendian\">TestBigEndian</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/testcxxacceptsflag\">TestCXXAcceptsFlag</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/testforansiforscope\">TestForANSIForScope</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/testforansistreamheaders\">TestForANSIStreamHeaders</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/testforsstream\">TestForSSTREAM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/testforstdnamespace\">TestForSTDNamespace</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/useecos\">UseEcos</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/usejavaclassfilelist\">UseJavaClassFilelist</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/usejava\">UseJava</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/usejavasymlinks\">UseJavaSymlinks</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/usepkgconfig\">UsePkgConfig</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/useswig\">UseSWIG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/usewxwidgets\">UsewxWidgets</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/use_wxwindows\">Use_wxWindows</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/writebasicconfigversionfile\">WriteBasicConfigVersionFile</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../module/writecompilerdetectionheader\">WriteCompilerDetectionHeader</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-modules.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-modules.7.html</a>\n  </p>\n</div>\n","manual/cmake-properties.7":"<h1 id=\"manual:cmake-properties(7)\">cmake-properties(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#properties-of-global-scope\" id=\"id2\">Properties of Global Scope</a></li> <li><a class=\"reference internal\" href=\"#properties-on-directories\" id=\"id3\">Properties on Directories</a></li> <li><a class=\"reference internal\" href=\"#properties-on-targets\" id=\"id4\">Properties on Targets</a></li> <li><a class=\"reference internal\" href=\"#properties-on-tests\" id=\"id5\">Properties on Tests</a></li> <li><a class=\"reference internal\" href=\"#properties-on-source-files\" id=\"id6\">Properties on Source Files</a></li> <li><a class=\"reference internal\" href=\"#properties-on-cache-entries\" id=\"id7\">Properties on Cache Entries</a></li> <li><a class=\"reference internal\" href=\"#properties-on-installed-files\" id=\"id8\">Properties on Installed Files</a></li> <li><a class=\"reference internal\" href=\"#deprecated-properties-on-directories\" id=\"id9\">Deprecated Properties on Directories</a></li> <li><a class=\"reference internal\" href=\"#deprecated-properties-on-targets\" id=\"id10\">Deprecated Properties on Targets</a></li> <li><a class=\"reference internal\" href=\"#deprecated-properties-on-source-files\" id=\"id11\">Deprecated Properties on Source Files</a></li> </ul>\n   <h2 id=\"global-properties\">Properties of Global Scope</h2>  <ul id=\"properties-of-global-scope\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/allow_duplicate_custom_targets\">ALLOW_DUPLICATE_CUSTOM_TARGETS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/autogen_targets_folder\">AUTOGEN_TARGETS_FOLDER</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/automoc_targets_folder\">AUTOMOC_TARGETS_FOLDER</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/cmake_c_known_features\">CMAKE_C_KNOWN_FEATURES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/cmake_cxx_known_features\">CMAKE_CXX_KNOWN_FEATURES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/debug_configurations\">DEBUG_CONFIGURATIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/disabled_features\">DISABLED_FEATURES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/enabled_features\">ENABLED_FEATURES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/enabled_languages\">ENABLED_LANGUAGES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/find_library_use_lib64_paths\">FIND_LIBRARY_USE_LIB64_PATHS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/find_library_use_openbsd_versioning\">FIND_LIBRARY_USE_OPENBSD_VERSIONING</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/global_depends_debug_mode\">GLOBAL_DEPENDS_DEBUG_MODE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/global_depends_no_cycles\">GLOBAL_DEPENDS_NO_CYCLES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/in_try_compile\">IN_TRY_COMPILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/packages_found\">PACKAGES_FOUND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/packages_not_found\">PACKAGES_NOT_FOUND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/job_pools\">JOB_POOLS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/predefined_targets_folder\">PREDEFINED_TARGETS_FOLDER</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/eclipse_extra_natures\">ECLIPSE_EXTRA_NATURES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/report_undefined_properties\">REPORT_UNDEFINED_PROPERTIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/rule_launch_compile\">RULE_LAUNCH_COMPILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/rule_launch_custom\">RULE_LAUNCH_CUSTOM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/rule_launch_link\">RULE_LAUNCH_LINK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/rule_messages\">RULE_MESSAGES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/target_archives_may_be_shared_libs\">TARGET_ARCHIVES_MAY_BE_SHARED_LIBS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/target_messages\">TARGET_MESSAGES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/target_supports_shared_libs\">TARGET_SUPPORTS_SHARED_LIBS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_gbl/use_folders\">USE_FOLDERS</a></li> </ul>    <h2 id=\"directory-properties\">Properties on Directories</h2>  <ul id=\"properties-on-directories\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/additional_make_clean_files\">ADDITIONAL_MAKE_CLEAN_FILES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/cache_variables\">CACHE_VARIABLES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/clean_no_custom\">CLEAN_NO_CUSTOM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/cmake_configure_depends\">CMAKE_CONFIGURE_DEPENDS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/compile_definitions\">COMPILE_DEFINITIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/compile_options\">COMPILE_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/definitions\">DEFINITIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/exclude_from_all\">EXCLUDE_FROM_ALL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/implicit_depends_include_transform\">IMPLICIT_DEPENDS_INCLUDE_TRANSFORM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/include_directories\">INCLUDE_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/include_regular_expression\">INCLUDE_REGULAR_EXPRESSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/interprocedural_optimization_config\">INTERPROCEDURAL_OPTIMIZATION_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/interprocedural_optimization\">INTERPROCEDURAL_OPTIMIZATION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/link_directories\">LINK_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/listfile_stack\">LISTFILE_STACK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/macros\">MACROS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/parent_directory\">PARENT_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/rule_launch_compile\">RULE_LAUNCH_COMPILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/rule_launch_custom\">RULE_LAUNCH_CUSTOM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/rule_launch_link\">RULE_LAUNCH_LINK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/test_include_file\">TEST_INCLUDE_FILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/variables\">VARIABLES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/vs_global_section_post_section\">VS_GLOBAL_SECTION_POST_&lt;section&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/vs_global_section_pre_section\">VS_GLOBAL_SECTION_PRE_&lt;section&gt;</a></li> </ul>    <h2 id=\"target-properties\">Properties on Targets</h2>  <ul id=\"properties-on-targets\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/aliased_target\">ALIASED_TARGET</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_ant_additional_options\">ANDROID_ANT_ADDITIONAL_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_api\">ANDROID_API</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_api_min\">ANDROID_API_MIN</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_arch\">ANDROID_ARCH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_assets_directories\">ANDROID_ASSETS_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_gui\">ANDROID_GUI</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_jar_dependencies\">ANDROID_JAR_DEPENDENCIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_jar_directories\">ANDROID_JAR_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_java_source_dir\">ANDROID_JAVA_SOURCE_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_native_lib_dependencies\">ANDROID_NATIVE_LIB_DEPENDENCIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_native_lib_directories\">ANDROID_NATIVE_LIB_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_process_max\">ANDROID_PROCESS_MAX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_proguard\">ANDROID_PROGUARD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_proguard_config_path\">ANDROID_PROGUARD_CONFIG_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_secure_props_path\">ANDROID_SECURE_PROPS_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_skip_ant_step\">ANDROID_SKIP_ANT_STEP</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/android_stl_type\">ANDROID_STL_TYPE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/archive_output_directory_config\">ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/archive_output_directory\">ARCHIVE_OUTPUT_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/archive_output_name_config\">ARCHIVE_OUTPUT_NAME_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/archive_output_name\">ARCHIVE_OUTPUT_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/autogen_target_depends\">AUTOGEN_TARGET_DEPENDS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/automoc_moc_options\">AUTOMOC_MOC_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/automoc\">AUTOMOC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/autouic\">AUTOUIC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/autouic_options\">AUTOUIC_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/autorcc\">AUTORCC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/autorcc_options\">AUTORCC_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/binary_dir\">BINARY_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/build_with_install_rpath\">BUILD_WITH_INSTALL_RPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/bundle_extension\">BUNDLE_EXTENSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/bundle\">BUNDLE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/c_extensions\">C_EXTENSIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/c_standard\">C_STANDARD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/c_standard_required\">C_STANDARD_REQUIRED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_bool\">COMPATIBLE_INTERFACE_BOOL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_number_max\">COMPATIBLE_INTERFACE_NUMBER_MAX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_number_min\">COMPATIBLE_INTERFACE_NUMBER_MIN</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_string\">COMPATIBLE_INTERFACE_STRING</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compile_definitions\">COMPILE_DEFINITIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compile_features\">COMPILE_FEATURES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compile_flags\">COMPILE_FLAGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compile_options\">COMPILE_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compile_pdb_name\">COMPILE_PDB_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compile_pdb_name_config\">COMPILE_PDB_NAME_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compile_pdb_output_directory\">COMPILE_PDB_OUTPUT_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compile_pdb_output_directory_config\">COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/config_output_name\">&lt;CONFIG&gt;_OUTPUT_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/config_postfix\">&lt;CONFIG&gt;_POSTFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/crosscompiling_emulator\">CROSSCOMPILING_EMULATOR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/cxx_extensions\">CXX_EXTENSIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/cxx_standard\">CXX_STANDARD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/cxx_standard_required\">CXX_STANDARD_REQUIRED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/debug_postfix\">DEBUG_POSTFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/define_symbol\">DEFINE_SYMBOL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/echostring\">EchoString</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/enable_exports\">ENABLE_EXPORTS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/exclude_from_all\">EXCLUDE_FROM_ALL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/exclude_from_default_build_config\">EXCLUDE_FROM_DEFAULT_BUILD_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/exclude_from_default_build\">EXCLUDE_FROM_DEFAULT_BUILD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/export_name\">EXPORT_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/folder\">FOLDER</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/fortran_format\">Fortran_FORMAT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/fortran_module_directory\">Fortran_MODULE_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/framework\">FRAMEWORK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/framework_version\">FRAMEWORK_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/generator_file_name\">GENERATOR_FILE_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/gnutoms\">GNUtoMS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/has_cxx\">HAS_CXX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/implicit_depends_include_transform\">IMPLICIT_DEPENDS_INCLUDE_TRANSFORM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_configurations\">IMPORTED_CONFIGURATIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_implib_config\">IMPORTED_IMPLIB_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_implib\">IMPORTED_IMPLIB</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_link_dependent_libraries_config\">IMPORTED_LINK_DEPENDENT_LIBRARIES_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_link_dependent_libraries\">IMPORTED_LINK_DEPENDENT_LIBRARIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_link_interface_languages_config\">IMPORTED_LINK_INTERFACE_LANGUAGES_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_link_interface_languages\">IMPORTED_LINK_INTERFACE_LANGUAGES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_link_interface_libraries_config\">IMPORTED_LINK_INTERFACE_LIBRARIES_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_link_interface_libraries\">IMPORTED_LINK_INTERFACE_LIBRARIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_link_interface_multiplicity_config\">IMPORTED_LINK_INTERFACE_MULTIPLICITY_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_link_interface_multiplicity\">IMPORTED_LINK_INTERFACE_MULTIPLICITY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_location_config\">IMPORTED_LOCATION_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_location\">IMPORTED_LOCATION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_no_soname_config\">IMPORTED_NO_SONAME_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_no_soname\">IMPORTED_NO_SONAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported\">IMPORTED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_soname_config\">IMPORTED_SONAME_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/imported_soname\">IMPORTED_SONAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/import_prefix\">IMPORT_PREFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/import_suffix\">IMPORT_SUFFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/include_directories\">INCLUDE_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/install_name_dir\">INSTALL_NAME_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/install_rpath\">INSTALL_RPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/install_rpath_use_link_path\">INSTALL_RPATH_USE_LINK_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/interface_autouic_options\">INTERFACE_AUTOUIC_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/interface_compile_definitions\">INTERFACE_COMPILE_DEFINITIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/interface_compile_features\">INTERFACE_COMPILE_FEATURES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/interface_compile_options\">INTERFACE_COMPILE_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories\">INTERFACE_INCLUDE_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries\">INTERFACE_LINK_LIBRARIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/interface_position_independent_code\">INTERFACE_POSITION_INDEPENDENT_CODE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/interface_sources\">INTERFACE_SOURCES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/interface_system_include_directories\">INTERFACE_SYSTEM_INCLUDE_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/interprocedural_optimization_config\">INTERPROCEDURAL_OPTIMIZATION_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/interprocedural_optimization\">INTERPROCEDURAL_OPTIMIZATION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/ios_install_combined\">IOS_INSTALL_COMBINED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/job_pool_compile\">JOB_POOL_COMPILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/job_pool_link\">JOB_POOL_LINK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/labels\">LABELS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/lang_compiler_launcher\">&lt;LANG&gt;_COMPILER_LAUNCHER</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/lang_include_what_you_use\">&lt;LANG&gt;_INCLUDE_WHAT_YOU_USE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/lang_visibility_preset\">&lt;LANG&gt;_VISIBILITY_PRESET</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/library_output_directory_config\">LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/library_output_directory\">LIBRARY_OUTPUT_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/library_output_name_config\">LIBRARY_OUTPUT_NAME_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/library_output_name\">LIBRARY_OUTPUT_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/link_depends_no_shared\">LINK_DEPENDS_NO_SHARED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/link_depends\">LINK_DEPENDS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/linker_language\">LINKER_LANGUAGE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/link_flags_config\">LINK_FLAGS_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/link_flags\">LINK_FLAGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/link_interface_libraries_config\">LINK_INTERFACE_LIBRARIES_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/link_interface_libraries\">LINK_INTERFACE_LIBRARIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/link_interface_multiplicity_config\">LINK_INTERFACE_MULTIPLICITY_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/link_interface_multiplicity\">LINK_INTERFACE_MULTIPLICITY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/link_libraries\">LINK_LIBRARIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/link_search_end_static\">LINK_SEARCH_END_STATIC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/link_search_start_static\">LINK_SEARCH_START_STATIC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/location_config\">LOCATION_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/location\">LOCATION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/macosx_bundle_info_plist\">MACOSX_BUNDLE_INFO_PLIST</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/macosx_bundle\">MACOSX_BUNDLE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/macosx_framework_info_plist\">MACOSX_FRAMEWORK_INFO_PLIST</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/macosx_rpath\">MACOSX_RPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/map_imported_config_config\">MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/name\">NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/no_soname\">NO_SONAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/no_system_from_imported\">NO_SYSTEM_FROM_IMPORTED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/osx_architectures_config\">OSX_ARCHITECTURES_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/osx_architectures\">OSX_ARCHITECTURES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/output_name_config\">OUTPUT_NAME_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/output_name\">OUTPUT_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/pdb_name_config\">PDB_NAME_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/pdb_name\">PDB_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/pdb_output_directory_config\">PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/pdb_output_directory\">PDB_OUTPUT_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/position_independent_code\">POSITION_INDEPENDENT_CODE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/prefix\">PREFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/private_header\">PRIVATE_HEADER</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/project_label\">PROJECT_LABEL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/public_header\">PUBLIC_HEADER</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/resource\">RESOURCE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/rule_launch_compile\">RULE_LAUNCH_COMPILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/rule_launch_custom\">RULE_LAUNCH_CUSTOM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/rule_launch_link\">RULE_LAUNCH_LINK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/runtime_output_directory_config\">RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/runtime_output_directory\">RUNTIME_OUTPUT_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/runtime_output_name_config\">RUNTIME_OUTPUT_NAME_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/runtime_output_name\">RUNTIME_OUTPUT_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/skip_build_rpath\">SKIP_BUILD_RPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/source_dir\">SOURCE_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/sources\">SOURCES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/soversion\">SOVERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/static_library_flags_config\">STATIC_LIBRARY_FLAGS_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/static_library_flags\">STATIC_LIBRARY_FLAGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/suffix\">SUFFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/type\">TYPE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/version\">VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/visibility_inlines_hidden\">VISIBILITY_INLINES_HIDDEN</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_desktop_extensions_version\">VS_DESKTOP_EXTENSIONS_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_dotnet_references\">VS_DOTNET_REFERENCES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_dotnet_target_framework_version\">VS_DOTNET_TARGET_FRAMEWORK_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_global_keyword\">VS_GLOBAL_KEYWORD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_global_project_types\">VS_GLOBAL_PROJECT_TYPES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_global_rootnamespace\">VS_GLOBAL_ROOTNAMESPACE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_global_variable\">VS_GLOBAL_&lt;variable&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_iot_extensions_version\">VS_IOT_EXTENSIONS_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_iot_startup_task\">VS_IOT_STARTUP_TASK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_keyword\">VS_KEYWORD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_mobile_extensions_version\">VS_MOBILE_EXTENSIONS_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_scc_auxpath\">VS_SCC_AUXPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_scc_localpath\">VS_SCC_LOCALPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_scc_projectname\">VS_SCC_PROJECTNAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_scc_provider\">VS_SCC_PROVIDER</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_windows_target_platform_min_version\">VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_winrt_component\">VS_WINRT_COMPONENT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_winrt_extensions\">VS_WINRT_EXTENSIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/vs_winrt_references\">VS_WINRT_REFERENCES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/win32_executable\">WIN32_EXECUTABLE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/windows_export_all_symbols\">WINDOWS_EXPORT_ALL_SYMBOLS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/xcode_attribute_an-attribute\">XCODE_ATTRIBUTE_&lt;an-attribute&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/xctest\">XCTEST</a></li> </ul>    <h2 id=\"test-properties\">Properties on Tests</h2>  <ul id=\"properties-on-tests\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/attached_files_on_fail\">ATTACHED_FILES_ON_FAIL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/attached_files\">ATTACHED_FILES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/cost\">COST</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/depends\">DEPENDS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/environment\">ENVIRONMENT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/fail_regular_expression\">FAIL_REGULAR_EXPRESSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/labels\">LABELS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/measurement\">MEASUREMENT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/pass_regular_expression\">PASS_REGULAR_EXPRESSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/processors\">PROCESSORS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/required_files\">REQUIRED_FILES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/resource_lock\">RESOURCE_LOCK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/run_serial\">RUN_SERIAL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/skip_return_code\">SKIP_RETURN_CODE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/timeout\">TIMEOUT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/will_fail\">WILL_FAIL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_test/working_directory\">WORKING_DIRECTORY</a></li> </ul>    <h2 id=\"source-file-properties\">Properties on Source Files</h2>  <ul id=\"properties-on-source-files\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/abstract\">ABSTRACT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/autouic_options\">AUTOUIC_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/autorcc_options\">AUTORCC_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/compile_definitions\">COMPILE_DEFINITIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/compile_flags\">COMPILE_FLAGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/external_object\">EXTERNAL_OBJECT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/fortran_format\">Fortran_FORMAT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/generated\">GENERATED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/header_file_only\">HEADER_FILE_ONLY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/keep_extension\">KEEP_EXTENSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/labels\">LABELS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/language\">LANGUAGE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/location\">LOCATION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/macosx_package_location\">MACOSX_PACKAGE_LOCATION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/object_depends\">OBJECT_DEPENDS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/object_outputs\">OBJECT_OUTPUTS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/symbolic\">SYMBOLIC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/vs_deployment_content\">VS_DEPLOYMENT_CONTENT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/vs_deployment_location\">VS_DEPLOYMENT_LOCATION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/vs_shader_entrypoint\">VS_SHADER_ENTRYPOINT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/vs_shader_flags\">VS_SHADER_FLAGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/vs_shader_model\">VS_SHADER_MODEL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/vs_shader_type\">VS_SHADER_TYPE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/vs_xaml_type\">VS_XAML_TYPE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/wrap_exclude\">WRAP_EXCLUDE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/xcode_explicit_file_type\">XCODE_EXPLICIT_FILE_TYPE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/xcode_last_known_file_type\">XCODE_LAST_KNOWN_FILE_TYPE</a></li> </ul>    <h2 id=\"cache-entry-properties\">Properties on Cache Entries</h2>  <ul id=\"properties-on-cache-entries\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_cache/advanced\">ADVANCED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_cache/helpstring\">HELPSTRING</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_cache/modified\">MODIFIED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_cache/strings\">STRINGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_cache/type\">TYPE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_cache/value\">VALUE</a></li> </ul>    <h2 id=\"installed-file-properties\">Properties on Installed Files</h2>  <ul id=\"properties-on-installed-files\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_inst/cpack_desktop_shortcuts\">CPACK_DESKTOP_SHORTCUTS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_inst/cpack_never_overwrite\">CPACK_NEVER_OVERWRITE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_inst/cpack_permanent\">CPACK_PERMANENT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_inst/cpack_start_menu_shortcuts\">CPACK_START_MENU_SHORTCUTS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_inst/cpack_startup_shortcuts\">CPACK_STARTUP_SHORTCUTS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_inst/cpack_wix_acl\">CPACK_WIX_ACL</a></li> </ul>    <h2 id=\"deprecated-properties-on-directories\">Deprecated Properties on Directories</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_dir/compile_definitions_config\">COMPILE_DEFINITIONS_&lt;CONFIG&gt;</a></li> </ul>    <h2 id=\"deprecated-properties-on-targets\">Deprecated Properties on Targets</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/compile_definitions_config\">COMPILE_DEFINITIONS_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/post_install_script\">POST_INSTALL_SCRIPT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_tgt/pre_install_script\">PRE_INSTALL_SCRIPT</a></li> </ul>    <h2 id=\"deprecated-properties-on-source-files\">Deprecated Properties on Source Files</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../prop_sf/compile_definitions_config\">COMPILE_DEFINITIONS_&lt;CONFIG&gt;</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-properties.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-properties.7.html</a>\n  </p>\n</div>\n","manual/cmake-toolchains.7":"<h1 id=\"manual:cmake-toolchains(7)\">cmake-toolchains(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#introduction\" id=\"id2\">Introduction</a></li> <li><a class=\"reference internal\" href=\"#languages\" id=\"id3\">Languages</a></li> <li><a class=\"reference internal\" href=\"#variables-and-properties\" id=\"id4\">Variables and Properties</a></li> <li><a class=\"reference internal\" href=\"#toolchain-features\" id=\"id5\">Toolchain Features</a></li> <li>\n<a class=\"reference internal\" href=\"#cross-compiling\" id=\"id6\">Cross Compiling</a><ul> <li><a class=\"reference internal\" href=\"#cross-compiling-for-linux\" id=\"id7\">Cross Compiling for Linux</a></li> <li><a class=\"reference internal\" href=\"#cross-compiling-for-the-cray-linux-environment\" id=\"id8\">Cross Compiling for the Cray Linux Environment</a></li> <li><a class=\"reference internal\" href=\"#cross-compiling-using-clang\" id=\"id9\">Cross Compiling using Clang</a></li> <li><a class=\"reference internal\" href=\"#cross-compiling-for-qnx\" id=\"id10\">Cross Compiling for QNX</a></li> <li><a class=\"reference internal\" href=\"#cross-compiling-for-windows-ce\" id=\"id11\">Cross Compiling for Windows CE</a></li> <li><a class=\"reference internal\" href=\"#cross-compiling-for-windows-10-universal-applications\" id=\"id12\">Cross Compiling for Windows 10 Universal Applications</a></li> <li><a class=\"reference internal\" href=\"#cross-compiling-for-windows-phone\" id=\"id13\">Cross Compiling for Windows Phone</a></li> <li><a class=\"reference internal\" href=\"#cross-compiling-for-windows-store\" id=\"id14\">Cross Compiling for Windows Store</a></li> <li><a class=\"reference internal\" href=\"#cross-compiling-using-nvidia-nsight-tegra\" id=\"id15\">Cross Compiling using NVIDIA Nsight Tegra</a></li> </ul> </li> </ul>\n   <h2 id=\"introduction\">Introduction</h2> <p>CMake uses a toolchain of utilities to compile, link libraries and create archives, and other tasks to drive the build. The toolchain utilities available are determined by the languages enabled. In normal builds, CMake automatically determines the toolchain for host builds based on system introspection and defaults. In cross-compiling scenarios, a toolchain file may be specified with information about compiler and utility paths.</p>   <h2 id=\"languages\">Languages</h2> <p>Languages are enabled by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command. Language-specific built-in variables, such as <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER\"><code>CMAKE_CXX_COMPILER</code></a>, <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_ID\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\"><code>CMAKE_CXX_COMPILER_ID</code></a> etc are set by invoking the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-1-command:project\"><code>project()</code></a> command. If no project command is in the top-level CMakeLists file, one will be implicitly generated. By default the enabled languages are C and CXX:</p> <pre data-language=\"cmake\">project(C_Only C)\n</pre> <p>A special value of NONE can also be used with the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-2-command:project\"><code>project()</code></a> command to enable no languages:</p> <pre data-language=\"cmake\">project(MyProject NONE)\n</pre> <p>The <a class=\"reference internal\" href=\"../command/enable_language#command:enable_language\" title=\"enable_language\" id=\"index-0-command:enable_language\"><code>enable_language()</code></a> command can be used to enable languages after the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-3-command:project\"><code>project()</code></a> command:</p> <pre data-language=\"cmake\">enable_language(CXX)\n</pre> <p>When a language is enabled, CMake finds a compiler for that language, and determines some information, such as the vendor and version of the compiler, the target architecture and bitwidth, the location of corresponding utilities etc.</p> <p>The <a class=\"reference internal\" href=\"../prop_gbl/enabled_languages#prop_gbl:ENABLED_LANGUAGES\" title=\"ENABLED_LANGUAGES\" id=\"index-0-prop_gbl:ENABLED_LANGUAGES\"><code>ENABLED_LANGUAGES</code></a> global property contains the languages which are currently enabled.</p>   <h2 id=\"variables-and-properties\">Variables and Properties</h2> <p>Several variables relate to the language components of a toolchain which are enabled. <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER\" id=\"index-1-variable:CMAKE_&lt;LANG&gt;_COMPILER\"><code>CMAKE_&lt;LANG&gt;_COMPILER</code></a> is the full path to the compiler used for <code>&lt;LANG&gt;</code>. <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_ID\" id=\"index-1-variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\"><code>CMAKE_&lt;LANG&gt;_COMPILER_ID</code></a> is the identifier used by CMake for the compiler and <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_VERSION\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_VERSION\"><code>CMAKE_&lt;LANG&gt;_COMPILER_VERSION</code></a> is the version of the compiler.</p> <p>The <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_FLAGS\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_FLAGS\"><code>CMAKE_&lt;LANG&gt;_FLAGS</code></a> variables and the configuration-specific equivalents contain flags that will be added to the compile command when compiling a file of a particular language.</p> <p>As the linker is invoked by the compiler driver, CMake needs a way to determine which compiler to use to invoke the linker. This is calculated by the <a class=\"reference internal\" href=\"../prop_sf/language#prop_sf:LANGUAGE\" title=\"LANGUAGE\" id=\"index-0-prop_sf:LANGUAGE\"><code>LANGUAGE</code></a> of source files in the target, and in the case of static libraries, the language of the dependent libraries. The choice CMake makes may be overridden with the <a class=\"reference internal\" href=\"../prop_tgt/linker_language#prop_tgt:LINKER_LANGUAGE\" title=\"LINKER_LANGUAGE\" id=\"index-0-prop_tgt:LINKER_LANGUAGE\"><code>LINKER_LANGUAGE</code></a> target property.</p>   <h2 id=\"toolchain-features\">Toolchain Features</h2> <p>CMake provides the <a class=\"reference internal\" href=\"../command/try_compile#command:try_compile\" title=\"try_compile\" id=\"index-0-command:try_compile\"><code>try_compile()</code></a> command and wrapper macros such as <a class=\"reference internal\" href=\"../module/checkcxxsourcecompiles#module:CheckCXXSourceCompiles\" title=\"CheckCXXSourceCompiles\" id=\"index-0-module:CheckCXXSourceCompiles\"><code>CheckCXXSourceCompiles</code></a>, <a class=\"reference internal\" href=\"../module/checkcxxsymbolexists#module:CheckCXXSymbolExists\" title=\"CheckCXXSymbolExists\" id=\"index-0-module:CheckCXXSymbolExists\"><code>CheckCXXSymbolExists</code></a> and <a class=\"reference internal\" href=\"../module/checkincludefile#module:CheckIncludeFile\" title=\"CheckIncludeFile\" id=\"index-0-module:CheckIncludeFile\"><code>CheckIncludeFile</code></a> to test capability and availability of various toolchain features. These APIs test the toolchain in some way and cache the result so that the test does not have to be performed again the next time CMake runs.</p> <p>Some toolchain features have built-in handling in CMake, and do not require compile-tests. For example, <a class=\"reference internal\" href=\"../prop_tgt/position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-0-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> allows specifying that a target should be built as position-independent code, if the compiler supports that feature. The <a class=\"reference internal\" href=\"#\" title=\"&lt;LANG&gt;_VISIBILITY_PRESET\" id=\"index-0-prop_tgt:&lt;LANG&gt;_VISIBILITY_PRESET\"><code>&lt;LANG&gt;_VISIBILITY_PRESET</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/visibility_inlines_hidden#prop_tgt:VISIBILITY_INLINES_HIDDEN\" title=\"VISIBILITY_INLINES_HIDDEN\" id=\"index-0-prop_tgt:VISIBILITY_INLINES_HIDDEN\"><code>VISIBILITY_INLINES_HIDDEN</code></a> target properties add flags for hidden visibility, if supported by the compiler.</p>   <h2 id=\"cross-compiling-toolchain\">Cross Compiling</h2> <p id=\"cross-compiling\">If <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> is invoked with the command line parameter <code>-DCMAKE_TOOLCHAIN_FILE=path/to/file</code>, the file will be loaded early to set values for the compilers. The <a class=\"reference internal\" href=\"../variable/cmake_crosscompiling#variable:CMAKE_CROSSCOMPILING\" title=\"CMAKE_CROSSCOMPILING\" id=\"index-0-variable:CMAKE_CROSSCOMPILING\"><code>CMAKE_CROSSCOMPILING</code></a> variable is set to true when CMake is cross-compiling.</p>  <h3 id=\"cross-compiling-for-linux\">Cross Compiling for Linux</h3> <p>A typical cross-compiling toolchain for Linux has content such as:</p> <pre data-language=\"cmake\">set(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nset(CMAKE_SYSROOT /home/devel/rasp-pi-rootfs)\nset(CMAKE_STAGING_PREFIX /home/devel/stage)\n\nset(tools /home/devel/gcc-4.7-linaro-rpi-gnueabihf)\nset(CMAKE_C_COMPILER ${tools}/bin/arm-linux-gnueabihf-gcc)\nset(CMAKE_CXX_COMPILER ${tools}/bin/arm-linux-gnueabihf-g++)\n\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n</pre> <p>The <a class=\"reference internal\" href=\"../variable/cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-0-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a> is the CMake-identifier of the target platform to build for.</p> <p>The <a class=\"reference internal\" href=\"../variable/cmake_system_processor#variable:CMAKE_SYSTEM_PROCESSOR\" title=\"CMAKE_SYSTEM_PROCESSOR\" id=\"index-0-variable:CMAKE_SYSTEM_PROCESSOR\"><code>CMAKE_SYSTEM_PROCESSOR</code></a> is the CMake-identifier of the target architecture to build for.</p> <p>The <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-0-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> is optional, and may be specified if a sysroot is available.</p> <p>The <a class=\"reference internal\" href=\"../variable/cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-0-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a> is also optional. It may be used to specify a path on the host to install to. The <a class=\"reference internal\" href=\"../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> is always the runtime installation location, even when cross-compiling.</p> <p>The <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER\" id=\"index-2-variable:CMAKE_&lt;LANG&gt;_COMPILER\"><code>CMAKE_&lt;LANG&gt;_COMPILER</code></a> variables may be set to full paths, or to names of compilers to search for in standard locations. In cases where CMake does not have enough information to extract information from the compiler, the <a class=\"reference internal\" href=\"../module/cmakeforcecompiler#module:CMakeForceCompiler\" title=\"CMakeForceCompiler\" id=\"index-0-module:CMakeForceCompiler\"><code>CMakeForceCompiler</code></a> module can be used to bypass some of the checks.</p> <p>CMake <code>find_*</code> commands will look in the sysroot, and the <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-0-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> entries by default in all cases, as well as looking in the host system root prefix. Although this can be controlled on a case-by-case basis, when cross-compiling, it can be useful to exclude looking in either the host or the target for particular artifacts. Generally, includes, libraries and packages should be found in the target system prefixes, whereas executables which must be run as part of the build should be found only on the host and not on the target. This is the purpose of the <code>CMAKE_FIND_ROOT_PATH_MODE_*</code> variables.</p>   <h3 id=\"cray-cross-compile\">Cross Compiling for the Cray Linux Environment</h3> <p id=\"cross-compiling-for-the-cray-linux-environment\">Cross compiling for compute nodes in the Cray Linux Environment can be done without needing a separate toolchain file. Specifying <code>-DCMAKE_SYSTEM_NAME=CrayLinuxEnvironment</code> on the CMake command line will ensure that the appropriate build settings and search paths are configured. The platform will pull its configuration from the current environment variables and will configure a project to use the compiler wrappers from the Cray Programming Environment’s <code>PrgEnv-*</code> modules if present and loaded.</p> <p>The default configuration of the Cray Programming Environment is to only support static libraries. This can be overridden and shared libraries enabled by setting the <code>CRAYPE_LINK_TYPE</code> environment variable to <code>dynamic</code>.</p> <p>Running CMake without specifying <a class=\"reference internal\" href=\"../variable/cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-1-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a> will run the configure step in host mode assuming a standard Linux environment. If not overridden, the <code>PrgEnv-*</code> compiler wrappers will end up getting used, which if targeting the either the login node or compute node, is likely not the desired behavior. The exception to this would be if you are building directly on a NID instead of cross-compiling from a login node. If trying to build software for a login node, you will need to either first unload the currently loaded <code>PrgEnv-*</code> module or explicitly tell CMake to use the system compilers in <code>/usr/bin</code> instead of the Cray wrappers. If instead targeting a compute node is desired, just specify the <a class=\"reference internal\" href=\"../variable/cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-2-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a> as mentioned above.</p>   <h3 id=\"cross-compiling-using-clang\">Cross Compiling using Clang</h3> <p>Some compilers such as Clang are inherently cross compilers. The <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_TARGET\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_TARGET\"><code>CMAKE_&lt;LANG&gt;_COMPILER_TARGET</code></a> can be set to pass a value to those supported compilers when compiling:</p> <pre data-language=\"cmake\">set(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nset(triple arm-linux-gnueabihf)\n\nset(CMAKE_C_COMPILER clang)\nset(CMAKE_C_COMPILER_TARGET ${triple})\nset(CMAKE_CXX_COMPILER clang++)\nset(CMAKE_CXX_COMPILER_TARGET ${triple})\n</pre> <p>Similarly, some compilers do not ship their own supplementary utilities such as linkers, but provide a way to specify the location of the external toolchain which will be used by the compiler driver. The <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_EXTERNAL_TOOLCHAIN\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_EXTERNAL_TOOLCHAIN\"><code>CMAKE_&lt;LANG&gt;_COMPILER_EXTERNAL_TOOLCHAIN</code></a> variable can be set in a toolchain file to pass the path to the compiler driver.</p>   <h3 id=\"cross-compiling-for-qnx\">Cross Compiling for QNX</h3> <p>As the Clang compiler the QNX QCC compile is inherently a cross compiler. And the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_TARGET\" id=\"index-1-variable:CMAKE_&lt;LANG&gt;_COMPILER_TARGET\"><code>CMAKE_&lt;LANG&gt;_COMPILER_TARGET</code></a> can be set to pass a value to those supported compilers when compiling:</p> <pre data-language=\"cmake\">set(CMAKE_SYSTEM_NAME QNX)\n\nset(arch gcc_ntoarmv7le)\n\nset(CMAKE_C_COMPILER qcc)\nset(CMAKE_C_COMPILER_TARGET ${arch})\nset(CMAKE_CXX_COMPILER QCC)\nset(CMAKE_CXX_COMPILER_TARGET ${arch})\n</pre>   <h3 id=\"cross-compiling-for-windows-ce\">Cross Compiling for Windows CE</h3> <p>Cross compiling for Windows CE requires the corresponding SDK being installed on your system. These SDKs are usually installed under <code>C:/Program Files (x86)/Windows CE Tools/SDKs</code>.</p> <p>A toolchain file to configure a Visual Studio generator for Windows CE may look like this:</p> <pre data-language=\"cmake\">set(CMAKE_SYSTEM_NAME WindowsCE)\n\nset(CMAKE_SYSTEM_VERSION 8.0)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nset(CMAKE_GENERATOR_TOOLSET CE800) # Can be omitted for 8.0\nset(CMAKE_GENERATOR_PLATFORM SDK_AM335X_SK_WEC2013_V310)\n</pre> <p>The <a class=\"reference internal\" href=\"../variable/cmake_generator_platform#variable:CMAKE_GENERATOR_PLATFORM\" title=\"CMAKE_GENERATOR_PLATFORM\" id=\"index-0-variable:CMAKE_GENERATOR_PLATFORM\"><code>CMAKE_GENERATOR_PLATFORM</code></a> tells the generator which SDK to use. Further <a class=\"reference internal\" href=\"../variable/cmake_system_version#variable:CMAKE_SYSTEM_VERSION\" title=\"CMAKE_SYSTEM_VERSION\" id=\"index-0-variable:CMAKE_SYSTEM_VERSION\"><code>CMAKE_SYSTEM_VERSION</code></a> tells the generator what version of Windows CE to use. Currently version 8.0 (Windows Embedded Compact 2013) is supported out of the box. Other versions may require one to set <a class=\"reference internal\" href=\"../variable/cmake_generator_toolset#variable:CMAKE_GENERATOR_TOOLSET\" title=\"CMAKE_GENERATOR_TOOLSET\" id=\"index-0-variable:CMAKE_GENERATOR_TOOLSET\"><code>CMAKE_GENERATOR_TOOLSET</code></a> to the correct value.</p>   <h3 id=\"cross-compiling-for-windows-10-universal-applications\">Cross Compiling for Windows 10 Universal Applications</h3> <p>A toolchain file to configure a Visual Studio generator for a Windows 10 Universal Application may look like this:</p> <pre data-language=\"cmake\">set(CMAKE_SYSTEM_NAME WindowsStore)\nset(CMAKE_SYSTEM_VERSION 10.0)\n</pre> <p>A Windows 10 Universal Application targets both Windows Store and Windows Phone. Specify the <a class=\"reference internal\" href=\"../variable/cmake_system_version#variable:CMAKE_SYSTEM_VERSION\" title=\"CMAKE_SYSTEM_VERSION\" id=\"index-1-variable:CMAKE_SYSTEM_VERSION\"><code>CMAKE_SYSTEM_VERSION</code></a> variable to be <code>10.0</code> to build with the latest available Windows 10 SDK. Specify a more specific version (e.g. <code>10.0.10240.0</code> for RTM) to build with the corresponding SDK.</p>   <h3 id=\"cross-compiling-for-windows-phone\">Cross Compiling for Windows Phone</h3> <p>A toolchain file to configure a Visual Studio generator for Windows Phone may look like this:</p> <pre data-language=\"cmake\">set(CMAKE_SYSTEM_NAME WindowsPhone)\nset(CMAKE_SYSTEM_VERSION 8.1)\n</pre>   <h3 id=\"cross-compiling-for-windows-store\">Cross Compiling for Windows Store</h3> <p>A toolchain file to configure a Visual Studio generator for Windows Store may look like this:</p> <pre data-language=\"cmake\">set(CMAKE_SYSTEM_NAME WindowsStore)\nset(CMAKE_SYSTEM_VERSION 8.1)\n</pre>   <h3 id=\"cross-compiling-using-nvidia-nsight-tegra\">Cross Compiling using NVIDIA Nsight Tegra</h3> <p>A toolchain file to configure a Visual Studio generator to build using NVIDIA Nsight Tegra targeting Android may look like this:</p> <pre data-language=\"cmake\">set(CMAKE_SYSTEM_NAME Android)\n</pre> <p>The <a class=\"reference internal\" href=\"../variable/cmake_generator_toolset#variable:CMAKE_GENERATOR_TOOLSET\" title=\"CMAKE_GENERATOR_TOOLSET\" id=\"index-1-variable:CMAKE_GENERATOR_TOOLSET\"><code>CMAKE_GENERATOR_TOOLSET</code></a> may be set to select the Nsight Tegra “Toolchain Version” value.</p> <p>See also target properties:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"../prop_tgt/android_ant_additional_options#prop_tgt:ANDROID_ANT_ADDITIONAL_OPTIONS\" title=\"ANDROID_ANT_ADDITIONAL_OPTIONS\" id=\"index-0-prop_tgt:ANDROID_ANT_ADDITIONAL_OPTIONS\"><code>ANDROID_ANT_ADDITIONAL_OPTIONS</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_api_min#prop_tgt:ANDROID_API_MIN\" title=\"ANDROID_API_MIN\" id=\"index-0-prop_tgt:ANDROID_API_MIN\"><code>ANDROID_API_MIN</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_api#prop_tgt:ANDROID_API\" title=\"ANDROID_API\" id=\"index-0-prop_tgt:ANDROID_API\"><code>ANDROID_API</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_arch#prop_tgt:ANDROID_ARCH\" title=\"ANDROID_ARCH\" id=\"index-0-prop_tgt:ANDROID_ARCH\"><code>ANDROID_ARCH</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_assets_directories#prop_tgt:ANDROID_ASSETS_DIRECTORIES\" title=\"ANDROID_ASSETS_DIRECTORIES\" id=\"index-0-prop_tgt:ANDROID_ASSETS_DIRECTORIES\"><code>ANDROID_ASSETS_DIRECTORIES</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_gui#prop_tgt:ANDROID_GUI\" title=\"ANDROID_GUI\" id=\"index-0-prop_tgt:ANDROID_GUI\"><code>ANDROID_GUI</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_jar_dependencies#prop_tgt:ANDROID_JAR_DEPENDENCIES\" title=\"ANDROID_JAR_DEPENDENCIES\" id=\"index-0-prop_tgt:ANDROID_JAR_DEPENDENCIES\"><code>ANDROID_JAR_DEPENDENCIES</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_jar_directories#prop_tgt:ANDROID_JAR_DIRECTORIES\" title=\"ANDROID_JAR_DIRECTORIES\" id=\"index-0-prop_tgt:ANDROID_JAR_DIRECTORIES\"><code>ANDROID_JAR_DIRECTORIES</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_java_source_dir#prop_tgt:ANDROID_JAVA_SOURCE_DIR\" title=\"ANDROID_JAVA_SOURCE_DIR\" id=\"index-0-prop_tgt:ANDROID_JAVA_SOURCE_DIR\"><code>ANDROID_JAVA_SOURCE_DIR</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_native_lib_dependencies#prop_tgt:ANDROID_NATIVE_LIB_DEPENDENCIES\" title=\"ANDROID_NATIVE_LIB_DEPENDENCIES\" id=\"index-0-prop_tgt:ANDROID_NATIVE_LIB_DEPENDENCIES\"><code>ANDROID_NATIVE_LIB_DEPENDENCIES</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_native_lib_directories#prop_tgt:ANDROID_NATIVE_LIB_DIRECTORIES\" title=\"ANDROID_NATIVE_LIB_DIRECTORIES\" id=\"index-0-prop_tgt:ANDROID_NATIVE_LIB_DIRECTORIES\"><code>ANDROID_NATIVE_LIB_DIRECTORIES</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_process_max#prop_tgt:ANDROID_PROCESS_MAX\" title=\"ANDROID_PROCESS_MAX\" id=\"index-0-prop_tgt:ANDROID_PROCESS_MAX\"><code>ANDROID_PROCESS_MAX</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_proguard_config_path#prop_tgt:ANDROID_PROGUARD_CONFIG_PATH\" title=\"ANDROID_PROGUARD_CONFIG_PATH\" id=\"index-0-prop_tgt:ANDROID_PROGUARD_CONFIG_PATH\"><code>ANDROID_PROGUARD_CONFIG_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_proguard#prop_tgt:ANDROID_PROGUARD\" title=\"ANDROID_PROGUARD\" id=\"index-0-prop_tgt:ANDROID_PROGUARD\"><code>ANDROID_PROGUARD</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_secure_props_path#prop_tgt:ANDROID_SECURE_PROPS_PATH\" title=\"ANDROID_SECURE_PROPS_PATH\" id=\"index-0-prop_tgt:ANDROID_SECURE_PROPS_PATH\"><code>ANDROID_SECURE_PROPS_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_skip_ant_step#prop_tgt:ANDROID_SKIP_ANT_STEP\" title=\"ANDROID_SKIP_ANT_STEP\" id=\"index-0-prop_tgt:ANDROID_SKIP_ANT_STEP\"><code>ANDROID_SKIP_ANT_STEP</code></a></li> <li><a class=\"reference internal\" href=\"../prop_tgt/android_stl_type#prop_tgt:ANDROID_STL_TYPE\" title=\"ANDROID_STL_TYPE\" id=\"index-0-prop_tgt:ANDROID_STL_TYPE\"><code>ANDROID_STL_TYPE</code></a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-toolchains.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-toolchains.7.html</a>\n  </p>\n</div>\n","manual/cmake-developer.7":"<h1 id=\"manual:cmake-developer(7)\">cmake-developer(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#introduction\" id=\"id3\">Introduction</a></li> <li>\n<a class=\"reference internal\" href=\"#permitted-c-subset\" id=\"id4\">Permitted C++ Subset</a><ul> <li><a class=\"reference internal\" href=\"#std-auto-ptr\" id=\"id5\">std::auto_ptr</a></li> <li><a class=\"reference internal\" href=\"#size-t\" id=\"id6\">size_t</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#adding-compile-features\" id=\"id7\">Adding Compile Features</a></li> <li>\n<a class=\"reference internal\" href=\"#help\" id=\"id8\">Help</a><ul> <li><a class=\"reference internal\" href=\"#markup-constructs\" id=\"id9\">Markup Constructs</a></li> <li><a class=\"reference internal\" href=\"#cmake-domain\" id=\"id10\">CMake Domain</a></li> <li><a class=\"reference internal\" href=\"#cross-references\" id=\"id11\">Cross-References</a></li> <li>\n<a class=\"reference internal\" href=\"#style\" id=\"id12\">Style</a><ul> <li><a class=\"reference internal\" href=\"#style-section-headers\" id=\"id13\">Style: Section Headers</a></li> <li><a class=\"reference internal\" href=\"#style-whitespace\" id=\"id14\">Style: Whitespace</a></li> <li><a class=\"reference internal\" href=\"#style-line-length\" id=\"id15\">Style: Line Length</a></li> <li><a class=\"reference internal\" href=\"#style-prose\" id=\"id16\">Style: Prose</a></li> <li><a class=\"reference internal\" href=\"#style-starting-literal-blocks\" id=\"id17\">Style: Starting Literal Blocks</a></li> <li><a class=\"reference internal\" href=\"#style-cmake-command-signatures\" id=\"id18\">Style: CMake Command Signatures</a></li> <li><a class=\"reference internal\" href=\"#style-boolean-constants\" id=\"id19\">Style: Boolean Constants</a></li> <li><a class=\"reference internal\" href=\"#style-inline-literals\" id=\"id20\">Style: Inline Literals</a></li> <li><a class=\"reference internal\" href=\"#style-cross-references\" id=\"id21\">Style: Cross-References</a></li> <li><a class=\"reference internal\" href=\"#style-referencing-cmake-concepts\" id=\"id22\">Style: Referencing CMake Concepts</a></li> <li><a class=\"reference internal\" href=\"#style-referencing-cmake-domain-objects\" id=\"id23\">Style: Referencing CMake Domain Objects</a></li> </ul> </li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#modules\" id=\"id24\">Modules</a><ul> <li><a class=\"reference internal\" href=\"#module-documentation\" id=\"id25\">Module Documentation</a></li> <li>\n<a class=\"reference internal\" href=\"#find-modules\" id=\"id26\">Find Modules</a><ul> <li><a class=\"reference internal\" href=\"#standard-variable-names\" id=\"id27\">Standard Variable Names</a></li> <li><a class=\"reference internal\" href=\"#a-sample-find-module\" id=\"id28\">A Sample Find Module</a></li> </ul> </li> </ul> </li> </ul>\n   <h2 id=\"introduction\">Introduction</h2> <p>This manual is intended for reference by developers modifying the CMake source tree itself.</p>   <h2 id=\"permitted-c-subset\">Permitted C++ Subset</h2> <p>CMake is required to build with ancient C++ compilers and standard library implementations. Some common C++ constructs may not be used in CMake in order to build with such toolchains.</p>  <h3 id=\"std-auto-ptr\">std::auto_ptr</h3> <p>Some implementations have a <code>std::auto_ptr</code> which can not be used as a return value from a function. <code>std::auto_ptr</code> may not be used. Use <code>cmsys::auto_ptr</code> instead.</p>   <h3 id=\"size-t\">size_t</h3> <p>Various implementations have differing implementation of <code>size_t</code>. When assigning the result of <code>.size()</code> on a container for example, the result should be assigned to <code>size_t</code> not to <code>std::size_t</code>, <code>unsigned int</code> or similar types.</p>    <h2 id=\"adding-compile-features\">Adding Compile Features</h2> <p>CMake reports an error if a compiler whose features are known does not report support for a particular requested feature. A compiler is considered to have known features if it reports support for at least one feature.</p> <p>When adding a new compile feature to CMake, it is therefore necessary to list support for the feature for all CompilerIds which already have one or more feature supported, if the new feature is available for any version of the compiler.</p> <p>When adding the first supported feature to a particular CompilerId, it is necessary to list support for all features known to cmake (See <a class=\"reference internal\" href=\"../variable/cmake_c_compile_features#variable:CMAKE_C_COMPILE_FEATURES\" title=\"CMAKE_C_COMPILE_FEATURES\" id=\"index-0-variable:CMAKE_C_COMPILE_FEATURES\"><code>CMAKE_C_COMPILE_FEATURES</code></a> and <a class=\"reference internal\" href=\"../variable/cmake_cxx_compile_features#variable:CMAKE_CXX_COMPILE_FEATURES\" title=\"CMAKE_CXX_COMPILE_FEATURES\" id=\"index-0-variable:CMAKE_CXX_COMPILE_FEATURES\"><code>CMAKE_CXX_COMPILE_FEATURES</code></a> as appropriate), where available for the compiler. Ensure that the <code>CMAKE_&lt;LANG&gt;_STANDARD_DEFAULT</code> is set to the computed internal variable <code>CMAKE_&lt;LANG&gt;_STANDARD_COMPUTED_DEFAULT</code> for compiler versions which should be supported.</p> <p>It is sensible to record the features for the most recent version of a particular CompilerId first, and then work backwards. It is sensible to try to create a continuous range of versions of feature releases of the compiler. Gaps in the range indicate incorrect features recorded for intermediate releases.</p> <p>Generally, features are made available for a particular version if the compiler vendor documents availability of the feature with that version. Note that sometimes partially implemented features appear to be functional in previous releases (such as <code>cxx_constexpr</code> in GNU 4.6, though availability is documented in GNU 4.7), and sometimes compiler vendors document availability of features, though supporting infrastructure is not available (such as <code>__has_feature(cxx_generic_lambdas)</code> indicating non-availability in Clang 3.4, though it is documented as available, and fixed in Clang 3.5). Similar cases for other compilers and versions need to be investigated when extending CMake to support them.</p> <p>When a vendor releases a new version of a known compiler which supports a previously unsupported feature, and there are already known features for that compiler, the feature should be listed as supported in CMake for that version of the compiler as soon as reasonably possible.</p> <p>Standard-specific/compiler-specific variables such <code>CMAKE_CXX98_COMPILE_FEATURES</code> are deliberately not documented. They only exist for the compiler-specific implementation of adding the <code>-std</code> compile flag for compilers which need that.</p>   <h2 id=\"help\">Help</h2> <p>The <code>Help</code> directory contains CMake help manual source files. They are written using the <a class=\"reference external\" href=\"http://docutils.sourceforge.net/docs/ref/rst/introduction.html\">reStructuredText</a> markup syntax and processed by <a class=\"reference external\" href=\"http://sphinx-doc.org\">Sphinx</a> to generate the CMake help manuals.</p>  <h3 id=\"markup-constructs\">Markup Constructs</h3> <p>In addition to using Sphinx to generate the CMake help manuals, we also use a C++-implemented document processor to print documents for the <code>--help-*</code> command-line help options. It supports a subset of reStructuredText markup. When authoring or modifying documents, please verify that the command-line help looks good in addition to the Sphinx-generated html and man pages.</p> <p>The command-line help processor supports the following constructs defined by reStructuredText, Sphinx, and a CMake extension to Sphinx.</p> <dl class=\"docutils\"> <dt>CMake Domain directives</dt> <dd>Directives defined in the <a class=\"reference internal\" href=\"#cmake-domain\">CMake Domain</a> for defining CMake documentation objects are printed in command-line help output as if the lines were normal paragraph text with interpretation.</dd> <dt>CMake Domain interpreted text roles</dt> <dd>Interpreted text roles defined in the <a class=\"reference internal\" href=\"#cmake-domain\">CMake Domain</a> for cross-referencing CMake documentation objects are replaced by their link text in command-line help output. Other roles are printed literally and not processed.</dd> <dt>\n<code>code-block</code> directive</dt> <dd>Add a literal code block without interpretation. The command-line help processor prints the block content without the leading directive line and with common indentation replaced by one space.</dd> <dt>\n<code>include</code> directive</dt> <dd>Include another document source file. The command-line help processor prints the included document inline with the referencing document.</dd> <dt>literal block after <code>::</code>\n</dt> <dd>A paragraph ending in <code>::</code> followed by a blank line treats the following indented block as literal text without interpretation. The command-line help processor prints the <code>::</code> literally and prints the block content with common indentation replaced by one space.</dd> <dt>\n<code>note</code> directive</dt> <dd>Call out a side note. The command-line help processor prints the block content as if the lines were normal paragraph text with interpretation.</dd> <dt>\n<code>parsed-literal</code> directive</dt> <dd>Add a literal block with markup interpretation. The command-line help processor prints the block content without the leading directive line and with common indentation replaced by one space.</dd> <dt>\n<code>productionlist</code> directive</dt> <dd>Render context-free grammar productions. The command-line help processor prints the block content as if the lines were normal paragraph text with interpretation.</dd> <dt>\n<code>replace</code> directive</dt> <dd>Define a <code>|substitution|</code> replacement. The command-line help processor requires a substitution replacement to be defined before it is referenced.</dd> <dt>\n<code>|substitution|</code> reference</dt> <dd>Reference a substitution replacement previously defined by the <code>replace</code> directive. The command-line help processor performs the substitution and replaces all newlines in the replacement text with spaces.</dd> <dt>\n<code>toctree</code> directive</dt> <dd>Include other document sources in the Table-of-Contents document tree. The command-line help processor prints the referenced documents inline as part of the referencing document.</dd> </dl> <p>Inline markup constructs not listed above are printed literally in the command-line help output. We prefer to use inline markup constructs that look correct in source form, so avoid use of \\-escapes in favor of inline literals when possible.</p> <p>Explicit markup blocks not matching directives listed above are removed from command-line help output. Do not use them, except for plain <code>..</code> comments that are removed by Sphinx too.</p> <p>Note that nested indentation of blocks is not recognized by the command-line help processor. Therefore:</p> <ul class=\"simple\"> <li>Explicit markup blocks are recognized only when not indented inside other blocks.</li> <li>Literal blocks after paragraphs ending in <code>::</code> but not at the top indentation level may consume all indented lines following them.</li> </ul> <p>Try to avoid these cases in practice.</p>   <h3 id=\"cmake-domain\">CMake Domain</h3> <p>CMake adds a <a class=\"reference external\" href=\"http://sphinx-doc.org/domains.html\">Sphinx Domain</a> called <code>cmake</code>, also called the “CMake Domain”. It defines several “object” types for CMake documentation:</p> <dl class=\"docutils\"> <dt><code>command</code></dt> <dd>A CMake language command.</dd> <dt><code>generator</code></dt> <dd>A CMake native build system generator. See the <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> command-line tool’s <code>-G</code> option.</dd> <dt><code>manual</code></dt> <dd>A CMake manual page, like this <a class=\"reference internal\" href=\"#manual:cmake-developer(7)\" title=\"cmake-developer(7)\" id=\"index-0-manual:cmake-developer(7)\"><code>cmake-developer(7)</code></a> manual.</dd> <dt><code>module</code></dt> <dd>A CMake module. See the <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-0-manual:cmake-modules(7)\"><code>cmake-modules(7)</code></a> manual and the <a class=\"reference internal\" href=\"../command/include#command:include\" title=\"include\" id=\"index-0-command:include\"><code>include()</code></a> command.</dd> <dt><code>policy</code></dt> <dd>A CMake policy. See the <a class=\"reference internal\" href=\"cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>cmake-policies(7)</code></a> manual and the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command.</dd> <dt><code>prop_cache, prop_dir, prop_gbl, prop_sf, prop_inst, prop_test, prop_tgt</code></dt> <dd>A CMake cache, directory, global, source file, installed file, test, or target property, respectively. See the <a class=\"reference internal\" href=\"cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-0-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual and the <a class=\"reference internal\" href=\"../command/set_property#command:set_property\" title=\"set_property\" id=\"index-0-command:set_property\"><code>set_property()</code></a> command.</dd> <dt><code>variable</code></dt> <dd>A CMake language variable. See the <a class=\"reference internal\" href=\"cmake-variables.7#manual:cmake-variables(7)\" title=\"cmake-variables(7)\" id=\"index-0-manual:cmake-variables(7)\"><code>cmake-variables(7)</code></a> manual and the <a class=\"reference internal\" href=\"../command/set#command:set\" title=\"set\" id=\"index-0-command:set\"><code>set()</code></a> command.</dd> </dl> <p>Documentation objects in the CMake Domain come from two sources. First, the CMake extension to Sphinx transforms every document named with the form <code>Help/&lt;type&gt;/&lt;file-name&gt;.rst</code> to a domain object with type <code>&lt;type&gt;</code>. The object name is extracted from the document title, which is expected to be of the form:</p> <pre data-language=\"python\">&lt;object-name&gt;\n-------------\n</pre> <p>and to appear at or near the top of the <code>.rst</code> file before any other lines starting in a letter, digit, or <code>&lt;</code>. If no such title appears literally in the <code>.rst</code> file, the object name is the <code>&lt;file-name&gt;</code>. If a title does appear, it is expected that <code>&lt;file-name&gt;</code> is equal to <code>&lt;object-name&gt;</code> with any <code>&lt;</code> and <code>&gt;</code> characters removed.</p> <p>Second, the CMake Domain provides directives to define objects inside other documents:</p> <pre data-language=\"rst\">.. command:: &lt;command-name&gt;\n\n This indented block documents &lt;command-name&gt;.\n\n.. variable:: &lt;variable-name&gt;\n\n This indented block documents &lt;variable-name&gt;.\n</pre> <p>Object types for which no directive is available must be defined using the first approach above.</p>   <h3 id=\"cross-references\">Cross-References</h3> <p>Sphinx uses reStructuredText interpreted text roles to provide cross-reference syntax. The <a class=\"reference internal\" href=\"#cmake-domain\">CMake Domain</a> provides for each domain object type a role of the same name to cross-reference it. CMake Domain roles are inline markup of the forms:</p> <pre data-language=\"python\">:type:`name`\n:type:`text &lt;name&gt;`\n</pre> <p>where <code>type</code> is the domain object type and <code>name</code> is the domain object name. In the first form the link text will be <code>name</code> (or <code>name()</code> if the type is <code>command</code>) and in the second form the link text will be the explicit <code>text</code>. For example, the code:</p> <pre data-language=\"rst\">* The :command:`list` command.\n* The :command:`list(APPEND)` sub-command.\n* The :command:`list() command &lt;list&gt;`.\n* The :command:`list(APPEND) sub-command &lt;list&gt;`.\n* The :variable:`CMAKE_VERSION` variable.\n* The :prop_tgt:`OUTPUT_NAME_&lt;CONFIG&gt;` target property.\n</pre> <p>produces:</p> <ul class=\"simple\"> <li>The <a class=\"reference internal\" href=\"../command/list#command:list\" title=\"list\" id=\"index-0-command:list\"><code>list()</code></a> command.</li> <li>The <a class=\"reference internal\" href=\"../command/list#command:list\" title=\"list\" id=\"index-1-command:list\"><code>list(APPEND)</code></a> sub-command.</li> <li>The <a class=\"reference internal\" href=\"../command/list#command:list\" title=\"list\" id=\"index-2-command:list\"><code>list() command</code></a>.</li> <li>The <a class=\"reference internal\" href=\"../command/list#command:list\" title=\"list\" id=\"index-3-command:list\"><code>list(APPEND) sub-command</code></a>.</li> <li>The <a class=\"reference internal\" href=\"../variable/cmake_version#variable:CMAKE_VERSION\" title=\"CMAKE_VERSION\" id=\"index-0-variable:CMAKE_VERSION\"><code>CMAKE_VERSION</code></a> variable.</li> <li>The <a class=\"reference internal\" href=\"#\" title=\"OUTPUT_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:OUTPUT_NAME_&lt;CONFIG&gt;\"><code>OUTPUT_NAME_&lt;CONFIG&gt;</code></a> target property.</li> </ul> <p>Note that CMake Domain roles differ from Sphinx and reStructuredText convention in that the form <code>a&lt;b&gt;</code>, without a space preceding <code>&lt;</code>, is interpreted as a name instead of link text with an explicit target. This is necessary because we use <code>&lt;placeholders&gt;</code> frequently in object names like <code>OUTPUT_NAME_&lt;CONFIG&gt;</code>. The form <code>a &lt;b&gt;</code>, with a space preceding <code>&lt;</code>, is still interpreted as a link text with an explicit target.</p>   <h3 id=\"style\">Style</h3>  <h4 id=\"style-section-headers\">Style: Section Headers</h4> <p>When marking section titles, make the section decoration line as long as the title text. Use only a line below the title, not above. For example:</p> <pre data-language=\"rst\">Title Text\n----------\n</pre> <p>Capitalize the first letter of each non-minor word in the title.</p> <p>The section header underline character hierarchy is</p> <ul class=\"simple\"> <li>\n<code>#</code>: Manual group (part) in the master document</li> <li>\n<code>*</code>: Manual (chapter) title</li> <li>\n<code>=</code>: Section within a manual</li> <li>\n<code>-</code>: Subsection or <a class=\"reference internal\" href=\"#cmake-domain\">CMake Domain</a> object document title</li> <li>\n<code>^</code>: Subsubsection or <a class=\"reference internal\" href=\"#cmake-domain\">CMake Domain</a> object document section</li> <li>\n<code>\"</code>: Paragraph or <a class=\"reference internal\" href=\"#cmake-domain\">CMake Domain</a> object document subsection</li> </ul>   <h4 id=\"style-whitespace\">Style: Whitespace</h4> <p>Use two spaces for indentation. Use two spaces between sentences in prose.</p>   <h4 id=\"style-line-length\">Style: Line Length</h4> <p>Prefer to restrict the width of lines to 75-80 columns. This is not a hard restriction, but writing new paragraphs wrapped at 75 columns allows space for adding minor content without significant re-wrapping of content.</p>   <h4 id=\"style-prose\">Style: Prose</h4> <p>Use American English spellings in prose.</p>   <h4 id=\"style-starting-literal-blocks\">Style: Starting Literal Blocks</h4> <p>Prefer to mark the start of literal blocks with <code>::</code> at the end of the preceding paragraph. In cases where the following block gets a <code>code-block</code> marker, put a single <code>:</code> at the end of the preceding paragraph.</p>   <h4 id=\"style-cmake-command-signatures\">Style: CMake Command Signatures</h4> <p>Command signatures should be marked up as plain literal blocks, not as cmake <code>code-blocks</code>.</p> <p>Signatures are separated from preceding content by a section header. That is, use:</p> <pre data-language=\"rst\">... preceding paragraph.\n\nNormal Libraries\n^^^^^^^^^^^^^^^^\n\n::\n\n  add_library(&lt;lib&gt; ...)\n\nThis signature is used for ...\n</pre> <p>Signatures of commands should wrap optional parts with square brackets, and should mark list of optional arguments with an ellipsis (<code>...</code>). Elements of the signature which are specified by the user should be specified with angle brackets, and may be referred to in prose using <code>inline-literal</code> syntax.</p>   <h4 id=\"style-boolean-constants\">Style: Boolean Constants</h4> <p>Use “<code>OFF</code>” and “<code>ON</code>” for boolean values which can be modified by the user, such as <a class=\"reference internal\" href=\"../prop_tgt/position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-0-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a>. Such properties may be “enabled” and “disabled”. Use “<code>True</code>” and “<code>False</code>” for inherent values which can’t be modified after being set, such as the <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> property of a build target.</p>   <h4 id=\"style-inline-literals\">Style: Inline Literals</h4> <p>Mark up references to keywords in signatures, file names, and other technical terms with <code>inline-literal</code> syntax, for example:</p> <pre data-language=\"rst\">If ``WIN32`` is used with :command:`add_executable`, the\n:prop_tgt:`WIN32_EXECUTABLE` target property is enabled. That command\ncreates the file ``&lt;name&gt;.exe`` on Windows.\n</pre>   <h4 id=\"style-cross-references\">Style: Cross-References</h4> <p>Mark up linkable references as links, including repeats. An alternative, which is used by wikipedia (<a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/WP:REPEATLINK\">http://en.wikipedia.org/wiki/WP:REPEATLINK</a>), is to link to a reference only once per article. That style is not used in CMake documentation.</p>   <h4 id=\"style-referencing-cmake-concepts\">Style: Referencing CMake Concepts</h4> <p>If referring to a concept which corresponds to a property, and that concept is described in a high-level manual, prefer to link to the manual section instead of the property. For example:</p> <pre data-language=\"rst\">This command creates an :ref:`Imported Target &lt;Imported Targets&gt;`.\n</pre> <p>instead of:</p> <pre data-language=\"rst\">This command creates an :prop_tgt:`IMPORTED` target.\n</pre> <p>The latter should be used only when referring specifically to the property.</p> <p>References to manual sections are not automatically created by creating a section, but code such as:</p> <pre data-language=\"rst\">.. _`Imported Targets`:\n</pre> <p>creates a suitable anchor. Use an anchor name which matches the name of the corresponding section. Refer to the anchor using a cross-reference with specified text.</p> <p>Imported Targets need the <code>IMPORTED</code> term marked up with care in particular because the term may refer to a command keyword (<code>IMPORTED</code>), a target property (<a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-1-prop_tgt:IMPORTED\"><code>IMPORTED</code></a>), or a concept (<a class=\"reference internal\" href=\"cmake-buildsystem.7#imported-targets\"><span>Imported Targets</span></a>).</p> <p>Where a property, command or variable is related conceptually to others, by for example, being related to the buildsystem description, generator expressions or Qt, each relevant property, command or variable should link to the primary manual, which provides high-level information. Only particular information relating to the command should be in the documentation of the command.</p>   <h4 id=\"style-referencing-cmake-domain-objects\">Style: Referencing CMake Domain Objects</h4> <p>When referring to <a class=\"reference internal\" href=\"#cmake-domain\">CMake Domain</a> objects such as properties, variables, commands etc, prefer to link to the target object and follow that with the type of object it is. For example:</p> <pre data-language=\"rst\">Set the :prop_tgt:`AUTOMOC` target property to ``ON``.\n</pre> <p>Instead of</p> <pre data-language=\"rst\">Set the target property :prop_tgt:`AUTOMOC` to ``ON``.\n</pre> <p>The <code>policy</code> directive is an exception, and the type us usually referred to before the link:</p> <pre data-language=\"rst\">If policy :prop_tgt:`CMP0022` is set to ``NEW`` the behavior is ...\n</pre> <p>However, markup self-references with <code>inline-literal</code> syntax. For example, within the <a class=\"reference internal\" href=\"../command/add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> command documentation, use</p> <pre data-language=\"rst\">``add_executable``\n</pre> <p>not</p> <pre data-language=\"rst\">:command:`add_executable`\n</pre> <p>which is used elsewhere.</p>     <h2 id=\"modules\">Modules</h2> <p>The <code>Modules</code> directory contains CMake-language <code>.cmake</code> module files.</p>  <h3 id=\"module-documentation\">Module Documentation</h3> <p>To document CMake module <code>Modules/&lt;module-name&gt;.cmake</code>, modify <code>Help/manual/cmake-modules.7.rst</code> to reference the module in the <code>toctree</code> directive, in sorted order, as:</p> <pre data-language=\"python\">/module/&lt;module-name&gt;\n</pre> <p>Then add the module document file <code>Help/module/&lt;module-name&gt;.rst</code> containing just the line:</p> <pre data-language=\"python\">.. cmake-module:: ../../Modules/&lt;module-name&gt;.cmake\n</pre> <p>The <code>cmake-module</code> directive will scan the module file to extract reStructuredText markup from comment blocks that start in <code>.rst:</code>. Add to the top of <code>Modules/&lt;module-name&gt;.cmake</code> a <a class=\"reference internal\" href=\"cmake-language.7#line-comment\"><span>Line Comment</span></a> block of the form:</p> <pre data-language=\"cmake\">#.rst:\n# &lt;module-name&gt;\n# -------------\n#\n# &lt;reStructuredText documentation of module&gt;\n</pre> <p>or a <a class=\"reference internal\" href=\"cmake-language.7#bracket-comment\"><span>Bracket Comment</span></a> of the form:</p> <pre data-language=\"cmake\">#[[.rst:\n&lt;module-name&gt;\n-------------\n\n&lt;reStructuredText documentation of module&gt;\n#]]\n</pre> <p>Any number of <code>=</code> may be used in the opening and closing brackets as long as they match. Content on the line containing the closing bracket is excluded if and only if the line starts in <code>#</code>.</p> <p>Additional such <code>.rst:</code> comments may appear anywhere in the module file. All such comments must start with <code>#</code> in the first column.</p> <p>For example, a <code>Modules/Findxxx.cmake</code> module may contain:</p> <pre data-language=\"cmake\">#.rst:\n# FindXxx\n# -------\n#\n# This is a cool module.\n# This module does really cool stuff.\n# It can do even more than you think.\n#\n# It even needs two paragraphs to tell you about it.\n# And it defines the following variables:\n#\n# * VAR_COOL: this is great isn't it?\n# * VAR_REALLY_COOL: cool right?\n\n&lt;code&gt;\n\n#[========================================[.rst:\n.. command:: xxx_do_something\n\n This command does something for Xxx::\n\n  xxx_do_something(some arguments)\n#]========================================]\nmacro(xxx_do_something)\n  &lt;code&gt;\nendmacro()\n</pre> <p>After the top documentation block, leave a <em>BLANK</em> line, and then add a copyright and licence notice block like this one (change only the year range and name)</p> <pre data-language=\"cmake\">#=============================================================================\n# Copyright 2009-2011 Your Name\n#\n# Distributed under the OSI-approved BSD License (the \"License\");\n# see accompanying file Copyright.txt for details.\n#\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the License for more information.\n#=============================================================================\n# (To distribute this file outside of CMake, substitute the full\n#  License text for the above reference.)\n</pre> <p>Test the documentation formatting by running <code>cmake --help-module &lt;module-name&gt;</code>, and also by enabling the <code>SPHINX_HTML</code> and <code>SPHINX_MAN</code> options to build the documentation. Edit the comments until generated documentation looks satisfactory. To have a .cmake file in this directory NOT show up in the modules documentation, simply leave out the <code>Help/module/&lt;module-name&gt;.rst</code> file and the <code>Help/manual/cmake-modules.7.rst</code> toctree entry.</p>   <h3 id=\"id1\">Find Modules</h3> <p id=\"find-modules\">A “find module” is a <code>Modules/Find&lt;package&gt;.cmake</code> file to be loaded by the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> command when invoked for <code>&lt;package&gt;</code>.</p> <p>The primary task of a find module is to determine whether a package exists on the system, set the <code>&lt;package&gt;_FOUND</code> variable to reflect this and provide any variables, macros and imported targets required to use the package. A find module is useful in cases where an upstream library does not provide a <a class=\"reference internal\" href=\"cmake-packages.7#config-file-packages\"><span>config file package</span></a>.</p> <p>The traditional approach is to use variables for everything, including libraries and executables: see the <a class=\"reference internal\" href=\"#standard-variable-names\">Standard Variable Names</a> section below. This is what most of the existing find modules provided by CMake do.</p> <p>The more modern approach is to behave as much like <a class=\"reference internal\" href=\"cmake-packages.7#config-file-packages\"><span>config file packages</span></a> files as possible, by providing <a class=\"reference internal\" href=\"cmake-buildsystem.7#imported-targets\"><span>imported target</span></a>. This has the advantage of propagating <a class=\"reference internal\" href=\"cmake-buildsystem.7#target-usage-requirements\"><span>Transitive Usage Requirements</span></a> to consumers.</p> <p>In either case (or even when providing both variables and imported targets), find modules should provide backwards compatibility with old versions that had the same name.</p> <p>A FindFoo.cmake module will typically be loaded by the command:</p> <pre data-language=\"python\">find_package(Foo [major[.minor[.patch[.tweak]]]]\n             [EXACT] [QUIET] [REQUIRED]\n             [[COMPONENTS] [components...]]\n             [OPTIONAL_COMPONENTS components...]\n             [NO_POLICY_SCOPE])\n</pre> <p>See the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-1-command:find_package\"><code>find_package()</code></a> documentation for details on what variables are set for the find module. Most of these are dealt with by using <a class=\"reference internal\" href=\"../module/findpackagehandlestandardargs#module:FindPackageHandleStandardArgs\" title=\"FindPackageHandleStandardArgs\" id=\"index-0-module:FindPackageHandleStandardArgs\"><code>FindPackageHandleStandardArgs</code></a>.</p> <p>Briefly, the module should only locate versions of the package compatible with the requested version, as described by the <code>Foo_FIND_VERSION</code> family of variables. If <code>Foo_FIND_QUIETLY</code> is set to true, it should avoid printing messages, including anything complaining about the package not being found. If <code>Foo_FIND_REQUIRED</code> is set to true, the module should issue a <code>FATAL_ERROR</code> if the package cannot be found. If neither are set to true, it should print a non-fatal message if it cannot find the package.</p> <p>Packages that find multiple semi-independent parts (like bundles of libraries) should search for the components listed in <code>Foo_FIND_COMPONENTS</code> if it is set , and only set <code>Foo_FOUND</code> to true if for each searched-for component <code>&lt;c&gt;</code> that was not found, <code>Foo_FIND_REQUIRED_&lt;c&gt;</code> is not set to true. The <code>HANDLE_COMPONENTS</code> argument of <code>find_package_handle_standard_args()</code> can be used to implement this.</p> <p>If <code>Foo_FIND_COMPONENTS</code> is not set, which modules are searched for and required is up to the find module, but should be documented.</p> <p>For internal implementation, it is a generally accepted convention that variables starting with underscore are for temporary use only.</p> <p>Like all modules, find modules should be properly documented. To add a module to the CMake documentation, follow the steps in the <a class=\"reference internal\" href=\"#module-documentation\">Module Documentation</a> section above.</p>  <h4 id=\"standard-variable-names\">Standard Variable Names</h4> <p>For a <code>FindXxx.cmake</code> module that takes the approach of setting variables (either instead of or in addition to creating imported targets), the following variable names should be used to keep things consistent between find modules. Note that all variables start with <code>Xxx_</code> to make sure they do not interfere with other find modules; the same consideration applies to macros, functions and imported targets.</p> <dl class=\"docutils\"> <dt><code>Xxx_INCLUDE_DIRS</code></dt> <dd>The final set of include directories listed in one variable for use by client code. This should not be a cache entry.</dd> <dt><code>Xxx_LIBRARIES</code></dt> <dd>The libraries to link against to use Xxx. These should include full paths. This should not be a cache entry.</dd> <dt><code>Xxx_DEFINITIONS</code></dt> <dd>Definitions to use when compiling code that uses Xxx. This really shouldn’t include options such as <code>-DHAS_JPEG</code> that a client source-code file uses to decide whether to <code>#include &lt;jpeg.h&gt;</code>\n</dd> <dt><code>Xxx_EXECUTABLE</code></dt> <dd>Where to find the Xxx tool.</dd> <dt><code>Xxx_Yyy_EXECUTABLE</code></dt> <dd>Where to find the Yyy tool that comes with Xxx.</dd> <dt><code>Xxx_LIBRARY_DIRS</code></dt> <dd>Optionally, the final set of library directories listed in one variable for use by client code. This should not be a cache entry.</dd> <dt><code>Xxx_ROOT_DIR</code></dt> <dd>Where to find the base directory of Xxx.</dd> <dt><code>Xxx_VERSION_Yy</code></dt> <dd>Expect Version Yy if true. Make sure at most one of these is ever true.</dd> <dt><code>Xxx_WRAP_Yy</code></dt> <dd>If False, do not try to use the relevant CMake wrapping command.</dd> <dt><code>Xxx_Yy_FOUND</code></dt> <dd>If False, optional Yy part of Xxx system is not available.</dd> <dt><code>Xxx_FOUND</code></dt> <dd>Set to false, or undefined, if we haven’t found, or don’t want to use Xxx.</dd> <dt><code>Xxx_NOT_FOUND_MESSAGE</code></dt> <dd>Should be set by config-files in the case that it has set <code>Xxx_FOUND</code> to FALSE. The contained message will be printed by the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-2-command:find_package\"><code>find_package()</code></a> command and by <code>find_package_handle_standard_args()</code> to inform the user about the problem.</dd> <dt><code>Xxx_RUNTIME_LIBRARY_DIRS</code></dt> <dd>Optionally, the runtime library search path for use when running an executable linked to shared libraries. The list should be used by user code to create the <code>PATH</code> on windows or <code>LD_LIBRARY_PATH</code> on UNIX. This should not be a cache entry.</dd> <dt><code>Xxx_VERSION</code></dt> <dd>The full version string of the package found, if any. Note that many existing modules provide <code>Xxx_VERSION_STRING</code> instead.</dd> <dt><code>Xxx_VERSION_MAJOR</code></dt> <dd>The major version of the package found, if any.</dd> <dt><code>Xxx_VERSION_MINOR</code></dt> <dd>The minor version of the package found, if any.</dd> <dt><code>Xxx_VERSION_PATCH</code></dt> <dd>The patch version of the package found, if any.</dd> </dl> <p>The following names should not usually be used in CMakeLists.txt files, but are typically cache variables for users to edit and control the behaviour of find modules (like entering the path to a library manually)</p> <dl class=\"docutils\"> <dt><code>Xxx_LIBRARY</code></dt> <dd>The path of the Xxx library (as used with <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a>, for example).</dd> <dt><code>Xxx_Yy_LIBRARY</code></dt> <dd>The path of the Yy library that is part of the Xxx system. It may or may not be required to use Xxx.</dd> <dt><code>Xxx_INCLUDE_DIR</code></dt> <dd>Where to find headers for using the Xxx library.</dd> <dt><code>Xxx_Yy_INCLUDE_DIR</code></dt> <dd>Where to find headers for using the Yy library of the Xxx system.</dd> </dl> <p>To prevent users being overwhelmed with settings to configure, try to keep as many options as possible out of the cache, leaving at least one option which can be used to disable use of the module, or locate a not-found library (e.g. <code>Xxx_ROOT_DIR</code>). For the same reason, mark most cache options as advanced. For packages which provide both debug and release binaries, it is common to create cache variables with a <code>_LIBRARY_&lt;CONFIG&gt;</code> suffix, such as <code>Foo_LIBRARY_RELEASE</code> and <code>Foo_LIBRARY_DEBUG</code>.</p> <p>While these are the standard variable names, you should provide backwards compatibility for any old names that were actually in use. Make sure you comment them as deprecated, so that no-one starts using them.</p>   <h4 id=\"a-sample-find-module\">A Sample Find Module</h4> <p>We will describe how to create a simple find module for a library <code>Foo</code>.</p> <p>The first thing that is needed is documentation. CMake’s documentation system requires you to start the file with a documentation marker and the name of the module. You should follow this with a simple statement of what the module does.</p> <pre data-language=\"cmake\">#.rst:\n# FindFoo\n# -------\n#\n# Finds the Foo library\n#\n</pre> <p>More description may be required for some packages. If there are caveats or other details users of the module should be aware of, you can add further paragraphs below this. Then you need to document what variables and imported targets are set by the module, such as</p> <pre data-language=\"cmake\"># This will define the following variables::\n#\n#   Foo_FOUND    - True if the system has the Foo library\n#   Foo_VERSION  - The version of the Foo library which was found\n#\n# and the following imported targets::\n#\n#   Foo::Foo   - The Foo library\n</pre> <p>If the package provides any macros, they should be listed here, but can be documented where they are defined. See the <a class=\"reference internal\" href=\"#module-documentation\">Module Documentation</a> section above for more details.</p> <p>After the documentation, leave a blank line, and then add a copyright and licence notice block</p> <pre data-language=\"cmake\">#=============================================================================\n# Copyright 2009-2011 Your Name\n#\n# Distributed under the OSI-approved BSD License (the \"License\");\n# see accompanying file Copyright.txt for details.\n#\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the License for more information.\n#=============================================================================\n# (To distribute this file outside of CMake, substitute the full\n#  License text for the above reference.)\n</pre> <p>Now the actual libraries and so on have to be found. The code here will obviously vary from module to module (dealing with that, after all, is the point of find modules), but there tends to be a common pattern for libraries.</p> <p>First, we try to use <code>pkg-config</code> to find the library. Note that we cannot rely on this, as it may not be available, but it provides a good starting point.</p> <pre data-language=\"cmake\">find_package(PkgConfig)\npkg_check_modules(PC_Foo QUIET Foo)\n</pre> <p>This should define some variables starting <code>PC_Foo_</code> that contain the information from the <code>Foo.pc</code> file.</p> <p>Now we need to find the libraries and include files; we use the information from <code>pkg-config</code> to provide hints to CMake about where to look.</p> <pre data-language=\"cmake\">find_path(Foo_INCLUDE_DIR\n  NAMES foo.h\n  PATHS ${PC_Foo_INCLUDE_DIRS}\n  PATH_SUFFIXES Foo\n)\nfind_library(Foo_LIBRARY\n  NAMES foo\n  PATHS ${PC_Foo_LIBRARY_DIRS}\n)\n</pre> <p>If you have a good way of getting the version (from a header file, for example), you can use that information to set <code>Foo_VERSION</code> (although note that find modules have traditionally used <code>Foo_VERSION_STRING</code>, so you may want to set both). Otherwise, attempt to use the information from <code>pkg-config</code></p> <pre data-language=\"cmake\">set(Foo_VERSION ${PC_Foo_VERSION})\n</pre> <p>Now we can use <a class=\"reference internal\" href=\"../module/findpackagehandlestandardargs#module:FindPackageHandleStandardArgs\" title=\"FindPackageHandleStandardArgs\" id=\"index-1-module:FindPackageHandleStandardArgs\"><code>FindPackageHandleStandardArgs</code></a> to do most of the rest of the work for us</p> <pre data-language=\"cmake\">include(FindPackageHandleStandardArgs)\nfind_package_handle_standard_args(Foo\n  FOUND_VAR Foo_FOUND\n  REQUIRED_VARS\n    Foo_LIBRARY\n    Foo_INCLUDE_DIR\n  VERSION_VAR Foo_VERSION\n)\n</pre> <p>This will check that the <code>REQUIRED_VARS</code> contain values (that do not end in <code>-NOTFOUND</code>) and set <code>Foo_FOUND</code> appropriately. It will also cache those values. If <code>Foo_VERSION</code> is set, and a required version was passed to <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-3-command:find_package\"><code>find_package()</code></a>, it will check the requested version against the one in <code>Foo_VERSION</code>. It will also print messages as appropriate; note that if the package was found, it will print the contents of the first required variable to indicate where it was found.</p> <p>At this point, we have to provide a way for users of the find module to link to the library or libraries that were found. There are two approaches, as discussed in the <a class=\"reference internal\" href=\"#find-modules\">Find Modules</a> section above. The traditional variable approach looks like</p> <pre data-language=\"cmake\">if(Foo_FOUND)\n  set(Foo_LIBRARIES ${Foo_LIBRARY})\n  set(Foo_INCLUDE_DIRS ${Foo_INCLUDE_DIR})\n  set(Foo_DEFINITIONS ${PC_Foo_CFLAGS_OTHER})\nendif()\n</pre> <p>If more than one library was found, all of them should be included in these variables (see the <a class=\"reference internal\" href=\"#standard-variable-names\">Standard Variable Names</a> section for more information).</p> <p>When providing imported targets, these should be namespaced (hence the <code>Foo::</code> prefix); CMake will recognize that values passed to <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> that contain <code>::</code> in their name are supposed to be imported targets (rather than just library names), and will produce appropriate diagnostic messages if that target does not exist (see policy <a class=\"reference internal\" href=\"../policy/cmp0028#policy:CMP0028\" title=\"CMP0028\" id=\"index-0-policy:CMP0028\"><code>CMP0028</code></a>).</p> <pre data-language=\"cmake\">if(Foo_FOUND AND NOT TARGET Foo::Foo)\n  add_library(Foo::Foo UNKNOWN IMPORTED)\n  set_target_properties(Foo::Foo PROPERTIES\n    IMPORTED_LOCATION \"${Foo_LIBRARY}\"\n    INTERFACE_COMPILE_OPTIONS \"${PC_Foo_CFLAGS_OTHER}\"\n    INTERFACE_INCLUDE_DIRECTORIES \"${Foo_INCLUDE_DIR}\"\n  )\nendif()\n</pre> <p>One thing to note about this is that the <code>INTERFACE_INCLUDE_DIRECTORIES</code> and similar properties should only contain information about the target itself, and not any of its dependencies. Instead, those dependencies should also be targets, and CMake should be told that they are dependencies of this target. CMake will then combine all the necessary information automatically.</p> <p>The type of the <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-2-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target created in the <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> command can always be specified as <code>UNKNOWN</code> type. This simplifies the code in cases where static or shared variants may be found, and CMake will determine the type by inspecting the files.</p> <p>If the library is available with multiple configurations, the <a class=\"reference internal\" href=\"../prop_tgt/imported_configurations#prop_tgt:IMPORTED_CONFIGURATIONS\" title=\"IMPORTED_CONFIGURATIONS\" id=\"index-0-prop_tgt:IMPORTED_CONFIGURATIONS\"><code>IMPORTED_CONFIGURATIONS</code></a> target property should also be populated:</p> <pre data-language=\"cmake\">if(Foo_FOUND)\n  if (NOT TARGET Foo::Foo)\n    add_library(Foo::Foo UNKNOWN IMPORTED)\n  endif()\n  if (Foo_LIBRARY_RELEASE)\n    set_property(TARGET Foo::Foo APPEND PROPERTY\n      IMPORTED_CONFIGURATIONS RELEASE\n    )\n    set_target_properties(Foo::Foo PROPERTIES\n      IMPORTED_LOCATION_RELEASE \"${Foo_LIBRARY_RELEASE}\"\n    )\n  endif()\n  if (Foo_LIBRARY_DEBUG)\n    set_property(TARGET Foo::Foo APPEND PROPERTY\n      IMPORTED_CONFIGURATIONS DEBUG\n    )\n    set_target_properties(Foo::Foo PROPERTIES\n      IMPORTED_LOCATION_DEBUG \"${Foo_LIBRARY_DEBUG}\"\n    )\n  endif()\n  set_target_properties(Foo::Foo PROPERTIES\n    INTERFACE_COMPILE_OPTIONS \"${PC_Foo_CFLAGS_OTHER}\"\n    INTERFACE_INCLUDE_DIRECTORIES \"${Foo_INCLUDE_DIR}\"\n  )\nendif()\n</pre> <p>The <code>RELEASE</code> variant should be listed first in the property so that that variant is chosen if the user uses a configuration which is not an exact match for any listed <code>IMPORTED_CONFIGURATIONS</code>.</p> <p>Most of the cache variables should be hidden in the <code>ccmake</code> interface unless the user explicitly asks to edit them.</p> <pre data-language=\"cmake\">mark_as_advanced(\n  Foo_INCLUDE_DIR\n  Foo_LIBRARY\n)\n</pre> <p>If this module replaces an older version, you should set compatibility variables to cause the least disruption possible.</p> <pre data-language=\"cmake\"># compatibility variables\nset(Foo_VERSION_STRING ${Foo_VERSION})\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-developer.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-developer.7.html</a>\n  </p>\n</div>\n","manual/cmake-language.7":"<h1 id=\"manual:cmake-language(7)\">cmake-language(7)</h1>   <ul> <li>\n<a class=\"reference internal\" href=\"#organization\" id=\"id10\">Organization</a><ul> <li><a class=\"reference internal\" href=\"#directories\" id=\"id11\">Directories</a></li> <li><a class=\"reference internal\" href=\"#scripts\" id=\"id12\">Scripts</a></li> <li><a class=\"reference internal\" href=\"#modules\" id=\"id13\">Modules</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#syntax\" id=\"id14\">Syntax</a><ul> <li><a class=\"reference internal\" href=\"#encoding\" id=\"id15\">Encoding</a></li> <li><a class=\"reference internal\" href=\"#source-files\" id=\"id16\">Source Files</a></li> <li><a class=\"reference internal\" href=\"#command-invocations\" id=\"id17\">Command Invocations</a></li> <li>\n<a class=\"reference internal\" href=\"#command-arguments\" id=\"id18\">Command Arguments</a><ul> <li><a class=\"reference internal\" href=\"#bracket-argument\" id=\"id19\">Bracket Argument</a></li> <li><a class=\"reference internal\" href=\"#quoted-argument\" id=\"id20\">Quoted Argument</a></li> <li><a class=\"reference internal\" href=\"#unquoted-argument\" id=\"id21\">Unquoted Argument</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#escape-sequences\" id=\"id22\">Escape Sequences</a></li> <li><a class=\"reference internal\" href=\"#variable-references\" id=\"id23\">Variable References</a></li> <li>\n<a class=\"reference internal\" href=\"#comments\" id=\"id24\">Comments</a><ul> <li><a class=\"reference internal\" href=\"#bracket-comment\" id=\"id25\">Bracket Comment</a></li> <li><a class=\"reference internal\" href=\"#line-comment\" id=\"id26\">Line Comment</a></li> </ul> </li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#control-structures\" id=\"id27\">Control Structures</a><ul> <li><a class=\"reference internal\" href=\"#conditional-blocks\" id=\"id28\">Conditional Blocks</a></li> <li><a class=\"reference internal\" href=\"#loops\" id=\"id29\">Loops</a></li> <li><a class=\"reference internal\" href=\"#command-definitions\" id=\"id30\">Command Definitions</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#variables\" id=\"id31\">Variables</a></li> <li><a class=\"reference internal\" href=\"#lists\" id=\"id32\">Lists</a></li> </ul>\n   <h2 id=\"organization\">Organization</h2> <p>CMake input files are written in the “CMake Language” in source files named <code>CMakeLists.txt</code> or ending in a <code>.cmake</code> file name extension.</p> <p>CMake Language source files in a project are organized into:</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#directories\">Directories</a> (<code>CMakeLists.txt</code>),</li> <li>\n<a class=\"reference internal\" href=\"#scripts\">Scripts</a> (<code>&lt;script&gt;.cmake</code>), and</li> <li>\n<a class=\"reference internal\" href=\"#modules\">Modules</a> (<code>&lt;module&gt;.cmake</code>).</li> </ul>  <h3 id=\"directories\">Directories</h3> <p>When CMake processes a project source tree, the entry point is a source file called <code>CMakeLists.txt</code> in the top-level source directory. This file may contain the entire build specification or use the <a class=\"reference internal\" href=\"../command/add_subdirectory#command:add_subdirectory\" title=\"add_subdirectory\" id=\"index-0-command:add_subdirectory\"><code>add_subdirectory()</code></a> command to add subdirectories to the build. Each subdirectory added by the command must also contain a <code>CMakeLists.txt</code> file as the entry point to that directory. For each source directory whose <code>CMakeLists.txt</code> file is processed CMake generates a corresponding directory in the build tree to act as the default working and output directory.</p>   <h3 id=\"scripts\">Scripts</h3> <p>An individual <code>&lt;script&gt;.cmake</code> source file may be processed in <em>script mode</em> by using the <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> command-line tool with the <code>-P</code> option. Script mode simply runs the commands in the given CMake Language source file and does not generate a build system. It does not allow CMake commands that define build targets or actions.</p>   <h3 id=\"modules\">Modules</h3> <p>CMake Language code in either <a class=\"reference internal\" href=\"#directories\">Directories</a> or <a class=\"reference internal\" href=\"#scripts\">Scripts</a> may use the <a class=\"reference internal\" href=\"../command/include#command:include\" title=\"include\" id=\"index-0-command:include\"><code>include()</code></a> command to load a <code>&lt;module&gt;.cmake</code> source file in the scope of the including context. See the <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-0-manual:cmake-modules(7)\"><code>cmake-modules(7)</code></a> manual page for documentation of modules included with the CMake distribution. Project source trees may also provide their own modules and specify their location(s) in the <a class=\"reference internal\" href=\"../variable/cmake_module_path#variable:CMAKE_MODULE_PATH\" title=\"CMAKE_MODULE_PATH\" id=\"index-0-variable:CMAKE_MODULE_PATH\"><code>CMAKE_MODULE_PATH</code></a> variable.</p>    <h2 id=\"syntax\">Syntax</h2>  <h3 id=\"cmake-language-encoding\">Encoding</h3> <p id=\"encoding\">A CMake Language source file may be written in 7-bit ASCII text for maximum portability across all supported platforms. Newlines may be encoded as either <code>\\n</code> or <code>\\r\\n</code> but will be converted to <code>\\n</code> as input files are read.</p> <p>Note that the implementation is 8-bit clean so source files may be encoded as UTF-8 on platforms with system APIs supporting this encoding. In addition, CMake 3.2 and above support source files encoded in UTF-8 on Windows (using UTF-16 to call system APIs). Furthermore, CMake 3.0 and above allow a leading UTF-8 <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Byte_order_mark\">Byte-Order Mark</a> in source files.</p>   <h3 id=\"source-files\">Source Files</h3> <p>A CMake Language source file consists of zero or more <a class=\"reference internal\" href=\"#command-invocations\">Command Invocations</a> separated by newlines and optionally spaces and <a class=\"reference internal\" href=\"#comments\">Comments</a>:</p> <pre>\n<strong id=\"grammar-token-file\">file        </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-file_element\">file_element</a>*\n<strong id=\"grammar-token-file_element\">file_element</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-command_invocation\">command_invocation</a> <a class=\"reference internal\" href=\"#grammar-token-line_ending\">line_ending</a> |\n                  (<a class=\"reference internal\" href=\"#grammar-token-bracket_comment\">bracket_comment</a>|<a class=\"reference internal\" href=\"#grammar-token-space\">space</a>)* <a class=\"reference internal\" href=\"#grammar-token-line_ending\">line_ending</a>\n<strong id=\"grammar-token-line_ending\">line_ending </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-line_comment\">line_comment</a>? <a class=\"reference internal\" href=\"#grammar-token-newline\">newline</a>\n<strong id=\"grammar-token-space\">space       </strong> ::=  &lt;match '[ \\t]+'&gt;\n<strong id=\"grammar-token-newline\">newline     </strong> ::=  &lt;match '\\n'&gt;\n</pre> <p>Note that any source file line not inside <a class=\"reference internal\" href=\"#command-arguments\">Command Arguments</a> or a <a class=\"reference internal\" href=\"#bracket-comment\">Bracket Comment</a> can end in a <a class=\"reference internal\" href=\"#line-comment\">Line Comment</a>.</p>   <h3 id=\"id1\">Command Invocations</h3> <p id=\"command-invocations\">A <em>command invocation</em> is a name followed by paren-enclosed arguments separated by whitespace:</p> <pre>\n<strong id=\"grammar-token-command_invocation\">command_invocation </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-space\">space</a>* <a class=\"reference internal\" href=\"#grammar-token-identifier\">identifier</a> <a class=\"reference internal\" href=\"#grammar-token-space\">space</a>* '(' <a class=\"reference internal\" href=\"#grammar-token-arguments\">arguments</a> ')'\n<strong id=\"grammar-token-identifier\">identifier         </strong> ::=  &lt;match '[A-Za-z_][A-Za-z0-9_]*'&gt;\n<strong id=\"grammar-token-arguments\">arguments          </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-argument\">argument</a>? <a class=\"reference internal\" href=\"#grammar-token-separated_arguments\">separated_arguments</a>*\n<strong id=\"grammar-token-separated_arguments\">separated_arguments</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-separation\">separation</a>+ <a class=\"reference internal\" href=\"#grammar-token-argument\">argument</a>? |\n                         <a class=\"reference internal\" href=\"#grammar-token-separation\">separation</a>* '(' <a class=\"reference internal\" href=\"#grammar-token-arguments\">arguments</a> ')'\n<strong id=\"grammar-token-separation\">separation         </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-space\">space</a> | <a class=\"reference internal\" href=\"#grammar-token-line_ending\">line_ending</a>\n</pre> <p>For example:</p> <pre data-language=\"cmake\">add_executable(hello world.c)\n</pre> <p>Command names are case-insensitive. Nested unquoted parentheses in the arguments must balance. Each <code>(</code> or <code>)</code> is given to the command invocation as a literal <a class=\"reference internal\" href=\"#unquoted-argument\">Unquoted Argument</a>. This may be used in calls to the <a class=\"reference internal\" href=\"../command/if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> command to enclose conditions. For example:</p> <pre data-language=\"cmake\">if(FALSE AND (FALSE OR TRUE)) # evaluates to FALSE\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>CMake versions prior to 3.0 require command name identifiers to be at least 2 characters.</p> <p class=\"last\">CMake versions prior to 2.8.12 silently accept an <a class=\"reference internal\" href=\"#unquoted-argument\">Unquoted Argument</a> or a <a class=\"reference internal\" href=\"#quoted-argument\">Quoted Argument</a> immediately following a <a class=\"reference internal\" href=\"#quoted-argument\">Quoted Argument</a> and not separated by any whitespace. For compatibility, CMake 2.8.12 and higher accept such code but produce a warning.</p> </div>   <h3 id=\"command-arguments\">Command Arguments</h3> <p>There are three types of arguments within <a class=\"reference internal\" href=\"#command-invocations\">Command Invocations</a>:</p> <pre>\n<strong id=\"grammar-token-argument\">argument</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-bracket_argument\">bracket_argument</a> | <a class=\"reference internal\" href=\"#grammar-token-quoted_argument\">quoted_argument</a> | <a class=\"reference internal\" href=\"#grammar-token-unquoted_argument\">unquoted_argument</a>\n</pre>  <h4 id=\"id2\">Bracket Argument</h4> <p id=\"bracket-argument\">A <em>bracket argument</em>, inspired by <a class=\"reference external\" href=\"http://www.lua.org/\">Lua</a> long bracket syntax, encloses content between opening and closing “brackets” of the same length:</p> <pre>\n<strong id=\"grammar-token-bracket_argument\">bracket_argument</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-bracket_open\">bracket_open</a> <a class=\"reference internal\" href=\"#grammar-token-bracket_content\">bracket_content</a> <a class=\"reference internal\" href=\"#grammar-token-bracket_close\">bracket_close</a>\n<strong id=\"grammar-token-bracket_open\">bracket_open    </strong> ::=  '[' '='{len} '['\n<strong id=\"grammar-token-bracket_content\">bracket_content </strong> ::=  &lt;any text not containing a <a class=\"reference internal\" href=\"#grammar-token-bracket_close\">bracket_close</a>\n                       of the same {len} as the <a class=\"reference internal\" href=\"#grammar-token-bracket_open\">bracket_open</a>&gt;\n<strong id=\"grammar-token-bracket_close\">bracket_close   </strong> ::=  ']' '='{len} ']'\n</pre> <p>An opening bracket of length <em>len &gt;= 0</em> is written <code>[</code> followed by <em>len</em> <code>=</code> followed by <code>[</code> and the corresponding closing bracket is written <code>]</code> followed by <em>len</em> <code>=</code> followed by <code>]</code>. Brackets do not nest. A unique length may always be chosen for the opening and closing brackets to contain closing brackets of other lengths.</p> <p>Bracket argument content consists of all text between the opening and closing brackets, except that one newline immediately following the opening bracket, if any, is ignored. No evaluation of the enclosed content, such as <a class=\"reference internal\" href=\"#escape-sequences\">Escape Sequences</a> or <a class=\"reference internal\" href=\"#variable-references\">Variable References</a>, is performed. A bracket argument is always given to the command invocation as exactly one argument.</p> <p>For example:</p> <pre data-language=\"cmake\">message([=[\nThis is the first line in a bracket argument with bracket length 1.\nNo \\-escape sequences or ${variable} references are evaluated.\nThis is always one argument even though it contains a ; character.\nThe text does not end on a closing bracket of length 0 like ]].\nIt does end in a closing bracket of length 1.\n]=])\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">CMake versions prior to 3.0 do not support bracket arguments. They interpret the opening bracket as the start of an <a class=\"reference internal\" href=\"#unquoted-argument\">Unquoted Argument</a>.</p> </div>   <h4 id=\"id3\">Quoted Argument</h4> <p id=\"quoted-argument\">A <em>quoted argument</em> encloses content between opening and closing double-quote characters:</p> <pre>\n<strong id=\"grammar-token-quoted_argument\">quoted_argument    </strong> ::=  '\"' <a class=\"reference internal\" href=\"#grammar-token-quoted_element\">quoted_element</a>* '\"'\n<strong id=\"grammar-token-quoted_element\">quoted_element     </strong> ::=  &lt;any character except '\\' or '\"'&gt; |\n                         <a class=\"reference internal\" href=\"#grammar-token-escape_sequence\">escape_sequence</a> |\n                         <a class=\"reference internal\" href=\"#grammar-token-quoted_continuation\">quoted_continuation</a>\n<strong id=\"grammar-token-quoted_continuation\">quoted_continuation</strong> ::=  '\\' <a class=\"reference internal\" href=\"#grammar-token-newline\">newline</a>\n</pre> <p>Quoted argument content consists of all text between opening and closing quotes. Both <a class=\"reference internal\" href=\"#escape-sequences\">Escape Sequences</a> and <a class=\"reference internal\" href=\"#variable-references\">Variable References</a> are evaluated. A quoted argument is always given to the command invocation as exactly one argument.</p> <p>For example:</p> <pre data-language=\"cmake\">message(\"This is a quoted argument containing multiple lines.\nThis is always one argument even though it contains a ; character.\nBoth \\\\-escape sequences and ${variable} references are evaluated.\nThe text does not end on an escaped double-quote like \\\".\nIt does end in an unescaped double quote.\n\")\n</pre> <p>The final <code>\\</code> on any line ending in an odd number of backslashes is treated as a line continuation and ignored along with the immediately following newline character. For example:</p> <pre data-language=\"cmake\">message(\"\\\nThis is the first line of a quoted argument. \\\nIn fact it is the only line but since it is long \\\nthe source code uses line continuation.\\\n\")\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">CMake versions prior to 3.0 do not support continuation with <code>\\</code>. They report errors in quoted arguments containing lines ending in an odd number of <code>\\</code> characters.</p> </div>   <h4 id=\"id4\">Unquoted Argument</h4> <p id=\"unquoted-argument\">An <em>unquoted argument</em> is not enclosed by any quoting syntax. It may not contain any whitespace, <code>(</code>, <code>)</code>, <code>#</code>, <code>\"</code>, or <code>\\</code> except when escaped by a backslash:</p> <pre>\n<strong id=\"grammar-token-unquoted_argument\">unquoted_argument</strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-unquoted_element\">unquoted_element</a>+ | <a class=\"reference internal\" href=\"#grammar-token-unquoted_legacy\">unquoted_legacy</a>\n<strong id=\"grammar-token-unquoted_element\">unquoted_element </strong> ::=  &lt;any character except whitespace or one of '()#\"\\'&gt; |\n                       <a class=\"reference internal\" href=\"#grammar-token-escape_sequence\">escape_sequence</a>\n<strong id=\"grammar-token-unquoted_legacy\">unquoted_legacy  </strong> ::=  &lt;see note in text&gt;\n</pre> <p>Unquoted argument content consists of all text in a contiguous block of allowed or escaped characters. Both <a class=\"reference internal\" href=\"#escape-sequences\">Escape Sequences</a> and <a class=\"reference internal\" href=\"#variable-references\">Variable References</a> are evaluated. The resulting value is divided in the same way <a class=\"reference internal\" href=\"#lists\">Lists</a> divide into elements. Each non-empty element is given to the command invocation as an argument. Therefore an unquoted argument may be given to a command invocation as zero or more arguments.</p> <p>For example:</p> <pre data-language=\"cmake\">foreach(arg\n    NoSpace\n    Escaped\\ Space\n    This;Divides;Into;Five;Arguments\n    Escaped\\;Semicolon\n    )\n  message(\"${arg}\")\nendforeach()\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>To support legacy CMake code, unquoted arguments may also contain double-quoted strings (<code>\"...\"</code>, possibly enclosing horizontal whitespace), and make-style variable references (<code>$(MAKEVAR)</code>). Unescaped double-quotes must balance, may not appear at the beginning of an unquoted argument, and are treated as part of the content. For example, the unquoted arguments <code>-Da=\"b c\"</code>, <code>-Da=$(v)</code>, and <code>a\" \"b\"c\"d</code> are each interpreted literally.</p> <p class=\"last\">The above “unquoted_legacy” production represents such arguments. We do not recommend using legacy unquoted arguments in new code. Instead use a <a class=\"reference internal\" href=\"#quoted-argument\">Quoted Argument</a> or a <a class=\"reference internal\" href=\"#bracket-argument\">Bracket Argument</a> to represent the content.</p> </div>    <h3 id=\"id5\">Escape Sequences</h3> <p id=\"escape-sequences\">An <em>escape sequence</em> is a <code>\\</code> followed by one character:</p> <pre>\n<strong id=\"grammar-token-escape_sequence\">escape_sequence </strong> ::=  <a class=\"reference internal\" href=\"#grammar-token-escape_identity\">escape_identity</a> | <a class=\"reference internal\" href=\"#grammar-token-escape_encoded\">escape_encoded</a> | <a class=\"reference internal\" href=\"#grammar-token-escape_semicolon\">escape_semicolon</a>\n<strong id=\"grammar-token-escape_identity\">escape_identity </strong> ::=  '\\' &lt;match '[^A-Za-z0-9;]'&gt;\n<strong id=\"grammar-token-escape_encoded\">escape_encoded  </strong> ::=  '\\t' | '\\r' | '\\n'\n<strong id=\"grammar-token-escape_semicolon\">escape_semicolon</strong> ::=  '\\;'\n</pre> <p>A <code>\\</code> followed by a non-alphanumeric character simply encodes the literal character without interpreting it as syntax. A <code>\\t</code>, <code>\\r</code>, or <code>\\n</code> encodes a tab, carriage return, or newline character, respectively. A <code>\\;</code> outside of any <a class=\"reference internal\" href=\"#variable-references\">Variable References</a> encodes itself but may be used in an <a class=\"reference internal\" href=\"#unquoted-argument\">Unquoted Argument</a> to encode the <code>;</code> without dividing the argument value on it. A <code>\\;</code> inside <a class=\"reference internal\" href=\"#variable-references\">Variable References</a> encodes the literal <code>;</code> character. (See also policy <a class=\"reference internal\" href=\"../policy/cmp0053#policy:CMP0053\" title=\"CMP0053\" id=\"index-0-policy:CMP0053\"><code>CMP0053</code></a> documentation for historical considerations.)</p>   <h3 id=\"id6\">Variable References</h3> <p id=\"variable-references\">A <em>variable reference</em> has the form <code>${variable_name}</code> and is evaluated inside a <a class=\"reference internal\" href=\"#quoted-argument\">Quoted Argument</a> or an <a class=\"reference internal\" href=\"#unquoted-argument\">Unquoted Argument</a>. A variable reference is replaced by the value of the variable, or by the empty string if the variable is not set. Variable references can nest and are evaluated from the inside out, e.g. <code>${outer_${inner_variable}_variable}</code>.</p> <p>Literal variable references may consist of alphanumeric characters, the characters <code>/_.+-</code>, and <a class=\"reference internal\" href=\"#escape-sequences\">Escape Sequences</a>. Nested references may be used to evaluate variables of any name. (See also policy <a class=\"reference internal\" href=\"../policy/cmp0053#policy:CMP0053\" title=\"CMP0053\" id=\"index-1-policy:CMP0053\"><code>CMP0053</code></a> documentation for historical considerations.)</p> <p>The <a class=\"reference internal\" href=\"#variables\">Variables</a> section documents the scope of variable names and how their values are set.</p> <p>An <em>environment variable reference</em> has the form <code>$ENV{VAR}</code> and is evaluated in the same contexts as a normal variable reference.</p>   <h3 id=\"comments\">Comments</h3> <p>A comment starts with a <code>#</code> character that is not inside a <a class=\"reference internal\" href=\"#bracket-argument\">Bracket Argument</a>, <a class=\"reference internal\" href=\"#quoted-argument\">Quoted Argument</a>, or escaped with <code>\\</code> as part of an <a class=\"reference internal\" href=\"#unquoted-argument\">Unquoted Argument</a>. There are two types of comments: a <a class=\"reference internal\" href=\"#bracket-comment\">Bracket Comment</a> and a <a class=\"reference internal\" href=\"#line-comment\">Line Comment</a>.</p>  <h4 id=\"id7\">Bracket Comment</h4> <p id=\"bracket-comment\">A <code>#</code> immediately followed by a <a class=\"reference internal\" href=\"#bracket-argument\">Bracket Argument</a> forms a <em>bracket comment</em> consisting of the entire bracket enclosure:</p> <pre>\n<strong id=\"grammar-token-bracket_comment\">bracket_comment</strong> ::=  '#' <a class=\"reference internal\" href=\"#grammar-token-bracket_argument\">bracket_argument</a>\n</pre> <p>For example:</p> <pre data-language=\"cmake\">#[[This is a bracket comment.\nIt runs until the close bracket.]]\nmessage(\"First Argument\\n\" #[[Bracket Comment]] \"Second Argument\")\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">CMake versions prior to 3.0 do not support bracket comments. They interpret the opening <code>#</code> as the start of a <a class=\"reference internal\" href=\"#line-comment\">Line Comment</a>.</p> </div>   <h4 id=\"id8\">Line Comment</h4> <p id=\"line-comment\">A <code>#</code> not immediately followed by a <a class=\"reference internal\" href=\"#bracket-argument\">Bracket Argument</a> forms a <em>line comment</em> that runs until the end of the line:</p> <pre>\n<strong id=\"grammar-token-line_comment\">line_comment</strong> ::=  '#' &lt;any text not starting in a <a class=\"reference internal\" href=\"#grammar-token-bracket_argument\">bracket_argument</a>\n                       and not containing a <a class=\"reference internal\" href=\"#grammar-token-newline\">newline</a>&gt;\n</pre> <p>For example:</p> <pre data-language=\"cmake\"># This is a line comment.\nmessage(\"First Argument\\n\" # This is a line comment :)\n        \"Second Argument\") # This is a line comment.\n</pre>     <h2 id=\"control-structures\">Control Structures</h2>  <h3 id=\"conditional-blocks\">Conditional Blocks</h3> <p>The <a class=\"reference internal\" href=\"../command/if#command:if\" title=\"if\" id=\"index-1-command:if\"><code>if()</code></a>/<a class=\"reference internal\" href=\"../command/elseif#command:elseif\" title=\"elseif\" id=\"index-0-command:elseif\"><code>elseif()</code></a>/<a class=\"reference internal\" href=\"../command/else#command:else\" title=\"else\" id=\"index-0-command:else\"><code>else()</code></a>/<a class=\"reference internal\" href=\"../command/endif#command:endif\" title=\"endif\" id=\"index-0-command:endif\"><code>endif()</code></a> commands delimit code blocks to be executed conditionally.</p>   <h3 id=\"loops\">Loops</h3> <p>The <a class=\"reference internal\" href=\"../command/foreach#command:foreach\" title=\"foreach\" id=\"index-0-command:foreach\"><code>foreach()</code></a>/<a class=\"reference internal\" href=\"../command/endforeach#command:endforeach\" title=\"endforeach\" id=\"index-0-command:endforeach\"><code>endforeach()</code></a> and <a class=\"reference internal\" href=\"../command/while#command:while\" title=\"while\" id=\"index-0-command:while\"><code>while()</code></a>/<a class=\"reference internal\" href=\"../command/endwhile#command:endwhile\" title=\"endwhile\" id=\"index-0-command:endwhile\"><code>endwhile()</code></a> commands delimit code blocks to be executed in a loop. Inside such blocks the <a class=\"reference internal\" href=\"../command/break#command:break\" title=\"break\" id=\"index-0-command:break\"><code>break()</code></a> command may be used to terminate the loop early whereas the <a class=\"reference internal\" href=\"../command/continue#command:continue\" title=\"continue\" id=\"index-0-command:continue\"><code>continue()</code></a> command may be used to start with the next iteration immediately.</p>   <h3 id=\"command-definitions\">Command Definitions</h3> <p>The <a class=\"reference internal\" href=\"../command/macro#command:macro\" title=\"macro\" id=\"index-0-command:macro\"><code>macro()</code></a>/<a class=\"reference internal\" href=\"../command/endmacro#command:endmacro\" title=\"endmacro\" id=\"index-0-command:endmacro\"><code>endmacro()</code></a>, and <a class=\"reference internal\" href=\"../command/function#command:function\" title=\"function\" id=\"index-0-command:function\"><code>function()</code></a>/<a class=\"reference internal\" href=\"../command/endfunction#command:endfunction\" title=\"endfunction\" id=\"index-0-command:endfunction\"><code>endfunction()</code></a> commands delimit code blocks to be recorded for later invocation as commands.</p>    <h2 id=\"cmake-language-variables\">Variables</h2> <p id=\"variables\">Variables are the basic unit of storage in the CMake Language. Their values are always of string type, though some commands may interpret the strings as values of other types. The <a class=\"reference internal\" href=\"../command/set#command:set\" title=\"set\" id=\"index-0-command:set\"><code>set()</code></a> and <a class=\"reference internal\" href=\"../command/unset#command:unset\" title=\"unset\" id=\"index-0-command:unset\"><code>unset()</code></a> commands explicitly set or unset a variable, but other commands have semantics that modify variables as well. Variable names are case-sensitive and may consist of almost any text, but we recommend sticking to names consisting only of alphanumeric characters plus <code>_</code> and <code>-</code>.</p> <p>Variables have dynamic scope. Each variable “set” or “unset” creates a binding in the current scope:</p> <dl class=\"docutils\"> <dt>Function Scope</dt> <dd>\n<a class=\"reference internal\" href=\"#command-definitions\">Command Definitions</a> created by the <a class=\"reference internal\" href=\"../command/function#command:function\" title=\"function\" id=\"index-1-command:function\"><code>function()</code></a> command create commands that, when invoked, process the recorded commands in a new variable binding scope. A variable “set” or “unset” binds in this scope and is visible for the current function and any nested calls, but not after the function returns.</dd> <dt>Directory Scope</dt> <dd>\n<p class=\"first\">Each of the <a class=\"reference internal\" href=\"#directories\">Directories</a> in a source tree has its own variable bindings. Before processing the <code>CMakeLists.txt</code> file for a directory, CMake copies all variable bindings currently defined in the parent directory, if any, to initialize the new directory scope. CMake <a class=\"reference internal\" href=\"#scripts\">Scripts</a>, when processed with <code>cmake -P</code>, bind variables in one “directory” scope.</p> <p class=\"last\">A variable “set” or “unset” not inside a function call binds to the current directory scope.</p> </dd> <dt>Persistent Cache</dt> <dd>CMake stores a separate set of “cache” variables, or “cache entries”, whose values persist across multiple runs within a project build tree. Cache entries have an isolated binding scope modified only by explicit request, such as by the <code>CACHE</code> option of the <a class=\"reference internal\" href=\"../command/set#command:set\" title=\"set\" id=\"index-1-command:set\"><code>set()</code></a> and <a class=\"reference internal\" href=\"../command/unset#command:unset\" title=\"unset\" id=\"index-1-command:unset\"><code>unset()</code></a> commands.</dd> </dl> <p>When evaluating <a class=\"reference internal\" href=\"#variable-references\">Variable References</a>, CMake first searches the function call stack, if any, for a binding and then falls back to the binding in the current directory scope, if any. If a “set” binding is found, its value is used. If an “unset” binding is found, or no binding is found, CMake then searches for a cache entry. If a cache entry is found, its value is used. Otherwise, the variable reference evaluates to an empty string.</p> <p>The <a class=\"reference internal\" href=\"cmake-variables.7#manual:cmake-variables(7)\" title=\"cmake-variables(7)\" id=\"index-0-manual:cmake-variables(7)\"><code>cmake-variables(7)</code></a> manual documents many variables that are provided by CMake or have meaning to CMake when set by project code.</p>   <h2 id=\"cmake-language-lists\">Lists</h2> <p id=\"lists\">Although all values in CMake are stored as strings, a string may be treated as a list in certain contexts, such as during evaluation of an <a class=\"reference internal\" href=\"#unquoted-argument\">Unquoted Argument</a>. In such contexts, a string is divided into list elements by splitting on <code>;</code> characters not following an unequal number of <code>[</code> and <code>]</code> characters and not immediately preceded by a <code>\\</code>. The sequence <code>\\;</code> does not divide a value but is replaced by <code>;</code> in the resulting element.</p> <p>A list of elements is represented as a string by concatenating the elements separated by <code>;</code>. For example, the <a class=\"reference internal\" href=\"../command/set#command:set\" title=\"set\" id=\"index-2-command:set\"><code>set()</code></a> command stores multiple values into the destination variable as a list:</p> <pre data-language=\"cmake\">set(srcs a.c b.c c.c) # sets \"srcs\" to \"a.c;b.c;c.c\"\n</pre> <p>Lists are meant for simple use cases such as a list of source files and should not be used for complex data processing tasks. Most commands that construct lists do not escape <code>;</code> characters in list elements, thus flattening nested lists:</p> <pre data-language=\"cmake\">set(x a \"b;c\") # sets \"x\" to \"a;b;c\", not \"a;b\\;c\"\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-language.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-language.7.html</a>\n  </p>\n</div>\n","manual/cmake-packages.7":"<h1 id=\"manual:cmake-packages(7)\">cmake-packages(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#introduction\" id=\"id9\">Introduction</a></li> <li>\n<a class=\"reference internal\" href=\"#using-packages\" id=\"id10\">Using Packages</a><ul> <li><a class=\"reference internal\" href=\"#config-file-packages\" id=\"id11\">Config-file Packages</a></li> <li><a class=\"reference internal\" href=\"#find-module-packages\" id=\"id12\">Find-module Packages</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#package-layout\" id=\"id13\">Package Layout</a><ul> <li><a class=\"reference internal\" href=\"#package-configuration-file\" id=\"id14\">Package Configuration File</a></li> <li><a class=\"reference internal\" href=\"#package-version-file\" id=\"id15\">Package Version File</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#creating-packages\" id=\"id16\">Creating Packages</a><ul> <li>\n<a class=\"reference internal\" href=\"#creating-a-package-configuration-file\" id=\"id17\">Creating a Package Configuration File</a><ul> <li><a class=\"reference internal\" href=\"#creating-a-package-configuration-file-for-the-build-tree\" id=\"id18\">Creating a Package Configuration File for the Build Tree</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#creating-relocatable-packages\" id=\"id19\">Creating Relocatable Packages</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#package-registry\" id=\"id20\">Package Registry</a><ul> <li><a class=\"reference internal\" href=\"#user-package-registry\" id=\"id21\">User Package Registry</a></li> <li><a class=\"reference internal\" href=\"#system-package-registry\" id=\"id22\">System Package Registry</a></li> <li><a class=\"reference internal\" href=\"#disabling-the-package-registry\" id=\"id23\">Disabling the Package Registry</a></li> <li><a class=\"reference internal\" href=\"#package-registry-example\" id=\"id24\">Package Registry Example</a></li> <li><a class=\"reference internal\" href=\"#package-registry-ownership\" id=\"id25\">Package Registry Ownership</a></li> </ul> </li> </ul>\n   <h2 id=\"introduction\">Introduction</h2> <p>Packages provide dependency information to CMake based buildsystems. Packages are found with the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> command. The result of using <code>find_package</code> is either a set of <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets, or a set of variables corresponding to build-relevant information.</p>   <h2 id=\"using-packages\">Using Packages</h2> <p>CMake provides direct support for two forms of packages, <a class=\"reference internal\" href=\"#id1\">Config-file Packages</a> and <a class=\"reference internal\" href=\"#find-module-packages\">Find-module Packages</a>. Indirect support for <code>pkg-config</code> packages is also provided via the <a class=\"reference internal\" href=\"../module/findpkgconfig#module:FindPkgConfig\" title=\"FindPkgConfig\" id=\"index-0-module:FindPkgConfig\"><code>FindPkgConfig</code></a> module. In all cases, the basic form of <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-1-command:find_package\"><code>find_package()</code></a> calls is the same:</p> <pre data-language=\"cmake\">find_package(Qt4 4.7.0 REQUIRED) # CMake provides a Qt4 find-module\nfind_package(Qt5Core 5.1.0 REQUIRED) # Qt provides a Qt5 package config file.\nfind_package(LibXml2 REQUIRED) # Use pkg-config via the LibXml2 find-module\n</pre> <p>In cases where it is known that a package configuration file is provided by upstream, and only that should be used, the <code>CONFIG</code> keyword may be passed to <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-2-command:find_package\"><code>find_package()</code></a>:</p> <pre data-language=\"cmake\">find_package(Qt5Core 5.1.0 CONFIG REQUIRED)\nfind_package(Qt5Gui 5.1.0 CONFIG)\n</pre> <p>Similarly, the <code>MODULE</code> keyword says to use only a find-module:</p> <pre data-language=\"cmake\">find_package(Qt4 4.7.0 MODULE REQUIRED)\n</pre> <p>Specifying the type of package explicitly improves the error message shown to the user if it is not found.</p> <p>Both types of packages also support specifying components of a package, either after the <code>REQUIRED</code> keyword:</p> <pre data-language=\"cmake\">find_package(Qt5 5.1.0 CONFIG REQUIRED Widgets Xml Sql)\n</pre> <p>or as a separate <code>COMPONENTS</code> list:</p> <pre data-language=\"cmake\">find_package(Qt5 5.1.0 COMPONENTS Widgets Xml Sql)\n</pre> <p>or as a separate <code>OPTIONAL_COMPONENTS</code> list:</p> <pre data-language=\"cmake\">find_package(Qt5 5.1.0 COMPONENTS Widgets\n                       OPTIONAL_COMPONENTS Xml Sql\n)\n</pre> <p>Handling of <code>COMPONENTS</code> and <code>OPTIONAL_COMPONENTS</code> is defined by the package.</p> <p>By setting the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_DISABLE_FIND_PACKAGE_&lt;PackageName&gt;\" id=\"index-0-variable:CMAKE_DISABLE_FIND_PACKAGE_&lt;PackageName&gt;\"><code>CMAKE_DISABLE_FIND_PACKAGE_&lt;PackageName&gt;</code></a> variable to <code>TRUE</code>, the <code>PackageName</code> package will not be searched, and will always be <code>NOTFOUND</code>.</p>  <h3 id=\"id1\">Config-file Packages</h3> <p id=\"config-file-packages\">A config-file package is a set of files provided by upstreams for downstreams to use. CMake searches in a number of locations for package configuration files, as described in the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-3-command:find_package\"><code>find_package()</code></a> documentation. The most simple way for a CMake user to tell <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> to search in a non-standard prefix for a package is to set the <code>CMAKE_PREFIX_PATH</code> cache variable.</p> <p>Config-file packages are provided by upstream vendors as part of development packages, that is, they belong with the header files and any other files provided to assist downstreams in using the package.</p> <p>A set of variables which provide package status information are also set automatically when using a config-file package. The <code>&lt;Package&gt;_FOUND</code> variable is set to true or false, depending on whether the package was found. The <code>&lt;Package&gt;_DIR</code> cache variable is set to the location of the package configuration file.</p>   <h3 id=\"find-module-packages\">Find-module Packages</h3> <p>A find module is a file with a set of rules for finding the required pieces of a dependency, primarily header files and libraries. Typically, a find module is needed when the upstream is not built with CMake, or is not CMake-aware enough to otherwise provide a package configuration file. Unlike a package configuration file, it is not shipped with upstream, but is used by downstream to find the files by guessing locations of files with platform-specific hints.</p> <p>Unlike the case of an upstream-provided package configuration file, no single point of reference identifies the package as being found, so the <code>&lt;Package&gt;_FOUND</code> variable is not automatically set by the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-4-command:find_package\"><code>find_package()</code></a> command. It can still be expected to be set by convention however and should be set by the author of the Find-module. Similarly there is no <code>&lt;Package&gt;_DIR</code> variable, but each of the artifacts such as library locations and header file locations provide a separate cache variable.</p> <p>See the <a class=\"reference internal\" href=\"cmake-developer.7#manual:cmake-developer(7)\" title=\"cmake-developer(7)\" id=\"index-0-manual:cmake-developer(7)\"><code>cmake-developer(7)</code></a> manual for more information about creating Find-module files.</p>    <h2 id=\"package-layout\">Package Layout</h2> <p>A config-file package consists of a <a class=\"reference internal\" href=\"#package-configuration-file\">Package Configuration File</a> and optionally a <a class=\"reference internal\" href=\"#package-version-file\">Package Version File</a> provided with the project distribution.</p>  <h3 id=\"package-configuration-file\">Package Configuration File</h3> <p>Consider a project <code>Foo</code> that installs the following files:</p> <pre data-language=\"python\">&lt;prefix&gt;/include/foo-1.2/foo.h\n&lt;prefix&gt;/lib/foo-1.2/libfoo.a\n</pre> <p>It may also provide a CMake package configuration file:</p> <pre data-language=\"python\">&lt;prefix&gt;/lib/cmake/foo-1.2/FooConfig.cmake\n</pre> <p>with content defining <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-1-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets, or defining variables, such as:</p> <pre data-language=\"cmake\"># ...\n# (compute PREFIX relative to file location)\n# ...\nset(Foo_INCLUDE_DIRS ${PREFIX}/include/foo-1.2)\nset(Foo_LIBRARIES ${PREFIX}/lib/foo-1.2/libfoo.a)\n</pre> <p>If another project wishes to use <code>Foo</code> it need only to locate the <code>FooConfig.cmake</code> file and load it to get all the information it needs about package content locations. Since the package configuration file is provided by the package installation it already knows all the file locations.</p> <p>The <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-5-command:find_package\"><code>find_package()</code></a> command may be used to search for the package configuration file. This command constructs a set of installation prefixes and searches under each prefix in several locations. Given the name <code>Foo</code>, it looks for a file called <code>FooConfig.cmake</code> or <code>foo-config.cmake</code>. The full set of locations is specified in the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-6-command:find_package\"><code>find_package()</code></a> command documentation. One place it looks is:</p> <pre data-language=\"python\">&lt;prefix&gt;/lib/cmake/Foo*/\n</pre> <p>where <code>Foo*</code> is a case-insensitive globbing expression. In our example the globbing expression will match <code>&lt;prefix&gt;/lib/cmake/foo-1.2</code> and the package configuration file will be found.</p> <p>Once found, a package configuration file is immediately loaded. It, together with a package version file, contains all the information the project needs to use the package.</p>   <h3 id=\"package-version-file\">Package Version File</h3> <p>When the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-7-command:find_package\"><code>find_package()</code></a> command finds a candidate package configuration file it looks next to it for a version file. The version file is loaded to test whether the package version is an acceptable match for the version requested. If the version file claims compatibility the configuration file is accepted. Otherwise it is ignored.</p> <p>The name of the package version file must match that of the package configuration file but has either <code>-version</code> or <code>Version</code> appended to the name before the <code>.cmake</code> extension. For example, the files:</p> <pre data-language=\"python\">&lt;prefix&gt;/lib/cmake/foo-1.3/foo-config.cmake\n&lt;prefix&gt;/lib/cmake/foo-1.3/foo-config-version.cmake\n</pre> <p>and:</p> <pre data-language=\"python\">&lt;prefix&gt;/lib/cmake/bar-4.2/BarConfig.cmake\n&lt;prefix&gt;/lib/cmake/bar-4.2/BarConfigVersion.cmake\n</pre> <p>are each pairs of package configuration files and corresponding package version files.</p> <p>When the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-8-command:find_package\"><code>find_package()</code></a> command loads a version file it first sets the following variables:</p> <dl class=\"docutils\"> <dt><code>PACKAGE_FIND_NAME</code></dt> <dd>The &lt;package&gt; name</dd> <dt><code>PACKAGE_FIND_VERSION</code></dt> <dd>Full requested version string</dd> <dt><code>PACKAGE_FIND_VERSION_MAJOR</code></dt> <dd>Major version if requested, else 0</dd> <dt><code>PACKAGE_FIND_VERSION_MINOR</code></dt> <dd>Minor version if requested, else 0</dd> <dt><code>PACKAGE_FIND_VERSION_PATCH</code></dt> <dd>Patch version if requested, else 0</dd> <dt><code>PACKAGE_FIND_VERSION_TWEAK</code></dt> <dd>Tweak version if requested, else 0</dd> <dt><code>PACKAGE_FIND_VERSION_COUNT</code></dt> <dd>Number of version components, 0 to 4</dd> </dl> <p>The version file must use these variables to check whether it is compatible or an exact match for the requested version and set the following variables with results:</p> <dl class=\"docutils\"> <dt><code>PACKAGE_VERSION</code></dt> <dd>Full provided version string</dd> <dt><code>PACKAGE_VERSION_EXACT</code></dt> <dd>True if version is exact match</dd> <dt><code>PACKAGE_VERSION_COMPATIBLE</code></dt> <dd>True if version is compatible</dd> <dt><code>PACKAGE_VERSION_UNSUITABLE</code></dt> <dd>True if unsuitable as any version</dd> </dl> <p>Version files are loaded in a nested scope so they are free to set any variables they wish as part of their computation. The find_package command wipes out the scope when the version file has completed and it has checked the output variables. When the version file claims to be an acceptable match for the requested version the find_package command sets the following variables for use by the project:</p> <dl class=\"docutils\"> <dt><code>&lt;package&gt;_VERSION</code></dt> <dd>Full provided version string</dd> <dt><code>&lt;package&gt;_VERSION_MAJOR</code></dt> <dd>Major version if provided, else 0</dd> <dt><code>&lt;package&gt;_VERSION_MINOR</code></dt> <dd>Minor version if provided, else 0</dd> <dt><code>&lt;package&gt;_VERSION_PATCH</code></dt> <dd>Patch version if provided, else 0</dd> <dt><code>&lt;package&gt;_VERSION_TWEAK</code></dt> <dd>Tweak version if provided, else 0</dd> <dt><code>&lt;package&gt;_VERSION_COUNT</code></dt> <dd>Number of version components, 0 to 4</dd> </dl> <p>The variables report the version of the package that was actually found. The <code>&lt;package&gt;</code> part of their name matches the argument given to the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-9-command:find_package\"><code>find_package()</code></a> command.</p>    <h2 id=\"id2\">Creating Packages</h2> <p id=\"creating-packages\">Usually, the upstream depends on CMake itself and can use some CMake facilities for creating the package files. Consider an upstream which provides a single shared library:</p> <pre data-language=\"cmake\">project(UpstreamLib)\n\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\nset(CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE ON)\n\nset(Upstream_VERSION 3.4.1)\n\ninclude(GenerateExportHeader)\n\nadd_library(ClimbingStats SHARED climbingstats.cpp)\ngenerate_export_header(ClimbingStats)\nset_property(TARGET ClimbingStats PROPERTY VERSION ${Upstream_VERSION})\nset_property(TARGET ClimbingStats PROPERTY SOVERSION 3)\nset_property(TARGET ClimbingStats PROPERTY\n  INTERFACE_ClimbingStats_MAJOR_VERSION 3)\nset_property(TARGET ClimbingStats APPEND PROPERTY\n  COMPATIBLE_INTERFACE_STRING ClimbingStats_MAJOR_VERSION\n)\n\ninstall(TARGETS ClimbingStats EXPORT ClimbingStatsTargets\n  LIBRARY DESTINATION lib\n  ARCHIVE DESTINATION lib\n  RUNTIME DESTINATION bin\n  INCLUDES DESTINATION include\n)\ninstall(\n  FILES\n    climbingstats.h\n    \"${CMAKE_CURRENT_BINARY_DIR}/climbingstats_export.h\"\n  DESTINATION\n    include\n  COMPONENT\n    Devel\n)\n\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n  \"${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfigVersion.cmake\"\n  VERSION ${Upstream_VERSION}\n  COMPATIBILITY AnyNewerVersion\n)\n\nexport(EXPORT ClimbingStatsTargets\n  FILE \"${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsTargets.cmake\"\n  NAMESPACE Upstream::\n)\nconfigure_file(cmake/ClimbingStatsConfig.cmake\n  \"${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfig.cmake\"\n  COPYONLY\n)\n\nset(ConfigPackageLocation lib/cmake/ClimbingStats)\ninstall(EXPORT ClimbingStatsTargets\n  FILE\n    ClimbingStatsTargets.cmake\n  NAMESPACE\n    Upstream::\n  DESTINATION\n    ${ConfigPackageLocation}\n)\ninstall(\n  FILES\n    cmake/ClimbingStatsConfig.cmake\n    \"${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfigVersion.cmake\"\n  DESTINATION\n    ${ConfigPackageLocation}\n  COMPONENT\n    Devel\n)\n</pre> <p>The <a class=\"reference internal\" href=\"../module/cmakepackageconfighelpers#module:CMakePackageConfigHelpers\" title=\"CMakePackageConfigHelpers\" id=\"index-0-module:CMakePackageConfigHelpers\"><code>CMakePackageConfigHelpers</code></a> module provides a macro for creating a simple <code>ConfigVersion.cmake</code> file. This file sets the version of the package. It is read by CMake when <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-10-command:find_package\"><code>find_package()</code></a> is called to determine the compatibility with the requested version, and to set some version-specific variables <code>&lt;Package&gt;_VERSION</code>, <code>&lt;Package&gt;_VERSION_MAJOR</code>, <code>&lt;Package&gt;_VERSION_MINOR</code> etc. The <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(EXPORT)</code></a> command is used to export the targets in the <code>ClimbingStatsTargets</code> export-set, defined previously by the <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install(TARGETS)</code></a> command. This command generates the <code>ClimbingStatsTargets.cmake</code> file to contain <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-2-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets, suitable for use by downstreams and arranges to install it to <code>lib/cmake/ClimbingStats</code>. The generated <code>ClimbingStatsConfigVersion.cmake</code> and a <code>cmake/ClimbingStatsConfig.cmake</code> are installed to the same location, completing the package.</p> <p>The generated <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-3-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets have appropriate properties set to define their <a class=\"reference internal\" href=\"cmake-buildsystem.7#target-usage-requirements\"><span>usage requirements</span></a>, such as <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/interface_compile_definitions#prop_tgt:INTERFACE_COMPILE_DEFINITIONS\" title=\"INTERFACE_COMPILE_DEFINITIONS\" id=\"index-0-prop_tgt:INTERFACE_COMPILE_DEFINITIONS\"><code>INTERFACE_COMPILE_DEFINITIONS</code></a> and other relevant built-in <code>INTERFACE_</code> properties. The <code>INTERFACE</code> variant of user-defined properties listed in <a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_string#prop_tgt:COMPATIBLE_INTERFACE_STRING\" title=\"COMPATIBLE_INTERFACE_STRING\" id=\"index-0-prop_tgt:COMPATIBLE_INTERFACE_STRING\"><code>COMPATIBLE_INTERFACE_STRING</code></a> and other <a class=\"reference internal\" href=\"cmake-buildsystem.7#compatible-interface-properties\"><span>Compatible Interface Properties</span></a> are also propagated to the generated <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-4-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets. In the above case, <code>ClimbingStats_MAJOR_VERSION</code> is defined as a string which must be compatible among the dependencies of any depender. By setting this custom defined user property in this version and in the next version of <code>ClimbingStats</code>, <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-1-manual:cmake(1)\"><code>cmake(1)</code></a> will issue a diagnostic if there is an attempt to use version 3 together with version 4. Packages can choose to employ such a pattern if different major versions of the package are designed to be incompatible.</p> <p>A <code>NAMESPACE</code> with double-colons is specified when exporting the targets for installation. This convention of double-colons gives CMake a hint that the name is an <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-5-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target when it is used by downstreams with the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> command. This way, CMake can issue a diagnostic if the package providing it has not yet been found.</p> <p>In this case, when using <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-2-command:install\"><code>install(TARGETS)</code></a> the <code>INCLUDES DESTINATION</code> was specified. This causes the <code>IMPORTED</code> targets to have their <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-1-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> populated with the <code>include</code> directory in the <a class=\"reference internal\" href=\"../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a>. When the <code>IMPORTED</code> target is used by downstream, it automatically consumes the entries from that property.</p>  <h3 id=\"creating-a-package-configuration-file\">Creating a Package Configuration File</h3> <p>In this case, the <code>ClimbingStatsConfig.cmake</code> file could be as simple as:</p> <pre data-language=\"cmake\">include(\"${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsTargets.cmake\")\n</pre> <p>As this allows downstreams to use the <code>IMPORTED</code> targets. If any macros should be provided by the <code>ClimbingStats</code> package, they should be in a separate file which is installed to the same location as the <code>ClimbingStatsConfig.cmake</code> file, and included from there.</p> <p>This can also be extended to cover dependencies:</p> <pre data-language=\"cmake\"># ...\nadd_library(ClimbingStats SHARED climbingstats.cpp)\ngenerate_export_header(ClimbingStats)\n\nfind_package(Stats 2.6.4 REQUIRED)\ntarget_link_libraries(ClimbingStats PUBLIC Stats::Types)\n</pre> <p>As the <code>Stats::Types</code> target is a <code>PUBLIC</code> dependency of <code>ClimbingStats</code>, downstreams must also find the <code>Stats</code> package and link to the <code>Stats::Types</code> library. The <code>Stats</code> package should be found in the <code>ClimbingStatsConfig.cmake</code> file to ensure this. The <code>find_dependency</code> macro from the <a class=\"reference internal\" href=\"../module/cmakefinddependencymacro#module:CMakeFindDependencyMacro\" title=\"CMakeFindDependencyMacro\" id=\"index-0-module:CMakeFindDependencyMacro\"><code>CMakeFindDependencyMacro</code></a> helps with this by propagating whether the package is <code>REQUIRED</code>, or <code>QUIET</code> etc. All <code>REQUIRED</code> dependencies of a package should be found in the <code>Config.cmake</code> file:</p> <pre data-language=\"cmake\">include(CMakeFindDependencyMacro)\nfind_dependency(Stats 2.6.4)\n\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsTargets.cmake\")\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsMacros.cmake\")\n</pre> <p>The <code>find_dependency</code> macro also sets <code>ClimbingStats_FOUND</code> to <code>False</code> if the dependency is not found, along with a diagnostic that the <code>ClimbingStats</code> package can not be used without the <code>Stats</code> package.</p> <p>If <code>COMPONENTS</code> are specified when the downstream uses <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-11-command:find_package\"><code>find_package()</code></a>, they are listed in the <code>&lt;Package&gt;_FIND_COMPONENTS</code> variable. If a particular component is non-optional, then the <code>&lt;Package&gt;_FIND_REQUIRED_&lt;comp&gt;</code> will be true. This can be tested with logic in the package configuration file:</p> <pre data-language=\"cmake\">include(CMakeFindDependencyMacro)\nfind_dependency(Stats 2.6.4)\n\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsTargets.cmake\")\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsMacros.cmake\")\n\nset(_supported_components Plot Table)\n\nforeach(_comp ${ClimbingStats_FIND_COMPONENTS})\n  if (NOT \";${_supported_components};\" MATCHES _comp)\n    set(ClimbingStats_FOUND False)\n    set(ClimbingStats_NOTFOUND_MESSAGE \"Unsupported component: ${_comp}\")\n  endif()\n  include(\"${CMAKE_CURRENT_LIST_DIR}/ClimbingStats${_comp}Targets.cmake\")\nendforeach()\n</pre> <p>Here, the <code>ClimbingStats_NOTFOUND_MESSAGE</code> is set to a diagnosis that the package could not be found because an invalid component was specified. This message variable can be set for any case where the <code>_FOUND</code> variable is set to <code>False</code>, and will be displayed to the user.</p>  <h4 id=\"creating-a-package-configuration-file-for-the-build-tree\">Creating a Package Configuration File for the Build Tree</h4> <p>The <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-0-command:export\"><code>export(EXPORT)</code></a> command creates an <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-6-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets definition file which is specific to the build-tree, and is not relocatable. This can similarly be used with a suitable package configuration file and package version file to define a package for the build tree which may be used without installation. Consumers of the build tree can simply ensure that the <a class=\"reference internal\" href=\"../variable/cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-0-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a> contains the build directory, or set the <code>ClimbingStats_DIR</code> to <code>&lt;build_dir&gt;/ClimbingStats</code> in the cache.</p>    <h3 id=\"id3\">Creating Relocatable Packages</h3> <p id=\"creating-relocatable-packages\">A relocatable package must not reference absolute paths of files on the machine where the package is built that will not exist on the machines where the package may be installed.</p> <p>Packages created by <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-3-command:install\"><code>install(EXPORT)</code></a> are designed to be relocatable, using paths relative to the location of the package itself. When defining the interface of a target for <code>EXPORT</code>, keep in mind that the include directories should be specified as relative paths which are relative to the <a class=\"reference internal\" href=\"../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-1-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a>:</p> <pre data-language=\"cmake\">target_include_directories(tgt INTERFACE\n  # Wrong, not relocatable:\n  $&lt;INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include/TgtName&gt;\n)\n\ntarget_include_directories(tgt INTERFACE\n  # Ok, relocatable:\n  $&lt;INSTALL_INTERFACE:include/TgtName&gt;\n)\n</pre> <p>The <code>$&lt;INSTALL_PREFIX&gt;</code> <a class=\"reference internal\" href=\"cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expression</code></a> may be used as a placeholder for the install prefix without resulting in a non-relocatable package. This is necessary if complex generator expressions are used:</p> <pre data-language=\"cmake\">target_include_directories(tgt INTERFACE\n  # Ok, relocatable:\n  $&lt;INSTALL_INTERFACE:$&lt;$&lt;CONFIG:Debug&gt;:$&lt;INSTALL_PREFIX&gt;/include/TgtName&gt;&gt;\n)\n</pre> <p>This also applies to paths referencing external dependencies. It is not advisable to populate any properties which may contain paths, such as <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-2-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-0-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a>, with paths relevant to dependencies. For example, this code may not work well for a relocatable package:</p> <pre data-language=\"cmake\">target_link_libraries(ClimbingStats INTERFACE\n  ${Foo_LIBRARIES} ${Bar_LIBRARIES}\n  )\ntarget_include_directories(ClimbingStats INTERFACE\n  \"$&lt;INSTALL_INTERFACE:${Foo_INCLUDE_DIRS};${Bar_INCLUDE_DIRS}&gt;\"\n  )\n</pre> <p>The referenced variables may contain the absolute paths to libraries and include directories <strong>as found on the machine the package was made on</strong>. This would create a package with hard-coded paths to dependencies and not suitable for relocation.</p> <p>Ideally such dependencies should be used through their own <a class=\"reference internal\" href=\"cmake-buildsystem.7#imported-targets\"><span>IMPORTED targets</span></a> that have their own <a class=\"reference internal\" href=\"../prop_tgt/imported_location#prop_tgt:IMPORTED_LOCATION\" title=\"IMPORTED_LOCATION\" id=\"index-0-prop_tgt:IMPORTED_LOCATION\"><code>IMPORTED_LOCATION</code></a> and usage requirement properties such as <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-3-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> populated appropriately. Those imported targets may then be used with the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-1-command:target_link_libraries\"><code>target_link_libraries()</code></a> command for <code>ClimbingStats</code>:</p> <pre data-language=\"cmake\">target_link_libraries(ClimbingStats INTERFACE Foo::Foo Bar::Bar)\n</pre> <p>With this approach the package references its external dependencies only through the names of <a class=\"reference internal\" href=\"cmake-buildsystem.7#imported-targets\"><span>IMPORTED targets</span></a>. When a consumer uses the installed package, the consumer will run the appropriate <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-12-command:find_package\"><code>find_package()</code></a> commands (via the <code>find_dependency</code> macro described above) to find the dependencies and populate the imported targets with appropriate paths on their own machine.</p> <p>Unfortunately many <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-0-manual:cmake-modules(7)\"><code>modules</code></a> shipped with CMake do not yet provide <a class=\"reference internal\" href=\"cmake-buildsystem.7#imported-targets\"><span>IMPORTED targets</span></a> because their development pre-dated this approach. This may improve incrementally over time. Workarounds to create relocatable packages using such modules include:</p> <ul class=\"simple\"> <li>When building the package, specify each <code>Foo_LIBRARY</code> cache entry as just a library name, e.g. <code>-DFoo_LIBRARY=foo</code>. This tells the corresponding find module to populate the <code>Foo_LIBRARIES</code> with just <code>foo</code> to ask the linker to search for the library instead of hard-coding a path.</li> <li>Or, after installing the package content but before creating the package installation binary for redistribution, manually replace the absolute paths with placeholders for substitution by the installation tool when the package is installed.</li> </ul>    <h2 id=\"id4\">Package Registry</h2> <p id=\"package-registry\">CMake provides two central locations to register packages that have been built or installed anywhere on a system:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#user-package-registry\">User Package Registry</a></li> <li><a class=\"reference internal\" href=\"#system-package-registry\">System Package Registry</a></li> </ul> <p>The registries are especially useful to help projects find packages in non-standard install locations or directly in their own build trees. A project may populate either the user or system registry (using its own means, see below) to refer to its location. In either case the package should store at the registered location a <a class=\"reference internal\" href=\"#package-configuration-file\">Package Configuration File</a> (<code>&lt;package&gt;Config.cmake</code>) and optionally a <a class=\"reference internal\" href=\"#package-version-file\">Package Version File</a> (<code>&lt;package&gt;ConfigVersion.cmake</code>).</p> <p>The <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-13-command:find_package\"><code>find_package()</code></a> command searches the two package registries as two of the search steps specified in its documentation. If it has sufficient permissions it also removes stale package registry entries that refer to directories that do not exist or do not contain a matching package configuration file.</p>  <h3 id=\"id5\">User Package Registry</h3> <p id=\"user-package-registry\">The User Package Registry is stored in a per-user location. The <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-1-command:export\"><code>export(PACKAGE)</code></a> command may be used to register a project build tree in the user package registry. CMake currently provides no interface to add install trees to the user package registry. Installers must be manually taught to register their packages if desired.</p> <p>On Windows the user package registry is stored in the Windows registry under a key in <code>HKEY_CURRENT_USER</code>.</p> <p>A <code>&lt;package&gt;</code> may appear under registry key:</p> <pre data-language=\"python\">HKEY_CURRENT_USER\\Software\\Kitware\\CMake\\Packages\\&lt;package&gt;\n</pre> <p>as a <code>REG_SZ</code> value, with arbitrary name, that specifies the directory containing the package configuration file.</p> <p>On UNIX platforms the user package registry is stored in the user home directory under <code>~/.cmake/packages</code>. A <code>&lt;package&gt;</code> may appear under the directory:</p> <pre data-language=\"python\">~/.cmake/packages/&lt;package&gt;\n</pre> <p>as a file, with arbitrary name, whose content specifies the directory containing the package configuration file.</p>   <h3 id=\"id6\">System Package Registry</h3> <p id=\"system-package-registry\">The System Package Registry is stored in a system-wide location. CMake currently provides no interface to add to the system package registry. Installers must be manually taught to register their packages if desired.</p> <p>On Windows the system package registry is stored in the Windows registry under a key in <code>HKEY_LOCAL_MACHINE</code>. A <code>&lt;package&gt;</code> may appear under registry key:</p> <pre data-language=\"python\">HKEY_LOCAL_MACHINE\\Software\\Kitware\\CMake\\Packages\\&lt;package&gt;\n</pre> <p>as a <code>REG_SZ</code> value, with arbitrary name, that specifies the directory containing the package configuration file.</p> <p>There is no system package registry on non-Windows platforms.</p>   <h3 id=\"id7\">Disabling the Package Registry</h3> <p id=\"disabling-the-package-registry\">In some cases using the Package Registries is not desirable. CMake allows to disable them using the following variables:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"../variable/cmake_export_no_package_registry#variable:CMAKE_EXPORT_NO_PACKAGE_REGISTRY\" title=\"CMAKE_EXPORT_NO_PACKAGE_REGISTRY\" id=\"index-0-variable:CMAKE_EXPORT_NO_PACKAGE_REGISTRY\"><code>CMAKE_EXPORT_NO_PACKAGE_REGISTRY</code></a> disables the <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-2-command:export\"><code>export(PACKAGE)</code></a> command.</li> <li>\n<a class=\"reference internal\" href=\"../variable/cmake_find_package_no_package_registry#variable:CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY\" title=\"CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY\" id=\"index-0-variable:CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY\"><code>CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY</code></a> disables the User Package Registry in all the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-14-command:find_package\"><code>find_package()</code></a> calls.</li> <li>\n<a class=\"reference internal\" href=\"../variable/cmake_find_package_no_system_package_registry#variable:CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY\" title=\"CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY\" id=\"index-0-variable:CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY\"><code>CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY</code></a> disables the System Package Registry in all the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-15-command:find_package\"><code>find_package()</code></a> calls.</li> </ul> </div>\n</blockquote>   <h3 id=\"package-registry-example\">Package Registry Example</h3> <p>A simple convention for naming package registry entries is to use content hashes. They are deterministic and unlikely to collide (<a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-3-command:export\"><code>export(PACKAGE)</code></a> uses this approach). The name of an entry referencing a specific directory is simply the content hash of the directory path itself.</p> <p>If a project arranges for package registry entries to exist, such as:</p> <pre data-language=\"python\">&gt; reg query HKCU\\Software\\Kitware\\CMake\\Packages\\MyPackage\nHKEY_CURRENT_USER\\Software\\Kitware\\CMake\\Packages\\MyPackage\n 45e7d55f13b87179bb12f907c8de6fc4 REG_SZ c:/Users/Me/Work/lib/cmake/MyPackage\n 7b4a9844f681c80ce93190d4e3185db9 REG_SZ c:/Users/Me/Work/MyPackage-build\n</pre> <p>or:</p> <pre data-language=\"python\">$ cat ~/.cmake/packages/MyPackage/7d1fb77e07ce59a81bed093bbee945bd\n/home/me/work/lib/cmake/MyPackage\n$ cat ~/.cmake/packages/MyPackage/f92c1db873a1937f3100706657c63e07\n/home/me/work/MyPackage-build\n</pre> <p>then the <code>CMakeLists.txt</code> code:</p> <pre data-language=\"cmake\">find_package(MyPackage)\n</pre> <p>will search the registered locations for package configuration files (<code>MyPackageConfig.cmake</code>). The search order among package registry entries for a single package is unspecified and the entry names (hashes in this example) have no meaning. Registered locations may contain package version files (<code>MyPackageConfigVersion.cmake</code>) to tell <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-16-command:find_package\"><code>find_package()</code></a> whether a specific location is suitable for the version requested.</p>   <h3 id=\"package-registry-ownership\">Package Registry Ownership</h3> <p>Package registry entries are individually owned by the project installations that they reference. A package installer is responsible for adding its own entry and the corresponding uninstaller is responsible for removing it.</p> <p>The <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-4-command:export\"><code>export(PACKAGE)</code></a> command populates the user package registry with the location of a project build tree. Build trees tend to be deleted by developers and have no “uninstall” event that could trigger removal of their entries. In order to keep the registries clean the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-17-command:find_package\"><code>find_package()</code></a> command automatically removes stale entries it encounters if it has sufficient permissions. CMake provides no interface to remove an entry referencing an existing build tree once <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-5-command:export\"><code>export(PACKAGE)</code></a> has been invoked. However, if the project removes its package configuration file from the build tree then the entry referencing the location will be considered stale.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-packages.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-packages.7.html</a>\n  </p>\n</div>\n","manual/ctest.1":"<h1 id=\"manual:ctest(1)\">ctest(1)</h1>  <h2 id=\"synopsis\">Synopsis</h2> <pre data-language=\"python\">ctest [&lt;options&gt;]\n</pre>   <h2 id=\"description\">Description</h2> <p>The “ctest” executable is the CMake test driver program. CMake-generated build trees created for projects that use the ENABLE_TESTING and ADD_TEST commands have testing support. This program will run the tests and report results.</p>   <h2 id=\"options\">Options</h2> <dl class=\"docutils\"> <dt><code>-C &lt;cfg&gt;, --build-config &lt;cfg&gt;</code></dt> <dd>\n<p class=\"first\">Choose configuration to test.</p> <p class=\"last\">Some CMake-generated build trees can have multiple build configurations in the same tree. This option can be used to specify which one should be tested. Example configurations are “Debug” and “Release”.</p> </dd> <dt><code>-V,--verbose</code></dt> <dd>\n<p class=\"first\">Enable verbose output from tests.</p> <p class=\"last\">Test output is normally suppressed and only summary information is displayed. This option will show all test output.</p> </dd> <dt><code>-VV,--extra-verbose</code></dt> <dd>\n<p class=\"first\">Enable more verbose output from tests.</p> <p class=\"last\">Test output is normally suppressed and only summary information is displayed. This option will show even more test output.</p> </dd> <dt><code>--debug</code></dt> <dd>\n<p class=\"first\">Displaying more verbose internals of CTest.</p> <p class=\"last\">This feature will result in a large number of output that is mostly useful for debugging dashboard problems.</p> </dd> <dt><code>--output-on-failure</code></dt> <dd>Output anything outputted by the test program if the test should fail. This option can also be enabled by setting the environment variable <code>CTEST_OUTPUT_ON_FAILURE</code>.</dd> <dt><code>-F</code></dt> <dd>\n<p class=\"first\">Enable failover.</p> <p class=\"last\">This option allows ctest to resume a test set execution that was previously interrupted. If no interruption occurred, the -F option will have no effect.</p> </dd> <dt><code>-j &lt;jobs&gt;, --parallel &lt;jobs&gt;</code></dt> <dd>\n<p class=\"first\">Run the tests in parallel using the given number of jobs.</p> <p class=\"last\">This option tells ctest to run the tests in parallel using given number of jobs. This option can also be set by setting the environment variable <code>CTEST_PARALLEL_LEVEL</code>.</p> </dd> <dt><code>--test-load &lt;level&gt;</code></dt> <dd>\n<p class=\"first\">While running tests in parallel (e.g. with <code>-j</code>), try not to start tests when they may cause the CPU load to pass above a given threshold.</p> <p class=\"last\">When <code>ctest</code> is run as a <a class=\"reference internal\" href=\"#dashboard-client\">Dashboard Client</a> this sets the <code>TestLoad</code> option of the <a class=\"reference internal\" href=\"#ctest-test-step\">CTest Test Step</a>.</p> </dd> <dt><code>-Q,--quiet</code></dt> <dd>\n<p class=\"first\">Make ctest quiet.</p> <p class=\"last\">This option will suppress all the output. The output log file will still be generated if the –output-log is specified. Options such as –verbose, –extra-verbose, and –debug are ignored if –quiet is specified.</p> </dd> <dt><code>-O &lt;file&gt;, --output-log &lt;file&gt;</code></dt> <dd>\n<p class=\"first\">Output to log file</p> <p class=\"last\">This option tells ctest to write all its output to a log file.</p> </dd> <dt><code>-N,--show-only</code></dt> <dd>\n<p class=\"first\">Disable actual execution of tests.</p> <p class=\"last\">This option tells ctest to list the tests that would be run but not actually run them. Useful in conjunction with the -R and -E options.</p> </dd> <dt><code>-L &lt;regex&gt;, --label-regex &lt;regex&gt;</code></dt> <dd>\n<p class=\"first\">Run tests with labels matching regular expression.</p> <p class=\"last\">This option tells ctest to run only the tests whose labels match the given regular expression.</p> </dd> <dt><code>-R &lt;regex&gt;, --tests-regex &lt;regex&gt;</code></dt> <dd>\n<p class=\"first\">Run tests matching regular expression.</p> <p class=\"last\">This option tells ctest to run only the tests whose names match the given regular expression.</p> </dd> <dt><code>-E &lt;regex&gt;, --exclude-regex &lt;regex&gt;</code></dt> <dd>\n<p class=\"first\">Exclude tests matching regular expression.</p> <p class=\"last\">This option tells ctest to NOT run the tests whose names match the given regular expression.</p> </dd> <dt><code>-LE &lt;regex&gt;, --label-exclude &lt;regex&gt;</code></dt> <dd>\n<p class=\"first\">Exclude tests with labels matching regular expression.</p> <p class=\"last\">This option tells ctest to NOT run the tests whose labels match the given regular expression.</p> </dd> <dt><code>-D &lt;dashboard&gt;, --dashboard &lt;dashboard&gt;</code></dt> <dd>\n<p class=\"first\">Execute dashboard test</p> <p class=\"last\">This option tells ctest to act as a CDash client and perform a dashboard test. All tests are &lt;Mode&gt;&lt;Test&gt;, where Mode can be Experimental, Nightly, and Continuous, and Test can be Start, Update, Configure, Build, Test, Coverage, and Submit.</p> </dd> <dt><code>-D &lt;var&gt;:&lt;type&gt;=&lt;value&gt;</code></dt> <dd>\n<p class=\"first\">Define a variable for script mode</p> <p class=\"last\">Pass in variable values on the command line. Use in conjunction with -S to pass variable values to a dashboard script. Parsing -D arguments as variable values is only attempted if the value following -D does not match any of the known dashboard types.</p> </dd> <dt><code>-M &lt;model&gt;, --test-model &lt;model&gt;</code></dt> <dd>\n<p class=\"first\">Sets the model for a dashboard</p> <p class=\"last\">This option tells ctest to act as a CDash client where the TestModel can be Experimental, Nightly, and Continuous. Combining -M and -T is similar to -D</p> </dd> <dt><code>-T &lt;action&gt;, --test-action &lt;action&gt;</code></dt> <dd>\n<p class=\"first\">Sets the dashboard action to perform</p> <p class=\"last\">This option tells ctest to act as a CDash client and perform some action such as start, build, test etc. Combining -M and -T is similar to -D</p> </dd> <dt><code>--track &lt;track&gt;</code></dt> <dd>\n<p class=\"first\">Specify the track to submit dashboard to</p> <p class=\"last\">Submit dashboard to specified track instead of default one. By default, the dashboard is submitted to Nightly, Experimental, or Continuous track, but by specifying this option, the track can be arbitrary.</p> </dd> <dt><code>-S &lt;script&gt;, --script &lt;script&gt;</code></dt> <dd>\n<p class=\"first\">Execute a dashboard for a configuration</p> <p class=\"last\">This option tells ctest to load in a configuration script which sets a number of parameters such as the binary and source directories. Then ctest will do what is required to create and run a dashboard. This option basically sets up a dashboard and then runs ctest -D with the appropriate options.</p> </dd> <dt><code>-SP &lt;script&gt;, --script-new-process &lt;script&gt;</code></dt> <dd>\n<p class=\"first\">Execute a dashboard for a configuration</p> <p class=\"last\">This option does the same operations as -S but it will do them in a separate process. This is primarily useful in cases where the script may modify the environment and you do not want the modified environment to impact other -S scripts.</p> </dd> <dt><code>-A &lt;file&gt;, --add-notes &lt;file&gt;</code></dt> <dd>\n<p class=\"first\">Add a notes file with submission</p> <p class=\"last\">This option tells ctest to include a notes file when submitting dashboard.</p> </dd> <dt><code>-I [Start,End,Stride,test#,test#|Test file], --tests-information</code></dt> <dd>\n<p class=\"first\">Run a specific number of tests by number.</p> <p class=\"last\">This option causes ctest to run tests starting at number Start, ending at number End, and incrementing by Stride. Any additional numbers after Stride are considered individual test numbers. Start, End,or stride can be empty. Optionally a file can be given that contains the same syntax as the command line.</p> </dd> <dt><code>-U, --union</code></dt> <dd>\n<p class=\"first\">Take the Union of -I and -R</p> <p class=\"last\">When both -R and -I are specified by default the intersection of tests are run. By specifying -U the union of tests is run instead.</p> </dd> <dt><code>--rerun-failed</code></dt> <dd>\n<p class=\"first\">Run only the tests that failed previously</p> <p class=\"last\">This option tells ctest to perform only the tests that failed during its previous run. When this option is specified, ctest ignores all other options intended to modify the list of tests to run (-L, -R, -E, -LE, -I, etc). In the event that CTest runs and no tests fail, subsequent calls to ctest with the –rerun-failed option will run the set of tests that most recently failed (if any).</p> </dd> <dt><code>--repeat-until-fail &lt;n&gt;</code></dt> <dd>\n<p class=\"first\">Require each test to run <code>&lt;n&gt;</code> times without failing in order to pass.</p> <p class=\"last\">This is useful in finding sporadic failures in test cases.</p> </dd> <dt><code>--max-width &lt;width&gt;</code></dt> <dd>\n<p class=\"first\">Set the max width for a test name to output</p> <p class=\"last\">Set the maximum width for each test name to show in the output. This allows the user to widen the output to avoid clipping the test name which can be very annoying.</p> </dd> <dt><code>--interactive-debug-mode [0|1]</code></dt> <dd>\n<p class=\"first\">Set the interactive mode to 0 or 1.</p> <p class=\"last\">This option causes ctest to run tests in either an interactive mode or a non-interactive mode. On Windows this means that in non-interactive mode, all system debug pop up windows are blocked. In dashboard mode (Experimental, Nightly, Continuous), the default is non-interactive. When just running tests not for a dashboard the default is to allow popups and interactive debugging.</p> </dd> <dt><code>--no-label-summary</code></dt> <dd>\n<p class=\"first\">Disable timing summary information for labels.</p> <p class=\"last\">This option tells ctest not to print summary information for each label associated with the tests run. If there are no labels on the tests, nothing extra is printed.</p> </dd> <dt><code>--build-and-test</code></dt> <dd>\n<p class=\"first\">Configure, build and run a test.</p> <p class=\"last\">This option tells ctest to configure (i.e. run cmake on), build, and or execute a test. The configure and test steps are optional. The arguments to this command line are the source and binary directories. By default this will run CMake on the Source/Bin directories specified unless –build-nocmake is specified. The –build-generator option <em>must</em> be provided to use –build-and-test. If –test-command is specified then that will be run after the build is complete. Other options that affect this mode are –build-target –build-nocmake, –build-run-dir, –build-two-config, –build-exe-dir, –build-project,–build-noclean, –build-options</p> </dd> <dt><code>--build-target</code></dt> <dd>\n<p class=\"first\">Specify a specific target to build.</p> <p class=\"last\">This option goes with the –build-and-test option, if left out the all target is built.</p> </dd> <dt><code>--build-nocmake</code></dt> <dd>\n<p class=\"first\">Run the build without running cmake first.</p> <p class=\"last\">Skip the cmake step.</p> </dd> <dt><code>--build-run-dir</code></dt> <dd>\n<p class=\"first\">Specify directory to run programs from.</p> <p class=\"last\">Directory where programs will be after it has been compiled.</p> </dd> <dt><code>--build-two-config</code></dt> <dd>Run CMake twice</dd> <dt><code>--build-exe-dir</code></dt> <dd>Specify the directory for the executable.</dd> <dt><code>--build-generator</code></dt> <dd>Specify the generator to use.</dd> <dt><code>--build-generator-platform</code></dt> <dd>Specify the generator-specific platform.</dd> <dt><code>--build-generator-toolset</code></dt> <dd>Specify the generator-specific toolset.</dd> <dt><code>--build-project</code></dt> <dd>Specify the name of the project to build.</dd> <dt><code>--build-makeprogram</code></dt> <dd>Override the make program chosen by CTest with a given one.</dd> <dt><code>--build-noclean</code></dt> <dd>Skip the make clean step.</dd> <dt><code>--build-config-sample</code></dt> <dd>\n<p class=\"first\">A sample executable to use to determine the configuration</p> <p class=\"last\">A sample executable to use to determine the configuration that should be used. e.g. Debug/Release/etc</p> </dd> <dt><code>--build-options</code></dt> <dd>\n<p class=\"first\">Add extra options to the build step.</p> <p class=\"last\">This option must be the last option with the exception of –test-command</p> </dd> <dt><code>--test-command</code></dt> <dd>The test to run with the –build-and-test option.</dd> <dt><code>--test-output-size-passed &lt;size&gt;</code></dt> <dd>Limit the output for passed tests to &lt;size&gt; bytes.</dd> <dt><code>--test-output-size-failed &lt;size&gt;</code></dt> <dd>Limit the output for failed tests to &lt;size&gt; bytes.</dd> <dt><code>--test-timeout</code></dt> <dd>The time limit in seconds, internal use only.</dd> <dt><code>--tomorrow-tag</code></dt> <dd>\n<p class=\"first\">Nightly or experimental starts with next day tag.</p> <p class=\"last\">This is useful if the build will not finish in one day.</p> </dd> <dt><code>--ctest-config</code></dt> <dd>\n<p class=\"first\">The configuration file used to initialize CTest state when submitting dashboards.</p> <p class=\"last\">This option tells CTest to use different initialization file instead of CTestConfiguration.tcl. This way multiple initialization files can be used for example to submit to multiple dashboards.</p> </dd> <dt><code>--overwrite</code></dt> <dd>\n<p class=\"first\">Overwrite CTest configuration option.</p> <p class=\"last\">By default ctest uses configuration options from configuration file. This option will overwrite the configuration option.</p> </dd> <dt><code>--extra-submit &lt;file&gt;[;&lt;file&gt;]</code></dt> <dd>\n<p class=\"first\">Submit extra files to the dashboard.</p> <p class=\"last\">This option will submit extra files to the dashboard.</p> </dd> <dt><code>--force-new-ctest-process</code></dt> <dd>\n<p class=\"first\">Run child CTest instances as new processes</p> <p class=\"last\">By default CTest will run child CTest instances within the same process. If this behavior is not desired, this argument will enforce new processes for child CTest processes.</p> </dd> <dt><code>--schedule-random</code></dt> <dd>\n<p class=\"first\">Use a random order for scheduling tests</p> <p class=\"last\">This option will run the tests in a random order. It is commonly used to detect implicit dependencies in a test suite.</p> </dd> <dt><code>--submit-index</code></dt> <dd>Legacy option for old Dart2 dashboard server feature. Do not use.</dd> <dt><code>--timeout &lt;seconds&gt;</code></dt> <dd>\n<p class=\"first\">Set a global timeout on all tests.</p> <p class=\"last\">This option will set a global timeout on all tests that do not already have a timeout set on them.</p> </dd> <dt><code>--stop-time &lt;time&gt;</code></dt> <dd>\n<p class=\"first\">Set a time at which all tests should stop running.</p> <p class=\"last\">Set a real time of day at which all tests should timeout. Example: 7:00:00 -0400. Any time format understood by the curl date parser is accepted. Local time is assumed if no timezone is specified.</p> </dd> <dt><code>--http1.0</code></dt> <dd>\n<p class=\"first\">Submit using HTTP 1.0.</p> <p class=\"last\">This option will force CTest to use HTTP 1.0 to submit files to the dashboard, instead of HTTP 1.1.</p> </dd> <dt><code>--no-compress-output</code></dt> <dd>\n<p class=\"first\">Do not compress test output when submitting.</p> <p class=\"last\">This flag will turn off automatic compression of test output. Use this to maintain compatibility with an older version of CDash which doesn’t support compressed test output.</p> </dd> <dt><code>--print-labels</code></dt> <dd>\n<p class=\"first\">Print all available test labels.</p> <p class=\"last\">This option will not run any tests, it will simply print the list of all labels associated with the test set.</p> </dd> </dl> <dl class=\"docutils\"> <dt><code>--help,-help,-usage,-h,-H,/?</code></dt> <dd>\n<p class=\"first\">Print usage information and exit.</p> <p class=\"last\">Usage describes the basic command line interface and its options.</p> </dd> <dt><code>--version,-version,/V [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Show program name/version banner and exit.</p> <p class=\"last\">If a file is specified, the version is written into it. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-full [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print all help manuals and exit.</p> <p class=\"last\">All manuals are printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-manual &lt;man&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print one help manual and exit.</p> <p class=\"last\">The specified manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-manual-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List help manuals available and exit.</p> <p class=\"last\">The list contains all manuals for which help may be obtained by using the <code>--help-manual</code> option followed by a manual name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-command &lt;cmd&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one command and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-commands.7#manual:cmake-commands(7)\" title=\"cmake-commands(7)\" id=\"index-0-manual:cmake-commands(7)\"><code>cmake-commands(7)</code></a> manual entry for <code>&lt;cmd&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-command-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List commands with help available and exit.</p> <p class=\"last\">The list contains all commands for which help may be obtained by using the <code>--help-command</code> option followed by a command name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-commands [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-commands manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-commands.7#manual:cmake-commands(7)\" title=\"cmake-commands(7)\" id=\"index-1-manual:cmake-commands(7)\"><code>cmake-commands(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-module &lt;mod&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one module and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-0-manual:cmake-modules(7)\"><code>cmake-modules(7)</code></a> manual entry for <code>&lt;mod&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-module-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List modules with help available and exit.</p> <p class=\"last\">The list contains all modules for which help may be obtained by using the <code>--help-module</code> option followed by a module name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-modules [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-modules manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-modules.7#manual:cmake-modules(7)\" title=\"cmake-modules(7)\" id=\"index-1-manual:cmake-modules(7)\"><code>cmake-modules(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policy &lt;cmp&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one policy and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>cmake-policies(7)</code></a> manual entry for <code>&lt;cmp&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policy-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List policies with help available and exit.</p> <p class=\"last\">The list contains all policies for which help may be obtained by using the <code>--help-policy</code> option followed by a policy name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-policies [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-policies manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-1-manual:cmake-policies(7)\"><code>cmake-policies(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-property &lt;prop&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one property and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-0-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual entries for <code>&lt;prop&gt;</code> are printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-property-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List properties with help available and exit.</p> <p class=\"last\">The list contains all properties for which help may be obtained by using the <code>--help-property</code> option followed by a property name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-properties [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-properties manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-1-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variable &lt;var&gt; [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print help for one variable and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-variables.7#manual:cmake-variables(7)\" title=\"cmake-variables(7)\" id=\"index-0-manual:cmake-variables(7)\"><code>cmake-variables(7)</code></a> manual entry for <code>&lt;var&gt;</code> is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variable-list [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">List variables with help available and exit.</p> <p class=\"last\">The list contains all variables for which help may be obtained by using the <code>--help-variable</code> option followed by a variable name. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> <dt><code>--help-variables [&lt;f&gt;]</code></dt> <dd>\n<p class=\"first\">Print cmake-variables manual and exit.</p> <p class=\"last\">The <a class=\"reference internal\" href=\"cmake-variables.7#manual:cmake-variables(7)\" title=\"cmake-variables(7)\" id=\"index-1-manual:cmake-variables(7)\"><code>cmake-variables(7)</code></a> manual is printed in a human-readable text format. The help is printed to a named &lt;f&gt;ile if given.</p> </dd> </dl>   <h2 id=\"id1\">Dashboard Client</h2> <p id=\"dashboard-client\">CTest can operate as a client for the <a class=\"reference external\" href=\"http://cdash.org/\">CDash</a> software quality dashboard application. As a dashboard client, CTest performs a sequence of steps to configure, build, and test software, and then submits the results to a <a class=\"reference external\" href=\"http://cdash.org/\">CDash</a> server.</p>  <h3 id=\"dashboard-client-steps\">Dashboard Client Steps</h3> <p>CTest defines an ordered list of testing steps of which some or all may be run as a dashboard client:</p> <dl class=\"docutils\"> <dt><code>Start</code></dt> <dd>Start a new dashboard submission to be composed of results recorded by the following steps. See the <a class=\"reference internal\" href=\"#ctest-start-step\">CTest Start Step</a> section below.</dd> <dt><code>Update</code></dt> <dd>Update the source tree from its version control repository. Record the old and new versions and the list of updated source files. See the <a class=\"reference internal\" href=\"#ctest-update-step\">CTest Update Step</a> section below.</dd> <dt><code>Configure</code></dt> <dd>Configure the software by running a command in the build tree. Record the configuration output log. See the <a class=\"reference internal\" href=\"#ctest-configure-step\">CTest Configure Step</a> section below.</dd> <dt><code>Build</code></dt> <dd>Build the software by running a command in the build tree. Record the build output log and detect warnings and errors. See the <a class=\"reference internal\" href=\"#ctest-build-step\">CTest Build Step</a> section below.</dd> <dt><code>Test</code></dt> <dd>Test the software by loading a <code>CTestTestfile.cmake</code> from the build tree and executing the defined tests. Record the output and result of each test. See the <a class=\"reference internal\" href=\"#ctest-test-step\">CTest Test Step</a> section below.</dd> <dt><code>Coverage</code></dt> <dd>Compute coverage of the source code by running a coverage analysis tool and recording its output. See the <a class=\"reference internal\" href=\"#ctest-coverage-step\">CTest Coverage Step</a> section below.</dd> <dt><code>MemCheck</code></dt> <dd>Run the software test suite through a memory check tool. Record the test output, results, and issues reported by the tool. See the <a class=\"reference internal\" href=\"#ctest-memcheck-step\">CTest MemCheck Step</a> section below.</dd> <dt><code>Submit</code></dt> <dd>Submit results recorded from other testing steps to the software quality dashboard server. See the <a class=\"reference internal\" href=\"#ctest-submit-step\">CTest Submit Step</a> section below.</dd> </dl>   <h3 id=\"dashboard-client-modes\">Dashboard Client Modes</h3> <p>CTest defines three modes of operation as a dashboard client:</p> <dl class=\"docutils\"> <dt><code>Nightly</code></dt> <dd>This mode is intended to be invoked once per day, typically at night. It enables the <code>Start</code>, <code>Update</code>, <code>Configure</code>, <code>Build</code>, <code>Test</code>, <code>Coverage</code>, and <code>Submit</code> steps by default. Selected steps run even if the <code>Update</code> step reports no changes to the source tree.</dd> <dt><code>Continuous</code></dt> <dd>This mode is intended to be invoked repeatedly throughout the day. It enables the <code>Start</code>, <code>Update</code>, <code>Configure</code>, <code>Build</code>, <code>Test</code>, <code>Coverage</code>, and <code>Submit</code> steps by default, but exits after the <code>Update</code> step if it reports no changes to the source tree.</dd> <dt><code>Experimental</code></dt> <dd>This mode is intended to be invoked by a developer to test local changes. It enables the <code>Start</code>, <code>Configure</code>, <code>Build</code>, <code>Test</code>, <code>Coverage</code>, and <code>Submit</code> steps by default.</dd> </dl>   <h3 id=\"dashboard-client-via-ctest-command-line\">Dashboard Client via CTest Command-Line</h3> <p>CTest can perform testing on an already-generated build tree. Run the <code>ctest</code> command with the current working directory set to the build tree and use one of these signatures:</p> <pre data-language=\"python\">ctest -D &lt;mode&gt;[&lt;step&gt;]\nctest -M &lt;mode&gt; [ -T &lt;step&gt; ]...\n</pre> <p>The <code>&lt;mode&gt;</code> must be one of the above <a class=\"reference internal\" href=\"#dashboard-client-modes\">Dashboard Client Modes</a>, and each <code>&lt;step&gt;</code> must be one of the above <a class=\"reference internal\" href=\"#dashboard-client-steps\">Dashboard Client Steps</a>.</p> <p>CTest reads the <a class=\"reference internal\" href=\"#dashboard-client-configuration\">Dashboard Client Configuration</a> settings from a file in the build tree called either <code>CTestConfiguration.ini</code> or <code>DartConfiguration.tcl</code> (the names are historical). The format of the file is:</p> <pre data-language=\"python\"># Lines starting in '#' are comments.\n# Other non-blank lines are key-value pairs.\n&lt;setting&gt;: &lt;value&gt;\n</pre> <p>where <code>&lt;setting&gt;</code> is the setting name and <code>&lt;value&gt;</code> is the setting value.</p> <p>In build trees generated by CMake, this configuration file is generated by the <a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-0-module:CTest\"><code>CTest</code></a> module if included by the project. The module uses variables to obtain a value for each setting as documented with the settings below.</p>   <h3 id=\"ctest-script\">Dashboard Client via CTest Script</h3> <p id=\"dashboard-client-via-ctest-script\">CTest can perform testing driven by a <a class=\"reference internal\" href=\"cmake-language.7#manual:cmake-language(7)\" title=\"cmake-language(7)\" id=\"index-0-manual:cmake-language(7)\"><code>cmake-language(7)</code></a> script that creates and maintains the source and build tree as well as performing the testing steps. Run the <code>ctest</code> command with the current working directory set outside of any build tree and use one of these signatures:</p> <pre data-language=\"python\">ctest -S &lt;script&gt;\nctest -SP &lt;script&gt;\n</pre> <p>The <code>&lt;script&gt;</code> file must call <a class=\"reference internal\" href=\"cmake-commands.7#ctest-commands\"><span>CTest Commands</span></a> commands to run testing steps explicitly as documented below. The commands obtain <a class=\"reference internal\" href=\"#dashboard-client-configuration\">Dashboard Client Configuration</a> settings from their arguments or from variables set in the script.</p>    <h2 id=\"dashboard-client-configuration\">Dashboard Client Configuration</h2> <p>The <a class=\"reference internal\" href=\"#dashboard-client-steps\">Dashboard Client Steps</a> may be configured by named settings as documented in the following sections.</p>  <h3 id=\"id2\">CTest Start Step</h3> <p id=\"ctest-start-step\">Start a new dashboard submission to be composed of results recorded by the following steps.</p> <p>In a <a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a>, the <a class=\"reference internal\" href=\"../command/ctest_start#command:ctest_start\" title=\"ctest_start\" id=\"index-0-command:ctest_start\"><code>ctest_start()</code></a> command runs this step. Arguments to the command may specify some of the step settings. The command first runs the command-line specified by the <code>CTEST_CHECKOUT_COMMAND</code> variable, if set, to initialize the source directory.</p> <p>Configuration settings include:</p> <dl class=\"docutils\"> <dt><code>BuildDirectory</code></dt> <dd>\n<p class=\"first\">The full path to the project build tree.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_binary_directory#variable:CTEST_BINARY_DIRECTORY\" title=\"CTEST_BINARY_DIRECTORY\" id=\"index-0-variable:CTEST_BINARY_DIRECTORY\"><code>CTEST_BINARY_DIRECTORY</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-1-module:CTest\"><code>CTest</code></a> module variable: <a class=\"reference internal\" href=\"../variable/project_binary_dir#variable:PROJECT_BINARY_DIR\" title=\"PROJECT_BINARY_DIR\" id=\"index-0-variable:PROJECT_BINARY_DIR\"><code>PROJECT_BINARY_DIR</code></a>\n</li> </ul> </dd> <dt><code>SourceDirectory</code></dt> <dd>\n<p class=\"first\">The full path to the project source tree.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_source_directory#variable:CTEST_SOURCE_DIRECTORY\" title=\"CTEST_SOURCE_DIRECTORY\" id=\"index-0-variable:CTEST_SOURCE_DIRECTORY\"><code>CTEST_SOURCE_DIRECTORY</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-2-module:CTest\"><code>CTest</code></a> module variable: <a class=\"reference internal\" href=\"../variable/project_source_dir#variable:PROJECT_SOURCE_DIR\" title=\"PROJECT_SOURCE_DIR\" id=\"index-0-variable:PROJECT_SOURCE_DIR\"><code>PROJECT_SOURCE_DIR</code></a>\n</li> </ul> </dd> </dl>   <h3 id=\"id3\">CTest Update Step</h3> <p id=\"ctest-update-step\">In a <a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a>, the <a class=\"reference internal\" href=\"../command/ctest_update#command:ctest_update\" title=\"ctest_update\" id=\"index-0-command:ctest_update\"><code>ctest_update()</code></a> command runs this step. Arguments to the command may specify some of the step settings.</p> <p>Configuration settings to specify the version control tool include:</p> <dl class=\"docutils\"> <dt><code>BZRCommand</code></dt> <dd>\n<p class=\"first\"><code>bzr</code> command-line tool to use if source tree is managed by Bazaar.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_bzr_command#variable:CTEST_BZR_COMMAND\" title=\"CTEST_BZR_COMMAND\" id=\"index-0-variable:CTEST_BZR_COMMAND\"><code>CTEST_BZR_COMMAND</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-3-module:CTest\"><code>CTest</code></a> module variable: none</li> </ul> </dd> <dt><code>BZRUpdateOptions</code></dt> <dd>\n<p class=\"first\">Command-line options to the <code>BZRCommand</code> when updating the source.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_bzr_update_options#variable:CTEST_BZR_UPDATE_OPTIONS\" title=\"CTEST_BZR_UPDATE_OPTIONS\" id=\"index-0-variable:CTEST_BZR_UPDATE_OPTIONS\"><code>CTEST_BZR_UPDATE_OPTIONS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-4-module:CTest\"><code>CTest</code></a> module variable: none</li> </ul> </dd> <dt><code>CVSCommand</code></dt> <dd>\n<p class=\"first\"><code>cvs</code> command-line tool to use if source tree is managed by CVS.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_cvs_command#variable:CTEST_CVS_COMMAND\" title=\"CTEST_CVS_COMMAND\" id=\"index-0-variable:CTEST_CVS_COMMAND\"><code>CTEST_CVS_COMMAND</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-5-module:CTest\"><code>CTest</code></a> module variable: <code>CVSCOMMAND</code>\n</li> </ul> </dd> <dt><code>CVSUpdateOptions</code></dt> <dd>\n<p class=\"first\">Command-line options to the <code>CVSCommand</code> when updating the source.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_cvs_update_options#variable:CTEST_CVS_UPDATE_OPTIONS\" title=\"CTEST_CVS_UPDATE_OPTIONS\" id=\"index-0-variable:CTEST_CVS_UPDATE_OPTIONS\"><code>CTEST_CVS_UPDATE_OPTIONS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-6-module:CTest\"><code>CTest</code></a> module variable: <code>CVS_UPDATE_OPTIONS</code>\n</li> </ul> </dd> <dt><code>GITCommand</code></dt> <dd>\n<p class=\"first\"><code>git</code> command-line tool to use if source tree is managed by Git.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_git_command#variable:CTEST_GIT_COMMAND\" title=\"CTEST_GIT_COMMAND\" id=\"index-0-variable:CTEST_GIT_COMMAND\"><code>CTEST_GIT_COMMAND</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-7-module:CTest\"><code>CTest</code></a> module variable: <code>GITCOMMAND</code>\n</li> </ul> </dd> <dt><code>GITUpdateCustom</code></dt> <dd>\n<p class=\"first\">Specify a custom command line (as a semicolon-separated list) to run in the source tree (Git work tree) to update it instead of running the <code>GITCommand</code>.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_git_update_custom#variable:CTEST_GIT_UPDATE_CUSTOM\" title=\"CTEST_GIT_UPDATE_CUSTOM\" id=\"index-0-variable:CTEST_GIT_UPDATE_CUSTOM\"><code>CTEST_GIT_UPDATE_CUSTOM</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-8-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_GIT_UPDATE_CUSTOM</code>\n</li> </ul> </dd> <dt><code>GITUpdateOptions</code></dt> <dd>\n<p class=\"first\">Command-line options to the <code>GITCommand</code> when updating the source.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_git_update_options#variable:CTEST_GIT_UPDATE_OPTIONS\" title=\"CTEST_GIT_UPDATE_OPTIONS\" id=\"index-0-variable:CTEST_GIT_UPDATE_OPTIONS\"><code>CTEST_GIT_UPDATE_OPTIONS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-9-module:CTest\"><code>CTest</code></a> module variable: <code>GIT_UPDATE_OPTIONS</code>\n</li> </ul> </dd> <dt><code>HGCommand</code></dt> <dd>\n<p class=\"first\"><code>hg</code> command-line tool to use if source tree is managed by Mercurial.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_hg_command#variable:CTEST_HG_COMMAND\" title=\"CTEST_HG_COMMAND\" id=\"index-0-variable:CTEST_HG_COMMAND\"><code>CTEST_HG_COMMAND</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-10-module:CTest\"><code>CTest</code></a> module variable: none</li> </ul> </dd> <dt><code>HGUpdateOptions</code></dt> <dd>\n<p class=\"first\">Command-line options to the <code>HGCommand</code> when updating the source.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_hg_update_options#variable:CTEST_HG_UPDATE_OPTIONS\" title=\"CTEST_HG_UPDATE_OPTIONS\" id=\"index-0-variable:CTEST_HG_UPDATE_OPTIONS\"><code>CTEST_HG_UPDATE_OPTIONS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-11-module:CTest\"><code>CTest</code></a> module variable: none</li> </ul> </dd> <dt><code>P4Client</code></dt> <dd>\n<p class=\"first\">Value of the <code>-c</code> option to the <code>P4Command</code>.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_p4_client#variable:CTEST_P4_CLIENT\" title=\"CTEST_P4_CLIENT\" id=\"index-0-variable:CTEST_P4_CLIENT\"><code>CTEST_P4_CLIENT</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-12-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_P4_CLIENT</code>\n</li> </ul> </dd> <dt><code>P4Command</code></dt> <dd>\n<p class=\"first\"><code>p4</code> command-line tool to use if source tree is managed by Perforce.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_p4_command#variable:CTEST_P4_COMMAND\" title=\"CTEST_P4_COMMAND\" id=\"index-0-variable:CTEST_P4_COMMAND\"><code>CTEST_P4_COMMAND</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-13-module:CTest\"><code>CTest</code></a> module variable: <code>P4COMMAND</code>\n</li> </ul> </dd> <dt><code>P4Options</code></dt> <dd>\n<p class=\"first\">Command-line options to the <code>P4Command</code> for all invocations.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_p4_options#variable:CTEST_P4_OPTIONS\" title=\"CTEST_P4_OPTIONS\" id=\"index-0-variable:CTEST_P4_OPTIONS\"><code>CTEST_P4_OPTIONS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-14-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_P4_OPTIONS</code>\n</li> </ul> </dd> <dt><code>P4UpdateCustom</code></dt> <dd>\n<p class=\"first\">Specify a custom command line (as a semicolon-separated list) to run in the source tree (Perforce tree) to update it instead of running the <code>P4Command</code>.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: none</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-15-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_P4_UPDATE_CUSTOM</code>\n</li> </ul> </dd> <dt><code>P4UpdateOptions</code></dt> <dd>\n<p class=\"first\">Command-line options to the <code>P4Command</code> when updating the source.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_p4_update_options#variable:CTEST_P4_UPDATE_OPTIONS\" title=\"CTEST_P4_UPDATE_OPTIONS\" id=\"index-0-variable:CTEST_P4_UPDATE_OPTIONS\"><code>CTEST_P4_UPDATE_OPTIONS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-16-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_P4_UPDATE_OPTIONS</code>\n</li> </ul> </dd> <dt><code>SVNCommand</code></dt> <dd>\n<p class=\"first\"><code>svn</code> command-line tool to use if source tree is managed by Subversion.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_svn_command#variable:CTEST_SVN_COMMAND\" title=\"CTEST_SVN_COMMAND\" id=\"index-0-variable:CTEST_SVN_COMMAND\"><code>CTEST_SVN_COMMAND</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-17-module:CTest\"><code>CTest</code></a> module variable: <code>SVNCOMMAND</code>\n</li> </ul> </dd> <dt><code>SVNOptions</code></dt> <dd>\n<p class=\"first\">Command-line options to the <code>SVNCommand</code> for all invocations.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_svn_options#variable:CTEST_SVN_OPTIONS\" title=\"CTEST_SVN_OPTIONS\" id=\"index-0-variable:CTEST_SVN_OPTIONS\"><code>CTEST_SVN_OPTIONS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-18-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_SVN_OPTIONS</code>\n</li> </ul> </dd> <dt><code>SVNUpdateOptions</code></dt> <dd>\n<p class=\"first\">Command-line options to the <code>SVNCommand</code> when updating the source.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_svn_update_options#variable:CTEST_SVN_UPDATE_OPTIONS\" title=\"CTEST_SVN_UPDATE_OPTIONS\" id=\"index-0-variable:CTEST_SVN_UPDATE_OPTIONS\"><code>CTEST_SVN_UPDATE_OPTIONS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-19-module:CTest\"><code>CTest</code></a> module variable: <code>SVN_UPDATE_OPTIONS</code>\n</li> </ul> </dd> <dt><code>UpdateCommand</code></dt> <dd>\n<p class=\"first\">Specify the version-control command-line tool to use without detecting the VCS that manages the source tree.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_update_command#variable:CTEST_UPDATE_COMMAND\" title=\"CTEST_UPDATE_COMMAND\" id=\"index-0-variable:CTEST_UPDATE_COMMAND\"><code>CTEST_UPDATE_COMMAND</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-20-module:CTest\"><code>CTest</code></a> module variable: <code>&lt;VCS&gt;COMMAND</code> when <code>UPDATE_TYPE</code> is <code>&lt;vcs&gt;</code>, else <code>UPDATE_COMMAND</code>\n</li> </ul> </dd> <dt><code>UpdateOptions</code></dt> <dd>\n<p class=\"first\">Command-line options to the <code>UpdateCommand</code>.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_update_options#variable:CTEST_UPDATE_OPTIONS\" title=\"CTEST_UPDATE_OPTIONS\" id=\"index-0-variable:CTEST_UPDATE_OPTIONS\"><code>CTEST_UPDATE_OPTIONS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-21-module:CTest\"><code>CTest</code></a> module variable: <code>&lt;VCS&gt;_UPDATE_OPTIONS</code> when <code>UPDATE_TYPE</code> is <code>&lt;vcs&gt;</code>, else <code>UPDATE_OPTIONS</code>\n</li> </ul> </dd> <dt><code>UpdateType</code></dt> <dd>\n<p class=\"first\">Specify the version-control system that manages the source tree if it cannot be detected automatically. The value may be <code>bzr</code>, <code>cvs</code>, <code>git</code>, <code>hg</code>, <code>p4</code>, or <code>svn</code>.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: none, detected from source tree</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-22-module:CTest\"><code>CTest</code></a> module variable: <code>UPDATE_TYPE</code> if set, else <code>CTEST_UPDATE_TYPE</code>\n</li> </ul> </dd> <dt><code>UpdateVersionOnly</code></dt> <dd>\n<p class=\"first\">Specify that you want the version control update command to only discover the current version that is checked out, and not to update to a different version.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_update_version_only#variable:CTEST_UPDATE_VERSION_ONLY\" title=\"CTEST_UPDATE_VERSION_ONLY\" id=\"index-0-variable:CTEST_UPDATE_VERSION_ONLY\"><code>CTEST_UPDATE_VERSION_ONLY</code></a>\n</li> </ul> </dd> </dl> <p>Additional configuration settings include:</p> <dl class=\"docutils\"> <dt><code>NightlyStartTime</code></dt> <dd>\n<p class=\"first\">In the <code>Nightly</code> dashboard mode, specify the “nightly start time”. With centralized version control systems (<code>cvs</code> and <code>svn</code>), the <code>Update</code> step checks out the version of the software as of this time so that multiple clients choose a common version to test. This is not well-defined in distributed version-control systems so the setting is ignored.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_nightly_start_time#variable:CTEST_NIGHTLY_START_TIME\" title=\"CTEST_NIGHTLY_START_TIME\" id=\"index-0-variable:CTEST_NIGHTLY_START_TIME\"><code>CTEST_NIGHTLY_START_TIME</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-23-module:CTest\"><code>CTest</code></a> module variable: <code>NIGHTLY_START_TIME</code> if set, else <code>CTEST_NIGHTLY_START_TIME</code>\n</li> </ul> </dd> </dl>   <h3 id=\"id4\">CTest Configure Step</h3> <p id=\"ctest-configure-step\">In a <a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a>, the <a class=\"reference internal\" href=\"../command/ctest_configure#command:ctest_configure\" title=\"ctest_configure\" id=\"index-0-command:ctest_configure\"><code>ctest_configure()</code></a> command runs this step. Arguments to the command may specify some of the step settings.</p> <p>Configuration settings include:</p> <dl class=\"docutils\"> <dt><code>ConfigureCommand</code></dt> <dd>\n<p class=\"first\">Command-line to launch the software configuration process. It will be executed in the location specified by the <code>BuildDirectory</code> setting.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_configure_command#variable:CTEST_CONFIGURE_COMMAND\" title=\"CTEST_CONFIGURE_COMMAND\" id=\"index-0-variable:CTEST_CONFIGURE_COMMAND\"><code>CTEST_CONFIGURE_COMMAND</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-24-module:CTest\"><code>CTest</code></a> module variable: <a class=\"reference internal\" href=\"../variable/cmake_command#variable:CMAKE_COMMAND\" title=\"CMAKE_COMMAND\" id=\"index-0-variable:CMAKE_COMMAND\"><code>CMAKE_COMMAND</code></a> followed by <a class=\"reference internal\" href=\"../variable/project_source_dir#variable:PROJECT_SOURCE_DIR\" title=\"PROJECT_SOURCE_DIR\" id=\"index-1-variable:PROJECT_SOURCE_DIR\"><code>PROJECT_SOURCE_DIR</code></a>\n</li> </ul> </dd> </dl>   <h3 id=\"id5\">CTest Build Step</h3> <p id=\"ctest-build-step\">In a <a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a>, the <a class=\"reference internal\" href=\"../command/ctest_build#command:ctest_build\" title=\"ctest_build\" id=\"index-0-command:ctest_build\"><code>ctest_build()</code></a> command runs this step. Arguments to the command may specify some of the step settings.</p> <p>Configuration settings include:</p> <dl class=\"docutils\"> <dt><code>DefaultCTestConfigurationType</code></dt> <dd>\n<p class=\"first\">When the build system to be launched allows build-time selection of the configuration (e.g. <code>Debug</code>, <code>Release</code>), this specifies the default configuration to be built when no <code>-C</code> option is given to the <code>ctest</code> command. The value will be substituted into the value of <code>MakeCommand</code> to replace the literal string <code>${CTEST_CONFIGURATION_TYPE}</code> if it appears.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_configuration_type#variable:CTEST_CONFIGURATION_TYPE\" title=\"CTEST_CONFIGURATION_TYPE\" id=\"index-0-variable:CTEST_CONFIGURATION_TYPE\"><code>CTEST_CONFIGURATION_TYPE</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-25-module:CTest\"><code>CTest</code></a> module variable: <code>DEFAULT_CTEST_CONFIGURATION_TYPE</code>, initialized by the <code>CMAKE_CONFIG_TYPE</code> environment variable</li> </ul> </dd> <dt><code>MakeCommand</code></dt> <dd>\n<p class=\"first\">Command-line to launch the software build process. It will be executed in the location specified by the <code>BuildDirectory</code> setting.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_build_command#variable:CTEST_BUILD_COMMAND\" title=\"CTEST_BUILD_COMMAND\" id=\"index-0-variable:CTEST_BUILD_COMMAND\"><code>CTEST_BUILD_COMMAND</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-26-module:CTest\"><code>CTest</code></a> module variable: <code>MAKECOMMAND</code>, initialized by the <a class=\"reference internal\" href=\"../command/build_command#command:build_command\" title=\"build_command\" id=\"index-0-command:build_command\"><code>build_command()</code></a> command</li> </ul> </dd> <dt><code>UseLaunchers</code></dt> <dd>\n<p class=\"first\">For build trees generated by CMake using one of the <a class=\"reference internal\" href=\"cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> or the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a> generator, specify whether the <code>CTEST_USE_LAUNCHERS</code> feature is enabled by the <a class=\"reference internal\" href=\"../module/ctestuselaunchers#module:CTestUseLaunchers\" title=\"CTestUseLaunchers\" id=\"index-0-module:CTestUseLaunchers\"><code>CTestUseLaunchers</code></a> module (also included by the <a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-27-module:CTest\"><code>CTest</code></a> module). When enabled, the generated build system wraps each invocation of the compiler, linker, or custom command line with a “launcher” that communicates with CTest via environment variables and files to report granular build warning and error information. Otherwise, CTest must “scrape” the build output log for diagnostics.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_use_launchers#variable:CTEST_USE_LAUNCHERS\" title=\"CTEST_USE_LAUNCHERS\" id=\"index-0-variable:CTEST_USE_LAUNCHERS\"><code>CTEST_USE_LAUNCHERS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-28-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_USE_LAUNCHERS</code>\n</li> </ul> </dd> </dl>   <h3 id=\"id6\">CTest Test Step</h3> <p id=\"ctest-test-step\">In a <a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a>, the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command runs this step. Arguments to the command may specify some of the step settings.</p> <p>Configuration settings include:</p> <dl class=\"docutils\"> <dt><code>TestLoad</code></dt> <dd>\n<p class=\"first\">While running tests in parallel (e.g. with <code>-j</code>), try not to start tests when they may cause the CPU load to pass above a given threshold.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_test_load#variable:CTEST_TEST_LOAD\" title=\"CTEST_TEST_LOAD\" id=\"index-0-variable:CTEST_TEST_LOAD\"><code>CTEST_TEST_LOAD</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-29-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_TEST_LOAD</code>\n</li> </ul> </dd> <dt><code>TimeOut</code></dt> <dd>\n<p class=\"first\">The default timeout for each test if not specified by the <a class=\"reference internal\" href=\"../prop_test/timeout#prop_test:TIMEOUT\" title=\"TIMEOUT\" id=\"index-0-prop_test:TIMEOUT\"><code>TIMEOUT</code></a> test property.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_test_timeout#variable:CTEST_TEST_TIMEOUT\" title=\"CTEST_TEST_TIMEOUT\" id=\"index-0-variable:CTEST_TEST_TIMEOUT\"><code>CTEST_TEST_TIMEOUT</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-30-module:CTest\"><code>CTest</code></a> module variable: <code>DART_TESTING_TIMEOUT</code>\n</li> </ul> </dd> </dl>   <h3 id=\"id7\">CTest Coverage Step</h3> <p id=\"ctest-coverage-step\">In a <a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a>, the <a class=\"reference internal\" href=\"../command/ctest_coverage#command:ctest_coverage\" title=\"ctest_coverage\" id=\"index-0-command:ctest_coverage\"><code>ctest_coverage()</code></a> command runs this step. Arguments to the command may specify some of the step settings.</p> <p>Configuration settings include:</p> <dl class=\"docutils\"> <dt><code>CoverageCommand</code></dt> <dd>\n<p class=\"first\">Command-line tool to perform software coverage analysis. It will be executed in the location specified by the <code>BuildDirectory</code> setting.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_coverage_command#variable:CTEST_COVERAGE_COMMAND\" title=\"CTEST_COVERAGE_COMMAND\" id=\"index-0-variable:CTEST_COVERAGE_COMMAND\"><code>CTEST_COVERAGE_COMMAND</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-31-module:CTest\"><code>CTest</code></a> module variable: <code>COVERAGE_COMMAND</code>\n</li> </ul> </dd> <dt><code>CoverageExtraFlags</code></dt> <dd>\n<p class=\"first\">Specify command-line options to the <code>CoverageCommand</code> tool.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_coverage_extra_flags#variable:CTEST_COVERAGE_EXTRA_FLAGS\" title=\"CTEST_COVERAGE_EXTRA_FLAGS\" id=\"index-0-variable:CTEST_COVERAGE_EXTRA_FLAGS\"><code>CTEST_COVERAGE_EXTRA_FLAGS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-32-module:CTest\"><code>CTest</code></a> module variable: <code>COVERAGE_EXTRA_FLAGS</code>\n</li> </ul> </dd> </dl>   <h3 id=\"id8\">CTest MemCheck Step</h3> <p id=\"ctest-memcheck-step\">In a <a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a>, the <a class=\"reference internal\" href=\"../command/ctest_memcheck#command:ctest_memcheck\" title=\"ctest_memcheck\" id=\"index-0-command:ctest_memcheck\"><code>ctest_memcheck()</code></a> command runs this step. Arguments to the command may specify some of the step settings.</p> <p>Configuration settings include:</p> <dl class=\"docutils\"> <dt><code>MemoryCheckCommand</code></dt> <dd>\n<p class=\"first\">Command-line tool to perform dynamic analysis. Test command lines will be launched through this tool.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_memorycheck_command#variable:CTEST_MEMORYCHECK_COMMAND\" title=\"CTEST_MEMORYCHECK_COMMAND\" id=\"index-0-variable:CTEST_MEMORYCHECK_COMMAND\"><code>CTEST_MEMORYCHECK_COMMAND</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-33-module:CTest\"><code>CTest</code></a> module variable: <code>MEMORYCHECK_COMMAND</code>\n</li> </ul> </dd> <dt><code>MemoryCheckCommandOptions</code></dt> <dd>\n<p class=\"first\">Specify command-line options to the <code>MemoryCheckCommand</code> tool. They will be placed prior to the test command line.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_memorycheck_command_options#variable:CTEST_MEMORYCHECK_COMMAND_OPTIONS\" title=\"CTEST_MEMORYCHECK_COMMAND_OPTIONS\" id=\"index-0-variable:CTEST_MEMORYCHECK_COMMAND_OPTIONS\"><code>CTEST_MEMORYCHECK_COMMAND_OPTIONS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-34-module:CTest\"><code>CTest</code></a> module variable: <code>MEMORYCHECK_COMMAND_OPTIONS</code>\n</li> </ul> </dd> <dt><code>MemoryCheckType</code></dt> <dd>\n<p class=\"first\">Specify the type of memory checking to perform.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_memorycheck_type#variable:CTEST_MEMORYCHECK_TYPE\" title=\"CTEST_MEMORYCHECK_TYPE\" id=\"index-0-variable:CTEST_MEMORYCHECK_TYPE\"><code>CTEST_MEMORYCHECK_TYPE</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-35-module:CTest\"><code>CTest</code></a> module variable: <code>MEMORYCHECK_TYPE</code>\n</li> </ul> </dd> <dt><code>MemoryCheckSanitizerOptions</code></dt> <dd>\n<p class=\"first\">Specify options to sanitizers when running with a sanitize-enabled build.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_memorycheck_sanitizer_options#variable:CTEST_MEMORYCHECK_SANITIZER_OPTIONS\" title=\"CTEST_MEMORYCHECK_SANITIZER_OPTIONS\" id=\"index-0-variable:CTEST_MEMORYCHECK_SANITIZER_OPTIONS\"><code>CTEST_MEMORYCHECK_SANITIZER_OPTIONS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-36-module:CTest\"><code>CTest</code></a> module variable: <code>MEMORYCHECK_SANITIZER_OPTIONS</code>\n</li> </ul> </dd> <dt><code>MemoryCheckSuppressionFile</code></dt> <dd>\n<p class=\"first\">Specify a file containing suppression rules for the <code>MemoryCheckCommand</code> tool. It will be passed with options appropriate to the tool.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_memorycheck_suppressions_file#variable:CTEST_MEMORYCHECK_SUPPRESSIONS_FILE\" title=\"CTEST_MEMORYCHECK_SUPPRESSIONS_FILE\" id=\"index-0-variable:CTEST_MEMORYCHECK_SUPPRESSIONS_FILE\"><code>CTEST_MEMORYCHECK_SUPPRESSIONS_FILE</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-37-module:CTest\"><code>CTest</code></a> module variable: <code>MEMORYCHECK_SUPPRESSIONS_FILE</code>\n</li> </ul> </dd> </dl> <p>Additional configuration settings include:</p> <dl class=\"docutils\"> <dt><code>BoundsCheckerCommand</code></dt> <dd>\n<p class=\"first\">Specify a <code>MemoryCheckCommand</code> that is known to be command-line compatible with Bounds Checker.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: none</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-38-module:CTest\"><code>CTest</code></a> module variable: none</li> </ul> </dd> <dt><code>PurifyCommand</code></dt> <dd>\n<p class=\"first\">Specify a <code>MemoryCheckCommand</code> that is known to be command-line compatible with Purify.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: none</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-39-module:CTest\"><code>CTest</code></a> module variable: <code>PURIFYCOMMAND</code>\n</li> </ul> </dd> <dt><code>ValgrindCommand</code></dt> <dd>\n<p class=\"first\">Specify a <code>MemoryCheckCommand</code> that is known to be command-line compatible with Valgrind.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: none</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-40-module:CTest\"><code>CTest</code></a> module variable: <code>VALGRIND_COMMAND</code>\n</li> </ul> </dd> <dt><code>ValgrindCommandOptions</code></dt> <dd>\n<p class=\"first\">Specify command-line options to the <code>ValgrindCommand</code> tool. They will be placed prior to the test command line.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: none</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-41-module:CTest\"><code>CTest</code></a> module variable: <code>VALGRIND_COMMAND_OPTIONS</code>\n</li> </ul> </dd> </dl>   <h3 id=\"id9\">CTest Submit Step</h3> <p id=\"ctest-submit-step\">In a <a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a>, the <a class=\"reference internal\" href=\"../command/ctest_submit#command:ctest_submit\" title=\"ctest_submit\" id=\"index-0-command:ctest_submit\"><code>ctest_submit()</code></a> command runs this step. Arguments to the command may specify some of the step settings.</p> <p>Configuration settings include:</p> <dl class=\"docutils\"> <dt><code>BuildName</code></dt> <dd>\n<p class=\"first\">Describe the dashboard client platform with a short string. (Operating system, compiler, etc.)</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_build_name#variable:CTEST_BUILD_NAME\" title=\"CTEST_BUILD_NAME\" id=\"index-0-variable:CTEST_BUILD_NAME\"><code>CTEST_BUILD_NAME</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-42-module:CTest\"><code>CTest</code></a> module variable: <code>BUILDNAME</code>\n</li> </ul> </dd> <dt><code>CDashVersion</code></dt> <dd>\n<p class=\"first\">Specify the version of <a class=\"reference external\" href=\"http://cdash.org/\">CDash</a> on the server.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: none, detected from server</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-43-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_CDASH_VERSION</code>\n</li> </ul> </dd> <dt><code>CTestSubmitRetryCount</code></dt> <dd>\n<p class=\"first\">Specify a number of attempts to retry submission on network failure.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: none, use the <a class=\"reference internal\" href=\"../command/ctest_submit#command:ctest_submit\" title=\"ctest_submit\" id=\"index-1-command:ctest_submit\"><code>ctest_submit()</code></a> <code>RETRY_COUNT</code> option.</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-44-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_SUBMIT_RETRY_COUNT</code>\n</li> </ul> </dd> <dt><code>CTestSubmitRetryDelay</code></dt> <dd>\n<p class=\"first\">Specify a delay before retrying submission on network failure.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: none, use the <a class=\"reference internal\" href=\"../command/ctest_submit#command:ctest_submit\" title=\"ctest_submit\" id=\"index-2-command:ctest_submit\"><code>ctest_submit()</code></a> <code>RETRY_DELAY</code> option.</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-45-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_SUBMIT_RETRY_DELAY</code>\n</li> </ul> </dd> <dt><code>CurlOptions</code></dt> <dd>\n<p class=\"first\">Specify a semicolon-separated list of options to control the Curl library that CTest uses internally to connect to the server. Possible options are <code>CURLOPT_SSL_VERIFYPEER_OFF</code> and <code>CURLOPT_SSL_VERIFYHOST_OFF</code>.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_curl_options#variable:CTEST_CURL_OPTIONS\" title=\"CTEST_CURL_OPTIONS\" id=\"index-0-variable:CTEST_CURL_OPTIONS\"><code>CTEST_CURL_OPTIONS</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-46-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_CURL_OPTIONS</code>\n</li> </ul> </dd> <dt><code>DropLocation</code></dt> <dd>\n<p class=\"first\">The path on the dashboard server to send the submission.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_drop_location#variable:CTEST_DROP_LOCATION\" title=\"CTEST_DROP_LOCATION\" id=\"index-0-variable:CTEST_DROP_LOCATION\"><code>CTEST_DROP_LOCATION</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-47-module:CTest\"><code>CTest</code></a> module variable: <code>DROP_LOCATION</code> if set, else <code>CTEST_DROP_LOCATION</code>\n</li> </ul> </dd> <dt><code>DropMethod</code></dt> <dd>\n<p class=\"first\">Specify the method by which results should be submitted to the dashboard server. The value may be <code>cp</code>, <code>ftp</code>, <code>http</code>, <code>https</code>, <code>scp</code>, or <code>xmlrpc</code> (if CMake was built with support for it).</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_drop_method#variable:CTEST_DROP_METHOD\" title=\"CTEST_DROP_METHOD\" id=\"index-0-variable:CTEST_DROP_METHOD\"><code>CTEST_DROP_METHOD</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-48-module:CTest\"><code>CTest</code></a> module variable: <code>DROP_METHOD</code> if set, else <code>CTEST_DROP_METHOD</code>\n</li> </ul> </dd> <dt><code>DropSite</code></dt> <dd>\n<p class=\"first\">The dashboard server name (for <code>ftp</code>, <code>http</code>, and <code>https</code>, <code>scp</code>, and <code>xmlrpc</code>).</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_drop_site#variable:CTEST_DROP_SITE\" title=\"CTEST_DROP_SITE\" id=\"index-0-variable:CTEST_DROP_SITE\"><code>CTEST_DROP_SITE</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-49-module:CTest\"><code>CTest</code></a> module variable: <code>DROP_SITE</code> if set, else <code>CTEST_DROP_SITE</code>\n</li> </ul> </dd> <dt><code>DropSitePassword</code></dt> <dd>\n<p class=\"first\">The dashboard server login password, if any (for <code>ftp</code>, <code>http</code>, and <code>https</code>).</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_drop_site_password#variable:CTEST_DROP_SITE_PASSWORD\" title=\"CTEST_DROP_SITE_PASSWORD\" id=\"index-0-variable:CTEST_DROP_SITE_PASSWORD\"><code>CTEST_DROP_SITE_PASSWORD</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-50-module:CTest\"><code>CTest</code></a> module variable: <code>DROP_SITE_PASSWORD</code> if set, else <code>CTEST_DROP_SITE_PASWORD</code>\n</li> </ul> </dd> <dt><code>DropSiteUser</code></dt> <dd>\n<p class=\"first\">The dashboard server login user name, if any (for <code>ftp</code>, <code>http</code>, and <code>https</code>).</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_drop_site_user#variable:CTEST_DROP_SITE_USER\" title=\"CTEST_DROP_SITE_USER\" id=\"index-0-variable:CTEST_DROP_SITE_USER\"><code>CTEST_DROP_SITE_USER</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-51-module:CTest\"><code>CTest</code></a> module variable: <code>DROP_SITE_USER</code> if set, else <code>CTEST_DROP_SITE_USER</code>\n</li> </ul> </dd> <dt><code>IsCDash</code></dt> <dd>\n<p class=\"first\">Specify whether the dashboard server is <a class=\"reference external\" href=\"http://cdash.org/\">CDash</a> or an older dashboard server implementation requiring <code>TriggerSite</code>.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_drop_site_cdash#variable:CTEST_DROP_SITE_CDASH\" title=\"CTEST_DROP_SITE_CDASH\" id=\"index-0-variable:CTEST_DROP_SITE_CDASH\"><code>CTEST_DROP_SITE_CDASH</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-52-module:CTest\"><code>CTest</code></a> module variable: <code>CTEST_DROP_SITE_CDASH</code>\n</li> </ul> </dd> <dt><code>ScpCommand</code></dt> <dd>\n<p class=\"first\"><code>scp</code> command-line tool to use when <code>DropMethod</code> is <code>scp</code>.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_scp_command#variable:CTEST_SCP_COMMAND\" title=\"CTEST_SCP_COMMAND\" id=\"index-0-variable:CTEST_SCP_COMMAND\"><code>CTEST_SCP_COMMAND</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-53-module:CTest\"><code>CTest</code></a> module variable: <code>SCPCOMMAND</code>\n</li> </ul> </dd> <dt><code>Site</code></dt> <dd>\n<p class=\"first\">Describe the dashboard client host site with a short string. (Hostname, domain, etc.)</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_site#variable:CTEST_SITE\" title=\"CTEST_SITE\" id=\"index-0-variable:CTEST_SITE\"><code>CTEST_SITE</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-54-module:CTest\"><code>CTest</code></a> module variable: <code>SITE</code>, initialized by the <a class=\"reference internal\" href=\"../command/site_name#command:site_name\" title=\"site_name\" id=\"index-0-command:site_name\"><code>site_name()</code></a> command</li> </ul> </dd> <dt><code>TriggerSite</code></dt> <dd>\n<p class=\"first\">Legacy option to support older dashboard server implementations. Not used when <code>IsCDash</code> is true.</p> <ul class=\"last simple\"> <li>\n<a class=\"reference internal\" href=\"#ctest-script\">CTest Script</a> variable: <a class=\"reference internal\" href=\"../variable/ctest_trigger_site#variable:CTEST_TRIGGER_SITE\" title=\"CTEST_TRIGGER_SITE\" id=\"index-0-variable:CTEST_TRIGGER_SITE\"><code>CTEST_TRIGGER_SITE</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-55-module:CTest\"><code>CTest</code></a> module variable: <code>TRIGGER_SITE</code> if set, else <code>CTEST_TRIGGER_SITE</code>\n</li> </ul> </dd> </dl>    <h2 id=\"see-also\">See Also</h2> <p>The following resources are available to get help using CMake:</p> <dl class=\"docutils\"> <dt>Home Page</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org\">https://cmake.org</a></p> <p class=\"last\">The primary starting point for learning about CMake.</p> </dd> <dt>Frequently Asked Questions</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/Wiki/CMake_FAQ\">https://cmake.org/Wiki/CMake_FAQ</a></p> <p class=\"last\">A Wiki is provided containing answers to frequently asked questions.</p> </dd> <dt>Online Documentation</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/documentation\">https://cmake.org/documentation</a></p> <p class=\"last\">Links to available documentation may be found on this web page.</p> </dd> <dt>Mailing List</dt> <dd>\n<p class=\"first\"><a class=\"reference external\" href=\"https://cmake.org/mailing-lists\">https://cmake.org/mailing-lists</a></p> <p class=\"last\">For help and discussion about using cmake, a mailing list is provided at <a class=\"reference external\" href=\"mailto:cmake%40cmake.org\">cmake<span>@</span>cmake<span>.</span>org</a>. The list is member-post-only but one may sign up on the CMake web page. Please first read the full documentation at <a class=\"reference external\" href=\"https://cmake.org\">https://cmake.org</a> before posting questions to the list.</p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/ctest.1.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/ctest.1.html</a>\n  </p>\n</div>\n","manual/cmake-generators.7":"<h1 id=\"manual:cmake-generators(7)\">cmake-generators(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#introduction\" id=\"id4\">Introduction</a></li> <li>\n<a class=\"reference internal\" href=\"#cmake-generators\" id=\"id5\">CMake Generators</a><ul> <li>\n<a class=\"reference internal\" href=\"#command-line-build-tool-generators\" id=\"id6\">Command-Line Build Tool Generators</a><ul> <li><a class=\"reference internal\" href=\"#makefile-generators\" id=\"id7\">Makefile Generators</a></li> <li><a class=\"reference internal\" href=\"#ninja-generator\" id=\"id8\">Ninja Generator</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#ide-build-tool-generators\" id=\"id9\">IDE Build Tool Generators</a><ul> <li><a class=\"reference internal\" href=\"#visual-studio-generators\" id=\"id10\">Visual Studio Generators</a></li> <li><a class=\"reference internal\" href=\"#other-generators\" id=\"id11\">Other Generators</a></li> </ul> </li> </ul> </li> <li><a class=\"reference internal\" href=\"#extra-generators\" id=\"id12\">Extra Generators</a></li> </ul>\n   <h2 id=\"introduction\">Introduction</h2> <p>A <em>CMake Generator</em> is responsible for writing the input files for a native build system. Exactly one of the <a class=\"reference internal\" href=\"#cmake-generators\">CMake Generators</a> must be selected for a build tree to determine what native build system is to be used. Optionally one of the <a class=\"reference internal\" href=\"#extra-generators\">Extra Generators</a> may be selected as a variant of some of the <a class=\"reference internal\" href=\"#command-line-build-tool-generators\">Command-Line Build Tool Generators</a> to produce project files for an auxiliary IDE.</p> <p>CMake Generators are platform-specific so each may be available only on certain platforms. The <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> command-line tool <code>--help</code> output lists available generators on the current platform. Use its <code>-G</code> option to specify the generator for a new build tree. The <a class=\"reference internal\" href=\"cmake-gui.1#manual:cmake-gui(1)\" title=\"cmake-gui(1)\" id=\"index-0-manual:cmake-gui(1)\"><code>cmake-gui(1)</code></a> offers interactive selection of a generator when creating a new build tree.</p>   <h2 id=\"cmake-generators\">CMake Generators</h2>  <h3 id=\"command-line-build-tool-generators\">Command-Line Build Tool Generators</h3> <p>These generators support command-line build tools. In order to use them, one must launch CMake from a command-line prompt whose environment is already configured for the chosen compiler and build tool.</p>  <h4 id=\"id1\">Makefile Generators</h4>  <ul id=\"makefile-generators\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Borland%20Makefiles.html\">Borland Makefiles</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/MSYS%20Makefiles.html\">MSYS Makefiles</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/MinGW%20Makefiles.html\">MinGW Makefiles</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/NMake%20Makefiles.html\">NMake Makefiles</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/NMake%20Makefiles%20JOM.html\">NMake Makefiles JOM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Unix%20Makefiles.html\">Unix Makefiles</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Watcom%20WMake.html\">Watcom WMake</a></li> </ul>    <h4 id=\"ninja-generator\">Ninja Generator</h4>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html\">Ninja</a></li> </ul>     <h3 id=\"ide-build-tool-generators\">IDE Build Tool Generators</h3> <p>These generators support Integrated Development Environment (IDE) project files. Since the IDEs configure their own environment one may launch CMake from any environment.</p>  <h4 id=\"id2\">Visual Studio Generators</h4>  <ul id=\"visual-studio-generators\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%206.html\">Visual Studio 6</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%207.html\">Visual Studio 7</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%207%20.NET%202003.html\">Visual Studio 7 .NET 2003</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%208%202005.html\">Visual Studio 8 2005</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%209%202008.html\">Visual Studio 9 2008</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%2010%202010.html\">Visual Studio 10 2010</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%2011%202012.html\">Visual Studio 11 2012</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%2012%202013.html\">Visual Studio 12 2013</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%2014%202015.html\">Visual Studio 14 2015</a></li> </ul>    <h4 id=\"other-generators\">Other Generators</h4>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Green%20Hills%20MULTI.html\">Green Hills MULTI</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Xcode.html\">Xcode</a></li> </ul>      <h2 id=\"extra-generators\">Extra Generators</h2> <p>Some of the <a class=\"reference internal\" href=\"#cmake-generators\">CMake Generators</a> listed in the <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-1-manual:cmake(1)\"><code>cmake(1)</code></a> command-line tool <code>--help</code> output may have variants that specify an extra generator for an auxiliary IDE tool. Such generator names have the form <code>&lt;extra-generator&gt; - &lt;main-generator&gt;</code>. The following extra generators are known to CMake.</p>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/CodeBlocks.html\">CodeBlocks</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/CodeLite.html\">CodeLite</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Eclipse%20CDT4.html\">Eclipse CDT4</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/KDevelop3.html\">KDevelop3</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Kate.html\">Kate</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Sublime%20Text%202.html\">Sublime Text 2</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-generators.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-generators.7.html</a>\n  </p>\n</div>\n","manual/cmake-commands.7":"<h1 id=\"manual:cmake-commands(7)\">cmake-commands(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#normal-commands\" id=\"id3\">Normal Commands</a></li> <li><a class=\"reference internal\" href=\"#deprecated-commands\" id=\"id4\">Deprecated Commands</a></li> <li><a class=\"reference internal\" href=\"#ctest-commands\" id=\"id5\">CTest Commands</a></li> </ul>\n   <h2 id=\"normal-commands\">Normal Commands</h2> <p>These commands may be used freely in CMake projects.</p>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/add_compile_options\">add_compile_options</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/add_custom_command\">add_custom_command</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/add_custom_target\">add_custom_target</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/add_definitions\">add_definitions</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/add_dependencies\">add_dependencies</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/add_executable\">add_executable</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/add_library\">add_library</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/add_subdirectory\">add_subdirectory</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/add_test\">add_test</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/aux_source_directory\">aux_source_directory</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/break\">break</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/build_command\">build_command</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/cmake_host_system_information\">cmake_host_system_information</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/cmake_minimum_required\">cmake_minimum_required</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/cmake_parse_arguments\">cmake_parse_arguments</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/cmake_policy\">cmake_policy</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/configure_file\">configure_file</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/continue\">continue</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/create_test_sourcelist\">create_test_sourcelist</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/define_property\">define_property</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/elseif\">elseif</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/else\">else</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/enable_language\">enable_language</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/enable_testing\">enable_testing</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/endforeach\">endforeach</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/endfunction\">endfunction</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/endif\">endif</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/endmacro\">endmacro</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/endwhile\">endwhile</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/execute_process\">execute_process</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/export\">export</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/file\">file</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/find_file\">find_file</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/find_library\">find_library</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/find_package\">find_package</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/find_path\">find_path</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/find_program\">find_program</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/fltk_wrap_ui\">fltk_wrap_ui</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/foreach\">foreach</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/function\">function</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/get_cmake_property\">get_cmake_property</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/get_directory_property\">get_directory_property</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/get_filename_component\">get_filename_component</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/get_property\">get_property</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/get_source_file_property\">get_source_file_property</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/get_target_property\">get_target_property</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/get_test_property\">get_test_property</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/if\">if</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/include_directories\">include_directories</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/include_external_msproject\">include_external_msproject</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/include_regular_expression\">include_regular_expression</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/include\">include</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/install\">install</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/link_directories\">link_directories</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/link_libraries\">link_libraries</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/list\">list</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/load_cache\">load_cache</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/macro\">macro</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/mark_as_advanced\">mark_as_advanced</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/math\">math</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/message\">message</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/option\">option</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/project\">project</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/qt_wrap_cpp\">qt_wrap_cpp</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/qt_wrap_ui\">qt_wrap_ui</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/remove_definitions\">remove_definitions</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/return\">return</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/separate_arguments\">separate_arguments</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/set_directory_properties\">set_directory_properties</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/set_property\">set_property</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/set\">set</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/set_source_files_properties\">set_source_files_properties</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/set_target_properties\">set_target_properties</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/set_tests_properties\">set_tests_properties</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/site_name\">site_name</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/source_group\">source_group</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/string\">string</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/target_compile_definitions\">target_compile_definitions</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/target_compile_features\">target_compile_features</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/target_compile_options\">target_compile_options</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/target_include_directories\">target_include_directories</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/target_link_libraries\">target_link_libraries</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/target_sources\">target_sources</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/try_compile\">try_compile</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/try_run\">try_run</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/unset\">unset</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/variable_watch\">variable_watch</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/while\">while</a></li> </ul>    <h2 id=\"deprecated-commands\">Deprecated Commands</h2> <p>These commands are available only for compatibility with older versions of CMake. Do not use them in new code.</p>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/build_name\">build_name</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/exec_program\">exec_program</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/export_library_dependencies\">export_library_dependencies</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/install_files\">install_files</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/install_programs\">install_programs</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/install_targets\">install_targets</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/load_command\">load_command</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/make_directory\">make_directory</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/output_required_files\">output_required_files</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/remove\">remove</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/subdir_depends\">subdir_depends</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/subdirs\">subdirs</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/use_mangled_mesa\">use_mangled_mesa</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/utility_source\">utility_source</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/variable_requires\">variable_requires</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/write_file\">write_file</a></li> </ul>    <h2 id=\"id1\">CTest Commands</h2> <p id=\"ctest-commands\">These commands are available only in ctest scripts.</p>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_build\">ctest_build</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_configure\">ctest_configure</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_coverage\">ctest_coverage</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_empty_binary_directory\">ctest_empty_binary_directory</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_memcheck\">ctest_memcheck</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_read_custom_files\">ctest_read_custom_files</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_run_script\">ctest_run_script</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_sleep\">ctest_sleep</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_start\">ctest_start</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_submit\">ctest_submit</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_test\">ctest_test</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_update\">ctest_update</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../command/ctest_upload\">ctest_upload</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-commands.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-commands.7.html</a>\n  </p>\n</div>\n","manual/cmake-qt.7":"<h1 id=\"manual:cmake-qt(7)\">cmake-qt(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#introduction\" id=\"id2\">Introduction</a></li> <li>\n<a class=\"reference internal\" href=\"#qt-build-tools\" id=\"id3\">Qt Build Tools</a><ul> <li><a class=\"reference internal\" href=\"#automoc\" id=\"id4\">AUTOMOC</a></li> <li><a class=\"reference internal\" href=\"#autouic\" id=\"id5\">AUTOUIC</a></li> <li><a class=\"reference internal\" href=\"#autorcc\" id=\"id6\">AUTORCC</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#qtmain-lib-on-windows\" id=\"id7\">qtmain.lib on Windows</a></li> </ul>\n   <h2 id=\"introduction\">Introduction</h2> <p>CMake can find and use Qt 4 and Qt 5 libraries. The Qt 4 libraries are found by the <a class=\"reference internal\" href=\"../module/findqt4#module:FindQt4\" title=\"FindQt4\" id=\"index-0-module:FindQt4\"><code>FindQt4</code></a> find-module shipped with CMake, whereas the Qt 5 libraries are found using “Config-file Packages” shipped with Qt 5. See <a class=\"reference internal\" href=\"cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-0-manual:cmake-packages(7)\"><code>cmake-packages(7)</code></a> for more information about CMake packages, and see <a class=\"reference external\" href=\"http://qt-project.org/doc/qt-5/cmake-manual.html\">the Qt cmake manual</a> for your Qt version.</p> <p>Qt 4 and Qt 5 may be used together in the same <a class=\"reference internal\" href=\"cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>CMake buildsystem</code></a>:</p> <pre data-language=\"cmake\">cmake_minimum_required(VERSION 3.0.0 FATAL_ERROR)\n\nproject(Qt4And5)\n\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n\nfind_package(Qt5Widgets REQUIRED)\nadd_executable(publisher publisher.cpp)\ntarget_link_libraries(publisher Qt5::Widgets Qt5::DBus)\n\nfind_package(Qt4 REQUIRED)\nadd_executable(subscriber subscriber.cpp)\ntarget_link_libraries(subscriber Qt4::QtGui Qt4::QtDBus)\n</pre> <p>A CMake target may not link to both Qt 4 and Qt 5. A diagnostic is issued if this is attempted or results from transitive target dependency evaluation.</p>   <h2 id=\"qt-build-tools\">Qt Build Tools</h2> <p>Qt relies on some bundled tools for code generation, such as <code>moc</code> for meta-object code generation, <code>uic</code> for widget layout and population, and <code>rcc</code> for virtual filesystem content generation. These tools may be automatically invoked by <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> if the appropriate conditions are met. The automatic tool invocation may be used with both Qt 4 and Qt 5.</p> <p>The tools are executed as part of a synthesized custom target generated by CMake. Target dependencies may be added to that custom target by adding them to the <a class=\"reference internal\" href=\"../prop_tgt/autogen_target_depends#prop_tgt:AUTOGEN_TARGET_DEPENDS\" title=\"AUTOGEN_TARGET_DEPENDS\" id=\"index-0-prop_tgt:AUTOGEN_TARGET_DEPENDS\"><code>AUTOGEN_TARGET_DEPENDS</code></a> target property.</p>  <h3 id=\"automoc\">AUTOMOC</h3> <p>The <a class=\"reference internal\" href=\"../prop_tgt/automoc#prop_tgt:AUTOMOC\" title=\"AUTOMOC\" id=\"index-0-prop_tgt:AUTOMOC\"><code>AUTOMOC</code></a> target property controls whether <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-1-manual:cmake(1)\"><code>cmake(1)</code></a> inspects the C++ files in the target to determine if they require <code>moc</code> to be run, and to create rules to execute <code>moc</code> at the appropriate time.</p> <p>If a <code>Q_OBJECT</code> or <code>Q_GADGET</code> macro is found in a header file, <code>moc</code> will be run on the file. The result will be put into a file named according to <code>moc_&lt;basename&gt;.cpp</code>. If the macro is found in a C++ implementation file, the moc output will be put into a file named according to <code>&lt;basename&gt;.moc</code>, following the Qt conventions. The <code>moc file</code> may be included by the user in the C++ implementation file with a preprocessor <code>#include</code>. If it is not so included, it will be added to a separate file which is compiled into the target.</p> <p>The <code>moc</code> command line will consume the <a class=\"reference internal\" href=\"../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_tgt:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a> target properties from the target it is being invoked for, and for the appropriate build configuration.</p> <p>Generated <code>moc_*.cpp</code> and <code>*.moc</code> files are placed in the build directory so it is convenient to set the <a class=\"reference internal\" href=\"../variable/cmake_include_current_dir#variable:CMAKE_INCLUDE_CURRENT_DIR\" title=\"CMAKE_INCLUDE_CURRENT_DIR\" id=\"index-0-variable:CMAKE_INCLUDE_CURRENT_DIR\"><code>CMAKE_INCLUDE_CURRENT_DIR</code></a> variable. The <a class=\"reference internal\" href=\"../prop_tgt/automoc#prop_tgt:AUTOMOC\" title=\"AUTOMOC\" id=\"index-1-prop_tgt:AUTOMOC\"><code>AUTOMOC</code></a> target property may be pre-set for all following targets by setting the <a class=\"reference internal\" href=\"../variable/cmake_automoc#variable:CMAKE_AUTOMOC\" title=\"CMAKE_AUTOMOC\" id=\"index-0-variable:CMAKE_AUTOMOC\"><code>CMAKE_AUTOMOC</code></a> variable. The <a class=\"reference internal\" href=\"../prop_tgt/automoc_moc_options#prop_tgt:AUTOMOC_MOC_OPTIONS\" title=\"AUTOMOC_MOC_OPTIONS\" id=\"index-0-prop_tgt:AUTOMOC_MOC_OPTIONS\"><code>AUTOMOC_MOC_OPTIONS</code></a> target property may be populated to set options to pass to <code>moc</code>. The <a class=\"reference internal\" href=\"../variable/cmake_automoc_moc_options#variable:CMAKE_AUTOMOC_MOC_OPTIONS\" title=\"CMAKE_AUTOMOC_MOC_OPTIONS\" id=\"index-0-variable:CMAKE_AUTOMOC_MOC_OPTIONS\"><code>CMAKE_AUTOMOC_MOC_OPTIONS</code></a> variable may be populated to pre-set the options for all following targets.</p>   <h3 id=\"qt-autouic\">AUTOUIC</h3> <p id=\"autouic\">The <a class=\"reference internal\" href=\"../prop_tgt/autouic#prop_tgt:AUTOUIC\" title=\"AUTOUIC\" id=\"index-0-prop_tgt:AUTOUIC\"><code>AUTOUIC</code></a> target property controls whether <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-2-manual:cmake(1)\"><code>cmake(1)</code></a> inspects the C++ files in the target to determine if they require <code>uic</code> to be run, and to create rules to execute <code>uic</code> at the appropriate time.</p> <p>If a preprocessor <code>#include</code> directive is found which matches <code>ui_&lt;basename&gt;.h</code>, and a <code>&lt;basename&gt;.ui</code> file exists, then <code>uic</code> will be executed to generate the appropriate file.</p> <p>Generated <code>ui_*.h</code> files are placed in the build directory so it is convenient to set the <a class=\"reference internal\" href=\"../variable/cmake_include_current_dir#variable:CMAKE_INCLUDE_CURRENT_DIR\" title=\"CMAKE_INCLUDE_CURRENT_DIR\" id=\"index-1-variable:CMAKE_INCLUDE_CURRENT_DIR\"><code>CMAKE_INCLUDE_CURRENT_DIR</code></a> variable. The <a class=\"reference internal\" href=\"../prop_tgt/autouic#prop_tgt:AUTOUIC\" title=\"AUTOUIC\" id=\"index-1-prop_tgt:AUTOUIC\"><code>AUTOUIC</code></a> target property may be pre-set for all following targets by setting the <a class=\"reference internal\" href=\"../variable/cmake_autouic#variable:CMAKE_AUTOUIC\" title=\"CMAKE_AUTOUIC\" id=\"index-0-variable:CMAKE_AUTOUIC\"><code>CMAKE_AUTOUIC</code></a> variable. The <a class=\"reference internal\" href=\"../prop_tgt/autouic_options#prop_tgt:AUTOUIC_OPTIONS\" title=\"AUTOUIC_OPTIONS\" id=\"index-0-prop_tgt:AUTOUIC_OPTIONS\"><code>AUTOUIC_OPTIONS</code></a> target property may be populated to set options to pass to <code>uic</code>. The <a class=\"reference internal\" href=\"../variable/cmake_autouic_options#variable:CMAKE_AUTOUIC_OPTIONS\" title=\"CMAKE_AUTOUIC_OPTIONS\" id=\"index-0-variable:CMAKE_AUTOUIC_OPTIONS\"><code>CMAKE_AUTOUIC_OPTIONS</code></a> variable may be populated to pre-set the options for all following targets. The <a class=\"reference internal\" href=\"../prop_sf/autouic_options#prop_sf:AUTOUIC_OPTIONS\" title=\"AUTOUIC_OPTIONS\" id=\"index-0-prop_sf:AUTOUIC_OPTIONS\"><code>AUTOUIC_OPTIONS</code></a> source file property may be set on the <code>&lt;basename&gt;.ui</code> file to set particular options for the file. This overrides options from the <a class=\"reference internal\" href=\"../prop_tgt/autouic_options#prop_tgt:AUTOUIC_OPTIONS\" title=\"AUTOUIC_OPTIONS\" id=\"index-1-prop_tgt:AUTOUIC_OPTIONS\"><code>AUTOUIC_OPTIONS</code></a> target property.</p> <p>A target may populate the <a class=\"reference internal\" href=\"../prop_tgt/interface_autouic_options#prop_tgt:INTERFACE_AUTOUIC_OPTIONS\" title=\"INTERFACE_AUTOUIC_OPTIONS\" id=\"index-0-prop_tgt:INTERFACE_AUTOUIC_OPTIONS\"><code>INTERFACE_AUTOUIC_OPTIONS</code></a> target property with options that should be used when invoking <code>uic</code>. This must be consistent with the <a class=\"reference internal\" href=\"../prop_tgt/autouic_options#prop_tgt:AUTOUIC_OPTIONS\" title=\"AUTOUIC_OPTIONS\" id=\"index-2-prop_tgt:AUTOUIC_OPTIONS\"><code>AUTOUIC_OPTIONS</code></a> target property content of the depender target. The <a class=\"reference internal\" href=\"../variable/cmake_debug_target_properties#variable:CMAKE_DEBUG_TARGET_PROPERTIES\" title=\"CMAKE_DEBUG_TARGET_PROPERTIES\" id=\"index-0-variable:CMAKE_DEBUG_TARGET_PROPERTIES\"><code>CMAKE_DEBUG_TARGET_PROPERTIES</code></a> variable may be used to track the origin target of such <a class=\"reference internal\" href=\"../prop_tgt/interface_autouic_options#prop_tgt:INTERFACE_AUTOUIC_OPTIONS\" title=\"INTERFACE_AUTOUIC_OPTIONS\" id=\"index-1-prop_tgt:INTERFACE_AUTOUIC_OPTIONS\"><code>INTERFACE_AUTOUIC_OPTIONS</code></a>. This means that a library which provides an alternative translation system for Qt may specify options which should be used when running <code>uic</code>:</p> <pre data-language=\"cmake\">add_library(KI18n klocalizedstring.cpp)\ntarget_link_libraries(KI18n Qt5::Core)\n\n# KI18n uses the tr2i18n() function instead of tr().  That function is\n# declared in the klocalizedstring.h header.\nset(autouic_options\n  -tr tr2i18n\n  -include klocalizedstring.h\n)\n\nset_property(TARGET KI18n APPEND PROPERTY\n  INTERFACE_AUTOUIC_OPTIONS ${autouic_options}\n)\n</pre> <p>A consuming project linking to the target exported from upstream automatically uses appropriate options when <code>uic</code> is run by <a class=\"reference internal\" href=\"../prop_tgt/autouic#prop_tgt:AUTOUIC\" title=\"AUTOUIC\" id=\"index-2-prop_tgt:AUTOUIC\"><code>AUTOUIC</code></a>, as a result of linking with the <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target:</p> <pre data-language=\"cmake\">set(CMAKE_AUTOUIC ON)\n# Uses a libwidget.ui file:\nadd_library(LibWidget libwidget.cpp)\ntarget_link_libraries(LibWidget\n  KF5::KI18n\n  Qt5::Widgets\n)\n</pre>   <h3 id=\"qt-autorcc\">AUTORCC</h3> <p id=\"autorcc\">The <a class=\"reference internal\" href=\"../prop_tgt/autorcc#prop_tgt:AUTORCC\" title=\"AUTORCC\" id=\"index-0-prop_tgt:AUTORCC\"><code>AUTORCC</code></a> target property controls whether <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-3-manual:cmake(1)\"><code>cmake(1)</code></a> creates rules to execute <code>rcc</code> at the appropriate time on source files which have the suffix <code>.qrc</code>.</p> <pre data-language=\"cmake\">add_executable(myexe main.cpp resource_file.qrc)\n</pre> <p>The <a class=\"reference internal\" href=\"../prop_tgt/autorcc#prop_tgt:AUTORCC\" title=\"AUTORCC\" id=\"index-1-prop_tgt:AUTORCC\"><code>AUTORCC</code></a> target property may be pre-set for all following targets by setting the <a class=\"reference internal\" href=\"../variable/cmake_autorcc#variable:CMAKE_AUTORCC\" title=\"CMAKE_AUTORCC\" id=\"index-0-variable:CMAKE_AUTORCC\"><code>CMAKE_AUTORCC</code></a> variable. The <a class=\"reference internal\" href=\"../prop_tgt/autorcc_options#prop_tgt:AUTORCC_OPTIONS\" title=\"AUTORCC_OPTIONS\" id=\"index-0-prop_tgt:AUTORCC_OPTIONS\"><code>AUTORCC_OPTIONS</code></a> target property may be populated to set options to pass to <code>rcc</code>. The <a class=\"reference internal\" href=\"../variable/cmake_autorcc_options#variable:CMAKE_AUTORCC_OPTIONS\" title=\"CMAKE_AUTORCC_OPTIONS\" id=\"index-0-variable:CMAKE_AUTORCC_OPTIONS\"><code>CMAKE_AUTORCC_OPTIONS</code></a> variable may be populated to pre-set the options for all following targets. The <a class=\"reference internal\" href=\"../prop_sf/autorcc_options#prop_sf:AUTORCC_OPTIONS\" title=\"AUTORCC_OPTIONS\" id=\"index-0-prop_sf:AUTORCC_OPTIONS\"><code>AUTORCC_OPTIONS</code></a> source file property may be set on the <code>&lt;name&gt;.qrc</code> file to set particular options for the file. This overrides options from the <a class=\"reference internal\" href=\"../prop_tgt/autorcc_options#prop_tgt:AUTORCC_OPTIONS\" title=\"AUTORCC_OPTIONS\" id=\"index-1-prop_tgt:AUTORCC_OPTIONS\"><code>AUTORCC_OPTIONS</code></a> target property.</p>    <h2 id=\"qtmain-lib-on-windows\">qtmain.lib on Windows</h2> <p>The Qt 4 and 5 <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-1-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets for the QtGui libraries specify that the qtmain.lib static library shipped with Qt will be linked by all dependent executables which have the <a class=\"reference internal\" href=\"../prop_tgt/win32_executable#prop_tgt:WIN32_EXECUTABLE\" title=\"WIN32_EXECUTABLE\" id=\"index-0-prop_tgt:WIN32_EXECUTABLE\"><code>WIN32_EXECUTABLE</code></a> enabled.</p> <p>To disable this behavior, enable the <code>Qt5_NO_LINK_QTMAIN</code> target property for Qt 5 based targets or <code>QT4_NO_LINK_QTMAIN</code> target property for Qt 4 based targets.</p> <pre data-language=\"cmake\">add_executable(myexe WIN32 main.cpp)\ntarget_link_libraries(myexe Qt4::QtGui)\n\nadd_executable(myexe_no_qtmain WIN32 main_no_qtmain.cpp)\nset_property(TARGET main_no_qtmain PROPERTY QT4_NO_LINK_QTMAIN ON)\ntarget_link_libraries(main_no_qtmain Qt4::QtGui)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-qt.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-qt.7.html</a>\n  </p>\n</div>\n","command/set":"<h1 id=\"command:set\">set</h1> <p id=\"set\">Set a normal, cache, or environment variable to a given value. See the <a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-variables\"><span>cmake-language(7) variables</span></a> documentation for the scopes and interaction of normal variables and cache entries.</p> <p>Signatures of this command that specify a <code>&lt;value&gt;...</code> placeholder expect zero or more arguments. Multiple arguments will be joined as a <a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> to form the actual variable value to be set. Zero arguments will cause normal variables to be unset. See the <a class=\"reference internal\" href=\"unset#command:unset\" title=\"unset\" id=\"index-0-command:unset\"><code>unset()</code></a> command to unset variables explicitly.</p>  <h2 id=\"set-normal-variable\">Set Normal Variable</h2> <pre data-language=\"python\">set(&lt;variable&gt; &lt;value&gt;... [PARENT_SCOPE])\n</pre> <p>Set the given <code>&lt;variable&gt;</code> in the current function or directory scope.</p> <p>If the <code>PARENT_SCOPE</code> option is given the variable will be set in the scope above the current scope. Each new directory or function creates a new scope. This command will set the value of a variable into the parent directory or calling function (whichever is applicable to the case at hand).</p>   <h2 id=\"set-cache-entry\">Set Cache Entry</h2> <pre data-language=\"python\">set(&lt;variable&gt; &lt;value&gt;... CACHE &lt;type&gt; &lt;docstring&gt; [FORCE])\n</pre> <p>Set the given cache <code>&lt;variable&gt;</code> (cache entry). Since cache entries are meant to provide user-settable values this does not overwrite existing cache entries by default. Use the <code>FORCE</code> option to overwrite existing entries.</p> <p>The <code>&lt;type&gt;</code> must be specified as one of:</p> <dl class=\"docutils\"> <dt><code>BOOL</code></dt> <dd>Boolean <code>ON/OFF</code> value. <a class=\"reference internal\" href=\"../manual/cmake-gui.1#manual:cmake-gui(1)\" title=\"cmake-gui(1)\" id=\"index-0-manual:cmake-gui(1)\"><code>cmake-gui(1)</code></a> offers a checkbox.</dd> <dt><code>FILEPATH</code></dt> <dd>Path to a file on disk. <a class=\"reference internal\" href=\"../manual/cmake-gui.1#manual:cmake-gui(1)\" title=\"cmake-gui(1)\" id=\"index-1-manual:cmake-gui(1)\"><code>cmake-gui(1)</code></a> offers a file dialog.</dd> <dt><code>PATH</code></dt> <dd>Path to a directory on disk. <a class=\"reference internal\" href=\"../manual/cmake-gui.1#manual:cmake-gui(1)\" title=\"cmake-gui(1)\" id=\"index-2-manual:cmake-gui(1)\"><code>cmake-gui(1)</code></a> offers a file dialog.</dd> <dt><code>STRING</code></dt> <dd>A line of text. <a class=\"reference internal\" href=\"../manual/cmake-gui.1#manual:cmake-gui(1)\" title=\"cmake-gui(1)\" id=\"index-3-manual:cmake-gui(1)\"><code>cmake-gui(1)</code></a> offers a text field or a drop-down selection if the <a class=\"reference internal\" href=\"../prop_cache/strings#prop_cache:STRINGS\" title=\"STRINGS\" id=\"index-0-prop_cache:STRINGS\"><code>STRINGS</code></a> cache entry property is set.</dd> <dt><code>INTERNAL</code></dt> <dd>A line of text. <a class=\"reference internal\" href=\"../manual/cmake-gui.1#manual:cmake-gui(1)\" title=\"cmake-gui(1)\" id=\"index-4-manual:cmake-gui(1)\"><code>cmake-gui(1)</code></a> does not show internal entries. They may be used to store variables persistently across runs. Use of this type implies <code>FORCE</code>.</dd> </dl> <p>The <code>&lt;docstring&gt;</code> must be specified as a line of text providing a quick summary of the option for presentation to <a class=\"reference internal\" href=\"../manual/cmake-gui.1#manual:cmake-gui(1)\" title=\"cmake-gui(1)\" id=\"index-5-manual:cmake-gui(1)\"><code>cmake-gui(1)</code></a> users.</p> <p>If the cache entry does not exist prior to the call or the <code>FORCE</code> option is given then the cache entry will be set to the given value. Furthermore, any normal variable binding in the current scope will be removed to expose the newly cached value to any immediately following evaluation.</p> <p>It is possible for the cache entry to exist prior to the call but have no type set if it was created on the <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> command line by a user through the <code>-D&lt;var&gt;=&lt;value&gt;</code> option without specifying a type. In this case the <code>set</code> command will add the type. Furthermore, if the <code>&lt;type&gt;</code> is <code>PATH</code> or <code>FILEPATH</code> and the <code>&lt;value&gt;</code> provided on the command line is a relative path, then the <code>set</code> command will treat the path as relative to the current working directory and convert it to an absolute path.</p>   <h2 id=\"set-environment-variable\">Set Environment Variable</h2> <pre data-language=\"python\">set(ENV{&lt;variable&gt;} &lt;value&gt;...)\n</pre> <p>Set the current process environment <code>&lt;variable&gt;</code> to the given value.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/set.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/set.html</a>\n  </p>\n</div>\n","command/cmake_policy":"<h1 id=\"command:cmake_policy\">cmake_policy</h1> <p id=\"cmake-policy\">Manage CMake Policy settings. See the <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>cmake-policies(7)</code></a> manual for defined policies.</p> <p>As CMake evolves it is sometimes necessary to change existing behavior in order to fix bugs or improve implementations of existing features. The CMake Policy mechanism is designed to help keep existing projects building as new versions of CMake introduce changes in behavior. Each new policy (behavioral change) is given an identifier of the form <code>CMP&lt;NNNN&gt;</code> where <code>&lt;NNNN&gt;</code> is an integer index. Documentation associated with each policy describes the <code>OLD</code> and <code>NEW</code> behavior and the reason the policy was introduced. Projects may set each policy to select the desired behavior. When CMake needs to know which behavior to use it checks for a setting specified by the project. If no setting is available the <code>OLD</code> behavior is assumed and a warning is produced requesting that the policy be set.</p>  <h2 id=\"setting-policies-by-cmake-version\">Setting Policies by CMake Version</h2> <p>The <code>cmake_policy</code> command is used to set policies to <code>OLD</code> or <code>NEW</code> behavior. While setting policies individually is supported, we encourage projects to set policies based on CMake versions:</p> <pre data-language=\"python\">cmake_policy(VERSION major.minor[.patch[.tweak]])\n</pre> <p>Specify that the current CMake code is written for the given version of CMake. All policies introduced in the specified version or earlier will be set to use <code>NEW</code> behavior. All policies introduced after the specified version will be unset (unless the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;\" id=\"index-0-variable:CMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;\"><code>CMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;</code></a> variable sets a default). This effectively requests behavior preferred as of a given CMake version and tells newer CMake versions to warn about their new policies. The policy version specified must be at least 2.4 or the command will report an error.</p> <p>Note that the <a class=\"reference internal\" href=\"cmake_minimum_required#command:cmake_minimum_required\" title=\"cmake_minimum_required\" id=\"index-0-command:cmake_minimum_required\"><code>cmake_minimum_required(VERSION)</code></a> command implicitly calls <code>cmake_policy(VERSION)</code> too.</p>   <h2 id=\"setting-policies-explicitly\">Setting Policies Explicitly</h2> <pre data-language=\"python\">cmake_policy(SET CMP&lt;NNNN&gt; NEW)\ncmake_policy(SET CMP&lt;NNNN&gt; OLD)\n</pre> <p>Tell CMake to use the <code>OLD</code> or <code>NEW</code> behavior for a given policy. Projects depending on the old behavior of a given policy may silence a policy warning by setting the policy state to <code>OLD</code>. Alternatively one may fix the project to work with the new behavior and set the policy state to <code>NEW</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-1-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div>   <h2 id=\"checking-policy-settings\">Checking Policy Settings</h2> <pre data-language=\"python\">cmake_policy(GET CMP&lt;NNNN&gt; &lt;variable&gt;)\n</pre> <p>Check whether a given policy is set to <code>OLD</code> or <code>NEW</code> behavior. The output <code>&lt;variable&gt;</code> value will be <code>OLD</code> or <code>NEW</code> if the policy is set, and empty otherwise.</p>   <h2 id=\"cmake-policy-stack\">CMake Policy Stack</h2> <p>CMake keeps policy settings on a stack, so changes made by the cmake_policy command affect only the top of the stack. A new entry on the policy stack is managed automatically for each subdirectory to protect its parents and siblings. CMake also manages a new entry for scripts loaded by <a class=\"reference internal\" href=\"include#command:include\" title=\"include\" id=\"index-0-command:include\"><code>include()</code></a> and <a class=\"reference internal\" href=\"find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> commands except when invoked with the <code>NO_POLICY_SCOPE</code> option (see also policy <a class=\"reference internal\" href=\"../policy/cmp0011#policy:CMP0011\" title=\"CMP0011\" id=\"index-0-policy:CMP0011\"><code>CMP0011</code></a>). The <code>cmake_policy</code> command provides an interface to manage custom entries on the policy stack:</p> <pre data-language=\"python\">cmake_policy(PUSH)\ncmake_policy(POP)\n</pre> <p>Each <code>PUSH</code> must have a matching <code>POP</code> to erase any changes. This is useful to make temporary changes to policy settings. Calls to the <a class=\"reference internal\" href=\"cmake_minimum_required#command:cmake_minimum_required\" title=\"cmake_minimum_required\" id=\"index-1-command:cmake_minimum_required\"><code>cmake_minimum_required(VERSION)</code></a>, <code>cmake_policy(VERSION)</code>, or <code>cmake_policy(SET)</code> commands influence only the current top of the policy stack.</p> <p>Commands created by the <a class=\"reference internal\" href=\"function#command:function\" title=\"function\" id=\"index-0-command:function\"><code>function()</code></a> and <a class=\"reference internal\" href=\"macro#command:macro\" title=\"macro\" id=\"index-0-command:macro\"><code>macro()</code></a> commands record policy settings when they are created and use the pre-record policies when they are invoked. If the function or macro implementation sets policies, the changes automatically propagate up through callers until they reach the closest nested policy stack entry.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/cmake_policy.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/cmake_policy.html</a>\n  </p>\n</div>\n","command/cmake_minimum_required":"<h1 id=\"command:cmake_minimum_required\">cmake_minimum_required</h1> <p id=\"cmake-minimum-required\">Set the minimum required version of cmake for a project.</p> <pre data-language=\"python\">cmake_minimum_required(VERSION major.minor[.patch[.tweak]]\n                       [FATAL_ERROR])\n</pre> <p>If the current version of CMake is lower than that required it will stop processing the project and report an error. When a version higher than 2.4 is specified the command implicitly invokes</p> <pre data-language=\"python\">cmake_policy(VERSION major[.minor[.patch[.tweak]]])\n</pre> <p>which sets the cmake policy version level to the version specified. When version 2.4 or lower is given the command implicitly invokes</p> <pre data-language=\"python\">cmake_policy(VERSION 2.4)\n</pre> <p>which enables compatibility features for CMake 2.4 and lower.</p> <p>The <code>FATAL_ERROR</code> option is accepted but ignored by CMake 2.6 and higher. It should be specified so CMake versions 2.4 and lower fail with an error instead of just a warning.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>Call the <code>cmake_minimum_required()</code> command at the beginning of the top-level <code>CMakeLists.txt</code> file even before calling the <a class=\"reference internal\" href=\"project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command. It is important to establish version and policy settings before invoking other commands whose behavior they may affect. See also policy <a class=\"reference internal\" href=\"../policy/cmp0000#policy:CMP0000\" title=\"CMP0000\" id=\"index-0-policy:CMP0000\"><code>CMP0000</code></a>.</p> <p class=\"last\">Calling <code>cmake_minimum_required()</code> inside a <a class=\"reference internal\" href=\"function#command:function\" title=\"function\" id=\"index-0-command:function\"><code>function()</code></a> limits some effects to the function scope when invoked. Such calls should not be made with the intention of having global effects.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/cmake_minimum_required.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/cmake_minimum_required.html</a>\n  </p>\n</div>\n","command/include":"<h1 id=\"command:include\">include</h1> <p id=\"include\">Load and run CMake code from a file or module.</p> <pre data-language=\"python\">include(&lt;file|module&gt; [OPTIONAL] [RESULT_VARIABLE &lt;VAR&gt;]\n                      [NO_POLICY_SCOPE])\n</pre> <p>Load and run CMake code from the file given. Variable reads and writes access the scope of the caller (dynamic scoping). If <code>OPTIONAL</code> is present, then no error is raised if the file does not exist. If <code>RESULT_VARIABLE</code> is given the variable will be set to the full filename which has been included or NOTFOUND if it failed.</p> <p>If a module is specified instead of a file, the file with name &lt;modulename&gt;.cmake is searched first in <a class=\"reference internal\" href=\"../variable/cmake_module_path#variable:CMAKE_MODULE_PATH\" title=\"CMAKE_MODULE_PATH\" id=\"index-0-variable:CMAKE_MODULE_PATH\"><code>CMAKE_MODULE_PATH</code></a>, then in the CMake module directory. There is one exception to this: if the file which calls <code>include()</code> is located itself in the CMake module directory, then first the CMake module directory is searched and <a class=\"reference internal\" href=\"../variable/cmake_module_path#variable:CMAKE_MODULE_PATH\" title=\"CMAKE_MODULE_PATH\" id=\"index-1-variable:CMAKE_MODULE_PATH\"><code>CMAKE_MODULE_PATH</code></a> afterwards. See also policy <a class=\"reference internal\" href=\"../policy/cmp0017#policy:CMP0017\" title=\"CMP0017\" id=\"index-0-policy:CMP0017\"><code>CMP0017</code></a>.</p> <p>See the <a class=\"reference internal\" href=\"cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command documentation for discussion of the <code>NO_POLICY_SCOPE</code> option.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/include.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/include.html</a>\n  </p>\n</div>\n","manual/cmake-compile-features.7":"<h1 id=\"manual:cmake-compile-features(7)\">cmake-compile-features(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#introduction\" id=\"id2\">Introduction</a></li> <li><a class=\"reference internal\" href=\"#compile-feature-requirements\" id=\"id3\">Compile Feature Requirements</a></li> <li><a class=\"reference internal\" href=\"#optional-compile-features\" id=\"id4\">Optional Compile Features</a></li> <li><a class=\"reference internal\" href=\"#conditional-compilation-options\" id=\"id5\">Conditional Compilation Options</a></li> <li><a class=\"reference internal\" href=\"#supported-compilers\" id=\"id6\">Supported Compilers</a></li> </ul>\n   <h2 id=\"introduction\">Introduction</h2> <p>Project source code may depend on, or be conditional on, the availability of certain features of the compiler. There are three use-cases which arise: <a class=\"reference internal\" href=\"#compile-feature-requirements\">Compile Feature Requirements</a>, <a class=\"reference internal\" href=\"#optional-compile-features\">Optional Compile Features</a> and <a class=\"reference internal\" href=\"#conditional-compilation-options\">Conditional Compilation Options</a>.</p> <p>While features are typically specified in programming language standards, CMake provides a primary user interface based on granular handling of the features, not the language standard that introduced the feature.</p> <p>The <a class=\"reference internal\" href=\"../prop_gbl/cmake_c_known_features#prop_gbl:CMAKE_C_KNOWN_FEATURES\" title=\"CMAKE_C_KNOWN_FEATURES\" id=\"index-0-prop_gbl:CMAKE_C_KNOWN_FEATURES\"><code>CMAKE_C_KNOWN_FEATURES</code></a> and <a class=\"reference internal\" href=\"../prop_gbl/cmake_cxx_known_features#prop_gbl:CMAKE_CXX_KNOWN_FEATURES\" title=\"CMAKE_CXX_KNOWN_FEATURES\" id=\"index-0-prop_gbl:CMAKE_CXX_KNOWN_FEATURES\"><code>CMAKE_CXX_KNOWN_FEATURES</code></a> global properties contain all the features known to CMake, regardless of compiler support for the feature. The <a class=\"reference internal\" href=\"../variable/cmake_c_compile_features#variable:CMAKE_C_COMPILE_FEATURES\" title=\"CMAKE_C_COMPILE_FEATURES\" id=\"index-0-variable:CMAKE_C_COMPILE_FEATURES\"><code>CMAKE_C_COMPILE_FEATURES</code></a> and <a class=\"reference internal\" href=\"../variable/cmake_cxx_compile_features#variable:CMAKE_CXX_COMPILE_FEATURES\" title=\"CMAKE_CXX_COMPILE_FEATURES\" id=\"index-0-variable:CMAKE_CXX_COMPILE_FEATURES\"><code>CMAKE_CXX_COMPILE_FEATURES</code></a> variables contain all features CMake knows are known to the compiler, regardless of language standard or compile flags needed to use them.</p> <p>Features known to CMake are named mostly following the same convention as the Clang feature test macros. The are some exceptions, such as CMake using <code>cxx_final</code> and <code>cxx_override</code> instead of the single <code>cxx_override_control</code> used by Clang.</p>   <h2 id=\"compile-feature-requirements\">Compile Feature Requirements</h2> <p>Compile feature requirements may be specified with the <a class=\"reference internal\" href=\"../command/target_compile_features#command:target_compile_features\" title=\"target_compile_features\" id=\"index-0-command:target_compile_features\"><code>target_compile_features()</code></a> command. For example, if a target must be compiled with compiler support for the <a class=\"reference internal\" href=\"../prop_gbl/cmake_cxx_known_features#prop_gbl:CMAKE_CXX_KNOWN_FEATURES\" title=\"CMAKE_CXX_KNOWN_FEATURES\" id=\"index-1-prop_gbl:CMAKE_CXX_KNOWN_FEATURES\"><code>cxx_constexpr</code></a> feature:</p> <pre data-language=\"cmake\">add_library(mylib requires_constexpr.cpp)\ntarget_compile_features(mylib PRIVATE cxx_constexpr)\n</pre> <p>In processing the requirement for the <code>cxx_constexpr</code> feature, <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> will ensure that the in-use C++ compiler is capable of the feature, and will add any necessary flags such as <code>-std=gnu++11</code> to the compile lines of C++ files in the <code>mylib</code> target. A <code>FATAL_ERROR</code> is issued if the compiler is not capable of the feature.</p> <p>The exact compile flags and language standard are deliberately not part of the user interface for this use-case. CMake will compute the appropriate compile flags to use by considering the features specified for each target.</p> <p>Such compile flags are added even if the compiler supports the particular feature without the flag. For example, the GNU compiler supports variadic templates (with a warning) even if <code>-std=gnu++98</code> is used. CMake adds the <code>-std=gnu++11</code> flag if <code>cxx_variadic_templates</code> is specified as a requirement.</p> <p>In the above example, <code>mylib</code> requires <code>cxx_constexpr</code> when it is built itself, but consumers of <code>mylib</code> are not required to use a compiler which supports <code>cxx_constexpr</code>. If the interface of <code>mylib</code> does require the <code>cxx_constexpr</code> feature (or any other known feature), that may be specified with the <code>PUBLIC</code> or <code>INTERFACE</code> signatures of <a class=\"reference internal\" href=\"../command/target_compile_features#command:target_compile_features\" title=\"target_compile_features\" id=\"index-1-command:target_compile_features\"><code>target_compile_features()</code></a>:</p> <pre data-language=\"cmake\">add_library(mylib requires_constexpr.cpp)\n# cxx_constexpr is a usage-requirement\ntarget_compile_features(mylib PUBLIC cxx_constexpr)\n\n# main.cpp will be compiled with -std=gnu++11 on GNU for cxx_constexpr.\nadd_executable(myexe main.cpp)\ntarget_link_libraries(myexe mylib)\n</pre> <p>Feature requirements are evaluated transitively by consuming the link implementation. See <a class=\"reference internal\" href=\"cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> for more on transitive behavior of build properties and usage requirements.</p> <p>Because the <a class=\"reference internal\" href=\"../prop_tgt/cxx_extensions#prop_tgt:CXX_EXTENSIONS\" title=\"CXX_EXTENSIONS\" id=\"index-0-prop_tgt:CXX_EXTENSIONS\"><code>CXX_EXTENSIONS</code></a> target property is <code>ON</code> by default, CMake uses extended variants of language dialects by default, such as <code>-std=gnu++11</code> instead of <code>-std=c++11</code>. That target property may be set to <code>OFF</code> to use the non-extended variant of the dialect flag. Note that because most compilers enable extensions by default, this could expose cross-platform bugs in user code or in the headers of third-party dependencies.</p>   <h2 id=\"optional-compile-features\">Optional Compile Features</h2> <p>Compile features may be preferred if available, without creating a hard requirement. For example, a library may provides alternative implementations depending on whether the <code>cxx_variadic_templates</code> feature is available:</p> <pre data-language=\"c\">#if Foo_COMPILER_CXX_VARIADIC_TEMPLATES\ntemplate&lt;int I, int... Is&gt;\nstruct Interface;\n\ntemplate&lt;int I&gt;\nstruct Interface&lt;I&gt;\n{\n  static int accumulate()\n  {\n    return I;\n  }\n};\n\ntemplate&lt;int I, int... Is&gt;\nstruct Interface\n{\n  static int accumulate()\n  {\n    return I + Interface&lt;Is...&gt;::accumulate();\n  }\n};\n#else\ntemplate&lt;int I1, int I2 = 0, int I3 = 0, int I4 = 0&gt;\nstruct Interface\n{\n  static int accumulate() { return I1 + I2 + I3 + I4; }\n};\n#endif\n</pre> <p>Such an interface depends on using the correct preprocessor defines for the compiler features. CMake can generate a header file containing such defines using the <a class=\"reference internal\" href=\"../module/writecompilerdetectionheader#module:WriteCompilerDetectionHeader\" title=\"WriteCompilerDetectionHeader\" id=\"index-0-module:WriteCompilerDetectionHeader\"><code>WriteCompilerDetectionHeader</code></a> module. The module contains the <code>write_compiler_detection_header</code> function which accepts parameters to control the content of the generated header file:</p> <pre data-language=\"cmake\">write_compiler_detection_header(\n  FILE \"${CMAKE_CURRENT_BINARY_DIR}/foo_compiler_detection.h\"\n  PREFIX Foo\n  COMPILERS GNU\n  FEATURES\n    cxx_variadic_templates\n)\n</pre> <p>Such a header file may be used internally in the source code of a project, and it may be installed and used in the interface of library code.</p> <p>For each feature listed in <code>FEATURES</code>, a preprocessor definition is created in the header file, and defined to either <code>1</code> or <code>0</code>.</p> <p>Additionally, some features call for additional defines, such as the <code>cxx_final</code> and <code>cxx_override</code> features. Rather than being used in <code>#ifdef</code> code, the <code>final</code> keyword is abstracted by a symbol which is defined to either <code>final</code>, a compiler-specific equivalent, or to empty. That way, C++ code can be written to unconditionally use the symbol, and compiler support determines what it is expanded to:</p> <pre data-language=\"c\">struct Interface {\n  virtual void Execute() = 0;\n};\n\nstruct Concrete Foo_FINAL {\n  void Execute() Foo_OVERRIDE;\n};\n</pre> <p>In this case, <code>Foo_FINAL</code> will expand to <code>final</code> if the compiler supports the keyword, or to empty otherwise.</p> <p>In this use-case, the CMake code will wish to enable a particular language standard if available from the compiler. The <a class=\"reference internal\" href=\"../prop_tgt/cxx_standard#prop_tgt:CXX_STANDARD\" title=\"CXX_STANDARD\" id=\"index-0-prop_tgt:CXX_STANDARD\"><code>CXX_STANDARD</code></a> target property variable may be set to the desired language standard for a particular target, and the <a class=\"reference internal\" href=\"../variable/cmake_cxx_standard#variable:CMAKE_CXX_STANDARD\" title=\"CMAKE_CXX_STANDARD\" id=\"index-0-variable:CMAKE_CXX_STANDARD\"><code>CMAKE_CXX_STANDARD</code></a> may be set to influence all following targets:</p> <pre data-language=\"cmake\">write_compiler_detection_header(\n  FILE \"${CMAKE_CURRENT_BINARY_DIR}/foo_compiler_detection.h\"\n  PREFIX Foo\n  COMPILERS GNU\n  FEATURES\n    cxx_final cxx_override\n)\n\n# Includes foo_compiler_detection.h and uses the Foo_FINAL symbol\n# which will expand to 'final' if the compiler supports the requested\n# CXX_STANDARD.\nadd_library(foo foo.cpp)\nset_property(TARGET foo PROPERTY CXX_STANDARD 11)\n\n# Includes foo_compiler_detection.h and uses the Foo_FINAL symbol\n# which will expand to 'final' if the compiler supports the feature,\n# even though CXX_STANDARD is not set explicitly.  The requirement of\n# cxx_constexpr causes CMake to set CXX_STANDARD internally, which\n# affects the compile flags.\nadd_library(foo_impl foo_impl.cpp)\ntarget_compile_features(foo_impl PRIVATE cxx_constexpr)\n</pre> <p>The <code>write_compiler_detection_header</code> function also creates compatibility code for other features which have standard equivalents. For example, the <code>cxx_static_assert</code> feature is emulated with a template and abstracted via the <code>&lt;PREFIX&gt;_STATIC_ASSERT</code> and <code>&lt;PREFIX&gt;_STATIC_ASSERT_MSG</code> function-macros.</p>   <h2 id=\"conditional-compilation-options\">Conditional Compilation Options</h2> <p>Libraries may provide entirely different header files depending on requested compiler features.</p> <p>For example, a header at <code>with_variadics/interface.h</code> may contain:</p> <pre data-language=\"c\">template&lt;int I, int... Is&gt;\nstruct Interface;\n\ntemplate&lt;int I&gt;\nstruct Interface&lt;I&gt;\n{\n  static int accumulate()\n  {\n    return I;\n  }\n};\n\ntemplate&lt;int I, int... Is&gt;\nstruct Interface\n{\n  static int accumulate()\n  {\n    return I + Interface&lt;Is...&gt;::accumulate();\n  }\n};\n</pre> <p>while a header at <code>no_variadics/interface.h</code> may contain:</p> <pre data-language=\"c\">template&lt;int I1, int I2 = 0, int I3 = 0, int I4 = 0&gt;\nstruct Interface\n{\n  static int accumulate() { return I1 + I2 + I3 + I4; }\n};\n</pre> <p>It would be possible to write a abstraction <code>interface.h</code> header containing something like:</p> <pre data-language=\"c\">#include \"foo_compiler_detection.h\"\n#if Foo_COMPILER_CXX_VARIADIC_TEMPLATES\n#include \"with_variadics/interface.h\"\n#else\n#include \"no_variadics/interface.h\"\n#endif\n</pre> <p>However this could be unmaintainable if there are many files to abstract. What is needed is to use alternative include directories depending on the compiler capabilities.</p> <p>CMake provides a <code>COMPILE_FEATURES</code> <a class=\"reference internal\" href=\"cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expression</code></a> to implement such conditions. This may be used with the build-property commands such as <a class=\"reference internal\" href=\"../command/target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-0-command:target_include_directories\"><code>target_include_directories()</code></a> and <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> to set the appropriate <a class=\"reference internal\" href=\"cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-1-manual:cmake-buildsystem(7)\"><code>buildsystem</code></a> properties:</p> <pre data-language=\"cmake\">add_library(foo INTERFACE)\nset(with_variadics ${CMAKE_CURRENT_SOURCE_DIR}/with_variadics)\nset(no_variadics ${CMAKE_CURRENT_SOURCE_DIR}/no_variadics)\ntarget_include_directories(foo\n  INTERFACE\n    \"$&lt;$&lt;COMPILE_FEATURES:cxx_variadic_templates&gt;:${with_variadics}&gt;\"\n    \"$&lt;$&lt;NOT:$&lt;COMPILE_FEATURES:cxx_variadic_templates&gt;&gt;:${no_variadics}&gt;\"\n  )\n</pre> <p>Consuming code then simply links to the <code>foo</code> target as usual and uses the feature-appropriate include directory</p> <pre data-language=\"cmake\">add_executable(consumer_with consumer_with.cpp)\ntarget_link_libraries(consumer_with foo)\nset_property(TARGET consumer_with CXX_STANDARD 11)\n\nadd_executable(consumer_no consumer_no.cpp)\ntarget_link_libraries(consumer_no foo)\n</pre>   <h2 id=\"supported-compilers\">Supported Compilers</h2> <p>CMake is currently aware of the <a class=\"reference internal\" href=\"../prop_tgt/cxx_standard#prop_tgt:CXX_STANDARD\" title=\"CXX_STANDARD\" id=\"index-1-prop_tgt:CXX_STANDARD\"><code>language standards</code></a> and <a class=\"reference internal\" href=\"../prop_gbl/cmake_cxx_known_features#prop_gbl:CMAKE_CXX_KNOWN_FEATURES\" title=\"CMAKE_CXX_KNOWN_FEATURES\" id=\"index-2-prop_gbl:CMAKE_CXX_KNOWN_FEATURES\"><code>compile features</code></a> available from the following <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_ID\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\"><code>compiler ids</code></a> as of the versions specified for each:</p> <ul class=\"simple\"> <li>\n<code>AppleClang</code>: Apple Clang for Xcode versions 4.4 though 6.2.</li> <li>\n<code>Clang</code>: Clang compiler versions 2.9 through 3.4.</li> <li>\n<code>GNU</code>: GNU compiler versions 4.4 through 5.0.</li> <li>\n<code>MSVC</code>: Microsoft Visual Studio versions 2010 through 2015.</li> <li>\n<code>SunPro</code>: Oracle SolarisStudio version 12.4.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-compile-features.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-compile-features.7.html</a>\n  </p>\n</div>\n","command/if":"<h1 id=\"command:if\">if</h1> <p id=\"if\">Conditionally execute a group of commands.</p> <pre data-language=\"cmake\">if(expression)\n  # then section.\n  COMMAND1(ARGS ...)\n  COMMAND2(ARGS ...)\n  ...\nelseif(expression2)\n  # elseif section.\n  COMMAND1(ARGS ...)\n  COMMAND2(ARGS ...)\n  ...\nelse(expression)\n  # else section.\n  COMMAND1(ARGS ...)\n  COMMAND2(ARGS ...)\n  ...\nendif(expression)\n</pre> <p>Evaluates the given expression. If the result is true, the commands in the THEN section are invoked. Otherwise, the commands in the else section are invoked. The elseif and else sections are optional. You may have multiple elseif clauses. Note that the expression in the else and endif clause is optional. Long expressions can be used and there is a traditional order of precedence. Parenthetical expressions are evaluated first followed by unary tests such as <code>EXISTS</code>, <code>COMMAND</code>, and <code>DEFINED</code>. Then any binary tests such as <code>EQUAL</code>, <code>LESS</code>, <code>GREATER</code>, <code>STRLESS</code>, <code>STRGREATER</code>, <code>STREQUAL</code>, and <code>MATCHES</code> will be evaluated. Then boolean <code>NOT</code> operators and finally boolean <code>AND</code> and then <code>OR</code> operators will be evaluated.</p> <p>Possible expressions are:</p> <dl class=\"docutils\"> <dt><code>if(&lt;constant&gt;)</code></dt> <dd>True if the constant is <code>1</code>, <code>ON</code>, <code>YES</code>, <code>TRUE</code>, <code>Y</code>, or a non-zero number. False if the constant is <code>0</code>, <code>OFF</code>, <code>NO</code>, <code>FALSE</code>, <code>N</code>, <code>IGNORE</code>, <code>NOTFOUND</code>, the empty string, or ends in the suffix <code>-NOTFOUND</code>. Named boolean constants are case-insensitive. If the argument is not one of these specific constants, it is treated as a variable or string and the following signature is used.</dd> <dt><code>if(&lt;variable|string&gt;)</code></dt> <dd>True if given a variable that is defined to a value that is not a false constant. False otherwise. (Note macro arguments are not variables.)</dd> <dt><code>if(NOT &lt;expression&gt;)</code></dt> <dd>True if the expression is not true.</dd> <dt><code>if(&lt;expr1&gt; AND &lt;expr2&gt;)</code></dt> <dd>True if both expressions would be considered true individually.</dd> <dt><code>if(&lt;expr1&gt; OR &lt;expr2&gt;)</code></dt> <dd>True if either expression would be considered true individually.</dd> <dt><code>if(COMMAND command-name)</code></dt> <dd>True if the given name is a command, macro or function that can be invoked.</dd> <dt><code>if(POLICY policy-id)</code></dt> <dd>True if the given name is an existing policy (of the form <code>CMP&lt;NNNN&gt;</code>).</dd> <dt><code>if(TARGET target-name)</code></dt> <dd>True if the given name is an existing logical target name created by a call to the <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a>, <a class=\"reference internal\" href=\"add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a>, or <a class=\"reference internal\" href=\"add_custom_target#command:add_custom_target\" title=\"add_custom_target\" id=\"index-0-command:add_custom_target\"><code>add_custom_target()</code></a> command that has already been invoked (in any directory).</dd> <dt><code>if(TEST test-name)</code></dt> <dd>True if the given name is an existing test name created by the <a class=\"reference internal\" href=\"add_test#command:add_test\" title=\"add_test\" id=\"index-0-command:add_test\"><code>add_test()</code></a> command.</dd> <dt><code>if(EXISTS path-to-file-or-directory)</code></dt> <dd>True if the named file or directory exists. Behavior is well-defined only for full paths.</dd> <dt><code>if(file1 IS_NEWER_THAN file2)</code></dt> <dd>True if <code>file1</code> is newer than <code>file2</code> or if one of the two files doesn’t exist. Behavior is well-defined only for full paths. If the file time stamps are exactly the same, an <code>IS_NEWER_THAN</code> comparison returns true, so that any dependent build operations will occur in the event of a tie. This includes the case of passing the same file name for both file1 and file2.</dd> <dt><code>if(IS_DIRECTORY path-to-directory)</code></dt> <dd>True if the given name is a directory. Behavior is well-defined only for full paths.</dd> <dt><code>if(IS_SYMLINK file-name)</code></dt> <dd>True if the given name is a symbolic link. Behavior is well-defined only for full paths.</dd> <dt><code>if(IS_ABSOLUTE path)</code></dt> <dd>True if the given path is an absolute path.</dd> <dt><code>if(&lt;variable|string&gt; MATCHES regex)</code></dt> <dd>True if the given string or variable’s value matches the given regular expression.</dd> <dt><code>if(&lt;variable|string&gt; LESS &lt;variable|string&gt;)</code></dt> <dd>True if the given string or variable’s value is a valid number and less than that on the right.</dd> <dt><code>if(&lt;variable|string&gt; GREATER &lt;variable|string&gt;)</code></dt> <dd>True if the given string or variable’s value is a valid number and greater than that on the right.</dd> <dt><code>if(&lt;variable|string&gt; EQUAL &lt;variable|string&gt;)</code></dt> <dd>True if the given string or variable’s value is a valid number and equal to that on the right.</dd> <dt><code>if(&lt;variable|string&gt; STRLESS &lt;variable|string&gt;)</code></dt> <dd>True if the given string or variable’s value is lexicographically less than the string or variable on the right.</dd> <dt><code>if(&lt;variable|string&gt; STRGREATER &lt;variable|string&gt;)</code></dt> <dd>True if the given string or variable’s value is lexicographically greater than the string or variable on the right.</dd> <dt><code>if(&lt;variable|string&gt; STREQUAL &lt;variable|string&gt;)</code></dt> <dd>True if the given string or variable’s value is lexicographically equal to the string or variable on the right.</dd> <dt><code>if(&lt;variable|string&gt; VERSION_LESS &lt;variable|string&gt;)</code></dt> <dd>Component-wise integer version number comparison (version format is <code>major[.minor[.patch[.tweak]]]</code>).</dd> <dt><code>if(&lt;variable|string&gt; VERSION_EQUAL &lt;variable|string&gt;)</code></dt> <dd>Component-wise integer version number comparison (version format is <code>major[.minor[.patch[.tweak]]]</code>).</dd> <dt><code>if(&lt;variable|string&gt; VERSION_GREATER &lt;variable|string&gt;)</code></dt> <dd>Component-wise integer version number comparison (version format is <code>major[.minor[.patch[.tweak]]]</code>).</dd> <dt><code>if(&lt;variable|string&gt; IN_LIST &lt;variable&gt;)</code></dt> <dd>True if the given element is contained in the named list variable.</dd> <dt><code>if(DEFINED &lt;variable&gt;)</code></dt> <dd>True if the given variable is defined. It does not matter if the variable is true or false just if it has been set. (Note macro arguments are not variables.)</dd> <dt><code>if((expression) AND (expression OR (expression)))</code></dt> <dd>The expressions inside the parenthesis are evaluated first and then the remaining expression is evaluated as in the previous examples. Where there are nested parenthesis the innermost are evaluated as part of evaluating the expression that contains them.</dd> </dl> <p>The if command was written very early in CMake’s history, predating the <code>${}</code> variable evaluation syntax, and for convenience evaluates variables named by its arguments as shown in the above signatures. Note that normal variable evaluation with <code>${}</code> applies before the if command even receives the arguments. Therefore code like:</p> <pre data-language=\"python\">set(var1 OFF)\nset(var2 \"var1\")\nif(${var2})\n</pre> <p>appears to the if command as:</p> <pre data-language=\"python\">if(var1)\n</pre> <p>and is evaluated according to the <code>if(&lt;variable&gt;)</code> case documented above. The result is <code>OFF</code> which is false. However, if we remove the <code>${}</code> from the example then the command sees:</p> <pre data-language=\"python\">if(var2)\n</pre> <p>which is true because <code>var2</code> is defined to “var1” which is not a false constant.</p> <p>Automatic evaluation applies in the other cases whenever the above-documented signature accepts <code>&lt;variable|string&gt;</code>:</p> <ul class=\"simple\"> <li>The left hand argument to <code>MATCHES</code> is first checked to see if it is a defined variable, if so the variable’s value is used, otherwise the original value is used.</li> <li>If the left hand argument to <code>MATCHES</code> is missing it returns false without error</li> <li>Both left and right hand arguments to <code>LESS</code>, <code>GREATER</code>, and <code>EQUAL</code> are independently tested to see if they are defined variables, if so their defined values are used otherwise the original value is used.</li> <li>Both left and right hand arguments to <code>STRLESS</code>, <code>STREQUAL</code>, and <code>STRGREATER</code> are independently tested to see if they are defined variables, if so their defined values are used otherwise the original value is used.</li> <li>Both left and right hand arguments to <code>VERSION_LESS</code>, <code>VERSION_EQUAL</code>, and <code>VERSION_GREATER</code> are independently tested to see if they are defined variables, if so their defined values are used otherwise the original value is used.</li> <li>The right hand argument to <code>NOT</code> is tested to see if it is a boolean constant, if so the value is used, otherwise it is assumed to be a variable and it is dereferenced.</li> <li>The left and right hand arguments to <code>AND</code> and <code>OR</code> are independently tested to see if they are boolean constants, if so they are used as such, otherwise they are assumed to be variables and are dereferenced.</li> </ul> <p>To prevent ambiguity, potential variable or keyword names can be specified in a <a class=\"reference internal\" href=\"../manual/cmake-language.7#quoted-argument\"><span>Quoted Argument</span></a> or a <a class=\"reference internal\" href=\"../manual/cmake-language.7#bracket-argument\"><span>Bracket Argument</span></a>. A quoted or bracketed variable or keyword will be interpreted as a string and not dereferenced or interpreted. See policy <a class=\"reference internal\" href=\"../policy/cmp0054#policy:CMP0054\" title=\"CMP0054\" id=\"index-0-policy:CMP0054\"><code>CMP0054</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/if.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/if.html</a>\n  </p>\n</div>\n","variable/cmake_minimum_required_version":"<h1 id=\"variable:CMAKE_MINIMUM_REQUIRED_VERSION\">CMAKE_MINIMUM_REQUIRED_VERSION</h1> <p id=\"cmake-minimum-required-version\">Version specified to <a class=\"reference internal\" href=\"../command/cmake_minimum_required#command:cmake_minimum_required\" title=\"cmake_minimum_required\" id=\"index-0-command:cmake_minimum_required\"><code>cmake_minimum_required()</code></a> command</p> <p>Variable containing the <code>VERSION</code> component specified in the <a class=\"reference internal\" href=\"../command/cmake_minimum_required#command:cmake_minimum_required\" title=\"cmake_minimum_required\" id=\"index-1-command:cmake_minimum_required\"><code>cmake_minimum_required()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_MINIMUM_REQUIRED_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_MINIMUM_REQUIRED_VERSION.html</a>\n  </p>\n</div>\n","policy/cmp0000":"<h1 id=\"policy:CMP0000\">CMP0000</h1> <p id=\"cmp0000\">A minimum required CMake version must be specified.</p> <p>CMake requires that projects specify the version of CMake to which they have been written. This policy has been put in place so users trying to build the project may be told when they need to update their CMake. Specifying a version also helps the project build with CMake versions newer than that specified. Use the cmake_minimum_required command at the top of your main CMakeLists.txt file:</p> <pre data-language=\"python\">cmake_minimum_required(VERSION &lt;major&gt;.&lt;minor&gt;)\n</pre> <p>where “&lt;major&gt;.&lt;minor&gt;” is the version of CMake you want to support (such as “2.6”). The command will ensure that at least the given version of CMake is running and help newer versions be compatible with the project. See documentation of cmake_minimum_required for details.</p> <p>Note that the command invocation must appear in the CMakeLists.txt file itself; a call in an included file is not sufficient. However, the cmake_policy command may be called to set policy CMP0000 to OLD or NEW behavior explicitly. The OLD behavior is to silently ignore the missing invocation. The NEW behavior is to issue an error instead of a warning. An included file may set CMP0000 explicitly to affect how this policy is enforced for the main CMakeLists.txt file.</p> <p>This policy was introduced in CMake version 2.6.0.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0000.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0000.html</a>\n  </p>\n</div>\n","manual/cmake-buildsystem.7":"<h1 id=\"manual:cmake-buildsystem(7)\">cmake-buildsystem(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#introduction\" id=\"id14\">Introduction</a></li> <li>\n<a class=\"reference internal\" href=\"#binary-targets\" id=\"id15\">Binary Targets</a><ul> <li><a class=\"reference internal\" href=\"#binary-executables\" id=\"id16\">Binary Executables</a></li> <li>\n<a class=\"reference internal\" href=\"#binary-library-types\" id=\"id17\">Binary Library Types</a><ul> <li>\n<a class=\"reference internal\" href=\"#normal-libraries\" id=\"id18\">Normal Libraries</a><ul> <li><a class=\"reference internal\" href=\"#apple-frameworks\" id=\"id19\">Apple Frameworks</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#object-libraries\" id=\"id20\">Object Libraries</a></li> </ul> </li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#build-specification-and-usage-requirements\" id=\"id21\">Build Specification and Usage Requirements</a><ul> <li><a class=\"reference internal\" href=\"#target-properties\" id=\"id22\">Target Properties</a></li> <li><a class=\"reference internal\" href=\"#transitive-usage-requirements\" id=\"id23\">Transitive Usage Requirements</a></li> <li><a class=\"reference internal\" href=\"#compatible-interface-properties\" id=\"id24\">Compatible Interface Properties</a></li> <li><a class=\"reference internal\" href=\"#property-origin-debugging\" id=\"id25\">Property Origin Debugging</a></li> <li>\n<a class=\"reference internal\" href=\"#build-specification-with-generator-expressions\" id=\"id26\">Build Specification with Generator Expressions</a><ul> <li><a class=\"reference internal\" href=\"#include-directories-and-usage-requirements\" id=\"id27\">Include Directories and Usage Requirements</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#link-libraries-and-generator-expressions\" id=\"id28\">Link Libraries and Generator Expressions</a></li> <li>\n<a class=\"reference internal\" href=\"#output-artifacts\" id=\"id29\">Output Artifacts</a><ul> <li><a class=\"reference internal\" href=\"#runtime-output-artifacts\" id=\"id30\">Runtime Output Artifacts</a></li> <li><a class=\"reference internal\" href=\"#library-output-artifacts\" id=\"id31\">Library Output Artifacts</a></li> <li><a class=\"reference internal\" href=\"#archive-output-artifacts\" id=\"id32\">Archive Output Artifacts</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#directory-scoped-commands\" id=\"id33\">Directory-Scoped Commands</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#pseudo-targets\" id=\"id34\">Pseudo Targets</a><ul> <li><a class=\"reference internal\" href=\"#imported-targets\" id=\"id35\">Imported Targets</a></li> <li><a class=\"reference internal\" href=\"#alias-targets\" id=\"id36\">Alias Targets</a></li> <li><a class=\"reference internal\" href=\"#interface-libraries\" id=\"id37\">Interface Libraries</a></li> </ul> </li> </ul>\n   <h2 id=\"introduction\">Introduction</h2> <p>A CMake-based buildsystem is organized as a set of high-level logical targets. Each target corresponds to an executable or library, or is a custom target containing custom commands. Dependencies between the targets are expressed in the buildsystem to determine the build order and the rules for regeneration in response to change.</p>   <h2 id=\"binary-targets\">Binary Targets</h2> <p>Executables and libraries are defined using the <a class=\"reference internal\" href=\"../command/add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> and <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> commands. The resulting binary files have appropriate prefixes, suffixes and extensions for the platform targeted. Dependencies between binary targets are expressed using the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> command:</p> <pre data-language=\"cmake\">add_library(archive archive.cpp zip.cpp lzma.cpp)\nadd_executable(zipapp zipapp.cpp)\ntarget_link_libraries(zipapp archive)\n</pre> <p><code>archive</code> is defined as a static library – an archive containing objects compiled from <code>archive.cpp</code>, <code>zip.cpp</code>, and <code>lzma.cpp</code>. <code>zipapp</code> is defined as an executable formed by compiling and linking <code>zipapp.cpp</code>. When linking the <code>zipapp</code> executable, the <code>archive</code> static library is linked in.</p>  <h3 id=\"binary-executables\">Binary Executables</h3> <p>The <a class=\"reference internal\" href=\"../command/add_executable#command:add_executable\" title=\"add_executable\" id=\"index-1-command:add_executable\"><code>add_executable()</code></a> command defines an executable target:</p> <pre data-language=\"cmake\">add_executable(mytool mytool.cpp)\n</pre> <p>Commands such as <a class=\"reference internal\" href=\"../command/add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-0-command:add_custom_command\"><code>add_custom_command()</code></a>, which generates rules to be run at build time can transparently use an <a class=\"reference internal\" href=\"../prop_tgt/type#prop_tgt:TYPE\" title=\"TYPE\" id=\"index-0-prop_tgt:TYPE\"><code>EXECUTABLE</code></a> target as a <code>COMMAND</code> executable. The buildsystem rules will ensure that the executable is built before attempting to run the command.</p>   <h3 id=\"binary-library-types\">Binary Library Types</h3>  <h4 id=\"id1\">Normal Libraries</h4> <p id=\"normal-libraries\">By default, the <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-1-command:add_library\"><code>add_library()</code></a> command defines a static library, unless a type is specified. A type may be specified when using the command:</p> <pre data-language=\"cmake\">add_library(archive SHARED archive.cpp zip.cpp lzma.cpp)\n</pre> <pre data-language=\"cmake\">add_library(archive STATIC archive.cpp zip.cpp lzma.cpp)\n</pre> <p>The <a class=\"reference internal\" href=\"../variable/build_shared_libs#variable:BUILD_SHARED_LIBS\" title=\"BUILD_SHARED_LIBS\" id=\"index-0-variable:BUILD_SHARED_LIBS\"><code>BUILD_SHARED_LIBS</code></a> variable may be enabled to change the behavior of <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-2-command:add_library\"><code>add_library()</code></a> to build shared libraries by default.</p> <p>In the context of the buildsystem definition as a whole, it is largely irrelevant whether particular libraries are <code>SHARED</code> or <code>STATIC</code> – the commands, dependency specifications and other APIs work similarly regardless of the library type. The <code>MODULE</code> library type is dissimilar in that it is generally not linked to – it is not used in the right-hand-side of the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-1-command:target_link_libraries\"><code>target_link_libraries()</code></a> command. It is a type which is loaded as a plugin using runtime techniques. If the library does not export any unmanaged symbols (e.g. Windows resource DLL, C++/CLI DLL), it is required that the library not be a <code>SHARED</code> library because CMake expects <code>SHARED</code> libraries to export at least one symbol.</p> <pre data-language=\"cmake\">add_library(archive MODULE 7z.cpp)\n</pre>  <h5 id=\"id2\">Apple Frameworks</h5> <p id=\"apple-frameworks\">A <code>SHARED</code> library may be marked with the <a class=\"reference internal\" href=\"../prop_tgt/framework#prop_tgt:FRAMEWORK\" title=\"FRAMEWORK\" id=\"index-0-prop_tgt:FRAMEWORK\"><code>FRAMEWORK</code></a> target property to create an OS X or iOS Framework Bundle. The <code>MACOSX_FRAMEWORK_IDENTIFIER</code> sets <code>CFBundleIdentifier</code> key and it uniquely identifies the bundle.</p> <pre data-language=\"cmake\">add_library(MyFramework SHARED MyFramework.cpp)\nset_target_properties(MyFramework PROPERTIES\n  FRAMEWORK TRUE\n  FRAMEWORK_VERSION A\n  MACOSX_FRAMEWORK_IDENTIFIER org.cmake.MyFramework\n)\n</pre>    <h4 id=\"id3\">Object Libraries</h4> <p id=\"object-libraries\">The <code>OBJECT</code> library type is also not linked to. It defines a non-archival collection of object files resulting from compiling the given source files. The object files collection can be used as source inputs to other targets:</p> <pre data-language=\"cmake\">add_library(archive OBJECT archive.cpp zip.cpp lzma.cpp)\n\nadd_library(archiveExtras STATIC $&lt;TARGET_OBJECTS:archive&gt; extras.cpp)\n\nadd_executable(test_exe $&lt;TARGET_OBJECTS:archive&gt; test.cpp)\n</pre> <p><code>OBJECT</code> libraries may only be used locally as sources in a buildsystem – they may not be installed, exported, or used in the right hand side of <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-2-command:target_link_libraries\"><code>target_link_libraries()</code></a>. They also may not be used as the <code>TARGET</code> in a use of the <a class=\"reference internal\" href=\"../command/add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-1-command:add_custom_command\"><code>add_custom_command(TARGET)</code></a> command signature.</p> <p>Although object libraries may not be named directly in calls to the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-3-command:target_link_libraries\"><code>target_link_libraries()</code></a> command, they can be “linked” indirectly by using an <a class=\"reference internal\" href=\"#interface-libraries\"><span>Interface Library</span></a> whose <a class=\"reference internal\" href=\"../prop_tgt/interface_sources#prop_tgt:INTERFACE_SOURCES\" title=\"INTERFACE_SOURCES\" id=\"index-0-prop_tgt:INTERFACE_SOURCES\"><code>INTERFACE_SOURCES</code></a> target property is set to name <code>$&lt;TARGET_OBJECTS:objlib&gt;</code>.</p>     <h2 id=\"build-specification-and-usage-requirements\">Build Specification and Usage Requirements</h2> <p>The <a class=\"reference internal\" href=\"../command/target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-0-command:target_include_directories\"><code>target_include_directories()</code></a>, <a class=\"reference internal\" href=\"../command/target_compile_definitions#command:target_compile_definitions\" title=\"target_compile_definitions\" id=\"index-0-command:target_compile_definitions\"><code>target_compile_definitions()</code></a> and <a class=\"reference internal\" href=\"../command/target_compile_options#command:target_compile_options\" title=\"target_compile_options\" id=\"index-0-command:target_compile_options\"><code>target_compile_options()</code></a> commands specify the build specifications and the usage requirements of binary targets. The commands populate the <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_tgt:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/compile_options#prop_tgt:COMPILE_OPTIONS\" title=\"COMPILE_OPTIONS\" id=\"index-0-prop_tgt:COMPILE_OPTIONS\"><code>COMPILE_OPTIONS</code></a> target properties respectively, and/or the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/interface_compile_definitions#prop_tgt:INTERFACE_COMPILE_DEFINITIONS\" title=\"INTERFACE_COMPILE_DEFINITIONS\" id=\"index-0-prop_tgt:INTERFACE_COMPILE_DEFINITIONS\"><code>INTERFACE_COMPILE_DEFINITIONS</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/interface_compile_options#prop_tgt:INTERFACE_COMPILE_OPTIONS\" title=\"INTERFACE_COMPILE_OPTIONS\" id=\"index-0-prop_tgt:INTERFACE_COMPILE_OPTIONS\"><code>INTERFACE_COMPILE_OPTIONS</code></a> target properties.</p> <p>Each of the commands has a <code>PRIVATE</code>, <code>PUBLIC</code> and <code>INTERFACE</code> mode. The <code>PRIVATE</code> mode populates only the non-<code>INTERFACE_</code> variant of the target property and the <code>INTERFACE</code> mode populates only the <code>INTERFACE_</code> variants. The <code>PUBLIC</code> mode populates both variants of the repective target property. Each command may be invoked with multiple uses of each keyword:</p> <pre data-language=\"cmake\">target_compile_definitions(archive\n  PRIVATE BUILDING_WITH_LZMA\n  INTERFACE USING_ARCHIVE_LIB\n)\n</pre> <p>Note that usage requirements are not designed as a way to make downstreams use particular <a class=\"reference internal\" href=\"../prop_tgt/compile_options#prop_tgt:COMPILE_OPTIONS\" title=\"COMPILE_OPTIONS\" id=\"index-1-prop_tgt:COMPILE_OPTIONS\"><code>COMPILE_OPTIONS</code></a> or <a class=\"reference internal\" href=\"../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-1-prop_tgt:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> etc for convenience only. The contents of the properties must be <strong>requirements</strong>, not merely recommendations or convenience.</p> <p>See the <a class=\"reference internal\" href=\"cmake-packages.7#creating-relocatable-packages\"><span>Creating Relocatable Packages</span></a> section of the <a class=\"reference internal\" href=\"cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-0-manual:cmake-packages(7)\"><code>cmake-packages(7)</code></a> manual for discussion of additional care that must be taken when specifying usage requirements while creating packages for redistribution.</p>  <h3 id=\"target-properties\">Target Properties</h3> <p>The contents of the <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-1-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-2-prop_tgt:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/compile_options#prop_tgt:COMPILE_OPTIONS\" title=\"COMPILE_OPTIONS\" id=\"index-2-prop_tgt:COMPILE_OPTIONS\"><code>COMPILE_OPTIONS</code></a> target properties are used appropriately when compiling the source files of a binary target.</p> <p>Entries in the <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-2-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a> are added to the compile line with <code>-I</code> or <code>-isystem</code> prefixes and in the order of appearance in the property value.</p> <p>Entries in the <a class=\"reference internal\" href=\"../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-3-prop_tgt:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> are prefixed with <code>-D</code> or <code>/D</code> and added to the compile line in an unspecified order. The <a class=\"reference internal\" href=\"../prop_tgt/define_symbol#prop_tgt:DEFINE_SYMBOL\" title=\"DEFINE_SYMBOL\" id=\"index-0-prop_tgt:DEFINE_SYMBOL\"><code>DEFINE_SYMBOL</code></a> target property is also added as a compile definition as a special convenience case for <code>SHARED</code> and <code>MODULE</code> library targets.</p> <p>Entries in the <a class=\"reference internal\" href=\"../prop_tgt/compile_options#prop_tgt:COMPILE_OPTIONS\" title=\"COMPILE_OPTIONS\" id=\"index-3-prop_tgt:COMPILE_OPTIONS\"><code>COMPILE_OPTIONS</code></a> are escaped for the shell and added in the order of appearance in the property value. Several compile options have special separate handling, such as <a class=\"reference internal\" href=\"../prop_tgt/position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-0-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a>.</p> <p>The contents of the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-1-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/interface_compile_definitions#prop_tgt:INTERFACE_COMPILE_DEFINITIONS\" title=\"INTERFACE_COMPILE_DEFINITIONS\" id=\"index-1-prop_tgt:INTERFACE_COMPILE_DEFINITIONS\"><code>INTERFACE_COMPILE_DEFINITIONS</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/interface_compile_options#prop_tgt:INTERFACE_COMPILE_OPTIONS\" title=\"INTERFACE_COMPILE_OPTIONS\" id=\"index-1-prop_tgt:INTERFACE_COMPILE_OPTIONS\"><code>INTERFACE_COMPILE_OPTIONS</code></a> target properties are <em>Usage Requirements</em> – they specify content which consumers must use to correctly compile and link with the target they appear on. For any binary target, the contents of each <code>INTERFACE_</code> property on each target specified in a <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-4-command:target_link_libraries\"><code>target_link_libraries()</code></a> command is consumed:</p> <pre data-language=\"cmake\">set(srcs archive.cpp zip.cpp)\nif (LZMA_FOUND)\n  list(APPEND srcs lzma.cpp)\nendif()\nadd_library(archive SHARED ${srcs})\nif (LZMA_FOUND)\n  # The archive library sources are compiled with -DBUILDING_WITH_LZMA\n  target_compile_definitions(archive PRIVATE BUILDING_WITH_LZMA)\nendif()\ntarget_compile_definitions(archive INTERFACE USING_ARCHIVE_LIB)\n\nadd_executable(consumer)\n# Link consumer to archive and consume its usage requirements. The consumer\n# executable sources are compiled with -DUSING_ARCHIVE_LIB.\ntarget_link_libraries(consumer archive)\n</pre> <p>Because it is common to require that the source directory and corresponding build directory are added to the <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-3-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a>, the <a class=\"reference internal\" href=\"../variable/cmake_include_current_dir#variable:CMAKE_INCLUDE_CURRENT_DIR\" title=\"CMAKE_INCLUDE_CURRENT_DIR\" id=\"index-0-variable:CMAKE_INCLUDE_CURRENT_DIR\"><code>CMAKE_INCLUDE_CURRENT_DIR</code></a> variable can be enabled to conveniently add the corresponding directories to the <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-4-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a> of all targets. The variable <a class=\"reference internal\" href=\"../variable/cmake_include_current_dir_in_interface#variable:CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE\" title=\"CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE\" id=\"index-0-variable:CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE\"><code>CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE</code></a> can be enabled to add the corresponding directories to the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-2-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> of all targets. This makes use of targets in multiple different directories convenient through use of the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-5-command:target_link_libraries\"><code>target_link_libraries()</code></a> command.</p>   <h3 id=\"target-usage-requirements\">Transitive Usage Requirements</h3> <p id=\"transitive-usage-requirements\">The usage requirements of a target can transitively propagate to dependents. The <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-6-command:target_link_libraries\"><code>target_link_libraries()</code></a> command has <code>PRIVATE</code>, <code>INTERFACE</code> and <code>PUBLIC</code> keywords to control the propagation.</p> <pre data-language=\"cmake\">add_library(archive archive.cpp)\ntarget_compile_definitions(archive INTERFACE USING_ARCHIVE_LIB)\n\nadd_library(serialization serialization.cpp)\ntarget_compile_definitions(serialization INTERFACE USING_SERIALIZATION_LIB)\n\nadd_library(archiveExtras extras.cpp)\ntarget_link_libraries(archiveExtras PUBLIC archive)\ntarget_link_libraries(archiveExtras PRIVATE serialization)\n# archiveExtras is compiled with -DUSING_ARCHIVE_LIB\n# and -DUSING_SERIALIZATION_LIB\n\nadd_executable(consumer consumer.cpp)\n# consumer is compiled with -DUSING_ARCHIVE_LIB\ntarget_link_libraries(consumer archiveExtras)\n</pre> <p>Because <code>archive</code> is a <code>PUBLIC</code> dependency of <code>archiveExtras</code>, the usage requirements of it are propagated to <code>consumer</code> too. Because <code>serialization</code> is a <code>PRIVATE</code> dependency of <code>archive</code>, the usage requirements of it are not propagated to <code>consumer</code>.</p> <p>Generally, a dependency should be specified in a use of <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-7-command:target_link_libraries\"><code>target_link_libraries()</code></a> with the <code>PRIVATE</code> keyword if it is used by only the implementation of a library, and not in the header files. If a dependency is additionally used in the header files of a library (e.g. for class inheritance), then it should be specified as a <code>PUBLIC</code> dependency. A dependency which is not used by the implementation of a library, but only by its headers should be specified as an <code>INTERFACE</code> dependency. The <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-8-command:target_link_libraries\"><code>target_link_libraries()</code></a> command may be invoked with multiple uses of each keyword:</p> <pre data-language=\"cmake\">target_link_libraries(archiveExtras\n  PUBLIC archive\n  PRIVATE serialization\n)\n</pre> <p>Usage requirements are propagated by reading the <code>INTERFACE_</code> variants of target properties from dependencies and appending the values to the non-<code>INTERFACE_</code> variants of the operand. For example, the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-3-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> of dependencies is read and appended to the <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-5-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a> of the operand. In cases where order is relevant and maintained, and the order resulting from the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-9-command:target_link_libraries\"><code>target_link_libraries()</code></a> calls does not allow correct compilation, use of an appropriate command to set the property directly may update the order.</p> <p>For example, if the linked libraries for a target must be specified in the order <code>lib1</code> <code>lib2</code> <code>lib3</code> , but the include directories must be specified in the order <code>lib3</code> <code>lib1</code> <code>lib2</code>:</p> <pre data-language=\"cmake\">target_link_libraries(myExe lib1 lib2 lib3)\ntarget_include_directories(myExe\n  PRIVATE $&lt;TARGET_PROPERTY:lib3,INTERFACE_INCLUDE_DIRECTORIES&gt;)\n</pre> <p>Note that care must be taken when specifying usage requirements for targets which will be exported for installation using the <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(EXPORT)</code></a> command. See <a class=\"reference internal\" href=\"cmake-packages.7#creating-packages\"><span>Creating Packages</span></a> for more.</p>   <h3 id=\"id4\">Compatible Interface Properties</h3> <p id=\"compatible-interface-properties\">Some target properties are required to be compatible between a target and the interface of each dependency. For example, the <a class=\"reference internal\" href=\"../prop_tgt/position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-1-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> target property may specify a boolean value of whether a target should be compiled as position-independent-code, which has platform-specific consequences. A target may also specify the usage requirement <a class=\"reference internal\" href=\"../prop_tgt/interface_position_independent_code#prop_tgt:INTERFACE_POSITION_INDEPENDENT_CODE\" title=\"INTERFACE_POSITION_INDEPENDENT_CODE\" id=\"index-0-prop_tgt:INTERFACE_POSITION_INDEPENDENT_CODE\"><code>INTERFACE_POSITION_INDEPENDENT_CODE</code></a> to communicate that consumers must be compiled as position-independent-code.</p> <pre data-language=\"cmake\">add_executable(exe1 exe1.cpp)\nset_property(TARGET exe1 PROPERTY POSITION_INDEPENDENT_CODE ON)\n\nadd_library(lib1 SHARED lib1.cpp)\nset_property(TARGET lib1 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)\n\nadd_executable(exe2 exe2.cpp)\ntarget_link_libraries(exe2 lib1)\n</pre> <p>Here, both <code>exe1</code> and <code>exe2</code> will be compiled as position-independent-code. <code>lib1</code> will also be compiled as position-independent-code because that is the default setting for <code>SHARED</code> libraries. If dependencies have conflicting, non-compatible requirements <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> issues a diagnostic:</p> <pre data-language=\"cmake\">add_library(lib1 SHARED lib1.cpp)\nset_property(TARGET lib1 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)\n\nadd_library(lib2 SHARED lib2.cpp)\nset_property(TARGET lib2 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE OFF)\n\nadd_executable(exe1 exe1.cpp)\ntarget_link_libraries(exe1 lib1)\nset_property(TARGET exe1 PROPERTY POSITION_INDEPENDENT_CODE OFF)\n\nadd_executable(exe2 exe2.cpp)\ntarget_link_libraries(exe2 lib1 lib2)\n</pre> <p>The <code>lib1</code> requirement <code>INTERFACE_POSITION_INDEPENDENT_CODE</code> is not “compatible” with the <code>POSITION_INDEPENDENT_CODE</code> property of the <code>exe1</code> target. The library requires that consumers are built as position-independent-code, while the executable specifies to not built as position-independent-code, so a diagnostic is issued.</p> <p>The <code>lib1</code> and <code>lib2</code> requirements are not “compatible”. One of them requires that consumers are built as position-independent-code, while the other requires that consumers are not built as position-independent-code. Because <code>exe2</code> links to both and they are in conflict, a diagnostic is issued.</p> <p>To be “compatible”, the <a class=\"reference internal\" href=\"../prop_tgt/position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-2-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> property, if set must be either the same, in a boolean sense, as the <a class=\"reference internal\" href=\"../prop_tgt/interface_position_independent_code#prop_tgt:INTERFACE_POSITION_INDEPENDENT_CODE\" title=\"INTERFACE_POSITION_INDEPENDENT_CODE\" id=\"index-1-prop_tgt:INTERFACE_POSITION_INDEPENDENT_CODE\"><code>INTERFACE_POSITION_INDEPENDENT_CODE</code></a> property of all transitively specified dependencies on which that property is set.</p> <p>This property of “compatible interface requirement” may be extended to other properties by specifying the property in the content of the <a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_bool#prop_tgt:COMPATIBLE_INTERFACE_BOOL\" title=\"COMPATIBLE_INTERFACE_BOOL\" id=\"index-0-prop_tgt:COMPATIBLE_INTERFACE_BOOL\"><code>COMPATIBLE_INTERFACE_BOOL</code></a> target property. Each specified property must be compatible between the consuming target and the corresponding property with an <code>INTERFACE_</code> prefix from each dependency:</p> <pre data-language=\"cmake\">add_library(lib1Version2 SHARED lib1_v2.cpp)\nset_property(TARGET lib1Version2 PROPERTY INTERFACE_CUSTOM_PROP ON)\nset_property(TARGET lib1Version2 APPEND PROPERTY\n  COMPATIBLE_INTERFACE_BOOL CUSTOM_PROP\n)\n\nadd_library(lib1Version3 SHARED lib1_v3.cpp)\nset_property(TARGET lib1Version3 PROPERTY INTERFACE_CUSTOM_PROP OFF)\n\nadd_executable(exe1 exe1.cpp)\ntarget_link_libraries(exe1 lib1Version2) # CUSTOM_PROP will be ON\n\nadd_executable(exe2 exe2.cpp)\ntarget_link_libraries(exe2 lib1Version2 lib1Version3) # Diagnostic\n</pre> <p>Non-boolean properties may also participate in “compatible interface” computations. Properties specified in the <a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_string#prop_tgt:COMPATIBLE_INTERFACE_STRING\" title=\"COMPATIBLE_INTERFACE_STRING\" id=\"index-0-prop_tgt:COMPATIBLE_INTERFACE_STRING\"><code>COMPATIBLE_INTERFACE_STRING</code></a> property must be either unspecified or compare to the same string among all transitively specified dependencies. This can be useful to ensure that multiple incompatible versions of a library are not linked together through transitive requirements of a target:</p> <pre data-language=\"cmake\">add_library(lib1Version2 SHARED lib1_v2.cpp)\nset_property(TARGET lib1Version2 PROPERTY INTERFACE_LIB_VERSION 2)\nset_property(TARGET lib1Version2 APPEND PROPERTY\n  COMPATIBLE_INTERFACE_STRING LIB_VERSION\n)\n\nadd_library(lib1Version3 SHARED lib1_v3.cpp)\nset_property(TARGET lib1Version3 PROPERTY INTERFACE_LIB_VERSION 3)\n\nadd_executable(exe1 exe1.cpp)\ntarget_link_libraries(exe1 lib1Version2) # LIB_VERSION will be \"2\"\n\nadd_executable(exe2 exe2.cpp)\ntarget_link_libraries(exe2 lib1Version2 lib1Version3) # Diagnostic\n</pre> <p>The <a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_number_max#prop_tgt:COMPATIBLE_INTERFACE_NUMBER_MAX\" title=\"COMPATIBLE_INTERFACE_NUMBER_MAX\" id=\"index-0-prop_tgt:COMPATIBLE_INTERFACE_NUMBER_MAX\"><code>COMPATIBLE_INTERFACE_NUMBER_MAX</code></a> target property specifies that content will be evaluated numerically and the maximum number among all specified will be calculated:</p> <pre data-language=\"cmake\">add_library(lib1Version2 SHARED lib1_v2.cpp)\nset_property(TARGET lib1Version2 PROPERTY INTERFACE_CONTAINER_SIZE_REQUIRED 200)\nset_property(TARGET lib1Version2 APPEND PROPERTY\n  COMPATIBLE_INTERFACE_NUMBER_MAX CONTAINER_SIZE_REQUIRED\n)\n\nadd_library(lib1Version3 SHARED lib1_v3.cpp)\nset_property(TARGET lib1Version3 PROPERTY INTERFACE_CONTAINER_SIZE_REQUIRED 1000)\n\nadd_executable(exe1 exe1.cpp)\n# CONTAINER_SIZE_REQUIRED will be \"200\"\ntarget_link_libraries(exe1 lib1Version2)\n\nadd_executable(exe2 exe2.cpp)\n# CONTAINER_SIZE_REQUIRED will be \"1000\"\ntarget_link_libraries(exe2 lib1Version2 lib1Version3)\n</pre> <p>Similarly, the <a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_number_min#prop_tgt:COMPATIBLE_INTERFACE_NUMBER_MIN\" title=\"COMPATIBLE_INTERFACE_NUMBER_MIN\" id=\"index-0-prop_tgt:COMPATIBLE_INTERFACE_NUMBER_MIN\"><code>COMPATIBLE_INTERFACE_NUMBER_MIN</code></a> may be used to calculate the numeric minimum value for a property from dependencies.</p> <p>Each calculated “compatible” property value may be read in the consumer at generate-time using generator expressions.</p> <p>Note that for each dependee, the set of properties specified in each compatible interface property must not intersect with the set specified in any of the other properties.</p>   <h3 id=\"property-origin-debugging\">Property Origin Debugging</h3> <p>Because build specifications can be determined by dependencies, the lack of locality of code which creates a target and code which is responsible for setting build specifications may make the code more difficult to reason about. <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-1-manual:cmake(1)\"><code>cmake(1)</code></a> provides a debugging facility to print the origin of the contents of properties which may be determined by dependencies. The properties which can be debugged are listed in the <a class=\"reference internal\" href=\"../variable/cmake_debug_target_properties#variable:CMAKE_DEBUG_TARGET_PROPERTIES\" title=\"CMAKE_DEBUG_TARGET_PROPERTIES\" id=\"index-0-variable:CMAKE_DEBUG_TARGET_PROPERTIES\"><code>CMAKE_DEBUG_TARGET_PROPERTIES</code></a> variable documentation:</p> <pre data-language=\"cmake\">set(CMAKE_DEBUG_TARGET_PROPERTIES\n  INCLUDE_DIRECTORIES\n  COMPILE_DEFINITIONS\n  POSITION_INDEPENDENT_CODE\n  CONTAINER_SIZE_REQUIRED\n  LIB_VERSION\n)\nadd_executable(exe1 exe1.cpp)\n</pre> <p>In the case of properties listed in <a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_bool#prop_tgt:COMPATIBLE_INTERFACE_BOOL\" title=\"COMPATIBLE_INTERFACE_BOOL\" id=\"index-1-prop_tgt:COMPATIBLE_INTERFACE_BOOL\"><code>COMPATIBLE_INTERFACE_BOOL</code></a> or <a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_string#prop_tgt:COMPATIBLE_INTERFACE_STRING\" title=\"COMPATIBLE_INTERFACE_STRING\" id=\"index-1-prop_tgt:COMPATIBLE_INTERFACE_STRING\"><code>COMPATIBLE_INTERFACE_STRING</code></a>, the debug output shows which target was responsible for setting the property, and which other dependencies also defined the property. In the case of <a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_number_max#prop_tgt:COMPATIBLE_INTERFACE_NUMBER_MAX\" title=\"COMPATIBLE_INTERFACE_NUMBER_MAX\" id=\"index-1-prop_tgt:COMPATIBLE_INTERFACE_NUMBER_MAX\"><code>COMPATIBLE_INTERFACE_NUMBER_MAX</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_number_min#prop_tgt:COMPATIBLE_INTERFACE_NUMBER_MIN\" title=\"COMPATIBLE_INTERFACE_NUMBER_MIN\" id=\"index-1-prop_tgt:COMPATIBLE_INTERFACE_NUMBER_MIN\"><code>COMPATIBLE_INTERFACE_NUMBER_MIN</code></a>, the debug output shows the value of the property from each dependency, and whether the value determines the new extreme.</p>   <h3 id=\"build-specification-with-generator-expressions\">Build Specification with Generator Expressions</h3> <p>Build specifications may use <a class=\"reference internal\" href=\"cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a> containing content which may be conditional or known only at generate-time. For example, the calculated “compatible” value of a property may be read with the <code>TARGET_PROPERTY</code> expression:</p> <pre data-language=\"cmake\">add_library(lib1Version2 SHARED lib1_v2.cpp)\nset_property(TARGET lib1Version2 PROPERTY\n  INTERFACE_CONTAINER_SIZE_REQUIRED 200)\nset_property(TARGET lib1Version2 APPEND PROPERTY\n  COMPATIBLE_INTERFACE_NUMBER_MAX CONTAINER_SIZE_REQUIRED\n)\n\nadd_executable(exe1 exe1.cpp)\ntarget_link_libraries(exe1 lib1Version2)\ntarget_compile_definitions(exe1 PRIVATE\n    CONTAINER_SIZE=$&lt;TARGET_PROPERTY:CONTAINER_SIZE_REQUIRED&gt;\n)\n</pre> <p>In this case, the <code>exe1</code> source files will be compiled with <code>-DCONTAINER_SIZE=200</code>.</p> <p>Configuration determined build specifications may be conveniently set using the <code>CONFIG</code> generator expression.</p> <pre data-language=\"cmake\">target_compile_definitions(exe1 PRIVATE\n    $&lt;$&lt;CONFIG:Debug&gt;:DEBUG_BUILD&gt;\n)\n</pre> <p>The <code>CONFIG</code> parameter is compared case-insensitively with the configuration being built. In the presence of <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets, the content of <a class=\"reference internal\" href=\"#\" title=\"MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;\"><code>MAP_IMPORTED_CONFIG_DEBUG</code></a> is also accounted for by this expression.</p> <p>Some buildsystems generated by <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-2-manual:cmake(1)\"><code>cmake(1)</code></a> have a predetermined build-configuration set in the <a class=\"reference internal\" href=\"../variable/cmake_build_type#variable:CMAKE_BUILD_TYPE\" title=\"CMAKE_BUILD_TYPE\" id=\"index-0-variable:CMAKE_BUILD_TYPE\"><code>CMAKE_BUILD_TYPE</code></a> variable. The buildsystem for the IDEs such as Visual Studio and Xcode are generated independent of the build-configuration, and the actual build configuration is not known until build-time. Therefore, code such as</p> <pre data-language=\"cmake\">string(TOLOWER ${CMAKE_BUILD_TYPE} _type)\nif (_type STREQUAL debug)\n  target_compile_definitions(exe1 PRIVATE DEBUG_BUILD)\nendif()\n</pre> <p>may appear to work for <code>Makefile</code> based and <code>Ninja</code> generators, but is not portable to IDE generators. Additionally, the <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-1-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> configuration-mappings are not accounted for with code like this, so it should be avoided.</p> <p>The unary <code>TARGET_PROPERTY</code> generator expression and the <code>TARGET_POLICY</code> generator expression are evaluated with the consuming target context. This means that a usage requirement specification may be evaluated differently based on the consumer:</p> <pre data-language=\"cmake\">add_library(lib1 lib1.cpp)\ntarget_compile_definitions(lib1 INTERFACE\n  $&lt;$&lt;STREQUAL:$&lt;TARGET_PROPERTY:TYPE&gt;,EXECUTABLE&gt;:LIB1_WITH_EXE&gt;\n  $&lt;$&lt;STREQUAL:$&lt;TARGET_PROPERTY:TYPE&gt;,SHARED_LIBRARY&gt;:LIB1_WITH_SHARED_LIB&gt;\n  $&lt;$&lt;TARGET_POLICY:CMP0041&gt;:CONSUMER_CMP0041_NEW&gt;\n)\n\nadd_executable(exe1 exe1.cpp)\ntarget_link_libraries(exe1 lib1)\n\ncmake_policy(SET CMP0041 NEW)\n\nadd_library(shared_lib shared_lib.cpp)\ntarget_link_libraries(shared_lib lib1)\n</pre> <p>The <code>exe1</code> executable will be compiled with <code>-DLIB1_WITH_EXE</code>, while the <code>shared_lib</code> shared library will be compiled with <code>-DLIB1_WITH_SHARED_LIB</code> and <code>-DCONSUMER_CMP0041_NEW</code>, because policy <a class=\"reference internal\" href=\"../policy/cmp0041#policy:CMP0041\" title=\"CMP0041\" id=\"index-0-policy:CMP0041\"><code>CMP0041</code></a> is <code>NEW</code> at the point where the <code>shared_lib</code> target is created.</p> <p>The <code>BUILD_INTERFACE</code> expression wraps requirements which are only used when consumed from a target in the same buildsystem, or when consumed from a target exported to the build directory using the <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-0-command:export\"><code>export()</code></a> command. The <code>INSTALL_INTERFACE</code> expression wraps requirements which are only used when consumed from a target which has been installed and exported with the <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install(EXPORT)</code></a> command:</p> <pre data-language=\"cmake\">add_library(ClimbingStats climbingstats.cpp)\ntarget_compile_definitions(ClimbingStats INTERFACE\n  $&lt;BUILD_INTERFACE:ClimbingStats_FROM_BUILD_LOCATION&gt;\n  $&lt;INSTALL_INTERFACE:ClimbingStats_FROM_INSTALLED_LOCATION&gt;\n)\ninstall(TARGETS ClimbingStats EXPORT libExport ${InstallArgs})\ninstall(EXPORT libExport NAMESPACE Upstream::\n        DESTINATION lib/cmake/ClimbingStats)\nexport(EXPORT libExport NAMESPACE Upstream::)\n\nadd_executable(exe1 exe1.cpp)\ntarget_link_libraries(exe1 ClimbingStats)\n</pre> <p>In this case, the <code>exe1</code> executable will be compiled with <code>-DClimbingStats_FROM_BUILD_LOCATION</code>. The exporting commands generate <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-2-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets with either the <code>INSTALL_INTERFACE</code> or the <code>BUILD_INTERFACE</code> omitted, and the <code>*_INTERFACE</code> marker stripped away. A separate project consuming the <code>ClimbingStats</code> package would contain:</p> <pre data-language=\"cmake\">find_package(ClimbingStats REQUIRED)\n\nadd_executable(Downstream main.cpp)\ntarget_link_libraries(Downstream Upstream::ClimbingStats)\n</pre> <p>Depending on whether the <code>ClimbingStats</code> package was used from the build location or the install location, the <code>Downstream</code> target would be compiled with either <code>-DClimbingStats_FROM_BUILD_LOCATION</code> or <code>-DClimbingStats_FROM_INSTALL_LOCATION</code>. For more about packages and exporting see the <a class=\"reference internal\" href=\"cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-1-manual:cmake-packages(7)\"><code>cmake-packages(7)</code></a> manual.</p>  <h4 id=\"id5\">Include Directories and Usage Requirements</h4> <p id=\"include-directories-and-usage-requirements\">Include directories require some special consideration when specified as usage requirements and when used with generator expressions. The <a class=\"reference internal\" href=\"../command/target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-1-command:target_include_directories\"><code>target_include_directories()</code></a> command accepts both relative and absolute include directories:</p> <pre data-language=\"cmake\">add_library(lib1 lib1.cpp)\ntarget_include_directories(lib1 PRIVATE\n  /absolute/path\n  relative/path\n)\n</pre> <p>Relative paths are interpreted relative to the source directory where the command appears. Relative paths are not allowed in the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-4-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> of <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-3-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets.</p> <p>In cases where a non-trivial generator expression is used, the <code>INSTALL_PREFIX</code> expression may be used within the argument of an <code>INSTALL_INTERFACE</code> expression. It is a replacement marker which expands to the installation prefix when imported by a consuming project.</p> <p>Include directories usage requirements commonly differ between the build-tree and the install-tree. The <code>BUILD_INTERFACE</code> and <code>INSTALL_INTERFACE</code> generator expressions can be used to describe separate usage requirements based on the usage location. Relative paths are allowed within the <code>INSTALL_INTERFACE</code> expression and are interpreted relative to the installation prefix. For example:</p> <pre data-language=\"cmake\">add_library(ClimbingStats climbingstats.cpp)\ntarget_include_directories(ClimbingStats INTERFACE\n  $&lt;BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/generated&gt;\n  $&lt;INSTALL_INTERFACE:/absolute/path&gt;\n  $&lt;INSTALL_INTERFACE:relative/path&gt;\n  $&lt;INSTALL_INTERFACE:$&lt;INSTALL_PREFIX&gt;/$&lt;CONFIG&gt;/generated&gt;\n)\n</pre> <p>Two convenience APIs are provided relating to include directories usage requirements. The <a class=\"reference internal\" href=\"../variable/cmake_include_current_dir_in_interface#variable:CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE\" title=\"CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE\" id=\"index-1-variable:CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE\"><code>CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE</code></a> variable may be enabled, with an equivalent effect to:</p> <pre data-language=\"cmake\">set_property(TARGET tgt APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES\n  $&lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR};${CMAKE_CURRENT_BINARY_DIR}&gt;\n)\n</pre> <p>for each target affected. The convenience for installed targets is an <code>INCLUDES DESTINATION</code> component with the <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-2-command:install\"><code>install(TARGETS)</code></a> command:</p> <pre data-language=\"cmake\">install(TARGETS foo bar bat EXPORT tgts ${dest_args}\n  INCLUDES DESTINATION include\n)\ninstall(EXPORT tgts ${other_args})\ninstall(FILES ${headers} DESTINATION include)\n</pre> <p>This is equivalent to appending <code>${CMAKE_INSTALL_PREFIX}/include</code> to the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-5-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> of each of the installed <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-4-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets when generated by <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-3-command:install\"><code>install(EXPORT)</code></a>.</p> <p>When the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-6-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> of an <a class=\"reference internal\" href=\"#imported-targets\"><span>imported target</span></a> is consumed, the entries in the property are treated as <code>SYSTEM</code> include directories, as if they were listed in the <a class=\"reference internal\" href=\"../prop_tgt/interface_system_include_directories#prop_tgt:INTERFACE_SYSTEM_INCLUDE_DIRECTORIES\" title=\"INTERFACE_SYSTEM_INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INTERFACE_SYSTEM_INCLUDE_DIRECTORIES\"><code>INTERFACE_SYSTEM_INCLUDE_DIRECTORIES</code></a> of the dependency. This can result in omission of compiler warnings for headers found in those directories. This behavior for <a class=\"reference internal\" href=\"#imported-targets\"><span>Imported Targets</span></a> may be controlled with the <a class=\"reference internal\" href=\"../prop_tgt/no_system_from_imported#prop_tgt:NO_SYSTEM_FROM_IMPORTED\" title=\"NO_SYSTEM_FROM_IMPORTED\" id=\"index-0-prop_tgt:NO_SYSTEM_FROM_IMPORTED\"><code>NO_SYSTEM_FROM_IMPORTED</code></a> target property.</p> <p>If a binary target is linked transitively to a Mac OX framework, the <code>Headers</code> directory of the framework is also treated as a usage requirement. This has the same effect as passing the framework directory as an include directory.</p>    <h3 id=\"link-libraries-and-generator-expressions\">Link Libraries and Generator Expressions</h3> <p>Like build specifications, <a class=\"reference internal\" href=\"../prop_tgt/link_libraries#prop_tgt:LINK_LIBRARIES\" title=\"LINK_LIBRARIES\" id=\"index-0-prop_tgt:LINK_LIBRARIES\"><code>link libraries</code></a> may be specified with generator expression conditions. However, as consumption of usage requirements is based on collection from linked dependencies, there is an additional limitation that the link dependencies must form a “directed acyclic graph”. That is, if linking to a target is dependent on the value of a target property, that target property may not be dependent on the linked dependencies:</p> <pre data-language=\"cmake\">add_library(lib1 lib1.cpp)\nadd_library(lib2 lib2.cpp)\ntarget_link_libraries(lib1 PUBLIC\n  $&lt;$&lt;TARGET_PROPERTY:POSITION_INDEPENDENT_CODE&gt;:lib2&gt;\n)\nadd_library(lib3 lib3.cpp)\nset_property(TARGET lib3 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)\n\nadd_executable(exe1 exe1.cpp)\ntarget_link_libraries(exe1 lib1 lib3)\n</pre> <p>As the value of the <a class=\"reference internal\" href=\"../prop_tgt/position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-3-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> property of the <code>exe1</code> target is dependent on the linked libraries (<code>lib3</code>), and the edge of linking <code>exe1</code> is determined by the same <a class=\"reference internal\" href=\"../prop_tgt/position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-4-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> property, the dependency graph above contains a cycle. <a class=\"reference internal\" href=\"cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-3-manual:cmake(1)\"><code>cmake(1)</code></a> issues a diagnostic in this case.</p>   <h3 id=\"id6\">Output Artifacts</h3> <p id=\"output-artifacts\">The buildsystem targets created by the <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-3-command:add_library\"><code>add_library()</code></a> and <a class=\"reference internal\" href=\"../command/add_executable#command:add_executable\" title=\"add_executable\" id=\"index-2-command:add_executable\"><code>add_executable()</code></a> commands create rules to create binary outputs. The exact output location of the binaries can only be determined at generate-time because it can depend on the build-configuration and the link-language of linked dependencies etc. <code>TARGET_FILE</code>, <code>TARGET_LINKER_FILE</code> and related expressions can be used to access the name and location of generated binaries. These expressions do not work for <code>OBJECT</code> libraries however, as there is no single file generated by such libraries which is relevant to the expressions.</p> <p>There are three kinds of output artifacts that may be build by targets as detailed in the following sections. Their classification differs between DLL platforms and non-DLL platforms. All Windows-based systems including Cygwin are DLL platforms.</p>  <h4 id=\"id7\">Runtime Output Artifacts</h4> <p id=\"runtime-output-artifacts\">A <em>runtime</em> output artifact of a buildsystem target may be:</p> <ul class=\"simple\"> <li>The executable file (e.g. <code>.exe</code>) of an executable target created by the <a class=\"reference internal\" href=\"../command/add_executable#command:add_executable\" title=\"add_executable\" id=\"index-3-command:add_executable\"><code>add_executable()</code></a> command.</li> <li>On DLL platforms: the executable file (e.g. <code>.dll</code>) of a shared library target created by the <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-4-command:add_library\"><code>add_library()</code></a> command with the <code>SHARED</code> option.</li> </ul> <p>The <a class=\"reference internal\" href=\"../prop_tgt/runtime_output_directory#prop_tgt:RUNTIME_OUTPUT_DIRECTORY\" title=\"RUNTIME_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_DIRECTORY\"><code>RUNTIME_OUTPUT_DIRECTORY</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/runtime_output_name#prop_tgt:RUNTIME_OUTPUT_NAME\" title=\"RUNTIME_OUTPUT_NAME\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_NAME\"><code>RUNTIME_OUTPUT_NAME</code></a> target properties may be used to control runtime output artifact locations and names in the build tree.</p>   <h4 id=\"id8\">Library Output Artifacts</h4> <p id=\"library-output-artifacts\">A <em>library</em> output artifact of a buildsystem target may be:</p> <ul class=\"simple\"> <li>The loadable module file (e.g. <code>.dll</code> or <code>.so</code>) of a module library target created by the <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-5-command:add_library\"><code>add_library()</code></a> command with the <code>MODULE</code> option.</li> <li>On non-DLL platforms: the shared library file (e.g. <code>.so</code> or <code>.dylib</code>) of a shared shared library target created by the <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-6-command:add_library\"><code>add_library()</code></a> command with the <code>SHARED</code> option.</li> </ul> <p>The <a class=\"reference internal\" href=\"../prop_tgt/library_output_directory#prop_tgt:LIBRARY_OUTPUT_DIRECTORY\" title=\"LIBRARY_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:LIBRARY_OUTPUT_DIRECTORY\"><code>LIBRARY_OUTPUT_DIRECTORY</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/library_output_name#prop_tgt:LIBRARY_OUTPUT_NAME\" title=\"LIBRARY_OUTPUT_NAME\" id=\"index-0-prop_tgt:LIBRARY_OUTPUT_NAME\"><code>LIBRARY_OUTPUT_NAME</code></a> target properties may be used to control library output artifact locations and names in the build tree.</p>   <h4 id=\"id9\">Archive Output Artifacts</h4> <p id=\"archive-output-artifacts\">An <em>archive</em> output artifact of a buildsystem target may be:</p> <ul class=\"simple\"> <li>The static library file (e.g. <code>.lib</code> or <code>.a</code>) of a static library target created by the <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-7-command:add_library\"><code>add_library()</code></a> command with the <code>STATIC</code> option.</li> <li>On DLL platforms: the import library file (e.g. <code>.lib</code>) of a shared library target created by the <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-8-command:add_library\"><code>add_library()</code></a> command with the <code>SHARED</code> option. This file is only guaranteed to exist if the library exports at least one unmanaged symbol.</li> <li>On DLL platforms: the import library file (e.g. <code>.lib</code>) of an executable target created by the <a class=\"reference internal\" href=\"../command/add_executable#command:add_executable\" title=\"add_executable\" id=\"index-4-command:add_executable\"><code>add_executable()</code></a> command when its <a class=\"reference internal\" href=\"../prop_tgt/enable_exports#prop_tgt:ENABLE_EXPORTS\" title=\"ENABLE_EXPORTS\" id=\"index-0-prop_tgt:ENABLE_EXPORTS\"><code>ENABLE_EXPORTS</code></a> target property is set.</li> </ul> <p>The <a class=\"reference internal\" href=\"../prop_tgt/archive_output_directory#prop_tgt:ARCHIVE_OUTPUT_DIRECTORY\" title=\"ARCHIVE_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:ARCHIVE_OUTPUT_DIRECTORY\"><code>ARCHIVE_OUTPUT_DIRECTORY</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/archive_output_name#prop_tgt:ARCHIVE_OUTPUT_NAME\" title=\"ARCHIVE_OUTPUT_NAME\" id=\"index-0-prop_tgt:ARCHIVE_OUTPUT_NAME\"><code>ARCHIVE_OUTPUT_NAME</code></a> target properties may be used to control archive output artifact locations and names in the build tree.</p>    <h3 id=\"directory-scoped-commands\">Directory-Scoped Commands</h3> <p>The <a class=\"reference internal\" href=\"../command/target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-2-command:target_include_directories\"><code>target_include_directories()</code></a>, <a class=\"reference internal\" href=\"../command/target_compile_definitions#command:target_compile_definitions\" title=\"target_compile_definitions\" id=\"index-1-command:target_compile_definitions\"><code>target_compile_definitions()</code></a> and <a class=\"reference internal\" href=\"../command/target_compile_options#command:target_compile_options\" title=\"target_compile_options\" id=\"index-1-command:target_compile_options\"><code>target_compile_options()</code></a> commands have an effect on only one target at a time. The commands <a class=\"reference internal\" href=\"../command/add_definitions#command:add_definitions\" title=\"add_definitions\" id=\"index-0-command:add_definitions\"><code>add_definitions()</code></a>, <a class=\"reference internal\" href=\"../command/add_compile_options#command:add_compile_options\" title=\"add_compile_options\" id=\"index-0-command:add_compile_options\"><code>add_compile_options()</code></a> and <a class=\"reference internal\" href=\"../command/include_directories#command:include_directories\" title=\"include_directories\" id=\"index-0-command:include_directories\"><code>include_directories()</code></a> have a similar function, but operate at directory scope instead of target scope for convenience.</p>    <h2 id=\"pseudo-targets\">Pseudo Targets</h2> <p>Some target types do not represent outputs of the buildsystem, but only inputs such as external dependencies, aliases or other non-build artifacts. Pseudo targets are not represented in the generated buildsystem.</p>  <h3 id=\"id10\">Imported Targets</h3> <p id=\"imported-targets\">An <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-5-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target represents a pre-existing dependency. Usually such targets are defined by an upstream package and should be treated as immutable. It is not possible to use an <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-6-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target in the left-hand-side of the <a class=\"reference internal\" href=\"../command/target_compile_definitions#command:target_compile_definitions\" title=\"target_compile_definitions\" id=\"index-2-command:target_compile_definitions\"><code>target_compile_definitions()</code></a>, <a class=\"reference internal\" href=\"../command/target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-3-command:target_include_directories\"><code>target_include_directories()</code></a>, <a class=\"reference internal\" href=\"../command/target_compile_options#command:target_compile_options\" title=\"target_compile_options\" id=\"index-2-command:target_compile_options\"><code>target_compile_options()</code></a> or <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-10-command:target_link_libraries\"><code>target_link_libraries()</code></a> commands, as that would be an attempt to modify it. <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-7-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets are designed to be used only in the right-hand-side of those commands.</p> <p><a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-8-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets may have the same usage requirement properties populated as binary targets, such as <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-7-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/interface_compile_definitions#prop_tgt:INTERFACE_COMPILE_DEFINITIONS\" title=\"INTERFACE_COMPILE_DEFINITIONS\" id=\"index-2-prop_tgt:INTERFACE_COMPILE_DEFINITIONS\"><code>INTERFACE_COMPILE_DEFINITIONS</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/interface_compile_options#prop_tgt:INTERFACE_COMPILE_OPTIONS\" title=\"INTERFACE_COMPILE_OPTIONS\" id=\"index-2-prop_tgt:INTERFACE_COMPILE_OPTIONS\"><code>INTERFACE_COMPILE_OPTIONS</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-0-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a>, and <a class=\"reference internal\" href=\"../prop_tgt/interface_position_independent_code#prop_tgt:INTERFACE_POSITION_INDEPENDENT_CODE\" title=\"INTERFACE_POSITION_INDEPENDENT_CODE\" id=\"index-2-prop_tgt:INTERFACE_POSITION_INDEPENDENT_CODE\"><code>INTERFACE_POSITION_INDEPENDENT_CODE</code></a>.</p> <p>The <a class=\"reference internal\" href=\"../prop_tgt/location#prop_tgt:LOCATION\" title=\"LOCATION\" id=\"index-0-prop_tgt:LOCATION\"><code>LOCATION</code></a> may also be read from an IMPORTED target, though there is rarely reason to do so. Commands such as <a class=\"reference internal\" href=\"../command/add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-2-command:add_custom_command\"><code>add_custom_command()</code></a> can transparently use an <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-9-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> <a class=\"reference internal\" href=\"../prop_tgt/type#prop_tgt:TYPE\" title=\"TYPE\" id=\"index-1-prop_tgt:TYPE\"><code>EXECUTABLE</code></a> target as a <code>COMMAND</code> executable.</p> <p>The scope of the definition of an <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-10-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target is the directory where it was defined. It may be accessed and used from subdirectories, but not from parent directories or sibling directories. The scope is similar to the scope of a cmake variable.</p> <p>It is also possible to define a <code>GLOBAL</code> <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-11-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target which is accessible globally in the buildsystem.</p> <p>See the <a class=\"reference internal\" href=\"cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-2-manual:cmake-packages(7)\"><code>cmake-packages(7)</code></a> manual for more on creating packages with <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-12-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets.</p>   <h3 id=\"id11\">Alias Targets</h3> <p id=\"alias-targets\">An <code>ALIAS</code> target is a name which may be used interchangably with a binary target name in read-only contexts. A primary use-case for <code>ALIAS</code> targets is for example or unit test executables accompanying a library, which may be part of the same buildsystem or built separately based on user configuration.</p> <pre data-language=\"cmake\">add_library(lib1 lib1.cpp)\ninstall(TARGETS lib1 EXPORT lib1Export ${dest_args})\ninstall(EXPORT lib1Export NAMESPACE Upstream:: ${other_args})\n\nadd_library(Upstream::lib1 ALIAS lib1)\n</pre> <p>In another directory, we can link unconditionally to the <code>Upstream::lib1</code> target, which may be an <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-13-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target from a package, or an <code>ALIAS</code> target if built as part of the same buildsystem.</p> <pre data-language=\"cmake\">if (NOT TARGET Upstream::lib1)\n  find_package(lib1 REQUIRED)\nendif()\nadd_executable(exe1 exe1.cpp)\ntarget_link_libraries(exe1 Upstream::lib1)\n</pre> <p><code>ALIAS</code> targets are not mutable, installable or exportable. They are entirely local to the buildsystem description. A name can be tested for whether it is an <code>ALIAS</code> name by reading the <a class=\"reference internal\" href=\"../prop_tgt/aliased_target#prop_tgt:ALIASED_TARGET\" title=\"ALIASED_TARGET\" id=\"index-0-prop_tgt:ALIASED_TARGET\"><code>ALIASED_TARGET</code></a> property from it:</p> <pre data-language=\"cmake\">get_target_property(_aliased Upstream::lib1 ALIASED_TARGET)\nif(_aliased)\n  message(STATUS \"The name Upstream::lib1 is an ALIAS for ${_aliased}.\")\nendif()\n</pre>   <h3 id=\"id12\">Interface Libraries</h3> <p id=\"interface-libraries\">An <code>INTERFACE</code> target has no <a class=\"reference internal\" href=\"../prop_tgt/location#prop_tgt:LOCATION\" title=\"LOCATION\" id=\"index-1-prop_tgt:LOCATION\"><code>LOCATION</code></a> and is mutable, but is otherwise similar to an <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-14-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target.</p> <p>It may specify usage requirements such as <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-8-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/interface_compile_definitions#prop_tgt:INTERFACE_COMPILE_DEFINITIONS\" title=\"INTERFACE_COMPILE_DEFINITIONS\" id=\"index-3-prop_tgt:INTERFACE_COMPILE_DEFINITIONS\"><code>INTERFACE_COMPILE_DEFINITIONS</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/interface_compile_options#prop_tgt:INTERFACE_COMPILE_OPTIONS\" title=\"INTERFACE_COMPILE_OPTIONS\" id=\"index-3-prop_tgt:INTERFACE_COMPILE_OPTIONS\"><code>INTERFACE_COMPILE_OPTIONS</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-1-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/interface_sources#prop_tgt:INTERFACE_SOURCES\" title=\"INTERFACE_SOURCES\" id=\"index-1-prop_tgt:INTERFACE_SOURCES\"><code>INTERFACE_SOURCES</code></a>, and <a class=\"reference internal\" href=\"../prop_tgt/interface_position_independent_code#prop_tgt:INTERFACE_POSITION_INDEPENDENT_CODE\" title=\"INTERFACE_POSITION_INDEPENDENT_CODE\" id=\"index-3-prop_tgt:INTERFACE_POSITION_INDEPENDENT_CODE\"><code>INTERFACE_POSITION_INDEPENDENT_CODE</code></a>. Only the <code>INTERFACE</code> modes of the <a class=\"reference internal\" href=\"../command/target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-4-command:target_include_directories\"><code>target_include_directories()</code></a>, <a class=\"reference internal\" href=\"../command/target_compile_definitions#command:target_compile_definitions\" title=\"target_compile_definitions\" id=\"index-3-command:target_compile_definitions\"><code>target_compile_definitions()</code></a>, <a class=\"reference internal\" href=\"../command/target_compile_options#command:target_compile_options\" title=\"target_compile_options\" id=\"index-3-command:target_compile_options\"><code>target_compile_options()</code></a>, <a class=\"reference internal\" href=\"../command/target_sources#command:target_sources\" title=\"target_sources\" id=\"index-0-command:target_sources\"><code>target_sources()</code></a>, and <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-11-command:target_link_libraries\"><code>target_link_libraries()</code></a> commands may be used with <code>INTERFACE</code> libraries.</p> <p>A primary use-case for <code>INTERFACE</code> libraries is header-only libraries.</p> <pre data-language=\"cmake\">add_library(Eigen INTERFACE)\ntarget_include_directories(Eigen INTERFACE\n  $&lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src&gt;\n  $&lt;INSTALL_INTERFACE:include/Eigen&gt;\n)\n\nadd_executable(exe1 exe1.cpp)\ntarget_link_libraries(exe1 Eigen)\n</pre> <p>Here, the usage requirements from the <code>Eigen</code> target are consumed and used when compiling, but it has no effect on linking.</p> <p>Another use-case is to employ an entirely target-focussed design for usage requirements:</p> <pre data-language=\"cmake\">add_library(pic_on INTERFACE)\nset_property(TARGET pic_on PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)\nadd_library(pic_off INTERFACE)\nset_property(TARGET pic_off PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE OFF)\n\nadd_library(enable_rtti INTERFACE)\ntarget_compile_options(enable_rtti INTERFACE\n  $&lt;$&lt;OR:$&lt;COMPILER_ID:GNU&gt;,$&lt;COMPILER_ID:Clang&gt;&gt;:-rtti&gt;\n)\n\nadd_executable(exe1 exe1.cpp)\ntarget_link_libraries(exe1 pic_on enable_rtti)\n</pre> <p>This way, the build specification of <code>exe1</code> is expressed entirely as linked targets, and the complexity of compiler-specific flags is encapsulated in an <code>INTERFACE</code> library target.</p> <p>The properties permitted to be set on or read from an <code>INTERFACE</code> library are:</p> <ul class=\"simple\"> <li>Properties matching <code>INTERFACE_*</code>\n</li> <li>Built-in properties matching <code>COMPATIBLE_INTERFACE_*</code>\n</li> <li><code>EXPORT_NAME</code></li> <li><code>IMPORTED</code></li> <li><code>NAME</code></li> <li>Properties matching <code>MAP_IMPORTED_CONFIG_*</code>\n</li> </ul> <p><code>INTERFACE</code> libraries may be installed and exported. Any content they refer to must be installed separately:</p> <pre data-language=\"cmake\">add_library(Eigen INTERFACE)\ntarget_include_directories(Eigen INTERFACE\n  $&lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src&gt;\n  $&lt;INSTALL_INTERFACE:include/Eigen&gt;\n)\n\ninstall(TARGETS Eigen EXPORT eigenExport)\ninstall(EXPORT eigenExport NAMESPACE Upstream::\n  DESTINATION lib/cmake/Eigen\n)\ninstall(FILES\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/eigen.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/vector.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/matrix.h\n  DESTINATION include/Eigen\n)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-buildsystem.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-buildsystem.7.html</a>\n  </p>\n</div>\n","manual/cmake-variables.7":"<h1 id=\"manual:cmake-variables(7)\">cmake-variables(7)</h1>   <ul> <li><a class=\"reference internal\" href=\"#variables-that-provide-information\" id=\"id2\">Variables that Provide Information</a></li> <li><a class=\"reference internal\" href=\"#variables-that-change-behavior\" id=\"id3\">Variables that Change Behavior</a></li> <li><a class=\"reference internal\" href=\"#variables-that-describe-the-system\" id=\"id4\">Variables that Describe the System</a></li> <li><a class=\"reference internal\" href=\"#variables-that-control-the-build\" id=\"id5\">Variables that Control the Build</a></li> <li><a class=\"reference internal\" href=\"#variables-for-languages\" id=\"id6\">Variables for Languages</a></li> <li><a class=\"reference internal\" href=\"#variables-for-ctest\" id=\"id7\">Variables for CTest</a></li> <li><a class=\"reference internal\" href=\"#variables-for-cpack\" id=\"id8\">Variables for CPack</a></li> </ul>\n   <h2 id=\"variables-that-provide-information\">Variables that Provide Information</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_argc\">CMAKE_ARGC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_argv0\">CMAKE_ARGV0</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_ar\">CMAKE_AR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_binary_dir\">CMAKE_BINARY_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_build_tool\">CMAKE_BUILD_TOOL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_cachefile_dir\">CMAKE_CACHEFILE_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_cache_major_version\">CMAKE_CACHE_MAJOR_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_cache_minor_version\">CMAKE_CACHE_MINOR_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_cache_patch_version\">CMAKE_CACHE_PATCH_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_cfg_intdir\">CMAKE_CFG_INTDIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_command\">CMAKE_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_crosscompiling\">CMAKE_CROSSCOMPILING</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_crosscompiling_emulator\">CMAKE_CROSSCOMPILING_EMULATOR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_ctest_command\">CMAKE_CTEST_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_current_binary_dir\">CMAKE_CURRENT_BINARY_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_current_list_dir\">CMAKE_CURRENT_LIST_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_current_list_file\">CMAKE_CURRENT_LIST_FILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_current_list_line\">CMAKE_CURRENT_LIST_LINE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_current_source_dir\">CMAKE_CURRENT_SOURCE_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_dl_libs\">CMAKE_DL_LIBS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_edit_command\">CMAKE_EDIT_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_executable_suffix\">CMAKE_EXECUTABLE_SUFFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_extra_generator\">CMAKE_EXTRA_GENERATOR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_extra_shared_library_suffixes\">CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_package_name\">CMAKE_FIND_PACKAGE_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_generator\">CMAKE_GENERATOR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_generator_platform\">CMAKE_GENERATOR_PLATFORM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_generator_toolset\">CMAKE_GENERATOR_TOOLSET</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_home_directory\">CMAKE_HOME_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_import_library_prefix\">CMAKE_IMPORT_LIBRARY_PREFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_import_library_suffix\">CMAKE_IMPORT_LIBRARY_SUFFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_job_pool_compile\">CMAKE_JOB_POOL_COMPILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_job_pool_link\">CMAKE_JOB_POOL_LINK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_link_library_suffix\">CMAKE_LINK_LIBRARY_SUFFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_link_search_end_static\">CMAKE_LINK_SEARCH_END_STATIC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_link_search_start_static\">CMAKE_LINK_SEARCH_START_STATIC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_major_version\">CMAKE_MAJOR_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_make_program\">CMAKE_MAKE_PROGRAM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_match_count\">CMAKE_MATCH_COUNT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_minimum_required_version\">CMAKE_MINIMUM_REQUIRED_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_minor_version\">CMAKE_MINOR_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_parent_list_file\">CMAKE_PARENT_LIST_FILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_patch_version\">CMAKE_PATCH_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_project_name\">CMAKE_PROJECT_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_ranlib\">CMAKE_RANLIB</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_root\">CMAKE_ROOT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_script_mode_file\">CMAKE_SCRIPT_MODE_FILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_shared_library_prefix\">CMAKE_SHARED_LIBRARY_PREFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_shared_library_suffix\">CMAKE_SHARED_LIBRARY_SUFFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_shared_module_prefix\">CMAKE_SHARED_MODULE_PREFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_shared_module_suffix\">CMAKE_SHARED_MODULE_SUFFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_sizeof_void_p\">CMAKE_SIZEOF_VOID_P</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_skip_install_rules\">CMAKE_SKIP_INSTALL_RULES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_skip_rpath\">CMAKE_SKIP_RPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_source_dir\">CMAKE_SOURCE_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_standard_libraries\">CMAKE_STANDARD_LIBRARIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_static_library_prefix\">CMAKE_STATIC_LIBRARY_PREFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_static_library_suffix\">CMAKE_STATIC_LIBRARY_SUFFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_toolchain_file\">CMAKE_TOOLCHAIN_FILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_tweak_version\">CMAKE_TWEAK_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_verbose_makefile\">CMAKE_VERBOSE_MAKEFILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_version\">CMAKE_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_vs_devenv_command\">CMAKE_VS_DEVENV_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_vs_intel_fortran_project_version\">CMAKE_VS_INTEL_Fortran_PROJECT_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_vs_msbuild_command\">CMAKE_VS_MSBUILD_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_vs_msdev_command\">CMAKE_VS_MSDEV_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_vs_nsighttegra_version\">CMAKE_VS_NsightTegra_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_vs_platform_name\">CMAKE_VS_PLATFORM_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_vs_platform_toolset\">CMAKE_VS_PLATFORM_TOOLSET</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_vs_windows_target_platform_version\">CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_xcode_platform_toolset\">CMAKE_XCODE_PLATFORM_TOOLSET</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project_binary_dir\">PROJECT_BINARY_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project-name_binary_dir\">&lt;PROJECT-NAME&gt;_BINARY_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project_name\">PROJECT_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project-name_source_dir\">&lt;PROJECT-NAME&gt;_SOURCE_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project-name_version\">&lt;PROJECT-NAME&gt;_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project-name_version_major\">&lt;PROJECT-NAME&gt;_VERSION_MAJOR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project-name_version_minor\">&lt;PROJECT-NAME&gt;_VERSION_MINOR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project-name_version_patch\">&lt;PROJECT-NAME&gt;_VERSION_PATCH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project-name_version_tweak\">&lt;PROJECT-NAME&gt;_VERSION_TWEAK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project_source_dir\">PROJECT_SOURCE_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project_version\">PROJECT_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project_version_major\">PROJECT_VERSION_MAJOR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project_version_minor\">PROJECT_VERSION_MINOR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project_version_patch\">PROJECT_VERSION_PATCH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/project_version_tweak\">PROJECT_VERSION_TWEAK</a></li> </ul>    <h2 id=\"variables-that-change-behavior\">Variables that Change Behavior</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/build_shared_libs\">BUILD_SHARED_LIBS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_absolute_destination_files\">CMAKE_ABSOLUTE_DESTINATION_FILES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_appbundle_path\">CMAKE_APPBUNDLE_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_automoc_relaxed_mode\">CMAKE_AUTOMOC_RELAXED_MODE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_backwards_compatibility\">CMAKE_BACKWARDS_COMPATIBILITY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_build_type\">CMAKE_BUILD_TYPE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_color_makefile\">CMAKE_COLOR_MAKEFILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_configuration_types\">CMAKE_CONFIGURATION_TYPES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_debug_target_properties\">CMAKE_DEBUG_TARGET_PROPERTIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_disable_find_package_packagename\">CMAKE_DISABLE_FIND_PACKAGE_&lt;PackageName&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_error_deprecated\">CMAKE_ERROR_DEPRECATED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_error_on_absolute_install_destination\">CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_export_compile_commands\">CMAKE_EXPORT_COMPILE_COMMANDS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_export_no_package_registry\">CMAKE_EXPORT_NO_PACKAGE_REGISTRY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_sysroot\">CMAKE_SYSROOT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_appbundle\">CMAKE_FIND_APPBUNDLE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_framework\">CMAKE_FIND_FRAMEWORK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_library_prefixes\">CMAKE_FIND_LIBRARY_PREFIXES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_library_suffixes\">CMAKE_FIND_LIBRARY_SUFFIXES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_no_install_prefix\">CMAKE_FIND_NO_INSTALL_PREFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_package_no_package_registry\">CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_package_no_system_package_registry\">CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_package_warn_no_module\">CMAKE_FIND_PACKAGE_WARN_NO_MODULE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_root_path\">CMAKE_FIND_ROOT_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_root_path_mode_include\">CMAKE_FIND_ROOT_PATH_MODE_INCLUDE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_root_path_mode_library\">CMAKE_FIND_ROOT_PATH_MODE_LIBRARY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_root_path_mode_package\">CMAKE_FIND_ROOT_PATH_MODE_PACKAGE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_find_root_path_mode_program\">CMAKE_FIND_ROOT_PATH_MODE_PROGRAM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_framework_path\">CMAKE_FRAMEWORK_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_ignore_path\">CMAKE_IGNORE_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_include_path\">CMAKE_INCLUDE_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_include_directories_before\">CMAKE_INCLUDE_DIRECTORIES_BEFORE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_include_directories_project_before\">CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_install_default_component_name\">CMAKE_INSTALL_DEFAULT_COMPONENT_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_install_message\">CMAKE_INSTALL_MESSAGE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_install_prefix\">CMAKE_INSTALL_PREFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_library_path\">CMAKE_LIBRARY_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_mfc_flag\">CMAKE_MFC_FLAG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_module_path\">CMAKE_MODULE_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_not_using_config_flags\">CMAKE_NOT_USING_CONFIG_FLAGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_policy_default_cmpnnnn\">CMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_policy_warning_cmpnnnn\">CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_prefix_path\">CMAKE_PREFIX_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_program_path\">CMAKE_PROGRAM_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_project_project-name_include\">CMAKE_PROJECT_&lt;PROJECT-NAME&gt;_INCLUDE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_skip_install_all_dependency\">CMAKE_SKIP_INSTALL_ALL_DEPENDENCY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_staging_prefix\">CMAKE_STAGING_PREFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_system_appbundle_path\">CMAKE_SYSTEM_APPBUNDLE_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_system_framework_path\">CMAKE_SYSTEM_FRAMEWORK_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_system_ignore_path\">CMAKE_SYSTEM_IGNORE_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_system_include_path\">CMAKE_SYSTEM_INCLUDE_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_system_library_path\">CMAKE_SYSTEM_LIBRARY_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_system_prefix_path\">CMAKE_SYSTEM_PREFIX_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_system_program_path\">CMAKE_SYSTEM_PROGRAM_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_user_make_rules_override\">CMAKE_USER_MAKE_RULES_OVERRIDE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_warn_deprecated\">CMAKE_WARN_DEPRECATED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_warn_on_absolute_install_destination\">CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION</a></li> </ul>    <h2 id=\"variables-that-describe-the-system\">Variables that Describe the System</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/apple\">APPLE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/borland\">BORLAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_cl_64\">CMAKE_CL_64</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_compiler_2005\">CMAKE_COMPILER_2005</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_host_apple\">CMAKE_HOST_APPLE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_host_system_name\">CMAKE_HOST_SYSTEM_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_host_system_processor\">CMAKE_HOST_SYSTEM_PROCESSOR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_host_system\">CMAKE_HOST_SYSTEM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_host_system_version\">CMAKE_HOST_SYSTEM_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_host_unix\">CMAKE_HOST_UNIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_host_win32\">CMAKE_HOST_WIN32</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_library_architecture_regex\">CMAKE_LIBRARY_ARCHITECTURE_REGEX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_library_architecture\">CMAKE_LIBRARY_ARCHITECTURE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_object_path_max\">CMAKE_OBJECT_PATH_MAX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_system_name\">CMAKE_SYSTEM_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_system_processor\">CMAKE_SYSTEM_PROCESSOR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_system\">CMAKE_SYSTEM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_system_version\">CMAKE_SYSTEM_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cygwin\">CYGWIN</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/env\">ENV</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ghs-multi\">GHS-MULTI</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/mingw\">MINGW</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/msvc10\">MSVC10</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/msvc11\">MSVC11</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/msvc12\">MSVC12</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/msvc14\">MSVC14</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/msvc60\">MSVC60</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/msvc70\">MSVC70</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/msvc71\">MSVC71</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/msvc80\">MSVC80</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/msvc90\">MSVC90</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/msvc_ide\">MSVC_IDE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/msvc\">MSVC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/msvc_version\">MSVC_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/unix\">UNIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/win32\">WIN32</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/wince\">WINCE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/windows_phone\">WINDOWS_PHONE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/windows_store\">WINDOWS_STORE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/xcode_version\">XCODE_VERSION</a></li> </ul>    <h2 id=\"variables-that-control-the-build\">Variables that Control the Build</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_ant_additional_options\">CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_api\">CMAKE_ANDROID_API</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_api_min\">CMAKE_ANDROID_API_MIN</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_arch\">CMAKE_ANDROID_ARCH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_assets_directories\">CMAKE_ANDROID_ASSETS_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_gui\">CMAKE_ANDROID_GUI</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_jar_dependencies\">CMAKE_ANDROID_JAR_DEPENDENCIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_jar_directories\">CMAKE_ANDROID_JAR_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_java_source_dir\">CMAKE_ANDROID_JAVA_SOURCE_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_native_lib_dependencies\">CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_native_lib_directories\">CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_process_max\">CMAKE_ANDROID_PROCESS_MAX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_proguard\">CMAKE_ANDROID_PROGUARD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_proguard_config_path\">CMAKE_ANDROID_PROGUARD_CONFIG_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_secure_props_path\">CMAKE_ANDROID_SECURE_PROPS_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_skip_ant_step\">CMAKE_ANDROID_SKIP_ANT_STEP</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_android_stl_type\">CMAKE_ANDROID_STL_TYPE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_archive_output_directory\">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_archive_output_directory_config\">CMAKE_ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_automoc_moc_options\">CMAKE_AUTOMOC_MOC_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_automoc\">CMAKE_AUTOMOC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_autorcc\">CMAKE_AUTORCC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_autorcc_options\">CMAKE_AUTORCC_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_autouic\">CMAKE_AUTOUIC</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_autouic_options\">CMAKE_AUTOUIC_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_build_with_install_rpath\">CMAKE_BUILD_WITH_INSTALL_RPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_compile_pdb_output_directory\">CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_compile_pdb_output_directory_config\">CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_config_postfix\">CMAKE_&lt;CONFIG&gt;_POSTFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_debug_postfix\">CMAKE_DEBUG_POSTFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_enable_exports\">CMAKE_ENABLE_EXPORTS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_exe_linker_flags_config\">CMAKE_EXE_LINKER_FLAGS_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_exe_linker_flags\">CMAKE_EXE_LINKER_FLAGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_fortran_format\">CMAKE_Fortran_FORMAT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_fortran_module_directory\">CMAKE_Fortran_MODULE_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_gnutoms\">CMAKE_GNUtoMS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_include_current_dir_in_interface\">CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_include_current_dir\">CMAKE_INCLUDE_CURRENT_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_install_name_dir\">CMAKE_INSTALL_NAME_DIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_install_rpath\">CMAKE_INSTALL_RPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_install_rpath_use_link_path\">CMAKE_INSTALL_RPATH_USE_LINK_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_ios_install_combined\">CMAKE_IOS_INSTALL_COMBINED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_compiler_launcher\">CMAKE_&lt;LANG&gt;_COMPILER_LAUNCHER</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_include_what_you_use\">CMAKE_&lt;LANG&gt;_INCLUDE_WHAT_YOU_USE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_visibility_preset\">CMAKE_&lt;LANG&gt;_VISIBILITY_PRESET</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_library_output_directory\">CMAKE_LIBRARY_OUTPUT_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_library_output_directory_config\">CMAKE_LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_library_path_flag\">CMAKE_LIBRARY_PATH_FLAG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_link_def_file_flag\">CMAKE_LINK_DEF_FILE_FLAG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_link_depends_no_shared\">CMAKE_LINK_DEPENDS_NO_SHARED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_link_interface_libraries\">CMAKE_LINK_INTERFACE_LIBRARIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_link_library_file_flag\">CMAKE_LINK_LIBRARY_FILE_FLAG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_link_library_flag\">CMAKE_LINK_LIBRARY_FLAG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_macosx_bundle\">CMAKE_MACOSX_BUNDLE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_macosx_rpath\">CMAKE_MACOSX_RPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_map_imported_config_config\">CMAKE_MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_module_linker_flags_config\">CMAKE_MODULE_LINKER_FLAGS_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_module_linker_flags\">CMAKE_MODULE_LINKER_FLAGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_no_builtin_chrpath\">CMAKE_NO_BUILTIN_CHRPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_no_system_from_imported\">CMAKE_NO_SYSTEM_FROM_IMPORTED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_osx_architectures\">CMAKE_OSX_ARCHITECTURES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_osx_deployment_target\">CMAKE_OSX_DEPLOYMENT_TARGET</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_osx_sysroot\">CMAKE_OSX_SYSROOT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_pdb_output_directory\">CMAKE_PDB_OUTPUT_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_pdb_output_directory_config\">CMAKE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_position_independent_code\">CMAKE_POSITION_INDEPENDENT_CODE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_runtime_output_directory\">CMAKE_RUNTIME_OUTPUT_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_runtime_output_directory_config\">CMAKE_RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_shared_linker_flags_config\">CMAKE_SHARED_LINKER_FLAGS_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_shared_linker_flags\">CMAKE_SHARED_LINKER_FLAGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_skip_build_rpath\">CMAKE_SKIP_BUILD_RPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_skip_install_rpath\">CMAKE_SKIP_INSTALL_RPATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_static_linker_flags_config\">CMAKE_STATIC_LINKER_FLAGS_&lt;CONFIG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_static_linker_flags\">CMAKE_STATIC_LINKER_FLAGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_try_compile_configuration\">CMAKE_TRY_COMPILE_CONFIGURATION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_use_relative_paths\">CMAKE_USE_RELATIVE_PATHS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_visibility_inlines_hidden\">CMAKE_VISIBILITY_INLINES_HIDDEN</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_vs_include_install_to_default_build\">CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_windows_export_all_symbols\">CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_win32_executable\">CMAKE_WIN32_EXECUTABLE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_xcode_attribute_an-attribute\">CMAKE_XCODE_ATTRIBUTE_&lt;an-attribute&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/executable_output_path\">EXECUTABLE_OUTPUT_PATH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/library_output_path\">LIBRARY_OUTPUT_PATH</a></li> </ul>    <h2 id=\"variables-for-languages\">Variables for Languages</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_compiler_is_gnulang\">CMAKE_COMPILER_IS_GNU&lt;LANG&gt;</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_c_compile_features\">CMAKE_C_COMPILE_FEATURES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_c_extensions\">CMAKE_C_EXTENSIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_c_standard\">CMAKE_C_STANDARD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_c_standard_required\">CMAKE_C_STANDARD_REQUIRED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_cxx_compile_features\">CMAKE_CXX_COMPILE_FEATURES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_cxx_extensions\">CMAKE_CXX_EXTENSIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_cxx_standard\">CMAKE_CXX_STANDARD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_cxx_standard_required\">CMAKE_CXX_STANDARD_REQUIRED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_fortran_moddir_default\">CMAKE_Fortran_MODDIR_DEFAULT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_fortran_moddir_flag\">CMAKE_Fortran_MODDIR_FLAG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_fortran_modout_flag\">CMAKE_Fortran_MODOUT_FLAG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_internal_platform_abi\">CMAKE_INTERNAL_PLATFORM_ABI</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_archive_append\">CMAKE_&lt;LANG&gt;_ARCHIVE_APPEND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_archive_create\">CMAKE_&lt;LANG&gt;_ARCHIVE_CREATE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_archive_finish\">CMAKE_&lt;LANG&gt;_ARCHIVE_FINISH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_compile_object\">CMAKE_&lt;LANG&gt;_COMPILE_OBJECT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_compiler_abi\">CMAKE_&lt;LANG&gt;_COMPILER_ABI</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_compiler_id\">CMAKE_&lt;LANG&gt;_COMPILER_ID</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_compiler_loaded\">CMAKE_&lt;LANG&gt;_COMPILER_LOADED</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_compiler\">CMAKE_&lt;LANG&gt;_COMPILER</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_compiler_external_toolchain\">CMAKE_&lt;LANG&gt;_COMPILER_EXTERNAL_TOOLCHAIN</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_compiler_target\">CMAKE_&lt;LANG&gt;_COMPILER_TARGET</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_compiler_version\">CMAKE_&lt;LANG&gt;_COMPILER_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_create_shared_library\">CMAKE_&lt;LANG&gt;_CREATE_SHARED_LIBRARY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_create_shared_module\">CMAKE_&lt;LANG&gt;_CREATE_SHARED_MODULE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_create_static_library\">CMAKE_&lt;LANG&gt;_CREATE_STATIC_LIBRARY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_flags_debug\">CMAKE_&lt;LANG&gt;_FLAGS_DEBUG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_flags_minsizerel\">CMAKE_&lt;LANG&gt;_FLAGS_MINSIZEREL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_flags_release\">CMAKE_&lt;LANG&gt;_FLAGS_RELEASE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_flags_relwithdebinfo\">CMAKE_&lt;LANG&gt;_FLAGS_RELWITHDEBINFO</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_flags\">CMAKE_&lt;LANG&gt;_FLAGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_ghs_kernel_flags_debug\">CMAKE_&lt;LANG&gt;_GHS_KERNEL_FLAGS_DEBUG</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_ghs_kernel_flags_minsizerel\">CMAKE_&lt;LANG&gt;_GHS_KERNEL_FLAGS_MINSIZEREL</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_ghs_kernel_flags_release\">CMAKE_&lt;LANG&gt;_GHS_KERNEL_FLAGS_RELEASE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_ghs_kernel_flags_relwithdebinfo\">CMAKE_&lt;LANG&gt;_GHS_KERNEL_FLAGS_RELWITHDEBINFO</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_ignore_extensions\">CMAKE_&lt;LANG&gt;_IGNORE_EXTENSIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_implicit_include_directories\">CMAKE_&lt;LANG&gt;_IMPLICIT_INCLUDE_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_implicit_link_directories\">CMAKE_&lt;LANG&gt;_IMPLICIT_LINK_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_implicit_link_framework_directories\">CMAKE_&lt;LANG&gt;_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_implicit_link_libraries\">CMAKE_&lt;LANG&gt;_IMPLICIT_LINK_LIBRARIES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_library_architecture\">CMAKE_&lt;LANG&gt;_LIBRARY_ARCHITECTURE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_linker_preference_propagates\">CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE_PROPAGATES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_linker_preference\">CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_link_executable\">CMAKE_&lt;LANG&gt;_LINK_EXECUTABLE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_output_extension\">CMAKE_&lt;LANG&gt;_OUTPUT_EXTENSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_platform_id\">CMAKE_&lt;LANG&gt;_PLATFORM_ID</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_simulate_id\">CMAKE_&lt;LANG&gt;_SIMULATE_ID</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_simulate_version\">CMAKE_&lt;LANG&gt;_SIMULATE_VERSION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_sizeof_data_ptr\">CMAKE_&lt;LANG&gt;_SIZEOF_DATA_PTR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_lang_source_file_extensions\">CMAKE_&lt;LANG&gt;_SOURCE_FILE_EXTENSIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cmake_user_make_rules_override_lang\">CMAKE_USER_MAKE_RULES_OVERRIDE_&lt;LANG&gt;</a></li> </ul>    <h2 id=\"variables-for-ctest\">Variables for CTest</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_binary_directory\">CTEST_BINARY_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_build_command\">CTEST_BUILD_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_build_name\">CTEST_BUILD_NAME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_bzr_command\">CTEST_BZR_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_bzr_update_options\">CTEST_BZR_UPDATE_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_change_id\">CTEST_CHANGE_ID</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_checkout_command\">CTEST_CHECKOUT_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_configuration_type\">CTEST_CONFIGURATION_TYPE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_configure_command\">CTEST_CONFIGURE_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_coverage_command\">CTEST_COVERAGE_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_coverage_extra_flags\">CTEST_COVERAGE_EXTRA_FLAGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_curl_options\">CTEST_CURL_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_coverage_exclude\">CTEST_CUSTOM_COVERAGE_EXCLUDE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_error_exception\">CTEST_CUSTOM_ERROR_EXCEPTION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_error_match\">CTEST_CUSTOM_ERROR_MATCH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_error_post_context\">CTEST_CUSTOM_ERROR_POST_CONTEXT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_error_pre_context\">CTEST_CUSTOM_ERROR_PRE_CONTEXT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_maximum_failed_test_output_size\">CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_maximum_number_of_errors\">CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_maximum_number_of_warnings\">CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_maximum_passed_test_output_size\">CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_memcheck_ignore\">CTEST_CUSTOM_MEMCHECK_IGNORE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_post_memcheck\">CTEST_CUSTOM_POST_MEMCHECK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_post_test\">CTEST_CUSTOM_POST_TEST</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_pre_memcheck\">CTEST_CUSTOM_PRE_MEMCHECK</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_pre_test\">CTEST_CUSTOM_PRE_TEST</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_test_ignore\">CTEST_CUSTOM_TEST_IGNORE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_warning_exception\">CTEST_CUSTOM_WARNING_EXCEPTION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_custom_warning_match\">CTEST_CUSTOM_WARNING_MATCH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_cvs_checkout\">CTEST_CVS_CHECKOUT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_cvs_command\">CTEST_CVS_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_cvs_update_options\">CTEST_CVS_UPDATE_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_drop_location\">CTEST_DROP_LOCATION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_drop_method\">CTEST_DROP_METHOD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_drop_site\">CTEST_DROP_SITE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_drop_site_cdash\">CTEST_DROP_SITE_CDASH</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_drop_site_password\">CTEST_DROP_SITE_PASSWORD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_drop_site_user\">CTEST_DROP_SITE_USER</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_extra_coverage_glob\">CTEST_EXTRA_COVERAGE_GLOB</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_git_command\">CTEST_GIT_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_git_update_custom\">CTEST_GIT_UPDATE_CUSTOM</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_git_update_options\">CTEST_GIT_UPDATE_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_hg_command\">CTEST_HG_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_hg_update_options\">CTEST_HG_UPDATE_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_memorycheck_command\">CTEST_MEMORYCHECK_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_memorycheck_command_options\">CTEST_MEMORYCHECK_COMMAND_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_memorycheck_sanitizer_options\">CTEST_MEMORYCHECK_SANITIZER_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_memorycheck_suppressions_file\">CTEST_MEMORYCHECK_SUPPRESSIONS_FILE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_memorycheck_type\">CTEST_MEMORYCHECK_TYPE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_nightly_start_time\">CTEST_NIGHTLY_START_TIME</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_p4_client\">CTEST_P4_CLIENT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_p4_command\">CTEST_P4_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_p4_options\">CTEST_P4_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_p4_update_options\">CTEST_P4_UPDATE_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_scp_command\">CTEST_SCP_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_site\">CTEST_SITE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_source_directory\">CTEST_SOURCE_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_svn_command\">CTEST_SVN_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_svn_options\">CTEST_SVN_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_svn_update_options\">CTEST_SVN_UPDATE_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_test_load\">CTEST_TEST_LOAD</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_test_timeout\">CTEST_TEST_TIMEOUT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_trigger_site\">CTEST_TRIGGER_SITE</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_update_command\">CTEST_UPDATE_COMMAND</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_update_options\">CTEST_UPDATE_OPTIONS</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_update_version_only\">CTEST_UPDATE_VERSION_ONLY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/ctest_use_launchers\">CTEST_USE_LAUNCHERS</a></li> </ul>    <h2 id=\"variables-for-cpack\">Variables for CPack</h2>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cpack_absolute_destination_files\">CPACK_ABSOLUTE_DESTINATION_FILES</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cpack_component_include_toplevel_directory\">CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cpack_error_on_absolute_install_destination\">CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cpack_include_toplevel_directory\">CPACK_INCLUDE_TOPLEVEL_DIRECTORY</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cpack_install_script\">CPACK_INSTALL_SCRIPT</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cpack_packaging_install_prefix\">CPACK_PACKAGING_INSTALL_PREFIX</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cpack_set_destdir\">CPACK_SET_DESTDIR</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../variable/cpack_warn_on_absolute_install_destination\">CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-variables.7.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-variables.7.html</a>\n  </p>\n</div>\n","command/find_package":"<h1 id=\"command:find_package\">find_package</h1> <p id=\"find-package\">Load settings for an external project.</p> <pre data-language=\"python\">find_package(&lt;package&gt; [version] [EXACT] [QUIET] [MODULE]\n             [REQUIRED] [[COMPONENTS] [components...]]\n             [OPTIONAL_COMPONENTS components...]\n             [NO_POLICY_SCOPE])\n</pre> <p>Finds and loads settings from an external project. <code>&lt;package&gt;_FOUND</code> will be set to indicate whether the package was found. When the package is found package-specific information is provided through variables and <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>Imported Targets</span></a> documented by the package itself. The <code>QUIET</code> option disables messages if the package cannot be found. The <code>MODULE</code> option disables the second signature documented below. The <code>REQUIRED</code> option stops processing with an error message if the package cannot be found.</p> <p>A package-specific list of required components may be listed after the <code>COMPONENTS</code> option (or after the <code>REQUIRED</code> option if present). Additional optional components may be listed after <code>OPTIONAL_COMPONENTS</code>. Available components and their influence on whether a package is considered to be found are defined by the target package.</p> <p>The <code>[version]</code> argument requests a version with which the package found should be compatible (format is <code>major[.minor[.patch[.tweak]]]</code>). The <code>EXACT</code> option requests that the version be matched exactly. If no <code>[version]</code> and/or component list is given to a recursive invocation inside a find-module, the corresponding arguments are forwarded automatically from the outer call (including the <code>EXACT</code> flag for <code>[version]</code>). Version support is currently provided only on a package-by-package basis (details below).</p> <p>User code should generally look for packages using the above simple signature. The remainder of this command documentation specifies the full command signature and details of the search process. Project maintainers wishing to provide a package to be found by this command are encouraged to read on.</p> <p>The command has two modes by which it searches for packages: “Module” mode and “Config” mode. Module mode is available when the command is invoked with the above reduced signature. CMake searches for a file called <code>Find&lt;package&gt;.cmake</code> in the <a class=\"reference internal\" href=\"../variable/cmake_module_path#variable:CMAKE_MODULE_PATH\" title=\"CMAKE_MODULE_PATH\" id=\"index-0-variable:CMAKE_MODULE_PATH\"><code>CMAKE_MODULE_PATH</code></a> followed by the CMake installation. If the file is found, it is read and processed by CMake. It is responsible for finding the package, checking the version, and producing any needed messages. Many find-modules provide limited or no support for versioning; check the module documentation. If no module is found and the <code>MODULE</code> option is not given the command proceeds to Config mode.</p> <p>The complete Config mode command signature is:</p> <pre data-language=\"python\">find_package(&lt;package&gt; [version] [EXACT] [QUIET]\n             [REQUIRED] [[COMPONENTS] [components...]]\n             [CONFIG|NO_MODULE]\n             [NO_POLICY_SCOPE]\n             [NAMES name1 [name2 ...]]\n             [CONFIGS config1 [config2 ...]]\n             [HINTS path1 [path2 ... ]]\n             [PATHS path1 [path2 ... ]]\n             [PATH_SUFFIXES suffix1 [suffix2 ...]]\n             [NO_DEFAULT_PATH]\n             [NO_CMAKE_ENVIRONMENT_PATH]\n             [NO_CMAKE_PATH]\n             [NO_SYSTEM_ENVIRONMENT_PATH]\n             [NO_CMAKE_PACKAGE_REGISTRY]\n             [NO_CMAKE_BUILDS_PATH] # Deprecated; does nothing.\n             [NO_CMAKE_SYSTEM_PATH]\n             [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY]\n             [CMAKE_FIND_ROOT_PATH_BOTH |\n              ONLY_CMAKE_FIND_ROOT_PATH |\n              NO_CMAKE_FIND_ROOT_PATH])\n</pre> <p>The <code>CONFIG</code> option may be used to skip Module mode explicitly and switch to Config mode. It is synonymous to using <code>NO_MODULE</code>. Config mode is also implied by use of options not specified in the reduced signature.</p> <p>Config mode attempts to locate a configuration file provided by the package to be found. A cache entry called <code>&lt;package&gt;_DIR</code> is created to hold the directory containing the file. By default the command searches for a package with the name <code>&lt;package&gt;</code>. If the <code>NAMES</code> option is given the names following it are used instead of <code>&lt;package&gt;</code>. The command searches for a file called <code>&lt;name&gt;Config.cmake</code> or <code>&lt;lower-case-name&gt;-config.cmake</code> for each name specified. A replacement set of possible configuration file names may be given using the <code>CONFIGS</code> option. The search procedure is specified below. Once found, the configuration file is read and processed by CMake. Since the file is provided by the package it already knows the location of package contents. The full path to the configuration file is stored in the cmake variable <code>&lt;package&gt;_CONFIG</code>.</p> <p>All configuration files which have been considered by CMake while searching for an installation of the package with an appropriate version are stored in the cmake variable <code>&lt;package&gt;_CONSIDERED_CONFIGS</code>, the associated versions in <code>&lt;package&gt;_CONSIDERED_VERSIONS</code>.</p> <p>If the package configuration file cannot be found CMake will generate an error describing the problem unless the <code>QUIET</code> argument is specified. If <code>REQUIRED</code> is specified and the package is not found a fatal error is generated and the configure step stops executing. If <code>&lt;package&gt;_DIR</code> has been set to a directory not containing a configuration file CMake will ignore it and search from scratch.</p> <p>When the <code>[version]</code> argument is given Config mode will only find a version of the package that claims compatibility with the requested version (format is <code>major[.minor[.patch[.tweak]]]</code>). If the <code>EXACT</code> option is given only a version of the package claiming an exact match of the requested version may be found. CMake does not establish any convention for the meaning of version numbers. Package version numbers are checked by “version” files provided by the packages themselves. For a candidate package configuration file <code>&lt;config-file&gt;.cmake</code> the corresponding version file is located next to it and named either <code>&lt;config-file&gt;-version.cmake</code> or <code>&lt;config-file&gt;Version.cmake</code>. If no such version file is available then the configuration file is assumed to not be compatible with any requested version. A basic version file containing generic version matching code can be created using the <a class=\"reference internal\" href=\"../module/cmakepackageconfighelpers#module:CMakePackageConfigHelpers\" title=\"CMakePackageConfigHelpers\" id=\"index-0-module:CMakePackageConfigHelpers\"><code>CMakePackageConfigHelpers</code></a> module. When a version file is found it is loaded to check the requested version number. The version file is loaded in a nested scope in which the following variables have been defined:</p> <dl class=\"docutils\"> <dt><code>PACKAGE_FIND_NAME</code></dt> <dd>the <code>&lt;package&gt;</code> name</dd> <dt><code>PACKAGE_FIND_VERSION</code></dt> <dd>full requested version string</dd> <dt><code>PACKAGE_FIND_VERSION_MAJOR</code></dt> <dd>major version if requested, else 0</dd> <dt><code>PACKAGE_FIND_VERSION_MINOR</code></dt> <dd>minor version if requested, else 0</dd> <dt><code>PACKAGE_FIND_VERSION_PATCH</code></dt> <dd>patch version if requested, else 0</dd> <dt><code>PACKAGE_FIND_VERSION_TWEAK</code></dt> <dd>tweak version if requested, else 0</dd> <dt><code>PACKAGE_FIND_VERSION_COUNT</code></dt> <dd>number of version components, 0 to 4</dd> </dl> <p>The version file checks whether it satisfies the requested version and sets these variables:</p> <dl class=\"docutils\"> <dt><code>PACKAGE_VERSION</code></dt> <dd>full provided version string</dd> <dt><code>PACKAGE_VERSION_EXACT</code></dt> <dd>true if version is exact match</dd> <dt><code>PACKAGE_VERSION_COMPATIBLE</code></dt> <dd>true if version is compatible</dd> <dt><code>PACKAGE_VERSION_UNSUITABLE</code></dt> <dd>true if unsuitable as any version</dd> </dl> <p>These variables are checked by the <code>find_package</code> command to determine whether the configuration file provides an acceptable version. They are not available after the find_package call returns. If the version is acceptable the following variables are set:</p> <dl class=\"docutils\"> <dt><code>&lt;package&gt;_VERSION</code></dt> <dd>full provided version string</dd> <dt><code>&lt;package&gt;_VERSION_MAJOR</code></dt> <dd>major version if provided, else 0</dd> <dt><code>&lt;package&gt;_VERSION_MINOR</code></dt> <dd>minor version if provided, else 0</dd> <dt><code>&lt;package&gt;_VERSION_PATCH</code></dt> <dd>patch version if provided, else 0</dd> <dt><code>&lt;package&gt;_VERSION_TWEAK</code></dt> <dd>tweak version if provided, else 0</dd> <dt><code>&lt;package&gt;_VERSION_COUNT</code></dt> <dd>number of version components, 0 to 4</dd> </dl> <p>and the corresponding package configuration file is loaded. When multiple package configuration files are available whose version files claim compatibility with the version requested it is unspecified which one is chosen. No attempt is made to choose a highest or closest version number.</p> <p>Config mode provides an elaborate interface and search procedure. Much of the interface is provided for completeness and for use internally by find-modules loaded by Module mode. Most user code should simply call:</p> <pre data-language=\"python\">find_package(&lt;package&gt; [major[.minor]] [EXACT] [REQUIRED|QUIET])\n</pre> <p>in order to find a package. Package maintainers providing CMake package configuration files are encouraged to name and install them such that the procedure outlined below will find them without requiring use of additional options.</p> <p>CMake constructs a set of possible installation prefixes for the package. Under each prefix several directories are searched for a configuration file. The tables below show the directories searched. Each entry is meant for installation trees following Windows (W), UNIX (U), or Apple (A) conventions:</p> <pre data-language=\"python\">&lt;prefix&gt;/                                               (W)\n&lt;prefix&gt;/(cmake|CMake)/                                 (W)\n&lt;prefix&gt;/&lt;name&gt;*/                                       (W)\n&lt;prefix&gt;/&lt;name&gt;*/(cmake|CMake)/                         (W)\n&lt;prefix&gt;/(lib/&lt;arch&gt;|lib|share)/cmake/&lt;name&gt;*/          (U)\n&lt;prefix&gt;/(lib/&lt;arch&gt;|lib|share)/&lt;name&gt;*/                (U)\n&lt;prefix&gt;/(lib/&lt;arch&gt;|lib|share)/&lt;name&gt;*/(cmake|CMake)/  (U)\n</pre> <p>On systems supporting OS X Frameworks and Application Bundles the following directories are searched for frameworks or bundles containing a configuration file:</p> <pre data-language=\"python\">&lt;prefix&gt;/&lt;name&gt;.framework/Resources/                    (A)\n&lt;prefix&gt;/&lt;name&gt;.framework/Resources/CMake/              (A)\n&lt;prefix&gt;/&lt;name&gt;.framework/Versions/*/Resources/         (A)\n&lt;prefix&gt;/&lt;name&gt;.framework/Versions/*/Resources/CMake/   (A)\n&lt;prefix&gt;/&lt;name&gt;.app/Contents/Resources/                 (A)\n&lt;prefix&gt;/&lt;name&gt;.app/Contents/Resources/CMake/           (A)\n</pre> <p>In all cases the <code>&lt;name&gt;</code> is treated as case-insensitive and corresponds to any of the names specified (<code>&lt;package&gt;</code> or names given by <code>NAMES</code>). Paths with <code>lib/&lt;arch&gt;</code> are enabled if the <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-0-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> variable is set. If <code>PATH_SUFFIXES</code> is specified the suffixes are appended to each (W) or (U) directory entry one-by-one.</p> <p>This set of directories is intended to work in cooperation with projects that provide configuration files in their installation trees. Directories above marked with (W) are intended for installations on Windows where the prefix may point at the top of an application’s installation directory. Those marked with (U) are intended for installations on UNIX platforms where the prefix is shared by multiple packages. This is merely a convention, so all (W) and (U) directories are still searched on all platforms. Directories marked with (A) are intended for installations on Apple platforms. The <a class=\"reference internal\" href=\"../variable/cmake_find_framework#variable:CMAKE_FIND_FRAMEWORK\" title=\"CMAKE_FIND_FRAMEWORK\" id=\"index-0-variable:CMAKE_FIND_FRAMEWORK\"><code>CMAKE_FIND_FRAMEWORK</code></a> and <a class=\"reference internal\" href=\"../variable/cmake_find_appbundle#variable:CMAKE_FIND_APPBUNDLE\" title=\"CMAKE_FIND_APPBUNDLE\" id=\"index-0-variable:CMAKE_FIND_APPBUNDLE\"><code>CMAKE_FIND_APPBUNDLE</code></a> variables determine the order of preference.</p> <p>The set of installation prefixes is constructed using the following steps. If <code>NO_DEFAULT_PATH</code> is specified all <code>NO_*</code> options are enabled.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Search paths specified in cmake-specific cache variables. These are intended to be used on the command line with a <code>-DVAR=value</code>. This can be skipped if <code>NO_CMAKE_PATH</code> is passed:</p> <pre data-language=\"python\">CMAKE_PREFIX_PATH\nCMAKE_FRAMEWORK_PATH\nCMAKE_APPBUNDLE_PATH\n</pre> </li> <li>\n<p class=\"first\">Search paths specified in cmake-specific environment variables. These are intended to be set in the user’s shell configuration. This can be skipped if <code>NO_CMAKE_ENVIRONMENT_PATH</code> is passed:</p> <pre data-language=\"python\">&lt;package&gt;_DIR\nCMAKE_PREFIX_PATH\nCMAKE_FRAMEWORK_PATH\nCMAKE_APPBUNDLE_PATH\n</pre> </li> <li>Search paths specified by the <code>HINTS</code> option. These should be paths computed by system introspection, such as a hint provided by the location of another item already found. Hard-coded guesses should be specified with the <code>PATHS</code> option. </li> <li>\n<p class=\"first\">Search the standard system environment variables. This can be skipped if <code>NO_SYSTEM_ENVIRONMENT_PATH</code> is passed. Path entries ending in <code>/bin</code> or <code>/sbin</code> are automatically converted to their parent directories:</p> <pre data-language=\"python\">PATH\n</pre> </li> <li>Search paths stored in the CMake <a class=\"reference internal\" href=\"../manual/cmake-packages.7#user-package-registry\"><span>User Package Registry</span></a>. This can be skipped if <code>NO_CMAKE_PACKAGE_REGISTRY</code> is passed or by setting the <a class=\"reference internal\" href=\"../variable/cmake_find_package_no_package_registry#variable:CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY\" title=\"CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY\" id=\"index-0-variable:CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY\"><code>CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY</code></a> to <code>TRUE</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-0-manual:cmake-packages(7)\"><code>cmake-packages(7)</code></a> manual for details on the user package registry. </li> <li>\n<p class=\"first\">Search cmake variables defined in the Platform files for the current system. This can be skipped if <code>NO_CMAKE_SYSTEM_PATH</code> is passed:</p> <pre data-language=\"python\">CMAKE_SYSTEM_PREFIX_PATH\nCMAKE_SYSTEM_FRAMEWORK_PATH\nCMAKE_SYSTEM_APPBUNDLE_PATH\n</pre> </li> <li>Search paths stored in the CMake <a class=\"reference internal\" href=\"../manual/cmake-packages.7#system-package-registry\"><span>System Package Registry</span></a>. This can be skipped if <code>NO_CMAKE_SYSTEM_PACKAGE_REGISTRY</code> is passed or by setting the <a class=\"reference internal\" href=\"../variable/cmake_find_package_no_system_package_registry#variable:CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY\" title=\"CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY\" id=\"index-0-variable:CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY\"><code>CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY</code></a> to <code>TRUE</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-1-manual:cmake-packages(7)\"><code>cmake-packages(7)</code></a> manual for details on the system package registry. </li> <li>Search paths specified by the <code>PATHS</code> option. These are typically hard-coded guesses. </li> </ol> <p>The CMake variable <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-0-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> specifies one or more directories to be prepended to all other search directories. This effectively “re-roots” the entire search under given locations. Paths which are descendants of the <a class=\"reference internal\" href=\"../variable/cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-0-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a> are excluded from this re-rooting, because that variable is always a path on the host system. By default the <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> is empty.</p> <p>The <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-0-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> variable can also be used to specify exactly one directory to use as a prefix. Setting <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-1-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> also has other effects. See the documentation for that variable for more.</p> <p>These variables are especially useful when cross-compiling to point to the root directory of the target environment and CMake will search there too. By default at first the directories listed in <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-2-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> are searched, then the <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-2-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> directory is searched, and then the non-rooted directories will be searched. The default behavior can be adjusted by setting <a class=\"reference internal\" href=\"../variable/cmake_find_root_path_mode_package#variable:CMAKE_FIND_ROOT_PATH_MODE_PACKAGE\" title=\"CMAKE_FIND_ROOT_PATH_MODE_PACKAGE\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH_MODE_PACKAGE\"><code>CMAKE_FIND_ROOT_PATH_MODE_PACKAGE</code></a>. This behavior can be manually overridden on a per-call basis using options:</p> <dl class=\"docutils\"> <dt><code>CMAKE_FIND_ROOT_PATH_BOTH</code></dt> <dd>Search in the order described above.</dd> <dt><code>NO_CMAKE_FIND_ROOT_PATH</code></dt> <dd>Do not use the <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-3-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> variable.</dd> <dt><code>ONLY_CMAKE_FIND_ROOT_PATH</code></dt> <dd>Search only the re-rooted directories and directories below <a class=\"reference internal\" href=\"../variable/cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-1-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a>.</dd> </dl> <p>The default search order is designed to be most-specific to least-specific for common use cases. Projects may override the order by simply calling the command multiple times and using the <code>NO_*</code> options:</p> <pre class=\"literal-block\">\nfind_package (&lt;package&gt; PATHS paths... NO_DEFAULT_PATH)\nfind_package (&lt;package&gt;)\n</pre> <p>Once one of the calls succeeds the result variable will be set and stored in the cache so that no call will search again.</p> <p>Every non-REQUIRED <code>find_package</code> call can be disabled by setting the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_DISABLE_FIND_PACKAGE_&lt;PackageName&gt;\" id=\"index-0-variable:CMAKE_DISABLE_FIND_PACKAGE_&lt;PackageName&gt;\"><code>CMAKE_DISABLE_FIND_PACKAGE_&lt;PackageName&gt;</code></a> variable to <code>TRUE</code>.</p> <p>When loading a find module or package configuration file <code>find_package</code> defines variables to provide information about the call arguments (and restores their original state before returning):</p> <dl class=\"docutils\"> <dt><code>CMAKE_FIND_PACKAGE_NAME</code></dt> <dd>the <code>&lt;package&gt;</code> name which is searched for</dd> <dt><code>&lt;package&gt;_FIND_REQUIRED</code></dt> <dd>true if <code>REQUIRED</code> option was given</dd> <dt><code>&lt;package&gt;_FIND_QUIETLY</code></dt> <dd>true if <code>QUIET</code> option was given</dd> <dt><code>&lt;package&gt;_FIND_VERSION</code></dt> <dd>full requested version string</dd> <dt><code>&lt;package&gt;_FIND_VERSION_MAJOR</code></dt> <dd>major version if requested, else 0</dd> <dt><code>&lt;package&gt;_FIND_VERSION_MINOR</code></dt> <dd>minor version if requested, else 0</dd> <dt><code>&lt;package&gt;_FIND_VERSION_PATCH</code></dt> <dd>patch version if requested, else 0</dd> <dt><code>&lt;package&gt;_FIND_VERSION_TWEAK</code></dt> <dd>tweak version if requested, else 0</dd> <dt><code>&lt;package&gt;_FIND_VERSION_COUNT</code></dt> <dd>number of version components, 0 to 4</dd> <dt><code>&lt;package&gt;_FIND_VERSION_EXACT</code></dt> <dd>true if <code>EXACT</code> option was given</dd> <dt><code>&lt;package&gt;_FIND_COMPONENTS</code></dt> <dd>list of requested components</dd> <dt><code>&lt;package&gt;_FIND_REQUIRED_&lt;c&gt;</code></dt> <dd>true if component <code>&lt;c&gt;</code> is required, false if component <code>&lt;c&gt;</code> is optional</dd> </dl> <p>In Module mode the loaded find module is responsible to honor the request detailed by these variables; see the find module for details. In Config mode <code>find_package</code> handles <code>REQUIRED</code>, <code>QUIET</code>, and <code>[version]</code> options automatically but leaves it to the package configuration file to handle components in a way that makes sense for the package. The package configuration file may set <code>&lt;package&gt;_FOUND</code> to false to tell <code>find_package</code> that component requirements are not satisfied.</p> <p>See the <a class=\"reference internal\" href=\"cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command documentation for discussion of the <code>NO_POLICY_SCOPE</code> option.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/find_package.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/find_package.html</a>\n  </p>\n</div>\n","policy/cmp0001":"<h1 id=\"policy:CMP0001\">CMP0001</h1> <p id=\"cmp0001\">CMAKE_BACKWARDS_COMPATIBILITY should no longer be used.</p> <p>The OLD behavior is to check CMAKE_BACKWARDS_COMPATIBILITY and present it to the user. The NEW behavior is to ignore CMAKE_BACKWARDS_COMPATIBILITY completely.</p> <p>In CMake 2.4 and below the variable CMAKE_BACKWARDS_COMPATIBILITY was used to request compatibility with earlier versions of CMake. In CMake 2.6 and above all compatibility issues are handled by policies and the cmake_policy command. However, CMake must still check CMAKE_BACKWARDS_COMPATIBILITY for projects written for CMake 2.4 and below.</p> <p>This policy was introduced in CMake version 2.6.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0001.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0001.html</a>\n  </p>\n</div>\n","policy/cmp0002":"<h1 id=\"policy:CMP0002\">CMP0002</h1> <p id=\"cmp0002\">Logical target names must be globally unique.</p> <p>Targets names created with add_executable, add_library, or add_custom_target are logical build target names. Logical target names must be globally unique because:</p> <pre data-language=\"python\">- Unique names may be referenced unambiguously both in CMake\n  code and on make tool command lines.\n- Logical names are used by Xcode and VS IDE generators\n  to produce meaningful project names for the targets.\n</pre> <p>The logical name of executable and library targets does not have to correspond to the physical file names built. Consider using the OUTPUT_NAME target property to create two targets with the same physical name while keeping logical names distinct. Custom targets must simply have globally unique names (unless one uses the global property ALLOW_DUPLICATE_CUSTOM_TARGETS with a Makefiles generator).</p> <p>This policy was introduced in CMake version 2.6.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0002.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0002.html</a>\n  </p>\n</div>\n","policy/cmp0003":"<h1 id=\"policy:CMP0003\">CMP0003</h1> <p id=\"cmp0003\">Libraries linked via full path no longer produce linker search paths.</p> <p>This policy affects how libraries whose full paths are NOT known are found at link time, but was created due to a change in how CMake deals with libraries whose full paths are known. Consider the code</p> <pre data-language=\"python\">target_link_libraries(myexe /path/to/libA.so)\n</pre> <p>CMake 2.4 and below implemented linking to libraries whose full paths are known by splitting them on the link line into separate components consisting of the linker search path and the library name. The example code might have produced something like</p> <pre data-language=\"python\">... -L/path/to -lA ...\n</pre> <p>in order to link to library A. An analysis was performed to order multiple link directories such that the linker would find library A in the desired location, but there are cases in which this does not work. CMake versions 2.6 and above use the more reliable approach of passing the full path to libraries directly to the linker in most cases. The example code now produces something like</p> <pre data-language=\"python\">... /path/to/libA.so ....\n</pre> <p>Unfortunately this change can break code like</p> <pre data-language=\"python\">target_link_libraries(myexe /path/to/libA.so B)\n</pre> <p>where “B” is meant to find “/path/to/libB.so”. This code is wrong because the user is asking the linker to find library B but has not provided a linker search path (which may be added with the link_directories command). However, with the old linking implementation the code would work accidentally because the linker search path added for library A allowed library B to be found.</p> <p>In order to support projects depending on linker search paths added by linking to libraries with known full paths, the OLD behavior for this policy will add the linker search paths even though they are not needed for their own libraries. When this policy is set to OLD, CMake will produce a link line such as</p> <pre data-language=\"python\">... -L/path/to /path/to/libA.so -lB ...\n</pre> <p>which will allow library B to be found as it was previously. When this policy is set to NEW, CMake will produce a link line such as</p> <pre data-language=\"python\">... /path/to/libA.so -lB ...\n</pre> <p>which more accurately matches what the project specified.</p> <p>The setting for this policy used when generating the link line is that in effect when the target is created by an add_executable or add_library command. For the example described above, the code</p> <pre data-language=\"python\">cmake_policy(SET CMP0003 OLD) # or cmake_policy(VERSION 2.4)\nadd_executable(myexe myexe.c)\ntarget_link_libraries(myexe /path/to/libA.so B)\n</pre> <p>will work and suppress the warning for this policy. It may also be updated to work with the corrected linking approach:</p> <pre data-language=\"python\">cmake_policy(SET CMP0003 NEW) # or cmake_policy(VERSION 2.6)\nlink_directories(/path/to) # needed to find library B\nadd_executable(myexe myexe.c)\ntarget_link_libraries(myexe /path/to/libA.so B)\n</pre> <p>Even better, library B may be specified with a full path:</p> <pre data-language=\"python\">add_executable(myexe myexe.c)\ntarget_link_libraries(myexe /path/to/libA.so /path/to/libB.so)\n</pre> <p>When all items on the link line have known paths CMake does not check this policy so it has no effect.</p> <p>Note that the warning for this policy will be issued for at most one target. This avoids flooding users with messages for every target when setting the policy once will probably fix all targets.</p> <p>This policy was introduced in CMake version 2.6.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0003.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0003.html</a>\n  </p>\n</div>\n","policy/cmp0004":"<h1 id=\"policy:CMP0004\">CMP0004</h1> <p id=\"cmp0004\">Libraries linked may not have leading or trailing whitespace.</p> <p>CMake versions 2.4 and below silently removed leading and trailing whitespace from libraries linked with code like</p> <pre data-language=\"python\">target_link_libraries(myexe \" A \")\n</pre> <p>This could lead to subtle errors in user projects.</p> <p>The OLD behavior for this policy is to silently remove leading and trailing whitespace. The NEW behavior for this policy is to diagnose the existence of such whitespace as an error. The setting for this policy used when checking the library names is that in effect when the target is created by an add_executable or add_library command.</p> <p>This policy was introduced in CMake version 2.6.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0004.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0004.html</a>\n  </p>\n</div>\n","policy/cmp0005":"<h1 id=\"policy:CMP0005\">CMP0005</h1> <p id=\"cmp0005\">Preprocessor definition values are now escaped automatically.</p> <p>This policy determines whether or not CMake should generate escaped preprocessor definition values added via add_definitions. CMake versions 2.4 and below assumed that only trivial values would be given for macros in add_definitions calls. It did not attempt to escape non-trivial values such as string literals in generated build rules. CMake versions 2.6 and above support escaping of most values, but cannot assume the user has not added escapes already in an attempt to work around limitations in earlier versions.</p> <p>The OLD behavior for this policy is to place definition values given to add_definitions directly in the generated build rules without attempting to escape anything. The NEW behavior for this policy is to generate correct escapes for all native build tools automatically. See documentation of the COMPILE_DEFINITIONS target property for limitations of the escaping implementation.</p> <p>This policy was introduced in CMake version 2.6.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0005.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0005.html</a>\n  </p>\n</div>\n","policy/cmp0007":"<h1 id=\"policy:CMP0007\">CMP0007</h1> <p id=\"cmp0007\">list command no longer ignores empty elements.</p> <p>This policy determines whether the list command will ignore empty elements in the list. CMake 2.4 and below list commands ignored all empty elements in the list. For example, a;b;;c would have length 3 and not 4. The OLD behavior for this policy is to ignore empty list elements. The NEW behavior for this policy is to correctly count empty elements in a list.</p> <p>This policy was introduced in CMake version 2.6.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0007.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0007.html</a>\n  </p>\n</div>\n","policy/cmp0006":"<h1 id=\"policy:CMP0006\">CMP0006</h1> <p id=\"cmp0006\">Installing MACOSX_BUNDLE targets requires a BUNDLE DESTINATION.</p> <p>This policy determines whether the install(TARGETS) command must be given a BUNDLE DESTINATION when asked to install a target with the MACOSX_BUNDLE property set. CMake 2.4 and below did not distinguish application bundles from normal executables when installing targets. CMake 2.6 provides a BUNDLE option to the install(TARGETS) command that specifies rules specific to application bundles on the Mac. Projects should use this option when installing a target with the MACOSX_BUNDLE property set.</p> <p>The OLD behavior for this policy is to fall back to the RUNTIME DESTINATION if a BUNDLE DESTINATION is not given. The NEW behavior for this policy is to produce an error if a bundle target is installed without a BUNDLE DESTINATION.</p> <p>This policy was introduced in CMake version 2.6.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0006.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0006.html</a>\n  </p>\n</div>\n","policy/cmp0017":"<h1 id=\"policy:CMP0017\">CMP0017</h1> <p id=\"cmp0017\">Prefer files from the CMake module directory when including from there.</p> <p>Starting with CMake 2.8.4, if a cmake-module shipped with CMake (i.e. located in the CMake module directory) calls include() or find_package(), the files located in the CMake module directory are preferred over the files in CMAKE_MODULE_PATH. This makes sure that the modules belonging to CMake always get those files included which they expect, and against which they were developed and tested. In all other cases, the files found in CMAKE_MODULE_PATH still take precedence over the ones in the CMake module directory. The OLD behavior is to always prefer files from CMAKE_MODULE_PATH over files from the CMake modules directory.</p> <p>This policy was introduced in CMake version 2.8.4. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0017.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0017.html</a>\n  </p>\n</div>\n","policy/cmp0011":"<h1 id=\"policy:CMP0011\">CMP0011</h1> <p id=\"cmp0011\">Included scripts do automatic cmake_policy PUSH and POP.</p> <p>In CMake 2.6.2 and below, CMake Policy settings in scripts loaded by the include() and find_package() commands would affect the includer. Explicit invocations of cmake_policy(PUSH) and cmake_policy(POP) were required to isolate policy changes and protect the includer. While some scripts intend to affect the policies of their includer, most do not. In CMake 2.6.3 and above, include() and find_package() by default PUSH and POP an entry on the policy stack around an included script, but provide a NO_POLICY_SCOPE option to disable it. This policy determines whether or not to imply NO_POLICY_SCOPE for compatibility. The OLD behavior for this policy is to imply NO_POLICY_SCOPE for include() and find_package() commands. The NEW behavior for this policy is to allow the commands to do their default cmake_policy PUSH and POP.</p> <p>This policy was introduced in CMake version 2.6.3. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0011.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0011.html</a>\n  </p>\n</div>\n","policy/cmp0014":"<h1 id=\"policy:CMP0014\">CMP0014</h1> <p id=\"cmp0014\">Input directories must have CMakeLists.txt.</p> <p>CMake versions before 2.8 silently ignored missing CMakeLists.txt files in directories referenced by add_subdirectory() or subdirs(), treating them as if present but empty. In CMake 2.8.0 and above this policy determines whether or not the case is an error. The OLD behavior for this policy is to silently ignore the problem. The NEW behavior for this policy is to report an error.</p> <p>This policy was introduced in CMake version 2.8.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0014.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0014.html</a>\n  </p>\n</div>\n","policy/cmp0016":"<h1 id=\"policy:CMP0016\">CMP0016</h1> <p id=\"cmp0016\">target_link_libraries() reports error if its only argument is not a target.</p> <p>In CMake 2.8.2 and lower the target_link_libraries() command silently ignored if it was called with only one argument, and this argument wasn’t a valid target. In CMake 2.8.3 and above it reports an error in this case.</p> <p>This policy was introduced in CMake version 2.8.3. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0016.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0016.html</a>\n  </p>\n</div>\n","policy/cmp0013":"<h1 id=\"policy:CMP0013\">CMP0013</h1> <p id=\"cmp0013\">Duplicate binary directories are not allowed.</p> <p>CMake 2.6.3 and below silently permitted add_subdirectory() calls to create the same binary directory multiple times. During build system generation files would be written and then overwritten in the build tree and could lead to strange behavior. CMake 2.6.4 and above explicitly detect duplicate binary directories. CMake 2.6.4 always considers this case an error. In CMake 2.8.0 and above this policy determines whether or not the case is an error. The OLD behavior for this policy is to allow duplicate binary directories. The NEW behavior for this policy is to disallow duplicate binary directories with an error.</p> <p>This policy was introduced in CMake version 2.8.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0013.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0013.html</a>\n  </p>\n</div>\n","policy/cmp0015":"<h1 id=\"policy:CMP0015\">CMP0015</h1> <p id=\"cmp0015\">link_directories() treats paths relative to the source dir.</p> <p>In CMake 2.8.0 and lower the link_directories() command passed relative paths unchanged to the linker. In CMake 2.8.1 and above the link_directories() command prefers to interpret relative paths with respect to CMAKE_CURRENT_SOURCE_DIR, which is consistent with include_directories() and other commands. The OLD behavior for this policy is to use relative paths verbatim in the linker command. The NEW behavior for this policy is to convert relative paths to absolute paths by appending the relative path to CMAKE_CURRENT_SOURCE_DIR.</p> <p>This policy was introduced in CMake version 2.8.1. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0015.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0015.html</a>\n  </p>\n</div>\n","policy/cmp0008":"<h1 id=\"policy:CMP0008\">CMP0008</h1> <p id=\"cmp0008\">Libraries linked by full-path must have a valid library file name.</p> <p>In CMake 2.4 and below it is possible to write code like</p> <pre data-language=\"python\">target_link_libraries(myexe /full/path/to/somelib)\n</pre> <p>where “somelib” is supposed to be a valid library file name such as “libsomelib.a” or “somelib.lib”. For Makefile generators this produces an error at build time because the dependency on the full path cannot be found. For VS IDE and Xcode generators this used to work by accident because CMake would always split off the library directory and ask the linker to search for the library by name (-lsomelib or somelib.lib). Despite the failure with Makefiles, some projects have code like this and build only with VS and/or Xcode. This version of CMake prefers to pass the full path directly to the native build tool, which will fail in this case because it does not name a valid library file.</p> <p>This policy determines what to do with full paths that do not appear to name a valid library file. The OLD behavior for this policy is to split the library name from the path and ask the linker to search for it. The NEW behavior for this policy is to trust the given path and pass it directly to the native build tool unchanged.</p> <p>This policy was introduced in CMake version 2.6.1. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0008.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0008.html</a>\n  </p>\n</div>\n","policy/cmp0009":"<h1 id=\"policy:CMP0009\">CMP0009</h1> <p id=\"cmp0009\">FILE GLOB_RECURSE calls should not follow symlinks by default.</p> <p>In CMake 2.6.1 and below, FILE GLOB_RECURSE calls would follow through symlinks, sometimes coming up with unexpectedly large result sets because of symlinks to top level directories that contain hundreds of thousands of files.</p> <p>This policy determines whether or not to follow symlinks encountered during a FILE GLOB_RECURSE call. The OLD behavior for this policy is to follow the symlinks. The NEW behavior for this policy is not to follow the symlinks by default, but only if FOLLOW_SYMLINKS is given as an additional argument to the FILE command.</p> <p>This policy was introduced in CMake version 2.6.2. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0009.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0009.html</a>\n  </p>\n</div>\n","policy/cmp0012":"<h1 id=\"policy:CMP0012\">CMP0012</h1> <p id=\"cmp0012\">if() recognizes numbers and boolean constants.</p> <p>In CMake versions 2.6.4 and lower the if() command implicitly dereferenced arguments corresponding to variables, even those named like numbers or boolean constants, except for 0 and 1. Numbers and boolean constants such as true, false, yes, no, on, off, y, n, notfound, ignore (all case insensitive) were recognized in some cases but not all. For example, the code “if(TRUE)” might have evaluated as false. Numbers such as 2 were recognized only in boolean expressions like “if(NOT 2)” (leading to false) but not as a single-argument like “if(2)” (also leading to false). Later versions of CMake prefer to treat numbers and boolean constants literally, so they should not be used as variable names.</p> <p>The OLD behavior for this policy is to implicitly dereference variables named like numbers and boolean constants. The NEW behavior for this policy is to recognize numbers and boolean constants without dereferencing variables with such names.</p> <p>This policy was introduced in CMake version 2.8.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0012.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0012.html</a>\n  </p>\n</div>\n","policy/cmp0010":"<h1 id=\"policy:CMP0010\">CMP0010</h1> <p id=\"cmp0010\">Bad variable reference syntax is an error.</p> <p>In CMake 2.6.2 and below, incorrect variable reference syntax such as a missing close-brace (“${FOO”) was reported but did not stop processing of CMake code. This policy determines whether a bad variable reference is an error. The OLD behavior for this policy is to warn about the error, leave the string untouched, and continue. The NEW behavior for this policy is to report an error.</p> <p>If <a class=\"reference internal\" href=\"cmp0053#policy:CMP0053\" title=\"CMP0053\" id=\"index-0-policy:CMP0053\"><code>CMP0053</code></a> is set to <code>NEW</code>, this policy has no effect and is treated as always being <code>NEW</code>.</p> <p>This policy was introduced in CMake version 2.6.3. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0010.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0010.html</a>\n  </p>\n</div>\n","policy/cmp0018":"<h1 id=\"policy:CMP0018\">CMP0018</h1> <p id=\"cmp0018\">Ignore CMAKE_SHARED_LIBRARY_&lt;Lang&gt;_FLAGS variable.</p> <p>CMake 2.8.8 and lower compiled sources in SHARED and MODULE libraries using the value of the undocumented CMAKE_SHARED_LIBRARY_&lt;Lang&gt;_FLAGS platform variable. The variable contained platform-specific flags needed to compile objects for shared libraries. Typically it included a flag such as -fPIC for position independent code but also included other flags needed on certain platforms. CMake 2.8.9 and higher prefer instead to use the POSITION_INDEPENDENT_CODE target property to determine what targets should be position independent, and new undocumented platform variables to select flags while ignoring CMAKE_SHARED_LIBRARY_&lt;Lang&gt;_FLAGS completely.</p> <p>The default for either approach produces identical compilation flags, but if a project modifies CMAKE_SHARED_LIBRARY_&lt;Lang&gt;_FLAGS from its original value this policy determines which approach to use.</p> <p>The OLD behavior for this policy is to ignore the POSITION_INDEPENDENT_CODE property for all targets and use the modified value of CMAKE_SHARED_LIBRARY_&lt;Lang&gt;_FLAGS for SHARED and MODULE libraries.</p> <p>The NEW behavior for this policy is to ignore CMAKE_SHARED_LIBRARY_&lt;Lang&gt;_FLAGS whether it is modified or not and honor the POSITION_INDEPENDENT_CODE target property.</p> <p>This policy was introduced in CMake version 2.8.9. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0018.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0018.html</a>\n  </p>\n</div>\n","policy/cmp0019":"<h1 id=\"policy:CMP0019\">CMP0019</h1> <p id=\"cmp0019\">Do not re-expand variables in include and link information.</p> <p>CMake 2.8.10 and lower re-evaluated values given to the include_directories, link_directories, and link_libraries commands to expand any leftover variable references at the end of the configuration step. This was for strict compatibility with VERY early CMake versions because all variable references are now normally evaluated during CMake language processing. CMake 2.8.11 and higher prefer to skip the extra evaluation.</p> <p>The OLD behavior for this policy is to re-evaluate the values for strict compatibility. The NEW behavior for this policy is to leave the values untouched.</p> <p>This policy was introduced in CMake version 2.8.11. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0019.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0019.html</a>\n  </p>\n</div>\n","policy/cmp0020":"<h1 id=\"policy:CMP0020\">CMP0020</h1> <p id=\"cmp0020\">Automatically link Qt executables to qtmain target on Windows.</p> <p>CMake 2.8.10 and lower required users of Qt to always specify a link dependency to the qtmain.lib static library manually on Windows. CMake 2.8.11 gained the ability to evaluate generator expressions while determining the link dependencies from IMPORTED targets. This allows CMake itself to automatically link executables which link to Qt to the qtmain.lib library when using IMPORTED Qt targets. For applications already linking to qtmain.lib, this should have little impact. For applications which supply their own alternative WinMain implementation and for applications which use the QAxServer library, this automatic linking will need to be disabled as per the documentation.</p> <p>The OLD behavior for this policy is not to link executables to qtmain.lib automatically when they link to the QtCore IMPORTED target. The NEW behavior for this policy is to link executables to qtmain.lib automatically when they link to QtCore IMPORTED target.</p> <p>This policy was introduced in CMake version 2.8.11. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0020.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0020.html</a>\n  </p>\n</div>\n","policy/cmp0021":"<h1 id=\"policy:CMP0021\">CMP0021</h1> <p id=\"cmp0021\">Fatal error on relative paths in INCLUDE_DIRECTORIES target property.</p> <p>CMake 2.8.10.2 and lower allowed the INCLUDE_DIRECTORIES target property to contain relative paths. The base path for such relative entries is not well defined. CMake 2.8.12 issues a FATAL_ERROR if the INCLUDE_DIRECTORIES property contains a relative path.</p> <p>The OLD behavior for this policy is not to warn about relative paths in the INCLUDE_DIRECTORIES target property. The NEW behavior for this policy is to issue a FATAL_ERROR if INCLUDE_DIRECTORIES contains a relative path.</p> <p>This policy was introduced in CMake version 2.8.12. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0021.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0021.html</a>\n  </p>\n</div>\n","policy/cmp0022":"<h1 id=\"policy:CMP0022\">CMP0022</h1> <p id=\"cmp0022\">INTERFACE_LINK_LIBRARIES defines the link interface.</p> <p>CMake 2.8.11 constructed the ‘link interface’ of a target from properties matching <code>(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_&lt;CONFIG&gt;)?</code>. The modern way to specify config-sensitive content is to use generator expressions and the <code>IMPORTED_</code> prefix makes uniform processing of the link interface with generator expressions impossible. The INTERFACE_LINK_LIBRARIES target property was introduced as a replacement in CMake 2.8.12. This new property is named consistently with the INTERFACE_COMPILE_DEFINITIONS, INTERFACE_INCLUDE_DIRECTORIES and INTERFACE_COMPILE_OPTIONS properties. For in-build targets, CMake will use the INTERFACE_LINK_LIBRARIES property as the source of the link interface only if policy CMP0022 is NEW. When exporting a target which has this policy set to NEW, only the INTERFACE_LINK_LIBRARIES property will be processed and generated for the IMPORTED target by default. A new option to the install(EXPORT) and export commands allows export of the old-style properties for compatibility with downstream users of CMake versions older than 2.8.12. The target_link_libraries command will no longer populate the properties matching LINK_INTERFACE_LIBRARIES(_&lt;CONFIG&gt;)? if this policy is NEW.</p> <p>Warning-free future-compatible code which works with CMake 2.8.7 onwards can be written by using the <code>LINK_PRIVATE</code> and <code>LINK_PUBLIC</code> keywords of <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a>.</p> <p>The OLD behavior for this policy is to ignore the INTERFACE_LINK_LIBRARIES property for in-build targets. The NEW behavior for this policy is to use the INTERFACE_LINK_LIBRARIES property for in-build targets, and ignore the old properties matching <code>(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_&lt;CONFIG&gt;)?</code>.</p> <p>This policy was introduced in CMake version 2.8.12. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0022.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0022.html</a>\n  </p>\n</div>\n","policy/cmp0023":"<h1 id=\"policy:CMP0023\">CMP0023</h1> <p id=\"cmp0023\">Plain and keyword target_link_libraries signatures cannot be mixed.</p> <p>CMake 2.8.12 introduced the target_link_libraries signature using the PUBLIC, PRIVATE, and INTERFACE keywords to generalize the LINK_PUBLIC and LINK_PRIVATE keywords introduced in CMake 2.8.7. Use of signatures with any of these keywords sets the link interface of a target explicitly, even if empty. This produces confusing behavior when used in combination with the historical behavior of the plain target_link_libraries signature. For example, consider the code:</p> <pre data-language=\"python\">target_link_libraries(mylib A)\ntarget_link_libraries(mylib PRIVATE B)\n</pre> <p>After the first line the link interface has not been set explicitly so CMake would use the link implementation, A, as the link interface. However, the second line sets the link interface to empty. In order to avoid this subtle behavior CMake now prefers to disallow mixing the plain and keyword signatures of target_link_libraries for a single target.</p> <p>The OLD behavior for this policy is to allow keyword and plain target_link_libraries signatures to be mixed. The NEW behavior for this policy is to not to allow mixing of the keyword and plain signatures.</p> <p>This policy was introduced in CMake version 2.8.12. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0023.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0023.html</a>\n  </p>\n</div>\n","policy/cmp0024":"<h1 id=\"policy:CMP0024\">CMP0024</h1> <p id=\"cmp0024\">Disallow include export result.</p> <p>CMake 2.8.12 and lower allowed use of the include() command with the result of the export() command. This relies on the assumption that the export() command has an immediate effect at configure-time during a cmake run. Certain properties of targets are not fully determined until later at generate-time, such as the link language and complete list of link libraries. Future refactoring will change the effect of the export() command to be executed at generate-time. Use ALIAS targets instead in cases where the goal is to refer to targets by another name.</p> <p>The OLD behavior for this policy is to allow including the result of an export() command. The NEW behavior for this policy is not to allow including the result of an export() command.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0024.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0024.html</a>\n  </p>\n</div>\n","policy/cmp0026":"<h1 id=\"policy:CMP0026\">CMP0026</h1> <p id=\"cmp0026\">Disallow use of the LOCATION property for build targets.</p> <p>CMake 2.8.12 and lower allowed reading the LOCATION target property (and configuration-specific variants) to determine the eventual location of build targets. This relies on the assumption that all necessary information is available at configure-time to determine the final location and filename of the target. However, this property is not fully determined until later at generate-time. At generate time, the $&lt;TARGET_FILE&gt; generator expression can be used to determine the eventual LOCATION of a target output.</p> <p>Code which reads the LOCATION target property can be ported to use the $&lt;TARGET_FILE&gt; generator expression together with the file(GENERATE) subcommand to generate a file containing the target location.</p> <p>The OLD behavior for this policy is to allow reading the LOCATION properties from build-targets. The NEW behavior for this policy is to not to allow reading the LOCATION properties from build-targets.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0026.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0026.html</a>\n  </p>\n</div>\n","policy/cmp0025":"<h1 id=\"policy:CMP0025\">CMP0025</h1> <p id=\"cmp0025\">Compiler id for Apple Clang is now <code>AppleClang</code>.</p> <p>CMake 3.0 and above recognize that Apple Clang is a different compiler than upstream Clang and that they have different version numbers. CMake now prefers to present this to projects by setting the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_ID\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\"><code>CMAKE_&lt;LANG&gt;_COMPILER_ID</code></a> variable to <code>AppleClang</code> instead of <code>Clang</code>. However, existing projects may assume the compiler id for Apple Clang is just <code>Clang</code> as it was in CMake versions prior to 3.0. Therefore this policy determines for Apple Clang which compiler id to report in the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_ID\" id=\"index-1-variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\"><code>CMAKE_&lt;LANG&gt;_COMPILER_ID</code></a> variable after language <code>&lt;LANG&gt;</code> is enabled by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> or <a class=\"reference internal\" href=\"../command/enable_language#command:enable_language\" title=\"enable_language\" id=\"index-0-command:enable_language\"><code>enable_language()</code></a> command. The policy must be set prior to the invocation of either command.</p> <p>The OLD behavior for this policy is to use compiler id <code>Clang</code>. The NEW behavior for this policy is to use compiler id <code>AppleClang</code>.</p> <p>This policy was introduced in CMake version 3.0. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set this policy to OLD or NEW explicitly. Unlike most policies, CMake version 3.5.2 does <em>not</em> warn by default when this policy is not set and simply uses OLD behavior. See documentation of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;\" id=\"index-0-variable:CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;\"><code>CMAKE_POLICY_WARNING_CMP0025</code></a> variable to control the warning.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0025.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0025.html</a>\n  </p>\n</div>\n","policy/cmp0032":"<h1 id=\"policy:CMP0032\">CMP0032</h1> <p id=\"cmp0032\">The <a class=\"reference internal\" href=\"../command/output_required_files#command:output_required_files\" title=\"output_required_files\" id=\"index-0-command:output_required_files\"><code>output_required_files()</code></a> command should not be called.</p> <p>This command was added in June 2001 to expose the then-current CMake implicit dependency scanner. CMake’s real implicit dependency scanner has evolved since then but is not exposed through this command. The scanning capabilities of this command are very limited and this functionality is better achieved through dedicated outside tools.</p> <p>CMake &gt;= 3.0 prefer that this command never be called. The OLD behavior for this policy is to allow the command to be called. The NEW behavior for this policy is to issue a FATAL_ERROR when the command is called.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0032.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0032.html</a>\n  </p>\n</div>\n","policy/cmp0028":"<h1 id=\"policy:CMP0028\">CMP0028</h1> <p id=\"cmp0028\">Double colon in target name means ALIAS or IMPORTED target.</p> <p>CMake 2.8.12 and lower allowed the use of targets and files with double colons in target_link_libraries, with some buildsystem generators.</p> <p>The use of double-colons is a common pattern used to namespace IMPORTED targets and ALIAS targets. When computing the link dependencies of a target, the name of each dependency could either be a target, or a file on disk. Previously, if a target was not found with a matching name, the name was considered to refer to a file on disk. This can lead to confusing error messages if there is a typo in what should be a target name.</p> <p>The OLD behavior for this policy is to search for targets, then files on disk, even if the search term contains double-colons. The NEW behavior for this policy is to issue a FATAL_ERROR if a link dependency contains double-colons but is not an IMPORTED target or an ALIAS target.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0028.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0028.html</a>\n  </p>\n</div>\n","policy/cmp0030":"<h1 id=\"policy:CMP0030\">CMP0030</h1> <p id=\"cmp0030\">The <a class=\"reference internal\" href=\"../command/use_mangled_mesa#command:use_mangled_mesa\" title=\"use_mangled_mesa\" id=\"index-0-command:use_mangled_mesa\"><code>use_mangled_mesa()</code></a> command should not be called.</p> <p>This command was created in September 2001 to support VTK before modern CMake language and custom command capabilities. VTK has not used it in years.</p> <p>CMake &gt;= 3.0 prefer that this command never be called. The OLD behavior for this policy is to allow the command to be called. The NEW behavior for this policy is to issue a FATAL_ERROR when the command is called.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0030.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0030.html</a>\n  </p>\n</div>\n","policy/cmp0031":"<h1 id=\"policy:CMP0031\">CMP0031</h1> <p id=\"cmp0031\">The <a class=\"reference internal\" href=\"../command/load_command#command:load_command\" title=\"load_command\" id=\"index-0-command:load_command\"><code>load_command()</code></a> command should not be called.</p> <p>This command was added in August 2002 to allow projects to add arbitrary commands implemented in C or C++. However, it does not work when the toolchain in use does not match the ABI of the CMake process. It has been mostly superseded by the <a class=\"reference internal\" href=\"../command/macro#command:macro\" title=\"macro\" id=\"index-0-command:macro\"><code>macro()</code></a> and <a class=\"reference internal\" href=\"../command/function#command:function\" title=\"function\" id=\"index-0-command:function\"><code>function()</code></a> commands.</p> <p>CMake &gt;= 3.0 prefer that this command never be called. The OLD behavior for this policy is to allow the command to be called. The NEW behavior for this policy is to issue a FATAL_ERROR when the command is called.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0031.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0031.html</a>\n  </p>\n</div>\n","policy/cmp0029":"<h1 id=\"policy:CMP0029\">CMP0029</h1> <p id=\"cmp0029\">The <a class=\"reference internal\" href=\"../command/subdir_depends#command:subdir_depends\" title=\"subdir_depends\" id=\"index-0-command:subdir_depends\"><code>subdir_depends()</code></a> command should not be called.</p> <p>The implementation of this command has been empty since December 2001 but was kept in CMake for compatibility for a long time.</p> <p>CMake &gt;= 3.0 prefer that this command never be called. The OLD behavior for this policy is to allow the command to be called. The NEW behavior for this policy is to issue a FATAL_ERROR when the command is called.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0029.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0029.html</a>\n  </p>\n</div>\n","policy/cmp0033":"<h1 id=\"policy:CMP0033\">CMP0033</h1> <p id=\"cmp0033\">The <a class=\"reference internal\" href=\"../command/export_library_dependencies#command:export_library_dependencies\" title=\"export_library_dependencies\" id=\"index-0-command:export_library_dependencies\"><code>export_library_dependencies()</code></a> command should not be called.</p> <p>This command was added in January 2003 to export <code>&lt;tgt&gt;_LIB_DEPENDS</code> internal CMake cache entries to a file for installation with a project. This was used at the time to allow transitive link dependencies to work for applications outside of the original build tree of a project. The functionality has been superseded by the <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-0-command:export\"><code>export()</code></a> and <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(EXPORT)</code></a> commands.</p> <p>CMake &gt;= 3.0 prefer that this command never be called. The OLD behavior for this policy is to allow the command to be called. The NEW behavior for this policy is to issue a FATAL_ERROR when the command is called.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0033.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0033.html</a>\n  </p>\n</div>\n","policy/cmp0035":"<h1 id=\"policy:CMP0035\">CMP0035</h1> <p id=\"cmp0035\">The <a class=\"reference internal\" href=\"../command/variable_requires#command:variable_requires\" title=\"variable_requires\" id=\"index-0-command:variable_requires\"><code>variable_requires()</code></a> command should not be called.</p> <p>This command was introduced in November 2001 to perform some conditional logic. It has long been replaced by the <a class=\"reference internal\" href=\"../command/if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> command.</p> <p>CMake &gt;= 3.0 prefer that this command never be called. The OLD behavior for this policy is to allow the command to be called. The NEW behavior for this policy is to issue a FATAL_ERROR when the command is called.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0035.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0035.html</a>\n  </p>\n</div>\n","policy/cmp0034":"<h1 id=\"policy:CMP0034\">CMP0034</h1> <p id=\"cmp0034\">The <a class=\"reference internal\" href=\"../command/utility_source#command:utility_source\" title=\"utility_source\" id=\"index-0-command:utility_source\"><code>utility_source()</code></a> command should not be called.</p> <p>This command was introduced in March 2001 to help build executables used to generate other files. This approach has long been replaced by <a class=\"reference internal\" href=\"../command/add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> combined with <a class=\"reference internal\" href=\"../command/add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-0-command:add_custom_command\"><code>add_custom_command()</code></a>.</p> <p>CMake &gt;= 3.0 prefer that this command never be called. The OLD behavior for this policy is to allow the command to be called. The NEW behavior for this policy is to issue a FATAL_ERROR when the command is called.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0034.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0034.html</a>\n  </p>\n</div>\n","policy/cmp0036":"<h1 id=\"policy:CMP0036\">CMP0036</h1> <p id=\"cmp0036\">The <a class=\"reference internal\" href=\"../command/build_name#command:build_name\" title=\"build_name\" id=\"index-0-command:build_name\"><code>build_name()</code></a> command should not be called.</p> <p>This command was added in May 2001 to compute a name for the current operating system and compiler combination. The command has long been documented as discouraged and replaced by the <a class=\"reference internal\" href=\"../variable/cmake_system#variable:CMAKE_SYSTEM\" title=\"CMAKE_SYSTEM\" id=\"index-0-variable:CMAKE_SYSTEM\"><code>CMAKE_SYSTEM</code></a> and <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER\"><code>CMAKE_&lt;LANG&gt;_COMPILER</code></a> variables.</p> <p>CMake &gt;= 3.0 prefer that this command never be called. The OLD behavior for this policy is to allow the command to be called. The NEW behavior for this policy is to issue a FATAL_ERROR when the command is called.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0036.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0036.html</a>\n  </p>\n</div>\n","policy/cmp0037":"<h1 id=\"policy:CMP0037\">CMP0037</h1> <p id=\"cmp0037\">Target names should not be reserved and should match a validity pattern.</p> <p>CMake 2.8.12 and lower allowed creating targets using <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a>, <a class=\"reference internal\" href=\"../command/add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> and <a class=\"reference internal\" href=\"../command/add_custom_target#command:add_custom_target\" title=\"add_custom_target\" id=\"index-0-command:add_custom_target\"><code>add_custom_target()</code></a> with unrestricted choice for the target name. Newer cmake features such as <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> and some diagnostics expect target names to match a restricted pattern.</p> <p>Target names may contain upper and lower case letters, numbers, the underscore character (_), dot(.), plus(+) and minus(-). As a special case, ALIAS targets and IMPORTED targets may contain two consequtive colons.</p> <p>Target names reserved by one or more CMake generators are not allowed. Among others these include “all”, “help” and “test”.</p> <p>The OLD behavior for this policy is to allow creating targets with reserved names or which do not match the validity pattern. The NEW behavior for this policy is to report an error if an add_* command is used with an invalid target name.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0037.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0037.html</a>\n  </p>\n</div>\n","policy/cmp0038":"<h1 id=\"policy:CMP0038\">CMP0038</h1> <p id=\"cmp0038\">Targets may not link directly to themselves.</p> <p>CMake 2.8.12 and lower allowed a build target to link to itself directly with a <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> call. This is an indicator of a bug in user code.</p> <p>The OLD behavior for this policy is to ignore targets which list themselves in their own link implementation. The NEW behavior for this policy is to report an error if a target attempts to link to itself.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0038.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0038.html</a>\n  </p>\n</div>\n","policy/cmp0039":"<h1 id=\"policy:CMP0039\">CMP0039</h1> <p id=\"cmp0039\">Utility targets may not have link dependencies.</p> <p>CMake 2.8.12 and lower allowed using utility targets in the left hand side position of the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> command. This is an indicator of a bug in user code.</p> <p>The OLD behavior for this policy is to ignore attempts to set the link libraries of utility targets. The NEW behavior for this policy is to report an error if an attempt is made to set the link libraries of a utility target.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0039.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0039.html</a>\n  </p>\n</div>\n","policy/cmp0040":"<h1 id=\"policy:CMP0040\">CMP0040</h1> <p id=\"cmp0040\">The target in the <code>TARGET</code> signature of <a class=\"reference internal\" href=\"../command/add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-0-command:add_custom_command\"><code>add_custom_command()</code></a> must exist and must be defined in current directory.</p> <p>CMake 2.8.12 and lower silently ignored a custom command created with the <code>TARGET</code> signature of <a class=\"reference internal\" href=\"../command/add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-1-command:add_custom_command\"><code>add_custom_command()</code></a> if the target is unknown or was defined outside the current directory.</p> <p>The <code>OLD</code> behavior for this policy is to ignore custom commands for unknown targets. The <code>NEW</code> behavior for this policy is to report an error if the target referenced in <a class=\"reference internal\" href=\"../command/add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-2-command:add_custom_command\"><code>add_custom_command()</code></a> is unknown or was defined outside the current directory.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses <code>OLD</code> behavior. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set it to <code>OLD</code> or <code>NEW</code> explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0040.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0040.html</a>\n  </p>\n</div>\n","policy/cmp0041":"<h1 id=\"policy:CMP0041\">CMP0041</h1> <p id=\"cmp0041\">Error on relative include with generator expression.</p> <p>Diagnostics in CMake 2.8.12 and lower silently ignored an entry in the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> of a target if it contained a generator expression at any position.</p> <p>The path entries in that target property should not be relative. High-level API should ensure that by adding either a source directory or a install directory prefix, as appropriate.</p> <p>As an additional diagnostic, the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-1-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> generated on an <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target for the install location should not contain paths in the source directory or the build directory.</p> <p>The OLD behavior for this policy is to ignore relative path entries if they contain a generator expression. The NEW behavior for this policy is to report an error if a generator expression appears in another location and the path is relative.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0041.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0041.html</a>\n  </p>\n</div>\n","policy/cmp0042":"<h1 id=\"policy:CMP0042\">CMP0042</h1> <p id=\"cmp0042\"><a class=\"reference internal\" href=\"../prop_tgt/macosx_rpath#prop_tgt:MACOSX_RPATH\" title=\"MACOSX_RPATH\" id=\"index-0-prop_tgt:MACOSX_RPATH\"><code>MACOSX_RPATH</code></a> is enabled by default.</p> <p>CMake 2.8.12 and newer has support for using <code>@rpath</code> in a target’s install name. This was enabled by setting the target property <a class=\"reference internal\" href=\"../prop_tgt/macosx_rpath#prop_tgt:MACOSX_RPATH\" title=\"MACOSX_RPATH\" id=\"index-1-prop_tgt:MACOSX_RPATH\"><code>MACOSX_RPATH</code></a>. The <code>@rpath</code> in an install name is a more flexible and powerful mechanism than <code>@executable_path</code> or <code>@loader_path</code> for locating shared libraries.</p> <p>CMake 3.0 and later prefer this property to be ON by default. Projects wanting <code>@rpath</code> in a target’s install name may remove any setting of the <a class=\"reference internal\" href=\"../prop_tgt/install_name_dir#prop_tgt:INSTALL_NAME_DIR\" title=\"INSTALL_NAME_DIR\" id=\"index-0-prop_tgt:INSTALL_NAME_DIR\"><code>INSTALL_NAME_DIR</code></a> and <a class=\"reference internal\" href=\"../variable/cmake_install_name_dir#variable:CMAKE_INSTALL_NAME_DIR\" title=\"CMAKE_INSTALL_NAME_DIR\" id=\"index-0-variable:CMAKE_INSTALL_NAME_DIR\"><code>CMAKE_INSTALL_NAME_DIR</code></a> variables.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0042.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0042.html</a>\n  </p>\n</div>\n","policy/cmp0043":"<h1 id=\"policy:CMP0043\">CMP0043</h1> <p id=\"cmp0043\">Ignore COMPILE_DEFINITIONS_&lt;Config&gt; properties</p> <p>CMake 2.8.12 and lower allowed setting the <a class=\"reference internal\" href=\"#\" title=\"COMPILE_DEFINITIONS_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:COMPILE_DEFINITIONS_&lt;CONFIG&gt;\"><code>COMPILE_DEFINITIONS_&lt;CONFIG&gt;</code></a> target property and <a class=\"reference internal\" href=\"#\" title=\"COMPILE_DEFINITIONS_&lt;CONFIG&gt;\" id=\"index-0-prop_dir:COMPILE_DEFINITIONS_&lt;CONFIG&gt;\"><code>COMPILE_DEFINITIONS_&lt;CONFIG&gt;</code></a> directory property to apply configuration-specific compile definitions.</p> <p>Since CMake 2.8.10, the <a class=\"reference internal\" href=\"../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_tgt:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> property has supported <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a> for setting configuration-dependent content. The continued existence of the suffixed variables is redundant, and causes a maintenance burden. Population of the <a class=\"reference internal\" href=\"#\" title=\"COMPILE_DEFINITIONS_&lt;CONFIG&gt;\" id=\"index-1-prop_tgt:COMPILE_DEFINITIONS_&lt;CONFIG&gt;\"><code>COMPILE_DEFINITIONS_DEBUG</code></a> property may be replaced with a population of <a class=\"reference internal\" href=\"../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-1-prop_tgt:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> directly or via <a class=\"reference internal\" href=\"../command/target_compile_definitions#command:target_compile_definitions\" title=\"target_compile_definitions\" id=\"index-0-command:target_compile_definitions\"><code>target_compile_definitions()</code></a>:</p> <pre data-language=\"cmake\"># Old Interfaces:\nset_property(TARGET tgt APPEND PROPERTY\n  COMPILE_DEFINITIONS_DEBUG DEBUG_MODE\n)\nset_property(DIRECTORY APPEND PROPERTY\n  COMPILE_DEFINITIONS_DEBUG DIR_DEBUG_MODE\n)\n\n# New Interfaces:\nset_property(TARGET tgt APPEND PROPERTY\n  COMPILE_DEFINITIONS $&lt;$&lt;CONFIG:Debug&gt;:DEBUG_MODE&gt;\n)\ntarget_compile_definitions(tgt PRIVATE $&lt;$&lt;CONFIG:Debug&gt;:DEBUG_MODE&gt;)\nset_property(DIRECTORY APPEND PROPERTY\n  COMPILE_DEFINITIONS $&lt;$&lt;CONFIG:Debug&gt;:DIR_DEBUG_MODE&gt;\n)\n</pre> <p>The OLD behavior for this policy is to consume the content of the suffixed <a class=\"reference internal\" href=\"#\" title=\"COMPILE_DEFINITIONS_&lt;CONFIG&gt;\" id=\"index-2-prop_tgt:COMPILE_DEFINITIONS_&lt;CONFIG&gt;\"><code>COMPILE_DEFINITIONS_&lt;CONFIG&gt;</code></a> target property when generating the compilation command. The NEW behavior for this policy is to ignore the content of the <a class=\"reference internal\" href=\"#\" title=\"COMPILE_DEFINITIONS_&lt;CONFIG&gt;\" id=\"index-3-prop_tgt:COMPILE_DEFINITIONS_&lt;CONFIG&gt;\"><code>COMPILE_DEFINITIONS_&lt;CONFIG&gt;</code></a> target property .</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0043.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0043.html</a>\n  </p>\n</div>\n","policy/cmp0044":"<h1 id=\"policy:CMP0044\">CMP0044</h1> <p id=\"cmp0044\">Case sensitive <code>&lt;LANG&gt;_COMPILER_ID</code> generator expressions</p> <p>CMake 2.8.12 introduced the <code>&lt;LANG&gt;_COMPILER_ID</code> <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a> to allow comparison of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_ID\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\"><code>CMAKE_&lt;LANG&gt;_COMPILER_ID</code></a> with a test value. The possible valid values are lowercase, but the comparison with the test value was performed case-insensitively.</p> <p>The OLD behavior for this policy is to perform a case-insensitive comparison with the value in the <code>&lt;LANG&gt;_COMPILER_ID</code> expression. The NEW behavior for this policy is to perform a case-sensitive comparison with the value in the <code>&lt;LANG&gt;_COMPILER_ID</code> expression.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0044.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0044.html</a>\n  </p>\n</div>\n","policy/cmp0045":"<h1 id=\"policy:CMP0045\">CMP0045</h1> <p id=\"cmp0045\">Error on non-existent target in get_target_property.</p> <p>In CMake 2.8.12 and lower, the <a class=\"reference internal\" href=\"../command/get_target_property#command:get_target_property\" title=\"get_target_property\" id=\"index-0-command:get_target_property\"><code>get_target_property()</code></a> command accepted a non-existent target argument without issuing any error or warning. The result variable is set to a <code>-NOTFOUND</code> value.</p> <p>The OLD behavior for this policy is to issue no warning and set the result variable to a <code>-NOTFOUND</code> value. The NEW behavior for this policy is to issue a <code>FATAL_ERROR</code> if the command is called with a non-existent target.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0045.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0045.html</a>\n  </p>\n</div>\n","policy/cmp0046":"<h1 id=\"policy:CMP0046\">CMP0046</h1> <p id=\"cmp0046\">Error on non-existent dependency in add_dependencies.</p> <p>CMake 2.8.12 and lower silently ignored non-existent dependencies listed in the <a class=\"reference internal\" href=\"../command/add_dependencies#command:add_dependencies\" title=\"add_dependencies\" id=\"index-0-command:add_dependencies\"><code>add_dependencies()</code></a> command.</p> <p>The OLD behavior for this policy is to silently ignore non-existent dependencies. The NEW behavior for this policy is to report an error if non-existent dependencies are listed in the <a class=\"reference internal\" href=\"../command/add_dependencies#command:add_dependencies\" title=\"add_dependencies\" id=\"index-1-command:add_dependencies\"><code>add_dependencies()</code></a> command.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0046.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0046.html</a>\n  </p>\n</div>\n","policy/cmp0047":"<h1 id=\"policy:CMP0047\">CMP0047</h1> <p id=\"cmp0047\">Use <code>QCC</code> compiler id for the qcc drivers on QNX.</p> <p>CMake 3.0 and above recognize that the QNX qcc compiler driver is different from the GNU compiler. CMake now prefers to present this to projects by setting the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_ID\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\"><code>CMAKE_&lt;LANG&gt;_COMPILER_ID</code></a> variable to <code>QCC</code> instead of <code>GNU</code>. However, existing projects may assume the compiler id for QNX qcc is just <code>GNU</code> as it was in CMake versions prior to 3.0. Therefore this policy determines for QNX qcc which compiler id to report in the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_ID\" id=\"index-1-variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\"><code>CMAKE_&lt;LANG&gt;_COMPILER_ID</code></a> variable after language <code>&lt;LANG&gt;</code> is enabled by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> or <a class=\"reference internal\" href=\"../command/enable_language#command:enable_language\" title=\"enable_language\" id=\"index-0-command:enable_language\"><code>enable_language()</code></a> command. The policy must be set prior to the invocation of either command.</p> <p>The OLD behavior for this policy is to use the <code>GNU</code> compiler id for the qcc and QCC compiler drivers. The NEW behavior for this policy is to use the <code>QCC</code> compiler id for those drivers.</p> <p>This policy was introduced in CMake version 3.0. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set this policy to OLD or NEW explicitly. Unlike most policies, CMake version 3.5.2 does <em>not</em> warn by default when this policy is not set and simply uses OLD behavior. See documentation of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;\" id=\"index-0-variable:CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;\"><code>CMAKE_POLICY_WARNING_CMP0047</code></a> variable to control the warning.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0047.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0047.html</a>\n  </p>\n</div>\n","policy/cmp0048":"<h1 id=\"policy:CMP0048\">CMP0048</h1> <p id=\"cmp0048\">The <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command manages VERSION variables.</p> <p>CMake version 3.0 introduced the <code>VERSION</code> option of the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-1-command:project\"><code>project()</code></a> command to specify a project version as well as the name. In order to keep <a class=\"reference internal\" href=\"../variable/project_version#variable:PROJECT_VERSION\" title=\"PROJECT_VERSION\" id=\"index-0-variable:PROJECT_VERSION\"><code>PROJECT_VERSION</code></a> and related variables consistent with variable <a class=\"reference internal\" href=\"../variable/project_name#variable:PROJECT_NAME\" title=\"PROJECT_NAME\" id=\"index-0-variable:PROJECT_NAME\"><code>PROJECT_NAME</code></a> it is necessary to set the VERSION variables to the empty string when no <code>VERSION</code> is given to <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-2-command:project\"><code>project()</code></a>. However, this can change behavior for existing projects that set VERSION variables themselves since <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-3-command:project\"><code>project()</code></a> may now clear them. This policy controls the behavior for compatibility with such projects.</p> <p>The OLD behavior for this policy is to leave VERSION variables untouched. The NEW behavior for this policy is to set VERSION as documented by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-4-command:project\"><code>project()</code></a> command.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0048.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0048.html</a>\n  </p>\n</div>\n","policy/cmp0049":"<h1 id=\"policy:CMP0049\">CMP0049</h1> <p id=\"cmp0049\">Do not expand variables in target source entries.</p> <p>CMake 2.8.12 and lower performed and extra layer of variable expansion when evaluating source file names:</p> <pre data-language=\"cmake\">set(a_source foo.c)\nadd_executable(foo \\${a_source})\n</pre> <p>This was undocumented behavior.</p> <p>The OLD behavior for this policy is to expand such variables when processing the target sources. The NEW behavior for this policy is to issue an error if such variables need to be expanded.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0049.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0049.html</a>\n  </p>\n</div>\n","policy/cmp0050":"<h1 id=\"policy:CMP0050\">CMP0050</h1> <p id=\"cmp0050\">Disallow add_custom_command SOURCE signatures.</p> <p>CMake 2.8.12 and lower allowed a signature for <a class=\"reference internal\" href=\"../command/add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-0-command:add_custom_command\"><code>add_custom_command()</code></a> which specified an input to a command. This was undocumented behavior. Modern use of CMake associates custom commands with their output, rather than their input.</p> <p>The OLD behavior for this policy is to allow the use of <a class=\"reference internal\" href=\"../command/add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-1-command:add_custom_command\"><code>add_custom_command()</code></a> SOURCE signatures. The NEW behavior for this policy is to issue an error if such a signature is used.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0050.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0050.html</a>\n  </p>\n</div>\n","policy/cmp0051":"<h1 id=\"policy:CMP0051\">CMP0051</h1> <p id=\"cmp0051\">List TARGET_OBJECTS in SOURCES target property.</p> <p>CMake 3.0 and lower did not include the <code>TARGET_OBJECTS</code> <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expression</code></a> when returning the <a class=\"reference internal\" href=\"../prop_tgt/sources#prop_tgt:SOURCES\" title=\"SOURCES\" id=\"index-0-prop_tgt:SOURCES\"><code>SOURCES</code></a> target property.</p> <p>Configure-time CMake code is not able to handle generator expressions. If using the <a class=\"reference internal\" href=\"../prop_tgt/sources#prop_tgt:SOURCES\" title=\"SOURCES\" id=\"index-1-prop_tgt:SOURCES\"><code>SOURCES</code></a> target property at configure time, it may be necessary to first remove generator expressions using the <a class=\"reference internal\" href=\"../command/string#command:string\" title=\"string\" id=\"index-0-command:string\"><code>string(GENEX_STRIP)</code></a> command. Generate-time CMake code such as <a class=\"reference internal\" href=\"../command/file#command:file\" title=\"file\" id=\"index-0-command:file\"><code>file(GENERATE)</code></a> can handle the content without stripping.</p> <p>The <code>OLD</code> behavior for this policy is to omit <code>TARGET_OBJECTS</code> expressions from the <a class=\"reference internal\" href=\"../prop_tgt/sources#prop_tgt:SOURCES\" title=\"SOURCES\" id=\"index-2-prop_tgt:SOURCES\"><code>SOURCES</code></a> target property. The <code>NEW</code> behavior for this policy is to include <code>TARGET_OBJECTS</code> expressions in the output.</p> <p>This policy was introduced in CMake version 3.1. CMake version 3.5.2 warns when the policy is not set and uses <code>OLD</code> behavior. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set it to <code>OLD</code> or <code>NEW</code> explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0051.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0051.html</a>\n  </p>\n</div>\n","policy/cmp0052":"<h1 id=\"policy:CMP0052\">CMP0052</h1> <p id=\"cmp0052\">Reject source and build dirs in installed INTERFACE_INCLUDE_DIRECTORIES.</p> <p>CMake 3.0 and lower allowed subdirectories of the source directory or build directory to be in the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> of installed and exported targets, if the directory was also a subdirectory of the installation prefix. This makes the installation depend on the existence of the source dir or binary dir, and the installation will be broken if either are removed after installation.</p> <p>See <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#include-directories-and-usage-requirements\"><span>Include Directories and Usage Requirements</span></a> for more on specifying include directories for targets.</p> <p>The OLD behavior for this policy is to export the content of the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-1-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> with the source or binary directory. The NEW behavior for this policy is to issue an error if such a directory is used.</p> <p>This policy was introduced in CMake version 3.1. CMake version 3.5.2 warns when the policy is not set and uses <code>OLD</code> behavior. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set it to <code>OLD</code> or <code>NEW</code> explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0052.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0052.html</a>\n  </p>\n</div>\n","policy/cmp0054":"<h1 id=\"policy:CMP0054\">CMP0054</h1> <p id=\"cmp0054\">Only interpret <a class=\"reference internal\" href=\"../command/if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> arguments as variables or keywords when unquoted.</p> <p>CMake 3.1 and above no longer implicitly dereference variables or interpret keywords in an <a class=\"reference internal\" href=\"../command/if#command:if\" title=\"if\" id=\"index-1-command:if\"><code>if()</code></a> command argument when it is a <a class=\"reference internal\" href=\"../manual/cmake-language.7#quoted-argument\"><span>Quoted Argument</span></a> or a <a class=\"reference internal\" href=\"../manual/cmake-language.7#bracket-argument\"><span>Bracket Argument</span></a>.</p> <p>The <code>OLD</code> behavior for this policy is to dereference variables and interpret keywords even if they are quoted or bracketed. The <code>NEW</code> behavior is to not dereference variables or interpret keywords that have been quoted or bracketed.</p> <p>Given the following partial example:</p> <pre data-language=\"python\">set(A E)\nset(E \"\")\n\nif(\"${A}\" STREQUAL \"\")\n  message(\"Result is TRUE before CMake 3.1 or when CMP0054 is OLD\")\nelse()\n  message(\"Result is FALSE in CMake 3.1 and above if CMP0054 is NEW\")\nendif()\n</pre> <p>After explicit expansion of variables this gives:</p> <pre data-language=\"python\">if(\"E\" STREQUAL \"\")\n</pre> <p>With the policy set to <code>OLD</code> implicit expansion reduces this semantically to:</p> <pre data-language=\"python\">if(\"\" STREQUAL \"\")\n</pre> <p>With the policy set to <code>NEW</code> the quoted arguments will not be further dereferenced:</p> <pre data-language=\"python\">if(\"E\" STREQUAL \"\")\n</pre> <p>This policy was introduced in CMake version 3.1. CMake version 3.5.2 warns when the policy is not set and uses <code>OLD</code> behavior. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set it to <code>OLD</code> or <code>NEW</code> explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0054.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0054.html</a>\n  </p>\n</div>\n","policy/cmp0053":"<h1 id=\"policy:CMP0053\">CMP0053</h1> <p id=\"cmp0053\">Simplify variable reference and escape sequence evaluation.</p> <p>CMake 3.1 introduced a much faster implementation of evaluation of the <a class=\"reference internal\" href=\"../manual/cmake-language.7#variable-references\"><span>Variable References</span></a> and <a class=\"reference internal\" href=\"../manual/cmake-language.7#escape-sequences\"><span>Escape Sequences</span></a> documented in the <a class=\"reference internal\" href=\"../manual/cmake-language.7#manual:cmake-language(7)\" title=\"cmake-language(7)\" id=\"index-0-manual:cmake-language(7)\"><code>cmake-language(7)</code></a> manual. While the behavior is identical to the legacy implementation in most cases, some corner cases were cleaned up to simplify the behavior. Specifically:</p> <ul> <li>Expansion of <code>@VAR@</code> reference syntax defined by the <a class=\"reference internal\" href=\"../command/configure_file#command:configure_file\" title=\"configure_file\" id=\"index-0-command:configure_file\"><code>configure_file()</code></a> and <a class=\"reference internal\" href=\"../command/string#command:string\" title=\"string\" id=\"index-0-command:string\"><code>string(CONFIGURE)</code></a> commands is no longer performed in other contexts. </li> <li>\n<p class=\"first\">Literal <code>${VAR}</code> reference syntax may contain only alphanumeric characters (<code>A-Z</code>, <code>a-z</code>, <code>0-9</code>) and the characters <code>_</code>, <code>.</code>, <code>/</code>, <code>-</code>, and <code>+</code>. Variables with other characters in their name may still be referenced indirectly, e.g.</p> <pre data-language=\"cmake\">set(varname \"otherwise &amp; disallowed $ characters\")\nmessage(\"${${varname}}\")\n</pre> </li> <li>The setting of policy <a class=\"reference internal\" href=\"cmp0010#policy:CMP0010\" title=\"CMP0010\" id=\"index-0-policy:CMP0010\"><code>CMP0010</code></a> is not considered, so improper variable reference syntax is always an error. </li> <li>More characters are allowed to be escaped in variable names. Previously, only <code>()#\" \\@^</code> were valid characters to escape. Now any non-alphanumeric, non-semicolon, non-NUL character may be escaped following the <code>escape_identity</code> production in the <a class=\"reference internal\" href=\"../manual/cmake-language.7#escape-sequences\"><span>Escape Sequences</span></a> section of the <a class=\"reference internal\" href=\"../manual/cmake-language.7#manual:cmake-language(7)\" title=\"cmake-language(7)\" id=\"index-1-manual:cmake-language(7)\"><code>cmake-language(7)</code></a> manual. </li> </ul> <p>The <code>OLD</code> behavior for this policy is to honor the legacy behavior for variable references and escape sequences. The <code>NEW</code> behavior is to use the simpler variable expansion and escape sequence evaluation rules.</p> <p>This policy was introduced in CMake version 3.1. CMake version 3.5.2 warns when the policy is not set and uses <code>OLD</code> behavior. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set it to <code>OLD</code> or <code>NEW</code> explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0053.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0053.html</a>\n  </p>\n</div>\n","policy/cmp0055":"<h1 id=\"policy:CMP0055\">CMP0055</h1> <p id=\"cmp0055\">Strict checking for the <a class=\"reference internal\" href=\"../command/break#command:break\" title=\"break\" id=\"index-0-command:break\"><code>break()</code></a> command.</p> <p>CMake 3.1 and lower allowed calls to the <a class=\"reference internal\" href=\"../command/break#command:break\" title=\"break\" id=\"index-1-command:break\"><code>break()</code></a> command outside of a loop context and also ignored any given arguments. This was undefined behavior.</p> <p>The OLD behavior for this policy is to allow <a class=\"reference internal\" href=\"../command/break#command:break\" title=\"break\" id=\"index-2-command:break\"><code>break()</code></a> to be placed outside of loop contexts and ignores any arguments. The NEW behavior for this policy is to issue an error if a misplaced break or any arguments are found.</p> <p>This policy was introduced in CMake version 3.2. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0055.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0055.html</a>\n  </p>\n</div>\n","policy/cmp0056":"<h1 id=\"policy:CMP0056\">CMP0056</h1> <p id=\"cmp0056\">Honor link flags in <a class=\"reference internal\" href=\"../command/try_compile#command:try_compile\" title=\"try_compile\" id=\"index-0-command:try_compile\"><code>try_compile()</code></a> source-file signature.</p> <p>The <a class=\"reference internal\" href=\"../command/try_compile#command:try_compile\" title=\"try_compile\" id=\"index-1-command:try_compile\"><code>try_compile()</code></a> command source-file signature generates a <code>CMakeLists.txt</code> file to build the source file into an executable. In order to compile the source the same way as it might be compiled by the calling project, the generated project sets the value of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_FLAGS\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_FLAGS\"><code>CMAKE_&lt;LANG&gt;_FLAGS</code></a> variable to that in the calling project. The value of the <a class=\"reference internal\" href=\"../variable/cmake_exe_linker_flags#variable:CMAKE_EXE_LINKER_FLAGS\" title=\"CMAKE_EXE_LINKER_FLAGS\" id=\"index-0-variable:CMAKE_EXE_LINKER_FLAGS\"><code>CMAKE_EXE_LINKER_FLAGS</code></a> variable may be needed in some cases too, but CMake 3.1 and lower did not set it in the generated project. CMake 3.2 and above prefer to set it so that linker flags are honored as well as compiler flags. This policy provides compatibility with the pre-3.2 behavior.</p> <p>The OLD behavior for this policy is to not set the value of the <a class=\"reference internal\" href=\"../variable/cmake_exe_linker_flags#variable:CMAKE_EXE_LINKER_FLAGS\" title=\"CMAKE_EXE_LINKER_FLAGS\" id=\"index-1-variable:CMAKE_EXE_LINKER_FLAGS\"><code>CMAKE_EXE_LINKER_FLAGS</code></a> variable in the generated test project. The NEW behavior for this policy is to set the value of the <a class=\"reference internal\" href=\"../variable/cmake_exe_linker_flags#variable:CMAKE_EXE_LINKER_FLAGS\" title=\"CMAKE_EXE_LINKER_FLAGS\" id=\"index-2-variable:CMAKE_EXE_LINKER_FLAGS\"><code>CMAKE_EXE_LINKER_FLAGS</code></a> variable in the test project to the same as it is in the calling project.</p> <p>If the project code does not set the policy explicitly, users may set it on the command line by defining the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;\" id=\"index-0-variable:CMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;\"><code>CMAKE_POLICY_DEFAULT_CMP0056</code></a> variable in the cache.</p> <p>This policy was introduced in CMake version 3.2. Unlike most policies, CMake version 3.5.2 does <em>not</em> warn by default when this policy is not set and simply uses OLD behavior. See documentation of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;\" id=\"index-0-variable:CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;\"><code>CMAKE_POLICY_WARNING_CMP0056</code></a> variable to control the warning.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0056.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0056.html</a>\n  </p>\n</div>\n","policy/cmp0057":"<h1 id=\"policy:CMP0057\">CMP0057</h1> <p id=\"cmp0057\">Support new <a class=\"reference internal\" href=\"../command/if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> IN_LIST operator.</p> <p>CMake 3.3 adds support for the new IN_LIST operator.</p> <p>The <code>OLD</code> behavior for this policy is to ignore the IN_LIST operator. The <code>NEW</code> behavior is to interpret the IN_LIST operator.</p> <p>This policy was introduced in CMake version 3.3. CMake version 3.5.2 warns when the policy is not set and uses <code>OLD</code> behavior. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set it to <code>OLD</code> or <code>NEW</code> explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0057.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0057.html</a>\n  </p>\n</div>\n","policy/cmp0058":"<h1 id=\"policy:CMP0058\">CMP0058</h1> <p id=\"cmp0058\">Ninja requires custom command byproducts to be explicit.</p> <p>When an intermediate file generated during the build is consumed by an expensive operation or a large tree of dependents, one may reduce the work needed for an incremental rebuild by updating the file timestamp only when its content changes. With this approach the generation rule must have a separate output file that is always updated with a new timestamp that is newer than any dependencies of the rule so that the build tool re-runs the rule only when the input changes. We refer to the separate output file as a rule’s <em>witness</em> and the generated file as a rule’s <em>byproduct</em>.</p> <p>Byproducts may not be listed as outputs because their timestamps are allowed to be older than the inputs. No build tools (like <code>make</code>) that existed when CMake was designed have a way to express byproducts. Therefore CMake versions prior to 3.2 had no way to specify them. Projects typically left byproducts undeclared in the rules that generate them. For example:</p> <pre data-language=\"cmake\">add_custom_command(\n  OUTPUT witness.txt\n  COMMAND ${CMAKE_COMMAND} -E copy_if_different\n          ${CMAKE_CURRENT_SOURCE_DIR}/input.txt\n          byproduct.txt # timestamp may not change\n  COMMAND ${CMAKE_COMMAND} -E touch witness.txt\n  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/input.txt\n  )\nadd_custom_target(Provider DEPENDS witness.txt)\nadd_custom_command(\n  OUTPUT generated.c\n  COMMAND expensive-task -i byproduct.txt -o generated.c\n  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/byproduct.txt\n  )\nadd_library(Consumer generated.c)\nadd_dependencies(Consumer Provider)\n</pre> <p>This works well for all generators except <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a>. The Ninja build tool sees a rule listing <code>byproduct.txt</code> as a dependency and no rule listing it as an output. Ninja then complains that there is no way to satisfy the dependency and stops building even though there are order-only dependencies that ensure <code>byproduct.txt</code> will exist before its consumers need it. See discussion of this problem in <a class=\"reference external\" href=\"https://github.com/martine/ninja/issues/760\">Ninja Issue 760</a> for further details on why Ninja works this way.</p> <p>Instead of leaving byproducts undeclared in the rules that generate them, Ninja expects byproducts to be listed along with other outputs. Such rules may be marked with a <code>restat</code> option that tells Ninja to check the timestamps of outputs after the rules run. This prevents byproducts whose timestamps do not change from causing their dependents to re-build unnecessarily.</p> <p>Since the above approach does not tell CMake what custom command generates <code>byproduct.txt</code>, the Ninja generator does not have enough information to add the byproduct as an output of any rule. CMake 2.8.12 and above work around this problem and allow projects using the above approach to build by generating <code>phony</code> build rules to tell Ninja to tolerate such missing files. However, this workaround prevents Ninja from diagnosing a dependency that is really missing. It also works poorly in in-source builds where every custom command dependency, even on source files, needs to be treated this way because CMake does not have enough information to know which files are generated as byproducts of custom commands.</p> <p>CMake 3.2 introduced the <code>BYPRODUCTS</code> option to the <a class=\"reference internal\" href=\"../command/add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-0-command:add_custom_command\"><code>add_custom_command()</code></a> and <a class=\"reference internal\" href=\"../command/add_custom_target#command:add_custom_target\" title=\"add_custom_target\" id=\"index-0-command:add_custom_target\"><code>add_custom_target()</code></a> commands. This option allows byproducts to be specified explicitly:</p> <pre data-language=\"cmake\">add_custom_command(\n  OUTPUT witness.txt\n  BYPRODUCTS byproduct.txt # explicit byproduct specification\n  COMMAND ${CMAKE_COMMAND} -E copy_if_different\n          ${CMAKE_CURRENT_SOURCE_DIR}/input.txt\n          byproduct.txt # timestamp may not change\n...\n</pre> <p>The <code>BYPRODUCTS</code> option is used by the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-1-generator:Ninja\"><code>Ninja</code></a> generator to list byproducts among the outputs of the custom commands that generate them, and is ignored by other generators.</p> <p>CMake 3.3 and above prefer to require projects to specify custom command byproducts explicitly so that it can avoid using the <code>phony</code> rule workaround altogether. Policy <code>CMP0058</code> was introduced to provide compatibility with existing projects that still need the workaround.</p> <p>This policy has no effect on generators other than <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-2-generator:Ninja\"><code>Ninja</code></a>. The <code>OLD</code> behavior for this policy is to generate Ninja <code>phony</code> rules for unknown dependencies in the build tree. The <code>NEW</code> behavior for this policy is to not generate these and instead require projects to specify custom command <code>BYPRODUCTS</code> explicitly.</p> <p>This policy was introduced in CMake version 3.3. CMake version 3.5.2 warns when it sees unknown dependencies in out-of-source build trees if the policy is not set and then uses <code>OLD</code> behavior. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set the policy to <code>OLD</code> or <code>NEW</code> explicitly. The policy setting must be in scope at the end of the top-level <code>CMakeLists.txt</code> file of the project and has global effect.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0058.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0058.html</a>\n  </p>\n</div>\n","policy/cmp0059":"<h1 id=\"policy:CMP0059\">CMP0059</h1> <p id=\"cmp0059\">Don’t treat <code>DEFINITIONS</code> as a built-in directory property.</p> <p>CMake 3.3 and above no longer make a list of definitions available through the <a class=\"reference internal\" href=\"../prop_dir/definitions#prop_dir:DEFINITIONS\" title=\"DEFINITIONS\" id=\"index-0-prop_dir:DEFINITIONS\"><code>DEFINITIONS</code></a> directory property. The <a class=\"reference internal\" href=\"../prop_dir/compile_definitions#prop_dir:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_dir:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> directory property may be used instead.</p> <p>The <code>OLD</code> behavior for this policy is to provide the list of flags given so far to the <a class=\"reference internal\" href=\"../command/add_definitions#command:add_definitions\" title=\"add_definitions\" id=\"index-0-command:add_definitions\"><code>add_definitions()</code></a> command. The <code>NEW</code> behavior is to behave as a normal user-defined directory property.</p> <p>This policy was introduced in CMake version 3.3. CMake version 3.5.2 warns when the policy is not set and uses <code>OLD</code> behavior. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set it to <code>OLD</code> or <code>NEW</code> explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0059.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0059.html</a>\n  </p>\n</div>\n","policy/cmp0060":"<h1 id=\"policy:CMP0060\">CMP0060</h1> <p id=\"cmp0060\">Link libraries by full path even in implicit directories.</p> <p>Policy <a class=\"reference internal\" href=\"cmp0003#policy:CMP0003\" title=\"CMP0003\" id=\"index-0-policy:CMP0003\"><code>CMP0003</code></a> was introduced with the intention of always linking library files by full path when a full path is given to the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> command. However, on some platforms (e.g. HP-UX) the compiler front-end adds alternative library search paths for the current architecture (e.g. <code>/usr/lib/&lt;arch&gt;</code> has alternatives to libraries in <code>/usr/lib</code> for the current architecture). On such platforms the <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a> may find a library such as <code>/usr/lib/libfoo.so</code> that does not belong to the current architecture.</p> <p>Prior to policy <a class=\"reference internal\" href=\"cmp0003#policy:CMP0003\" title=\"CMP0003\" id=\"index-1-policy:CMP0003\"><code>CMP0003</code></a> projects would still build in such cases because the incorrect library path would be converted to <code>-lfoo</code> on the link line and the linker would find the proper library in the arch-specific search path provided by the compiler front-end implicitly. At the time we chose to remain compatible with such projects by always converting library files found in implicit link directories to <code>-lfoo</code> flags to ask the linker to search for them. This approach allowed existing projects to continue to build while still linking to libraries outside implicit link directories via full path (such as those in the build tree).</p> <p>CMake does allow projects to override this behavior by using an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>IMPORTED library target</span></a> with its <a class=\"reference internal\" href=\"../prop_tgt/imported_location#prop_tgt:IMPORTED_LOCATION\" title=\"IMPORTED_LOCATION\" id=\"index-0-prop_tgt:IMPORTED_LOCATION\"><code>IMPORTED_LOCATION</code></a> property set to the desired full path to a library file. In fact, many <a class=\"reference internal\" href=\"../manual/cmake-developer.7#find-modules\"><span>Find Modules</span></a> are learning to provide <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>Imported Targets</span></a> instead of just the traditional <code>Foo_LIBRARIES</code> variable listing library files. However, this makes the link line generated for a library found by a Find Module depend on whether it is linked through an imported target or not, which is inconsistent. Furthermore, this behavior has been a source of confusion because the generated link line for a library file depends on its location. It is also problematic for projects trying to link statically because flags like <code>-Wl,-Bstatic -lfoo -Wl,-Bdynamic</code> may be used to help the linker select <code>libfoo.a</code> instead of <code>libfoo.so</code> but then leak dynamic linking to following libraries. (See the <a class=\"reference internal\" href=\"../prop_tgt/link_search_end_static#prop_tgt:LINK_SEARCH_END_STATIC\" title=\"LINK_SEARCH_END_STATIC\" id=\"index-0-prop_tgt:LINK_SEARCH_END_STATIC\"><code>LINK_SEARCH_END_STATIC</code></a> target property for a solution typically used for that problem.)</p> <p>When the special case for libraries in implicit link directories was first introduced the list of implicit link directories was simply hard-coded (e.g. <code>/lib</code>, <code>/usr/lib</code>, and a few others). Since that time, CMake has learned to detect the implicit link directories used by the compiler front-end. If necessary, the <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-1-command:find_library\"><code>find_library()</code></a> command could be taught to use this information to help find libraries of the proper architecture.</p> <p>For these reasons, CMake 3.3 and above prefer to drop the special case and link libraries by full path even when they are in implicit link directories. Policy <code>CMP0060</code> provides compatibility for existing projects.</p> <p>The OLD behavior for this policy is to ask the linker to search for libraries whose full paths are known to be in implicit link directories. The NEW behavior for this policy is to link libraries by full path even if they are in implicit link directories.</p> <p>This policy was introduced in CMake version 3.3. Unlike most policies, CMake version 3.5.2 does <em>not</em> warn by default when this policy is not set and simply uses OLD behavior. See documentation of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;\" id=\"index-0-variable:CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;\"><code>CMAKE_POLICY_WARNING_CMP0060</code></a> variable to control the warning.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0060.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0060.html</a>\n  </p>\n</div>\n","policy/cmp0061":"<h1 id=\"policy:CMP0061\">CMP0061</h1> <p id=\"cmp0061\">CTest does not by default tell <code>make</code> to ignore errors (<code>-i</code>).</p> <p>The <a class=\"reference internal\" href=\"../command/ctest_build#command:ctest_build\" title=\"ctest_build\" id=\"index-0-command:ctest_build\"><code>ctest_build()</code></a> and <a class=\"reference internal\" href=\"../command/build_command#command:build_command\" title=\"build_command\" id=\"index-0-command:build_command\"><code>build_command()</code></a> commands no longer generate build commands for <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> with the <code>-i</code> option. Previously this was done to help build as much of tested projects as possible. However, this behavior is not consistent with other generators and also causes the return code of the <code>make</code> tool to be meaningless.</p> <p>Of course users may still add this option manually by setting <a class=\"reference internal\" href=\"../variable/ctest_build_command#variable:CTEST_BUILD_COMMAND\" title=\"CTEST_BUILD_COMMAND\" id=\"index-0-variable:CTEST_BUILD_COMMAND\"><code>CTEST_BUILD_COMMAND</code></a> or the <code>MAKECOMMAND</code> cache entry. See the <a class=\"reference internal\" href=\"../manual/ctest.1#ctest-build-step\"><span>CTest Build Step</span></a> <code>MakeCommand</code> setting documentation for their effects.</p> <p>The <code>OLD</code> behavior for this policy is to add <code>-i</code> to <code>make</code> calls in CTest. The <code>NEW</code> behavior for this policy is to not add <code>-i</code>.</p> <p>This policy was introduced in CMake version 3.3. Unlike most policies, CMake version 3.5.2 does <em>not</em> warn when this policy is not set and simply uses OLD behavior.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0061.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0061.html</a>\n  </p>\n</div>\n","policy/cmp0062":"<h1 id=\"policy:CMP0062\">CMP0062</h1> <p id=\"cmp0062\">Disallow install() of export() result.</p> <p>The <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-0-command:export\"><code>export()</code></a> command generates a file containing <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>Imported Targets</span></a>, which is suitable for use from the build directory. It is not suitable for installation because it contains absolute paths to buildsystem locations, and is particular to a single build configuration.</p> <p>The <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(EXPORT)</code></a> generates and installs files which contain <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>Imported Targets</span></a>. These files are generated with relative paths (unless the user specifies absolute paths), and are designed for multi-configuration use. See <a class=\"reference internal\" href=\"../manual/cmake-packages.7#creating-packages\"><span>Creating Packages</span></a> for more.</p> <p>CMake 3.3 no longer allows the use of the <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install(FILES)</code></a> command with the result of the <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-1-command:export\"><code>export()</code></a> command.</p> <p>The <code>OLD</code> behavior for this policy is to allow installing the result of an <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-2-command:export\"><code>export()</code></a> command. The <code>NEW</code> behavior for this policy is not to allow installing the result of an <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-3-command:export\"><code>export()</code></a> command.</p> <p>This policy was introduced in CMake version 3.3. CMake version 3.5.2 warns when the policy is not set and uses <code>OLD</code> behavior. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set it to <code>OLD</code> or <code>NEW</code> explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0062.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0062.html</a>\n  </p>\n</div>\n","policy/cmp0063":"<h1 id=\"policy:CMP0063\">CMP0063</h1> <p id=\"cmp0063\">Honor visibility properties for all target types.</p> <p>The <a class=\"reference internal\" href=\"#\" title=\"&lt;LANG&gt;_VISIBILITY_PRESET\" id=\"index-0-prop_tgt:&lt;LANG&gt;_VISIBILITY_PRESET\"><code>&lt;LANG&gt;_VISIBILITY_PRESET</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/visibility_inlines_hidden#prop_tgt:VISIBILITY_INLINES_HIDDEN\" title=\"VISIBILITY_INLINES_HIDDEN\" id=\"index-0-prop_tgt:VISIBILITY_INLINES_HIDDEN\"><code>VISIBILITY_INLINES_HIDDEN</code></a> target properties affect visibility of symbols during dynamic linking. When first introduced these properties affected compilation of sources only in shared libraries, module libraries, and executables with the <a class=\"reference internal\" href=\"../prop_tgt/enable_exports#prop_tgt:ENABLE_EXPORTS\" title=\"ENABLE_EXPORTS\" id=\"index-0-prop_tgt:ENABLE_EXPORTS\"><code>ENABLE_EXPORTS</code></a> property set. This was sufficient for the basic use cases of shared libraries and executables with plugins. However, some sources may be compiled as part of static libraries or object libraries and then linked into a shared library later. CMake 3.3 and above prefer to honor these properties for sources compiled in all target types. This policy preserves compatibility for projects expecting the properties to work only for some target types.</p> <p>The <code>OLD</code> behavior for this policy is to ignore the visibility properties for static libraries, object libraries, and executables without exports. The <code>NEW</code> behavior for this policy is to honor the visibility properties for all target types.</p> <p>This policy was introduced in CMake version 3.3. CMake version 3.5.2 warns when the policy is not set and uses <code>OLD</code> behavior. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set it to <code>OLD</code> or <code>NEW</code> explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0063.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0063.html</a>\n  </p>\n</div>\n","policy/cmp0065":"<h1 id=\"policy:CMP0065\">CMP0065</h1> <p id=\"cmp0065\">Do not add flags to export symbols from executables without the <a class=\"reference internal\" href=\"../prop_tgt/enable_exports#prop_tgt:ENABLE_EXPORTS\" title=\"ENABLE_EXPORTS\" id=\"index-0-prop_tgt:ENABLE_EXPORTS\"><code>ENABLE_EXPORTS</code></a> target property.</p> <p>CMake 3.3 and below, for historical reasons, always linked executables on some platforms with flags like <code>-rdynamic</code> to export symbols from the executables for use by any plugins they may load via <code>dlopen</code>. CMake 3.4 and above prefer to do this only for executables that are explicitly marked with the <a class=\"reference internal\" href=\"../prop_tgt/enable_exports#prop_tgt:ENABLE_EXPORTS\" title=\"ENABLE_EXPORTS\" id=\"index-1-prop_tgt:ENABLE_EXPORTS\"><code>ENABLE_EXPORTS</code></a> target property.</p> <p>The <code>OLD</code> behavior of this policy is to always use the additional link flags when linking executables regardless of the value of the <a class=\"reference internal\" href=\"../prop_tgt/enable_exports#prop_tgt:ENABLE_EXPORTS\" title=\"ENABLE_EXPORTS\" id=\"index-2-prop_tgt:ENABLE_EXPORTS\"><code>ENABLE_EXPORTS</code></a> target property.</p> <p>The <code>NEW</code> behavior of this policy is to only use the additional link flags when linking executables if the <a class=\"reference internal\" href=\"../prop_tgt/enable_exports#prop_tgt:ENABLE_EXPORTS\" title=\"ENABLE_EXPORTS\" id=\"index-3-prop_tgt:ENABLE_EXPORTS\"><code>ENABLE_EXPORTS</code></a> target property is set to <code>True</code>.</p> <p>This policy was introduced in CMake version 3.4. Unlike most policies, CMake version 3.5.2 does <em>not</em> warn by default when this policy is not set and simply uses OLD behavior. See documentation of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;\" id=\"index-0-variable:CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;\"><code>CMAKE_POLICY_WARNING_CMP0065</code></a> variable to control the warning.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0065.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0065.html</a>\n  </p>\n</div>\n","prop_tgt/link_libraries":"<h1 id=\"prop_tgt:LINK_LIBRARIES\">LINK_LIBRARIES</h1> <p id=\"link-libraries\">List of direct link dependencies.</p> <p>This property specifies the list of libraries or targets which will be used for linking. In addition to accepting values from the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> command, values may be set directly on any target using the <a class=\"reference internal\" href=\"../command/set_property#command:set_property\" title=\"set_property\" id=\"index-0-command:set_property\"><code>set_property()</code></a> command.</p> <p>The value of this property is used by the generators to set the link libraries for the compiler.</p> <p>Contents of <code>LINK_LIBRARIES</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_LIBRARIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_LIBRARIES.html</a>\n  </p>\n</div>\n","prop_tgt/compile_definitions":"<h1 id=\"prop_tgt:COMPILE_DEFINITIONS\">COMPILE_DEFINITIONS</h1> <p id=\"compile-definitions\">Preprocessor definitions for compiling a target’s sources.</p> <p>The <code>COMPILE_DEFINITIONS</code> property may be set to a semicolon-separated list of preprocessor definitions using the syntax <code>VAR</code> or <code>VAR=value</code>. Function-style definitions are not supported. CMake will automatically escape the value correctly for the native build system (note that CMake language syntax may require escapes to specify some values).</p> <p>CMake will automatically drop some definitions that are not supported by the native build tool. The VS6 IDE does not support definition values with spaces (but NMake does).</p> <p>Disclaimer: Most native build tools have poor support for escaping certain values. CMake has work-arounds for many cases but some values may just not be possible to pass correctly. If a value does not seem to be escaped correctly, do not attempt to work-around the problem by adding escape sequences to the value. Your work-around may break in a future version of CMake that has improved escape support. Instead consider defining the macro in a (configured) header file. Then report the limitation. Known limitations include:</p> <pre data-language=\"python\">#          - broken almost everywhere\n;          - broken in VS IDE 7.0 and Borland Makefiles\n,          - broken in VS IDE\n%          - broken in some cases in NMake\n&amp; |        - broken in some cases on MinGW\n^ &lt; &gt; \\\"   - broken in most Make tools on Windows\n</pre> <p>CMake does not reject these values outright because they do work in some cases. Use with caution.</p> <p>Contents of <code>COMPILE_DEFINITIONS</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p> <p>The corresponding <a class=\"reference internal\" href=\"#\" title=\"COMPILE_DEFINITIONS_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:COMPILE_DEFINITIONS_&lt;CONFIG&gt;\"><code>COMPILE_DEFINITIONS_&lt;CONFIG&gt;</code></a> property may be set to specify per-configuration definitions. Generator expressions should be preferred instead of setting the alternative property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_DEFINITIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_DEFINITIONS.html</a>\n  </p>\n</div>\n","prop_tgt/include_directories":"<h1 id=\"prop_tgt:INCLUDE_DIRECTORIES\">INCLUDE_DIRECTORIES</h1> <p id=\"include-directories\">List of preprocessor include file search directories.</p> <p>This property specifies the list of directories given so far to the <a class=\"reference internal\" href=\"../command/target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-0-command:target_include_directories\"><code>target_include_directories()</code></a> command. In addition to accepting values from that command, values may be set directly on any target using the <a class=\"reference internal\" href=\"../command/set_property#command:set_property\" title=\"set_property\" id=\"index-0-command:set_property\"><code>set_property()</code></a> command. A target gets its initial value for this property from the value of the <a class=\"reference internal\" href=\"../prop_dir/include_directories#prop_dir:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-0-prop_dir:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a> directory property. Both directory and target property values are adjusted by calls to the <a class=\"reference internal\" href=\"../command/include_directories#command:include_directories\" title=\"include_directories\" id=\"index-0-command:include_directories\"><code>include_directories()</code></a> command.</p> <p>The value of this property is used by the generators to set the include paths for the compiler.</p> <p>Relative paths should not be added to this property directly. Use one of the commands above instead to handle relative paths.</p> <p>Contents of <code>INCLUDE_DIRECTORIES</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INCLUDE_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INCLUDE_DIRECTORIES.html</a>\n  </p>\n</div>\n","command/target_include_directories":"<h1 id=\"command:target_include_directories\">target_include_directories</h1> <p id=\"target-include-directories\">Add include directories to a target.</p> <pre data-language=\"python\">target_include_directories(&lt;target&gt; [SYSTEM] [BEFORE]\n  &lt;INTERFACE|PUBLIC|PRIVATE&gt; [items1...]\n  [&lt;INTERFACE|PUBLIC|PRIVATE&gt; [items2...] ...])\n</pre> <p>Specify include directories to use when compiling a given target. The named <code>&lt;target&gt;</code> must have been created by a command such as <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> or <a class=\"reference internal\" href=\"add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> and must not be an <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target.</p> <p>If <code>BEFORE</code> is specified, the content will be prepended to the property instead of being appended.</p> <p>The <code>INTERFACE</code>, <code>PUBLIC</code> and <code>PRIVATE</code> keywords are required to specify the scope of the following arguments. <code>PRIVATE</code> and <code>PUBLIC</code> items will populate the <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a> property of <code>&lt;target&gt;</code>. <code>PUBLIC</code> and <code>INTERFACE</code> items will populate the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> property of <code>&lt;target&gt;</code>. The following arguments specify include directories.</p> <p>Specified include directories may be absolute paths or relative paths. Repeated calls for the same &lt;target&gt; append items in the order called. If <code>SYSTEM</code> is specified, the compiler will be told the directories are meant as system include directories on some platforms (signalling this setting might achieve effects such as the compiler skipping warnings, or these fixed-install system files not being considered in dependency calculations - see compiler docs). If <code>SYSTEM</code> is used together with <code>PUBLIC</code> or <code>INTERFACE</code>, the <a class=\"reference internal\" href=\"../prop_tgt/interface_system_include_directories#prop_tgt:INTERFACE_SYSTEM_INCLUDE_DIRECTORIES\" title=\"INTERFACE_SYSTEM_INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INTERFACE_SYSTEM_INCLUDE_DIRECTORIES\"><code>INTERFACE_SYSTEM_INCLUDE_DIRECTORIES</code></a> target property will be populated with the specified directories.</p> <p>Arguments to <code>target_include_directories</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p> <p>Include directories usage requirements commonly differ between the build-tree and the install-tree. The <code>BUILD_INTERFACE</code> and <code>INSTALL_INTERFACE</code> generator expressions can be used to describe separate usage requirements based on the usage location. Relative paths are allowed within the <code>INSTALL_INTERFACE</code> expression and are interpreted relative to the installation prefix. For example:</p> <pre data-language=\"cmake\">target_include_directories(mylib PUBLIC\n  $&lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/mylib&gt;\n  $&lt;INSTALL_INTERFACE:include/mylib&gt;  # &lt;prefix&gt;/include/mylib\n)\n</pre>  <h2 id=\"creating-relocatable-packages\">Creating Relocatable Packages</h2> <p>Note that it is not advisable to populate the <code>INSTALL_INTERFACE</code> of the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-2-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> of a target with absolute paths to the include directories of dependencies. That would hard-code into installed packages the include directory paths for dependencies <strong>as found on the machine the package was made on</strong>.</p> <p>The <code>INSTALL_INTERFACE</code> of the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-3-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> is only suitable for specifying the required include directories for headers provided with the target itself, not those provided by the transitive dependencies listed in its <a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-0-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> target property. Those dependencies should themselves be targets that specify their own header locations in <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-4-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a>.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#creating-relocatable-packages\"><span>Creating Relocatable Packages</span></a> section of the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-0-manual:cmake-packages(7)\"><code>cmake-packages(7)</code></a> manual for discussion of additional care that must be taken when specifying usage requirements while creating packages for redistribution.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/target_include_directories.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/target_include_directories.html</a>\n  </p>\n</div>\n","command/target_compile_definitions":"<h1 id=\"command:target_compile_definitions\">target_compile_definitions</h1> <p id=\"target-compile-definitions\">Add compile definitions to a target.</p> <pre data-language=\"python\">target_compile_definitions(&lt;target&gt;\n  &lt;INTERFACE|PUBLIC|PRIVATE&gt; [items1...]\n  [&lt;INTERFACE|PUBLIC|PRIVATE&gt; [items2...] ...])\n</pre> <p>Specify compile definitions to use when compiling a given <code>&lt;target&gt;</code>. The named <code>&lt;target&gt;</code> must have been created by a command such as <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> or <a class=\"reference internal\" href=\"add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> and must not be an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>Imported Target</span></a>.</p> <p>The <code>INTERFACE</code>, <code>PUBLIC</code> and <code>PRIVATE</code> keywords are required to specify the scope of the following arguments. <code>PRIVATE</code> and <code>PUBLIC</code> items will populate the <a class=\"reference internal\" href=\"../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_tgt:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> property of <code>&lt;target&gt;</code>. <code>PUBLIC</code> and <code>INTERFACE</code> items will populate the <a class=\"reference internal\" href=\"../prop_tgt/interface_compile_definitions#prop_tgt:INTERFACE_COMPILE_DEFINITIONS\" title=\"INTERFACE_COMPILE_DEFINITIONS\" id=\"index-0-prop_tgt:INTERFACE_COMPILE_DEFINITIONS\"><code>INTERFACE_COMPILE_DEFINITIONS</code></a> property of <code>&lt;target&gt;</code>. The following arguments specify compile definitions. Repeated calls for the same <code>&lt;target&gt;</code> append items in the order called.</p> <p>Arguments to <code>target_compile_definitions</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/target_compile_definitions.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/target_compile_definitions.html</a>\n  </p>\n</div>\n","prop_tgt/imported":"<h1 id=\"prop_tgt:IMPORTED\">IMPORTED</h1> <p id=\"imported\">Read-only indication of whether a target is IMPORTED.</p> <p>The boolean value of this property is <code>True</code> for targets created with the IMPORTED option to <a class=\"reference internal\" href=\"../command/add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> or <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a>. It is <code>False</code> for targets built within the project.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED.html</a>\n  </p>\n</div>\n","command/target_link_libraries":"<h1 id=\"command:target_link_libraries\">target_link_libraries</h1>   <ul id=\"target-link-libraries\"> <li><a class=\"reference internal\" href=\"#overview\" id=\"id2\">Overview</a></li> <li><a class=\"reference internal\" href=\"#libraries-for-a-target-and-or-its-dependents\" id=\"id3\">Libraries for a Target and/or its Dependents</a></li> <li><a class=\"reference internal\" href=\"#libraries-for-both-a-target-and-its-dependents\" id=\"id4\">Libraries for both a Target and its Dependents</a></li> <li><a class=\"reference internal\" href=\"#libraries-for-a-target-and-or-its-dependents-legacy\" id=\"id5\">Libraries for a Target and/or its Dependents (Legacy)</a></li> <li><a class=\"reference internal\" href=\"#libraries-for-dependents-only-legacy\" id=\"id6\">Libraries for Dependents Only (Legacy)</a></li> <li><a class=\"reference internal\" href=\"#cyclic-dependencies-of-static-libraries\" id=\"id7\">Cyclic Dependencies of Static Libraries</a></li> <li><a class=\"reference internal\" href=\"#creating-relocatable-packages\" id=\"id8\">Creating Relocatable Packages</a></li> </ul>\n  <p>Specify libraries or flags to use when linking a given target and/or its dependents. <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#target-usage-requirements\"><span>Usage requirements</span></a> from linked library targets will be propagated. Usage requirements of a target’s dependencies affect compilation of its own sources.</p>  <h2 id=\"overview\">Overview</h2> <p>This command has several signatures as detailed in subsections below. All of them have the general form:</p> <pre data-language=\"python\">target_link_libraries(&lt;target&gt; ... &lt;item&gt;... ...)\n</pre> <p>The named <code>&lt;target&gt;</code> must have been created in the current directory by a command such as <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> or <a class=\"reference internal\" href=\"add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a>. Repeated calls for the same <code>&lt;target&gt;</code> append items in the order called. Each <code>&lt;item&gt;</code> may be:</p> <ul> <li>\n<p class=\"first\"><strong>A library target name</strong>: The generated link line will have the full path to the linkable library file associated with the target. The buildsystem will have a dependency to re-link <code>&lt;target&gt;</code> if the library file changes.</p> <p>The named target must be created by <a class=\"reference internal\" href=\"add_library#command:add_library\" title=\"add_library\" id=\"index-1-command:add_library\"><code>add_library()</code></a> within the project or as an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>IMPORTED library</span></a>. If it is created within the project an ordering dependency will automatically be added in the build system to make sure the named library target is up-to-date before the <code>&lt;target&gt;</code> links.</p> <p>If an imported library has the <a class=\"reference internal\" href=\"../prop_tgt/imported_no_soname#prop_tgt:IMPORTED_NO_SONAME\" title=\"IMPORTED_NO_SONAME\" id=\"index-0-prop_tgt:IMPORTED_NO_SONAME\"><code>IMPORTED_NO_SONAME</code></a> target property set, CMake may ask the linker to search for the library instead of using the full path (e.g. <code>/usr/lib/libfoo.so</code> becomes <code>-lfoo</code>).</p> </li> <li>\n<p class=\"first\"><strong>A full path to a library file</strong>: The generated link line will normally preserve the full path to the file. The buildsystem will have a dependency to re-link <code>&lt;target&gt;</code> if the library file changes.</p> <p>There are some cases where CMake may ask the linker to search for the library (e.g. <code>/usr/lib/libfoo.so</code> becomes <code>-lfoo</code>), such as when a shared library is detected to have no <code>SONAME</code> field. See policy <a class=\"reference internal\" href=\"../policy/cmp0060#policy:CMP0060\" title=\"CMP0060\" id=\"index-0-policy:CMP0060\"><code>CMP0060</code></a> for discussion of another case.</p> <p>If the library file is in a Mac OSX framework, the <code>Headers</code> directory of the framework will also be processed as a <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#target-usage-requirements\"><span>usage requirement</span></a>. This has the same effect as passing the framework directory as an include directory.</p> </li> <li>\n<strong>A plain library name</strong>: The generated link line will ask the linker to search for the library (e.g. <code>foo</code> becomes <code>-lfoo</code> or <code>foo.lib</code>). </li> <li>\n<strong>A link flag</strong>: Item names starting with <code>-</code>, but not <code>-l</code> or <code>-framework</code>, are treated as linker flags. Note that such flags will be treated like any other library link item for purposes of transitive dependencies, so they are generally safe to specify only as private link items that will not propagate to dependents. </li> <li>A <code>debug</code>, <code>optimized</code>, or <code>general</code> keyword immediately followed by another <code>&lt;item&gt;</code>. The item following such a keyword will be used only for the corresponding build configuration. The <code>debug</code> keyword corresponds to the <code>Debug</code> configuration (or to configurations named in the <a class=\"reference internal\" href=\"../prop_gbl/debug_configurations#prop_gbl:DEBUG_CONFIGURATIONS\" title=\"DEBUG_CONFIGURATIONS\" id=\"index-0-prop_gbl:DEBUG_CONFIGURATIONS\"><code>DEBUG_CONFIGURATIONS</code></a> global property if it is set). The <code>optimized</code> keyword corresponds to all other configurations. The <code>general</code> keyword corresponds to all configurations, and is purely optional. Higher granularity may be achieved for per-configuration rules by creating and linking to <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>IMPORTED library targets</span></a>. </li> </ul> <p>Items containing <code>::</code>, such as <code>Foo::Bar</code>, are assumed to be <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>IMPORTED</span></a> or <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#alias-targets\"><span>ALIAS</span></a> library target names and will cause an error if no such target exists. See policy <a class=\"reference internal\" href=\"../policy/cmp0028#policy:CMP0028\" title=\"CMP0028\" id=\"index-0-policy:CMP0028\"><code>CMP0028</code></a>.</p> <p>Arguments to <code>target_link_libraries</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. Note however, that generator expressions will not be used in OLD handling of <a class=\"reference internal\" href=\"../policy/cmp0003#policy:CMP0003\" title=\"CMP0003\" id=\"index-0-policy:CMP0003\"><code>CMP0003</code></a> or <a class=\"reference internal\" href=\"../policy/cmp0004#policy:CMP0004\" title=\"CMP0004\" id=\"index-0-policy:CMP0004\"><code>CMP0004</code></a>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p>   <h2 id=\"libraries-for-a-target-and-or-its-dependents\">Libraries for a Target and/or its Dependents</h2> <pre data-language=\"python\">target_link_libraries(&lt;target&gt;\n                      &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...\n                     [&lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...]...)\n</pre> <p>The <code>PUBLIC</code>, <code>PRIVATE</code> and <code>INTERFACE</code> keywords can be used to specify both the link dependencies and the link interface in one command. Libraries and targets following <code>PUBLIC</code> are linked to, and are made part of the link interface. Libraries and targets following <code>PRIVATE</code> are linked to, but are not made part of the link interface. Libraries following <code>INTERFACE</code> are appended to the link interface and are not used for linking <code>&lt;target&gt;</code>.</p>   <h2 id=\"libraries-for-both-a-target-and-its-dependents\">Libraries for both a Target and its Dependents</h2> <pre data-language=\"python\">target_link_libraries(&lt;target&gt; &lt;item&gt;...)\n</pre> <p>Library dependencies are transitive by default with this signature. When this target is linked into another target then the libraries linked to this target will appear on the link line for the other target too. This transitive “link interface” is stored in the <a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-0-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> target property and may be overridden by setting the property directly. When <a class=\"reference internal\" href=\"../policy/cmp0022#policy:CMP0022\" title=\"CMP0022\" id=\"index-0-policy:CMP0022\"><code>CMP0022</code></a> is not set to <code>NEW</code>, transitive linking is built in but may be overridden by the <a class=\"reference internal\" href=\"../prop_tgt/link_interface_libraries#prop_tgt:LINK_INTERFACE_LIBRARIES\" title=\"LINK_INTERFACE_LIBRARIES\" id=\"index-0-prop_tgt:LINK_INTERFACE_LIBRARIES\"><code>LINK_INTERFACE_LIBRARIES</code></a> property. Calls to other signatures of this command may set the property making any libraries linked exclusively by this signature private.</p>   <h2 id=\"libraries-for-a-target-and-or-its-dependents-legacy\">Libraries for a Target and/or its Dependents (Legacy)</h2> <pre data-language=\"python\">target_link_libraries(&lt;target&gt;\n                      &lt;LINK_PRIVATE|LINK_PUBLIC&gt; &lt;lib&gt;...\n                     [&lt;LINK_PRIVATE|LINK_PUBLIC&gt; &lt;lib&gt;...]...)\n</pre> <p>The <code>LINK_PUBLIC</code> and <code>LINK_PRIVATE</code> modes can be used to specify both the link dependencies and the link interface in one command.</p> <p>This signature is for compatibility only. Prefer the <code>PUBLIC</code> or <code>PRIVATE</code> keywords instead.</p> <p>Libraries and targets following <code>LINK_PUBLIC</code> are linked to, and are made part of the <a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-1-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a>. If policy <a class=\"reference internal\" href=\"../policy/cmp0022#policy:CMP0022\" title=\"CMP0022\" id=\"index-1-policy:CMP0022\"><code>CMP0022</code></a> is not <code>NEW</code>, they are also made part of the <a class=\"reference internal\" href=\"../prop_tgt/link_interface_libraries#prop_tgt:LINK_INTERFACE_LIBRARIES\" title=\"LINK_INTERFACE_LIBRARIES\" id=\"index-1-prop_tgt:LINK_INTERFACE_LIBRARIES\"><code>LINK_INTERFACE_LIBRARIES</code></a>. Libraries and targets following <code>LINK_PRIVATE</code> are linked to, but are not made part of the <a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-2-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> (or <a class=\"reference internal\" href=\"../prop_tgt/link_interface_libraries#prop_tgt:LINK_INTERFACE_LIBRARIES\" title=\"LINK_INTERFACE_LIBRARIES\" id=\"index-2-prop_tgt:LINK_INTERFACE_LIBRARIES\"><code>LINK_INTERFACE_LIBRARIES</code></a>).</p>   <h2 id=\"libraries-for-dependents-only-legacy\">Libraries for Dependents Only (Legacy)</h2> <pre data-language=\"python\">target_link_libraries(&lt;target&gt; LINK_INTERFACE_LIBRARIES &lt;item&gt;...)\n</pre> <p>The <code>LINK_INTERFACE_LIBRARIES</code> mode appends the libraries to the <a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-3-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> target property instead of using them for linking. If policy <a class=\"reference internal\" href=\"../policy/cmp0022#policy:CMP0022\" title=\"CMP0022\" id=\"index-2-policy:CMP0022\"><code>CMP0022</code></a> is not <code>NEW</code>, then this mode also appends libraries to the <a class=\"reference internal\" href=\"../prop_tgt/link_interface_libraries#prop_tgt:LINK_INTERFACE_LIBRARIES\" title=\"LINK_INTERFACE_LIBRARIES\" id=\"index-3-prop_tgt:LINK_INTERFACE_LIBRARIES\"><code>LINK_INTERFACE_LIBRARIES</code></a> and its per-configuration equivalent.</p> <p>This signature is for compatibility only. Prefer the <code>INTERFACE</code> mode instead.</p> <p>Libraries specified as <code>debug</code> are wrapped in a generator expression to correspond to debug builds. If policy <a class=\"reference internal\" href=\"../policy/cmp0022#policy:CMP0022\" title=\"CMP0022\" id=\"index-3-policy:CMP0022\"><code>CMP0022</code></a> is not <code>NEW</code>, the libraries are also appended to the <a class=\"reference internal\" href=\"#\" title=\"LINK_INTERFACE_LIBRARIES_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:LINK_INTERFACE_LIBRARIES_&lt;CONFIG&gt;\"><code>LINK_INTERFACE_LIBRARIES_DEBUG</code></a> property (or to the properties corresponding to configurations listed in the <a class=\"reference internal\" href=\"../prop_gbl/debug_configurations#prop_gbl:DEBUG_CONFIGURATIONS\" title=\"DEBUG_CONFIGURATIONS\" id=\"index-1-prop_gbl:DEBUG_CONFIGURATIONS\"><code>DEBUG_CONFIGURATIONS</code></a> global property if it is set). Libraries specified as <code>optimized</code> are appended to the <a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-4-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> property. If policy <a class=\"reference internal\" href=\"../policy/cmp0022#policy:CMP0022\" title=\"CMP0022\" id=\"index-4-policy:CMP0022\"><code>CMP0022</code></a> is not <code>NEW</code>, they are also appended to the <a class=\"reference internal\" href=\"../prop_tgt/link_interface_libraries#prop_tgt:LINK_INTERFACE_LIBRARIES\" title=\"LINK_INTERFACE_LIBRARIES\" id=\"index-4-prop_tgt:LINK_INTERFACE_LIBRARIES\"><code>LINK_INTERFACE_LIBRARIES</code></a> property. Libraries specified as <code>general</code> (or without any keyword) are treated as if specified for both <code>debug</code> and <code>optimized</code>.</p>   <h2 id=\"cyclic-dependencies-of-static-libraries\">Cyclic Dependencies of Static Libraries</h2> <p>The library dependency graph is normally acyclic (a DAG), but in the case of mutually-dependent <code>STATIC</code> libraries CMake allows the graph to contain cycles (strongly connected components). When another target links to one of the libraries, CMake repeats the entire connected component. For example, the code</p> <pre data-language=\"cmake\">add_library(A STATIC a.c)\nadd_library(B STATIC b.c)\ntarget_link_libraries(A B)\ntarget_link_libraries(B A)\nadd_executable(main main.c)\ntarget_link_libraries(main A)\n</pre> <p>links <code>main</code> to <code>A B A B</code>. While one repetition is usually sufficient, pathological object file and symbol arrangements can require more. One may handle such cases by using the <a class=\"reference internal\" href=\"../prop_tgt/link_interface_multiplicity#prop_tgt:LINK_INTERFACE_MULTIPLICITY\" title=\"LINK_INTERFACE_MULTIPLICITY\" id=\"index-0-prop_tgt:LINK_INTERFACE_MULTIPLICITY\"><code>LINK_INTERFACE_MULTIPLICITY</code></a> target property or by manually repeating the component in the last <code>target_link_libraries</code> call. However, if two archives are really so interdependent they should probably be combined into a single archive, perhaps by using <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#object-libraries\"><span>Object Libraries</span></a>.</p>   <h2 id=\"creating-relocatable-packages\">Creating Relocatable Packages</h2> <p>Note that it is not advisable to populate the <a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-6-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> of a target with absolute paths to dependencies. That would hard-code into installed packages the library file paths for dependencies <strong>as found on the machine the package was made on</strong>.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#creating-relocatable-packages\"><span>Creating Relocatable Packages</span></a> section of the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-0-manual:cmake-packages(7)\"><code>cmake-packages(7)</code></a> manual for discussion of additional care that must be taken when specifying usage requirements while creating packages for redistribution.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/target_link_libraries.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/target_link_libraries.html</a>\n  </p>\n</div>\n","policy/cmp0064":"<h1 id=\"policy:CMP0064\">CMP0064</h1> <p id=\"cmp0064\">Recognize <code>TEST</code> as a operator for the <a class=\"reference internal\" href=\"../command/if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> command.</p> <p>The <code>TEST</code> operator was added to the <a class=\"reference internal\" href=\"../command/if#command:if\" title=\"if\" id=\"index-1-command:if\"><code>if()</code></a> command to determine if a given test name was created by the <a class=\"reference internal\" href=\"../command/add_test#command:add_test\" title=\"add_test\" id=\"index-0-command:add_test\"><code>add_test()</code></a> command.</p> <p>The <code>OLD</code> behavior for this policy is to ignore the <code>TEST</code> operator. The <code>NEW</code> behavior is to interpret the <code>TEST</code> operator.</p> <p>This policy was introduced in CMake version 3.4. CMake version 3.5.2 warns when the policy is not set and uses <code>OLD</code> behavior. Use the <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command to set it to <code>OLD</code> or <code>NEW</code> explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0064.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0064.html</a>\n  </p>\n</div>\n","prop_tgt/c_standard":"<h1 id=\"prop_tgt:C_STANDARD\">C_STANDARD</h1> <p id=\"c-standard\">The C standard whose features are requested to build this target.</p> <p>This property specifies the C standard whose features are requested to build this target. For some compilers, this results in adding a flag such as <code>-std=gnu11</code> to the compile line. For compilers that have no notion of a standard level, such as MSVC, this has no effect.</p> <p>Supported values are <code>90</code>, <code>99</code> and <code>11</code>.</p> <p>If the value requested does not result in a compile flag being added for the compiler in use, a previous standard flag will be added instead. This means that using:</p> <pre data-language=\"cmake\">set_property(TARGET tgt PROPERTY C_STANDARD 11)\n</pre> <p>with a compiler which does not support <code>-std=gnu11</code> or an equivalent flag will not result in an error or warning, but will instead add the <code>-std=gnu99</code> or <code>-std=gnu90</code> flag if supported. This “decay” behavior may be controlled with the <a class=\"reference internal\" href=\"c_standard_required#prop_tgt:C_STANDARD_REQUIRED\" title=\"C_STANDARD_REQUIRED\" id=\"index-0-prop_tgt:C_STANDARD_REQUIRED\"><code>C_STANDARD_REQUIRED</code></a> target property.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_c_standard#variable:CMAKE_C_STANDARD\" title=\"CMAKE_C_STANDARD\" id=\"index-0-variable:CMAKE_C_STANDARD\"><code>CMAKE_C_STANDARD</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/C_STANDARD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/C_STANDARD.html</a>\n  </p>\n</div>\n","policy/cmp0027":"<h1 id=\"policy:CMP0027\">CMP0027</h1> <p id=\"cmp0027\">Conditionally linked imported targets with missing include directories.</p> <p>CMake 2.8.11 introduced introduced the concept of INTERFACE_INCLUDE_DIRECTORIES, and a check at cmake time that the entries in the INTERFACE_INCLUDE_DIRECTORIES of an IMPORTED target actually exist. CMake 2.8.11 also introduced generator expression support in the target_link_libraries command. However, if an imported target is linked as a result of a generator expression evaluation, the entries in the INTERFACE_INCLUDE_DIRECTORIES of that target were not checked for existence as they should be.</p> <p>The OLD behavior of this policy is to report a warning if an entry in the INTERFACE_INCLUDE_DIRECTORIES of a generator-expression conditionally linked IMPORTED target does not exist.</p> <p>The NEW behavior of this policy is to report an error if an entry in the INTERFACE_INCLUDE_DIRECTORIES of a generator-expression conditionally linked IMPORTED target does not exist.</p> <p>This policy was introduced in CMake version 3.0. CMake version 3.5.2 warns when the policy is not set and uses OLD behavior. Use the cmake_policy command to set it to OLD or NEW explicitly.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>OLD</code> behavior of a policy is <a class=\"reference internal\" href=\"../manual/cmake-policies.7#manual:cmake-policies(7)\" title=\"cmake-policies(7)\" id=\"index-0-manual:cmake-policies(7)\"><code>deprecated by definition</code></a> and may be removed in a future version of CMake.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/policy/CMP0027.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/policy/CMP0027.html</a>\n  </p>\n</div>\n","prop_tgt/pdb_name":"<h1 id=\"prop_tgt:PDB_NAME\">PDB_NAME</h1> <p id=\"pdb-name\">Output name for the MS debug symbol <code>.pdb</code> file generated by the linker for an executable or shared library target.</p> <p>This property specifies the base name for the debug symbols file. If not set, the <a class=\"reference internal\" href=\"output_name#prop_tgt:OUTPUT_NAME\" title=\"OUTPUT_NAME\" id=\"index-0-prop_tgt:OUTPUT_NAME\"><code>OUTPUT_NAME</code></a> target property value or logical target name is used by default.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>This property does not apply to STATIC library targets because no linker is invoked to produce them so they have no linker-generated <code>.pdb</code> file containing debug symbols.</p> <p>The linker-generated program database files are specified by the <code>/pdb</code> linker flag and are not the same as compiler-generated program database files specified by the <code>/Fd</code> compiler flag. Use the <a class=\"reference internal\" href=\"compile_pdb_name#prop_tgt:COMPILE_PDB_NAME\" title=\"COMPILE_PDB_NAME\" id=\"index-1-prop_tgt:COMPILE_PDB_NAME\"><code>COMPILE_PDB_NAME</code></a> property to specify the latter.</p> <p class=\"last\">This property is not implemented by the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%206.html#generator:Visual%20Studio%206\" title=\"Visual Studio 6\" id=\"index-0-generator:Visual Studio 6\"><code>Visual Studio 6</code></a> generator.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/PDB_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/PDB_NAME.html</a>\n  </p>\n</div>\n","prop_tgt/pdb_output_directory":"<h1 id=\"prop_tgt:PDB_OUTPUT_DIRECTORY\">PDB_OUTPUT_DIRECTORY</h1> <p id=\"pdb-output-directory\">Output directory for the MS debug symbols <code>.pdb</code> file generated by the linker for an executable or shared library target.</p> <p>This property specifies the directory into which the MS debug symbols will be placed by the linker. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_pdb_output_directory#variable:CMAKE_PDB_OUTPUT_DIRECTORY\" title=\"CMAKE_PDB_OUTPUT_DIRECTORY\" id=\"index-0-variable:CMAKE_PDB_OUTPUT_DIRECTORY\"><code>CMAKE_PDB_OUTPUT_DIRECTORY</code></a> variable if it is set when a target is created.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>This property does not apply to STATIC library targets because no linker is invoked to produce them so they have no linker-generated <code>.pdb</code> file containing debug symbols.</p> <p>The linker-generated program database files are specified by the <code>/pdb</code> linker flag and are not the same as compiler-generated program database files specified by the <code>/Fd</code> compiler flag. Use the <a class=\"reference internal\" href=\"compile_pdb_output_directory#prop_tgt:COMPILE_PDB_OUTPUT_DIRECTORY\" title=\"COMPILE_PDB_OUTPUT_DIRECTORY\" id=\"index-1-prop_tgt:COMPILE_PDB_OUTPUT_DIRECTORY\"><code>COMPILE_PDB_OUTPUT_DIRECTORY</code></a> property to specify the latter.</p> <p class=\"last\">This property is not implemented by the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%206.html#generator:Visual%20Studio%206\" title=\"Visual Studio 6\" id=\"index-0-generator:Visual Studio 6\"><code>Visual Studio 6</code></a> generator.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/PDB_OUTPUT_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/PDB_OUTPUT_DIRECTORY.html</a>\n  </p>\n</div>\n","prop_tgt/interface_link_libraries":"<h1 id=\"prop_tgt:INTERFACE_LINK_LIBRARIES\">INTERFACE_LINK_LIBRARIES</h1> <p id=\"interface-link-libraries\">List public interface libraries for a library.</p> <p>This property contains the list of transitive link dependencies. When the target is linked into another target using the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> command, the libraries listed (and recursively their link interface libraries) will be provided to the other target also. This property is overridden by the <a class=\"reference internal\" href=\"link_interface_libraries#prop_tgt:LINK_INTERFACE_LIBRARIES\" title=\"LINK_INTERFACE_LIBRARIES\" id=\"index-0-prop_tgt:LINK_INTERFACE_LIBRARIES\"><code>LINK_INTERFACE_LIBRARIES</code></a> or <a class=\"reference internal\" href=\"#\" title=\"LINK_INTERFACE_LIBRARIES_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:LINK_INTERFACE_LIBRARIES_&lt;CONFIG&gt;\"><code>LINK_INTERFACE_LIBRARIES_&lt;CONFIG&gt;</code></a> property if policy <a class=\"reference internal\" href=\"../policy/cmp0022#policy:CMP0022\" title=\"CMP0022\" id=\"index-0-policy:CMP0022\"><code>CMP0022</code></a> is <code>OLD</code> or unset.</p> <p>Contents of <code>INTERFACE_LINK_LIBRARIES</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p>  <h2 id=\"creating-relocatable-packages\">Creating Relocatable Packages</h2> <p>Note that it is not advisable to populate the <code>INTERFACE_LINK_LIBRARIES</code> of a target with absolute paths to dependencies. That would hard-code into installed packages the library file paths for dependencies <strong>as found on the machine the package was made on</strong>.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#creating-relocatable-packages\"><span>Creating Relocatable Packages</span></a> section of the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-0-manual:cmake-packages(7)\"><code>cmake-packages(7)</code></a> manual for discussion of additional care that must be taken when specifying usage requirements while creating packages for redistribution.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_LINK_LIBRARIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_LINK_LIBRARIES.html</a>\n  </p>\n</div>\n","command/export":"<h1 id=\"command:export\">export</h1> <p id=\"export\">Export targets from the build tree for use by outside projects.</p> <pre data-language=\"python\">export(EXPORT &lt;export-name&gt; [NAMESPACE &lt;namespace&gt;] [FILE &lt;filename&gt;])\n</pre> <p>Create a file <code>&lt;filename&gt;</code> that may be included by outside projects to import targets from the current project’s build tree. This is useful during cross-compiling to build utility executables that can run on the host platform in one project and then import them into another project being compiled for the target platform. If the <code>NAMESPACE</code> option is given the <code>&lt;namespace&gt;</code> string will be prepended to all target names written to the file.</p> <p>Target installations are associated with the export <code>&lt;export-name&gt;</code> using the <code>EXPORT</code> option of the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(TARGETS)</code></a> command.</p> <p>The file created by this command is specific to the build tree and should never be installed. See the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install(EXPORT)</code></a> command to export targets from an installation tree.</p> <p>The properties set on the generated IMPORTED targets will have the same values as the final values of the input TARGETS.</p> <pre data-language=\"python\">export(TARGETS [target1 [target2 [...]]] [NAMESPACE &lt;namespace&gt;]\n       [APPEND] FILE &lt;filename&gt; [EXPORT_LINK_INTERFACE_LIBRARIES])\n</pre> <p>This signature is similar to the <code>EXPORT</code> signature, but targets are listed explicitly rather than specified as an export-name. If the APPEND option is given the generated code will be appended to the file instead of overwriting it. The EXPORT_LINK_INTERFACE_LIBRARIES keyword, if present, causes the contents of the properties matching <code>(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_&lt;CONFIG&gt;)?</code> to be exported, when policy CMP0022 is NEW. If a library target is included in the export but a target to which it links is not included the behavior is unspecified.</p> <pre data-language=\"python\">export(PACKAGE &lt;name&gt;)\n</pre> <p>Store the current build directory in the CMake user package registry for package <code>&lt;name&gt;</code>. The find_package command may consider the directory while searching for package <code>&lt;name&gt;</code>. This helps dependent projects find and use a package from the current project’s build tree without help from the user. Note that the entry in the package registry that this command creates works only in conjunction with a package configuration file (<code>&lt;name&gt;Config.cmake</code>) that works with the build tree. In some cases, for example for packaging and for system wide installations, it is not desirable to write the user package registry. If the <a class=\"reference internal\" href=\"../variable/cmake_export_no_package_registry#variable:CMAKE_EXPORT_NO_PACKAGE_REGISTRY\" title=\"CMAKE_EXPORT_NO_PACKAGE_REGISTRY\" id=\"index-0-variable:CMAKE_EXPORT_NO_PACKAGE_REGISTRY\"><code>CMAKE_EXPORT_NO_PACKAGE_REGISTRY</code></a> variable is enabled, the <code>export(PACKAGE)</code> command will do nothing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/export.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/export.html</a>\n  </p>\n</div>\n","command/install":"<h1 id=\"command:install\">install</h1>   <ul id=\"install\"> <li><a class=\"reference internal\" href=\"#introduction\" id=\"id2\">Introduction</a></li> <li><a class=\"reference internal\" href=\"#installing-targets\" id=\"id3\">Installing Targets</a></li> <li><a class=\"reference internal\" href=\"#installing-files\" id=\"id4\">Installing Files</a></li> <li><a class=\"reference internal\" href=\"#installing-directories\" id=\"id5\">Installing Directories</a></li> <li><a class=\"reference internal\" href=\"#custom-installation-logic\" id=\"id6\">Custom Installation Logic</a></li> <li><a class=\"reference internal\" href=\"#installing-exports\" id=\"id7\">Installing Exports</a></li> </ul>\n  <p>Specify rules to run at install time.</p>  <h2 id=\"introduction\">Introduction</h2> <p>This command generates installation rules for a project. Rules specified by calls to this command within a source directory are executed in order during installation. The order across directories is not defined.</p> <p>There are multiple signatures for this command. Some of them define installation options for files and targets. Options common to multiple signatures are covered here but they are valid only for signatures that specify them. The common options are:</p> <dl class=\"docutils\"> <dt><code>DESTINATION</code></dt> <dd>Specify the directory on disk to which a file will be installed. If a full path (with a leading slash or drive letter) is given it is used directly. If a relative path is given it is interpreted relative to the value of the <a class=\"reference internal\" href=\"../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> variable. The prefix can be relocated at install time using the <code>DESTDIR</code> mechanism explained in the <a class=\"reference internal\" href=\"../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-1-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> variable documentation.</dd> <dt><code>PERMISSIONS</code></dt> <dd>Specify permissions for installed files. Valid permissions are <code>OWNER_READ</code>, <code>OWNER_WRITE</code>, <code>OWNER_EXECUTE</code>, <code>GROUP_READ</code>, <code>GROUP_WRITE</code>, <code>GROUP_EXECUTE</code>, <code>WORLD_READ</code>, <code>WORLD_WRITE</code>, <code>WORLD_EXECUTE</code>, <code>SETUID</code>, and <code>SETGID</code>. Permissions that do not make sense on certain platforms are ignored on those platforms.</dd> <dt><code>CONFIGURATIONS</code></dt> <dd>Specify a list of build configurations for which the install rule applies (Debug, Release, etc.).</dd> <dt><code>COMPONENT</code></dt> <dd>Specify an installation component name with which the install rule is associated, such as “runtime” or “development”. During component-specific installation only install rules associated with the given component name will be executed. During a full installation all components are installed. If <code>COMPONENT</code> is not provided a default component “Unspecified” is created. The default component name may be controlled with the <a class=\"reference internal\" href=\"../variable/cmake_install_default_component_name#variable:CMAKE_INSTALL_DEFAULT_COMPONENT_NAME\" title=\"CMAKE_INSTALL_DEFAULT_COMPONENT_NAME\" id=\"index-0-variable:CMAKE_INSTALL_DEFAULT_COMPONENT_NAME\"><code>CMAKE_INSTALL_DEFAULT_COMPONENT_NAME</code></a> variable.</dd> <dt><code>RENAME</code></dt> <dd>Specify a name for an installed file that may be different from the original file. Renaming is allowed only when a single file is installed by the command.</dd> <dt><code>OPTIONAL</code></dt> <dd>Specify that it is not an error if the file to be installed does not exist.</dd> </dl> <p>Command signatures that install files may print messages during installation. Use the <a class=\"reference internal\" href=\"../variable/cmake_install_message#variable:CMAKE_INSTALL_MESSAGE\" title=\"CMAKE_INSTALL_MESSAGE\" id=\"index-0-variable:CMAKE_INSTALL_MESSAGE\"><code>CMAKE_INSTALL_MESSAGE</code></a> variable to control which messages are printed.</p>   <h2 id=\"installing-targets\">Installing Targets</h2> <pre data-language=\"python\">install(TARGETS targets... [EXPORT &lt;export-name&gt;]\n        [[ARCHIVE|LIBRARY|RUNTIME|FRAMEWORK|BUNDLE|\n          PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]\n         [DESTINATION &lt;dir&gt;]\n         [PERMISSIONS permissions...]\n         [CONFIGURATIONS [Debug|Release|...]]\n         [COMPONENT &lt;component&gt;]\n         [OPTIONAL] [NAMELINK_ONLY|NAMELINK_SKIP]\n        ] [...]\n        [INCLUDES DESTINATION [&lt;dir&gt; ...]]\n        )\n</pre> <p>The <code>TARGETS</code> form specifies rules for installing targets from a project. There are five kinds of target files that may be installed: <code>ARCHIVE</code>, <code>LIBRARY</code>, <code>RUNTIME</code>, <code>FRAMEWORK</code>, and <code>BUNDLE</code>. Executables are treated as <code>RUNTIME</code> targets, except that those marked with the <code>MACOSX_BUNDLE</code> property are treated as <code>BUNDLE</code> targets on OS X. Static libraries are always treated as <code>ARCHIVE</code> targets. Module libraries are always treated as <code>LIBRARY</code> targets. For non-DLL platforms shared libraries are treated as <code>LIBRARY</code> targets, except that those marked with the <code>FRAMEWORK</code> property are treated as <code>FRAMEWORK</code> targets on OS X. For DLL platforms the DLL part of a shared library is treated as a <code>RUNTIME</code> target and the corresponding import library is treated as an <code>ARCHIVE</code> target. All Windows-based systems including Cygwin are DLL platforms. The <code>ARCHIVE</code>, <code>LIBRARY</code>, <code>RUNTIME</code>, and <code>FRAMEWORK</code> arguments change the type of target to which the subsequent properties apply. If none is given the installation properties apply to all target types. If only one is given then only targets of that type will be installed (which can be used to install just a DLL or just an import library).</p> <p>The <code>PRIVATE_HEADER</code>, <code>PUBLIC_HEADER</code>, and <code>RESOURCE</code> arguments cause subsequent properties to be applied to installing a <code>FRAMEWORK</code> shared library target’s associated files on non-Apple platforms. Rules defined by these arguments are ignored on Apple platforms because the associated files are installed into the appropriate locations inside the framework folder. See documentation of the <a class=\"reference internal\" href=\"../prop_tgt/private_header#prop_tgt:PRIVATE_HEADER\" title=\"PRIVATE_HEADER\" id=\"index-0-prop_tgt:PRIVATE_HEADER\"><code>PRIVATE_HEADER</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/public_header#prop_tgt:PUBLIC_HEADER\" title=\"PUBLIC_HEADER\" id=\"index-0-prop_tgt:PUBLIC_HEADER\"><code>PUBLIC_HEADER</code></a>, and <a class=\"reference internal\" href=\"../prop_tgt/resource#prop_tgt:RESOURCE\" title=\"RESOURCE\" id=\"index-0-prop_tgt:RESOURCE\"><code>RESOURCE</code></a> target properties for details.</p> <p>Either <code>NAMELINK_ONLY</code> or <code>NAMELINK_SKIP</code> may be specified as a <code>LIBRARY</code> option. On some platforms a versioned shared library has a symbolic link such as:</p> <pre data-language=\"python\">lib&lt;name&gt;.so -&gt; lib&lt;name&gt;.so.1\n</pre> <p>where <code>lib&lt;name&gt;.so.1</code> is the soname of the library and <code>lib&lt;name&gt;.so</code> is a “namelink” allowing linkers to find the library when given <code>-l&lt;name&gt;</code>. The <code>NAMELINK_ONLY</code> option causes installation of only the namelink when a library target is installed. The <code>NAMELINK_SKIP</code> option causes installation of library files other than the namelink when a library target is installed. When neither option is given both portions are installed. On platforms where versioned shared libraries do not have namelinks or when a library is not versioned the <code>NAMELINK_SKIP</code> option installs the library and the <code>NAMELINK_ONLY</code> option installs nothing. See the <a class=\"reference internal\" href=\"../prop_tgt/version#prop_tgt:VERSION\" title=\"VERSION\" id=\"index-0-prop_tgt:VERSION\"><code>VERSION</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/soversion#prop_tgt:SOVERSION\" title=\"SOVERSION\" id=\"index-0-prop_tgt:SOVERSION\"><code>SOVERSION</code></a> target properties for details on creating versioned shared libraries.</p> <p>The <code>INCLUDES DESTINATION</code> specifies a list of directories which will be added to the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> target property of the <code>&lt;targets&gt;</code> when exported by the <a class=\"reference internal\" href=\"#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(EXPORT)</code></a> command. If a relative path is specified, it is treated as relative to the <code>$&lt;INSTALL_PREFIX&gt;</code>. This is independent of the rest of the argument groups and does not actually install anything.</p> <p>One or more groups of properties may be specified in a single call to the <code>TARGETS</code> form of this command. A target may be installed more than once to different locations. Consider hypothetical targets <code>myExe</code>, <code>mySharedLib</code>, and <code>myStaticLib</code>. The code:</p> <pre data-language=\"cmake\">install(TARGETS myExe mySharedLib myStaticLib\n        RUNTIME DESTINATION bin\n        LIBRARY DESTINATION lib\n        ARCHIVE DESTINATION lib/static)\ninstall(TARGETS mySharedLib DESTINATION /some/full/path)\n</pre> <p>will install <code>myExe</code> to <code>&lt;prefix&gt;/bin</code> and <code>myStaticLib</code> to <code>&lt;prefix&gt;/lib/static</code>. On non-DLL platforms <code>mySharedLib</code> will be installed to <code>&lt;prefix&gt;/lib</code> and <code>/some/full/path</code>. On DLL platforms the <code>mySharedLib</code> DLL will be installed to <code>&lt;prefix&gt;/bin</code> and <code>/some/full/path</code> and its import library will be installed to <code>&lt;prefix&gt;/lib/static</code> and <code>/some/full/path</code>.</p> <p>The <code>EXPORT</code> option associates the installed target files with an export called <code>&lt;export-name&gt;</code>. It must appear before any <code>RUNTIME</code>, <code>LIBRARY</code>, or <code>ARCHIVE</code> options. To actually install the export file itself, call <code>install(EXPORT)</code>, documented below.</p> <p>Installing a target with the <a class=\"reference internal\" href=\"../prop_tgt/exclude_from_all#prop_tgt:EXCLUDE_FROM_ALL\" title=\"EXCLUDE_FROM_ALL\" id=\"index-0-prop_tgt:EXCLUDE_FROM_ALL\"><code>EXCLUDE_FROM_ALL</code></a> target property set to <code>TRUE</code> has undefined behavior.</p> <p>The install destination given to the target install <code>DESTINATION</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions.</p>   <h2 id=\"installing-files\">Installing Files</h2> <pre data-language=\"python\">install(&lt;FILES|PROGRAMS&gt; files... DESTINATION &lt;dir&gt;\n        [PERMISSIONS permissions...]\n        [CONFIGURATIONS [Debug|Release|...]]\n        [COMPONENT &lt;component&gt;]\n        [RENAME &lt;name&gt;] [OPTIONAL])\n</pre> <p>The <code>FILES</code> form specifies rules for installing files for a project. File names given as relative paths are interpreted with respect to the current source directory. Files installed by this form are by default given permissions <code>OWNER_WRITE</code>, <code>OWNER_READ</code>, <code>GROUP_READ</code>, and <code>WORLD_READ</code> if no <code>PERMISSIONS</code> argument is given.</p> <p>The <code>PROGRAMS</code> form is identical to the <code>FILES</code> form except that the default permissions for the installed file also include <code>OWNER_EXECUTE</code>, <code>GROUP_EXECUTE</code>, and <code>WORLD_EXECUTE</code>. This form is intended to install programs that are not targets, such as shell scripts. Use the <code>TARGETS</code> form to install targets built within the project.</p> <p>The list of <code>files...</code> given to <code>FILES</code> or <code>PROGRAMS</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-1-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. However, if any item begins in a generator expression it must evaluate to a full path.</p> <p>The install destination given to the files install <code>DESTINATION</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-2-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions.</p>   <h2 id=\"installing-directories\">Installing Directories</h2> <pre data-language=\"python\">install(DIRECTORY dirs... DESTINATION &lt;dir&gt;\n        [FILE_PERMISSIONS permissions...]\n        [DIRECTORY_PERMISSIONS permissions...]\n        [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER]\n        [CONFIGURATIONS [Debug|Release|...]]\n        [COMPONENT &lt;component&gt;] [FILES_MATCHING]\n        [[PATTERN &lt;pattern&gt; | REGEX &lt;regex&gt;]\n         [EXCLUDE] [PERMISSIONS permissions...]] [...])\n</pre> <p>The <code>DIRECTORY</code> form installs contents of one or more directories to a given destination. The directory structure is copied verbatim to the destination. The last component of each directory name is appended to the destination directory but a trailing slash may be used to avoid this because it leaves the last component empty. Directory names given as relative paths are interpreted with respect to the current source directory. If no input directory names are given the destination directory will be created but nothing will be installed into it. The <code>FILE_PERMISSIONS</code> and <code>DIRECTORY_PERMISSIONS</code> options specify permissions given to files and directories in the destination. If <code>USE_SOURCE_PERMISSIONS</code> is specified and <code>FILE_PERMISSIONS</code> is not, file permissions will be copied from the source directory structure. If no permissions are specified files will be given the default permissions specified in the <code>FILES</code> form of the command, and the directories will be given the default permissions specified in the <code>PROGRAMS</code> form of the command.</p> <p>The <code>MESSAGE_NEVER</code> option disables file installation status output.</p> <p>Installation of directories may be controlled with fine granularity using the <code>PATTERN</code> or <code>REGEX</code> options. These “match” options specify a globbing pattern or regular expression to match directories or files encountered within input directories. They may be used to apply certain options (see below) to a subset of the files and directories encountered. The full path to each input file or directory (with forward slashes) is matched against the expression. A <code>PATTERN</code> will match only complete file names: the portion of the full path matching the pattern must occur at the end of the file name and be preceded by a slash. A <code>REGEX</code> will match any portion of the full path but it may use <code>/</code> and <code>$</code> to simulate the <code>PATTERN</code> behavior. By default all files and directories are installed whether or not they are matched. The <code>FILES_MATCHING</code> option may be given before the first match option to disable installation of files (but not directories) not matched by any expression. For example, the code</p> <pre data-language=\"cmake\">install(DIRECTORY src/ DESTINATION include/myproj\n        FILES_MATCHING PATTERN \"*.h\")\n</pre> <p>will extract and install header files from a source tree.</p> <p>Some options may follow a <code>PATTERN</code> or <code>REGEX</code> expression and are applied only to files or directories matching them. The <code>EXCLUDE</code> option will skip the matched file or directory. The <code>PERMISSIONS</code> option overrides the permissions setting for the matched file or directory. For example the code</p> <pre data-language=\"cmake\">install(DIRECTORY icons scripts/ DESTINATION share/myproj\n        PATTERN \"CVS\" EXCLUDE\n        PATTERN \"scripts/*\"\n        PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ\n                    GROUP_EXECUTE GROUP_READ)\n</pre> <p>will install the <code>icons</code> directory to <code>share/myproj/icons</code> and the <code>scripts</code> directory to <code>share/myproj</code>. The icons will get default file permissions, the scripts will be given specific permissions, and any <code>CVS</code> directories will be excluded.</p> <p>The list of <code>dirs...</code> given to <code>DIRECTORY</code> and the install destination given to the directory install <code>DESTINATION</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-3-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions.</p>   <h2 id=\"custom-installation-logic\">Custom Installation Logic</h2> <pre data-language=\"python\">install([[SCRIPT &lt;file&gt;] [CODE &lt;code&gt;]]\n        [COMPONENT &lt;component&gt;] [...])\n</pre> <p>The <code>SCRIPT</code> form will invoke the given CMake script files during installation. If the script file name is a relative path it will be interpreted with respect to the current source directory. The <code>CODE</code> form will invoke the given CMake code during installation. Code is specified as a single argument inside a double-quoted string. For example, the code</p> <pre data-language=\"cmake\">install(CODE \"MESSAGE(\\\"Sample install message.\\\")\")\n</pre> <p>will print a message during installation.</p>   <h2 id=\"installing-exports\">Installing Exports</h2> <pre data-language=\"python\">install(EXPORT &lt;export-name&gt; DESTINATION &lt;dir&gt;\n        [NAMESPACE &lt;namespace&gt;] [FILE &lt;name&gt;.cmake]\n        [PERMISSIONS permissions...]\n        [CONFIGURATIONS [Debug|Release|...]]\n        [EXPORT_LINK_INTERFACE_LIBRARIES]\n        [COMPONENT &lt;component&gt;])\n</pre> <p>The <code>EXPORT</code> form generates and installs a CMake file containing code to import targets from the installation tree into another project. Target installations are associated with the export <code>&lt;export-name&gt;</code> using the <code>EXPORT</code> option of the <code>install(TARGETS)</code> signature documented above. The <code>NAMESPACE</code> option will prepend <code>&lt;namespace&gt;</code> to the target names as they are written to the import file. By default the generated file will be called <code>&lt;export-name&gt;.cmake</code> but the <code>FILE</code> option may be used to specify a different name. The value given to the <code>FILE</code> option must be a file name with the <code>.cmake</code> extension. If a <code>CONFIGURATIONS</code> option is given then the file will only be installed when one of the named configurations is installed. Additionally, the generated import file will reference only the matching target configurations. The <code>EXPORT_LINK_INTERFACE_LIBRARIES</code> keyword, if present, causes the contents of the properties matching <code>(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_&lt;CONFIG&gt;)?</code> to be exported, when policy <a class=\"reference internal\" href=\"../policy/cmp0022#policy:CMP0022\" title=\"CMP0022\" id=\"index-0-policy:CMP0022\"><code>CMP0022</code></a> is <code>NEW</code>. If a <code>COMPONENT</code> option is specified that does not match that given to the targets associated with <code>&lt;export-name&gt;</code> the behavior is undefined. If a library target is included in the export but a target to which it links is not included the behavior is unspecified.</p> <p>The <code>EXPORT</code> form is useful to help outside projects use targets built and installed by the current project. For example, the code</p> <pre data-language=\"cmake\">install(TARGETS myexe EXPORT myproj DESTINATION bin)\ninstall(EXPORT myproj NAMESPACE mp_ DESTINATION lib/myproj)\n</pre> <p>will install the executable myexe to <code>&lt;prefix&gt;/bin</code> and code to import it in the file <code>&lt;prefix&gt;/lib/myproj/myproj.cmake</code>. An outside project may load this file with the include command and reference the <code>myexe</code> executable from the installation tree using the imported target name <code>mp_myexe</code> as if the target were built in its own tree.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This command supercedes the <a class=\"reference internal\" href=\"install_targets#command:install_targets\" title=\"install_targets\" id=\"index-0-command:install_targets\"><code>install_targets()</code></a> command and the <a class=\"reference internal\" href=\"../prop_tgt/pre_install_script#prop_tgt:PRE_INSTALL_SCRIPT\" title=\"PRE_INSTALL_SCRIPT\" id=\"index-0-prop_tgt:PRE_INSTALL_SCRIPT\"><code>PRE_INSTALL_SCRIPT</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/post_install_script#prop_tgt:POST_INSTALL_SCRIPT\" title=\"POST_INSTALL_SCRIPT\" id=\"index-0-prop_tgt:POST_INSTALL_SCRIPT\"><code>POST_INSTALL_SCRIPT</code></a> target properties. It also replaces the <code>FILES</code> forms of the <a class=\"reference internal\" href=\"install_files#command:install_files\" title=\"install_files\" id=\"index-0-command:install_files\"><code>install_files()</code></a> and <a class=\"reference internal\" href=\"install_programs#command:install_programs\" title=\"install_programs\" id=\"index-0-command:install_programs\"><code>install_programs()</code></a> commands. The processing order of these install rules relative to those generated by <a class=\"reference internal\" href=\"install_targets#command:install_targets\" title=\"install_targets\" id=\"index-1-command:install_targets\"><code>install_targets()</code></a>, <a class=\"reference internal\" href=\"install_files#command:install_files\" title=\"install_files\" id=\"index-1-command:install_files\"><code>install_files()</code></a>, and <a class=\"reference internal\" href=\"install_programs#command:install_programs\" title=\"install_programs\" id=\"index-1-command:install_programs\"><code>install_programs()</code></a> commands is not defined.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/install.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/install.html</a>\n  </p>\n</div>\n","module/addfiledependencies":"<h1 id=\"module:AddFileDependencies\">AddFileDependencies</h1> <p id=\"addfiledependencies\">ADD_FILE_DEPENDENCIES(source_file depend_files...)</p> <p>Adds the given files as dependencies to source_file</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/AddFileDependencies.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/AddFileDependencies.html</a>\n  </p>\n</div>\n","module/bundleutilities":"<h1 id=\"module:BundleUtilities\">BundleUtilities</h1> <p id=\"bundleutilities\">Functions to help assemble a standalone bundle application.</p> <p>A collection of CMake utility functions useful for dealing with .app bundles on the Mac and bundle-like directories on any OS.</p> <p>The following functions are provided by this module:</p> <pre data-language=\"python\">fixup_bundle\ncopy_and_fixup_bundle\nverify_app\nget_bundle_main_executable\nget_dotapp_dir\nget_bundle_and_executable\nget_bundle_all_executables\nget_item_key\nget_item_rpaths\nclear_bundle_keys\nset_bundle_key_values\nget_bundle_keys\ncopy_resolved_item_into_bundle\ncopy_resolved_framework_into_bundle\nfixup_bundle_item\nverify_bundle_prerequisites\nverify_bundle_symlinks\n</pre> <p>Requires CMake 2.6 or greater because it uses function, break and PARENT_SCOPE. Also depends on GetPrerequisites.cmake.</p> <pre data-language=\"python\">FIXUP_BUNDLE(&lt;app&gt; &lt;libs&gt; &lt;dirs&gt;)\n</pre> <p>Fix up a bundle in-place and make it standalone, such that it can be drag-n-drop copied to another machine and run on that machine as long as all of the system libraries are compatible.</p> <p>If you pass plugins to fixup_bundle as the libs parameter, you should install them or copy them into the bundle before calling fixup_bundle. The “libs” parameter is a list of libraries that must be fixed up, but that cannot be determined by otool output analysis. (i.e., plugins)</p> <p>Gather all the keys for all the executables and libraries in a bundle, and then, for each key, copy each prerequisite into the bundle. Then fix each one up according to its own list of prerequisites.</p> <p>Then clear all the keys and call verify_app on the final bundle to ensure that it is truly standalone.</p> <pre data-language=\"python\">COPY_AND_FIXUP_BUNDLE(&lt;src&gt; &lt;dst&gt; &lt;libs&gt; &lt;dirs&gt;)\n</pre> <p>Makes a copy of the bundle &lt;src&gt; at location &lt;dst&gt; and then fixes up the new copied bundle in-place at &lt;dst&gt;...</p> <pre data-language=\"python\">VERIFY_APP(&lt;app&gt;)\n</pre> <p>Verifies that an application &lt;app&gt; appears valid based on running analysis tools on it. Calls “message(FATAL_ERROR” if the application is not verified.</p> <pre data-language=\"python\">GET_BUNDLE_MAIN_EXECUTABLE(&lt;bundle&gt; &lt;result_var&gt;)\n</pre> <p>The result will be the full path name of the bundle’s main executable file or an “error:” prefixed string if it could not be determined.</p> <pre data-language=\"python\">GET_DOTAPP_DIR(&lt;exe&gt; &lt;dotapp_dir_var&gt;)\n</pre> <p>Returns the nearest parent dir whose name ends with ”.app” given the full path to an executable. If there is no such parent dir, then simply return the dir containing the executable.</p> <p>The returned directory may or may not exist.</p> <pre data-language=\"python\">GET_BUNDLE_AND_EXECUTABLE(&lt;app&gt; &lt;bundle_var&gt; &lt;executable_var&gt; &lt;valid_var&gt;)\n</pre> <p>Takes either a ”.app” directory name or the name of an executable nested inside a ”.app” directory and returns the path to the ”.app” directory in &lt;bundle_var&gt; and the path to its main executable in &lt;executable_var&gt;</p> <pre data-language=\"python\">GET_BUNDLE_ALL_EXECUTABLES(&lt;bundle&gt; &lt;exes_var&gt;)\n</pre> <p>Scans the given bundle recursively for all executable files and accumulates them into a variable.</p> <pre data-language=\"python\">GET_ITEM_KEY(&lt;item&gt; &lt;key_var&gt;)\n</pre> <p>Given a file (item) name, generate a key that should be unique considering the set of libraries that need copying or fixing up to make a bundle standalone. This is essentially the file name including extension with ”.” replaced by “_”</p> <p>This key is used as a prefix for CMake variables so that we can associate a set of variables with a given item based on its key.</p> <pre data-language=\"python\">CLEAR_BUNDLE_KEYS(&lt;keys_var&gt;)\n</pre> <p>Loop over the list of keys, clearing all the variables associated with each key. After the loop, clear the list of keys itself.</p> <p>Caller of get_bundle_keys should call clear_bundle_keys when done with list of keys.</p> <pre data-language=\"python\">SET_BUNDLE_KEY_VALUES(&lt;keys_var&gt; &lt;context&gt; &lt;item&gt; &lt;exepath&gt; &lt;dirs&gt;\n                      &lt;copyflag&gt; [&lt;rpaths&gt;])\n</pre> <p>Add a key to the list (if necessary) for the given item. If added, also set all the variables associated with that key.</p> <pre data-language=\"python\">GET_BUNDLE_KEYS(&lt;app&gt; &lt;libs&gt; &lt;dirs&gt; &lt;keys_var&gt;)\n</pre> <p>Loop over all the executable and library files within the bundle (and given as extra &lt;libs&gt;) and accumulate a list of keys representing them. Set values associated with each key such that we can loop over all of them and copy prerequisite libs into the bundle and then do appropriate install_name_tool fixups.</p> <pre data-language=\"python\">COPY_RESOLVED_ITEM_INTO_BUNDLE(&lt;resolved_item&gt; &lt;resolved_embedded_item&gt;)\n</pre> <p>Copy a resolved item into the bundle if necessary. Copy is not necessary if the resolved_item is “the same as” the resolved_embedded_item.</p> <pre data-language=\"python\">COPY_RESOLVED_FRAMEWORK_INTO_BUNDLE(&lt;resolved_item&gt; &lt;resolved_embedded_item&gt;)\n</pre> <p>Copy a resolved framework into the bundle if necessary. Copy is not necessary if the resolved_item is “the same as” the resolved_embedded_item.</p> <p>By default, BU_COPY_FULL_FRAMEWORK_CONTENTS is not set. If you want full frameworks embedded in your bundles, set BU_COPY_FULL_FRAMEWORK_CONTENTS to ON before calling fixup_bundle. By default, COPY_RESOLVED_FRAMEWORK_INTO_BUNDLE copies the framework dylib itself plus the framework Resources directory.</p> <pre data-language=\"python\">FIXUP_BUNDLE_ITEM(&lt;resolved_embedded_item&gt; &lt;exepath&gt; &lt;dirs&gt;)\n</pre> <p>Get the direct/non-system prerequisites of the resolved embedded item. For each prerequisite, change the way it is referenced to the value of the _EMBEDDED_ITEM keyed variable for that prerequisite. (Most likely changing to an “@executable_path” style reference.)</p> <p>This function requires that the resolved_embedded_item be “inside” the bundle already. In other words, if you pass plugins to fixup_bundle as the libs parameter, you should install them or copy them into the bundle before calling fixup_bundle. The “libs” parameter is a list of libraries that must be fixed up, but that cannot be determined by otool output analysis. (i.e., plugins)</p> <p>Also, change the id of the item being fixed up to its own _EMBEDDED_ITEM value.</p> <p>Accumulate changes in a local variable and make <em>one</em> call to install_name_tool at the end of the function with all the changes at once.</p> <p>If the BU_CHMOD_BUNDLE_ITEMS variable is set then bundle items will be marked writable before install_name_tool tries to change them.</p> <pre data-language=\"python\">VERIFY_BUNDLE_PREREQUISITES(&lt;bundle&gt; &lt;result_var&gt; &lt;info_var&gt;)\n</pre> <p>Verifies that the sum of all prerequisites of all files inside the bundle are contained within the bundle or are “system” libraries, presumed to exist everywhere.</p> <pre data-language=\"python\">VERIFY_BUNDLE_SYMLINKS(&lt;bundle&gt; &lt;result_var&gt; &lt;info_var&gt;)\n</pre> <p>Verifies that any symlinks found in the bundle point to other files that are already also in the bundle... Anything that points to an external file causes this function to fail the verification.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/BundleUtilities.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/BundleUtilities.html</a>\n  </p>\n</div>\n","command/add_library":"<h1 id=\"command:add_library\">add_library</h1>   <ul id=\"add-library\"> <li><a class=\"reference internal\" href=\"#normal-libraries\" id=\"id2\">Normal Libraries</a></li> <li><a class=\"reference internal\" href=\"#imported-libraries\" id=\"id3\">Imported Libraries</a></li> <li><a class=\"reference internal\" href=\"#object-libraries\" id=\"id4\">Object Libraries</a></li> <li><a class=\"reference internal\" href=\"#alias-libraries\" id=\"id5\">Alias Libraries</a></li> <li><a class=\"reference internal\" href=\"#interface-libraries\" id=\"id6\">Interface Libraries</a></li> </ul>\n  <p>Add a library to the project using the specified source files.</p>  <h2 id=\"normal-libraries\">Normal Libraries</h2> <pre data-language=\"python\">add_library(&lt;name&gt; [STATIC | SHARED | MODULE]\n            [EXCLUDE_FROM_ALL]\n            source1 [source2 ...])\n</pre> <p>Adds a library target called <code>&lt;name&gt;</code> to be built from the source files listed in the command invocation. The <code>&lt;name&gt;</code> corresponds to the logical target name and must be globally unique within a project. The actual file name of the library built is constructed based on conventions of the native platform (such as <code>lib&lt;name&gt;.a</code> or <code>&lt;name&gt;.lib</code>).</p> <p><code>STATIC</code>, <code>SHARED</code>, or <code>MODULE</code> may be given to specify the type of library to be created. <code>STATIC</code> libraries are archives of object files for use when linking other targets. <code>SHARED</code> libraries are linked dynamically and loaded at runtime. <code>MODULE</code> libraries are plugins that are not linked into other targets but may be loaded dynamically at runtime using dlopen-like functionality. If no type is given explicitly the type is <code>STATIC</code> or <code>SHARED</code> based on whether the current value of the variable <a class=\"reference internal\" href=\"../variable/build_shared_libs#variable:BUILD_SHARED_LIBS\" title=\"BUILD_SHARED_LIBS\" id=\"index-0-variable:BUILD_SHARED_LIBS\"><code>BUILD_SHARED_LIBS</code></a> is <code>ON</code>. For <code>SHARED</code> and <code>MODULE</code> libraries the <a class=\"reference internal\" href=\"../prop_tgt/position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-0-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> target property is set to <code>ON</code> automatically. A <code>SHARED</code> library may be marked with the <a class=\"reference internal\" href=\"../prop_tgt/framework#prop_tgt:FRAMEWORK\" title=\"FRAMEWORK\" id=\"index-0-prop_tgt:FRAMEWORK\"><code>FRAMEWORK</code></a> target property to create an OS X Framework.</p> <p>If a library does not export any symbols, it must not be declared as a <code>SHARED</code> library. For example, a Windows resource DLL or a managed C++/CLI DLL that exports no unmanaged symbols would need to be a <code>MODULE</code> library. This is because CMake expects a <code>SHARED</code> library to always have an associated import library on Windows.</p> <p>By default the library file will be created in the build tree directory corresponding to the source tree directory in which the command was invoked. See documentation of the <a class=\"reference internal\" href=\"../prop_tgt/archive_output_directory#prop_tgt:ARCHIVE_OUTPUT_DIRECTORY\" title=\"ARCHIVE_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:ARCHIVE_OUTPUT_DIRECTORY\"><code>ARCHIVE_OUTPUT_DIRECTORY</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/library_output_directory#prop_tgt:LIBRARY_OUTPUT_DIRECTORY\" title=\"LIBRARY_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:LIBRARY_OUTPUT_DIRECTORY\"><code>LIBRARY_OUTPUT_DIRECTORY</code></a>, and <a class=\"reference internal\" href=\"../prop_tgt/runtime_output_directory#prop_tgt:RUNTIME_OUTPUT_DIRECTORY\" title=\"RUNTIME_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_DIRECTORY\"><code>RUNTIME_OUTPUT_DIRECTORY</code></a> target properties to change this location. See documentation of the <a class=\"reference internal\" href=\"../prop_tgt/output_name#prop_tgt:OUTPUT_NAME\" title=\"OUTPUT_NAME\" id=\"index-0-prop_tgt:OUTPUT_NAME\"><code>OUTPUT_NAME</code></a> target property to change the <code>&lt;name&gt;</code> part of the final file name.</p> <p>If <code>EXCLUDE_FROM_ALL</code> is given the corresponding property will be set on the created target. See documentation of the <a class=\"reference internal\" href=\"../prop_tgt/exclude_from_all#prop_tgt:EXCLUDE_FROM_ALL\" title=\"EXCLUDE_FROM_ALL\" id=\"index-0-prop_tgt:EXCLUDE_FROM_ALL\"><code>EXCLUDE_FROM_ALL</code></a> target property for details.</p> <p>Source arguments to <code>add_library</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p>   <h2 id=\"imported-libraries\">Imported Libraries</h2> <pre data-language=\"python\">add_library(&lt;name&gt; &lt;SHARED|STATIC|MODULE|UNKNOWN&gt; IMPORTED\n            [GLOBAL])\n</pre> <p>An <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>IMPORTED library target</span></a> references a library file located outside the project. No rules are generated to build it, and the <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target property is <code>True</code>. The target name has scope in the directory in which it is created and below, but the <code>GLOBAL</code> option extends visibility. It may be referenced like any target built within the project. <code>IMPORTED</code> libraries are useful for convenient reference from commands like <a class=\"reference internal\" href=\"target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a>. Details about the imported library are specified by setting properties whose names begin in <code>IMPORTED_</code> and <code>INTERFACE_</code>. The most important such property is <a class=\"reference internal\" href=\"../prop_tgt/imported_location#prop_tgt:IMPORTED_LOCATION\" title=\"IMPORTED_LOCATION\" id=\"index-0-prop_tgt:IMPORTED_LOCATION\"><code>IMPORTED_LOCATION</code></a> (and its per-configuration variant <a class=\"reference internal\" href=\"#\" title=\"IMPORTED_LOCATION_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:IMPORTED_LOCATION_&lt;CONFIG&gt;\"><code>IMPORTED_LOCATION_&lt;CONFIG&gt;</code></a>) which specifies the location of the main library file on disk. See documentation of the <code>IMPORTED_*</code> and <code>INTERFACE_*</code> properties for more information.</p>   <h2 id=\"object-libraries\">Object Libraries</h2> <pre data-language=\"python\">add_library(&lt;name&gt; OBJECT &lt;src&gt;...)\n</pre> <p>Creates an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#object-libraries\"><span>Object Library</span></a>. An object library compiles source files but does not archive or link their object files into a library. Instead other targets created by <a class=\"reference internal\" href=\"#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> or <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> may reference the objects using an expression of the form <code>$&lt;TARGET_OBJECTS:objlib&gt;</code> as a source, where <code>objlib</code> is the object library name. For example:</p> <pre data-language=\"cmake\">add_library(... $&lt;TARGET_OBJECTS:objlib&gt; ...)\nadd_executable(... $&lt;TARGET_OBJECTS:objlib&gt; ...)\n</pre> <p>will include objlib’s object files in a library and an executable along with those compiled from their own sources. Object libraries may contain only sources that compile, header files, and other files that would not affect linking of a normal library (e.g. <code>.txt</code>). They may contain custom commands generating such sources, but not <code>PRE_BUILD</code>, <code>PRE_LINK</code>, or <code>POST_BUILD</code> commands. Object libraries cannot be imported, exported, installed, or linked. Some native build systems may not like targets that have only object files, so consider adding at least one real source file to any target that references <code>$&lt;TARGET_OBJECTS:objlib&gt;</code>.</p>   <h2 id=\"alias-libraries\">Alias Libraries</h2> <pre data-language=\"python\">add_library(&lt;name&gt; ALIAS &lt;target&gt;)\n</pre> <p>Creates an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#alias-targets\"><span>Alias Target</span></a>, such that <code>&lt;name&gt;</code> can be used to refer to <code>&lt;target&gt;</code> in subsequent commands. The <code>&lt;name&gt;</code> does not appear in the generatedbuildsystem as a make target. The <code>&lt;target&gt;</code> may not be an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>Imported Target</span></a> or an <code>ALIAS</code>. <code>ALIAS</code> targets can be used as linkable targets and as targets to read properties from. They can also be tested for existance with the regular <a class=\"reference internal\" href=\"if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if(TARGET)</code></a> subcommand. The <code>&lt;name&gt;</code> may not be used to modify properties of <code>&lt;target&gt;</code>, that is, it may not be used as the operand of <a class=\"reference internal\" href=\"set_property#command:set_property\" title=\"set_property\" id=\"index-0-command:set_property\"><code>set_property()</code></a>, <a class=\"reference internal\" href=\"set_target_properties#command:set_target_properties\" title=\"set_target_properties\" id=\"index-0-command:set_target_properties\"><code>set_target_properties()</code></a>, <a class=\"reference internal\" href=\"target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-1-command:target_link_libraries\"><code>target_link_libraries()</code></a> etc. An <code>ALIAS</code> target may not be installed or exported.</p>   <h2 id=\"interface-libraries\">Interface Libraries</h2> <pre data-language=\"python\">add_library(&lt;name&gt; INTERFACE [IMPORTED [GLOBAL]])\n</pre> <p>Creates an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#interface-libraries\"><span>Interface Library</span></a>. An <code>INTERFACE</code> library target does not directly create build output, though it may have properties set on it and it may be installed, exported and imported. Typically the <code>INTERFACE_*</code> properties are populated on the interface target using the commands:</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"set_property#command:set_property\" title=\"set_property\" id=\"index-1-command:set_property\"><code>set_property()</code></a>,</li> <li>\n<a class=\"reference internal\" href=\"target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-2-command:target_link_libraries\"><code>target_link_libraries(INTERFACE)</code></a>,</li> <li>\n<a class=\"reference internal\" href=\"target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-0-command:target_include_directories\"><code>target_include_directories(INTERFACE)</code></a>,</li> <li>\n<a class=\"reference internal\" href=\"target_compile_options#command:target_compile_options\" title=\"target_compile_options\" id=\"index-0-command:target_compile_options\"><code>target_compile_options(INTERFACE)</code></a>,</li> <li>\n<a class=\"reference internal\" href=\"target_compile_definitions#command:target_compile_definitions\" title=\"target_compile_definitions\" id=\"index-0-command:target_compile_definitions\"><code>target_compile_definitions(INTERFACE)</code></a>, and</li> <li>\n<a class=\"reference internal\" href=\"target_sources#command:target_sources\" title=\"target_sources\" id=\"index-0-command:target_sources\"><code>target_sources(INTERFACE)</code></a>,</li> </ul> <p>and then it is used as an argument to <a class=\"reference internal\" href=\"target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-3-command:target_link_libraries\"><code>target_link_libraries()</code></a> like any other target.</p> <p>An <code>INTERFACE</code> <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>Imported Target</span></a> may also be created with this signature. An <code>IMPORTED</code> library target references a library defined outside the project. The target name has scope in the directory in which it is created and below, but the <code>GLOBAL</code> option extends visibility. It may be referenced like any target built within the project. <code>IMPORTED</code> libraries are useful for convenient reference from commands like <a class=\"reference internal\" href=\"target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-4-command:target_link_libraries\"><code>target_link_libraries()</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/add_library.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/add_library.html</a>\n  </p>\n</div>\n","module/checkcsourceruns":"<h1 id=\"module:CheckCSourceRuns\">CheckCSourceRuns</h1> <p id=\"checkcsourceruns\">Check if the given C source code compiles and runs.</p> <p>CHECK_C_SOURCE_RUNS(&lt;code&gt; &lt;var&gt;)</p> <pre data-language=\"python\">&lt;code&gt;   - source code to try to compile\n&lt;var&gt;    - variable to store the result\n           (1 for success, empty for failure)\n           Will be created as an internal cache variable.\n</pre> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_INCLUDES = list of include directories\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckCSourceRuns.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckCSourceRuns.html</a>\n  </p>\n</div>\n","module/checkcxxcompilerflag":"<h1 id=\"module:CheckCXXCompilerFlag\">CheckCXXCompilerFlag</h1> <p id=\"checkcxxcompilerflag\">Check whether the CXX compiler supports a given flag.</p> <p>CHECK_CXX_COMPILER_FLAG(&lt;flag&gt; &lt;var&gt;)</p> <pre data-language=\"python\">&lt;flag&gt; - the compiler flag\n&lt;var&gt;  - variable to store the result\n</pre> <p>This internally calls the check_cxx_source_compiles macro and sets CMAKE_REQUIRED_DEFINITIONS to &lt;flag&gt;. See help for CheckCXXSourceCompiles for a listing of variables that can otherwise modify the build. The result only tells that the compiler does not give an error message when it encounters the flag. If the flag has any effect or even a specific one is beyond the scope of this module.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckCXXCompilerFlag.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckCXXCompilerFlag.html</a>\n  </p>\n</div>\n","module/checkcxxsourcecompiles":"<h1 id=\"module:CheckCXXSourceCompiles\">CheckCXXSourceCompiles</h1> <p id=\"checkcxxsourcecompiles\">Check if given C++ source compiles and links into an executable</p> <p>CHECK_CXX_SOURCE_COMPILES(&lt;code&gt; &lt;var&gt; [FAIL_REGEX &lt;fail-regex&gt;])</p> <pre data-language=\"python\">&lt;code&gt;       - source code to try to compile, must define 'main'\n&lt;var&gt;        - variable to store whether the source code compiled\n               Will be created as an internal cache variable.\n&lt;fail-regex&gt; - fail if test output matches this regex\n</pre> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_INCLUDES = list of include directories\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckCXXSourceCompiles.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckCXXSourceCompiles.html</a>\n  </p>\n</div>\n","module/checkcxxsymbolexists":"<h1 id=\"module:CheckCXXSymbolExists\">CheckCXXSymbolExists</h1> <p id=\"checkcxxsymbolexists\">Check if a symbol exists as a function, variable, or macro in C++</p> <p>CHECK_CXX_SYMBOL_EXISTS(&lt;symbol&gt; &lt;files&gt; &lt;variable&gt;)</p> <p>Check that the &lt;symbol&gt; is available after including given header &lt;files&gt; and store the result in a &lt;variable&gt;. Specify the list of files in one argument as a semicolon-separated list. CHECK_CXX_SYMBOL_EXISTS() can be used to check in C++ files, as opposed to CHECK_SYMBOL_EXISTS(), which works only for C.</p> <p>If the header files define the symbol as a macro it is considered available and assumed to work. If the header files declare the symbol as a function or variable then the symbol must also be available for linking. If the symbol is a type or enum value it will not be recognized (consider using CheckTypeSize or CheckCSourceCompiles).</p> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_INCLUDES = list of include directories\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckCXXSymbolExists.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckCXXSymbolExists.html</a>\n  </p>\n</div>\n","module/checkfortrancompilerflag":"<h1 id=\"module:CheckFortranCompilerFlag\">CheckFortranCompilerFlag</h1> <p id=\"checkfortrancompilerflag\">Check whether the Fortran compiler supports a given flag.</p> <p>CHECK_Fortran_COMPILER_FLAG(&lt;flag&gt; &lt;var&gt;)</p> <pre data-language=\"python\">&lt;flag&gt; - the compiler flag\n&lt;var&gt;  - variable to store the result\n         Will be created as an internal cache variable.\n</pre> <p>This internally calls the check_fortran_source_compiles macro and sets CMAKE_REQUIRED_DEFINITIONS to &lt;flag&gt;. See help for CheckFortranSourceCompiles for a listing of variables that can otherwise modify the build. The result only tells that the compiler does not give an error message when it encounters the flag. If the flag has any effect or even a specific one is beyond the scope of this module.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckFortranCompilerFlag.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckFortranCompilerFlag.html</a>\n  </p>\n</div>\n","module/checkcxxsourceruns":"<h1 id=\"module:CheckCXXSourceRuns\">CheckCXXSourceRuns</h1> <p id=\"checkcxxsourceruns\">Check if the given C++ source code compiles and runs.</p> <p>CHECK_CXX_SOURCE_RUNS(&lt;code&gt; &lt;var&gt;)</p> <pre data-language=\"python\">&lt;code&gt;   - source code to try to compile\n&lt;var&gt;    - variable to store the result\n           (1 for success, empty for failure)\n           Will be created as an internal cache variable.\n</pre> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_INCLUDES = list of include directories\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckCXXSourceRuns.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckCXXSourceRuns.html</a>\n  </p>\n</div>\n","module/checkfunctionexists":"<h1 id=\"module:CheckFunctionExists\">CheckFunctionExists</h1> <p id=\"checkfunctionexists\">Check if a C function can be linked</p> <p>CHECK_FUNCTION_EXISTS(&lt;function&gt; &lt;variable&gt;)</p> <p>Check that the &lt;function&gt; is provided by libraries on the system and store the result in a &lt;variable&gt;. This does not verify that any system header file declares the function, only that it can be found at link time (consider using CheckSymbolExists). &lt;variable&gt; will be created as an internal cache variable.</p> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_INCLUDES = list of include directories\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckFunctionExists.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckFunctionExists.html</a>\n  </p>\n</div>\n","module/checkincludefilecxx":"<h1 id=\"module:CheckIncludeFileCXX\">CheckIncludeFileCXX</h1> <p id=\"checkincludefilecxx\">Provides a macro to check if a header file can be included in <code>CXX</code>.</p> <dl class=\"command\"> <dt id=\"command:check_include_file_cxx\"><code>CHECK_INCLUDE_FILE_CXX</code></dt> <dd>\n<pre data-language=\"python\">CHECK_INCLUDE_FILE_CXX(&lt;include&gt; &lt;variable&gt; [&lt;flags&gt;])\n</pre> <p>Check if the given <code>&lt;include&gt;</code> file may be included in a <code>CXX</code> source file and store the result in an internal cache entry named <code>&lt;variable&gt;</code>. The optional third argument may be used to add compilation flags to the check (or use <code>CMAKE_REQUIRED_FLAGS</code> below).</p> </dd>\n</dl> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <dl class=\"docutils\"> <dt><code>CMAKE_REQUIRED_FLAGS</code></dt> <dd>string of compile command line flags</dd> <dt><code>CMAKE_REQUIRED_DEFINITIONS</code></dt> <dd>list of macros to define (-DFOO=bar)</dd> <dt><code>CMAKE_REQUIRED_INCLUDES</code></dt> <dd>list of include directories</dd> <dt><code>CMAKE_REQUIRED_QUIET</code></dt> <dd>execute quietly without messages</dd> </dl> <p>See modules <a class=\"reference internal\" href=\"checkincludefile#module:CheckIncludeFile\" title=\"CheckIncludeFile\" id=\"index-0-module:CheckIncludeFile\"><code>CheckIncludeFile</code></a> and <a class=\"reference internal\" href=\"checkincludefiles#module:CheckIncludeFiles\" title=\"CheckIncludeFiles\" id=\"index-0-module:CheckIncludeFiles\"><code>CheckIncludeFiles</code></a> to check for one or more <code>C</code> headers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckIncludeFileCXX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckIncludeFileCXX.html</a>\n  </p>\n</div>\n","module/checkfortranfunctionexists":"<h1 id=\"module:CheckFortranFunctionExists\">CheckFortranFunctionExists</h1> <p id=\"checkfortranfunctionexists\">macro which checks if the Fortran function exists</p> <p>CHECK_FORTRAN_FUNCTION_EXISTS(FUNCTION VARIABLE)</p> <pre data-language=\"python\">FUNCTION - the name of the Fortran function\nVARIABLE - variable to store the result\n           Will be created as an internal cache variable.\n</pre> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckFortranFunctionExists.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckFortranFunctionExists.html</a>\n  </p>\n</div>\n","module/checkincludefile":"<h1 id=\"module:CheckIncludeFile\">CheckIncludeFile</h1> <p id=\"checkincludefile\">Provides a macro to check if a header file can be included in <code>C</code>.</p> <dl class=\"command\"> <dt id=\"command:check_include_file\"><code>CHECK_INCLUDE_FILE</code></dt> <dd>\n<pre data-language=\"python\">CHECK_INCLUDE_FILE(&lt;include&gt; &lt;variable&gt; [&lt;flags&gt;])\n</pre> <p>Check if the given <code>&lt;include&gt;</code> file may be included in a <code>C</code> source file and store the result in an internal cache entry named <code>&lt;variable&gt;</code>. The optional third argument may be used to add compilation flags to the check (or use <code>CMAKE_REQUIRED_FLAGS</code> below).</p> </dd>\n</dl> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <dl class=\"docutils\"> <dt><code>CMAKE_REQUIRED_FLAGS</code></dt> <dd>string of compile command line flags</dd> <dt><code>CMAKE_REQUIRED_DEFINITIONS</code></dt> <dd>list of macros to define (-DFOO=bar)</dd> <dt><code>CMAKE_REQUIRED_INCLUDES</code></dt> <dd>list of include directories</dd> <dt><code>CMAKE_REQUIRED_QUIET</code></dt> <dd>execute quietly without messages</dd> </dl> <p>See the <a class=\"reference internal\" href=\"checkincludefiles#module:CheckIncludeFiles\" title=\"CheckIncludeFiles\" id=\"index-0-module:CheckIncludeFiles\"><code>CheckIncludeFiles</code></a> module to check for multiple headers at once. See the <a class=\"reference internal\" href=\"checkincludefilecxx#module:CheckIncludeFileCXX\" title=\"CheckIncludeFileCXX\" id=\"index-0-module:CheckIncludeFileCXX\"><code>CheckIncludeFileCXX</code></a> module to check for headers using the <code>CXX</code> language.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckIncludeFile.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckIncludeFile.html</a>\n  </p>\n</div>\n","module/checkfortransourcecompiles":"<h1 id=\"module:CheckFortranSourceCompiles\">CheckFortranSourceCompiles</h1> <p id=\"checkfortransourcecompiles\">Check if given Fortran source compiles and links into an executable:</p> <pre data-language=\"python\">CHECK_Fortran_SOURCE_COMPILES(&lt;code&gt; &lt;var&gt; [FAIL_REGEX &lt;fail-regex&gt;])\n</pre> <p>The arguments are:</p> <dl class=\"docutils\"> <dt><code>&lt;code&gt;</code></dt> <dd>Source code to try to compile. It must define a PROGRAM entry point.</dd> <dt><code>&lt;var&gt;</code></dt> <dd>Variable to store whether the source code compiled. Will be created as an internal cache variable.</dd> <dt><code>&lt;fail-regex&gt;</code></dt> <dd>Fail if test output matches this regex.</dd> </dl> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_INCLUDES = list of include directories\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckFortranSourceCompiles.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckFortranSourceCompiles.html</a>\n  </p>\n</div>\n","module/checklanguage":"<h1 id=\"module:CheckLanguage\">CheckLanguage</h1> <p id=\"checklanguage\">Check if a language can be enabled</p> <p>Usage:</p> <pre data-language=\"python\">check_language(&lt;lang&gt;)\n</pre> <p>where &lt;lang&gt; is a language that may be passed to enable_language() such as “Fortran”. If CMAKE_&lt;lang&gt;_COMPILER is already defined the check does nothing. Otherwise it tries enabling the language in a test project. The result is cached in CMAKE_&lt;lang&gt;_COMPILER as the compiler that was found, or NOTFOUND if the language cannot be enabled.</p> <p>Example:</p> <pre data-language=\"python\">check_language(Fortran)\nif(CMAKE_Fortran_COMPILER)\n  enable_language(Fortran)\nelse()\n  message(STATUS \"No Fortran support\")\nendif()\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckLanguage.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckLanguage.html</a>\n  </p>\n</div>\n","module/checkincludefiles":"<h1 id=\"module:CheckIncludeFiles\">CheckIncludeFiles</h1> <p id=\"checkincludefiles\">Provides a macro to check if a list of one or more header files can be included together in <code>C</code>.</p> <dl class=\"command\"> <dt id=\"command:check_include_files\"><code>CHECK_INCLUDE_FILES</code></dt> <dd>\n<pre data-language=\"python\">CHECK_INCLUDE_FILES(\"&lt;includes&gt;\" &lt;variable&gt;)\n</pre> <p>Check if the given <code>&lt;includes&gt;</code> list may be included together in a <code>C</code> source file and store the result in an internal cache entry named <code>&lt;variable&gt;</code>. Specify the <code>&lt;includes&gt;</code> argument as a <a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of header file names.</p> </dd>\n</dl> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <dl class=\"docutils\"> <dt><code>CMAKE_REQUIRED_FLAGS</code></dt> <dd>string of compile command line flags</dd> <dt><code>CMAKE_REQUIRED_DEFINITIONS</code></dt> <dd>list of macros to define (-DFOO=bar)</dd> <dt><code>CMAKE_REQUIRED_INCLUDES</code></dt> <dd>list of include directories</dd> <dt><code>CMAKE_REQUIRED_QUIET</code></dt> <dd>execute quietly without messages</dd> </dl> <p>See modules <a class=\"reference internal\" href=\"checkincludefile#module:CheckIncludeFile\" title=\"CheckIncludeFile\" id=\"index-0-module:CheckIncludeFile\"><code>CheckIncludeFile</code></a> and <a class=\"reference internal\" href=\"checkincludefilecxx#module:CheckIncludeFileCXX\" title=\"CheckIncludeFileCXX\" id=\"index-0-module:CheckIncludeFileCXX\"><code>CheckIncludeFileCXX</code></a> to check for a single header file in <code>C</code> or <code>CXX</code> languages.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckIncludeFiles.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckIncludeFiles.html</a>\n  </p>\n</div>\n","module/checklibraryexists":"<h1 id=\"module:CheckLibraryExists\">CheckLibraryExists</h1> <p id=\"checklibraryexists\">Check if the function exists.</p> <p>CHECK_LIBRARY_EXISTS (LIBRARY FUNCTION LOCATION VARIABLE)</p> <pre data-language=\"python\">LIBRARY  - the name of the library you are looking for\nFUNCTION - the name of the function\nLOCATION - location where the library should be found\nVARIABLE - variable to store the result\n           Will be created as an internal cache variable.\n</pre> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckLibraryExists.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckLibraryExists.html</a>\n  </p>\n</div>\n","module/checkprototypedefinition":"<h1 id=\"module:CheckPrototypeDefinition\">CheckPrototypeDefinition</h1> <p id=\"checkprototypedefinition\">Check if the protoype we expect is correct.</p> <p>check_prototype_definition(FUNCTION PROTOTYPE RETURN HEADER VARIABLE)</p> <pre data-language=\"python\">FUNCTION - The name of the function (used to check if prototype exists)\nPROTOTYPE- The prototype to check.\nRETURN - The return value of the function.\nHEADER - The header files required.\nVARIABLE - The variable to store the result.\n           Will be created as an internal cache variable.\n</pre> <p>Example:</p> <pre data-language=\"python\">check_prototype_definition(getpwent_r\n \"struct passwd *getpwent_r(struct passwd *src, char *buf, int buflen)\"\n \"NULL\"\n \"unistd.h;pwd.h\"\n SOLARIS_GETPWENT_R)\n</pre> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_INCLUDES = list of include directories\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckPrototypeDefinition.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckPrototypeDefinition.html</a>\n  </p>\n</div>\n","module/checkstructhasmember":"<h1 id=\"module:CheckStructHasMember\">CheckStructHasMember</h1> <p id=\"checkstructhasmember\">Check if the given struct or class has the specified member variable</p> <pre data-language=\"python\">CHECK_STRUCT_HAS_MEMBER(&lt;struct&gt; &lt;member&gt; &lt;header&gt; &lt;variable&gt;\n                        [LANGUAGE &lt;language&gt;])\n</pre> <pre data-language=\"python\">&lt;struct&gt; - the name of the struct or class you are interested in\n&lt;member&gt; - the member which existence you want to check\n&lt;header&gt; - the header(s) where the prototype should be declared\n&lt;variable&gt; - variable to store the result\n&lt;language&gt; - the compiler to use (C or CXX)\n</pre> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_INCLUDES = list of include directories\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\n</pre> <p>Example: CHECK_STRUCT_HAS_MEMBER(“struct timeval” tv_sec sys/select.h HAVE_TIMEVAL_TV_SEC LANGUAGE C)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckStructHasMember.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckStructHasMember.html</a>\n  </p>\n</div>\n","module/checksymbolexists":"<h1 id=\"module:CheckSymbolExists\">CheckSymbolExists</h1> <p id=\"checksymbolexists\">Check if a symbol exists as a function, variable, or macro</p> <p>CHECK_SYMBOL_EXISTS(&lt;symbol&gt; &lt;files&gt; &lt;variable&gt;)</p> <p>Check that the &lt;symbol&gt; is available after including given header &lt;files&gt; and store the result in a &lt;variable&gt;. Specify the list of files in one argument as a semicolon-separated list. &lt;variable&gt; will be created as an internal cache variable.</p> <p>If the header files define the symbol as a macro it is considered available and assumed to work. If the header files declare the symbol as a function or variable then the symbol must also be available for linking. If the symbol is a type or enum value it will not be recognized (consider using CheckTypeSize or CheckCSourceCompiles). If the check needs to be done in C++, consider using CHECK_CXX_SYMBOL_EXISTS(), which does the same as CHECK_SYMBOL_EXISTS(), but in C++.</p> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_INCLUDES = list of include directories\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckSymbolExists.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckSymbolExists.html</a>\n  </p>\n</div>\n","module/checktypesize":"<h1 id=\"module:CheckTypeSize\">CheckTypeSize</h1> <p id=\"checktypesize\">Check sizeof a type</p> <pre data-language=\"python\">CHECK_TYPE_SIZE(TYPE VARIABLE [BUILTIN_TYPES_ONLY]\n                              [LANGUAGE &lt;language&gt;])\n</pre> <p>Check if the type exists and determine its size. On return, “HAVE_${VARIABLE}” holds the existence of the type, and “${VARIABLE}” holds one of the following:</p> <pre data-language=\"python\">&lt;size&gt; = type has non-zero size &lt;size&gt;\n\"0\"    = type has arch-dependent size (see below)\n\"\"     = type does not exist\n</pre> <p>Both <code>HAVE_${VARIABLE}</code> and <code>${VARIABLE}</code> will be created as internal cache variables.</p> <p>Furthermore, the variable “${VARIABLE}_CODE” holds C preprocessor code to define the macro “${VARIABLE}” to the size of the type, or leave the macro undefined if the type does not exist.</p> <p>The variable “${VARIABLE}” may be “0” when CMAKE_OSX_ARCHITECTURES has multiple architectures for building OS X universal binaries. This indicates that the type size varies across architectures. In this case “${VARIABLE}_CODE” contains C preprocessor tests mapping from each architecture macro to the corresponding type size. The list of architecture macros is stored in “${VARIABLE}_KEYS”, and the value for each key is stored in “${VARIABLE}-${KEY}”.</p> <p>If the BUILTIN_TYPES_ONLY option is not given, the macro checks for headers &lt;sys/types.h&gt;, &lt;stdint.h&gt;, and &lt;stddef.h&gt;, and saves results in HAVE_SYS_TYPES_H, HAVE_STDINT_H, and HAVE_STDDEF_H. The type size check automatically includes the available headers, thus supporting checks of types defined in the headers.</p> <p>If LANGUAGE is set, the specified compiler will be used to perform the check. Acceptable values are C and CXX</p> <p>Despite the name of the macro you may use it to check the size of more complex expressions, too. To check e.g. for the size of a struct member you can do something like this:</p> <pre data-language=\"python\">check_type_size(\"((struct something*)0)-&gt;member\" SIZEOF_MEMBER)\n</pre> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_INCLUDES = list of include directories\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\nCMAKE_EXTRA_INCLUDE_FILES = list of extra headers to include\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckTypeSize.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckTypeSize.html</a>\n  </p>\n</div>\n","module/checkvariableexists":"<h1 id=\"module:CheckVariableExists\">CheckVariableExists</h1> <p id=\"checkvariableexists\">Check if the variable exists.</p> <pre data-language=\"python\">CHECK_VARIABLE_EXISTS(VAR VARIABLE)\n</pre> <pre data-language=\"python\">VAR      - the name of the variable\nVARIABLE - variable to store the result\n           Will be created as an internal cache variable.\n</pre> <p>This macro is only for C variables.</p> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckVariableExists.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckVariableExists.html</a>\n  </p>\n</div>\n","module/cmakeaddfortransubdirectory":"<h1 id=\"module:CMakeAddFortranSubdirectory\">CMakeAddFortranSubdirectory</h1> <p id=\"cmakeaddfortransubdirectory\">Use MinGW gfortran from VS if a fortran compiler is not found.</p> <p>The ‘add_fortran_subdirectory’ function adds a subdirectory to a project that contains a fortran only sub-project. The module will check the current compiler and see if it can support fortran. If no fortran compiler is found and the compiler is MSVC, then this module will find the MinGW gfortran. It will then use an external project to build with the MinGW tools. It will also create imported targets for the libraries created. This will only work if the fortran code is built into a dll, so BUILD_SHARED_LIBS is turned on in the project. In addition the CMAKE_GNUtoMS option is set to on, so that the MS .lib files are created. Usage is as follows:</p> <pre data-language=\"python\">cmake_add_fortran_subdirectory(\n &lt;subdir&gt;                # name of subdirectory\n PROJECT &lt;project_name&gt;  # project name in subdir top CMakeLists.txt\n ARCHIVE_DIR &lt;dir&gt;       # dir where project places .lib files\n RUNTIME_DIR &lt;dir&gt;       # dir where project places .dll files\n LIBRARIES &lt;lib&gt;...      # names of library targets to import\n LINK_LIBRARIES          # link interface libraries for LIBRARIES\n  [LINK_LIBS &lt;lib&gt; &lt;dep&gt;...]...\n CMAKE_COMMAND_LINE ...  # extra command line flags to pass to cmake\n NO_EXTERNAL_INSTALL     # skip installation of external project\n )\n</pre> <p>Relative paths in ARCHIVE_DIR and RUNTIME_DIR are interpreted with respect to the build directory corresponding to the source directory in which the function is invoked.</p> <p>Limitations:</p> <p>NO_EXTERNAL_INSTALL is required for forward compatibility with a future version that supports installation of the external project binaries during “make install”.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakeAddFortranSubdirectory.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakeAddFortranSubdirectory.html</a>\n  </p>\n</div>\n","module/cmakebackwardcompatibilitycxx":"<h1 id=\"module:CMakeBackwardCompatibilityCXX\">CMakeBackwardCompatibilityCXX</h1> <p id=\"cmakebackwardcompatibilitycxx\">define a bunch of backwards compatibility variables</p> <pre data-language=\"python\">CMAKE_ANSI_CXXFLAGS - flag for ansi c++\nCMAKE_HAS_ANSI_STRING_STREAM - has &lt;strstream&gt;\ninclude(TestForANSIStreamHeaders)\ninclude(CheckIncludeFileCXX)\ninclude(TestForSTDNamespace)\ninclude(TestForANSIForScope)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakeBackwardCompatibilityCXX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakeBackwardCompatibilityCXX.html</a>\n  </p>\n</div>\n","module/cmakedeterminevsservicepack":"<h1 id=\"module:CMakeDetermineVSServicePack\">CMakeDetermineVSServicePack</h1> <p id=\"cmakedeterminevsservicepack\">Deprecated. Do not use.</p> <p>The functionality of this module has been superseded by the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_VERSION\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_VERSION\"><code>CMAKE_&lt;LANG&gt;_COMPILER_VERSION</code></a> variable that contains the compiler version number.</p> <p>Determine the Visual Studio service pack of the ‘cl’ in use.</p> <p>Usage:</p> <pre data-language=\"python\">if(MSVC)\n  include(CMakeDetermineVSServicePack)\n  DetermineVSServicePack( my_service_pack )\n  if( my_service_pack )\n    message(STATUS \"Detected: ${my_service_pack}\")\n  endif()\nendif()\n</pre> <p>Function DetermineVSServicePack sets the given variable to one of the following values or an empty string if unknown:</p> <pre data-language=\"python\">vc80, vc80sp1\nvc90, vc90sp1\nvc100, vc100sp1\nvc110, vc110sp1, vc110sp2, vc110sp3, vc110sp4\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakeDetermineVSServicePack.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakeDetermineVSServicePack.html</a>\n  </p>\n</div>\n","module/cmakeexpandimportedtargets":"<h1 id=\"module:CMakeExpandImportedTargets\">CMakeExpandImportedTargets</h1> <p id=\"cmakeexpandimportedtargets\">Deprecated. Do not use.</p> <p>This module was once needed to expand imported targets to the underlying libraries they reference on disk for use with the <a class=\"reference internal\" href=\"../command/try_compile#command:try_compile\" title=\"try_compile\" id=\"index-0-command:try_compile\"><code>try_compile()</code></a> and <a class=\"reference internal\" href=\"../command/try_run#command:try_run\" title=\"try_run\" id=\"index-0-command:try_run\"><code>try_run()</code></a> commands. These commands now support imported libraries in their <code>LINK_LIBRARIES</code> options (since CMake 2.8.11 for <a class=\"reference internal\" href=\"../command/try_compile#command:try_compile\" title=\"try_compile\" id=\"index-1-command:try_compile\"><code>try_compile()</code></a> and since CMake 3.2 for <a class=\"reference internal\" href=\"../command/try_run#command:try_run\" title=\"try_run\" id=\"index-1-command:try_run\"><code>try_run()</code></a>).</p> <p>This module does not support the policy <a class=\"reference internal\" href=\"../policy/cmp0022#policy:CMP0022\" title=\"CMP0022\" id=\"index-0-policy:CMP0022\"><code>CMP0022</code></a> <code>NEW</code> behavior or use of the <a class=\"reference internal\" href=\"../prop_tgt/interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-0-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> property because <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a> cannot be evaluated during configuration.</p> <pre data-language=\"python\">CMAKE_EXPAND_IMPORTED_TARGETS(&lt;var&gt; LIBRARIES lib1 lib2...libN\n                              [CONFIGURATION &lt;config&gt;])\n</pre> <p>CMAKE_EXPAND_IMPORTED_TARGETS() takes a list of libraries and replaces all imported targets contained in this list with their actual file paths of the referenced libraries on disk, including the libraries from their link interfaces. If a CONFIGURATION is given, it uses the respective configuration of the imported targets if it exists. If no CONFIGURATION is given, it uses the first configuration from ${CMAKE_CONFIGURATION_TYPES} if set, otherwise ${CMAKE_BUILD_TYPE}.</p> <pre data-language=\"python\">cmake_expand_imported_targets(expandedLibs\n  LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}\n  CONFIGURATION \"${CMAKE_TRY_COMPILE_CONFIGURATION}\" )\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakeExpandImportedTargets.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakeExpandImportedTargets.html</a>\n  </p>\n</div>\n","module/cmakefinddependencymacro":"<h1 id=\"module:CMakeFindDependencyMacro\">CMakeFindDependencyMacro</h1> <pre data-language=\"python\" id=\"cmakefinddependencymacro\">find_dependency(&lt;dep&gt; [&lt;version&gt; [EXACT]])\n</pre> <p><code>find_dependency()</code> wraps a <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> call for a package dependency. It is designed to be used in a &lt;package&gt;Config.cmake file, and it forwards the correct parameters for EXACT, QUIET and REQUIRED which were passed to the original <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-1-command:find_package\"><code>find_package()</code></a> call. It also sets an informative diagnostic message if the dependency could not be found.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakeFindDependencyMacro.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakeFindDependencyMacro.html</a>\n  </p>\n</div>\n","module/cmakefindframeworks":"<h1 id=\"module:CMakeFindFrameworks\">CMakeFindFrameworks</h1> <p id=\"cmakefindframeworks\">helper module to find OSX frameworks</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakeFindFrameworks.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakeFindFrameworks.html</a>\n  </p>\n</div>\n","module/cmakefindpackagemode":"<h1 id=\"module:CMakeFindPackageMode\">CMakeFindPackageMode</h1> <p id=\"cmakefindpackagemode\">This file is executed by cmake when invoked with –find-package. It expects that the following variables are set using -D:</p> <dl class=\"docutils\"> <dt><code>NAME</code></dt> <dd>name of the package</dd> <dt><code>COMPILER_ID</code></dt> <dd>the CMake compiler ID for which the result is, i.e. GNU/Intel/Clang/MSVC, etc.</dd> <dt><code>LANGUAGE</code></dt> <dd>language for which the result will be used, i.e. C/CXX/Fortan/ASM</dd> <dt><code>MODE</code></dt> <dd>\n<dl class=\"first last docutils\"> <dt><code>EXIST</code></dt> <dd>only check for existence of the given package</dd> <dt><code>COMPILE</code></dt> <dd>print the flags needed for compiling an object file which uses the given package</dd> <dt><code>LINK</code></dt> <dd>print the flags needed for linking when using the given package</dd> </dl> </dd> <dt><code>QUIET</code></dt> <dd>if TRUE, don’t print anything</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakeFindPackageMode.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakeFindPackageMode.html</a>\n  </p>\n</div>\n","module/cmakegraphvizoptions":"<h1 id=\"module:CMakeGraphVizOptions\">CMakeGraphVizOptions</h1> <p id=\"cmakegraphvizoptions\">The builtin graphviz support of CMake.</p>  <h2 id=\"variables-specific-to-the-graphviz-support\">Variables specific to the graphviz support</h2> <p>CMake can generate graphviz files, showing the dependencies between the targets in a project and also external libraries which are linked against. When CMake is run with the –graphviz=foo option, it will produce</p> <ul class=\"simple\"> <li>a foo.dot file showing all dependencies in the project</li> <li>a foo.dot.&lt;target&gt; file for each target, file showing on which other targets the respective target depends</li> <li>a foo.dot.&lt;target&gt;.dependers file, showing which other targets depend on the respective target</li> </ul> <p>This can result in huge graphs. Using the file CMakeGraphVizOptions.cmake the look and content of the generated graphs can be influenced. This file is searched first in ${CMAKE_BINARY_DIR} and then in ${CMAKE_SOURCE_DIR}. If found, it is read and the variables set in it are used to adjust options for the generated graphviz files.</p> <dl class=\"variable\"> <dt id=\"variable:GRAPHVIZ_GRAPH_TYPE\"><code>GRAPHVIZ_GRAPH_TYPE</code></dt> <dd>\n<p>The graph type</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : “digraph”</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:GRAPHVIZ_GRAPH_NAME\"><code>GRAPHVIZ_GRAPH_NAME</code></dt> <dd>\n<p>The graph name.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : “GG”</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:GRAPHVIZ_GRAPH_HEADER\"><code>GRAPHVIZ_GRAPH_HEADER</code></dt> <dd>\n<p>The header written at the top of the graphviz file.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : “node [n fontsize = “12”];”</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:GRAPHVIZ_NODE_PREFIX\"><code>GRAPHVIZ_NODE_PREFIX</code></dt> <dd>\n<p>The prefix for each node in the graphviz file.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : “node”</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:GRAPHVIZ_EXECUTABLES\"><code>GRAPHVIZ_EXECUTABLES</code></dt> <dd>\n<p>Set this to FALSE to exclude executables from the generated graphs.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : TRUE</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:GRAPHVIZ_STATIC_LIBS\"><code>GRAPHVIZ_STATIC_LIBS</code></dt> <dd>\n<p>Set this to FALSE to exclude static libraries from the generated graphs.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : TRUE</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:GRAPHVIZ_SHARED_LIBS\"><code>GRAPHVIZ_SHARED_LIBS</code></dt> <dd>\n<p>Set this to FALSE to exclude shared libraries from the generated graphs.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : TRUE</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:GRAPHVIZ_MODULE_LIBS\"><code>GRAPHVIZ_MODULE_LIBS</code></dt> <dd>\n<p>Set this to FALSE to exclude module libraries from the generated graphs.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : TRUE</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:GRAPHVIZ_EXTERNAL_LIBS\"><code>GRAPHVIZ_EXTERNAL_LIBS</code></dt> <dd>\n<p>Set this to FALSE to exclude external libraries from the generated graphs.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : TRUE</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:GRAPHVIZ_IGNORE_TARGETS\"><code>GRAPHVIZ_IGNORE_TARGETS</code></dt> <dd>\n<p>A list of regular expressions for ignoring targets.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : empty</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:GRAPHVIZ_GENERATE_PER_TARGET\"><code>GRAPHVIZ_GENERATE_PER_TARGET</code></dt> <dd>\n<p>Set this to FALSE to exclude per target graphs <code>foo.dot.&lt;target&gt;</code>.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : TRUE</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:GRAPHVIZ_GENERATE_DEPENDERS\"><code>GRAPHVIZ_GENERATE_DEPENDERS</code></dt> <dd>\n<p>Set this to FALSE to exclude depender graphs <code>foo.dot.&lt;target&gt;.dependers</code>.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : TRUE</li> </ul> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakeGraphVizOptions.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakeGraphVizOptions.html</a>\n  </p>\n</div>\n","module/cmakeforcecompiler":"<h1 id=\"module:CMakeForceCompiler\">CMakeForceCompiler</h1> <p id=\"cmakeforcecompiler\">Discouraged. Avoid using this module if possible. It will be deprecated by a future version of CMake once alternatives have been provided for all toolchain file use cases.</p> <p>The macros provided by this module were once intended for use by cross-compiling toolchain files when CMake was not able to automatically detect the compiler identification. Since the introduction of this module, CMake’s compiler identification capabilities have improved and can now be taught to recognize any compiler. Furthermore, the suite of information CMake detects from a compiler is now too extensive to be provided by toolchain files using these macros.</p> <p>The only known remaining use case for these macros is to write toolchain files for cross-compilers that cannot link binaries without special flags or custom linker scripts. These macros cause CMake to skip checks it normally performs as part of enabling a language and introspecting the toolchain. However, skipping these checks may limit some generation functionality.</p>  <p>Macro CMAKE_FORCE_C_COMPILER has the following signature:</p> <pre data-language=\"python\">CMAKE_FORCE_C_COMPILER(&lt;compiler&gt; &lt;compiler-id&gt;)\n</pre> <p>It sets CMAKE_C_COMPILER to the given compiler and the cmake internal variable CMAKE_C_COMPILER_ID to the given compiler-id. It also bypasses the check for working compiler and basic compiler information tests.</p> <p>Macro CMAKE_FORCE_CXX_COMPILER has the following signature:</p> <pre data-language=\"python\">CMAKE_FORCE_CXX_COMPILER(&lt;compiler&gt; &lt;compiler-id&gt;)\n</pre> <p>It sets CMAKE_CXX_COMPILER to the given compiler and the cmake internal variable CMAKE_CXX_COMPILER_ID to the given compiler-id. It also bypasses the check for working compiler and basic compiler information tests.</p> <p>Macro CMAKE_FORCE_Fortran_COMPILER has the following signature:</p> <pre data-language=\"python\">CMAKE_FORCE_Fortran_COMPILER(&lt;compiler&gt; &lt;compiler-id&gt;)\n</pre> <p>It sets CMAKE_Fortran_COMPILER to the given compiler and the cmake internal variable CMAKE_Fortran_COMPILER_ID to the given compiler-id. It also bypasses the check for working compiler and basic compiler information tests.</p> <p>So a simple toolchain file could look like this:</p> <pre data-language=\"python\">include (CMakeForceCompiler)\nset(CMAKE_SYSTEM_NAME Generic)\nCMAKE_FORCE_C_COMPILER   (chc12 MetrowerksHicross)\nCMAKE_FORCE_CXX_COMPILER (chc12 MetrowerksHicross)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakeForceCompiler.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakeForceCompiler.html</a>\n  </p>\n</div>\n","module/cmakeparsearguments":"<h1 id=\"module:CMakeParseArguments\">CMakeParseArguments</h1> <p id=\"cmakeparsearguments\">This module once implemented the <a class=\"reference internal\" href=\"../command/cmake_parse_arguments#command:cmake_parse_arguments\" title=\"cmake_parse_arguments\" id=\"index-0-command:cmake_parse_arguments\"><code>cmake_parse_arguments()</code></a> command that is now implemented natively by CMake. It is now an empty placeholder for compatibility with projects that include it to get the command from CMake 3.4 and lower.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakeParseArguments.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakeParseArguments.html</a>\n  </p>\n</div>\n","module/cmakepushcheckstate":"<h1 id=\"module:CMakePushCheckState\">CMakePushCheckState</h1> <p id=\"cmakepushcheckstate\">This module defines three macros: CMAKE_PUSH_CHECK_STATE() CMAKE_POP_CHECK_STATE() and CMAKE_RESET_CHECK_STATE() These macros can be used to save, restore and reset (i.e., clear contents) the state of the variables CMAKE_REQUIRED_FLAGS, CMAKE_REQUIRED_DEFINITIONS, CMAKE_REQUIRED_LIBRARIES and CMAKE_REQUIRED_INCLUDES used by the various Check-files coming with CMake, like e.g. check_function_exists() etc. The variable contents are pushed on a stack, pushing multiple times is supported. This is useful e.g. when executing such tests in a Find-module, where they have to be set, but after the Find-module has been executed they should have the same value as they had before.</p> <p>CMAKE_PUSH_CHECK_STATE() macro receives optional argument RESET. Whether it’s specified, CMAKE_PUSH_CHECK_STATE() will set all CMAKE_REQUIRED_* variables to empty values, same as CMAKE_RESET_CHECK_STATE() call will do.</p> <p>Usage:</p> <pre data-language=\"python\">cmake_push_check_state(RESET)\nset(CMAKE_REQUIRED_DEFINITIONS -DSOME_MORE_DEF)\ncheck_function_exists(...)\ncmake_reset_check_state()\nset(CMAKE_REQUIRED_DEFINITIONS -DANOTHER_DEF)\ncheck_function_exists(...)\ncmake_pop_check_state()\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakePushCheckState.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakePushCheckState.html</a>\n  </p>\n</div>\n","module/cmakepackageconfighelpers":"<h1 id=\"module:CMakePackageConfigHelpers\">CMakePackageConfigHelpers</h1> <p id=\"cmakepackageconfighelpers\">Helpers functions for creating config files that can be included by other projects to find and use a package.</p> <p>Adds the <a class=\"reference internal\" href=\"#command:configure_package_config_file\" title=\"configure_package_config_file\" id=\"index-0-command:configure_package_config_file\"><code>configure_package_config_file()</code></a> and <a class=\"reference internal\" href=\"#command:write_basic_package_version_file\" title=\"write_basic_package_version_file\" id=\"index-0-command:write_basic_package_version_file\"><code>write_basic_package_version_file()</code></a> commands.</p>  <h2 id=\"generating-a-package-configuration-file\">Generating a Package Configuration File</h2> <dl class=\"command\"> <dt id=\"command:configure_package_config_file\"><code>configure_package_config_file</code></dt> <dd>\n<p>Create a config file for a project:</p> <pre data-language=\"python\">configure_package_config_file(&lt;input&gt; &lt;output&gt;\n  INSTALL_DESTINATION &lt;path&gt;\n  [PATH_VARS &lt;var1&gt; &lt;var2&gt; ... &lt;varN&gt;]\n  [NO_SET_AND_CHECK_MACRO]\n  [NO_CHECK_REQUIRED_COMPONENTS_MACRO]\n  [INSTALL_PREFIX &lt;path&gt;]\n  )\n</pre> </dd>\n</dl> <p><code>configure_package_config_file()</code> should be used instead of the plain <a class=\"reference internal\" href=\"../command/configure_file#command:configure_file\" title=\"configure_file\" id=\"index-0-command:configure_file\"><code>configure_file()</code></a> command when creating the <code>&lt;Name&gt;Config.cmake</code> or <code>&lt;Name&gt;-config.cmake</code> file for installing a project or library. It helps making the resulting package relocatable by avoiding hardcoded paths in the installed <code>Config.cmake</code> file.</p> <p>In a <code>FooConfig.cmake</code> file there may be code like this to make the install destinations know to the using project:</p> <pre data-language=\"cmake\">set(FOO_INCLUDE_DIR   \"@CMAKE_INSTALL_FULL_INCLUDEDIR@\" )\nset(FOO_DATA_DIR   \"@CMAKE_INSTALL_PREFIX@/@RELATIVE_DATA_INSTALL_DIR@\" )\nset(FOO_ICONS_DIR   \"@CMAKE_INSTALL_PREFIX@/share/icons\" )\n...logic to determine installedPrefix from the own location...\nset(FOO_CONFIG_DIR  \"${installedPrefix}/@CONFIG_INSTALL_DIR@\" )\n</pre> <p>All 4 options shown above are not sufficient, since the first 3 hardcode the absolute directory locations, and the 4th case works only if the logic to determine the <code>installedPrefix</code> is correct, and if <code>CONFIG_INSTALL_DIR</code> contains a relative path, which in general cannot be guaranteed. This has the effect that the resulting <code>FooConfig.cmake</code> file would work poorly under Windows and OSX, where users are used to choose the install location of a binary package at install time, independent from how <a class=\"reference internal\" href=\"../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> was set at build/cmake time.</p> <p>Using <code>configure_package_config_file</code> helps. If used correctly, it makes the resulting <code>FooConfig.cmake</code> file relocatable. Usage:</p> <ol class=\"arabic simple\"> <li>write a <code>FooConfig.cmake.in</code> file as you are used to</li> <li>insert a line containing only the string <code>@PACKAGE_INIT@</code>\n</li> <li>instead of <code>set(FOO_DIR \"@SOME_INSTALL_DIR@\")</code>, use <code>set(FOO_DIR \"@PACKAGE_SOME_INSTALL_DIR@\")</code> (this must be after the <code>@PACKAGE_INIT@</code> line)</li> <li>instead of using the normal <a class=\"reference internal\" href=\"../command/configure_file#command:configure_file\" title=\"configure_file\" id=\"index-1-command:configure_file\"><code>configure_file()</code></a>, use <code>configure_package_config_file()</code>\n</li> </ol> <p>The <code>&lt;input&gt;</code> and <code>&lt;output&gt;</code> arguments are the input and output file, the same way as in <a class=\"reference internal\" href=\"../command/configure_file#command:configure_file\" title=\"configure_file\" id=\"index-2-command:configure_file\"><code>configure_file()</code></a>.</p> <p>The <code>&lt;path&gt;</code> given to <code>INSTALL_DESTINATION</code> must be the destination where the <code>FooConfig.cmake</code> file will be installed to. This path can either be absolute, or relative to the <code>INSTALL_PREFIX</code> path.</p> <p>The variables <code>&lt;var1&gt;</code> to <code>&lt;varN&gt;</code> given as <code>PATH_VARS</code> are the variables which contain install destinations. For each of them the macro will create a helper variable <code>PACKAGE_&lt;var...&gt;</code>. These helper variables must be used in the <code>FooConfig.cmake.in</code> file for setting the installed location. They are calculated by <code>configure_package_config_file</code> so that they are always relative to the installed location of the package. This works both for relative and also for absolute locations. For absolute locations it works only if the absolute location is a subdirectory of <code>INSTALL_PREFIX</code>.</p> <p>If the <code>INSTALL_PREFIX</code> argument is passed, this is used as base path to calculate all the relative paths. The <code>&lt;path&gt;</code> argument must be an absolute path. If this argument is not passed, the <a class=\"reference internal\" href=\"../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-1-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> variable will be used instead. The default value is good when generating a FooConfig.cmake file to use your package from the install tree. When generating a FooConfig.cmake file to use your package from the build tree this option should be used.</p> <p>By default <code>configure_package_config_file</code> also generates two helper macros, <code>set_and_check()</code> and <code>check_required_components()</code> into the <code>FooConfig.cmake</code> file.</p> <p><code>set_and_check()</code> should be used instead of the normal <code>set()</code> command for setting directories and file locations. Additionally to setting the variable it also checks that the referenced file or directory actually exists and fails with a <code>FATAL_ERROR</code> otherwise. This makes sure that the created <code>FooConfig.cmake</code> file does not contain wrong references. When using the <code>NO_SET_AND_CHECK_MACRO</code>, this macro is not generated into the <code>FooConfig.cmake</code> file.</p> <p><code>check_required_components(&lt;package_name&gt;)</code> should be called at the end of the <code>FooConfig.cmake</code> file if the package supports components. This macro checks whether all requested, non-optional components have been found, and if this is not the case, sets the <code>Foo_FOUND</code> variable to <code>FALSE</code>, so that the package is considered to be not found. It does that by testing the <code>Foo_&lt;Component&gt;_FOUND</code> variables for all requested required components. When using the <code>NO_CHECK_REQUIRED_COMPONENTS_MACRO</code> option, this macro is not generated into the <code>FooConfig.cmake</code> file.</p> <p>For an example see below the documentation for <a class=\"reference internal\" href=\"#command:write_basic_package_version_file\" title=\"write_basic_package_version_file\" id=\"index-1-command:write_basic_package_version_file\"><code>write_basic_package_version_file()</code></a>.</p>   <h2 id=\"generating-a-package-version-file\">Generating a Package Version File</h2> <dl class=\"command\"> <dt id=\"command:write_basic_package_version_file\"><code>write_basic_package_version_file</code></dt> <dd>\n<p>Create a version file for a project:</p> <pre data-language=\"python\">write_basic_package_version_file(&lt;filename&gt;\n  [VERSION &lt;major.minor.patch&gt;]\n  COMPATIBILITY &lt;AnyNewerVersion|SameMajorVersion|ExactVersion&gt; )\n</pre> </dd>\n</dl> <p>Writes a file for use as <code>&lt;package&gt;ConfigVersion.cmake</code> file to <code>&lt;filename&gt;</code>. See the documentation of <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> for details on this.</p> <p><code>&lt;filename&gt;</code> is the output filename, it should be in the build tree. <code>&lt;major.minor.patch&gt;</code> is the version number of the project to be installed.</p> <p>If no <code>VERSION</code> is given, the <a class=\"reference internal\" href=\"../variable/project_version#variable:PROJECT_VERSION\" title=\"PROJECT_VERSION\" id=\"index-0-variable:PROJECT_VERSION\"><code>PROJECT_VERSION</code></a> variable is used. If this hasn’t been set, it errors out.</p> <p>The <code>COMPATIBILITY</code> mode <code>AnyNewerVersion</code> means that the installed package version will be considered compatible if it is newer or exactly the same as the requested version. This mode should be used for packages which are fully backward compatible, also across major versions. If <code>SameMajorVersion</code> is used instead, then the behaviour differs from <code>AnyNewerVersion</code> in that the major version number must be the same as requested, e.g. version 2.0 will not be considered compatible if 1.0 is requested. This mode should be used for packages which guarantee backward compatibility within the same major version. If <code>ExactVersion</code> is used, then the package is only considered compatible if the requested version matches exactly its own version number (not considering the tweak version). For example, version 1.2.3 of a package is only considered compatible to requested version 1.2.3. This mode is for packages without compatibility guarantees. If your project has more elaborated version matching rules, you will need to write your own custom <code>ConfigVersion.cmake</code> file instead of using this macro.</p> <p>Internally, this macro executes <a class=\"reference internal\" href=\"../command/configure_file#command:configure_file\" title=\"configure_file\" id=\"index-3-command:configure_file\"><code>configure_file()</code></a> to create the resulting version file. Depending on the <code>COMPATIBLITY</code>, either the file <code>BasicConfigVersion-SameMajorVersion.cmake.in</code> or <code>BasicConfigVersion-AnyNewerVersion.cmake.in</code> is used. Please note that these two files are internal to CMake and you should not call <a class=\"reference internal\" href=\"../command/configure_file#command:configure_file\" title=\"configure_file\" id=\"index-4-command:configure_file\"><code>configure_file()</code></a> on them yourself, but they can be used as starting point to create more sophisticted custom <code>ConfigVersion.cmake</code> files.</p>   <h2 id=\"example-generating-package-files\">Example Generating Package Files</h2> <p>Example using both <a class=\"reference internal\" href=\"#command:configure_package_config_file\" title=\"configure_package_config_file\" id=\"index-1-command:configure_package_config_file\"><code>configure_package_config_file()</code></a> and <code>write_basic_package_version_file()</code>:</p> <p><code>CMakeLists.txt</code>:</p> <pre data-language=\"cmake\">set(INCLUDE_INSTALL_DIR include/ ... CACHE )\nset(LIB_INSTALL_DIR lib/ ... CACHE )\nset(SYSCONFIG_INSTALL_DIR etc/foo/ ... CACHE )\n...\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(FooConfig.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake\n  INSTALL_DESTINATION ${LIB_INSTALL_DIR}/Foo/cmake\n  PATH_VARS INCLUDE_INSTALL_DIR SYSCONFIG_INSTALL_DIR)\nwrite_basic_package_version_file(\n  ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake\n  VERSION 1.2.3\n  COMPATIBILITY SameMajorVersion )\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake\n              ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake\n        DESTINATION ${LIB_INSTALL_DIR}/Foo/cmake )\n</pre> <p><code>FooConfig.cmake.in</code>:</p> <pre data-language=\"cmake\">set(FOO_VERSION x.y.z)\n...\n@PACKAGE_INIT@\n...\nset_and_check(FOO_INCLUDE_DIR \"@PACKAGE_INCLUDE_INSTALL_DIR@\")\nset_and_check(FOO_SYSCONFIG_DIR \"@PACKAGE_SYSCONFIG_INSTALL_DIR@\")\n\ncheck_required_components(Foo)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakePackageConfigHelpers.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakePackageConfigHelpers.html</a>\n  </p>\n</div>\n","module/cmakeprinthelpers":"<h1 id=\"module:CMakePrintHelpers\">CMakePrintHelpers</h1> <p id=\"cmakeprinthelpers\">Convenience macros for printing properties and variables, useful e.g. for debugging.</p> <pre data-language=\"python\">CMAKE_PRINT_PROPERTIES([TARGETS target1 ..  targetN]\n                       [SOURCES source1 .. sourceN]\n                       [DIRECTORIES dir1 .. dirN]\n                       [TESTS test1 .. testN]\n                       [CACHE_ENTRIES entry1 .. entryN]\n                       PROPERTIES prop1 .. propN )\n</pre> <p>This macro prints the values of the properties of the given targets, source files, directories, tests or cache entries. Exactly one of the scope keywords must be used. Example:</p> <pre data-language=\"python\">cmake_print_properties(TARGETS foo bar PROPERTIES\n                       LOCATION INTERFACE_INCLUDE_DIRS)\n</pre> <p>This will print the LOCATION and INTERFACE_INCLUDE_DIRS properties for both targets foo and bar.</p> <p>CMAKE_PRINT_VARIABLES(var1 var2 .. varN)</p> <p>This macro will print the name of each variable followed by its value. Example:</p> <pre data-language=\"python\">cmake_print_variables(CMAKE_C_COMPILER CMAKE_MAJOR_VERSION DOES_NOT_EXIST)\n</pre> <p>Gives:</p> <pre data-language=\"python\">-- CMAKE_C_COMPILER=\"/usr/bin/gcc\" ; CMAKE_MAJOR_VERSION=\"2\" ; DOES_NOT_EXIST=\"\"\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakePrintHelpers.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakePrintHelpers.html</a>\n  </p>\n</div>\n","module/cmakeprintsysteminformation":"<h1 id=\"module:CMakePrintSystemInformation\">CMakePrintSystemInformation</h1> <p id=\"cmakeprintsysteminformation\">print system information</p> <p>This file can be used for diagnostic purposes just include it in a project to see various internal CMake variables.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakePrintSystemInformation.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakePrintSystemInformation.html</a>\n  </p>\n</div>\n","prop_tgt/cxx_standard":"<h1 id=\"prop_tgt:CXX_STANDARD\">CXX_STANDARD</h1> <p id=\"cxx-standard\">The C++ standard whose features are requested to build this target.</p> <p>This property specifies the C++ standard whose features are requested to build this target. For some compilers, this results in adding a flag such as <code>-std=gnu++11</code> to the compile line. For compilers that have no notion of a standard level, such as MSVC, this has no effect.</p> <p>Supported values are <code>98</code>, <code>11</code> and <code>14</code>.</p> <p>If the value requested does not result in a compile flag being added for the compiler in use, a previous standard flag will be added instead. This means that using:</p> <pre data-language=\"cmake\">set_property(TARGET tgt PROPERTY CXX_STANDARD 11)\n</pre> <p>with a compiler which does not support <code>-std=gnu++11</code> or an equivalent flag will not result in an error or warning, but will instead add the <code>-std=gnu++98</code> flag if supported. This “decay” behavior may be controlled with the <a class=\"reference internal\" href=\"cxx_standard_required#prop_tgt:CXX_STANDARD_REQUIRED\" title=\"CXX_STANDARD_REQUIRED\" id=\"index-0-prop_tgt:CXX_STANDARD_REQUIRED\"><code>CXX_STANDARD_REQUIRED</code></a> target property.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_cxx_standard#variable:CMAKE_CXX_STANDARD\" title=\"CMAKE_CXX_STANDARD\" id=\"index-0-variable:CMAKE_CXX_STANDARD\"><code>CMAKE_CXX_STANDARD</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/CXX_STANDARD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/CXX_STANDARD.html</a>\n  </p>\n</div>\n","variable/cmake_system_name":"<h1 id=\"variable:CMAKE_SYSTEM_NAME\">CMAKE_SYSTEM_NAME</h1> <p id=\"cmake-system-name\">The name of the operating system for which CMake is to build. See the <a class=\"reference internal\" href=\"cmake_system_version#variable:CMAKE_SYSTEM_VERSION\" title=\"CMAKE_SYSTEM_VERSION\" id=\"index-0-variable:CMAKE_SYSTEM_VERSION\"><code>CMAKE_SYSTEM_VERSION</code></a> variable for the OS version.</p>  <h2 id=\"system-name-for-host-builds\">System Name for Host Builds</h2> <p><code>CMAKE_SYSTEM_NAME</code> is by default set to the same value as the <a class=\"reference internal\" href=\"cmake_host_system_name#variable:CMAKE_HOST_SYSTEM_NAME\" title=\"CMAKE_HOST_SYSTEM_NAME\" id=\"index-0-variable:CMAKE_HOST_SYSTEM_NAME\"><code>CMAKE_HOST_SYSTEM_NAME</code></a> variable so that the build targets the host system.</p>   <h2 id=\"system-name-for-cross-compiling\">System Name for Cross Compiling</h2> <p><code>CMAKE_SYSTEM_NAME</code> may be set explicitly when first configuring a new build tree in order to enable <a class=\"reference internal\" href=\"../manual/cmake-toolchains.7#cross-compiling-toolchain\"><span>cross compiling</span></a>. In this case the <a class=\"reference internal\" href=\"cmake_system_version#variable:CMAKE_SYSTEM_VERSION\" title=\"CMAKE_SYSTEM_VERSION\" id=\"index-1-variable:CMAKE_SYSTEM_VERSION\"><code>CMAKE_SYSTEM_VERSION</code></a> variable must also be set explicitly.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_NAME.html</a>\n  </p>\n</div>\n","module/cmakeverifymanifest":"<h1 id=\"module:CMakeVerifyManifest\">CMakeVerifyManifest</h1> <p id=\"cmakeverifymanifest\">CMakeVerifyManifest.cmake</p> <p>This script is used to verify that embeded manifests and side by side manifests for a project match. To run this script, cd to a directory and run the script with cmake -P. On the command line you can pass in versions that are OK even if not found in the .manifest files. For example, cmake -Dallow_versions=8.0.50608.0 -PCmakeVerifyManifest.cmake could be used to allow an embeded manifest of 8.0.50608.0 to be used in a project even if that version was not found in the .manifest file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakeVerifyManifest.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakeVerifyManifest.html</a>\n  </p>\n</div>\n","module/cpackbundle":"<h1 id=\"module:CPackBundle\">CPackBundle</h1> <p id=\"cpackbundle\">CPack Bundle generator (Mac OS X) specific options</p>  <h2 id=\"variables-specific-to-cpack-bundle-generator\">Variables specific to CPack Bundle generator</h2> <p>Installers built on Mac OS X using the Bundle generator use the aforementioned DragNDrop (CPACK_DMG_xxx) variables, plus the following Bundle-specific parameters (CPACK_BUNDLE_xxx).</p> <dl class=\"variable\"> <dt id=\"variable:CPACK_BUNDLE_NAME\"><code>CPACK_BUNDLE_NAME</code></dt> <dd>\n<p>The name of the generated bundle. This appears in the OSX finder as the bundle name. Required.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_BUNDLE_PLIST\"><code>CPACK_BUNDLE_PLIST</code></dt> <dd>\n<p>Path to an OSX plist file that will be used for the generated bundle. This assumes that the caller has generated or specified their own Info.plist file. Required.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_BUNDLE_ICON\"><code>CPACK_BUNDLE_ICON</code></dt> <dd>\n<p>Path to an OSX icon file that will be used as the icon for the generated bundle. This is the icon that appears in the OSX finder for the bundle, and in the OSX dock when the bundle is opened. Required.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_BUNDLE_STARTUP_COMMAND\"><code>CPACK_BUNDLE_STARTUP_COMMAND</code></dt> <dd>\n<p>Path to a startup script. This is a path to an executable or script that will be run whenever an end-user double-clicks the generated bundle in the OSX Finder. Optional.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_BUNDLE_APPLE_CERT_APP\"><code>CPACK_BUNDLE_APPLE_CERT_APP</code></dt> <dd>\n<p>The name of your Apple supplied code signing certificate for the application. The name usually takes the form “Developer ID Application: [Name]” or “3rd Party Mac Developer Application: [Name]”. If this variable is not set the application will not be signed.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_BUNDLE_APPLE_ENTITLEMENTS\"><code>CPACK_BUNDLE_APPLE_ENTITLEMENTS</code></dt> <dd>\n<p>The name of the plist file that contains your apple entitlements for sandboxing your application. This file is required for submission to the Mac App Store.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_BUNDLE_APPLE_CODESIGN_FILES\"><code>CPACK_BUNDLE_APPLE_CODESIGN_FILES</code></dt> <dd>\n<p>A list of additional files that you wish to be signed. You do not need to list the main application folder, or the main executable. You should list any frameworks and plugins that are included in your app bundle.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_BUNDLE_APPLE_CODESIGN_PARAMETER\"><code>CPACK_BUNDLE_APPLE_CODESIGN_PARAMETER</code></dt> <dd>\n<p>Additional parameter that will passed to codesign. Default value: “–deep -f”</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_COMMAND_CODESIGN\"><code>CPACK_COMMAND_CODESIGN</code></dt> <dd>\n<p>Path to the codesign(1) command used to sign applications with an Apple cert. This variable can be used to override the automatically detected command (or specify its location if the auto-detection fails to find it.)</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CPackBundle.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CPackBundle.html</a>\n  </p>\n</div>\n","module/cmakedependentoption":"<h1 id=\"module:CMakeDependentOption\">CMakeDependentOption</h1> <p id=\"cmakedependentoption\">Macro to provide an option dependent on other options.</p> <p>This macro presents an option to the user only if a set of other conditions are true. When the option is not presented a default value is used, but any value set by the user is preserved for when the option is presented again. Example invocation:</p> <pre data-language=\"python\">CMAKE_DEPENDENT_OPTION(USE_FOO \"Use Foo\" ON\n                       \"USE_BAR;NOT USE_ZOT\" OFF)\n</pre> <p>If USE_BAR is true and USE_ZOT is false, this provides an option called USE_FOO that defaults to ON. Otherwise, it sets USE_FOO to OFF. If the status of USE_BAR or USE_ZOT ever changes, any value for the USE_FOO option is saved so that when the option is re-enabled it retains its old value.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CMakeDependentOption.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CMakeDependentOption.html</a>\n  </p>\n</div>\n","module/cpackcomponent":"<h1 id=\"module:CPackComponent\">CPackComponent</h1> <p id=\"cpackcomponent\">Build binary and source package installers</p>  <h2 id=\"variables-concerning-cpack-components\">Variables concerning CPack Components</h2> <p>The CPackComponent module is the module which handles the component part of CPack. See CPack module for general information about CPack.</p> <p>For certain kinds of binary installers (including the graphical installers on Mac OS X and Windows), CPack generates installers that allow users to select individual application components to install. The contents of each of the components are identified by the COMPONENT argument of CMake’s INSTALL command. These components can be annotated with user-friendly names and descriptions, inter-component dependencies, etc., and grouped in various ways to customize the resulting installer. See the cpack_add_* commands, described below, for more information about component-specific installations.</p> <p>Component-specific installation allows users to select specific sets of components to install during the install process. Installation components are identified by the COMPONENT argument of CMake’s INSTALL commands, and should be further described by the following CPack commands:</p> <dl class=\"variable\"> <dt id=\"variable:CPACK_COMPONENTS_ALL\"><code>CPACK_COMPONENTS_ALL</code></dt> <dd>\n<p>The list of component to install.</p> <p>The default value of this variable is computed by CPack and contains all components defined by the project. The user may set it to only include the specified components.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_&lt;GENNAME&gt;_COMPONENT_INSTALL\"><code>CPACK_<genname>_COMPONENT_INSTALL</genname></code></dt> <dd>\n<p>Enable/Disable component install for CPack generator &lt;GENNAME&gt;.</p> <p>Each CPack Generator (RPM, DEB, ARCHIVE, NSIS, DMG, etc...) has a legacy default behavior. e.g. RPM builds monolithic whereas NSIS builds component. One can change the default behavior by setting this variable to 0/1 or OFF/ON.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_COMPONENTS_GROUPING\"><code>CPACK_COMPONENTS_GROUPING</code></dt> <dd>\n<p>Specify how components are grouped for multi-package component-aware CPack generators.</p> <p>Some generators like RPM or ARCHIVE family (TGZ, ZIP, ...) generates several packages files when asked for component packaging. They group the component differently depending on the value of this variable:</p> <ul class=\"simple\"> <li>ONE_PER_GROUP (default): creates one package file per component group</li> <li>ALL_COMPONENTS_IN_ONE : creates a single package with all (requested) component</li> <li>IGNORE : creates one package per component, i.e. IGNORE component group</li> </ul> <p>One can specify different grouping for different CPack generator by using a CPACK_PROJECT_CONFIG_FILE.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_COMPONENT_&lt;compName&gt;_DISPLAY_NAME\"><code>CPACK_COMPONENT_<compname>_DISPLAY_NAME</compname></code></dt> <dd>\n<p>The name to be displayed for a component.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_COMPONENT_&lt;compName&gt;_DESCRIPTION\"><code>CPACK_COMPONENT_<compname>_DESCRIPTION</compname></code></dt> <dd>\n<p>The description of a component.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_COMPONENT_&lt;compName&gt;_GROUP\"><code>CPACK_COMPONENT_<compname>_GROUP</compname></code></dt> <dd>\n<p>The group of a component.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_COMPONENT_&lt;compName&gt;_DEPENDS\"><code>CPACK_COMPONENT_<compname>_DEPENDS</compname></code></dt> <dd>\n<p>The dependencies (list of components) on which this component depends.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_COMPONENT_&lt;compName&gt;_REQUIRED\"><code>CPACK_COMPONENT_<compname>_REQUIRED</compname></code></dt> <dd>\n<p>True is this component is required.</p> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:cpack_add_component\"><code>cpack_add_component</code></dt> \n</dl> <p>Describes a CPack installation component named by the COMPONENT argument to a CMake INSTALL command.</p> <pre data-language=\"python\">cpack_add_component(compname\n                    [DISPLAY_NAME name]\n                    [DESCRIPTION description]\n                    [HIDDEN | REQUIRED | DISABLED ]\n                    [GROUP group]\n                    [DEPENDS comp1 comp2 ... ]\n                    [INSTALL_TYPES type1 type2 ... ]\n                    [DOWNLOADED]\n                    [ARCHIVE_FILE filename])\n</pre> <p>The cmake_add_component command describes an installation component, which the user can opt to install or remove as part of the graphical installation process. compname is the name of the component, as provided to the COMPONENT argument of one or more CMake INSTALL commands.</p> <p>DISPLAY_NAME is the displayed name of the component, used in graphical installers to display the component name. This value can be any string.</p> <p>DESCRIPTION is an extended description of the component, used in graphical installers to give the user additional information about the component. Descriptions can span multiple lines using <code>\\n</code> as the line separator. Typically, these descriptions should be no more than a few lines long.</p> <p>HIDDEN indicates that this component will be hidden in the graphical installer, so that the user cannot directly change whether it is installed or not.</p> <p>REQUIRED indicates that this component is required, and therefore will always be installed. It will be visible in the graphical installer, but it cannot be unselected. (Typically, required components are shown greyed out).</p> <p>DISABLED indicates that this component should be disabled (unselected) by default. The user is free to select this component for installation, unless it is also HIDDEN.</p> <p>DEPENDS lists the components on which this component depends. If this component is selected, then each of the components listed must also be selected. The dependency information is encoded within the installer itself, so that users cannot install inconsistent sets of components.</p> <p>GROUP names the component group of which this component is a part. If not provided, the component will be a standalone component, not part of any component group. Component groups are described with the cpack_add_component_group command, detailed below.</p> <p>INSTALL_TYPES lists the installation types of which this component is a part. When one of these installations types is selected, this component will automatically be selected. Installation types are described with the cpack_add_install_type command, detailed below.</p> <p>DOWNLOADED indicates that this component should be downloaded on-the-fly by the installer, rather than packaged in with the installer itself. For more information, see the cpack_configure_downloads command.</p> <p>ARCHIVE_FILE provides a name for the archive file created by CPack to be used for downloaded components. If not supplied, CPack will create a file with some name based on CPACK_PACKAGE_FILE_NAME and the name of the component. See cpack_configure_downloads for more information.</p> <dl class=\"command\"> <dt id=\"command:cpack_add_component_group\"><code>cpack_add_component_group</code></dt> \n</dl> <p>Describes a group of related CPack installation components.</p> <pre data-language=\"python\">cpack_add_component_group(groupname\n                         [DISPLAY_NAME name]\n                         [DESCRIPTION description]\n                         [PARENT_GROUP parent]\n                         [EXPANDED]\n                         [BOLD_TITLE])\n</pre> <p>The cpack_add_component_group describes a group of installation components, which will be placed together within the listing of options. Typically, component groups allow the user to select/deselect all of the components within a single group via a single group-level option. Use component groups to reduce the complexity of installers with many options. groupname is an arbitrary name used to identify the group in the GROUP argument of the cpack_add_component command, which is used to place a component in a group. The name of the group must not conflict with the name of any component.</p> <p>DISPLAY_NAME is the displayed name of the component group, used in graphical installers to display the component group name. This value can be any string.</p> <p>DESCRIPTION is an extended description of the component group, used in graphical installers to give the user additional information about the components within that group. Descriptions can span multiple lines using <code>\\n</code> as the line separator. Typically, these descriptions should be no more than a few lines long.</p> <p>PARENT_GROUP, if supplied, names the parent group of this group. Parent groups are used to establish a hierarchy of groups, providing an arbitrary hierarchy of groups.</p> <p>EXPANDED indicates that, by default, the group should show up as “expanded”, so that the user immediately sees all of the components within the group. Otherwise, the group will initially show up as a single entry.</p> <p>BOLD_TITLE indicates that the group title should appear in bold, to call the user’s attention to the group.</p> <dl class=\"command\"> <dt id=\"command:cpack_add_install_type\"><code>cpack_add_install_type</code></dt> \n</dl> <p>Add a new installation type containing a set of predefined component selections to the graphical installer.</p> <pre data-language=\"python\">cpack_add_install_type(typename\n                       [DISPLAY_NAME name])\n</pre> <p>The cpack_add_install_type command identifies a set of preselected components that represents a common use case for an application. For example, a “Developer” install type might include an application along with its header and library files, while an “End user” install type might just include the application’s executable. Each component identifies itself with one or more install types via the INSTALL_TYPES argument to cpack_add_component.</p> <p>DISPLAY_NAME is the displayed name of the install type, which will typically show up in a drop-down box within a graphical installer. This value can be any string.</p> <dl class=\"command\"> <dt id=\"command:cpack_configure_downloads\"><code>cpack_configure_downloads</code></dt> \n</dl> <p>Configure CPack to download selected components on-the-fly as part of the installation process.</p> <pre data-language=\"python\">cpack_configure_downloads(site\n                          [UPLOAD_DIRECTORY dirname]\n                          [ALL]\n                          [ADD_REMOVE|NO_ADD_REMOVE])\n</pre> <p>The cpack_configure_downloads command configures installation-time downloads of selected components. For each downloadable component, CPack will create an archive containing the contents of that component, which should be uploaded to the given site. When the user selects that component for installation, the installer will download and extract the component in place. This feature is useful for creating small installers that only download the requested components, saving bandwidth. Additionally, the installers are small enough that they will be installed as part of the normal installation process, and the “Change” button in Windows Add/Remove Programs control panel will allow one to add or remove parts of the application after the original installation. On Windows, the downloaded-components functionality requires the ZipDLL plug-in for NSIS, available at:</p> <pre data-language=\"python\">http://nsis.sourceforge.net/ZipDLL_plug-in\n</pre> <p>On Mac OS X, installers that download components on-the-fly can only be built and installed on system using Mac OS X 10.5 or later.</p> <p>The site argument is a URL where the archives for downloadable components will reside, e.g., <a class=\"reference external\" href=\"https://cmake.org/files/2.6.1/installer/\">https://cmake.org/files/2.6.1/installer/</a> All of the archives produced by CPack should be uploaded to that location.</p> <p>UPLOAD_DIRECTORY is the local directory where CPack will create the various archives for each of the components. The contents of this directory should be uploaded to a location accessible by the URL given in the site argument. If omitted, CPack will use the directory CPackUploads inside the CMake binary directory to store the generated archives.</p> <p>The ALL flag indicates that all components be downloaded. Otherwise, only those components explicitly marked as DOWNLOADED or that have a specified ARCHIVE_FILE will be downloaded. Additionally, the ALL option implies ADD_REMOVE (unless NO_ADD_REMOVE is specified).</p> <p>ADD_REMOVE indicates that CPack should install a copy of the installer that can be called from Windows’ Add/Remove Programs dialog (via the “Modify” button) to change the set of installed components. NO_ADD_REMOVE turns off this behavior. This option is ignored on Mac OS X.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CPackComponent.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CPackComponent.html</a>\n  </p>\n</div>\n","module/checkccompilerflag":"<h1 id=\"module:CheckCCompilerFlag\">CheckCCompilerFlag</h1> <p id=\"checkccompilerflag\">Check whether the C compiler supports a given flag.</p> <p>CHECK_C_COMPILER_FLAG(&lt;flag&gt; &lt;var&gt;)</p> <pre data-language=\"python\">&lt;flag&gt; - the compiler flag\n&lt;var&gt;  - variable to store the result\n         Will be created as an internal cache variable.\n</pre> <p>This internally calls the check_c_source_compiles macro and sets CMAKE_REQUIRED_DEFINITIONS to &lt;flag&gt;. See help for CheckCSourceCompiles for a listing of variables that can otherwise modify the build. The result only tells that the compiler does not give an error message when it encounters the flag. If the flag has any effect or even a specific one is beyond the scope of this module.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckCCompilerFlag.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckCCompilerFlag.html</a>\n  </p>\n</div>\n","module/cpackcygwin":"<h1 id=\"module:CPackCygwin\">CPackCygwin</h1> <p id=\"cpackcygwin\">Cygwin CPack generator (Cygwin).</p>  <h2 id=\"variables-specific-to-cpack-cygwin-generator\">Variables specific to CPack Cygwin generator</h2> <p>The following variable is specific to installers build on and/or for Cygwin:</p> <dl class=\"variable\"> <dt id=\"variable:CPACK_CYGWIN_PATCH_NUMBER\"><code>CPACK_CYGWIN_PATCH_NUMBER</code></dt> <dd>\n<p>The Cygwin patch number. FIXME: This documentation is incomplete.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_CYGWIN_PATCH_FILE\"><code>CPACK_CYGWIN_PATCH_FILE</code></dt> <dd>\n<p>The Cygwin patch file. FIXME: This documentation is incomplete.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_CYGWIN_BUILD_SCRIPT\"><code>CPACK_CYGWIN_BUILD_SCRIPT</code></dt> <dd>\n<p>The Cygwin build script. FIXME: This documentation is incomplete.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CPackCygwin.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CPackCygwin.html</a>\n  </p>\n</div>\n","module/cpackdmg":"<h1 id=\"module:CPackDMG\">CPackDMG</h1> <p id=\"cpackdmg\">DragNDrop CPack generator (Mac OS X).</p>  <h2 id=\"variables-specific-to-cpack-dragndrop-generator\">Variables specific to CPack DragNDrop generator</h2> <p>The following variables are specific to the DragNDrop installers built on Mac OS X:</p> <dl class=\"variable\"> <dt id=\"variable:CPACK_DMG_VOLUME_NAME\"><code>CPACK_DMG_VOLUME_NAME</code></dt> <dd>\n<p>The volume name of the generated disk image. Defaults to CPACK_PACKAGE_FILE_NAME.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DMG_FORMAT\"><code>CPACK_DMG_FORMAT</code></dt> <dd>\n<p>The disk image format. Common values are UDRO (UDIF read-only), UDZO (UDIF zlib-compressed) or UDBZ (UDIF bzip2-compressed). Refer to hdiutil(1) for more information on other available formats.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DMG_DS_STORE\"><code>CPACK_DMG_DS_STORE</code></dt> <dd>\n<p>Path to a custom DS_Store file. This .DS_Store file e.g. can be used to specify the Finder window position/geometry and layout (such as hidden toolbars, placement of the icons etc.). This file has to be generated by the Finder (either manually or through AppleScript) using a normal folder from which the .DS_Store file can then be extracted.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DMG_DS_STORE_SETUP_SCRIPT\"><code>CPACK_DMG_DS_STORE_SETUP_SCRIPT</code></dt> <dd>\n<p>Path to a custom AppleScript file. This AppleScript is used to generate a .DS_Store file which specifies the Finder window position/geometry and layout (such as hidden toolbars, placement of the icons etc.). By specifying a custom AppleScript there is no need to use CPACK_DMG_DS_STORE, as the .DS_Store that is generated by the AppleScript will be packaged.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DMG_BACKGROUND_IMAGE\"><code>CPACK_DMG_BACKGROUND_IMAGE</code></dt> <dd>\n<p>Path to an image file to be used as the background. This file will be copied to .background/background.&lt;ext&gt;, where ext is the original image file extension. The background image is installed into the image before CPACK_DMG_DS_STORE_SETUP_SCRIPT is executed or CPACK_DMG_DS_STORE is installed. By default no background image is set.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DMG_SLA_DIR\"><code>CPACK_DMG_SLA_DIR</code></dt> <dd>\n<p>Directory where license and menu files for different languages are stored. Setting this causes CPack to look for a <code>&lt;language&gt;.menu.txt</code> and <code>&lt;language&gt;.license.txt</code> file for every language defined in <code>CPACK_DMG_SLA_LANGUAGES</code>. If both this variable and <code>CPACK_RESOURCE_FILE_LICENSE</code> are set, CPack will only look for the menu files and use the same license file for all languages.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DMG_SLA_LANGUAGES\"><code>CPACK_DMG_SLA_LANGUAGES</code></dt> <dd>\n<p>Languages for which a license agreement is provided when mounting the generated DMG. A menu file consists of 9 lines of text. The first line is is the name of the language itself, uppercase, in English (e.g. German). The other lines are translations of the following strings:</p> <ul class=\"simple\"> <li>Agree</li> <li>Disagree</li> <li>Print</li> <li>Save...</li> <li>You agree to the terms of the License Agreement when you click the “Agree” button.</li> <li>Software License Agreement</li> <li>This text cannot be saved. The disk may be full or locked, or the file may be locked.</li> <li>Unable to print. Make sure you have selected a printer.</li> </ul> <p>For every language in this list, CPack will try to find files <code>&lt;language&gt;.menu.txt</code> and <code>&lt;language&gt;.license.txt</code> in the directory specified by the <a class=\"reference internal\" href=\"#variable:CPACK_DMG_SLA_DIR\" title=\"CPACK_DMG_SLA_DIR\" id=\"index-0-variable:CPACK_DMG_SLA_DIR\"><code>CPACK_DMG_SLA_DIR</code></a> variable.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_COMMAND_HDIUTIL\"><code>CPACK_COMMAND_HDIUTIL</code></dt> <dd>\n<p>Path to the hdiutil(1) command used to operate on disk image files on Mac OS X. This variable can be used to override the automatically detected command (or specify its location if the auto-detection fails to find it.)</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_COMMAND_SETFILE\"><code>CPACK_COMMAND_SETFILE</code></dt> <dd>\n<p>Path to the SetFile(1) command used to set extended attributes on files and directories on Mac OS X. This variable can be used to override the automatically detected command (or specify its location if the auto-detection fails to find it.)</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_COMMAND_REZ\"><code>CPACK_COMMAND_REZ</code></dt> <dd>\n<p>Path to the Rez(1) command used to compile resources on Mac OS X. This variable can be used to override the automatically detected command (or specify its location if the auto-detection fails to find it.)</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CPackDMG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CPackDMG.html</a>\n  </p>\n</div>\n","module/cpacknsis":"<h1 id=\"module:CPackNSIS\">CPackNSIS</h1> <p id=\"cpacknsis\">CPack NSIS generator specific options</p>  <h2 id=\"variables-specific-to-cpack-nsis-generator\">Variables specific to CPack NSIS generator</h2> <p>The following variables are specific to the graphical installers built on Windows using the Nullsoft Installation System.</p> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_INSTALL_ROOT\"><code>CPACK_NSIS_INSTALL_ROOT</code></dt> <dd>\n<p>The default installation directory presented to the end user by the NSIS installer is under this root dir. The full directory presented to the end user is: ${CPACK_NSIS_INSTALL_ROOT}/${CPACK_PACKAGE_INSTALL_DIRECTORY}</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_MUI_ICON\"><code>CPACK_NSIS_MUI_ICON</code></dt> <dd>\n<p>An icon filename. The name of a <code>*.ico</code> file used as the main icon for the generated install program.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_MUI_UNIICON\"><code>CPACK_NSIS_MUI_UNIICON</code></dt> <dd>\n<p>An icon filename. The name of a <code>*.ico</code> file used as the main icon for the generated uninstall program.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_INSTALLER_MUI_ICON_CODE\"><code>CPACK_NSIS_INSTALLER_MUI_ICON_CODE</code></dt> <dd>\n<p>undocumented.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_MUI_WELCOMEFINISHPAGE_BITMAP\"><code>CPACK_NSIS_MUI_WELCOMEFINISHPAGE_BITMAP</code></dt> <dd>\n<p>The filename of a bitmap to use as the NSIS MUI_WELCOMEFINISHPAGE_BITMAP.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_MUI_UNWELCOMEFINISHPAGE_BITMAP\"><code>CPACK_NSIS_MUI_UNWELCOMEFINISHPAGE_BITMAP</code></dt> <dd>\n<p>The filename of a bitmap to use as the NSIS MUI_UNWELCOMEFINISHPAGE_BITMAP.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS\"><code>CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS</code></dt> <dd>\n<p>Extra NSIS commands that will be added to the beginning of the install Section, before your install tree is available on the target system.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_EXTRA_INSTALL_COMMANDS\"><code>CPACK_NSIS_EXTRA_INSTALL_COMMANDS</code></dt> <dd>\n<p>Extra NSIS commands that will be added to the end of the install Section, after your install tree is available on the target system.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS\"><code>CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS</code></dt> <dd>\n<p>Extra NSIS commands that will be added to the uninstall Section, before your install tree is removed from the target system.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_COMPRESSOR\"><code>CPACK_NSIS_COMPRESSOR</code></dt> <dd>\n<p>The arguments that will be passed to the NSIS SetCompressor command.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL\"><code>CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL</code></dt> <dd>\n<p>Ask about uninstalling previous versions first. If this is set to “ON”, then an installer will look for previous installed versions and if one is found, ask the user whether to uninstall it before proceeding with the install.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_MODIFY_PATH\"><code>CPACK_NSIS_MODIFY_PATH</code></dt> <dd>\n<p>Modify PATH toggle. If this is set to “ON”, then an extra page will appear in the installer that will allow the user to choose whether the program directory should be added to the system PATH variable.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_DISPLAY_NAME\"><code>CPACK_NSIS_DISPLAY_NAME</code></dt> <dd>\n<p>The display name string that appears in the Windows Add/Remove Program control panel</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_PACKAGE_NAME\"><code>CPACK_NSIS_PACKAGE_NAME</code></dt> <dd>\n<p>The title displayed at the top of the installer.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_INSTALLED_ICON_NAME\"><code>CPACK_NSIS_INSTALLED_ICON_NAME</code></dt> <dd>\n<p>A path to the executable that contains the installer icon.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_HELP_LINK\"><code>CPACK_NSIS_HELP_LINK</code></dt> <dd>\n<p>URL to a web site providing assistance in installing your application.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_URL_INFO_ABOUT\"><code>CPACK_NSIS_URL_INFO_ABOUT</code></dt> <dd>\n<p>URL to a web site providing more information about your application.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_CONTACT\"><code>CPACK_NSIS_CONTACT</code></dt> <dd>\n<p>Contact information for questions and comments about the installation process.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_CREATE_ICONS_EXTRA\"><code>CPACK_NSIS_CREATE_ICONS_EXTRA</code></dt> <dd>\n<p>Additional NSIS commands for creating start menu shortcuts.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_DELETE_ICONS_EXTRA\"><code>CPACK_NSIS_DELETE_ICONS_EXTRA</code></dt> <dd>\n<p>Additional NSIS commands to uninstall start menu shortcuts.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_EXECUTABLES_DIRECTORY\"><code>CPACK_NSIS_EXECUTABLES_DIRECTORY</code></dt> <dd>\n<p>Creating NSIS start menu links assumes that they are in ‘bin’ unless this variable is set. For example, you would set this to ‘exec’ if your executables are in an exec directory.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_MUI_FINISHPAGE_RUN\"><code>CPACK_NSIS_MUI_FINISHPAGE_RUN</code></dt> <dd>\n<p>Specify an executable to add an option to run on the finish page of the NSIS installer.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_NSIS_MENU_LINKS\"><code>CPACK_NSIS_MENU_LINKS</code></dt> <dd>\n<p>Specify links in [application] menu. This should contain a list of pair “link” “link name”. The link may be an URL or a path relative to installation prefix. Like:</p> <pre data-language=\"python\">set(CPACK_NSIS_MENU_LINKS\n    \"doc/cmake-@CMake_VERSION_MAJOR@.@CMake_VERSION_MINOR@/cmake.html\"\n    \"CMake Help\" \"https://cmake.org\" \"CMake Web Site\")\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CPackNSIS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CPackNSIS.html</a>\n  </p>\n</div>\n","module/cpackpackagemaker":"<h1 id=\"module:CPackPackageMaker\">CPackPackageMaker</h1> <p id=\"cpackpackagemaker\">PackageMaker CPack generator (Mac OS X).</p>  <h2 id=\"variables-specific-to-cpack-packagemaker-generator\">Variables specific to CPack PackageMaker generator</h2> <p>The following variable is specific to installers built on Mac OS X using PackageMaker:</p> <dl class=\"variable\"> <dt id=\"variable:CPACK_OSX_PACKAGE_VERSION\"><code>CPACK_OSX_PACKAGE_VERSION</code></dt> <dd>\n<p>The version of Mac OS X that the resulting PackageMaker archive should be compatible with. Different versions of Mac OS X support different features. For example, CPack can only build component-based installers for Mac OS X 10.4 or newer, and can only build installers that download component son-the-fly for Mac OS X 10.5 or newer. If left blank, this value will be set to the minimum version of Mac OS X that supports the requested features. Set this variable to some value (e.g., 10.4) only if you want to guarantee that your installer will work on that version of Mac OS X, and don’t mind missing extra features available in the installer shipping with later versions of Mac OS X.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CPackPackageMaker.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CPackPackageMaker.html</a>\n  </p>\n</div>\n","module/cpackdeb":"<h1 id=\"module:CPackDeb\">CPackDeb</h1> <p id=\"cpackdeb\">The builtin (binary) CPack Deb generator (Unix only)</p>  <h2 id=\"variables-specific-to-cpack-debian-deb-generator\">Variables specific to CPack Debian (DEB) generator</h2> <p>CPackDeb may be used to create Deb package using CPack. CPackDeb is a CPack generator thus it uses the <code>CPACK_XXX</code> variables used by CPack : <a class=\"reference external\" href=\"https://cmake.org/Wiki/CMake:CPackConfiguration\">https://cmake.org/Wiki/CMake:CPackConfiguration</a>. CPackDeb generator should work on any linux host but it will produce better deb package when Debian specific tools ‘dpkg-xxx’ are usable on the build system.</p> <p>CPackDeb has specific features which are controlled by the specifics <code>CPACK_DEBIAN_XXX</code> variables.</p> <p><code>CPACK_DEBIAN_&lt;COMPONENT&gt;_XXXX</code> variables may be used in order to have <strong>component</strong> specific values. Note however that <code>&lt;COMPONENT&gt;</code> refers to the <strong>grouping name</strong> written in upper case. It may be either a component name or a component GROUP name.</p> <p>You’ll find a detailed usage on the wiki: <a class=\"reference external\" href=\"https://cmake.org/Wiki/CMake:CPackPackageGenerators#DEB_.28UNIX_only.29\">https://cmake.org/Wiki/CMake:CPackPackageGenerators#DEB_.28UNIX_only.29</a> . However as a handy reminder here comes the list of specific variables:</p> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_NAME\"><code>CPACK_DEBIAN_PACKAGE_NAME</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_NAME\"><code>CPACK_DEBIAN_<component>_PACKAGE_NAME</component></code></dt> <dd>\n<p>Set Package control field (variable is automatically transformed to lower case).</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default :<ul> <li>\n<a class=\"reference internal\" href=\"cpack#variable:CPACK_PACKAGE_NAME\" title=\"CPACK_PACKAGE_NAME\" id=\"index-0-variable:CPACK_PACKAGE_NAME\"><code>CPACK_PACKAGE_NAME</code></a> for non-component based installations</li> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_NAME\" title=\"CPACK_DEBIAN_PACKAGE_NAME\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_NAME\"><code>CPACK_DEBIAN_PACKAGE_NAME</code></a> suffixed with -&lt;COMPONENT&gt; for component-based installations.</li> </ul> </li> </ul> <p>See <a class=\"reference external\" href=\"https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Source\">https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Source</a></p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_VERSION\"><code>CPACK_DEBIAN_PACKAGE_VERSION</code></dt> <dd>\n<p>The Debian package version</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : <a class=\"reference internal\" href=\"cpack#variable:CPACK_PACKAGE_VERSION\" title=\"CPACK_PACKAGE_VERSION\" id=\"index-0-variable:CPACK_PACKAGE_VERSION\"><code>CPACK_PACKAGE_VERSION</code></a>\n</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_ARCHITECTURE\"><code>CPACK_DEBIAN_PACKAGE_ARCHITECTURE</code></dt> <dd>\n<p>The Debian package architecture</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : Output of <code>dpkg --print-architecture</code> (or <code>i386</code> if <code>dpkg</code> is not found)</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_DEPENDS\"><code>CPACK_DEBIAN_PACKAGE_DEPENDS</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_DEPENDS\"><code>CPACK_DEBIAN_<component>_PACKAGE_DEPENDS</component></code></dt> <dd>\n<p>Sets the Debian dependencies of this package.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default :<ul> <li>An empty string for non-component based installations</li> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_DEPENDS\" title=\"CPACK_DEBIAN_PACKAGE_DEPENDS\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_DEPENDS\"><code>CPACK_DEBIAN_PACKAGE_DEPENDS</code></a> for component-based installations.</li> </ul> </li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If <a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_SHLIBDEPS\" title=\"CPACK_DEBIAN_PACKAGE_SHLIBDEPS\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_SHLIBDEPS\"><code>CPACK_DEBIAN_PACKAGE_SHLIBDEPS</code></a> or more specifically <a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_SHLIBDEPS\" title=\"CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_SHLIBDEPS\" id=\"index-0-variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_SHLIBDEPS\"><code>CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_SHLIBDEPS</code></a> is set for this component, the discovered dependencies will be appended to <a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_DEPENDS\" title=\"CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_DEPENDS\" id=\"index-0-variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_DEPENDS\"><code>CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_DEPENDS</code></a> instead of <a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_DEPENDS\" title=\"CPACK_DEBIAN_PACKAGE_DEPENDS\" id=\"index-1-variable:CPACK_DEBIAN_PACKAGE_DEPENDS\"><code>CPACK_DEBIAN_PACKAGE_DEPENDS</code></a>. If <a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_DEPENDS\" title=\"CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_DEPENDS\" id=\"index-1-variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_DEPENDS\"><code>CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_DEPENDS</code></a> is an empty string, only the automatically discovered dependencies will be set for this component.</p> </div> <p>Example:</p> <pre data-language=\"python\">set(CPACK_DEBIAN_PACKAGE_DEPENDS \"libc6 (&gt;= 2.3.1-6), libc6 (&lt; 2.4)\")\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_MAINTAINER\"><code>CPACK_DEBIAN_PACKAGE_MAINTAINER</code></dt> <dd>\n<p>The Debian package maintainer</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : <code>CPACK_PACKAGE_CONTACT</code>\n</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_DESCRIPTION\"><code>CPACK_DEBIAN_PACKAGE_DESCRIPTION</code></dt> <dt id=\"variable:CPACK_COMPONENT_&lt;COMPONENT&gt;_DESCRIPTION\"><code>CPACK_COMPONENT_<component>_DESCRIPTION</component></code></dt> <dd>\n<p>The Debian package description</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default :<ul> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_DESCRIPTION\" title=\"CPACK_DEBIAN_PACKAGE_DESCRIPTION\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_DESCRIPTION\"><code>CPACK_DEBIAN_PACKAGE_DESCRIPTION</code></a> if set or</li> <li><a class=\"reference internal\" href=\"cpack#variable:CPACK_PACKAGE_DESCRIPTION_SUMMARY\" title=\"CPACK_PACKAGE_DESCRIPTION_SUMMARY\" id=\"index-0-variable:CPACK_PACKAGE_DESCRIPTION_SUMMARY\"><code>CPACK_PACKAGE_DESCRIPTION_SUMMARY</code></a></li> </ul> </li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_SECTION\"><code>CPACK_DEBIAN_PACKAGE_SECTION</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_SECTION\"><code>CPACK_DEBIAN_<component>_PACKAGE_SECTION</component></code></dt> <dd>\n<p>Set Section control field e.g. admin, devel, doc, ...</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : ‘devel’</li> </ul> <p>See <a class=\"reference external\" href=\"https://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections\">https://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections</a></p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_COMPRESSION_TYPE\"><code>CPACK_DEBIAN_COMPRESSION_TYPE</code></dt> <dd>\n<p>The compression used for creating the Debian package. Possible values are: lzma, xz, bzip2 and gzip.</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : ‘gzip’</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_PRIORITY\"><code>CPACK_DEBIAN_PACKAGE_PRIORITY</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_PRIORITY\"><code>CPACK_DEBIAN_<component>_PACKAGE_PRIORITY</component></code></dt> <dd>\n<p>Set Priority control field e.g. required, important, standard, optional, extra</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : ‘optional’</li> </ul> <p>See <a class=\"reference external\" href=\"https://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities\">https://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities</a></p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_HOMEPAGE\"><code>CPACK_DEBIAN_PACKAGE_HOMEPAGE</code></dt> <dd>\n<p>The URL of the web site for this package, preferably (when applicable) the site from which the original source can be obtained and any additional upstream documentation or information may be found.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The content of this field is a simple URL without any surrounding characters such as &lt;&gt;.</p> </div> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_SHLIBDEPS\"><code>CPACK_DEBIAN_PACKAGE_SHLIBDEPS</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_SHLIBDEPS\"><code>CPACK_DEBIAN_<component>_PACKAGE_SHLIBDEPS</component></code></dt> <dd>\n<p>May be set to ON in order to use <code>dpkg-shlibdeps</code> to generate better package dependency list.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default :<ul> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_SHLIBDEPS\" title=\"CPACK_DEBIAN_PACKAGE_SHLIBDEPS\" id=\"index-1-variable:CPACK_DEBIAN_PACKAGE_SHLIBDEPS\"><code>CPACK_DEBIAN_PACKAGE_SHLIBDEPS</code></a> if set or</li> <li>OFF</li> </ul> </li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">You may need set <a class=\"reference internal\" href=\"../variable/cmake_install_rpath#variable:CMAKE_INSTALL_RPATH\" title=\"CMAKE_INSTALL_RPATH\" id=\"index-0-variable:CMAKE_INSTALL_RPATH\"><code>CMAKE_INSTALL_RPATH</code></a> to an appropriate value if you use this feature, because if you don’t <code>dpkg-shlibdeps</code> may fail to find your own shared libs. See <a class=\"reference external\" href=\"https://cmake.org/Wiki/CMake_RPATH_handling\">https://cmake.org/Wiki/CMake_RPATH_handling</a>.</p> </div> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_DEBUG\"><code>CPACK_DEBIAN_PACKAGE_DEBUG</code></dt> <dd>\n<p>May be set when invoking cpack in order to trace debug information during CPackDeb run.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_PREDEPENDS\"><code>CPACK_DEBIAN_PACKAGE_PREDEPENDS</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_PREDEPENDS\"><code>CPACK_DEBIAN_<component>_PACKAGE_PREDEPENDS</component></code></dt> <dd>\n<p>Sets the <cite>Pre-Depends</cite> field of the Debian package. Like <a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_DEPENDS\" title=\"CPACK_DEBIAN_PACKAGE_DEPENDS\" id=\"index-2-variable:CPACK_DEBIAN_PACKAGE_DEPENDS\"><code>Depends</code></a>, except that it also forces <code>dpkg</code> to complete installation of the packages named before even starting the installation of the package which declares the pre-dependency.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default :<ul> <li>An empty string for non-component based installations</li> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_PREDEPENDS\" title=\"CPACK_DEBIAN_PACKAGE_PREDEPENDS\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_PREDEPENDS\"><code>CPACK_DEBIAN_PACKAGE_PREDEPENDS</code></a> for component-based installations.</li> </ul> </li> </ul> <p>See <a class=\"reference external\" href=\"http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps\">http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps</a></p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_ENHANCES\"><code>CPACK_DEBIAN_PACKAGE_ENHANCES</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_ENHANCES\"><code>CPACK_DEBIAN_<component>_PACKAGE_ENHANCES</component></code></dt> <dd>\n<p>Sets the <cite>Enhances</cite> field of the Debian package. Similar to <a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_SUGGESTS\" title=\"CPACK_DEBIAN_PACKAGE_SUGGESTS\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_SUGGESTS\"><code>Suggests</code></a> but works in the opposite direction: declares that a package can enhance the functionality of another package.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default :<ul> <li>An empty string for non-component based installations</li> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_ENHANCES\" title=\"CPACK_DEBIAN_PACKAGE_ENHANCES\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_ENHANCES\"><code>CPACK_DEBIAN_PACKAGE_ENHANCES</code></a> for component-based installations.</li> </ul> </li> </ul> <p>See <a class=\"reference external\" href=\"http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps\">http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps</a></p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_BREAKS\"><code>CPACK_DEBIAN_PACKAGE_BREAKS</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_BREAKS\"><code>CPACK_DEBIAN_<component>_PACKAGE_BREAKS</component></code></dt> <dd>\n<p>Sets the <cite>Breaks</cite> field of the Debian package. When a binary package (P) declares that it breaks other packages (B), <code>dpkg</code> will not allow the package (P) which declares <cite>Breaks</cite> be <strong>unpacked</strong> unless the packages that will be broken (B) are deconfigured first. As long as the package (P) is configured, the previously deconfigured packages (B) cannot be reconfigured again.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default :<ul> <li>An empty string for non-component based installations</li> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_BREAKS\" title=\"CPACK_DEBIAN_PACKAGE_BREAKS\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_BREAKS\"><code>CPACK_DEBIAN_PACKAGE_BREAKS</code></a> for component-based installations.</li> </ul> </li> </ul> <p>See <a class=\"reference external\" href=\"https://www.debian.org/doc/debian-policy/ch-relationships.html#s-breaks\">https://www.debian.org/doc/debian-policy/ch-relationships.html#s-breaks</a></p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_CONFLICTS\"><code>CPACK_DEBIAN_PACKAGE_CONFLICTS</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_CONFLICTS\"><code>CPACK_DEBIAN_<component>_PACKAGE_CONFLICTS</component></code></dt> <dd>\n<p>Sets the <cite>Conflicts</cite> field of the Debian package. When one binary package declares a conflict with another using a <cite>Conflicts</cite> field, <code>dpkg</code> will not allow them to be unpacked on the system at the same time.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default :<ul> <li>An empty string for non-component based installations</li> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_CONFLICTS\" title=\"CPACK_DEBIAN_PACKAGE_CONFLICTS\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_CONFLICTS\"><code>CPACK_DEBIAN_PACKAGE_CONFLICTS</code></a> for component-based installations.</li> </ul> </li> </ul> <p>See <a class=\"reference external\" href=\"https://www.debian.org/doc/debian-policy/ch-relationships.html#s-conflicts\">https://www.debian.org/doc/debian-policy/ch-relationships.html#s-conflicts</a></p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a stronger restriction than <a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_BREAKS\" title=\"CPACK_DEBIAN_PACKAGE_BREAKS\" id=\"index-1-variable:CPACK_DEBIAN_PACKAGE_BREAKS\"><code>Breaks</code></a>, which prevents the broken package from being configured while the breaking package is in the “Unpacked” state but allows both packages to be unpacked at the same time.</p> </div> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_PROVIDES\"><code>CPACK_DEBIAN_PACKAGE_PROVIDES</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_PROVIDES\"><code>CPACK_DEBIAN_<component>_PACKAGE_PROVIDES</component></code></dt> <dd>\n<p>Sets the <cite>Provides</cite> field of the Debian package. A virtual package is one which appears in the <cite>Provides</cite> control field of another package.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default :<ul> <li>An empty string for non-component based installations</li> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_PROVIDES\" title=\"CPACK_DEBIAN_PACKAGE_PROVIDES\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_PROVIDES\"><code>CPACK_DEBIAN_PACKAGE_PROVIDES</code></a> for component-based installations.</li> </ul> </li> </ul> <p>See <a class=\"reference external\" href=\"https://www.debian.org/doc/debian-policy/ch-relationships.html#s-virtual\">https://www.debian.org/doc/debian-policy/ch-relationships.html#s-virtual</a></p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_REPLACES\"><code>CPACK_DEBIAN_PACKAGE_REPLACES</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_REPLACES\"><code>CPACK_DEBIAN_<component>_PACKAGE_REPLACES</component></code></dt> <dd>\n<p>Sets the <cite>Replaces</cite> field of the Debian package. Packages can declare in their control file that they should overwrite files in certain other packages, or completely replace other packages.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default :<ul> <li>An empty string for non-component based installations</li> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_REPLACES\" title=\"CPACK_DEBIAN_PACKAGE_REPLACES\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_REPLACES\"><code>CPACK_DEBIAN_PACKAGE_REPLACES</code></a> for component-based installations.</li> </ul> </li> </ul> <p>See <a class=\"reference external\" href=\"http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps\">http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps</a></p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_RECOMMENDS\"><code>CPACK_DEBIAN_PACKAGE_RECOMMENDS</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_RECOMMENDS\"><code>CPACK_DEBIAN_<component>_PACKAGE_RECOMMENDS</component></code></dt> <dd>\n<p>Sets the <cite>Recommends</cite> field of the Debian package. Allows packages to declare a strong, but not absolute, dependency on other packages.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default :<ul> <li>An empty string for non-component based installations</li> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_RECOMMENDS\" title=\"CPACK_DEBIAN_PACKAGE_RECOMMENDS\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_RECOMMENDS\"><code>CPACK_DEBIAN_PACKAGE_RECOMMENDS</code></a> for component-based installations.</li> </ul> </li> </ul> <p>See <a class=\"reference external\" href=\"http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps\">http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps</a></p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_SUGGESTS\"><code>CPACK_DEBIAN_PACKAGE_SUGGESTS</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_SUGGESTS\"><code>CPACK_DEBIAN_<component>_PACKAGE_SUGGESTS</component></code></dt> <dd>\n<p>Sets the <cite>Suggests</cite> field of the Debian package. Allows packages to declare a suggested package install grouping.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default :<ul> <li>An empty string for non-component based installations</li> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_SUGGESTS\" title=\"CPACK_DEBIAN_PACKAGE_SUGGESTS\" id=\"index-1-variable:CPACK_DEBIAN_PACKAGE_SUGGESTS\"><code>CPACK_DEBIAN_PACKAGE_SUGGESTS</code></a> for component-based installations.</li> </ul> </li> </ul> <p>See <a class=\"reference external\" href=\"http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps\">http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps</a></p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA\"><code>CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_CONTROL_EXTRA\"><code>CPACK_DEBIAN_<component>_PACKAGE_CONTROL_EXTRA</component></code></dt> <dd>\n<p>This variable allow advanced user to add custom script to the control.tar.gz. Typical usage is for conffiles, postinst, postrm, prerm.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>Usage:</p> <pre data-language=\"python\">set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA\n    \"${CMAKE_CURRENT_SOURCE_DIR/prerm;${CMAKE_CURRENT_SOURCE_DIR}/postrm\")\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The original permissions of the files will be used in the final package unless the variable <a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION\" title=\"CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION\"><code>CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION</code></a> is set. In particular, the scripts should have the proper executable flag prior to the generation of the package.</p> </div> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION\"><code>CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_CONTROL_STRICT_PERMISSION\"><code>CPACK_DEBIAN_<component>_PACKAGE_CONTROL_STRICT_PERMISSION</component></code></dt> <dd>\n<p>This variable indicates if the Debian policy on control files should be strictly followed.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : FALSE</li> </ul> <p>Usage:</p> <pre data-language=\"python\">set(CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION TRUE)\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This overrides the permissions on the original files, following the rules set by Debian policy <a class=\"reference external\" href=\"https://www.debian.org/doc/debian-policy/ch-files.html#s-permissions-owners\">https://www.debian.org/doc/debian-policy/ch-files.html#s-permissions-owners</a></p> </div> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_DEBIAN_PACKAGE_SOURCE\"><code>CPACK_DEBIAN_PACKAGE_SOURCE</code></dt> <dt id=\"variable:CPACK_DEBIAN_&lt;COMPONENT&gt;_PACKAGE_SOURCE\"><code>CPACK_DEBIAN_<component>_PACKAGE_SOURCE</component></code></dt> <dd>\n<p>Sets the <code>Source</code> field of the binary Debian package. When the binary package name is not the same as the source package name (in particular when several components/binaries are generated from one source) the source from which the binary has been generated should be indicated with the field <code>Source</code>.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default :<ul> <li>An empty string for non-component based installations</li> <li>\n<a class=\"reference internal\" href=\"#variable:CPACK_DEBIAN_PACKAGE_SOURCE\" title=\"CPACK_DEBIAN_PACKAGE_SOURCE\" id=\"index-0-variable:CPACK_DEBIAN_PACKAGE_SOURCE\"><code>CPACK_DEBIAN_PACKAGE_SOURCE</code></a> for component-based installations.</li> </ul> </li> </ul> <p>See <a class=\"reference external\" href=\"https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Source\">https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Source</a></p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This value is not interpreted. It is possible to pass an optional revision number of the referenced source package as well.</p> </div> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CPackDeb.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CPackDeb.html</a>\n  </p>\n</div>\n","module/cpackifw":"<h1 id=\"module:CPackIFW\">CPackIFW</h1> <p id=\"cpackifw\">This module looks for the location of the command line utilities supplied with the Qt Installer Framework (<a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/index.html\">QtIFW</a>).</p> <p>The module also defines several commands to control the behavior of the CPack <code>IFW</code> generator.</p>  <h2 id=\"overview\">Overview</h2> <p>CPack <code>IFW</code> generator helps you to create online and offline binary cross-platform installers with a graphical user interface.</p> <p>CPack IFW generator prepares project installation and generates configuration and meta information for <a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/index.html\">QtIFW</a> tools.</p> <p>The <a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/index.html\">QtIFW</a> provides a set of tools and utilities to create installers for the supported desktop Qt platforms: Linux, Microsoft Windows, and Mac OS X.</p> <p>You should also install <a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/index.html\">QtIFW</a> to use CPack <code>IFW</code> generator. If you don’t use a default path for the installation, please set the used path in the variable <code>QTIFWDIR</code>.</p>   <h2 id=\"variables\">Variables</h2> <p>You can use the following variables to change behavior of CPack <code>IFW</code> generator.</p>  <h3 id=\"debug\">Debug</h3> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_VERBOSE\"><code>CPACK_IFW_VERBOSE</code></dt> <dd>\n<p>Set to <code>ON</code> to enable addition debug output. By default is <code>OFF</code>.</p> </dd>\n</dl>   <h3 id=\"package\">Package</h3> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_TITLE\"><code>CPACK_IFW_PACKAGE_TITLE</code></dt> <dd>\n<p>Name of the installer as displayed on the title bar. By default used <a class=\"reference internal\" href=\"cpack#variable:CPACK_PACKAGE_DESCRIPTION_SUMMARY\" title=\"CPACK_PACKAGE_DESCRIPTION_SUMMARY\" id=\"index-0-variable:CPACK_PACKAGE_DESCRIPTION_SUMMARY\"><code>CPACK_PACKAGE_DESCRIPTION_SUMMARY</code></a>.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_PUBLISHER\"><code>CPACK_IFW_PACKAGE_PUBLISHER</code></dt> <dd>\n<p>Publisher of the software (as shown in the Windows Control Panel). By default used <a class=\"reference internal\" href=\"cpack#variable:CPACK_PACKAGE_VENDOR\" title=\"CPACK_PACKAGE_VENDOR\" id=\"index-0-variable:CPACK_PACKAGE_VENDOR\"><code>CPACK_PACKAGE_VENDOR</code></a>.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PRODUCT_URL\"><code>CPACK_IFW_PRODUCT_URL</code></dt> <dd>\n<p>URL to a page that contains product information on your web site.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_ICON\"><code>CPACK_IFW_PACKAGE_ICON</code></dt> <dd>\n<p>Filename for a custom installer icon. The actual file is ‘.icns’ (Mac OS X), ‘.ico’ (Windows). No functionality on Unix.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_WINDOW_ICON\"><code>CPACK_IFW_PACKAGE_WINDOW_ICON</code></dt> <dd>\n<p>Filename for a custom window icon in PNG format for the Installer application.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_LOGO\"><code>CPACK_IFW_PACKAGE_LOGO</code></dt> <dd>\n<p>Filename for a logo is used as QWizard::LogoPixmap.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_START_MENU_DIRECTORY\"><code>CPACK_IFW_PACKAGE_START_MENU_DIRECTORY</code></dt> <dd>\n<p>Name of the default program group for the product in the Windows Start menu.</p> <p>By default used <a class=\"reference internal\" href=\"#variable:CPACK_IFW_PACKAGE_NAME\" title=\"CPACK_IFW_PACKAGE_NAME\" id=\"index-0-variable:CPACK_IFW_PACKAGE_NAME\"><code>CPACK_IFW_PACKAGE_NAME</code></a>.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_TARGET_DIRECTORY\"><code>CPACK_IFW_TARGET_DIRECTORY</code></dt> <dd>\n<p>Default target directory for installation. By default used “@ApplicationsDir@/<a class=\"reference internal\" href=\"cpack#variable:CPACK_PACKAGE_INSTALL_DIRECTORY\" title=\"CPACK_PACKAGE_INSTALL_DIRECTORY\" id=\"index-0-variable:CPACK_PACKAGE_INSTALL_DIRECTORY\"><code>CPACK_PACKAGE_INSTALL_DIRECTORY</code></a>“</p> <p>You can use predefined variables.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_ADMIN_TARGET_DIRECTORY\"><code>CPACK_IFW_ADMIN_TARGET_DIRECTORY</code></dt> <dd>\n<p>Default target directory for installation with administrator rights.</p> <p>You can use predefined variables.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_GROUP\"><code>CPACK_IFW_PACKAGE_GROUP</code></dt> <dd>\n<p>The group, which will be used to configure the root package</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_NAME\"><code>CPACK_IFW_PACKAGE_NAME</code></dt> <dd>\n<p>The root package name, which will be used if configuration group is not specified</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_NAME\"><code>CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_NAME</code></dt> <dd>\n<p>Filename of the generated maintenance tool. The platform-specific executable file extension is appended.</p> <p>By default used <a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/index.html\">QtIFW</a> defaults (<code>maintenancetool</code>).</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_INI_FILE\"><code>CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_INI_FILE</code></dt> <dd>\n<p>Filename for the configuration of the generated maintenance tool.</p> <p>By default used <a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/index.html\">QtIFW</a> defaults (<code>maintenancetool.ini</code>).</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_ALLOW_NON_ASCII_CHARACTERS\"><code>CPACK_IFW_PACKAGE_ALLOW_NON_ASCII_CHARACTERS</code></dt> <dd>\n<p>Set to <code>ON</code> if the installation path can contain non-ASCII characters.</p> <p>Is <code>ON</code> for <a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/index.html\">QtIFW</a> less 2.0 tools.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_ALLOW_SPACE_IN_PATH\"><code>CPACK_IFW_PACKAGE_ALLOW_SPACE_IN_PATH</code></dt> <dd>\n<p>Set to <code>OFF</code> if the installation path cannot contain space characters.</p> <p>Is <code>ON</code> for <a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/index.html\">QtIFW</a> less 2.0 tools.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGE_CONTROL_SCRIPT\"><code>CPACK_IFW_PACKAGE_CONTROL_SCRIPT</code></dt> <dd>\n<p>Filename for a custom installer control script.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_REPOSITORIES_ALL\"><code>CPACK_IFW_REPOSITORIES_ALL</code></dt> <dd>\n<p>The list of remote repositories.</p> <p>The default value of this variable is computed by CPack and contains all repositories added with command <a class=\"reference internal\" href=\"#command:cpack_ifw_add_repository\" title=\"cpack_ifw_add_repository\" id=\"index-0-command:cpack_ifw_add_repository\"><code>cpack_ifw_add_repository()</code></a></p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_DOWNLOAD_ALL\"><code>CPACK_IFW_DOWNLOAD_ALL</code></dt> <dd>\n<p>If this is <code>ON</code> all components will be downloaded. By default is <code>OFF</code> or used value from <code>CPACK_DOWNLOAD_ALL</code> if set</p> </dd>\n</dl>   <h3 id=\"components\">Components</h3> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_RESOLVE_DUPLICATE_NAMES\"><code>CPACK_IFW_RESOLVE_DUPLICATE_NAMES</code></dt> <dd>\n<p>Resolve duplicate names when installing components with groups.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_PACKAGES_DIRECTORIES\"><code>CPACK_IFW_PACKAGES_DIRECTORIES</code></dt> <dd>\n<p>Additional prepared packages dirs that will be used to resolve dependent components.</p> </dd>\n</dl>   <h3 id=\"tools\">Tools</h3> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_FRAMEWORK_VERSION\"><code>CPACK_IFW_FRAMEWORK_VERSION</code></dt> <dd>\n<p>The version of used <a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/index.html\">QtIFW</a> tools.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_BINARYCREATOR_EXECUTABLE\"><code>CPACK_IFW_BINARYCREATOR_EXECUTABLE</code></dt> <dd>\n<p>The path to “binarycreator” command line client.</p> <p>This variable is cached and can be configured user if need.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_IFW_REPOGEN_EXECUTABLE\"><code>CPACK_IFW_REPOGEN_EXECUTABLE</code></dt> <dd>\n<p>The path to “repogen” command line client.</p> <p>This variable is cached and can be configured user if need.</p> </dd>\n</dl>    <h2 id=\"commands\">Commands</h2> <p>The module defines the following commands:</p>  <dl class=\"command\"> <dt id=\"command:cpack_ifw_configure_component\"><code>cpack_ifw_configure_component</code></dt> \n</dl> <p>Sets the arguments specific to the CPack IFW generator.</p> <pre data-language=\"python\">cpack_ifw_configure_component(&lt;compname&gt; [COMMON]\n                    [NAME &lt;name&gt;]\n                    [VERSION &lt;version&gt;]\n                    [SCRIPT &lt;script&gt;]\n                    [PRIORITY &lt;priority&gt;]\n                    [DEPENDS &lt;com_id&gt; ...]\n                    [LICENSES &lt;display_name&gt; &lt;file_path&gt; ...])\n</pre> <p>This command should be called after cpack_add_component command.</p> <p><code>COMMON</code> if set, then the component will be packaged and installed as part of a group to which it belongs.</p> <p><code>VERSION</code> is version of component. By default used <a class=\"reference internal\" href=\"cpack#variable:CPACK_PACKAGE_VERSION\" title=\"CPACK_PACKAGE_VERSION\" id=\"index-0-variable:CPACK_PACKAGE_VERSION\"><code>CPACK_PACKAGE_VERSION</code></a>.</p> <p><code>SCRIPT</code> is a relative or absolute path to operations script for this component.</p> <p><code>NAME</code> is used to create domain-like identification for this component. By default used origin component name.</p> <p><code>PRIORITY</code> is priority of the component in the tree.</p> <p><code>DEPENDS</code> list of dependency component identifiers in <a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/index.html\">QtIFW</a> style.</p> <p><code>LICENSES</code> pair of &lt;display_name&gt; and &lt;file_path&gt; of license text for this component. You can specify more then one license.</p>  <dl class=\"command\"> <dt id=\"command:cpack_ifw_configure_component_group\"><code>cpack_ifw_configure_component_group</code></dt> \n</dl> <p>Sets the arguments specific to the CPack IFW generator.</p> <pre data-language=\"python\">cpack_ifw_configure_component_group(&lt;grpname&gt;\n                    [VERSION &lt;version&gt;]\n                    [NAME &lt;name&gt;]\n                    [SCRIPT &lt;script&gt;]\n                    [PRIORITY &lt;priority&gt;]\n                    [LICENSES &lt;display_name&gt; &lt;file_path&gt; ...])\n</pre> <p>This command should be called after cpack_add_component_group command.</p> <p><code>VERSION</code> is version of component group. By default used <a class=\"reference internal\" href=\"cpack#variable:CPACK_PACKAGE_VERSION\" title=\"CPACK_PACKAGE_VERSION\" id=\"index-1-variable:CPACK_PACKAGE_VERSION\"><code>CPACK_PACKAGE_VERSION</code></a>.</p> <p><code>NAME</code> is used to create domain-like identification for this component group. By default used origin component group name.</p> <p><code>SCRIPT</code> is a relative or absolute path to operations script for this component group.</p> <p><code>PRIORITY</code> is priority of the component group in the tree.</p> <p><code>LICENSES</code> pair of &lt;display_name&gt; and &lt;file_path&gt; of license text for this component group. You can specify more then one license.</p>  <dl class=\"command\"> <dt id=\"command:cpack_ifw_add_repository\"><code>cpack_ifw_add_repository</code></dt> \n</dl> <p>Add <a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/index.html\">QtIFW</a> specific remote repository.</p> <pre data-language=\"python\">cpack_ifw_add_repository(&lt;reponame&gt; [DISABLED]\n                    URL &lt;url&gt;\n                    [USERNAME &lt;username&gt;]\n                    [PASSWORD &lt;password&gt;]\n                    [DISPLAY_NAME &lt;display_name&gt;])\n</pre> <p>This macro will also add the &lt;reponame&gt; repository to a variable <a class=\"reference internal\" href=\"#variable:CPACK_IFW_REPOSITORIES_ALL\" title=\"CPACK_IFW_REPOSITORIES_ALL\" id=\"index-0-variable:CPACK_IFW_REPOSITORIES_ALL\"><code>CPACK_IFW_REPOSITORIES_ALL</code></a></p> <p><code>DISABLED</code> if set, then the repository will be disabled by default.</p> <p><code>URL</code> is points to a list of available components.</p> <p><code>USERNAME</code> is used as user on a protected repository.</p> <p><code>PASSWORD</code> is password to use on a protected repository.</p> <p><code>DISPLAY_NAME</code> is string to display instead of the URL.</p>   <h2 id=\"example-usage\">Example usage</h2> <pre data-language=\"cmake\">set(CPACK_PACKAGE_NAME \"MyPackage\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"MyPackage Installation Example\")\nset(CPACK_PACKAGE_VERSION \"1.0.0\") # Version of installer\n\ninclude(CPack)\ninclude(CPackIFW)\n\ncpack_add_component(myapp\n    DISPLAY_NAME \"MyApp\"\n    DESCRIPTION \"My Application\")\ncpack_ifw_configure_component(myapp\n    VERSION \"1.2.3\" # Version of component\n    SCRIPT \"operations.qs\")\ncpack_add_component(mybigplugin\n    DISPLAY_NAME \"MyBigPlugin\"\n    DESCRIPTION \"My Big Downloadable Plugin\"\n    DOWNLOADED)\ncpack_ifw_add_repository(myrepo\n    URL \"http://example.com/ifw/repo/myapp\"\n    DISPLAY_NAME \"My Application Repository\")\n</pre>   <h2 id=\"online-installer\">Online installer</h2> <p>By default CPack IFW generator makes offline installer. This means that all components will be packaged into a binary file.</p> <p>To make a component downloaded, you must set the <code>DOWNLOADED</code> option in <a class=\"reference internal\" href=\"cpackcomponent#command:cpack_add_component\" title=\"cpack_add_component\" id=\"index-0-command:cpack_add_component\"><code>cpack_add_component()</code></a>.</p> <p>Then you would use the command <a class=\"reference internal\" href=\"cpackcomponent#command:cpack_configure_downloads\" title=\"cpack_configure_downloads\" id=\"index-0-command:cpack_configure_downloads\"><code>cpack_configure_downloads()</code></a>. If you set <code>ALL</code> option all components will be downloaded.</p> <p>You also can use command <a class=\"reference internal\" href=\"#command:cpack_ifw_add_repository\" title=\"cpack_ifw_add_repository\" id=\"index-1-command:cpack_ifw_add_repository\"><code>cpack_ifw_add_repository()</code></a> and variable <a class=\"reference internal\" href=\"#variable:CPACK_IFW_DOWNLOAD_ALL\" title=\"CPACK_IFW_DOWNLOAD_ALL\" id=\"index-0-variable:CPACK_IFW_DOWNLOAD_ALL\"><code>CPACK_IFW_DOWNLOAD_ALL</code></a> for more specific configuration.</p> <p>CPack IFW generator creates “repository” dir in current binary dir. You would copy content of this dir to specified <code>site</code> (<code>url</code>).</p>   <h2 id=\"see-also\">See Also</h2> <p>Qt Installer Framework Manual:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>Index page</dt> <dd><a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/index.html\">http://doc.qt.io/qtinstallerframework/index.html</a></dd> <dt>Component Scripting</dt> <dd><a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/scripting.html\">http://doc.qt.io/qtinstallerframework/scripting.html</a></dd> <dt>Predefined Variables</dt> <dd><a class=\"reference external\" href=\"http://doc.qt.io/qtinstallerframework/scripting.html#predefined-variables\">http://doc.qt.io/qtinstallerframework/scripting.html#predefined-variables</a></dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>Download Qt Installer Framework for you platform from Qt site:</dt> <dd><a class=\"reference external\" href=\"http://download.qt.io/official_releases/qt-installer-framework\">http://download.qt.io/official_releases/qt-installer-framework</a></dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CPackIFW.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CPackIFW.html</a>\n  </p>\n</div>\n","module/checkcsourcecompiles":"<h1 id=\"module:CheckCSourceCompiles\">CheckCSourceCompiles</h1> <p id=\"checkcsourcecompiles\">Check if given C source compiles and links into an executable</p> <p>CHECK_C_SOURCE_COMPILES(&lt;code&gt; &lt;var&gt; [FAIL_REGEX &lt;fail-regex&gt;])</p> <pre data-language=\"python\">&lt;code&gt;       - source code to try to compile, must define 'main'\n&lt;var&gt;        - variable to store whether the source code compiled\n               Will be created as an internal cache variable.\n&lt;fail-regex&gt; - fail if test output matches this regex\n</pre> <p>The following variables may be set before calling this macro to modify the way the check is run:</p> <pre data-language=\"python\">CMAKE_REQUIRED_FLAGS = string of compile command line flags\nCMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\nCMAKE_REQUIRED_INCLUDES = list of include directories\nCMAKE_REQUIRED_LIBRARIES = list of libraries to link\nCMAKE_REQUIRED_QUIET = execute quietly without messages\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CheckCSourceCompiles.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CheckCSourceCompiles.html</a>\n  </p>\n</div>\n","module/ctest":"<h1 id=\"module:CTest\">CTest</h1> <p id=\"ctest\">Configure a project for testing with CTest/CDash</p> <p>Include this module in the top CMakeLists.txt file of a project to enable testing with CTest and dashboard submissions to CDash:</p> <pre data-language=\"python\">project(MyProject)\n...\ninclude(CTest)\n</pre> <p>The module automatically creates a <code>BUILD_TESTING</code> option that selects whether to enable testing support (<code>ON</code> by default). After including the module, use code like:</p> <pre data-language=\"python\">if(BUILD_TESTING)\n  # ... CMake code to create tests ...\nendif()\n</pre> <p>to creating tests when testing is enabled.</p> <p>To enable submissions to a CDash server, create a <code>CTestConfig.cmake</code> file at the top of the project with content such as:</p> <pre data-language=\"python\">set(CTEST_PROJECT_NAME \"MyProject\")\nset(CTEST_NIGHTLY_START_TIME \"01:00:00 UTC\")\nset(CTEST_DROP_METHOD \"http\")\nset(CTEST_DROP_SITE \"my.cdash.org\")\nset(CTEST_DROP_LOCATION \"/submit.php?project=MyProject\")\nset(CTEST_DROP_SITE_CDASH TRUE)\n</pre> <p>(the CDash server can provide the file to a project administrator who configures <code>MyProject</code>). Settings in the config file are shared by both this <code>CTest</code> module and the <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> command-line <a class=\"reference internal\" href=\"../manual/ctest.1#dashboard-client\"><span>Dashboard Client</span></a> mode (<code>ctest -S</code>).</p> <p>While building a project for submission to CDash, CTest scans the build output for errors and warnings and reports them with surrounding context from the build log. This generic approach works for all build tools, but does not give details about the command invocation that produced a given problem. One may get more detailed reports by setting the <a class=\"reference internal\" href=\"../variable/ctest_use_launchers#variable:CTEST_USE_LAUNCHERS\" title=\"CTEST_USE_LAUNCHERS\" id=\"index-0-variable:CTEST_USE_LAUNCHERS\"><code>CTEST_USE_LAUNCHERS</code></a> variable:</p> <pre data-language=\"python\">set(CTEST_USE_LAUNCHERS 1)\n</pre> <p>in the <code>CTestConfig.cmake</code> file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CTest.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CTest.html</a>\n  </p>\n</div>\n","module/ctestcoveragecollectgcov":"<h1 id=\"module:CTestCoverageCollectGCOV\">CTestCoverageCollectGCOV</h1> <p id=\"ctestcoveragecollectgcov\">This module provides the function <code>ctest_coverage_collect_gcov</code>. The function will run gcov on the .gcda files in a binary tree and then package all of the .gcov files into a tar file with a data.json that contains the source and build directories for CDash to use in parsing the coverage data. In addtion the Labels.json files for targets that have coverage information are also put in the tar file for CDash to asign the correct labels. This file can be sent to a CDash server for display with the <a class=\"reference internal\" href=\"../command/ctest_submit#command:ctest_submit\" title=\"ctest_submit\" id=\"index-0-command:ctest_submit\"><code>ctest_submit(CDASH_UPLOAD)</code></a> command.</p> <dl class=\"command\"> <dt id=\"command:cdash_coverage_collect_gcov\"><code>cdash_coverage_collect_gcov</code></dt> <dd>\n<pre data-language=\"python\">ctest_coverage_collect_gcov(TARBALL &lt;tarfile&gt;\n  [SOURCE &lt;source_dir&gt;][BUILD &lt;build_dir&gt;]\n  [GCOV_COMMAND &lt;gcov_command&gt;]\n  [GCOV_OPTIONS &lt;options&gt;...]\n  )\n</pre> <p>Run gcov and package a tar file for CDash. The options are:</p> <dl class=\"docutils\"> <dt><code>TARBALL &lt;tarfile&gt;</code></dt> <dd>Specify the location of the <code>.tar</code> file to be created for later upload to CDash. Relative paths will be interpreted with respect to the top-level build directory.</dd> <dt><code>SOURCE &lt;source_dir&gt;</code></dt> <dd>Specify the top-level source directory for the build. Default is the value of <a class=\"reference internal\" href=\"../variable/ctest_source_directory#variable:CTEST_SOURCE_DIRECTORY\" title=\"CTEST_SOURCE_DIRECTORY\" id=\"index-0-variable:CTEST_SOURCE_DIRECTORY\"><code>CTEST_SOURCE_DIRECTORY</code></a>.</dd> <dt><code>BUILD &lt;build_dir&gt;</code></dt> <dd>Specify the top-level build directory for the build. Default is the value of <a class=\"reference internal\" href=\"../variable/ctest_binary_directory#variable:CTEST_BINARY_DIRECTORY\" title=\"CTEST_BINARY_DIRECTORY\" id=\"index-0-variable:CTEST_BINARY_DIRECTORY\"><code>CTEST_BINARY_DIRECTORY</code></a>.</dd> <dt><code>GCOV_COMMAND &lt;gcov_command&gt;</code></dt> <dd>Specify the full path to the <code>gcov</code> command on the machine. Default is the value of <a class=\"reference internal\" href=\"../variable/ctest_coverage_command#variable:CTEST_COVERAGE_COMMAND\" title=\"CTEST_COVERAGE_COMMAND\" id=\"index-0-variable:CTEST_COVERAGE_COMMAND\"><code>CTEST_COVERAGE_COMMAND</code></a>.</dd> <dt><code>GCOV_OPTIONS &lt;options&gt;...</code></dt> <dd>Specify options to be passed to gcov. The <code>gcov</code> command is run as <code>gcov &lt;options&gt;... -o &lt;gcov-dir&gt; &lt;file&gt;.gcda</code>. If not specified, the default option is just <code>-b</code>.</dd> <dt><code>QUIET</code></dt> <dd>Suppress non-error messages that otherwise would have been printed out by this function.</dd> </dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CTestCoverageCollectGCOV.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CTestCoverageCollectGCOV.html</a>\n  </p>\n</div>\n","module/ctestscriptmode":"<h1 id=\"module:CTestScriptMode\">CTestScriptMode</h1> <p id=\"ctestscriptmode\">This file is read by ctest in script mode (-S)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CTestScriptMode.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CTestScriptMode.html</a>\n  </p>\n</div>\n","command/add_executable":"<h1 id=\"command:add_executable\">add_executable</h1> <p id=\"add-executable\">Add an executable to the project using the specified source files.</p> <pre data-language=\"python\">add_executable(&lt;name&gt; [WIN32] [MACOSX_BUNDLE]\n               [EXCLUDE_FROM_ALL]\n               source1 [source2 ...])\n</pre> <p>Adds an executable target called <code>&lt;name&gt;</code> to be built from the source files listed in the command invocation. The <code>&lt;name&gt;</code> corresponds to the logical target name and must be globally unique within a project. The actual file name of the executable built is constructed based on conventions of the native platform (such as <code>&lt;name&gt;.exe</code> or just <code>&lt;name&gt;</code>).</p> <p>By default the executable file will be created in the build tree directory corresponding to the source tree directory in which the command was invoked. See documentation of the <a class=\"reference internal\" href=\"../prop_tgt/runtime_output_directory#prop_tgt:RUNTIME_OUTPUT_DIRECTORY\" title=\"RUNTIME_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_DIRECTORY\"><code>RUNTIME_OUTPUT_DIRECTORY</code></a> target property to change this location. See documentation of the <a class=\"reference internal\" href=\"../prop_tgt/output_name#prop_tgt:OUTPUT_NAME\" title=\"OUTPUT_NAME\" id=\"index-0-prop_tgt:OUTPUT_NAME\"><code>OUTPUT_NAME</code></a> target property to change the <code>&lt;name&gt;</code> part of the final file name.</p> <p>If <code>WIN32</code> is given the property <a class=\"reference internal\" href=\"../prop_tgt/win32_executable#prop_tgt:WIN32_EXECUTABLE\" title=\"WIN32_EXECUTABLE\" id=\"index-0-prop_tgt:WIN32_EXECUTABLE\"><code>WIN32_EXECUTABLE</code></a> will be set on the target created. See documentation of that target property for details.</p> <p>If <code>MACOSX_BUNDLE</code> is given the corresponding property will be set on the created target. See documentation of the <a class=\"reference internal\" href=\"../prop_tgt/macosx_bundle#prop_tgt:MACOSX_BUNDLE\" title=\"MACOSX_BUNDLE\" id=\"index-0-prop_tgt:MACOSX_BUNDLE\"><code>MACOSX_BUNDLE</code></a> target property for details.</p> <p>If <code>EXCLUDE_FROM_ALL</code> is given the corresponding property will be set on the created target. See documentation of the <a class=\"reference internal\" href=\"../prop_tgt/exclude_from_all#prop_tgt:EXCLUDE_FROM_ALL\" title=\"EXCLUDE_FROM_ALL\" id=\"index-0-prop_tgt:EXCLUDE_FROM_ALL\"><code>EXCLUDE_FROM_ALL</code></a> target property for details.</p> <p>Source arguments to <code>add_executable</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p>  <pre data-language=\"python\">add_executable(&lt;name&gt; IMPORTED [GLOBAL])\n</pre> <p>An <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>IMPORTED executable target</span></a> references an executable file located outside the project. No rules are generated to build it, and the <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target property is <code>True</code>. The target name has scope in the directory in which it is created and below, but the <code>GLOBAL</code> option extends visibility. It may be referenced like any target built within the project. <code>IMPORTED</code> executables are useful for convenient reference from commands like <a class=\"reference internal\" href=\"add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-0-command:add_custom_command\"><code>add_custom_command()</code></a>. Details about the imported executable are specified by setting properties whose names begin in <code>IMPORTED_</code>. The most important such property is <a class=\"reference internal\" href=\"../prop_tgt/imported_location#prop_tgt:IMPORTED_LOCATION\" title=\"IMPORTED_LOCATION\" id=\"index-0-prop_tgt:IMPORTED_LOCATION\"><code>IMPORTED_LOCATION</code></a> (and its per-configuration version <a class=\"reference internal\" href=\"#\" title=\"IMPORTED_LOCATION_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:IMPORTED_LOCATION_&lt;CONFIG&gt;\"><code>IMPORTED_LOCATION_&lt;CONFIG&gt;</code></a>) which specifies the location of the main executable file on disk. See documentation of the <code>IMPORTED_*</code> properties for more information.</p>  <pre data-language=\"python\">add_executable(&lt;name&gt; ALIAS &lt;target&gt;)\n</pre> <p>Creates an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#alias-targets\"><span>Alias Target</span></a>, such that <code>&lt;name&gt;</code> can be used to refer to <code>&lt;target&gt;</code> in subsequent commands. The <code>&lt;name&gt;</code> does not appear in the generated buildsystem as a make target. The <code>&lt;target&gt;</code> may not be an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>Imported Target</span></a> or an <code>ALIAS</code>. <code>ALIAS</code> targets can be used as targets to read properties from, executables for custom commands and custom targets. They can also be tested for existance with the regular <a class=\"reference internal\" href=\"if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if(TARGET)</code></a> subcommand. The <code>&lt;name&gt;</code> may not be used to modify properties of <code>&lt;target&gt;</code>, that is, it may not be used as the operand of <a class=\"reference internal\" href=\"set_property#command:set_property\" title=\"set_property\" id=\"index-0-command:set_property\"><code>set_property()</code></a>, <a class=\"reference internal\" href=\"set_target_properties#command:set_target_properties\" title=\"set_target_properties\" id=\"index-0-command:set_target_properties\"><code>set_target_properties()</code></a>, <a class=\"reference internal\" href=\"target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> etc. An <code>ALIAS</code> target may not be installed or exported.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/add_executable.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/add_executable.html</a>\n  </p>\n</div>\n","module/cpackrpm":"<h1 id=\"module:CPackRPM\">CPackRPM</h1> <p id=\"cpackrpm\">The builtin (binary) CPack RPM generator (Unix only)</p>  <h2 id=\"variables-specific-to-cpack-rpm-generator\">Variables specific to CPack RPM generator</h2> <p>CPackRPM may be used to create RPM package using CPack. CPackRPM is a CPack generator thus it uses the CPACK_XXX variables used by CPack : <a class=\"reference external\" href=\"https://cmake.org/Wiki/CMake:CPackConfiguration\">https://cmake.org/Wiki/CMake:CPackConfiguration</a></p> <p>However CPackRPM has specific features which are controlled by the specifics CPACK_RPM_XXX variables. CPackRPM is a component aware generator so when CPACK_RPM_COMPONENT_INSTALL is ON some more CPACK_RPM_&lt;ComponentName&gt;_XXXX variables may be used in order to have component specific values. Note however that &lt;componentName&gt; refers to the <strong>grouping name</strong>. This may be either a component name or a component GROUP name. Usually those vars correspond to RPM spec file entities, one may find information about spec files here <a class=\"reference external\" href=\"http://www.rpm.org/wiki/Docs\">http://www.rpm.org/wiki/Docs</a>. You’ll find a detailed usage of CPackRPM on the wiki:</p> <pre data-language=\"python\">https://cmake.org/Wiki/CMake:CPackPackageGenerators#RPM_.28Unix_Only.29\n</pre> <p>However as a handy reminder here comes the list of specific variables:</p> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_SUMMARY\"><code>CPACK_RPM_PACKAGE_SUMMARY</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_SUMMARY\"><code>CPACK_RPM_<component>_PACKAGE_SUMMARY</component></code></dt> <dd>\n<p>The RPM package summary.</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : CPACK_PACKAGE_DESCRIPTION_SUMMARY</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_NAME\"><code>CPACK_RPM_PACKAGE_NAME</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_NAME\"><code>CPACK_RPM_<component>_PACKAGE_NAME</component></code></dt> <dd>\n<p>The RPM package name.</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : CPACK_PACKAGE_NAME</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_VERSION\"><code>CPACK_RPM_PACKAGE_VERSION</code></dt> <dd>\n<p>The RPM package version.</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : CPACK_PACKAGE_VERSION</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_ARCHITECTURE\"><code>CPACK_RPM_PACKAGE_ARCHITECTURE</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_ARCHITECTURE\"><code>CPACK_RPM_<component>_PACKAGE_ARCHITECTURE</component></code></dt> <dd>\n<p>The RPM package architecture.</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : Native architecture output by “uname -m”</li> </ul> <p>This may be set to “noarch” if you know you are building a noarch package.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_RELEASE\"><code>CPACK_RPM_PACKAGE_RELEASE</code></dt> <dd>\n<p>The RPM package release.</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : 1</li> </ul> <p>This is the numbering of the RPM package itself, i.e. the version of the packaging and not the version of the content (see CPACK_RPM_PACKAGE_VERSION). One may change the default value if the previous packaging was buggy and/or you want to put here a fancy Linux distro specific numbering.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_LICENSE\"><code>CPACK_RPM_PACKAGE_LICENSE</code></dt> <dd>\n<p>The RPM package license policy.</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : “unknown”</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_GROUP\"><code>CPACK_RPM_PACKAGE_GROUP</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_GROUP\"><code>CPACK_RPM_<component>_PACKAGE_GROUP</component></code></dt> <dd>\n<p>The RPM package group.</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : “unknown”</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_VENDOR\"><code>CPACK_RPM_PACKAGE_VENDOR</code></dt> <dd>\n<p>The RPM package vendor.</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : CPACK_PACKAGE_VENDOR if set or “unknown”</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_URL\"><code>CPACK_RPM_PACKAGE_URL</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_URL\"><code>CPACK_RPM_<component>_PACKAGE_URL</component></code></dt> <dd>\n<p>The projects URL.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_DESCRIPTION\"><code>CPACK_RPM_PACKAGE_DESCRIPTION</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_DESCRIPTION\"><code>CPACK_RPM_<component>_PACKAGE_DESCRIPTION</component></code></dt> <dd>\n<p>RPM package description.</p> <ul class=\"simple\"> <li>Mandatory : YES</li> <li>Default : CPACK_COMPONENT_&lt;compName&gt;_DESCRIPTION (component based installers only) if set, CPACK_PACKAGE_DESCRIPTION_FILE if set or “no package description available”</li> </ul> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_COMPRESSION_TYPE\"><code>CPACK_RPM_COMPRESSION_TYPE</code></dt> <dd>\n<p>RPM compression type.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to override RPM compression type to be used to build the RPM. For example some Linux distribution now default to lzma or xz compression whereas older cannot use such RPM. Using this one can enforce compression type to be used. Possible value are: lzma, xz, bzip2 and gzip.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_AUTOREQ\"><code>CPACK_RPM_PACKAGE_AUTOREQ</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_AUTOREQ\"><code>CPACK_RPM_<component>_PACKAGE_AUTOREQ</component></code></dt> <dd>\n<p>RPM spec autoreq field.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to enable (1, yes) or disable (0, no) automatic shared libraries dependency detection. Dependencies are added to requires list.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">By defalut automatic dependency detection is enabled by rpm generator.</p> </div> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_AUTOPROV\"><code>CPACK_RPM_PACKAGE_AUTOPROV</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_AUTOPROV\"><code>CPACK_RPM_<component>_PACKAGE_AUTOPROV</component></code></dt> <dd>\n<p>RPM spec autoprov field.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to enable (1, yes) or disable (0, no) automatic listing of shared libraries that are provided by the package. Shared libraries are added to provides list.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">By defalut automatic provides detection is enabled by rpm generator.</p> </div> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_AUTOREQPROV\"><code>CPACK_RPM_PACKAGE_AUTOREQPROV</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_AUTOREQPROV\"><code>CPACK_RPM_<component>_PACKAGE_AUTOREQPROV</component></code></dt> <dd>\n<p>RPM spec autoreqprov field.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>Variable enables/disables autoreq and autoprov at the same time. See <a class=\"reference internal\" href=\"#variable:CPACK_RPM_PACKAGE_AUTOREQ\" title=\"CPACK_RPM_PACKAGE_AUTOREQ\" id=\"index-0-variable:CPACK_RPM_PACKAGE_AUTOREQ\"><code>CPACK_RPM_PACKAGE_AUTOREQ</code></a> and <a class=\"reference internal\" href=\"#variable:CPACK_RPM_PACKAGE_AUTOPROV\" title=\"CPACK_RPM_PACKAGE_AUTOPROV\" id=\"index-0-variable:CPACK_RPM_PACKAGE_AUTOPROV\"><code>CPACK_RPM_PACKAGE_AUTOPROV</code></a> for more details.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">By defalut automatic detection feature is enabled by rpm.</p> </div> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_REQUIRES\"><code>CPACK_RPM_PACKAGE_REQUIRES</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_REQUIRES\"><code>CPACK_RPM_<component>_PACKAGE_REQUIRES</component></code></dt> <dd>\n<p>RPM spec requires field.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to set RPM dependencies (requires). Note that you must enclose the complete requires string between quotes, for example:</p> <pre data-language=\"python\">set(CPACK_RPM_PACKAGE_REQUIRES \"python &gt;= 2.5.0, cmake &gt;= 2.8\")\n</pre> <p>The required package list of an RPM file could be printed with:</p> <pre data-language=\"python\">rpm -qp --requires file.rpm\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_CONFLICTS\"><code>CPACK_RPM_PACKAGE_CONFLICTS</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_CONFLICTS\"><code>CPACK_RPM_<component>_PACKAGE_CONFLICTS</component></code></dt> <dd>\n<p>RPM spec conflicts field.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to set negative RPM dependencies (conflicts). Note that you must enclose the complete requires string between quotes, for example:</p> <pre data-language=\"python\">set(CPACK_RPM_PACKAGE_CONFLICTS \"libxml2\")\n</pre> <p>The conflicting package list of an RPM file could be printed with:</p> <pre data-language=\"python\">rpm -qp --conflicts file.rpm\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_REQUIRES_PRE\"><code>CPACK_RPM_PACKAGE_REQUIRES_PRE</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_REQUIRES_PRE\"><code>CPACK_RPM_<component>_PACKAGE_REQUIRES_PRE</component></code></dt> <dd>\n<p>RPM spec requires(pre) field.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to set RPM preinstall dependencies (requires(pre)). Note that you must enclose the complete requires string between quotes, for example:</p> <pre data-language=\"python\">set(CPACK_RPM_PACKAGE_REQUIRES_PRE \"shadow-utils, initscripts\")\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_REQUIRES_POST\"><code>CPACK_RPM_PACKAGE_REQUIRES_POST</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_REQUIRES_POST\"><code>CPACK_RPM_<component>_PACKAGE_REQUIRES_POST</component></code></dt> <dd>\n<p>RPM spec requires(post) field.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to set RPM postinstall dependencies (requires(post)). Note that you must enclose the complete requires string between quotes, for example:</p> <pre data-language=\"python\">set(CPACK_RPM_PACKAGE_REQUIRES_POST \"shadow-utils, initscripts\")\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_REQUIRES_POSTUN\"><code>CPACK_RPM_PACKAGE_REQUIRES_POSTUN</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_REQUIRES_POSTUN\"><code>CPACK_RPM_<component>_PACKAGE_REQUIRES_POSTUN</component></code></dt> <dd>\n<p>RPM spec requires(postun) field.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to set RPM postuninstall dependencies (requires(postun)). Note that you must enclose the complete requires string between quotes, for example:</p> <pre data-language=\"python\">set(CPACK_RPM_PACKAGE_REQUIRES_POSTUN \"shadow-utils, initscripts\")\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_REQUIRES_PREUN\"><code>CPACK_RPM_PACKAGE_REQUIRES_PREUN</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_REQUIRES_PREUN\"><code>CPACK_RPM_<component>_PACKAGE_REQUIRES_PREUN</component></code></dt> <dd>\n<p>RPM spec requires(preun) field.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to set RPM preuninstall dependencies (requires(preun)). Note that you must enclose the complete requires string between quotes, for example:</p> <pre data-language=\"python\">set(CPACK_RPM_PACKAGE_REQUIRES_PREUN \"shadow-utils, initscripts\")\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_SUGGESTS\"><code>CPACK_RPM_PACKAGE_SUGGESTS</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_SUGGESTS\"><code>CPACK_RPM_<component>_PACKAGE_SUGGESTS</component></code></dt> <dd>\n<p>RPM spec suggest field.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to set weak RPM dependencies (suggests). Note that you must enclose the complete requires string between quotes.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_PROVIDES\"><code>CPACK_RPM_PACKAGE_PROVIDES</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_PROVIDES\"><code>CPACK_RPM_<component>_PACKAGE_PROVIDES</component></code></dt> <dd>\n<p>RPM spec provides field.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to set RPM dependencies (provides). The provided package list of an RPM file could be printed with:</p> <pre data-language=\"python\">rpm -qp --provides file.rpm\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_OBSOLETES\"><code>CPACK_RPM_PACKAGE_OBSOLETES</code></dt> <dt id=\"variable:CPACK_RPM_&lt;component&gt;_PACKAGE_OBSOLETES\"><code>CPACK_RPM_<component>_PACKAGE_OBSOLETES</component></code></dt> <dd>\n<p>RPM spec obsoletes field.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to set RPM packages that are obsoleted by this one.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_RELOCATABLE\"><code>CPACK_RPM_PACKAGE_RELOCATABLE</code></dt> <dd>\n<p>build a relocatable RPM.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : CPACK_PACKAGE_RELOCATABLE</li> </ul> <p>If this variable is set to TRUE or ON CPackRPM will try to build a relocatable RPM package. A relocatable RPM may be installed using:</p> <pre data-language=\"python\">rpm --prefix or --relocate\n</pre> <p>in order to install it at an alternate place see rpm(8). Note that currently this may fail if CPACK_SET_DESTDIR is set to ON. If CPACK_SET_DESTDIR is set then you will get a warning message but if there is file installed with absolute path you’ll get unexpected behavior.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_SPEC_INSTALL_POST\"><code>CPACK_RPM_SPEC_INSTALL_POST</code></dt> <dd>\n<ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> <li>Deprecated: YES</li> </ul> <p>This way of specifying post-install script is deprecated, use CPACK_RPM_POST_INSTALL_SCRIPT_FILE. May be used to set an RPM post-install command inside the spec file. For example setting it to “/bin/true” may be used to prevent rpmbuild to strip binaries.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_SPEC_MORE_DEFINE\"><code>CPACK_RPM_SPEC_MORE_DEFINE</code></dt> <dd>\n<p>RPM extended spec definitions lines.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to add any %define lines to the generated spec file.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PACKAGE_DEBUG\"><code>CPACK_RPM_PACKAGE_DEBUG</code></dt> <dd>\n<p>Toggle CPackRPM debug output.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be set when invoking cpack in order to trace debug information during CPack RPM run. For example you may launch CPack like this:</p> <pre data-language=\"python\">cpack -D CPACK_RPM_PACKAGE_DEBUG=1 -G RPM\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_USER_BINARY_SPECFILE\"><code>CPACK_RPM_USER_BINARY_SPECFILE</code></dt> <dd>\n<p>A user provided spec file.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be set by the user in order to specify a USER binary spec file to be used by CPackRPM instead of generating the file. The specified file will be processed by configure_file( @ONLY). One can provide a component specific file by setting CPACK_RPM_&lt;componentName&gt;_USER_BINARY_SPECFILE.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_GENERATE_USER_BINARY_SPECFILE_TEMPLATE\"><code>CPACK_RPM_GENERATE_USER_BINARY_SPECFILE_TEMPLATE</code></dt> <dd>\n<p>Spec file template.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>If set CPack will generate a template for USER specified binary spec file and stop with an error. For example launch CPack like this:</p> <pre data-language=\"python\">cpack -D CPACK_RPM_GENERATE_USER_BINARY_SPECFILE_TEMPLATE=1 -G RPM\n</pre> <p>The user may then use this file in order to hand-craft is own binary spec file which may be used with CPACK_RPM_USER_BINARY_SPECFILE.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_PRE_INSTALL_SCRIPT_FILE\"><code>CPACK_RPM_PRE_INSTALL_SCRIPT_FILE</code></dt> <dt id=\"variable:CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE\"><code>CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE</code></dt> <dd>\n<ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to embed a pre (un)installation script in the spec file. The refered script file(s) will be read and directly put after the %pre or %preun section If CPACK_RPM_COMPONENT_INSTALL is set to ON the (un)install script for each component can be overridden with CPACK_RPM_&lt;COMPONENT&gt;_PRE_INSTALL_SCRIPT_FILE and CPACK_RPM_&lt;COMPONENT&gt;_PRE_UNINSTALL_SCRIPT_FILE. One may verify which scriptlet has been included with:</p> <pre data-language=\"python\">rpm -qp --scripts  package.rpm\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_POST_INSTALL_SCRIPT_FILE\"><code>CPACK_RPM_POST_INSTALL_SCRIPT_FILE</code></dt> <dt id=\"variable:CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE\"><code>CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE</code></dt> <dd>\n<ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to embed a post (un)installation script in the spec file. The refered script file(s) will be read and directly put after the %post or %postun section. If CPACK_RPM_COMPONENT_INSTALL is set to ON the (un)install script for each component can be overridden with CPACK_RPM_&lt;COMPONENT&gt;_POST_INSTALL_SCRIPT_FILE and CPACK_RPM_&lt;COMPONENT&gt;_POST_UNINSTALL_SCRIPT_FILE. One may verify which scriptlet has been included with:</p> <pre data-language=\"python\">rpm -qp --scripts  package.rpm\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_USER_FILELIST\"><code>CPACK_RPM_USER_FILELIST</code></dt> <dt id=\"variable:CPACK_RPM_&lt;COMPONENT&gt;_USER_FILELIST\"><code>CPACK_RPM_<component>_USER_FILELIST</component></code></dt> <dd>\n<ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to explicitly specify %(&lt;directive&gt;) file line in the spec file. Like %config(noreplace) or any other directive that be found in the %files section. Since CPackRPM is generating the list of files (and directories) the user specified files of the CPACK_RPM_&lt;COMPONENT&gt;_USER_FILELIST list will be removed from the generated list.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_CHANGELOG_FILE\"><code>CPACK_RPM_CHANGELOG_FILE</code></dt> <dd>\n<p>RPM changelog file.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to embed a changelog in the spec file. The refered file will be read and directly put after the %changelog section.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST\"><code>CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST</code></dt> <dd>\n<p>list of path to be excluded.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : /etc /etc/init.d /usr /usr/share /usr/share/doc /usr/bin /usr/lib /usr/lib64 /usr/include</li> </ul> <p>May be used to exclude path (directories or files) from the auto-generated list of paths discovered by CPack RPM. The defaut value contains a reasonable set of values if the variable is not defined by the user. If the variable is defined by the user then CPackRPM will NOT any of the default path. If you want to add some path to the default list then you can use CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION variable.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION\"><code>CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION</code></dt> <dd>\n<p>additional list of path to be excluded.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to add more exclude path (directories or files) from the initial default list of excluded paths. See CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_RELOCATION_PATHS\"><code>CPACK_RPM_RELOCATION_PATHS</code></dt> <dd>\n<ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to specify more than one relocation path per relocatable RPM. Variable contains a list of relocation paths that if relative are prefixed by the value of CPACK_RPM_&lt;COMPONENT&gt;_PACKAGE_PREFIX or by the value of CPACK_PACKAGING_INSTALL_PREFIX if the component version is not provided. Variable is not component based as its content can be used to set a different path prefix for e.g. binary dir and documentation dir at the same time. Only prefixes that are required by a certain component are added to that component - component must contain at least one file/directory/symbolic link with CPACK_RPM_RELOCATION_PATHS prefix for a certain relocation path to be added. Package will not contain any relocation paths if there are no files/directories/symbolic links on any of the provided prefix locations. Packages that either do not contain any relocation paths or contain files/directories/symbolic links that are outside relocation paths print out an AUTHOR_WARNING that RPM will be partially relocatable.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_&lt;COMPONENT&gt;_PACKAGE_PREFIX\"><code>CPACK_RPM_<component>_PACKAGE_PREFIX</component></code></dt> <dd>\n<ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : CPACK_PACKAGING_INSTALL_PREFIX</li> </ul> <p>May be used to set per component CPACK_PACKAGING_INSTALL_PREFIX for relocatable RPM packages.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_NO_INSTALL_PREFIX_RELOCATION\"><code>CPACK_RPM_NO_INSTALL_PREFIX_RELOCATION</code></dt> <dt id=\"variable:CPACK_RPM_NO_&lt;COMPONENT&gt;_INSTALL_PREFIX_RELOCATION\"><code>CPACK_RPM_NO_<component>_INSTALL_PREFIX_RELOCATION</component></code></dt> <dd>\n<ul> <li>Mandatory : NO </li> <li>\n<dl class=\"first docutils\"> <dt>Default <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">CPACK_PACKAGING_INSTALL_PREFIX or CPACK_RPM_&lt;COMPONENT&gt;_PACKAGE_PREFIX</span>\n</dt> <dd>\n<p class=\"first last\">are treated as one of relocation paths</p> </dd> </dl> </li> </ul> <p>May be used to remove CPACK_PACKAGING_INSTALL_PREFIX and CPACK_RPM_&lt;COMPONENT&gt;_PACKAGE_PREFIX from relocatable RPM prefix paths.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RPM_ADDITIONAL_MAN_DIRS\"><code>CPACK_RPM_ADDITIONAL_MAN_DIRS</code></dt> <dd>\n<ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : -</li> </ul> <p>May be used to set additional man dirs that could potentially be compressed by brp-compress RPM macro. Variable content must be a list of regular expressions that point to directories containing man files or to man files directly. Note that in order to compress man pages a path must also be present in brp-compress RPM script and that brp-compress script must be added to RPM configuration by the operating system.</p> <p>Regular expressions that are added by default were taken from brp-compress RPM macro:</p> <ul class=\"simple\"> <li>/usr/man/man.*</li> <li>/usr/man/.*/man.*</li> <li>/usr/info.*</li> <li>/usr/share/man/man.*</li> <li>/usr/share/man/.*/man.*</li> <li>/usr/share/info.*</li> <li>/usr/kerberos/man.*</li> <li>/usr/X11R6/man/man.*</li> <li>/usr/lib/perl5/man/man.*</li> <li>/usr/share/doc/.*/man/man.*</li> <li>/usr/lib/.*/man/man.*</li> </ul> </dd>\n</dl>   <h2 id=\"packaging-of-symbolic-links\">Packaging of Symbolic Links</h2> <p>CPackRPM supports packaging of symbolic links:</p> <pre data-language=\"python\">execute_process(COMMAND ${CMAKE_COMMAND}\n  -E create_symlink &lt;relative_path_location&gt; &lt;symlink_name&gt;)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/&lt;symlink_name&gt;\n  DESTINATION &lt;symlink_location&gt; COMPONENT libraries)\n</pre> <p>Symbolic links will be optimized (paths will be shortened if possible) before being added to the package or if multiple relocation paths are detected, a post install symlink relocation script will be generated.</p> <p>Symbolic links may point to locations that are not packaged by the same package (either a different component or even not packaged at all) but those locations will be treated as if they were a part of the package while determining if symlink should be either created or present in a post install script - depending on relocation paths.</p> <p>Currenty there are a few limitations though:</p> <ul class=\"simple\"> <li>Only symbolic links with relative path can be packaged.</li> <li>For component based packaging component interdependency is not checked when processing symbolic links. Symbolic links pointing to content of a different component are treated the same way as if pointing to location that will not be packaged.</li> <li>Symbolic links pointing to a location through one or more intermediate symbolic links will not be handled differently - if the intermediate symbolic link(s) is also on a relocatable path, relocating it during package installation may cause initial symbolic link to point to an invalid location.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CPackRPM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CPackRPM.html</a>\n  </p>\n</div>\n","module/cpack":"<h1 id=\"module:CPack\">CPack</h1> <p id=\"cpack\">Build binary and source package installers.</p>  <h2 id=\"variables-common-to-all-cpack-generators\">Variables common to all CPack generators</h2> <p>The CPack module generates binary and source installers in a variety of formats using the cpack program. Inclusion of the CPack module adds two new targets to the resulting makefiles, package and package_source, which build the binary and source installers, respectively. The generated binary installers contain everything installed via CMake’s INSTALL command (and the deprecated INSTALL_FILES, INSTALL_PROGRAMS, and INSTALL_TARGETS commands).</p> <p>For certain kinds of binary installers (including the graphical installers on Mac OS X and Windows), CPack generates installers that allow users to select individual application components to install. See CPackComponent module for that.</p> <p>The CPACK_GENERATOR variable has different meanings in different contexts. In your CMakeLists.txt file, CPACK_GENERATOR is a <em>list of generators</em>: when run with no other arguments, CPack will iterate over that list and produce one package for each generator. In a CPACK_PROJECT_CONFIG_FILE, though, CPACK_GENERATOR is a <em>string naming a single generator</em>. If you need per-cpack- generator logic to control <em>other</em> cpack settings, then you need a CPACK_PROJECT_CONFIG_FILE.</p> <p>The CMake source tree itself contains a CPACK_PROJECT_CONFIG_FILE. See the top level file CMakeCPackOptions.cmake.in for an example.</p> <p>If set, the CPACK_PROJECT_CONFIG_FILE is included automatically on a per-generator basis. It only need contain overrides.</p> <p>Here’s how it works:</p> <ul class=\"simple\"> <li>cpack runs</li> <li>it includes CPackConfig.cmake</li> <li>it iterates over the generators listed in that file’s CPACK_GENERATOR list variable (unless told to use just a specific one via -G on the command line...)</li> <li>foreach generator, it then<ul> <li>sets CPACK_GENERATOR to the one currently being iterated</li> <li>includes the CPACK_PROJECT_CONFIG_FILE</li> <li>produces the package for that generator</li> </ul> </li> </ul> <p>This is the key: For each generator listed in CPACK_GENERATOR in CPackConfig.cmake, cpack will <em>reset</em> CPACK_GENERATOR internally to <em>the one currently being used</em> and then include the CPACK_PROJECT_CONFIG_FILE.</p> <p>Before including this CPack module in your CMakeLists.txt file, there are a variety of variables that can be set to customize the resulting installers. The most commonly-used variables are:</p> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_NAME\"><code>CPACK_PACKAGE_NAME</code></dt> <dd>\n<p>The name of the package (or application). If not specified, defaults to the project name.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_VENDOR\"><code>CPACK_PACKAGE_VENDOR</code></dt> <dd>\n<p>The name of the package vendor. (e.g., “Kitware”).</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_DIRECTORY\"><code>CPACK_PACKAGE_DIRECTORY</code></dt> <dd>\n<p>The directory in which CPack is doing its packaging. If it is not set then this will default (internally) to the build dir. This variable may be defined in CPack config file or from the cpack command line option “-B”. If set the command line option override the value found in the config file.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_VERSION_MAJOR\"><code>CPACK_PACKAGE_VERSION_MAJOR</code></dt> <dd>\n<p>Package major Version</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_VERSION_MINOR\"><code>CPACK_PACKAGE_VERSION_MINOR</code></dt> <dd>\n<p>Package minor Version</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_VERSION_PATCH\"><code>CPACK_PACKAGE_VERSION_PATCH</code></dt> <dd>\n<p>Package patch Version</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_DESCRIPTION_FILE\"><code>CPACK_PACKAGE_DESCRIPTION_FILE</code></dt> <dd>\n<p>A text file used to describe the project. Used, for example, the introduction screen of a CPack-generated Windows installer to describe the project.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_DESCRIPTION_SUMMARY\"><code>CPACK_PACKAGE_DESCRIPTION_SUMMARY</code></dt> <dd>\n<p>Short description of the project (only a few words).</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_FILE_NAME\"><code>CPACK_PACKAGE_FILE_NAME</code></dt> <dd>\n<p>The name of the package file to generate, not including the extension. For example, cmake-2.6.1-Linux-i686. The default value is:</p> <pre data-language=\"python\">${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}.\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_INSTALL_DIRECTORY\"><code>CPACK_PACKAGE_INSTALL_DIRECTORY</code></dt> <dd>\n<p>Installation directory on the target system. This may be used by some CPack generators like NSIS to create an installation directory e.g., “CMake 2.5” below the installation prefix. All installed element will be put inside this directory.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_ICON\"><code>CPACK_PACKAGE_ICON</code></dt> <dd>\n<p>A branding image that will be displayed inside the installer (used by GUI installers).</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PROJECT_CONFIG_FILE\"><code>CPACK_PROJECT_CONFIG_FILE</code></dt> <dd>\n<p>CPack-time project CPack configuration file. This file included at cpack time, once per generator after CPack has set CPACK_GENERATOR to the actual generator being used. It allows per-generator setting of CPACK_* variables at cpack time.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RESOURCE_FILE_LICENSE\"><code>CPACK_RESOURCE_FILE_LICENSE</code></dt> <dd>\n<p>License to be embedded in the installer. It will typically be displayed to the user by the produced installer (often with an explicit “Accept” button, for graphical installers) prior to installation. This license file is NOT added to installed file but is used by some CPack generators like NSIS. If you want to install a license file (may be the same as this one) along with your project you must add an appropriate CMake INSTALL command in your CMakeLists.txt.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RESOURCE_FILE_README\"><code>CPACK_RESOURCE_FILE_README</code></dt> <dd>\n<p>ReadMe file to be embedded in the installer. It typically describes in some detail the purpose of the project during the installation. Not all CPack generators uses this file.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_RESOURCE_FILE_WELCOME\"><code>CPACK_RESOURCE_FILE_WELCOME</code></dt> <dd>\n<p>Welcome file to be embedded in the installer. It welcomes users to this installer. Typically used in the graphical installers on Windows and Mac OS X.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_MONOLITHIC_INSTALL\"><code>CPACK_MONOLITHIC_INSTALL</code></dt> <dd>\n<p>Disables the component-based installation mechanism. When set the component specification is ignored and all installed items are put in a single “MONOLITHIC” package. Some CPack generators do monolithic packaging by default and may be asked to do component packaging by setting CPACK_&lt;GENNAME&gt;_COMPONENT_INSTALL to 1/TRUE.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_GENERATOR\"><code>CPACK_GENERATOR</code></dt> <dd>\n<p>List of CPack generators to use. If not specified, CPack will create a set of options CPACK_BINARY_&lt;GENNAME&gt; (e.g., CPACK_BINARY_NSIS) allowing the user to enable/disable individual generators. This variable may be used on the command line as well as in:</p> <pre data-language=\"python\">cpack -D CPACK_GENERATOR=\"ZIP;TGZ\" /path/to/build/tree\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_OUTPUT_CONFIG_FILE\"><code>CPACK_OUTPUT_CONFIG_FILE</code></dt> <dd>\n<p>The name of the CPack binary configuration file. This file is the CPack configuration generated by the CPack module for binary installers. Defaults to CPackConfig.cmake.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_EXECUTABLES\"><code>CPACK_PACKAGE_EXECUTABLES</code></dt> <dd>\n<p>Lists each of the executables and associated text label to be used to create Start Menu shortcuts. For example, setting this to the list ccmake;CMake will create a shortcut named “CMake” that will execute the installed executable ccmake. Not all CPack generators use it (at least NSIS, WIX and OSXX11 do).</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_STRIP_FILES\"><code>CPACK_STRIP_FILES</code></dt> <dd>\n<p>List of files to be stripped. Starting with CMake 2.6.0 CPACK_STRIP_FILES will be a boolean variable which enables stripping of all files (a list of files evaluates to TRUE in CMake, so this change is compatible).</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_VERBATIM_VARIABLES\"><code>CPACK_VERBATIM_VARIABLES</code></dt> <dd>\n<p>If set to TRUE, values of variables prefixed with <a class=\"reference internal\" href=\"#cpack\">CPACK</a> will be escaped before being written to the configuration files, so that the cpack program receives them exactly as they were specified. If not, characters like quotes and backslashes can cause parsing errors or alter the value received by the cpack program. Defaults to FALSE for backwards compatibility.</p> <ul class=\"simple\"> <li>Mandatory : NO</li> <li>Default : FALSE</li> </ul> </dd>\n</dl> <p>The following CPack variables are specific to source packages, and will not affect binary packages:</p> <dl class=\"variable\"> <dt id=\"variable:CPACK_SOURCE_PACKAGE_FILE_NAME\"><code>CPACK_SOURCE_PACKAGE_FILE_NAME</code></dt> <dd>\n<p>The name of the source package. For example cmake-2.6.1.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_SOURCE_STRIP_FILES\"><code>CPACK_SOURCE_STRIP_FILES</code></dt> <dd>\n<p>List of files in the source tree that will be stripped. Starting with CMake 2.6.0 CPACK_SOURCE_STRIP_FILES will be a boolean variable which enables stripping of all files (a list of files evaluates to TRUE in CMake, so this change is compatible).</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_SOURCE_GENERATOR\"><code>CPACK_SOURCE_GENERATOR</code></dt> <dd>\n<p>List of generators used for the source packages. As with CPACK_GENERATOR, if this is not specified then CPack will create a set of options (e.g., CPACK_SOURCE_ZIP) allowing users to select which packages will be generated.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_SOURCE_OUTPUT_CONFIG_FILE\"><code>CPACK_SOURCE_OUTPUT_CONFIG_FILE</code></dt> <dd>\n<p>The name of the CPack source configuration file. This file is the CPack configuration generated by the CPack module for source installers. Defaults to CPackSourceConfig.cmake.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_SOURCE_IGNORE_FILES\"><code>CPACK_SOURCE_IGNORE_FILES</code></dt> <dd>\n<p>Pattern of files in the source tree that won’t be packaged when building a source package. This is a list of regular expression patterns (that must be properly escaped), e.g., /CVS/;/\\.svn/;\\.swp$;\\.#;/#;.*~;cscope.*</p> </dd>\n</dl> <p>The following variables are for advanced uses of CPack:</p> <dl class=\"variable\"> <dt id=\"variable:CPACK_CMAKE_GENERATOR\"><code>CPACK_CMAKE_GENERATOR</code></dt> <dd>\n<p>What CMake generator should be used if the project is CMake project. Defaults to the value of CMAKE_GENERATOR few users will want to change this setting.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_INSTALL_CMAKE_PROJECTS\"><code>CPACK_INSTALL_CMAKE_PROJECTS</code></dt> <dd>\n<p>List of four values that specify what project to install. The four values are: Build directory, Project Name, Project Component, Directory. If omitted, CPack will build an installer that installs everything.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_SYSTEM_NAME\"><code>CPACK_SYSTEM_NAME</code></dt> <dd>\n<p>System name, defaults to the value of ${CMAKE_SYSTEM_NAME}.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_VERSION\"><code>CPACK_PACKAGE_VERSION</code></dt> <dd>\n<p>Package full version, used internally. By default, this is built from CPACK_PACKAGE_VERSION_MAJOR, CPACK_PACKAGE_VERSION_MINOR, and CPACK_PACKAGE_VERSION_PATCH.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_TOPLEVEL_TAG\"><code>CPACK_TOPLEVEL_TAG</code></dt> <dd>\n<p>Directory for the installed files.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_INSTALL_COMMANDS\"><code>CPACK_INSTALL_COMMANDS</code></dt> <dd>\n<p>Extra commands to install components.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_INSTALLED_DIRECTORIES\"><code>CPACK_INSTALLED_DIRECTORIES</code></dt> <dd>\n<p>Extra directories to install.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_PACKAGE_INSTALL_REGISTRY_KEY\"><code>CPACK_PACKAGE_INSTALL_REGISTRY_KEY</code></dt> <dd>\n<p>Registry key used when installing this project. This is only used by installer for Windows. The default value is based on the installation directory.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_CREATE_DESKTOP_LINKS\"><code>CPACK_CREATE_DESKTOP_LINKS</code></dt> <dd>\n<p>List of desktop links to create. Each desktop link requires a corresponding start menu shortcut as created by <a class=\"reference internal\" href=\"#variable:CPACK_PACKAGE_EXECUTABLES\" title=\"CPACK_PACKAGE_EXECUTABLES\" id=\"index-0-variable:CPACK_PACKAGE_EXECUTABLES\"><code>CPACK_PACKAGE_EXECUTABLES</code></a>.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_BINARY_&lt;GENNAME&gt;\"><code>CPACK_BINARY_</code></dt> <dd>\n<p>CPack generated options for binary generators. The CPack.cmake module generates (when CPACK_GENERATOR is not set) a set of CMake options (see CMake option command) which may then be used to select the CPack generator(s) to be used when launching the package target.</p> <p>Provide options to choose generators we might check here if the required tools for the generates exist and set the defaults according to the results</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CPack.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CPack.html</a>\n  </p>\n</div>\n","module/cpackwix":"<h1 id=\"module:CPackWIX\">CPackWIX</h1> <p id=\"cpackwix\">CPack WiX generator specific options</p>  <h2 id=\"variables-specific-to-cpack-wix-generator\">Variables specific to CPack WiX generator</h2> <p>The following variables are specific to the installers built on Windows using WiX.</p> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_UPGRADE_GUID\"><code>CPACK_WIX_UPGRADE_GUID</code></dt> <dd>\n<p>Upgrade GUID (<code>Product/@UpgradeCode</code>)</p> <p>Will be automatically generated unless explicitly provided.</p> <p>It should be explicitly set to a constant generated globally unique identifier (GUID) to allow your installers to replace existing installations that use the same GUID.</p> <p>You may for example explicitly set this variable in your CMakeLists.txt to the value that has been generated per default. You should not use GUIDs that you did not generate yourself or which may belong to other projects.</p> <p>A GUID shall have the following fixed length syntax:</p> <pre data-language=\"python\">XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n</pre> <p>(each X represents an uppercase hexadecimal digit)</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_PRODUCT_GUID\"><code>CPACK_WIX_PRODUCT_GUID</code></dt> <dd>\n<p>Product GUID (<code>Product/@Id</code>)</p> <p>Will be automatically generated unless explicitly provided.</p> <p>If explicitly provided this will set the Product Id of your installer.</p> <p>The installer will abort if it detects a pre-existing installation that uses the same GUID.</p> <p>The GUID shall use the syntax described for CPACK_WIX_UPGRADE_GUID.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_LICENSE_RTF\"><code>CPACK_WIX_LICENSE_RTF</code></dt> <dd>\n<p>RTF License File</p> <p>If CPACK_RESOURCE_FILE_LICENSE has an .rtf extension it is used as-is.</p> <p>If CPACK_RESOURCE_FILE_LICENSE has an .txt extension it is implicitly converted to RTF by the WiX Generator. The expected encoding of the .txt file is UTF-8.</p> <p>With CPACK_WIX_LICENSE_RTF you can override the license file used by the WiX Generator in case CPACK_RESOURCE_FILE_LICENSE is in an unsupported format or the .txt -&gt; .rtf conversion does not work as expected.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_PRODUCT_ICON\"><code>CPACK_WIX_PRODUCT_ICON</code></dt> <dd>\n<p>The Icon shown next to the program name in Add/Remove programs.</p> <p>If set, this icon is used in place of the default icon.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_UI_REF\"><code>CPACK_WIX_UI_REF</code></dt> <dd>\n<p>This variable allows you to override the Id of the <code>&lt;UIRef&gt;</code> element in the WiX template.</p> <p>The default is <code>WixUI_InstallDir</code> in case no CPack components have been defined and <code>WixUI_FeatureTree</code> otherwise.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_UI_BANNER\"><code>CPACK_WIX_UI_BANNER</code></dt> <dd>\n<p>The bitmap will appear at the top of all installer pages other than the welcome and completion dialogs.</p> <p>If set, this image will replace the default banner image.</p> <p>This image must be 493 by 58 pixels.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_UI_DIALOG\"><code>CPACK_WIX_UI_DIALOG</code></dt> <dd>\n<p>Background bitmap used on the welcome and completion dialogs.</p> <p>If this variable is set, the installer will replace the default dialog image.</p> <p>This image must be 493 by 312 pixels.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_PROGRAM_MENU_FOLDER\"><code>CPACK_WIX_PROGRAM_MENU_FOLDER</code></dt> <dd>\n<p>Start menu folder name for launcher.</p> <p>If this variable is not set, it will be initialized with CPACK_PACKAGE_NAME</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_CULTURES\"><code>CPACK_WIX_CULTURES</code></dt> <dd>\n<p>Language(s) of the installer</p> <p>Languages are compiled into the WixUI extension library. To use them, simply provide the name of the culture. If you specify more than one culture identifier in a comma or semicolon delimited list, the first one that is found will be used. You can find a list of supported languages at: <a class=\"reference external\" href=\"http://wix.sourceforge.net/manual-wix3/WixUI_localization.htm\">http://wix.sourceforge.net/manual-wix3/WixUI_localization.htm</a></p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_TEMPLATE\"><code>CPACK_WIX_TEMPLATE</code></dt> <dd>\n<p>Template file for WiX generation</p> <p>If this variable is set, the specified template will be used to generate the WiX wxs file. This should be used if further customization of the output is required.</p> <p>If this variable is not set, the default MSI template included with CMake will be used.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_PATCH_FILE\"><code>CPACK_WIX_PATCH_FILE</code></dt> <dd>\n<p>Optional list of XML files with fragments to be inserted into generated WiX sources</p> <p>This optional variable can be used to specify an XML file that the WiX generator will use to inject fragments into its generated source files.</p> <p>Patch files understood by the CPack WiX generator roughly follow this RELAX NG compact schema:</p> <pre data-language=\"none\">start = CPackWiXPatch\n\nCPackWiXPatch = element CPackWiXPatch { CPackWiXFragment* }\n\nCPackWiXFragment = element CPackWiXFragment\n{\n    attribute Id { string },\n    fragmentContent*\n}\n\nfragmentContent = element * - CPackWiXFragment\n{\n    (attribute * { text } | text | fragmentContent)*\n}\n</pre> <p>Currently fragments can be injected into most Component, File and Directory elements.</p> <p>The following additional special Ids can be used:</p> <ul class=\"simple\"> <li>\n<code>#PRODUCT</code> for the <code>&lt;Product&gt;</code> element.</li> <li>\n<code>#PRODUCTFEATURE</code> for the root <code>&lt;Feature&gt;</code> element.</li> </ul> <p>The following example illustrates how this works.</p> <p>Given that the WiX generator creates the following XML element:</p> <pre data-language=\"xml\">&lt;Component Id=\"CM_CP_applications.bin.my_libapp.exe\" Guid=\"*\"/&gt;\n</pre> <p>The following XML patch file may be used to inject an Environment element into it:</p> <pre data-language=\"xml\">&lt;CPackWiXPatch&gt;\n  &lt;CPackWiXFragment Id=\"CM_CP_applications.bin.my_libapp.exe\"&gt;\n    &lt;Environment Id=\"MyEnvironment\" Action=\"set\"\n      Name=\"MyVariableName\" Value=\"MyVariableValue\"/&gt;\n  &lt;/CPackWiXFragment&gt;\n&lt;/CPackWiXPatch&gt;\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_EXTRA_SOURCES\"><code>CPACK_WIX_EXTRA_SOURCES</code></dt> <dd>\n<p>Extra WiX source files</p> <p>This variable provides an optional list of extra WiX source files (.wxs) that should be compiled and linked. The full path to source files is required.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_EXTRA_OBJECTS\"><code>CPACK_WIX_EXTRA_OBJECTS</code></dt> <dd>\n<p>Extra WiX object files or libraries</p> <p>This variable provides an optional list of extra WiX object (.wixobj) and/or WiX library (.wixlib) files. The full path to objects and libraries is required.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_EXTENSIONS\"><code>CPACK_WIX_EXTENSIONS</code></dt> <dd>\n<p>This variable provides a list of additional extensions for the WiX tools light and candle.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_&lt;TOOL&gt;_EXTENSIONS\"><code>CPACK_WIX_<tool>_EXTENSIONS</tool></code></dt> <dd>\n<p>This is the tool specific version of CPACK_WIX_EXTENSIONS. <code>&lt;TOOL&gt;</code> can be either LIGHT or CANDLE.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_&lt;TOOL&gt;_EXTRA_FLAGS\"><code>CPACK_WIX_<tool>_EXTRA_FLAGS</tool></code></dt> <dd>\n<p>This list variable allows you to pass additional flags to the WiX tool <code>&lt;TOOL&gt;</code>.</p> <p>Use it at your own risk. Future versions of CPack may generate flags which may be in conflict with your own flags.</p> <p><code>&lt;TOOL&gt;</code> can be either LIGHT or CANDLE.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_CMAKE_PACKAGE_REGISTRY\"><code>CPACK_WIX_CMAKE_PACKAGE_REGISTRY</code></dt> <dd>\n<p>If this variable is set the generated installer will create an entry in the windows registry key <code>HKEY_LOCAL_MACHINE\\Software\\Kitware\\CMake\\Packages\\&lt;package&gt;</code> The value for <code>&lt;package&gt;</code> is provided by this variable.</p> <p>Assuming you also install a CMake configuration file this will allow other CMake projects to find your package with the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> command.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:CPACK_WIX_PROPERTY_&lt;PROPERTY&gt;\"><code>CPACK_WIX_PROPERTY_</code></dt> <dd>\n<p>This variable can be used to provide a value for the Windows Installer property <code>&lt;PROPERTY&gt;</code></p> <p>The following list contains some example properties that can be used to customize information under “Programs and Features” (also known as “Add or Remove Programs”)</p> <ul class=\"simple\"> <li>ARPCOMMENTS - Comments</li> <li>ARPHELPLINK - Help and support information URL</li> <li>ARPURLINFOABOUT - General information URL</li> <li>URLUPDATEINFO - Update information URL</li> <li>ARPHELPTELEPHONE - Help and support telephone number</li> <li>ARPSIZE - Size (in kilobytes) of the application</li> </ul> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CPackWIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CPackWIX.html</a>\n  </p>\n</div>\n","module/ctestuselaunchers":"<h1 id=\"module:CTestUseLaunchers\">CTestUseLaunchers</h1> <p id=\"ctestuselaunchers\">Set the RULE_LAUNCH_* global properties when CTEST_USE_LAUNCHERS is on.</p> <p>CTestUseLaunchers is automatically included when you include(CTest). However, it is split out into its own module file so projects can use the CTEST_USE_LAUNCHERS functionality independently.</p> <p>To use launchers, set CTEST_USE_LAUNCHERS to ON in a ctest -S dashboard script, and then also set it in the cache of the configured project. Both cmake and ctest need to know the value of it for the launchers to work properly. CMake needs to know in order to generate proper build rules, and ctest, in order to produce the proper error and warning analysis.</p> <p>For convenience, you may set the ENV variable CTEST_USE_LAUNCHERS_DEFAULT in your ctest -S script, too. Then, as long as your CMakeLists uses include(CTest) or include(CTestUseLaunchers), it will use the value of the ENV variable to initialize a CTEST_USE_LAUNCHERS cache variable. This cache variable initialization only occurs if CTEST_USE_LAUNCHERS is not already defined.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/CTestUseLaunchers.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/CTestUseLaunchers.html</a>\n  </p>\n</div>\n","module/dart":"<h1 id=\"module:Dart\">Dart</h1> <p id=\"dart\">Configure a project for testing with CTest or old Dart Tcl Client</p> <p>This file is the backwards-compatibility version of the CTest module. It supports using the old Dart 1 Tcl client for driving dashboard submissions as well as testing with CTest. This module should be included in the CMakeLists.txt file at the top of a project. Typical usage:</p> <pre data-language=\"python\">include(Dart)\nif(BUILD_TESTING)\n  # ... testing related CMake code ...\nendif()\n</pre> <p>The BUILD_TESTING option is created by the Dart module to determine whether testing support should be enabled. The default is ON.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/Dart.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/Dart.html</a>\n  </p>\n</div>\n","module/deployqt4":"<h1 id=\"module:DeployQt4\">DeployQt4</h1> <p id=\"deployqt4\">Functions to help assemble a standalone Qt4 executable.</p> <p>A collection of CMake utility functions useful for deploying Qt4 executables.</p> <p>The following functions are provided by this module:</p> <pre data-language=\"python\">write_qt4_conf\nresolve_qt4_paths\nfixup_qt4_executable\ninstall_qt4_plugin_path\ninstall_qt4_plugin\ninstall_qt4_executable\n</pre> <p>Requires CMake 2.6 or greater because it uses function and PARENT_SCOPE. Also depends on BundleUtilities.cmake.</p> <pre data-language=\"python\">WRITE_QT4_CONF(&lt;qt_conf_dir&gt; &lt;qt_conf_contents&gt;)\n</pre> <p>Writes a qt.conf file with the &lt;qt_conf_contents&gt; into &lt;qt_conf_dir&gt;.</p> <pre data-language=\"python\">RESOLVE_QT4_PATHS(&lt;paths_var&gt; [&lt;executable_path&gt;])\n</pre> <p>Loop through &lt;paths_var&gt; list and if any don’t exist resolve them relative to the &lt;executable_path&gt; (if supplied) or the CMAKE_INSTALL_PREFIX.</p> <pre data-language=\"python\">FIXUP_QT4_EXECUTABLE(&lt;executable&gt;\n  [&lt;qtplugins&gt; &lt;libs&gt; &lt;dirs&gt; &lt;plugins_dir&gt; &lt;request_qt_conf&gt;])\n</pre> <p>Copies Qt plugins, writes a Qt configuration file (if needed) and fixes up a Qt4 executable using BundleUtilities so it is standalone and can be drag-and-drop copied to another machine as long as all of the system libraries are compatible.</p> <p>&lt;executable&gt; should point to the executable to be fixed-up.</p> <p>&lt;qtplugins&gt; should contain a list of the names or paths of any Qt plugins to be installed.</p> <p>&lt;libs&gt; will be passed to BundleUtilities and should be a list of any already installed plugins, libraries or executables to also be fixed-up.</p> <p>&lt;dirs&gt; will be passed to BundleUtilities and should contain and directories to be searched to find library dependencies.</p> <p>&lt;plugins_dir&gt; allows an custom plugins directory to be used.</p> <p>&lt;request_qt_conf&gt; will force a qt.conf file to be written even if not needed.</p> <pre data-language=\"python\">INSTALL_QT4_PLUGIN_PATH(plugin executable copy installed_plugin_path_var\n                        &lt;plugins_dir&gt; &lt;component&gt; &lt;configurations&gt;)\n</pre> <p>Install (or copy) a resolved &lt;plugin&gt; to the default plugins directory (or &lt;plugins_dir&gt;) relative to &lt;executable&gt; and store the result in &lt;installed_plugin_path_var&gt;.</p> <p>If &lt;copy&gt; is set to TRUE then the plugins will be copied rather than installed. This is to allow this module to be used at CMake time rather than install time.</p> <p>If &lt;component&gt; is set then anything installed will use this COMPONENT.</p> <pre data-language=\"python\">INSTALL_QT4_PLUGIN(plugin executable copy installed_plugin_path_var\n                   &lt;plugins_dir&gt; &lt;component&gt;)\n</pre> <p>Install (or copy) an unresolved &lt;plugin&gt; to the default plugins directory (or &lt;plugins_dir&gt;) relative to &lt;executable&gt; and store the result in &lt;installed_plugin_path_var&gt;. See documentation of INSTALL_QT4_PLUGIN_PATH.</p> <pre data-language=\"python\">INSTALL_QT4_EXECUTABLE(&lt;executable&gt;\n  [&lt;qtplugins&gt; &lt;libs&gt; &lt;dirs&gt; &lt;plugins_dir&gt; &lt;request_qt_conf&gt; &lt;component&gt;])\n</pre> <p>Installs Qt plugins, writes a Qt configuration file (if needed) and fixes up a Qt4 executable using BundleUtilities so it is standalone and can be drag-and-drop copied to another machine as long as all of the system libraries are compatible. The executable will be fixed-up at install time. &lt;component&gt; is the COMPONENT used for bundle fixup and plugin installation. See documentation of FIXUP_QT4_BUNDLE.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/DeployQt4.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/DeployQt4.html</a>\n  </p>\n</div>\n","module/documentation":"<h1 id=\"module:Documentation\">Documentation</h1> <p id=\"documentation\">DocumentationVTK.cmake</p> <p>This file provides support for the VTK documentation framework. It relies on several tools (Doxygen, Perl, etc).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/Documentation.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/Documentation.html</a>\n  </p>\n</div>\n","module/externaldata":"<h1 id=\"module:ExternalData\">ExternalData</h1>   <ul id=\"externaldata\"> <li><a class=\"reference internal\" href=\"#introduction\" id=\"id2\">Introduction</a></li> <li><a class=\"reference internal\" href=\"#module-functions\" id=\"id3\">Module Functions</a></li> <li><a class=\"reference internal\" href=\"#module-variables\" id=\"id4\">Module Variables</a></li> <li>\n<a class=\"reference internal\" href=\"#referencing-files\" id=\"id5\">Referencing Files</a><ul> <li><a class=\"reference internal\" href=\"#referencing-single-files\" id=\"id6\">Referencing Single Files</a></li> <li><a class=\"reference internal\" href=\"#referencing-file-series\" id=\"id7\">Referencing File Series</a></li> <li><a class=\"reference internal\" href=\"#referencing-associated-files\" id=\"id8\">Referencing Associated Files</a></li> <li><a class=\"reference internal\" href=\"#referencing-directories\" id=\"id9\">Referencing Directories</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#hash-algorithms\" id=\"id10\">Hash Algorithms</a></li> <li><a class=\"reference internal\" href=\"#custom-fetch-scripts\" id=\"id11\">Custom Fetch Scripts</a></li> </ul>\n  <p>Manage data files stored outside source tree</p>  <h2 id=\"introduction\">Introduction</h2> <p>Use this module to unambiguously reference data files stored outside the source tree and fetch them at build time from arbitrary local and remote content-addressed locations. Functions provided by this module recognize arguments with the syntax <code>DATA{&lt;name&gt;}</code> as references to external data, replace them with full paths to local copies of those data, and create build rules to fetch and update the local copies.</p> <p>For example:</p> <pre data-language=\"cmake\">include(ExternalData)\nset(ExternalData_URL_TEMPLATES \"file:///local/%(algo)/%(hash)\"\n                               \"file:////host/share/%(algo)/%(hash)\"\n                               \"http://data.org/%(algo)/%(hash)\")\nExternalData_Add_Test(MyData\n  NAME MyTest\n  COMMAND MyExe DATA{MyInput.png}\n  )\nExternalData_Add_Target(MyData)\n</pre> <p>When test <code>MyTest</code> runs the <code>DATA{MyInput.png}</code> argument will be replaced by the full path to a real instance of the data file <code>MyInput.png</code> on disk. If the source tree contains a content link such as <code>MyInput.png.md5</code> then the <code>MyData</code> target creates a real <code>MyInput.png</code> in the build tree.</p>   <h2 id=\"module-functions\">Module Functions</h2> <dl class=\"command\"> <dt id=\"command:externaldata_expand_arguments\"><code>ExternalData_Expand_Arguments</code></dt> <dd>\n<p>The <code>ExternalData_Expand_Arguments</code> function evaluates <code>DATA{}</code> references in its arguments and constructs a new list of arguments:</p> <pre data-language=\"python\">ExternalData_Expand_Arguments(\n  &lt;target&gt;   # Name of data management target\n  &lt;outVar&gt;   # Output variable\n  [args...]  # Input arguments, DATA{} allowed\n  )\n</pre> <p>It replaces each <code>DATA{}</code> reference in an argument with the full path of a real data file on disk that will exist after the <code>&lt;target&gt;</code> builds.</p> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:externaldata_add_test\"><code>ExternalData_Add_Test</code></dt> <dd>\n<p>The <code>ExternalData_Add_Test</code> function wraps around the CMake <a class=\"reference internal\" href=\"../command/add_test#command:add_test\" title=\"add_test\" id=\"index-0-command:add_test\"><code>add_test()</code></a> command but supports <code>DATA{}</code> references in its arguments:</p> <pre data-language=\"python\">ExternalData_Add_Test(\n  &lt;target&gt;   # Name of data management target\n  ...        # Arguments of add_test(), DATA{} allowed\n  )\n</pre> <p>It passes its arguments through <code>ExternalData_Expand_Arguments</code> and then invokes the <a class=\"reference internal\" href=\"../command/add_test#command:add_test\" title=\"add_test\" id=\"index-1-command:add_test\"><code>add_test()</code></a> command using the results.</p> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:externaldata_add_target\"><code>ExternalData_Add_Target</code></dt> <dd>\n<p>The <code>ExternalData_Add_Target</code> function creates a custom target to manage local instances of data files stored externally:</p> <pre data-language=\"python\">ExternalData_Add_Target(\n  &lt;target&gt;   # Name of data management target\n  )\n</pre> <p>It creates custom commands in the target as necessary to make data files available for each <code>DATA{}</code> reference previously evaluated by other functions provided by this module. Data files may be fetched from one of the URL templates specified in the <code>ExternalData_URL_TEMPLATES</code> variable, or may be found locally in one of the paths specified in the <code>ExternalData_OBJECT_STORES</code> variable.</p> </dd>\n</dl>   <h2 id=\"module-variables\">Module Variables</h2> <p>The following variables configure behavior. They should be set before calling any of the functions provided by this module.</p> <dl class=\"variable\"> <dt id=\"variable:ExternalData_BINARY_ROOT\"><code>ExternalData_BINARY_ROOT</code></dt> <dd>\n<p>The <code>ExternalData_BINARY_ROOT</code> variable may be set to the directory to hold the real data files named by expanded <code>DATA{}</code> references. The default is <code>CMAKE_BINARY_DIR</code>. The directory layout will mirror that of content links under <code>ExternalData_SOURCE_ROOT</code>.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:ExternalData_CUSTOM_SCRIPT_&lt;key&gt;\"><code>ExternalData_CUSTOM_SCRIPT_</code></dt> <dd>\n<p>Specify a full path to a <code>.cmake</code> custom fetch script identified by <code>&lt;key&gt;</code> in entries of the <code>ExternalData_URL_TEMPLATES</code> list. See <a class=\"reference internal\" href=\"#custom-fetch-scripts\">Custom Fetch Scripts</a>.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:ExternalData_LINK_CONTENT\"><code>ExternalData_LINK_CONTENT</code></dt> <dd>\n<p>The <code>ExternalData_LINK_CONTENT</code> variable may be set to the name of a supported hash algorithm to enable automatic conversion of real data files referenced by the <code>DATA{}</code> syntax into content links. For each such <code>&lt;file&gt;</code> a content link named <code>&lt;file&gt;&lt;ext&gt;</code> is created. The original file is renamed to the form <code>.ExternalData_&lt;algo&gt;_&lt;hash&gt;</code> to stage it for future transmission to one of the locations in the list of URL templates (by means outside the scope of this module). The data fetch rule created for the content link will use the staged object if it cannot be found using any URL template.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:ExternalData_NO_SYMLINKS\"><code>ExternalData_NO_SYMLINKS</code></dt> <dd>\n<p>The real data files named by expanded <code>DATA{}</code> references may be made available under <code>ExternalData_BINARY_ROOT</code> using symbolic links on some platforms. The <code>ExternalData_NO_SYMLINKS</code> variable may be set to disable use of symbolic links and enable use of copies instead.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:ExternalData_OBJECT_STORES\"><code>ExternalData_OBJECT_STORES</code></dt> <dd>\n<p>The <code>ExternalData_OBJECT_STORES</code> variable may be set to a list of local directories that store objects using the layout <code>&lt;dir&gt;/%(algo)/%(hash)</code>. These directories will be searched first for a needed object. If the object is not available in any store then it will be fetched remotely using the URL templates and added to the first local store listed. If no stores are specified the default is a location inside the build tree.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:ExternalData_SERIES_PARSE\"><code>ExternalData_SERIES_PARSE</code></dt> <dt id=\"variable:ExternalData_SERIES_PARSE_PREFIX\"><code>ExternalData_SERIES_PARSE_PREFIX</code></dt> <dt id=\"variable:ExternalData_SERIES_PARSE_NUMBER\"><code>ExternalData_SERIES_PARSE_NUMBER</code></dt> <dt id=\"variable:ExternalData_SERIES_PARSE_SUFFIX\"><code>ExternalData_SERIES_PARSE_SUFFIX</code></dt> <dt id=\"variable:ExternalData_SERIES_MATCH\"><code>ExternalData_SERIES_MATCH</code></dt> <dd>\n<p>See <a class=\"reference internal\" href=\"#referencing-file-series\">Referencing File Series</a>.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:ExternalData_SOURCE_ROOT\"><code>ExternalData_SOURCE_ROOT</code></dt> <dd>\n<p>The <code>ExternalData_SOURCE_ROOT</code> variable may be set to the highest source directory containing any path named by a <code>DATA{}</code> reference. The default is <code>CMAKE_SOURCE_DIR</code>. <code>ExternalData_SOURCE_ROOT</code> and <code>CMAKE_SOURCE_DIR</code> must refer to directories within a single source distribution (e.g. they come together in one tarball).</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:ExternalData_TIMEOUT_ABSOLUTE\"><code>ExternalData_TIMEOUT_ABSOLUTE</code></dt> <dd>\n<p>The <code>ExternalData_TIMEOUT_ABSOLUTE</code> variable sets the download absolute timeout, in seconds, with a default of <code>300</code> seconds. Set to <code>0</code> to disable enforcement.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:ExternalData_TIMEOUT_INACTIVITY\"><code>ExternalData_TIMEOUT_INACTIVITY</code></dt> <dd>\n<p>The <code>ExternalData_TIMEOUT_INACTIVITY</code> variable sets the download inactivity timeout, in seconds, with a default of <code>60</code> seconds. Set to <code>0</code> to disable enforcement.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:ExternalData_URL_ALGO_&lt;algo&gt;_&lt;key&gt;\"><code>ExternalData_URL_ALGO_<algo>_</algo></code></dt> <dd>\n<p>Specify a custom URL component to be substituted for URL template placeholders of the form <code>%(algo:&lt;key&gt;)</code>, where <code>&lt;key&gt;</code> is a valid C identifier, when fetching an object referenced via hash algorithm <code>&lt;algo&gt;</code>. If not defined, the default URL component is just <code>&lt;algo&gt;</code> for any <code>&lt;key&gt;</code>.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:ExternalData_URL_TEMPLATES\"><code>ExternalData_URL_TEMPLATES</code></dt> <dd>\n<p>The <code>ExternalData_URL_TEMPLATES</code> may be set to provide a list of of URL templates using the placeholders <code>%(algo)</code> and <code>%(hash)</code> in each template. Data fetch rules try each URL template in order by substituting the hash algorithm name for <code>%(algo)</code> and the hash value for <code>%(hash)</code>. Alternatively one may use <code>%(algo:&lt;key&gt;)</code> with <code>ExternalData_URL_ALGO_&lt;algo&gt;_&lt;key&gt;</code> variables to gain more flexibility in remote URLs.</p> </dd>\n</dl>   <h2 id=\"referencing-files\">Referencing Files</h2>  <h3 id=\"referencing-single-files\">Referencing Single Files</h3> <p>The <code>DATA{}</code> syntax is literal and the <code>&lt;name&gt;</code> is a full or relative path within the source tree. The source tree must contain either a real data file at <code>&lt;name&gt;</code> or a “content link” at <code>&lt;name&gt;&lt;ext&gt;</code> containing a hash of the real file using a hash algorithm corresponding to <code>&lt;ext&gt;</code>. For example, the argument <code>DATA{img.png}</code> may be satisfied by either a real <code>img.png</code> file in the current source directory or a <code>img.png.md5</code> file containing its MD5 sum.</p>   <h3 id=\"referencing-file-series\">Referencing File Series</h3> <p>The <code>DATA{}</code> syntax can be told to fetch a file series using the form <code>DATA{&lt;name&gt;,:}</code>, where the <code>:</code> is literal. If the source tree contains a group of files or content links named like a series then a reference to one member adds rules to fetch all of them. Although all members of a series are fetched, only the file originally named by the <code>DATA{}</code> argument is substituted for it. The default configuration recognizes file series names ending with <code>#.ext</code>, <code>_#.ext</code>, <code>.#.ext</code>, or <code>-#.ext</code> where <code>#</code> is a sequence of decimal digits and <code>.ext</code> is any single extension. Configure it with a regex that parses <code>&lt;number&gt;</code> and <code>&lt;suffix&gt;</code> parts from the end of <code>&lt;name&gt;</code>:</p> <pre data-language=\"python\">ExternalData_SERIES_PARSE = regex of the form (&lt;number&gt;)(&lt;suffix&gt;)$\n</pre> <p>For more complicated cases set:</p> <pre data-language=\"python\">ExternalData_SERIES_PARSE = regex with at least two () groups\nExternalData_SERIES_PARSE_PREFIX = &lt;prefix&gt; regex group number, if any\nExternalData_SERIES_PARSE_NUMBER = &lt;number&gt; regex group number\nExternalData_SERIES_PARSE_SUFFIX = &lt;suffix&gt; regex group number\n</pre> <p>Configure series number matching with a regex that matches the <code>&lt;number&gt;</code> part of series members named <code>&lt;prefix&gt;&lt;number&gt;&lt;suffix&gt;</code>:</p> <pre data-language=\"python\">ExternalData_SERIES_MATCH = regex matching &lt;number&gt; in all series members\n</pre> <p>Note that the <code>&lt;suffix&gt;</code> of a series does not include a hash-algorithm extension.</p>   <h3 id=\"referencing-associated-files\">Referencing Associated Files</h3> <p>The <code>DATA{}</code> syntax can alternatively match files associated with the named file and contained in the same directory. Associated files may be specified by options using the syntax <code>DATA{&lt;name&gt;,&lt;opt1&gt;,&lt;opt2&gt;,...}</code>. Each option may specify one file by name or specify a regular expression to match file names using the syntax <code>REGEX:&lt;regex&gt;</code>. For example, the arguments:</p> <pre data-language=\"python\">DATA{MyData/MyInput.mhd,MyInput.img}                   # File pair\nDATA{MyData/MyFrames00.png,REGEX:MyFrames[0-9]+\\\\.png} # Series\n</pre> <p>will pass <code>MyInput.mha</code> and <code>MyFrames00.png</code> on the command line but ensure that the associated files are present next to them.</p>   <h3 id=\"referencing-directories\">Referencing Directories</h3> <p>The <code>DATA{}</code> syntax may reference a directory using a trailing slash and a list of associated files. The form <code>DATA{&lt;name&gt;/,&lt;opt1&gt;,&lt;opt2&gt;,...}</code> adds rules to fetch any files in the directory that match one of the associated file options. For example, the argument <code>DATA{MyDataDir/,REGEX:.*}</code> will pass the full path to a <code>MyDataDir</code> directory on the command line and ensure that the directory contains files corresponding to every file or content link in the <code>MyDataDir</code> source directory. In order to match associated files in subdirectories, specify a <code>RECURSE:</code> option, e.g. <code>DATA{MyDataDir/,RECURSE:,REGEX:.*}</code>.</p>    <h2 id=\"hash-algorithms\">Hash Algorithms</h2> <p>The following hash algorithms are supported:</p> <pre data-language=\"python\">%(algo)     &lt;ext&gt;     Description\n-------     -----     -----------\nMD5         .md5      Message-Digest Algorithm 5, RFC 1321\nSHA1        .sha1     US Secure Hash Algorithm 1, RFC 3174\nSHA224      .sha224   US Secure Hash Algorithms, RFC 4634\nSHA256      .sha256   US Secure Hash Algorithms, RFC 4634\nSHA384      .sha384   US Secure Hash Algorithms, RFC 4634\nSHA512      .sha512   US Secure Hash Algorithms, RFC 4634\n</pre> <p>Note that the hashes are used only for unique data identification and download verification.</p>   <h2 id=\"externaldata-custom-fetch-scripts\">Custom Fetch Scripts</h2> <p id=\"custom-fetch-scripts\">When a data file must be fetched from one of the URL templates specified in the <code>ExternalData_URL_TEMPLATES</code> variable, it is normally downloaded using the <a class=\"reference internal\" href=\"../command/file#command:file\" title=\"file\" id=\"index-0-command:file\"><code>file(DOWNLOAD)</code></a> command. One may specify usage of a custom fetch script by using a URL template of the form <code>ExternalDataCustomScript://&lt;key&gt;/&lt;loc&gt;</code>. The <code>&lt;key&gt;</code> must be a C identifier, and the <code>&lt;loc&gt;</code> must contain the <code>%(algo)</code> and <code>%(hash)</code> placeholders. A variable corresponding to the key, <code>ExternalData_CUSTOM_SCRIPT_&lt;key&gt;</code>, must be set to the full path to a <code>.cmake</code> script file. The script will be included to perform the actual fetch, and provided with the following variables:</p> <dl class=\"variable\"> <dt id=\"variable:ExternalData_CUSTOM_LOCATION\"><code>ExternalData_CUSTOM_LOCATION</code></dt> <dd>\n<p>When a custom fetch script is loaded, this variable is set to the location part of the URL, which will contain the substituted hash algorithm name and content hash value.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:ExternalData_CUSTOM_FILE\"><code>ExternalData_CUSTOM_FILE</code></dt> <dd>\n<p>When a custom fetch script is loaded, this variable is set to the full path to a file in which the script must store the fetched content. The name of the file is unspecified and should not be interpreted in any way.</p> </dd>\n</dl> <p>The custom fetch script is expected to store fetched content in the file or set a variable:</p> <dl class=\"variable\"> <dt id=\"variable:ExternalData_CUSTOM_ERROR\"><code>ExternalData_CUSTOM_ERROR</code></dt> <dd>\n<p>When a custom fetch script fails to fetch the requested content, it must set this variable to a short one-line message describing the reason for failure.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/ExternalData.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/ExternalData.html</a>\n  </p>\n</div>\n","module/findalsa":"<h1 id=\"module:FindALSA\">FindALSA</h1> <p id=\"findalsa\">Find alsa</p> <p>Find the alsa libraries (asound)</p> <pre data-language=\"python\">This module defines the following variables:\n   ALSA_FOUND       - True if ALSA_INCLUDE_DIR &amp; ALSA_LIBRARY are found\n   ALSA_LIBRARIES   - Set when ALSA_LIBRARY is found\n   ALSA_INCLUDE_DIRS - Set when ALSA_INCLUDE_DIR is found\n</pre> <pre data-language=\"python\">ALSA_INCLUDE_DIR - where to find asoundlib.h, etc.\nALSA_LIBRARY     - the asound library\nALSA_VERSION_STRING - the version of alsa found (since CMake 2.8.8)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindALSA.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindALSA.html</a>\n  </p>\n</div>\n","module/featuresummary":"<h1 id=\"module:FeatureSummary\">FeatureSummary</h1> <p id=\"featuresummary\">Macros for generating a summary of enabled/disabled features</p> <p>This module provides the macros feature_summary(), set_package_properties() and add_feature_info(). For compatibility it also still provides set_package_info(), set_feature_info(), print_enabled_features() and print_disabled_features().</p> <p>These macros can be used to generate a summary of enabled and disabled packages and/or feature for a build tree:</p> <pre data-language=\"python\">-- The following OPTIONAL packages have been found:\nLibXml2 (required version &gt;= 2.4), XML processing lib, &lt;http://xmlsoft.org&gt;\n   * Enables HTML-import in MyWordProcessor\n   * Enables odt-export in MyWordProcessor\nPNG , A PNG image library. , &lt;http://www.libpng.org/pub/png/&gt;\n   * Enables saving screenshots\n-- The following OPTIONAL packages have not been found:\nLua51 , The Lua scripting language. , &lt;http://www.lua.org&gt;\n   * Enables macros in MyWordProcessor\nFoo , Foo provides cool stuff.\n</pre> <pre data-language=\"python\">FEATURE_SUMMARY( [FILENAME &lt;file&gt;]\n                 [APPEND]\n                 [VAR &lt;variable_name&gt;]\n                 [INCLUDE_QUIET_PACKAGES]\n                 [FATAL_ON_MISSING_REQUIRED_PACKAGES]\n                 [DESCRIPTION \"Found packages:\"]\n                 WHAT (ALL | PACKAGES_FOUND | PACKAGES_NOT_FOUND\n                      | ENABLED_FEATURES | DISABLED_FEATURES)\n               )\n</pre> <p>The FEATURE_SUMMARY() macro can be used to print information about enabled or disabled packages or features of a project. By default, only the names of the features/packages will be printed and their required version when one was specified. Use SET_PACKAGE_PROPERTIES() to add more useful information, like e.g. a download URL for the respective package or their purpose in the project.</p> <p>The WHAT option is the only mandatory option. Here you specify what information will be printed:</p> <dl class=\"docutils\"> <dt><code>ALL</code></dt> <dd>print everything</dd> <dt><code>ENABLED_FEATURES</code></dt> <dd>the list of all features which are enabled</dd> <dt><code>DISABLED_FEATURES</code></dt> <dd>the list of all features which are disabled</dd> <dt><code>PACKAGES_FOUND</code></dt> <dd>the list of all packages which have been found</dd> <dt><code>PACKAGES_NOT_FOUND</code></dt> <dd>the list of all packages which have not been found</dd> <dt><code>OPTIONAL_PACKAGES_FOUND</code></dt> <dd>only those packages which have been found which have the type OPTIONAL</dd> <dt><code>OPTIONAL_PACKAGES_NOT_FOUND</code></dt> <dd>only those packages which have not been found which have the type OPTIONAL</dd> <dt><code>RECOMMENDED_PACKAGES_FOUND</code></dt> <dd>only those packages which have been found which have the type RECOMMENDED</dd> <dt><code>RECOMMENDED_PACKAGES_NOT_FOUND</code></dt> <dd>only those packages which have not been found which have the type RECOMMENDED</dd> <dt><code>REQUIRED_PACKAGES_FOUND</code></dt> <dd>only those packages which have been found which have the type REQUIRED</dd> <dt><code>REQUIRED_PACKAGES_NOT_FOUND</code></dt> <dd>only those packages which have not been found which have the type REQUIRED</dd> <dt><code>RUNTIME_PACKAGES_FOUND</code></dt> <dd>only those packages which have been found which have the type RUNTIME</dd> <dt><code>RUNTIME_PACKAGES_NOT_FOUND</code></dt> <dd>only those packages which have not been found which have the type RUNTIME</dd> </dl> <p>With the exception of the <code>ALL</code> value, these values can be combined in order to customize the output. For example:</p> <pre data-language=\"python\">feature_summary(WHAT ENABLED_FEATURES DISABLED_FEATURES)\n</pre> <p>If a FILENAME is given, the information is printed into this file. If APPEND is used, it is appended to this file, otherwise the file is overwritten if it already existed. If the VAR option is used, the information is “printed” into the specified variable. If FILENAME is not used, the information is printed to the terminal. Using the DESCRIPTION option a description or headline can be set which will be printed above the actual content. If INCLUDE_QUIET_PACKAGES is given, packages which have been searched with find_package(... QUIET) will also be listed. By default they are skipped. If FATAL_ON_MISSING_REQUIRED_PACKAGES is given, CMake will abort if a package which is marked as REQUIRED has not been found.</p> <p>Example 1, append everything to a file:</p> <pre data-language=\"python\">feature_summary(WHAT ALL\n                FILENAME ${CMAKE_BINARY_DIR}/all.log APPEND)\n</pre> <p>Example 2, print the enabled features into the variable enabledFeaturesText, including QUIET packages:</p> <pre data-language=\"python\">feature_summary(WHAT ENABLED_FEATURES\n                INCLUDE_QUIET_PACKAGES\n                DESCRIPTION \"Enabled Features:\"\n                VAR enabledFeaturesText)\nmessage(STATUS \"${enabledFeaturesText}\")\n</pre> <pre data-language=\"python\">SET_PACKAGE_PROPERTIES(&lt;name&gt; PROPERTIES\n                       [ URL &lt;url&gt; ]\n                       [ DESCRIPTION &lt;description&gt; ]\n                       [ TYPE (RUNTIME|OPTIONAL|RECOMMENDED|REQUIRED) ]\n                       [ PURPOSE &lt;purpose&gt; ]\n                      )\n</pre> <p>Use this macro to set up information about the named package, which can then be displayed via FEATURE_SUMMARY(). This can be done either directly in the Find-module or in the project which uses the module after the find_package() call. The features for which information can be set are added automatically by the find_package() command.</p> <p>URL: this should be the homepage of the package, or something similar. Ideally this is set already directly in the Find-module.</p> <p>DESCRIPTION: A short description what that package is, at most one sentence. Ideally this is set already directly in the Find-module.</p> <p>TYPE: What type of dependency has the using project on that package. Default is OPTIONAL. In this case it is a package which can be used by the project when available at buildtime, but it also work without. RECOMMENDED is similar to OPTIONAL, i.e. the project will build if the package is not present, but the functionality of the resulting binaries will be severly limited. If a REQUIRED package is not available at buildtime, the project may not even build. This can be combined with the FATAL_ON_MISSING_REQUIRED_PACKAGES argument for feature_summary(). Last, a RUNTIME package is a package which is actually not used at all during the build, but which is required for actually running the resulting binaries. So if such a package is missing, the project can still be built, but it may not work later on. If set_package_properties() is called multiple times for the same package with different TYPEs, the TYPE is only changed to higher TYPEs ( RUNTIME &lt; OPTIONAL &lt; RECOMMENDED &lt; REQUIRED ), lower TYPEs are ignored. The TYPE property is project-specific, so it cannot be set by the Find-module, but must be set in the project.</p> <p>PURPOSE: This describes which features this package enables in the project, i.e. it tells the user what functionality he gets in the resulting binaries. If set_package_properties() is called multiple times for a package, all PURPOSE properties are appended to a list of purposes of the package in the project. As the TYPE property, also the PURPOSE property is project-specific, so it cannot be set by the Find-module, but must be set in the project.</p> <p>Example for setting the info for a package:</p> <pre data-language=\"python\">find_package(LibXml2)\nset_package_properties(LibXml2 PROPERTIES\n                       DESCRIPTION \"A XML processing library.\"\n                       URL \"http://xmlsoft.org/\")\n</pre> <pre data-language=\"python\">set_package_properties(LibXml2 PROPERTIES\n                       TYPE RECOMMENDED\n                       PURPOSE \"Enables HTML-import in MyWordProcessor\")\n...\nset_package_properties(LibXml2 PROPERTIES\n                       TYPE OPTIONAL\n                       PURPOSE \"Enables odt-export in MyWordProcessor\")\n</pre> <pre data-language=\"python\">find_package(DBUS)\nset_package_properties(DBUS PROPERTIES\n  TYPE RUNTIME\n  PURPOSE \"Necessary to disable the screensaver during a presentation\" )\n</pre> <pre data-language=\"python\">ADD_FEATURE_INFO(&lt;name&gt; &lt;enabled&gt; &lt;description&gt;)\n</pre> <p>Use this macro to add information about a feature with the given &lt;name&gt;. &lt;enabled&gt; contains whether this feature is enabled or not, &lt;description&gt; is a text describing the feature. The information can be displayed using feature_summary() for ENABLED_FEATURES and DISABLED_FEATURES respectively.</p> <p>Example for setting the info for a feature:</p> <pre data-language=\"python\">option(WITH_FOO \"Help for foo\" ON)\nadd_feature_info(Foo WITH_FOO \"The Foo feature provides very cool stuff.\")\n</pre> <p>The following macros are provided for compatibility with previous CMake versions:</p> <pre data-language=\"python\">SET_PACKAGE_INFO(&lt;name&gt; &lt;description&gt; [&lt;url&gt; [&lt;purpose&gt;] ] )\n</pre> <p>Use this macro to set up information about the named package, which can then be displayed via FEATURE_SUMMARY(). This can be done either directly in the Find-module or in the project which uses the module after the find_package() call. The features for which information can be set are added automatically by the find_package() command.</p> <pre data-language=\"python\">PRINT_ENABLED_FEATURES()\n</pre> <p>Does the same as FEATURE_SUMMARY(WHAT ENABLED_FEATURES DESCRIPTION “Enabled features:”)</p> <pre data-language=\"python\">PRINT_DISABLED_FEATURES()\n</pre> <p>Does the same as FEATURE_SUMMARY(WHAT DISABLED_FEATURES DESCRIPTION “Disabled features:”)</p> <pre data-language=\"python\">SET_FEATURE_INFO(&lt;name&gt; &lt;description&gt; [&lt;url&gt;] )\n</pre> <p>Does the same as SET_PACKAGE_INFO(&lt;name&gt; &lt;description&gt; &lt;url&gt; )</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FeatureSummary.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FeatureSummary.html</a>\n  </p>\n</div>\n","module/externalproject":"<h1 id=\"module:ExternalProject\">ExternalProject</h1> <p id=\"externalproject\">Create custom targets to build projects in external trees</p> <dl class=\"command\"> <dt id=\"command:externalproject_add\"><code>ExternalProject_Add</code></dt> <dd>\n<p>The <code>ExternalProject_Add</code> function creates a custom target to drive download, update/patch, configure, build, install and test steps of an external project:</p> <pre data-language=\"python\">ExternalProject_Add(&lt;name&gt; [&lt;option&gt;...])\n</pre> <p>General options are:</p> <dl class=\"docutils\"> <dt><code>DEPENDS &lt;projects&gt;...</code></dt> <dd>Targets on which the project depends</dd> <dt><code>PREFIX &lt;dir&gt;</code></dt> <dd>Root dir for entire project</dd> <dt><code>LIST_SEPARATOR &lt;sep&gt;</code></dt> <dd>Sep to be replaced by ; in cmd lines</dd> <dt><code>TMP_DIR &lt;dir&gt;</code></dt> <dd>Directory to store temporary files</dd> <dt><code>STAMP_DIR &lt;dir&gt;</code></dt> <dd>Directory to store step timestamps</dd> <dt><code>EXCLUDE_FROM_ALL 1</code></dt> <dd>The “all” target does not depend on this</dd> </dl> <p>Download step options are:</p> <dl class=\"docutils\"> <dt><code>DOWNLOAD_NAME &lt;fname&gt;</code></dt> <dd>File name to store (if not end of URL)</dd> <dt><code>DOWNLOAD_DIR &lt;dir&gt;</code></dt> <dd>Directory to store downloaded files</dd> <dt><code>DOWNLOAD_COMMAND &lt;cmd&gt;...</code></dt> <dd>Command to download source tree</dd> <dt><code>DOWNLOAD_NO_PROGRESS 1</code></dt> <dd>Disable download progress reports</dd> <dt><code>CVS_REPOSITORY &lt;cvsroot&gt;</code></dt> <dd>CVSROOT of CVS repository</dd> <dt><code>CVS_MODULE &lt;mod&gt;</code></dt> <dd>Module to checkout from CVS repo</dd> <dt><code>CVS_TAG &lt;tag&gt;</code></dt> <dd>Tag to checkout from CVS repo</dd> <dt><code>SVN_REPOSITORY &lt;url&gt;</code></dt> <dd>URL of Subversion repo</dd> <dt><code>SVN_REVISION -r&lt;rev&gt;</code></dt> <dd>Revision to checkout from Subversion repo</dd> <dt><code>SVN_USERNAME &lt;username&gt;</code></dt> <dd>Username for Subversion checkout and update</dd> <dt><code>SVN_PASSWORD &lt;password&gt;</code></dt> <dd>Password for Subversion checkout and update</dd> <dt><code>SVN_TRUST_CERT 1</code></dt> <dd>Trust the Subversion server site certificate</dd> <dt><code>GIT_REPOSITORY &lt;url&gt;</code></dt> <dd>URL of git repo</dd> <dt><code>GIT_TAG &lt;tag&gt;</code></dt> <dd>Git branch name, commit id or tag</dd> <dt><code>GIT_REMOTE_NAME &lt;name&gt;</code></dt> <dd>The optional name of the remote, default to <code>origin</code>\n</dd> <dt><code>GIT_SUBMODULES &lt;module&gt;...</code></dt> <dd>Git submodules that shall be updated, all if empty</dd> <dt><code>HG_REPOSITORY &lt;url&gt;</code></dt> <dd>URL of mercurial repo</dd> <dt><code>HG_TAG &lt;tag&gt;</code></dt> <dd>Mercurial branch name, commit id or tag</dd> <dt><code>URL /.../src.tgz</code></dt> <dd>Full path or URL of source</dd> <dt><code>URL_HASH ALGO=value</code></dt> <dd>Hash of file at URL</dd> <dt><code>URL_MD5 md5</code></dt> <dd>Equivalent to URL_HASH MD5=md5</dd> <dt><code>TLS_VERIFY &lt;bool&gt;</code></dt> <dd>Should certificate for https be checked</dd> <dt><code>TLS_CAINFO &lt;file&gt;</code></dt> <dd>Path to a certificate authority file</dd> <dt><code>TIMEOUT &lt;seconds&gt;</code></dt> <dd>Time allowed for file download operations</dd> </dl> <p>Update/Patch step options are:</p> <dl class=\"docutils\"> <dt><code>UPDATE_COMMAND &lt;cmd&gt;...</code></dt> <dd>Source work-tree update command</dd> <dt><code>UPDATE_DISCONNECTED 1</code></dt> <dd>Never update automatically from the remote repository</dd> <dt><code>PATCH_COMMAND &lt;cmd&gt;...</code></dt> <dd>Command to patch downloaded source</dd> </dl> <p>Configure step options are:</p> <dl class=\"docutils\"> <dt><code>SOURCE_DIR &lt;dir&gt;</code></dt> <dd>Source dir to be used for build</dd> <dt><code>CONFIGURE_COMMAND &lt;cmd&gt;...</code></dt> <dd>Build tree configuration command</dd> <dt><code>CMAKE_COMMAND /.../cmake</code></dt> <dd>Specify alternative cmake executable</dd> <dt><code>CMAKE_GENERATOR &lt;gen&gt;</code></dt> <dd>Specify generator for native build</dd> <dt><code>CMAKE_GENERATOR_PLATFORM &lt;platform&gt;</code></dt> <dd>Generator-specific platform name</dd> <dt><code>CMAKE_GENERATOR_TOOLSET &lt;toolset&gt;</code></dt> <dd>Generator-specific toolset name</dd> <dt><code>CMAKE_ARGS &lt;arg&gt;...</code></dt> <dd>Arguments to CMake command line. These arguments are passed to CMake command line, and can contain arguments other than cache values, see also <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>CMake Options</code></a>. Arguments in the form <code>-Dvar:string=on</code> are always passed to the command line, and therefore cannot be changed by the user. Arguments may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>.</dd> <dt><code>CMAKE_CACHE_ARGS &lt;arg&gt;...</code></dt> <dd>Initial cache arguments, of the form <code>-Dvar:string=on</code>. These arguments are written in a pre-load a script that populates CMake cache, see also <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-1-manual:cmake(1)\"><code>cmake -C</code></a>. This allows to overcome command line length limits. These arguments are <a class=\"reference internal\" href=\"../command/set#command:set\" title=\"set\" id=\"index-0-command:set\"><code>set()</code></a> using the <code>FORCE</code> argument, and therefore cannot be changed by the user. Arguments may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-1-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>.</dd> <dt><code>CMAKE_CACHE_DEFAULT_ARGS &lt;arg&gt;...</code></dt> <dd>Initial default cache arguments, of the form <code>-Dvar:string=on</code>. These arguments are written in a pre-load a script that populates CMake cache, see also <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-2-manual:cmake(1)\"><code>cmake -C</code></a>. This allows to overcome command line length limits. These arguments can be used as default value that will be set if no previous value is found in the cache, and that the user can change later. Arguments may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-2-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>.</dd> </dl> <p>Build step options are:</p> <dl class=\"docutils\"> <dt><code>BINARY_DIR &lt;dir&gt;</code></dt> <dd>Specify build dir location</dd> <dt><code>BUILD_COMMAND &lt;cmd&gt;...</code></dt> <dd>Command to drive the native build</dd> <dt><code>BUILD_IN_SOURCE 1</code></dt> <dd>Use source dir for build dir</dd> <dt><code>BUILD_ALWAYS 1</code></dt> <dd>No stamp file, build step always runs</dd> <dt><code>BUILD_BYPRODUCTS &lt;file&gt;...</code></dt> <dd>Files that will be generated by the build command but may or may not have their modification time updated by subsequent builds.</dd> </dl> <p>Install step options are:</p> <dl class=\"docutils\"> <dt><code>INSTALL_DIR &lt;dir&gt;</code></dt> <dd>Installation prefix</dd> <dt><code>INSTALL_COMMAND &lt;cmd&gt;...</code></dt> <dd>Command to drive install after build</dd> </dl> <p>Test step options are:</p> <dl class=\"docutils\"> <dt><code>TEST_BEFORE_INSTALL 1</code></dt> <dd>Add test step executed before install step</dd> <dt><code>TEST_AFTER_INSTALL 1</code></dt> <dd>Add test step executed after install step</dd> <dt><code>TEST_EXCLUDE_FROM_MAIN 1</code></dt> <dd>Main target does not depend on the test step</dd> <dt><code>TEST_COMMAND &lt;cmd&gt;...</code></dt> <dd>Command to drive test</dd> </dl> <p>Output logging options are:</p> <dl class=\"docutils\"> <dt><code>LOG_DOWNLOAD 1</code></dt> <dd>Wrap download in script to log output</dd> <dt><code>LOG_UPDATE 1</code></dt> <dd>Wrap update in script to log output</dd> <dt><code>LOG_CONFIGURE 1</code></dt> <dd>Wrap configure in script to log output</dd> <dt><code>LOG_BUILD 1</code></dt> <dd>Wrap build in script to log output</dd> <dt><code>LOG_TEST 1</code></dt> <dd>Wrap test in script to log output</dd> <dt><code>LOG_INSTALL 1</code></dt> <dd>Wrap install in script to log output</dd> </dl> <p>Steps can be given direct access to the terminal if possible. With the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a> generator, this places the steps in the <code>console</code> <a class=\"reference internal\" href=\"../prop_gbl/job_pools#prop_gbl:JOB_POOLS\" title=\"JOB_POOLS\" id=\"index-0-prop_gbl:JOB_POOLS\"><code>pool</code></a>. Options are:</p> <dl class=\"docutils\"> <dt><code>USES_TERMINAL_DOWNLOAD 1</code></dt> <dd>Give download terminal access.</dd> <dt><code>USES_TERMINAL_UPDATE 1</code></dt> <dd>Give update terminal access.</dd> <dt><code>USES_TERMINAL_CONFIGURE 1</code></dt> <dd>Give configure terminal access.</dd> <dt><code>USES_TERMINAL_BUILD 1</code></dt> <dd>Give build terminal access.</dd> <dt><code>USES_TERMINAL_TEST 1</code></dt> <dd>Give test terminal access.</dd> <dt><code>USES_TERMINAL_INSTALL 1</code></dt> <dd>Give install terminal access.</dd> </dl> <p>Other options are:</p> <dl class=\"docutils\"> <dt><code>STEP_TARGETS &lt;step-target&gt;...</code></dt> <dd>Generate custom targets for these steps</dd> <dt><code>INDEPENDENT_STEP_TARGETS &lt;step-target&gt;...</code></dt> <dd>Generate custom targets for these steps that do not depend on other external projects even if a dependency is set</dd> </dl> <p>The <code>*_DIR</code> options specify directories for the project, with default directories computed as follows. If the <code>PREFIX</code> option is given to <code>ExternalProject_Add()</code> or the <code>EP_PREFIX</code> directory property is set, then an external project is built and installed under the specified prefix:</p> <pre data-language=\"python\">TMP_DIR      = &lt;prefix&gt;/tmp\nSTAMP_DIR    = &lt;prefix&gt;/src/&lt;name&gt;-stamp\nDOWNLOAD_DIR = &lt;prefix&gt;/src\nSOURCE_DIR   = &lt;prefix&gt;/src/&lt;name&gt;\nBINARY_DIR   = &lt;prefix&gt;/src/&lt;name&gt;-build\nINSTALL_DIR  = &lt;prefix&gt;\n</pre> <p>Otherwise, if the <code>EP_BASE</code> directory property is set then components of an external project are stored under the specified base:</p> <pre data-language=\"python\">TMP_DIR      = &lt;base&gt;/tmp/&lt;name&gt;\nSTAMP_DIR    = &lt;base&gt;/Stamp/&lt;name&gt;\nDOWNLOAD_DIR = &lt;base&gt;/Download/&lt;name&gt;\nSOURCE_DIR   = &lt;base&gt;/Source/&lt;name&gt;\nBINARY_DIR   = &lt;base&gt;/Build/&lt;name&gt;\nINSTALL_DIR  = &lt;base&gt;/Install/&lt;name&gt;\n</pre> <p>If no <code>PREFIX</code>, <code>EP_PREFIX</code>, or <code>EP_BASE</code> is specified then the default is to set <code>PREFIX</code> to <code>&lt;name&gt;-prefix</code>. Relative paths are interpreted with respect to the build directory corresponding to the source directory in which <code>ExternalProject_Add</code> is invoked.</p> <p>If <code>SOURCE_DIR</code> is explicitly set to an existing directory the project will be built from it. Otherwise a download step must be specified using one of the <code>DOWNLOAD_COMMAND</code>, <code>CVS_*</code>, <code>SVN_*</code>, or <code>URL</code> options. The <code>URL</code> option may refer locally to a directory or source tarball, or refer to a remote tarball (e.g. <code>http://.../src.tgz</code>).</p> <p>If <code>UPDATE_DISCONNECTED</code> is set, the update step is not executed automatically when building the main target. The update step can still be added as a step target and called manually. This is useful if you want to allow to build the project when you are disconnected from the network (you might still need the network for the download step). This is disabled by default. The directory property <code>EP_UPDATE_DISCONNECTED</code> can be used to change the default value for all the external projects in the current directory and its subdirectories.</p> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:externalproject_add_step\"><code>ExternalProject_Add_Step</code></dt> <dd>\n<p>The <code>ExternalProject_Add_Step</code> function adds a custom step to an external project:</p> <pre data-language=\"python\">ExternalProject_Add_Step(&lt;name&gt; &lt;step&gt; [&lt;option&gt;...])\n</pre> <p>Options are:</p> <dl class=\"docutils\"> <dt><code>COMMAND &lt;cmd&gt;...</code></dt> <dd>Command line invoked by this step</dd> <dt><code>COMMENT \"&lt;text&gt;...\"</code></dt> <dd>Text printed when step executes</dd> <dt><code>DEPENDEES &lt;step&gt;...</code></dt> <dd>Steps on which this step depends</dd> <dt><code>DEPENDERS &lt;step&gt;...</code></dt> <dd>Steps that depend on this step</dd> <dt><code>DEPENDS &lt;file&gt;...</code></dt> <dd>Files on which this step depends</dd> <dt><code>BYPRODUCTS &lt;file&gt;...</code></dt> <dd>Files that will be generated by this step but may or may not have their modification time updated by subsequent builds.</dd> <dt><code>ALWAYS 1</code></dt> <dd>No stamp file, step always runs</dd> <dt><code>EXCLUDE_FROM_MAIN 1</code></dt> <dd>Main target does not depend on this step</dd> <dt><code>WORKING_DIRECTORY &lt;dir&gt;</code></dt> <dd>Working directory for command</dd> <dt><code>LOG 1</code></dt> <dd>Wrap step in script to log output</dd> <dt><code>USES_TERMINAL 1</code></dt> <dd>Give the step direct access to the terminal if possible.</dd> </dl> <p>The command line, comment, working directory, and byproducts of every standard and custom step are processed to replace tokens <code>&lt;SOURCE_DIR&gt;</code>, <code>&lt;BINARY_DIR&gt;</code>, <code>&lt;INSTALL_DIR&gt;</code>, and <code>&lt;TMP_DIR&gt;</code> with corresponding property values.</p> </dd>\n</dl> <p>Any builtin step that specifies a <code>&lt;step&gt;_COMMAND cmd...</code> or custom step that specifies a <code>COMMAND cmd...</code> may specify additional command lines using the form <code>COMMAND cmd...</code>. At build time the commands will be executed in order and aborted if any one fails. For example:</p> <pre data-language=\"python\">... BUILD_COMMAND make COMMAND echo done ...\n</pre> <p>specifies to run <code>make</code> and then <code>echo done</code> during the build step. Whether the current working directory is preserved between commands is not defined. Behavior of shell operators like <code>&amp;&amp;</code> is not defined.</p> <p>Arguments to <code>&lt;step&gt;_COMMAND</code> or <code>COMMAND</code> options may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-3-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>.</p> <dl class=\"command\"> <dt id=\"command:externalproject_get_property\"><code>ExternalProject_Get_Property</code></dt> <dd>\n<p>The <code>ExternalProject_Get_Property</code> function retrieves external project target properties:</p> <pre data-language=\"python\">ExternalProject_Get_Property(&lt;name&gt; [prop1 [prop2 [...]]])\n</pre> <p>It stores property values in variables of the same name. Property names correspond to the keyword argument names of <code>ExternalProject_Add</code>.</p> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:externalproject_add_steptargets\"><code>ExternalProject_Add_StepTargets</code></dt> <dd>\n<p>The <code>ExternalProject_Add_StepTargets</code> function generates custom targets for the steps listed:</p> <pre data-language=\"python\">ExternalProject_Add_StepTargets(&lt;name&gt; [NO_DEPENDS] [step1 [step2 [...]]])\n</pre> </dd>\n</dl> <p>If <code>NO_DEPENDS</code> is set, the target will not depend on the dependencies of the complete project. This is usually safe to use for the download, update, and patch steps that do not require that all the dependencies are updated and built. Using <code>NO_DEPENDS</code> for other of the default steps might break parallel builds, so you should avoid, it. For custom steps, you should consider whether or not the custom commands requires that the dependencies are configured, built and installed.</p> <p>If <code>STEP_TARGETS</code> or <code>INDEPENDENT_STEP_TARGETS</code> is set then <code>ExternalProject_Add_StepTargets</code> is automatically called at the end of matching calls to <code>ExternalProject_Add_Step</code>. Pass <code>STEP_TARGETS</code> or <code>INDEPENDENT_STEP_TARGETS</code> explicitly to individual <code>ExternalProject_Add</code> calls, or implicitly to all <code>ExternalProject_Add</code> calls by setting the directory properties <code>EP_STEP_TARGETS</code> and <code>EP_INDEPENDENT_STEP_TARGETS</code>. The <code>INDEPENDENT</code> version of the argument and of the property will call <code>ExternalProject_Add_StepTargets</code> with the <code>NO_DEPENDS</code> argument.</p> <p>If <code>STEP_TARGETS</code> and <code>INDEPENDENT_STEP_TARGETS</code> are not set, clients may still manually call <code>ExternalProject_Add_StepTargets</code> after calling <code>ExternalProject_Add</code> or <code>ExternalProject_Add_Step</code>.</p> <p>This functionality is provided to make it easy to drive the steps independently of each other by specifying targets on build command lines. For example, you may be submitting to a sub-project based dashboard, where you want to drive the configure portion of the build, then submit to the dashboard, followed by the build portion, followed by tests. If you invoke a custom target that depends on a step halfway through the step dependency chain, then all the previous steps will also run to ensure everything is up to date.</p> <p>For example, to drive configure, build and test steps independently for each <code>ExternalProject_Add</code> call in your project, write the following line prior to any <code>ExternalProject_Add</code> calls in your <code>CMakeLists.txt</code> file:</p> <pre data-language=\"python\">set_property(DIRECTORY PROPERTY EP_STEP_TARGETS configure build test)\n</pre> <dl class=\"command\"> <dt id=\"command:externalproject_add_stepdependencies\"><code>ExternalProject_Add_StepDependencies</code></dt> <dd>\n<p>The <code>ExternalProject_Add_StepDependencies</code> function add some dependencies for some external project step:</p> <pre data-language=\"python\">ExternalProject_Add_StepDependencies(&lt;name&gt; &lt;step&gt; [target1 [target2 [...]]])\n</pre> <p>This function takes care to set both target and file level dependencies, and will ensure that parallel builds will not break. It should be used instead of <a class=\"reference internal\" href=\"../command/add_dependencies#command:add_dependencies\" title=\"add_dependencies\" id=\"index-0-command:add_dependencies\"><code>add_dependencies()</code></a> when adding a dependency for some of the step targets generated by <code>ExternalProject</code>.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/ExternalProject.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/ExternalProject.html</a>\n  </p>\n</div>\n","module/findarmadillo":"<h1 id=\"module:FindArmadillo\">FindArmadillo</h1> <p id=\"findarmadillo\">Find Armadillo</p> <p>Find the Armadillo C++ library</p> <p>Using Armadillo:</p> <pre data-language=\"python\">find_package(Armadillo REQUIRED)\ninclude_directories(${ARMADILLO_INCLUDE_DIRS})\nadd_executable(foo foo.cc)\ntarget_link_libraries(foo ${ARMADILLO_LIBRARIES})\n</pre> <p>This module sets the following variables:</p> <pre data-language=\"python\">ARMADILLO_FOUND - set to true if the library is found\nARMADILLO_INCLUDE_DIRS - list of required include directories\nARMADILLO_LIBRARIES - list of libraries to be linked\nARMADILLO_VERSION_MAJOR - major version number\nARMADILLO_VERSION_MINOR - minor version number\nARMADILLO_VERSION_PATCH - patch version number\nARMADILLO_VERSION_STRING - version number as a string (ex: \"1.0.4\")\nARMADILLO_VERSION_NAME - name of the version (ex: \"Antipodean Antileech\")\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindArmadillo.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindArmadillo.html</a>\n  </p>\n</div>\n","module/findaspell":"<h1 id=\"module:FindASPELL\">FindASPELL</h1> <p id=\"findaspell\">Try to find ASPELL</p> <p>Once done this will define</p> <pre data-language=\"python\">ASPELL_FOUND - system has ASPELL\nASPELL_EXECUTABLE - the ASPELL executable\nASPELL_INCLUDE_DIR - the ASPELL include directory\nASPELL_LIBRARIES - The libraries needed to use ASPELL\nASPELL_DEFINITIONS - Compiler switches required for using ASPELL\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindASPELL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindASPELL.html</a>\n  </p>\n</div>\n","module/findavifile":"<h1 id=\"module:FindAVIFile\">FindAVIFile</h1> <p id=\"findavifile\">Locate AVIFILE library and include paths</p> <p>AVIFILE (<a class=\"reference external\" href=\"http://avifile.sourceforge.net/)is\">http://avifile.sourceforge.net/)is</a> a set of libraries for i386 machines to use various AVI codecs. Support is limited beyond Linux. Windows provides native AVI support, and so doesn’t need this library. This module defines</p> <pre data-language=\"python\">AVIFILE_INCLUDE_DIR, where to find avifile.h , etc.\nAVIFILE_LIBRARIES, the libraries to link against\nAVIFILE_DEFINITIONS, definitions to use when compiling\nAVIFILE_FOUND, If false, don't try to use AVIFILE\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindAVIFile.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindAVIFile.html</a>\n  </p>\n</div>\n","module/findbison":"<h1 id=\"module:FindBISON\">FindBISON</h1> <p id=\"findbison\">Find <code>bison</code> executable and provide a macro to generate custom build rules.</p> <p>The module defines the following variables:</p> <dl class=\"docutils\"> <dt><code>BISON_EXECUTABLE</code></dt> <dd>path to the <code>bison</code> program</dd> <dt><code>BISON_VERSION</code></dt> <dd>version of <code>bison</code>\n</dd> <dt><code>BISON_FOUND</code></dt> <dd>true if the program was found</dd> </dl> <p>The minimum required version of <code>bison</code> can be specified using the standard CMake syntax, e.g. <code>find_package(BISON 2.1.3)</code>.</p> <p>If <code>bison</code> is found, the module defines the macro:</p> <pre data-language=\"python\">BISON_TARGET(&lt;Name&gt; &lt;YaccInput&gt; &lt;CodeOutput&gt;\n             [COMPILE_FLAGS &lt;flags&gt;]\n             [DEFINES_FILE &lt;file&gt;]\n             [VERBOSE &lt;file&gt;]\n             )\n</pre> <p>which will create a custom rule to generate a parser. <code>&lt;YaccInput&gt;</code> is the path to a yacc file. <code>&lt;CodeOutput&gt;</code> is the name of the source file generated by bison. A header file is also be generated, and contains the token list.</p> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>COMPILE_FLAGS &lt;flags&gt;</code></dt> <dd>Specify flags to be added to the <code>bison</code> command line.</dd> <dt><code>DEFINES_FILE &lt;file&gt;</code></dt> <dd>Specify a non-default header <code>&lt;file&gt;</code> to be generated by <code>bison</code>.</dd> <dt><code>VERBOSE &lt;file&gt;</code></dt> <dd>Tell <code>bison</code> to write verbose descriptions of the grammar and parser to the given <code>&lt;file&gt;</code>.</dd> </dl> <p>The macro defines the following variables:</p> <dl class=\"docutils\"> <dt><code>BISON_&lt;Name&gt;_DEFINED</code></dt> <dd>true is the macro ran successfully</dd> <dt><code>BISON_&lt;Name&gt;_INPUT</code></dt> <dd>The input source file, an alias for &lt;YaccInput&gt;</dd> <dt><code>BISON_&lt;Name&gt;_OUTPUT_SOURCE</code></dt> <dd>The source file generated by bison</dd> <dt><code>BISON_&lt;Name&gt;_OUTPUT_HEADER</code></dt> <dd>The header file generated by bison</dd> <dt><code>BISON_&lt;Name&gt;_OUTPUTS</code></dt> <dd>The sources files generated by bison</dd> <dt><code>BISON_&lt;Name&gt;_COMPILE_FLAGS</code></dt> <dd>Options used in the <code>bison</code> command line</dd> </dl> <p>Example usage:</p> <pre data-language=\"cmake\">find_package(BISON)\nBISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp\n             DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/parser.h)\nadd_executable(Foo main.cpp ${BISON_MyParser_OUTPUTS})\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindBISON.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindBISON.html</a>\n  </p>\n</div>\n","module/findblas":"<h1 id=\"module:FindBLAS\">FindBLAS</h1> <p id=\"findblas\">Find BLAS library</p> <p>This module finds an installed fortran library that implements the BLAS linear-algebra interface (see <a class=\"reference external\" href=\"http://www.netlib.org/blas/\">http://www.netlib.org/blas/</a>). The list of libraries searched for is taken from the autoconf macro file, acx_blas.m4 (distributed at <a class=\"reference external\" href=\"http://ac-archive.sourceforge.net/ac-archive/acx_blas.html\">http://ac-archive.sourceforge.net/ac-archive/acx_blas.html</a>).</p> <p>This module sets the following variables:</p> <pre data-language=\"python\">BLAS_FOUND - set to true if a library implementing the BLAS interface\n  is found\nBLAS_LINKER_FLAGS - uncached list of required linker flags (excluding -l\n  and -L).\nBLAS_LIBRARIES - uncached list of libraries (using full path name) to\n  link against to use BLAS\nBLAS95_LIBRARIES - uncached list of libraries (using full path name)\n  to link against to use BLAS95 interface\nBLAS95_FOUND - set to true if a library implementing the BLAS f95 interface\n  is found\nBLA_STATIC  if set on this determines what kind of linkage we do (static)\nBLA_VENDOR  if set checks only the specified vendor, if not set checks\n   all the possibilities\nBLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK\n</pre> <p>######### ## List of vendors (BLA_VENDOR) valid in this module # Goto,ATLAS PhiPACK,CXML,DXML,SunPerf,SCSL,SGIMATH,IBMESSL,Intel10_32 (intel mkl v10 32 bit),Intel10_64lp (intel mkl v10 64 bit,lp thread model, lp64 model), # Intel10_64lp_seq (intel mkl v10 64 bit,sequential code, lp64 model), # Intel( older versions of mkl 32 and 64 bit), ACML,ACML_MP,ACML_GPU,Apple, NAS, Generic C/CXX should be enabled to use Intel mkl</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindBLAS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindBLAS.html</a>\n  </p>\n</div>\n","module/findbacktrace":"<h1 id=\"module:FindBacktrace\">FindBacktrace</h1> <p id=\"findbacktrace\">Find provider for backtrace(3).</p> <p>Checks if OS supports backtrace(3) via either libc or custom library. This module defines the following variables:</p> <dl class=\"docutils\"> <dt><code>Backtrace_HEADER</code></dt> <dd>The header file needed for backtrace(3). Cached. Could be forcibly set by user.</dd> <dt><code>Backtrace_INCLUDE_DIRS</code></dt> <dd>The include directories needed to use backtrace(3) header.</dd> <dt><code>Backtrace_LIBRARIES</code></dt> <dd>The libraries (linker flags) needed to use backtrace(3), if any.</dd> <dt><code>Backtrace_FOUND</code></dt> <dd>Is set if and only if backtrace(3) support detected.</dd> </dl> <p>The following cache variables are also available to set or use:</p> <dl class=\"docutils\"> <dt><code>Backtrace_LIBRARY</code></dt> <dd>The external library providing backtrace, if any.</dd> <dt><code>Backtrace_INCLUDE_DIR</code></dt> <dd>The directory holding the backtrace(3) header.</dd> </dl> <p>Typical usage is to generate of header file using configure_file() with the contents like the following:</p> <pre data-language=\"python\">#cmakedefine01 Backtrace_FOUND\n#if Backtrace_FOUND\n# include &lt;${Backtrace_HEADER}&gt;\n#endif\n</pre> <p>And then reference that generated header file in actual source.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindBacktrace.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindBacktrace.html</a>\n  </p>\n</div>\n","module/findbullet":"<h1 id=\"module:FindBullet\">FindBullet</h1> <p id=\"findbullet\">Try to find the Bullet physics engine</p> <pre data-language=\"python\">This module defines the following variables\n</pre> <pre data-language=\"python\">BULLET_FOUND - Was bullet found\nBULLET_INCLUDE_DIRS - the Bullet include directories\nBULLET_LIBRARIES - Link to this, by default it includes\n                   all bullet components (Dynamics,\n                   Collision, LinearMath, &amp; SoftBody)\n</pre> <pre data-language=\"python\">This module accepts the following variables\n</pre> <pre data-language=\"python\">BULLET_ROOT - Can be set to bullet install path or Windows build path\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindBullet.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindBullet.html</a>\n  </p>\n</div>\n","module/findboost":"<h1 id=\"module:FindBoost\">FindBoost</h1> <p id=\"findboost\">Find Boost include dirs and libraries</p> <p>Use this module by invoking find_package with the form:</p> <pre data-language=\"python\">find_package(Boost\n  [version] [EXACT]      # Minimum or EXACT version e.g. 1.36.0\n  [REQUIRED]             # Fail with error if Boost is not found\n  [COMPONENTS &lt;libs&gt;...] # Boost libraries by their canonical name\n  )                      # e.g. \"date_time\" for \"libboost_date_time\"\n</pre> <p>This module finds headers and requested component libraries OR a CMake package configuration file provided by a “Boost CMake” build. For the latter case skip to the “Boost CMake” section below. For the former case results are reported in variables:</p> <pre data-language=\"python\">Boost_FOUND            - True if headers and requested libraries were found\nBoost_INCLUDE_DIRS     - Boost include directories\nBoost_LIBRARY_DIRS     - Link directories for Boost libraries\nBoost_LIBRARIES        - Boost component libraries to be linked\nBoost_&lt;C&gt;_FOUND        - True if component &lt;C&gt; was found (&lt;C&gt; is upper-case)\nBoost_&lt;C&gt;_LIBRARY      - Libraries to link for component &lt;C&gt; (may include\n                         target_link_libraries debug/optimized keywords)\nBoost_VERSION          - BOOST_VERSION value from boost/version.hpp\nBoost_LIB_VERSION      - Version string appended to library filenames\nBoost_MAJOR_VERSION    - Boost major version number (X in X.y.z)\nBoost_MINOR_VERSION    - Boost minor version number (Y in x.Y.z)\nBoost_SUBMINOR_VERSION - Boost subminor version number (Z in x.y.Z)\nBoost_LIB_DIAGNOSTIC_DEFINITIONS (Windows)\n                       - Pass to add_definitions() to have diagnostic\n                         information about Boost's automatic linking\n                         displayed during compilation\n</pre> <p>This module reads hints about search locations from variables:</p> <pre data-language=\"python\">BOOST_ROOT             - Preferred installation prefix\n (or BOOSTROOT)\nBOOST_INCLUDEDIR       - Preferred include directory e.g. &lt;prefix&gt;/include\nBOOST_LIBRARYDIR       - Preferred library directory e.g. &lt;prefix&gt;/lib\nBoost_NO_SYSTEM_PATHS  - Set to ON to disable searching in locations not\n                         specified by these hint variables. Default is OFF.\nBoost_ADDITIONAL_VERSIONS\n                       - List of Boost versions not known to this module\n                         (Boost install locations may contain the version)\n</pre> <p>and saves search results persistently in CMake cache entries:</p> <pre data-language=\"python\">Boost_INCLUDE_DIR         - Directory containing Boost headers\nBoost_LIBRARY_DIR_RELEASE - Directory containing release Boost libraries\nBoost_LIBRARY_DIR_DEBUG   - Directory containing debug Boost libraries\nBoost_&lt;C&gt;_LIBRARY_DEBUG   - Component &lt;C&gt; library debug variant\nBoost_&lt;C&gt;_LIBRARY_RELEASE - Component &lt;C&gt; library release variant\n</pre> <p>The following <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets are also defined:</p> <pre data-language=\"python\">Boost::boost                  - Target for header-only dependencies\n                                (Boost include directory)\nBoost::&lt;C&gt;                    - Target for specific component dependency\n                                (shared or static library); &lt;C&gt; is lower-\n                                case\nBoost::diagnostic_definitions - interface target to enable diagnostic\n                                information about Boost's automatic linking\n                                during compilation (adds BOOST_LIB_DIAGNOSTIC)\nBoost::disable_autolinking    - interface target to disable automatic\n                                linking with MSVC (adds BOOST_ALL_NO_LIB)\nBoost::dynamic_linking        - interface target to enable dynamic linking\n                                linking with MSVC (adds BOOST_ALL_DYN_LINK)\n</pre> <p>Implicit dependencies such as Boost::filesystem requiring Boost::system will be automatically detected and satisfied, even if system is not specified when using find_package and if Boost::system is not added to target_link_libraries. If using Boost::thread, then Thread::Thread will also be added automatically.</p> <p>It is important to note that the imported targets behave differently than variables created by this module: multiple calls to find_package(Boost) in the same directory or sub-directories with different options (e.g. static or shared) will not override the values of the targets created by the first call.</p> <p>Users may set these hints or results as cache entries. Projects should not read these entries directly but instead use the above result variables. Note that some hint names start in upper-case “BOOST”. One may specify these as environment variables if they are not specified as CMake variables or cache entries.</p> <p>This module first searches for the Boost header files using the above hint variables (excluding BOOST_LIBRARYDIR) and saves the result in Boost_INCLUDE_DIR. Then it searches for requested component libraries using the above hints (excluding BOOST_INCLUDEDIR and Boost_ADDITIONAL_VERSIONS), “lib” directories near Boost_INCLUDE_DIR, and the library name configuration settings below. It saves the library directories in Boost_LIBRARY_DIR_DEBUG and Boost_LIBRARY_DIR_RELEASE and individual library locations in Boost_&lt;C&gt;_LIBRARY_DEBUG and Boost_&lt;C&gt;_LIBRARY_RELEASE. When one changes settings used by previous searches in the same build tree (excluding environment variables) this module discards previous search results affected by the changes and searches again.</p> <p>Boost libraries come in many variants encoded in their file name. Users or projects may tell this module which variant to find by setting variables:</p> <pre data-language=\"python\">Boost_USE_MULTITHREADED  - Set to OFF to use the non-multithreaded\n                           libraries ('mt' tag).  Default is ON.\nBoost_USE_STATIC_LIBS    - Set to ON to force the use of the static\n                           libraries.  Default is OFF.\nBoost_USE_STATIC_RUNTIME - Set to ON or OFF to specify whether to use\n                           libraries linked statically to the C++ runtime\n                           ('s' tag).  Default is platform dependent.\nBoost_USE_DEBUG_RUNTIME  - Set to ON or OFF to specify whether to use\n                           libraries linked to the MS debug C++ runtime\n                           ('g' tag).  Default is ON.\nBoost_USE_DEBUG_PYTHON   - Set to ON to use libraries compiled with a\n                           debug Python build ('y' tag). Default is OFF.\nBoost_USE_STLPORT        - Set to ON to use libraries compiled with\n                           STLPort ('p' tag).  Default is OFF.\nBoost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS\n                         - Set to ON to use libraries compiled with\n                           STLPort deprecated \"native iostreams\"\n                           ('n' tag).  Default is OFF.\nBoost_COMPILER           - Set to the compiler-specific library suffix\n                           (e.g. \"-gcc43\").  Default is auto-computed\n                           for the C++ compiler in use.\nBoost_THREADAPI          - Suffix for \"thread\" component library name,\n                           such as \"pthread\" or \"win32\".  Names with\n                           and without this suffix will both be tried.\nBoost_NAMESPACE          - Alternate namespace used to build boost with\n                           e.g. if set to \"myboost\", will search for\n                           myboost_thread instead of boost_thread.\n</pre> <p>Other variables one may set to control this module are:</p> <pre data-language=\"python\">Boost_DEBUG              - Set to ON to enable debug output from FindBoost.\n                           Please enable this before filing any bug report.\nBoost_DETAILED_FAILURE_MSG\n                         - Set to ON to add detailed information to the\n                           failure message even when the REQUIRED option\n                           is not given to the find_package call.\nBoost_REALPATH           - Set to ON to resolve symlinks for discovered\n                           libraries to assist with packaging.  For example,\n                           the \"system\" component library may be resolved to\n                           \"/usr/lib/libboost_system.so.1.42.0\" instead of\n                           \"/usr/lib/libboost_system.so\".  This does not\n                           affect linking and should not be enabled unless\n                           the user needs this information.\nBoost_LIBRARY_DIR        - Default value for Boost_LIBRARY_DIR_RELEASE and\n                           Boost_LIBRARY_DIR_DEBUG.\n</pre> <p>On Visual Studio and Borland compilers Boost headers request automatic linking to corresponding libraries. This requires matching libraries to be linked explicitly or available in the link library search path. In this case setting Boost_USE_STATIC_LIBS to OFF may not achieve dynamic linking. Boost automatic linking typically requests static libraries with a few exceptions (such as Boost.Python). Use:</p> <pre data-language=\"python\">add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\n</pre> <p>to ask Boost to report information about automatic linking requests.</p> <p>Example to find Boost headers only:</p> <pre data-language=\"python\">find_package(Boost 1.36.0)\nif(Boost_FOUND)\n  include_directories(${Boost_INCLUDE_DIRS})\n  add_executable(foo foo.cc)\nendif()\n</pre> <p>Example to find Boost libraries and use imported targets:</p> <pre data-language=\"python\">find_package(Boost 1.56 REQUIRED COMPONENTS\n             date_time filesystem iostreams)\nadd_executable(foo foo.cc)\ntarget_link_libraries(foo Boost::date_time Boost::filesystem\n                          Boost::iostreams)\n</pre> <p>Example to find Boost headers and some <em>static</em> libraries:</p> <pre data-language=\"python\">set(Boost_USE_STATIC_LIBS        ON) # only find static libs\nset(Boost_USE_MULTITHREADED      ON)\nset(Boost_USE_STATIC_RUNTIME    OFF)\nfind_package(Boost 1.36.0 COMPONENTS date_time filesystem system ...)\nif(Boost_FOUND)\n  include_directories(${Boost_INCLUDE_DIRS})\n  add_executable(foo foo.cc)\n  target_link_libraries(foo ${Boost_LIBRARIES})\nendif()\n</pre>  <h2 id=\"boost-cmake\">Boost CMake</h2> <p>If Boost was built using the boost-cmake project it provides a package configuration file for use with find_package’s Config mode. This module looks for the package configuration file called BoostConfig.cmake or boost-config.cmake and stores the result in cache entry “Boost_DIR”. If found, the package configuration file is loaded and this module returns with no further action. See documentation of the Boost CMake package configuration for details on what it provides.</p> <p>Set Boost_NO_BOOST_CMAKE to ON to disable the search for boost-cmake.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindBoost.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindBoost.html</a>\n  </p>\n</div>\n","module/findbzip2":"<h1 id=\"module:FindBZip2\">FindBZip2</h1> <p id=\"findbzip2\">Try to find BZip2</p> <p>Once done this will define</p> <pre data-language=\"python\">BZIP2_FOUND - system has BZip2\nBZIP2_INCLUDE_DIR - the BZip2 include directory\nBZIP2_LIBRARIES - Link these to use BZip2\nBZIP2_NEED_PREFIX - this is set if the functions are prefixed with BZ2_\nBZIP2_VERSION_STRING - the version of BZip2 found (since CMake 2.8.8)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindBZip2.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindBZip2.html</a>\n  </p>\n</div>\n","module/findcoin3d":"<h1 id=\"module:FindCoin3D\">FindCoin3D</h1> <p id=\"findcoin3d\">Find Coin3D (Open Inventor)</p> <p>Coin3D is an implementation of the Open Inventor API. It provides data structures and algorithms for 3D visualization.</p> <p>This module defines the following variables</p> <pre data-language=\"python\">COIN3D_FOUND         - system has Coin3D - Open Inventor\nCOIN3D_INCLUDE_DIRS  - where the Inventor include directory can be found\nCOIN3D_LIBRARIES     - Link to this to use Coin3D\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindCoin3D.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindCoin3D.html</a>\n  </p>\n</div>\n","module/findcvs":"<h1 id=\"module:FindCVS\">FindCVS</h1> <p id=\"findcvs\">The module defines the following variables:</p> <pre data-language=\"python\">CVS_EXECUTABLE - path to cvs command line client\nCVS_FOUND - true if the command line client was found\n</pre> <p>Example usage:</p> <pre data-language=\"python\">find_package(CVS)\nif(CVS_FOUND)\n  message(\"CVS found: ${CVS_EXECUTABLE}\")\nendif()\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindCVS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindCVS.html</a>\n  </p>\n</div>\n","module/findcups":"<h1 id=\"module:FindCups\">FindCups</h1> <p id=\"findcups\">Try to find the Cups printing system</p> <p>Once done this will define</p> <pre data-language=\"python\">CUPS_FOUND - system has Cups\nCUPS_INCLUDE_DIR - the Cups include directory\nCUPS_LIBRARIES - Libraries needed to use Cups\nCUPS_VERSION_STRING - version of Cups found (since CMake 2.8.8)\nSet CUPS_REQUIRE_IPP_DELETE_ATTRIBUTE to TRUE if you need a version which\nfeatures this function (i.e. at least 1.1.19)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindCups.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindCups.html</a>\n  </p>\n</div>\n","module/findcurl":"<h1 id=\"module:FindCURL\">FindCURL</h1> <p id=\"findcurl\">Find curl</p> <p>Find the native CURL headers and libraries.</p> <pre data-language=\"python\">CURL_INCLUDE_DIRS   - where to find curl/curl.h, etc.\nCURL_LIBRARIES      - List of libraries when using curl.\nCURL_FOUND          - True if curl found.\nCURL_VERSION_STRING - the version of curl found (since CMake 2.8.8)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindCURL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindCURL.html</a>\n  </p>\n</div>\n","module/findcurses":"<h1 id=\"module:FindCurses\">FindCurses</h1> <p id=\"findcurses\">Find the curses or ncurses include file and library.</p>  <h2 id=\"result-variables\">Result Variables</h2> <p>This module defines the following variables:</p> <dl class=\"docutils\"> <dt><code>CURSES_FOUND</code></dt> <dd>True if Curses is found.</dd> <dt><code>CURSES_INCLUDE_DIRS</code></dt> <dd>The include directories needed to use Curses.</dd> <dt><code>CURSES_LIBRARIES</code></dt> <dd>The libraries needed to use Curses.</dd> <dt><code>CURSES_HAVE_CURSES_H</code></dt> <dd>True if curses.h is available.</dd> <dt><code>CURSES_HAVE_NCURSES_H</code></dt> <dd>True if ncurses.h is available.</dd> <dt><code>CURSES_HAVE_NCURSES_NCURSES_H</code></dt> <dd>True if <code>ncurses/ncurses.h</code> is available.</dd> <dt><code>CURSES_HAVE_NCURSES_CURSES_H</code></dt> <dd>True if <code>ncurses/curses.h</code> is available.</dd> </dl> <p>Set <code>CURSES_NEED_NCURSES</code> to <code>TRUE</code> before the <code>find_package(Curses)</code> call if NCurses functionality is required.</p>   <h2 id=\"backward-compatibility\">Backward Compatibility</h2> <p>The following variable are provided for backward compatibility:</p> <dl class=\"docutils\"> <dt><code>CURSES_INCLUDE_DIR</code></dt> <dd>Path to Curses include. Use <code>CURSES_INCLUDE_DIRS</code> instead.</dd> <dt><code>CURSES_LIBRARY</code></dt> <dd>Path to Curses library. Use <code>CURSES_LIBRARIES</code> instead.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindCurses.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindCurses.html</a>\n  </p>\n</div>\n","module/findcable":"<h1 id=\"module:FindCABLE\">FindCABLE</h1> <p id=\"findcable\">Find CABLE</p> <p>This module finds if CABLE is installed and determines where the include files and libraries are. This code sets the following variables:</p> <pre data-language=\"python\">CABLE             the path to the cable executable\nCABLE_TCL_LIBRARY the path to the Tcl wrapper library\nCABLE_INCLUDE_DIR the path to the include directory\n</pre> <p>To build Tcl wrappers, you should add shared library and link it to ${CABLE_TCL_LIBRARY}. You should also add ${CABLE_INCLUDE_DIR} as an include directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindCABLE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindCABLE.html</a>\n  </p>\n</div>\n","module/findcuda":"<h1 id=\"module:FindCUDA\">FindCUDA</h1> <p id=\"findcuda\">Tools for building CUDA C files: libraries and build dependencies.</p> <p>This script locates the NVIDIA CUDA C tools. It should work on linux, windows, and mac and should be reasonably up to date with CUDA C releases.</p> <p>This script makes use of the standard find_package arguments of &lt;VERSION&gt;, REQUIRED and QUIET. CUDA_FOUND will report if an acceptable version of CUDA was found.</p> <p>The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if the prefix cannot be determined by the location of nvcc in the system path and REQUIRED is specified to find_package(). To use a different installed version of the toolkit set the environment variable CUDA_BIN_PATH before running cmake (e.g. CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default /usr/local/cuda) or set CUDA_TOOLKIT_ROOT_DIR after configuring. If you change the value of CUDA_TOOLKIT_ROOT_DIR, various components that depend on the path will be relocated.</p> <p>It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain platforms, or to use a cuda runtime not installed in the default location. In newer versions of the toolkit the cuda library is included with the graphics driver- be sure that the driver version matches what is needed by the cuda runtime version.</p> <p>The following variables affect the behavior of the macros in the script (in alphebetical order). Note that any of these flags can be changed multiple times in the same directory before calling CUDA_ADD_EXECUTABLE, CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX, CUDA_COMPILE_FATBIN, CUDA_COMPILE_CUBIN or CUDA_WRAP_SRCS:</p> <pre data-language=\"python\">CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n-- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n   Note that making this different from the host code when generating object\n   or C files from CUDA code just won't work, because size_t gets defined by\n   nvcc in the generated source.  If you compile to PTX and then load the\n   file yourself, you can mix bit sizes between device and host.\n\nCUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n-- Set to ON if you want the custom build rule to be attached to the source\n   file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n   targets.\n\n   This allows the user to build the target from the CUDA file; however, bad\n   things can happen if the CUDA source file is added to multiple targets.\n   When performing parallel builds it is possible for the custom build\n   command to be run more than once and in parallel causing cryptic build\n   errors.  VS runs the rules for every source file in the target, and a\n   source can have only one rule no matter how many projects it is added to.\n   When the rule is run from multiple targets race conditions can occur on\n   the generated file.  Eventually everything will get built, but if the user\n   is unaware of this behavior, there may be confusion.  It would be nice if\n   this script could detect the reuse of source files across multiple targets\n   and turn the option off for the user, but no good solution could be found.\n\nCUDA_BUILD_CUBIN (Default OFF)\n-- Set to ON to enable and extra compilation pass with the -cubin option in\n   Device mode. The output is parsed and register, shared memory usage is\n   printed during build.\n\nCUDA_BUILD_EMULATION (Default OFF for device mode)\n-- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n   when CUDA_BUILD_EMULATION is TRUE.\n\nCUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n-- Set to the path you wish to have the generated files placed.  If it is\n   blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n   Intermediate files will always be placed in\n   CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\nCUDA_HOST_COMPILATION_CPP (Default ON)\n-- Set to OFF for C compilation of host code.\n\nCUDA_HOST_COMPILER (Default CMAKE_C_COMPILER, $(VCInstallDir)/bin for VS)\n-- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\n   --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\n   CUDA_NVCC_FLAGS_&lt;CONFIG&gt; variables.  For Visual Studio targets\n   $(VCInstallDir)/bin is a special value that expands out to the path when\n   the command is run from withing VS.\n\nCUDA_NVCC_FLAGS\nCUDA_NVCC_FLAGS_&lt;CONFIG&gt;\n-- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n   semi-colon delimited (e.g. --compiler-options;-Wall)\n\nCUDA_PROPAGATE_HOST_FLAGS (Default ON)\n-- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n   dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n   host compiler through nvcc's -Xcompiler flag.  This helps make the\n   generated host code match the rest of the system better.  Sometimes\n   certain flags give nvcc problems, and this will help you turn the flag\n   propagation off.  This does not affect the flags supplied directly to nvcc\n   via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n   CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n   shared library compilation are not affected by this flag.\n\nCUDA_SEPARABLE_COMPILATION (Default OFF)\n-- If set this will enable separable compilation for all CUDA runtime object\n   files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\n   (e.g. calling CUDA_WRAP_SRCS directly),\n   CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\n   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\n\nCUDA_SOURCE_PROPERTY_FORMAT\n-- If this source file property is set, it can override the format specified\n   to CUDA_WRAP_SRCS (OBJ, PTX, CUBIN, or FATBIN).  If an input source file\n   is not a .cu file, setting this file will cause it to be treated as a .cu\n   file. See documentation for set_source_files_properties on how to set\n   this property.\n\nCUDA_USE_STATIC_CUDA_RUNTIME (Default ON)\n-- When enabled the static version of the CUDA runtime library will be used\n   in CUDA_LIBRARIES.  If the version of CUDA configured doesn't support\n   this option, then it will be silently disabled.\n\nCUDA_VERBOSE_BUILD (Default OFF)\n-- Set to ON to see all the commands used when building the CUDA file.  When\n   using a Makefile generator the value defaults to VERBOSE (run make\n   VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n   always print the output.\n</pre> <p>The script creates the following macros (in alphebetical order):</p> <pre data-language=\"python\">CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n-- Adds the cufft library to the target (can be any target).  Handles whether\n   you are in emulation mode or not.\n\nCUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n-- Adds the cublas library to the target (can be any target).  Handles\n   whether you are in emulation mode or not.\n\nCUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n                     [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n-- Creates an executable \"cuda_target\" which is made up of the files\n   specified.  All of the non CUDA C files are compiled using the standard\n   build rules specified by CMAKE and the cuda files are compiled to object\n   files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n   added automatically to include_directories().  Some standard CMake target\n   calls can be used on the target after calling this macro\n   (e.g. set_target_properties and target_link_libraries), but setting\n   properties that adjust compilation flags will not affect code compiled by\n   nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\n   CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\n\nCUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n                  [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n-- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\nCUDA_BUILD_CLEAN_TARGET()\n-- Creates a convience target that deletes all the dependency files\n   generated.  You should make clean after running this target to ensure the\n   dependency files get regenerated.\n\nCUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n              [OPTIONS ...] )\n-- Returns a list of generated files from the input source files to be used\n   with ADD_LIBRARY or ADD_EXECUTABLE.\n\nCUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n-- Returns a list of PTX files generated from the input source files.\n\nCUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )\n-- Returns a list of FATBIN files generated from the input source files.\n\nCUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )\n-- Returns a list of CUBIN files generated from the input source files.\n\nCUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\n                                                     cuda_target\n                                                     object_files )\n-- Compute the name of the intermediate link file used for separable\n   compilation.  This file name is typically passed into\n   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\n   based on cuda_target the list of objects files that need separable\n   compilation as specified by object_files.  If the object_files list is\n   empty, then output_file_var will be empty.  This function is called\n   automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\n   this is a function and not a macro.\n\nCUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n-- Sets the directories that should be passed to nvcc\n   (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n   files.\n\n\n\nCUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\n                                         nvcc_flags object_files)\n\n-- Generates the link object required by separable compilation from the given\n   object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\n   CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\n   directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\n   nvcc_flags passed in are the same as the flags passed in via the OPTIONS\n   argument.  The only nvcc flag added automatically is the bitness flag as\n   specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\n   instead of a macro.\n\nCUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n                 [STATIC | SHARED | MODULE] [OPTIONS ...] )\n-- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n   CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n   function under the hood.\n\n   Given the list of files (file0 file1 ... fileN) this macro generates\n   custom commands that generate either PTX or linkable objects (use \"PTX\" or\n   \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n   or have the HEADER_FILE_ONLY property are ignored.\n\n   The arguments passed in after OPTIONS are extra command line options to\n   give to nvcc.  You can also specify per configuration options by\n   specifying the name of the configuration followed by the options.  General\n   options must preceed configuration specific options.  Not all\n   configurations need to be specified, only the ones provided will be used.\n\n      OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n      DEBUG -g\n      RELEASE --use_fast_math\n      RELWITHDEBINFO --use_fast_math;-g\n      MINSIZEREL --use_fast_math\n\n   For certain configurations (namely VS generating object files with\n   CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n   be produced for the given cuda file.  This is because when you add the\n   cuda file to Visual Studio it knows that this file produces an object file\n   and will link in the resulting object file automatically.\n\n   This script will also generate a separate cmake script that is used at\n   build time to invoke nvcc.  This is for several reasons.\n\n     1. nvcc can return negative numbers as return values which confuses\n     Visual Studio into thinking that the command succeeded.  The script now\n     checks the error codes and produces errors when there was a problem.\n\n     2. nvcc has been known to not delete incomplete results when it\n     encounters problems.  This confuses build systems into thinking the\n     target was generated when in fact an unusable file exists.  The script\n     now deletes the output files if there was an error.\n\n     3. By putting all the options that affect the build into a file and then\n     make the build rule dependent on the file, the output files will be\n     regenerated when the options change.\n\n   This script also looks at optional arguments STATIC, SHARED, or MODULE to\n   determine when to target the object compilation for a shared library.\n   BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n   CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n   objects intended for shared libraries.  A preprocessor macro,\n   &lt;target_name&gt;_EXPORTS is defined when a shared library compilation is\n   detected.\n\n   Flags passed into add_definitions with -D or /D are passed along to nvcc.\n</pre> <p>The script defines the following variables:</p> <pre data-language=\"python\">CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\nCUDA_VERSION_MINOR    -- The minor version.\nCUDA_VERSION\nCUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\nCUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\nCUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n                         SDK.  This script will not directly support finding\n                         specific libraries or headers, as that isn't\n                         supported by NVIDIA.  If you want to change\n                         libraries when the path changes see the\n                         FindCUDA.cmake script for an example of how to clear\n                         these variables.  There are also examples of how to\n                         use the CUDA_SDK_ROOT_DIR to locate headers or\n                         libraries, if you so choose (at your own risk).\nCUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n                         for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\nCUDA_LIBRARIES        -- Cuda RT library.\nCUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n                         implementation (alternative to:\n                         CUDA_ADD_CUFFT_TO_TARGET macro)\nCUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n                         implementation (alterative to:\n                         CUDA_ADD_CUBLAS_TO_TARGET macro).\nCUDA_cudart_static_LIBRARY -- Statically linkable cuda runtime library.\n                              Only available for CUDA version 5.5+\nCUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\n                         Only available for CUDA version 4.0+.\nCUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\n                         Only available for CUDA version 3.2+.\nCUDA_cusolver_LIBRARY -- CUDA Direct Solver library.\n                         Only available for CUDA version 7.0+.\nCUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\n                         Only available for CUDA version 3.2+.\nCUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\n                         Only available for CUDA version 4.0+.\nCUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\n                         Only available for CUDA version 5.5+.\nCUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\n                         Only available for CUDA version 5.5+.\nCUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\n                         Only available for CUDA version 5.5+.\nCUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\n                         Only available for CUDA version 3.2+.\n                         Windows only.\nCUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\n                         Only available for CUDA version 3.2+.\n                         Windows only.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindCUDA.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindCUDA.html</a>\n  </p>\n</div>\n","module/findcxxtest":"<h1 id=\"module:FindCxxTest\">FindCxxTest</h1> <p id=\"findcxxtest\">Find CxxTest</p> <p>Find the CxxTest suite and declare a helper macro for creating unit tests and integrating them with CTest. For more details on CxxTest see <a class=\"reference external\" href=\"http://cxxtest.tigris.org\">http://cxxtest.tigris.org</a></p> <p>INPUT Variables</p> <pre data-language=\"python\">CXXTEST_USE_PYTHON [deprecated since 1.3]\n    Only used in the case both Python &amp; Perl\n    are detected on the system to control\n    which CxxTest code generator is used.\n    Valid only for CxxTest version 3.\n</pre> <pre data-language=\"python\">NOTE: In older versions of this Find Module,\nthis variable controlled if the Python test\ngenerator was used instead of the Perl one,\nregardless of which scripting language the\nuser had installed.\n</pre> <pre data-language=\"python\">CXXTEST_TESTGEN_ARGS (since CMake 2.8.3)\n    Specify a list of options to pass to the CxxTest code\n    generator.  If not defined, --error-printer is\n    passed.\n</pre> <p>OUTPUT Variables</p> <pre data-language=\"python\">CXXTEST_FOUND\n    True if the CxxTest framework was found\nCXXTEST_INCLUDE_DIRS\n    Where to find the CxxTest include directory\nCXXTEST_PERL_TESTGEN_EXECUTABLE\n    The perl-based test generator\nCXXTEST_PYTHON_TESTGEN_EXECUTABLE\n    The python-based test generator\nCXXTEST_TESTGEN_EXECUTABLE (since CMake 2.8.3)\n    The test generator that is actually used (chosen using user preferences\n    and interpreters found in the system)\nCXXTEST_TESTGEN_INTERPRETER (since CMake 2.8.3)\n    The full path to the Perl or Python executable on the system\n</pre> <p>MACROS for optional use by CMake users:</p> <pre data-language=\"python\">CXXTEST_ADD_TEST(&lt;test_name&gt; &lt;gen_source_file&gt; &lt;input_files_to_testgen...&gt;)\n   Creates a CxxTest runner and adds it to the CTest testing suite\n   Parameters:\n       test_name               The name of the test\n       gen_source_file         The generated source filename to be\n                               generated by CxxTest\n       input_files_to_testgen  The list of header files containing the\n                               CxxTest::TestSuite's to be included in\n                               this runner\n</pre> <pre data-language=\"python\">#==============\nExample Usage:\n</pre> <pre data-language=\"python\">find_package(CxxTest)\nif(CXXTEST_FOUND)\n    include_directories(${CXXTEST_INCLUDE_DIR})\n    enable_testing()\n</pre> <pre data-language=\"python\">    CXXTEST_ADD_TEST(unittest_foo foo_test.cc\n                      ${CMAKE_CURRENT_SOURCE_DIR}/foo_test.h)\n    target_link_libraries(unittest_foo foo) # as needed\nendif()\n</pre> <pre data-language=\"python\">This will (if CxxTest is found):\n1. Invoke the testgen executable to autogenerate foo_test.cc in the\n   binary tree from \"foo_test.h\" in the current source directory.\n2. Create an executable and test called unittest_foo.\n</pre> <pre data-language=\"python\">#=============\nExample foo_test.h:\n</pre> <pre data-language=\"python\">#include &lt;cxxtest/TestSuite.h&gt;\n</pre> <pre data-language=\"python\">class MyTestSuite : public CxxTest::TestSuite\n{\npublic:\n   void testAddition( void )\n   {\n      TS_ASSERT( 1 + 1 &gt; 1 );\n      TS_ASSERT_EQUALS( 1 + 1, 2 );\n   }\n};\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindCxxTest.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindCxxTest.html</a>\n  </p>\n</div>\n","module/findcygwin":"<h1 id=\"module:FindCygwin\">FindCygwin</h1> <p id=\"findcygwin\">this module looks for Cygwin</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindCygwin.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindCygwin.html</a>\n  </p>\n</div>\n","module/finddart":"<h1 id=\"module:FindDart\">FindDart</h1> <p id=\"finddart\">Find DART</p> <p>This module looks for the dart testing software and sets DART_ROOT to point to where it found it.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindDart.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindDart.html</a>\n  </p>\n</div>\n","module/finddcmtk":"<h1 id=\"module:FindDCMTK\">FindDCMTK</h1> <p id=\"finddcmtk\">Find DCMTK libraries and applications</p> <p>The module defines the following variables:</p> <pre data-language=\"python\">DCMTK_INCLUDE_DIRS  - Directories to include to use DCMTK\nDCMTK_LIBRARIES     - Files to link against to use DCMTK\nDCMTK_FOUND         - If false, don't try to use DCMTK\nDCMTK_DIR           - (optional) Source directory for DCMTK\n</pre>  <h2 id=\"compatibility\">Compatibility</h2> <p>This module is able to find a version of DCMTK that does or does not export a <em>DCMTKConfig.cmake</em> file. It applies a two step process:</p> <ul class=\"simple\"> <li>Step 1: Attempt to find DCMTK version providing a <em>DCMTKConfig.cmake</em> file.</li> <li>Step 2: If step 1 failed, rely on <em>FindDCMTK.cmake</em> to set <cite>DCMTK_*</cite> variables details below.</li> </ul> <p><a class=\"reference external\" href=\"http://git.dcmtk.org/web?p=dcmtk.git;a=commit;h=662ae187c493c6b9a73dd5e3875372cebd0c11fe\">Recent DCMTK</a> provides a <em>DCMTKConfig.cmake</em> <a class=\"reference internal\" href=\"../manual/cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-0-manual:cmake-packages(7)\"><code>package configuration file</code></a>. To exclusively use the package configuration file (recommended when possible), pass the <cite>NO_MODULE</cite> option to <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a>. For example, <cite>find_package(DCMTK NO_MODULE)</cite>. This requires official DCMTK snapshot <em>3.6.1_20140617</em> or newer.</p> <p>Until all clients update to the more recent DCMTK, build systems will need to support different versions of DCMTK.</p> <p>On any given system, the following combinations of DCMTK versions could be considered:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"30%\"> <col width=\"32%\"> <col width=\"27%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td> </td> <td>SYSTEM DCMTK</td> <td>LOCAL DCMTK</td> <td>Supported ?</td> </tr> <tr class=\"row-even\">\n<td>Case A</td> <td>NA</td> <td>[ ] DCMTKConfig</td> <td>YES</td> </tr> <tr class=\"row-odd\">\n<td>Case B</td> <td>NA</td> <td>[X] DCMTKConfig</td> <td>YES</td> </tr> <tr class=\"row-even\">\n<td>Case C</td> <td>[ ] DCMTKConfig</td> <td>NA</td> <td>YES</td> </tr> <tr class=\"row-odd\">\n<td>Case D</td> <td>[X] DCMTKConfig</td> <td>NA</td> <td>YES</td> </tr> <tr class=\"row-even\">\n<td>Case E</td> <td>[ ] DCMTKConfig</td> <td>[ ] DCMTKConfig</td> <td>YES (*)</td> </tr> <tr class=\"row-odd\">\n<td>Case F</td> <td>[X] DCMTKConfig</td> <td>[ ] DCMTKConfig</td> <td>NO</td> </tr> <tr class=\"row-even\">\n<td>Case G</td> <td>[ ] DCMTKConfig</td> <td>[X] DCMTKConfig</td> <td>YES</td> </tr> <tr class=\"row-odd\">\n<td>Case H</td> <td>[X] DCMTKConfig</td> <td>[X] DCMTKConfig</td> <td>YES</td> </tr> </tbody> </table> <blockquote> <div>(*) See Troubleshooting section.</div>\n</blockquote> <p>Legend:</p> <blockquote> <div>\n<p>NA ...............: Means that no System or Local DCMTK is available</p> <p>[ ] DCMTKConfig ..: Means that the version of DCMTK does NOT export a DCMTKConfig.cmake file.</p> <p>[X] DCMTKConfig ..: Means that the version of DCMTK exports a DCMTKConfig.cmake file.</p> </div>\n</blockquote>   <h2 id=\"troubleshooting\">Troubleshooting</h2> <p>What to do if my project finds a different version of DCMTK?</p> <p>Remove DCMTK entry from the CMake cache per <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-1-command:find_package\"><code>find_package()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindDCMTK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindDCMTK.html</a>\n  </p>\n</div>\n","module/finddevil":"<h1 id=\"module:FindDevIL\">FindDevIL</h1> <p id=\"finddevil\">This module locates the developer’s image library. <a class=\"reference external\" href=\"http://openil.sourceforge.net/\">http://openil.sourceforge.net/</a></p> <p>This module sets:</p> <pre data-language=\"python\">IL_LIBRARIES -   the name of the IL library. These include the full path to\n                 the core DevIL library. This one has to be linked into the\n                 application.\nILU_LIBRARIES -  the name of the ILU library. Again, the full path. This\n                 library is for filters and effects, not actual loading. It\n                 doesn't have to be linked if the functionality it provides\n                 is not used.\nILUT_LIBRARIES - the name of the ILUT library. Full path. This part of the\n                 library interfaces with OpenGL. It is not strictly needed\n                 in applications.\nIL_INCLUDE_DIR - where to find the il.h, ilu.h and ilut.h files.\nIL_FOUND -       this is set to TRUE if all the above variables were set.\n                 This will be set to false if ILU or ILUT are not found,\n                 even if they are not needed. In most systems, if one\n                 library is found all the others are as well. That's the\n                 way the DevIL developers release it.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindDevIL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindDevIL.html</a>\n  </p>\n</div>\n","module/finddoxygen":"<h1 id=\"module:FindDoxygen\">FindDoxygen</h1> <p id=\"finddoxygen\">This module looks for Doxygen and the path to Graphviz’s dot</p> <p>Doxygen is a documentation generation tool. Please see <a class=\"reference external\" href=\"http://www.doxygen.org\">http://www.doxygen.org</a></p> <p>This module accepts the following optional variables:</p> <pre data-language=\"python\">DOXYGEN_SKIP_DOT       = If true this module will skip trying to find Dot\n                         (an optional component often used by Doxygen)\n</pre> <p>This modules defines the following variables:</p> <pre data-language=\"python\">DOXYGEN_EXECUTABLE     = The path to the doxygen command.\nDOXYGEN_FOUND          = Was Doxygen found or not?\nDOXYGEN_VERSION        = The version reported by doxygen --version\n</pre> <pre data-language=\"python\">DOXYGEN_DOT_EXECUTABLE = The path to the dot program used by doxygen.\nDOXYGEN_DOT_FOUND      = Was Dot found or not?\n</pre> <p>For compatibility with older versions of CMake, the now-deprecated variable <code>DOXYGEN_DOT_PATH</code> is set to the path to the directory containing <code>dot</code> as reported in <code>DOXYGEN_DOT_EXECUTABLE</code>. The path may have forward slashes even on Windows and is not suitable for direct substitution into a <code>Doxyfile.in</code> template. If you need this value, use <a class=\"reference internal\" href=\"../command/get_filename_component#command:get_filename_component\" title=\"get_filename_component\" id=\"index-0-command:get_filename_component\"><code>get_filename_component()</code></a> to compute it from <code>DOXYGEN_DOT_EXECUTABLE</code> directly, and perhaps the <a class=\"reference internal\" href=\"../command/file#command:file\" title=\"file\" id=\"index-0-command:file\"><code>file(TO_NATIVE_PATH)</code></a> command to prepare the path for a Doxygen configuration file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindDoxygen.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindDoxygen.html</a>\n  </p>\n</div>\n","module/findexpat":"<h1 id=\"module:FindEXPAT\">FindEXPAT</h1> <p id=\"findexpat\">Find expat</p> <p>Find the native EXPAT headers and libraries.</p> <pre data-language=\"python\">EXPAT_INCLUDE_DIRS - where to find expat.h, etc.\nEXPAT_LIBRARIES    - List of libraries when using expat.\nEXPAT_FOUND        - True if expat found.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindEXPAT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindEXPAT.html</a>\n  </p>\n</div>\n","module/findfltk2":"<h1 id=\"module:FindFLTK2\">FindFLTK2</h1> <p id=\"findfltk2\">Find the native FLTK2 includes and library</p> <p>The following settings are defined</p> <pre data-language=\"python\">FLTK2_FLUID_EXECUTABLE, where to find the Fluid tool\nFLTK2_WRAP_UI, This enables the FLTK2_WRAP_UI command\nFLTK2_INCLUDE_DIR, where to find include files\nFLTK2_LIBRARIES, list of fltk2 libraries\nFLTK2_FOUND, Don't use FLTK2 if false.\n</pre> <p>The following settings should not be used in general.</p> <pre data-language=\"python\">FLTK2_BASE_LIBRARY   = the full path to fltk2.lib\nFLTK2_GL_LIBRARY     = the full path to fltk2_gl.lib\nFLTK2_IMAGES_LIBRARY = the full path to fltk2_images.lib\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindFLTK2.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindFLTK2.html</a>\n  </p>\n</div>\n","module/findfltk":"<h1 id=\"module:FindFLTK\">FindFLTK</h1> <p id=\"findfltk\">Find the native FLTK includes and library</p> <p>By default FindFLTK.cmake will search for all of the FLTK components and add them to the FLTK_LIBRARIES variable.</p> <pre data-language=\"python\">You can limit the components which get placed in FLTK_LIBRARIES by\ndefining one or more of the following three options:\n</pre> <pre data-language=\"python\">FLTK_SKIP_OPENGL, set to true to disable searching for opengl and\n                  the FLTK GL library\nFLTK_SKIP_FORMS, set to true to disable searching for fltk_forms\nFLTK_SKIP_IMAGES, set to true to disable searching for fltk_images\n</pre> <pre data-language=\"python\">FLTK_SKIP_FLUID, set to true if the fluid binary need not be present\n                 at build time\n</pre> <p>The following variables will be defined:</p> <pre data-language=\"python\">FLTK_FOUND, True if all components not skipped were found\nFLTK_INCLUDE_DIR, where to find include files\nFLTK_LIBRARIES, list of fltk libraries you should link against\nFLTK_FLUID_EXECUTABLE, where to find the Fluid tool\nFLTK_WRAP_UI, This enables the FLTK_WRAP_UI command\n</pre> <p>The following cache variables are assigned but should not be used. See the FLTK_LIBRARIES variable instead.</p> <pre data-language=\"python\">FLTK_BASE_LIBRARY   = the full path to fltk.lib\nFLTK_GL_LIBRARY     = the full path to fltk_gl.lib\nFLTK_FORMS_LIBRARY  = the full path to fltk_forms.lib\nFLTK_IMAGES_LIBRARY = the full path to fltk_images.lib\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindFLTK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindFLTK.html</a>\n  </p>\n</div>\n","module/findflex":"<h1 id=\"module:FindFLEX\">FindFLEX</h1> <p id=\"findflex\">Find flex executable and provides a macro to generate custom build rules</p> <p>The module defines the following variables:</p> <pre data-language=\"python\">FLEX_FOUND - true is flex executable is found\nFLEX_EXECUTABLE - the path to the flex executable\nFLEX_VERSION - the version of flex\nFLEX_LIBRARIES - The flex libraries\nFLEX_INCLUDE_DIRS - The path to the flex headers\n</pre> <p>The minimum required version of flex can be specified using the standard syntax, e.g. find_package(FLEX 2.5.13)</p> <p>If flex is found on the system, the module provides the macro:</p> <pre data-language=\"python\">FLEX_TARGET(Name FlexInput FlexOutput\n            [COMPILE_FLAGS &lt;string&gt;]\n            [DEFINES_FILE &lt;string&gt;]\n            )\n</pre> <p>which creates a custom command to generate the &lt;FlexOutput&gt; file from the &lt;FlexInput&gt; file. If COMPILE_FLAGS option is specified, the next parameter is added to the flex command line. If flex is configured to output a header file, the DEFINES_FILE option may be used to specify its name. Name is an alias used to get details of this custom command. Indeed the macro defines the following variables:</p> <pre data-language=\"python\">FLEX_${Name}_DEFINED - true is the macro ran successfully\nFLEX_${Name}_OUTPUTS - the source file generated by the custom rule, an\nalias for FlexOutput\nFLEX_${Name}_INPUT - the flex source file, an alias for ${FlexInput}\nFLEX_${Name}_OUTPUT_HEADER - the header flex output, if any.\n</pre> <p>Flex scanners oftenly use tokens defined by Bison: the code generated by Flex depends of the header generated by Bison. This module also defines a macro:</p> <pre data-language=\"python\">ADD_FLEX_BISON_DEPENDENCY(FlexTarget BisonTarget)\n</pre> <p>which adds the required dependency between a scanner and a parser where &lt;FlexTarget&gt; and &lt;BisonTarget&gt; are the first parameters of respectively FLEX_TARGET and BISON_TARGET macros.</p> <pre data-language=\"python\">====================================================================\nExample:\n</pre> <pre data-language=\"python\">find_package(BISON)\nfind_package(FLEX)\n</pre> <pre data-language=\"python\">BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp)\nFLEX_TARGET(MyScanner lexer.l  ${CMAKE_CURRENT_BINARY_DIR}/lexer.cpp)\nADD_FLEX_BISON_DEPENDENCY(MyScanner MyParser)\n</pre> <pre data-language=\"python\"> include_directories(${CMAKE_CURRENT_BINARY_DIR})\n add_executable(Foo\n    Foo.cc\n    ${BISON_MyParser_OUTPUTS}\n    ${FLEX_MyScanner_OUTPUTS}\n )\n====================================================================\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindFLEX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindFLEX.html</a>\n  </p>\n</div>\n","module/findfreetype":"<h1 id=\"module:FindFreetype\">FindFreetype</h1> <p id=\"findfreetype\">Locate FreeType library</p> <p>This module defines</p> <pre data-language=\"python\">FREETYPE_LIBRARIES, the library to link against\nFREETYPE_FOUND, if false, do not try to link to FREETYPE\nFREETYPE_INCLUDE_DIRS, where to find headers.\nFREETYPE_VERSION_STRING, the version of freetype found (since CMake 2.8.8)\nThis is the concatenation of the paths:\nFREETYPE_INCLUDE_DIR_ft2build\nFREETYPE_INCLUDE_DIR_freetype2\n</pre> <p>$FREETYPE_DIR is an environment variable that would correspond to the ./configure –prefix=$FREETYPE_DIR used in building FREETYPE.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindFreetype.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindFreetype.html</a>\n  </p>\n</div>\n","module/findgccxml":"<h1 id=\"module:FindGCCXML\">FindGCCXML</h1> <p id=\"findgccxml\">Find the GCC-XML front-end executable.</p> <p>This module will define the following variables:</p> <pre data-language=\"python\">GCCXML - the GCC-XML front-end executable.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGCCXML.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGCCXML.html</a>\n  </p>\n</div>\n","module/findgdal":"<h1 id=\"module:FindGDAL\">FindGDAL</h1> <p id=\"findgdal\">Locate gdal</p> <p>This module accepts the following environment variables:</p> <pre data-language=\"python\">GDAL_DIR or GDAL_ROOT - Specify the location of GDAL\n</pre> <p>This module defines the following CMake variables:</p> <pre data-language=\"python\">GDAL_FOUND - True if libgdal is found\nGDAL_LIBRARY - A variable pointing to the GDAL library\nGDAL_INCLUDE_DIR - Where to find the headers\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGDAL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGDAL.html</a>\n  </p>\n</div>\n","module/findgettext":"<h1 id=\"module:FindGettext\">FindGettext</h1> <p id=\"findgettext\">Find GNU gettext tools</p> <p>This module looks for the GNU gettext tools. This module defines the following values:</p> <pre data-language=\"python\">GETTEXT_MSGMERGE_EXECUTABLE: the full path to the msgmerge tool.\nGETTEXT_MSGFMT_EXECUTABLE: the full path to the msgfmt tool.\nGETTEXT_FOUND: True if gettext has been found.\nGETTEXT_VERSION_STRING: the version of gettext found (since CMake 2.8.8)\n</pre> <p>Additionally it provides the following macros:</p> <p>GETTEXT_CREATE_TRANSLATIONS ( outputFile [ALL] file1 ... fileN )</p> <pre data-language=\"python\">This will create a target \"translations\" which will convert the\ngiven input po files into the binary output mo file. If the\nALL option is used, the translations will also be created when\nbuilding the default target.\n</pre> <p>GETTEXT_PROCESS_POT_FILE( &lt;potfile&gt; [ALL] [INSTALL_DESTINATION &lt;destdir&gt;] LANGUAGES &lt;lang1&gt; &lt;lang2&gt; ... )</p> <pre data-language=\"python\">Process the given pot file to mo files.\nIf INSTALL_DESTINATION is given then automatically install rules will\nbe created, the language subdirectory will be taken into account\n(by default use share/locale/).\nIf ALL is specified, the pot file is processed when building the all traget.\nIt creates a custom target \"potfile\".\n</pre> <p>GETTEXT_PROCESS_PO_FILES( &lt;lang&gt; [ALL] [INSTALL_DESTINATION &lt;dir&gt;] PO_FILES &lt;po1&gt; &lt;po2&gt; ... )</p> <pre data-language=\"python\">Process the given po files to mo files for the given language.\nIf INSTALL_DESTINATION is given then automatically install rules will\nbe created, the language subdirectory will be taken into account\n(by default use share/locale/).\nIf ALL is specified, the po files are processed when building the all traget.\nIt creates a custom target \"pofiles\".\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you wish to use the Gettext library (libintl), use <a class=\"reference internal\" href=\"findintl#module:FindIntl\" title=\"FindIntl\" id=\"index-0-module:FindIntl\"><code>FindIntl</code></a>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGettext.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGettext.html</a>\n  </p>\n</div>\n","module/findgif":"<h1 id=\"module:FindGIF\">FindGIF</h1> <p id=\"findgif\">This module searches giflib and defines GIF_LIBRARIES - libraries to link to in order to use GIF GIF_FOUND, if false, do not try to link GIF_INCLUDE_DIR, where to find the headers GIF_VERSION, reports either version 4 or 3 (for everything before version 4)</p> <p>The minimum required version of giflib can be specified using the standard syntax, e.g. find_package(GIF 4)</p> <p>$GIF_DIR is an environment variable that would correspond to the ./configure –prefix=$GIF_DIR</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGIF.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGIF.html</a>\n  </p>\n</div>\n","module/findgit":"<h1 id=\"module:FindGit\">FindGit</h1> <p id=\"findgit\">The module defines the following variables:</p> <dl class=\"docutils\"> <dt><code>GIT_EXECUTABLE</code></dt> <dd>Path to Git command-line client.</dd> <dt>\n<code>Git_FOUND</code>, <code>GIT_FOUND</code>\n</dt> <dd>True if the Git command-line client was found.</dd> <dt><code>GIT_VERSION_STRING</code></dt> <dd>The version of Git found.</dd> </dl> <p>Example usage:</p> <pre data-language=\"cmake\">find_package(Git)\nif(Git_FOUND)\n  message(\"Git found: ${GIT_EXECUTABLE}\")\nendif()\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGit.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGit.html</a>\n  </p>\n</div>\n","module/findglew":"<h1 id=\"module:FindGLEW\">FindGLEW</h1> <p id=\"findglew\">Find the OpenGL Extension Wrangler Library (GLEW)</p>  <h2 id=\"imported-targets\">IMPORTED Targets</h2> <p>This module defines the <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target <code>GLEW::GLEW</code>, if GLEW has been found.</p>   <h2 id=\"result-variables\">Result Variables</h2> <p>This module defines the following variables:</p> <pre data-language=\"python\">GLEW_INCLUDE_DIRS - include directories for GLEW\nGLEW_LIBRARIES - libraries to link against GLEW\nGLEW_FOUND - true if GLEW has been found and can be used\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGLEW.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGLEW.html</a>\n  </p>\n</div>\n","module/findglut":"<h1 id=\"module:FindGLUT\">FindGLUT</h1> <p id=\"findglut\">try to find glut library and include files.</p>  <h2 id=\"imported-targets\">IMPORTED Targets</h2> <p>This module defines the <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets:</p> <dl class=\"docutils\"> <dt><code>GLUT::GLUT</code></dt> <dd>Defined if the system has GLUT.</dd> </dl>   <h2 id=\"result-variables\">Result Variables</h2> <p>This module sets the following variables:</p> <pre data-language=\"python\">GLUT_INCLUDE_DIR, where to find GL/glut.h, etc.\nGLUT_LIBRARIES, the libraries to link against\nGLUT_FOUND, If false, do not try to use GLUT.\n</pre> <p>Also defined, but not for general use are:</p> <pre data-language=\"python\">GLUT_glut_LIBRARY = the full path to the glut library.\nGLUT_Xmu_LIBRARY  = the full path to the Xmu library.\nGLUT_Xi_LIBRARY   = the full path to the Xi Library.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGLUT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGLUT.html</a>\n  </p>\n</div>\n","module/findgnuplot":"<h1 id=\"module:FindGnuplot\">FindGnuplot</h1> <p id=\"findgnuplot\">this module looks for gnuplot</p> <p>Once done this will define</p> <pre data-language=\"python\">GNUPLOT_FOUND - system has Gnuplot\nGNUPLOT_EXECUTABLE - the Gnuplot executable\nGNUPLOT_VERSION_STRING - the version of Gnuplot found (since CMake 2.8.8)\n</pre> <p>GNUPLOT_VERSION_STRING will not work for old versions like 3.7.1.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGnuplot.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGnuplot.html</a>\n  </p>\n</div>\n","module/findgnutls":"<h1 id=\"module:FindGnuTLS\">FindGnuTLS</h1> <p id=\"findgnutls\">Try to find the GNU Transport Layer Security library (gnutls)</p> <p>Once done this will define</p> <pre data-language=\"python\">GNUTLS_FOUND - System has gnutls\nGNUTLS_INCLUDE_DIR - The gnutls include directory\nGNUTLS_LIBRARIES - The libraries needed to use gnutls\nGNUTLS_DEFINITIONS - Compiler switches required for using gnutls\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGnuTLS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGnuTLS.html</a>\n  </p>\n</div>\n","module/findgsl":"<h1 id=\"module:FindGSL\">FindGSL</h1> <p id=\"findgsl\">Find the native GSL includes and libraries.</p> <p>The GNU Scientific Library (GSL) is a numerical library for C and C++ programmers. It is free software under the GNU General Public License.</p>  <h2 id=\"imported-targets\">Imported Targets</h2> <p>If GSL is found, this module defines the following <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets:</p> <pre data-language=\"python\">GSL::gsl      - The main GSL library.\nGSL::gslcblas - The CBLAS support library used by GSL.\n</pre>   <h2 id=\"result-variables\">Result Variables</h2> <p>This module will set the following variables in your project:</p> <pre data-language=\"python\">GSL_FOUND          - True if GSL found on the local system\nGSL_INCLUDE_DIRS   - Location of GSL header files.\nGSL_LIBRARIES      - The GSL libraries.\nGSL_VERSION        - The version of the discovered GSL install.\n</pre>   <h2 id=\"hints\">Hints</h2> <p>Set <code>GSL_ROOT_DIR</code> to a directory that contains a GSL installation.</p> <p>This script expects to find libraries at <code>$GSL_ROOT_DIR/lib</code> and the GSL headers at <code>$GSL_ROOT_DIR/include/gsl</code>. The library directory may optionally provide Release and Debug folders. For Unix-like systems, this script will use <code>$GSL_ROOT_DIR/bin/gsl-config</code> (if found) to aid in the discovery GSL.</p>   <h2 id=\"cache-variables\">Cache Variables</h2> <p>This module may set the following variables depending on platform and type of GSL installation discovered. These variables may optionally be set to help this module find the correct files:</p> <pre data-language=\"python\">GSL_CBLAS_LIBRARY       - Location of the GSL CBLAS library.\nGSL_CBLAS_LIBRARY_DEBUG - Location of the debug GSL CBLAS library (if any).\nGSL_CONFIG_EXECUTABLE   - Location of the ``gsl-config`` script (if any).\nGSL_LIBRARY             - Location of the GSL library.\nGSL_LIBRARY_DEBUG       - Location of the debug GSL library (if any).\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGSL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGSL.html</a>\n  </p>\n</div>\n","module/findgtest":"<h1 id=\"module:FindGTest\">FindGTest</h1> <p id=\"findgtest\">Locate the Google C++ Testing Framework.</p>  <h2 id=\"imported-targets\">Imported targets</h2> <p>This module defines the following <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets:</p> <dl class=\"docutils\"> <dt><code>GTest::GTest</code></dt> <dd>The Google Test <code>gtest</code> library, if found; adds Thread::Thread automatically</dd> <dt><code>GTest::Main</code></dt> <dd>The Google Test <code>gtest_main</code> library, if found</dd> </dl>   <h2 id=\"result-variables\">Result variables</h2> <p>This module will set the following variables in your project:</p> <dl class=\"docutils\"> <dt><code>GTEST_FOUND</code></dt> <dd>Found the Google Testing framework</dd> <dt><code>GTEST_INCLUDE_DIRS</code></dt> <dd>the directory containing the Google Test headers</dd> </dl> <p>The library variables below are set as normal variables. These contain debug/optimized keywords when a debugging library is found.</p> <dl class=\"docutils\"> <dt><code>GTEST_LIBRARIES</code></dt> <dd>The Google Test <code>gtest</code> library; note it also requires linking with an appropriate thread library</dd> <dt><code>GTEST_MAIN_LIBRARIES</code></dt> <dd>The Google Test <code>gtest_main</code> library</dd> <dt><code>GTEST_BOTH_LIBRARIES</code></dt> <dd>Both <code>gtest</code> and <code>gtest_main</code>\n</dd> </dl>   <h2 id=\"cache-variables\">Cache variables</h2> <p>The following cache variables may also be set:</p> <dl class=\"docutils\"> <dt><code>GTEST_ROOT</code></dt> <dd>The root directory of the Google Test installation (may also be set as an environment variable)</dd> <dt><code>GTEST_MSVC_SEARCH</code></dt> <dd>If compiling with MSVC, this variable can be set to <code>MD</code> or <code>MT</code> (the default) to enable searching a GTest build tree</dd> </dl>   <h2 id=\"example-usage\">Example usage</h2> <pre data-language=\"python\">enable_testing()\nfind_package(GTest REQUIRED)\n\nadd_executable(foo foo.cc)\ntarget_link_libraries(foo GTest::GTest GTest::Main)\n\nadd_test(AllTestsInFoo foo)\n</pre>   <h2 id=\"deeper-integration-with-ctest\">Deeper integration with CTest</h2> <p>If you would like each Google test to show up in CTest as a test you may use the following macro:</p> <pre data-language=\"python\">GTEST_ADD_TESTS(executable extra_args files...)\n</pre> <dl class=\"docutils\"> <dt><code>executable</code></dt> <dd>the path to the test executable</dd> <dt><code>extra_args</code></dt> <dd>a list of extra arguments to be passed to executable enclosed in quotes (or <code>\"\"</code> for none)</dd> <dt><code>files...</code></dt> <dd>a list of source files to search for tests and test fixtures. Or <code>AUTO</code> to find them from executable target</dd> </dl> <p>However, note that this macro will slow down your tests by running an executable for each test and test fixture. You will also have to re-run CMake after adding or removing tests or test fixtures.</p> <p>Example usage:</p> <pre data-language=\"python\">set(FooTestArgs --foo 1 --bar 2)\nadd_executable(FooTest FooUnitTest.cc)\nGTEST_ADD_TESTS(FooTest \"${FooTestArgs}\" AUTO)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGTest.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGTest.html</a>\n  </p>\n</div>\n","module/findgtk2":"<h1 id=\"module:FindGTK2\">FindGTK2</h1> <p id=\"findgtk2\">FindGTK2.cmake</p> <p>This module can find the GTK2 widget libraries and several of its other optional components like gtkmm, glade, and glademm.</p> <p>NOTE: If you intend to use version checking, CMake 2.6.2 or later is</p> <pre data-language=\"python\">required.\n</pre> <p>Specify one or more of the following components as you call this find module. See example below.</p> <pre data-language=\"python\">gtk\ngtkmm\nglade\nglademm\n</pre> <p>The following variables will be defined for your use</p> <pre data-language=\"python\">GTK2_FOUND - Were all of your specified components found?\nGTK2_INCLUDE_DIRS - All include directories\nGTK2_LIBRARIES - All libraries\nGTK2_TARGETS - All imported targets\nGTK2_DEFINITIONS - Additional compiler flags\n</pre> <pre data-language=\"python\">GTK2_VERSION - The version of GTK2 found (x.y.z)\nGTK2_MAJOR_VERSION - The major version of GTK2\nGTK2_MINOR_VERSION - The minor version of GTK2\nGTK2_PATCH_VERSION - The patch version of GTK2\n</pre> <p>Optional variables you can define prior to calling this module:</p> <pre data-language=\"python\">GTK2_DEBUG - Enables verbose debugging of the module\nGTK2_ADDITIONAL_SUFFIXES - Allows defining additional directories to\n                           search for include files\n</pre> <p>================= Example Usage:</p> <pre data-language=\"python\">Call find_package() once, here are some examples to pick from:\n</pre> <pre data-language=\"python\">Require GTK 2.6 or later\n    find_package(GTK2 2.6 REQUIRED gtk)\n</pre> <pre data-language=\"python\">Require GTK 2.10 or later and Glade\n    find_package(GTK2 2.10 REQUIRED gtk glade)\n</pre> <pre data-language=\"python\">Search for GTK/GTKMM 2.8 or later\n    find_package(GTK2 2.8 COMPONENTS gtk gtkmm)\n</pre> <pre data-language=\"python\">if(GTK2_FOUND)\n   include_directories(${GTK2_INCLUDE_DIRS})\n   add_executable(mygui mygui.cc)\n   target_link_libraries(mygui ${GTK2_LIBRARIES})\nendif()\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGTK2.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGTK2.html</a>\n  </p>\n</div>\n","module/findgtk":"<h1 id=\"module:FindGTK\">FindGTK</h1> <p id=\"findgtk\">try to find GTK (and glib) and GTKGLArea</p> <pre data-language=\"python\">GTK_INCLUDE_DIR   - Directories to include to use GTK\nGTK_LIBRARIES     - Files to link against to use GTK\nGTK_FOUND         - GTK was found\nGTK_GL_FOUND      - GTK's GL features were found\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindGTK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindGTK.html</a>\n  </p>\n</div>\n","module/findhdf5":"<h1 id=\"module:FindHDF5\">FindHDF5</h1> <p id=\"findhdf5\">Find HDF5, a library for reading and writing self describing array data.</p> <p>This module invokes the HDF5 wrapper compiler that should be installed alongside HDF5. Depending upon the HDF5 Configuration, the wrapper compiler is called either h5cc or h5pcc. If this succeeds, the module will then call the compiler with the -show argument to see what flags are used when compiling an HDF5 client application.</p> <p>The module will optionally accept the COMPONENTS argument. If no COMPONENTS are specified, then the find module will default to finding only the HDF5 C library. If one or more COMPONENTS are specified, the module will attempt to find the language bindings for the specified components. The only valid components are C, CXX, Fortran, HL, and Fortran_HL. If the COMPONENTS argument is not given, the module will attempt to find only the C bindings.</p> <p>On UNIX systems, this module will read the variable HDF5_USE_STATIC_LIBRARIES to determine whether or not to prefer a static link to a dynamic link for HDF5 and all of it’s dependencies. To use this feature, make sure that the HDF5_USE_STATIC_LIBRARIES variable is set before the call to find_package.</p> <p>To provide the module with a hint about where to find your HDF5 installation, you can set the environment variable HDF5_ROOT. The Find module will then look in this path when searching for HDF5 executables, paths, and libraries.</p> <p>Both the serial and parallel HDF5 wrappers are considered and the first directory to contain either one will be used. In the event that both appear in the same directory the serial version is preferentially selected. This behavior can be reversed by setting the variable HDF5_PREFER_PARALLEL to true.</p> <p>In addition to finding the includes and libraries required to compile an HDF5 client application, this module also makes an effort to find tools that come with the HDF5 distribution that may be useful for regression testing.</p> <p>This module will define the following variables:</p> <pre data-language=\"python\">HDF5_INCLUDE_DIRS - Location of the hdf5 includes\nHDF5_INCLUDE_DIR - Location of the hdf5 includes (deprecated)\nHDF5_DEFINITIONS - Required compiler definitions for HDF5\nHDF5_C_LIBRARIES - Required libraries for the HDF5 C bindings.\nHDF5_CXX_LIBRARIES - Required libraries for the HDF5 C++ bindings\nHDF5_Fortran_LIBRARIES - Required libraries for the HDF5 Fortran bindings\nHDF5_HL_LIBRARIES - Required libraries for the HDF5 high level API\nHDF5_Fortran_HL_LIBRARIES - Required libraries for the high level Fortran\n                            bindings.\nHDF5_LIBRARIES - Required libraries for all requested bindings\nHDF5_FOUND - true if HDF5 was found on the system\nHDF5_VERSION - HDF5 version in format Major.Minor.Release\nHDF5_LIBRARY_DIRS - the full set of library directories\nHDF5_IS_PARALLEL - Whether or not HDF5 was found with parallel IO support\nHDF5_C_COMPILER_EXECUTABLE - the path to the HDF5 C wrapper compiler\nHDF5_CXX_COMPILER_EXECUTABLE - the path to the HDF5 C++ wrapper compiler\nHDF5_Fortran_COMPILER_EXECUTABLE - the path to the HDF5 Fortran wrapper compiler\nHDF5_DIFF_EXECUTABLE - the path to the HDF5 dataset comparison tool\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindHDF5.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindHDF5.html</a>\n  </p>\n</div>\n","module/findhg":"<h1 id=\"module:FindHg\">FindHg</h1> <p id=\"findhg\">Extract information from a mercurial working copy.</p> <p>The module defines the following variables:</p> <pre data-language=\"python\">HG_EXECUTABLE - path to mercurial command line client (hg)\nHG_FOUND - true if the command line client was found\nHG_VERSION_STRING - the version of mercurial found\n</pre> <p>If the command line client executable is found the following macro is defined:</p> <pre data-language=\"python\">HG_WC_INFO(&lt;dir&gt; &lt;var-prefix&gt;)\n</pre> <p>Hg_WC_INFO extracts information of a mercurial working copy at a given location. This macro defines the following variables:</p> <pre data-language=\"python\">&lt;var-prefix&gt;_WC_CHANGESET - current changeset\n&lt;var-prefix&gt;_WC_REVISION - current revision\n</pre> <p>Example usage:</p> <pre data-language=\"python\">find_package(Hg)\nif(HG_FOUND)\n  message(\"hg found: ${HG_EXECUTABLE}\")\n  HG_WC_INFO(${PROJECT_SOURCE_DIR} Project)\n  message(\"Current revision is ${Project_WC_REVISION}\")\n  message(\"Current changeset is ${Project_WC_CHANGESET}\")\nendif()\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindHg.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindHg.html</a>\n  </p>\n</div>\n","module/findice":"<h1 id=\"module:FindIce\">FindIce</h1> <p id=\"findice\">Find the ZeroC Internet Communication Engine (ICE) programs, libraries and datafiles.</p> <p>This module supports multiple components. Components can include any of: <code>Freeze</code>, <code>Glacier2</code>, <code>Ice</code>, <code>IceBox</code>, <code>IceDB</code>, <code>IceGrid</code>, <code>IcePatch</code>, <code>IceSSL</code>, <code>IceStorm</code>, <code>IceUtil</code>, <code>IceXML</code>, or <code>Slice</code>.</p> <p>This module reports information about the Ice installation in several variables. General variables:</p> <pre data-language=\"python\">Ice_VERSION - Ice release version\nIce_FOUND - true if the main programs and libraries were found\nIce_LIBRARIES - component libraries to be linked\nIce_INCLUDE_DIRS - the directories containing the Ice headers\nIce_SLICE_DIRS - the directories containing the Ice slice interface\n                 definitions\n</pre> <p>Imported targets:</p> <pre data-language=\"python\">Ice::&lt;C&gt;\n</pre> <p>Where <code>&lt;C&gt;</code> is the name of an Ice component, for example <code>Ice::Glacier2</code>.</p> <p>Ice slice programs are reported in:</p> <pre data-language=\"python\">Ice_SLICE2CPP_EXECUTABLE - path to slice2cpp executable\nIce_SLICE2CS_EXECUTABLE - path to slice2cs executable\nIce_SLICE2FREEZEJ_EXECUTABLE - path to slice2freezej executable\nIce_SLICE2FREEZE_EXECUTABLE - path to slice2freeze executable\nIce_SLICE2HTML_EXECUTABLE - path to slice2html executable\nIce_SLICE2JAVA_EXECUTABLE - path to slice2java executable\nIce_SLICE2JS_EXECUTABLE - path to slice2js executable\nIce_SLICE2PHP_EXECUTABLE - path to slice2php executable\nIce_SLICE2PY_EXECUTABLE - path to slice2py executable\nIce_SLICE2RB_EXECUTABLE - path to slice2rb executable\n</pre> <p>Ice programs are reported in:</p> <pre data-language=\"python\">Ice_GLACIER2ROUTER_EXECUTABLE - path to glacier2router executable\nIce_ICEBOX_EXECUTABLE - path to icebox executable\nIce_ICEBOXADMIN_EXECUTABLE - path to iceboxadmin executable\nIce_ICEBOXD_EXECUTABLE - path to iceboxd executable\nIce_ICEBOXNET_EXECUTABLE - path to iceboxnet executable\nIce_ICEGRIDADMIN_EXECUTABLE - path to icegridadmin executable\nIce_ICEGRIDNODE_EXECUTABLE - path to icegridnode executable\nIce_ICEGRIDNODED_EXECUTABLE - path to icegridnoded executable\nIce_ICEGRIDREGISTRY_EXECUTABLE - path to icegridregistry executable\nIce_ICEGRIDREGISTRYD_EXECUTABLE - path to icegridregistryd executable\nIce_ICEPATCH2CALC_EXECUTABLE - path to icepatch2calc executable\nIce_ICEPATCH2CLIENT_EXECUTABLE - path to icepatch2client executable\nIce_ICEPATCH2SERVER_EXECUTABLE - path to icepatch2server executable\nIce_ICESERVICEINSTALL_EXECUTABLE - path to iceserviceinstall executable\nIce_ICESTORMADMIN_EXECUTABLE - path to icestormadmin executable\nIce_ICESTORMMIGRATE_EXECUTABLE - path to icestormmigrate executable\n</pre> <p>Ice db programs (Windows only; standard system versions on all other platforms) are reported in:</p> <pre data-language=\"python\">Ice_DB_ARCHIVE_EXECUTABLE - path to db_archive executable\nIce_DB_CHECKPOINT_EXECUTABLE - path to db_checkpoint executable\nIce_DB_DEADLOCK_EXECUTABLE - path to db_deadlock executable\nIce_DB_DUMP_EXECUTABLE - path to db_dump executable\nIce_DB_HOTBACKUP_EXECUTABLE - path to db_hotbackup executable\nIce_DB_LOAD_EXECUTABLE - path to db_load executable\nIce_DB_LOG_VERIFY_EXECUTABLE - path to db_log_verify executable\nIce_DB_PRINTLOG_EXECUTABLE - path to db_printlog executable\nIce_DB_RECOVER_EXECUTABLE - path to db_recover executable\nIce_DB_STAT_EXECUTABLE - path to db_stat executable\nIce_DB_TUNER_EXECUTABLE - path to db_tuner executable\nIce_DB_UPGRADE_EXECUTABLE - path to db_upgrade executable\nIce_DB_VERIFY_EXECUTABLE - path to db_verify executable\nIce_DUMPDB_EXECUTABLE - path to dumpdb executable\nIce_TRANSFORMDB_EXECUTABLE - path to transformdb executable\n</pre> <p>Ice component libraries are reported in:</p> <pre data-language=\"python\">Ice_&lt;C&gt;_FOUND - ON if component was found\nIce_&lt;C&gt;_LIBRARIES - libraries for component\n</pre> <p>Note that <code>&lt;C&gt;</code> is the uppercased name of the component.</p> <p>This module reads hints about search results from:</p> <pre data-language=\"python\">Ice_HOME - the root of the Ice installation\n</pre> <p>The environment variable <code>ICE_HOME</code> may also be used; the Ice_HOME variable takes precedence.</p> <p>The following cache variables may also be set:</p> <pre data-language=\"python\">Ice_&lt;P&gt;_EXECUTABLE - the path to executable &lt;P&gt;\nIce_INCLUDE_DIR - the directory containing the Ice headers\nIce_SLICE_DIR - the directory containing the Ice slice interface\n                definitions\nIce_&lt;C&gt;_LIBRARY - the library for component &lt;C&gt;\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In most cases none of the above variables will require setting, unless multiple Ice versions are available and a specific version is required. On Windows, the most recent version of Ice will be found through the registry. On Unix, the programs, headers and libraries will usually be in standard locations, but Ice_SLICE_DIRS might not be automatically detected (commonly known locations are searched). All the other variables are defaulted using Ice_HOME, if set. It’s possible to set Ice_HOME and selectively specify alternative locations for the other components; this might be required for e.g. newer versions of Visual Studio if the heuristics are not sufficient to identify the correct programs and libraries for the specific Visual Studio version.</p> </div> <p>Other variables one may set to control this module are:</p> <pre data-language=\"python\">Ice_DEBUG - Set to ON to enable debug output from FindIce.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindIce.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindIce.html</a>\n  </p>\n</div>\n","module/findhspell":"<h1 id=\"module:FindHSPELL\">FindHSPELL</h1> <p id=\"findhspell\">Try to find Hspell</p> <p>Once done this will define</p> <pre data-language=\"python\">HSPELL_FOUND - system has Hspell\nHSPELL_INCLUDE_DIR - the Hspell include directory\nHSPELL_LIBRARIES - The libraries needed to use Hspell\nHSPELL_DEFINITIONS - Compiler switches required for using Hspell\n</pre> <pre data-language=\"python\">HSPELL_VERSION_STRING - The version of Hspell found (x.y)\nHSPELL_MAJOR_VERSION  - the major version of Hspell\nHSPELL_MINOR_VERSION  - The minor version of Hspell\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindHSPELL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindHSPELL.html</a>\n  </p>\n</div>\n","module/findhtmlhelp":"<h1 id=\"module:FindHTMLHelp\">FindHTMLHelp</h1> <p id=\"findhtmlhelp\">This module looks for Microsoft HTML Help Compiler</p> <p>It defines:</p> <pre data-language=\"python\">HTML_HELP_COMPILER     : full path to the Compiler (hhc.exe)\nHTML_HELP_INCLUDE_PATH : include path to the API (htmlhelp.h)\nHTML_HELP_LIBRARY      : full path to the library (htmlhelp.lib)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindHTMLHelp.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindHTMLHelp.html</a>\n  </p>\n</div>\n","module/findimagemagick":"<h1 id=\"module:FindImageMagick\">FindImageMagick</h1> <p id=\"findimagemagick\">Find the ImageMagick binary suite.</p> <p>This module will search for a set of ImageMagick tools specified as components in the FIND_PACKAGE call. Typical components include, but are not limited to (future versions of ImageMagick might have additional components not listed here):</p> <pre data-language=\"python\">animate\ncompare\ncomposite\nconjure\nconvert\ndisplay\nidentify\nimport\nmogrify\nmontage\nstream\n</pre> <p>If no component is specified in the FIND_PACKAGE call, then it only searches for the ImageMagick executable directory. This code defines the following variables:</p> <pre data-language=\"python\">ImageMagick_FOUND                  - TRUE if all components are found.\nImageMagick_EXECUTABLE_DIR         - Full path to executables directory.\nImageMagick_&lt;component&gt;_FOUND      - TRUE if &lt;component&gt; is found.\nImageMagick_&lt;component&gt;_EXECUTABLE - Full path to &lt;component&gt; executable.\nImageMagick_VERSION_STRING         - the version of ImageMagick found\n                                     (since CMake 2.8.8)\n</pre> <p>ImageMagick_VERSION_STRING will not work for old versions like 5.2.3.</p> <p>There are also components for the following ImageMagick APIs:</p> <pre data-language=\"python\">Magick++\nMagickWand\nMagickCore\n</pre> <p>For these components the following variables are set:</p> <pre data-language=\"python\">ImageMagick_FOUND                    - TRUE if all components are found.\nImageMagick_INCLUDE_DIRS             - Full paths to all include dirs.\nImageMagick_LIBRARIES                - Full paths to all libraries.\nImageMagick_&lt;component&gt;_FOUND        - TRUE if &lt;component&gt; is found.\nImageMagick_&lt;component&gt;_INCLUDE_DIRS - Full path to &lt;component&gt; include dirs.\nImageMagick_&lt;component&gt;_LIBRARIES    - Full path to &lt;component&gt; libraries.\n</pre> <p>Example Usages:</p> <pre data-language=\"python\">find_package(ImageMagick)\nfind_package(ImageMagick COMPONENTS convert)\nfind_package(ImageMagick COMPONENTS convert mogrify display)\nfind_package(ImageMagick COMPONENTS Magick++)\nfind_package(ImageMagick COMPONENTS Magick++ convert)\n</pre> <p>Note that the standard FIND_PACKAGE features are supported (i.e., QUIET, REQUIRED, etc.).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindImageMagick.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindImageMagick.html</a>\n  </p>\n</div>\n","module/findicotool":"<h1 id=\"module:FindIcotool\">FindIcotool</h1> <p id=\"findicotool\">Find icotool</p> <p>This module looks for icotool. This module defines the following values:</p> <pre data-language=\"python\">ICOTOOL_EXECUTABLE: the full path to the icotool tool.\nICOTOOL_FOUND: True if icotool has been found.\nICOTOOL_VERSION_STRING: the version of icotool found.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindIcotool.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindIcotool.html</a>\n  </p>\n</div>\n","module/findintl":"<h1 id=\"module:FindIntl\">FindIntl</h1> <p id=\"findintl\">Find the Gettext libintl headers and libraries.</p> <p>This module reports information about the Gettext libintl installation in several variables. General variables:</p> <pre data-language=\"python\">Intl_FOUND - true if the libintl headers and libraries were found\nIntl_INCLUDE_DIRS - the directory containing the libintl headers\nIntl_LIBRARIES - libintl libraries to be linked\n</pre> <p>The following cache variables may also be set:</p> <pre data-language=\"python\">Intl_INCLUDE_DIR - the directory containing the libintl headers\nIntl_LIBRARY - the libintl library (if any)\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">On some platforms, such as Linux with GNU libc, the gettext functions are present in the C standard library and libintl is not required. <code>Intl_LIBRARIES</code> will be empty in this case.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you wish to use the Gettext tools (<code>msgmerge</code>, <code>msgfmt</code>, etc.), use <a class=\"reference internal\" href=\"findgettext#module:FindGettext\" title=\"FindGettext\" id=\"index-0-module:FindGettext\"><code>FindGettext</code></a>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindIntl.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindIntl.html</a>\n  </p>\n</div>\n","module/finditk":"<h1 id=\"module:FindITK\">FindITK</h1> <p id=\"finditk\">This module no longer exists.</p> <p>This module existed in versions of CMake prior to 3.1, but became only a thin wrapper around <code>find_package(ITK NO_MODULE)</code> to provide compatibility for projects using long-outdated conventions. Now <code>find_package(ITK)</code> will search for <code>ITKConfig.cmake</code> directly.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindITK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindITK.html</a>\n  </p>\n</div>\n","module/findjasper":"<h1 id=\"module:FindJasper\">FindJasper</h1> <p id=\"findjasper\">Try to find the Jasper JPEG2000 library</p> <p>Once done this will define</p> <pre data-language=\"python\">JASPER_FOUND - system has Jasper\nJASPER_INCLUDE_DIR - the Jasper include directory\nJASPER_LIBRARIES - the libraries needed to use Jasper\nJASPER_VERSION_STRING - the version of Jasper found (since CMake 2.8.8)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindJasper.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindJasper.html</a>\n  </p>\n</div>\n","module/findjava":"<h1 id=\"module:FindJava\">FindJava</h1> <p id=\"findjava\">Find Java</p> <p>This module finds if Java is installed and determines where the include files and libraries are. The caller may set variable JAVA_HOME to specify a Java installation prefix explicitly.</p> <p>Specify one or more of the following components as you call this find module. See example below.</p> <pre data-language=\"python\">Runtime     = User just want to execute some Java byte-compiled\nDevelopment = Development tools (java, javac, javah and javadoc), includes Runtime component\nIdlJ        = idl compiler for Java\nJarSigner   = signer tool for jar\n</pre> <p>This module sets the following result variables:</p> <pre data-language=\"python\">Java_JAVA_EXECUTABLE      = the full path to the Java runtime\nJava_JAVAC_EXECUTABLE     = the full path to the Java compiler\nJava_JAVAH_EXECUTABLE     = the full path to the Java header generator\nJava_JAVADOC_EXECUTABLE   = the full path to the Java documention generator\nJava_IDLJ_EXECUTABLE      = the full path to the Java idl compiler\nJava_JAR_EXECUTABLE       = the full path to the Java archiver\nJava_JARSIGNER_EXECUTABLE = the full path to the Java jar signer\nJava_VERSION_STRING       = Version of java found, eg. 1.6.0_12\nJava_VERSION_MAJOR        = The major version of the package found.\nJava_VERSION_MINOR        = The minor version of the package found.\nJava_VERSION_PATCH        = The patch version of the package found.\nJava_VERSION_TWEAK        = The tweak version of the package found (after '_')\nJava_VERSION              = This is set to: $major.$minor.$patch(.$tweak)\n</pre> <p>The minimum required version of Java can be specified using the standard CMake syntax, e.g. find_package(Java 1.5)</p> <p>NOTE: ${Java_VERSION} and ${Java_VERSION_STRING} are not guaranteed to be identical. For example some java version may return: Java_VERSION_STRING = 1.5.0_17 and Java_VERSION = 1.5.0.17</p> <p>another example is the Java OEM, with: Java_VERSION_STRING = 1.6.0-oem and Java_VERSION = 1.6.0</p> <p>For these components the following variables are set:</p> <pre data-language=\"python\">Java_FOUND                    - TRUE if all components are found.\nJava_INCLUDE_DIRS             - Full paths to all include dirs.\nJava_LIBRARIES                - Full paths to all libraries.\nJava_&lt;component&gt;_FOUND        - TRUE if &lt;component&gt; is found.\n</pre> <p>Example Usages:</p> <pre data-language=\"python\">find_package(Java)\nfind_package(Java COMPONENTS Runtime)\nfind_package(Java COMPONENTS Development)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindJava.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindJava.html</a>\n  </p>\n</div>\n","module/findjni":"<h1 id=\"module:FindJNI\">FindJNI</h1> <p id=\"findjni\">Find JNI java libraries.</p> <p>This module finds if Java is installed and determines where the include files and libraries are. It also determines what the name of the library is. The caller may set variable JAVA_HOME to specify a Java installation prefix explicitly.</p> <p>This module sets the following result variables:</p> <pre data-language=\"python\">JNI_INCLUDE_DIRS      = the include dirs to use\nJNI_LIBRARIES         = the libraries to use\nJNI_FOUND             = TRUE if JNI headers and libraries were found.\nJAVA_AWT_LIBRARY      = the path to the jawt library\nJAVA_JVM_LIBRARY      = the path to the jvm library\nJAVA_INCLUDE_PATH     = the include path to jni.h\nJAVA_INCLUDE_PATH2    = the include path to jni_md.h\nJAVA_AWT_INCLUDE_PATH = the include path to jawt.h\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindJNI.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindJNI.html</a>\n  </p>\n</div>\n","module/findkde3":"<h1 id=\"module:FindKDE3\">FindKDE3</h1> <p id=\"findkde3\">Find the KDE3 include and library dirs, KDE preprocessors and define a some macros</p> <p>This module defines the following variables:</p> <dl class=\"docutils\"> <dt><code>KDE3_DEFINITIONS</code></dt> <dd>compiler definitions required for compiling KDE software</dd> <dt><code>KDE3_INCLUDE_DIR</code></dt> <dd>the KDE include directory</dd> <dt><code>KDE3_INCLUDE_DIRS</code></dt> <dd>the KDE and the Qt include directory, for use with include_directories()</dd> <dt><code>KDE3_LIB_DIR</code></dt> <dd>the directory where the KDE libraries are installed, for use with link_directories()</dd> <dt><code>QT_AND_KDECORE_LIBS</code></dt> <dd>this contains both the Qt and the kdecore library</dd> <dt><code>KDE3_DCOPIDL_EXECUTABLE</code></dt> <dd>the dcopidl executable</dd> <dt><code>KDE3_DCOPIDL2CPP_EXECUTABLE</code></dt> <dd>the dcopidl2cpp executable</dd> <dt><code>KDE3_KCFGC_EXECUTABLE</code></dt> <dd>the kconfig_compiler executable</dd> <dt><code>KDE3_FOUND</code></dt> <dd>set to TRUE if all of the above has been found</dd> </dl> <p>The following user adjustable options are provided:</p> <dl class=\"docutils\"> <dt><code>KDE3_BUILD_TESTS</code></dt> <dd>enable this to build KDE testcases</dd> </dl> <p>It also adds the following macros (from KDE3Macros.cmake) SRCS_VAR is always the variable which contains the list of source files for your application or library.</p> <p>KDE3_AUTOMOC(file1 ... fileN)</p> <pre data-language=\"python\">Call this if you want to have automatic moc file handling.\nThis means if you include \"foo.moc\" in the source file foo.cpp\na moc file for the header foo.h will be created automatically.\nYou can set the property SKIP_AUTOMAKE using set_source_files_properties()\nto exclude some files in the list from being processed.\n</pre> <p>KDE3_ADD_MOC_FILES(SRCS_VAR file1 ... fileN )</p> <pre data-language=\"python\">If you don't use the KDE3_AUTOMOC() macro, for the files\nlisted here moc files will be created (named \"foo.moc.cpp\")\n</pre> <p>KDE3_ADD_DCOP_SKELS(SRCS_VAR header1.h ... headerN.h )</p> <pre data-language=\"python\">Use this to generate DCOP skeletions from the listed headers.\n</pre> <p>KDE3_ADD_DCOP_STUBS(SRCS_VAR header1.h ... headerN.h )</p> <pre data-language=\"python\">Use this to generate DCOP stubs from the listed headers.\n</pre> <p>KDE3_ADD_UI_FILES(SRCS_VAR file1.ui ... fileN.ui )</p> <pre data-language=\"python\">Use this to add the Qt designer ui files to your application/library.\n</pre> <p>KDE3_ADD_KCFG_FILES(SRCS_VAR file1.kcfgc ... fileN.kcfgc )</p> <pre data-language=\"python\">Use this to add KDE kconfig compiler files to your application/library.\n</pre> <p>KDE3_INSTALL_LIBTOOL_FILE(target)</p> <pre data-language=\"python\">This will create and install a simple libtool file for the given target.\n</pre> <p>KDE3_ADD_EXECUTABLE(name file1 ... fileN )</p> <pre data-language=\"python\">Currently identical to add_executable(), may provide some advanced\nfeatures in the future.\n</pre> <p>KDE3_ADD_KPART(name [WITH_PREFIX] file1 ... fileN )</p> <pre data-language=\"python\">Create a KDE plugin (KPart, kioslave, etc.) from the given source files.\nIf WITH_PREFIX is given, the resulting plugin will have the prefix \"lib\",\notherwise it won't.\nIt creates and installs an appropriate libtool la-file.\n</pre> <p>KDE3_ADD_KDEINIT_EXECUTABLE(name file1 ... fileN )</p> <pre data-language=\"python\">Create a KDE application in the form of a module loadable via kdeinit.\nA library named kdeinit_&lt;name&gt; will be created and a small executable\nwhich links to it.\n</pre> <p>The option KDE3_ENABLE_FINAL to enable all-in-one compilation is no longer supported.</p> <p>Author: Alexander Neundorf &lt;<a class=\"reference external\" href=\"mailto:neundorf%40kde.org\">neundorf<span>@</span>kde<span>.</span>org</a>&gt;</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindKDE3.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindKDE3.html</a>\n  </p>\n</div>\n","module/findjpeg":"<h1 id=\"module:FindJPEG\">FindJPEG</h1> <p id=\"findjpeg\">Find JPEG</p> <p>Find the native JPEG includes and library This module defines</p> <pre data-language=\"python\">JPEG_INCLUDE_DIR, where to find jpeglib.h, etc.\nJPEG_LIBRARIES, the libraries needed to use JPEG.\nJPEG_FOUND, If false, do not try to use JPEG.\n</pre> <p>also defined, but not for general use are</p> <pre data-language=\"python\">JPEG_LIBRARY, where to find the JPEG library.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindJPEG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindJPEG.html</a>\n  </p>\n</div>\n","module/findkde4":"<h1 id=\"module:FindKDE4\">FindKDE4</h1> <p id=\"findkde4\">Find KDE4 and provide all necessary variables and macros to compile software for it. It looks for KDE 4 in the following directories in the given order:</p> <pre data-language=\"python\">CMAKE_INSTALL_PREFIX\nKDEDIRS\n/opt/kde4\n</pre> <p>Please look in FindKDE4Internal.cmake and KDE4Macros.cmake for more information. They are installed with the KDE 4 libraries in $KDEDIRS/share/apps/cmake/modules/.</p> <p>Author: Alexander Neundorf &lt;<a class=\"reference external\" href=\"mailto:neundorf%40kde.org\">neundorf<span>@</span>kde<span>.</span>org</a>&gt;</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindKDE4.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindKDE4.html</a>\n  </p>\n</div>\n","module/findlapack":"<h1 id=\"module:FindLAPACK\">FindLAPACK</h1> <p id=\"findlapack\">Find LAPACK library</p> <p>This module finds an installed fortran library that implements the LAPACK linear-algebra interface (see <a class=\"reference external\" href=\"http://www.netlib.org/lapack/\">http://www.netlib.org/lapack/</a>).</p> <p>The approach follows that taken for the autoconf macro file, acx_lapack.m4 (distributed at <a class=\"reference external\" href=\"http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html\">http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html</a>).</p> <p>This module sets the following variables:</p> <pre data-language=\"python\">LAPACK_FOUND - set to true if a library implementing the LAPACK interface\n  is found\nLAPACK_LINKER_FLAGS - uncached list of required linker flags (excluding -l\n  and -L).\nLAPACK_LIBRARIES - uncached list of libraries (using full path name) to\n  link against to use LAPACK\nLAPACK95_LIBRARIES - uncached list of libraries (using full path name) to\n  link against to use LAPACK95\nLAPACK95_FOUND - set to true if a library implementing the LAPACK f95\n  interface is found\nBLA_STATIC  if set on this determines what kind of linkage we do (static)\nBLA_VENDOR  if set checks only the specified vendor, if not set checks\n   all the possibilities\nBLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK\n</pre> <p>## List of vendors (BLA_VENDOR) valid in this module # Intel(mkl), ACML,Apple, NAS, Generic</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindLAPACK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindLAPACK.html</a>\n  </p>\n</div>\n","module/findlatex":"<h1 id=\"module:FindLATEX\">FindLATEX</h1> <p id=\"findlatex\">Find Latex</p> <p>This module finds an installed Latex and determines the location of the compiler. Additionally the module looks for Latex-related software like BibTeX.</p> <p>This module sets the following result variables:</p> <pre data-language=\"python\">LATEX_FOUND:          whether found Latex and requested components\nLATEX_&lt;component&gt;_FOUND:  whether found &lt;component&gt;\nLATEX_COMPILER:       path to the LaTeX compiler\nPDFLATEX_COMPILER:    path to the PdfLaTeX compiler\nXELATEX_COMPILER:     path to the XeLaTeX compiler\nLUALATEX_COMPILER:    path to the LuaLaTeX compiler\nBIBTEX_COMPILER:      path to the BibTeX compiler\nBIBER_COMPILER:       path to the Biber compiler\nMAKEINDEX_COMPILER:   path to the MakeIndex compiler\nXINDY_COMPILER:       path to the xindy compiler\nDVIPS_CONVERTER:      path to the DVIPS converter\nDVIPDF_CONVERTER:     path to the DVIPDF converter\nPS2PDF_CONVERTER:     path to the PS2PDF converter\nPDFTOPS_CONVERTER:    path to the pdftops converter\nLATEX2HTML_CONVERTER: path to the LaTeX2Html converter\nHTLATEX_COMPILER:     path to the htlatex compiler\n</pre> <p>Possible components are:</p> <pre data-language=\"python\">PDFLATEX\nXELATEX\nLUALATEX\nBIBTEX\nBIBER\nMAKEINDEX\nXINDY\nDVIPS\nDVIPDF\nPS2PDF\nPDFTOPS\nLATEX2HTML\nHTLATEX\n</pre> <p>Example Usages:</p> <pre data-language=\"python\">find_package(LATEX)\nfind_package(LATEX COMPONENTS PDFLATEX)\nfind_package(LATEX COMPONENTS BIBTEX PS2PDF)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindLATEX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindLATEX.html</a>\n  </p>\n</div>\n","module/findlibarchive":"<h1 id=\"module:FindLibArchive\">FindLibArchive</h1> <p id=\"findlibarchive\">Find libarchive library and headers</p> <p>The module defines the following variables:</p> <pre data-language=\"python\">LibArchive_FOUND        - true if libarchive was found\nLibArchive_INCLUDE_DIRS - include search path\nLibArchive_LIBRARIES    - libraries to link\nLibArchive_VERSION      - libarchive 3-component version number\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindLibArchive.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindLibArchive.html</a>\n  </p>\n</div>\n","module/findlibxslt":"<h1 id=\"module:FindLibXslt\">FindLibXslt</h1> <p id=\"findlibxslt\">Try to find the LibXslt library</p> <p>Once done this will define</p> <pre data-language=\"python\">LIBXSLT_FOUND - system has LibXslt\nLIBXSLT_INCLUDE_DIR - the LibXslt include directory\nLIBXSLT_LIBRARIES - Link these to LibXslt\nLIBXSLT_DEFINITIONS - Compiler switches required for using LibXslt\nLIBXSLT_VERSION_STRING - version of LibXslt found (since CMake 2.8.8)\n</pre> <p>Additionally, the following two variables are set (but not required for using xslt):</p> <dl class=\"docutils\"> <dt><code>LIBXSLT_EXSLT_LIBRARIES</code></dt> <dd>Link to these if you need to link against the exslt library.</dd> <dt><code>LIBXSLT_XSLTPROC_EXECUTABLE</code></dt> <dd>Contains the full path to the xsltproc executable if found.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindLibXslt.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindLibXslt.html</a>\n  </p>\n</div>\n","module/findliblzma":"<h1 id=\"module:FindLibLZMA\">FindLibLZMA</h1> <p id=\"findliblzma\">Find LibLZMA</p> <p>Find LibLZMA headers and library</p> <pre data-language=\"python\">LIBLZMA_FOUND             - True if liblzma is found.\nLIBLZMA_INCLUDE_DIRS      - Directory where liblzma headers are located.\nLIBLZMA_LIBRARIES         - Lzma libraries to link against.\nLIBLZMA_HAS_AUTO_DECODER  - True if lzma_auto_decoder() is found (required).\nLIBLZMA_HAS_EASY_ENCODER  - True if lzma_easy_encoder() is found (required).\nLIBLZMA_HAS_LZMA_PRESET   - True if lzma_lzma_preset() is found (required).\nLIBLZMA_VERSION_MAJOR     - The major version of lzma\nLIBLZMA_VERSION_MINOR     - The minor version of lzma\nLIBLZMA_VERSION_PATCH     - The patch version of lzma\nLIBLZMA_VERSION_STRING    - version number as a string (ex: \"5.0.3\")\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindLibLZMA.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindLibLZMA.html</a>\n  </p>\n</div>\n","module/findlibxml2":"<h1 id=\"module:FindLibXml2\">FindLibXml2</h1> <p id=\"findlibxml2\">Try to find the LibXml2 xml processing library</p> <p>Once done this will define</p> <pre data-language=\"python\">LIBXML2_FOUND - System has LibXml2\nLIBXML2_INCLUDE_DIR - The LibXml2 include directory\nLIBXML2_LIBRARIES - The libraries needed to use LibXml2\nLIBXML2_DEFINITIONS - Compiler switches required for using LibXml2\nLIBXML2_XMLLINT_EXECUTABLE - The XML checking tool xmllint coming with LibXml2\nLIBXML2_VERSION_STRING - the version of LibXml2 found (since CMake 2.8.8)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindLibXml2.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindLibXml2.html</a>\n  </p>\n</div>\n","module/findlua51":"<h1 id=\"module:FindLua51\">FindLua51</h1> <p id=\"findlua51\">Locate Lua library This module defines</p> <pre data-language=\"python\">LUA51_FOUND, if false, do not try to link to Lua\nLUA_LIBRARIES\nLUA_INCLUDE_DIR, where to find lua.h\nLUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n</pre> <p>Note that the expected include convention is</p> <pre data-language=\"python\">#include \"lua.h\"\n</pre> <p>and not</p> <pre data-language=\"python\">#include &lt;lua/lua.h&gt;\n</pre> <p>This is because, the lua location is not standardized and may exist in locations other than lua/</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindLua51.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindLua51.html</a>\n  </p>\n</div>\n","module/findlua50":"<h1 id=\"module:FindLua50\">FindLua50</h1> <p id=\"findlua50\">Locate Lua library This module defines</p> <pre data-language=\"python\">LUA50_FOUND, if false, do not try to link to Lua\nLUA_LIBRARIES, both lua and lualib\nLUA_INCLUDE_DIR, where to find lua.h and lualib.h (and probably lauxlib.h)\n</pre> <p>Note that the expected include convention is</p> <pre data-language=\"python\">#include \"lua.h\"\n</pre> <p>and not</p> <pre data-language=\"python\">#include &lt;lua/lua.h&gt;\n</pre> <p>This is because, the lua location is not standardized and may exist in locations other than lua/</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindLua50.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindLua50.html</a>\n  </p>\n</div>\n","module/findlua":"<h1 id=\"module:FindLua\">FindLua</h1> <p id=\"findlua\">Locate Lua library This module defines</p> <pre data-language=\"python\">LUA_FOUND          - if false, do not try to link to Lua\nLUA_LIBRARIES      - both lua and lualib\nLUA_INCLUDE_DIR    - where to find lua.h\nLUA_VERSION_STRING - the version of Lua found\nLUA_VERSION_MAJOR  - the major version of Lua\nLUA_VERSION_MINOR  - the minor version of Lua\nLUA_VERSION_PATCH  - the patch version of Lua\n</pre> <p>Note that the expected include convention is</p> <pre data-language=\"python\">#include \"lua.h\"\n</pre> <p>and not</p> <pre data-language=\"python\">#include &lt;lua/lua.h&gt;\n</pre> <p>This is because, the lua location is not standardized and may exist in locations other than lua/</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindLua.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindLua.html</a>\n  </p>\n</div>\n","module/findmfc":"<h1 id=\"module:FindMFC\">FindMFC</h1> <p id=\"findmfc\">Find MFC on Windows</p> <p>Find the native MFC - i.e. decide if an application can link to the MFC libraries.</p> <pre data-language=\"python\">MFC_FOUND - Was MFC support found\n</pre> <p>You don’t need to include anything or link anything to use it.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindMFC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindMFC.html</a>\n  </p>\n</div>\n","module/findmotif":"<h1 id=\"module:FindMotif\">FindMotif</h1> <p id=\"findmotif\">Try to find Motif (or lesstif)</p> <p>Once done this will define:</p> <pre data-language=\"python\">MOTIF_FOUND        - system has MOTIF\nMOTIF_INCLUDE_DIR  - include paths to use Motif\nMOTIF_LIBRARIES    - Link these to use Motif\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindMotif.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindMotif.html</a>\n  </p>\n</div>\n","module/findmatlab":"<h1 id=\"module:FindMatlab\">FindMatlab</h1> <p id=\"findmatlab\">Finds Matlab installations and provides Matlab tools and libraries to cmake.</p> <p>This package first intention is to find the libraries associated with Matlab in order to be able to build Matlab extensions (mex files). It can also be used:</p> <ul class=\"simple\"> <li>run specific commands in Matlab</li> <li>declare Matlab unit test</li> <li>retrieve various information from Matlab (mex extensions, versions and release queries, ...)</li> </ul> <p>The module supports the following components:</p> <ul class=\"simple\"> <li>\n<code>MX_LIBRARY</code> and <code>ENG_LIBRARY</code> respectively the MX and ENG libraries of Matlab</li> <li>\n<code>MAIN_PROGRAM</code> the Matlab binary program.</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The version given to the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> directive is the Matlab <strong>version</strong>, which should not be confused with the Matlab <em>release</em> name (eg. <cite>R2014</cite>). The <a class=\"reference internal\" href=\"#command:matlab_get_version_from_release_name\" title=\"matlab_get_version_from_release_name\" id=\"index-0-command:matlab_get_version_from_release_name\"><code>matlab_get_version_from_release_name()</code></a> and <a class=\"reference internal\" href=\"#command:matlab_get_release_name_from_version\" title=\"matlab_get_release_name_from_version\" id=\"index-0-command:matlab_get_release_name_from_version\"><code>matlab_get_release_name_from_version()</code></a> allow a mapping from the release name to the version.</p> </div> <p>The variable <a class=\"reference internal\" href=\"#variable:Matlab_ROOT_DIR\" title=\"Matlab_ROOT_DIR\" id=\"index-0-variable:Matlab_ROOT_DIR\"><code>Matlab_ROOT_DIR</code></a> may be specified in order to give the path of the desired Matlab version. Otherwise, the behaviour is platform specific:</p> <ul class=\"simple\"> <li>Windows: The installed versions of Matlab are retrieved from the Windows registry</li> <li>OS X: The installed versions of Matlab are given by the MATLAB paths in <code>/Application</code>. If no such application is found, it falls back to the one that might be accessible from the PATH.</li> <li>Unix: The desired Matlab should be accessible from the PATH.</li> </ul> <p>Additional information is provided when <a class=\"reference internal\" href=\"#variable:MATLAB_FIND_DEBUG\" title=\"MATLAB_FIND_DEBUG\" id=\"index-0-variable:MATLAB_FIND_DEBUG\"><code>MATLAB_FIND_DEBUG</code></a> is set. When a Matlab binary is found automatically and the <code>MATLAB_VERSION</code> is not given, the version is queried from Matlab directly. On Windows, it can make a window running Matlab appear.</p> <p>The mapping of the release names and the version of Matlab is performed by defining pairs (name, version). The variable <a class=\"reference internal\" href=\"#variable:MATLAB_ADDITIONAL_VERSIONS\" title=\"MATLAB_ADDITIONAL_VERSIONS\" id=\"index-0-variable:MATLAB_ADDITIONAL_VERSIONS\"><code>MATLAB_ADDITIONAL_VERSIONS</code></a> may be provided before the call to the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-1-command:find_package\"><code>find_package()</code></a> in order to handle additional versions.</p> <p>A Matlab scripts can be added to the set of tests using the <a class=\"reference internal\" href=\"#command:matlab_add_unit_test\" title=\"matlab_add_unit_test\" id=\"index-0-command:matlab_add_unit_test\"><code>matlab_add_unit_test()</code></a>. By default, the Matlab unit test framework will be used (&gt;= 2013a) to run this script, but regular <code>.m</code> files returning an exit code can be used as well (0 indicating a success).</p>  <h2 id=\"module-input-variables\">Module Input Variables</h2> <p>Users or projects may set the following variables to configure the module behaviour:</p> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#variable:Matlab_ROOT_DIR\" title=\"Matlab_ROOT_DIR\" id=\"index-1-variable:Matlab_ROOT_DIR\"><code>Matlab_ROOT_DIR</code></a></dt> <dd>the root of the Matlab installation.</dd> <dt><a class=\"reference internal\" href=\"#variable:MATLAB_FIND_DEBUG\" title=\"MATLAB_FIND_DEBUG\" id=\"index-1-variable:MATLAB_FIND_DEBUG\"><code>MATLAB_FIND_DEBUG</code></a></dt> <dd>outputs debug information</dd> <dt><a class=\"reference internal\" href=\"#variable:MATLAB_ADDITIONAL_VERSIONS\" title=\"MATLAB_ADDITIONAL_VERSIONS\" id=\"index-1-variable:MATLAB_ADDITIONAL_VERSIONS\"><code>MATLAB_ADDITIONAL_VERSIONS</code></a></dt> <dd>additional versions of Matlab for the automatic retrieval of the installed versions.</dd> </dl>   <h2 id=\"variables-defined-by-the-module\">Variables defined by the module</h2>  <h3 id=\"result-variables\">Result variables</h3> <dl class=\"docutils\"> <dt><code>Matlab_FOUND</code></dt> <dd>\n<code>TRUE</code> if the Matlab installation is found, <code>FALSE</code> otherwise. All variable below are defined if Matlab is found.</dd> <dt><code>Matlab_ROOT_DIR</code></dt> <dd>the final root of the Matlab installation determined by the FindMatlab module.</dd> <dt><code>Matlab_MAIN_PROGRAM</code></dt> <dd>the Matlab binary program. Available only if the component <code>MAIN_PROGRAM</code> is given in the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-2-command:find_package\"><code>find_package()</code></a> directive.</dd> <dt><code>Matlab_INCLUDE_DIRS</code></dt> <dd>the path of the Matlab libraries headers</dd> <dt><code>Matlab_MEX_LIBRARY</code></dt> <dd>library for mex, always available.</dd> <dt><code>Matlab_MX_LIBRARY</code></dt> <dd>mx library of Matlab (arrays). Available only if the component <code>MX_LIBRARY</code> has been requested.</dd> <dt><code>Matlab_ENG_LIBRARY</code></dt> <dd>Matlab engine library. Available only if the component <code>ENG_LIBRARY</code> is requested.</dd> <dt><code>Matlab_LIBRARIES</code></dt> <dd>the whole set of libraries of Matlab</dd> <dt><code>Matlab_MEX_COMPILER</code></dt> <dd>the mex compiler of Matlab. Currently not used. Available only if the component <code>MEX_COMPILER</code> is asked</dd> </dl>   <h3 id=\"cached-variables\">Cached variables</h3> <dl class=\"docutils\"> <dt><code>Matlab_MEX_EXTENSION</code></dt> <dd>the extension of the mex files for the current platform (given by Matlab).</dd> <dt><code>Matlab_ROOT_DIR</code></dt> <dd>the location of the root of the Matlab installation found. If this value is changed by the user, the result variables are recomputed.</dd> </dl>    <h2 id=\"provided-macros\">Provided macros</h2> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#command:matlab_get_version_from_release_name\" title=\"matlab_get_version_from_release_name\" id=\"index-1-command:matlab_get_version_from_release_name\"><code>matlab_get_version_from_release_name()</code></a></dt> <dd>returns the version from the release name</dd> <dt><a class=\"reference internal\" href=\"#command:matlab_get_release_name_from_version\" title=\"matlab_get_release_name_from_version\" id=\"index-1-command:matlab_get_release_name_from_version\"><code>matlab_get_release_name_from_version()</code></a></dt> <dd>returns the release name from the Matlab version</dd> </dl>   <h2 id=\"provided-functions\">Provided functions</h2> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#command:matlab_add_mex\" title=\"matlab_add_mex\" id=\"index-0-command:matlab_add_mex\"><code>matlab_add_mex()</code></a></dt> <dd>adds a target compiling a MEX file.</dd> <dt><a class=\"reference internal\" href=\"#command:matlab_add_unit_test\" title=\"matlab_add_unit_test\" id=\"index-1-command:matlab_add_unit_test\"><code>matlab_add_unit_test()</code></a></dt> <dd>adds a Matlab unit test file as a test to the project.</dd> <dt><a class=\"reference internal\" href=\"#command:matlab_extract_all_installed_versions_from_registry\" title=\"matlab_extract_all_installed_versions_from_registry\" id=\"index-0-command:matlab_extract_all_installed_versions_from_registry\"><code>matlab_extract_all_installed_versions_from_registry()</code></a></dt> <dd>parses the registry for all Matlab versions. Available on Windows only. The part of the registry parsed is dependent on the host processor</dd> <dt><a class=\"reference internal\" href=\"#command:matlab_get_all_valid_matlab_roots_from_registry\" title=\"matlab_get_all_valid_matlab_roots_from_registry\" id=\"index-0-command:matlab_get_all_valid_matlab_roots_from_registry\"><code>matlab_get_all_valid_matlab_roots_from_registry()</code></a></dt> <dd>returns all the possible Matlab paths, according to a previously given list. Only the existing/accessible paths are kept. This is mainly useful for the searching all possible Matlab installation.</dd> <dt><a class=\"reference internal\" href=\"#command:matlab_get_mex_suffix\" title=\"matlab_get_mex_suffix\" id=\"index-0-command:matlab_get_mex_suffix\"><code>matlab_get_mex_suffix()</code></a></dt> <dd>returns the suffix to be used for the mex files (platform/architecture dependant)</dd> <dt><a class=\"reference internal\" href=\"#command:matlab_get_version_from_matlab_run\" title=\"matlab_get_version_from_matlab_run\" id=\"index-0-command:matlab_get_version_from_matlab_run\"><code>matlab_get_version_from_matlab_run()</code></a></dt> <dd>returns the version of Matlab, given the full directory of the Matlab program.</dd> </dl>   <h2 id=\"known-issues\">Known issues</h2> <dl class=\"docutils\"> <dt><strong>Symbol clash in a MEX target</strong></dt> <dd>\n<p class=\"first\">By default, every symbols inside a MEX file defined with the command <a class=\"reference internal\" href=\"#command:matlab_add_mex\" title=\"matlab_add_mex\" id=\"index-1-command:matlab_add_mex\"><code>matlab_add_mex()</code></a> have hidden visibility, except for the entry point. This is the default behaviour of the MEX compiler, which lowers the risk of symbol collision between the libraries shipped with Matlab, and the libraries to which the MEX file is linking to. This is also the default on Windows platforms.</p> <p class=\"last\">However, this is not sufficient in certain case, where for instance your MEX file is linking against libraries that are already loaded by Matlab, even if those libraries have different SONAMES. A possible solution is to hide the symbols of the libraries to which the MEX target is linking to. This can be achieved in GNU GCC compilers with the linker option <code>-Wl,--exclude-libs,ALL</code>.</p> </dd> <dt><strong>Tests using GPU resources</strong></dt> <dd>in case your MEX file is using the GPU and in order to be able to run unit tests on this MEX file, the GPU resources should be properly released by Matlab. A possible solution is to make Matlab aware of the use of the GPU resources in the session, which can be performed by a command such as <code>D = gpuDevice()</code> at the beginning of the test script (or via a fixture).</dd> </dl>   <h2 id=\"reference\">Reference</h2> <dl class=\"variable\"> <dt id=\"variable:Matlab_ROOT_DIR\"><code>Matlab_ROOT_DIR</code></dt> <dd>\n<p>The root folder of the Matlab installation. If set before the call to <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-3-command:find_package\"><code>find_package()</code></a>, the module will look for the components in that path. If not set, then an automatic search of Matlab will be performed. If set, it should point to a valid version of Matlab.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:MATLAB_FIND_DEBUG\"><code>MATLAB_FIND_DEBUG</code></dt> <dd>\n<p>If set, the lookup of Matlab and the intermediate configuration steps are outputted to the console.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:MATLAB_ADDITIONAL_VERSIONS\"><code>MATLAB_ADDITIONAL_VERSIONS</code></dt> <dd>\n<p>If set, specifies additional versions of Matlab that may be looked for. The variable should be a list of strings, organised by pairs of release name and versions, such as follows:</p> <pre data-language=\"python\">set(MATLAB_ADDITIONAL_VERSIONS\n    \"release_name1=corresponding_version1\"\n    \"release_name2=corresponding_version2\"\n    ...\n    )\n</pre> <p>Example:</p> <pre data-language=\"python\">set(MATLAB_ADDITIONAL_VERSIONS\n    \"R2013b=8.2\"\n    \"R2013a=8.1\"\n    \"R2012b=8.0\")\n</pre> <p>The order of entries in this list matters when several versions of Matlab are installed. The priority is set according to the ordering in this list.</p> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:matlab_get_version_from_release_name\"><code>matlab_get_version_from_release_name</code></dt> <dd>\n<p>Returns the version of Matlab (17.58) from a release name (R2017k)</p> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:matlab_get_release_name_from_version\"><code>matlab_get_release_name_from_version</code></dt> <dd>\n<p>Returns the release name (R2017k) from the version of Matlab (17.58)</p> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:matlab_extract_all_installed_versions_from_registry\"><code>matlab_extract_all_installed_versions_from_registry</code></dt> <dd>\n<p>This function parses the registry and founds the Matlab versions that are installed. The found versions are returned in <cite>matlab_versions</cite>. Set <cite>win64</cite> to <cite>TRUE</cite> if the 64 bit version of Matlab should be looked for The returned list contains all versions under <code>HKLM\\\\SOFTWARE\\\\Mathworks\\\\MATLAB</code> or an empty list in case an error occurred (or nothing found).</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Only the versions are provided. No check is made over the existence of the installation referenced in the registry,</p> </div> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:matlab_get_all_valid_matlab_roots_from_registry\"><code>matlab_get_all_valid_matlab_roots_from_registry</code></dt> <dd>\n<p>Populates the Matlab root with valid versions of Matlab. The returned matlab_roots is organized in pairs <code>(version_number,matlab_root_path)</code>.</p> <pre data-language=\"python\">matlab_get_all_valid_matlab_roots_from_registry(\n    matlab_versions\n    matlab_roots)\n</pre> <dl class=\"docutils\"> <dt><code>matlab_versions</code></dt> <dd>the versions of each of the Matlab installations</dd> <dt><code>matlab_roots</code></dt> <dd>the location of each of the Matlab installations</dd> </dl> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:matlab_get_mex_suffix\"><code>matlab_get_mex_suffix</code></dt> <dd>\n<p>Returns the extension of the mex files (the suffixes). This function should not be called before the appropriate Matlab root has been found.</p> <pre data-language=\"python\">matlab_get_mex_suffix(\n    matlab_root\n    mex_suffix)\n</pre> <dl class=\"docutils\"> <dt><code>matlab_root</code></dt> <dd>the root of the Matlab installation</dd> <dt><code>mex_suffix</code></dt> <dd>the variable name in which the suffix will be returned.</dd> </dl> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:matlab_get_version_from_matlab_run\"><code>matlab_get_version_from_matlab_run</code></dt> <dd>\n<p>This function runs Matlab program specified on arguments and extracts its version.</p> <pre data-language=\"python\">matlab_get_version_from_matlab_run(\n    matlab_binary_path\n    matlab_list_versions)\n</pre> <dl class=\"docutils\"> <dt><code>matlab_binary_path</code></dt> <dd>the location of the <cite>matlab</cite> binary executable</dd> <dt><code>matlab_list_versions</code></dt> <dd>the version extracted from Matlab</dd> </dl> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:matlab_add_unit_test\"><code>matlab_add_unit_test</code></dt> <dd>\n<p>Adds a Matlab unit test to the test set of cmake/ctest. This command requires the component <code>MAIN_PROGRAM</code>. The unit test uses the Matlab unittest framework (default, available starting Matlab 2013b+) except if the option <code>NO_UNITTEST_FRAMEWORK</code> is given.</p> <p>The function expects one Matlab test script file to be given. In the case <code>NO_UNITTEST_FRAMEWORK</code> is given, the unittest script file should contain the script to be run, plus an exit command with the exit value. This exit value will be passed to the ctest framework (0 success, non 0 failure). Additional arguments accepted by <a class=\"reference internal\" href=\"../command/add_test#command:add_test\" title=\"add_test\" id=\"index-0-command:add_test\"><code>add_test()</code></a> can be passed through <code>TEST_ARGS</code> (eg. <code>CONFIGURATION &lt;config&gt; ...</code>).</p> <pre data-language=\"python\">matlab_add_unit_test(\n    NAME &lt;name&gt;\n    UNITTEST_FILE matlab_file_containing_unittest.m\n    [UNITTEST_PRECOMMAND matlab_command_to_run]\n    [TIMEOUT timeout]\n    [ADDITIONAL_PATH path1 [path2 ...]]\n    [MATLAB_ADDITIONAL_STARTUP_OPTIONS option1 [option2 ...]]\n    [TEST_ARGS arg1 [arg2 ...]]\n    [NO_UNITTEST_FRAMEWORK]\n    )\n</pre> <p>The function arguments are:</p> <dl class=\"docutils\"> <dt><code>NAME</code></dt> <dd>name of the unittest in ctest.</dd> <dt><code>UNITTEST_FILE</code></dt> <dd>the matlab unittest file. Its path will be automatically added to the Matlab path.</dd> <dt><code>UNITTEST_PRECOMMAND</code></dt> <dd>Matlab script command to be ran before the file containing the test (eg. GPU device initialisation based on CMake variables).</dd> <dt><code>TIMEOUT</code></dt> <dd>the test timeout in seconds. Defaults to 180 seconds as the Matlab unit test may hang.</dd> <dt><code>ADDITIONAL_PATH</code></dt> <dd>a list of paths to add to the Matlab path prior to running the unit test.</dd> <dt><code>MATLAB_ADDITIONAL_STARTUP_OPTIONS</code></dt> <dd>a list of additional option in order to run Matlab from the command line.</dd> <dt><code>TEST_ARGS</code></dt> <dd>Additional options provided to the add_test command. These options are added to the default options (eg. “CONFIGURATIONS Release”)</dd> <dt><code>NO_UNITTEST_FRAMEWORK</code></dt> <dd>when set, indicates that the test should not use the unittest framework of Matlab (available for versions &gt;= R2013a).</dd> </dl> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:matlab_add_mex\"><code>matlab_add_mex</code></dt> <dd>\n<p>Adds a Matlab MEX target. This commands compiles the given sources with the current tool-chain in order to produce a MEX file. The final name of the produced output may be specified, as well as additional link libraries, and a documentation entry for the MEX file. Remaining arguments of the call are passed to the <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> command.</p> <pre data-language=\"python\">matlab_add_mex(\n    NAME &lt;name&gt;\n    SRC src1 [src2 ...]\n    [OUTPUT_NAME output_name]\n    [DOCUMENTATION file.txt]\n    [LINK_TO target1 target2 ...]\n    [...]\n)\n</pre> <dl class=\"docutils\"> <dt><code>NAME</code></dt> <dd>name of the target.</dd> <dt><code>SRC</code></dt> <dd>list of tje source files.</dd> <dt><code>LINK_TO</code></dt> <dd>a list of additional link dependencies. The target links to <code>libmex</code> by default. If <code>Matlab_MX_LIBRARY</code> is defined, it also links to <code>libmx</code>.</dd> <dt><code>OUTPUT_NAME</code></dt> <dd>if given, overrides the default name. The default name is the name of the target without any prefix and with <code>Matlab_MEX_EXTENSION</code> suffix.</dd> <dt><code>DOCUMENTATION</code></dt> <dd>if given, the file <code>file.txt</code> will be considered as being the documentation file for the MEX file. This file is copied into the same folder without any processing, with the same name as the final mex file, and with extension <cite>.m</cite>. In that case, typing <code>help &lt;name&gt;</code> in Matlab prints the documentation contained in this file.</dd> </dl> <p>The documentation file is not processed and should be in the following format:</p> <pre data-language=\"python\">% This is the documentation\nfunction ret = mex_target_output_name(input1)\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindMatlab.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindMatlab.html</a>\n  </p>\n</div>\n","module/findmpeg2":"<h1 id=\"module:FindMPEG2\">FindMPEG2</h1> <p id=\"findmpeg2\">Find the native MPEG2 includes and library</p> <p>This module defines</p> <pre data-language=\"python\">MPEG2_INCLUDE_DIR, path to mpeg2dec/mpeg2.h, etc.\nMPEG2_LIBRARIES, the libraries required to use MPEG2.\nMPEG2_FOUND, If false, do not try to use MPEG2.\n</pre> <p>also defined, but not for general use are</p> <pre data-language=\"python\">MPEG2_mpeg2_LIBRARY, where to find the MPEG2 library.\nMPEG2_vo_LIBRARY, where to find the vo library.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindMPEG2.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindMPEG2.html</a>\n  </p>\n</div>\n","module/findmpeg":"<h1 id=\"module:FindMPEG\">FindMPEG</h1> <p id=\"findmpeg\">Find the native MPEG includes and library</p> <p>This module defines</p> <pre data-language=\"python\">MPEG_INCLUDE_DIR, where to find MPEG.h, etc.\nMPEG_LIBRARIES, the libraries required to use MPEG.\nMPEG_FOUND, If false, do not try to use MPEG.\n</pre> <p>also defined, but not for general use are</p> <pre data-language=\"python\">MPEG_mpeg2_LIBRARY, where to find the MPEG library.\nMPEG_vo_LIBRARY, where to find the vo library.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindMPEG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindMPEG.html</a>\n  </p>\n</div>\n","module/findmpi":"<h1 id=\"module:FindMPI\">FindMPI</h1> <p id=\"findmpi\">Find a Message Passing Interface (MPI) implementation</p> <p>The Message Passing Interface (MPI) is a library used to write high-performance distributed-memory parallel applications, and is typically deployed on a cluster. MPI is a standard interface (defined by the MPI forum) for which many implementations are available. All of them have somewhat different include paths, libraries to link against, etc., and this module tries to smooth out those differences.</p> <p>=== Variables ===</p> <p>This module will set the following variables per language in your project, where &lt;lang&gt; is one of C, CXX, or Fortran:</p> <pre data-language=\"python\">MPI_&lt;lang&gt;_FOUND           TRUE if FindMPI found MPI flags for &lt;lang&gt;\nMPI_&lt;lang&gt;_COMPILER        MPI Compiler wrapper for &lt;lang&gt;\nMPI_&lt;lang&gt;_COMPILE_FLAGS   Compilation flags for MPI programs\nMPI_&lt;lang&gt;_INCLUDE_PATH    Include path(s) for MPI header\nMPI_&lt;lang&gt;_LINK_FLAGS      Linking flags for MPI programs\nMPI_&lt;lang&gt;_LIBRARIES       All libraries to link MPI programs against\n</pre> <p>Additionally, FindMPI sets the following variables for running MPI programs from the command line:</p> <pre data-language=\"python\">MPIEXEC                    Executable for running MPI programs\nMPIEXEC_NUMPROC_FLAG       Flag to pass to MPIEXEC before giving\n                           it the number of processors to run on\nMPIEXEC_PREFLAGS           Flags to pass to MPIEXEC directly\n                           before the executable to run.\nMPIEXEC_POSTFLAGS          Flags to pass to MPIEXEC after other flags\n</pre> <p>=== Usage ===</p> <p>To use this module, simply call FindMPI from a CMakeLists.txt file, or run find_package(MPI), then run CMake. If you are happy with the auto- detected configuration for your language, then you’re done. If not, you have two options:</p> <pre data-language=\"python\">1. Set MPI_&lt;lang&gt;_COMPILER to the MPI wrapper (mpicc, etc.) of your\n   choice and reconfigure.  FindMPI will attempt to determine all the\n   necessary variables using THAT compiler's compile and link flags.\n2. If this fails, or if your MPI implementation does not come with\n   a compiler wrapper, then set both MPI_&lt;lang&gt;_LIBRARIES and\n   MPI_&lt;lang&gt;_INCLUDE_PATH.  You may also set any other variables\n   listed above, but these two are required.  This will circumvent\n   autodetection entirely.\n</pre> <p>When configuration is successful, MPI_&lt;lang&gt;_COMPILER will be set to the compiler wrapper for &lt;lang&gt;, if it was found. MPI_&lt;lang&gt;_FOUND and other variables above will be set if any MPI implementation was found for &lt;lang&gt;, regardless of whether a compiler was found.</p> <p>When using MPIEXEC to execute MPI applications, you should typically use all of the MPIEXEC flags as follows:</p> <pre data-language=\"python\">${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} PROCS\n  ${MPIEXEC_PREFLAGS} EXECUTABLE ${MPIEXEC_POSTFLAGS} ARGS\n</pre> <p>where PROCS is the number of processors on which to execute the program, EXECUTABLE is the MPI program, and ARGS are the arguments to pass to the MPI program.</p> <p>=== Backward Compatibility ===</p> <p>For backward compatibility with older versions of FindMPI, these variables are set, but deprecated:</p> <pre data-language=\"python\">MPI_FOUND           MPI_COMPILER        MPI_LIBRARY\nMPI_COMPILE_FLAGS   MPI_INCLUDE_PATH    MPI_EXTRA_LIBRARY\nMPI_LINK_FLAGS      MPI_LIBRARIES\n</pre> <p>In new projects, please use the MPI_&lt;lang&gt;_XXX equivalents.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindMPI.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindMPI.html</a>\n  </p>\n</div>\n","module/findopenal":"<h1 id=\"module:FindOpenAL\">FindOpenAL</h1> <p id=\"findopenal\">Locate OpenAL This module defines OPENAL_LIBRARY OPENAL_FOUND, if false, do not try to link to OpenAL OPENAL_INCLUDE_DIR, where to find the headers</p> <p>$OPENALDIR is an environment variable that would correspond to the ./configure –prefix=$OPENALDIR used in building OpenAL.</p> <p>Created by Eric Wing. This was influenced by the FindSDL.cmake module.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindOpenAL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindOpenAL.html</a>\n  </p>\n</div>\n","module/findopencl":"<h1 id=\"module:FindOpenCL\">FindOpenCL</h1> <p id=\"findopencl\">Try to find OpenCL</p> <p>Once done this will define:</p> <pre data-language=\"python\">OpenCL_FOUND          - True if OpenCL was found\nOpenCL_INCLUDE_DIRS   - include directories for OpenCL\nOpenCL_LIBRARIES      - link against this library to use OpenCL\nOpenCL_VERSION_STRING - Highest supported OpenCL version (eg. 1.2)\nOpenCL_VERSION_MAJOR  - The major version of the OpenCL implementation\nOpenCL_VERSION_MINOR  - The minor version of the OpenCL implementation\n</pre> <p>The module will also define two cache variables:</p> <pre data-language=\"python\">OpenCL_INCLUDE_DIR    - the OpenCL include directory\nOpenCL_LIBRARY        - the path to the OpenCL library\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindOpenCL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindOpenCL.html</a>\n  </p>\n</div>\n","module/findopengl":"<h1 id=\"module:FindOpenGL\">FindOpenGL</h1> <p id=\"findopengl\">FindModule for OpenGL and GLU.</p>  <h2 id=\"result-variables\">Result Variables</h2> <p>This module sets the following variables:</p> <dl class=\"docutils\"> <dt><code>OPENGL_FOUND</code></dt> <dd>True, if the system has OpenGL.</dd> <dt><code>OPENGL_XMESA_FOUND</code></dt> <dd>True, if the system has XMESA.</dd> <dt><code>OPENGL_GLU_FOUND</code></dt> <dd>True, if the system has GLU.</dd> <dt><code>OPENGL_INCLUDE_DIR</code></dt> <dd>Path to the OpenGL include directory.</dd> <dt><code>OPENGL_LIBRARIES</code></dt> <dd>Paths to the OpenGL and GLU libraries.</dd> </dl> <p>If you want to use just GL you can use these values:</p> <dl class=\"docutils\"> <dt><code>OPENGL_gl_LIBRARY</code></dt> <dd>Path to the OpenGL library.</dd> <dt><code>OPENGL_glu_LIBRARY</code></dt> <dd>Path to the GLU library.</dd> </dl>   <h2 id=\"osx-specific\">OSX Specific</h2> <p>On OSX default to using the framework version of OpenGL. People will have to change the cache values of OPENGL_glu_LIBRARY and OPENGL_gl_LIBRARY to use OpenGL with X11 on OSX.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindOpenGL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindOpenGL.html</a>\n  </p>\n</div>\n","module/findopenmp":"<h1 id=\"module:FindOpenMP\">FindOpenMP</h1> <p id=\"findopenmp\">Finds OpenMP support</p> <p>This module can be used to detect OpenMP support in a compiler. If the compiler supports OpenMP, the flags required to compile with OpenMP support are returned in variables for the different languages. The variables may be empty if the compiler does not need a special flag to support OpenMP.</p> <p>The following variables are set:</p> <pre data-language=\"python\">OpenMP_C_FLAGS - flags to add to the C compiler for OpenMP support\nOpenMP_CXX_FLAGS - flags to add to the CXX compiler for OpenMP support\nOpenMP_Fortran_FLAGS - flags to add to the Fortran compiler for OpenMP support\nOPENMP_FOUND - true if openmp is detected\n</pre> <p>Supported compilers can be found at <a class=\"reference external\" href=\"http://openmp.org/wp/openmp-compilers/\">http://openmp.org/wp/openmp-compilers/</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindOpenMP.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindOpenMP.html</a>\n  </p>\n</div>\n","module/findopenscenegraph":"<h1 id=\"module:FindOpenSceneGraph\">FindOpenSceneGraph</h1> <p id=\"findopenscenegraph\">Find OpenSceneGraph</p> <p>This module searches for the OpenSceneGraph core “osg” library as well as OpenThreads, and whatever additional COMPONENTS (nodekits) that you specify.</p> <pre data-language=\"python\">See http://www.openscenegraph.org\n</pre> <p>NOTE: To use this module effectively you must either require CMake &gt;= 2.6.3 with cmake_minimum_required(VERSION 2.6.3) or download and place FindOpenThreads.cmake, Findosg_functions.cmake, Findosg.cmake, and Find&lt;etc&gt;.cmake files into your CMAKE_MODULE_PATH.</p>  <p>This module accepts the following variables (note mixed case)</p> <pre data-language=\"python\">OpenSceneGraph_DEBUG - Enable debugging output\n</pre> <pre data-language=\"python\">OpenSceneGraph_MARK_AS_ADVANCED - Mark cache variables as advanced\n                                  automatically\n</pre> <p>The following environment variables are also respected for finding the OSG and it’s various components. CMAKE_PREFIX_PATH can also be used for this (see find_library() CMake documentation).</p> <dl class=\"docutils\"> <dt><code>&lt;MODULE&gt;_DIR</code></dt> <dd>(where MODULE is of the form “OSGVOLUME” and there is a FindosgVolume.cmake file)</dd> <dt><code>OSG_DIR</code></dt>  <dt><code>OSGDIR</code></dt>  <dt><code>OSG_ROOT</code></dt>  </dl> <p>[CMake 2.8.10]: The CMake variable OSG_DIR can now be used as well to influence detection, instead of needing to specify an environment variable.</p> <p>This module defines the following output variables:</p> <pre data-language=\"python\">OPENSCENEGRAPH_FOUND - Was the OSG and all of the specified components found?\n</pre> <pre data-language=\"python\">OPENSCENEGRAPH_VERSION - The version of the OSG which was found\n</pre> <pre data-language=\"python\">OPENSCENEGRAPH_INCLUDE_DIRS - Where to find the headers\n</pre> <pre data-language=\"python\">OPENSCENEGRAPH_LIBRARIES - The OSG libraries\n</pre> <p>================================== Example Usage:</p> <pre data-language=\"python\">find_package(OpenSceneGraph 2.0.0 REQUIRED osgDB osgUtil)\n    # libOpenThreads &amp; libosg automatically searched\ninclude_directories(${OPENSCENEGRAPH_INCLUDE_DIRS})\n</pre> <pre data-language=\"python\">add_executable(foo foo.cc)\ntarget_link_libraries(foo ${OPENSCENEGRAPH_LIBRARIES})\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindOpenSceneGraph.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindOpenSceneGraph.html</a>\n  </p>\n</div>\n","module/findopenssl":"<h1 id=\"module:FindOpenSSL\">FindOpenSSL</h1> <p id=\"findopenssl\">Find the OpenSSL encryption library.</p>  <h2 id=\"imported-targets\">Imported Targets</h2> <p>This module defines the following <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets:</p> <dl class=\"docutils\"> <dt><code>OpenSSL::SSL</code></dt> <dd>The OpenSSL <code>ssl</code> library, if found.</dd> <dt><code>OpenSSL::Crypto</code></dt> <dd>The OpenSSL <code>crypto</code> library, if found.</dd> </dl>   <h2 id=\"result-variables\">Result Variables</h2> <p>This module will set the following variables in your project:</p> <dl class=\"docutils\"> <dt><code>OPENSSL_FOUND</code></dt> <dd>System has the OpenSSL library.</dd> <dt><code>OPENSSL_INCLUDE_DIR</code></dt> <dd>The OpenSSL include directory.</dd> <dt><code>OPENSSL_CRYPTO_LIBRARY</code></dt> <dd>The OpenSSL crypto library.</dd> <dt><code>OPENSSL_SSL_LIBRARY</code></dt> <dd>The OpenSSL SSL library.</dd> <dt><code>OPENSSL_LIBRARIES</code></dt> <dd>All OpenSSL libraries.</dd> <dt><code>OPENSSL_VERSION</code></dt> <dd>This is set to <code>$major.$minor.$revision$patch</code> (e.g. <code>0.9.8s</code>).</dd> </dl>   <h2 id=\"hints\">Hints</h2> <p>Set <code>OPENSSL_ROOT_DIR</code> to the root directory of an OpenSSL installation. Set <code>OPENSSL_USE_STATIC_LIBS</code> to <code>TRUE</code> to look for static libraries. Set <code>OPENSSL_MSVC_STATIC_RT</code> set <code>TRUE</code> to choose the MT version of the lib.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindOpenSSL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindOpenSSL.html</a>\n  </p>\n</div>\n","module/findopenthreads":"<h1 id=\"module:FindOpenThreads\">FindOpenThreads</h1> <p id=\"findopenthreads\">OpenThreads is a C++ based threading library. Its largest userbase seems to OpenSceneGraph so you might notice I accept OSGDIR as an environment path. I consider this part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module.</p> <p>Locate OpenThreads This module defines OPENTHREADS_LIBRARY OPENTHREADS_FOUND, if false, do not try to link to OpenThreads OPENTHREADS_INCLUDE_DIR, where to find the headers</p> <p>$OPENTHREADS_DIR is an environment variable that would correspond to the ./configure –prefix=$OPENTHREADS_DIR used in building osg.</p> <p>[CMake 2.8.10]: The CMake variables OPENTHREADS_DIR or OSG_DIR can now be used as well to influence detection, instead of needing to specify an environment variable.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindOpenThreads.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindOpenThreads.html</a>\n  </p>\n</div>\n","module/findosganimation":"<h1 id=\"module:FindosgAnimation\">FindosgAnimation</h1> <p id=\"findosganimation\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgAnimation This module defines</p> <p>OSGANIMATION_FOUND - Was osgAnimation found? OSGANIMATION_INCLUDE_DIR - Where to find the headers OSGANIMATION_LIBRARIES - The libraries to link against for the OSG (use this)</p> <p>OSGANIMATION_LIBRARY - The OSG library OSGANIMATION_LIBRARY_DEBUG - The OSG debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgAnimation.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgAnimation.html</a>\n  </p>\n</div>\n","module/findosgdb":"<h1 id=\"module:FindosgDB\">FindosgDB</h1> <p id=\"findosgdb\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgDB This module defines</p> <p>OSGDB_FOUND - Was osgDB found? OSGDB_INCLUDE_DIR - Where to find the headers OSGDB_LIBRARIES - The libraries to link against for the osgDB (use this)</p> <p>OSGDB_LIBRARY - The osgDB library OSGDB_LIBRARY_DEBUG - The osgDB debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgDB.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgDB.html</a>\n  </p>\n</div>\n","module/findosgfx":"<h1 id=\"module:FindosgFX\">FindosgFX</h1> <p id=\"findosgfx\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgFX This module defines</p> <p>OSGFX_FOUND - Was osgFX found? OSGFX_INCLUDE_DIR - Where to find the headers OSGFX_LIBRARIES - The libraries to link against for the osgFX (use this)</p> <p>OSGFX_LIBRARY - The osgFX library OSGFX_LIBRARY_DEBUG - The osgFX debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgFX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgFX.html</a>\n  </p>\n</div>\n","module/findosg_functions":"<h1 id=\"module:Findosg_functions\">Findosg_functions</h1> <p id=\"findosg-functions\">This CMake file contains two macros to assist with searching for OSG libraries and nodekits. Please see FindOpenSceneGraph.cmake for full documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/Findosg_functions.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/Findosg_functions.html</a>\n  </p>\n</div>\n","module/findosgga":"<h1 id=\"module:FindosgGA\">FindosgGA</h1> <p id=\"findosgga\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgGA This module defines</p> <p>OSGGA_FOUND - Was osgGA found? OSGGA_INCLUDE_DIR - Where to find the headers OSGGA_LIBRARIES - The libraries to link against for the osgGA (use this)</p> <p>OSGGA_LIBRARY - The osgGA library OSGGA_LIBRARY_DEBUG - The osgGA debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgGA.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgGA.html</a>\n  </p>\n</div>\n","module/findosgintrospection":"<h1 id=\"module:FindosgIntrospection\">FindosgIntrospection</h1> <p id=\"findosgintrospection\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgINTROSPECTION This module defines</p> <p>OSGINTROSPECTION_FOUND - Was osgIntrospection found? OSGINTROSPECTION_INCLUDE_DIR - Where to find the headers OSGINTROSPECTION_LIBRARIES - The libraries to link for osgIntrospection (use this)</p> <p>OSGINTROSPECTION_LIBRARY - The osgIntrospection library OSGINTROSPECTION_LIBRARY_DEBUG - The osgIntrospection debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgIntrospection.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgIntrospection.html</a>\n  </p>\n</div>\n","module/findosgmanipulator":"<h1 id=\"module:FindosgManipulator\">FindosgManipulator</h1> <p id=\"findosgmanipulator\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgManipulator This module defines</p> <p>OSGMANIPULATOR_FOUND - Was osgManipulator found? OSGMANIPULATOR_INCLUDE_DIR - Where to find the headers OSGMANIPULATOR_LIBRARIES - The libraries to link for osgManipulator (use this)</p> <p>OSGMANIPULATOR_LIBRARY - The osgManipulator library OSGMANIPULATOR_LIBRARY_DEBUG - The osgManipulator debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgManipulator.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgManipulator.html</a>\n  </p>\n</div>\n","module/findosgparticle":"<h1 id=\"module:FindosgParticle\">FindosgParticle</h1> <p id=\"findosgparticle\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgParticle This module defines</p> <p>OSGPARTICLE_FOUND - Was osgParticle found? OSGPARTICLE_INCLUDE_DIR - Where to find the headers OSGPARTICLE_LIBRARIES - The libraries to link for osgParticle (use this)</p> <p>OSGPARTICLE_LIBRARY - The osgParticle library OSGPARTICLE_LIBRARY_DEBUG - The osgParticle debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgParticle.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgParticle.html</a>\n  </p>\n</div>\n","module/findosgpresentation":"<h1 id=\"module:FindosgPresentation\">FindosgPresentation</h1> <p id=\"findosgpresentation\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgPresentation This module defines</p> <p>OSGPRESENTATION_FOUND - Was osgPresentation found? OSGPRESENTATION_INCLUDE_DIR - Where to find the headers OSGPRESENTATION_LIBRARIES - The libraries to link for osgPresentation (use this)</p> <p>OSGPRESENTATION_LIBRARY - The osgPresentation library OSGPRESENTATION_LIBRARY_DEBUG - The osgPresentation debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing. Modified to work with osgPresentation by Robert Osfield, January 2012.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgPresentation.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgPresentation.html</a>\n  </p>\n</div>\n","module/findosgproducer":"<h1 id=\"module:FindosgProducer\">FindosgProducer</h1> <p id=\"findosgproducer\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgProducer This module defines</p> <p>OSGPRODUCER_FOUND - Was osgProducer found? OSGPRODUCER_INCLUDE_DIR - Where to find the headers OSGPRODUCER_LIBRARIES - The libraries to link for osgProducer (use this)</p> <p>OSGPRODUCER_LIBRARY - The osgProducer library OSGPRODUCER_LIBRARY_DEBUG - The osgProducer debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgProducer.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgProducer.html</a>\n  </p>\n</div>\n","module/findosgqt":"<h1 id=\"module:FindosgQt\">FindosgQt</h1> <p id=\"findosgqt\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgQt This module defines</p> <p>OSGQT_FOUND - Was osgQt found? OSGQT_INCLUDE_DIR - Where to find the headers OSGQT_LIBRARIES - The libraries to link for osgQt (use this)</p> <p>OSGQT_LIBRARY - The osgQt library OSGQT_LIBRARY_DEBUG - The osgQt debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing. Modified to work with osgQt by Robert Osfield, January 2012.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgQt.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgQt.html</a>\n  </p>\n</div>\n","module/findosg":"<h1 id=\"module:Findosg\">Findosg</h1> <p id=\"findosg\">NOTE: It is highly recommended that you use the new FindOpenSceneGraph.cmake introduced in CMake 2.6.3 and not use this Find module directly.</p> <p>This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osg This module defines</p> <p>OSG_FOUND - Was the Osg found? OSG_INCLUDE_DIR - Where to find the headers OSG_LIBRARIES - The libraries to link against for the OSG (use this)</p> <p>OSG_LIBRARY - The OSG library OSG_LIBRARY_DEBUG - The OSG debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/Findosg.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/Findosg.html</a>\n  </p>\n</div>\n","module/findosgshadow":"<h1 id=\"module:FindosgShadow\">FindosgShadow</h1> <p id=\"findosgshadow\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgShadow This module defines</p> <p>OSGSHADOW_FOUND - Was osgShadow found? OSGSHADOW_INCLUDE_DIR - Where to find the headers OSGSHADOW_LIBRARIES - The libraries to link for osgShadow (use this)</p> <p>OSGSHADOW_LIBRARY - The osgShadow library OSGSHADOW_LIBRARY_DEBUG - The osgShadow debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgShadow.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgShadow.html</a>\n  </p>\n</div>\n","module/findosgsim":"<h1 id=\"module:FindosgSim\">FindosgSim</h1> <p id=\"findosgsim\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgSim This module defines</p> <p>OSGSIM_FOUND - Was osgSim found? OSGSIM_INCLUDE_DIR - Where to find the headers OSGSIM_LIBRARIES - The libraries to link for osgSim (use this)</p> <p>OSGSIM_LIBRARY - The osgSim library OSGSIM_LIBRARY_DEBUG - The osgSim debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgSim.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgSim.html</a>\n  </p>\n</div>\n","module/findosgterrain":"<h1 id=\"module:FindosgTerrain\">FindosgTerrain</h1> <p id=\"findosgterrain\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgTerrain This module defines</p> <p>OSGTERRAIN_FOUND - Was osgTerrain found? OSGTERRAIN_INCLUDE_DIR - Where to find the headers OSGTERRAIN_LIBRARIES - The libraries to link for osgTerrain (use this)</p> <p>OSGTERRAIN_LIBRARY - The osgTerrain library OSGTERRAIN_LIBRARY_DEBUG - The osgTerrain debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgTerrain.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgTerrain.html</a>\n  </p>\n</div>\n","module/findosgtext":"<h1 id=\"module:FindosgText\">FindosgText</h1> <p id=\"findosgtext\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgText This module defines</p> <p>OSGTEXT_FOUND - Was osgText found? OSGTEXT_INCLUDE_DIR - Where to find the headers OSGTEXT_LIBRARIES - The libraries to link for osgText (use this)</p> <p>OSGTEXT_LIBRARY - The osgText library OSGTEXT_LIBRARY_DEBUG - The osgText debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgText.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgText.html</a>\n  </p>\n</div>\n","module/findosgutil":"<h1 id=\"module:FindosgUtil\">FindosgUtil</h1> <p id=\"findosgutil\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgUtil This module defines</p> <p>OSGUTIL_FOUND - Was osgUtil found? OSGUTIL_INCLUDE_DIR - Where to find the headers OSGUTIL_LIBRARIES - The libraries to link for osgUtil (use this)</p> <p>OSGUTIL_LIBRARY - The osgUtil library OSGUTIL_LIBRARY_DEBUG - The osgUtil debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgUtil.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgUtil.html</a>\n  </p>\n</div>\n","module/findosgviewer":"<h1 id=\"module:FindosgViewer\">FindosgViewer</h1> <p id=\"findosgviewer\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgViewer This module defines</p> <p>OSGVIEWER_FOUND - Was osgViewer found? OSGVIEWER_INCLUDE_DIR - Where to find the headers OSGVIEWER_LIBRARIES - The libraries to link for osgViewer (use this)</p> <p>OSGVIEWER_LIBRARY - The osgViewer library OSGVIEWER_LIBRARY_DEBUG - The osgViewer debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgViewer.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgViewer.html</a>\n  </p>\n</div>\n","module/findosgvolume":"<h1 id=\"module:FindosgVolume\">FindosgVolume</h1> <p id=\"findosgvolume\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgVolume This module defines</p> <p>OSGVOLUME_FOUND - Was osgVolume found? OSGVOLUME_INCLUDE_DIR - Where to find the headers OSGVOLUME_LIBRARIES - The libraries to link for osgVolume (use this)</p> <p>OSGVOLUME_LIBRARY - The osgVolume library OSGVOLUME_LIBRARY_DEBUG - The osgVolume debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgVolume.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgVolume.html</a>\n  </p>\n</div>\n","module/findpackagemessage":"<h1 id=\"module:FindPackageMessage\">FindPackageMessage</h1> <p id=\"findpackagemessage\">FIND_PACKAGE_MESSAGE(&lt;name&gt; “message for user” “find result details”)</p> <p>This macro is intended to be used in FindXXX.cmake modules files. It will print a message once for each unique find result. This is useful for telling the user where a package was found. The first argument specifies the name (XXX) of the package. The second argument specifies the message to display. The third argument lists details about the find result so that if they change the message will be displayed again. The macro also obeys the QUIET argument to the find_package command.</p> <p>Example:</p> <pre data-language=\"python\">if(X11_FOUND)\n  FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\n    \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\nelse()\n ...\nendif()\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindPackageMessage.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindPackageMessage.html</a>\n  </p>\n</div>\n","module/findosgwidget":"<h1 id=\"module:FindosgWidget\">FindosgWidget</h1> <p id=\"findosgwidget\">This is part of the Findosg* suite used to find OpenSceneGraph components. Each component is separate and you must opt in to each module. You must also opt into OpenGL and OpenThreads (and Producer if needed) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate osgWidget This module defines</p> <p>OSGWIDGET_FOUND - Was osgWidget found? OSGWIDGET_INCLUDE_DIR - Where to find the headers OSGWIDGET_LIBRARIES - The libraries to link for osgWidget (use this)</p> <p>OSGWIDGET_LIBRARY - The osgWidget library OSGWIDGET_LIBRARY_DEBUG - The osgWidget debug library</p> <p>$OSGDIR is an environment variable that would correspond to the ./configure –prefix=$OSGDIR used in building osg.</p> <p>FindosgWidget.cmake tweaked from Findosg* suite as created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindosgWidget.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindosgWidget.html</a>\n  </p>\n</div>\n","module/findphp4":"<h1 id=\"module:FindPHP4\">FindPHP4</h1> <p id=\"findphp4\">Find PHP4</p> <p>This module finds if PHP4 is installed and determines where the include files and libraries are. It also determines what the name of the library is. This code sets the following variables:</p> <pre data-language=\"python\">PHP4_INCLUDE_PATH       = path to where php.h can be found\nPHP4_EXECUTABLE         = full path to the php4 binary\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindPHP4.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindPHP4.html</a>\n  </p>\n</div>\n","module/findperl":"<h1 id=\"module:FindPerl\">FindPerl</h1> <p id=\"findperl\">Find perl</p> <p>this module looks for Perl</p> <pre data-language=\"python\">PERL_EXECUTABLE     - the full path to perl\nPERL_FOUND          - If false, don't attempt to use perl.\nPERL_VERSION_STRING - version of perl found (since CMake 2.8.8)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindPerl.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindPerl.html</a>\n  </p>\n</div>\n","module/findpackagehandlestandardargs":"<h1 id=\"module:FindPackageHandleStandardArgs\">FindPackageHandleStandardArgs</h1> <p id=\"findpackagehandlestandardargs\">This module provides a function intended to be used in <a class=\"reference internal\" href=\"../manual/cmake-developer.7#find-modules\"><span>Find Modules</span></a> implementing <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package(&lt;PackageName&gt;)</code></a> calls. It handles the <code>REQUIRED</code>, <code>QUIET</code> and version-related arguments of <code>find_package</code>. It also sets the <code>&lt;PackageName&gt;_FOUND</code> variable. The package is considered found if all variables listed contain valid results, e.g. valid filepaths.</p> <dl class=\"command\"> <dt id=\"command:find_package_handle_standard_args\"><code>find_package_handle_standard_args</code></dt> <dd>\n<p>There are two signatures:</p> <pre data-language=\"python\">find_package_handle_standard_args(&lt;PackageName&gt;\n  (DEFAULT_MSG|&lt;custom-failure-message&gt;)\n  &lt;required-var&gt;...\n  )\n\nfind_package_handle_standard_args(&lt;PackageName&gt;\n  [FOUND_VAR &lt;result-var&gt;]\n  [REQUIRED_VARS &lt;required-var&gt;...]\n  [VERSION_VAR &lt;version-var&gt;]\n  [HANDLE_COMPONENTS]\n  [CONFIG_MODE]\n  [FAIL_MESSAGE &lt;custom-failure-message&gt;]\n  )\n</pre> <p>The <code>&lt;PackageName&gt;_FOUND</code> variable will be set to <code>TRUE</code> if all the variables <code>&lt;required-var&gt;...</code> are valid and any optional constraints are satisfied, and <code>FALSE</code> otherwise. A success or failure message may be displayed based on the results and on whether the <code>REQUIRED</code> and/or <code>QUIET</code> option was given to the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-1-command:find_package\"><code>find_package()</code></a> call.</p> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>(DEFAULT_MSG|&lt;custom-failure-message&gt;)</code></dt> <dd>In the simple signature this specifies the failure message. Use <code>DEFAULT_MSG</code> to ask for a default message to be computed (recommended). Not valid in the full signature.</dd> <dt><code>FOUND_VAR &lt;result-var&gt;</code></dt> <dd>Obsolete. Specifies either <code>&lt;PackageName&gt;_FOUND</code> or <code>&lt;PACKAGENAME&gt;_FOUND</code> as the result variable. This exists only for compatibility with older versions of CMake and is now ignored. Result variables of both names are always set for compatibility.</dd> <dt><code>REQUIRED_VARS &lt;required-var&gt;...</code></dt> <dd>Specify the variables which are required for this package. These may be named in the generated failure message asking the user to set the missing variable values. Therefore these should typically be cache entries such as <code>FOO_LIBRARY</code> and not output variables like <code>FOO_LIBRARIES</code>.</dd> <dt><code>VERSION_VAR &lt;version-var&gt;</code></dt> <dd>Specify the name of a variable that holds the version of the package that has been found. This version will be checked against the (potentially) specified required version given to the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-2-command:find_package\"><code>find_package()</code></a> call, including its <code>EXACT</code> option. The default messages include information about the required version and the version which has been actually found, both if the version is ok or not.</dd> <dt><code>HANDLE_COMPONENTS</code></dt> <dd>Enable handling of package components. In this case, the command will report which components have been found and which are missing, and the <code>&lt;PackageName&gt;_FOUND</code> variable will be set to <code>FALSE</code> if any of the required components (i.e. not the ones listed after the <code>OPTIONAL_COMPONENTS</code> option of <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-3-command:find_package\"><code>find_package()</code></a>) are missing.</dd> <dt><code>CONFIG_MODE</code></dt> <dd>Specify that the calling find module is a wrapper around a call to <code>find_package(&lt;PackageName&gt; NO_MODULE)</code>. This implies a <code>VERSION_VAR</code> value of <code>&lt;PackageName&gt;_VERSION</code>. The command will automatically check whether the package configuration file was found.</dd> <dt><code>FAIL_MESSAGE &lt;custom-failure-message&gt;</code></dt> <dd>Specify a custom failure message instead of using the default generated message. Not recommended.</dd> </dl> </dd>\n</dl> <p>Example for the simple signature:</p> <pre data-language=\"cmake\">find_package_handle_standard_args(LibXml2 DEFAULT_MSG\n  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n</pre> <p>The <code>LibXml2</code> package is considered to be found if both <code>LIBXML2_LIBRARY</code> and <code>LIBXML2_INCLUDE_DIR</code> are valid. Then also <code>LibXml2_FOUND</code> is set to <code>TRUE</code>. If it is not found and <code>REQUIRED</code> was used, it fails with a <a class=\"reference internal\" href=\"../command/message#command:message\" title=\"message\" id=\"index-0-command:message\"><code>message(FATAL_ERROR)</code></a>, independent whether <code>QUIET</code> was used or not. If it is found, success will be reported, including the content of the first <code>&lt;required-var&gt;</code>. On repeated CMake runs, the same message will not be printed again.</p> <p>Example for the full signature:</p> <pre data-language=\"cmake\">find_package_handle_standard_args(LibArchive\n  REQUIRED_VARS LibArchive_LIBRARY LibArchive_INCLUDE_DIR\n  VERSION_VAR LibArchive_VERSION)\n</pre> <p>In this case, the <code>LibArchive</code> package is considered to be found if both <code>LibArchive_LIBRARY</code> and <code>LibArchive_INCLUDE_DIR</code> are valid. Also the version of <code>LibArchive</code> will be checked by using the version contained in <code>LibArchive_VERSION</code>. Since no <code>FAIL_MESSAGE</code> is given, the default messages will be printed.</p> <p>Another example for the full signature:</p> <pre data-language=\"cmake\">find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\nfind_package_handle_standard_args(Automoc4  CONFIG_MODE)\n</pre> <p>In this case, a <code>FindAutmoc4.cmake</code> module wraps a call to <code>find_package(Automoc4 NO_MODULE)</code> and adds an additional search directory for <code>automoc4</code>. Then the call to <code>find_package_handle_standard_args</code> produces a proper success/failure message.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindPackageHandleStandardArgs.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindPackageHandleStandardArgs.html</a>\n  </p>\n</div>\n","module/findperllibs":"<h1 id=\"module:FindPerlLibs\">FindPerlLibs</h1> <p id=\"findperllibs\">Find Perl libraries</p> <p>This module finds if PERL is installed and determines where the include files and libraries are. It also determines what the name of the library is. This code sets the following variables:</p> <pre data-language=\"python\">PERLLIBS_FOUND    = True if perl.h &amp; libperl were found\nPERL_INCLUDE_PATH = path to where perl.h is found\nPERL_LIBRARY      = path to libperl\nPERL_EXECUTABLE   = full path to the perl binary\n</pre> <p>The minimum required version of Perl can be specified using the standard syntax, e.g. find_package(PerlLibs 6.0)</p> <pre data-language=\"python\">The following variables are also available if needed\n(introduced after CMake 2.6.4)\n</pre> <pre data-language=\"python\">PERL_SITESEARCH    = path to the sitesearch install dir\nPERL_SITELIB       = path to the sitelib install directory\nPERL_VENDORARCH    = path to the vendor arch install directory\nPERL_VENDORLIB     = path to the vendor lib install directory\nPERL_ARCHLIB       = path to the arch lib install directory\nPERL_PRIVLIB       = path to the priv lib install directory\nPERL_EXTRA_C_FLAGS = Compilation flags used to build perl\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindPerlLibs.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindPerlLibs.html</a>\n  </p>\n</div>\n","module/findphysfs":"<h1 id=\"module:FindPhysFS\">FindPhysFS</h1> <p id=\"findphysfs\">Locate PhysFS library This module defines PHYSFS_LIBRARY, the name of the library to link against PHYSFS_FOUND, if false, do not try to link to PHYSFS PHYSFS_INCLUDE_DIR, where to find physfs.h</p> <p>$PHYSFSDIR is an environment variable that would correspond to the ./configure –prefix=$PHYSFSDIR used in building PHYSFS.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindPhysFS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindPhysFS.html</a>\n  </p>\n</div>\n","module/findpike":"<h1 id=\"module:FindPike\">FindPike</h1> <p id=\"findpike\">Find Pike</p> <p>This module finds if PIKE is installed and determines where the include files and libraries are. It also determines what the name of the library is. This code sets the following variables:</p> <pre data-language=\"python\">PIKE_INCLUDE_PATH       = path to where program.h is found\nPIKE_EXECUTABLE         = full path to the pike binary\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindPike.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindPike.html</a>\n  </p>\n</div>\n","module/findpng":"<h1 id=\"module:FindPNG\">FindPNG</h1> <p id=\"findpng\">Find libpng, the official reference library for the PNG image format.</p>  <h2 id=\"imported-targets\">Imported targets</h2> <p>This module defines the following <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target:</p> <dl class=\"docutils\"> <dt><code>PNG::PNG</code></dt> <dd>The libpng library, if found.</dd> </dl>   <h2 id=\"result-variables\">Result variables</h2> <p>This module will set the following variables in your project:</p> <dl class=\"docutils\"> <dt><code>PNG_INCLUDE_DIRS</code></dt> <dd>where to find png.h, etc.</dd> <dt><code>PNG_LIBRARIES</code></dt> <dd>the libraries to link against to use PNG.</dd> <dt><code>PNG_DEFINITIONS</code></dt> <dd>You should add_definitons(${PNG_DEFINITIONS}) before compiling code that includes png library files.</dd> <dt><code>PNG_FOUND</code></dt> <dd>If false, do not try to use PNG.</dd> <dt><code>PNG_VERSION_STRING</code></dt> <dd>the version of the PNG library found (since CMake 2.8.8)</dd> </dl>   <h2 id=\"obsolete-variables\">Obsolete variables</h2> <p>The following variables may also be set, for backwards compatibility:</p> <dl class=\"docutils\"> <dt><code>PNG_LIBRARY</code></dt> <dd>where to find the PNG library.</dd> <dt><code>PNG_INCLUDE_DIR</code></dt> <dd>where to find the PNG headers (same as PNG_INCLUDE_DIRS)</dd> </dl> <p>Since PNG depends on the ZLib compression library, none of the above will be defined unless ZLib can be found.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindPNG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindPNG.html</a>\n  </p>\n</div>\n","module/findpostgresql":"<h1 id=\"module:FindPostgreSQL\">FindPostgreSQL</h1> <p id=\"findpostgresql\">Find the PostgreSQL installation.</p> <p>This module defines</p> <pre data-language=\"python\">PostgreSQL_LIBRARIES - the PostgreSQL libraries needed for linking\nPostgreSQL_INCLUDE_DIRS - the directories of the PostgreSQL headers\nPostgreSQL_LIBRARY_DIRS  - the link directories for PostgreSQL libraries\nPostgreSQL_VERSION_STRING - the version of PostgreSQL found (since CMake 2.8.8)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindPostgreSQL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindPostgreSQL.html</a>\n  </p>\n</div>\n","module/findproducer":"<h1 id=\"module:FindProducer\">FindProducer</h1> <p id=\"findproducer\">Though Producer isn’t directly part of OpenSceneGraph, its primary user is OSG so I consider this part of the Findosg* suite used to find OpenSceneGraph components. You’ll notice that I accept OSGDIR as an environment path.</p> <p>Each component is separate and you must opt in to each module. You must also opt into OpenGL (and OpenThreads?) as these modules won’t do it for you. This is to allow you control over your own system piece by piece in case you need to opt out of certain components or change the Find behavior for a particular module (perhaps because the default FindOpenGL.cmake module doesn’t work with your system as an example). If you want to use a more convenient module that includes everything, use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.</p> <p>Locate Producer This module defines PRODUCER_LIBRARY PRODUCER_FOUND, if false, do not try to link to Producer PRODUCER_INCLUDE_DIR, where to find the headers</p> <p>$PRODUCER_DIR is an environment variable that would correspond to the ./configure –prefix=$PRODUCER_DIR used in building osg.</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindProducer.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindProducer.html</a>\n  </p>\n</div>\n","module/findprotobuf":"<h1 id=\"module:FindProtobuf\">FindProtobuf</h1> <p id=\"findprotobuf\">Locate and configure the Google Protocol Buffers library.</p> <p>The following variables can be set and are optional:</p> <dl class=\"docutils\"> <dt><code>PROTOBUF_SRC_ROOT_FOLDER</code></dt> <dd>When compiling with MSVC, if this cache variable is set the protobuf-default VS project build locations (vsprojects/Debug and vsprojects/Release or vsprojects/x64/Debug and vsprojects/x64/Release) will be searched for libraries and binaries.</dd> <dt><code>PROTOBUF_IMPORT_DIRS</code></dt> <dd>List of additional directories to be searched for imported .proto files.</dd> </dl> <p>Defines the following variables:</p> <dl class=\"docutils\"> <dt><code>PROTOBUF_FOUND</code></dt> <dd>Found the Google Protocol Buffers library (libprotobuf &amp; header files)</dd> <dt><code>PROTOBUF_INCLUDE_DIRS</code></dt> <dd>Include directories for Google Protocol Buffers</dd> <dt><code>PROTOBUF_LIBRARIES</code></dt> <dd>The protobuf libraries</dd> <dt><code>PROTOBUF_PROTOC_LIBRARIES</code></dt> <dd>The protoc libraries</dd> <dt><code>PROTOBUF_LITE_LIBRARIES</code></dt> <dd>The protobuf-lite libraries</dd> </dl> <p>The following cache variables are also available to set or use:</p> <dl class=\"docutils\"> <dt><code>PROTOBUF_LIBRARY</code></dt> <dd>The protobuf library</dd> <dt><code>PROTOBUF_PROTOC_LIBRARY</code></dt> <dd>The protoc library</dd> <dt><code>PROTOBUF_INCLUDE_DIR</code></dt> <dd>The include directory for protocol buffers</dd> <dt><code>PROTOBUF_PROTOC_EXECUTABLE</code></dt> <dd>The protoc compiler</dd> <dt><code>PROTOBUF_LIBRARY_DEBUG</code></dt> <dd>The protobuf library (debug)</dd> <dt><code>PROTOBUF_PROTOC_LIBRARY_DEBUG</code></dt> <dd>The protoc library (debug)</dd> <dt><code>PROTOBUF_LITE_LIBRARY</code></dt> <dd>The protobuf lite library</dd> <dt><code>PROTOBUF_LITE_LIBRARY_DEBUG</code></dt> <dd>The protobuf lite library (debug)</dd> </dl> <p>Example:</p> <pre data-language=\"cmake\">find_package(Protobuf REQUIRED)\ninclude_directories(${PROTOBUF_INCLUDE_DIRS})\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\nprotobuf_generate_cpp(PROTO_SRCS PROTO_HDRS foo.proto)\nprotobuf_generate_python(PROTO_PY foo.proto)\nadd_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})\ntarget_link_libraries(bar ${PROTOBUF_LIBRARIES})\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>protobuf_generate_cpp</code> and <code>protobuf_generate_python</code> functions and <a class=\"reference internal\" href=\"../command/add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> or <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> calls only work properly within the same directory.</p> </div> <dl class=\"command\"> <dt id=\"command:protobuf_generate_cpp\"><code>protobuf_generate_cpp</code></dt> <dd>\n<p>Add custom commands to process <code>.proto</code> files to C++:</p> <pre data-language=\"python\">protobuf_generate_cpp (&lt;SRCS&gt; &lt;HDRS&gt; [&lt;ARGN&gt;...])\n</pre> <dl class=\"docutils\"> <dt><code>SRCS</code></dt> <dd>Variable to define with autogenerated source files</dd> <dt><code>HDRS</code></dt> <dd>Variable to define with autogenerated header files</dd> <dt><code>ARGN</code></dt> <dd>\n<code>.proto</code> files</dd> </dl> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:protobuf_generate_python\"><code>protobuf_generate_python</code></dt> <dd>\n<p>Add custom commands to process <code>.proto</code> files to Python:</p> <pre data-language=\"python\">protobuf_generate_python (&lt;PY&gt; [&lt;ARGN&gt;...])\n</pre> <dl class=\"docutils\"> <dt><code>PY</code></dt> <dd>Variable to define with autogenerated Python files</dd> <dt><code>ARGN</code></dt> <dd>\n<code>.proto</code> filess</dd> </dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindProtobuf.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindProtobuf.html</a>\n  </p>\n</div>\n","module/findpkgconfig":"<h1 id=\"module:FindPkgConfig\">FindPkgConfig</h1> <p id=\"findpkgconfig\">A <cite>pkg-config</cite> module for CMake.</p> <p>Finds the <code>pkg-config</code> executable and add the <a class=\"reference internal\" href=\"#command:pkg_check_modules\" title=\"pkg_check_modules\" id=\"index-0-command:pkg_check_modules\"><code>pkg_check_modules()</code></a> and <a class=\"reference internal\" href=\"#command:pkg_search_module\" title=\"pkg_search_module\" id=\"index-0-command:pkg_search_module\"><code>pkg_search_module()</code></a> commands.</p> <p>In order to find the <code>pkg-config</code> executable, it uses the <a class=\"reference internal\" href=\"#variable:PKG_CONFIG_EXECUTABLE\" title=\"PKG_CONFIG_EXECUTABLE\" id=\"index-0-variable:PKG_CONFIG_EXECUTABLE\"><code>PKG_CONFIG_EXECUTABLE</code></a> variable or the <code>PKG_CONFIG</code> environment variable first.</p> <dl class=\"command\"> <dt id=\"command:pkg_get_variable\"><code>pkg_get_variable</code></dt> <dd>\n<p>Retrieves the value of a variable from a package:</p> <pre data-language=\"python\">pkg_get_variable(&lt;RESULT&gt; &lt;MODULE&gt; &lt;VARIABLE&gt;)\n</pre> <p>For example:</p> <pre data-language=\"cmake\">pkg_get_variable(GI_GIRDIR gobject-introspection-1.0 girdir)\n</pre> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:pkg_check_modules\"><code>pkg_check_modules</code></dt> <dd>\n<p>Checks for all the given modules.</p> <pre data-language=\"python\">pkg_check_modules(&lt;PREFIX&gt; [REQUIRED] [QUIET]\n                  [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH]\n                  &lt;MODULE&gt; [&lt;MODULE&gt;]*)\n</pre> <p>When the <code>REQUIRED</code> argument was set, macros will fail with an error when module(s) could not be found.</p> <p>When the <code>QUIET</code> argument is set, no status messages will be printed.</p> <p>By default, if <a class=\"reference internal\" href=\"../variable/cmake_minimum_required_version#variable:CMAKE_MINIMUM_REQUIRED_VERSION\" title=\"CMAKE_MINIMUM_REQUIRED_VERSION\" id=\"index-0-variable:CMAKE_MINIMUM_REQUIRED_VERSION\"><code>CMAKE_MINIMUM_REQUIRED_VERSION</code></a> is 3.1 or later, or if <a class=\"reference internal\" href=\"#variable:PKG_CONFIG_USE_CMAKE_PREFIX_PATH\" title=\"PKG_CONFIG_USE_CMAKE_PREFIX_PATH\" id=\"index-0-variable:PKG_CONFIG_USE_CMAKE_PREFIX_PATH\"><code>PKG_CONFIG_USE_CMAKE_PREFIX_PATH</code></a> is set, the <a class=\"reference internal\" href=\"../variable/cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-0-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>, <a class=\"reference internal\" href=\"../variable/cmake_framework_path#variable:CMAKE_FRAMEWORK_PATH\" title=\"CMAKE_FRAMEWORK_PATH\" id=\"index-0-variable:CMAKE_FRAMEWORK_PATH\"><code>CMAKE_FRAMEWORK_PATH</code></a>, and <a class=\"reference internal\" href=\"../variable/cmake_appbundle_path#variable:CMAKE_APPBUNDLE_PATH\" title=\"CMAKE_APPBUNDLE_PATH\" id=\"index-0-variable:CMAKE_APPBUNDLE_PATH\"><code>CMAKE_APPBUNDLE_PATH</code></a> cache and environment variables will be added to <code>pkg-config</code> search path. The <code>NO_CMAKE_PATH</code> and <code>NO_CMAKE_ENVIRONMENT_PATH</code> arguments disable this behavior for the cache variables and the environment variables, respectively.</p> <p>It sets the following variables:</p> <pre data-language=\"python\">PKG_CONFIG_FOUND          ... if pkg-config executable was found\nPKG_CONFIG_EXECUTABLE     ... pathname of the pkg-config program\nPKG_CONFIG_VERSION_STRING ... the version of the pkg-config program found\n                              (since CMake 2.8.8)\n</pre> <p>For the following variables two sets of values exist; first one is the common one and has the given PREFIX. The second set contains flags which are given out when <code>pkg-config</code> was called with the <code>--static</code> option.</p> <pre data-language=\"python\">&lt;XPREFIX&gt;_FOUND          ... set to 1 if module(s) exist\n&lt;XPREFIX&gt;_LIBRARIES      ... only the libraries (w/o the '-l')\n&lt;XPREFIX&gt;_LIBRARY_DIRS   ... the paths of the libraries (w/o the '-L')\n&lt;XPREFIX&gt;_LDFLAGS        ... all required linker flags\n&lt;XPREFIX&gt;_LDFLAGS_OTHER  ... all other linker flags\n&lt;XPREFIX&gt;_INCLUDE_DIRS   ... the '-I' preprocessor flags (w/o the '-I')\n&lt;XPREFIX&gt;_CFLAGS         ... all required cflags\n&lt;XPREFIX&gt;_CFLAGS_OTHER   ... the other compiler flags\n</pre> <pre data-language=\"python\">&lt;XPREFIX&gt; = &lt;PREFIX&gt;        for common case\n&lt;XPREFIX&gt; = &lt;PREFIX&gt;_STATIC for static linking\n</pre> <p>There are some special variables whose prefix depends on the count of given modules. When there is only one module, &lt;PREFIX&gt; stays unchanged. When there are multiple modules, the prefix will be changed to &lt;PREFIX&gt;_&lt;MODNAME&gt;:</p> <pre data-language=\"python\">&lt;XPREFIX&gt;_VERSION    ... version of the module\n&lt;XPREFIX&gt;_PREFIX     ... prefix-directory of the module\n&lt;XPREFIX&gt;_INCLUDEDIR ... include-dir of the module\n&lt;XPREFIX&gt;_LIBDIR     ... lib-dir of the module\n</pre> <pre data-language=\"python\">&lt;XPREFIX&gt; = &lt;PREFIX&gt;  when |MODULES| == 1, else\n&lt;XPREFIX&gt; = &lt;PREFIX&gt;_&lt;MODNAME&gt;\n</pre> <p>A &lt;MODULE&gt; parameter can have the following formats:</p> <pre data-language=\"python\">{MODNAME}            ... matches any version\n{MODNAME}&gt;={VERSION} ... at least version &lt;VERSION&gt; is required\n{MODNAME}={VERSION}  ... exactly version &lt;VERSION&gt; is required\n{MODNAME}&lt;={VERSION} ... modules must not be newer than &lt;VERSION&gt;\n</pre> <p>Examples</p> <pre data-language=\"cmake\">pkg_check_modules (GLIB2   glib-2.0)\n</pre> <pre data-language=\"cmake\">pkg_check_modules (GLIB2   glib-2.0&gt;=2.10)\n</pre> <p>Requires at least version 2.10 of glib2 and defines e.g. <code>GLIB2_VERSION=2.10.3</code></p> <pre data-language=\"cmake\">pkg_check_modules (FOO     glib-2.0&gt;=2.10 gtk+-2.0)\n</pre> <p>Requires both glib2 and gtk2, and defines e.g. <code>FOO_glib-2.0_VERSION=2.10.3</code> and <code>FOO_gtk+-2.0_VERSION=2.8.20</code></p> <pre data-language=\"cmake\">pkg_check_modules (XRENDER REQUIRED xrender)\n</pre> <p>Defines for example:</p> <pre data-language=\"python\">XRENDER_LIBRARIES=Xrender;X11``\nXRENDER_STATIC_LIBRARIES=Xrender;X11;pthread;Xau;Xdmcp\n</pre> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:pkg_search_module\"><code>pkg_search_module</code></dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#command:pkg_check_modules\" title=\"pkg_check_modules\" id=\"index-1-command:pkg_check_modules\"><code>pkg_check_modules()</code></a>, but instead it checks for given modules and uses the first working one.</p> <pre data-language=\"python\">pkg_search_module(&lt;PREFIX&gt; [REQUIRED] [QUIET]\n                  [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH]\n                  &lt;MODULE&gt; [&lt;MODULE&gt;]*)\n</pre> <p>Examples</p> <pre data-language=\"cmake\">pkg_search_module (BAR     libxml-2.0 libxml2 libxml&gt;=2)\n</pre> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:PKG_CONFIG_EXECUTABLE\"><code>PKG_CONFIG_EXECUTABLE</code></dt> <dd>\n<p>Path to the pkg-config executable.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:PKG_CONFIG_USE_CMAKE_PREFIX_PATH\"><code>PKG_CONFIG_USE_CMAKE_PREFIX_PATH</code></dt> <dd>\n<p>Whether <a class=\"reference internal\" href=\"#command:pkg_check_modules\" title=\"pkg_check_modules\" id=\"index-2-command:pkg_check_modules\"><code>pkg_check_modules()</code></a> and <a class=\"reference internal\" href=\"#command:pkg_search_module\" title=\"pkg_search_module\" id=\"index-1-command:pkg_search_module\"><code>pkg_search_module()</code></a> should add the paths in <a class=\"reference internal\" href=\"../variable/cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-1-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>, <a class=\"reference internal\" href=\"../variable/cmake_framework_path#variable:CMAKE_FRAMEWORK_PATH\" title=\"CMAKE_FRAMEWORK_PATH\" id=\"index-1-variable:CMAKE_FRAMEWORK_PATH\"><code>CMAKE_FRAMEWORK_PATH</code></a>, and <a class=\"reference internal\" href=\"../variable/cmake_appbundle_path#variable:CMAKE_APPBUNDLE_PATH\" title=\"CMAKE_APPBUNDLE_PATH\" id=\"index-1-variable:CMAKE_APPBUNDLE_PATH\"><code>CMAKE_APPBUNDLE_PATH</code></a> cache and environment variables to <code>pkg-config</code> search path.</p> <p>If this variable is not set, this behavior is enabled by default if <a class=\"reference internal\" href=\"../variable/cmake_minimum_required_version#variable:CMAKE_MINIMUM_REQUIRED_VERSION\" title=\"CMAKE_MINIMUM_REQUIRED_VERSION\" id=\"index-1-variable:CMAKE_MINIMUM_REQUIRED_VERSION\"><code>CMAKE_MINIMUM_REQUIRED_VERSION</code></a> is 3.1 or later, disabled otherwise.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindPkgConfig.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindPkgConfig.html</a>\n  </p>\n</div>\n","module/findqt3":"<h1 id=\"module:FindQt3\">FindQt3</h1> <p id=\"findqt3\">Locate Qt include paths and libraries</p> <p>This module defines:</p> <pre data-language=\"python\">QT_INCLUDE_DIR    - where to find qt.h, etc.\nQT_LIBRARIES      - the libraries to link against to use Qt.\nQT_DEFINITIONS    - definitions to use when\n                    compiling code that uses Qt.\nQT_FOUND          - If false, don't try to use Qt.\nQT_VERSION_STRING - the version of Qt found\n</pre> <p>If you need the multithreaded version of Qt, set QT_MT_REQUIRED to TRUE</p> <p>Also defined, but not for general use are:</p> <pre data-language=\"python\">QT_MOC_EXECUTABLE, where to find the moc tool.\nQT_UIC_EXECUTABLE, where to find the uic tool.\nQT_QT_LIBRARY, where to find the Qt library.\nQT_QTMAIN_LIBRARY, where to find the qtmain\n library. This is only required by Qt3 on Windows.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindQt3.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindQt3.html</a>\n  </p>\n</div>\n","module/findpythoninterp":"<h1 id=\"module:FindPythonInterp\">FindPythonInterp</h1> <p id=\"findpythoninterp\">Find python interpreter</p> <p>This module finds if Python interpreter is installed and determines where the executables are. This code sets the following variables:</p> <pre data-language=\"python\">PYTHONINTERP_FOUND         - Was the Python executable found\nPYTHON_EXECUTABLE          - path to the Python interpreter\n</pre> <pre data-language=\"python\">PYTHON_VERSION_STRING      - Python version found e.g. 2.5.2\nPYTHON_VERSION_MAJOR       - Python major version found e.g. 2\nPYTHON_VERSION_MINOR       - Python minor version found e.g. 5\nPYTHON_VERSION_PATCH       - Python patch version found e.g. 2\n</pre> <p>The Python_ADDITIONAL_VERSIONS variable can be used to specify a list of version numbers that should be taken into account when searching for Python. You need to set this variable before calling find_package(PythonInterp).</p> <p>If calling both <code>find_package(PythonInterp)</code> and <code>find_package(PythonLibs)</code>, call <code>find_package(PythonInterp)</code> first to get the currently active Python version by default with a consistent version of PYTHON_LIBRARIES.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindPythonInterp.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindPythonInterp.html</a>\n  </p>\n</div>\n","module/findpythonlibs":"<h1 id=\"module:FindPythonLibs\">FindPythonLibs</h1> <p id=\"findpythonlibs\">Find python libraries</p> <p>This module finds if Python is installed and determines where the include files and libraries are. It also determines what the name of the library is. This code sets the following variables:</p> <pre data-language=\"python\">PYTHONLIBS_FOUND           - have the Python libs been found\nPYTHON_LIBRARIES           - path to the python library\nPYTHON_INCLUDE_PATH        - path to where Python.h is found (deprecated)\nPYTHON_INCLUDE_DIRS        - path to where Python.h is found\nPYTHON_DEBUG_LIBRARIES     - path to the debug library (deprecated)\nPYTHONLIBS_VERSION_STRING  - version of the Python libs found (since CMake 2.8.8)\n</pre> <p>The Python_ADDITIONAL_VERSIONS variable can be used to specify a list of version numbers that should be taken into account when searching for Python. You need to set this variable before calling find_package(PythonLibs).</p> <p>If you’d like to specify the installation of Python to use, you should modify the following cache variables:</p> <pre data-language=\"python\">PYTHON_LIBRARY             - path to the python library\nPYTHON_INCLUDE_DIR         - path to where Python.h is found\n</pre> <p>If calling both <code>find_package(PythonInterp)</code> and <code>find_package(PythonLibs)</code>, call <code>find_package(PythonInterp)</code> first to get the currently active Python version by default with a consistent version of PYTHON_LIBRARIES.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindPythonLibs.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindPythonLibs.html</a>\n  </p>\n</div>\n","module/findqt":"<h1 id=\"module:FindQt\">FindQt</h1> <p id=\"findqt\">Searches for all installed versions of Qt.</p> <p>This should only be used if your project can work with multiple versions of Qt. If not, you should just directly use FindQt4 or FindQt3. If multiple versions of Qt are found on the machine, then The user must set the option DESIRED_QT_VERSION to the version they want to use. If only one version of qt is found on the machine, then the DESIRED_QT_VERSION is set to that version and the matching FindQt3 or FindQt4 module is included. Once the user sets DESIRED_QT_VERSION, then the FindQt3 or FindQt4 module is included.</p> <p>This module can only detect and switch between Qt versions 3 and 4. It cannot handle Qt5 or any later versions.</p> <pre data-language=\"python\">QT_REQUIRED if this is set to TRUE then if CMake can\n            not find Qt4 or Qt3 an error is raised\n            and a message is sent to the user.\n</pre> <pre data-language=\"python\">DESIRED_QT_VERSION OPTION is created\nQT4_INSTALLED is set to TRUE if qt4 is found.\nQT3_INSTALLED is set to TRUE if qt3 is found.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindQt.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindQt.html</a>\n  </p>\n</div>\n","module/findquicktime":"<h1 id=\"module:FindQuickTime\">FindQuickTime</h1> <p id=\"findquicktime\">Locate QuickTime This module defines QUICKTIME_LIBRARY QUICKTIME_FOUND, if false, do not try to link to gdal QUICKTIME_INCLUDE_DIR, where to find the headers</p> <p>$QUICKTIME_DIR is an environment variable that would correspond to the ./configure –prefix=$QUICKTIME_DIR</p> <p>Created by Eric Wing.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindQuickTime.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindQuickTime.html</a>\n  </p>\n</div>\n","module/findrti":"<h1 id=\"module:FindRTI\">FindRTI</h1> <p id=\"findrti\">Try to find M&amp;S HLA RTI libraries</p> <p>This module finds if any HLA RTI is installed and locates the standard RTI include files and libraries.</p> <p>RTI is a simulation infrastructure standardized by IEEE and SISO. It has a well defined C++ API that assures that simulation applications are independent on a particular RTI implementation.</p> <pre data-language=\"python\">http://en.wikipedia.org/wiki/Run-Time_Infrastructure_(simulation)\n</pre> <p>This code sets the following variables:</p> <pre data-language=\"python\">RTI_INCLUDE_DIR = the directory where RTI includes file are found\nRTI_LIBRARIES = The libraries to link against to use RTI\nRTI_DEFINITIONS = -DRTI_USES_STD_FSTREAM\nRTI_FOUND = Set to FALSE if any HLA RTI was not found\n</pre> <p>Report problems to &lt;<a class=\"reference external\" href=\"mailto:certi-devel%40nongnu.org\">certi-devel<span>@</span>nongnu<span>.</span>org</a>&gt;</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindRTI.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindRTI.html</a>\n  </p>\n</div>\n","module/findqt4":"<h1 id=\"module:FindQt4\">FindQt4</h1>  <h2 id=\"findqt4\">Finding and Using Qt4</h2> <p>This module can be used to find Qt4. The most important issue is that the Qt4 qmake is available via the system path. This qmake is then used to detect basically everything else. This module defines a number of <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets, macros and variables.</p> <p>Typical usage could be something like:</p> <pre data-language=\"cmake\">set(CMAKE_AUTOMOC ON)\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\nfind_package(Qt4 4.4.3 REQUIRED QtGui QtXml)\nadd_executable(myexe main.cpp)\ntarget_link_libraries(myexe Qt4::QtGui Qt4::QtXml)\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When using <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-1-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets, the qtmain.lib static library is automatically linked on Windows for <a class=\"reference internal\" href=\"../prop_tgt/win32_executable#prop_tgt:WIN32_EXECUTABLE\" title=\"WIN32_EXECUTABLE\" id=\"index-0-prop_tgt:WIN32_EXECUTABLE\"><code>WIN32</code></a> executables. To disable that globally, set the <code>QT4_NO_LINK_QTMAIN</code> variable before finding Qt4. To disable that for a particular executable, set the <code>QT4_NO_LINK_QTMAIN</code> target property to <code>TRUE</code> on the executable.</p> </div>   <h2 id=\"qt-build-tools\">Qt Build Tools</h2> <p>Qt relies on some bundled tools for code generation, such as <code>moc</code> for meta-object code generation,``uic`` for widget layout and population, and <code>rcc</code> for virtual filesystem content generation. These tools may be automatically invoked by <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> if the appropriate conditions are met. See <a class=\"reference internal\" href=\"../manual/cmake-qt.7#manual:cmake-qt(7)\" title=\"cmake-qt(7)\" id=\"index-0-manual:cmake-qt(7)\"><code>cmake-qt(7)</code></a> for more.</p>   <h2 id=\"qt-macros\">Qt Macros</h2> <p>In some cases it can be necessary or useful to invoke the Qt build tools in a more-manual way. Several macros are available to add targets for such uses.</p> <pre data-language=\"python\">macro QT4_WRAP_CPP(outfiles inputfile ... [TARGET tgt] OPTIONS ...)\n      create moc code from a list of files containing Qt class with\n      the Q_OBJECT declaration.  Per-directory preprocessor definitions\n      are also added.  If the &lt;tgt&gt; is specified, the\n      INTERFACE_INCLUDE_DIRECTORIES and INTERFACE_COMPILE_DEFINITIONS from\n      the &lt;tgt&gt; are passed to moc.  Options may be given to moc, such as\n      those found when executing \"moc -help\".\n</pre> <pre data-language=\"python\">macro QT4_WRAP_UI(outfiles inputfile ... OPTIONS ...)\n      create code from a list of Qt designer ui files.\n      Options may be given to uic, such as those found\n      when executing \"uic -help\"\n</pre> <pre data-language=\"python\">macro QT4_ADD_RESOURCES(outfiles inputfile ... OPTIONS ...)\n      create code from a list of Qt resource files.\n      Options may be given to rcc, such as those found\n      when executing \"rcc -help\"\n</pre> <pre data-language=\"python\">macro QT4_GENERATE_MOC(inputfile outputfile [TARGET tgt])\n      creates a rule to run moc on infile and create outfile.\n      Use this if for some reason QT4_WRAP_CPP() isn't appropriate, e.g.\n      because you need a custom filename for the moc file or something\n      similar.  If the &lt;tgt&gt; is specified, the\n      INTERFACE_INCLUDE_DIRECTORIES and INTERFACE_COMPILE_DEFINITIONS from\n      the &lt;tgt&gt; are passed to moc.\n</pre> <pre data-language=\"python\">macro QT4_ADD_DBUS_INTERFACE(outfiles interface basename)\n      Create the interface header and implementation files with the\n      given basename from the given interface xml file and add it to\n      the list of sources.\n\n      You can pass additional parameters to the qdbusxml2cpp call by setting\n      properties on the input file:\n\n      INCLUDE the given file will be included in the generate interface header\n\n      CLASSNAME the generated class is named accordingly\n\n      NO_NAMESPACE the generated class is not wrapped in a namespace\n</pre> <pre data-language=\"python\">macro QT4_ADD_DBUS_INTERFACES(outfiles inputfile ... )\n      Create the interface header and implementation files\n      for all listed interface xml files.\n      The basename will be automatically determined from the name\n      of the xml file.\n\n      The source file properties described for\n      QT4_ADD_DBUS_INTERFACE also apply here.\n</pre> <pre data-language=\"python\">macro QT4_ADD_DBUS_ADAPTOR(outfiles xmlfile parentheader parentclassname\n                           [basename] [classname])\n      create a dbus adaptor (header and implementation file) from the xml file\n      describing the interface, and add it to the list of sources. The adaptor\n      forwards the calls to a parent class, defined in parentheader and named\n      parentclassname. The name of the generated files will be\n      &lt;basename&gt;adaptor.{cpp,h} where basename defaults to the basename of the\n      xml file.\n      If &lt;classname&gt; is provided, then it will be used as the classname of the\n      adaptor itself.\n</pre> <pre data-language=\"python\">macro QT4_GENERATE_DBUS_INTERFACE( header [interfacename] OPTIONS ...)\n      generate the xml interface file from the given header.\n      If the optional argument interfacename is omitted, the name of the\n      interface file is constructed from the basename of the header with\n      the suffix .xml appended.\n      Options may be given to qdbuscpp2xml, such as those found when\n      executing \"qdbuscpp2xml --help\"\n</pre> <pre data-language=\"python\">macro QT4_CREATE_TRANSLATION( qm_files directories ... sources ...\n                              ts_files ... OPTIONS ...)\n      out: qm_files\n      in:  directories sources ts_files\n      options: flags to pass to lupdate, such as -extensions to specify\n      extensions for a directory scan.\n      generates commands to create .ts (vie lupdate) and .qm\n      (via lrelease) - files from directories and/or sources. The ts files are\n      created and/or updated in the source tree (unless given with full paths).\n      The qm files are generated in the build tree.\n      Updating the translations can be done by adding the qm_files\n      to the source list of your library/executable, so they are\n      always updated, or by adding a custom target to control when\n      they get updated/generated.\n</pre> <pre data-language=\"python\">macro QT4_ADD_TRANSLATION( qm_files ts_files ... )\n      out: qm_files\n      in:  ts_files\n      generates commands to create .qm from .ts - files. The generated\n      filenames can be found in qm_files. The ts_files\n      must exist and are not updated in any way.\n</pre> <pre data-language=\"python\">macro QT4_AUTOMOC(sourcefile1 sourcefile2 ... [TARGET tgt])\n      The qt4_automoc macro is obsolete.  Use the CMAKE_AUTOMOC feature instead.\n      This macro is still experimental.\n      It can be used to have moc automatically handled.\n      So if you have the files foo.h and foo.cpp, and in foo.h a\n      a class uses the Q_OBJECT macro, moc has to run on it. If you don't\n      want to use QT4_WRAP_CPP() (which is reliable and mature), you can insert\n      #include \"foo.moc\"\n      in foo.cpp and then give foo.cpp as argument to QT4_AUTOMOC(). This will\n      scan all listed files at cmake-time for such included moc files and if it\n      finds them cause a rule to be generated to run moc at build time on the\n      accompanying header file foo.h.\n      If a source file has the SKIP_AUTOMOC property set it will be ignored by\n      this macro.\n      If the &lt;tgt&gt; is specified, the INTERFACE_INCLUDE_DIRECTORIES and\n      INTERFACE_COMPILE_DEFINITIONS from the &lt;tgt&gt; are passed to moc.\n</pre> <pre data-language=\"python\">function QT4_USE_MODULES( target [link_type] modules...)\n       This function is obsolete. Use target_link_libraries with IMPORTED targets\n       instead.\n       Make &lt;target&gt; use the &lt;modules&gt; from Qt. Using a Qt module means\n       to link to the library, add the relevant include directories for the\n       module, and add the relevant compiler defines for using the module.\n       Modules are roughly equivalent to components of Qt4, so usage would be\n       something like:\n        qt4_use_modules(myexe Core Gui Declarative)\n       to use QtCore, QtGui and QtDeclarative. The optional &lt;link_type&gt; argument\n       can be specified as either LINK_PUBLIC or LINK_PRIVATE to specify the\n       same argument to the target_link_libraries call.\n</pre>   <h2 id=\"imported-targets\">IMPORTED Targets</h2> <p>A particular Qt library may be used by using the corresponding <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-2-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target with the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> command:</p> <pre data-language=\"cmake\">target_link_libraries(myexe Qt4::QtGui Qt4::QtXml)\n</pre> <p>Using a target in this way causes :cmake(1)` to use the appropriate include directories and compile definitions for the target when compiling <code>myexe</code>.</p> <p>Targets are aware of their dependencies, so for example it is not necessary to list <code>Qt4::QtCore</code> if another Qt library is listed, and it is not necessary to list <code>Qt4::QtGui</code> if <code>Qt4::QtDeclarative</code> is listed. Targets may be tested for existence in the usual way with the <a class=\"reference internal\" href=\"../command/if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if(TARGET)</code></a> command.</p> <p>The Qt toolkit may contain both debug and release libraries. <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-1-manual:cmake(1)\"><code>cmake(1)</code></a> will choose the appropriate version based on the build configuration.</p> <dl class=\"docutils\"> <dt><code>Qt4::QtCore</code></dt> <dd>The QtCore target</dd> <dt><code>Qt4::QtGui</code></dt> <dd>The QtGui target</dd> <dt><code>Qt4::Qt3Support</code></dt> <dd>The Qt3Support target</dd> <dt><code>Qt4::QtAssistant</code></dt> <dd>The QtAssistant target</dd> <dt><code>Qt4::QtAssistantClient</code></dt> <dd>The QtAssistantClient target</dd> <dt><code>Qt4::QAxContainer</code></dt> <dd>The QAxContainer target (Windows only)</dd> <dt><code>Qt4::QAxServer</code></dt> <dd>The QAxServer target (Windows only)</dd> <dt><code>Qt4::QtDBus</code></dt> <dd>The QtDBus target</dd> <dt><code>Qt4::QtDesigner</code></dt> <dd>The QtDesigner target</dd> <dt><code>Qt4::QtDesignerComponents</code></dt> <dd>The QtDesignerComponents target</dd> <dt><code>Qt4::QtHelp</code></dt> <dd>The QtHelp target</dd> <dt><code>Qt4::QtMotif</code></dt> <dd>The QtMotif target</dd> <dt><code>Qt4::QtMultimedia</code></dt> <dd>The QtMultimedia target</dd> <dt><code>Qt4::QtNetwork</code></dt> <dd>The QtNetwork target</dd> <dt><code>Qt4::QtNsPLugin</code></dt> <dd>The QtNsPLugin target</dd> <dt><code>Qt4::QtOpenGL</code></dt> <dd>The QtOpenGL target</dd> <dt><code>Qt4::QtScript</code></dt> <dd>The QtScript target</dd> <dt><code>Qt4::QtScriptTools</code></dt> <dd>The QtScriptTools target</dd> <dt><code>Qt4::QtSql</code></dt> <dd>The QtSql target</dd> <dt><code>Qt4::QtSvg</code></dt> <dd>The QtSvg target</dd> <dt><code>Qt4::QtTest</code></dt> <dd>The QtTest target</dd> <dt><code>Qt4::QtUiTools</code></dt> <dd>The QtUiTools target</dd> <dt><code>Qt4::QtWebKit</code></dt> <dd>The QtWebKit target</dd> <dt><code>Qt4::QtXml</code></dt> <dd>The QtXml target</dd> <dt><code>Qt4::QtXmlPatterns</code></dt> <dd>The QtXmlPatterns target</dd> <dt><code>Qt4::phonon</code></dt> <dd>The phonon target</dd> </dl>   <h2 id=\"result-variables\">Result Variables</h2> <blockquote> <div>Below is a detailed list of variables that FindQt4.cmake sets.</div>\n</blockquote> <dl class=\"docutils\"> <dt><code>Qt4_FOUND</code></dt> <dd>If false, don’t try to use Qt 4.</dd> <dt><code>QT_FOUND</code></dt> <dd>If false, don’t try to use Qt. This variable is for compatibility only.</dd> <dt><code>QT4_FOUND</code></dt> <dd>If false, don’t try to use Qt 4. This variable is for compatibility only.</dd> <dt><code>QT_VERSION_MAJOR</code></dt> <dd>The major version of Qt found.</dd> <dt><code>QT_VERSION_MINOR</code></dt> <dd>The minor version of Qt found.</dd> <dt><code>QT_VERSION_PATCH</code></dt> <dd>The patch version of Qt found.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindQt4.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindQt4.html</a>\n  </p>\n</div>\n","module/findruby":"<h1 id=\"module:FindRuby\">FindRuby</h1> <p id=\"findruby\">Find Ruby</p> <p>This module finds if Ruby is installed and determines where the include files and libraries are. Ruby 1.8, 1.9, 2.0 and 2.1 are supported.</p> <p>The minimum required version of Ruby can be specified using the standard syntax, e.g. find_package(Ruby 1.8)</p> <p>It also determines what the name of the library is. This code sets the following variables:</p> <dl class=\"docutils\"> <dt><code>RUBY_EXECUTABLE</code></dt> <dd>full path to the ruby binary</dd> <dt><code>RUBY_INCLUDE_DIRS</code></dt> <dd>include dirs to be used when using the ruby library</dd> <dt><code>RUBY_LIBRARY</code></dt> <dd>full path to the ruby library</dd> <dt><code>RUBY_VERSION</code></dt> <dd>the version of ruby which was found, e.g. “1.8.7”</dd> <dt><code>RUBY_FOUND</code></dt> <dd>set to true if ruby ws found successfully</dd> </dl> <p>Also:</p> <dl class=\"docutils\"> <dt><code>RUBY_INCLUDE_PATH</code></dt> <dd>same as RUBY_INCLUDE_DIRS, only provided for compatibility reasons, don’t use it</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindRuby.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindRuby.html</a>\n  </p>\n</div>\n","module/findsdl_image":"<h1 id=\"module:FindSDL_image\">FindSDL_image</h1> <p id=\"findsdl-image\">Locate SDL_image library</p> <p>This module defines:</p> <pre data-language=\"python\">SDL_IMAGE_LIBRARIES, the name of the library to link against\nSDL_IMAGE_INCLUDE_DIRS, where to find the headers\nSDL_IMAGE_FOUND, if false, do not try to link against\nSDL_IMAGE_VERSION_STRING - human-readable string containing the\n                           version of SDL_image\n</pre> <p>For backward compatiblity the following variables are also set:</p> <pre data-language=\"python\">SDLIMAGE_LIBRARY (same value as SDL_IMAGE_LIBRARIES)\nSDLIMAGE_INCLUDE_DIR (same value as SDL_IMAGE_INCLUDE_DIRS)\nSDLIMAGE_FOUND (same value as SDL_IMAGE_FOUND)\n</pre> <p>$SDLDIR is an environment variable that would correspond to the ./configure –prefix=$SDLDIR used in building SDL.</p> <p>Created by Eric Wing. This was influenced by the FindSDL.cmake module, but with modifications to recognize OS X frameworks and additional Unix paths (FreeBSD, etc).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindSDL_image.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindSDL_image.html</a>\n  </p>\n</div>\n","module/findsdl_mixer":"<h1 id=\"module:FindSDL_mixer\">FindSDL_mixer</h1> <p id=\"findsdl-mixer\">Locate SDL_mixer library</p> <p>This module defines:</p> <pre data-language=\"python\">SDL_MIXER_LIBRARIES, the name of the library to link against\nSDL_MIXER_INCLUDE_DIRS, where to find the headers\nSDL_MIXER_FOUND, if false, do not try to link against\nSDL_MIXER_VERSION_STRING - human-readable string containing the\n                           version of SDL_mixer\n</pre> <p>For backward compatiblity the following variables are also set:</p> <pre data-language=\"python\">SDLMIXER_LIBRARY (same value as SDL_MIXER_LIBRARIES)\nSDLMIXER_INCLUDE_DIR (same value as SDL_MIXER_INCLUDE_DIRS)\nSDLMIXER_FOUND (same value as SDL_MIXER_FOUND)\n</pre> <p>$SDLDIR is an environment variable that would correspond to the ./configure –prefix=$SDLDIR used in building SDL.</p> <p>Created by Eric Wing. This was influenced by the FindSDL.cmake module, but with modifications to recognize OS X frameworks and additional Unix paths (FreeBSD, etc).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindSDL_mixer.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindSDL_mixer.html</a>\n  </p>\n</div>\n","module/findsdl_net":"<h1 id=\"module:FindSDL_net\">FindSDL_net</h1> <p id=\"findsdl-net\">Locate SDL_net library</p> <p>This module defines:</p> <pre data-language=\"python\">SDL_NET_LIBRARIES, the name of the library to link against\nSDL_NET_INCLUDE_DIRS, where to find the headers\nSDL_NET_FOUND, if false, do not try to link against\nSDL_NET_VERSION_STRING - human-readable string containing the version of SDL_net\n</pre> <p>For backward compatiblity the following variables are also set:</p> <pre data-language=\"python\">SDLNET_LIBRARY (same value as SDL_NET_LIBRARIES)\nSDLNET_INCLUDE_DIR (same value as SDL_NET_INCLUDE_DIRS)\nSDLNET_FOUND (same value as SDL_NET_FOUND)\n</pre> <p>$SDLDIR is an environment variable that would correspond to the ./configure –prefix=$SDLDIR used in building SDL.</p> <p>Created by Eric Wing. This was influenced by the FindSDL.cmake module, but with modifications to recognize OS X frameworks and additional Unix paths (FreeBSD, etc).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindSDL_net.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindSDL_net.html</a>\n  </p>\n</div>\n","module/findsdl":"<h1 id=\"module:FindSDL\">FindSDL</h1> <p id=\"findsdl\">Locate SDL library</p> <p>This module defines</p> <pre data-language=\"python\">SDL_LIBRARY, the name of the library to link against\nSDL_FOUND, if false, do not try to link to SDL\nSDL_INCLUDE_DIR, where to find SDL.h\nSDL_VERSION_STRING, human-readable string containing the version of SDL\n</pre> <p>This module responds to the flag:</p> <pre data-language=\"python\">SDL_BUILDING_LIBRARY\n  If this is defined, then no SDL_main will be linked in because\n  only applications need main().\n  Otherwise, it is assumed you are building an application and this\n  module will attempt to locate and set the proper link flags\n  as part of the returned SDL_LIBRARY variable.\n</pre> <p>Don’t forget to include SDLmain.h and SDLmain.m your project for the OS X framework based version. (Other versions link to -lSDLmain which this module will try to find on your behalf.) Also for OS X, this module will automatically add the -framework Cocoa on your behalf.</p> <p>Additional Note: If you see an empty SDL_LIBRARY_TEMP in your configuration and no SDL_LIBRARY, it means CMake did not find your SDL library (SDL.dll, libsdl.so, SDL.framework, etc). Set SDL_LIBRARY_TEMP to point to your SDL library, and configure again. Similarly, if you see an empty SDLMAIN_LIBRARY, you should set this value as appropriate. These values are used to generate the final SDL_LIBRARY variable, but when these values are unset, SDL_LIBRARY does not get created.</p> <p>$SDLDIR is an environment variable that would correspond to the ./configure –prefix=$SDLDIR used in building SDL. l.e.galup 9-20-02</p> <p>Modified by Eric Wing. Added code to assist with automated building by using environmental variables and providing a more controlled/consistent search behavior. Added new modifications to recognize OS X frameworks and additional Unix paths (FreeBSD, etc). Also corrected the header search path to follow “proper” SDL guidelines. Added a search for SDLmain which is needed by some platforms. Added a search for threads which is needed by some platforms. Added needed compile switches for MinGW.</p> <p>On OSX, this will prefer the Framework version (if found) over others. People will have to manually change the cache values of SDL_LIBRARY to override this selection or set the CMake environment CMAKE_INCLUDE_PATH to modify the search paths.</p> <p>Note that the header path has changed from SDL/SDL.h to just SDL.h This needed to change because “proper” SDL convention is #include “SDL.h”, not &lt;SDL/SDL.h&gt;. This is done for portability reasons because not all systems place things in SDL/ (see FreeBSD).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindSDL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindSDL.html</a>\n  </p>\n</div>\n","module/findsdl_sound":"<h1 id=\"module:FindSDL_sound\">FindSDL_sound</h1> <p id=\"findsdl-sound\">Locates the SDL_sound library</p> <p>This module depends on SDL being found and must be called AFTER FindSDL.cmake is called.</p> <p>This module defines</p> <pre data-language=\"python\">SDL_SOUND_INCLUDE_DIR, where to find SDL_sound.h\nSDL_SOUND_FOUND, if false, do not try to link to SDL_sound\nSDL_SOUND_LIBRARIES, this contains the list of libraries that you need\n  to link against. This is a read-only variable and is marked INTERNAL.\nSDL_SOUND_EXTRAS, this is an optional variable for you to add your own\n  flags to SDL_SOUND_LIBRARIES. This is prepended to SDL_SOUND_LIBRARIES.\n  This is available mostly for cases this module failed to anticipate for\n  and you must add additional flags. This is marked as ADVANCED.\nSDL_SOUND_VERSION_STRING, human-readable string containing the\n  version of SDL_sound\n</pre> <p>This module also defines (but you shouldn’t need to use directly)</p> <pre data-language=\"python\">SDL_SOUND_LIBRARY, the name of just the SDL_sound library you would link\nagainst. Use SDL_SOUND_LIBRARIES for you link instructions and not this one.\n</pre> <p>And might define the following as needed</p> <pre data-language=\"python\">MIKMOD_LIBRARY\nMODPLUG_LIBRARY\nOGG_LIBRARY\nVORBIS_LIBRARY\nSMPEG_LIBRARY\nFLAC_LIBRARY\nSPEEX_LIBRARY\n</pre> <p>Typically, you should not use these variables directly, and you should use SDL_SOUND_LIBRARIES which contains SDL_SOUND_LIBRARY and the other audio libraries (if needed) to successfully compile on your system.</p> <p>Created by Eric Wing. This module is a bit more complicated than the other FindSDL* family modules. The reason is that SDL_sound can be compiled in a large variety of different ways which are independent of platform. SDL_sound may dynamically link against other 3rd party libraries to get additional codec support, such as Ogg Vorbis, SMPEG, ModPlug, MikMod, FLAC, Speex, and potentially others. Under some circumstances which I don’t fully understand, there seems to be a requirement that dependent libraries of libraries you use must also be explicitly linked against in order to successfully compile. SDL_sound does not currently have any system in place to know how it was compiled. So this CMake module does the hard work in trying to discover which 3rd party libraries are required for building (if any). This module uses a brute force approach to create a test program that uses SDL_sound, and then tries to build it. If the build fails, it parses the error output for known symbol names to figure out which libraries are needed.</p> <p>Responds to the $SDLDIR and $SDLSOUNDDIR environmental variable that would correspond to the ./configure –prefix=$SDLDIR used in building SDL.</p> <p>On OSX, this will prefer the Framework version (if found) over others. People will have to manually change the cache values of SDL_LIBRARY to override this selectionor set the CMake environment CMAKE_INCLUDE_PATH to modify the search paths.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindSDL_sound.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindSDL_sound.html</a>\n  </p>\n</div>\n","module/findsdl_ttf":"<h1 id=\"module:FindSDL_ttf\">FindSDL_ttf</h1> <p id=\"findsdl-ttf\">Locate SDL_ttf library</p> <p>This module defines:</p> <pre data-language=\"python\">SDL_TTF_LIBRARIES, the name of the library to link against\nSDL_TTF_INCLUDE_DIRS, where to find the headers\nSDL_TTF_FOUND, if false, do not try to link against\nSDL_TTF_VERSION_STRING - human-readable string containing the version of SDL_ttf\n</pre> <p>For backward compatiblity the following variables are also set:</p> <pre data-language=\"python\">SDLTTF_LIBRARY (same value as SDL_TTF_LIBRARIES)\nSDLTTF_INCLUDE_DIR (same value as SDL_TTF_INCLUDE_DIRS)\nSDLTTF_FOUND (same value as SDL_TTF_FOUND)\n</pre> <p>$SDLDIR is an environment variable that would correspond to the ./configure –prefix=$SDLDIR used in building SDL.</p> <p>Created by Eric Wing. This was influenced by the FindSDL.cmake module, but with modifications to recognize OS X frameworks and additional Unix paths (FreeBSD, etc).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindSDL_ttf.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindSDL_ttf.html</a>\n  </p>\n</div>\n","module/findselfpackers":"<h1 id=\"module:FindSelfPackers\">FindSelfPackers</h1> <p id=\"findselfpackers\">Find upx</p> <p>This module looks for some executable packers (i.e. software that compress executables or shared libs into on-the-fly self-extracting executables or shared libs. Examples:</p> <pre data-language=\"python\">UPX: http://wildsau.idv.uni-linz.ac.at/mfx/upx.html\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindSelfPackers.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindSelfPackers.html</a>\n  </p>\n</div>\n","module/findsquish":"<h1 id=\"module:FindSquish\">FindSquish</h1> <p id=\"findsquish\">– Typical Use</p> <p>This module can be used to find Squish. Currently Squish versions 3 and 4 are supported.</p> <pre data-language=\"python\">SQUISH_FOUND                    If false, don't try to use Squish\nSQUISH_VERSION                  The full version of Squish found\nSQUISH_VERSION_MAJOR            The major version of Squish found\nSQUISH_VERSION_MINOR            The minor version of Squish found\nSQUISH_VERSION_PATCH            The patch version of Squish found\n</pre> <pre data-language=\"python\">SQUISH_INSTALL_DIR              The Squish installation directory\n                                (containing bin, lib, etc)\nSQUISH_SERVER_EXECUTABLE        The squishserver executable\nSQUISH_CLIENT_EXECUTABLE        The squishrunner executable\n</pre> <pre data-language=\"python\">SQUISH_INSTALL_DIR_FOUND        Was the install directory found?\nSQUISH_SERVER_EXECUTABLE_FOUND  Was the server executable found?\nSQUISH_CLIENT_EXECUTABLE_FOUND  Was the client executable found?\n</pre> <p>It provides the function squish_v4_add_test() for adding a squish test to cmake using Squish 4.x:</p> <pre data-language=\"python\">squish_v4_add_test(cmakeTestName\n  AUT targetName SUITE suiteName TEST squishTestName\n  [SETTINGSGROUP group] [PRE_COMMAND command] [POST_COMMAND command] )\n</pre> <p>The arguments have the following meaning:</p> <dl class=\"docutils\"> <dt><code>cmakeTestName</code></dt> <dd>this will be used as the first argument for add_test()</dd> <dt><code>AUT targetName</code></dt> <dd>the name of the cmake target which will be used as AUT, i.e. the executable which will be tested.</dd> <dt><code>SUITE suiteName</code></dt> <dd>this is either the full path to the squish suite, or just the last directory of the suite, i.e. the suite name. In this case the CMakeLists.txt which calls squish_add_test() must be located in the parent directory of the suite directory.</dd> <dt><code>TEST squishTestName</code></dt> <dd>the name of the squish test, i.e. the name of the subdirectory of the test inside the suite directory.</dd> <dt><code>SETTINGSGROUP group</code></dt> <dd>if specified, the given settings group will be used for executing the test. If not specified, the groupname will be “CTest_&lt;username&gt;”</dd> <dt><code>PRE_COMMAND command</code></dt> <dd>if specified, the given command will be executed before starting the squish test.</dd> <dt><code>POST_COMMAND command</code></dt> <dd>same as PRE_COMMAND, but after the squish test has been executed.</dd> </dl> <pre data-language=\"python\">enable_testing()\nfind_package(Squish 4.0)\nif (SQUISH_FOUND)\n   squish_v4_add_test(myTestName\n     AUT myApp\n     SUITE ${CMAKE_SOURCE_DIR}/tests/mySuite\n     TEST someSquishTest\n     SETTINGSGROUP myGroup\n     )\nendif ()\n</pre> <p>For users of Squish version 3.x the macro squish_v3_add_test() is provided:</p> <pre data-language=\"python\">squish_v3_add_test(testName applicationUnderTest testCase envVars testWrapper)\nUse this macro to add a test using Squish 3.x.\n</pre> <pre data-language=\"python\">enable_testing()\nfind_package(Squish)\nif (SQUISH_FOUND)\n  squish_v3_add_test(myTestName myApplication testCase envVars testWrapper)\nendif ()\n</pre> <p>macro SQUISH_ADD_TEST(testName applicationUnderTest testCase envVars testWrapper)</p> <pre data-language=\"python\">This is deprecated. Use SQUISH_V3_ADD_TEST() if you are using Squish 3.x instead.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindSquish.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindSquish.html</a>\n  </p>\n</div>\n","module/findsubversion":"<h1 id=\"module:FindSubversion\">FindSubversion</h1> <p id=\"findsubversion\">Extract information from a subversion working copy</p> <p>The module defines the following variables:</p> <pre data-language=\"python\">Subversion_SVN_EXECUTABLE - path to svn command line client\nSubversion_VERSION_SVN - version of svn command line client\nSubversion_FOUND - true if the command line client was found\nSUBVERSION_FOUND - same as Subversion_FOUND, set for compatiblity reasons\n</pre> <p>The minimum required version of Subversion can be specified using the standard syntax, e.g. find_package(Subversion 1.4)</p> <p>If the command line client executable is found two macros are defined:</p> <pre data-language=\"python\">Subversion_WC_INFO(&lt;dir&gt; &lt;var-prefix&gt;)\nSubversion_WC_LOG(&lt;dir&gt; &lt;var-prefix&gt;)\n</pre> <p>Subversion_WC_INFO extracts information of a subversion working copy at a given location. This macro defines the following variables:</p> <pre data-language=\"python\">&lt;var-prefix&gt;_WC_URL - url of the repository (at &lt;dir&gt;)\n&lt;var-prefix&gt;_WC_ROOT - root url of the repository\n&lt;var-prefix&gt;_WC_REVISION - current revision\n&lt;var-prefix&gt;_WC_LAST_CHANGED_AUTHOR - author of last commit\n&lt;var-prefix&gt;_WC_LAST_CHANGED_DATE - date of last commit\n&lt;var-prefix&gt;_WC_LAST_CHANGED_REV - revision of last commit\n&lt;var-prefix&gt;_WC_INFO - output of command `svn info &lt;dir&gt;'\n</pre> <p>Subversion_WC_LOG retrieves the log message of the base revision of a subversion working copy at a given location. This macro defines the variable:</p> <pre data-language=\"python\">&lt;var-prefix&gt;_LAST_CHANGED_LOG - last log of base revision\n</pre> <p>Example usage:</p> <pre data-language=\"python\">find_package(Subversion)\nif(SUBVERSION_FOUND)\n  Subversion_WC_INFO(${PROJECT_SOURCE_DIR} Project)\n  message(\"Current revision is ${Project_WC_REVISION}\")\n  Subversion_WC_LOG(${PROJECT_SOURCE_DIR} Project)\n  message(\"Last changed log is ${Project_LAST_CHANGED_LOG}\")\nendif()\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindSubversion.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindSubversion.html</a>\n  </p>\n</div>\n","module/findswig":"<h1 id=\"module:FindSWIG\">FindSWIG</h1> <p id=\"findswig\">Find SWIG</p> <p>This module finds an installed SWIG. It sets the following variables:</p> <pre data-language=\"python\">SWIG_FOUND - set to true if SWIG is found\nSWIG_DIR - the directory where swig is installed\nSWIG_EXECUTABLE - the path to the swig executable\nSWIG_VERSION   - the version number of the swig executable\n</pre> <p>The minimum required version of SWIG can be specified using the standard syntax, e.g. find_package(SWIG 1.1)</p> <p>All information is collected from the SWIG_EXECUTABLE so the version to be found can be changed from the command line by means of setting SWIG_EXECUTABLE</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindSWIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindSWIG.html</a>\n  </p>\n</div>\n","module/findtcl":"<h1 id=\"module:FindTCL\">FindTCL</h1> <p id=\"findtcl\">TK_INTERNAL_PATH was removed.</p> <p>This module finds if Tcl is installed and determines where the include files and libraries are. It also determines what the name of the library is. This code sets the following variables:</p> <pre data-language=\"python\">TCL_FOUND              = Tcl was found\nTK_FOUND               = Tk was found\nTCLTK_FOUND            = Tcl and Tk were found\nTCL_LIBRARY            = path to Tcl library (tcl tcl80)\nTCL_INCLUDE_PATH       = path to where tcl.h can be found\nTCL_TCLSH              = path to tclsh binary (tcl tcl80)\nTK_LIBRARY             = path to Tk library (tk tk80 etc)\nTK_INCLUDE_PATH        = path to where tk.h can be found\nTK_WISH                = full path to the wish executable\n</pre> <p>In an effort to remove some clutter and clear up some issues for people who are not necessarily Tcl/Tk gurus/developpers, some variables were moved or removed. Changes compared to CMake 2.4 are:</p> <pre data-language=\"python\">=&gt; they were only useful for people writing Tcl/Tk extensions.\n=&gt; these libs are not packaged by default with Tcl/Tk distributions.\n   Even when Tcl/Tk is built from source, several flavors of debug libs\n   are created and there is no real reason to pick a single one\n   specifically (say, amongst tcl84g, tcl84gs, or tcl84sgx).\n   Let's leave that choice to the user by allowing him to assign\n   TCL_LIBRARY to any Tcl library, debug or not.\n=&gt; this ended up being only a Win32 variable, and there is a lot of\n   confusion regarding the location of this file in an installed Tcl/Tk\n   tree anyway (see 8.5 for example). If you need the internal path at\n   this point it is safer you ask directly where the *source* tree is\n   and dig from there.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindTCL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindTCL.html</a>\n  </p>\n</div>\n","module/findtclsh":"<h1 id=\"module:FindTclsh\">FindTclsh</h1> <p id=\"findtclsh\">Find tclsh</p> <p>This module finds if TCL is installed and determines where the include files and libraries are. It also determines what the name of the library is. This code sets the following variables:</p> <pre data-language=\"python\">TCLSH_FOUND = TRUE if tclsh has been found\nTCL_TCLSH = the path to the tclsh executable\n</pre> <p>In cygwin, look for the cygwin version first. Don’t look for it later to avoid finding the cygwin version on a Win32 build.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindTclsh.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindTclsh.html</a>\n  </p>\n</div>\n","module/findtclstub":"<h1 id=\"module:FindTclStub\">FindTclStub</h1> <p id=\"findtclstub\">TCL_STUB_LIBRARY_DEBUG and TK_STUB_LIBRARY_DEBUG were removed.</p> <p>This module finds Tcl stub libraries. It first finds Tcl include files and libraries by calling FindTCL.cmake. How to Use the Tcl Stubs Library:</p> <pre data-language=\"python\">http://tcl.activestate.com/doc/howto/stubs.html\n</pre> <p>Using Stub Libraries:</p> <pre data-language=\"python\">http://safari.oreilly.com/0130385603/ch48lev1sec3\n</pre> <p>This code sets the following variables:</p> <pre data-language=\"python\">TCL_STUB_LIBRARY       = path to Tcl stub library\nTK_STUB_LIBRARY        = path to Tk stub library\nTTK_STUB_LIBRARY       = path to ttk stub library\n</pre> <p>In an effort to remove some clutter and clear up some issues for people who are not necessarily Tcl/Tk gurus/developpers, some variables were moved or removed. Changes compared to CMake 2.4 are:</p> <pre data-language=\"python\">=&gt; these libs are not packaged by default with Tcl/Tk distributions.\n   Even when Tcl/Tk is built from source, several flavors of debug libs\n   are created and there is no real reason to pick a single one\n   specifically (say, amongst tclstub84g, tclstub84gs, or tclstub84sgx).\n   Let's leave that choice to the user by allowing him to assign\n   TCL_STUB_LIBRARY to any Tcl library, debug or not.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindTclStub.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindTclStub.html</a>\n  </p>\n</div>\n","module/findthreads":"<h1 id=\"module:FindThreads\">FindThreads</h1> <p id=\"findthreads\">This module determines the thread library of the system.</p> <p>The following variables are set</p> <pre data-language=\"python\">CMAKE_THREAD_LIBS_INIT     - the thread library\nCMAKE_USE_SPROC_INIT       - are we using sproc?\nCMAKE_USE_WIN32_THREADS_INIT - using WIN32 threads?\nCMAKE_USE_PTHREADS_INIT    - are we using pthreads\nCMAKE_HP_PTHREADS_INIT     - are we using hp pthreads\n</pre> <p>The following import target is created</p> <pre data-language=\"python\">Threads::Threads\n</pre> <p>For systems with multiple thread libraries, caller can set</p> <pre data-language=\"python\">CMAKE_THREAD_PREFER_PTHREAD\n</pre> <p>If the use of the -pthread compiler and linker flag is prefered then the caller can set</p> <pre data-language=\"python\">THREADS_PREFER_PTHREAD_FLAG\n</pre> <p>Please note that the compiler flag can only be used with the imported target. Use of both the imported target as well as this switch is highly recommended for new code.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindThreads.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindThreads.html</a>\n  </p>\n</div>\n","module/findtiff":"<h1 id=\"module:FindTIFF\">FindTIFF</h1> <p id=\"findtiff\">Find the TIFF library (libtiff).</p>  <h2 id=\"imported-targets\">Imported targets</h2> <p>This module defines the following <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets:</p> <dl class=\"docutils\"> <dt><code>TIFF::TIFF</code></dt> <dd>The TIFF library, if found.</dd> </dl>   <h2 id=\"result-variables\">Result variables</h2> <p>This module will set the following variables in your project:</p> <dl class=\"docutils\"> <dt><code>TIFF_FOUND</code></dt> <dd>true if the TIFF headers and libraries were found</dd> <dt><code>TIFF_INCLUDE_DIR</code></dt> <dd>the directory containing the TIFF headers</dd> <dt><code>TIFF_INCLUDE_DIRS</code></dt> <dd>the directory containing the TIFF headers</dd> <dt><code>TIFF_LIBRARIES</code></dt> <dd>TIFF libraries to be linked</dd> </dl>   <h2 id=\"cache-variables\">Cache variables</h2> <p>The following cache variables may also be set:</p> <dl class=\"docutils\"> <dt><code>TIFF_INCLUDE_DIR</code></dt> <dd>the directory containing the TIFF headers</dd> <dt><code>TIFF_LIBRARY</code></dt> <dd>the path to the TIFF library</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindTIFF.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindTIFF.html</a>\n  </p>\n</div>\n","module/findunixcommands":"<h1 id=\"module:FindUnixCommands\">FindUnixCommands</h1> <p id=\"findunixcommands\">Find Unix commands, including the ones from Cygwin</p> <p>This module looks for the Unix commands bash, cp, gzip, mv, rm, and tar and stores the result in the variables BASH, CP, GZIP, MV, RM, and TAR.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindUnixCommands.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindUnixCommands.html</a>\n  </p>\n</div>\n","module/findvtk":"<h1 id=\"module:FindVTK\">FindVTK</h1> <p id=\"findvtk\">This module no longer exists.</p> <p>This module existed in versions of CMake prior to 3.1, but became only a thin wrapper around <code>find_package(VTK NO_MODULE)</code> to provide compatibility for projects using long-outdated conventions. Now <code>find_package(VTK)</code> will search for <code>VTKConfig.cmake</code> directly.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindVTK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindVTK.html</a>\n  </p>\n</div>\n","module/findwget":"<h1 id=\"module:FindWget\">FindWget</h1> <p id=\"findwget\">Find wget</p> <p>This module looks for wget. This module defines the following values:</p> <pre data-language=\"python\">WGET_EXECUTABLE: the full path to the wget tool.\nWGET_FOUND: True if wget has been found.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindWget.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindWget.html</a>\n  </p>\n</div>\n","module/findwish":"<h1 id=\"module:FindWish\">FindWish</h1> <p id=\"findwish\">Find wish installation</p> <p>This module finds if TCL is installed and determines where the include files and libraries are. It also determines what the name of the library is. This code sets the following variables:</p> <pre data-language=\"python\">TK_WISH = the path to the wish executable\n</pre> <p>if UNIX is defined, then it will look for the cygwin version first</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindWish.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindWish.html</a>\n  </p>\n</div>\n","module/findwxwidgets":"<h1 id=\"module:FindwxWidgets\">FindwxWidgets</h1> <p id=\"findwxwidgets\">Find a wxWidgets (a.k.a., wxWindows) installation.</p> <p>This module finds if wxWidgets is installed and selects a default configuration to use. wxWidgets is a modular library. To specify the modules that you will use, you need to name them as components to the package:</p> <p>find_package(wxWidgets COMPONENTS core base ...)</p> <p>There are two search branches: a windows style and a unix style. For windows, the following variables are searched for and set to defaults in case of multiple choices. Change them if the defaults are not desired (i.e., these are the only variables you should change to select a configuration):</p> <pre data-language=\"python\">wxWidgets_ROOT_DIR      - Base wxWidgets directory\n                          (e.g., C:/wxWidgets-2.6.3).\nwxWidgets_LIB_DIR       - Path to wxWidgets libraries\n                          (e.g., C:/wxWidgets-2.6.3/lib/vc_lib).\nwxWidgets_CONFIGURATION - Configuration to use\n                          (e.g., msw, mswd, mswu, mswunivud, etc.)\nwxWidgets_EXCLUDE_COMMON_LIBRARIES\n                        - Set to TRUE to exclude linking of\n                          commonly required libs (e.g., png tiff\n                          jpeg zlib regex expat).\n</pre> <p>For unix style it uses the wx-config utility. You can select between debug/release, unicode/ansi, universal/non-universal, and static/shared in the QtDialog or ccmake interfaces by turning ON/OFF the following variables:</p> <pre data-language=\"python\">wxWidgets_USE_DEBUG\nwxWidgets_USE_UNICODE\nwxWidgets_USE_UNIVERSAL\nwxWidgets_USE_STATIC\n</pre> <p>There is also a wxWidgets_CONFIG_OPTIONS variable for all other options that need to be passed to the wx-config utility. For example, to use the base toolkit found in the /usr/local path, set the variable (before calling the FIND_PACKAGE command) as such:</p> <pre data-language=\"python\">set(wxWidgets_CONFIG_OPTIONS --toolkit=base --prefix=/usr)\n</pre> <p>The following are set after the configuration is done for both windows and unix style:</p> <pre data-language=\"python\">wxWidgets_FOUND            - Set to TRUE if wxWidgets was found.\nwxWidgets_INCLUDE_DIRS     - Include directories for WIN32\n                             i.e., where to find \"wx/wx.h\" and\n                             \"wx/setup.h\"; possibly empty for unices.\nwxWidgets_LIBRARIES        - Path to the wxWidgets libraries.\nwxWidgets_LIBRARY_DIRS     - compile time link dirs, useful for\n                             rpath on UNIX. Typically an empty string\n                             in WIN32 environment.\nwxWidgets_DEFINITIONS      - Contains defines required to compile/link\n                             against WX, e.g. WXUSINGDLL\nwxWidgets_DEFINITIONS_DEBUG- Contains defines required to compile/link\n                             against WX debug builds, e.g. __WXDEBUG__\nwxWidgets_CXX_FLAGS        - Include dirs and compiler flags for\n                             unices, empty on WIN32. Essentially\n                             \"`wx-config --cxxflags`\".\nwxWidgets_USE_FILE         - Convenience include file.\n</pre> <p>Sample usage:</p> <pre data-language=\"python\"># Note that for MinGW users the order of libs is important!\nfind_package(wxWidgets COMPONENTS net gl core base)\nif(wxWidgets_FOUND)\n  include(${wxWidgets_USE_FILE})\n  # and for each of your dependent executable/library targets:\n  target_link_libraries(&lt;YourTarget&gt; ${wxWidgets_LIBRARIES})\nendif()\n</pre> <p>If wxWidgets is required (i.e., not an optional part):</p> <pre data-language=\"python\">find_package(wxWidgets REQUIRED net gl core base)\ninclude(${wxWidgets_USE_FILE})\n# and for each of your dependent executable/library targets:\ntarget_link_libraries(&lt;YourTarget&gt; ${wxWidgets_LIBRARIES})\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindwxWidgets.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindwxWidgets.html</a>\n  </p>\n</div>\n","module/findwxwindows":"<h1 id=\"module:FindwxWindows\">FindwxWindows</h1> <p id=\"findwxwindows\">Find wxWindows (wxWidgets) installation</p> <p>This module finds if wxWindows/wxWidgets is installed and determines where the include files and libraries are. It also determines what the name of the library is. Please note this file is DEPRECATED and replaced by FindwxWidgets.cmake. This code sets the following variables:</p> <pre data-language=\"python\">WXWINDOWS_FOUND     = system has WxWindows\nWXWINDOWS_LIBRARIES = path to the wxWindows libraries\n                      on Unix/Linux with additional\n                      linker flags from\n                      \"wx-config --libs\"\nCMAKE_WXWINDOWS_CXX_FLAGS  = Compiler flags for wxWindows,\n                             essentially \"`wx-config --cxxflags`\"\n                             on Linux\nWXWINDOWS_INCLUDE_DIR      = where to find \"wx/wx.h\" and \"wx/setup.h\"\nWXWINDOWS_LINK_DIRECTORIES = link directories, useful for rpath on\n                              Unix\nWXWINDOWS_DEFINITIONS      = extra defines\n</pre> <p>OPTIONS If you need OpenGL support please</p> <pre data-language=\"python\">set(WXWINDOWS_USE_GL 1)\n</pre> <p>in your CMakeLists.txt <em>before</em> you include this file.</p> <pre data-language=\"python\">HAVE_ISYSTEM      - true required to replace -I by -isystem on g++\n</pre> <p>For convenience include Use_wxWindows.cmake in your project’s CMakeLists.txt using include(${CMAKE_CURRENT_LIST_DIR}/Use_wxWindows.cmake).</p> <p>USAGE</p> <pre data-language=\"python\">set(WXWINDOWS_USE_GL 1)\nfind_package(wxWindows)\n</pre> <p>NOTES wxWidgets 2.6.x is supported for monolithic builds e.g. compiled in wx/build/msw dir as:</p> <pre data-language=\"python\">nmake -f makefile.vc BUILD=debug SHARED=0 USE_OPENGL=1 MONOLITHIC=1\n</pre> <p>DEPRECATED</p> <pre data-language=\"python\">CMAKE_WX_CAN_COMPILE\nWXWINDOWS_LIBRARY\nCMAKE_WX_CXX_FLAGS\nWXWINDOWS_INCLUDE_PATH\n</pre> <p>AUTHOR Jan Woetzel &lt;<a class=\"reference external\" href=\"http://www.mip.informatik.uni-kiel.de/~jw\">http://www.mip.informatik.uni-kiel.de/~jw</a>&gt; (07/2003-01/2006)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindwxWindows.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindwxWindows.html</a>\n  </p>\n</div>\n","module/findxctest":"<h1 id=\"module:FindXCTest\">FindXCTest</h1> <p id=\"findxctest\">Functions to help creating and executing XCTest bundles.</p> <p>An XCTest bundle is a CFBundle with a special product-type and bundle extension. The Mac Developer Library provides more information in the <a class=\"reference external\" href=\"http://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/testing_with_xcode/\">Testing with Xcode</a> document.</p>  <h2 id=\"module-functions\">Module Functions</h2> <dl class=\"command\"> <dt id=\"command:xctest_add_bundle\"><code>xctest_add_bundle</code></dt> <dd>\n<p>The <code>xctest_add_bundle</code> function creates a XCTest bundle named &lt;target&gt; which will test the target &lt;testee&gt;. Supported target types for testee are Frameworks and App Bundles:</p> <pre data-language=\"python\">xctest_add_bundle(\n  &lt;target&gt;  # Name of the XCTest bundle\n  &lt;testee&gt;  # Target name of the testee\n  )\n</pre> </dd>\n</dl> <dl class=\"command\"> <dt id=\"command:xctest_add_test\"><code>xctest_add_test</code></dt> <dd>\n<p>The <code>xctest_add_test</code> function adds an XCTest bundle to the project to be run by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>. The test will be named &lt;name&gt; and tests &lt;bundle&gt;:</p> <pre data-language=\"python\">xctest_add_test(\n  &lt;name&gt;    # Test name\n  &lt;bundle&gt;  # Target name of XCTest bundle\n  )\n</pre> </dd>\n</dl>   <h2 id=\"module-variables\">Module Variables</h2> <p>The following variables are set by including this module:</p> <dl class=\"variable\"> <dt id=\"variable:XCTest_FOUND\"><code>XCTest_FOUND</code></dt> <dd>\n<p>True if the XCTest Framework and executable were found.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:XCTest_EXECUTABLE\"><code>XCTest_EXECUTABLE</code></dt> <dd>\n<p>The path to the xctest command line tool used to execute XCTest bundles.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:XCTest_INCLUDE_DIRS\"><code>XCTest_INCLUDE_DIRS</code></dt> <dd>\n<p>The directory containing the XCTest Framework headers.</p> </dd>\n</dl> <dl class=\"variable\"> <dt id=\"variable:XCTest_LIBRARIES\"><code>XCTest_LIBRARIES</code></dt> <dd>\n<p>The location of the XCTest Framework.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindXCTest.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindXCTest.html</a>\n  </p>\n</div>\n","module/findxalanc":"<h1 id=\"module:FindXalanC\">FindXalanC</h1> <p id=\"findxalanc\">Find the Apache Xalan-C++ XSL transform processor headers and libraries.</p>  <h2 id=\"imported-targets\">Imported targets</h2> <p>This module defines the following <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets:</p> <dl class=\"docutils\"> <dt><code>XalanC::XalanC</code></dt> <dd>The Xalan-C++ <code>xalan-c</code> library, if found.</dd> </dl>   <h2 id=\"result-variables\">Result variables</h2> <p>This module will set the following variables in your project:</p> <dl class=\"docutils\"> <dt><code>XalanC_FOUND</code></dt> <dd>true if the Xalan headers and libraries were found</dd> <dt><code>XalanC_VERSION</code></dt> <dd>Xalan release version</dd> <dt><code>XalanC_INCLUDE_DIRS</code></dt> <dd>the directory containing the Xalan headers; note <code>XercesC_INCLUDE_DIRS</code> is also required</dd> <dt><code>XalanC_LIBRARIES</code></dt> <dd>Xalan libraries to be linked; note <code>XercesC_LIBRARIES</code> is also required</dd> </dl>   <h2 id=\"cache-variables\">Cache variables</h2> <p>The following cache variables may also be set:</p> <dl class=\"docutils\"> <dt><code>XalanC_INCLUDE_DIR</code></dt> <dd>the directory containing the Xalan headers</dd> <dt><code>XalanC_LIBRARY</code></dt> <dd>the Xalan library</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindXalanC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindXalanC.html</a>\n  </p>\n</div>\n","module/findx11":"<h1 id=\"module:FindX11\">FindX11</h1> <p id=\"findx11\">Find X11 installation</p> <p>Try to find X11 on UNIX systems. The following values are defined</p> <pre data-language=\"python\">X11_FOUND        - True if X11 is available\nX11_INCLUDE_DIR  - include directories to use X11\nX11_LIBRARIES    - link against these to use X11\n</pre> <p>and also the following more fine grained variables:</p> <pre data-language=\"python\">X11_ICE_INCLUDE_PATH,          X11_ICE_LIB,        X11_ICE_FOUND\nX11_SM_INCLUDE_PATH,           X11_SM_LIB,         X11_SM_FOUND\nX11_X11_INCLUDE_PATH,          X11_X11_LIB\nX11_Xaccessrules_INCLUDE_PATH,                     X11_Xaccess_FOUND\nX11_Xaccessstr_INCLUDE_PATH,                       X11_Xaccess_FOUND\nX11_Xau_INCLUDE_PATH,          X11_Xau_LIB,        X11_Xau_FOUND\nX11_Xcomposite_INCLUDE_PATH,   X11_Xcomposite_LIB, X11_Xcomposite_FOUND\nX11_Xcursor_INCLUDE_PATH,      X11_Xcursor_LIB,    X11_Xcursor_FOUND\nX11_Xdamage_INCLUDE_PATH,      X11_Xdamage_LIB,    X11_Xdamage_FOUND\nX11_Xdmcp_INCLUDE_PATH,        X11_Xdmcp_LIB,      X11_Xdmcp_FOUND\nX11_Xext_LIB,       X11_Xext_FOUND\nX11_dpms_INCLUDE_PATH,         (in X11_Xext_LIB),  X11_dpms_FOUND\nX11_XShm_INCLUDE_PATH,         (in X11_Xext_LIB),  X11_XShm_FOUND\nX11_Xshape_INCLUDE_PATH,       (in X11_Xext_LIB),  X11_Xshape_FOUND\nX11_xf86misc_INCLUDE_PATH,     X11_Xxf86misc_LIB,  X11_xf86misc_FOUND\nX11_xf86vmode_INCLUDE_PATH,    X11_Xxf86vm_LIB     X11_xf86vmode_FOUND\nX11_Xfixes_INCLUDE_PATH,       X11_Xfixes_LIB,     X11_Xfixes_FOUND\nX11_Xft_INCLUDE_PATH,          X11_Xft_LIB,        X11_Xft_FOUND\nX11_Xi_INCLUDE_PATH,           X11_Xi_LIB,         X11_Xi_FOUND\nX11_Xinerama_INCLUDE_PATH,     X11_Xinerama_LIB,   X11_Xinerama_FOUND\nX11_Xinput_INCLUDE_PATH,       X11_Xinput_LIB,     X11_Xinput_FOUND\nX11_Xkb_INCLUDE_PATH,                              X11_Xkb_FOUND\nX11_Xkblib_INCLUDE_PATH,                           X11_Xkb_FOUND\nX11_Xkbfile_INCLUDE_PATH,      X11_Xkbfile_LIB,    X11_Xkbfile_FOUND\nX11_Xmu_INCLUDE_PATH,          X11_Xmu_LIB,        X11_Xmu_FOUND\nX11_Xpm_INCLUDE_PATH,          X11_Xpm_LIB,        X11_Xpm_FOUND\nX11_XTest_INCLUDE_PATH,        X11_XTest_LIB,      X11_XTest_FOUND\nX11_Xrandr_INCLUDE_PATH,       X11_Xrandr_LIB,     X11_Xrandr_FOUND\nX11_Xrender_INCLUDE_PATH,      X11_Xrender_LIB,    X11_Xrender_FOUND\nX11_Xscreensaver_INCLUDE_PATH, X11_Xscreensaver_LIB, X11_Xscreensaver_FOUND\nX11_Xt_INCLUDE_PATH,           X11_Xt_LIB,         X11_Xt_FOUND\nX11_Xutil_INCLUDE_PATH,                            X11_Xutil_FOUND\nX11_Xv_INCLUDE_PATH,           X11_Xv_LIB,         X11_Xv_FOUND\nX11_XSync_INCLUDE_PATH,        (in X11_Xext_LIB),  X11_XSync_FOUND\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindX11.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindX11.html</a>\n  </p>\n</div>\n","module/findxercesc":"<h1 id=\"module:FindXercesC\">FindXercesC</h1> <p id=\"findxercesc\">Find the Apache Xerces-C++ validating XML parser headers and libraries.</p>  <h2 id=\"imported-targets\">Imported targets</h2> <p>This module defines the following <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> targets:</p> <dl class=\"docutils\"> <dt><code>XercesC::XercesC</code></dt> <dd>The Xerces-C++ <code>xerces-c</code> library, if found.</dd> </dl>   <h2 id=\"result-variables\">Result variables</h2> <p>This module will set the following variables in your project:</p> <dl class=\"docutils\"> <dt><code>XercesC_FOUND</code></dt> <dd>true if the Xerces headers and libraries were found</dd> <dt><code>XercesC_VERSION</code></dt> <dd>Xerces release version</dd> <dt><code>XercesC_INCLUDE_DIRS</code></dt> <dd>the directory containing the Xerces headers</dd> <dt><code>XercesC_LIBRARIES</code></dt> <dd>Xerces libraries to be linked</dd> </dl>   <h2 id=\"cache-variables\">Cache variables</h2> <p>The following cache variables may also be set:</p> <dl class=\"docutils\"> <dt><code>XercesC_INCLUDE_DIR</code></dt> <dd>the directory containing the Xerces headers</dd> <dt><code>XercesC_LIBRARY</code></dt> <dd>the Xerces library</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindXercesC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindXercesC.html</a>\n  </p>\n</div>\n","module/findxmlrpc":"<h1 id=\"module:FindXMLRPC\">FindXMLRPC</h1> <p id=\"findxmlrpc\">Find xmlrpc</p> <p>Find the native XMLRPC headers and libraries.</p> <pre data-language=\"python\">XMLRPC_INCLUDE_DIRS      - where to find xmlrpc.h, etc.\nXMLRPC_LIBRARIES         - List of libraries when using xmlrpc.\nXMLRPC_FOUND             - True if xmlrpc found.\n</pre> <p>XMLRPC modules may be specified as components for this find module. Modules may be listed by running “xmlrpc-c-config”. Modules include:</p> <pre data-language=\"python\">c++            C++ wrapper code\nlibwww-client  libwww-based client\ncgi-server     CGI-based server\nabyss-server   ABYSS-based server\n</pre> <p>Typical usage:</p> <pre data-language=\"python\">find_package(XMLRPC REQUIRED libwww-client)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindXMLRPC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindXMLRPC.html</a>\n  </p>\n</div>\n","module/findzlib":"<h1 id=\"module:FindZLIB\">FindZLIB</h1> <p id=\"findzlib\">Find the native ZLIB includes and library.</p>  <h2 id=\"imported-targets\">IMPORTED Targets</h2> <p>This module defines <a class=\"reference internal\" href=\"../prop_tgt/imported#prop_tgt:IMPORTED\" title=\"IMPORTED\" id=\"index-0-prop_tgt:IMPORTED\"><code>IMPORTED</code></a> target <code>ZLIB::ZLIB</code>, if ZLIB has been found.</p>   <h2 id=\"result-variables\">Result Variables</h2> <p>This module defines the following variables:</p> <pre data-language=\"python\">ZLIB_INCLUDE_DIRS   - where to find zlib.h, etc.\nZLIB_LIBRARIES      - List of libraries when using zlib.\nZLIB_FOUND          - True if zlib found.\n</pre> <pre data-language=\"python\">ZLIB_VERSION_STRING - The version of zlib found (x.y.z)\nZLIB_VERSION_MAJOR  - The major version of zlib\nZLIB_VERSION_MINOR  - The minor version of zlib\nZLIB_VERSION_PATCH  - The patch version of zlib\nZLIB_VERSION_TWEAK  - The tweak version of zlib\n</pre>   <h2 id=\"backward-compatibility\">Backward Compatibility</h2> <p>The following variable are provided for backward compatibility</p> <pre data-language=\"python\">ZLIB_MAJOR_VERSION  - The major version of zlib\nZLIB_MINOR_VERSION  - The minor version of zlib\nZLIB_PATCH_VERSION  - The patch version of zlib\n</pre>   <h2 id=\"hints\">Hints</h2> <p>A user may set <code>ZLIB_ROOT</code> to a zlib installation root to tell this module where to look.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FindZLIB.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FindZLIB.html</a>\n  </p>\n</div>\n","module/fortrancinterface":"<h1 id=\"module:FortranCInterface\">FortranCInterface</h1> <p id=\"fortrancinterface\">Fortran/C Interface Detection</p> <p>This module automatically detects the API by which C and Fortran languages interact. Variables indicate if the mangling is found:</p> <pre data-language=\"python\">FortranCInterface_GLOBAL_FOUND = Global subroutines and functions\nFortranCInterface_MODULE_FOUND = Module subroutines and functions\n                                 (declared by \"MODULE PROCEDURE\")\n</pre> <p>A function is provided to generate a C header file containing macros to mangle symbol names:</p> <pre data-language=\"python\">FortranCInterface_HEADER(&lt;file&gt;\n                         [MACRO_NAMESPACE &lt;macro-ns&gt;]\n                         [SYMBOL_NAMESPACE &lt;ns&gt;]\n                         [SYMBOLS [&lt;module&gt;:]&lt;function&gt; ...])\n</pre> <p>It generates in &lt;file&gt; definitions of the following macros:</p> <pre data-language=\"python\">#define FortranCInterface_GLOBAL (name,NAME) ...\n#define FortranCInterface_GLOBAL_(name,NAME) ...\n#define FortranCInterface_MODULE (mod,name, MOD,NAME) ...\n#define FortranCInterface_MODULE_(mod,name, MOD,NAME) ...\n</pre> <p>These macros mangle four categories of Fortran symbols, respectively:</p> <pre data-language=\"python\">- Global symbols without '_': call mysub()\n- Global symbols with '_'   : call my_sub()\n- Module symbols without '_': use mymod; call mysub()\n- Module symbols with '_'   : use mymod; call my_sub()\n</pre> <p>If mangling for a category is not known, its macro is left undefined. All macros require raw names in both lower case and upper case. The MACRO_NAMESPACE option replaces the default “<a class=\"reference internal\" href=\"#fortrancinterface\">FortranCInterface</a>” prefix with a given namespace “&lt;macro-ns&gt;”.</p> <p>The SYMBOLS option lists symbols to mangle automatically with C preprocessor definitions:</p> <pre data-language=\"python\">&lt;function&gt;          ==&gt; #define &lt;ns&gt;&lt;function&gt; ...\n&lt;module&gt;:&lt;function&gt; ==&gt; #define &lt;ns&gt;&lt;module&gt;_&lt;function&gt; ...\n</pre> <p>If the mangling for some symbol is not known then no preprocessor definition is created, and a warning is displayed. The SYMBOL_NAMESPACE option prefixes all preprocessor definitions generated by the SYMBOLS option with a given namespace “&lt;ns&gt;”.</p> <p>Example usage:</p> <pre data-language=\"python\">include(FortranCInterface)\nFortranCInterface_HEADER(FC.h MACRO_NAMESPACE \"FC_\")\n</pre> <p>This creates a “FC.h” header that defines mangling macros FC_GLOBAL(), FC_GLOBAL_(), FC_MODULE(), and FC_MODULE_().</p> <p>Example usage:</p> <pre data-language=\"python\">include(FortranCInterface)\nFortranCInterface_HEADER(FCMangle.h\n                         MACRO_NAMESPACE \"FC_\"\n                         SYMBOL_NAMESPACE \"FC_\"\n                         SYMBOLS mysub mymod:my_sub)\n</pre> <p>This creates a “FCMangle.h” header that defines the same FC_*() mangling macros as the previous example plus preprocessor symbols FC_mysub and FC_mymod_my_sub.</p> <p>Another function is provided to verify that the Fortran and C/C++ compilers work together:</p> <pre data-language=\"python\">FortranCInterface_VERIFY([CXX] [QUIET])\n</pre> <p>It tests whether a simple test executable using Fortran and C (and C++ when the CXX option is given) compiles and links successfully. The result is stored in the cache entry FortranCInterface_VERIFIED_C (or FortranCInterface_VERIFIED_CXX if CXX is given) as a boolean. If the check fails and QUIET is not given the function terminates with a FATAL_ERROR message describing the problem. The purpose of this check is to stop a build early for incompatible compiler combinations. The test is built in the Release configuration.</p> <p>FortranCInterface is aware of possible GLOBAL and MODULE manglings for many Fortran compilers, but it also provides an interface to specify new possible manglings. Set the variables</p> <pre data-language=\"python\">FortranCInterface_GLOBAL_SYMBOLS\nFortranCInterface_MODULE_SYMBOLS\n</pre> <p>before including FortranCInterface to specify manglings of the symbols “MySub”, “My_Sub”, “MyModule:MySub”, and “My_Module:My_Sub”. For example, the code:</p> <pre data-language=\"python\">set(FortranCInterface_GLOBAL_SYMBOLS mysub_ my_sub__ MYSUB_)\n  #                                  ^^^^^  ^^^^^^   ^^^^^\nset(FortranCInterface_MODULE_SYMBOLS\n    __mymodule_MOD_mysub __my_module_MOD_my_sub)\n  #   ^^^^^^^^     ^^^^^   ^^^^^^^^^     ^^^^^^\ninclude(FortranCInterface)\n</pre> <p>tells FortranCInterface to try given GLOBAL and MODULE manglings. (The carets point at raw symbol names for clarity in this example but are not needed.)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/FortranCInterface.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/FortranCInterface.html</a>\n  </p>\n</div>\n","module/generateexportheader":"<h1 id=\"module:GenerateExportHeader\">GenerateExportHeader</h1> <p id=\"generateexportheader\">Function for generation of export macros for libraries</p> <p>This module provides the function GENERATE_EXPORT_HEADER().</p> <p>The <code>GENERATE_EXPORT_HEADER</code> function can be used to generate a file suitable for preprocessor inclusion which contains EXPORT macros to be used in library classes:</p> <pre data-language=\"python\">GENERATE_EXPORT_HEADER( LIBRARY_TARGET\n          [BASE_NAME &lt;base_name&gt;]\n          [EXPORT_MACRO_NAME &lt;export_macro_name&gt;]\n          [EXPORT_FILE_NAME &lt;export_file_name&gt;]\n          [DEPRECATED_MACRO_NAME &lt;deprecated_macro_name&gt;]\n          [NO_EXPORT_MACRO_NAME &lt;no_export_macro_name&gt;]\n          [STATIC_DEFINE &lt;static_define&gt;]\n          [NO_DEPRECATED_MACRO_NAME &lt;no_deprecated_macro_name&gt;]\n          [DEFINE_NO_DEPRECATED]\n          [PREFIX_NAME &lt;prefix_name&gt;]\n)\n</pre> <p>The target properties <a class=\"reference internal\" href=\"#\" title=\"&lt;LANG&gt;_VISIBILITY_PRESET\" id=\"index-0-prop_tgt:&lt;LANG&gt;_VISIBILITY_PRESET\"><code>CXX_VISIBILITY_PRESET</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/visibility_inlines_hidden#prop_tgt:VISIBILITY_INLINES_HIDDEN\" title=\"VISIBILITY_INLINES_HIDDEN\" id=\"index-0-prop_tgt:VISIBILITY_INLINES_HIDDEN\"><code>VISIBILITY_INLINES_HIDDEN</code></a> can be used to add the appropriate compile flags for targets. See the documentation of those target properties, and the convenience variables <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_VISIBILITY_PRESET\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_VISIBILITY_PRESET\"><code>CMAKE_CXX_VISIBILITY_PRESET</code></a> and <a class=\"reference internal\" href=\"../variable/cmake_visibility_inlines_hidden#variable:CMAKE_VISIBILITY_INLINES_HIDDEN\" title=\"CMAKE_VISIBILITY_INLINES_HIDDEN\" id=\"index-0-variable:CMAKE_VISIBILITY_INLINES_HIDDEN\"><code>CMAKE_VISIBILITY_INLINES_HIDDEN</code></a>.</p> <p>By default <code>GENERATE_EXPORT_HEADER()</code> generates macro names in a file name determined by the name of the library. This means that in the simplest case, users of <code>GenerateExportHeader</code> will be equivalent to:</p> <pre data-language=\"cmake\">set(CMAKE_CXX_VISIBILITY_PRESET hidden)\nset(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\nadd_library(somelib someclass.cpp)\ngenerate_export_header(somelib)\ninstall(TARGETS somelib DESTINATION ${LIBRARY_INSTALL_DIR})\ninstall(FILES\n someclass.h\n ${PROJECT_BINARY_DIR}/somelib_export.h DESTINATION ${INCLUDE_INSTALL_DIR}\n)\n</pre> <p>And in the ABI header files:</p> <pre data-language=\"c\">#include \"somelib_export.h\"\nclass SOMELIB_EXPORT SomeClass {\n  ...\n};\n</pre> <p>The CMake fragment will generate a file in the <code>${CMAKE_CURRENT_BINARY_DIR}</code> called <code>somelib_export.h</code> containing the macros <code>SOMELIB_EXPORT</code>, <code>SOMELIB_NO_EXPORT</code>, <code>SOMELIB_DEPRECATED</code>, <code>SOMELIB_DEPRECATED_EXPORT</code> and <code>SOMELIB_DEPRECATED_NO_EXPORT</code>. The resulting file should be installed with other headers in the library.</p> <p>The <code>BASE_NAME</code> argument can be used to override the file name and the names used for the macros:</p> <pre data-language=\"cmake\">add_library(somelib someclass.cpp)\ngenerate_export_header(somelib\n  BASE_NAME other_name\n)\n</pre> <p>Generates a file called <code>other_name_export.h</code> containing the macros <code>OTHER_NAME_EXPORT</code>, <code>OTHER_NAME_NO_EXPORT</code> and <code>OTHER_NAME_DEPRECATED</code> etc.</p> <p>The <code>BASE_NAME</code> may be overridden by specifiying other options in the function. For example:</p> <pre data-language=\"cmake\">add_library(somelib someclass.cpp)\ngenerate_export_header(somelib\n  EXPORT_MACRO_NAME OTHER_NAME_EXPORT\n)\n</pre> <p>creates the macro <code>OTHER_NAME_EXPORT</code> instead of <code>SOMELIB_EXPORT</code>, but other macros and the generated file name is as default:</p> <pre data-language=\"cmake\">add_library(somelib someclass.cpp)\ngenerate_export_header(somelib\n  DEPRECATED_MACRO_NAME KDE_DEPRECATED\n)\n</pre> <p>creates the macro <code>KDE_DEPRECATED</code> instead of <code>SOMELIB_DEPRECATED</code>.</p> <p>If <code>LIBRARY_TARGET</code> is a static library, macros are defined without values.</p> <p>If the same sources are used to create both a shared and a static library, the uppercased symbol <code>${BASE_NAME}_STATIC_DEFINE</code> should be used when building the static library:</p> <pre data-language=\"cmake\">add_library(shared_variant SHARED ${lib_SRCS})\nadd_library(static_variant ${lib_SRCS})\ngenerate_export_header(shared_variant BASE_NAME libshared_and_static)\nset_target_properties(static_variant PROPERTIES\n  COMPILE_FLAGS -DLIBSHARED_AND_STATIC_STATIC_DEFINE)\n</pre> <p>This will cause the export macros to expand to nothing when building the static library.</p> <p>If <code>DEFINE_NO_DEPRECATED</code> is specified, then a macro <code>${BASE_NAME}_NO_DEPRECATED</code> will be defined This macro can be used to remove deprecated code from preprocessor output:</p> <pre data-language=\"cmake\">option(EXCLUDE_DEPRECATED \"Exclude deprecated parts of the library\" FALSE)\nif (EXCLUDE_DEPRECATED)\n  set(NO_BUILD_DEPRECATED DEFINE_NO_DEPRECATED)\nendif()\ngenerate_export_header(somelib ${NO_BUILD_DEPRECATED})\n</pre> <p>And then in somelib:</p> <pre data-language=\"c\">class SOMELIB_EXPORT SomeClass\n{\npublic:\n#ifndef SOMELIB_NO_DEPRECATED\n  SOMELIB_DEPRECATED void oldMethod();\n#endif\n};\n</pre> <pre data-language=\"c\">#ifndef SOMELIB_NO_DEPRECATED\nvoid SomeClass::oldMethod() {  }\n#endif\n</pre> <p>If <code>PREFIX_NAME</code> is specified, the argument will be used as a prefix to all generated macros.</p> <p>For example:</p> <pre data-language=\"cmake\">generate_export_header(somelib PREFIX_NAME VTK_)\n</pre> <p>Generates the macros <code>VTK_SOMELIB_EXPORT</code> etc.</p> <pre data-language=\"python\">ADD_COMPILER_EXPORT_FLAGS( [&lt;output_variable&gt;] )\n</pre> <p>The <code>ADD_COMPILER_EXPORT_FLAGS</code> function adds <code>-fvisibility=hidden</code> to <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_FLAGS\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_FLAGS\"><code>CMAKE_CXX_FLAGS</code></a> if supported, and is a no-op on Windows which does not need extra compiler flags for exporting support. You may optionally pass a single argument to <code>ADD_COMPILER_EXPORT_FLAGS</code> that will be populated with the <code>CXX_FLAGS</code> required to enable visibility support for the compiler/architecture in use.</p> <p>This function is deprecated. Set the target properties <a class=\"reference internal\" href=\"#\" title=\"&lt;LANG&gt;_VISIBILITY_PRESET\" id=\"index-1-prop_tgt:&lt;LANG&gt;_VISIBILITY_PRESET\"><code>CXX_VISIBILITY_PRESET</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/visibility_inlines_hidden#prop_tgt:VISIBILITY_INLINES_HIDDEN\" title=\"VISIBILITY_INLINES_HIDDEN\" id=\"index-1-prop_tgt:VISIBILITY_INLINES_HIDDEN\"><code>VISIBILITY_INLINES_HIDDEN</code></a> instead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/GenerateExportHeader.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/GenerateExportHeader.html</a>\n  </p>\n</div>\n","module/getprerequisites":"<h1 id=\"module:GetPrerequisites\">GetPrerequisites</h1> <p id=\"getprerequisites\">Functions to analyze and list executable file prerequisites.</p> <p>This module provides functions to list the .dll, .dylib or .so files that an executable or shared library file depends on. (Its prerequisites.)</p> <p>It uses various tools to obtain the list of required shared library files:</p> <pre data-language=\"python\">dumpbin (Windows)\nobjdump (MinGW on Windows)\nldd (Linux/Unix)\notool (Mac OSX)\n</pre> <p>The following functions are provided by this module:</p> <pre data-language=\"python\">get_prerequisites\nlist_prerequisites\nlist_prerequisites_by_glob\ngp_append_unique\nis_file_executable\ngp_item_default_embedded_path\n  (projects can override with gp_item_default_embedded_path_override)\ngp_resolve_item\n  (projects can override with gp_resolve_item_override)\ngp_resolved_file_type\n  (projects can override with gp_resolved_file_type_override)\ngp_file_type\n</pre> <p>Requires CMake 2.6 or greater because it uses function, break, return and PARENT_SCOPE.</p> <pre data-language=\"python\">GET_PREREQUISITES(&lt;target&gt; &lt;prerequisites_var&gt; &lt;exclude_system&gt; &lt;recurse&gt;\n                  &lt;exepath&gt; &lt;dirs&gt; [&lt;rpaths&gt;])\n</pre> <p>Get the list of shared library files required by &lt;target&gt;. The list in the variable named &lt;prerequisites_var&gt; should be empty on first entry to this function. On exit, &lt;prerequisites_var&gt; will contain the list of required shared library files.</p> <p>&lt;target&gt; is the full path to an executable file. &lt;prerequisites_var&gt; is the name of a CMake variable to contain the results. &lt;exclude_system&gt; must be 0 or 1 indicating whether to include or exclude “system” prerequisites. If &lt;recurse&gt; is set to 1 all prerequisites will be found recursively, if set to 0 only direct prerequisites are listed. &lt;exepath&gt; is the path to the top level executable used for @executable_path replacment on the Mac. &lt;dirs&gt; is a list of paths where libraries might be found: these paths are searched first when a target without any path info is given. Then standard system locations are also searched: PATH, Framework locations, /usr/lib...</p> <pre data-language=\"python\">LIST_PREREQUISITES(&lt;target&gt; [&lt;recurse&gt; [&lt;exclude_system&gt; [&lt;verbose&gt;]]])\n</pre> <p>Print a message listing the prerequisites of &lt;target&gt;.</p> <p>&lt;target&gt; is the name of a shared library or executable target or the full path to a shared library or executable file. If &lt;recurse&gt; is set to 1 all prerequisites will be found recursively, if set to 0 only direct prerequisites are listed. &lt;exclude_system&gt; must be 0 or 1 indicating whether to include or exclude “system” prerequisites. With &lt;verbose&gt; set to 0 only the full path names of the prerequisites are printed, set to 1 extra informatin will be displayed.</p> <pre data-language=\"python\">LIST_PREREQUISITES_BY_GLOB(&lt;glob_arg&gt; &lt;glob_exp&gt;)\n</pre> <p>Print the prerequisites of shared library and executable files matching a globbing pattern. &lt;glob_arg&gt; is GLOB or GLOB_RECURSE and &lt;glob_exp&gt; is a globbing expression used with “file(GLOB” or “file(GLOB_RECURSE” to retrieve a list of matching files. If a matching file is executable, its prerequisites are listed.</p> <p>Any additional (optional) arguments provided are passed along as the optional arguments to the list_prerequisites calls.</p> <pre data-language=\"python\">GP_APPEND_UNIQUE(&lt;list_var&gt; &lt;value&gt;)\n</pre> <p>Append &lt;value&gt; to the list variable &lt;list_var&gt; only if the value is not already in the list.</p> <pre data-language=\"python\">IS_FILE_EXECUTABLE(&lt;file&gt; &lt;result_var&gt;)\n</pre> <p>Return 1 in &lt;result_var&gt; if &lt;file&gt; is a binary executable, 0 otherwise.</p> <pre data-language=\"python\">GP_ITEM_DEFAULT_EMBEDDED_PATH(&lt;item&gt; &lt;default_embedded_path_var&gt;)\n</pre> <p>Return the path that others should refer to the item by when the item is embedded inside a bundle.</p> <p>Override on a per-project basis by providing a project-specific gp_item_default_embedded_path_override function.</p> <pre data-language=\"python\">GP_RESOLVE_ITEM(&lt;context&gt; &lt;item&gt; &lt;exepath&gt; &lt;dirs&gt; &lt;resolved_item_var&gt;\n                [&lt;rpaths&gt;])\n</pre> <p>Resolve an item into an existing full path file.</p> <p>Override on a per-project basis by providing a project-specific gp_resolve_item_override function.</p> <pre data-language=\"python\">GP_RESOLVED_FILE_TYPE(&lt;original_file&gt; &lt;file&gt; &lt;exepath&gt; &lt;dirs&gt; &lt;type_var&gt;\n                      [&lt;rpaths&gt;])\n</pre> <p>Return the type of &lt;file&gt; with respect to &lt;original_file&gt;. String describing type of prerequisite is returned in variable named &lt;type_var&gt;.</p> <p>Use &lt;exepath&gt; and &lt;dirs&gt; if necessary to resolve non-absolute &lt;file&gt; values – but only for non-embedded items.</p> <p>Possible types are:</p> <pre data-language=\"python\">system\nlocal\nembedded\nother\n</pre> <p>Override on a per-project basis by providing a project-specific gp_resolved_file_type_override function.</p> <pre data-language=\"python\">GP_FILE_TYPE(&lt;original_file&gt; &lt;file&gt; &lt;type_var&gt;)\n</pre> <p>Return the type of &lt;file&gt; with respect to &lt;original_file&gt;. String describing type of prerequisite is returned in variable named &lt;type_var&gt;.</p> <p>Possible types are:</p> <pre data-language=\"python\">system\nlocal\nembedded\nother\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/GetPrerequisites.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/GetPrerequisites.html</a>\n  </p>\n</div>\n","module/gnuinstalldirs":"<h1 id=\"module:GNUInstallDirs\">GNUInstallDirs</h1> <p id=\"gnuinstalldirs\">Define GNU standard installation directories</p> <p>Provides install directory variables as defined by the <a class=\"reference external\" href=\"https://www.gnu.org/prep/standards/html_node/Directory-Variables.html\">GNU Coding Standards</a>.</p>  <h2 id=\"result-variables\">Result Variables</h2> <p>Inclusion of this module defines the following variables:</p> <p><code>CMAKE_INSTALL_&lt;dir&gt;</code></p> <blockquote> <div>Destination for files of a given type. This value may be passed to the <code>DESTINATION</code> options of <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install()</code></a> commands for the corresponding file type.</div>\n</blockquote> <p><code>CMAKE_INSTALL_FULL_&lt;dir&gt;</code></p> <blockquote> <div>The absolute path generated from the corresponding <code>CMAKE_INSTALL_&lt;dir&gt;</code> value. If the value is not already an absolute path, an absolute path is constructed typically by prepending the value of the <a class=\"reference internal\" href=\"../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> variable. However, there are some <a class=\"reference internal\" href=\"#special-cases\">special cases</a> as documented below.</div>\n</blockquote> <p>where <code>&lt;dir&gt;</code> is one of:</p> <dl class=\"docutils\"> <dt><code>BINDIR</code></dt> <dd>user executables (<code>bin</code>)</dd> <dt><code>SBINDIR</code></dt> <dd>system admin executables (<code>sbin</code>)</dd> <dt><code>LIBEXECDIR</code></dt> <dd>program executables (<code>libexec</code>)</dd> <dt><code>SYSCONFDIR</code></dt> <dd>read-only single-machine data (<code>etc</code>)</dd> <dt><code>SHAREDSTATEDIR</code></dt> <dd>modifiable architecture-independent data (<code>com</code>)</dd> <dt><code>LOCALSTATEDIR</code></dt> <dd>modifiable single-machine data (<code>var</code>)</dd> <dt><code>LIBDIR</code></dt> <dd>object code libraries (<code>lib</code> or <code>lib64</code> or <code>lib/&lt;multiarch-tuple&gt;</code> on Debian)</dd> <dt><code>INCLUDEDIR</code></dt> <dd>C header files (<code>include</code>)</dd> <dt><code>OLDINCLUDEDIR</code></dt> <dd>C header files for non-gcc (<code>/usr/include</code>)</dd> <dt><code>DATAROOTDIR</code></dt> <dd>read-only architecture-independent data root (<code>share</code>)</dd> <dt><code>DATADIR</code></dt> <dd>read-only architecture-independent data (<code>DATAROOTDIR</code>)</dd> <dt><code>INFODIR</code></dt> <dd>info documentation (<code>DATAROOTDIR/info</code>)</dd> <dt><code>LOCALEDIR</code></dt> <dd>locale-dependent data (<code>DATAROOTDIR/locale</code>)</dd> <dt><code>MANDIR</code></dt> <dd>man documentation (<code>DATAROOTDIR/man</code>)</dd> <dt><code>DOCDIR</code></dt> <dd>documentation root (<code>DATAROOTDIR/doc/PROJECT_NAME</code>)</dd> </dl> <p>If the includer does not define a value the above-shown default will be used and the value will appear in the cache for editing by the user.</p>   <h2 id=\"special-cases\">Special Cases</h2> <p>The following values of <a class=\"reference internal\" href=\"../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-1-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> are special:</p> <p><code>/</code></p> <blockquote> <div>\n<p>For <code>&lt;dir&gt;</code> other than the <code>SYSCONFDIR</code> and <code>LOCALSTATEDIR</code>, the value of <code>CMAKE_INSTALL_&lt;dir&gt;</code> is prefixed with <code>usr/</code> if it is not user-specified as an absolute path. For example, the <code>INCLUDEDIR</code> value <code>include</code> becomes <code>usr/include</code>. This is required by the <a class=\"reference external\" href=\"https://www.gnu.org/prep/standards/html_node/Directory-Variables.html\">GNU Coding Standards</a>, which state:</p> <blockquote> <div>When building the complete GNU system, the prefix will be empty and <code>/usr</code> will be a symbolic link to <code>/</code>.</div>\n</blockquote> </div>\n</blockquote> <p><code>/usr</code></p> <blockquote> <div>For <code>&lt;dir&gt;</code> equal to <code>SYSCONFDIR</code> or <code>LOCALSTATEDIR</code>, the <code>CMAKE_INSTALL_FULL_&lt;dir&gt;</code> is computed by prepending just <code>/</code> to the value of <code>CMAKE_INSTALL_&lt;dir&gt;</code> if it is not user-specified as an absolute path. For example, the <code>SYSCONFDIR</code> value <code>etc</code> becomes <code>/etc</code>. This is required by the <a class=\"reference external\" href=\"https://www.gnu.org/prep/standards/html_node/Directory-Variables.html\">GNU Coding Standards</a>.</div>\n</blockquote> <p><code>/opt/...</code></p> <blockquote> <div>For <code>&lt;dir&gt;</code> equal to <code>SYSCONFDIR</code> or <code>LOCALSTATEDIR</code>, the <code>CMAKE_INSTALL_FULL_&lt;dir&gt;</code> is computed by <em>appending</em> the prefix to the value of <code>CMAKE_INSTALL_&lt;dir&gt;</code> if it is not user-specified as an absolute path. For example, the <code>SYSCONFDIR</code> value <code>etc</code> becomes <code>/etc/opt/...</code>. This is defined by the <a class=\"reference external\" href=\"https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html\">Filesystem Hierarchy Standard</a>.</div>\n</blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/GNUInstallDirs.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/GNUInstallDirs.html</a>\n  </p>\n</div>\n","module/macroaddfiledependencies":"<h1 id=\"module:MacroAddFileDependencies\">MacroAddFileDependencies</h1> <p id=\"macroaddfiledependencies\">MACRO_ADD_FILE_DEPENDENCIES(&lt;_file&gt; depend_files...)</p> <p>Using the macro MACRO_ADD_FILE_DEPENDENCIES() is discouraged. There are usually better ways to specify the correct dependencies.</p> <p>MACRO_ADD_FILE_DEPENDENCIES(&lt;_file&gt; depend_files...) is just a convenience wrapper around the OBJECT_DEPENDS source file property. You can just use set_property(SOURCE &lt;file&gt; APPEND PROPERTY OBJECT_DEPENDS depend_files) instead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/MacroAddFileDependencies.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/MacroAddFileDependencies.html</a>\n  </p>\n</div>\n","module/processorcount":"<h1 id=\"module:ProcessorCount\">ProcessorCount</h1> <p id=\"processorcount\">ProcessorCount(var)</p> <p>Determine the number of processors/cores and save value in ${var}</p> <p>Sets the variable named ${var} to the number of physical cores available on the machine if the information can be determined. Otherwise it is set to 0. Currently this functionality is implemented for AIX, cygwin, FreeBSD, HPUX, IRIX, Linux, Mac OS X, QNX, Sun and Windows.</p> <p>This function is guaranteed to return a positive integer (&gt;=1) if it succeeds. It returns 0 if there’s a problem determining the processor count.</p> <p>Example use, in a ctest -S dashboard script:</p> <pre data-language=\"python\">include(ProcessorCount)\nProcessorCount(N)\nif(NOT N EQUAL 0)\n  set(CTEST_BUILD_FLAGS -j${N})\n  set(ctest_test_args ${ctest_test_args} PARALLEL_LEVEL ${N})\nendif()\n</pre> <p>This function is intended to offer an approximation of the value of the number of compute cores available on the current machine, such that you may use that value for parallel building and parallel testing. It is meant to help utilize as much of the machine as seems reasonable. Of course, knowledge of what else might be running on the machine simultaneously should be used when deciding whether to request a machine’s full capacity all for yourself.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/ProcessorCount.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/ProcessorCount.html</a>\n  </p>\n</div>\n","module/testforansiforscope":"<h1 id=\"module:TestForANSIForScope\">TestForANSIForScope</h1> <p id=\"testforansiforscope\">Check for ANSI for scope support</p> <p>Check if the compiler restricts the scope of variables declared in a for-init-statement to the loop body.</p> <pre data-language=\"python\">CMAKE_NO_ANSI_FOR_SCOPE - holds result\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/TestForANSIForScope.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/TestForANSIForScope.html</a>\n  </p>\n</div>\n","module/squishtestscript":"<h1 id=\"module:SquishTestScript\">SquishTestScript</h1> <p id=\"squishtestscript\">This script launches a GUI test using Squish. You should not call the script directly; instead, you should access it via the SQUISH_ADD_TEST macro that is defined in FindSquish.cmake.</p> <p>This script starts the Squish server, launches the test on the client, and finally stops the squish server. If any of these steps fail (including if the tests do not pass) then a fatal error is raised.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/SquishTestScript.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/SquishTestScript.html</a>\n  </p>\n</div>\n","module/selectlibraryconfigurations":"<h1 id=\"module:SelectLibraryConfigurations\">SelectLibraryConfigurations</h1> <p id=\"selectlibraryconfigurations\">select_library_configurations( basename )</p> <p>This macro takes a library base name as an argument, and will choose good values for basename_LIBRARY, basename_LIBRARIES, basename_LIBRARY_DEBUG, and basename_LIBRARY_RELEASE depending on what has been found and set. If only basename_LIBRARY_RELEASE is defined, basename_LIBRARY will be set to the release value, and basename_LIBRARY_DEBUG will be set to basename_LIBRARY_DEBUG-NOTFOUND. If only basename_LIBRARY_DEBUG is defined, then basename_LIBRARY will take the debug value, and basename_LIBRARY_RELEASE will be set to basename_LIBRARY_RELEASE-NOTFOUND.</p> <p>If the generator supports configuration types, then basename_LIBRARY and basename_LIBRARIES will be set with debug and optimized flags specifying the library to be used for the given configuration. If no build type has been set or the generator in use does not support configuration types, then basename_LIBRARY and basename_LIBRARIES will take only the release value, or the debug value if the release one is not set.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/SelectLibraryConfigurations.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/SelectLibraryConfigurations.html</a>\n  </p>\n</div>\n","module/installrequiredsystemlibraries":"<h1 id=\"module:InstallRequiredSystemLibraries\">InstallRequiredSystemLibraries</h1> <p id=\"installrequiredsystemlibraries\">Include this module to search for compiler-provided system runtime libraries and add install rules for them. Some optional variables may be set prior to including the module to adjust behavior:</p> <dl class=\"docutils\"> <dt><code>CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS</code></dt> <dd>Specify additional runtime libraries that may not be detected. After inclusion any detected libraries will be appended to this.</dd> <dt><code>CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP</code></dt> <dd>Set to TRUE to skip calling the <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(PROGRAMS)</code></a> command to allow the includer to specify its own install rule, using the value of <code>CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS</code> to get the list of libraries.</dd> <dt><code>CMAKE_INSTALL_DEBUG_LIBRARIES</code></dt> <dd>Set to TRUE to install the debug runtime libraries when available with MSVC tools.</dd> <dt><code>CMAKE_INSTALL_DEBUG_LIBRARIES_ONLY</code></dt> <dd>Set to TRUE to install only the debug runtime libraries with MSVC tools even if the release runtime libraries are also available.</dd> <dt><code>CMAKE_INSTALL_MFC_LIBRARIES</code></dt> <dd>Set to TRUE to install the MSVC MFC runtime libraries.</dd> <dt><code>CMAKE_INSTALL_OPENMP_LIBRARIES</code></dt> <dd>Set to TRUE to install the MSVC OpenMP runtime libraries</dd> <dt><code>CMAKE_INSTALL_SYSTEM_RUNTIME_DESTINATION</code></dt> <dd>Specify the <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install(PROGRAMS)</code></a> command <code>DESTINATION</code> option. If not specified, the default is <code>bin</code> on Windows and <code>lib</code> elsewhere.</dd> <dt><code>CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS</code></dt> <dd>Set to TRUE to disable warnings about required library files that do not exist. (For example, Visual Studio Express editions may not provide the redistributable files.)</dd> <dt><code>CMAKE_INSTALL_SYSTEM_RUNTIME_COMPONENT</code></dt> <dd>Specify the <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-2-command:install\"><code>install(PROGRAMS)</code></a> command <code>COMPONENT</code> option. If not specified, no such option will be used.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/InstallRequiredSystemLibraries.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/InstallRequiredSystemLibraries.html</a>\n  </p>\n</div>\n","module/testbigendian":"<h1 id=\"module:TestBigEndian\">TestBigEndian</h1> <p id=\"testbigendian\">Define macro to determine endian type</p> <p>Check if the system is big endian or little endian</p> <pre data-language=\"python\">TEST_BIG_ENDIAN(VARIABLE)\nVARIABLE - variable to store the result to\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/TestBigEndian.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/TestBigEndian.html</a>\n  </p>\n</div>\n","module/testcxxacceptsflag":"<h1 id=\"module:TestCXXAcceptsFlag\">TestCXXAcceptsFlag</h1> <p id=\"testcxxacceptsflag\">Deprecated. See <a class=\"reference internal\" href=\"checkcxxcompilerflag#module:CheckCXXCompilerFlag\" title=\"CheckCXXCompilerFlag\" id=\"index-0-module:CheckCXXCompilerFlag\"><code>CheckCXXCompilerFlag</code></a>.</p> <p>Check if the CXX compiler accepts a flag.</p> <pre data-language=\"cmake\">CHECK_CXX_ACCEPTS_FLAG(&lt;flags&gt; &lt;variable&gt;)\n</pre> <dl class=\"docutils\"> <dt><code>&lt;flags&gt;</code></dt> <dd>the flags to try</dd> <dt><code>&lt;variable&gt;</code></dt> <dd>variable to store the result</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/TestCXXAcceptsFlag.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/TestCXXAcceptsFlag.html</a>\n  </p>\n</div>\n","module/testforansistreamheaders":"<h1 id=\"module:TestForANSIStreamHeaders\">TestForANSIStreamHeaders</h1> <p id=\"testforansistreamheaders\">Test for compiler support of ANSI stream headers iostream, etc.</p> <p>check if the compiler supports the standard ANSI iostream header (without the .h)</p> <pre data-language=\"python\">CMAKE_NO_ANSI_STREAM_HEADERS - defined by the results\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/TestForANSIStreamHeaders.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/TestForANSIStreamHeaders.html</a>\n  </p>\n</div>\n","module/testforsstream":"<h1 id=\"module:TestForSSTREAM\">TestForSSTREAM</h1> <p id=\"testforsstream\">Test for compiler support of ANSI sstream header</p> <p>check if the compiler supports the standard ANSI sstream header</p> <pre data-language=\"python\">CMAKE_NO_ANSI_STRING_STREAM - defined by the results\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/TestForSSTREAM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/TestForSSTREAM.html</a>\n  </p>\n</div>\n","module/testforstdnamespace":"<h1 id=\"module:TestForSTDNamespace\">TestForSTDNamespace</h1> <p id=\"testforstdnamespace\">Test for std:: namespace support</p> <p>check if the compiler supports std:: on stl classes</p> <pre data-language=\"python\">CMAKE_NO_STD_NAMESPACE - defined by the results\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/TestForSTDNamespace.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/TestForSTDNamespace.html</a>\n  </p>\n</div>\n","module/useecos":"<h1 id=\"module:UseEcos\">UseEcos</h1> <p id=\"useecos\">This module defines variables and macros required to build eCos application.</p> <p>This file contains the following macros: ECOS_ADD_INCLUDE_DIRECTORIES() - add the eCos include dirs ECOS_ADD_EXECUTABLE(name source1 ... sourceN ) - create an eCos executable ECOS_ADJUST_DIRECTORY(VAR source1 ... sourceN ) - adjusts the path of the source files and puts the result into VAR</p> <p>Macros for selecting the toolchain: ECOS_USE_ARM_ELF_TOOLS() - enable the ARM ELF toolchain for the directory where it is called ECOS_USE_I386_ELF_TOOLS() - enable the i386 ELF toolchain for the directory where it is called ECOS_USE_PPC_EABI_TOOLS() - enable the PowerPC toolchain for the directory where it is called</p> <p>It contains the following variables: ECOS_DEFINITIONS ECOSCONFIG_EXECUTABLE ECOS_CONFIG_FILE - defaults to ecos.ecc, if your eCos configuration file has a different name, adjust this variable for internal use only:</p> <pre data-language=\"python\">ECOS_ADD_TARGET_LIB\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/UseEcos.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/UseEcos.html</a>\n  </p>\n</div>\n","module/usejavaclassfilelist":"<h1 id=\"module:UseJavaClassFilelist\">UseJavaClassFilelist</h1> <p id=\"usejavaclassfilelist\">This script create a list of compiled Java class files to be added to a jar file. This avoids including cmake files which get created in the binary directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/UseJavaClassFilelist.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/UseJavaClassFilelist.html</a>\n  </p>\n</div>\n","module/usejava":"<h1 id=\"module:UseJava\">UseJava</h1> <p id=\"usejava\">Use Module for Java</p> <p>This file provides functions for Java. It is assumed that FindJava.cmake has already been loaded. See FindJava.cmake for information on how to load Java into your CMake project.</p> <pre data-language=\"python\">add_jar(target_name\n        [SOURCES] source1 [source2 ...] [resource1 ...]\n        [INCLUDE_JARS jar1 [jar2 ...]]\n        [ENTRY_POINT entry]\n        [VERSION version]\n        [OUTPUT_NAME name]\n        [OUTPUT_DIR dir]\n        )\n</pre> <p>This command creates a &lt;target_name&gt;.jar. It compiles the given source files (source) and adds the given resource files (resource) to the jar file. Source files can be java files or listing files (prefixed by ‘@’). If only resource files are given then just a jar file is created. The list of include jars are added to the classpath when compiling the java sources and also to the dependencies of the target. INCLUDE_JARS also accepts other target names created by add_jar. For backwards compatibility, jar files listed as sources are ignored (as they have been since the first version of this module).</p> <p>The default OUTPUT_DIR can also be changed by setting the variable CMAKE_JAVA_TARGET_OUTPUT_DIR.</p> <p>Additional instructions:</p> <pre data-language=\"python\">To add compile flags to the target you can set these flags with\nthe following variable:\n</pre> <pre data-language=\"python\">set(CMAKE_JAVA_COMPILE_FLAGS -nowarn)\n</pre> <pre data-language=\"python\">To add a path or a jar file to the class path you can do this\nwith the CMAKE_JAVA_INCLUDE_PATH variable.\n</pre> <pre data-language=\"python\">set(CMAKE_JAVA_INCLUDE_PATH /usr/share/java/shibboleet.jar)\n</pre> <pre data-language=\"python\">To use a different output name for the target you can set it with:\n</pre> <pre data-language=\"python\">add_jar(foobar foobar.java OUTPUT_NAME shibboleet.jar)\n</pre> <pre data-language=\"python\">To use a different output directory than CMAKE_CURRENT_BINARY_DIR\nyou can set it with:\n</pre> <pre data-language=\"python\">add_jar(foobar foobar.java OUTPUT_DIR ${PROJECT_BINARY_DIR}/bin)\n</pre> <pre data-language=\"python\">To define an entry point in your jar you can set it with the ENTRY_POINT\nnamed argument:\n</pre> <pre data-language=\"python\">add_jar(example ENTRY_POINT com/examples/MyProject/Main)\n</pre> <pre data-language=\"python\">To define a custom manifest for the jar, you can set it with the manifest\nnamed argument:\n</pre> <pre data-language=\"python\">add_jar(example MANIFEST /path/to/manifest)\n</pre> <pre data-language=\"python\">To add a VERSION to the target output name you can set it using\nthe VERSION named argument to add_jar. This will create a jar file with the\nname shibboleet-1.0.0.jar and will create a symlink shibboleet.jar\npointing to the jar with the version information.\n</pre> <pre data-language=\"python\">add_jar(shibboleet shibbotleet.java VERSION 1.2.0)\n</pre> <pre data-language=\"python\">If the target is a JNI library, utilize the following commands to\ncreate a JNI symbolic link:\n</pre> <pre data-language=\"python\">set(CMAKE_JNI_TARGET TRUE)\nadd_jar(shibboleet shibbotleet.java VERSION 1.2.0)\ninstall_jar(shibboleet ${LIB_INSTALL_DIR}/shibboleet)\ninstall_jni_symlink(shibboleet ${JAVA_LIB_INSTALL_DIR})\n</pre> <pre data-language=\"python\">If a single target needs to produce more than one jar from its\njava source code, to prevent the accumulation of duplicate class\nfiles in subsequent jars, set/reset CMAKE_JAR_CLASSES_PREFIX prior\nto calling the add_jar() function:\n</pre> <pre data-language=\"python\">set(CMAKE_JAR_CLASSES_PREFIX com/redhat/foo)\nadd_jar(foo foo.java)\n</pre> <pre data-language=\"python\">set(CMAKE_JAR_CLASSES_PREFIX com/redhat/bar)\nadd_jar(bar bar.java)\n</pre> <p>Target Properties:</p> <pre data-language=\"python\">The add_jar() functions sets some target properties. You can get these\nproperties with the\n   get_property(TARGET &lt;target_name&gt; PROPERTY &lt;propery_name&gt;)\ncommand.\n</pre> <pre data-language=\"python\">INSTALL_FILES      The files which should be installed. This is used by\n                   install_jar().\nJNI_SYMLINK        The JNI symlink which should be installed.\n                   This is used by install_jni_symlink().\nJAR_FILE           The location of the jar file so that you can include\n                   it.\nCLASSDIR           The directory where the class files can be found. For\n                   example to use them with javah.\n</pre> <pre data-language=\"python\">find_jar(&lt;VAR&gt;\n         name | NAMES name1 [name2 ...]\n         [PATHS path1 [path2 ... ENV var]]\n         [VERSIONS version1 [version2]]\n         [DOC \"cache documentation string\"]\n         )\n</pre> <p>This command is used to find a full path to the named jar. A cache entry named by &lt;VAR&gt; is created to stor the result of this command. If the full path to a jar is found the result is stored in the variable and the search will not repeated unless the variable is cleared. If nothing is found, the result will be &lt;VAR&gt;-NOTFOUND, and the search will be attempted again next time find_jar is invoked with the same variable. The name of the full path to a file that is searched for is specified by the names listed after NAMES argument. Additional search locations can be specified after the PATHS argument. If you require special a version of a jar file you can specify it with the VERSIONS argument. The argument after DOC will be used for the documentation string in the cache.</p> <pre data-language=\"python\">install_jar(target_name destination)\ninstall_jar(target_name DESTINATION destination [COMPONENT component])\n</pre> <p>This command installs the TARGET_NAME files to the given DESTINATION. It should be called in the same scope as add_jar() or it will fail.</p> <pre data-language=\"python\">install_jni_symlink(target_name destination)\ninstall_jni_symlink(target_name DESTINATION destination [COMPONENT component])\n</pre> <p>This command installs the TARGET_NAME JNI symlinks to the given DESTINATION. It should be called in the same scope as add_jar() or it will fail.</p> <pre data-language=\"python\">create_javadoc(&lt;VAR&gt;\n               PACKAGES pkg1 [pkg2 ...]\n               [SOURCEPATH &lt;sourcepath&gt;]\n               [CLASSPATH &lt;classpath&gt;]\n               [INSTALLPATH &lt;install path&gt;]\n               [DOCTITLE \"the documentation title\"]\n               [WINDOWTITLE \"the title of the document\"]\n               [AUTHOR TRUE|FALSE]\n               [USE TRUE|FALSE]\n               [VERSION TRUE|FALSE]\n               )\n</pre> <p>Create java documentation based on files or packages. For more details please read the javadoc manpage.</p> <p>There are two main signatures for create_javadoc. The first signature works with package names on a path with source files:</p> <pre data-language=\"python\">Example:\ncreate_javadoc(my_example_doc\n  PACKAGES com.exmaple.foo com.example.bar\n  SOURCEPATH \"${CMAKE_CURRENT_SOURCE_DIR}\"\n  CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}\n  WINDOWTITLE \"My example\"\n  DOCTITLE \"&lt;h1&gt;My example&lt;/h1&gt;\"\n  AUTHOR TRUE\n  USE TRUE\n  VERSION TRUE\n)\n</pre> <p>The second signature for create_javadoc works on a given list of files.</p> <pre data-language=\"python\">create_javadoc(&lt;VAR&gt;\n               FILES file1 [file2 ...]\n               [CLASSPATH &lt;classpath&gt;]\n               [INSTALLPATH &lt;install path&gt;]\n               [DOCTITLE \"the documentation title\"]\n               [WINDOWTITLE \"the title of the document\"]\n               [AUTHOR TRUE|FALSE]\n               [USE TRUE|FALSE]\n               [VERSION TRUE|FALSE]\n              )\n</pre> <p>Example:</p> <pre data-language=\"python\">create_javadoc(my_example_doc\n  FILES ${example_SRCS}\n  CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}\n  WINDOWTITLE \"My example\"\n  DOCTITLE \"&lt;h1&gt;My example&lt;/h1&gt;\"\n  AUTHOR TRUE\n  USE TRUE\n  VERSION TRUE\n)\n</pre> <p>Both signatures share most of the options. These options are the same as what you can find in the javadoc manpage. Please look at the manpage for CLASSPATH, DOCTITLE, WINDOWTITLE, AUTHOR, USE and VERSION.</p> <p>The documentation will be by default installed to</p> <pre data-language=\"python\">${CMAKE_INSTALL_PREFIX}/share/javadoc/&lt;VAR&gt;\n</pre> <p>if you don’t set the INSTALLPATH.</p> <pre data-language=\"python\">create_javah(TARGET &lt;target&gt;\n             GENERATED_FILES &lt;VAR&gt;\n             CLASSES &lt;class&gt;...\n             [CLASSPATH &lt;classpath&gt;...]\n             [DEPENDS &lt;depend&gt;...]\n             [OUTPUT_NAME &lt;path&gt;|OUTPUT_DIR &lt;path&gt;]\n             )\n</pre> <p>Create C header files from java classes. These files provide the connective glue that allow your Java and C code to interact.</p> <p>There are two main signatures for create_javah. The first signature returns generated files throught variable specified by GENERATED_FILES option:</p> <pre data-language=\"python\">Example:\nCreate_javah(GENERATED_FILES files_headers\n  CLASSES org.cmake.HelloWorld\n  CLASSPATH hello.jar\n)\n</pre> <p>The second signature for create_javah creates a target which encapsulates header files generation.</p> <pre data-language=\"python\">Example:\nCreate_javah(TARGET target_headers\n  CLASSES org.cmake.HelloWorld\n  CLASSPATH hello.jar\n)\n</pre> <p>Both signatures share same options.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><code>CLASSES &lt;class&gt;...</code></dt> <dd>Specifies Java classes used to generate headers.</dd> <dt><code>CLASSPATH &lt;classpath&gt;...</code></dt> <dd>Specifies various paths to look up classes. Here .class files, jar files or targets created by command add_jar can be used.</dd> <dt><code>DEPENDS &lt;depend&gt;...</code></dt> <dd>Targets on which the javah target depends</dd> <dt><code>OUTPUT_NAME &lt;path&gt;</code></dt> <dd>Concatenates the resulting header files for all the classes listed by option CLASSES into &lt;path&gt;. Same behavior as option ‘-o’ of javah tool.</dd> <dt><code>OUTPUT_DIR &lt;path&gt;</code></dt> <dd>Sets the directory where the header files will be generated. Same behavior as option ‘-d’ of javah tool. If not specified, ${CMAKE_CURRENT_BINARY_DIR} is used as output directory.</dd> </dl> </div>\n</blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/UseJava.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/UseJava.html</a>\n  </p>\n</div>\n","module/usepkgconfig":"<h1 id=\"module:UsePkgConfig\">UsePkgConfig</h1> <p id=\"usepkgconfig\">Obsolete pkg-config module for CMake, use FindPkgConfig instead.</p> <p>This module defines the following macro:</p> <p>PKGCONFIG(package includedir libdir linkflags cflags)</p> <p>Calling PKGCONFIG will fill the desired information into the 4 given arguments, e.g. PKGCONFIG(libart-2.0 LIBART_INCLUDE_DIR LIBART_LINK_DIR LIBART_LINK_FLAGS LIBART_CFLAGS) if pkg-config was NOT found or the specified software package doesn’t exist, the variable will be empty when the function returns, otherwise they will contain the respective information</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/UsePkgConfig.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/UsePkgConfig.html</a>\n  </p>\n</div>\n","module/usejavasymlinks":"<h1 id=\"module:UseJavaSymlinks\">UseJavaSymlinks</h1> <p id=\"usejavasymlinks\">Helper script for UseJava.cmake</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/UseJavaSymlinks.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/UseJavaSymlinks.html</a>\n  </p>\n</div>\n","module/useswig":"<h1 id=\"module:UseSWIG\">UseSWIG</h1> <p id=\"useswig\">Defines the following macros for use with SWIG:</p> <pre data-language=\"python\">SWIG_ADD_MODULE(name language [ files ])\n  - Define swig module with given name and specified language\nSWIG_LINK_LIBRARIES(name [ libraries ])\n  - Link libraries to swig module\n</pre> <p>Source files properties on module files can be set before the invocation of the SWIG_ADD_MODULE macro to specify special behavior of SWIG.</p> <p>The source file property CPLUSPLUS calls SWIG in c++ mode, e.g.:</p> <pre data-language=\"python\">set_property(SOURCE mymod.i PROPERTY CPLUSPLUS ON)\nswig_add_module(mymod python mymod.i)\n</pre> <p>The source file property SWIG_FLAGS adds custom flags to the SWIG executable.</p> <p>The source-file property SWIG_MODULE_NAME have to be provided to specify the actual import name of the module in the target language if it cannot be scanned automatically from source or different from the module file basename.:</p> <pre data-language=\"python\">set_property(SOURCE mymod.i PROPERTY SWIG_MODULE_NAME mymod_realname)\n</pre> <p>To get the name of the swig module target library, use: ${SWIG_MODULE_${name}_REAL_NAME}.</p> <p>Also some variables can be set to specify special behavior of SWIG.</p> <p>CMAKE_SWIG_FLAGS can be used to add special flags to all swig calls.</p> <p>Another special variable is CMAKE_SWIG_OUTDIR, it allows one to specify where to write all the swig generated module (swig -outdir option)</p> <p>The name-specific variable SWIG_MODULE_&lt;name&gt;_EXTRA_DEPS may be used to specify extra dependencies for the generated modules.</p> <p>If the source file generated by swig need some special flag you can use:</p> <pre data-language=\"python\">set_source_files_properties( ${swig_generated_file_fullname}\n                             PROPERTIES COMPILE_FLAGS \"-bla\")\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/UseSWIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/UseSWIG.html</a>\n  </p>\n</div>\n","module/usewxwidgets":"<h1 id=\"module:UsewxWidgets\">UsewxWidgets</h1> <p id=\"usewxwidgets\">Convenience include for using wxWidgets library.</p> <p>Determines if wxWidgets was FOUND and sets the appropriate libs, incdirs, flags, etc. INCLUDE_DIRECTORIES and LINK_DIRECTORIES are called.</p> <p>USAGE</p> <pre data-language=\"python\"># Note that for MinGW users the order of libs is important!\nfind_package(wxWidgets REQUIRED net gl core base)\ninclude(${wxWidgets_USE_FILE})\n# and for each of your dependent executable/library targets:\ntarget_link_libraries(&lt;YourTarget&gt; ${wxWidgets_LIBRARIES})\n</pre> <p>DEPRECATED</p> <pre data-language=\"python\">LINK_LIBRARIES is not called in favor of adding dependencies per target.\n</pre> <p>AUTHOR</p> <pre data-language=\"python\">Jan Woetzel &lt;jw -at- mip.informatik.uni-kiel.de&gt;\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/UsewxWidgets.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/UsewxWidgets.html</a>\n  </p>\n</div>\n","module/use_wxwindows":"<h1 id=\"module:Use_wxWindows\">Use_wxWindows</h1> <p id=\"use-wxwindows\">This convenience include finds if wxWindows is installed and set the appropriate libs, incdirs, flags etc. author Jan Woetzel &lt;jw -at- mip.informatik.uni-kiel.de&gt; (07/2003)</p> <p>USAGE:</p> <pre data-language=\"python\">just include Use_wxWindows.cmake\nin your projects CMakeLists.txt\n</pre> <p>include( ${CMAKE_MODULE_PATH}/Use_wxWindows.cmake)</p> <pre data-language=\"python\">if you are sure you need GL then\n</pre> <p>set(WXWINDOWS_USE_GL 1)</p> <pre data-language=\"python\">*before* you include this file.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/Use_wxWindows.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/Use_wxWindows.html</a>\n  </p>\n</div>\n","module/writebasicconfigversionfile":"<h1 id=\"module:WriteBasicConfigVersionFile\">WriteBasicConfigVersionFile</h1> <pre data-language=\"python\" id=\"writebasicconfigversionfile\">WRITE_BASIC_CONFIG_VERSION_FILE( filename\n  [VERSION major.minor.patch]\n  COMPATIBILITY (AnyNewerVersion|SameMajorVersion)\n  )\n</pre> <p>Deprecated, see WRITE_BASIC_PACKAGE_VERSION_FILE(), it is identical.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/WriteBasicConfigVersionFile.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/WriteBasicConfigVersionFile.html</a>\n  </p>\n</div>\n","prop_gbl/allow_duplicate_custom_targets":"<h1 id=\"prop_gbl:ALLOW_DUPLICATE_CUSTOM_TARGETS\">ALLOW_DUPLICATE_CUSTOM_TARGETS</h1> <p id=\"allow-duplicate-custom-targets\">Allow duplicate custom targets to be created.</p> <p>Normally CMake requires that all targets built in a project have globally unique logical names (see policy CMP0002). This is necessary to generate meaningful project file names in Xcode and VS IDE generators. It also allows the target names to be referenced unambiguously.</p> <p>Makefile generators are capable of supporting duplicate custom target names. For projects that care only about Makefile generators and do not wish to support Xcode or VS IDE generators, one may set this property to true to allow duplicate custom targets. The property allows multiple add_custom_target command calls in different directories to specify the same target name. However, setting this property will cause non-Makefile generators to produce an error and refuse to generate the project.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/ALLOW_DUPLICATE_CUSTOM_TARGETS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/ALLOW_DUPLICATE_CUSTOM_TARGETS.html</a>\n  </p>\n</div>\n","prop_gbl/autogen_targets_folder":"<h1 id=\"prop_gbl:AUTOGEN_TARGETS_FOLDER\">AUTOGEN_TARGETS_FOLDER</h1> <p id=\"autogen-targets-folder\">Name of <a class=\"reference internal\" href=\"../prop_tgt/folder#prop_tgt:FOLDER\" title=\"FOLDER\" id=\"index-0-prop_tgt:FOLDER\"><code>FOLDER</code></a> for <code>*_automoc</code> targets that are added automatically by CMake for targets for which <a class=\"reference internal\" href=\"../prop_tgt/automoc#prop_tgt:AUTOMOC\" title=\"AUTOMOC\" id=\"index-0-prop_tgt:AUTOMOC\"><code>AUTOMOC</code></a> is enabled.</p> <p>If not set, CMake uses the <a class=\"reference internal\" href=\"../prop_tgt/folder#prop_tgt:FOLDER\" title=\"FOLDER\" id=\"index-1-prop_tgt:FOLDER\"><code>FOLDER</code></a> property of the parent target as a default value for this property. See also the documentation for the <a class=\"reference internal\" href=\"../prop_tgt/folder#prop_tgt:FOLDER\" title=\"FOLDER\" id=\"index-2-prop_tgt:FOLDER\"><code>FOLDER</code></a> target property and the <a class=\"reference internal\" href=\"../prop_tgt/automoc#prop_tgt:AUTOMOC\" title=\"AUTOMOC\" id=\"index-1-prop_tgt:AUTOMOC\"><code>AUTOMOC</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/AUTOGEN_TARGETS_FOLDER.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/AUTOGEN_TARGETS_FOLDER.html</a>\n  </p>\n</div>\n","prop_gbl/automoc_targets_folder":"<h1 id=\"prop_gbl:AUTOMOC_TARGETS_FOLDER\">AUTOMOC_TARGETS_FOLDER</h1> <p id=\"automoc-targets-folder\">Name of <a class=\"reference internal\" href=\"../prop_tgt/folder#prop_tgt:FOLDER\" title=\"FOLDER\" id=\"index-0-prop_tgt:FOLDER\"><code>FOLDER</code></a> for <code>*_automoc</code> targets that are added automatically by CMake for targets for which <a class=\"reference internal\" href=\"../prop_tgt/automoc#prop_tgt:AUTOMOC\" title=\"AUTOMOC\" id=\"index-0-prop_tgt:AUTOMOC\"><code>AUTOMOC</code></a> is enabled.</p> <p>This property is obsolete. Use <a class=\"reference internal\" href=\"autogen_targets_folder#prop_gbl:AUTOGEN_TARGETS_FOLDER\" title=\"AUTOGEN_TARGETS_FOLDER\" id=\"index-0-prop_gbl:AUTOGEN_TARGETS_FOLDER\"><code>AUTOGEN_TARGETS_FOLDER</code></a> instead.</p> <p>If not set, CMake uses the <a class=\"reference internal\" href=\"../prop_tgt/folder#prop_tgt:FOLDER\" title=\"FOLDER\" id=\"index-1-prop_tgt:FOLDER\"><code>FOLDER</code></a> property of the parent target as a default value for this property. See also the documentation for the <a class=\"reference internal\" href=\"../prop_tgt/folder#prop_tgt:FOLDER\" title=\"FOLDER\" id=\"index-2-prop_tgt:FOLDER\"><code>FOLDER</code></a> target property and the <a class=\"reference internal\" href=\"../prop_tgt/automoc#prop_tgt:AUTOMOC\" title=\"AUTOMOC\" id=\"index-1-prop_tgt:AUTOMOC\"><code>AUTOMOC</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/AUTOMOC_TARGETS_FOLDER.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/AUTOMOC_TARGETS_FOLDER.html</a>\n  </p>\n</div>\n","prop_gbl/cmake_c_known_features":"<h1 id=\"prop_gbl:CMAKE_C_KNOWN_FEATURES\">CMAKE_C_KNOWN_FEATURES</h1> <p id=\"cmake-c-known-features\">List of C features known to this version of CMake.</p> <p>The features listed in this global property may be known to be available to the C compiler. If the feature is available with the C compiler, it will be listed in the <a class=\"reference internal\" href=\"../variable/cmake_c_compile_features#variable:CMAKE_C_COMPILE_FEATURES\" title=\"CMAKE_C_COMPILE_FEATURES\" id=\"index-0-variable:CMAKE_C_COMPILE_FEATURES\"><code>CMAKE_C_COMPILE_FEATURES</code></a> variable.</p> <p>The features listed here may be used with the <a class=\"reference internal\" href=\"../command/target_compile_features#command:target_compile_features\" title=\"target_compile_features\" id=\"index-0-command:target_compile_features\"><code>target_compile_features()</code></a> command. See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p> <p>The features known to this version of CMake are:</p> <dl class=\"docutils\"> <dt><code>c_function_prototypes</code></dt> <dd>Function prototypes, as defined in <code>ISO/IEC 9899:1990</code>.</dd> <dt><code>c_restrict</code></dt> <dd>\n<code>restrict</code> keyword, as defined in <code>ISO/IEC 9899:1999</code>.</dd> <dt><code>c_static_assert</code></dt> <dd>Static assert, as defined in <code>ISO/IEC 9899:2011</code>.</dd> <dt><code>c_variadic_macros</code></dt> <dd>Variadic macros, as defined in <code>ISO/IEC 9899:1999</code>.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/CMAKE_C_KNOWN_FEATURES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/CMAKE_C_KNOWN_FEATURES.html</a>\n  </p>\n</div>\n","module/writecompilerdetectionheader":"<h1 id=\"module:WriteCompilerDetectionHeader\">WriteCompilerDetectionHeader</h1> <p id=\"writecompilerdetectionheader\">This module provides the function write_compiler_detection_header().</p> <p>The <code>WRITE_COMPILER_DETECTION_HEADER</code> function can be used to generate a file suitable for preprocessor inclusion which contains macros to be used in source code:</p> <pre data-language=\"python\">write_compiler_detection_header(\n          FILE &lt;file&gt;\n          PREFIX &lt;prefix&gt;\n          [OUTPUT_FILES_VAR &lt;output_files_var&gt; OUTPUT_DIR &lt;output_dir&gt;]\n          COMPILERS &lt;compiler&gt; [...]\n          FEATURES &lt;feature&gt; [...]\n          [VERSION &lt;version&gt;]\n          [PROLOG &lt;prolog&gt;]\n          [EPILOG &lt;epilog&gt;]\n)\n</pre> <p>The <code>write_compiler_detection_header</code> function generates the file <code>&lt;file&gt;</code> with macros which all have the prefix <code>&lt;prefix&gt;</code>.</p> <p>By default, all content is written directly to the <code>&lt;file&gt;</code>. The <code>OUTPUT_FILES_VAR</code> may be specified to cause the compiler-specific content to be written to separate files. The separate files are then available in the <code>&lt;output_files_var&gt;</code> and may be consumed by the caller for installation for example. The <code>OUTPUT_DIR</code> specifies a relative path from the main <code>&lt;file&gt;</code> to the compiler-specific files. For example:</p> <pre data-language=\"cmake\">write_compiler_detection_header(\n  FILE climbingstats_compiler_detection.h\n  PREFIX ClimbingStats\n  OUTPUT_FILES_VAR support_files\n  OUTPUT_DIR compilers\n  COMPILERS GNU Clang MSVC\n  FEATURES cxx_variadic_templates\n)\ninstall(FILES\n  ${CMAKE_CURRENT_BINARY_DIR}/climbingstats_compiler_detection.h\n  DESTINATION include\n)\ninstall(FILES\n  ${support_files}\n  DESTINATION include/compilers\n)\n</pre> <p><code>VERSION</code> may be used to specify the API version to be generated. Future versions of CMake may introduce alternative APIs. A given API is selected by any <code>&lt;version&gt;</code> value greater than or equal to the version of CMake that introduced the given API and less than the version of CMake that introduced its succeeding API. The value of the <a class=\"reference internal\" href=\"../variable/cmake_minimum_required_version#variable:CMAKE_MINIMUM_REQUIRED_VERSION\" title=\"CMAKE_MINIMUM_REQUIRED_VERSION\" id=\"index-0-variable:CMAKE_MINIMUM_REQUIRED_VERSION\"><code>CMAKE_MINIMUM_REQUIRED_VERSION</code></a> variable is used if no explicit version is specified. (As of CMake version 3.5.2 there is only one API version.)</p> <p><code>PROLOG</code> may be specified as text content to write at the start of the header. <code>EPILOG</code> may be specified as text content to write at the end of the header</p> <p>At least one <code>&lt;compiler&gt;</code> and one <code>&lt;feature&gt;</code> must be listed. Compilers which are known to CMake, but not specified are detected and a preprocessor <code>#error</code> is generated for them. A preprocessor macro matching <code>&lt;PREFIX&gt;_COMPILER_IS_&lt;compiler&gt;</code> is generated for each compiler known to CMake to contain the value <code>0</code> or <code>1</code>.</p> <p>Possible compiler identifiers are documented with the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_ID\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\"><code>CMAKE_&lt;LANG&gt;_COMPILER_ID</code></a> variable. Available features in this version of CMake are listed in the <a class=\"reference internal\" href=\"../prop_gbl/cmake_c_known_features#prop_gbl:CMAKE_C_KNOWN_FEATURES\" title=\"CMAKE_C_KNOWN_FEATURES\" id=\"index-0-prop_gbl:CMAKE_C_KNOWN_FEATURES\"><code>CMAKE_C_KNOWN_FEATURES</code></a> and <a class=\"reference internal\" href=\"../prop_gbl/cmake_cxx_known_features#prop_gbl:CMAKE_CXX_KNOWN_FEATURES\" title=\"CMAKE_CXX_KNOWN_FEATURES\" id=\"index-0-prop_gbl:CMAKE_CXX_KNOWN_FEATURES\"><code>CMAKE_CXX_KNOWN_FEATURES</code></a> global properties.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features.</p>  <h2 id=\"feature-test-macros\">Feature Test Macros</h2> <p>For each compiler, a preprocessor macro is generated matching <code>&lt;PREFIX&gt;_COMPILER_IS_&lt;compiler&gt;</code> which has the content either <code>0</code> or <code>1</code>, depending on the compiler in use. Preprocessor macros for compiler version components are generated matching <code>&lt;PREFIX&gt;_COMPILER_VERSION_MAJOR</code> <code>&lt;PREFIX&gt;_COMPILER_VERSION_MINOR</code> and <code>&lt;PREFIX&gt;_COMPILER_VERSION_PATCH</code> containing decimal values for the corresponding compiler version components, if defined.</p> <p>A preprocessor test is generated based on the compiler version denoting whether each feature is enabled. A preprocessor macro matching <code>&lt;PREFIX&gt;_COMPILER_&lt;FEATURE&gt;</code>, where <code>&lt;FEATURE&gt;</code> is the upper-case <code>&lt;feature&gt;</code> name, is generated to contain the value <code>0</code> or <code>1</code> depending on whether the compiler in use supports the feature:</p> <pre data-language=\"cmake\">write_compiler_detection_header(\n  FILE climbingstats_compiler_detection.h\n  PREFIX ClimbingStats\n  COMPILERS GNU Clang AppleClang MSVC\n  FEATURES cxx_variadic_templates\n)\n</pre> <pre data-language=\"c\">#if ClimbingStats_COMPILER_CXX_VARIADIC_TEMPLATES\ntemplate&lt;typename... T&gt;\nvoid someInterface(T t...) { /* ... */ }\n#else\n// Compatibility versions\ntemplate&lt;typename T1&gt;\nvoid someInterface(T1 t1) { /* ... */ }\ntemplate&lt;typename T1, typename T2&gt;\nvoid someInterface(T1 t1, T2 t2) { /* ... */ }\ntemplate&lt;typename T1, typename T2, typename T3&gt;\nvoid someInterface(T1 t1, T2 t2, T3 t3) { /* ... */ }\n#endif\n</pre>   <h2 id=\"symbol-macros\">Symbol Macros</h2> <p>Some additional symbol-defines are created for particular features for use as symbols which may be conditionally defined empty:</p> <pre data-language=\"c\">class MyClass ClimbingStats_FINAL\n{\n    ClimbingStats_CONSTEXPR int someInterface() { return 42; }\n};\n</pre> <p>The <code>ClimbingStats_FINAL</code> macro will expand to <code>final</code> if the compiler (and its flags) support the <code>cxx_final</code> feature, and the <code>ClimbingStats_CONSTEXPR</code> macro will expand to <code>constexpr</code> if <code>cxx_constexpr</code> is supported.</p> <p>The following features generate corresponding symbol defines:</p> <table class=\"docutils\"> <colgroup> <col width=\"33%\"> <col width=\"45%\"> <col width=\"22%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Define</th> <th class=\"head\">Symbol</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code>c_restrict</code></td> <td><code>&lt;PREFIX&gt;_RESTRICT</code></td> <td><code>restrict</code></td> </tr> <tr class=\"row-odd\">\n<td><code>cxx_constexpr</code></td> <td><code>&lt;PREFIX&gt;_CONSTEXPR</code></td> <td><code>constexpr</code></td> </tr> <tr class=\"row-even\">\n<td><code>cxx_deleted_functions</code></td> <td><code>&lt;PREFIX&gt;_DELETED_FUNCTION</code></td> <td><code>= delete</code></td> </tr> <tr class=\"row-odd\">\n<td><code>cxx_extern_templates</code></td> <td><code>&lt;PREFIX&gt;_EXTERN_TEMPLATE</code></td> <td><code>extern</code></td> </tr> <tr class=\"row-even\">\n<td><code>cxx_final</code></td> <td><code>&lt;PREFIX&gt;_FINAL</code></td> <td><code>final</code></td> </tr> <tr class=\"row-odd\">\n<td><code>cxx_noexcept</code></td> <td><code>&lt;PREFIX&gt;_NOEXCEPT</code></td> <td><code>noexcept</code></td> </tr> <tr class=\"row-even\">\n<td><code>cxx_noexcept</code></td> <td><code>&lt;PREFIX&gt;_NOEXCEPT_EXPR(X)</code></td> <td><code>noexcept(X)</code></td> </tr> <tr class=\"row-odd\">\n<td><code>cxx_override</code></td> <td><code>&lt;PREFIX&gt;_OVERRIDE</code></td> <td><code>override</code></td> </tr> </tbody> </table>   <h2 id=\"compatibility-implementation-macros\">Compatibility Implementation Macros</h2> <p>Some features are suitable for wrapping in a macro with a backward compatibility implementation if the compiler does not support the feature.</p> <p>When the <code>cxx_static_assert</code> feature is not provided by the compiler, a compatibility implementation is available via the <code>&lt;PREFIX&gt;_STATIC_ASSERT(COND)</code> and <code>&lt;PREFIX&gt;_STATIC_ASSERT_MSG(COND, MSG)</code> function-like macros. The macros expand to <code>static_assert</code> where that compiler feature is available, and to a compatibility implementation otherwise. In the first form, the condition is stringified in the message field of <code>static_assert</code>. In the second form, the message <code>MSG</code> is passed to the message field of <code>static_assert</code>, or ignored if using the backward compatibility implementation.</p> <p>The <code>cxx_attribute_deprecated</code> feature provides a macro definition <code>&lt;PREFIX&gt;_DEPRECATED</code>, which expands to either the standard <code>[[deprecated]]</code> attribute or a compiler-specific decorator such as <code>__attribute__((__deprecated__))</code> used by GNU compilers.</p> <p>The <code>cxx_alignas</code> feature provides a macro definition <code>&lt;PREFIX&gt;_ALIGNAS</code> which expands to either the standard <code>alignas</code> decorator or a compiler-specific decorator such as <code>__attribute__ ((__aligned__))</code> used by GNU compilers.</p> <p>The <code>cxx_alignof</code> feature provides a macro definition <code>&lt;PREFIX&gt;_ALIGNOF</code> which expands to either the standard <code>alignof</code> decorator or a compiler-specific decorator such as <code>__alignof__</code> used by GNU compilers.</p> <table class=\"docutils\"> <colgroup> <col width=\"35%\"> <col width=\"39%\"> <col width=\"26%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Define</th> <th class=\"head\">Symbol</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code>cxx_alignas</code></td> <td><code>&lt;PREFIX&gt;_ALIGNAS</code></td> <td><code>alignas</code></td> </tr> <tr class=\"row-odd\">\n<td><code>cxx_alignof</code></td> <td><code>&lt;PREFIX&gt;_ALIGNOF</code></td> <td><code>alignof</code></td> </tr> <tr class=\"row-even\">\n<td><code>cxx_nullptr</code></td> <td><code>&lt;PREFIX&gt;_NULLPTR</code></td> <td><code>nullptr</code></td> </tr> <tr class=\"row-odd\">\n<td><code>cxx_static_assert</code></td> <td><code>&lt;PREFIX&gt;_STATIC_ASSERT</code></td> <td><code>static_assert</code></td> </tr> <tr class=\"row-even\">\n<td><code>cxx_static_assert</code></td> <td><code>&lt;PREFIX&gt;_STATIC_ASSERT_MSG</code></td> <td><code>static_assert</code></td> </tr> <tr class=\"row-odd\">\n<td><code>cxx_attribute_deprecated</code></td> <td><code>&lt;PREFIX&gt;_DEPRECATED</code></td> <td><code>[[deprecated]]</code></td> </tr> <tr class=\"row-even\">\n<td><code>cxx_attribute_deprecated</code></td> <td><code>&lt;PREFIX&gt;_DEPRECATED_MSG</code></td> <td><code>[[deprecated]]</code></td> </tr> <tr class=\"row-odd\">\n<td><code>cxx_thread_local</code></td> <td><code>&lt;PREFIX&gt;_THREAD_LOCAL</code></td> <td><code>thread_local</code></td> </tr> </tbody> </table> <p>A use-case which arises with such deprecation macros is the deprecation of an entire library. In that case, all public API in the library may be decorated with the <code>&lt;PREFIX&gt;_DEPRECATED</code> macro. This results in very noisy build output when building the library itself, so the macro may be may be defined to empty in that case when building the deprecated library:</p> <pre data-language=\"cmake\">add_library(compat_support ${srcs})\ntarget_compile_definitions(compat_support\n  PRIVATE\n    CompatSupport_DEPRECATED=\n)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/module/WriteCompilerDetectionHeader.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/module/WriteCompilerDetectionHeader.html</a>\n  </p>\n</div>\n","prop_gbl/debug_configurations":"<h1 id=\"prop_gbl:DEBUG_CONFIGURATIONS\">DEBUG_CONFIGURATIONS</h1> <p id=\"debug-configurations\">Specify which configurations are for debugging.</p> <p>The value must be a semi-colon separated list of configuration names. Currently this property is used only by the target_link_libraries command (see its documentation for details). Additional uses may be defined in the future.</p> <p>This property must be set at the top level of the project and before the first target_link_libraries command invocation. If any entry in the list does not match a valid configuration for the project the behavior is undefined.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/DEBUG_CONFIGURATIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/DEBUG_CONFIGURATIONS.html</a>\n  </p>\n</div>\n","prop_gbl/disabled_features":"<h1 id=\"prop_gbl:DISABLED_FEATURES\">DISABLED_FEATURES</h1> <p id=\"disabled-features\">List of features which are disabled during the CMake run.</p> <p>List of features which are disabled during the CMake run. By default it contains the names of all packages which were not found. This is determined using the &lt;NAME&gt;_FOUND variables. Packages which are searched QUIET are not listed. A project can add its own features to this list. This property is used by the macros in FeatureSummary.cmake.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/DISABLED_FEATURES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/DISABLED_FEATURES.html</a>\n  </p>\n</div>\n","prop_gbl/enabled_features":"<h1 id=\"prop_gbl:ENABLED_FEATURES\">ENABLED_FEATURES</h1> <p id=\"enabled-features\">List of features which are enabled during the CMake run.</p> <p>List of features which are enabled during the CMake run. By default it contains the names of all packages which were found. This is determined using the &lt;NAME&gt;_FOUND variables. Packages which are searched QUIET are not listed. A project can add its own features to this list. This property is used by the macros in FeatureSummary.cmake.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/ENABLED_FEATURES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/ENABLED_FEATURES.html</a>\n  </p>\n</div>\n","prop_gbl/enabled_languages":"<h1 id=\"prop_gbl:ENABLED_LANGUAGES\">ENABLED_LANGUAGES</h1> <p id=\"enabled-languages\">Read-only property that contains the list of currently enabled languages</p> <p>Set to list of currently enabled languages.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/ENABLED_LANGUAGES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/ENABLED_LANGUAGES.html</a>\n  </p>\n</div>\n","prop_gbl/find_library_use_lib64_paths":"<h1 id=\"prop_gbl:FIND_LIBRARY_USE_LIB64_PATHS\">FIND_LIBRARY_USE_LIB64_PATHS</h1> <p id=\"find-library-use-lib64-paths\">Whether FIND_LIBRARY should automatically search lib64 directories.</p> <p>FIND_LIBRARY_USE_LIB64_PATHS is a boolean specifying whether the FIND_LIBRARY command should automatically search the lib64 variant of directories called lib in the search path when building 64-bit binaries.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/FIND_LIBRARY_USE_LIB64_PATHS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/FIND_LIBRARY_USE_LIB64_PATHS.html</a>\n  </p>\n</div>\n","prop_gbl/find_library_use_openbsd_versioning":"<h1 id=\"prop_gbl:FIND_LIBRARY_USE_OPENBSD_VERSIONING\">FIND_LIBRARY_USE_OPENBSD_VERSIONING</h1> <p id=\"find-library-use-openbsd-versioning\">Whether FIND_LIBRARY should find OpenBSD-style shared libraries.</p> <p>This property is a boolean specifying whether the FIND_LIBRARY command should find shared libraries with OpenBSD-style versioned extension: ”.so.&lt;major&gt;.&lt;minor&gt;”. The property is set to true on OpenBSD and false on other platforms.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/FIND_LIBRARY_USE_OPENBSD_VERSIONING.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/FIND_LIBRARY_USE_OPENBSD_VERSIONING.html</a>\n  </p>\n</div>\n","prop_gbl/global_depends_debug_mode":"<h1 id=\"prop_gbl:GLOBAL_DEPENDS_DEBUG_MODE\">GLOBAL_DEPENDS_DEBUG_MODE</h1> <p id=\"global-depends-debug-mode\">Enable global target dependency graph debug mode.</p> <p>CMake automatically analyzes the global inter-target dependency graph at the beginning of native build system generation. This property causes it to display details of its analysis to stderr.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/GLOBAL_DEPENDS_DEBUG_MODE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/GLOBAL_DEPENDS_DEBUG_MODE.html</a>\n  </p>\n</div>\n","prop_gbl/cmake_cxx_known_features":"<h1 id=\"prop_gbl:CMAKE_CXX_KNOWN_FEATURES\">CMAKE_CXX_KNOWN_FEATURES</h1> <p id=\"cmake-cxx-known-features\">List of C++ features known to this version of CMake.</p> <p>The features listed in this global property may be known to be available to the C++ compiler. If the feature is available with the C++ compiler, it will be listed in the <a class=\"reference internal\" href=\"../variable/cmake_cxx_compile_features#variable:CMAKE_CXX_COMPILE_FEATURES\" title=\"CMAKE_CXX_COMPILE_FEATURES\" id=\"index-0-variable:CMAKE_CXX_COMPILE_FEATURES\"><code>CMAKE_CXX_COMPILE_FEATURES</code></a> variable.</p> <p>The features listed here may be used with the <a class=\"reference internal\" href=\"../command/target_compile_features#command:target_compile_features\" title=\"target_compile_features\" id=\"index-0-command:target_compile_features\"><code>target_compile_features()</code></a> command. See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p> <p>The features known to this version of CMake are:</p> <dl class=\"docutils\"> <dt><code>cxx_aggregate_default_initializers</code></dt> <dd>Aggregate default initializers, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3605.html\">N3605</a>.</dd> <dt><code>cxx_alias_templates</code></dt> <dd>Template aliases, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2258.pdf\">N2258</a>.</dd> <dt><code>cxx_alignas</code></dt> <dd>Alignment control <code>alignas</code>, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf\">N2341</a>.</dd> <dt><code>cxx_alignof</code></dt> <dd>Alignment control <code>alignof</code>, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf\">N2341</a>.</dd> <dt><code>cxx_attributes</code></dt> <dd>Generic attributes, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2761.pdf\">N2761</a>.</dd> <dt><code>cxx_attribute_deprecated</code></dt> <dd>\n<code>[[deprecated]]</code> attribute, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3760.html\">N3760</a>.</dd> <dt><code>cxx_auto_type</code></dt> <dd>Automatic type deduction, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1984.pdf\">N1984</a>.</dd> <dt><code>cxx_binary_literals</code></dt> <dd>Binary literals, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3472.pdf\">N3472</a>.</dd> <dt><code>cxx_constexpr</code></dt> <dd>Constant expressions, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2235.pdf\">N2235</a>.</dd> <dt><code>cxx_contextual_conversions</code></dt> <dd>Contextual conversions, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3323.pdf\">N3323</a>.</dd> <dt><code>cxx_decltype_incomplete_return_types</code></dt> <dd>Decltype on incomplete return types, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf\">N3276</a>.</dd> <dt><code>cxx_decltype</code></dt> <dd>Decltype, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2343.pdf\">N2343</a>.</dd> <dt><code>cxx_decltype_auto</code></dt> <dd>\n<code>decltype(auto)</code> semantics, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3638.html\">N3638</a>.</dd> <dt><code>cxx_default_function_template_args</code></dt> <dd>Default template arguments for function templates, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#226\">DR226</a>\n</dd> <dt><code>cxx_defaulted_functions</code></dt> <dd>Defaulted functions, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2346.htm\">N2346</a>.</dd> <dt><code>cxx_defaulted_move_initializers</code></dt> <dd>Defaulted move initializers, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3053.html\">N3053</a>.</dd> <dt><code>cxx_delegating_constructors</code></dt> <dd>Delegating constructors, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1986.pdf\">N1986</a>.</dd> <dt><code>cxx_deleted_functions</code></dt> <dd>Deleted functions, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2346.htm\">N2346</a>.</dd> <dt><code>cxx_digit_separators</code></dt> <dd>Digit separators, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3781.pdf\">N3781</a>.</dd> <dt><code>cxx_enum_forward_declarations</code></dt> <dd>Enum forward declarations, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2764.pdf\">N2764</a>.</dd> <dt><code>cxx_explicit_conversions</code></dt> <dd>Explicit conversion operators, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2437.pdf\">N2437</a>.</dd> <dt><code>cxx_extended_friend_declarations</code></dt> <dd>Extended friend declarations, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1791.pdf\">N1791</a>.</dd> <dt><code>cxx_extern_templates</code></dt> <dd>Extern templates, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1987.htm\">N1987</a>.</dd> <dt><code>cxx_final</code></dt> <dd>Override control <code>final</code> keyword, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm\">N2928</a>, <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm\">N3206</a> and <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm\">N3272</a>.</dd> <dt><code>cxx_func_identifier</code></dt> <dd>Predefined <code>__func__</code> identifier, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2340.htm\">N2340</a>.</dd> <dt><code>cxx_generalized_initializers</code></dt> <dd>Initializer lists, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm\">N2672</a>.</dd> <dt><code>cxx_generic_lambdas</code></dt> <dd>Generic lambdas, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3649.html\">N3649</a>.</dd> <dt><code>cxx_inheriting_constructors</code></dt> <dd>Inheriting constructors, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2540.htm\">N2540</a>.</dd> <dt><code>cxx_inline_namespaces</code></dt> <dd>Inline namespaces, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2535.htm\">N2535</a>.</dd> <dt><code>cxx_lambdas</code></dt> <dd>Lambda functions, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2927.pdf\">N2927</a>.</dd> <dt><code>cxx_lambda_init_captures</code></dt> <dd>Initialized lambda captures, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3648.html\">N3648</a>.</dd> <dt><code>cxx_local_type_template_args</code></dt> <dd>Local and unnamed types as template arguments, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm\">N2657</a>.</dd> <dt><code>cxx_long_long_type</code></dt> <dd>\n<code>long long</code> type, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1811.pdf\">N1811</a>.</dd> <dt><code>cxx_noexcept</code></dt> <dd>Exception specifications, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3050.html\">N3050</a>.</dd> <dt><code>cxx_nonstatic_member_init</code></dt> <dd>Non-static data member initialization, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2756.htm\">N2756</a>.</dd> <dt><code>cxx_nullptr</code></dt> <dd>Null pointer, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf\">N2431</a>.</dd> <dt><code>cxx_override</code></dt> <dd>Override control <code>override</code> keyword, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm\">N2928</a>, <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm\">N3206</a> and <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm\">N3272</a>.</dd> <dt><code>cxx_range_for</code></dt> <dd>Range-based for, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html\">N2930</a>.</dd> <dt><code>cxx_raw_string_literals</code></dt> <dd>Raw string literals, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm\">N2442</a>.</dd> <dt><code>cxx_reference_qualified_functions</code></dt> <dd>Reference qualified functions, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2439.htm\">N2439</a>.</dd> <dt><code>cxx_relaxed_constexpr</code></dt> <dd>Relaxed constexpr, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html\">N3652</a>.</dd> <dt><code>cxx_return_type_deduction</code></dt> <dd>Return type deduction on normal functions, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3386.html\">N3386</a>.</dd> <dt><code>cxx_right_angle_brackets</code></dt> <dd>Right angle bracket parsing, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html\">N1757</a>.</dd> <dt><code>cxx_rvalue_references</code></dt> <dd>R-value references, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2118.html\">N2118</a>.</dd> <dt><code>cxx_sizeof_member</code></dt> <dd>Size of non-static data members, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2253.html\">N2253</a>.</dd> <dt><code>cxx_static_assert</code></dt> <dd>Static assert, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1720.html\">N1720</a>.</dd> <dt><code>cxx_strong_enums</code></dt> <dd>Strongly typed enums, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2347.pdf\">N2347</a>.</dd> <dt><code>cxx_thread_local</code></dt> <dd>Thread-local variables, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2659.htm\">N2659</a>.</dd> <dt><code>cxx_trailing_return_types</code></dt> <dd>Automatic function return type, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2541.htm\">N2541</a>.</dd> <dt><code>cxx_unicode_literals</code></dt> <dd>Unicode string literals, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm\">N2442</a>.</dd> <dt><code>cxx_uniform_initialization</code></dt> <dd>Uniform intialization, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf\">N2640</a>.</dd> <dt><code>cxx_unrestricted_unions</code></dt> <dd>Unrestricted unions, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2544.pdf\">N2544</a>.</dd> <dt><code>cxx_user_literals</code></dt> <dd>User-defined literals, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2765.pdf\">N2765</a>.</dd> <dt><code>cxx_variable_templates</code></dt> <dd>Variable templates, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3651.pdf\">N3651</a>.</dd> <dt><code>cxx_variadic_macros</code></dt> <dd>Variadic macros, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm\">N1653</a>.</dd> <dt><code>cxx_variadic_templates</code></dt> <dd>Variadic templates, as defined in <a class=\"reference external\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2242.pdf\">N2242</a>.</dd> <dt><code>cxx_template_template_parameters</code></dt> <dd>Template template parameters, as defined in <code>ISO/IEC 14882:1998</code>.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html</a>\n  </p>\n</div>\n","prop_gbl/global_depends_no_cycles":"<h1 id=\"prop_gbl:GLOBAL_DEPENDS_NO_CYCLES\">GLOBAL_DEPENDS_NO_CYCLES</h1> <p id=\"global-depends-no-cycles\">Disallow global target dependency graph cycles.</p> <p>CMake automatically analyzes the global inter-target dependency graph at the beginning of native build system generation. It reports an error if the dependency graph contains a cycle that does not consist of all STATIC library targets. This property tells CMake to disallow all cycles completely, even among static libraries.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/GLOBAL_DEPENDS_NO_CYCLES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/GLOBAL_DEPENDS_NO_CYCLES.html</a>\n  </p>\n</div>\n","prop_gbl/in_try_compile":"<h1 id=\"prop_gbl:IN_TRY_COMPILE\">IN_TRY_COMPILE</h1> <p id=\"in-try-compile\">Read-only property that is true during a try-compile configuration.</p> <p>True when building a project inside a TRY_COMPILE or TRY_RUN command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/IN_TRY_COMPILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/IN_TRY_COMPILE.html</a>\n  </p>\n</div>\n","prop_gbl/packages_found":"<h1 id=\"prop_gbl:PACKAGES_FOUND\">PACKAGES_FOUND</h1> <p id=\"packages-found\">List of packages which were found during the CMake run.</p> <p>List of packages which were found during the CMake run. Whether a package has been found is determined using the &lt;NAME&gt;_FOUND variables.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/PACKAGES_FOUND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/PACKAGES_FOUND.html</a>\n  </p>\n</div>\n","prop_gbl/packages_not_found":"<h1 id=\"prop_gbl:PACKAGES_NOT_FOUND\">PACKAGES_NOT_FOUND</h1> <p id=\"packages-not-found\">List of packages which were not found during the CMake run.</p> <p>List of packages which were not found during the CMake run. Whether a package has been found is determined using the &lt;NAME&gt;_FOUND variables.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/PACKAGES_NOT_FOUND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/PACKAGES_NOT_FOUND.html</a>\n  </p>\n</div>\n","prop_gbl/job_pools":"<h1 id=\"prop_gbl:JOB_POOLS\">JOB_POOLS</h1> <p id=\"job-pools\">Ninja only: List of available pools.</p> <p>A pool is a named integer property and defines the maximum number of concurrent jobs which can be started by a rule assigned to the pool. The <a class=\"reference internal\" href=\"#prop_gbl:JOB_POOLS\" title=\"JOB_POOLS\" id=\"index-0-prop_gbl:JOB_POOLS\"><code>JOB_POOLS</code></a> property is a semicolon-separated list of pairs using the syntax NAME=integer (without a space after the equality sign).</p> <p>For instance:</p> <pre data-language=\"cmake\">set_property(GLOBAL PROPERTY JOB_POOLS two_jobs=2 ten_jobs=10)\n</pre> <p>Defined pools could be used globally by setting <a class=\"reference internal\" href=\"../variable/cmake_job_pool_compile#variable:CMAKE_JOB_POOL_COMPILE\" title=\"CMAKE_JOB_POOL_COMPILE\" id=\"index-0-variable:CMAKE_JOB_POOL_COMPILE\"><code>CMAKE_JOB_POOL_COMPILE</code></a> and <a class=\"reference internal\" href=\"../variable/cmake_job_pool_link#variable:CMAKE_JOB_POOL_LINK\" title=\"CMAKE_JOB_POOL_LINK\" id=\"index-0-variable:CMAKE_JOB_POOL_LINK\"><code>CMAKE_JOB_POOL_LINK</code></a> or per target by setting the target properties <a class=\"reference internal\" href=\"../prop_tgt/job_pool_compile#prop_tgt:JOB_POOL_COMPILE\" title=\"JOB_POOL_COMPILE\" id=\"index-0-prop_tgt:JOB_POOL_COMPILE\"><code>JOB_POOL_COMPILE</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/job_pool_link#prop_tgt:JOB_POOL_LINK\" title=\"JOB_POOL_LINK\" id=\"index-0-prop_tgt:JOB_POOL_LINK\"><code>JOB_POOL_LINK</code></a>.</p> <p>Build targets provided by CMake that are meant for individual interactive use, such as <code>install</code>, are placed in the <code>console</code> pool automatically.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/JOB_POOLS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/JOB_POOLS.html</a>\n  </p>\n</div>\n","prop_gbl/predefined_targets_folder":"<h1 id=\"prop_gbl:PREDEFINED_TARGETS_FOLDER\">PREDEFINED_TARGETS_FOLDER</h1> <p id=\"predefined-targets-folder\">Name of FOLDER for targets that are added automatically by CMake.</p> <p>If not set, CMake uses “CMakePredefinedTargets” as a default value for this property. Targets such as INSTALL, PACKAGE and RUN_TESTS will be organized into this FOLDER. See also the documentation for the FOLDER target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/PREDEFINED_TARGETS_FOLDER.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/PREDEFINED_TARGETS_FOLDER.html</a>\n  </p>\n</div>\n","prop_gbl/rule_launch_custom":"<h1 id=\"prop_gbl:RULE_LAUNCH_CUSTOM\">RULE_LAUNCH_CUSTOM</h1> <p id=\"rule-launch-custom\">Specify a launcher for custom rules.</p> <p><a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> and the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a> generator prefix custom commands with the given launcher command line. This is intended to allow launchers to intercept build problems with high granularity. Other generators ignore this property because their underlying build systems provide no hook to wrap individual commands with a launcher.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/RULE_LAUNCH_CUSTOM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/RULE_LAUNCH_CUSTOM.html</a>\n  </p>\n</div>\n","prop_gbl/eclipse_extra_natures":"<h1 id=\"prop_gbl:ECLIPSE_EXTRA_NATURES\">ECLIPSE_EXTRA_NATURES</h1> <p id=\"eclipse-extra-natures\">List of natures to add to the generated Eclipse project file.</p> <p>Eclipse projects specify language plugins by using natures. This property should be set to the unique identifier for a nature (which looks like a Java package name).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/ECLIPSE_EXTRA_NATURES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/ECLIPSE_EXTRA_NATURES.html</a>\n  </p>\n</div>\n","prop_gbl/rule_launch_compile":"<h1 id=\"prop_gbl:RULE_LAUNCH_COMPILE\">RULE_LAUNCH_COMPILE</h1> <p id=\"rule-launch-compile\">Specify a launcher for compile rules.</p> <p><a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> and the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a> generator prefix compiler commands with the given launcher command line. This is intended to allow launchers to intercept build problems with high granularity. Other generators ignore this property because their underlying build systems provide no hook to wrap individual commands with a launcher.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/RULE_LAUNCH_COMPILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/RULE_LAUNCH_COMPILE.html</a>\n  </p>\n</div>\n","prop_gbl/rule_launch_link":"<h1 id=\"prop_gbl:RULE_LAUNCH_LINK\">RULE_LAUNCH_LINK</h1> <p id=\"rule-launch-link\">Specify a launcher for link rules.</p> <p><a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> and the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a> generator prefix link and archive commands with the given launcher command line. This is intended to allow launchers to intercept build problems with high granularity. Other generators ignore this property because their underlying build systems provide no hook to wrap individual commands with a launcher.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/RULE_LAUNCH_LINK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/RULE_LAUNCH_LINK.html</a>\n  </p>\n</div>\n","prop_gbl/report_undefined_properties":"<h1 id=\"prop_gbl:REPORT_UNDEFINED_PROPERTIES\">REPORT_UNDEFINED_PROPERTIES</h1> <p id=\"report-undefined-properties\">If set, report any undefined properties to this file.</p> <p>If this property is set to a filename then when CMake runs it will report any properties or variables that were accessed but not defined into the filename specified in this property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/REPORT_UNDEFINED_PROPERTIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/REPORT_UNDEFINED_PROPERTIES.html</a>\n  </p>\n</div>\n","prop_gbl/use_folders":"<h1 id=\"prop_gbl:USE_FOLDERS\">USE_FOLDERS</h1> <p id=\"use-folders\">Use the FOLDER target property to organize targets into folders.</p> <p>If not set, CMake treats this property as OFF by default. CMake generators that are capable of organizing into a hierarchy of folders use the values of the FOLDER target property to name those folders. See also the documentation for the FOLDER target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/USE_FOLDERS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/USE_FOLDERS.html</a>\n  </p>\n</div>\n","prop_gbl/target_supports_shared_libs":"<h1 id=\"prop_gbl:TARGET_SUPPORTS_SHARED_LIBS\">TARGET_SUPPORTS_SHARED_LIBS</h1> <p id=\"target-supports-shared-libs\">Does the target platform support shared libraries.</p> <p>TARGET_SUPPORTS_SHARED_LIBS is a boolean specifying whether the target platform supports shared libraries. Basically all current general general purpose OS do so, the exception are usually embedded systems with no or special OSs.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/TARGET_SUPPORTS_SHARED_LIBS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/TARGET_SUPPORTS_SHARED_LIBS.html</a>\n  </p>\n</div>\n","prop_dir/additional_make_clean_files":"<h1 id=\"prop_dir:ADDITIONAL_MAKE_CLEAN_FILES\">ADDITIONAL_MAKE_CLEAN_FILES</h1> <p id=\"additional-make-clean-files\">Additional files to clean during the make clean stage.</p> <p>A list of files that will be cleaned as a part of the “make clean” stage.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/ADDITIONAL_MAKE_CLEAN_FILES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/ADDITIONAL_MAKE_CLEAN_FILES.html</a>\n  </p>\n</div>\n","prop_dir/clean_no_custom":"<h1 id=\"prop_dir:CLEAN_NO_CUSTOM\">CLEAN_NO_CUSTOM</h1> <p id=\"clean-no-custom\">Set to true to tell <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> not to remove the outputs of custom commands for this directory during the <code>make clean</code> operation. This is ignored on other generators because it is not possible to implement.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/CLEAN_NO_CUSTOM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/CLEAN_NO_CUSTOM.html</a>\n  </p>\n</div>\n","prop_dir/cache_variables":"<h1 id=\"prop_dir:CACHE_VARIABLES\">CACHE_VARIABLES</h1> <p id=\"cache-variables\">List of cache variables available in the current directory.</p> <p>This read-only property specifies the list of CMake cache variables currently defined. It is intended for debugging purposes.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/CACHE_VARIABLES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/CACHE_VARIABLES.html</a>\n  </p>\n</div>\n","prop_dir/cmake_configure_depends":"<h1 id=\"prop_dir:CMAKE_CONFIGURE_DEPENDS\">CMAKE_CONFIGURE_DEPENDS</h1> <p id=\"cmake-configure-depends\">Tell CMake about additional input files to the configuration process. If any named file is modified the build system will re-run CMake to re-configure the file and generate the build system again.</p> <p>Specify files as a semicolon-separated list of paths. Relative paths are interpreted as relative to the current source directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/CMAKE_CONFIGURE_DEPENDS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/CMAKE_CONFIGURE_DEPENDS.html</a>\n  </p>\n</div>\n","prop_dir/compile_definitions":"<h1 id=\"prop_dir:COMPILE_DEFINITIONS\">COMPILE_DEFINITIONS</h1> <p id=\"compile-definitions\">Preprocessor definitions for compiling a directory’s sources.</p> <p>This property specifies the list of options given so far to the <a class=\"reference internal\" href=\"../command/add_definitions#command:add_definitions\" title=\"add_definitions\" id=\"index-0-command:add_definitions\"><code>add_definitions()</code></a> command.</p> <p>The <code>COMPILE_DEFINITIONS</code> property may be set to a semicolon-separated list of preprocessor definitions using the syntax <code>VAR</code> or <code>VAR=value</code>. Function-style definitions are not supported. CMake will automatically escape the value correctly for the native build system (note that CMake language syntax may require escapes to specify some values).</p> <p>This property will be initialized in each directory by its value in the directory’s parent.</p> <p>CMake will automatically drop some definitions that are not supported by the native build tool. The VS6 IDE does not support definition values with spaces (but NMake does).</p> <p>Disclaimer: Most native build tools have poor support for escaping certain values. CMake has work-arounds for many cases but some values may just not be possible to pass correctly. If a value does not seem to be escaped correctly, do not attempt to work-around the problem by adding escape sequences to the value. Your work-around may break in a future version of CMake that has improved escape support. Instead consider defining the macro in a (configured) header file. Then report the limitation. Known limitations include:</p> <pre data-language=\"python\">#          - broken almost everywhere\n;          - broken in VS IDE 7.0 and Borland Makefiles\n,          - broken in VS IDE\n%          - broken in some cases in NMake\n&amp; |        - broken in some cases on MinGW\n^ &lt; &gt; \\\"   - broken in most Make tools on Windows\n</pre> <p>CMake does not reject these values outright because they do work in some cases. Use with caution.</p> <p>Contents of <code>COMPILE_DEFINITIONS</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p> <p>The corresponding <a class=\"reference internal\" href=\"#\" title=\"COMPILE_DEFINITIONS_&lt;CONFIG&gt;\" id=\"index-0-prop_dir:COMPILE_DEFINITIONS_&lt;CONFIG&gt;\"><code>COMPILE_DEFINITIONS_&lt;CONFIG&gt;</code></a> property may be set to specify per-configuration definitions. Generator expressions should be preferred instead of setting the alternative property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/COMPILE_DEFINITIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/COMPILE_DEFINITIONS.html</a>\n  </p>\n</div>\n","prop_dir/compile_options":"<h1 id=\"prop_dir:COMPILE_OPTIONS\">COMPILE_OPTIONS</h1> <p id=\"compile-options\">List of options to pass to the compiler.</p> <p>This property holds a <a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of options given so far to the <a class=\"reference internal\" href=\"../command/add_compile_options#command:add_compile_options\" title=\"add_compile_options\" id=\"index-0-command:add_compile_options\"><code>add_compile_options()</code></a> command.</p> <p>This property is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/compile_options#prop_tgt:COMPILE_OPTIONS\" title=\"COMPILE_OPTIONS\" id=\"index-0-prop_tgt:COMPILE_OPTIONS\"><code>COMPILE_OPTIONS</code></a> target property when a target is created, which is used by the generators to set the options for the compiler.</p> <p>Contents of <code>COMPILE_OPTIONS</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/COMPILE_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/COMPILE_OPTIONS.html</a>\n  </p>\n</div>\n","prop_dir/definitions":"<h1 id=\"prop_dir:DEFINITIONS\">DEFINITIONS</h1> <p id=\"definitions\">For CMake 2.4 compatibility only. Use <a class=\"reference internal\" href=\"compile_definitions#prop_dir:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_dir:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> instead.</p> <p>This read-only property specifies the list of flags given so far to the <a class=\"reference internal\" href=\"../command/add_definitions#command:add_definitions\" title=\"add_definitions\" id=\"index-0-command:add_definitions\"><code>add_definitions()</code></a> command. It is intended for debugging purposes. Use the <a class=\"reference internal\" href=\"compile_definitions#prop_dir:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-1-prop_dir:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> directory property instead.</p> <p>This built-in read-only property does not exist if policy <a class=\"reference internal\" href=\"../policy/cmp0059#policy:CMP0059\" title=\"CMP0059\" id=\"index-0-policy:CMP0059\"><code>CMP0059</code></a> is set to <code>NEW</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/DEFINITIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/DEFINITIONS.html</a>\n  </p>\n</div>\n","prop_dir/exclude_from_all":"<h1 id=\"prop_dir:EXCLUDE_FROM_ALL\">EXCLUDE_FROM_ALL</h1> <p id=\"exclude-from-all\">Exclude the directory from the all target of its parent.</p> <p>A property on a directory that indicates if its targets are excluded from the default build target. If it is not, then with a Makefile for example typing make will cause the targets to be built. The same concept applies to the default build of other generators.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/EXCLUDE_FROM_ALL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/EXCLUDE_FROM_ALL.html</a>\n  </p>\n</div>\n","prop_dir/implicit_depends_include_transform":"<h1 id=\"prop_dir:IMPLICIT_DEPENDS_INCLUDE_TRANSFORM\">IMPLICIT_DEPENDS_INCLUDE_TRANSFORM</h1> <p id=\"implicit-depends-include-transform\">Specify #include line transforms for dependencies in a directory.</p> <p>This property specifies rules to transform macro-like #include lines during implicit dependency scanning of C and C++ source files. The list of rules must be semicolon-separated with each entry of the form “A_MACRO(%)=value-with-%” (the % must be literal). During dependency scanning occurrences of A_MACRO(...) on #include lines will be replaced by the value given with the macro argument substituted for ‘%’. For example, the entry</p> <pre data-language=\"python\">MYDIR(%)=&lt;mydir/%&gt;\n</pre> <p>will convert lines of the form</p> <pre data-language=\"python\">#include MYDIR(myheader.h)\n</pre> <p>to</p> <pre data-language=\"python\">#include &lt;mydir/myheader.h&gt;\n</pre> <p>allowing the dependency to be followed.</p> <p>This property applies to sources in all targets within a directory. The property value is initialized in each directory by its value in the directory’s parent.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.html</a>\n  </p>\n</div>\n","prop_gbl/rule_messages":"<h1 id=\"prop_gbl:RULE_MESSAGES\">RULE_MESSAGES</h1> <p id=\"rule-messages\">Specify whether to report a message for each make rule.</p> <p>This property specifies whether Makefile generators should add a progress message describing what each build rule does. If the property is not set the default is ON. Set the property to OFF to disable granular messages and report only as each target completes. This is intended to allow scripted builds to avoid the build time cost of detailed reports. If a CMAKE_RULE_MESSAGES cache entry exists its value initializes the value of this property. Non-Makefile generators currently ignore this property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/RULE_MESSAGES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/RULE_MESSAGES.html</a>\n  </p>\n</div>\n","prop_gbl/target_archives_may_be_shared_libs":"<h1 id=\"prop_gbl:TARGET_ARCHIVES_MAY_BE_SHARED_LIBS\">TARGET_ARCHIVES_MAY_BE_SHARED_LIBS</h1> <p id=\"target-archives-may-be-shared-libs\">Set if shared libraries may be named like archives.</p> <p>On AIX shared libraries may be named “lib&lt;name&gt;.a”. This property is set to true on such platforms.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/TARGET_ARCHIVES_MAY_BE_SHARED_LIBS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/TARGET_ARCHIVES_MAY_BE_SHARED_LIBS.html</a>\n  </p>\n</div>\n","prop_gbl/target_messages":"<h1 id=\"prop_gbl:TARGET_MESSAGES\">TARGET_MESSAGES</h1> <p id=\"target-messages\">Specify whether to report the completion of each target.</p> <p>This property specifies whether <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> should add a progress message describing that each target has been completed. If the property is not set the default is <code>ON</code>. Set the property to <code>OFF</code> to disable target completion messages.</p> <p>This option is intended to reduce build output when little or no work needs to be done to bring the build tree up to date.</p> <p>If a <code>CMAKE_TARGET_MESSAGES</code> cache entry exists its value initializes the value of this property.</p> <p>Non-Makefile generators currently ignore this property.</p> <p>See the counterpart property <a class=\"reference internal\" href=\"rule_messages#prop_gbl:RULE_MESSAGES\" title=\"RULE_MESSAGES\" id=\"index-0-prop_gbl:RULE_MESSAGES\"><code>RULE_MESSAGES</code></a> to disable everything except for target completion messages.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_gbl/TARGET_MESSAGES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_gbl/TARGET_MESSAGES.html</a>\n  </p>\n</div>\n","prop_dir/include_directories":"<h1 id=\"prop_dir:INCLUDE_DIRECTORIES\">INCLUDE_DIRECTORIES</h1> <p id=\"include-directories\">List of preprocessor include file search directories.</p> <p>This property specifies the list of directories given so far to the <a class=\"reference internal\" href=\"../command/include_directories#command:include_directories\" title=\"include_directories\" id=\"index-0-command:include_directories\"><code>include_directories()</code></a> command.</p> <p>This property is used to populate the <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a> target property, which is used by the generators to set the include directories for the compiler.</p> <p>In addition to accepting values from that command, values may be set directly on any directory using the <a class=\"reference internal\" href=\"../command/set_property#command:set_property\" title=\"set_property\" id=\"index-0-command:set_property\"><code>set_property()</code></a> command. A directory gets its initial value from its parent directory if it has one. The intial value of the <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-1-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a> target property comes from the value of this property. Both directory and target property values are adjusted by calls to the <a class=\"reference internal\" href=\"../command/include_directories#command:include_directories\" title=\"include_directories\" id=\"index-1-command:include_directories\"><code>include_directories()</code></a> command.</p> <p>The target property values are used by the generators to set the include paths for the compiler.</p> <p>Contents of <code>INCLUDE_DIRECTORIES</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/INCLUDE_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/INCLUDE_DIRECTORIES.html</a>\n  </p>\n</div>\n","prop_dir/include_regular_expression":"<h1 id=\"prop_dir:INCLUDE_REGULAR_EXPRESSION\">INCLUDE_REGULAR_EXPRESSION</h1> <p id=\"include-regular-expression\">Include file scanning regular expression.</p> <p>This property specifies the regular expression used during dependency scanning to match include files that should be followed. See the <a class=\"reference internal\" href=\"../command/include_regular_expression#command:include_regular_expression\" title=\"include_regular_expression\" id=\"index-0-command:include_regular_expression\"><code>include_regular_expression()</code></a> command for a high-level interface to set this property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/INCLUDE_REGULAR_EXPRESSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/INCLUDE_REGULAR_EXPRESSION.html</a>\n  </p>\n</div>\n","prop_dir/interprocedural_optimization_config":"<h1 id=\"prop_dir:INTERPROCEDURAL_OPTIMIZATION_&lt;CONFIG&gt;\">INTERPROCEDURAL_OPTIMIZATION_&lt;CONFIG&gt;</h1> <p id=\"interprocedural-optimization-config\">Per-configuration interprocedural optimization for a directory.</p> <p>This is a per-configuration version of INTERPROCEDURAL_OPTIMIZATION. If set, this property overrides the generic property for the named configuration.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/INTERPROCEDURAL_OPTIMIZATION_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/INTERPROCEDURAL_OPTIMIZATION_CONFIG.html</a>\n  </p>\n</div>\n","prop_dir/interprocedural_optimization":"<h1 id=\"prop_dir:INTERPROCEDURAL_OPTIMIZATION\">INTERPROCEDURAL_OPTIMIZATION</h1> <p id=\"interprocedural-optimization\">Enable interprocedural optimization for targets in a directory.</p> <p>If set to true, enables interprocedural optimizations if they are known to be supported by the compiler.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/INTERPROCEDURAL_OPTIMIZATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/INTERPROCEDURAL_OPTIMIZATION.html</a>\n  </p>\n</div>\n","prop_dir/link_directories":"<h1 id=\"prop_dir:LINK_DIRECTORIES\">LINK_DIRECTORIES</h1> <p id=\"link-directories\">List of linker search directories.</p> <p>This read-only property specifies the list of directories given so far to the link_directories command. It is intended for debugging purposes.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/LINK_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/LINK_DIRECTORIES.html</a>\n  </p>\n</div>\n","prop_dir/listfile_stack":"<h1 id=\"prop_dir:LISTFILE_STACK\">LISTFILE_STACK</h1> <p id=\"listfile-stack\">The current stack of listfiles being processed.</p> <p>This property is mainly useful when trying to debug errors in your CMake scripts. It returns a list of what list files are currently being processed, in order. So if one listfile does an INCLUDE command then that is effectively pushing the included listfile onto the stack.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/LISTFILE_STACK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/LISTFILE_STACK.html</a>\n  </p>\n</div>\n","prop_dir/macros":"<h1 id=\"prop_dir:MACROS\">MACROS</h1> <p id=\"macros\">List of macro commands available in the current directory.</p> <p>This read-only property specifies the list of CMake macros currently defined. It is intended for debugging purposes. See the macro command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/MACROS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/MACROS.html</a>\n  </p>\n</div>\n","prop_dir/parent_directory":"<h1 id=\"prop_dir:PARENT_DIRECTORY\">PARENT_DIRECTORY</h1> <p id=\"parent-directory\">Source directory that added current subdirectory.</p> <p>This read-only property specifies the source directory that added the current source directory as a subdirectory of the build. In the top-level directory the value is the empty-string.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/PARENT_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/PARENT_DIRECTORY.html</a>\n  </p>\n</div>\n","prop_dir/rule_launch_compile":"<h1 id=\"prop_dir:RULE_LAUNCH_COMPILE\">RULE_LAUNCH_COMPILE</h1> <p id=\"rule-launch-compile\">Specify a launcher for compile rules.</p> <p>See the global property of the same name for details. This overrides the global property for a directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/RULE_LAUNCH_COMPILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/RULE_LAUNCH_COMPILE.html</a>\n  </p>\n</div>\n","prop_dir/rule_launch_custom":"<h1 id=\"prop_dir:RULE_LAUNCH_CUSTOM\">RULE_LAUNCH_CUSTOM</h1> <p id=\"rule-launch-custom\">Specify a launcher for custom rules.</p> <p>See the global property of the same name for details. This overrides the global property for a directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/RULE_LAUNCH_CUSTOM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/RULE_LAUNCH_CUSTOM.html</a>\n  </p>\n</div>\n","prop_dir/rule_launch_link":"<h1 id=\"prop_dir:RULE_LAUNCH_LINK\">RULE_LAUNCH_LINK</h1> <p id=\"rule-launch-link\">Specify a launcher for link rules.</p> <p>See the global property of the same name for details. This overrides the global property for a directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/RULE_LAUNCH_LINK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/RULE_LAUNCH_LINK.html</a>\n  </p>\n</div>\n","prop_dir/test_include_file":"<h1 id=\"prop_dir:TEST_INCLUDE_FILE\">TEST_INCLUDE_FILE</h1> <p id=\"test-include-file\">A cmake file that will be included when ctest is run.</p> <p>If you specify TEST_INCLUDE_FILE, that file will be included and processed when ctest is run on the directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/TEST_INCLUDE_FILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/TEST_INCLUDE_FILE.html</a>\n  </p>\n</div>\n","prop_dir/vs_global_section_pre_section":"<h1 id=\"prop_dir:VS_GLOBAL_SECTION_PRE_&lt;section&gt;\">VS_GLOBAL_SECTION_PRE_&lt;section&gt;</h1> <p id=\"vs-global-section-pre-section\">Specify a preSolution global section in Visual Studio.</p> <p>Setting a property like this generates an entry of the following form in the solution file:</p> <pre data-language=\"python\">GlobalSection(&lt;section&gt;) = preSolution\n  &lt;contents based on property value&gt;\nEndGlobalSection\n</pre> <p>The property must be set to a semicolon-separated list of key=value pairs. Each such pair will be transformed into an entry in the solution global section. Whitespace around key and value is ignored. List elements which do not contain an equal sign are skipped.</p> <p>This property only works for Visual Studio 7 and above; it is ignored on other generators. The property only applies when set on a directory whose CMakeLists.txt contains a project() command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/VS_GLOBAL_SECTION_PRE_section.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/VS_GLOBAL_SECTION_PRE_section.html</a>\n  </p>\n</div>\n","prop_dir/variables":"<h1 id=\"prop_dir:VARIABLES\">VARIABLES</h1> <p id=\"variables\">List of variables defined in the current directory.</p> <p>This read-only property specifies the list of CMake variables currently defined. It is intended for debugging purposes.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/VARIABLES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/VARIABLES.html</a>\n  </p>\n</div>\n","prop_dir/vs_global_section_post_section":"<h1 id=\"prop_dir:VS_GLOBAL_SECTION_POST_&lt;section&gt;\">VS_GLOBAL_SECTION_POST_&lt;section&gt;</h1> <p id=\"vs-global-section-post-section\">Specify a postSolution global section in Visual Studio.</p> <p>Setting a property like this generates an entry of the following form in the solution file:</p> <pre data-language=\"python\">GlobalSection(&lt;section&gt;) = postSolution\n  &lt;contents based on property value&gt;\nEndGlobalSection\n</pre> <p>The property must be set to a semicolon-separated list of key=value pairs. Each such pair will be transformed into an entry in the solution global section. Whitespace around key and value is ignored. List elements which do not contain an equal sign are skipped.</p> <p>This property only works for Visual Studio 7 and above; it is ignored on other generators. The property only applies when set on a directory whose CMakeLists.txt contains a project() command.</p> <p>Note that CMake generates postSolution sections ExtensibilityGlobals and ExtensibilityAddIns by default. If you set the corresponding property, it will override the default section. For example, setting VS_GLOBAL_SECTION_POST_ExtensibilityGlobals will override the default contents of the ExtensibilityGlobals section, while keeping ExtensibilityAddIns on its default.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/VS_GLOBAL_SECTION_POST_section.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/VS_GLOBAL_SECTION_POST_section.html</a>\n  </p>\n</div>\n","prop_tgt/android_api_min":"<h1 id=\"prop_tgt:ANDROID_API_MIN\">ANDROID_API_MIN</h1> <p id=\"android-api-min\">Set the Android MIN API version (e.g. <code>9</code>). The version number must be a positive decimal integer. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_api_min#variable:CMAKE_ANDROID_API_MIN\" title=\"CMAKE_ANDROID_API_MIN\" id=\"index-0-variable:CMAKE_ANDROID_API_MIN\"><code>CMAKE_ANDROID_API_MIN</code></a> variable if it is set when a target is created. Native code builds using this API version.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_API_MIN.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_API_MIN.html</a>\n  </p>\n</div>\n","prop_tgt/aliased_target":"<h1 id=\"prop_tgt:ALIASED_TARGET\">ALIASED_TARGET</h1> <p id=\"aliased-target\">Name of target aliased by this target.</p> <p>If this is an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#alias-targets\"><span>Alias Target</span></a>, this property contains the name of the target aliased.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ALIASED_TARGET.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ALIASED_TARGET.html</a>\n  </p>\n</div>\n","prop_tgt/android_ant_additional_options":"<h1 id=\"prop_tgt:ANDROID_ANT_ADDITIONAL_OPTIONS\">ANDROID_ANT_ADDITIONAL_OPTIONS</h1> <p id=\"android-ant-additional-options\">Set the additional options for Android Ant build system. This is a string value containing all command line options for the Ant build. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_ant_additional_options#variable:CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS\" title=\"CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS\" id=\"index-0-variable:CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS\"><code>CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_ANT_ADDITIONAL_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_ANT_ADDITIONAL_OPTIONS.html</a>\n  </p>\n</div>\n","prop_tgt/android_api":"<h1 id=\"prop_tgt:ANDROID_API\">ANDROID_API</h1> <p id=\"android-api\">Set the Android Target API version (e.g. <code>15</code>). The version number must be a positive decimal integer. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_api#variable:CMAKE_ANDROID_API\" title=\"CMAKE_ANDROID_API\" id=\"index-0-variable:CMAKE_ANDROID_API\"><code>CMAKE_ANDROID_API</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_API.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_API.html</a>\n  </p>\n</div>\n","prop_tgt/android_arch":"<h1 id=\"prop_tgt:ANDROID_ARCH\">ANDROID_ARCH</h1> <p id=\"android-arch\">Set the Android target architecture.</p> <p>This is a string property that could be set to the one of the following values:</p> <ul class=\"simple\"> <li>\n<code>armv7-a</code>: “ARMv7-A (armv7-a)”</li> <li>\n<code>armv7-a-hard</code>: “ARMv7-A, hard-float ABI (armv7-a)”</li> <li>\n<code>arm64-v8a</code>: “ARMv8-A, 64bit (arm64-v8a)”</li> <li>\n<code>x86</code>: “x86 (x86)”</li> <li>\n<code>x86_64</code>: “x86_64 (x86_64)”</li> </ul> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_arch#variable:CMAKE_ANDROID_ARCH\" title=\"CMAKE_ANDROID_ARCH\" id=\"index-0-variable:CMAKE_ANDROID_ARCH\"><code>CMAKE_ANDROID_ARCH</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_ARCH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_ARCH.html</a>\n  </p>\n</div>\n","prop_tgt/android_assets_directories":"<h1 id=\"prop_tgt:ANDROID_ASSETS_DIRECTORIES\">ANDROID_ASSETS_DIRECTORIES</h1> <p id=\"android-assets-directories\">Set the Android assets directories to copy into the main assets folder before build. This a string property that contains the directory paths separated by semicolon. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_assets_directories#variable:CMAKE_ANDROID_ASSETS_DIRECTORIES\" title=\"CMAKE_ANDROID_ASSETS_DIRECTORIES\" id=\"index-0-variable:CMAKE_ANDROID_ASSETS_DIRECTORIES\"><code>CMAKE_ANDROID_ASSETS_DIRECTORIES</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_ASSETS_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_ASSETS_DIRECTORIES.html</a>\n  </p>\n</div>\n","prop_tgt/android_gui":"<h1 id=\"prop_tgt:ANDROID_GUI\">ANDROID_GUI</h1> <p id=\"android-gui\">Build an executable as an application package on Android.</p> <p>When this property is set to true the executable when built for Android will be created as an application package. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_gui#variable:CMAKE_ANDROID_GUI\" title=\"CMAKE_ANDROID_GUI\" id=\"index-0-variable:CMAKE_ANDROID_GUI\"><code>CMAKE_ANDROID_GUI</code></a> variable if it is set when a target is created.</p> <p>Add the <code>AndroidManifest.xml</code> source file explicitly to the target <a class=\"reference internal\" href=\"../command/add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> command invocation to specify the root directory of the application package source.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_GUI.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_GUI.html</a>\n  </p>\n</div>\n","prop_tgt/android_jar_dependencies":"<h1 id=\"prop_tgt:ANDROID_JAR_DEPENDENCIES\">ANDROID_JAR_DEPENDENCIES</h1> <p id=\"android-jar-dependencies\">Set the Android property that specifies JAR dependencies. This is a string value property. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_jar_dependencies#variable:CMAKE_ANDROID_JAR_DEPENDENCIES\" title=\"CMAKE_ANDROID_JAR_DEPENDENCIES\" id=\"index-0-variable:CMAKE_ANDROID_JAR_DEPENDENCIES\"><code>CMAKE_ANDROID_JAR_DEPENDENCIES</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_JAR_DEPENDENCIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_JAR_DEPENDENCIES.html</a>\n  </p>\n</div>\n","prop_tgt/android_jar_directories":"<h1 id=\"prop_tgt:ANDROID_JAR_DIRECTORIES\">ANDROID_JAR_DIRECTORIES</h1> <p id=\"android-jar-directories\">Set the Android property that specifies directories to search for the JAR libraries.</p> <p>This a string property that contains the directory paths separated by semicolons. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_jar_directories#variable:CMAKE_ANDROID_JAR_DIRECTORIES\" title=\"CMAKE_ANDROID_JAR_DIRECTORIES\" id=\"index-0-variable:CMAKE_ANDROID_JAR_DIRECTORIES\"><code>CMAKE_ANDROID_JAR_DIRECTORIES</code></a> variable if it is set when a target is created.</p> <p>Contents of <code>ANDROID_JAR_DIRECTORIES</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_JAR_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_JAR_DIRECTORIES.html</a>\n  </p>\n</div>\n","prop_tgt/android_java_source_dir":"<h1 id=\"prop_tgt:ANDROID_JAVA_SOURCE_DIR\">ANDROID_JAVA_SOURCE_DIR</h1> <p id=\"android-java-source-dir\">Set the Android property that defines the Java source code root directories. This a string property that contains the directory paths separated by semicolon. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_java_source_dir#variable:CMAKE_ANDROID_JAVA_SOURCE_DIR\" title=\"CMAKE_ANDROID_JAVA_SOURCE_DIR\" id=\"index-0-variable:CMAKE_ANDROID_JAVA_SOURCE_DIR\"><code>CMAKE_ANDROID_JAVA_SOURCE_DIR</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_JAVA_SOURCE_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_JAVA_SOURCE_DIR.html</a>\n  </p>\n</div>\n","prop_tgt/android_native_lib_dependencies":"<h1 id=\"prop_tgt:ANDROID_NATIVE_LIB_DEPENDENCIES\">ANDROID_NATIVE_LIB_DEPENDENCIES</h1> <p id=\"android-native-lib-dependencies\">Set the Android property that specifies the .so dependencies. This is a string property.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_native_lib_dependencies#variable:CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES\" title=\"CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES\" id=\"index-0-variable:CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES\"><code>CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES</code></a> variable if it is set when a target is created.</p> <p>Contents of <code>ANDROID_NATIVE_LIB_DEPENDENCIES</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_NATIVE_LIB_DEPENDENCIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_NATIVE_LIB_DEPENDENCIES.html</a>\n  </p>\n</div>\n","prop_tgt/android_process_max":"<h1 id=\"prop_tgt:ANDROID_PROCESS_MAX\">ANDROID_PROCESS_MAX</h1> <p id=\"android-process-max\">Set the Android property that defines the maximum number of a parallel Android NDK compiler processes (e.g. <code>4</code>). This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_process_max#variable:CMAKE_ANDROID_PROCESS_MAX\" title=\"CMAKE_ANDROID_PROCESS_MAX\" id=\"index-0-variable:CMAKE_ANDROID_PROCESS_MAX\"><code>CMAKE_ANDROID_PROCESS_MAX</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_PROCESS_MAX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_PROCESS_MAX.html</a>\n  </p>\n</div>\n","prop_tgt/android_native_lib_directories":"<h1 id=\"prop_tgt:ANDROID_NATIVE_LIB_DIRECTORIES\">ANDROID_NATIVE_LIB_DIRECTORIES</h1> <p id=\"android-native-lib-directories\">Set the Android property that specifies directories to search for the .so libraries.</p> <p>This a string property that contains the directory paths separated by semicolons.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_native_lib_directories#variable:CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES\" title=\"CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES\" id=\"index-0-variable:CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES\"><code>CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES</code></a> variable if it is set when a target is created.</p> <p>Contents of <code>ANDROID_NATIVE_LIB_DIRECTORIES</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_NATIVE_LIB_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_NATIVE_LIB_DIRECTORIES.html</a>\n  </p>\n</div>\n","prop_tgt/android_proguard":"<h1 id=\"prop_tgt:ANDROID_PROGUARD\">ANDROID_PROGUARD</h1> <p id=\"android-proguard\">When this property is set to true that enables the ProGuard tool to shrink, optimize, and obfuscate the code by removing unused code and renaming classes, fields, and methods with semantically obscure names. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_proguard#variable:CMAKE_ANDROID_PROGUARD\" title=\"CMAKE_ANDROID_PROGUARD\" id=\"index-0-variable:CMAKE_ANDROID_PROGUARD\"><code>CMAKE_ANDROID_PROGUARD</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_PROGUARD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_PROGUARD.html</a>\n  </p>\n</div>\n","prop_tgt/android_proguard_config_path":"<h1 id=\"prop_tgt:ANDROID_PROGUARD_CONFIG_PATH\">ANDROID_PROGUARD_CONFIG_PATH</h1> <p id=\"android-proguard-config-path\">Set the Android property that specifies the location of the ProGuard config file. Leave empty to use the default one. This a string property that contains the path to ProGuard config file. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_proguard_config_path#variable:CMAKE_ANDROID_PROGUARD_CONFIG_PATH\" title=\"CMAKE_ANDROID_PROGUARD_CONFIG_PATH\" id=\"index-0-variable:CMAKE_ANDROID_PROGUARD_CONFIG_PATH\"><code>CMAKE_ANDROID_PROGUARD_CONFIG_PATH</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_PROGUARD_CONFIG_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_PROGUARD_CONFIG_PATH.html</a>\n  </p>\n</div>\n","prop_tgt/android_secure_props_path":"<h1 id=\"prop_tgt:ANDROID_SECURE_PROPS_PATH\">ANDROID_SECURE_PROPS_PATH</h1> <p id=\"android-secure-props-path\">Set the Android property that states the location of the secure properties file. This is a string property that contains the file path. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_secure_props_path#variable:CMAKE_ANDROID_SECURE_PROPS_PATH\" title=\"CMAKE_ANDROID_SECURE_PROPS_PATH\" id=\"index-0-variable:CMAKE_ANDROID_SECURE_PROPS_PATH\"><code>CMAKE_ANDROID_SECURE_PROPS_PATH</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_SECURE_PROPS_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_SECURE_PROPS_PATH.html</a>\n  </p>\n</div>\n","prop_tgt/android_skip_ant_step":"<h1 id=\"prop_tgt:ANDROID_SKIP_ANT_STEP\">ANDROID_SKIP_ANT_STEP</h1> <p id=\"android-skip-ant-step\">Set the Android property that defines whether or not to skip the Ant build step. This is a boolean property initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_android_skip_ant_step#variable:CMAKE_ANDROID_SKIP_ANT_STEP\" title=\"CMAKE_ANDROID_SKIP_ANT_STEP\" id=\"index-0-variable:CMAKE_ANDROID_SKIP_ANT_STEP\"><code>CMAKE_ANDROID_SKIP_ANT_STEP</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_SKIP_ANT_STEP.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_SKIP_ANT_STEP.html</a>\n  </p>\n</div>\n","prop_tgt/android_stl_type":"<h1 id=\"prop_tgt:ANDROID_STL_TYPE\">ANDROID_STL_TYPE</h1> <p id=\"android-stl-type\">Set the Android property that defines the type of STL support for the project. This is a string property that could set to the one of the following values: <code>none</code> e.g. “No C++ Support” <code>system</code> e.g. “Minimal C++ without STL” <code>gabi++_static</code> e.g. “GAbi++ Static” <code>gabi++_shared</code> e.g. “GAbi++ Shared” <code>gnustl_static</code> e.g. “GNU libstdc++ Static” <code>gnustl_shared</code> e.g. “GNU libstdc++ Shared” <code>stlport_static</code> e.g. “STLport Static” <code>stlport_shared</code> e.g. “STLport Shared” This property is initialized by the value of the variable:<cite>CMAKE_ANDROID_STL_TYPE</cite> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_STL_TYPE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ANDROID_STL_TYPE.html</a>\n  </p>\n</div>\n","prop_tgt/archive_output_directory_config":"<h1 id=\"prop_tgt:ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\">ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</h1> <p id=\"archive-output-directory-config\">Per-configuration output directory for <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#archive-output-artifacts\"><span>ARCHIVE</span></a> target files.</p> <p>This is a per-configuration version of the <a class=\"reference internal\" href=\"archive_output_directory#prop_tgt:ARCHIVE_OUTPUT_DIRECTORY\" title=\"ARCHIVE_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:ARCHIVE_OUTPUT_DIRECTORY\"><code>ARCHIVE_OUTPUT_DIRECTORY</code></a> target property, but multi-configuration generators (VS, Xcode) do NOT append a per-configuration subdirectory to the specified directory. This property is initialized by the value of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-variable:CMAKE_ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>CMAKE_ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> variable if it is set when a target is created.</p> <p>Contents of <code>ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code> may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ARCHIVE_OUTPUT_DIRECTORY_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ARCHIVE_OUTPUT_DIRECTORY_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/archive_output_directory":"<h1 id=\"prop_tgt:ARCHIVE_OUTPUT_DIRECTORY\">ARCHIVE_OUTPUT_DIRECTORY</h1> <p id=\"archive-output-directory\">Output directory in which to build <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#archive-output-artifacts\"><span>ARCHIVE</span></a> target files.</p> <p>This property specifies the directory into which archive target files should be built. The property value may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>. Multi-configuration generators (VS, Xcode) append a per-configuration subdirectory to the specified directory unless a generator expression is used.</p> <p>This property is initialized by the value of the variable CMAKE_ARCHIVE_OUTPUT_DIRECTORY if it is set when a target is created.</p> <p>See also the <a class=\"reference internal\" href=\"#\" title=\"ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ARCHIVE_OUTPUT_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ARCHIVE_OUTPUT_DIRECTORY.html</a>\n  </p>\n</div>\n","prop_tgt/archive_output_name_config":"<h1 id=\"prop_tgt:ARCHIVE_OUTPUT_NAME_&lt;CONFIG&gt;\">ARCHIVE_OUTPUT_NAME_&lt;CONFIG&gt;</h1> <p id=\"archive-output-name-config\">Per-configuration output name for <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#archive-output-artifacts\"><span>ARCHIVE</span></a> target files.</p> <p>This is the configuration-specific version of the <a class=\"reference internal\" href=\"archive_output_name#prop_tgt:ARCHIVE_OUTPUT_NAME\" title=\"ARCHIVE_OUTPUT_NAME\" id=\"index-0-prop_tgt:ARCHIVE_OUTPUT_NAME\"><code>ARCHIVE_OUTPUT_NAME</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ARCHIVE_OUTPUT_NAME_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ARCHIVE_OUTPUT_NAME_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/archive_output_name":"<h1 id=\"prop_tgt:ARCHIVE_OUTPUT_NAME\">ARCHIVE_OUTPUT_NAME</h1> <p id=\"archive-output-name\">Output name for <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#archive-output-artifacts\"><span>ARCHIVE</span></a> target files.</p> <p>This property specifies the base name for archive target files. It overrides <a class=\"reference internal\" href=\"output_name#prop_tgt:OUTPUT_NAME\" title=\"OUTPUT_NAME\" id=\"index-0-prop_tgt:OUTPUT_NAME\"><code>OUTPUT_NAME</code></a> and <a class=\"reference internal\" href=\"#\" title=\"OUTPUT_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:OUTPUT_NAME_&lt;CONFIG&gt;\"><code>OUTPUT_NAME_&lt;CONFIG&gt;</code></a> properties.</p> <p>See also the <a class=\"reference internal\" href=\"#\" title=\"ARCHIVE_OUTPUT_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:ARCHIVE_OUTPUT_NAME_&lt;CONFIG&gt;\"><code>ARCHIVE_OUTPUT_NAME_&lt;CONFIG&gt;</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ARCHIVE_OUTPUT_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ARCHIVE_OUTPUT_NAME.html</a>\n  </p>\n</div>\n","prop_tgt/autogen_target_depends":"<h1 id=\"prop_tgt:AUTOGEN_TARGET_DEPENDS\">AUTOGEN_TARGET_DEPENDS</h1> <p id=\"autogen-target-depends\">Target dependencies of the corresponding <code>_automoc</code> target.</p> <p>Targets which have their <a class=\"reference internal\" href=\"automoc#prop_tgt:AUTOMOC\" title=\"AUTOMOC\" id=\"index-0-prop_tgt:AUTOMOC\"><code>AUTOMOC</code></a> target <code>ON</code> have a corresponding <code>_automoc</code> target which is used to autogenerate generate moc files. As this <code>_automoc</code> target is created at generate-time, it is not possible to define dependencies of it, such as to create inputs for the <code>moc</code> executable.</p> <p>The <code>AUTOGEN_TARGET_DEPENDS</code> target property can be set instead to a list of dependencies for the <code>_automoc</code> target. The buildsystem will be generated to depend on its contents.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-qt.7#manual:cmake-qt(7)\" title=\"cmake-qt(7)\" id=\"index-0-manual:cmake-qt(7)\"><code>cmake-qt(7)</code></a> manual for more information on using CMake with Qt.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/AUTOGEN_TARGET_DEPENDS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/AUTOGEN_TARGET_DEPENDS.html</a>\n  </p>\n</div>\n","prop_tgt/automoc_moc_options":"<h1 id=\"prop_tgt:AUTOMOC_MOC_OPTIONS\">AUTOMOC_MOC_OPTIONS</h1> <p id=\"automoc-moc-options\">Additional options for moc when using <a class=\"reference internal\" href=\"automoc#prop_tgt:AUTOMOC\" title=\"AUTOMOC\" id=\"index-0-prop_tgt:AUTOMOC\"><code>AUTOMOC</code></a></p> <p>This property is only used if the <a class=\"reference internal\" href=\"automoc#prop_tgt:AUTOMOC\" title=\"AUTOMOC\" id=\"index-1-prop_tgt:AUTOMOC\"><code>AUTOMOC</code></a> property is <code>ON</code> for this target. In this case, it holds additional command line options which will be used when <code>moc</code> is executed during the build, i.e. it is equivalent to the optional <code>OPTIONS</code> argument of the <a class=\"reference internal\" href=\"../module/findqt4#module:FindQt4\" title=\"FindQt4\" id=\"index-0-module:FindQt4\"><code>qt4_wrap_cpp()</code></a> macro.</p> <p>By default it is empty.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-qt.7#manual:cmake-qt(7)\" title=\"cmake-qt(7)\" id=\"index-0-manual:cmake-qt(7)\"><code>cmake-qt(7)</code></a> manual for more information on using CMake with Qt.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/AUTOMOC_MOC_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/AUTOMOC_MOC_OPTIONS.html</a>\n  </p>\n</div>\n","prop_tgt/automoc":"<h1 id=\"prop_tgt:AUTOMOC\">AUTOMOC</h1> <p id=\"automoc\">Should the target be processed with automoc (for Qt projects).</p> <p>AUTOMOC is a boolean specifying whether CMake will handle the Qt <code>moc</code> preprocessor automatically, i.e. without having to use the <a class=\"reference internal\" href=\"../module/findqt4#module:FindQt4\" title=\"FindQt4\" id=\"index-0-module:FindQt4\"><code>QT4_WRAP_CPP()</code></a> or QT5_WRAP_CPP() macro. Currently Qt4 and Qt5 are supported. When this property is set <code>ON</code>, CMake will scan the source files at build time and invoke moc accordingly. If an <code>#include</code> statement like <code>#include \"moc_foo.cpp\"</code> is found, the <code>Q_OBJECT</code> class declaration is expected in the header, and <code>moc</code> is run on the header file. If an <code>#include</code> statement like <code>#include \"foo.moc\"</code> is found, then a <code>Q_OBJECT</code> is expected in the current source file and <code>moc</code> is run on the file itself. Additionally, header files with the same base name (like <code>foo.h</code>) or <code>_p</code> appended to the base name (like <code>foo_p.h</code>) are parsed for <code>Q_OBJECT</code> macros, and if found, <code>moc</code> is also executed on those files. <code>AUTOMOC</code> checks multiple header alternative extensions, such as <code>hpp</code>, <code>hxx</code> etc when searching for headers. The resulting moc files, which are not included as shown above in any of the source files are included in a generated <code>&lt;targetname&gt;_automoc.cpp</code> file, which is compiled as part of the target. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_automoc#variable:CMAKE_AUTOMOC\" title=\"CMAKE_AUTOMOC\" id=\"index-0-variable:CMAKE_AUTOMOC\"><code>CMAKE_AUTOMOC</code></a> variable if it is set when a target is created.</p> <p>Additional command line options for moc can be set via the <a class=\"reference internal\" href=\"automoc_moc_options#prop_tgt:AUTOMOC_MOC_OPTIONS\" title=\"AUTOMOC_MOC_OPTIONS\" id=\"index-0-prop_tgt:AUTOMOC_MOC_OPTIONS\"><code>AUTOMOC_MOC_OPTIONS</code></a> property.</p> <p>By enabling the <a class=\"reference internal\" href=\"../variable/cmake_automoc_relaxed_mode#variable:CMAKE_AUTOMOC_RELAXED_MODE\" title=\"CMAKE_AUTOMOC_RELAXED_MODE\" id=\"index-0-variable:CMAKE_AUTOMOC_RELAXED_MODE\"><code>CMAKE_AUTOMOC_RELAXED_MODE</code></a> variable the rules for searching the files which will be processed by moc can be relaxed. See the documentation for this variable for more details.</p> <p>The global property <a class=\"reference internal\" href=\"../prop_gbl/autogen_targets_folder#prop_gbl:AUTOGEN_TARGETS_FOLDER\" title=\"AUTOGEN_TARGETS_FOLDER\" id=\"index-0-prop_gbl:AUTOGEN_TARGETS_FOLDER\"><code>AUTOGEN_TARGETS_FOLDER</code></a> can be used to group the automoc targets together in an IDE, e.g. in MSVS.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-qt.7#manual:cmake-qt(7)\" title=\"cmake-qt(7)\" id=\"index-0-manual:cmake-qt(7)\"><code>cmake-qt(7)</code></a> manual for more information on using CMake with Qt.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/AUTOMOC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/AUTOMOC.html</a>\n  </p>\n</div>\n","prop_tgt/autouic":"<h1 id=\"prop_tgt:AUTOUIC\">AUTOUIC</h1> <p id=\"autouic\">Should the target be processed with autouic (for Qt projects).</p> <p><code>AUTOUIC</code> is a boolean specifying whether CMake will handle the Qt <code>uic</code> code generator automatically, i.e. without having to use the <a class=\"reference internal\" href=\"../module/findqt4#module:FindQt4\" title=\"FindQt4\" id=\"index-0-module:FindQt4\"><code>QT4_WRAP_UI()</code></a> or <code>QT5_WRAP_UI()</code> macro. Currently Qt4 and Qt5 are supported.</p> <p>When this property is <code>ON</code>, CMake will scan the source files at build time and invoke <code>uic</code> accordingly. If an <code>#include</code> statement like <code>#include \"ui_foo.h\"</code> is found in <code>foo.cpp</code>, a <code>foo.ui</code> file is expected next to <code>foo.cpp</code>, and <code>uic</code> is run on the <code>foo.ui</code> file. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_autouic#variable:CMAKE_AUTOUIC\" title=\"CMAKE_AUTOUIC\" id=\"index-0-variable:CMAKE_AUTOUIC\"><code>CMAKE_AUTOUIC</code></a> variable if it is set when a target is created.</p> <p>Additional command line options for <code>uic</code> can be set via the <a class=\"reference internal\" href=\"../prop_sf/autouic_options#prop_sf:AUTOUIC_OPTIONS\" title=\"AUTOUIC_OPTIONS\" id=\"index-0-prop_sf:AUTOUIC_OPTIONS\"><code>AUTOUIC_OPTIONS</code></a> source file property on the <code>foo.ui</code> file. The global property <a class=\"reference internal\" href=\"../prop_gbl/autogen_targets_folder#prop_gbl:AUTOGEN_TARGETS_FOLDER\" title=\"AUTOGEN_TARGETS_FOLDER\" id=\"index-0-prop_gbl:AUTOGEN_TARGETS_FOLDER\"><code>AUTOGEN_TARGETS_FOLDER</code></a> can be used to group the autouic targets together in an IDE, e.g. in MSVS.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-qt.7#manual:cmake-qt(7)\" title=\"cmake-qt(7)\" id=\"index-0-manual:cmake-qt(7)\"><code>cmake-qt(7)</code></a> manual for more information on using CMake with Qt.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/AUTOUIC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/AUTOUIC.html</a>\n  </p>\n</div>\n","prop_tgt/autouic_options":"<h1 id=\"prop_tgt:AUTOUIC_OPTIONS\">AUTOUIC_OPTIONS</h1> <p id=\"autouic-options\">Additional options for uic when using <a class=\"reference internal\" href=\"autouic#prop_tgt:AUTOUIC\" title=\"AUTOUIC\" id=\"index-0-prop_tgt:AUTOUIC\"><code>AUTOUIC</code></a></p> <p>This property holds additional command line options which will be used when <code>uic</code> is executed during the build via <a class=\"reference internal\" href=\"autouic#prop_tgt:AUTOUIC\" title=\"AUTOUIC\" id=\"index-1-prop_tgt:AUTOUIC\"><code>AUTOUIC</code></a>, i.e. it is equivalent to the optional <code>OPTIONS</code> argument of the <a class=\"reference internal\" href=\"../module/findqt4#module:FindQt4\" title=\"FindQt4\" id=\"index-0-module:FindQt4\"><code>qt4_wrap_ui()</code></a> macro.</p> <p>By default it is empty.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_autouic_options#variable:CMAKE_AUTOUIC_OPTIONS\" title=\"CMAKE_AUTOUIC_OPTIONS\" id=\"index-0-variable:CMAKE_AUTOUIC_OPTIONS\"><code>CMAKE_AUTOUIC_OPTIONS</code></a> variable if it is set when a target is created.</p> <p>The options set on the target may be overridden by <a class=\"reference internal\" href=\"../prop_sf/autouic_options#prop_sf:AUTOUIC_OPTIONS\" title=\"AUTOUIC_OPTIONS\" id=\"index-0-prop_sf:AUTOUIC_OPTIONS\"><code>AUTOUIC_OPTIONS</code></a> set on the <code>.ui</code> source file.</p> <p>This property may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-qt.7#manual:cmake-qt(7)\" title=\"cmake-qt(7)\" id=\"index-0-manual:cmake-qt(7)\"><code>cmake-qt(7)</code></a> manual for more information on using CMake with Qt.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/AUTOUIC_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/AUTOUIC_OPTIONS.html</a>\n  </p>\n</div>\n","prop_tgt/autorcc":"<h1 id=\"prop_tgt:AUTORCC\">AUTORCC</h1> <p id=\"autorcc\">Should the target be processed with autorcc (for Qt projects).</p> <p><code>AUTORCC</code> is a boolean specifying whether CMake will handle the Qt <code>rcc</code> code generator automatically, i.e. without having to use the <a class=\"reference internal\" href=\"../module/findqt4#module:FindQt4\" title=\"FindQt4\" id=\"index-0-module:FindQt4\"><code>QT4_ADD_RESOURCES()</code></a> or <code>QT5_ADD_RESOURCES()</code> macro. Currently Qt4 and Qt5 are supported.</p> <p>When this property is <code>ON</code>, CMake will handle <code>.qrc</code> files added as target sources at build time and invoke <code>rcc</code> accordingly. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_autorcc#variable:CMAKE_AUTORCC\" title=\"CMAKE_AUTORCC\" id=\"index-0-variable:CMAKE_AUTORCC\"><code>CMAKE_AUTORCC</code></a> variable if it is set when a target is created.</p> <p>Additional command line options for rcc can be set via the <a class=\"reference internal\" href=\"../prop_sf/autorcc_options#prop_sf:AUTORCC_OPTIONS\" title=\"AUTORCC_OPTIONS\" id=\"index-0-prop_sf:AUTORCC_OPTIONS\"><code>AUTORCC_OPTIONS</code></a> source file property on the <code>.qrc</code> file.</p> <p>The global property <a class=\"reference internal\" href=\"../prop_gbl/autogen_targets_folder#prop_gbl:AUTOGEN_TARGETS_FOLDER\" title=\"AUTOGEN_TARGETS_FOLDER\" id=\"index-0-prop_gbl:AUTOGEN_TARGETS_FOLDER\"><code>AUTOGEN_TARGETS_FOLDER</code></a> can be used to group the autorcc targets together in an IDE, e.g. in MSVS.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-qt.7#manual:cmake-qt(7)\" title=\"cmake-qt(7)\" id=\"index-0-manual:cmake-qt(7)\"><code>cmake-qt(7)</code></a> manual for more information on using CMake with Qt.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/AUTORCC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/AUTORCC.html</a>\n  </p>\n</div>\n","prop_tgt/autorcc_options":"<h1 id=\"prop_tgt:AUTORCC_OPTIONS\">AUTORCC_OPTIONS</h1> <p id=\"autorcc-options\">Additional options for <code>rcc</code> when using <a class=\"reference internal\" href=\"autorcc#prop_tgt:AUTORCC\" title=\"AUTORCC\" id=\"index-0-prop_tgt:AUTORCC\"><code>AUTORCC</code></a></p> <p>This property holds additional command line options which will be used when <code>rcc</code> is executed during the build via <a class=\"reference internal\" href=\"autorcc#prop_tgt:AUTORCC\" title=\"AUTORCC\" id=\"index-1-prop_tgt:AUTORCC\"><code>AUTORCC</code></a>, i.e. it is equivalent to the optional <code>OPTIONS</code> argument of the <a class=\"reference internal\" href=\"../module/findqt4#module:FindQt4\" title=\"FindQt4\" id=\"index-0-module:FindQt4\"><code>qt4_add_resources()</code></a> macro.</p> <p>By default it is empty.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_autorcc_options#variable:CMAKE_AUTORCC_OPTIONS\" title=\"CMAKE_AUTORCC_OPTIONS\" id=\"index-0-variable:CMAKE_AUTORCC_OPTIONS\"><code>CMAKE_AUTORCC_OPTIONS</code></a> variable if it is set when a target is created.</p> <p>The options set on the target may be overridden by <a class=\"reference internal\" href=\"../prop_sf/autorcc_options#prop_sf:AUTORCC_OPTIONS\" title=\"AUTORCC_OPTIONS\" id=\"index-0-prop_sf:AUTORCC_OPTIONS\"><code>AUTORCC_OPTIONS</code></a> set on the <code>.qrc</code> source file.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-qt.7#manual:cmake-qt(7)\" title=\"cmake-qt(7)\" id=\"index-0-manual:cmake-qt(7)\"><code>cmake-qt(7)</code></a> manual for more information on using CMake with Qt.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/AUTORCC_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/AUTORCC_OPTIONS.html</a>\n  </p>\n</div>\n","prop_tgt/binary_dir":"<h1 id=\"prop_tgt:BINARY_DIR\">BINARY_DIR</h1> <p id=\"binary-dir\">This read-only property reports the value of the <a class=\"reference internal\" href=\"../variable/cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR\" title=\"CMAKE_CURRENT_BINARY_DIR\" id=\"index-0-variable:CMAKE_CURRENT_BINARY_DIR\"><code>CMAKE_CURRENT_BINARY_DIR</code></a> variable in the directory in which the target was defined.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/BINARY_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/BINARY_DIR.html</a>\n  </p>\n</div>\n","prop_tgt/build_with_install_rpath":"<h1 id=\"prop_tgt:BUILD_WITH_INSTALL_RPATH\">BUILD_WITH_INSTALL_RPATH</h1> <p id=\"build-with-install-rpath\">Should build tree targets have install tree rpaths.</p> <p>BUILD_WITH_INSTALL_RPATH is a boolean specifying whether to link the target in the build tree with the INSTALL_RPATH. This takes precedence over SKIP_BUILD_RPATH and avoids the need for relinking before installation. This property is initialized by the value of the variable CMAKE_BUILD_WITH_INSTALL_RPATH if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/BUILD_WITH_INSTALL_RPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/BUILD_WITH_INSTALL_RPATH.html</a>\n  </p>\n</div>\n","prop_tgt/bundle_extension":"<h1 id=\"prop_tgt:BUNDLE_EXTENSION\">BUNDLE_EXTENSION</h1> <p id=\"bundle-extension\">The file extension used to name a <a class=\"reference internal\" href=\"bundle#prop_tgt:BUNDLE\" title=\"BUNDLE\" id=\"index-0-prop_tgt:BUNDLE\"><code>BUNDLE</code></a> target on the OS X and iOS.</p> <p>The default value is <code>bundle</code> - you can also use <code>plugin</code> or whatever file extension is required by the host app for your bundle.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/BUNDLE_EXTENSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/BUNDLE_EXTENSION.html</a>\n  </p>\n</div>\n","prop_tgt/bundle":"<h1 id=\"prop_tgt:BUNDLE\">BUNDLE</h1> <p id=\"bundle\">This target is a <code>CFBundle</code> on the OS X.</p> <p>If a module library target has this property set to true it will be built as a <code>CFBundle</code> when built on the mac. It will have the directory structure required for a <code>CFBundle</code> and will be suitable to be used for creating Browser Plugins or other application resources.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/BUNDLE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/BUNDLE.html</a>\n  </p>\n</div>\n","prop_tgt/c_extensions":"<h1 id=\"prop_tgt:C_EXTENSIONS\">C_EXTENSIONS</h1> <p id=\"c-extensions\">Boolean specifying whether compiler specific extensions are requested.</p> <p>This property specifies whether compiler specific extensions should be used. For some compilers, this results in adding a flag such as <code>-std=gnu11</code> instead of <code>-std=c11</code> to the compile line. This property is <code>ON</code> by default.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_c_extensions#variable:CMAKE_C_EXTENSIONS\" title=\"CMAKE_C_EXTENSIONS\" id=\"index-0-variable:CMAKE_C_EXTENSIONS\"><code>CMAKE_C_EXTENSIONS</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/C_EXTENSIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/C_EXTENSIONS.html</a>\n  </p>\n</div>\n","prop_tgt/c_standard_required":"<h1 id=\"prop_tgt:C_STANDARD_REQUIRED\">C_STANDARD_REQUIRED</h1> <p id=\"c-standard-required\">Boolean describing whether the value of <a class=\"reference internal\" href=\"c_standard#prop_tgt:C_STANDARD\" title=\"C_STANDARD\" id=\"index-0-prop_tgt:C_STANDARD\"><code>C_STANDARD</code></a> is a requirement.</p> <p>If this property is set to <code>ON</code>, then the value of the <a class=\"reference internal\" href=\"c_standard#prop_tgt:C_STANDARD\" title=\"C_STANDARD\" id=\"index-1-prop_tgt:C_STANDARD\"><code>C_STANDARD</code></a> target property is treated as a requirement. If this property is <code>OFF</code> or unset, the <a class=\"reference internal\" href=\"c_standard#prop_tgt:C_STANDARD\" title=\"C_STANDARD\" id=\"index-2-prop_tgt:C_STANDARD\"><code>C_STANDARD</code></a> target property is treated as optional and may “decay” to a previous standard if the requested is not available. For compilers that have no notion of a standard level, such as MSVC, this has no effect.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_c_standard_required#variable:CMAKE_C_STANDARD_REQUIRED\" title=\"CMAKE_C_STANDARD_REQUIRED\" id=\"index-0-variable:CMAKE_C_STANDARD_REQUIRED\"><code>CMAKE_C_STANDARD_REQUIRED</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/C_STANDARD_REQUIRED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/C_STANDARD_REQUIRED.html</a>\n  </p>\n</div>\n","prop_tgt/compatible_interface_bool":"<h1 id=\"prop_tgt:COMPATIBLE_INTERFACE_BOOL\">COMPATIBLE_INTERFACE_BOOL</h1> <p id=\"compatible-interface-bool\">Properties which must be compatible with their link interface</p> <p>The <code>COMPATIBLE_INTERFACE_BOOL</code> property may contain a list of properties for this target which must be consistent when evaluated as a boolean with the <code>INTERFACE</code> variant of the property in all linked dependees. For example, if a property <code>FOO</code> appears in the list, then for each dependee, the <code>INTERFACE_FOO</code> property content in all of its dependencies must be consistent with each other, and with the <code>FOO</code> property in the depender.</p> <p>Consistency in this sense has the meaning that if the property is set, then it must have the same boolean value as all others, and if the property is not set, then it is ignored.</p> <p>Note that for each dependee, the set of properties specified in this property must not intersect with the set specified in any of the other <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#compatible-interface-properties\"><span>Compatible Interface Properties</span></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPATIBLE_INTERFACE_BOOL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPATIBLE_INTERFACE_BOOL.html</a>\n  </p>\n</div>\n","prop_tgt/compatible_interface_number_max":"<h1 id=\"prop_tgt:COMPATIBLE_INTERFACE_NUMBER_MAX\">COMPATIBLE_INTERFACE_NUMBER_MAX</h1> <p id=\"compatible-interface-number-max\">Properties whose maximum value from the link interface will be used.</p> <p>The <code>COMPATIBLE_INTERFACE_NUMBER_MAX</code> property may contain a list of properties for this target whose maximum value may be read at generate time when evaluated in the <code>INTERFACE</code> variant of the property in all linked dependees. For example, if a property <code>FOO</code> appears in the list, then for each dependee, the <code>INTERFACE_FOO</code> property content in all of its dependencies will be compared with each other and with the <code>FOO</code> property in the depender. When reading the <code>FOO</code> property at generate time, the maximum value will be returned. If the property is not set, then it is ignored.</p> <p>Note that for each dependee, the set of properties specified in this property must not intersect with the set specified in any of the other <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#compatible-interface-properties\"><span>Compatible Interface Properties</span></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MAX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MAX.html</a>\n  </p>\n</div>\n","prop_tgt/compatible_interface_number_min":"<h1 id=\"prop_tgt:COMPATIBLE_INTERFACE_NUMBER_MIN\">COMPATIBLE_INTERFACE_NUMBER_MIN</h1> <p id=\"compatible-interface-number-min\">Properties whose maximum value from the link interface will be used.</p> <p>The <code>COMPATIBLE_INTERFACE_NUMBER_MIN</code> property may contain a list of properties for this target whose minimum value may be read at generate time when evaluated in the <code>INTERFACE</code> variant of the property of all linked dependees. For example, if a property <code>FOO</code> appears in the list, then for each dependee, the <code>INTERFACE_FOO</code> property content in all of its dependencies will be compared with each other and with the <code>FOO</code> property in the depender. When reading the <code>FOO</code> property at generate time, the minimum value will be returned. If the property is not set, then it is ignored.</p> <p>Note that for each dependee, the set of properties specified in this property must not intersect with the set specified in any of the other <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#compatible-interface-properties\"><span>Compatible Interface Properties</span></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MIN.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MIN.html</a>\n  </p>\n</div>\n","prop_tgt/compile_features":"<h1 id=\"prop_tgt:COMPILE_FEATURES\">COMPILE_FEATURES</h1> <p id=\"compile-features\">Compiler features enabled for this target.</p> <p>The list of features in this property are a subset of the features listed in the <a class=\"reference internal\" href=\"../variable/cmake_cxx_compile_features#variable:CMAKE_CXX_COMPILE_FEATURES\" title=\"CMAKE_CXX_COMPILE_FEATURES\" id=\"index-0-variable:CMAKE_CXX_COMPILE_FEATURES\"><code>CMAKE_CXX_COMPILE_FEATURES</code></a> variable.</p> <p>Contents of <code>COMPILE_FEATURES</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_FEATURES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_FEATURES.html</a>\n  </p>\n</div>\n","prop_tgt/compile_flags":"<h1 id=\"prop_tgt:COMPILE_FLAGS\">COMPILE_FLAGS</h1> <p id=\"compile-flags\">Additional flags to use when compiling this target’s sources.</p> <p>The COMPILE_FLAGS property sets additional compiler flags used to build sources within the target. Use COMPILE_DEFINITIONS to pass additional preprocessor definitions.</p> <p>This property is deprecated. Use the COMPILE_OPTIONS property or the target_compile_options command instead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_FLAGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_FLAGS.html</a>\n  </p>\n</div>\n","prop_tgt/compile_pdb_name_config":"<h1 id=\"prop_tgt:COMPILE_PDB_NAME_&lt;CONFIG&gt;\">COMPILE_PDB_NAME_&lt;CONFIG&gt;</h1> <p id=\"compile-pdb-name-config\">Per-configuration output name for the MS debug symbol <code>.pdb</code> file generated by the compiler while building source files.</p> <p>This is the configuration-specific version of <a class=\"reference internal\" href=\"compile_pdb_name#prop_tgt:COMPILE_PDB_NAME\" title=\"COMPILE_PDB_NAME\" id=\"index-0-prop_tgt:COMPILE_PDB_NAME\"><code>COMPILE_PDB_NAME</code></a>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>The compiler-generated program database files are specified by the <code>/Fd</code> compiler flag and are not the same as linker-generated program database files specified by the <code>/pdb</code> linker flag. Use the <a class=\"reference internal\" href=\"#\" title=\"PDB_NAME_&lt;CONFIG&gt;\" id=\"index-1-prop_tgt:PDB_NAME_&lt;CONFIG&gt;\"><code>PDB_NAME_&lt;CONFIG&gt;</code></a> property to specify the latter.</p> <p class=\"last\">This property is not implemented by the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%206.html#generator:Visual%20Studio%206\" title=\"Visual Studio 6\" id=\"index-0-generator:Visual Studio 6\"><code>Visual Studio 6</code></a> generator.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_PDB_NAME_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_PDB_NAME_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/compatible_interface_string":"<h1 id=\"prop_tgt:COMPATIBLE_INTERFACE_STRING\">COMPATIBLE_INTERFACE_STRING</h1> <p id=\"compatible-interface-string\">Properties which must be string-compatible with their link interface</p> <p>The <code>COMPATIBLE_INTERFACE_STRING</code> property may contain a list of properties for this target which must be the same when evaluated as a string in the <code>INTERFACE</code> variant of the property all linked dependees. For example, if a property <code>FOO</code> appears in the list, then for each dependee, the <code>INTERFACE_FOO</code> property content in all of its dependencies must be equal with each other, and with the <code>FOO</code> property in the depender. If the property is not set, then it is ignored.</p> <p>Note that for each dependee, the set of properties specified in this property must not intersect with the set specified in any of the other <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#compatible-interface-properties\"><span>Compatible Interface Properties</span></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPATIBLE_INTERFACE_STRING.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPATIBLE_INTERFACE_STRING.html</a>\n  </p>\n</div>\n","prop_tgt/compile_options":"<h1 id=\"prop_tgt:COMPILE_OPTIONS\">COMPILE_OPTIONS</h1> <p id=\"compile-options\">List of options to pass to the compiler.</p> <p>This property holds a <a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of options specified so far for its target. Use the <a class=\"reference internal\" href=\"../command/target_compile_options#command:target_compile_options\" title=\"target_compile_options\" id=\"index-0-command:target_compile_options\"><code>target_compile_options()</code></a> command to append more options.</p> <p>This property is intialized by the <a class=\"reference internal\" href=\"../prop_dir/compile_options#prop_dir:COMPILE_OPTIONS\" title=\"COMPILE_OPTIONS\" id=\"index-0-prop_dir:COMPILE_OPTIONS\"><code>COMPILE_OPTIONS</code></a> directory property when a target is created, and is used by the generators to set the options for the compiler.</p> <p>Contents of <code>COMPILE_OPTIONS</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_OPTIONS.html</a>\n  </p>\n</div>\n","prop_tgt/compile_pdb_name":"<h1 id=\"prop_tgt:COMPILE_PDB_NAME\">COMPILE_PDB_NAME</h1> <p id=\"compile-pdb-name\">Output name for the MS debug symbol <code>.pdb</code> file generated by the compiler while building source files.</p> <p>This property specifies the base name for the debug symbols file. If not set, the default is unspecified.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>The compiler-generated program database files are specified by the <code>/Fd</code> compiler flag and are not the same as linker-generated program database files specified by the <code>/pdb</code> linker flag. Use the <a class=\"reference internal\" href=\"pdb_name#prop_tgt:PDB_NAME\" title=\"PDB_NAME\" id=\"index-1-prop_tgt:PDB_NAME\"><code>PDB_NAME</code></a> property to specify the latter.</p> <p class=\"last\">This property is not implemented by the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%206.html#generator:Visual%20Studio%206\" title=\"Visual Studio 6\" id=\"index-0-generator:Visual Studio 6\"><code>Visual Studio 6</code></a> generator.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_PDB_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_PDB_NAME.html</a>\n  </p>\n</div>\n","prop_tgt/compile_pdb_output_directory":"<h1 id=\"prop_tgt:COMPILE_PDB_OUTPUT_DIRECTORY\">COMPILE_PDB_OUTPUT_DIRECTORY</h1> <p id=\"compile-pdb-output-directory\">Output directory for the MS debug symbol <code>.pdb</code> file generated by the compiler while building source files.</p> <p>This property specifies the directory into which the MS debug symbols will be placed by the compiler. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_compile_pdb_output_directory#variable:CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY\" title=\"CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY\" id=\"index-0-variable:CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY\"><code>CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY</code></a> variable if it is set when a target is created.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>The compiler-generated program database files are specified by the <code>/Fd</code> compiler flag and are not the same as linker-generated program database files specified by the <code>/pdb</code> linker flag. Use the <a class=\"reference internal\" href=\"pdb_output_directory#prop_tgt:PDB_OUTPUT_DIRECTORY\" title=\"PDB_OUTPUT_DIRECTORY\" id=\"index-1-prop_tgt:PDB_OUTPUT_DIRECTORY\"><code>PDB_OUTPUT_DIRECTORY</code></a> property to specify the latter.</p> <p class=\"last\">This property is not implemented by the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%206.html#generator:Visual%20Studio%206\" title=\"Visual Studio 6\" id=\"index-0-generator:Visual Studio 6\"><code>Visual Studio 6</code></a> generator.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY.html</a>\n  </p>\n</div>\n","prop_tgt/compile_pdb_output_directory_config":"<h1 id=\"prop_tgt:COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\">COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</h1> <p id=\"compile-pdb-output-directory-config\">Per-configuration output directory for the MS debug symbol <code>.pdb</code> file generated by the compiler while building source files.</p> <p>This is a per-configuration version of <a class=\"reference internal\" href=\"compile_pdb_output_directory#prop_tgt:COMPILE_PDB_OUTPUT_DIRECTORY\" title=\"COMPILE_PDB_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:COMPILE_PDB_OUTPUT_DIRECTORY\"><code>COMPILE_PDB_OUTPUT_DIRECTORY</code></a>, but multi-configuration generators (VS, Xcode) do NOT append a per-configuration subdirectory to the specified directory. This property is initialized by the value of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-variable:CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> variable if it is set when a target is created.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>The compiler-generated program database files are specified by the <code>/Fd</code> compiler flag and are not the same as linker-generated program database files specified by the <code>/pdb</code> linker flag. Use the <a class=\"reference internal\" href=\"#\" title=\"PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-1-prop_tgt:PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> property to specify the latter.</p> <p class=\"last\">This property is not implemented by the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%206.html#generator:Visual%20Studio%206\" title=\"Visual Studio 6\" id=\"index-0-generator:Visual Studio 6\"><code>Visual Studio 6</code></a> generator.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/cxx_extensions":"<h1 id=\"prop_tgt:CXX_EXTENSIONS\">CXX_EXTENSIONS</h1> <p id=\"cxx-extensions\">Boolean specifying whether compiler specific extensions are requested.</p> <p>This property specifies whether compiler specific extensions should be used. For some compilers, this results in adding a flag such as <code>-std=gnu++11</code> instead of <code>-std=c++11</code> to the compile line. This property is <code>ON</code> by default.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_cxx_extensions#variable:CMAKE_CXX_EXTENSIONS\" title=\"CMAKE_CXX_EXTENSIONS\" id=\"index-0-variable:CMAKE_CXX_EXTENSIONS\"><code>CMAKE_CXX_EXTENSIONS</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/CXX_EXTENSIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/CXX_EXTENSIONS.html</a>\n  </p>\n</div>\n","prop_tgt/config_postfix":"<h1 id=\"prop_tgt:&lt;CONFIG&gt;_POSTFIX\">&lt;CONFIG&gt;_POSTFIX</h1> <p id=\"config-postfix\">Postfix to append to the target file name for configuration &lt;CONFIG&gt;.</p> <p>When building with configuration &lt;CONFIG&gt; the value of this property is appended to the target file name built on disk. For non-executable targets, this property is initialized by the value of the variable CMAKE_&lt;CONFIG&gt;_POSTFIX if it is set when a target is created. This property is ignored on the Mac for Frameworks and App Bundles.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/CONFIG_POSTFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/CONFIG_POSTFIX.html</a>\n  </p>\n</div>\n","prop_tgt/cxx_standard_required":"<h1 id=\"prop_tgt:CXX_STANDARD_REQUIRED\">CXX_STANDARD_REQUIRED</h1> <p id=\"cxx-standard-required\">Boolean describing whether the value of <a class=\"reference internal\" href=\"cxx_standard#prop_tgt:CXX_STANDARD\" title=\"CXX_STANDARD\" id=\"index-0-prop_tgt:CXX_STANDARD\"><code>CXX_STANDARD</code></a> is a requirement.</p> <p>If this property is set to <code>ON</code>, then the value of the <a class=\"reference internal\" href=\"cxx_standard#prop_tgt:CXX_STANDARD\" title=\"CXX_STANDARD\" id=\"index-1-prop_tgt:CXX_STANDARD\"><code>CXX_STANDARD</code></a> target property is treated as a requirement. If this property is <code>OFF</code> or unset, the <a class=\"reference internal\" href=\"cxx_standard#prop_tgt:CXX_STANDARD\" title=\"CXX_STANDARD\" id=\"index-2-prop_tgt:CXX_STANDARD\"><code>CXX_STANDARD</code></a> target property is treated as optional and may “decay” to a previous standard if the requested is not available. For compilers that have no notion of a standard level, such as MSVC, this has no effect.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_cxx_standard_required#variable:CMAKE_CXX_STANDARD_REQUIRED\" title=\"CMAKE_CXX_STANDARD_REQUIRED\" id=\"index-0-variable:CMAKE_CXX_STANDARD_REQUIRED\"><code>CMAKE_CXX_STANDARD_REQUIRED</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/CXX_STANDARD_REQUIRED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/CXX_STANDARD_REQUIRED.html</a>\n  </p>\n</div>\n","prop_tgt/debug_postfix":"<h1 id=\"prop_tgt:DEBUG_POSTFIX\">DEBUG_POSTFIX</h1> <p id=\"debug-postfix\">See target property &lt;CONFIG&gt;_POSTFIX.</p> <p>This property is a special case of the more-general &lt;CONFIG&gt;_POSTFIX property for the DEBUG configuration.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/DEBUG_POSTFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/DEBUG_POSTFIX.html</a>\n  </p>\n</div>\n","prop_tgt/define_symbol":"<h1 id=\"prop_tgt:DEFINE_SYMBOL\">DEFINE_SYMBOL</h1> <p id=\"define-symbol\">Define a symbol when compiling this target’s sources.</p> <p>DEFINE_SYMBOL sets the name of the preprocessor symbol defined when compiling sources in a shared library. If not set here then it is set to target_EXPORTS by default (with some substitutions if the target is not a valid C identifier). This is useful for headers to know whether they are being included from inside their library or outside to properly setup dllexport/dllimport decorations.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/DEFINE_SYMBOL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/DEFINE_SYMBOL.html</a>\n  </p>\n</div>\n","prop_tgt/echostring":"<h1 id=\"prop_tgt:EchoString\">EchoString</h1> <p id=\"echostring\">A message to be displayed when the target is built.</p> <p>A message to display on some generators (such as makefiles) when the target is built.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/EchoString.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/EchoString.html</a>\n  </p>\n</div>\n","prop_tgt/enable_exports":"<h1 id=\"prop_tgt:ENABLE_EXPORTS\">ENABLE_EXPORTS</h1> <p id=\"enable-exports\">Specify whether an executable exports symbols for loadable modules.</p> <p>Normally an executable does not export any symbols because it is the final program. It is possible for an executable to export symbols to be used by loadable modules. When this property is set to true CMake will allow other targets to “link” to the executable with the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>TARGET_LINK_LIBRARIES()</code></a> command. On all platforms a target-level dependency on the executable is created for targets that link to it. For DLL platforms an import library will be created for the exported symbols and then used for linking. All Windows-based systems including Cygwin are DLL platforms. For non-DLL platforms that require all symbols to be resolved at link time, such as OS X, the module will “link” to the executable using a flag like <code>-bundle_loader</code>. For other non-DLL platforms the link rule is simply ignored since the dynamic loader will automatically bind symbols when the module is loaded.</p> <p>This property is initialized by the value of the variable <a class=\"reference internal\" href=\"../variable/cmake_enable_exports#variable:CMAKE_ENABLE_EXPORTS\" title=\"CMAKE_ENABLE_EXPORTS\" id=\"index-0-variable:CMAKE_ENABLE_EXPORTS\"><code>CMAKE_ENABLE_EXPORTS</code></a> if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/ENABLE_EXPORTS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/ENABLE_EXPORTS.html</a>\n  </p>\n</div>\n","prop_tgt/exclude_from_all":"<h1 id=\"prop_tgt:EXCLUDE_FROM_ALL\">EXCLUDE_FROM_ALL</h1> <p id=\"exclude-from-all\">Exclude the target from the all target.</p> <p>A property on a target that indicates if the target is excluded from the default build target. If it is not, then with a Makefile for example typing make will cause this target to be built. The same concept applies to the default build of other generators. Installing a target with EXCLUDE_FROM_ALL set to true has undefined behavior.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/EXCLUDE_FROM_ALL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/EXCLUDE_FROM_ALL.html</a>\n  </p>\n</div>\n","prop_tgt/exclude_from_default_build_config":"<h1 id=\"prop_tgt:EXCLUDE_FROM_DEFAULT_BUILD_&lt;CONFIG&gt;\">EXCLUDE_FROM_DEFAULT_BUILD_&lt;CONFIG&gt;</h1> <p id=\"exclude-from-default-build-config\">Per-configuration version of target exclusion from “Build Solution”.</p> <p>This is the configuration-specific version of EXCLUDE_FROM_DEFAULT_BUILD. If the generic EXCLUDE_FROM_DEFAULT_BUILD is also set on a target, EXCLUDE_FROM_DEFAULT_BUILD_&lt;CONFIG&gt; takes precedence in configurations for which it has a value.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/exclude_from_default_build":"<h1 id=\"prop_tgt:EXCLUDE_FROM_DEFAULT_BUILD\">EXCLUDE_FROM_DEFAULT_BUILD</h1> <p id=\"exclude-from-default-build\">Exclude target from “Build Solution”.</p> <p>This property is only used by Visual Studio generators 7 and above. When set to TRUE, the target will not be built when you press “Build Solution”.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD.html</a>\n  </p>\n</div>\n","prop_tgt/export_name":"<h1 id=\"prop_tgt:EXPORT_NAME\">EXPORT_NAME</h1> <p id=\"export-name\">Exported name for target files.</p> <p>This sets the name for the IMPORTED target generated when it this target is is exported. If not set, the logical target name is used by default.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/EXPORT_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/EXPORT_NAME.html</a>\n  </p>\n</div>\n","prop_tgt/folder":"<h1 id=\"prop_tgt:FOLDER\">FOLDER</h1> <p id=\"folder\">Set the folder name. Use to organize targets in an IDE.</p> <p>Targets with no FOLDER property will appear as top level entities in IDEs like Visual Studio. Targets with the same FOLDER property value will appear next to each other in a folder of that name. To nest folders, use FOLDER values such as ‘GUI/Dialogs’ with ‘/’ characters separating folder levels.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/FOLDER.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/FOLDER.html</a>\n  </p>\n</div>\n","prop_tgt/config_output_name":"<h1 id=\"prop_tgt:&lt;CONFIG&gt;_OUTPUT_NAME\">&lt;CONFIG&gt;_OUTPUT_NAME</h1> <p id=\"config-output-name\">Old per-configuration target file base name. Use <a class=\"reference internal\" href=\"#\" title=\"OUTPUT_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:OUTPUT_NAME_&lt;CONFIG&gt;\"><code>OUTPUT_NAME_&lt;CONFIG&gt;</code></a> instead.</p> <p>This is a configuration-specific version of the <a class=\"reference internal\" href=\"output_name#prop_tgt:OUTPUT_NAME\" title=\"OUTPUT_NAME\" id=\"index-0-prop_tgt:OUTPUT_NAME\"><code>OUTPUT_NAME</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/CONFIG_OUTPUT_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/CONFIG_OUTPUT_NAME.html</a>\n  </p>\n</div>\n","prop_tgt/fortran_format":"<h1 id=\"prop_tgt:Fortran_FORMAT\">Fortran_FORMAT</h1> <p id=\"fortran-format\">Set to FIXED or FREE to indicate the Fortran source layout.</p> <p>This property tells CMake whether the Fortran source files in a target use fixed-format or free-format. CMake will pass the corresponding format flag to the compiler. Use the source-specific Fortran_FORMAT property to change the format of a specific source file. If the variable CMAKE_Fortran_FORMAT is set when a target is created its value is used to initialize this property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/Fortran_FORMAT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/Fortran_FORMAT.html</a>\n  </p>\n</div>\n","prop_tgt/fortran_module_directory":"<h1 id=\"prop_tgt:Fortran_MODULE_DIRECTORY\">Fortran_MODULE_DIRECTORY</h1> <p id=\"fortran-module-directory\">Specify output directory for Fortran modules provided by the target.</p> <p>If the target contains Fortran source files that provide modules and the compiler supports a module output directory this specifies the directory in which the modules will be placed. When this property is not set the modules will be placed in the build directory corresponding to the target’s source directory. If the variable CMAKE_Fortran_MODULE_DIRECTORY is set when a target is created its value is used to initialize this property.</p> <p>Note that some compilers will automatically search the module output directory for modules USEd during compilation but others will not. If your sources USE modules their location must be specified by INCLUDE_DIRECTORIES regardless of this property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/Fortran_MODULE_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/Fortran_MODULE_DIRECTORY.html</a>\n  </p>\n</div>\n","prop_tgt/framework":"<h1 id=\"prop_tgt:FRAMEWORK\">FRAMEWORK</h1> <p id=\"framework\">Build <code>SHARED</code> library as Framework Bundle on the OS X and iOS.</p> <p>If a <code>SHARED</code> library target has this property set to <code>TRUE</code> it will be built as a framework when built on the OS X and iOS. It will have the directory structure required for a framework and will be suitable to be used with the <code>-framework</code> option</p> <p>To customize <code>Info.plist</code> file in the framework, use <a class=\"reference internal\" href=\"macosx_framework_info_plist#prop_tgt:MACOSX_FRAMEWORK_INFO_PLIST\" title=\"MACOSX_FRAMEWORK_INFO_PLIST\" id=\"index-0-prop_tgt:MACOSX_FRAMEWORK_INFO_PLIST\"><code>MACOSX_FRAMEWORK_INFO_PLIST</code></a> target property.</p> <p>For OS X see also the <a class=\"reference internal\" href=\"framework_version#prop_tgt:FRAMEWORK_VERSION\" title=\"FRAMEWORK_VERSION\" id=\"index-0-prop_tgt:FRAMEWORK_VERSION\"><code>FRAMEWORK_VERSION</code></a> target property.</p> <p>Example of creation <code>dynamicFramework</code>:</p> <pre data-language=\"cmake\">add_library(dynamicFramework SHARED\n            dynamicFramework.c\n            dynamicFramework.h\n)\nset_target_properties(dynamicFramework PROPERTIES\n  FRAMEWORK TRUE\n  FRAMEWORK_VERSION C\n  MACOSX_FRAMEWORK_IDENTIFIER com.cmake.dynamicFramework\n  MACOSX_FRAMEWORK_INFO_PLIST Info.plist\n  PUBLIC_HEADER dynamicFramework.h\n  XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY \"iPhone Developer\"\n)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/FRAMEWORK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/FRAMEWORK.html</a>\n  </p>\n</div>\n","prop_tgt/framework_version":"<h1 id=\"prop_tgt:FRAMEWORK_VERSION\">FRAMEWORK_VERSION</h1> <p id=\"framework-version\">Version of a framework created using the <a class=\"reference internal\" href=\"framework#prop_tgt:FRAMEWORK\" title=\"FRAMEWORK\" id=\"index-0-prop_tgt:FRAMEWORK\"><code>FRAMEWORK</code></a> target property (e.g. <code>A</code>).</p> <p>This property only affects OS X, as iOS doesn’t have versioned directory structure.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/FRAMEWORK_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/FRAMEWORK_VERSION.html</a>\n  </p>\n</div>\n","prop_tgt/generator_file_name":"<h1 id=\"prop_tgt:GENERATOR_FILE_NAME\">GENERATOR_FILE_NAME</h1> <p id=\"generator-file-name\">Generator’s file for this target.</p> <p>An internal property used by some generators to record the name of the project or dsp file associated with this target. Note that at configure time, this property is only set for targets created by include_external_msproject().</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/GENERATOR_FILE_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/GENERATOR_FILE_NAME.html</a>\n  </p>\n</div>\n","prop_tgt/crosscompiling_emulator":"<h1 id=\"prop_tgt:CROSSCOMPILING_EMULATOR\">CROSSCOMPILING_EMULATOR</h1> <p id=\"crosscompiling-emulator\">Use the given emulator to run executables created when crosscompiling. This command will be added as a prefix to <a class=\"reference internal\" href=\"../command/add_test#command:add_test\" title=\"add_test\" id=\"index-0-command:add_test\"><code>add_test()</code></a> test commands for built target system executables.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/CROSSCOMPILING_EMULATOR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/CROSSCOMPILING_EMULATOR.html</a>\n  </p>\n</div>\n","prop_tgt/gnutoms":"<h1 id=\"prop_tgt:GNUtoMS\">GNUtoMS</h1> <p id=\"gnutoms\">Convert GNU import library (.dll.a) to MS format (.lib).</p> <p>When linking a shared library or executable that exports symbols using GNU tools on Windows (MinGW/MSYS) with Visual Studio installed convert the import library (.dll.a) from GNU to MS format (.lib). Both import libraries will be installed by install(TARGETS) and exported by install(EXPORT) and export() to be linked by applications with either GNU- or MS-compatible tools.</p> <p>If the variable CMAKE_GNUtoMS is set when a target is created its value is used to initialize this property. The variable must be set prior to the first command that enables a language such as project() or enable_language(). CMake provides the variable as an option to the user automatically when configuring on Windows with GNU tools.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/GNUtoMS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/GNUtoMS.html</a>\n  </p>\n</div>\n","prop_tgt/has_cxx":"<h1 id=\"prop_tgt:HAS_CXX\">HAS_CXX</h1> <p id=\"has-cxx\">Link the target using the C++ linker tool (obsolete).</p> <p>This is equivalent to setting the LINKER_LANGUAGE property to CXX. See that property’s documentation for details.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/HAS_CXX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/HAS_CXX.html</a>\n  </p>\n</div>\n","prop_tgt/implicit_depends_include_transform":"<h1 id=\"prop_tgt:IMPLICIT_DEPENDS_INCLUDE_TRANSFORM\">IMPLICIT_DEPENDS_INCLUDE_TRANSFORM</h1> <p id=\"implicit-depends-include-transform\">Specify #include line transforms for dependencies in a target.</p> <p>This property specifies rules to transform macro-like #include lines during implicit dependency scanning of C and C++ source files. The list of rules must be semicolon-separated with each entry of the form “A_MACRO(%)=value-with-%” (the % must be literal). During dependency scanning occurrences of A_MACRO(...) on #include lines will be replaced by the value given with the macro argument substituted for ‘%’. For example, the entry</p> <pre data-language=\"python\">MYDIR(%)=&lt;mydir/%&gt;\n</pre> <p>will convert lines of the form</p> <pre data-language=\"python\">#include MYDIR(myheader.h)\n</pre> <p>to</p> <pre data-language=\"python\">#include &lt;mydir/myheader.h&gt;\n</pre> <p>allowing the dependency to be followed.</p> <p>This property applies to sources in the target on which it is set.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.html</a>\n  </p>\n</div>\n","prop_tgt/imported_link_dependent_libraries":"<h1 id=\"prop_tgt:IMPORTED_LINK_DEPENDENT_LIBRARIES\">IMPORTED_LINK_DEPENDENT_LIBRARIES</h1> <p id=\"imported-link-dependent-libraries\">Dependent shared libraries of an imported shared library.</p> <p>Shared libraries may be linked to other shared libraries as part of their implementation. On some platforms the linker searches for the dependent libraries of shared libraries they are including in the link. Set this property to the list of dependent shared libraries of an imported library. The list should be disjoint from the list of interface libraries in the INTERFACE_LINK_LIBRARIES property. On platforms requiring dependent shared libraries to be found at link time CMake uses this list to add appropriate files or paths to the link command line. Ignored for non-imported targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES.html</a>\n  </p>\n</div>\n","prop_tgt/imported_link_interface_languages":"<h1 id=\"prop_tgt:IMPORTED_LINK_INTERFACE_LANGUAGES\">IMPORTED_LINK_INTERFACE_LANGUAGES</h1> <p id=\"imported-link-interface-languages\">Languages compiled into an IMPORTED static library.</p> <p>Set this to the list of languages of source files compiled to produce a STATIC IMPORTED library (such as “C” or “CXX”). CMake accounts for these languages when computing how to link a target to the imported library. For example, when a C executable links to an imported C++ static library CMake chooses the C++ linker to satisfy language runtime dependencies of the static library.</p> <p>This property is ignored for targets that are not STATIC libraries. This property is ignored for non-imported targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES.html</a>\n  </p>\n</div>\n","prop_tgt/imported_link_interface_libraries_config":"<h1 id=\"prop_tgt:IMPORTED_LINK_INTERFACE_LIBRARIES_&lt;CONFIG&gt;\">IMPORTED_LINK_INTERFACE_LIBRARIES_&lt;CONFIG&gt;</h1> <p id=\"imported-link-interface-libraries-config\">&lt;CONFIG&gt;-specific version of IMPORTED_LINK_INTERFACE_LIBRARIES.</p> <p>Configuration names correspond to those provided by the project from which the target is imported. If set, this property completely overrides the generic property for the named configuration.</p> <p>This property is ignored if the target also has a non-empty INTERFACE_LINK_LIBRARIES property.</p> <p>This property is deprecated. Use INTERFACE_LINK_LIBRARIES instead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/imported_link_interface_languages_config":"<h1 id=\"prop_tgt:IMPORTED_LINK_INTERFACE_LANGUAGES_&lt;CONFIG&gt;\">IMPORTED_LINK_INTERFACE_LANGUAGES_&lt;CONFIG&gt;</h1> <p id=\"imported-link-interface-languages-config\">&lt;CONFIG&gt;-specific version of IMPORTED_LINK_INTERFACE_LANGUAGES.</p> <p>Configuration names correspond to those provided by the project from which the target is imported. If set, this property completely overrides the generic property for the named configuration.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/imported_implib_config":"<h1 id=\"prop_tgt:IMPORTED_IMPLIB_&lt;CONFIG&gt;\">IMPORTED_IMPLIB_&lt;CONFIG&gt;</h1> <p id=\"imported-implib-config\">&lt;CONFIG&gt;-specific version of IMPORTED_IMPLIB property.</p> <p>Configuration names correspond to those provided by the project from which the target is imported.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_IMPLIB_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_IMPLIB_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/imported_implib":"<h1 id=\"prop_tgt:IMPORTED_IMPLIB\">IMPORTED_IMPLIB</h1> <p id=\"imported-implib\">Full path to the import library for an IMPORTED target.</p> <p>Set this to the location of the ”.lib” part of a windows DLL. Ignored for non-imported targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_IMPLIB.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_IMPLIB.html</a>\n  </p>\n</div>\n","prop_tgt/imported_link_dependent_libraries_config":"<h1 id=\"prop_tgt:IMPORTED_LINK_DEPENDENT_LIBRARIES_&lt;CONFIG&gt;\">IMPORTED_LINK_DEPENDENT_LIBRARIES_&lt;CONFIG&gt;</h1> <p id=\"imported-link-dependent-libraries-config\">&lt;CONFIG&gt;-specific version of IMPORTED_LINK_DEPENDENT_LIBRARIES.</p> <p>Configuration names correspond to those provided by the project from which the target is imported. If set, this property completely overrides the generic property for the named configuration.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/imported_link_interface_multiplicity_config":"<h1 id=\"prop_tgt:IMPORTED_LINK_INTERFACE_MULTIPLICITY_&lt;CONFIG&gt;\">IMPORTED_LINK_INTERFACE_MULTIPLICITY_&lt;CONFIG&gt;</h1> <p id=\"imported-link-interface-multiplicity-config\">&lt;CONFIG&gt;-specific version of IMPORTED_LINK_INTERFACE_MULTIPLICITY.</p> <p>If set, this property completely overrides the generic property for the named configuration.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/imported_link_interface_multiplicity":"<h1 id=\"prop_tgt:IMPORTED_LINK_INTERFACE_MULTIPLICITY\">IMPORTED_LINK_INTERFACE_MULTIPLICITY</h1> <p id=\"imported-link-interface-multiplicity\">Repetition count for cycles of IMPORTED static libraries.</p> <p>This is LINK_INTERFACE_MULTIPLICITY for IMPORTED targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY.html</a>\n  </p>\n</div>\n","prop_tgt/imported_link_interface_libraries":"<h1 id=\"prop_tgt:IMPORTED_LINK_INTERFACE_LIBRARIES\">IMPORTED_LINK_INTERFACE_LIBRARIES</h1> <p id=\"imported-link-interface-libraries\">Transitive link interface of an IMPORTED target.</p> <p>Set this to the list of libraries whose interface is included when an IMPORTED library target is linked to another target. The libraries will be included on the link line for the target. Unlike the LINK_INTERFACE_LIBRARIES property, this property applies to all imported target types, including STATIC libraries. This property is ignored for non-imported targets.</p> <p>This property is ignored if the target also has a non-empty INTERFACE_LINK_LIBRARIES property.</p> <p>This property is deprecated. Use INTERFACE_LINK_LIBRARIES instead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES.html</a>\n  </p>\n</div>\n","prop_tgt/imported_configurations":"<h1 id=\"prop_tgt:IMPORTED_CONFIGURATIONS\">IMPORTED_CONFIGURATIONS</h1> <p id=\"imported-configurations\">Configurations provided for an IMPORTED target.</p> <p>Set this to the list of configuration names available for an IMPORTED target. The names correspond to configurations defined in the project from which the target is imported. If the importing project uses a different set of configurations the names may be mapped using the MAP_IMPORTED_CONFIG_&lt;CONFIG&gt; property. Ignored for non-imported targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_CONFIGURATIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_CONFIGURATIONS.html</a>\n  </p>\n</div>\n","prop_tgt/imported_location_config":"<h1 id=\"prop_tgt:IMPORTED_LOCATION_&lt;CONFIG&gt;\">IMPORTED_LOCATION_&lt;CONFIG&gt;</h1> <p id=\"imported-location-config\">&lt;CONFIG&gt;-specific version of IMPORTED_LOCATION property.</p> <p>Configuration names correspond to those provided by the project from which the target is imported.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LOCATION_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LOCATION_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/imported_location":"<h1 id=\"prop_tgt:IMPORTED_LOCATION\">IMPORTED_LOCATION</h1> <p id=\"imported-location\">Full path to the main file on disk for an IMPORTED target.</p> <p>Set this to the location of an IMPORTED target file on disk. For executables this is the location of the executable file. For bundles on OS X this is the location of the executable file inside Contents/MacOS under the application bundle folder. For static libraries and modules this is the location of the library or module. For shared libraries on non-DLL platforms this is the location of the shared library. For frameworks on OS X this is the location of the library file symlink just inside the framework folder. For DLLs this is the location of the ”.dll” part of the library. For UNKNOWN libraries this is the location of the file to be linked. Ignored for non-imported targets.</p> <p>Projects may skip IMPORTED_LOCATION if the configuration-specific property IMPORTED_LOCATION_&lt;CONFIG&gt; is set. To get the location of an imported target read one of the LOCATION or LOCATION_&lt;CONFIG&gt; properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LOCATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_LOCATION.html</a>\n  </p>\n</div>\n","prop_tgt/imported_no_soname_config":"<h1 id=\"prop_tgt:IMPORTED_NO_SONAME_&lt;CONFIG&gt;\">IMPORTED_NO_SONAME_&lt;CONFIG&gt;</h1> <p id=\"imported-no-soname-config\">&lt;CONFIG&gt;-specific version of IMPORTED_NO_SONAME property.</p> <p>Configuration names correspond to those provided by the project from which the target is imported.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_NO_SONAME_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_NO_SONAME_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/imported_no_soname":"<h1 id=\"prop_tgt:IMPORTED_NO_SONAME\">IMPORTED_NO_SONAME</h1> <p id=\"imported-no-soname\">Specifies that an IMPORTED shared library target has no “soname”.</p> <p>Set this property to true for an imported shared library file that has no “soname” field. CMake may adjust generated link commands for some platforms to prevent the linker from using the path to the library in place of its missing soname. Ignored for non-imported targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_NO_SONAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_NO_SONAME.html</a>\n  </p>\n</div>\n","prop_tgt/imported_soname_config":"<h1 id=\"prop_tgt:IMPORTED_SONAME_&lt;CONFIG&gt;\">IMPORTED_SONAME_&lt;CONFIG&gt;</h1> <p id=\"imported-soname-config\">&lt;CONFIG&gt;-specific version of IMPORTED_SONAME property.</p> <p>Configuration names correspond to those provided by the project from which the target is imported.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_SONAME_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_SONAME_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/imported_soname":"<h1 id=\"prop_tgt:IMPORTED_SONAME\">IMPORTED_SONAME</h1> <p id=\"imported-soname\">The “soname” of an IMPORTED target of shared library type.</p> <p>Set this to the “soname” embedded in an imported shared library. This is meaningful only on platforms supporting the feature. Ignored for non-imported targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_SONAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORTED_SONAME.html</a>\n  </p>\n</div>\n","prop_tgt/import_prefix":"<h1 id=\"prop_tgt:IMPORT_PREFIX\">IMPORT_PREFIX</h1> <p id=\"import-prefix\">What comes before the import library name.</p> <p>Similar to the target property PREFIX, but used for import libraries (typically corresponding to a DLL) instead of regular libraries. A target property that can be set to override the prefix (such as “lib”) on an import library name.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORT_PREFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORT_PREFIX.html</a>\n  </p>\n</div>\n","prop_tgt/install_name_dir":"<h1 id=\"prop_tgt:INSTALL_NAME_DIR\">INSTALL_NAME_DIR</h1> <p id=\"install-name-dir\">Mac OSX directory name for installed targets.</p> <p>INSTALL_NAME_DIR is a string specifying the directory portion of the “install_name” field of shared libraries on Mac OSX to use in the installed targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INSTALL_NAME_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INSTALL_NAME_DIR.html</a>\n  </p>\n</div>\n","prop_tgt/install_rpath":"<h1 id=\"prop_tgt:INSTALL_RPATH\">INSTALL_RPATH</h1> <p id=\"install-rpath\">The rpath to use for installed targets.</p> <p>A semicolon-separated list specifying the rpath to use in installed targets (for platforms that support it). This property is initialized by the value of the variable CMAKE_INSTALL_RPATH if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INSTALL_RPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INSTALL_RPATH.html</a>\n  </p>\n</div>\n","prop_tgt/import_suffix":"<h1 id=\"prop_tgt:IMPORT_SUFFIX\">IMPORT_SUFFIX</h1> <p id=\"import-suffix\">What comes after the import library name.</p> <p>Similar to the target property SUFFIX, but used for import libraries (typically corresponding to a DLL) instead of regular libraries. A target property that can be set to override the suffix (such as ”.lib”) on an import library name.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORT_SUFFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IMPORT_SUFFIX.html</a>\n  </p>\n</div>\n","prop_tgt/install_rpath_use_link_path":"<h1 id=\"prop_tgt:INSTALL_RPATH_USE_LINK_PATH\">INSTALL_RPATH_USE_LINK_PATH</h1> <p id=\"install-rpath-use-link-path\">Add paths to linker search and installed rpath.</p> <p>INSTALL_RPATH_USE_LINK_PATH is a boolean that if set to true will append directories in the linker search path and outside the project to the INSTALL_RPATH. This property is initialized by the value of the variable CMAKE_INSTALL_RPATH_USE_LINK_PATH if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INSTALL_RPATH_USE_LINK_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INSTALL_RPATH_USE_LINK_PATH.html</a>\n  </p>\n</div>\n","prop_tgt/interface_autouic_options":"<h1 id=\"prop_tgt:INTERFACE_AUTOUIC_OPTIONS\">INTERFACE_AUTOUIC_OPTIONS</h1> <p id=\"interface-autouic-options\">List of interface options to pass to uic.</p> <p>Targets may populate this property to publish the options required to use when invoking <code>uic</code>. Consuming targets can add entries to their own <a class=\"reference internal\" href=\"autouic_options#prop_tgt:AUTOUIC_OPTIONS\" title=\"AUTOUIC_OPTIONS\" id=\"index-0-prop_tgt:AUTOUIC_OPTIONS\"><code>AUTOUIC_OPTIONS</code></a> property such as <code>$&lt;TARGET_PROPERTY:foo,INTERFACE_AUTOUIC_OPTIONS&gt;</code> to use the uic options specified in the interface of <code>foo</code>. This is done automatically by the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> command.</p> <p>This property supports generator expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_AUTOUIC_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_AUTOUIC_OPTIONS.html</a>\n  </p>\n</div>\n","prop_tgt/interface_compile_features":"<h1 id=\"prop_tgt:INTERFACE_COMPILE_FEATURES\">INTERFACE_COMPILE_FEATURES</h1> <p id=\"interface-compile-features\">List of public compile features requirements for a library.</p> <p>Targets may populate this property to publish the compile features required to compile against the headers for the target. The <a class=\"reference internal\" href=\"../command/target_compile_features#command:target_compile_features\" title=\"target_compile_features\" id=\"index-1-command:target_compile_features\"><code>target_compile_features()</code></a> command populates this property with values given to the <code>PUBLIC</code> and <code>INTERFACE</code> keywords. Projects may also get and set the property directly.</p> <p>When target dependencies are specified using <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a>, CMake will read this property from all target dependencies to determine the build properties of the consumer.</p> <p>Contents of <code>INTERFACE_COMPILE_FEATURES</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> -manual for more on defining buildsystem properties.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_COMPILE_FEATURES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_COMPILE_FEATURES.html</a>\n  </p>\n</div>\n","prop_tgt/interface_compile_definitions":"<h1 id=\"prop_tgt:INTERFACE_COMPILE_DEFINITIONS\">INTERFACE_COMPILE_DEFINITIONS</h1> <p id=\"interface-compile-definitions\">List of public compile definitions requirements for a library.</p> <p>Targets may populate this property to publish the compile definitions required to compile against the headers for the target. The <a class=\"reference internal\" href=\"../command/target_compile_definitions#command:target_compile_definitions\" title=\"target_compile_definitions\" id=\"index-1-command:target_compile_definitions\"><code>target_compile_definitions()</code></a> command populates this property with values given to the <code>PUBLIC</code> and <code>INTERFACE</code> keywords. Projects may also get and set the property directly.</p> <p>When target dependencies are specified using <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a>, CMake will read this property from all target dependencies to determine the build properties of the consumer.</p> <p>Contents of <code>INTERFACE_COMPILE_DEFINITIONS</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> -manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_COMPILE_DEFINITIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_COMPILE_DEFINITIONS.html</a>\n  </p>\n</div>\n","prop_tgt/interface_compile_options":"<h1 id=\"prop_tgt:INTERFACE_COMPILE_OPTIONS\">INTERFACE_COMPILE_OPTIONS</h1> <p id=\"interface-compile-options\">List of public compile options requirements for a library.</p> <p>Targets may populate this property to publish the compile options required to compile against the headers for the target. The <a class=\"reference internal\" href=\"../command/target_compile_options#command:target_compile_options\" title=\"target_compile_options\" id=\"index-1-command:target_compile_options\"><code>target_compile_options()</code></a> command populates this property with values given to the <code>PUBLIC</code> and <code>INTERFACE</code> keywords. Projects may also get and set the property directly.</p> <p>When target dependencies are specified using <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a>, CMake will read this property from all target dependencies to determine the build properties of the consumer.</p> <p>Contents of <code>INTERFACE_COMPILE_OPTIONS</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> -manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_COMPILE_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_COMPILE_OPTIONS.html</a>\n  </p>\n</div>\n","prop_tgt/interface_include_directories":"<h1 id=\"prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\">INTERFACE_INCLUDE_DIRECTORIES</h1> <p id=\"interface-include-directories\">List of public include directories requirements for a library.</p> <p>Targets may populate this property to publish the include directories required to compile against the headers for the target. The <a class=\"reference internal\" href=\"../command/target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-1-command:target_include_directories\"><code>target_include_directories()</code></a> command populates this property with values given to the <code>PUBLIC</code> and <code>INTERFACE</code> keywords. Projects may also get and set the property directly.</p> <p>When target dependencies are specified using <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a>, CMake will read this property from all target dependencies to determine the build properties of the consumer.</p> <p>Contents of <code>INTERFACE_INCLUDE_DIRECTORIES</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> -manual for more on defining buildsystem properties.</p> <p>Include directories usage requirements commonly differ between the build-tree and the install-tree. The <code>BUILD_INTERFACE</code> and <code>INSTALL_INTERFACE</code> generator expressions can be used to describe separate usage requirements based on the usage location. Relative paths are allowed within the <code>INSTALL_INTERFACE</code> expression and are interpreted relative to the installation prefix. For example:</p> <pre data-language=\"cmake\">target_include_directories(mylib INTERFACE\n  $&lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/mylib&gt;\n  $&lt;INSTALL_INTERFACE:include/mylib&gt;  # &lt;prefix&gt;/include/mylib\n)\n</pre>  <h2 id=\"creating-relocatable-packages\">Creating Relocatable Packages</h2> <p>Note that it is not advisable to populate the <code>INSTALL_INTERFACE</code> of the <code>INTERFACE_INCLUDE_DIRECTORIES</code> of a target with absolute paths to the include directories of dependencies. That would hard-code into installed packages the include directory paths for dependencies <strong>as found on the machine the package was made on</strong>.</p> <p>The <code>INSTALL_INTERFACE</code> of the <code>INTERFACE_INCLUDE_DIRECTORIES</code> is only suitable for specifying the required include directories for headers provided with the target itself, not those provided by the transitive dependencies listed in its <a class=\"reference internal\" href=\"interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-0-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> target property. Those dependencies should themselves be targets that specify their own header locations in <code>INTERFACE_INCLUDE_DIRECTORIES</code>.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#creating-relocatable-packages\"><span>Creating Relocatable Packages</span></a> section of the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-0-manual:cmake-packages(7)\"><code>cmake-packages(7)</code></a> manual for discussion of additional care that must be taken when specifying usage requirements while creating packages for redistribution.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_INCLUDE_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_INCLUDE_DIRECTORIES.html</a>\n  </p>\n</div>\n","prop_tgt/interface_position_independent_code":"<h1 id=\"prop_tgt:INTERFACE_POSITION_INDEPENDENT_CODE\">INTERFACE_POSITION_INDEPENDENT_CODE</h1> <p id=\"interface-position-independent-code\">Whether consumers need to create a position-independent target</p> <p>The <code>INTERFACE_POSITION_INDEPENDENT_CODE</code> property informs consumers of this target whether they must set their <a class=\"reference internal\" href=\"position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-0-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> property to <code>ON</code>. If this property is set to <code>ON</code>, then the <a class=\"reference internal\" href=\"position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-1-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> property on all consumers will be set to <code>ON</code>. Similarly, if this property is set to <code>OFF</code>, then the <a class=\"reference internal\" href=\"position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-2-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> property on all consumers will be set to <code>OFF</code>. If this property is undefined, then consumers will determine their <a class=\"reference internal\" href=\"position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-3-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> property by other means. Consumers must ensure that the targets that they link to have a consistent requirement for their <code>INTERFACE_POSITION_INDEPENDENT_CODE</code> property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_POSITION_INDEPENDENT_CODE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_POSITION_INDEPENDENT_CODE.html</a>\n  </p>\n</div>\n","prop_tgt/interface_sources":"<h1 id=\"prop_tgt:INTERFACE_SOURCES\">INTERFACE_SOURCES</h1> <p id=\"interface-sources\">List of interface sources to compile into consuming targets.</p> <p>Targets may populate this property to publish the sources for consuming targets to compile. The <a class=\"reference internal\" href=\"../command/target_sources#command:target_sources\" title=\"target_sources\" id=\"index-0-command:target_sources\"><code>target_sources()</code></a> command populates this property with values given to the <code>PUBLIC</code> and <code>INTERFACE</code> keywords. Projects may also get and set the property directly.</p> <p>When target dependencies are specified using <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a>, CMake will read this property from all target dependencies to determine the sources of the consumer.</p> <p>Contents of <code>INTERFACE_SOURCES</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_SOURCES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_SOURCES.html</a>\n  </p>\n</div>\n","prop_tgt/interface_system_include_directories":"<h1 id=\"prop_tgt:INTERFACE_SYSTEM_INCLUDE_DIRECTORIES\">INTERFACE_SYSTEM_INCLUDE_DIRECTORIES</h1> <p id=\"interface-system-include-directories\">List of public system include directories for a library.</p> <p>Targets may populate this property to publish the include directories which contain system headers, and therefore should not result in compiler warnings. The <a class=\"reference internal\" href=\"../command/target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-0-command:target_include_directories\"><code>target_include_directories(SYSTEM)</code></a> command signature populates this property with values given to the <code>PUBLIC</code> and <code>INTERFACE</code> keywords.</p> <p>Projects may also get and set the property directly, but must be aware that adding directories to this property does not make those directories used during compilation. Adding directories to this property marks directories as <code>SYSTEM</code> which otherwise would be used in a non-<code>SYSTEM</code> manner. This can appear similar to ‘duplication’, so prefer the high-level <a class=\"reference internal\" href=\"../command/target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-1-command:target_include_directories\"><code>target_include_directories(SYSTEM)</code></a> command and avoid setting the property by low-level means.</p> <p>When target dependencies are specified using <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a>, CMake will read this property from all target dependencies to mark the same include directories as containing system headers.</p> <p>Contents of <code>INTERFACE_SYSTEM_INCLUDE_DIRECTORIES</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES.html</a>\n  </p>\n</div>\n","prop_tgt/interprocedural_optimization_config":"<h1 id=\"prop_tgt:INTERPROCEDURAL_OPTIMIZATION_&lt;CONFIG&gt;\">INTERPROCEDURAL_OPTIMIZATION_&lt;CONFIG&gt;</h1> <p id=\"interprocedural-optimization-config\">Per-configuration interprocedural optimization for a target.</p> <p>This is a per-configuration version of INTERPROCEDURAL_OPTIMIZATION. If set, this property overrides the generic property for the named configuration.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INTERPROCEDURAL_OPTIMIZATION_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INTERPROCEDURAL_OPTIMIZATION_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/interprocedural_optimization":"<h1 id=\"prop_tgt:INTERPROCEDURAL_OPTIMIZATION\">INTERPROCEDURAL_OPTIMIZATION</h1> <p id=\"interprocedural-optimization\">Enable interprocedural optimization for a target.</p> <p>If set to true, enables interprocedural optimizations if they are known to be supported by the compiler.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/INTERPROCEDURAL_OPTIMIZATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/INTERPROCEDURAL_OPTIMIZATION.html</a>\n  </p>\n</div>\n","prop_tgt/ios_install_combined":"<h1 id=\"prop_tgt:IOS_INSTALL_COMBINED\">IOS_INSTALL_COMBINED</h1> <p id=\"ios-install-combined\">Build a combined (device and simulator) target when installing.</p> <p>When this property is set to set to false (which is the default) then it will either be built with the device SDK or the simulator SDK depending on the SDK set. But if this property is set to true then the target will at install time also be built for the corresponding SDK and combined into one library.</p> <p>This feature requires at least Xcode version 6.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/IOS_INSTALL_COMBINED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/IOS_INSTALL_COMBINED.html</a>\n  </p>\n</div>\n","prop_tgt/job_pool_compile":"<h1 id=\"prop_tgt:JOB_POOL_COMPILE\">JOB_POOL_COMPILE</h1> <p id=\"job-pool-compile\">Ninja only: Pool used for compiling.</p> <p>The number of parallel compile processes could be limited by defining pools with the global <a class=\"reference internal\" href=\"../prop_gbl/job_pools#prop_gbl:JOB_POOLS\" title=\"JOB_POOLS\" id=\"index-0-prop_gbl:JOB_POOLS\"><code>JOB_POOLS</code></a> property and then specifying here the pool name.</p> <p>For instance:</p> <pre data-language=\"cmake\">set_property(TARGET myexe PROPERTY JOB_POOL_COMPILE ten_jobs)\n</pre> <p>This property is initialized by the value of <a class=\"reference internal\" href=\"../variable/cmake_job_pool_compile#variable:CMAKE_JOB_POOL_COMPILE\" title=\"CMAKE_JOB_POOL_COMPILE\" id=\"index-0-variable:CMAKE_JOB_POOL_COMPILE\"><code>CMAKE_JOB_POOL_COMPILE</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/JOB_POOL_COMPILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/JOB_POOL_COMPILE.html</a>\n  </p>\n</div>\n","prop_tgt/job_pool_link":"<h1 id=\"prop_tgt:JOB_POOL_LINK\">JOB_POOL_LINK</h1> <p id=\"job-pool-link\">Ninja only: Pool used for linking.</p> <p>The number of parallel link processes could be limited by defining pools with the global <a class=\"reference internal\" href=\"../prop_gbl/job_pools#prop_gbl:JOB_POOLS\" title=\"JOB_POOLS\" id=\"index-0-prop_gbl:JOB_POOLS\"><code>JOB_POOLS</code></a> property and then specifing here the pool name.</p> <p>For instance:</p> <pre data-language=\"cmake\">set_property(TARGET myexe PROPERTY JOB_POOL_LINK two_jobs)\n</pre> <p>This property is initialized by the value of <a class=\"reference internal\" href=\"../variable/cmake_job_pool_link#variable:CMAKE_JOB_POOL_LINK\" title=\"CMAKE_JOB_POOL_LINK\" id=\"index-0-variable:CMAKE_JOB_POOL_LINK\"><code>CMAKE_JOB_POOL_LINK</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/JOB_POOL_LINK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/JOB_POOL_LINK.html</a>\n  </p>\n</div>\n","prop_tgt/labels":"<h1 id=\"prop_tgt:LABELS\">LABELS</h1> <p id=\"labels\">Specify a list of text labels associated with a target.</p> <p>Target label semantics are currently unspecified.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LABELS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LABELS.html</a>\n  </p>\n</div>\n","prop_tgt/lang_compiler_launcher":"<h1 id=\"prop_tgt:&lt;LANG&gt;_COMPILER_LAUNCHER\">&lt;LANG&gt;_COMPILER_LAUNCHER</h1> <p id=\"lang-compiler-launcher\">This property is implemented only when <code>&lt;LANG&gt;</code> is <code>C</code> or <code>CXX</code>.</p> <p>Specify a <a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> containing a command line for a compiler launching tool. The <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> and the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a> generator will run this tool and pass the compiler and its arguments to the tool. Some example tools are distcc and ccache.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_LAUNCHER\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_LAUNCHER\"><code>CMAKE_&lt;LANG&gt;_COMPILER_LAUNCHER</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LANG_COMPILER_LAUNCHER.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LANG_COMPILER_LAUNCHER.html</a>\n  </p>\n</div>\n","prop_tgt/lang_include_what_you_use":"<h1 id=\"prop_tgt:&lt;LANG&gt;_INCLUDE_WHAT_YOU_USE\">&lt;LANG&gt;_INCLUDE_WHAT_YOU_USE</h1> <p id=\"lang-include-what-you-use\">This property is implemented only when <code>&lt;LANG&gt;</code> is <code>C</code> or <code>CXX</code>.</p> <p>Specify a <a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> containing a command line for the <code>include-what-you-use</code> tool. The <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> and the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a> generator will run this tool along with the compiler and report a warning if the tool reports any problems.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_INCLUDE_WHAT_YOU_USE\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_INCLUDE_WHAT_YOU_USE\"><code>CMAKE_&lt;LANG&gt;_INCLUDE_WHAT_YOU_USE</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LANG_INCLUDE_WHAT_YOU_USE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LANG_INCLUDE_WHAT_YOU_USE.html</a>\n  </p>\n</div>\n","prop_tgt/library_output_directory":"<h1 id=\"prop_tgt:LIBRARY_OUTPUT_DIRECTORY\">LIBRARY_OUTPUT_DIRECTORY</h1> <p id=\"library-output-directory\">Output directory in which to build <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#library-output-artifacts\"><span>LIBRARY</span></a> target files.</p> <p>This property specifies the directory into which library target files should be built. The property value may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>. Multi-configuration generators (VS, Xcode) append a per-configuration subdirectory to the specified directory unless a generator expression is used.</p> <p>This property is initialized by the value of the variable CMAKE_LIBRARY_OUTPUT_DIRECTORY if it is set when a target is created.</p> <p>See also the <a class=\"reference internal\" href=\"#\" title=\"LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LIBRARY_OUTPUT_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LIBRARY_OUTPUT_DIRECTORY.html</a>\n  </p>\n</div>\n","prop_tgt/library_output_name_config":"<h1 id=\"prop_tgt:LIBRARY_OUTPUT_NAME_&lt;CONFIG&gt;\">LIBRARY_OUTPUT_NAME_&lt;CONFIG&gt;</h1> <p id=\"library-output-name-config\">Per-configuration output name for <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#library-output-artifacts\"><span>LIBRARY</span></a> target files.</p> <p>This is the configuration-specific version of the <a class=\"reference internal\" href=\"library_output_name#prop_tgt:LIBRARY_OUTPUT_NAME\" title=\"LIBRARY_OUTPUT_NAME\" id=\"index-0-prop_tgt:LIBRARY_OUTPUT_NAME\"><code>LIBRARY_OUTPUT_NAME</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LIBRARY_OUTPUT_NAME_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LIBRARY_OUTPUT_NAME_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/library_output_name":"<h1 id=\"prop_tgt:LIBRARY_OUTPUT_NAME\">LIBRARY_OUTPUT_NAME</h1> <p id=\"library-output-name\">Output name for <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#library-output-artifacts\"><span>LIBRARY</span></a> target files.</p> <p>This property specifies the base name for library target files. It overrides <a class=\"reference internal\" href=\"output_name#prop_tgt:OUTPUT_NAME\" title=\"OUTPUT_NAME\" id=\"index-0-prop_tgt:OUTPUT_NAME\"><code>OUTPUT_NAME</code></a> and <a class=\"reference internal\" href=\"#\" title=\"OUTPUT_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:OUTPUT_NAME_&lt;CONFIG&gt;\"><code>OUTPUT_NAME_&lt;CONFIG&gt;</code></a> properties.</p> <p>See also the <a class=\"reference internal\" href=\"#\" title=\"LIBRARY_OUTPUT_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:LIBRARY_OUTPUT_NAME_&lt;CONFIG&gt;\"><code>LIBRARY_OUTPUT_NAME_&lt;CONFIG&gt;</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LIBRARY_OUTPUT_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LIBRARY_OUTPUT_NAME.html</a>\n  </p>\n</div>\n","prop_tgt/link_depends_no_shared":"<h1 id=\"prop_tgt:LINK_DEPENDS_NO_SHARED\">LINK_DEPENDS_NO_SHARED</h1> <p id=\"link-depends-no-shared\">Do not depend on linked shared library files.</p> <p>Set this property to true to tell CMake generators not to add file-level dependencies on the shared library files linked by this target. Modification to the shared libraries will not be sufficient to re-link this target. Logical target-level dependencies will not be affected so the linked shared libraries will still be brought up to date before this target is built.</p> <p>This property is initialized by the value of the variable CMAKE_LINK_DEPENDS_NO_SHARED if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_DEPENDS_NO_SHARED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_DEPENDS_NO_SHARED.html</a>\n  </p>\n</div>\n","prop_tgt/link_depends":"<h1 id=\"prop_tgt:LINK_DEPENDS\">LINK_DEPENDS</h1> <p id=\"link-depends\">Additional files on which a target binary depends for linking.</p> <p>Specifies a semicolon-separated list of full-paths to files on which the link rule for this target depends. The target binary will be linked if any of the named files is newer than it.</p> <p>This property is ignored by non-Makefile generators. It is intended to specify dependencies on “linker scripts” for custom Makefile link rules.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_DEPENDS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_DEPENDS.html</a>\n  </p>\n</div>\n","prop_tgt/lang_visibility_preset":"<h1 id=\"prop_tgt:&lt;LANG&gt;_VISIBILITY_PRESET\">&lt;LANG&gt;_VISIBILITY_PRESET</h1> <p id=\"lang-visibility-preset\">Value for symbol visibility compile flags</p> <p>The <code>&lt;LANG&gt;_VISIBILITY_PRESET</code> property determines the value passed in a visibility related compile option, such as <code>-fvisibility=</code> for <code>&lt;LANG&gt;</code>. This property affects compilation in sources of all types of targets (subject to policy <a class=\"reference internal\" href=\"../policy/cmp0063#policy:CMP0063\" title=\"CMP0063\" id=\"index-0-policy:CMP0063\"><code>CMP0063</code></a>).</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_VISIBILITY_PRESET\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_VISIBILITY_PRESET\"><code>CMAKE_&lt;LANG&gt;_VISIBILITY_PRESET</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LANG_VISIBILITY_PRESET.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LANG_VISIBILITY_PRESET.html</a>\n  </p>\n</div>\n","prop_tgt/library_output_directory_config":"<h1 id=\"prop_tgt:LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\">LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</h1> <p id=\"library-output-directory-config\">Per-configuration output directory for <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#library-output-artifacts\"><span>LIBRARY</span></a> target files.</p> <p>This is a per-configuration version of the <a class=\"reference internal\" href=\"library_output_directory#prop_tgt:LIBRARY_OUTPUT_DIRECTORY\" title=\"LIBRARY_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:LIBRARY_OUTPUT_DIRECTORY\"><code>LIBRARY_OUTPUT_DIRECTORY</code></a> target property, but multi-configuration generators (VS, Xcode) do NOT append a per-configuration subdirectory to the specified directory. This property is initialized by the value of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-variable:CMAKE_LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>CMAKE_LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> variable if it is set when a target is created.</p> <p>Contents of <code>LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code> may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LIBRARY_OUTPUT_DIRECTORY_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LIBRARY_OUTPUT_DIRECTORY_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/linker_language":"<h1 id=\"prop_tgt:LINKER_LANGUAGE\">LINKER_LANGUAGE</h1> <p id=\"linker-language\">Specifies language whose compiler will invoke the linker.</p> <p>For executables, shared libraries, and modules, this sets the language whose compiler is used to link the target (such as “C” or “CXX”). A typical value for an executable is the language of the source file providing the program entry point (main). If not set, the language with the highest linker preference value is the default. See documentation of CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE variables.</p> <p>If this property is not set by the user, it will be calculated at generate-time by CMake.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LINKER_LANGUAGE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LINKER_LANGUAGE.html</a>\n  </p>\n</div>\n","prop_tgt/link_flags_config":"<h1 id=\"prop_tgt:LINK_FLAGS_&lt;CONFIG&gt;\">LINK_FLAGS_&lt;CONFIG&gt;</h1> <p id=\"link-flags-config\">Per-configuration linker flags for a target.</p> <p>This is the configuration-specific version of LINK_FLAGS.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_FLAGS_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_FLAGS_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/link_flags":"<h1 id=\"prop_tgt:LINK_FLAGS\">LINK_FLAGS</h1> <p id=\"link-flags\">Additional flags to use when linking this target.</p> <p>The LINK_FLAGS property can be used to add extra flags to the link step of a target. LINK_FLAGS_&lt;CONFIG&gt; will add to the configuration &lt;CONFIG&gt;, for example, DEBUG, RELEASE, MINSIZEREL, RELWITHDEBINFO.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_FLAGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_FLAGS.html</a>\n  </p>\n</div>\n","prop_tgt/link_interface_libraries_config":"<h1 id=\"prop_tgt:LINK_INTERFACE_LIBRARIES_&lt;CONFIG&gt;\">LINK_INTERFACE_LIBRARIES_&lt;CONFIG&gt;</h1> <p id=\"link-interface-libraries-config\">Per-configuration list of public interface libraries for a target.</p> <p>This is the configuration-specific version of <a class=\"reference internal\" href=\"link_interface_libraries#prop_tgt:LINK_INTERFACE_LIBRARIES\" title=\"LINK_INTERFACE_LIBRARIES\" id=\"index-0-prop_tgt:LINK_INTERFACE_LIBRARIES\"><code>LINK_INTERFACE_LIBRARIES</code></a>. If set, this property completely overrides the generic property for the named configuration.</p> <p>This property is overridden by the <a class=\"reference internal\" href=\"interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-0-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> property if policy <a class=\"reference internal\" href=\"../policy/cmp0022#policy:CMP0022\" title=\"CMP0022\" id=\"index-0-policy:CMP0022\"><code>CMP0022</code></a> is <code>NEW</code>.</p> <p>This property is deprecated. Use <a class=\"reference internal\" href=\"interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-1-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> instead.</p>  <h2 id=\"creating-relocatable-packages\">Creating Relocatable Packages</h2> <p>Note that it is not advisable to populate the <code>LINK_INTERFACE_LIBRARIES_&lt;CONFIG&gt;</code> of a target with absolute paths to dependencies. That would hard-code into installed packages the library file paths for dependencies <strong>as found on the machine the package was made on</strong>.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#creating-relocatable-packages\"><span>Creating Relocatable Packages</span></a> section of the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-0-manual:cmake-packages(7)\"><code>cmake-packages(7)</code></a> manual for discussion of additional care that must be taken when specifying usage requirements while creating packages for redistribution.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_INTERFACE_LIBRARIES_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_INTERFACE_LIBRARIES_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/link_interface_libraries":"<h1 id=\"prop_tgt:LINK_INTERFACE_LIBRARIES\">LINK_INTERFACE_LIBRARIES</h1> <p id=\"link-interface-libraries\">List public interface libraries for a shared library or executable.</p> <p>By default linking to a shared library target transitively links to targets with which the library itself was linked. For an executable with exports (see the <a class=\"reference internal\" href=\"enable_exports#prop_tgt:ENABLE_EXPORTS\" title=\"ENABLE_EXPORTS\" id=\"index-0-prop_tgt:ENABLE_EXPORTS\"><code>ENABLE_EXPORTS</code></a> target property) no default transitive link dependencies are used. This property replaces the default transitive link dependencies with an explicit list. When the target is linked into another target using the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> command, the libraries listed (and recursively their link interface libraries) will be provided to the other target also. If the list is empty then no transitive link dependencies will be incorporated when this target is linked into another target even if the default set is non-empty. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_link_interface_libraries#variable:CMAKE_LINK_INTERFACE_LIBRARIES\" title=\"CMAKE_LINK_INTERFACE_LIBRARIES\" id=\"index-0-variable:CMAKE_LINK_INTERFACE_LIBRARIES\"><code>CMAKE_LINK_INTERFACE_LIBRARIES</code></a> variable if it is set when a target is created. This property is ignored for <code>STATIC</code> libraries.</p> <p>This property is overridden by the <a class=\"reference internal\" href=\"interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-0-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> property if policy <a class=\"reference internal\" href=\"../policy/cmp0022#policy:CMP0022\" title=\"CMP0022\" id=\"index-0-policy:CMP0022\"><code>CMP0022</code></a> is <code>NEW</code>.</p> <p>This property is deprecated. Use <a class=\"reference internal\" href=\"interface_link_libraries#prop_tgt:INTERFACE_LINK_LIBRARIES\" title=\"INTERFACE_LINK_LIBRARIES\" id=\"index-1-prop_tgt:INTERFACE_LINK_LIBRARIES\"><code>INTERFACE_LINK_LIBRARIES</code></a> instead.</p>  <h2 id=\"creating-relocatable-packages\">Creating Relocatable Packages</h2> <p>Note that it is not advisable to populate the <code>LINK_INTERFACE_LIBRARIES</code> of a target with absolute paths to dependencies. That would hard-code into installed packages the library file paths for dependencies <strong>as found on the machine the package was made on</strong>.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#creating-relocatable-packages\"><span>Creating Relocatable Packages</span></a> section of the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#manual:cmake-packages(7)\" title=\"cmake-packages(7)\" id=\"index-0-manual:cmake-packages(7)\"><code>cmake-packages(7)</code></a> manual for discussion of additional care that must be taken when specifying usage requirements while creating packages for redistribution.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_INTERFACE_LIBRARIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_INTERFACE_LIBRARIES.html</a>\n  </p>\n</div>\n","prop_tgt/link_interface_multiplicity_config":"<h1 id=\"prop_tgt:LINK_INTERFACE_MULTIPLICITY_&lt;CONFIG&gt;\">LINK_INTERFACE_MULTIPLICITY_&lt;CONFIG&gt;</h1> <p id=\"link-interface-multiplicity-config\">Per-configuration repetition count for cycles of STATIC libraries.</p> <p>This is the configuration-specific version of LINK_INTERFACE_MULTIPLICITY. If set, this property completely overrides the generic property for the named configuration.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_INTERFACE_MULTIPLICITY_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_INTERFACE_MULTIPLICITY_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/link_interface_multiplicity":"<h1 id=\"prop_tgt:LINK_INTERFACE_MULTIPLICITY\">LINK_INTERFACE_MULTIPLICITY</h1> <p id=\"link-interface-multiplicity\">Repetition count for STATIC libraries with cyclic dependencies.</p> <p>When linking to a STATIC library target with cyclic dependencies the linker may need to scan more than once through the archives in the strongly connected component of the dependency graph. CMake by default constructs the link line so that the linker will scan through the component at least twice. This property specifies the minimum number of scans if it is larger than the default. CMake uses the largest value specified by any target in a component.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html</a>\n  </p>\n</div>\n","prop_tgt/link_search_end_static":"<h1 id=\"prop_tgt:LINK_SEARCH_END_STATIC\">LINK_SEARCH_END_STATIC</h1> <p id=\"link-search-end-static\">End a link line such that static system libraries are used.</p> <p>Some linkers support switches such as -Bstatic and -Bdynamic to determine whether to use static or shared libraries for -lXXX options. CMake uses these options to set the link type for libraries whose full paths are not known or (in some cases) are in implicit link directories for the platform. By default CMake adds an option at the end of the library list (if necessary) to set the linker search type back to its starting type. This property switches the final linker search type to -Bstatic regardless of how it started.</p> <p>This property is initialized by the value of the variable CMAKE_LINK_SEARCH_END_STATIC if it is set when a target is created.</p> <p>See also LINK_SEARCH_START_STATIC.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_SEARCH_END_STATIC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_SEARCH_END_STATIC.html</a>\n  </p>\n</div>\n","prop_tgt/link_search_start_static":"<h1 id=\"prop_tgt:LINK_SEARCH_START_STATIC\">LINK_SEARCH_START_STATIC</h1> <p id=\"link-search-start-static\">Assume the linker looks for static libraries by default.</p> <p>Some linkers support switches such as -Bstatic and -Bdynamic to determine whether to use static or shared libraries for -lXXX options. CMake uses these options to set the link type for libraries whose full paths are not known or (in some cases) are in implicit link directories for the platform. By default the linker search type is assumed to be -Bdynamic at the beginning of the library list. This property switches the assumption to -Bstatic. It is intended for use when linking an executable statically (e.g. with the GNU -static option).</p> <p>This property is initialized by the value of the variable CMAKE_LINK_SEARCH_START_STATIC if it is set when a target is created.</p> <p>See also LINK_SEARCH_END_STATIC.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_SEARCH_START_STATIC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LINK_SEARCH_START_STATIC.html</a>\n  </p>\n</div>\n","prop_tgt/location_config":"<h1 id=\"prop_tgt:LOCATION_&lt;CONFIG&gt;\">LOCATION_&lt;CONFIG&gt;</h1> <p id=\"location-config\">Read-only property providing a target location on disk.</p> <p>A read-only property that indicates where a target’s main file is located on disk for the configuration &lt;CONFIG&gt;. The property is defined only for library and executable targets. An imported target may provide a set of configurations different from that of the importing project. By default CMake looks for an exact-match but otherwise uses an arbitrary available configuration. Use the MAP_IMPORTED_CONFIG_&lt;CONFIG&gt; property to map imported configurations explicitly.</p> <p>Do not set properties that affect the location of a target after reading this property. These include properties whose names match “(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_&lt;CONFIG&gt;)?”, <code>(IMPLIB_)?(PREFIX|SUFFIX)</code>, or “LINKER_LANGUAGE”. Failure to follow this rule is not diagnosed and leaves the location of the target undefined.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LOCATION_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LOCATION_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/location":"<h1 id=\"prop_tgt:LOCATION\">LOCATION</h1> <p id=\"location\">Read-only location of a target on disk.</p> <p>For an imported target, this read-only property returns the value of the LOCATION_&lt;CONFIG&gt; property for an unspecified configuration &lt;CONFIG&gt; provided by the target.</p> <p>For a non-imported target, this property is provided for compatibility with CMake 2.4 and below. It was meant to get the location of an executable target’s output file for use in add_custom_command. The path may contain a build-system-specific portion that is replaced at build time with the configuration getting built (such as “$(ConfigurationName)” in VS). In CMake 2.6 and above add_custom_command automatically recognizes a target name in its COMMAND and DEPENDS options and computes the target location. In CMake 2.8.4 and above add_custom_command recognizes generator expressions to refer to target locations anywhere in the command. Therefore this property is not needed for creating custom commands.</p> <p>Do not set properties that affect the location of a target after reading this property. These include properties whose names match “(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_&lt;CONFIG&gt;)?”, <code>(IMPLIB_)?(PREFIX|SUFFIX)</code>, or “LINKER_LANGUAGE”. Failure to follow this rule is not diagnosed and leaves the location of the target undefined.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/LOCATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/LOCATION.html</a>\n  </p>\n</div>\n","prop_tgt/macosx_bundle_info_plist":"<h1 id=\"prop_tgt:MACOSX_BUNDLE_INFO_PLIST\">MACOSX_BUNDLE_INFO_PLIST</h1> <p id=\"macosx-bundle-info-plist\">Specify a custom <code>Info.plist</code> template for a OS X and iOS Application Bundle.</p> <p>An executable target with <a class=\"reference internal\" href=\"macosx_bundle#prop_tgt:MACOSX_BUNDLE\" title=\"MACOSX_BUNDLE\" id=\"index-0-prop_tgt:MACOSX_BUNDLE\"><code>MACOSX_BUNDLE</code></a> enabled will be built as an application bundle on OS X. By default its <code>Info.plist</code> file is created by configuring a template called <code>MacOSXBundleInfo.plist.in</code> located in the <a class=\"reference internal\" href=\"../variable/cmake_module_path#variable:CMAKE_MODULE_PATH\" title=\"CMAKE_MODULE_PATH\" id=\"index-0-variable:CMAKE_MODULE_PATH\"><code>CMAKE_MODULE_PATH</code></a>. This property specifies an alternative template file name which may be a full path.</p> <p>The following target properties may be set to specify content to be configured into the file:</p> <dl class=\"docutils\"> <dt><code>MACOSX_BUNDLE_BUNDLE_NAME</code></dt> <dd>Sets <code>CFBundleName</code>.</dd> <dt><code>MACOSX_BUNDLE_BUNDLE_VERSION</code></dt> <dd>Sets <code>CFBundleVersion</code>.</dd> <dt><code>MACOSX_BUNDLE_COPYRIGHT</code></dt> <dd>Sets <code>NSHumanReadableCopyright</code>.</dd> <dt><code>MACOSX_BUNDLE_GUI_IDENTIFIER</code></dt> <dd>Sets <code>CFBundleIdentifier</code>.</dd> <dt><code>MACOSX_BUNDLE_ICON_FILE</code></dt> <dd>Sets <code>CFBundleIconFile</code>.</dd> <dt><code>MACOSX_BUNDLE_INFO_STRING</code></dt> <dd>Sets <code>CFBundleGetInfoString</code>.</dd> <dt><code>MACOSX_BUNDLE_LONG_VERSION_STRING</code></dt> <dd>Sets <code>CFBundleLongVersionString</code>.</dd> <dt><code>MACOSX_BUNDLE_SHORT_VERSION_STRING</code></dt> <dd>Sets <code>CFBundleShortVersionString</code>.</dd> </dl> <p>CMake variables of the same name may be set to affect all targets in a directory that do not have each specific property set. If a custom <code>Info.plist</code> is specified by this property it may of course hard-code all the settings instead of using the target properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.html</a>\n  </p>\n</div>\n","prop_tgt/macosx_bundle":"<h1 id=\"prop_tgt:MACOSX_BUNDLE\">MACOSX_BUNDLE</h1> <p id=\"macosx-bundle\">Build an executable as an Application Bundle on OS X or iOS.</p> <p>When this property is set to <code>TRUE</code> the executable when built on OS X or iOS will be created as an application bundle. This makes it a GUI executable that can be launched from the Finder. See the <a class=\"reference internal\" href=\"macosx_framework_info_plist#prop_tgt:MACOSX_FRAMEWORK_INFO_PLIST\" title=\"MACOSX_FRAMEWORK_INFO_PLIST\" id=\"index-0-prop_tgt:MACOSX_FRAMEWORK_INFO_PLIST\"><code>MACOSX_FRAMEWORK_INFO_PLIST</code></a> target property for information about creation of the <code>Info.plist</code> file for the application bundle. This property is initialized by the value of the variable <a class=\"reference internal\" href=\"../variable/cmake_macosx_bundle#variable:CMAKE_MACOSX_BUNDLE\" title=\"CMAKE_MACOSX_BUNDLE\" id=\"index-0-variable:CMAKE_MACOSX_BUNDLE\"><code>CMAKE_MACOSX_BUNDLE</code></a> if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/MACOSX_BUNDLE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/MACOSX_BUNDLE.html</a>\n  </p>\n</div>\n","prop_tgt/macosx_framework_info_plist":"<h1 id=\"prop_tgt:MACOSX_FRAMEWORK_INFO_PLIST\">MACOSX_FRAMEWORK_INFO_PLIST</h1> <p id=\"macosx-framework-info-plist\">Specify a custom <code>Info.plist</code> template for a OS X and iOS Framework.</p> <p>A library target with <a class=\"reference internal\" href=\"framework#prop_tgt:FRAMEWORK\" title=\"FRAMEWORK\" id=\"index-0-prop_tgt:FRAMEWORK\"><code>FRAMEWORK</code></a> enabled will be built as a framework on OS X. By default its <code>Info.plist</code> file is created by configuring a template called <code>MacOSXFrameworkInfo.plist.in</code> located in the <a class=\"reference internal\" href=\"../variable/cmake_module_path#variable:CMAKE_MODULE_PATH\" title=\"CMAKE_MODULE_PATH\" id=\"index-0-variable:CMAKE_MODULE_PATH\"><code>CMAKE_MODULE_PATH</code></a>. This property specifies an alternative template file name which may be a full path.</p> <p>The following target properties may be set to specify content to be configured into the file:</p> <dl class=\"docutils\"> <dt><code>MACOSX_FRAMEWORK_BUNDLE_VERSION</code></dt> <dd>Sets <code>CFBundleVersion</code>.</dd> <dt><code>MACOSX_FRAMEWORK_ICON_FILE</code></dt> <dd>Sets <code>CFBundleIconFile</code>.</dd> <dt><code>MACOSX_FRAMEWORK_IDENTIFIER</code></dt> <dd>Sets <code>CFBundleIdentifier</code>.</dd> <dt><code>MACOSX_FRAMEWORK_SHORT_VERSION_STRING</code></dt> <dd>Sets <code>CFBundleShortVersionString</code>.</dd> </dl> <p>CMake variables of the same name may be set to affect all targets in a directory that do not have each specific property set. If a custom <code>Info.plist</code> is specified by this property it may of course hard-code all the settings instead of using the target properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.html</a>\n  </p>\n</div>\n","prop_tgt/macosx_rpath":"<h1 id=\"prop_tgt:MACOSX_RPATH\">MACOSX_RPATH</h1> <p id=\"macosx-rpath\">Whether this target on OS X or iOS is located at runtime using rpaths.</p> <p>When this property is set to <code>TRUE</code>, the directory portion of the <code>install_name</code> field of this shared library will be <code>@rpath</code> unless overridden by <a class=\"reference internal\" href=\"install_name_dir#prop_tgt:INSTALL_NAME_DIR\" title=\"INSTALL_NAME_DIR\" id=\"index-0-prop_tgt:INSTALL_NAME_DIR\"><code>INSTALL_NAME_DIR</code></a>. This indicates the shared library is to be found at runtime using runtime paths (rpaths).</p> <p>This property is initialized by the value of the variable <a class=\"reference internal\" href=\"../variable/cmake_macosx_rpath#variable:CMAKE_MACOSX_RPATH\" title=\"CMAKE_MACOSX_RPATH\" id=\"index-0-variable:CMAKE_MACOSX_RPATH\"><code>CMAKE_MACOSX_RPATH</code></a> if it is set when a target is created.</p> <p>Runtime paths will also be embedded in binaries using this target and can be controlled by the <a class=\"reference internal\" href=\"install_rpath#prop_tgt:INSTALL_RPATH\" title=\"INSTALL_RPATH\" id=\"index-0-prop_tgt:INSTALL_RPATH\"><code>INSTALL_RPATH</code></a> target property on the target linking to this target.</p> <p>Policy <a class=\"reference internal\" href=\"../policy/cmp0042#policy:CMP0042\" title=\"CMP0042\" id=\"index-0-policy:CMP0042\"><code>CMP0042</code></a> was introduced to change the default value of <code>MACOSX_RPATH</code> to <code>TRUE</code>. This is because use of <code>@rpath</code> is a more flexible and powerful alternative to <code>@executable_path</code> and <code>@loader_path</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/MACOSX_RPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/MACOSX_RPATH.html</a>\n  </p>\n</div>\n","prop_tgt/map_imported_config_config":"<h1 id=\"prop_tgt:MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;\">MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;</h1> <p id=\"map-imported-config-config\">Map from project configuration to IMPORTED target’s configuration.</p> <p>Set this to the list of configurations of an imported target that may be used for the current project’s &lt;CONFIG&gt; configuration. Targets imported from another project may not provide the same set of configuration names available in the current project. Setting this property tells CMake what imported configurations are suitable for use when building the &lt;CONFIG&gt; configuration. The first configuration in the list found to be provided by the imported target is selected. If this property is set and no matching configurations are available, then the imported target is considered to be not found. This property is ignored for non-imported targets.</p> <p>This property is initialized by the value of the variable CMAKE_MAP_IMPORTED_CONFIG_&lt;CONFIG&gt; if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/name":"<h1 id=\"prop_tgt:NAME\">NAME</h1> <p id=\"name\">Logical name for the target.</p> <p>Read-only logical name for the target as used by CMake.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/NAME.html</a>\n  </p>\n</div>\n","prop_tgt/no_soname":"<h1 id=\"prop_tgt:NO_SONAME\">NO_SONAME</h1> <p id=\"no-soname\">Whether to set “soname” when linking a shared library.</p> <p>Enable this boolean property if a generated shared library should not have “soname” set. Default is to set “soname” on all shared libraries as long as the platform supports it. Generally, use this property only for leaf private libraries or plugins. If you use it on normal shared libraries which other targets link against, on some platforms a linker will insert a full path to the library (as specified at link time) into the dynamic section of the dependent binary. Therefore, once installed, dynamic loader may eventually fail to locate the library for the binary.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/NO_SONAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/NO_SONAME.html</a>\n  </p>\n</div>\n","prop_tgt/no_system_from_imported":"<h1 id=\"prop_tgt:NO_SYSTEM_FROM_IMPORTED\">NO_SYSTEM_FROM_IMPORTED</h1> <p id=\"no-system-from-imported\">Do not treat includes from IMPORTED target interfaces as SYSTEM.</p> <p>The contents of the INTERFACE_INCLUDE_DIRECTORIES of IMPORTED targets are treated as SYSTEM includes by default. If this property is enabled, the contents of the INTERFACE_INCLUDE_DIRECTORIES of IMPORTED targets are not treated as system includes. This property is initialized by the value of the variable CMAKE_NO_SYSTEM_FROM_IMPORTED if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/NO_SYSTEM_FROM_IMPORTED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/NO_SYSTEM_FROM_IMPORTED.html</a>\n  </p>\n</div>\n","prop_tgt/osx_architectures_config":"<h1 id=\"prop_tgt:OSX_ARCHITECTURES_&lt;CONFIG&gt;\">OSX_ARCHITECTURES_&lt;CONFIG&gt;</h1> <p id=\"osx-architectures-config\">Per-configuration OS X and iOS binary architectures for a target.</p> <p>This property is the configuration-specific version of <a class=\"reference internal\" href=\"osx_architectures#prop_tgt:OSX_ARCHITECTURES\" title=\"OSX_ARCHITECTURES\" id=\"index-0-prop_tgt:OSX_ARCHITECTURES\"><code>OSX_ARCHITECTURES</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/OSX_ARCHITECTURES_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/OSX_ARCHITECTURES_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/osx_architectures":"<h1 id=\"prop_tgt:OSX_ARCHITECTURES\">OSX_ARCHITECTURES</h1> <p id=\"osx-architectures\">Target specific architectures for OS X.</p> <p>The <code>OSX_ARCHITECTURES</code> property sets the target binary architecture for targets on OS X (<code>-arch</code>). This property is initialized by the value of the variable <a class=\"reference internal\" href=\"../variable/cmake_osx_architectures#variable:CMAKE_OSX_ARCHITECTURES\" title=\"CMAKE_OSX_ARCHITECTURES\" id=\"index-0-variable:CMAKE_OSX_ARCHITECTURES\"><code>CMAKE_OSX_ARCHITECTURES</code></a> if it is set when a target is created. Use <a class=\"reference internal\" href=\"#\" title=\"OSX_ARCHITECTURES_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:OSX_ARCHITECTURES_&lt;CONFIG&gt;\"><code>OSX_ARCHITECTURES_&lt;CONFIG&gt;</code></a> to set the binary architectures on a per-configuration basis, where <code>&lt;CONFIG&gt;</code> is an upper-case name (e.g. <code>OSX_ARCHITECTURES_DEBUG</code>).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/OSX_ARCHITECTURES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/OSX_ARCHITECTURES.html</a>\n  </p>\n</div>\n","prop_tgt/output_name_config":"<h1 id=\"prop_tgt:OUTPUT_NAME_&lt;CONFIG&gt;\">OUTPUT_NAME_&lt;CONFIG&gt;</h1> <p id=\"output-name-config\">Per-configuration target file base name.</p> <p>This is the configuration-specific version of the <a class=\"reference internal\" href=\"output_name#prop_tgt:OUTPUT_NAME\" title=\"OUTPUT_NAME\" id=\"index-0-prop_tgt:OUTPUT_NAME\"><code>OUTPUT_NAME</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/OUTPUT_NAME_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/OUTPUT_NAME_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/output_name":"<h1 id=\"prop_tgt:OUTPUT_NAME\">OUTPUT_NAME</h1> <p id=\"output-name\">Output name for target files.</p> <p>This sets the base name for output files created for an executable or library target. If not set, the logical target name is used by default.</p> <p>Contents of <code>OUTPUT_NAME</code> and the variants listed below may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>.</p> <p>See also the variants:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#\" title=\"OUTPUT_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:OUTPUT_NAME_&lt;CONFIG&gt;\"><code>OUTPUT_NAME_&lt;CONFIG&gt;</code></a></li> <li><a class=\"reference internal\" href=\"#\" title=\"ARCHIVE_OUTPUT_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:ARCHIVE_OUTPUT_NAME_&lt;CONFIG&gt;\"><code>ARCHIVE_OUTPUT_NAME_&lt;CONFIG&gt;</code></a></li> <li><a class=\"reference internal\" href=\"archive_output_name#prop_tgt:ARCHIVE_OUTPUT_NAME\" title=\"ARCHIVE_OUTPUT_NAME\" id=\"index-0-prop_tgt:ARCHIVE_OUTPUT_NAME\"><code>ARCHIVE_OUTPUT_NAME</code></a></li> <li><a class=\"reference internal\" href=\"#\" title=\"LIBRARY_OUTPUT_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:LIBRARY_OUTPUT_NAME_&lt;CONFIG&gt;\"><code>LIBRARY_OUTPUT_NAME_&lt;CONFIG&gt;</code></a></li> <li><a class=\"reference internal\" href=\"library_output_name#prop_tgt:LIBRARY_OUTPUT_NAME\" title=\"LIBRARY_OUTPUT_NAME\" id=\"index-0-prop_tgt:LIBRARY_OUTPUT_NAME\"><code>LIBRARY_OUTPUT_NAME</code></a></li> <li><a class=\"reference internal\" href=\"#\" title=\"RUNTIME_OUTPUT_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_NAME_&lt;CONFIG&gt;\"><code>RUNTIME_OUTPUT_NAME_&lt;CONFIG&gt;</code></a></li> <li><a class=\"reference internal\" href=\"runtime_output_name#prop_tgt:RUNTIME_OUTPUT_NAME\" title=\"RUNTIME_OUTPUT_NAME\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_NAME\"><code>RUNTIME_OUTPUT_NAME</code></a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/OUTPUT_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/OUTPUT_NAME.html</a>\n  </p>\n</div>\n","prop_tgt/pdb_name_config":"<h1 id=\"prop_tgt:PDB_NAME_&lt;CONFIG&gt;\">PDB_NAME_&lt;CONFIG&gt;</h1> <p id=\"pdb-name-config\">Per-configuration output name for the MS debug symbol <code>.pdb</code> file generated by the linker for an executable or shared library target.</p> <p>This is the configuration-specific version of <a class=\"reference internal\" href=\"pdb_name#prop_tgt:PDB_NAME\" title=\"PDB_NAME\" id=\"index-0-prop_tgt:PDB_NAME\"><code>PDB_NAME</code></a>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>This property does not apply to STATIC library targets because no linker is invoked to produce them so they have no linker-generated <code>.pdb</code> file containing debug symbols.</p> <p>The linker-generated program database files are specified by the <code>/pdb</code> linker flag and are not the same as compiler-generated program database files specified by the <code>/Fd</code> compiler flag. Use the <a class=\"reference internal\" href=\"#\" title=\"COMPILE_PDB_NAME_&lt;CONFIG&gt;\" id=\"index-1-prop_tgt:COMPILE_PDB_NAME_&lt;CONFIG&gt;\"><code>COMPILE_PDB_NAME_&lt;CONFIG&gt;</code></a> property to specify the latter.</p> <p class=\"last\">This property is not implemented by the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%206.html#generator:Visual%20Studio%206\" title=\"Visual Studio 6\" id=\"index-0-generator:Visual Studio 6\"><code>Visual Studio 6</code></a> generator.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/PDB_NAME_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/PDB_NAME_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/project_label":"<h1 id=\"prop_tgt:PROJECT_LABEL\">PROJECT_LABEL</h1> <p id=\"project-label\">Change the name of a target in an IDE.</p> <p>Can be used to change the name of the target in an IDE like Visual Studio.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/PROJECT_LABEL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/PROJECT_LABEL.html</a>\n  </p>\n</div>\n","prop_tgt/private_header":"<h1 id=\"prop_tgt:PRIVATE_HEADER\">PRIVATE_HEADER</h1> <p id=\"private-header\">Specify private header files in a <a class=\"reference internal\" href=\"framework#prop_tgt:FRAMEWORK\" title=\"FRAMEWORK\" id=\"index-0-prop_tgt:FRAMEWORK\"><code>FRAMEWORK</code></a> shared library target.</p> <p>Shared library targets marked with the <a class=\"reference internal\" href=\"framework#prop_tgt:FRAMEWORK\" title=\"FRAMEWORK\" id=\"index-1-prop_tgt:FRAMEWORK\"><code>FRAMEWORK</code></a> property generate frameworks on OS X, iOS and normal shared libraries on other platforms. This property may be set to a list of header files to be placed in the PrivateHeaders directory inside the framework folder. On non-Apple platforms these headers may be installed using the <code>PRIVATE_HEADER</code> option to the <code>install(TARGETS)</code> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/PRIVATE_HEADER.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/PRIVATE_HEADER.html</a>\n  </p>\n</div>\n","prop_tgt/public_header":"<h1 id=\"prop_tgt:PUBLIC_HEADER\">PUBLIC_HEADER</h1> <p id=\"public-header\">Specify public header files in a <a class=\"reference internal\" href=\"framework#prop_tgt:FRAMEWORK\" title=\"FRAMEWORK\" id=\"index-0-prop_tgt:FRAMEWORK\"><code>FRAMEWORK</code></a> shared library target.</p> <p>Shared library targets marked with the <a class=\"reference internal\" href=\"framework#prop_tgt:FRAMEWORK\" title=\"FRAMEWORK\" id=\"index-1-prop_tgt:FRAMEWORK\"><code>FRAMEWORK</code></a> property generate frameworks on OS X, iOS and normal shared libraries on other platforms. This property may be set to a list of header files to be placed in the <code>Headers</code> directory inside the framework folder. On non-Apple platforms these headers may be installed using the <code>PUBLIC_HEADER</code> option to the <code>install(TARGETS)</code> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/PUBLIC_HEADER.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/PUBLIC_HEADER.html</a>\n  </p>\n</div>\n","prop_tgt/resource":"<h1 id=\"prop_tgt:RESOURCE\">RESOURCE</h1> <p id=\"resource\">Specify resource files in a <a class=\"reference internal\" href=\"framework#prop_tgt:FRAMEWORK\" title=\"FRAMEWORK\" id=\"index-0-prop_tgt:FRAMEWORK\"><code>FRAMEWORK</code></a> or <a class=\"reference internal\" href=\"bundle#prop_tgt:BUNDLE\" title=\"BUNDLE\" id=\"index-0-prop_tgt:BUNDLE\"><code>BUNDLE</code></a>.</p> <p>Target marked with the <a class=\"reference internal\" href=\"framework#prop_tgt:FRAMEWORK\" title=\"FRAMEWORK\" id=\"index-1-prop_tgt:FRAMEWORK\"><code>FRAMEWORK</code></a> or <a class=\"reference internal\" href=\"bundle#prop_tgt:BUNDLE\" title=\"BUNDLE\" id=\"index-1-prop_tgt:BUNDLE\"><code>BUNDLE</code></a> property generate framework or application bundle (both OS X and iOS is supported) or normal shared libraries on other platforms. This property may be set to a list of files to be placed in the corresponding directory (eg. <code>Resources</code> directory for OS X) inside the bundle. On non-Apple platforms these files may be installed using the <code>RESOURCE</code> option to the <code>install(TARGETS)</code> command.</p> <p>Following example of Application Bundle:</p> <pre data-language=\"cmake\">add_executable(ExecutableTarget\n  addDemo.c\n  resourcefile.txt\n  appresourcedir/appres.txt\n)\n\ntarget_link_libraries(ExecutableTarget heymath mul)\n\nset(RESOURCE_FILES\n  resourcefile.txt\n  appresourcedir/appres.txt\n)\n\nset_target_properties(ExecutableTarget PROPERTIES\n  MACOSX_BUNDLE TRUE\n  MACOSX_FRAMEWORK_IDENTIFIER org.cmake.ExecutableTarget\n  RESOURCE \"${RESOURCE_FILES}\"\n)\n</pre> <p>will produce flat structure for iOS systems:</p> <pre data-language=\"python\">ExecutableTarget.app\n  appres.txt\n  ExecutableTarget\n  Info.plist\n  resourcefile.txt\n</pre> <p>For OS X systems it will produce following directory structure:</p> <pre data-language=\"python\">ExecutableTarget.app/\n  Contents\n    Info.plist\n    MacOS\n      ExecutableTarget\n    Resources\n      appres.txt\n      resourcefile.txt\n</pre> <p>For Linux, such cmake script produce following files:</p> <pre data-language=\"python\">ExecutableTarget\nResources\n  appres.txt\n  resourcefile.txt\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/RESOURCE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/RESOURCE.html</a>\n  </p>\n</div>\n","prop_tgt/rule_launch_compile":"<h1 id=\"prop_tgt:RULE_LAUNCH_COMPILE\">RULE_LAUNCH_COMPILE</h1> <p id=\"rule-launch-compile\">Specify a launcher for compile rules.</p> <p>See the global property of the same name for details. This overrides the global and directory property for a target.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/RULE_LAUNCH_COMPILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/RULE_LAUNCH_COMPILE.html</a>\n  </p>\n</div>\n","prop_tgt/rule_launch_custom":"<h1 id=\"prop_tgt:RULE_LAUNCH_CUSTOM\">RULE_LAUNCH_CUSTOM</h1> <p id=\"rule-launch-custom\">Specify a launcher for custom rules.</p> <p>See the global property of the same name for details. This overrides the global and directory property for a target.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/RULE_LAUNCH_CUSTOM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/RULE_LAUNCH_CUSTOM.html</a>\n  </p>\n</div>\n","prop_tgt/pdb_output_directory_config":"<h1 id=\"prop_tgt:PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\">PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</h1> <p id=\"pdb-output-directory-config\">Per-configuration output directory for the MS debug symbol <code>.pdb</code> file generated by the linker for an executable or shared library target.</p> <p>This is a per-configuration version of <a class=\"reference internal\" href=\"pdb_output_directory#prop_tgt:PDB_OUTPUT_DIRECTORY\" title=\"PDB_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:PDB_OUTPUT_DIRECTORY\"><code>PDB_OUTPUT_DIRECTORY</code></a>, but multi-configuration generators (VS, Xcode) do NOT append a per-configuration subdirectory to the specified directory. This property is initialized by the value of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-variable:CMAKE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>CMAKE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> variable if it is set when a target is created.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>This property does not apply to STATIC library targets because no linker is invoked to produce them so they have no linker-generated <code>.pdb</code> file containing debug symbols.</p> <p>The linker-generated program database files are specified by the <code>/pdb</code> linker flag and are not the same as compiler-generated program database files specified by the <code>/Fd</code> compiler flag. Use the <a class=\"reference internal\" href=\"#\" title=\"COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-1-prop_tgt:COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> property to specify the latter.</p> <p class=\"last\">This property is not implemented by the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%206.html#generator:Visual%20Studio%206\" title=\"Visual Studio 6\" id=\"index-0-generator:Visual Studio 6\"><code>Visual Studio 6</code></a> generator.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/PDB_OUTPUT_DIRECTORY_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/PDB_OUTPUT_DIRECTORY_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/position_independent_code":"<h1 id=\"prop_tgt:POSITION_INDEPENDENT_CODE\">POSITION_INDEPENDENT_CODE</h1> <p id=\"position-independent-code\">Whether to create a position-independent target</p> <p>The <code>POSITION_INDEPENDENT_CODE</code> property determines whether position independent executables or shared libraries will be created. This property is <code>True</code> by default for <code>SHARED</code> and <code>MODULE</code> library targets and <code>False</code> otherwise. This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_position_independent_code#variable:CMAKE_POSITION_INDEPENDENT_CODE\" title=\"CMAKE_POSITION_INDEPENDENT_CODE\" id=\"index-0-variable:CMAKE_POSITION_INDEPENDENT_CODE\"><code>CMAKE_POSITION_INDEPENDENT_CODE</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/POSITION_INDEPENDENT_CODE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/POSITION_INDEPENDENT_CODE.html</a>\n  </p>\n</div>\n","prop_tgt/prefix":"<h1 id=\"prop_tgt:PREFIX\">PREFIX</h1> <p id=\"prefix\">What comes before the library name.</p> <p>A target property that can be set to override the prefix (such as “lib”) on a library name.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/PREFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/PREFIX.html</a>\n  </p>\n</div>\n","prop_tgt/runtime_output_directory_config":"<h1 id=\"prop_tgt:RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\">RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</h1> <p id=\"runtime-output-directory-config\">Per-configuration output directory for <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#runtime-output-artifacts\"><span>RUNTIME</span></a> target files.</p> <p>This is a per-configuration version of the <a class=\"reference internal\" href=\"runtime_output_directory#prop_tgt:RUNTIME_OUTPUT_DIRECTORY\" title=\"RUNTIME_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_DIRECTORY\"><code>RUNTIME_OUTPUT_DIRECTORY</code></a> target property, but multi-configuration generators (VS, Xcode) do NOT append a per-configuration subdirectory to the specified directory. This property is initialized by the value of the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-variable:CMAKE_RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>CMAKE_RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> variable if it is set when a target is created.</p> <p>Contents of <code>RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code> may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/RUNTIME_OUTPUT_DIRECTORY_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/RUNTIME_OUTPUT_DIRECTORY_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/rule_launch_link":"<h1 id=\"prop_tgt:RULE_LAUNCH_LINK\">RULE_LAUNCH_LINK</h1> <p id=\"rule-launch-link\">Specify a launcher for link rules.</p> <p>See the global property of the same name for details. This overrides the global and directory property for a target.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/RULE_LAUNCH_LINK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/RULE_LAUNCH_LINK.html</a>\n  </p>\n</div>\n","prop_tgt/runtime_output_name":"<h1 id=\"prop_tgt:RUNTIME_OUTPUT_NAME\">RUNTIME_OUTPUT_NAME</h1> <p id=\"runtime-output-name\">Output name for <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#runtime-output-artifacts\"><span>RUNTIME</span></a> target files.</p> <p>This property specifies the base name for runtime target files. It overrides <a class=\"reference internal\" href=\"output_name#prop_tgt:OUTPUT_NAME\" title=\"OUTPUT_NAME\" id=\"index-0-prop_tgt:OUTPUT_NAME\"><code>OUTPUT_NAME</code></a> and <a class=\"reference internal\" href=\"#\" title=\"OUTPUT_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:OUTPUT_NAME_&lt;CONFIG&gt;\"><code>OUTPUT_NAME_&lt;CONFIG&gt;</code></a> properties.</p> <p>See also the <a class=\"reference internal\" href=\"#\" title=\"RUNTIME_OUTPUT_NAME_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_NAME_&lt;CONFIG&gt;\"><code>RUNTIME_OUTPUT_NAME_&lt;CONFIG&gt;</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/RUNTIME_OUTPUT_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/RUNTIME_OUTPUT_NAME.html</a>\n  </p>\n</div>\n","prop_tgt/runtime_output_name_config":"<h1 id=\"prop_tgt:RUNTIME_OUTPUT_NAME_&lt;CONFIG&gt;\">RUNTIME_OUTPUT_NAME_&lt;CONFIG&gt;</h1> <p id=\"runtime-output-name-config\">Per-configuration output name for <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#runtime-output-artifacts\"><span>RUNTIME</span></a> target files.</p> <p>This is the configuration-specific version of the <a class=\"reference internal\" href=\"runtime_output_name#prop_tgt:RUNTIME_OUTPUT_NAME\" title=\"RUNTIME_OUTPUT_NAME\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_NAME\"><code>RUNTIME_OUTPUT_NAME</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/RUNTIME_OUTPUT_NAME_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/RUNTIME_OUTPUT_NAME_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/runtime_output_directory":"<h1 id=\"prop_tgt:RUNTIME_OUTPUT_DIRECTORY\">RUNTIME_OUTPUT_DIRECTORY</h1> <p id=\"runtime-output-directory\">Output directory in which to build <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#runtime-output-artifacts\"><span>RUNTIME</span></a> target files.</p> <p>This property specifies the directory into which runtime target files should be built. The property value may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>. Multi-configuration generators (VS, Xcode) append a per-configuration subdirectory to the specified directory unless a generator expression is used.</p> <p>This property is initialized by the value of the variable CMAKE_RUNTIME_OUTPUT_DIRECTORY if it is set when a target is created.</p> <p>See also the <a class=\"reference internal\" href=\"#\" title=\"RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> target property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/RUNTIME_OUTPUT_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/RUNTIME_OUTPUT_DIRECTORY.html</a>\n  </p>\n</div>\n","prop_tgt/skip_build_rpath":"<h1 id=\"prop_tgt:SKIP_BUILD_RPATH\">SKIP_BUILD_RPATH</h1> <p id=\"skip-build-rpath\">Should rpaths be used for the build tree.</p> <p>SKIP_BUILD_RPATH is a boolean specifying whether to skip automatic generation of an rpath allowing the target to run from the build tree. This property is initialized by the value of the variable CMAKE_SKIP_BUILD_RPATH if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/SKIP_BUILD_RPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/SKIP_BUILD_RPATH.html</a>\n  </p>\n</div>\n","prop_tgt/source_dir":"<h1 id=\"prop_tgt:SOURCE_DIR\">SOURCE_DIR</h1> <p id=\"source-dir\">This read-only property reports the value of the <a class=\"reference internal\" href=\"../variable/cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR\" title=\"CMAKE_CURRENT_SOURCE_DIR\" id=\"index-0-variable:CMAKE_CURRENT_SOURCE_DIR\"><code>CMAKE_CURRENT_SOURCE_DIR</code></a> variable in the directory in which the target was defined.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/SOURCE_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/SOURCE_DIR.html</a>\n  </p>\n</div>\n","prop_tgt/sources":"<h1 id=\"prop_tgt:SOURCES\">SOURCES</h1> <p id=\"sources\">Source names specified for a target.</p> <p>List of sources specified for a target.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/SOURCES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/SOURCES.html</a>\n  </p>\n</div>\n","prop_tgt/soversion":"<h1 id=\"prop_tgt:SOVERSION\">SOVERSION</h1> <p id=\"soversion\">What version number is this target.</p> <p>For shared libraries VERSION and SOVERSION can be used to specify the build version and API version respectively. When building or installing appropriate symlinks are created if the platform supports symlinks and the linker supports so-names. If only one of both is specified the missing is assumed to have the same version number. SOVERSION is ignored if NO_SONAME property is set. For shared libraries and executables on Windows the VERSION attribute is parsed to extract a “major.minor” version number. These numbers are used as the image version of the binary.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/SOVERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/SOVERSION.html</a>\n  </p>\n</div>\n","prop_tgt/static_library_flags_config":"<h1 id=\"prop_tgt:STATIC_LIBRARY_FLAGS_&lt;CONFIG&gt;\">STATIC_LIBRARY_FLAGS_&lt;CONFIG&gt;</h1> <p id=\"static-library-flags-config\">Per-configuration flags for creating a static library.</p> <p>This is the configuration-specific version of STATIC_LIBRARY_FLAGS.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/STATIC_LIBRARY_FLAGS_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/STATIC_LIBRARY_FLAGS_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/static_library_flags":"<h1 id=\"prop_tgt:STATIC_LIBRARY_FLAGS\">STATIC_LIBRARY_FLAGS</h1> <p id=\"static-library-flags\">Extra flags to use when linking static libraries.</p> <p>Extra flags to use when linking a static library.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/STATIC_LIBRARY_FLAGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/STATIC_LIBRARY_FLAGS.html</a>\n  </p>\n</div>\n","prop_tgt/suffix":"<h1 id=\"prop_tgt:SUFFIX\">SUFFIX</h1> <p id=\"suffix\">What comes after the target name.</p> <p>A target property that can be set to override the suffix (such as ”.so” or ”.exe”) on the name of a library, module or executable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/SUFFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/SUFFIX.html</a>\n  </p>\n</div>\n","prop_tgt/type":"<h1 id=\"prop_tgt:TYPE\">TYPE</h1> <p id=\"type\">The type of the target.</p> <p>This read-only property can be used to test the type of the given target. It will be one of STATIC_LIBRARY, MODULE_LIBRARY, SHARED_LIBRARY, INTERFACE_LIBRARY, EXECUTABLE or one of the internal target types.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/TYPE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/TYPE.html</a>\n  </p>\n</div>\n","prop_tgt/version":"<h1 id=\"prop_tgt:VERSION\">VERSION</h1> <p id=\"version\">What version number is this target.</p> <p>For shared libraries VERSION and SOVERSION can be used to specify the build version and API version respectively. When building or installing appropriate symlinks are created if the platform supports symlinks and the linker supports so-names. If only one of both is specified the missing is assumed to have the same version number. For executables VERSION can be used to specify the build version. When building or installing appropriate symlinks are created if the platform supports symlinks. For shared libraries and executables on Windows the VERSION attribute is parsed to extract a “major.minor” version number. These numbers are used as the image version of the binary.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VERSION.html</a>\n  </p>\n</div>\n","prop_tgt/visibility_inlines_hidden":"<h1 id=\"prop_tgt:VISIBILITY_INLINES_HIDDEN\">VISIBILITY_INLINES_HIDDEN</h1> <p id=\"visibility-inlines-hidden\">Whether to add a compile flag to hide symbols of inline functions</p> <p>The <code>VISIBILITY_INLINES_HIDDEN</code> property determines whether a flag for hiding symbols for inline functions, such as <code>-fvisibility-inlines-hidden</code>, should be used when invoking the compiler. This property affects compilation in sources of all types of targets (subject to policy <a class=\"reference internal\" href=\"../policy/cmp0063#policy:CMP0063\" title=\"CMP0063\" id=\"index-0-policy:CMP0063\"><code>CMP0063</code></a>).</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_visibility_inlines_hidden#variable:CMAKE_VISIBILITY_INLINES_HIDDEN\" title=\"CMAKE_VISIBILITY_INLINES_HIDDEN\" id=\"index-0-variable:CMAKE_VISIBILITY_INLINES_HIDDEN\"><code>CMAKE_VISIBILITY_INLINES_HIDDEN</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VISIBILITY_INLINES_HIDDEN.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VISIBILITY_INLINES_HIDDEN.html</a>\n  </p>\n</div>\n","prop_tgt/vs_desktop_extensions_version":"<h1 id=\"prop_tgt:VS_DESKTOP_EXTENSIONS_VERSION\">VS_DESKTOP_EXTENSIONS_VERSION</h1> <p id=\"vs-desktop-extensions-version\">Visual Studio Windows 10 Desktop Extensions Version</p> <p>Specifies the version of the Desktop Extensions that should be included in the target. For example <code>10.0.10240.0</code>. If the value is not specified, the Desktop Extensions will not be included. To use the same version of the extensions as the Windows 10 SDK that is being used, you can use the <a class=\"reference internal\" href=\"../variable/cmake_vs_windows_target_platform_version#variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\" title=\"CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\" id=\"index-0-variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\"><code>CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_DESKTOP_EXTENSIONS_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_DESKTOP_EXTENSIONS_VERSION.html</a>\n  </p>\n</div>\n","prop_tgt/vs_dotnet_target_framework_version":"<h1 id=\"prop_tgt:VS_DOTNET_TARGET_FRAMEWORK_VERSION\">VS_DOTNET_TARGET_FRAMEWORK_VERSION</h1> <p id=\"vs-dotnet-target-framework-version\">Specify the .NET target framework version.</p> <p>Used to specify the .NET target framework version for C++/CLI. For example, “v4.5”.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_DOTNET_TARGET_FRAMEWORK_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_DOTNET_TARGET_FRAMEWORK_VERSION.html</a>\n  </p>\n</div>\n","prop_tgt/vs_dotnet_references":"<h1 id=\"prop_tgt:VS_DOTNET_REFERENCES\">VS_DOTNET_REFERENCES</h1> <p id=\"vs-dotnet-references\">Visual Studio managed project .NET references</p> <p>Adds one or more semicolon-delimited .NET references to a generated Visual Studio project. For example, “System;System.Windows.Forms”.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_DOTNET_REFERENCES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_DOTNET_REFERENCES.html</a>\n  </p>\n</div>\n","prop_tgt/vs_global_keyword":"<h1 id=\"prop_tgt:VS_GLOBAL_KEYWORD\">VS_GLOBAL_KEYWORD</h1> <p id=\"vs-global-keyword\">Visual Studio project keyword for VS 10 (2010) and newer.</p> <p>Sets the “keyword” attribute for a generated Visual Studio project. Defaults to “Win32Proj”. You may wish to override this value with “ManagedCProj”, for example, in a Visual Studio managed C++ unit test project.</p> <p>Use the <a class=\"reference internal\" href=\"vs_keyword#prop_tgt:VS_KEYWORD\" title=\"VS_KEYWORD\" id=\"index-0-prop_tgt:VS_KEYWORD\"><code>VS_KEYWORD</code></a> target property to set the keyword for Visual Studio 9 (2008) and older.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_GLOBAL_KEYWORD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_GLOBAL_KEYWORD.html</a>\n  </p>\n</div>\n","prop_tgt/vs_global_project_types":"<h1 id=\"prop_tgt:VS_GLOBAL_PROJECT_TYPES\">VS_GLOBAL_PROJECT_TYPES</h1> <p id=\"vs-global-project-types\">Visual Studio project type(s).</p> <p>Can be set to one or more UUIDs recognized by Visual Studio to indicate the type of project. This value is copied verbatim into the generated project file. Example for a managed C++ unit testing project:</p> <pre data-language=\"python\">{3AC096D0-A1C2-E12C-1390-A8335801FDAB};{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\n</pre> <p>UUIDs are semicolon-delimited.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_GLOBAL_PROJECT_TYPES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_GLOBAL_PROJECT_TYPES.html</a>\n  </p>\n</div>\n","prop_tgt/vs_global_rootnamespace":"<h1 id=\"prop_tgt:VS_GLOBAL_ROOTNAMESPACE\">VS_GLOBAL_ROOTNAMESPACE</h1> <p id=\"vs-global-rootnamespace\">Visual Studio project root namespace.</p> <p>Sets the “RootNamespace” attribute for a generated Visual Studio project. The attribute will be generated only if this is set.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_GLOBAL_ROOTNAMESPACE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_GLOBAL_ROOTNAMESPACE.html</a>\n  </p>\n</div>\n","prop_tgt/vs_global_variable":"<h1 id=\"prop_tgt:VS_GLOBAL_&lt;variable&gt;\">VS_GLOBAL_&lt;variable&gt;</h1> <p id=\"vs-global-variable\">Visual Studio project-specific global variable.</p> <p>Tell the Visual Studio generator to set the global variable ‘&lt;variable&gt;’ to a given value in the generated Visual Studio project. Ignored on other generators. Qt integration works better if VS_GLOBAL_QtVersion is set to the version FindQt4.cmake found. For example, “4.7.3”</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_GLOBAL_variable.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_GLOBAL_variable.html</a>\n  </p>\n</div>\n","prop_tgt/vs_iot_extensions_version":"<h1 id=\"prop_tgt:VS_IOT_EXTENSIONS_VERSION\">VS_IOT_EXTENSIONS_VERSION</h1> <p id=\"vs-iot-extensions-version\">Visual Studio Windows 10 IoT Extensions Version</p> <p>Specifies the version of the IoT Extensions that should be included in the target. For example <code>10.0.10240.0</code>. If the value is not specified, the IoT Extensions will not be included. To use the same version of the extensions as the Windows 10 SDK that is being used, you can use the <a class=\"reference internal\" href=\"../variable/cmake_vs_windows_target_platform_version#variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\" title=\"CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\" id=\"index-0-variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\"><code>CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_IOT_EXTENSIONS_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_IOT_EXTENSIONS_VERSION.html</a>\n  </p>\n</div>\n","prop_tgt/vs_iot_startup_task":"<h1 id=\"prop_tgt:VS_IOT_STARTUP_TASK\">VS_IOT_STARTUP_TASK</h1> <p id=\"vs-iot-startup-task\">Visual Studio Windows 10 IoT Continuous Background Task</p> <p>Specifies that the target should be compiled as a Continuous Background Task library.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_IOT_STARTUP_TASK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_IOT_STARTUP_TASK.html</a>\n  </p>\n</div>\n","prop_tgt/vs_keyword":"<h1 id=\"prop_tgt:VS_KEYWORD\">VS_KEYWORD</h1> <p id=\"vs-keyword\">Visual Studio project keyword for VS 9 (2008) and older.</p> <p>Can be set to change the visual studio keyword, for example Qt integration works better if this is set to Qt4VSv1.0.</p> <p>Use the <a class=\"reference internal\" href=\"vs_global_keyword#prop_tgt:VS_GLOBAL_KEYWORD\" title=\"VS_GLOBAL_KEYWORD\" id=\"index-0-prop_tgt:VS_GLOBAL_KEYWORD\"><code>VS_GLOBAL_KEYWORD</code></a> target property to set the keyword for Visual Studio 10 (2010) and newer.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_KEYWORD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_KEYWORD.html</a>\n  </p>\n</div>\n","prop_tgt/vs_mobile_extensions_version":"<h1 id=\"prop_tgt:VS_MOBILE_EXTENSIONS_VERSION\">VS_MOBILE_EXTENSIONS_VERSION</h1> <p id=\"vs-mobile-extensions-version\">Visual Studio Windows 10 Mobile Extensions Version</p> <p>Specifies the version of the Mobile Extensions that should be included in the target. For example <code>10.0.10240.0</code>. If the value is not specified, the Mobile Extensions will not be included. To use the same version of the extensions as the Windows 10 SDK that is being used, you can use the <a class=\"reference internal\" href=\"../variable/cmake_vs_windows_target_platform_version#variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\" title=\"CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\" id=\"index-0-variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\"><code>CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_MOBILE_EXTENSIONS_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_MOBILE_EXTENSIONS_VERSION.html</a>\n  </p>\n</div>\n","prop_tgt/vs_scc_auxpath":"<h1 id=\"prop_tgt:VS_SCC_AUXPATH\">VS_SCC_AUXPATH</h1> <p id=\"vs-scc-auxpath\">Visual Studio Source Code Control Aux Path.</p> <p>Can be set to change the visual studio source code control auxpath property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_SCC_AUXPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_SCC_AUXPATH.html</a>\n  </p>\n</div>\n","prop_tgt/vs_scc_provider":"<h1 id=\"prop_tgt:VS_SCC_PROVIDER\">VS_SCC_PROVIDER</h1> <p id=\"vs-scc-provider\">Visual Studio Source Code Control Provider.</p> <p>Can be set to change the visual studio source code control provider property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_SCC_PROVIDER.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_SCC_PROVIDER.html</a>\n  </p>\n</div>\n","prop_tgt/vs_scc_localpath":"<h1 id=\"prop_tgt:VS_SCC_LOCALPATH\">VS_SCC_LOCALPATH</h1> <p id=\"vs-scc-localpath\">Visual Studio Source Code Control Local Path.</p> <p>Can be set to change the visual studio source code control local path property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_SCC_LOCALPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_SCC_LOCALPATH.html</a>\n  </p>\n</div>\n","prop_tgt/vs_scc_projectname":"<h1 id=\"prop_tgt:VS_SCC_PROJECTNAME\">VS_SCC_PROJECTNAME</h1> <p id=\"vs-scc-projectname\">Visual Studio Source Code Control Project.</p> <p>Can be set to change the visual studio source code control project name property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_SCC_PROJECTNAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_SCC_PROJECTNAME.html</a>\n  </p>\n</div>\n","prop_tgt/vs_winrt_component":"<h1 id=\"prop_tgt:VS_WINRT_COMPONENT\">VS_WINRT_COMPONENT</h1> <p id=\"vs-winrt-component\">Mark a target as a Windows Runtime component for the Visual Studio generator. Compile the target with <code>C++/CX</code> language extensions for Windows Runtime. For <code>SHARED</code> and <code>MODULE</code> libraries, this also defines the <code>_WINRT_DLL</code> preprocessor macro.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Currently this is implemented only by Visual Studio generators. Support may be added to other generators in the future.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_WINRT_COMPONENT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_WINRT_COMPONENT.html</a>\n  </p>\n</div>\n","prop_tgt/vs_windows_target_platform_min_version":"<h1 id=\"prop_tgt:VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION\">VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION</h1> <p id=\"vs-windows-target-platform-min-version\">Visual Studio Windows Target Platform Minimum Version</p> <p>For Windows 10. Specifies the minimum version of the OS that is being targeted. For example <code>10.0.10240.0</code>. If the value is not specified, the value of <a class=\"reference internal\" href=\"../variable/cmake_vs_windows_target_platform_version#variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\" title=\"CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\" id=\"index-0-variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\"><code>CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION</code></a> will be used on WindowsStore projects otherwise the target platform minimum version will not be specified for the project.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION.html</a>\n  </p>\n</div>\n","prop_tgt/win32_executable":"<h1 id=\"prop_tgt:WIN32_EXECUTABLE\">WIN32_EXECUTABLE</h1> <p id=\"win32-executable\">Build an executable with a WinMain entry point on windows.</p> <p>When this property is set to true the executable when linked on Windows will be created with a WinMain() entry point instead of just main(). This makes it a GUI executable instead of a console application. See the CMAKE_MFC_FLAG variable documentation to configure use of MFC for WinMain executables. This property is initialized by the value of the variable CMAKE_WIN32_EXECUTABLE if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/WIN32_EXECUTABLE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/WIN32_EXECUTABLE.html</a>\n  </p>\n</div>\n","prop_tgt/vs_winrt_extensions":"<h1 id=\"prop_tgt:VS_WINRT_EXTENSIONS\">VS_WINRT_EXTENSIONS</h1> <p id=\"vs-winrt-extensions\">Deprecated. Use <a class=\"reference internal\" href=\"vs_winrt_component#prop_tgt:VS_WINRT_COMPONENT\" title=\"VS_WINRT_COMPONENT\" id=\"index-0-prop_tgt:VS_WINRT_COMPONENT\"><code>VS_WINRT_COMPONENT</code></a> instead. This property was an experimental partial implementation of that one.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_WINRT_EXTENSIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_WINRT_EXTENSIONS.html</a>\n  </p>\n</div>\n","prop_tgt/vs_winrt_references":"<h1 id=\"prop_tgt:VS_WINRT_REFERENCES\">VS_WINRT_REFERENCES</h1> <p id=\"vs-winrt-references\">Visual Studio project Windows Runtime Metadata references</p> <p>Adds one or more semicolon-delimited WinRT references to a generated Visual Studio project. For example, “Windows;Windows.UI.Core”.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/VS_WINRT_REFERENCES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/VS_WINRT_REFERENCES.html</a>\n  </p>\n</div>\n","prop_tgt/xcode_attribute_an-attribute":"<h1 id=\"prop_tgt:XCODE_ATTRIBUTE_&lt;an-attribute&gt;\">XCODE_ATTRIBUTE_&lt;an-attribute&gt;</h1> <p id=\"xcode-attribute-an-attribute\">Set Xcode target attributes directly.</p> <p>Tell the Xcode generator to set ‘&lt;an-attribute&gt;’ to a given value in the generated Xcode project. Ignored on other generators.</p> <p>See the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_XCODE_ATTRIBUTE_&lt;an-attribute&gt;\" id=\"index-0-variable:CMAKE_XCODE_ATTRIBUTE_&lt;an-attribute&gt;\"><code>CMAKE_XCODE_ATTRIBUTE_&lt;an-attribute&gt;</code></a> variable to set attributes on all targets in a directory tree.</p> <p>Contents of <code>XCODE_ATTRIBUTE_&lt;an-attribute&gt;</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/XCODE_ATTRIBUTE_an-attribute.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/XCODE_ATTRIBUTE_an-attribute.html</a>\n  </p>\n</div>\n","prop_tgt/windows_export_all_symbols":"<h1 id=\"prop_tgt:WINDOWS_EXPORT_ALL_SYMBOLS\">WINDOWS_EXPORT_ALL_SYMBOLS</h1> <p id=\"windows-export-all-symbols\">This property is implemented only for MS-compatible tools on Windows.</p> <p>Enable this boolean property to automatically create a module definition (<code>.def</code>) file with all global symbols found in the input <code>.obj</code> files for a <code>SHARED</code> library on Windows. The module definition file will be passed to the linker causing all symbols to be exported from the <code>.dll</code>. For global <em>data</em> symbols, <code>__declspec(dllimport)</code> must still be used when compiling against the code in the <code>.dll</code>. All other function symbols will be automatically exported and imported by callers. This simplifies porting projects to Windows by reducing the need for explicit <code>dllexport</code> markup, even in <code>C++</code> classes.</p> <p>This property is initialized by the value of the <a class=\"reference internal\" href=\"../variable/cmake_windows_export_all_symbols#variable:CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS\" title=\"CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS\" id=\"index-0-variable:CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS\"><code>CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS</code></a> variable if it is set when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.html</a>\n  </p>\n</div>\n","prop_test/attached_files_on_fail":"<h1 id=\"prop_test:ATTACHED_FILES_ON_FAIL\">ATTACHED_FILES_ON_FAIL</h1> <p id=\"attached-files-on-fail\">Attach a list of files to a dashboard submission if the test fails.</p> <p>Same as ATTACHED_FILES, but these files will only be included if the test does not pass.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/ATTACHED_FILES_ON_FAIL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/ATTACHED_FILES_ON_FAIL.html</a>\n  </p>\n</div>\n","prop_test/cost":"<h1 id=\"prop_test:COST\">COST</h1> <p id=\"cost\">Set this to a floating point value. Tests in a test set will be run in descending order of cost.</p> <p>This property describes the cost of a test. You can explicitly set this value; tests with higher COST values will run first.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/COST.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/COST.html</a>\n  </p>\n</div>\n","prop_test/attached_files":"<h1 id=\"prop_test:ATTACHED_FILES\">ATTACHED_FILES</h1> <p id=\"attached-files\">Attach a list of files to a dashboard submission.</p> <p>Set this property to a list of files that will be encoded and submitted to the dashboard as an addition to the test result.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/ATTACHED_FILES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/ATTACHED_FILES.html</a>\n  </p>\n</div>\n","prop_test/depends":"<h1 id=\"prop_test:DEPENDS\">DEPENDS</h1> <p id=\"depends\">Specifies that this test should only be run after the specified list of tests.</p> <p>Set this to a list of tests that must finish before this test is run.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/DEPENDS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/DEPENDS.html</a>\n  </p>\n</div>\n","prop_test/environment":"<h1 id=\"prop_test:ENVIRONMENT\">ENVIRONMENT</h1> <p id=\"environment\">Specify environment variables that should be defined for running a test.</p> <p>If set to a list of environment variables and values of the form MYVAR=value those environment variables will be defined while running the test. The environment is restored to its previous state after the test is done.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/ENVIRONMENT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/ENVIRONMENT.html</a>\n  </p>\n</div>\n","prop_tgt/xctest":"<h1 id=\"prop_tgt:XCTEST\">XCTEST</h1> <p id=\"xctest\">This target is a XCTest CFBundle on the Mac.</p> <p>This property will usually get set via the <a class=\"reference internal\" href=\"../module/findxctest#command:xctest_add_bundle\" title=\"xctest_add_bundle\" id=\"index-0-command:xctest_add_bundle\"><code>xctest_add_bundle()</code></a> macro in <a class=\"reference internal\" href=\"../module/findxctest#module:FindXCTest\" title=\"FindXCTest\" id=\"index-0-module:FindXCTest\"><code>FindXCTest</code></a> module.</p> <p>If a module library target has this property set to true it will be built as a CFBundle when built on the Mac. It will have the directory structure required for a CFBundle.</p> <p>This property depends on <a class=\"reference internal\" href=\"bundle#prop_tgt:BUNDLE\" title=\"BUNDLE\" id=\"index-0-prop_tgt:BUNDLE\"><code>BUNDLE</code></a> to be effective.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/XCTEST.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/XCTEST.html</a>\n  </p>\n</div>\n","prop_test/fail_regular_expression":"<h1 id=\"prop_test:FAIL_REGULAR_EXPRESSION\">FAIL_REGULAR_EXPRESSION</h1> <p id=\"fail-regular-expression\">If the output matches this regular expression the test will fail.</p> <p>If set, if the output matches one of specified regular expressions, the test will fail. Example:</p> <pre data-language=\"cmake\">set_tests_properties(mytest PROPERTIES\n  FAIL_REGULAR_EXPRESSION \"[^a-z]Error;ERROR;Failed\"\n)\n</pre> <p><code>FAIL_REGULAR_EXPRESSION</code> expects a list of regular expressions.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/FAIL_REGULAR_EXPRESSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/FAIL_REGULAR_EXPRESSION.html</a>\n  </p>\n</div>\n","prop_test/labels":"<h1 id=\"prop_test:LABELS\">LABELS</h1> <p id=\"labels\">Specify a list of text labels associated with a test.</p> <p>The list is reported in dashboard submissions.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/LABELS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/LABELS.html</a>\n  </p>\n</div>\n","prop_test/measurement":"<h1 id=\"prop_test:MEASUREMENT\">MEASUREMENT</h1> <p id=\"measurement\">Specify a CDASH measurement and value to be reported for a test.</p> <p>If set to a name then that name will be reported to CDASH as a named measurement with a value of 1. You may also specify a value by setting MEASUREMENT to “measurement=value”.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/MEASUREMENT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/MEASUREMENT.html</a>\n  </p>\n</div>\n","prop_test/pass_regular_expression":"<h1 id=\"prop_test:PASS_REGULAR_EXPRESSION\">PASS_REGULAR_EXPRESSION</h1> <p id=\"pass-regular-expression\">The output must match this regular expression for the test to pass.</p> <p>If set, the test output will be checked against the specified regular expressions and at least one of the regular expressions has to match, otherwise the test will fail. Example:</p> <pre data-language=\"cmake\">set_tests_properties(mytest PROPERTIES\n  PASS_REGULAR_EXPRESSION \"TestPassed;All ok\"\n)\n</pre> <p><code>PASS_REGULAR_EXPRESSION</code> expects a list of regular expressions.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/PASS_REGULAR_EXPRESSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/PASS_REGULAR_EXPRESSION.html</a>\n  </p>\n</div>\n","prop_test/processors":"<h1 id=\"prop_test:PROCESSORS\">PROCESSORS</h1> <p id=\"processors\">How many process slots this test requires</p> <p>Denotes the number of processors that this test will require. This is typically used for MPI tests, and should be used in conjunction with the ctest_test PARALLEL_LEVEL option.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/PROCESSORS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/PROCESSORS.html</a>\n  </p>\n</div>\n","prop_test/required_files":"<h1 id=\"prop_test:REQUIRED_FILES\">REQUIRED_FILES</h1> <p id=\"required-files\">List of files required to run the test.</p> <p>If set to a list of files, the test will not be run unless all of the files exist.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/REQUIRED_FILES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/REQUIRED_FILES.html</a>\n  </p>\n</div>\n","prop_test/resource_lock":"<h1 id=\"prop_test:RESOURCE_LOCK\">RESOURCE_LOCK</h1> <p id=\"resource-lock\">Specify a list of resources that are locked by this test.</p> <p>If multiple tests specify the same resource lock, they are guaranteed not to run concurrently.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/RESOURCE_LOCK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/RESOURCE_LOCK.html</a>\n  </p>\n</div>\n","prop_test/run_serial":"<h1 id=\"prop_test:RUN_SERIAL\">RUN_SERIAL</h1> <p id=\"run-serial\">Do not run this test in parallel with any other test.</p> <p>Use this option in conjunction with the ctest_test PARALLEL_LEVEL option to specify that this test should not be run in parallel with any other tests.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/RUN_SERIAL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/RUN_SERIAL.html</a>\n  </p>\n</div>\n","prop_test/skip_return_code":"<h1 id=\"prop_test:SKIP_RETURN_CODE\">SKIP_RETURN_CODE</h1> <p id=\"skip-return-code\">Return code to mark a test as skipped.</p> <p>Sometimes only a test itself can determine if all requirements for the test are met. If such a situation should not be considered a hard failure a return code of the process can be specified that will mark the test as “Not Run” if it is encountered.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/SKIP_RETURN_CODE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/SKIP_RETURN_CODE.html</a>\n  </p>\n</div>\n","prop_test/working_directory":"<h1 id=\"prop_test:WORKING_DIRECTORY\">WORKING_DIRECTORY</h1> <p id=\"working-directory\">The directory from which the test executable will be called.</p> <p>If this is not set it is called from the directory the test executable is located in.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/WORKING_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/WORKING_DIRECTORY.html</a>\n  </p>\n</div>\n","prop_sf/autorcc_options":"<h1 id=\"prop_sf:AUTORCC_OPTIONS\">AUTORCC_OPTIONS</h1> <p id=\"autorcc-options\">Additional options for <code>rcc</code> when using <a class=\"reference internal\" href=\"../prop_tgt/autorcc#prop_tgt:AUTORCC\" title=\"AUTORCC\" id=\"index-0-prop_tgt:AUTORCC\"><code>AUTORCC</code></a></p> <p>This property holds additional command line options which will be used when <code>rcc</code> is executed during the build via <a class=\"reference internal\" href=\"../prop_tgt/autorcc#prop_tgt:AUTORCC\" title=\"AUTORCC\" id=\"index-1-prop_tgt:AUTORCC\"><code>AUTORCC</code></a>, i.e. it is equivalent to the optional <code>OPTIONS</code> argument of the <a class=\"reference internal\" href=\"../module/findqt4#module:FindQt4\" title=\"FindQt4\" id=\"index-0-module:FindQt4\"><code>qt4_add_resources()</code></a> macro.</p> <p>By default it is empty.</p> <p>The options set on the <code>.qrc</code> source file may override <a class=\"reference internal\" href=\"../prop_tgt/autorcc_options#prop_tgt:AUTORCC_OPTIONS\" title=\"AUTORCC_OPTIONS\" id=\"index-0-prop_tgt:AUTORCC_OPTIONS\"><code>AUTORCC_OPTIONS</code></a> set on the target.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/AUTORCC_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/AUTORCC_OPTIONS.html</a>\n  </p>\n</div>\n","prop_sf/compile_definitions":"<h1 id=\"prop_sf:COMPILE_DEFINITIONS\">COMPILE_DEFINITIONS</h1> <p id=\"compile-definitions\">Preprocessor definitions for compiling a source file.</p> <p>The COMPILE_DEFINITIONS property may be set to a semicolon-separated list of preprocessor definitions using the syntax VAR or VAR=value. Function-style definitions are not supported. CMake will automatically escape the value correctly for the native build system (note that CMake language syntax may require escapes to specify some values). This property may be set on a per-configuration basis using the name COMPILE_DEFINITIONS_&lt;CONFIG&gt; where &lt;CONFIG&gt; is an upper-case name (ex. “COMPILE_DEFINITIONS_DEBUG”).</p> <p>CMake will automatically drop some definitions that are not supported by the native build tool. The VS6 IDE does not support definition values with spaces (but NMake does). Xcode does not support per-configuration definitions on source files.</p> <p>Disclaimer: Most native build tools have poor support for escaping certain values. CMake has work-arounds for many cases but some values may just not be possible to pass correctly. If a value does not seem to be escaped correctly, do not attempt to work-around the problem by adding escape sequences to the value. Your work-around may break in a future version of CMake that has improved escape support. Instead consider defining the macro in a (configured) header file. Then report the limitation. Known limitations include:</p> <pre data-language=\"python\">#          - broken almost everywhere\n;          - broken in VS IDE 7.0 and Borland Makefiles\n,          - broken in VS IDE\n%          - broken in some cases in NMake\n&amp; |        - broken in some cases on MinGW\n^ &lt; &gt; \\\"   - broken in most Make tools on Windows\n</pre> <p>CMake does not reject these values outright because they do work in some cases. Use with caution.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/COMPILE_DEFINITIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/COMPILE_DEFINITIONS.html</a>\n  </p>\n</div>\n","prop_sf/abstract":"<h1 id=\"prop_sf:ABSTRACT\">ABSTRACT</h1> <p id=\"abstract\">Is this source file an abstract class.</p> <p>A property on a source file that indicates if the source file represents a class that is abstract. This only makes sense for languages that have a notion of an abstract class and it is only used by some tools that wrap classes into other languages.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/ABSTRACT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/ABSTRACT.html</a>\n  </p>\n</div>\n","prop_test/timeout":"<h1 id=\"prop_test:TIMEOUT\">TIMEOUT</h1> <p id=\"timeout\">How many seconds to allow for this test.</p> <p>This property if set will limit a test to not take more than the specified number of seconds to run. If it exceeds that the test process will be killed and ctest will move to the next test. This setting takes precedence over <a class=\"reference internal\" href=\"../variable/ctest_test_timeout#variable:CTEST_TEST_TIMEOUT\" title=\"CTEST_TEST_TIMEOUT\" id=\"index-0-variable:CTEST_TEST_TIMEOUT\"><code>CTEST_TEST_TIMEOUT</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/TIMEOUT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/TIMEOUT.html</a>\n  </p>\n</div>\n","prop_test/will_fail":"<h1 id=\"prop_test:WILL_FAIL\">WILL_FAIL</h1> <p id=\"will-fail\">If set to true, this will invert the pass/fail flag of the test.</p> <p>This property can be used for tests that are expected to fail and return a non zero return code.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_test/WILL_FAIL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_test/WILL_FAIL.html</a>\n  </p>\n</div>\n","prop_sf/autouic_options":"<h1 id=\"prop_sf:AUTOUIC_OPTIONS\">AUTOUIC_OPTIONS</h1> <p id=\"autouic-options\">Additional options for <code>uic</code> when using <a class=\"reference internal\" href=\"../prop_tgt/autouic#prop_tgt:AUTOUIC\" title=\"AUTOUIC\" id=\"index-0-prop_tgt:AUTOUIC\"><code>AUTOUIC</code></a></p> <p>This property holds additional command line options which will be used when <code>uic</code> is executed during the build via <a class=\"reference internal\" href=\"../prop_tgt/autouic#prop_tgt:AUTOUIC\" title=\"AUTOUIC\" id=\"index-1-prop_tgt:AUTOUIC\"><code>AUTOUIC</code></a>, i.e. it is equivalent to the optional <code>OPTIONS</code> argument of the <a class=\"reference internal\" href=\"../module/findqt4#module:FindQt4\" title=\"FindQt4\" id=\"index-0-module:FindQt4\"><code>qt4_wrap_ui()</code></a> macro.</p> <p>By default it is empty.</p> <p>The options set on the <code>.ui</code> source file may override <a class=\"reference internal\" href=\"../prop_tgt/autouic_options#prop_tgt:AUTOUIC_OPTIONS\" title=\"AUTOUIC_OPTIONS\" id=\"index-0-prop_tgt:AUTOUIC_OPTIONS\"><code>AUTOUIC_OPTIONS</code></a> set on the target.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/AUTOUIC_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/AUTOUIC_OPTIONS.html</a>\n  </p>\n</div>\n","prop_sf/compile_flags":"<h1 id=\"prop_sf:COMPILE_FLAGS\">COMPILE_FLAGS</h1> <p id=\"compile-flags\">Additional flags to be added when compiling this source file.</p> <p>These flags will be added to the list of compile flags when this source file builds. Use COMPILE_DEFINITIONS to pass additional preprocessor definitions.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/COMPILE_FLAGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/COMPILE_FLAGS.html</a>\n  </p>\n</div>\n","prop_sf/external_object":"<h1 id=\"prop_sf:EXTERNAL_OBJECT\">EXTERNAL_OBJECT</h1> <p id=\"external-object\">If set to true then this is an object file.</p> <p>If this property is set to true then the source file is really an object file and should not be compiled. It will still be linked into the target though.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/EXTERNAL_OBJECT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/EXTERNAL_OBJECT.html</a>\n  </p>\n</div>\n","prop_sf/generated":"<h1 id=\"prop_sf:GENERATED\">GENERATED</h1> <p id=\"generated\">Is this source file generated as part of the build process.</p> <p>If a source file is generated by the build process CMake will handle it differently in terms of dependency checking etc. Otherwise having a non-existent source file could create problems.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/GENERATED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/GENERATED.html</a>\n  </p>\n</div>\n","prop_sf/fortran_format":"<h1 id=\"prop_sf:Fortran_FORMAT\">Fortran_FORMAT</h1> <p id=\"fortran-format\">Set to FIXED or FREE to indicate the Fortran source layout.</p> <p>This property tells CMake whether a given Fortran source file uses fixed-format or free-format. CMake will pass the corresponding format flag to the compiler. Consider using the target-wide Fortran_FORMAT property if all source files in a target share the same format.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/Fortran_FORMAT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/Fortran_FORMAT.html</a>\n  </p>\n</div>\n","prop_sf/header_file_only":"<h1 id=\"prop_sf:HEADER_FILE_ONLY\">HEADER_FILE_ONLY</h1> <p id=\"header-file-only\">Is this source file only a header file.</p> <p>A property on a source file that indicates if the source file is a header file with no associated implementation. This is set automatically based on the file extension and is used by CMake to determine if certain dependency information should be computed.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/HEADER_FILE_ONLY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/HEADER_FILE_ONLY.html</a>\n  </p>\n</div>\n","prop_sf/keep_extension":"<h1 id=\"prop_sf:KEEP_EXTENSION\">KEEP_EXTENSION</h1> <p id=\"keep-extension\">Make the output file have the same extension as the source file.</p> <p>If this property is set then the file extension of the output file will be the same as that of the source file. Normally the output file extension is computed based on the language of the source file, for example .cxx will go to a .o extension.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/KEEP_EXTENSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/KEEP_EXTENSION.html</a>\n  </p>\n</div>\n","prop_sf/labels":"<h1 id=\"prop_sf:LABELS\">LABELS</h1> <p id=\"labels\">Specify a list of text labels associated with a source file.</p> <p>This property has meaning only when the source file is listed in a target whose LABELS property is also set. No other semantics are currently specified.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/LABELS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/LABELS.html</a>\n  </p>\n</div>\n","prop_sf/language":"<h1 id=\"prop_sf:LANGUAGE\">LANGUAGE</h1> <p id=\"language\">What programming language is the file.</p> <p>A property that can be set to indicate what programming language the source file is. If it is not set the language is determined based on the file extension. Typical values are CXX C etc. Setting this property for a file means this file will be compiled. Do not set this for headers or files that should not be compiled.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/LANGUAGE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/LANGUAGE.html</a>\n  </p>\n</div>\n","prop_sf/location":"<h1 id=\"prop_sf:LOCATION\">LOCATION</h1> <p id=\"location\">The full path to a source file.</p> <p>A read only property on a SOURCE FILE that contains the full path to the source file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/LOCATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/LOCATION.html</a>\n  </p>\n</div>\n","prop_sf/macosx_package_location":"<h1 id=\"prop_sf:MACOSX_PACKAGE_LOCATION\">MACOSX_PACKAGE_LOCATION</h1> <p id=\"macosx-package-location\">Place a source file inside a Application Bundle (<a class=\"reference internal\" href=\"../prop_tgt/macosx_bundle#prop_tgt:MACOSX_BUNDLE\" title=\"MACOSX_BUNDLE\" id=\"index-0-prop_tgt:MACOSX_BUNDLE\"><code>MACOSX_BUNDLE</code></a>), Core Foundation Bundle (<a class=\"reference internal\" href=\"../prop_tgt/bundle#prop_tgt:BUNDLE\" title=\"BUNDLE\" id=\"index-0-prop_tgt:BUNDLE\"><code>BUNDLE</code></a>), or Framework Bundle (<a class=\"reference internal\" href=\"../prop_tgt/framework#prop_tgt:FRAMEWORK\" title=\"FRAMEWORK\" id=\"index-0-prop_tgt:FRAMEWORK\"><code>FRAMEWORK</code></a>). It is applicable for OS X and iOS.</p> <p>Executable targets with the <a class=\"reference internal\" href=\"../prop_tgt/macosx_bundle#prop_tgt:MACOSX_BUNDLE\" title=\"MACOSX_BUNDLE\" id=\"index-1-prop_tgt:MACOSX_BUNDLE\"><code>MACOSX_BUNDLE</code></a> property set are built as OS X or iOS application bundles on Apple platforms. Shared library targets with the <a class=\"reference internal\" href=\"../prop_tgt/framework#prop_tgt:FRAMEWORK\" title=\"FRAMEWORK\" id=\"index-1-prop_tgt:FRAMEWORK\"><code>FRAMEWORK</code></a> property set are built as OS X or iOS frameworks on Apple platforms. Module library targets with the <a class=\"reference internal\" href=\"../prop_tgt/bundle#prop_tgt:BUNDLE\" title=\"BUNDLE\" id=\"index-1-prop_tgt:BUNDLE\"><code>BUNDLE</code></a> property set are built as OS X <code>CFBundle</code> bundles on Apple platforms. Source files listed in the target with this property set will be copied to a directory inside the bundle or framework content folder specified by the property value. For OS X Application Bundles the content folder is <code>&lt;name&gt;.app/Contents</code>. For OS X Frameworks the content folder is <code>&lt;name&gt;.framework/Versions/&lt;version&gt;</code>. For OS X CFBundles the content folder is <code>&lt;name&gt;.bundle/Contents</code> (unless the extension is changed). See the <a class=\"reference internal\" href=\"../prop_tgt/public_header#prop_tgt:PUBLIC_HEADER\" title=\"PUBLIC_HEADER\" id=\"index-0-prop_tgt:PUBLIC_HEADER\"><code>PUBLIC_HEADER</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/private_header#prop_tgt:PRIVATE_HEADER\" title=\"PRIVATE_HEADER\" id=\"index-0-prop_tgt:PRIVATE_HEADER\"><code>PRIVATE_HEADER</code></a>, and <a class=\"reference internal\" href=\"../prop_tgt/resource#prop_tgt:RESOURCE\" title=\"RESOURCE\" id=\"index-0-prop_tgt:RESOURCE\"><code>RESOURCE</code></a> target properties for specifying files meant for <code>Headers</code>, <code>PrivateHeaders</code>, or <code>Resources</code> directories.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/MACOSX_PACKAGE_LOCATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/MACOSX_PACKAGE_LOCATION.html</a>\n  </p>\n</div>\n","prop_sf/symbolic":"<h1 id=\"prop_sf:SYMBOLIC\">SYMBOLIC</h1> <p id=\"symbolic\">Is this just a name for a rule.</p> <p>If SYMBOLIC (boolean) is set to true the build system will be informed that the source file is not actually created on disk but instead used as a symbolic name for a build rule.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/SYMBOLIC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/SYMBOLIC.html</a>\n  </p>\n</div>\n","prop_sf/object_depends":"<h1 id=\"prop_sf:OBJECT_DEPENDS\">OBJECT_DEPENDS</h1> <p id=\"object-depends\">Additional files on which a compiled object file depends.</p> <p>Specifies a <a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of full-paths to files on which any object files compiled from this source file depend. On <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> and the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a> generator an object file will be recompiled if any of the named files is newer than it. <a class=\"reference internal\" href=\"../manual/cmake-generators.7#visual-studio-generators\"><span>Visual Studio Generators</span></a> and the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Xcode.html#generator:Xcode\" title=\"Xcode\" id=\"index-0-generator:Xcode\"><code>Xcode</code></a> generator cannot implement such compilation dependencies.</p> <p>This property need not be used to specify the dependency of a source file on a generated header file that it includes. Although the property was originally introduced for this purpose, it is no longer necessary. If the generated header file is created by a custom command in the same target as the source file, the automatic dependency scanning process will recognize the dependency. If the generated header file is created by another target, an inter-target dependency should be created with the <a class=\"reference internal\" href=\"../command/add_dependencies#command:add_dependencies\" title=\"add_dependencies\" id=\"index-0-command:add_dependencies\"><code>add_dependencies()</code></a> command (if one does not already exist due to linking relationships).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/OBJECT_DEPENDS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/OBJECT_DEPENDS.html</a>\n  </p>\n</div>\n","prop_sf/object_outputs":"<h1 id=\"prop_sf:OBJECT_OUTPUTS\">OBJECT_OUTPUTS</h1> <p id=\"object-outputs\">Additional outputs for a Makefile rule.</p> <p>Additional outputs created by compilation of this source file. If any of these outputs is missing the object will be recompiled. This is supported only on Makefile generators and will be ignored on other generators.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/OBJECT_OUTPUTS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/OBJECT_OUTPUTS.html</a>\n  </p>\n</div>\n","prop_sf/vs_deployment_content":"<h1 id=\"prop_sf:VS_DEPLOYMENT_CONTENT\">VS_DEPLOYMENT_CONTENT</h1> <p id=\"vs-deployment-content\">Mark a source file as content for deployment with a Windows Phone or Windows Store application when built with a Visual Studio generator. The value must evaluate to either <code>1</code> or <code>0</code> and may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a> to make the choice based on the build configuration. The <code>.vcxproj</code> file entry for the source file will be marked either <code>DeploymentContent</code> or <code>ExcludedFromBuild</code> for values <code>1</code> and <code>0</code>, respectively.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/VS_DEPLOYMENT_CONTENT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/VS_DEPLOYMENT_CONTENT.html</a>\n  </p>\n</div>\n","prop_sf/vs_deployment_location":"<h1 id=\"prop_sf:VS_DEPLOYMENT_LOCATION\">VS_DEPLOYMENT_LOCATION</h1> <p id=\"vs-deployment-location\">Specifies the deployment location for a content source file with a Windows Phone or Windows Store application when built with a Visual Studio generator. This property is only applicable when using <a class=\"reference internal\" href=\"vs_deployment_content#prop_sf:VS_DEPLOYMENT_CONTENT\" title=\"VS_DEPLOYMENT_CONTENT\" id=\"index-0-prop_sf:VS_DEPLOYMENT_CONTENT\"><code>VS_DEPLOYMENT_CONTENT</code></a>. The value represent the path relative to the app package and applies to all configurations.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/VS_DEPLOYMENT_LOCATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/VS_DEPLOYMENT_LOCATION.html</a>\n  </p>\n</div>\n","prop_sf/vs_shader_entrypoint":"<h1 id=\"prop_sf:VS_SHADER_ENTRYPOINT\">VS_SHADER_ENTRYPOINT</h1> <p id=\"vs-shader-entrypoint\">Specifies the name of the entry point for the shader of a <code>.hlsl</code> source file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/VS_SHADER_ENTRYPOINT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/VS_SHADER_ENTRYPOINT.html</a>\n  </p>\n</div>\n","prop_sf/xcode_explicit_file_type":"<h1 id=\"prop_sf:XCODE_EXPLICIT_FILE_TYPE\">XCODE_EXPLICIT_FILE_TYPE</h1> <p id=\"xcode-explicit-file-type\">Set the Xcode <code>explicitFileType</code> attribute on its reference to a source file. CMake computes a default based on file extension but can be told explicitly with this property.</p> <p>See also <a class=\"reference internal\" href=\"xcode_last_known_file_type#prop_sf:XCODE_LAST_KNOWN_FILE_TYPE\" title=\"XCODE_LAST_KNOWN_FILE_TYPE\" id=\"index-0-prop_sf:XCODE_LAST_KNOWN_FILE_TYPE\"><code>XCODE_LAST_KNOWN_FILE_TYPE</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/XCODE_EXPLICIT_FILE_TYPE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/XCODE_EXPLICIT_FILE_TYPE.html</a>\n  </p>\n</div>\n","prop_sf/vs_shader_flags":"<h1 id=\"prop_sf:VS_SHADER_FLAGS\">VS_SHADER_FLAGS</h1> <p id=\"vs-shader-flags\">Set additional VS shader flags of a <code>.hlsl</code> source file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/VS_SHADER_FLAGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/VS_SHADER_FLAGS.html</a>\n  </p>\n</div>\n","prop_sf/vs_xaml_type":"<h1 id=\"prop_sf:VS_XAML_TYPE\">VS_XAML_TYPE</h1> <p id=\"vs-xaml-type\">Mark a XAML source file as a different type than the default <code>Page</code>. The most common usage would be to set the default App.xaml file as ApplicationDefinition.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/VS_XAML_TYPE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/VS_XAML_TYPE.html</a>\n  </p>\n</div>\n","prop_sf/vs_shader_type":"<h1 id=\"prop_sf:VS_SHADER_TYPE\">VS_SHADER_TYPE</h1> <p id=\"vs-shader-type\">Set the VS shader type of a <code>.hlsl</code> source file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/VS_SHADER_TYPE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/VS_SHADER_TYPE.html</a>\n  </p>\n</div>\n","prop_sf/xcode_last_known_file_type":"<h1 id=\"prop_sf:XCODE_LAST_KNOWN_FILE_TYPE\">XCODE_LAST_KNOWN_FILE_TYPE</h1> <p id=\"xcode-last-known-file-type\">Set the Xcode <code>lastKnownFileType</code> attribute on its reference to a source file. CMake computes a default based on file extension but can be told explicitly with this property.</p> <p>See also <a class=\"reference internal\" href=\"xcode_explicit_file_type#prop_sf:XCODE_EXPLICIT_FILE_TYPE\" title=\"XCODE_EXPLICIT_FILE_TYPE\" id=\"index-0-prop_sf:XCODE_EXPLICIT_FILE_TYPE\"><code>XCODE_EXPLICIT_FILE_TYPE</code></a>, which is preferred over this property if set.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/XCODE_LAST_KNOWN_FILE_TYPE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/XCODE_LAST_KNOWN_FILE_TYPE.html</a>\n  </p>\n</div>\n","prop_sf/vs_shader_model":"<h1 id=\"prop_sf:VS_SHADER_MODEL\">VS_SHADER_MODEL</h1> <p id=\"vs-shader-model\">Specifies the shader model of a <code>.hlsl</code> source file. Some shader types can only be used with recent shader models</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/VS_SHADER_MODEL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/VS_SHADER_MODEL.html</a>\n  </p>\n</div>\n","prop_sf/wrap_exclude":"<h1 id=\"prop_sf:WRAP_EXCLUDE\">WRAP_EXCLUDE</h1> <p id=\"wrap-exclude\">Exclude this source file from any code wrapping techniques.</p> <p>Some packages can wrap source files into alternate languages to provide additional functionality. For example, C++ code can be wrapped into Java or Python etc using SWIG etc. If WRAP_EXCLUDE is set to true (1 etc) that indicates that this source file should not be wrapped.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/WRAP_EXCLUDE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/WRAP_EXCLUDE.html</a>\n  </p>\n</div>\n","prop_cache/advanced":"<h1 id=\"prop_cache:ADVANCED\">ADVANCED</h1> <p id=\"advanced\">True if entry should be hidden by default in GUIs.</p> <p>This is a boolean value indicating whether the entry is considered interesting only for advanced configuration. The mark_as_advanced() command modifies this property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_cache/ADVANCED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_cache/ADVANCED.html</a>\n  </p>\n</div>\n","prop_cache/modified":"<h1 id=\"prop_cache:MODIFIED\">MODIFIED</h1> <p id=\"modified\">Internal management property. Do not set or get.</p> <p>This is an internal cache entry property managed by CMake to track interactive user modification of entries. Ignore it.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_cache/MODIFIED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_cache/MODIFIED.html</a>\n  </p>\n</div>\n","prop_cache/strings":"<h1 id=\"prop_cache:STRINGS\">STRINGS</h1> <p id=\"strings\">Enumerate possible STRING entry values for GUI selection.</p> <p>For cache entries with type STRING, this enumerates a set of values. CMake GUIs may use this to provide a selection widget instead of a generic string entry field. This is for convenience only. CMake does not enforce that the value matches one of those listed.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_cache/STRINGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_cache/STRINGS.html</a>\n  </p>\n</div>\n","prop_cache/helpstring":"<h1 id=\"prop_cache:HELPSTRING\">HELPSTRING</h1> <p id=\"helpstring\">Help associated with entry in GUIs.</p> <p>This string summarizes the purpose of an entry to help users set it through a CMake GUI.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_cache/HELPSTRING.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_cache/HELPSTRING.html</a>\n  </p>\n</div>\n","prop_cache/value":"<h1 id=\"prop_cache:VALUE\">VALUE</h1> <p id=\"value\">Value of a cache entry.</p> <p>This property maps to the actual value of a cache entry. Setting this property always sets the value without checking, so use with care.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_cache/VALUE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_cache/VALUE.html</a>\n  </p>\n</div>\n","prop_cache/type":"<h1 id=\"prop_cache:TYPE\">TYPE</h1> <p id=\"type\">Widget type for entry in GUIs.</p> <p>Cache entry values are always strings, but CMake GUIs present widgets to help users set values. The GUIs use this property as a hint to determine the widget type. Valid TYPE values are:</p> <pre data-language=\"python\">BOOL          = Boolean ON/OFF value.\nPATH          = Path to a directory.\nFILEPATH      = Path to a file.\nSTRING        = Generic string value.\nINTERNAL      = Do not present in GUI at all.\nSTATIC        = Value managed by CMake, do not change.\nUNINITIALIZED = Type not yet specified.\n</pre> <p>Generally the TYPE of a cache entry should be set by the command which creates it (set, option, find_library, etc.).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_cache/TYPE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_cache/TYPE.html</a>\n  </p>\n</div>\n","prop_inst/cpack_desktop_shortcuts":"<h1 id=\"prop_inst:CPACK_DESKTOP_SHORTCUTS\">CPACK_DESKTOP_SHORTCUTS</h1> <p id=\"cpack-desktop-shortcuts\">Species a list of shortcut names that should be created on the Desktop for this file.</p> <p>The property is currently only supported by the WIX generator.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_inst/CPACK_DESKTOP_SHORTCUTS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_inst/CPACK_DESKTOP_SHORTCUTS.html</a>\n  </p>\n</div>\n","prop_inst/cpack_never_overwrite":"<h1 id=\"prop_inst:CPACK_NEVER_OVERWRITE\">CPACK_NEVER_OVERWRITE</h1> <p id=\"cpack-never-overwrite\">Request that this file not be overwritten on install or reinstall.</p> <p>The property is currently only supported by the WIX generator.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_inst/CPACK_NEVER_OVERWRITE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_inst/CPACK_NEVER_OVERWRITE.html</a>\n  </p>\n</div>\n","prop_inst/cpack_permanent":"<h1 id=\"prop_inst:CPACK_PERMANENT\">CPACK_PERMANENT</h1> <p id=\"cpack-permanent\">Request that this file not be removed on uninstall.</p> <p>The property is currently only supported by the WIX generator.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_inst/CPACK_PERMANENT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_inst/CPACK_PERMANENT.html</a>\n  </p>\n</div>\n","prop_inst/cpack_start_menu_shortcuts":"<h1 id=\"prop_inst:CPACK_START_MENU_SHORTCUTS\">CPACK_START_MENU_SHORTCUTS</h1> <p id=\"cpack-start-menu-shortcuts\">Species a list of shortcut names that should be created in the Start Menu for this file.</p> <p>The property is currently only supported by the WIX generator.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_inst/CPACK_START_MENU_SHORTCUTS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_inst/CPACK_START_MENU_SHORTCUTS.html</a>\n  </p>\n</div>\n","prop_inst/cpack_startup_shortcuts":"<h1 id=\"prop_inst:CPACK_STARTUP_SHORTCUTS\">CPACK_STARTUP_SHORTCUTS</h1> <p id=\"cpack-startup-shortcuts\">Species a list of shortcut names that should be created in the Startup folder for this file.</p> <p>The property is currently only supported by the WIX generator.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_inst/CPACK_STARTUP_SHORTCUTS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_inst/CPACK_STARTUP_SHORTCUTS.html</a>\n  </p>\n</div>\n","prop_inst/cpack_wix_acl":"<h1 id=\"prop_inst:CPACK_WIX_ACL\">CPACK_WIX_ACL</h1> <p id=\"cpack-wix-acl\">Specifies access permissions for files or directories installed by a WiX installer.</p> <p>The property can contain multiple list entries, each of which has to match the following format.</p> <pre data-language=\"python\">&lt;user&gt;[@&lt;domain&gt;]=&lt;permission&gt;[,&lt;permission&gt;]\n</pre> <p><code>&lt;user&gt;</code> and <code>&lt;domain&gt;</code> specify the windows user and domain for which the <code>&lt;Permission&gt;</code> element should be generated.</p> <p><code>&lt;permission&gt;</code> is any of the YesNoType attributes listed here:</p> <pre data-language=\"python\">http://wixtoolset.org/documentation/manual/v3/xsd/wix/permission.html\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_inst/CPACK_WIX_ACL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_inst/CPACK_WIX_ACL.html</a>\n  </p>\n</div>\n","prop_dir/compile_definitions_config":"<h1 id=\"prop_dir:COMPILE_DEFINITIONS_&lt;CONFIG&gt;\">COMPILE_DEFINITIONS_&lt;CONFIG&gt;</h1> <p id=\"compile-definitions-config\">Ignored. See CMake Policy <a class=\"reference internal\" href=\"../policy/cmp0043#policy:CMP0043\" title=\"CMP0043\" id=\"index-0-policy:CMP0043\"><code>CMP0043</code></a>.</p> <p>Per-configuration preprocessor definitions in a directory.</p> <p>This is the configuration-specific version of <a class=\"reference internal\" href=\"compile_definitions#prop_dir:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_dir:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> where <code>&lt;CONFIG&gt;</code> is an upper-case name (ex. <code>COMPILE_DEFINITIONS_DEBUG</code>).</p> <p>This property will be initialized in each directory by its value in the directory’s parent.</p> <p>Contents of <code>COMPILE_DEFINITIONS_&lt;CONFIG&gt;</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p> <p>Generator expressions should be preferred instead of setting this property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_dir/COMPILE_DEFINITIONS_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_dir/COMPILE_DEFINITIONS_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/compile_definitions_config":"<h1 id=\"prop_tgt:COMPILE_DEFINITIONS_&lt;CONFIG&gt;\">COMPILE_DEFINITIONS_&lt;CONFIG&gt;</h1> <p id=\"compile-definitions-config\">Ignored. See CMake Policy <a class=\"reference internal\" href=\"../policy/cmp0043#policy:CMP0043\" title=\"CMP0043\" id=\"index-0-policy:CMP0043\"><code>CMP0043</code></a>.</p> <p>Per-configuration preprocessor definitions on a target.</p> <p>This is the configuration-specific version of <a class=\"reference internal\" href=\"compile_definitions#prop_tgt:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_tgt:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> where <code>&lt;CONFIG&gt;</code> is an upper-case name (ex. <code>COMPILE_DEFINITIONS_DEBUG</code>).</p> <p>Contents of <code>COMPILE_DEFINITIONS_&lt;CONFIG&gt;</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p> <p>Generator expressions should be preferred instead of setting this property.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_DEFINITIONS_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/COMPILE_DEFINITIONS_CONFIG.html</a>\n  </p>\n</div>\n","prop_tgt/post_install_script":"<h1 id=\"prop_tgt:POST_INSTALL_SCRIPT\">POST_INSTALL_SCRIPT</h1> <p id=\"post-install-script\">Deprecated install support.</p> <p>The PRE_INSTALL_SCRIPT and POST_INSTALL_SCRIPT properties are the old way to specify CMake scripts to run before and after installing a target. They are used only when the old INSTALL_TARGETS command is used to install the target. Use the INSTALL command instead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/POST_INSTALL_SCRIPT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/POST_INSTALL_SCRIPT.html</a>\n  </p>\n</div>\n","prop_tgt/pre_install_script":"<h1 id=\"prop_tgt:PRE_INSTALL_SCRIPT\">PRE_INSTALL_SCRIPT</h1> <p id=\"pre-install-script\">Deprecated install support.</p> <p>The PRE_INSTALL_SCRIPT and POST_INSTALL_SCRIPT properties are the old way to specify CMake scripts to run before and after installing a target. They are used only when the old INSTALL_TARGETS command is used to install the target. Use the INSTALL command instead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_tgt/PRE_INSTALL_SCRIPT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_tgt/PRE_INSTALL_SCRIPT.html</a>\n  </p>\n</div>\n","prop_sf/compile_definitions_config":"<h1 id=\"prop_sf:COMPILE_DEFINITIONS_&lt;CONFIG&gt;\">COMPILE_DEFINITIONS_&lt;CONFIG&gt;</h1> <p id=\"compile-definitions-config\">Ignored. See CMake Policy <a class=\"reference internal\" href=\"../policy/cmp0043#policy:CMP0043\" title=\"CMP0043\" id=\"index-0-policy:CMP0043\"><code>CMP0043</code></a>.</p> <p>Per-configuration preprocessor definitions on a source file.</p> <p>This is the configuration-specific version of COMPILE_DEFINITIONS. Note that Xcode does not support per-configuration source file flags so this property will be ignored by the Xcode generator.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/prop_sf/COMPILE_DEFINITIONS_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/prop_sf/COMPILE_DEFINITIONS_CONFIG.html</a>\n  </p>\n</div>\n","variable/cmake_crosscompiling":"<h1 id=\"variable:CMAKE_CROSSCOMPILING\">CMAKE_CROSSCOMPILING</h1> <p id=\"cmake-crosscompiling\">Is CMake currently cross compiling.</p> <p>This variable will be set to true by CMake if CMake is cross compiling. Specifically if the build platform is different from the target platform.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CROSSCOMPILING.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CROSSCOMPILING.html</a>\n  </p>\n</div>\n","command/project":"<h1 id=\"command:project\">project</h1> <p id=\"project\">Set a name, version, and enable languages for the entire project.</p> <pre data-language=\"cmake\">project(&lt;PROJECT-NAME&gt; [LANGUAGES] [&lt;language-name&gt;...])\nproject(&lt;PROJECT-NAME&gt;\n        [VERSION &lt;major&gt;[.&lt;minor&gt;[.&lt;patch&gt;[.&lt;tweak&gt;]]]]\n        [LANGUAGES &lt;language-name&gt;...])\n</pre> <p>Sets the name of the project and stores the name in the <a class=\"reference internal\" href=\"../variable/project_name#variable:PROJECT_NAME\" title=\"PROJECT_NAME\" id=\"index-0-variable:PROJECT_NAME\"><code>PROJECT_NAME</code></a> variable. Additionally this sets variables</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"../variable/project_source_dir#variable:PROJECT_SOURCE_DIR\" title=\"PROJECT_SOURCE_DIR\" id=\"index-0-variable:PROJECT_SOURCE_DIR\"><code>PROJECT_SOURCE_DIR</code></a>, <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_SOURCE_DIR\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_SOURCE_DIR\"><code>&lt;PROJECT-NAME&gt;_SOURCE_DIR</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../variable/project_binary_dir#variable:PROJECT_BINARY_DIR\" title=\"PROJECT_BINARY_DIR\" id=\"index-0-variable:PROJECT_BINARY_DIR\"><code>PROJECT_BINARY_DIR</code></a>, <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_BINARY_DIR\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_BINARY_DIR\"><code>&lt;PROJECT-NAME&gt;_BINARY_DIR</code></a>\n</li> </ul> <p>If <code>VERSION</code> is specified, given components must be non-negative integers. If <code>VERSION</code> is not specified, the default version is the empty string. The <code>VERSION</code> option may not be used unless policy <a class=\"reference internal\" href=\"../policy/cmp0048#policy:CMP0048\" title=\"CMP0048\" id=\"index-0-policy:CMP0048\"><code>CMP0048</code></a> is set to <code>NEW</code>.</p> <p>The <a class=\"reference internal\" href=\"#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command stores the version number and its components in variables</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"../variable/project_version#variable:PROJECT_VERSION\" title=\"PROJECT_VERSION\" id=\"index-0-variable:PROJECT_VERSION\"><code>PROJECT_VERSION</code></a>, <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION\"><code>&lt;PROJECT-NAME&gt;_VERSION</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../variable/project_version_major#variable:PROJECT_VERSION_MAJOR\" title=\"PROJECT_VERSION_MAJOR\" id=\"index-0-variable:PROJECT_VERSION_MAJOR\"><code>PROJECT_VERSION_MAJOR</code></a>, <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION_MAJOR\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION_MAJOR\"><code>&lt;PROJECT-NAME&gt;_VERSION_MAJOR</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../variable/project_version_minor#variable:PROJECT_VERSION_MINOR\" title=\"PROJECT_VERSION_MINOR\" id=\"index-0-variable:PROJECT_VERSION_MINOR\"><code>PROJECT_VERSION_MINOR</code></a>, <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION_MINOR\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION_MINOR\"><code>&lt;PROJECT-NAME&gt;_VERSION_MINOR</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../variable/project_version_patch#variable:PROJECT_VERSION_PATCH\" title=\"PROJECT_VERSION_PATCH\" id=\"index-0-variable:PROJECT_VERSION_PATCH\"><code>PROJECT_VERSION_PATCH</code></a>, <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION_PATCH\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION_PATCH\"><code>&lt;PROJECT-NAME&gt;_VERSION_PATCH</code></a>\n</li> <li>\n<a class=\"reference internal\" href=\"../variable/project_version_tweak#variable:PROJECT_VERSION_TWEAK\" title=\"PROJECT_VERSION_TWEAK\" id=\"index-0-variable:PROJECT_VERSION_TWEAK\"><code>PROJECT_VERSION_TWEAK</code></a>, <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION_TWEAK\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION_TWEAK\"><code>&lt;PROJECT-NAME&gt;_VERSION_TWEAK</code></a>\n</li> </ul> <p>Variables corresponding to unspecified versions are set to the empty string (if policy <a class=\"reference internal\" href=\"../policy/cmp0048#policy:CMP0048\" title=\"CMP0048\" id=\"index-1-policy:CMP0048\"><code>CMP0048</code></a> is set to <code>NEW</code>).</p> <p>Optionally you can specify which languages your project supports. Example languages are <code>C</code>, <code>CXX</code> (i.e. C++), <code>Fortran</code>, etc. By default <code>C</code> and <code>CXX</code> are enabled if no language options are given. Specify language <code>NONE</code>, or use the <code>LANGUAGES</code> keyword and list no languages, to skip enabling any languages.</p> <p>If a variable exists called <a class=\"reference internal\" href=\"#\" title=\"CMAKE_PROJECT_&lt;PROJECT-NAME&gt;_INCLUDE\" id=\"index-0-variable:CMAKE_PROJECT_&lt;PROJECT-NAME&gt;_INCLUDE\"><code>CMAKE_PROJECT_&lt;PROJECT-NAME&gt;_INCLUDE</code></a>, the file pointed to by that variable will be included as the last step of the project command.</p> <p>The top-level <code>CMakeLists.txt</code> file for a project must contain a literal, direct call to the <a class=\"reference internal\" href=\"#command:project\" title=\"project\" id=\"index-1-command:project\"><code>project()</code></a> command; loading one through the <a class=\"reference internal\" href=\"include#command:include\" title=\"include\" id=\"index-0-command:include\"><code>include()</code></a> command is not sufficient. If no such call exists CMake will implicitly add one to the top that enables the default languages (<code>C</code> and <code>CXX</code>).</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Call the <a class=\"reference internal\" href=\"cmake_minimum_required#command:cmake_minimum_required\" title=\"cmake_minimum_required\" id=\"index-0-command:cmake_minimum_required\"><code>cmake_minimum_required()</code></a> command at the beginning of the top-level <code>CMakeLists.txt</code> file even before calling the <code>project()</code> command. It is important to establish version and policy settings before invoking other commands whose behavior they may affect. See also policy <a class=\"reference internal\" href=\"../policy/cmp0000#policy:CMP0000\" title=\"CMP0000\" id=\"index-0-policy:CMP0000\"><code>CMP0000</code></a>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/project.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/project.html</a>\n  </p>\n</div>\n","command/enable_language":"<h1 id=\"command:enable_language\">enable_language</h1> <p id=\"enable-language\">Enable a language (CXX/C/Fortran/etc)</p> <pre data-language=\"python\">enable_language(&lt;lang&gt; [OPTIONAL] )\n</pre> <p>This command enables support for the named language in CMake. This is the same as the project command but does not create any of the extra variables that are created by the project command. Example languages are CXX, C, Fortran.</p> <p>This command must be called in file scope, not in a function call. Furthermore, it must be called in the highest directory common to all targets using the named language directly for compiling sources or indirectly through link dependencies. It is simplest to enable all needed languages in the top-level directory of a project.</p> <p>The <code>OPTIONAL</code> keyword is a placeholder for future implementation and does not currently work.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/enable_language.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/enable_language.html</a>\n  </p>\n</div>\n","command/try_compile":"<h1 id=\"command:try_compile\">try_compile</h1>   <ul id=\"try-compile\"> <li><a class=\"reference internal\" href=\"#try-compiling-whole-projects\" id=\"id2\">Try Compiling Whole Projects</a></li> <li><a class=\"reference internal\" href=\"#try-compiling-source-files\" id=\"id3\">Try Compiling Source Files</a></li> <li><a class=\"reference internal\" href=\"#other-behavior-settings\" id=\"id4\">Other Behavior Settings</a></li> </ul>\n  <p>Try building some code.</p>  <h2 id=\"try-compiling-whole-projects\">Try Compiling Whole Projects</h2> <pre data-language=\"python\">try_compile(RESULT_VAR &lt;bindir&gt; &lt;srcdir&gt;\n            &lt;projectName&gt; [&lt;targetName&gt;] [CMAKE_FLAGS &lt;flags&gt;...]\n            [OUTPUT_VARIABLE &lt;var&gt;])\n</pre> <p>Try building a project. The success or failure of the <code>try_compile</code>, i.e. <code>TRUE</code> or <code>FALSE</code> respectively, is returned in <code>RESULT_VAR</code>.</p> <p>In this form, <code>&lt;srcdir&gt;</code> should contain a complete CMake project with a <code>CMakeLists.txt</code> file and all sources. The <code>&lt;bindir&gt;</code> and <code>&lt;srcdir&gt;</code> will not be deleted after this command is run. Specify <code>&lt;targetName&gt;</code> to build a specific target instead of the <code>all</code> or <code>ALL_BUILD</code> target. See below for the meaning of other options.</p>   <h2 id=\"try-compiling-source-files\">Try Compiling Source Files</h2> <pre data-language=\"python\">try_compile(RESULT_VAR &lt;bindir&gt; &lt;srcfile|SOURCES srcfile...&gt;\n            [CMAKE_FLAGS &lt;flags&gt;...]\n            [COMPILE_DEFINITIONS &lt;defs&gt;...]\n            [LINK_LIBRARIES &lt;libs&gt;...]\n            [OUTPUT_VARIABLE &lt;var&gt;]\n            [COPY_FILE &lt;fileName&gt; [COPY_FILE_ERROR &lt;var&gt;]])\n</pre> <p>Try building an executable from one or more source files. The success or failure of the <code>try_compile</code>, i.e. <code>TRUE</code> or <code>FALSE</code> respectively, is returned in <code>RESULT_VAR</code>.</p> <p>In this form the user need only supply one or more source files that include a definition for <code>main</code>. CMake will create a <code>CMakeLists.txt</code> file to build the source(s) as an executable that looks something like this:</p> <pre data-language=\"python\">add_definitions(&lt;expanded COMPILE_DEFINITIONS from caller&gt;)\ninclude_directories(${INCLUDE_DIRECTORIES})\nlink_directories(${LINK_DIRECTORIES})\nadd_executable(cmTryCompileExec &lt;srcfile&gt;...)\ntarget_link_libraries(cmTryCompileExec ${LINK_LIBRARIES})\n</pre> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>CMAKE_FLAGS &lt;flags&gt;...</code></dt> <dd>Specify flags of the form <code>-DVAR:TYPE=VALUE</code> to be passed to the <code>cmake</code> command-line used to drive the test build. The above example shows how values for variables <code>INCLUDE_DIRECTORIES</code>, <code>LINK_DIRECTORIES</code>, and <code>LINK_LIBRARIES</code> are used.</dd> <dt><code>COMPILE_DEFINITIONS &lt;defs&gt;...</code></dt> <dd>Specify <code>-Ddefinition</code> arguments to pass to <code>add_definitions</code> in the generated test project.</dd> <dt><code>COPY_FILE &lt;fileName&gt;</code></dt> <dd>Copy the linked executable to the given <code>&lt;fileName&gt;</code>.</dd> <dt><code>COPY_FILE_ERROR &lt;var&gt;</code></dt> <dd>Use after <code>COPY_FILE</code> to capture into variable <code>&lt;var&gt;</code> any error message encountered while trying to copy the file.</dd> <dt><code>LINK_LIBRARIES &lt;libs&gt;...</code></dt> <dd>\n<p class=\"first\">Specify libraries to be linked in the generated project. The list of libraries may refer to system libraries and to <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>Imported Targets</span></a> from the calling project.</p> <p class=\"last\">If this option is specified, any <code>-DLINK_LIBRARIES=...</code> value given to the <code>CMAKE_FLAGS</code> option will be ignored.</p> </dd> <dt><code>OUTPUT_VARIABLE &lt;var&gt;</code></dt> <dd>Store the output from the build process the given variable.</dd> </dl> <p>In this version all files in <code>&lt;bindir&gt;/CMakeFiles/CMakeTmp</code> will be cleaned automatically. For debugging, <code>--debug-trycompile</code> can be passed to <code>cmake</code> to avoid this clean. However, multiple sequential <code>try_compile</code> operations reuse this single output directory. If you use <code>--debug-trycompile</code>, you can only debug one <code>try_compile</code> call at a time. The recommended procedure is to protect all <code>try_compile</code> calls in your project by <code>if(NOT DEFINED RESULT_VAR)</code> logic, configure with cmake all the way through once, then delete the cache entry associated with the try_compile call of interest, and then re-run cmake again with <code>--debug-trycompile</code>.</p>   <h2 id=\"other-behavior-settings\">Other Behavior Settings</h2> <p>If set, the following variables are passed in to the generated try_compile CMakeLists.txt to initialize compile target properties with default values:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"../variable/cmake_enable_exports#variable:CMAKE_ENABLE_EXPORTS\" title=\"CMAKE_ENABLE_EXPORTS\" id=\"index-0-variable:CMAKE_ENABLE_EXPORTS\"><code>CMAKE_ENABLE_EXPORTS</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_link_search_start_static#variable:CMAKE_LINK_SEARCH_START_STATIC\" title=\"CMAKE_LINK_SEARCH_START_STATIC\" id=\"index-0-variable:CMAKE_LINK_SEARCH_START_STATIC\"><code>CMAKE_LINK_SEARCH_START_STATIC</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_link_search_end_static#variable:CMAKE_LINK_SEARCH_END_STATIC\" title=\"CMAKE_LINK_SEARCH_END_STATIC\" id=\"index-0-variable:CMAKE_LINK_SEARCH_END_STATIC\"><code>CMAKE_LINK_SEARCH_END_STATIC</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_position_independent_code#variable:CMAKE_POSITION_INDEPENDENT_CODE\" title=\"CMAKE_POSITION_INDEPENDENT_CODE\" id=\"index-0-variable:CMAKE_POSITION_INDEPENDENT_CODE\"><code>CMAKE_POSITION_INDEPENDENT_CODE</code></a></li> </ul> <p>If <a class=\"reference internal\" href=\"../policy/cmp0056#policy:CMP0056\" title=\"CMP0056\" id=\"index-0-policy:CMP0056\"><code>CMP0056</code></a> is set to <code>NEW</code>, then <a class=\"reference internal\" href=\"../variable/cmake_exe_linker_flags#variable:CMAKE_EXE_LINKER_FLAGS\" title=\"CMAKE_EXE_LINKER_FLAGS\" id=\"index-0-variable:CMAKE_EXE_LINKER_FLAGS\"><code>CMAKE_EXE_LINKER_FLAGS</code></a> is passed in as well.</p> <p>The current setting of <a class=\"reference internal\" href=\"../policy/cmp0065#policy:CMP0065\" title=\"CMP0065\" id=\"index-0-policy:CMP0065\"><code>CMP0065</code></a> is set in the generated project.</p> <p>Set the <a class=\"reference internal\" href=\"../variable/cmake_try_compile_configuration#variable:CMAKE_TRY_COMPILE_CONFIGURATION\" title=\"CMAKE_TRY_COMPILE_CONFIGURATION\" id=\"index-0-variable:CMAKE_TRY_COMPILE_CONFIGURATION\"><code>CMAKE_TRY_COMPILE_CONFIGURATION</code></a> variable to choose a build configuration.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/try_compile.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/try_compile.html</a>\n  </p>\n</div>\n","variable/cmake_system_processor":"<h1 id=\"variable:CMAKE_SYSTEM_PROCESSOR\">CMAKE_SYSTEM_PROCESSOR</h1> <p id=\"cmake-system-processor\">The name of the CPU CMake is building for.</p> <p>This variable is the same as <a class=\"reference internal\" href=\"cmake_host_system_processor#variable:CMAKE_HOST_SYSTEM_PROCESSOR\" title=\"CMAKE_HOST_SYSTEM_PROCESSOR\" id=\"index-0-variable:CMAKE_HOST_SYSTEM_PROCESSOR\"><code>CMAKE_HOST_SYSTEM_PROCESSOR</code></a> if you build for the host system instead of the target system when cross compiling.</p> <ul class=\"simple\"> <li>The <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Green%20Hills%20MULTI.html#generator:Green%20Hills%20MULTI\" title=\"Green Hills MULTI\" id=\"index-0-generator:Green Hills MULTI\"><code>Green Hills MULTI</code></a> generator sets this to <code>ARM</code> by default.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_PROCESSOR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_PROCESSOR.html</a>\n  </p>\n</div>\n","variable/cmake_sysroot":"<h1 id=\"variable:CMAKE_SYSROOT\">CMAKE_SYSROOT</h1> <p id=\"cmake-sysroot\">Path to pass to the compiler in the <code>--sysroot</code> flag.</p> <p>The <code>CMAKE_SYSROOT</code> content is passed to the compiler in the <code>--sysroot</code> flag, if supported. The path is also stripped from the RPATH/RUNPATH if necessary on installation. The <code>CMAKE_SYSROOT</code> is also used to prefix paths searched by the <code>find_*</code> commands.</p> <p>This variable may only be set in a toolchain file specified by the <a class=\"reference internal\" href=\"cmake_toolchain_file#variable:CMAKE_TOOLCHAIN_FILE\" title=\"CMAKE_TOOLCHAIN_FILE\" id=\"index-0-variable:CMAKE_TOOLCHAIN_FILE\"><code>CMAKE_TOOLCHAIN_FILE</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSROOT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSROOT.html</a>\n  </p>\n</div>\n","variable/cmake_staging_prefix":"<h1 id=\"variable:CMAKE_STAGING_PREFIX\">CMAKE_STAGING_PREFIX</h1> <p id=\"cmake-staging-prefix\">This variable may be set to a path to install to when cross-compiling. This can be useful if the path in <a class=\"reference internal\" href=\"cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-0-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> is read-only, or otherwise should remain pristine.</p> <p>The <code>CMAKE_STAGING_PREFIX</code> location is also used as a search prefix by the <code>find_*</code> commands. This can be controlled by setting the <a class=\"reference internal\" href=\"cmake_find_no_install_prefix#variable:CMAKE_FIND_NO_INSTALL_PREFIX\" title=\"CMAKE_FIND_NO_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_FIND_NO_INSTALL_PREFIX\"><code>CMAKE_FIND_NO_INSTALL_PREFIX</code></a> variable.</p> <p>If any RPATH/RUNPATH entries passed to the linker contain the <code>CMAKE_STAGING_PREFIX</code>, the matching path fragments are replaced with the <a class=\"reference internal\" href=\"cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_STAGING_PREFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_STAGING_PREFIX.html</a>\n  </p>\n</div>\n","variable/cmake_install_prefix":"<h1 id=\"variable:CMAKE_INSTALL_PREFIX\">CMAKE_INSTALL_PREFIX</h1> <p id=\"cmake-install-prefix\">Install directory used by <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install()</code></a>.</p> <p>If <code>make install</code> is invoked or <code>INSTALL</code> is built, this directory is prepended onto all install directories. This variable defaults to <code>/usr/local</code> on UNIX and <code>c:/Program Files</code> on Windows.</p> <p>On UNIX one can use the <code>DESTDIR</code> mechanism in order to relocate the whole installation. <code>DESTDIR</code> means DESTination DIRectory. It is commonly used by makefile users in order to install software at non-default location. It is usually invoked like this:</p> <pre data-language=\"python\">make DESTDIR=/home/john install\n</pre> <p>which will install the concerned software using the installation prefix, e.g. <code>/usr/local</code> prepended with the <code>DESTDIR</code> value which finally gives <code>/home/john/usr/local</code>.</p> <p>WARNING: <code>DESTDIR</code> may not be used on Windows because installation prefix usually contains a drive letter like in <code>C:/Program Files</code> which cannot be prepended with some other prefix.</p> <p>The installation prefix is also added to <a class=\"reference internal\" href=\"cmake_system_prefix_path#variable:CMAKE_SYSTEM_PREFIX_PATH\" title=\"CMAKE_SYSTEM_PREFIX_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_PREFIX_PATH\"><code>CMAKE_SYSTEM_PREFIX_PATH</code></a> so that <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a>, <a class=\"reference internal\" href=\"../command/find_program#command:find_program\" title=\"find_program\" id=\"index-0-command:find_program\"><code>find_program()</code></a>, <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a>, <a class=\"reference internal\" href=\"../command/find_path#command:find_path\" title=\"find_path\" id=\"index-0-command:find_path\"><code>find_path()</code></a>, and <a class=\"reference internal\" href=\"../command/find_file#command:find_file\" title=\"find_file\" id=\"index-0-command:find_file\"><code>find_file()</code></a> will search the prefix for other software.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Use the <a class=\"reference internal\" href=\"../module/gnuinstalldirs#module:GNUInstallDirs\" title=\"GNUInstallDirs\" id=\"index-0-module:GNUInstallDirs\"><code>GNUInstallDirs</code></a> module to provide GNU-style options for the layout of directories within the installation.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_INSTALL_PREFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_INSTALL_PREFIX.html</a>\n  </p>\n</div>\n","variable/cmake_find_root_path":"<h1 id=\"variable:CMAKE_FIND_ROOT_PATH\">CMAKE_FIND_ROOT_PATH</h1> <p id=\"cmake-find-root-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of root paths to search on the filesystem.</p> <p>This variable is most useful when cross-compiling. CMake uses the paths in this list as alternative roots to find filesystem items with <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a>, <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a> etc.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_ROOT_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_ROOT_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_generator_platform":"<h1 id=\"variable:CMAKE_GENERATOR_PLATFORM\">CMAKE_GENERATOR_PLATFORM</h1> <p id=\"cmake-generator-platform\">Generator-specific target platform name specified by user.</p> <p>Some CMake generators support a target platform name to be given to the native build system to choose a compiler toolchain. If the user specifies a platform name (e.g. via the <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> <code>-A</code> option) the value will be available in this variable.</p> <p>The value of this variable should never be modified by project code. A toolchain file specified by the <a class=\"reference internal\" href=\"cmake_toolchain_file#variable:CMAKE_TOOLCHAIN_FILE\" title=\"CMAKE_TOOLCHAIN_FILE\" id=\"index-0-variable:CMAKE_TOOLCHAIN_FILE\"><code>CMAKE_TOOLCHAIN_FILE</code></a> variable may initialize <code>CMAKE_GENERATOR_PLATFORM</code>. Once a given build tree has been initialized with a particular value for this variable, changing the value has undefined behavior.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_GENERATOR_PLATFORM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_GENERATOR_PLATFORM.html</a>\n  </p>\n</div>\n","variable/cmake_system_version":"<h1 id=\"variable:CMAKE_SYSTEM_VERSION\">CMAKE_SYSTEM_VERSION</h1> <p id=\"cmake-system-version\">The version of the operating system for which CMake is to build. See the <a class=\"reference internal\" href=\"cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-0-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a> variable for the OS name.</p>  <h2 id=\"system-version-for-host-builds\">System Version for Host Builds</h2> <p>When the <a class=\"reference internal\" href=\"cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-1-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a> variable takes its default value then <code>CMAKE_SYSTEM_VERSION</code> is by default set to the same value as the <a class=\"reference internal\" href=\"cmake_host_system_version#variable:CMAKE_HOST_SYSTEM_VERSION\" title=\"CMAKE_HOST_SYSTEM_VERSION\" id=\"index-0-variable:CMAKE_HOST_SYSTEM_VERSION\"><code>CMAKE_HOST_SYSTEM_VERSION</code></a> variable so that the build targets the host system version.</p> <p>In the case of a host build then <code>CMAKE_SYSTEM_VERSION</code> may be set explicitly when first configuring a new build tree in order to enable targeting the build for a different version of the host operating system than is actually running on the host. This is allowed and not considered cross compiling so long as the binaries built for the specified OS version can still run on the host.</p>   <h2 id=\"system-version-for-cross-compiling\">System Version for Cross Compiling</h2> <p>When the <a class=\"reference internal\" href=\"cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-2-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a> variable is set explicitly to enable <a class=\"reference internal\" href=\"../manual/cmake-toolchains.7#cross-compiling-toolchain\"><span>cross compiling</span></a> then the value of <code>CMAKE_SYSTEM_VERSION</code> must also be set explicitly to specify the target system version.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_c_compile_features":"<h1 id=\"variable:CMAKE_C_COMPILE_FEATURES\">CMAKE_C_COMPILE_FEATURES</h1> <p id=\"cmake-c-compile-features\">List of features known to the C compiler</p> <p>These features are known to be available for use with the C compiler. This list is a subset of the features listed in the <a class=\"reference internal\" href=\"../prop_gbl/cmake_c_known_features#prop_gbl:CMAKE_C_KNOWN_FEATURES\" title=\"CMAKE_C_KNOWN_FEATURES\" id=\"index-0-prop_gbl:CMAKE_C_KNOWN_FEATURES\"><code>CMAKE_C_KNOWN_FEATURES</code></a> global property.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_C_COMPILE_FEATURES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_C_COMPILE_FEATURES.html</a>\n  </p>\n</div>\n","variable/cmake_cxx_compile_features":"<h1 id=\"variable:CMAKE_CXX_COMPILE_FEATURES\">CMAKE_CXX_COMPILE_FEATURES</h1> <p id=\"cmake-cxx-compile-features\">List of features known to the C++ compiler</p> <p>These features are known to be available for use with the C++ compiler. This list is a subset of the features listed in the <a class=\"reference internal\" href=\"../prop_gbl/cmake_cxx_known_features#prop_gbl:CMAKE_CXX_KNOWN_FEATURES\" title=\"CMAKE_CXX_KNOWN_FEATURES\" id=\"index-0-prop_gbl:CMAKE_CXX_KNOWN_FEATURES\"><code>CMAKE_CXX_KNOWN_FEATURES</code></a> global property.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CXX_COMPILE_FEATURES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CXX_COMPILE_FEATURES.html</a>\n  </p>\n</div>\n","command/set_property":"<h1 id=\"command:set_property\">set_property</h1> <p id=\"set-property\">Set a named property in a given scope.</p> <pre data-language=\"python\">set_property(&lt;GLOBAL                            |\n              DIRECTORY [dir]                   |\n              TARGET    [target1 [target2 ...]] |\n              SOURCE    [src1 [src2 ...]]       |\n              INSTALL   [file1 [file2 ...]]     |\n              TEST      [test1 [test2 ...]]     |\n              CACHE     [entry1 [entry2 ...]]&gt;\n             [APPEND] [APPEND_STRING]\n             PROPERTY &lt;name&gt; [value1 [value2 ...]])\n</pre> <p>Set one property on zero or more objects of a scope. The first argument determines the scope in which the property is set. It must be one of the following:</p> <dl class=\"docutils\"> <dt><code>GLOBAL</code></dt> <dd>Scope is unique and does not accept a name.</dd> <dt><code>DIRECTORY</code></dt> <dd>Scope defaults to the current directory but another directory (already processed by CMake) may be named by full or relative path.</dd> <dt><code>TARGET</code></dt> <dd>Scope may name zero or more existing targets.</dd> <dt><code>SOURCE</code></dt> <dd>Scope may name zero or more source files. Note that source file properties are visible only to targets added in the same directory (CMakeLists.txt).</dd> <dt><code>INSTALL</code></dt> <dd>\n<p class=\"first\">Scope may name zero or more installed file paths. These are made available to CPack to influence deployment.</p> <p>Both the property key and value may use generator expressions. Specific properties may apply to installed files and/or directories.</p> <p>Path components have to be separated by forward slashes, must be normalized and are case sensitive.</p> <p>To reference the installation prefix itself with a relative path use ”.”.</p> <p class=\"last\">Currently installed file properties are only defined for the WIX generator where the given paths are relative to the installation prefix.</p> </dd> <dt><code>TEST</code></dt> <dd>Scope may name zero or more existing tests.</dd> <dt><code>CACHE</code></dt> <dd>Scope must name zero or more cache existing entries.</dd> </dl> <p>The required <code>PROPERTY</code> option is immediately followed by the name of the property to set. Remaining arguments are used to compose the property value in the form of a semicolon-separated list. If the <code>APPEND</code> option is given the list is appended to any existing property value. If the <code>APPEND_STRING</code> option is given the string is append to any existing property value as string, i.e. it results in a longer string and not a list of strings.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-0-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual for a list of properties in each scope.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/set_property.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/set_property.html</a>\n  </p>\n</div>\n","variable/cmake_generator_toolset":"<h1 id=\"variable:CMAKE_GENERATOR_TOOLSET\">CMAKE_GENERATOR_TOOLSET</h1> <p id=\"cmake-generator-toolset\">Native build system toolset name specified by user.</p> <p>Some CMake generators support a toolset name to be given to the native build system to choose a compiler. If the user specifies a toolset name (e.g. via the <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> <code>-T</code> option) the value will be available in this variable.</p> <p>The value of this variable should never be modified by project code. A toolchain file specified by the <a class=\"reference internal\" href=\"cmake_toolchain_file#variable:CMAKE_TOOLCHAIN_FILE\" title=\"CMAKE_TOOLCHAIN_FILE\" id=\"index-0-variable:CMAKE_TOOLCHAIN_FILE\"><code>CMAKE_TOOLCHAIN_FILE</code></a> variable may initialize <code>CMAKE_GENERATOR_TOOLSET</code>. Once a given build tree has been initialized with a particular value for this variable, changing the value has undefined behavior.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_GENERATOR_TOOLSET.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_GENERATOR_TOOLSET.html</a>\n  </p>\n</div>\n","command/list":"<h1 id=\"command:list\">list</h1> <p id=\"list\">List operations.</p> <pre data-language=\"python\">list(LENGTH &lt;list&gt; &lt;output variable&gt;)\nlist(GET &lt;list&gt; &lt;element index&gt; [&lt;element index&gt; ...]\n     &lt;output variable&gt;)\nlist(APPEND &lt;list&gt; [&lt;element&gt; ...])\nlist(FIND &lt;list&gt; &lt;value&gt; &lt;output variable&gt;)\nlist(INSERT &lt;list&gt; &lt;element_index&gt; &lt;element&gt; [&lt;element&gt; ...])\nlist(REMOVE_ITEM &lt;list&gt; &lt;value&gt; [&lt;value&gt; ...])\nlist(REMOVE_AT &lt;list&gt; &lt;index&gt; [&lt;index&gt; ...])\nlist(REMOVE_DUPLICATES &lt;list&gt;)\nlist(REVERSE &lt;list&gt;)\nlist(SORT &lt;list&gt;)\n</pre> <p><code>LENGTH</code> will return a given list’s length.</p> <p><code>GET</code> will return list of elements specified by indices from the list.</p> <p><code>APPEND</code> will append elements to the list.</p> <p><code>FIND</code> will return the index of the element specified in the list or -1 if it wasn’t found.</p> <p><code>INSERT</code> will insert elements to the list to the specified location.</p> <p><code>REMOVE_AT</code> and <code>REMOVE_ITEM</code> will remove items from the list. The difference is that <code>REMOVE_ITEM</code> will remove the given items, while <code>REMOVE_AT</code> will remove the items at the given indices.</p> <p><code>REMOVE_DUPLICATES</code> will remove duplicated items in the list.</p> <p><code>REVERSE</code> reverses the contents of the list in-place.</p> <p><code>SORT</code> sorts the list in-place alphabetically.</p> <p>The list subcommands <code>APPEND</code>, <code>INSERT</code>, <code>REMOVE_AT</code>, <code>REMOVE_ITEM</code>, <code>REMOVE_DUPLICATES</code>, <code>REVERSE</code> and <code>SORT</code> may create new values for the list within the current CMake variable scope. Similar to the <a class=\"reference internal\" href=\"set#command:set\" title=\"set\" id=\"index-0-command:set\"><code>set()</code></a> command, the LIST command creates new variable values in the current scope, even if the list itself is actually defined in a parent scope. To propagate the results of these operations upwards, use <a class=\"reference internal\" href=\"set#command:set\" title=\"set\" id=\"index-1-command:set\"><code>set()</code></a> with <code>PARENT_SCOPE</code>, <a class=\"reference internal\" href=\"set#command:set\" title=\"set\" id=\"index-2-command:set\"><code>set()</code></a> with <code>CACHE INTERNAL</code>, or some other means of value propagation.</p> <p>NOTES: A list in cmake is a <code>;</code> separated group of strings. To create a list the set command can be used. For example, <code>set(var a b c d e)</code> creates a list with <code>a;b;c;d;e</code>, and <code>set(var \"a b c d e\")</code> creates a string or a list with one item in it. (Note macro arguments are not variables, and therefore cannot be used in LIST commands.)</p> <p>When specifying index values, if <code>&lt;element index&gt;</code> is 0 or greater, it is indexed from the beginning of the list, with 0 representing the first list element. If <code>&lt;element index&gt;</code> is -1 or lesser, it is indexed from the end of the list, with -1 representing the last list element. Be careful when counting with negative indices: they do not start from 0. -0 is equivalent to 0, the first list element.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/list.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/list.html</a>\n  </p>\n</div>\n","variable/cmake_version":"<h1 id=\"variable:CMAKE_VERSION\">CMAKE_VERSION</h1> <p id=\"cmake-version\">The CMake version string as three non-negative integer components separated by <code>.</code> and possibly followed by <code>-</code> and other information. The first two components represent the feature level and the third component represents either a bug-fix level or development date.</p> <p>Release versions and release candidate versions of CMake use the format:</p> <pre data-language=\"python\">&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;[-rc&lt;n&gt;]\n</pre> <p>where the <code>&lt;patch&gt;</code> component is less than <code>20000000</code>. Development versions of CMake use the format:</p> <pre data-language=\"python\">&lt;major&gt;.&lt;minor&gt;.&lt;date&gt;[-&lt;id&gt;]\n</pre> <p>where the <code>&lt;date&gt;</code> component is of format <code>CCYYMMDD</code> and <code>&lt;id&gt;</code> may contain arbitrary text. This represents development as of a particular date following the <code>&lt;major&gt;.&lt;minor&gt;</code> feature release.</p> <p>Individual component values are also available in variables:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"cmake_major_version#variable:CMAKE_MAJOR_VERSION\" title=\"CMAKE_MAJOR_VERSION\" id=\"index-0-variable:CMAKE_MAJOR_VERSION\"><code>CMAKE_MAJOR_VERSION</code></a></li> <li><a class=\"reference internal\" href=\"cmake_minor_version#variable:CMAKE_MINOR_VERSION\" title=\"CMAKE_MINOR_VERSION\" id=\"index-0-variable:CMAKE_MINOR_VERSION\"><code>CMAKE_MINOR_VERSION</code></a></li> <li><a class=\"reference internal\" href=\"cmake_patch_version#variable:CMAKE_PATCH_VERSION\" title=\"CMAKE_PATCH_VERSION\" id=\"index-0-variable:CMAKE_PATCH_VERSION\"><code>CMAKE_PATCH_VERSION</code></a></li> <li><a class=\"reference internal\" href=\"cmake_tweak_version#variable:CMAKE_TWEAK_VERSION\" title=\"CMAKE_TWEAK_VERSION\" id=\"index-0-variable:CMAKE_TWEAK_VERSION\"><code>CMAKE_TWEAK_VERSION</code></a></li> </ul> <p>Use the <a class=\"reference internal\" href=\"../command/if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> command <code>VERSION_LESS</code>, <code>VERSION_EQUAL</code>, or <code>VERSION_GREATER</code> operators to compare version string values against <code>CMAKE_VERSION</code> using a component-wise test. Version component values may be 10 or larger so do not attempt to compare version strings as floating-point numbers.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>CMake versions 2.8.2 through 2.8.12 used three components for the feature level. Release versions represented the bug-fix level in a fourth component, i.e. <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;[.&lt;tweak&gt;][-rc&lt;n&gt;]</code>. Development versions represented the development date in the fourth component, i.e. <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;.&lt;date&gt;[-&lt;id&gt;]</code>.</p> <p>CMake versions prior to 2.8.2 used three components for the feature level and had no bug-fix component. Release versions used an even-valued second component, i.e. <code>&lt;major&gt;.&lt;even-minor&gt;.&lt;patch&gt;[-rc&lt;n&gt;]</code>. Development versions used an odd-valued second component with the development date as the third component, i.e. <code>&lt;major&gt;.&lt;odd-minor&gt;.&lt;date&gt;</code>.</p> <p class=\"last\">The <code>CMAKE_VERSION</code> variable is defined by CMake 2.6.3 and higher. Earlier versions defined only the individual component variables.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_VERSION.html</a>\n  </p>\n</div>\n","command/add_subdirectory":"<h1 id=\"command:add_subdirectory\">add_subdirectory</h1> <p id=\"add-subdirectory\">Add a subdirectory to the build.</p> <pre data-language=\"python\">add_subdirectory(source_dir [binary_dir]\n                 [EXCLUDE_FROM_ALL])\n</pre> <p>Add a subdirectory to the build. The source_dir specifies the directory in which the source CMakeLists.txt and code files are located. If it is a relative path it will be evaluated with respect to the current directory (the typical usage), but it may also be an absolute path. The <code>binary_dir</code> specifies the directory in which to place the output files. If it is a relative path it will be evaluated with respect to the current output directory, but it may also be an absolute path. If <code>binary_dir</code> is not specified, the value of <code>source_dir</code>, before expanding any relative path, will be used (the typical usage). The CMakeLists.txt file in the specified source directory will be processed immediately by CMake before processing in the current input file continues beyond this command.</p> <p>If the <code>EXCLUDE_FROM_ALL</code> argument is provided then targets in the subdirectory will not be included in the <code>ALL</code> target of the parent directory by default, and will be excluded from IDE project files. Users must explicitly build targets in the subdirectory. This is meant for use when the subdirectory contains a separate part of the project that is useful but not necessary, such as a set of examples. Typically the subdirectory should contain its own <a class=\"reference internal\" href=\"project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command invocation so that a full build system will be generated in the subdirectory (such as a VS IDE solution file). Note that inter-target dependencies supercede this exclusion. If a target built by the parent project depends on a target in the subdirectory, the dependee target will be included in the parent project build system to satisfy the dependency.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/add_subdirectory.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/add_subdirectory.html</a>\n  </p>\n</div>\n","variable/cmake_module_path":"<h1 id=\"variable:CMAKE_MODULE_PATH\">CMAKE_MODULE_PATH</h1> <p id=\"cmake-module-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories specifying a search path for CMake modules to be loaded by the the <a class=\"reference internal\" href=\"../command/include#command:include\" title=\"include\" id=\"index-0-command:include\"><code>include()</code></a> or <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> commands before checking the default modules that come with CMake. By default it is empty, it is intended to be set by the project.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_MODULE_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_MODULE_PATH.html</a>\n  </p>\n</div>\n","command/find_library":"<h1 id=\"command:find_library\">find_library</h1> <p id=\"find-library\">A short-hand signature is:</p> <pre class=\"literal-block\">\nfind_library (&lt;VAR&gt; name1 [path1 path2 ...])\n</pre> <p>The general signature is:</p> <pre class=\"literal-block\">\nfind_library (\n          &lt;VAR&gt;\n          name | NAMES name1 [name2 ...] [NAMES_PER_DIR]\n          [HINTS path1 [path2 ... ENV var]]\n          [PATHS path1 [path2 ... ENV var]]\n          [PATH_SUFFIXES suffix1 [suffix2 ...]]\n          [DOC \"cache documentation string\"]\n          [NO_DEFAULT_PATH]\n          [NO_CMAKE_ENVIRONMENT_PATH]\n          [NO_CMAKE_PATH]\n          [NO_SYSTEM_ENVIRONMENT_PATH]\n          [NO_CMAKE_SYSTEM_PATH]\n          [CMAKE_FIND_ROOT_PATH_BOTH |\n           ONLY_CMAKE_FIND_ROOT_PATH |\n           NO_CMAKE_FIND_ROOT_PATH]\n         )\n</pre> <p>This command is used to find a library. A cache entry named by <code>&lt;VAR&gt;</code> is created to store the result of this command. If the library is found the result is stored in the variable and the search will not be repeated unless the variable is cleared. If nothing is found, the result will be <code>&lt;VAR&gt;-NOTFOUND</code>, and the search will be attempted again the next time find_library is invoked with the same variable.</p> <p>Options include:</p> <dl class=\"docutils\"> <dt><code>NAMES</code></dt> <dd>\n<p class=\"first\">Specify one or more possible names for the library.</p> <p class=\"last\">When using this to specify names with and without a version suffix, we recommend specifying the unversioned name first so that locally-built packages can be found before those provided by distributions.</p> </dd> <dt>\n<code>HINTS</code>, <code>PATHS</code>\n</dt> <dd>Specify directories to search in addition to the default locations. The <code>ENV var</code> sub-option reads paths from a system environment variable.</dd> <dt><code>PATH_SUFFIXES</code></dt> <dd>Specify additional subdirectories to check below each directory location otherwise considered.</dd> <dt><code>DOC</code></dt> <dd>Specify the documentation string for the <code>&lt;VAR&gt;</code> cache entry.</dd> </dl> <p>If <code>NO_DEFAULT_PATH</code> is specified, then no additional paths are added to the search. If <code>NO_DEFAULT_PATH</code> is not specified, the search process is as follows:</p> <ol class=\"arabic simple\"> <li>Search paths specified in cmake-specific cache variables. These are intended to be used on the command line with a <code>-DVAR=value</code>. This can be skipped if <code>NO_CMAKE_PATH</code> is passed.<ul> <li>\n<code>&lt;prefix&gt;/lib/&lt;arch&gt;</code> if <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-3-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> is set, and <code>&lt;prefix&gt;/lib</code> for each <code>&lt;prefix&gt;</code> in <a class=\"reference internal\" href=\"../variable/cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-2-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>\n</li> <li><a class=\"reference internal\" href=\"../variable/cmake_library_path#variable:CMAKE_LIBRARY_PATH\" title=\"CMAKE_LIBRARY_PATH\" id=\"index-1-variable:CMAKE_LIBRARY_PATH\"><code>CMAKE_LIBRARY_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_framework_path#variable:CMAKE_FRAMEWORK_PATH\" title=\"CMAKE_FRAMEWORK_PATH\" id=\"index-1-variable:CMAKE_FRAMEWORK_PATH\"><code>CMAKE_FRAMEWORK_PATH</code></a></li> </ul> </li> <li>Search paths specified in cmake-specific environment variables. These are intended to be set in the user’s shell configuration. This can be skipped if <code>NO_CMAKE_ENVIRONMENT_PATH</code> is passed.<ul> <li>\n<code>&lt;prefix&gt;/lib/&lt;arch&gt;</code> if <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-4-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> is set, and <code>&lt;prefix&gt;/lib</code> for each <code>&lt;prefix&gt;</code> in <a class=\"reference internal\" href=\"../variable/cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-3-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>\n</li> <li><a class=\"reference internal\" href=\"../variable/cmake_library_path#variable:CMAKE_LIBRARY_PATH\" title=\"CMAKE_LIBRARY_PATH\" id=\"index-2-variable:CMAKE_LIBRARY_PATH\"><code>CMAKE_LIBRARY_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_framework_path#variable:CMAKE_FRAMEWORK_PATH\" title=\"CMAKE_FRAMEWORK_PATH\" id=\"index-2-variable:CMAKE_FRAMEWORK_PATH\"><code>CMAKE_FRAMEWORK_PATH</code></a></li> </ul> </li> <li>Search the paths specified by the <code>HINTS</code> option. These should be paths computed by system introspection, such as a hint provided by the location of another item already found. Hard-coded guesses should be specified with the <code>PATHS</code> option.</li> <li>Search the standard system environment variables. This can be skipped if <code>NO_SYSTEM_ENVIRONMENT_PATH</code> is an argument.<ul> <li>Directories in <code>LIB</code>, <code>&lt;prefix&gt;/lib/&lt;arch&gt;</code> if <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-5-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> is set, and <code>&lt;prefix&gt;/lib</code> for each <code>&lt;prefix&gt;/[s]bin</code> in <code>PATH</code>, and <code>&lt;entry&gt;/lib</code> for other entries in <code>PATH</code>, and the directories in <code>PATH</code> itself.</li> </ul> </li> <li>Search cmake variables defined in the Platform files for the current system. This can be skipped if <code>NO_CMAKE_SYSTEM_PATH</code> is passed.<ul> <li>\n<code>&lt;prefix&gt;/lib/&lt;arch&gt;</code> if <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-6-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> is set, and <code>&lt;prefix&gt;/lib</code> for each <code>&lt;prefix&gt;</code> in <a class=\"reference internal\" href=\"../variable/cmake_system_prefix_path#variable:CMAKE_SYSTEM_PREFIX_PATH\" title=\"CMAKE_SYSTEM_PREFIX_PATH\" id=\"index-2-variable:CMAKE_SYSTEM_PREFIX_PATH\"><code>CMAKE_SYSTEM_PREFIX_PATH</code></a>\n</li> <li><a class=\"reference internal\" href=\"../variable/cmake_system_library_path#variable:CMAKE_SYSTEM_LIBRARY_PATH\" title=\"CMAKE_SYSTEM_LIBRARY_PATH\" id=\"index-1-variable:CMAKE_SYSTEM_LIBRARY_PATH\"><code>CMAKE_SYSTEM_LIBRARY_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_system_framework_path#variable:CMAKE_SYSTEM_FRAMEWORK_PATH\" title=\"CMAKE_SYSTEM_FRAMEWORK_PATH\" id=\"index-1-variable:CMAKE_SYSTEM_FRAMEWORK_PATH\"><code>CMAKE_SYSTEM_FRAMEWORK_PATH</code></a></li> </ul> </li> <li>Search the paths specified by the PATHS option or in the short-hand version of the command. These are typically hard-coded guesses.</li> </ol> <p>On OS X the <a class=\"reference internal\" href=\"../variable/cmake_find_framework#variable:CMAKE_FIND_FRAMEWORK\" title=\"CMAKE_FIND_FRAMEWORK\" id=\"index-0-variable:CMAKE_FIND_FRAMEWORK\"><code>CMAKE_FIND_FRAMEWORK</code></a> and <a class=\"reference internal\" href=\"../variable/cmake_find_appbundle#variable:CMAKE_FIND_APPBUNDLE\" title=\"CMAKE_FIND_APPBUNDLE\" id=\"index-0-variable:CMAKE_FIND_APPBUNDLE\"><code>CMAKE_FIND_APPBUNDLE</code></a> variables determine the order of preference between Apple-style and unix-style package components.</p> <p>The CMake variable <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-0-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> specifies one or more directories to be prepended to all other search directories. This effectively “re-roots” the entire search under given locations. Paths which are descendants of the <a class=\"reference internal\" href=\"../variable/cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-0-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a> are excluded from this re-rooting, because that variable is always a path on the host system. By default the <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> is empty.</p> <p>The <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-0-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> variable can also be used to specify exactly one directory to use as a prefix. Setting <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-1-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> also has other effects. See the documentation for that variable for more.</p> <p>These variables are especially useful when cross-compiling to point to the root directory of the target environment and CMake will search there too. By default at first the directories listed in <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-2-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> are searched, then the <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-2-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> directory is searched, and then the non-rooted directories will be searched. The default behavior can be adjusted by setting <a class=\"reference internal\" href=\"../variable/cmake_find_root_path_mode_library#variable:CMAKE_FIND_ROOT_PATH_MODE_LIBRARY\" title=\"CMAKE_FIND_ROOT_PATH_MODE_LIBRARY\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH_MODE_LIBRARY\"><code>CMAKE_FIND_ROOT_PATH_MODE_LIBRARY</code></a>. This behavior can be manually overridden on a per-call basis using options:</p> <dl class=\"docutils\"> <dt><code>CMAKE_FIND_ROOT_PATH_BOTH</code></dt> <dd>Search in the order described above.</dd> <dt><code>NO_CMAKE_FIND_ROOT_PATH</code></dt> <dd>Do not use the <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-3-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> variable.</dd> <dt><code>ONLY_CMAKE_FIND_ROOT_PATH</code></dt> <dd>Search only the re-rooted directories and directories below <a class=\"reference internal\" href=\"../variable/cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-1-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a>.</dd> </dl> <p>The default search order is designed to be most-specific to least-specific for common use cases. Projects may override the order by simply calling the command multiple times and using the <code>NO_*</code> options:</p> <pre class=\"literal-block\">\nfind_library (&lt;VAR&gt; NAMES name PATHS paths... NO_DEFAULT_PATH)\nfind_library (&lt;VAR&gt; NAMES name)\n</pre> <p>Once one of the calls succeeds the result variable will be set and stored in the cache so that no call will search again.</p> <p>When more than one value is given to the <code>NAMES</code> option this command by default will consider one name at a time and search every directory for it. The <code>NAMES_PER_DIR</code> option tells this command to consider one directory at a time and search for all names in it.</p> <p>Each library name given to the <code>NAMES</code> option is first considered as a library file name and then considered with platform-specific prefixes (e.g. <code>lib</code>) and suffixes (e.g. <code>.so</code>). Therefore one may specify library file names such as <code>libfoo.a</code> directly. This can be used to locate static libraries on UNIX-like systems.</p> <p>If the library found is a framework, then <code>&lt;VAR&gt;</code> will be set to the full path to the framework <code>&lt;fullPath&gt;/A.framework</code>. When a full path to a framework is used as a library, CMake will use a <code>-framework A</code>, and a <code>-F&lt;fullPath&gt;</code> to link the framework to the target.</p> <p>If the <a class=\"reference internal\" href=\"../prop_gbl/find_library_use_lib64_paths#prop_gbl:FIND_LIBRARY_USE_LIB64_PATHS\" title=\"FIND_LIBRARY_USE_LIB64_PATHS\" id=\"index-0-prop_gbl:FIND_LIBRARY_USE_LIB64_PATHS\"><code>FIND_LIBRARY_USE_LIB64_PATHS</code></a> global property is set all search paths will be tested as normal, with <code>64/</code> appended, and with all matches of <code>lib/</code> replaced with <code>lib64/</code>. This property is automatically set for the platforms that are known to need it if at least one of the languages supported by the <a class=\"reference internal\" href=\"project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command is enabled.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/find_library.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/find_library.html</a>\n  </p>\n</div>\n","command/elseif":"<h1 id=\"command:elseif\">elseif</h1> <p id=\"elseif\">Starts the elseif portion of an if block.</p> <pre data-language=\"python\">elseif(expression)\n</pre> <p>See the <a class=\"reference internal\" href=\"if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/elseif.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/elseif.html</a>\n  </p>\n</div>\n","command/endif":"<h1 id=\"command:endif\">endif</h1> <p id=\"endif\">Ends a list of commands in an if block.</p> <pre data-language=\"python\">endif(expression)\n</pre> <p>See the <a class=\"reference internal\" href=\"if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/endif.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/endif.html</a>\n  </p>\n</div>\n","command/else":"<h1 id=\"command:else\">else</h1> <p id=\"else\">Starts the else portion of an if block.</p> <pre data-language=\"python\">else(expression)\n</pre> <p>See the <a class=\"reference internal\" href=\"if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/else.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/else.html</a>\n  </p>\n</div>\n","command/endforeach":"<h1 id=\"command:endforeach\">endforeach</h1> <p id=\"endforeach\">Ends a list of commands in a foreach block.</p> <pre data-language=\"python\">endforeach(expression)\n</pre> <p>See the <a class=\"reference internal\" href=\"foreach#command:foreach\" title=\"foreach\" id=\"index-0-command:foreach\"><code>foreach()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/endforeach.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/endforeach.html</a>\n  </p>\n</div>\n","command/foreach":"<h1 id=\"command:foreach\">foreach</h1> <p id=\"foreach\">Evaluate a group of commands for each value in a list.</p> <pre data-language=\"python\">foreach(loop_var arg1 arg2 ...)\n  COMMAND1(ARGS ...)\n  COMMAND2(ARGS ...)\n  ...\nendforeach(loop_var)\n</pre> <p>All commands between foreach and the matching endforeach are recorded without being invoked. Once the endforeach is evaluated, the recorded list of commands is invoked once for each argument listed in the original foreach command. Before each iteration of the loop <code>${loop_var}</code> will be set as a variable with the current value in the list.</p> <pre data-language=\"python\">foreach(loop_var RANGE total)\nforeach(loop_var RANGE start stop [step])\n</pre> <p>Foreach can also iterate over a generated range of numbers. There are three types of this iteration:</p> <ul class=\"simple\"> <li>When specifying single number, the range will have elements 0 to “total”.</li> <li>When specifying two numbers, the range will have elements from the first number to the second number.</li> <li>The third optional number is the increment used to iterate from the first number to the second number.</li> </ul> <pre data-language=\"python\">foreach(loop_var IN [LISTS [list1 [...]]]\n                    [ITEMS [item1 [...]]])\n</pre> <p>Iterates over a precise list of items. The <code>LISTS</code> option names list-valued variables to be traversed, including empty elements (an empty string is a zero-length list). (Note macro arguments are not variables.) The <code>ITEMS</code> option ends argument parsing and includes all arguments following it in the iteration.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/foreach.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/foreach.html</a>\n  </p>\n</div>\n","command/while":"<h1 id=\"command:while\">while</h1> <p id=\"while\">Evaluate a group of commands while a condition is true</p> <pre data-language=\"python\">while(condition)\n  COMMAND1(ARGS ...)\n  COMMAND2(ARGS ...)\n  ...\nendwhile(condition)\n</pre> <p>All commands between while and the matching <a class=\"reference internal\" href=\"endwhile#command:endwhile\" title=\"endwhile\" id=\"index-0-command:endwhile\"><code>endwhile()</code></a> are recorded without being invoked. Once the <a class=\"reference internal\" href=\"endwhile#command:endwhile\" title=\"endwhile\" id=\"index-1-command:endwhile\"><code>endwhile()</code></a> is evaluated, the recorded list of commands is invoked as long as the condition is true. The condition is evaluated using the same logic as the <a class=\"reference internal\" href=\"if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/while.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/while.html</a>\n  </p>\n</div>\n","command/endwhile":"<h1 id=\"command:endwhile\">endwhile</h1> <p id=\"endwhile\">Ends a list of commands in a while block.</p> <pre data-language=\"python\">endwhile(expression)\n</pre> <p>See the <a class=\"reference internal\" href=\"while#command:while\" title=\"while\" id=\"index-0-command:while\"><code>while()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/endwhile.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/endwhile.html</a>\n  </p>\n</div>\n","command/break":"<h1 id=\"command:break\">break</h1> <p id=\"break\">Break from an enclosing foreach or while loop.</p> <pre data-language=\"python\">break()\n</pre> <p>Breaks from an enclosing foreach loop or while loop</p> <p>See also the <a class=\"reference internal\" href=\"continue#command:continue\" title=\"continue\" id=\"index-0-command:continue\"><code>continue()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/break.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/break.html</a>\n  </p>\n</div>\n","command/continue":"<h1 id=\"command:continue\">continue</h1> <p id=\"continue\">Continue to the top of enclosing foreach or while loop.</p> <pre data-language=\"python\">continue()\n</pre> <p>The <code>continue</code> command allows a cmake script to abort the rest of a block in a <a class=\"reference internal\" href=\"foreach#command:foreach\" title=\"foreach\" id=\"index-0-command:foreach\"><code>foreach()</code></a> or <a class=\"reference internal\" href=\"while#command:while\" title=\"while\" id=\"index-0-command:while\"><code>while()</code></a> loop, and start at the top of the next iteration. See also the <a class=\"reference internal\" href=\"break#command:break\" title=\"break\" id=\"index-0-command:break\"><code>break()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/continue.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/continue.html</a>\n  </p>\n</div>\n","command/macro":"<h1 id=\"command:macro\">macro</h1> <p id=\"macro\">Start recording a macro for later invocation as a command:</p> <pre data-language=\"python\">macro(&lt;name&gt; [arg1 [arg2 [arg3 ...]]])\n  COMMAND1(ARGS ...)\n  COMMAND2(ARGS ...)\n  ...\nendmacro(&lt;name&gt;)\n</pre> <p>Define a macro named <code>&lt;name&gt;</code> that takes arguments named <code>arg1</code>, <code>arg2</code>, <code>arg3</code>, (...). Commands listed after macro, but before the matching <a class=\"reference internal\" href=\"endmacro#command:endmacro\" title=\"endmacro\" id=\"index-0-command:endmacro\"><code>endmacro()</code></a>, are not invoked until the macro is invoked. When it is invoked, the commands recorded in the macro are first modified by replacing formal parameters (<code>${arg1}</code>) with the arguments passed, and then invoked as normal commands. In addition to referencing the formal parameters you can reference the values <code>${ARGC}</code> which will be set to the number of arguments passed into the function as well as <code>${ARGV0}</code>, <code>${ARGV1}</code>, <code>${ARGV2}</code>, ... which will have the actual values of the arguments passed in. This facilitates creating macros with optional arguments. Additionally <code>${ARGV}</code> holds the list of all arguments given to the macro and <code>${ARGN}</code> holds the list of arguments past the last expected argument. Referencing to <code>${ARGV#}</code> arguments beyond <code>${ARGC}</code> have undefined behavior. Checking that <code>${ARGC}</code> is greater than <code>#</code> is the only way to ensure that <code>${ARGV#}</code> was passed to the function as an extra argument.</p> <p>See the <a class=\"reference internal\" href=\"cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command documentation for the behavior of policies inside macros.</p>  <h2 id=\"macro-argument-caveats\">Macro Argument Caveats</h2> <p>Note that the parameters to a macro and values such as <code>ARGN</code> are not variables in the usual CMake sense. They are string replacements much like the C preprocessor would do with a macro. Therefore you will NOT be able to use commands like:</p> <pre data-language=\"python\">if(ARGV1) # ARGV1 is not a variable\nif(DEFINED ARGV2) # ARGV2 is not a variable\nif(ARGC GREATER 2) # ARGC is not a variable\nforeach(loop_var IN LISTS ARGN) # ARGN is not a variable\n</pre> <p>In the first case, you can use <code>if(${ARGV1})</code>. In the second and third case, the proper way to check if an optional variable was passed to the macro is to use <code>if(${ARGC} GREATER 2)</code>. In the last case, you can use <code>foreach(loop_var ${ARGN})</code> but this will skip empty arguments. If you need to include them, you can use:</p> <pre data-language=\"python\">set(list_var \"${ARGN}\")\nforeach(loop_var IN LISTS list_var)\n</pre> <p>Note that if you have a variable with the same name in the scope from which the macro is called, using unreferenced names will use the existing variable instead of the arguments. For example:</p> <pre data-language=\"python\">macro(_BAR)\n  foreach(arg IN LISTS ARGN)\n    [...]\n  endforeach()\nendmacro()\n\nfunction(_FOO)\n  _bar(x y z)\nendfunction()\n\n_foo(a b c)\n</pre> <p>Will loop over <code>a;b;c</code> and not over <code>x;y;z</code> as one might be expecting. If you want true CMake variables and/or better CMake scope control you should look at the function command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/macro.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/macro.html</a>\n  </p>\n</div>\n","command/endmacro":"<h1 id=\"command:endmacro\">endmacro</h1> <p id=\"endmacro\">Ends a list of commands in a macro block.</p> <pre data-language=\"python\">endmacro(expression)\n</pre> <p>See the <a class=\"reference internal\" href=\"macro#command:macro\" title=\"macro\" id=\"index-0-command:macro\"><code>macro()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/endmacro.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/endmacro.html</a>\n  </p>\n</div>\n","command/function":"<h1 id=\"command:function\">function</h1> <p id=\"function\">Start recording a function for later invocation as a command:</p> <pre data-language=\"python\">function(&lt;name&gt; [arg1 [arg2 [arg3 ...]]])\n  COMMAND1(ARGS ...)\n  COMMAND2(ARGS ...)\n  ...\nendfunction(&lt;name&gt;)\n</pre> <p>Define a function named <code>&lt;name&gt;</code> that takes arguments named <code>arg1</code>, <code>arg2</code>, <code>arg3</code>, (...). Commands listed after function, but before the matching <a class=\"reference internal\" href=\"endfunction#command:endfunction\" title=\"endfunction\" id=\"index-0-command:endfunction\"><code>endfunction()</code></a>, are not invoked until the function is invoked. When it is invoked, the commands recorded in the function are first modified by replacing formal parameters (<code>${arg1}</code>) with the arguments passed, and then invoked as normal commands. In addition to referencing the formal parameters you can reference the <code>ARGC</code> variable which will be set to the number of arguments passed into the function as well as <code>ARGV0</code>, <code>ARGV1</code>, <code>ARGV2</code>, ... which will have the actual values of the arguments passed in. This facilitates creating functions with optional arguments. Additionally <code>ARGV</code> holds the list of all arguments given to the function and <code>ARGN</code> holds the list of arguments past the last expected argument. Referencing to <code>ARGV#</code> arguments beyond <code>ARGC</code> have undefined behavior. Checking that <code>ARGC</code> is greater than <code>#</code> is the only way to ensure that <code>ARGV#</code> was passed to the function as an extra argument.</p> <p>A function opens a new scope: see <a class=\"reference internal\" href=\"set#command:set\" title=\"set\" id=\"index-0-command:set\"><code>set(var PARENT_SCOPE)</code></a> for details.</p> <p>See the <a class=\"reference internal\" href=\"cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy()</code></a> command documentation for the behavior of policies inside functions.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/function.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/function.html</a>\n  </p>\n</div>\n","command/endfunction":"<h1 id=\"command:endfunction\">endfunction</h1> <p id=\"endfunction\">Ends a list of commands in a function block.</p> <pre data-language=\"python\">endfunction(expression)\n</pre> <p>See the <a class=\"reference internal\" href=\"function#command:function\" title=\"function\" id=\"index-0-command:function\"><code>function()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/endfunction.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/endfunction.html</a>\n  </p>\n</div>\n","command/unset":"<h1 id=\"command:unset\">unset</h1> <p id=\"unset\">Unset a variable, cache variable, or environment variable.</p> <pre data-language=\"python\">unset(&lt;variable&gt; [CACHE | PARENT_SCOPE])\n</pre> <p>Removes the specified variable causing it to become undefined. If <code>CACHE</code> is present then the variable is removed from the cache instead of the current scope.</p> <p>If <code>PARENT_SCOPE</code> is present then the variable is removed from the scope above the current scope. See the same option in the <a class=\"reference internal\" href=\"set#command:set\" title=\"set\" id=\"index-0-command:set\"><code>set()</code></a> command for further details.</p> <p><code>&lt;variable&gt;</code> can be an environment variable such as:</p> <pre data-language=\"python\">unset(ENV{LD_LIBRARY_PATH})\n</pre> <p>in which case the variable will be removed from the current environment.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/unset.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/unset.html</a>\n  </p>\n</div>\n","variable/cmake_prefix_path":"<h1 id=\"variable:CMAKE_PREFIX_PATH\">CMAKE_PREFIX_PATH</h1> <p id=\"cmake-prefix-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories specifying installation <em>prefixes</em> to be searched by the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a>, <a class=\"reference internal\" href=\"../command/find_program#command:find_program\" title=\"find_program\" id=\"index-0-command:find_program\"><code>find_program()</code></a>, <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a>, <a class=\"reference internal\" href=\"../command/find_file#command:find_file\" title=\"find_file\" id=\"index-0-command:find_file\"><code>find_file()</code></a>, and <a class=\"reference internal\" href=\"../command/find_path#command:find_path\" title=\"find_path\" id=\"index-0-command:find_path\"><code>find_path()</code></a> commands. Each command will add appropriate subdirectories (like <code>bin</code>, <code>lib</code>, or <code>include</code>) as specified in its own documentation.</p> <p>By default this is empty. It is intended to be set by the project.</p> <p>See also <a class=\"reference internal\" href=\"cmake_system_prefix_path#variable:CMAKE_SYSTEM_PREFIX_PATH\" title=\"CMAKE_SYSTEM_PREFIX_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_PREFIX_PATH\"><code>CMAKE_SYSTEM_PREFIX_PATH</code></a>, <a class=\"reference internal\" href=\"cmake_include_path#variable:CMAKE_INCLUDE_PATH\" title=\"CMAKE_INCLUDE_PATH\" id=\"index-0-variable:CMAKE_INCLUDE_PATH\"><code>CMAKE_INCLUDE_PATH</code></a>, <a class=\"reference internal\" href=\"cmake_library_path#variable:CMAKE_LIBRARY_PATH\" title=\"CMAKE_LIBRARY_PATH\" id=\"index-0-variable:CMAKE_LIBRARY_PATH\"><code>CMAKE_LIBRARY_PATH</code></a>, <a class=\"reference internal\" href=\"cmake_program_path#variable:CMAKE_PROGRAM_PATH\" title=\"CMAKE_PROGRAM_PATH\" id=\"index-0-variable:CMAKE_PROGRAM_PATH\"><code>CMAKE_PROGRAM_PATH</code></a>, and <a class=\"reference internal\" href=\"cmake_ignore_path#variable:CMAKE_IGNORE_PATH\" title=\"CMAKE_IGNORE_PATH\" id=\"index-0-variable:CMAKE_IGNORE_PATH\"><code>CMAKE_IGNORE_PATH</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_PREFIX_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_PREFIX_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_export_no_package_registry":"<h1 id=\"variable:CMAKE_EXPORT_NO_PACKAGE_REGISTRY\">CMAKE_EXPORT_NO_PACKAGE_REGISTRY</h1> <p id=\"cmake-export-no-package-registry\">Disable the <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-0-command:export\"><code>export(PACKAGE)</code></a> command.</p> <p>In some cases, for example for packaging and for system wide installations, it is not desirable to write the user package registry. If the <a class=\"reference internal\" href=\"#variable:CMAKE_EXPORT_NO_PACKAGE_REGISTRY\" title=\"CMAKE_EXPORT_NO_PACKAGE_REGISTRY\" id=\"index-0-variable:CMAKE_EXPORT_NO_PACKAGE_REGISTRY\"><code>CMAKE_EXPORT_NO_PACKAGE_REGISTRY</code></a> variable is enabled, the <a class=\"reference internal\" href=\"../command/export#command:export\" title=\"export\" id=\"index-1-command:export\"><code>export(PACKAGE)</code></a> command will do nothing.</p> <p>See also <a class=\"reference internal\" href=\"../manual/cmake-packages.7#disabling-the-package-registry\"><span>Disabling the Package Registry</span></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXPORT_NO_PACKAGE_REGISTRY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXPORT_NO_PACKAGE_REGISTRY.html</a>\n  </p>\n</div>\n","variable/cmake_find_package_no_package_registry":"<h1 id=\"variable:CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY\">CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY</h1> <p id=\"cmake-find-package-no-package-registry\">Skip <a class=\"reference internal\" href=\"../manual/cmake-packages.7#user-package-registry\"><span>User Package Registry</span></a> in <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> calls.</p> <p>In some cases, for example to locate only system wide installations, it is not desirable to use the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#user-package-registry\"><span>User Package Registry</span></a> when searching for packages. If the <a class=\"reference internal\" href=\"#variable:CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY\" title=\"CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY\" id=\"index-0-variable:CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY\"><code>CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY</code></a> variable is enabled, all the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-1-command:find_package\"><code>find_package()</code></a> commands will skip the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#user-package-registry\"><span>User Package Registry</span></a> as if they were called with the <code>NO_CMAKE_PACKAGE_REGISTRY</code> argument.</p> <p>See also <a class=\"reference internal\" href=\"../manual/cmake-packages.7#disabling-the-package-registry\"><span>Disabling the Package Registry</span></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY.html</a>\n  </p>\n</div>\n","command/ctest_start":"<h1 id=\"command:ctest_start\">ctest_start</h1> <p id=\"ctest-start\">Starts the testing for a given model</p> <pre data-language=\"python\">ctest_start(Model [TRACK &lt;track&gt;] [APPEND] [source [binary]] [QUIET])\n</pre> <p>Starts the testing for a given model. The command should be called after the binary directory is initialized. If the ‘source’ and ‘binary’ directory are not specified, it reads the <a class=\"reference internal\" href=\"../variable/ctest_source_directory#variable:CTEST_SOURCE_DIRECTORY\" title=\"CTEST_SOURCE_DIRECTORY\" id=\"index-0-variable:CTEST_SOURCE_DIRECTORY\"><code>CTEST_SOURCE_DIRECTORY</code></a> and <a class=\"reference internal\" href=\"../variable/ctest_binary_directory#variable:CTEST_BINARY_DIRECTORY\" title=\"CTEST_BINARY_DIRECTORY\" id=\"index-0-variable:CTEST_BINARY_DIRECTORY\"><code>CTEST_BINARY_DIRECTORY</code></a>. If the track is specified, the submissions will go to the specified track. If APPEND is used, the existing TAG is used rather than creating a new one based on the current time stamp. If <code>QUIET</code> is used, CTest will suppress any non-error messages that it otherwise would have printed to the console.</p> <p>If the <a class=\"reference internal\" href=\"../variable/ctest_checkout_command#variable:CTEST_CHECKOUT_COMMAND\" title=\"CTEST_CHECKOUT_COMMAND\" id=\"index-0-variable:CTEST_CHECKOUT_COMMAND\"><code>CTEST_CHECKOUT_COMMAND</code></a> variable (or the <a class=\"reference internal\" href=\"../variable/ctest_cvs_checkout#variable:CTEST_CVS_CHECKOUT\" title=\"CTEST_CVS_CHECKOUT\" id=\"index-0-variable:CTEST_CVS_CHECKOUT\"><code>CTEST_CVS_CHECKOUT</code></a> variable) is set, its content is treated as command-line. The command is invoked with the current working directory set to the parent of the source directory, even if the source directory already exists. This can be used to create the source tree from a version control repository.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_start.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_start.html</a>\n  </p>\n</div>\n","variable/cmake_find_package_no_system_package_registry":"<h1 id=\"variable:CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY\">CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY</h1> <p id=\"cmake-find-package-no-system-package-registry\">Skip <a class=\"reference internal\" href=\"../manual/cmake-packages.7#system-package-registry\"><span>System Package Registry</span></a> in <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> calls.</p> <p>In some cases, it is not desirable to use the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#system-package-registry\"><span>System Package Registry</span></a> when searching for packages. If the <a class=\"reference internal\" href=\"#variable:CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY\" title=\"CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY\" id=\"index-0-variable:CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY\"><code>CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY</code></a> variable is enabled, all the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-1-command:find_package\"><code>find_package()</code></a> commands will skip the <a class=\"reference internal\" href=\"../manual/cmake-packages.7#system-package-registry\"><span>System Package Registry</span></a> as if they were called with the <code>NO_CMAKE_SYSTEM_PACKAGE_REGISTRY</code> argument.</p> <p>See also <a class=\"reference internal\" href=\"../manual/cmake-packages.7#disabling-the-package-registry\"><span>Disabling the Package Registry</span></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY.html</a>\n  </p>\n</div>\n","variable/ctest_binary_directory":"<h1 id=\"variable:CTEST_BINARY_DIRECTORY\">CTEST_BINARY_DIRECTORY</h1> <p id=\"ctest-binary-directory\">Specify the CTest <code>BuildDirectory</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_BINARY_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_BINARY_DIRECTORY.html</a>\n  </p>\n</div>\n","variable/project_binary_dir":"<h1 id=\"variable:PROJECT_BINARY_DIR\">PROJECT_BINARY_DIR</h1> <p id=\"project-binary-dir\">Full path to build directory for project.</p> <p>This is the binary directory of the most recent <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT_BINARY_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT_BINARY_DIR.html</a>\n  </p>\n</div>\n","variable/ctest_source_directory":"<h1 id=\"variable:CTEST_SOURCE_DIRECTORY\">CTEST_SOURCE_DIRECTORY</h1> <p id=\"ctest-source-directory\">Specify the CTest <code>SourceDirectory</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_SOURCE_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_SOURCE_DIRECTORY.html</a>\n  </p>\n</div>\n","variable/project_source_dir":"<h1 id=\"variable:PROJECT_SOURCE_DIR\">PROJECT_SOURCE_DIR</h1> <p id=\"project-source-dir\">Top level source directory for the current project.</p> <p>This is the source directory of the most recent <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT_SOURCE_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT_SOURCE_DIR.html</a>\n  </p>\n</div>\n","command/ctest_update":"<h1 id=\"command:ctest_update\">ctest_update</h1> <p id=\"ctest-update\">Perform the <a class=\"reference internal\" href=\"../manual/ctest.1#ctest-update-step\"><span>CTest Update Step</span></a> as a <a class=\"reference internal\" href=\"../manual/ctest.1#dashboard-client\"><span>Dashboard Client</span></a>.</p> <pre data-language=\"python\">ctest_update([SOURCE &lt;source-dir&gt;] [RETURN_VALUE &lt;result-var&gt;] [QUIET])\n</pre> <p>Update the source tree from version control and record results in <code>Update.xml</code> for submission with the <a class=\"reference internal\" href=\"ctest_submit#command:ctest_submit\" title=\"ctest_submit\" id=\"index-0-command:ctest_submit\"><code>ctest_submit()</code></a> command.</p> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>SOURCE &lt;source-dir&gt;</code></dt> <dd>Specify the source directory. If not given, the <a class=\"reference internal\" href=\"../variable/ctest_source_directory#variable:CTEST_SOURCE_DIRECTORY\" title=\"CTEST_SOURCE_DIRECTORY\" id=\"index-0-variable:CTEST_SOURCE_DIRECTORY\"><code>CTEST_SOURCE_DIRECTORY</code></a> variable is used.</dd> <dt><code>RETURN_VALUE &lt;result-var&gt;</code></dt> <dd>Store in the <code>&lt;result-var&gt;</code> variable the number of files updated or <code>-1</code> on error.</dd> <dt><code>QUIET</code></dt> <dd>Tell CTest to suppress most non-error messages that it would have otherwise printed to the console. CTest will still report the new revision of the repository and any conflicting files that were found.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_update.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_update.html</a>\n  </p>\n</div>\n","variable/ctest_bzr_command":"<h1 id=\"variable:CTEST_BZR_COMMAND\">CTEST_BZR_COMMAND</h1> <p id=\"ctest-bzr-command\">Specify the CTest <code>BZRCommand</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_BZR_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_BZR_COMMAND.html</a>\n  </p>\n</div>\n","variable/ctest_bzr_update_options":"<h1 id=\"variable:CTEST_BZR_UPDATE_OPTIONS\">CTEST_BZR_UPDATE_OPTIONS</h1> <p id=\"ctest-bzr-update-options\">Specify the CTest <code>BZRUpdateOptions</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_BZR_UPDATE_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_BZR_UPDATE_OPTIONS.html</a>\n  </p>\n</div>\n","variable/ctest_cvs_command":"<h1 id=\"variable:CTEST_CVS_COMMAND\">CTEST_CVS_COMMAND</h1> <p id=\"ctest-cvs-command\">Specify the CTest <code>CVSCommand</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CVS_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CVS_COMMAND.html</a>\n  </p>\n</div>\n","variable/ctest_cvs_update_options":"<h1 id=\"variable:CTEST_CVS_UPDATE_OPTIONS\">CTEST_CVS_UPDATE_OPTIONS</h1> <p id=\"ctest-cvs-update-options\">Specify the CTest <code>CVSUpdateOptions</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CVS_UPDATE_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CVS_UPDATE_OPTIONS.html</a>\n  </p>\n</div>\n","variable/ctest_git_command":"<h1 id=\"variable:CTEST_GIT_COMMAND\">CTEST_GIT_COMMAND</h1> <p id=\"ctest-git-command\">Specify the CTest <code>GITCommand</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_GIT_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_GIT_COMMAND.html</a>\n  </p>\n</div>\n","variable/ctest_git_update_custom":"<h1 id=\"variable:CTEST_GIT_UPDATE_CUSTOM\">CTEST_GIT_UPDATE_CUSTOM</h1> <p id=\"ctest-git-update-custom\">Specify the CTest <code>GITUpdateCustom</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_GIT_UPDATE_CUSTOM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_GIT_UPDATE_CUSTOM.html</a>\n  </p>\n</div>\n","variable/ctest_git_update_options":"<h1 id=\"variable:CTEST_GIT_UPDATE_OPTIONS\">CTEST_GIT_UPDATE_OPTIONS</h1> <p id=\"ctest-git-update-options\">Specify the CTest <code>GITUpdateOptions</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_GIT_UPDATE_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_GIT_UPDATE_OPTIONS.html</a>\n  </p>\n</div>\n","variable/ctest_hg_command":"<h1 id=\"variable:CTEST_HG_COMMAND\">CTEST_HG_COMMAND</h1> <p id=\"ctest-hg-command\">Specify the CTest <code>HGCommand</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_HG_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_HG_COMMAND.html</a>\n  </p>\n</div>\n","variable/ctest_hg_update_options":"<h1 id=\"variable:CTEST_HG_UPDATE_OPTIONS\">CTEST_HG_UPDATE_OPTIONS</h1> <p id=\"ctest-hg-update-options\">Specify the CTest <code>HGUpdateOptions</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_HG_UPDATE_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_HG_UPDATE_OPTIONS.html</a>\n  </p>\n</div>\n","variable/ctest_p4_options":"<h1 id=\"variable:CTEST_P4_OPTIONS\">CTEST_P4_OPTIONS</h1> <p id=\"ctest-p4-options\">Specify the CTest <code>P4Options</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_P4_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_P4_OPTIONS.html</a>\n  </p>\n</div>\n","variable/ctest_p4_update_options":"<h1 id=\"variable:CTEST_P4_UPDATE_OPTIONS\">CTEST_P4_UPDATE_OPTIONS</h1> <p id=\"ctest-p4-update-options\">Specify the CTest <code>P4UpdateOptions</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_P4_UPDATE_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_P4_UPDATE_OPTIONS.html</a>\n  </p>\n</div>\n","variable/ctest_svn_command":"<h1 id=\"variable:CTEST_SVN_COMMAND\">CTEST_SVN_COMMAND</h1> <p id=\"ctest-svn-command\">Specify the CTest <code>SVNCommand</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_SVN_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_SVN_COMMAND.html</a>\n  </p>\n</div>\n","variable/ctest_svn_options":"<h1 id=\"variable:CTEST_SVN_OPTIONS\">CTEST_SVN_OPTIONS</h1> <p id=\"ctest-svn-options\">Specify the CTest <code>SVNOptions</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_SVN_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_SVN_OPTIONS.html</a>\n  </p>\n</div>\n","variable/ctest_svn_update_options":"<h1 id=\"variable:CTEST_SVN_UPDATE_OPTIONS\">CTEST_SVN_UPDATE_OPTIONS</h1> <p id=\"ctest-svn-update-options\">Specify the CTest <code>SVNUpdateOptions</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_SVN_UPDATE_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_SVN_UPDATE_OPTIONS.html</a>\n  </p>\n</div>\n","variable/ctest_update_command":"<h1 id=\"variable:CTEST_UPDATE_COMMAND\">CTEST_UPDATE_COMMAND</h1> <p id=\"ctest-update-command\">Specify the CTest <code>UpdateCommand</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_UPDATE_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_UPDATE_COMMAND.html</a>\n  </p>\n</div>\n","variable/ctest_update_options":"<h1 id=\"variable:CTEST_UPDATE_OPTIONS\">CTEST_UPDATE_OPTIONS</h1> <p id=\"ctest-update-options\">Specify the CTest <code>UpdateOptions</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_UPDATE_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_UPDATE_OPTIONS.html</a>\n  </p>\n</div>\n","variable/ctest_update_version_only":"<h1 id=\"variable:CTEST_UPDATE_VERSION_ONLY\">CTEST_UPDATE_VERSION_ONLY</h1> <p id=\"ctest-update-version-only\">Specify the CTest <code>UpdateVersionOnly</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_UPDATE_VERSION_ONLY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_UPDATE_VERSION_ONLY.html</a>\n  </p>\n</div>\n","variable/ctest_nightly_start_time":"<h1 id=\"variable:CTEST_NIGHTLY_START_TIME\">CTEST_NIGHTLY_START_TIME</h1> <p id=\"ctest-nightly-start-time\">Specify the CTest <code>NightlyStartTime</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_NIGHTLY_START_TIME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_NIGHTLY_START_TIME.html</a>\n  </p>\n</div>\n","command/ctest_configure":"<h1 id=\"command:ctest_configure\">ctest_configure</h1> <p id=\"ctest-configure\">Perform the <a class=\"reference internal\" href=\"../manual/ctest.1#ctest-configure-step\"><span>CTest Configure Step</span></a> as a <a class=\"reference internal\" href=\"../manual/ctest.1#dashboard-client\"><span>Dashboard Client</span></a>.</p> <pre data-language=\"python\">ctest_configure([BUILD &lt;build-dir&gt;] [SOURCE &lt;source-dir&gt;] [APPEND]\n                [OPTIONS &lt;options&gt;] [RETURN_VALUE &lt;result-var&gt;] [QUIET])\n</pre> <p>Configure the project build tree and record results in <code>Configure.xml</code> for submission with the <a class=\"reference internal\" href=\"ctest_submit#command:ctest_submit\" title=\"ctest_submit\" id=\"index-0-command:ctest_submit\"><code>ctest_submit()</code></a> command.</p> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>BUILD &lt;build-dir&gt;</code></dt> <dd>Specify the top-level build directory. If not given, the <a class=\"reference internal\" href=\"../variable/ctest_binary_directory#variable:CTEST_BINARY_DIRECTORY\" title=\"CTEST_BINARY_DIRECTORY\" id=\"index-0-variable:CTEST_BINARY_DIRECTORY\"><code>CTEST_BINARY_DIRECTORY</code></a> variable is used.</dd> <dt><code>SOURCE &lt;source-dir&gt;</code></dt> <dd>Specify the source directory. If not given, the <a class=\"reference internal\" href=\"../variable/ctest_source_directory#variable:CTEST_SOURCE_DIRECTORY\" title=\"CTEST_SOURCE_DIRECTORY\" id=\"index-0-variable:CTEST_SOURCE_DIRECTORY\"><code>CTEST_SOURCE_DIRECTORY</code></a> variable is used.</dd> <dt><code>APPEND</code></dt> <dd>Mark results for append to those previously submitted to a dashboard server since the last <a class=\"reference internal\" href=\"ctest_start#command:ctest_start\" title=\"ctest_start\" id=\"index-0-command:ctest_start\"><code>ctest_start()</code></a> call. Append semantics are defined by the dashboard server in use.</dd> <dt><code>OPTIONS &lt;options&gt;</code></dt> <dd>Specify command-line arguments to pass to the configuration tool.</dd> <dt><code>RETURN_VALUE &lt;result-var&gt;</code></dt> <dd>Store in the <code>&lt;result-var&gt;</code> variable the return value of the native configuration tool.</dd> <dt><code>QUIET</code></dt> <dd>Suppress any CTest-specific non-error messages that would have otherwise been printed to the console. Output from the underlying configure command is not affected.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_configure.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_configure.html</a>\n  </p>\n</div>\n","variable/ctest_configure_command":"<h1 id=\"variable:CTEST_CONFIGURE_COMMAND\">CTEST_CONFIGURE_COMMAND</h1> <p id=\"ctest-configure-command\">Specify the CTest <code>ConfigureCommand</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CONFIGURE_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CONFIGURE_COMMAND.html</a>\n  </p>\n</div>\n","variable/cmake_command":"<h1 id=\"variable:CMAKE_COMMAND\">CMAKE_COMMAND</h1> <p id=\"cmake-command\">The full path to the <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> executable.</p> <p>This is the full path to the CMake executable <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-1-manual:cmake(1)\"><code>cmake(1)</code></a> which is useful from custom commands that want to use the <code>cmake -E</code> option for portable system commands. (e.g. <code>/usr/local/bin/cmake</code>)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_COMMAND.html</a>\n  </p>\n</div>\n","command/ctest_build":"<h1 id=\"command:ctest_build\">ctest_build</h1> <p id=\"ctest-build\">Perform the <a class=\"reference internal\" href=\"../manual/ctest.1#ctest-build-step\"><span>CTest Build Step</span></a> as a <a class=\"reference internal\" href=\"../manual/ctest.1#dashboard-client\"><span>Dashboard Client</span></a>.</p> <pre data-language=\"python\">ctest_build([BUILD &lt;build-dir&gt;] [APPEND]\n            [CONFIGURATION &lt;config&gt;]\n            [FLAGS &lt;flags&gt;]\n            [PROJECT_NAME &lt;project-name&gt;]\n            [TARGET &lt;target-name&gt;]\n            [NUMBER_ERRORS &lt;num-err-var&gt;]\n            [NUMBER_WARNINGS &lt;num-warn-var&gt;]\n            [RETURN_VALUE &lt;result-var&gt;]\n            )\n</pre> <p>Build the project and store results in <code>Build.xml</code> for submission with the <a class=\"reference internal\" href=\"ctest_submit#command:ctest_submit\" title=\"ctest_submit\" id=\"index-0-command:ctest_submit\"><code>ctest_submit()</code></a> command.</p> <p>The <a class=\"reference internal\" href=\"../variable/ctest_build_command#variable:CTEST_BUILD_COMMAND\" title=\"CTEST_BUILD_COMMAND\" id=\"index-0-variable:CTEST_BUILD_COMMAND\"><code>CTEST_BUILD_COMMAND</code></a> variable may be set to explicitly specify the build command line. Otherwise the build command line is computed automatically based on the options given.</p> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>BUILD &lt;build-dir&gt;</code></dt> <dd>Specify the top-level build directory. If not given, the <a class=\"reference internal\" href=\"../variable/ctest_binary_directory#variable:CTEST_BINARY_DIRECTORY\" title=\"CTEST_BINARY_DIRECTORY\" id=\"index-0-variable:CTEST_BINARY_DIRECTORY\"><code>CTEST_BINARY_DIRECTORY</code></a> variable is used.</dd> <dt><code>APPEND</code></dt> <dd>Mark results for append to those previously submitted to a dashboard server since the last <a class=\"reference internal\" href=\"ctest_start#command:ctest_start\" title=\"ctest_start\" id=\"index-0-command:ctest_start\"><code>ctest_start()</code></a> call. Append semantics are defined by the dashboard server in use.</dd> <dt><code>CONFIGURATION &lt;config&gt;</code></dt> <dd>Specify the build configuration (e.g. <code>Debug</code>). If not specified the <code>CTEST_BUILD_CONFIGURATION</code> variable will be checked. Otherwise the <code>-C &lt;cfg&gt;</code> option given to the <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> command will be used, if any.</dd> <dt><code>FLAGS &lt;flags&gt;</code></dt> <dd>Pass additional arguments to the underlying build command. If not specified the <code>CTEST_BUILD_FLAGS</code> variable will be checked. This can, e.g., be used to trigger a parallel build using the <code>-j</code> option of make. See the <a class=\"reference internal\" href=\"../module/processorcount#module:ProcessorCount\" title=\"ProcessorCount\" id=\"index-0-module:ProcessorCount\"><code>ProcessorCount</code></a> module for an example.</dd> <dt><code>PROJECT_NAME &lt;project-name&gt;</code></dt> <dd>Set the name of the project to build. This should correspond to the top-level call to the <a class=\"reference internal\" href=\"project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command. If not specified the <code>CTEST_PROJECT_NAME</code> variable will be checked.</dd> <dt><code>TARGET &lt;target-name&gt;</code></dt> <dd>Specify the name of a target to build. If not specified the <code>CTEST_BUILD_TARGET</code> variable will be checked. Otherwise the default target will be built. This is the “all” target (called <code>ALL_BUILD</code> in <a class=\"reference internal\" href=\"../manual/cmake-generators.7#visual-studio-generators\"><span>Visual Studio Generators</span></a>).</dd> <dt><code>NUMBER_ERRORS &lt;num-err-var&gt;</code></dt> <dd>Store the number of build errors detected in the given variable.</dd> <dt><code>NUMBER_WARNINGS &lt;num-warn-var&gt;</code></dt> <dd>Store the number of build warnings detected in the given variable.</dd> <dt><code>RETURN_VALUE &lt;result-var&gt;</code></dt> <dd>Store the return value of the native build tool in the given variable.</dd> <dt><code>QUIET</code></dt> <dd>Suppress any CTest-specific non-error output that would have been printed to the console otherwise. The summary of warnings / errors, as well as the output from the native build tool is unaffected by this option.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_build.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_build.html</a>\n  </p>\n</div>\n","command/build_command":"<h1 id=\"command:build_command\">build_command</h1> <p id=\"build-command\">Get a command line to build the current project. This is mainly intended for internal use by the <a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-0-module:CTest\"><code>CTest</code></a> module.</p> <pre data-language=\"cmake\">build_command(&lt;variable&gt;\n              [CONFIGURATION &lt;config&gt;]\n              [TARGET &lt;target&gt;]\n              [PROJECT_NAME &lt;projname&gt;] # legacy, causes warning\n             )\n</pre> <p>Sets the given <code>&lt;variable&gt;</code> to a command-line string of the form:</p> <pre data-language=\"python\">&lt;cmake&gt; --build . [--config &lt;config&gt;] [--target &lt;target&gt;] [-- -i]\n</pre> <p>where <code>&lt;cmake&gt;</code> is the location of the <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> command-line tool, and <code>&lt;config&gt;</code> and <code>&lt;target&gt;</code> are the values provided to the <code>CONFIGURATION</code> and <code>TARGET</code> options, if any. The trailing <code>-- -i</code> option is added for <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> if policy <a class=\"reference internal\" href=\"../policy/cmp0061#policy:CMP0061\" title=\"CMP0061\" id=\"index-0-policy:CMP0061\"><code>CMP0061</code></a> is not set to <code>NEW</code>.</p> <p>When invoked, this <code>cmake --build</code> command line will launch the underlying build system tool.</p> <pre data-language=\"cmake\">build_command(&lt;cachevariable&gt; &lt;makecommand&gt;)\n</pre> <p>This second signature is deprecated, but still available for backwards compatibility. Use the first signature instead.</p> <p>It sets the given <code>&lt;cachevariable&gt;</code> to a command-line string as above but without the <code>--target</code> option. The <code>&lt;makecommand&gt;</code> is ignored but should be the full path to msdev, devenv, nmake, make or one of the end user build tools for legacy invocations.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In CMake versions prior to 3.0 this command returned a command line that directly invokes the native build tool for the current generator. Their implementation of the <code>PROJECT_NAME</code> option had no useful effects, so CMake now warns on use of the option.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/build_command.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/build_command.html</a>\n  </p>\n</div>\n","variable/ctest_use_launchers":"<h1 id=\"variable:CTEST_USE_LAUNCHERS\">CTEST_USE_LAUNCHERS</h1> <p id=\"ctest-use-launchers\">Specify the CTest <code>UseLaunchers</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_USE_LAUNCHERS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_USE_LAUNCHERS.html</a>\n  </p>\n</div>\n","variable/ctest_configuration_type":"<h1 id=\"variable:CTEST_CONFIGURATION_TYPE\">CTEST_CONFIGURATION_TYPE</h1> <p id=\"ctest-configuration-type\">Specify the CTest <code>DefaultCTestConfigurationType</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CONFIGURATION_TYPE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CONFIGURATION_TYPE.html</a>\n  </p>\n</div>\n","variable/ctest_build_command":"<h1 id=\"variable:CTEST_BUILD_COMMAND\">CTEST_BUILD_COMMAND</h1> <p id=\"ctest-build-command\">Specify the CTest <code>MakeCommand</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_BUILD_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_BUILD_COMMAND.html</a>\n  </p>\n</div>\n","command/ctest_test":"<h1 id=\"command:ctest_test\">ctest_test</h1> <p id=\"ctest-test\">Perform the <a class=\"reference internal\" href=\"../manual/ctest.1#ctest-test-step\"><span>CTest Test Step</span></a> as a <a class=\"reference internal\" href=\"../manual/ctest.1#dashboard-client\"><span>Dashboard Client</span></a>.</p> <pre data-language=\"python\">ctest_test([BUILD &lt;build-dir&gt;] [APPEND]\n           [START &lt;start-number&gt;]\n           [END &lt;end-number&gt;]\n           [STRIDE &lt;stride-number&gt;]\n           [EXCLUDE &lt;exclude-regex&gt;]\n           [INCLUDE &lt;include-regex&gt;]\n           [EXCLUDE_LABEL &lt;label-exclude-regex&gt;]\n           [INCLUDE_LABEL &lt;label-include-regex&gt;]\n           [PARALLEL_LEVEL &lt;level&gt;]\n           [TEST_LOAD &lt;threshold&gt;]\n           [SCHEDULE_RANDOM &lt;ON|OFF&gt;]\n           [STOP_TIME &lt;time-of-day&gt;]\n           [RETURN_VALUE &lt;result-var&gt;]\n           [QUIET]\n           )\n</pre> <p>Run tests in the project build tree and store results in <code>Test.xml</code> for submission with the <a class=\"reference internal\" href=\"ctest_submit#command:ctest_submit\" title=\"ctest_submit\" id=\"index-0-command:ctest_submit\"><code>ctest_submit()</code></a> command.</p> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>BUILD &lt;build-dir&gt;</code></dt> <dd>Specify the top-level build directory. If not given, the <a class=\"reference internal\" href=\"../variable/ctest_binary_directory#variable:CTEST_BINARY_DIRECTORY\" title=\"CTEST_BINARY_DIRECTORY\" id=\"index-0-variable:CTEST_BINARY_DIRECTORY\"><code>CTEST_BINARY_DIRECTORY</code></a> variable is used.</dd> <dt><code>APPEND</code></dt> <dd>Mark results for append to those previously submitted to a dashboard server since the last <a class=\"reference internal\" href=\"ctest_start#command:ctest_start\" title=\"ctest_start\" id=\"index-0-command:ctest_start\"><code>ctest_start()</code></a> call. Append semantics are defined by the dashboard server in use.</dd> <dt><code>START &lt;start-number&gt;</code></dt> <dd>Specify the beginning of a range of test numbers.</dd> <dt><code>END &lt;end-number&gt;</code></dt> <dd>Specify the end of a range of test numbers.</dd> <dt><code>STRIDE &lt;stride-number&gt;</code></dt> <dd>Specify the stride by which to step across a range of test numbers.</dd> <dt><code>EXCLUDE &lt;exclude-regex&gt;</code></dt> <dd>Specify a regular expression matching test names to exclude.</dd> <dt><code>INCLUDE &lt;include-regex&gt;</code></dt> <dd>Specify a regular expression matching test names to include. Tests not matching this expression are excluded.</dd> <dt><code>EXCLUDE_LABEL &lt;label-exclude-regex&gt;</code></dt> <dd>Specify a regular expression matching test labels to exclude.</dd> <dt><code>INCLUDE_LABEL &lt;label-include-regex&gt;</code></dt> <dd>Specify a regular expression matching test labels to include. Tests not matching this expression are excluded.</dd> <dt><code>PARALLEL_LEVEL &lt;level&gt;</code></dt> <dd>Specify a positive number representing the number of tests to be run in parallel.</dd> <dt><code>TEST_LOAD &lt;threshold&gt;</code></dt> <dd>While running tests in parallel, try not to start tests when they may cause the CPU load to pass above a given threshold. If not specified the <a class=\"reference internal\" href=\"../variable/ctest_test_load#variable:CTEST_TEST_LOAD\" title=\"CTEST_TEST_LOAD\" id=\"index-0-variable:CTEST_TEST_LOAD\"><code>CTEST_TEST_LOAD</code></a> variable will be checked, and then the <code>--test-load</code> command-line argument to <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>. See also the <code>TestLoad</code> setting in the <a class=\"reference internal\" href=\"../manual/ctest.1#ctest-test-step\"><span>CTest Test Step</span></a>.</dd> <dt><code>SCHEDULE_RANDOM &lt;ON|OFF&gt;</code></dt> <dd>Launch tests in a random order. This may be useful for detecting implicit test dependencies.</dd> <dt><code>STOP_TIME &lt;time-of-day&gt;</code></dt> <dd>Specify a time of day at which the tests should all stop running.</dd> <dt><code>RETURN_VALUE &lt;result-var&gt;</code></dt> <dd>Store in the <code>&lt;result-var&gt;</code> variable <code>0</code> if all tests passed. Store non-zero if anything went wrong.</dd> <dt><code>QUIET</code></dt> <dd>Suppress any CTest-specific non-error messages that would have otherwise been printed to the console. Output from the underlying test command is not affected. Summary info detailing the percentage of passing tests is also unaffected by the <code>QUIET</code> option.</dd> </dl> <p>See also the <a class=\"reference internal\" href=\"../variable/ctest_custom_maximum_passed_test_output_size#variable:CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE\" title=\"CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE\" id=\"index-0-variable:CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE\"><code>CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE</code></a> and <a class=\"reference internal\" href=\"../variable/ctest_custom_maximum_failed_test_output_size#variable:CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE\" title=\"CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE\" id=\"index-0-variable:CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE\"><code>CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE</code></a> variables.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_test.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_test.html</a>\n  </p>\n</div>\n","variable/ctest_test_timeout":"<h1 id=\"variable:CTEST_TEST_TIMEOUT\">CTEST_TEST_TIMEOUT</h1> <p id=\"ctest-test-timeout\">Specify the CTest <code>TimeOut</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_TEST_TIMEOUT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_TEST_TIMEOUT.html</a>\n  </p>\n</div>\n","variable/ctest_test_load":"<h1 id=\"variable:CTEST_TEST_LOAD\">CTEST_TEST_LOAD</h1> <p id=\"ctest-test-load\">Specify the <code>TestLoad</code> setting in the <a class=\"reference internal\" href=\"../manual/ctest.1#ctest-test-step\"><span>CTest Test Step</span></a> of a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script. This sets the default value for the <code>TEST_LOAD</code> option of the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_TEST_LOAD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_TEST_LOAD.html</a>\n  </p>\n</div>\n","command/ctest_coverage":"<h1 id=\"command:ctest_coverage\">ctest_coverage</h1> <p id=\"ctest-coverage\">Perform the <a class=\"reference internal\" href=\"../manual/ctest.1#ctest-coverage-step\"><span>CTest Coverage Step</span></a> as a <a class=\"reference internal\" href=\"../manual/ctest.1#dashboard-client\"><span>Dashboard Client</span></a>.</p> <pre data-language=\"python\">ctest_coverage([BUILD &lt;build-dir&gt;] [APPEND]\n               [LABELS &lt;label&gt;...]\n               [RETURN_VALUE &lt;result-var&gt;]\n               [QUIET]\n               )\n</pre> <p>Collect coverage tool results and stores them in <code>Coverage.xml</code> for submission with the <a class=\"reference internal\" href=\"ctest_submit#command:ctest_submit\" title=\"ctest_submit\" id=\"index-0-command:ctest_submit\"><code>ctest_submit()</code></a> command.</p> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>BUILD &lt;build-dir&gt;</code></dt> <dd>Specify the top-level build directory. If not given, the <a class=\"reference internal\" href=\"../variable/ctest_binary_directory#variable:CTEST_BINARY_DIRECTORY\" title=\"CTEST_BINARY_DIRECTORY\" id=\"index-0-variable:CTEST_BINARY_DIRECTORY\"><code>CTEST_BINARY_DIRECTORY</code></a> variable is used.</dd> <dt><code>APPEND</code></dt> <dd>Mark results for append to those previously submitted to a dashboard server since the last <a class=\"reference internal\" href=\"ctest_start#command:ctest_start\" title=\"ctest_start\" id=\"index-0-command:ctest_start\"><code>ctest_start()</code></a> call. Append semantics are defined by the dashboard server in use.</dd> <dt><code>LABELS</code></dt> <dd>Filter the coverage report to include only source files labeled with at least one of the labels specified.</dd> <dt><code>RETURN_VALUE &lt;result-var&gt;</code></dt> <dd>Store in the <code>&lt;result-var&gt;</code> variable <code>0</code> if coverage tools ran without error and non-zero otherwise.</dd> <dt><code>QUIET</code></dt> <dd>Suppress any CTest-specific non-error output that would have been printed to the console otherwise. The summary indicating how many lines of code were covered is unaffected by this option.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_coverage.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_coverage.html</a>\n  </p>\n</div>\n","variable/ctest_coverage_command":"<h1 id=\"variable:CTEST_COVERAGE_COMMAND\">CTEST_COVERAGE_COMMAND</h1> <p id=\"ctest-coverage-command\">Specify the CTest <code>CoverageCommand</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p>  <h2 id=\"cobertura\">Cobertura</h2> <p>Using <a class=\"reference external\" href=\"http://cobertura.github.io/cobertura/\">Cobertura</a> as the coverage generation within your multi-module Java project can generate a series of XML files.</p> <p>The Cobertura Coverage parser expects to read the coverage data from a single XML file which contains the coverage data for all modules. Cobertura has a program with the ability to merge given <code>cobertura.ser</code> files and then another program to generate a combined XML file from the previous merged file. For command line testing, this can be done by hand prior to CTest looking for the coverage files. For script builds, set the <code>CTEST_COVERAGE_COMMAND</code> variable to point to a file which will perform these same steps, such as a <code>.sh</code> or <code>.bat</code> file.</p> <pre data-language=\"cmake\">set(CTEST_COVERAGE_COMMAND .../run-coverage-and-consolidate.sh)\n</pre> <p>where the <code>run-coverage-and-consolidate.sh</code> script is perhaps created by the <a class=\"reference internal\" href=\"../command/configure_file#command:configure_file\" title=\"configure_file\" id=\"index-0-command:configure_file\"><code>configure_file()</code></a> command and might contain the following code:</p> <pre data-language=\"bash\">#!/usr/bin/env bash\nCoberturaFiles=\"$(find \"/path/to/source\" -name \"cobertura.ser\")\"\nSourceDirs=\"$(find \"/path/to/source\" -name \"java\" -type d)\"\ncobertura-merge --datafile coberturamerge.ser $CoberturaFiles\ncobertura-report --datafile coberturamerge.ser --destination . \\\n                 --format xml $SourceDirs\n</pre> <p>The script uses <code>find</code> to capture the paths to all of the <code>cobertura.ser</code> files found below the project’s source directory. It keeps the list of files and supplies it as an argument to the <code>cobertura-merge</code> program. The <code>--datafile</code> argument signifies where the result of the merge will be kept.</p> <p>The combined <code>coberturamerge.ser</code> file is then used to generate the XML report using the <code>cobertura-report</code> program. The call to the cobertura-report program requires some named arguments.</p> <dl class=\"docutils\"> <dt><code>--datafila</code></dt> <dd>path to the merged <code>.ser</code> file</dd> <dt><code>--destination</code></dt> <dd>path to put the output files(s)</dd> <dt><code>--format</code></dt> <dd>file format to write output in: xml or html</dd> </dl> <p>The rest of the supplied arguments consist of the full paths to the <code>/src/main/java</code> directories of each module within the souce tree. These directories are needed and should not be forgotten.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_COVERAGE_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_COVERAGE_COMMAND.html</a>\n  </p>\n</div>\n","variable/ctest_coverage_extra_flags":"<h1 id=\"variable:CTEST_COVERAGE_EXTRA_FLAGS\">CTEST_COVERAGE_EXTRA_FLAGS</h1> <p id=\"ctest-coverage-extra-flags\">Specify the CTest <code>CoverageExtraFlags</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_COVERAGE_EXTRA_FLAGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_COVERAGE_EXTRA_FLAGS.html</a>\n  </p>\n</div>\n","command/ctest_memcheck":"<h1 id=\"command:ctest_memcheck\">ctest_memcheck</h1> <p id=\"ctest-memcheck\">Perform the <a class=\"reference internal\" href=\"../manual/ctest.1#ctest-memcheck-step\"><span>CTest MemCheck Step</span></a> as a <a class=\"reference internal\" href=\"../manual/ctest.1#dashboard-client\"><span>Dashboard Client</span></a>.</p> <pre data-language=\"python\">ctest_memcheck([BUILD &lt;build-dir&gt;] [APPEND]\n               [START &lt;start-number&gt;]\n               [END &lt;end-number&gt;]\n               [STRIDE &lt;stride-number&gt;]\n               [EXCLUDE &lt;exclude-regex&gt;]\n               [INCLUDE &lt;include-regex&gt;]\n               [EXCLUDE_LABEL &lt;label-exclude-regex&gt;]\n               [INCLUDE_LABEL &lt;label-include-regex&gt;]\n               [PARALLEL_LEVEL &lt;level&gt;]\n               [TEST_LOAD &lt;threshold&gt;]\n               [SCHEDULE_RANDOM &lt;ON|OFF&gt;]\n               [STOP_TIME &lt;time-of-day&gt;]\n               [RETURN_VALUE &lt;result-var&gt;]\n               [QUIET]\n               )\n</pre> <p>Run tests with a dynamic analysis tool and store results in <code>MemCheck.xml</code> for submission with the <a class=\"reference internal\" href=\"ctest_submit#command:ctest_submit\" title=\"ctest_submit\" id=\"index-0-command:ctest_submit\"><code>ctest_submit()</code></a> command.</p> <p>The options are the same as those for the <a class=\"reference internal\" href=\"ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_memcheck.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_memcheck.html</a>\n  </p>\n</div>\n","variable/ctest_memorycheck_sanitizer_options":"<h1 id=\"variable:CTEST_MEMORYCHECK_SANITIZER_OPTIONS\">CTEST_MEMORYCHECK_SANITIZER_OPTIONS</h1> <p id=\"ctest-memorycheck-sanitizer-options\">Specify the CTest <code>MemoryCheckSanitizerOptions</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_MEMORYCHECK_SANITIZER_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_MEMORYCHECK_SANITIZER_OPTIONS.html</a>\n  </p>\n</div>\n","variable/ctest_memorycheck_command":"<h1 id=\"variable:CTEST_MEMORYCHECK_COMMAND\">CTEST_MEMORYCHECK_COMMAND</h1> <p id=\"ctest-memorycheck-command\">Specify the CTest <code>MemoryCheckCommand</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_MEMORYCHECK_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_MEMORYCHECK_COMMAND.html</a>\n  </p>\n</div>\n","variable/ctest_memorycheck_command_options":"<h1 id=\"variable:CTEST_MEMORYCHECK_COMMAND_OPTIONS\">CTEST_MEMORYCHECK_COMMAND_OPTIONS</h1> <p id=\"ctest-memorycheck-command-options\">Specify the CTest <code>MemoryCheckCommandOptions</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_MEMORYCHECK_COMMAND_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_MEMORYCHECK_COMMAND_OPTIONS.html</a>\n  </p>\n</div>\n","variable/ctest_memorycheck_suppressions_file":"<h1 id=\"variable:CTEST_MEMORYCHECK_SUPPRESSIONS_FILE\">CTEST_MEMORYCHECK_SUPPRESSIONS_FILE</h1> <p id=\"ctest-memorycheck-suppressions-file\">Specify the CTest <code>MemoryCheckSuppressionFile</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_MEMORYCHECK_SUPPRESSIONS_FILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_MEMORYCHECK_SUPPRESSIONS_FILE.html</a>\n  </p>\n</div>\n","variable/ctest_memorycheck_type":"<h1 id=\"variable:CTEST_MEMORYCHECK_TYPE\">CTEST_MEMORYCHECK_TYPE</h1> <p id=\"ctest-memorycheck-type\">Specify the CTest <code>MemoryCheckType</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script. Valid values are <code>Valgrind</code>, <code>Purify</code>, <code>BoundsChecker</code>, and <code>ThreadSanitizer</code>, <code>AddressSanitizer</code>, <code>MemorySanitizer</code>, and <code>UndefinedBehaviorSanitizer</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_MEMORYCHECK_TYPE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_MEMORYCHECK_TYPE.html</a>\n  </p>\n</div>\n","command/ctest_submit":"<h1 id=\"command:ctest_submit\">ctest_submit</h1> <p id=\"ctest-submit\">Perform the <a class=\"reference internal\" href=\"../manual/ctest.1#ctest-submit-step\"><span>CTest Submit Step</span></a> as a <a class=\"reference internal\" href=\"../manual/ctest.1#dashboard-client\"><span>Dashboard Client</span></a>.</p> <pre data-language=\"python\">ctest_submit([PARTS &lt;part&gt;...] [FILES &lt;file&gt;...]\n             [RETRY_COUNT &lt;count&gt;]\n             [RETRY_DELAY &lt;delay&gt;]\n             [RETURN_VALUE &lt;result-var&gt;]\n             [QUIET]\n             )\n</pre> <p>Submit results to a dashboard server. By default all available parts are submitted.</p> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>PARTS &lt;part&gt;...</code></dt> <dd>\n<p class=\"first\">Specify a subset of parts to submit. Valid part names are:</p> <pre data-language=\"python\">Start      = nothing\nUpdate     = ctest_update results, in Update.xml\nConfigure  = ctest_configure results, in Configure.xml\nBuild      = ctest_build results, in Build.xml\nTest       = ctest_test results, in Test.xml\nCoverage   = ctest_coverage results, in Coverage.xml\nMemCheck   = ctest_memcheck results, in DynamicAnalysis.xml\nNotes      = Files listed by CTEST_NOTES_FILES, in Notes.xml\nExtraFiles = Files listed by CTEST_EXTRA_SUBMIT_FILES\nUpload     = Files prepared for upload by ctest_upload(), in Upload.xml\nSubmit     = nothing\n</pre> </dd> <dt><code>FILES &lt;file&gt;...</code></dt> <dd>Specify an explicit list of specific files to be submitted. Each individual file must exist at the time of the call.</dd> <dt><code>RETRY_COUNT &lt;count&gt;</code></dt> <dd>Specify how many times to retry a timed-out submission.</dd> <dt><code>RETRY_DELAY &lt;delay&gt;</code></dt> <dd>Specify how long (in seconds) to wait after a timed-out submission before attempting to re-submit.</dd> <dt><code>RETURN_VALUE &lt;result-var&gt;</code></dt> <dd>Store in the <code>&lt;result-var&gt;</code> variable <code>0</code> for success and non-zero on failure.</dd> <dt><code>QUIET</code></dt> <dd>Suppress all non-error messages that would have otherwise been printed to the console.</dd> </dl>  <h2 id=\"submit-to-cdash-upload-api\">Submit to CDash Upload API</h2> <pre data-language=\"python\">ctest_submit(CDASH_UPLOAD &lt;file&gt; [CDASH_UPLOAD_TYPE &lt;type&gt;])\n</pre> <p>This second signature is used to upload files to CDash via the CDash file upload API. The api first sends a request to upload to CDash along with a content hash of the file. If CDash does not already have the file, then it is uploaded. Along with the file, a CDash type string is specified to tell CDash which handler to use to process the data.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_submit.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_submit.html</a>\n  </p>\n</div>\n","variable/ctest_p4_client":"<h1 id=\"variable:CTEST_P4_CLIENT\">CTEST_P4_CLIENT</h1> <p id=\"ctest-p4-client\">Specify the CTest <code>P4Client</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_P4_CLIENT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_P4_CLIENT.html</a>\n  </p>\n</div>\n","variable/ctest_build_name":"<h1 id=\"variable:CTEST_BUILD_NAME\">CTEST_BUILD_NAME</h1> <p id=\"ctest-build-name\">Specify the CTest <code>BuildName</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_BUILD_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_BUILD_NAME.html</a>\n  </p>\n</div>\n","variable/ctest_curl_options":"<h1 id=\"variable:CTEST_CURL_OPTIONS\">CTEST_CURL_OPTIONS</h1> <p id=\"ctest-curl-options\">Specify the CTest <code>CurlOptions</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CURL_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CURL_OPTIONS.html</a>\n  </p>\n</div>\n","variable/ctest_drop_location":"<h1 id=\"variable:CTEST_DROP_LOCATION\">CTEST_DROP_LOCATION</h1> <p id=\"ctest-drop-location\">Specify the CTest <code>DropLocation</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_DROP_LOCATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_DROP_LOCATION.html</a>\n  </p>\n</div>\n","variable/ctest_drop_method":"<h1 id=\"variable:CTEST_DROP_METHOD\">CTEST_DROP_METHOD</h1> <p id=\"ctest-drop-method\">Specify the CTest <code>DropMethod</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_DROP_METHOD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_DROP_METHOD.html</a>\n  </p>\n</div>\n","variable/ctest_drop_site":"<h1 id=\"variable:CTEST_DROP_SITE\">CTEST_DROP_SITE</h1> <p id=\"ctest-drop-site\">Specify the CTest <code>DropSite</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_DROP_SITE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_DROP_SITE.html</a>\n  </p>\n</div>\n","variable/ctest_drop_site_password":"<h1 id=\"variable:CTEST_DROP_SITE_PASSWORD\">CTEST_DROP_SITE_PASSWORD</h1> <p id=\"ctest-drop-site-password\">Specify the CTest <code>DropSitePassword</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_DROP_SITE_PASSWORD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_DROP_SITE_PASSWORD.html</a>\n  </p>\n</div>\n","variable/ctest_p4_command":"<h1 id=\"variable:CTEST_P4_COMMAND\">CTEST_P4_COMMAND</h1> <p id=\"ctest-p4-command\">Specify the CTest <code>P4Command</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_P4_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_P4_COMMAND.html</a>\n  </p>\n</div>\n","variable/ctest_drop_site_user":"<h1 id=\"variable:CTEST_DROP_SITE_USER\">CTEST_DROP_SITE_USER</h1> <p id=\"ctest-drop-site-user\">Specify the CTest <code>DropSiteUser</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_DROP_SITE_USER.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_DROP_SITE_USER.html</a>\n  </p>\n</div>\n","command/site_name":"<h1 id=\"command:site_name\">site_name</h1> <p id=\"site-name\">Set the given variable to the name of the computer.</p> <pre data-language=\"python\">site_name(variable)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/site_name.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/site_name.html</a>\n  </p>\n</div>\n","variable/ctest_scp_command":"<h1 id=\"variable:CTEST_SCP_COMMAND\">CTEST_SCP_COMMAND</h1> <p id=\"ctest-scp-command\">Specify the CTest <code>SCPCommand</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_SCP_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_SCP_COMMAND.html</a>\n  </p>\n</div>\n","variable/ctest_drop_site_cdash":"<h1 id=\"variable:CTEST_DROP_SITE_CDASH\">CTEST_DROP_SITE_CDASH</h1> <p id=\"ctest-drop-site-cdash\">Specify the CTest <code>IsCDash</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_DROP_SITE_CDASH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_DROP_SITE_CDASH.html</a>\n  </p>\n</div>\n","variable/ctest_site":"<h1 id=\"variable:CTEST_SITE\">CTEST_SITE</h1> <p id=\"ctest-site\">Specify the CTest <code>Site</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_SITE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_SITE.html</a>\n  </p>\n</div>\n","variable/ctest_trigger_site":"<h1 id=\"variable:CTEST_TRIGGER_SITE\">CTEST_TRIGGER_SITE</h1> <p id=\"ctest-trigger-site\">Specify the CTest <code>TriggerSite</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_TRIGGER_SITE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_TRIGGER_SITE.html</a>\n  </p>\n</div>\n","command/add_compile_options":"<h1 id=\"command:add_compile_options\">add_compile_options</h1> <p id=\"add-compile-options\">Adds options to the compilation of source files.</p> <pre data-language=\"python\">add_compile_options(&lt;option&gt; ...)\n</pre> <p>Adds options to the compiler command line for targets in the current directory and below that are added after this command is invoked. See documentation of the <a class=\"reference internal\" href=\"../prop_dir/compile_options#prop_dir:COMPILE_OPTIONS\" title=\"COMPILE_OPTIONS\" id=\"index-0-prop_dir:COMPILE_OPTIONS\"><code>directory</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/compile_options#prop_tgt:COMPILE_OPTIONS\" title=\"COMPILE_OPTIONS\" id=\"index-0-prop_tgt:COMPILE_OPTIONS\"><code>target</code></a> <code>COMPILE_OPTIONS</code> properties.</p> <p>This command can be used to add any options, but alternative commands exist to add preprocessor definitions (<a class=\"reference internal\" href=\"target_compile_definitions#command:target_compile_definitions\" title=\"target_compile_definitions\" id=\"index-0-command:target_compile_definitions\"><code>target_compile_definitions()</code></a> and <a class=\"reference internal\" href=\"add_definitions#command:add_definitions\" title=\"add_definitions\" id=\"index-0-command:add_definitions\"><code>add_definitions()</code></a>) or include directories (<a class=\"reference internal\" href=\"target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-0-command:target_include_directories\"><code>target_include_directories()</code></a> and <a class=\"reference internal\" href=\"include_directories#command:include_directories\" title=\"include_directories\" id=\"index-0-command:include_directories\"><code>include_directories()</code></a>).</p> <p>Arguments to <code>add_compile_options</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/add_compile_options.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/add_compile_options.html</a>\n  </p>\n</div>\n","command/add_custom_target":"<h1 id=\"command:add_custom_target\">add_custom_target</h1> <p id=\"add-custom-target\">Add a target with no output so it will always be built.</p> <pre data-language=\"python\">add_custom_target(Name [ALL] [command1 [args1...]]\n                  [COMMAND command2 [args2...] ...]\n                  [DEPENDS depend depend depend ... ]\n                  [BYPRODUCTS [files...]]\n                  [WORKING_DIRECTORY dir]\n                  [COMMENT comment]\n                  [VERBATIM] [USES_TERMINAL]\n                  [SOURCES src1 [src2...]])\n</pre> <p>Adds a target with the given name that executes the given commands. The target has no output file and is <em>always considered out of date</em> even if the commands try to create a file with the name of the target. Use the <a class=\"reference internal\" href=\"add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-0-command:add_custom_command\"><code>add_custom_command()</code></a> command to generate a file with dependencies. By default nothing depends on the custom target. Use the <a class=\"reference internal\" href=\"add_dependencies#command:add_dependencies\" title=\"add_dependencies\" id=\"index-0-command:add_dependencies\"><code>add_dependencies()</code></a> command to add dependencies to or from other targets.</p> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>ALL</code></dt> <dd>Indicate that this target should be added to the default build target so that it will be run every time (the command cannot be called <code>ALL</code>).</dd> <dt><code>BYPRODUCTS</code></dt> <dd>\n<p class=\"first\">Specify the files the command is expected to produce but whose modification time may or may not be updated on subsequent builds. If a byproduct name is a relative path it will be interpreted relative to the build tree directory corresponding to the current source directory. Each byproduct file will be marked with the <a class=\"reference internal\" href=\"../prop_sf/generated#prop_sf:GENERATED\" title=\"GENERATED\" id=\"index-0-prop_sf:GENERATED\"><code>GENERATED</code></a> source file property automatically.</p> <p>Explicit specification of byproducts is supported by the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a> generator to tell the <code>ninja</code> build tool how to regenerate byproducts when they are missing. It is also useful when other build rules (e.g. custom commands) depend on the byproducts. Ninja requires a build rule for any generated file on which another rule depends even if there are order-only dependencies to ensure the byproducts will be available before their dependents build.</p> <p class=\"last\">The <code>BYPRODUCTS</code> option is ignored on non-Ninja generators except to mark byproducts <code>GENERATED</code>.</p> </dd> <dt><code>COMMAND</code></dt> <dd>\n<p class=\"first\">Specify the command-line(s) to execute at build time. If more than one <code>COMMAND</code> is specified they will be executed in order, but <em>not</em> necessarily composed into a stateful shell or batch script. (To run a full script, use the <a class=\"reference internal\" href=\"configure_file#command:configure_file\" title=\"configure_file\" id=\"index-0-command:configure_file\"><code>configure_file()</code></a> command or the <a class=\"reference internal\" href=\"file#command:file\" title=\"file\" id=\"index-0-command:file\"><code>file(GENERATE)</code></a> command to create it, and then specify a <code>COMMAND</code> to launch it.)</p> <p>If <code>COMMAND</code> specifies an executable target (created by the <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> command) it will automatically be replaced by the location of the executable created at build time. Additionally a target-level dependency will be added so that the executable target will be built before this custom target.</p> <p>Arguments to <code>COMMAND</code> may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>. References to target names in generator expressions imply target-level dependencies.</p> <p class=\"last\">The command and arguments are optional and if not specified an empty target will be created.</p> </dd> <dt><code>COMMENT</code></dt> <dd>Display the given message before the commands are executed at build time.</dd> <dt><code>DEPENDS</code></dt> <dd>\n<p class=\"first\">Reference files and outputs of custom commands created with <a class=\"reference internal\" href=\"add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-1-command:add_custom_command\"><code>add_custom_command()</code></a> command calls in the same directory (<code>CMakeLists.txt</code> file). They will be brought up to date when the target is built.</p> <p class=\"last\">Use the <a class=\"reference internal\" href=\"add_dependencies#command:add_dependencies\" title=\"add_dependencies\" id=\"index-1-command:add_dependencies\"><code>add_dependencies()</code></a> command to add dependencies on other targets.</p> </dd> <dt><code>SOURCES</code></dt> <dd>Specify additional source files to be included in the custom target. Specified source files will be added to IDE project files for convenience in editing even if they have no build rules.</dd> <dt><code>VERBATIM</code></dt> <dd>All arguments to the commands will be escaped properly for the build tool so that the invoked command receives each argument unchanged. Note that one level of escapes is still used by the CMake language processor before <code>add_custom_target</code> even sees the arguments. Use of <code>VERBATIM</code> is recommended as it enables correct behavior. When <code>VERBATIM</code> is not given the behavior is platform specific because there is no protection of tool-specific special characters.</dd> <dt><code>USES_TERMINAL</code></dt> <dd>The command will be given direct access to the terminal if possible. With the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-1-generator:Ninja\"><code>Ninja</code></a> generator, this places the command in the <code>console</code> <a class=\"reference internal\" href=\"../prop_gbl/job_pools#prop_gbl:JOB_POOLS\" title=\"JOB_POOLS\" id=\"index-0-prop_gbl:JOB_POOLS\"><code>pool</code></a>.</dd> <dt><code>WORKING_DIRECTORY</code></dt> <dd>Execute the command with the given current working directory. If it is a relative path it will be interpreted relative to the build tree directory corresponding to the current source directory.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/add_custom_target.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/add_custom_target.html</a>\n  </p>\n</div>\n","command/add_definitions":"<h1 id=\"command:add_definitions\">add_definitions</h1> <p id=\"add-definitions\">Adds -D define flags to the compilation of source files.</p> <pre data-language=\"python\">add_definitions(-DFOO -DBAR ...)\n</pre> <p>Adds definitions to the compiler command line for targets in the current directory and below (whether added before or after this command is invoked). This command can be used to add any flags, but it is intended to add preprocessor definitions (see the <a class=\"reference internal\" href=\"add_compile_options#command:add_compile_options\" title=\"add_compile_options\" id=\"index-0-command:add_compile_options\"><code>add_compile_options()</code></a> command to add other flags). Flags beginning in -D or /D that look like preprocessor definitions are automatically added to the <a class=\"reference internal\" href=\"../prop_dir/compile_definitions#prop_dir:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_dir:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a> directory property for the current directory. Definitions with non-trivial values may be left in the set of flags instead of being converted for reasons of backwards compatibility. See documentation of the <a class=\"reference internal\" href=\"../prop_dir/compile_definitions#prop_dir:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-1-prop_dir:COMPILE_DEFINITIONS\"><code>directory</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_tgt:COMPILE_DEFINITIONS\"><code>target</code></a>, <a class=\"reference internal\" href=\"../prop_sf/compile_definitions#prop_sf:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_sf:COMPILE_DEFINITIONS\"><code>source file</code></a> <code>COMPILE_DEFINITIONS</code> properties for details on adding preprocessor definitions to specific scopes and configurations.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/add_definitions.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/add_definitions.html</a>\n  </p>\n</div>\n","command/add_dependencies":"<h1 id=\"command:add_dependencies\">add_dependencies</h1> <p id=\"add-dependencies\">Add a dependency between top-level targets.</p> <pre data-language=\"python\">add_dependencies(&lt;target&gt; [&lt;target-dependency&gt;]...)\n</pre> <p>Make a top-level <code>&lt;target&gt;</code> depend on other top-level targets to ensure that they build before <code>&lt;target&gt;</code> does. A top-level target is one created by one of the <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a>, <a class=\"reference internal\" href=\"add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a>, or <a class=\"reference internal\" href=\"add_custom_target#command:add_custom_target\" title=\"add_custom_target\" id=\"index-0-command:add_custom_target\"><code>add_custom_target()</code></a> commands (but not targets generated by CMake like <code>install</code>).</p> <p>Dependencies added to an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>imported target</span></a> or an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#interface-libraries\"><span>interface library</span></a> are followed transitively in its place since the target itself does not build.</p> <p>See the <code>DEPENDS</code> option of <a class=\"reference internal\" href=\"add_custom_target#command:add_custom_target\" title=\"add_custom_target\" id=\"index-1-command:add_custom_target\"><code>add_custom_target()</code></a> and <a class=\"reference internal\" href=\"add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-0-command:add_custom_command\"><code>add_custom_command()</code></a> commands for adding file-level dependencies in custom rules. See the <a class=\"reference internal\" href=\"../prop_sf/object_depends#prop_sf:OBJECT_DEPENDS\" title=\"OBJECT_DEPENDS\" id=\"index-0-prop_sf:OBJECT_DEPENDS\"><code>OBJECT_DEPENDS</code></a> source file property to add file-level dependencies to object files.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/add_dependencies.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/add_dependencies.html</a>\n  </p>\n</div>\n","command/add_test":"<h1 id=\"command:add_test\">add_test</h1> <p id=\"add-test\">Add a test to the project to be run by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>.</p> <pre data-language=\"python\">add_test(NAME &lt;name&gt; COMMAND &lt;command&gt; [&lt;arg&gt;...]\n         [CONFIGURATIONS &lt;config&gt;...]\n         [WORKING_DIRECTORY &lt;dir&gt;])\n</pre> <p>Add a test called <code>&lt;name&gt;</code>. The test name may not contain spaces, quotes, or other characters special in CMake syntax. The options are:</p> <dl class=\"docutils\"> <dt><code>COMMAND</code></dt> <dd>Specify the test command-line. If <code>&lt;command&gt;</code> specifies an executable target (created by <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a>) it will automatically be replaced by the location of the executable created at build time.</dd> <dt><code>CONFIGURATIONS</code></dt> <dd>Restrict execution of the test only to the named configurations.</dd> <dt><code>WORKING_DIRECTORY</code></dt> <dd>Set the <a class=\"reference internal\" href=\"../prop_test/working_directory#prop_test:WORKING_DIRECTORY\" title=\"WORKING_DIRECTORY\" id=\"index-0-prop_test:WORKING_DIRECTORY\"><code>WORKING_DIRECTORY</code></a> test property to specify the working directory in which to execute the test. If not specified the test will be run with the current working directory set to the build directory corresponding to the current source directory.</dd> </dl> <p>The given test command is expected to exit with code <code>0</code> to pass and non-zero to fail, or vice-versa if the <a class=\"reference internal\" href=\"../prop_test/will_fail#prop_test:WILL_FAIL\" title=\"WILL_FAIL\" id=\"index-0-prop_test:WILL_FAIL\"><code>WILL_FAIL</code></a> test property is set. Any output written to stdout or stderr will be captured by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-1-manual:ctest(1)\"><code>ctest(1)</code></a> but does not affect the pass/fail status unless the <a class=\"reference internal\" href=\"../prop_test/pass_regular_expression#prop_test:PASS_REGULAR_EXPRESSION\" title=\"PASS_REGULAR_EXPRESSION\" id=\"index-0-prop_test:PASS_REGULAR_EXPRESSION\"><code>PASS_REGULAR_EXPRESSION</code></a> or <a class=\"reference internal\" href=\"../prop_test/fail_regular_expression#prop_test:FAIL_REGULAR_EXPRESSION\" title=\"FAIL_REGULAR_EXPRESSION\" id=\"index-0-prop_test:FAIL_REGULAR_EXPRESSION\"><code>FAIL_REGULAR_EXPRESSION</code></a> test property is used.</p> <p>The <code>COMMAND</code> and <code>WORKING_DIRECTORY</code> options may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions.</p> <p>Example usage:</p> <pre data-language=\"python\">add_test(NAME mytest\n         COMMAND testDriver --config $&lt;CONFIGURATION&gt;\n                            --exe $&lt;TARGET_FILE:myexe&gt;)\n</pre> <p>This creates a test <code>mytest</code> whose command runs a <code>testDriver</code> tool passing the configuration name and the full path to the executable file produced by target <code>myexe</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">CMake will generate tests only if the <a class=\"reference internal\" href=\"enable_testing#command:enable_testing\" title=\"enable_testing\" id=\"index-0-command:enable_testing\"><code>enable_testing()</code></a> command has been invoked. The <a class=\"reference internal\" href=\"../module/ctest#module:CTest\" title=\"CTest\" id=\"index-0-module:CTest\"><code>CTest</code></a> module invokes the command automatically when the <code>BUILD_TESTING</code> option is <code>ON</code>.</p> </div>  <pre data-language=\"python\">add_test(&lt;name&gt; &lt;command&gt; [&lt;arg&gt;...])\n</pre> <p>Add a test called <code>&lt;name&gt;</code> with the given command-line. Unlike the above <code>NAME</code> signature no transformation is performed on the command-line to support target names or generator expressions.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/add_test.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/add_test.html</a>\n  </p>\n</div>\n","command/aux_source_directory":"<h1 id=\"command:aux_source_directory\">aux_source_directory</h1> <p id=\"aux-source-directory\">Find all source files in a directory.</p> <pre data-language=\"python\">aux_source_directory(&lt;dir&gt; &lt;variable&gt;)\n</pre> <p>Collects the names of all the source files in the specified directory and stores the list in the <code>&lt;variable&gt;</code> provided. This command is intended to be used by projects that use explicit template instantiation. Template instantiation files can be stored in a “Templates” subdirectory and collected automatically using this command to avoid manually listing all instantiations.</p> <p>It is tempting to use this command to avoid writing the list of source files for a library or executable target. While this seems to work, there is no way for CMake to generate a build system that knows when a new source file has been added. Normally the generated build system knows when it needs to rerun CMake because the CMakeLists.txt file is modified to add a new source. When the source is just added to the directory without modifying this file, one would have to manually rerun CMake to generate a build system incorporating the new file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/aux_source_directory.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/aux_source_directory.html</a>\n  </p>\n</div>\n","command/cmake_host_system_information":"<h1 id=\"command:cmake_host_system_information\">cmake_host_system_information</h1> <p id=\"cmake-host-system-information\">Query host system specific information.</p> <pre data-language=\"python\">cmake_host_system_information(RESULT &lt;variable&gt; QUERY &lt;key&gt; ...)\n</pre> <p>Queries system information of the host system on which cmake runs. One or more <code>&lt;key&gt;</code> can be provided to select the information to be queried. The list of queried values is stored in <code>&lt;variable&gt;</code>.</p> <p><code>&lt;key&gt;</code> can be one of the following values:</p> <pre data-language=\"python\">NUMBER_OF_LOGICAL_CORES   = Number of logical cores.\nNUMBER_OF_PHYSICAL_CORES  = Number of physical cores.\nHOSTNAME                  = Hostname.\nFQDN                      = Fully qualified domain name.\nTOTAL_VIRTUAL_MEMORY      = Total virtual memory in megabytes.\nAVAILABLE_VIRTUAL_MEMORY  = Available virtual memory in megabytes.\nTOTAL_PHYSICAL_MEMORY     = Total physical memory in megabytes.\nAVAILABLE_PHYSICAL_MEMORY = Available physical memory in megabytes.\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/cmake_host_system_information.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/cmake_host_system_information.html</a>\n  </p>\n</div>\n","command/cmake_parse_arguments":"<h1 id=\"command:cmake_parse_arguments\">cmake_parse_arguments</h1> <p id=\"cmake-parse-arguments\"><code>cmake_parse_arguments</code> is intended to be used in macros or functions for parsing the arguments given to that macro or function. It processes the arguments and defines a set of variables which hold the values of the respective options.</p> <pre data-language=\"python\">cmake_parse_arguments(&lt;prefix&gt; &lt;options&gt; &lt;one_value_keywords&gt;\n                      &lt;multi_value_keywords&gt; args...)\n</pre> <p>The <code>&lt;options&gt;</code> argument contains all options for the respective macro, i.e. keywords which can be used when calling the macro without any value following, like e.g. the <code>OPTIONAL</code> keyword of the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install()</code></a> command.</p> <p>The <code>&lt;one_value_keywords&gt;</code> argument contains all keywords for this macro which are followed by one value, like e.g. <code>DESTINATION</code> keyword of the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install()</code></a> command.</p> <p>The <code>&lt;multi_value_keywords&gt;</code> argument contains all keywords for this macro which can be followed by more than one value, like e.g. the <code>TARGETS</code> or <code>FILES</code> keywords of the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-2-command:install\"><code>install()</code></a> command.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">All keywords shall be unique. I.e. every keyword shall only be specified once in either <code>&lt;options&gt;</code>, <code>&lt;one_value_keywords&gt;</code> or <code>&lt;multi_value_keywords&gt;</code>. A warning will be emitted if uniqueness is violated.</p> </div> <p>When done, <code>cmake_parse_arguments</code> will have defined for each of the keywords listed in <code>&lt;options&gt;</code>, <code>&lt;one_value_keywords&gt;</code> and <code>&lt;multi_value_keywords&gt;</code> a variable composed of the given <code>&lt;prefix&gt;</code> followed by <code>\"_\"</code> and the name of the respective keyword. These variables will then hold the respective value from the argument list. For the <code>&lt;options&gt;</code> keywords this will be <code>TRUE</code> or <code>FALSE</code>.</p> <p>All remaining arguments are collected in a variable <code>&lt;prefix&gt;_UNPARSED_ARGUMENTS</code>, this can be checked afterwards to see whether your macro was called with unrecognized parameters.</p> <p>As an example here a <code>my_install()</code> macro, which takes similar arguments as the real <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-3-command:install\"><code>install()</code></a> command:</p> <pre data-language=\"cmake\">function(MY_INSTALL)\n    set(options OPTIONAL FAST)\n    set(oneValueArgs DESTINATION RENAME)\n    set(multiValueArgs TARGETS CONFIGURATIONS)\n    cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\"\n                          \"${multiValueArgs}\" ${ARGN} )\n\n    # ...\n</pre> <p>Assume <code>my_install()</code> has been called like this:</p> <pre data-language=\"cmake\">my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\n</pre> <p>After the <code>cmake_parse_arguments</code> call the macro will have set the following variables:</p> <pre data-language=\"python\">MY_INSTALL_OPTIONAL = TRUE\nMY_INSTALL_FAST = FALSE (was not used in call to my_install)\nMY_INSTALL_DESTINATION = \"bin\"\nMY_INSTALL_RENAME = \"\" (was not used)\nMY_INSTALL_TARGETS = \"foo;bar\"\nMY_INSTALL_CONFIGURATIONS = \"\" (was not used)\nMY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (nothing expected after \"OPTIONAL\")\n</pre> <p>You can then continue and process these variables.</p> <p>Keywords terminate lists of values, e.g. if directly after a one_value_keyword another recognized keyword follows, this is interpreted as the beginning of the new option. E.g. <code>my_install(TARGETS foo DESTINATION OPTIONAL)</code> would result in <code>MY_INSTALL_DESTINATION</code> set to <code>\"OPTIONAL\"</code>, but as <code>OPTIONAL</code> is a keyword itself <code>MY_INSTALL_DESTINATION</code> will be empty and <code>MY_INSTALL_OPTIONAL</code> will therefore be set to <code>TRUE</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/cmake_parse_arguments.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/cmake_parse_arguments.html</a>\n  </p>\n</div>\n","command/configure_file":"<h1 id=\"command:configure_file\">configure_file</h1> <p id=\"configure-file\">Copy a file to another location and modify its contents.</p> <pre data-language=\"python\">configure_file(&lt;input&gt; &lt;output&gt;\n               [COPYONLY] [ESCAPE_QUOTES] [@ONLY]\n               [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])\n</pre> <p>Copies an <code>&lt;input&gt;</code> file to an <code>&lt;output&gt;</code> file and substitutes variable values referenced as <code>@VAR@</code> or <code>${VAR}</code> in the input file content. Each variable reference will be replaced with the current value of the variable, or the empty string if the variable is not defined. Furthermore, input lines of the form:</p> <pre data-language=\"python\">#cmakedefine VAR ...\n</pre> <p>will be replaced with either:</p> <pre data-language=\"python\">#define VAR ...\n</pre> <p>or:</p> <pre data-language=\"python\">/* #undef VAR */\n</pre> <p>depending on whether <code>VAR</code> is set in CMake to any value not considered a false constant by the <a class=\"reference internal\" href=\"if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> command. The ”...” content on the line after the variable name, if any, is processed as above. Input file lines of the form <code>#cmakedefine01 VAR</code> will be replaced with either <code>#define VAR 1</code> or <code>#define VAR 0</code> similarly.</p> <p>If the input file is modified the build system will re-run CMake to re-configure the file and generate the build system again.</p> <p>The arguments are:</p> <dl class=\"docutils\"> <dt><code>&lt;input&gt;</code></dt> <dd>Path to the input file. A relative path is treated with respect to the value of <a class=\"reference internal\" href=\"../variable/cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR\" title=\"CMAKE_CURRENT_SOURCE_DIR\" id=\"index-0-variable:CMAKE_CURRENT_SOURCE_DIR\"><code>CMAKE_CURRENT_SOURCE_DIR</code></a>. The input path must be a file, not a directory.</dd> <dt><code>&lt;output&gt;</code></dt> <dd>Path to the output file or directory. A relative path is treated with respect to the value of <a class=\"reference internal\" href=\"../variable/cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR\" title=\"CMAKE_CURRENT_BINARY_DIR\" id=\"index-0-variable:CMAKE_CURRENT_BINARY_DIR\"><code>CMAKE_CURRENT_BINARY_DIR</code></a>. If the path names an existing directory the output file is placed in that directory with the same file name as the input file.</dd> <dt><code>COPYONLY</code></dt> <dd>Copy the file without replacing any variable references or other content. This option may not be used with <code>NEWLINE_STYLE</code>.</dd> <dt><code>ESCAPE_QUOTES</code></dt> <dd>Escape any substituted quotes with backslashes (C-style).</dd> <dt><code>@ONLY</code></dt> <dd>Restrict variable replacement to references of the form <code>@VAR@</code>. This is useful for configuring scripts that use <code>${VAR}</code> syntax.</dd> <dt><code>NEWLINE_STYLE &lt;style&gt;</code></dt> <dd>Specify the newline style for the output file. Specify <code>UNIX</code> or <code>LF</code> for <code>\\n</code> newlines, or specify <code>DOS</code>, <code>WIN32</code>, or <code>CRLF</code> for <code>\\r\\n</code> newlines. This option may not be used with <code>COPYONLY</code>.</dd> </dl>  <h2 id=\"example\">Example</h2> <p>Consider a source tree containing a <code>foo.h.in</code> file:</p> <pre data-language=\"c\">#cmakedefine FOO_ENABLE\n#cmakedefine FOO_STRING \"@FOO_STRING@\"\n</pre> <p>An adjacent <code>CMakeLists.txt</code> may use <code>configure_file</code> to configure the header:</p> <pre data-language=\"cmake\">option(FOO_ENABLE \"Enable Foo\" ON)\nif(FOO_ENABLE)\n  set(FOO_STRING \"foo\")\nendif()\nconfigure_file(foo.h.in foo.h @ONLY)\n</pre> <p>This creates a <code>foo.h</code> in the build directory corresponding to this source directory. If the <code>FOO_ENABLE</code> option is on, the configured file will contain:</p> <pre data-language=\"c\">#define FOO_ENABLE\n#define FOO_STRING \"foo\"\n</pre> <p>Otherwise it will contain:</p> <pre data-language=\"c\">/* #undef FOO_ENABLE */\n/* #undef FOO_STRING */\n</pre> <p>One may then use the <a class=\"reference internal\" href=\"include_directories#command:include_directories\" title=\"include_directories\" id=\"index-0-command:include_directories\"><code>include_directories()</code></a> command to specify the output directory as an include directory:</p> <pre data-language=\"cmake\">include_directories(${CMAKE_CURRENT_BINARY_DIR})\n</pre> <p>so that sources may include the header as <code>#include &lt;foo.h&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/configure_file.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/configure_file.html</a>\n  </p>\n</div>\n","command/create_test_sourcelist":"<h1 id=\"command:create_test_sourcelist\">create_test_sourcelist</h1> <p id=\"create-test-sourcelist\">Create a test driver and source list for building test programs.</p> <pre data-language=\"python\">create_test_sourcelist(sourceListName driverName\n                       test1 test2 test3\n                       EXTRA_INCLUDE include.h\n                       FUNCTION function)\n</pre> <p>A test driver is a program that links together many small tests into a single executable. This is useful when building static executables with large libraries to shrink the total required size. The list of source files needed to build the test driver will be in <code>sourceListName</code>. <code>driverName</code> is the name of the test driver program. The rest of the arguments consist of a list of test source files, can be semicolon separated. Each test source file should have a function in it that is the same name as the file with no extension (foo.cxx should have int foo(int, char*[]);) <code>driverName</code> will be able to call each of the tests by name on the command line. If <code>EXTRA_INCLUDE</code> is specified, then the next argument is included into the generated file. If <code>FUNCTION</code> is specified, then the next argument is taken as a function name that is passed a pointer to ac and av. This can be used to add extra command line processing to each test. The <code>CMAKE_TESTDRIVER_BEFORE_TESTMAIN</code> cmake variable can be set to have code that will be placed directly before calling the test main function. <code>CMAKE_TESTDRIVER_AFTER_TESTMAIN</code> can be set to have code that will be placed directly after the call to the test main function.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/create_test_sourcelist.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/create_test_sourcelist.html</a>\n  </p>\n</div>\n","command/define_property":"<h1 id=\"command:define_property\">define_property</h1> <p id=\"define-property\">Define and document custom properties.</p> <pre data-language=\"python\">define_property(&lt;GLOBAL | DIRECTORY | TARGET | SOURCE |\n                 TEST | VARIABLE | CACHED_VARIABLE&gt;\n                 PROPERTY &lt;name&gt; [INHERITED]\n                 BRIEF_DOCS &lt;brief-doc&gt; [docs...]\n                 FULL_DOCS &lt;full-doc&gt; [docs...])\n</pre> <p>Define one property in a scope for use with the <a class=\"reference internal\" href=\"set_property#command:set_property\" title=\"set_property\" id=\"index-0-command:set_property\"><code>set_property()</code></a> and <a class=\"reference internal\" href=\"get_property#command:get_property\" title=\"get_property\" id=\"index-0-command:get_property\"><code>get_property()</code></a> commands. This is primarily useful to associate documentation with property names that may be retrieved with the <a class=\"reference internal\" href=\"get_property#command:get_property\" title=\"get_property\" id=\"index-1-command:get_property\"><code>get_property()</code></a> command. The first argument determines the kind of scope in which the property should be used. It must be one of the following:</p> <pre data-language=\"python\">GLOBAL    = associated with the global namespace\nDIRECTORY = associated with one directory\nTARGET    = associated with one target\nSOURCE    = associated with one source file\nTEST      = associated with a test named with add_test\nVARIABLE  = documents a CMake language variable\nCACHED_VARIABLE = documents a CMake cache variable\n</pre> <p>Note that unlike <a class=\"reference internal\" href=\"set_property#command:set_property\" title=\"set_property\" id=\"index-1-command:set_property\"><code>set_property()</code></a> and <a class=\"reference internal\" href=\"get_property#command:get_property\" title=\"get_property\" id=\"index-2-command:get_property\"><code>get_property()</code></a> no actual scope needs to be given; only the kind of scope is important.</p> <p>The required <code>PROPERTY</code> option is immediately followed by the name of the property being defined.</p> <p>If the <code>INHERITED</code> option then the <a class=\"reference internal\" href=\"get_property#command:get_property\" title=\"get_property\" id=\"index-3-command:get_property\"><code>get_property()</code></a> command will chain up to the next higher scope when the requested property is not set in the scope given to the command. <code>DIRECTORY</code> scope chains to <code>GLOBAL</code>. <code>TARGET</code>, <code>SOURCE</code>, and <code>TEST</code> chain to <code>DIRECTORY</code>.</p> <p>The <code>BRIEF_DOCS</code> and <code>FULL_DOCS</code> options are followed by strings to be associated with the property as its brief and full documentation. Corresponding options to the <a class=\"reference internal\" href=\"get_property#command:get_property\" title=\"get_property\" id=\"index-4-command:get_property\"><code>get_property()</code></a> command will retrieve the documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/define_property.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/define_property.html</a>\n  </p>\n</div>\n","command/enable_testing":"<h1 id=\"command:enable_testing\">enable_testing</h1> <p id=\"enable-testing\">Enable testing for current directory and below.</p> <pre data-language=\"python\">enable_testing()\n</pre> <p>Enables testing for this directory and below. See also the <a class=\"reference internal\" href=\"add_test#command:add_test\" title=\"add_test\" id=\"index-0-command:add_test\"><code>add_test()</code></a> command. Note that ctest expects to find a test file in the build directory root. Therefore, this command should be in the source directory root.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/enable_testing.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/enable_testing.html</a>\n  </p>\n</div>\n","command/add_custom_command":"<h1 id=\"command:add_custom_command\">add_custom_command</h1> <p id=\"add-custom-command\">Add a custom build rule to the generated build system.</p> <p>There are two main signatures for <code>add_custom_command</code>.</p>  <h2 id=\"generating-files\">Generating Files</h2> <p>The first signature is for adding a custom command to produce an output:</p> <pre data-language=\"python\">add_custom_command(OUTPUT output1 [output2 ...]\n                   COMMAND command1 [ARGS] [args1...]\n                   [COMMAND command2 [ARGS] [args2...] ...]\n                   [MAIN_DEPENDENCY depend]\n                   [DEPENDS [depends...]]\n                   [BYPRODUCTS [files...]]\n                   [IMPLICIT_DEPENDS &lt;lang1&gt; depend1\n                                    [&lt;lang2&gt; depend2] ...]\n                   [WORKING_DIRECTORY dir]\n                   [COMMENT comment]\n                   [VERBATIM] [APPEND] [USES_TERMINAL])\n</pre> <p>This defines a command to generate specified <code>OUTPUT</code> file(s). A target created in the same directory (<code>CMakeLists.txt</code> file) that specifies any output of the custom command as a source file is given a rule to generate the file using the command at build time. Do not list the output in more than one independent target that may build in parallel or the two instances of the rule may conflict (instead use the <a class=\"reference internal\" href=\"add_custom_target#command:add_custom_target\" title=\"add_custom_target\" id=\"index-0-command:add_custom_target\"><code>add_custom_target()</code></a> command to drive the command and make the other targets depend on that one). In makefile terms this creates a new target in the following form:</p> <pre data-language=\"python\">OUTPUT: MAIN_DEPENDENCY DEPENDS\n        COMMAND\n</pre> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>APPEND</code></dt> <dd>Append the <code>COMMAND</code> and <code>DEPENDS</code> option values to the custom command for the first output specified. There must have already been a previous call to this command with the same output. The <code>COMMENT</code>, <code>MAIN_DEPENDENCY</code>, and <code>WORKING_DIRECTORY</code> options are currently ignored when APPEND is given, but may be used in the future.</dd> <dt><code>BYPRODUCTS</code></dt> <dd>\n<p class=\"first\">Specify the files the command is expected to produce but whose modification time may or may not be newer than the dependencies. If a byproduct name is a relative path it will be interpreted relative to the build tree directory corresponding to the current source directory. Each byproduct file will be marked with the <a class=\"reference internal\" href=\"../prop_sf/generated#prop_sf:GENERATED\" title=\"GENERATED\" id=\"index-0-prop_sf:GENERATED\"><code>GENERATED</code></a> source file property automatically.</p> <p>Explicit specification of byproducts is supported by the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a> generator to tell the <code>ninja</code> build tool how to regenerate byproducts when they are missing. It is also useful when other build rules (e.g. custom commands) depend on the byproducts. Ninja requires a build rule for any generated file on which another rule depends even if there are order-only dependencies to ensure the byproducts will be available before their dependents build.</p> <p class=\"last\">The <code>BYPRODUCTS</code> option is ignored on non-Ninja generators except to mark byproducts <code>GENERATED</code>.</p> </dd> <dt><code>COMMAND</code></dt> <dd>\n<p class=\"first\">Specify the command-line(s) to execute at build time. If more than one <code>COMMAND</code> is specified they will be executed in order, but <em>not</em> necessarily composed into a stateful shell or batch script. (To run a full script, use the <a class=\"reference internal\" href=\"configure_file#command:configure_file\" title=\"configure_file\" id=\"index-0-command:configure_file\"><code>configure_file()</code></a> command or the <a class=\"reference internal\" href=\"file#command:file\" title=\"file\" id=\"index-0-command:file\"><code>file(GENERATE)</code></a> command to create it, and then specify a <code>COMMAND</code> to launch it.) The optional <code>ARGS</code> argument is for backward compatibility and will be ignored.</p> <p>If <code>COMMAND</code> specifies an executable target (created by the <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> command) it will automatically be replaced by the location of the executable created at build time. (Use the <code>TARGET_FILE</code> <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expression</code></a> to reference an executable later in the command line.) Additionally a target-level dependency will be added so that the executable target will be built before any target using this custom command. However this does NOT add a file-level dependency that would cause the custom command to re-run whenever the executable is recompiled.</p> <p class=\"last\">Arguments to <code>COMMAND</code> may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-1-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>. References to target names in generator expressions imply target-level dependencies, but NOT file-level dependencies. List target names with the <code>DEPENDS</code> option to add file-level dependencies.</p> </dd> <dt><code>COMMENT</code></dt> <dd>Display the given message before the commands are executed at build time.</dd> <dt><code>DEPENDS</code></dt> <dd>\n<p class=\"first\">Specify files on which the command depends. If any dependency is an <code>OUTPUT</code> of another custom command in the same directory (<code>CMakeLists.txt</code> file) CMake automatically brings the other custom command into the target in which this command is built. If <code>DEPENDS</code> is not specified the command will run whenever the <code>OUTPUT</code> is missing; if the command does not actually create the <code>OUTPUT</code> then the rule will always run. If <code>DEPENDS</code> specifies any target (created by the <a class=\"reference internal\" href=\"add_custom_target#command:add_custom_target\" title=\"add_custom_target\" id=\"index-1-command:add_custom_target\"><code>add_custom_target()</code></a>, <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-1-command:add_executable\"><code>add_executable()</code></a>, or <a class=\"reference internal\" href=\"add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> command) a target-level dependency is created to make sure the target is built before any target using this custom command. Additionally, if the target is an executable or library a file-level dependency is created to cause the custom command to re-run whenever the target is recompiled.</p> <p class=\"last\">Arguments to <code>DEPENDS</code> may use <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-2-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a>.</p> </dd> <dt><code>IMPLICIT_DEPENDS</code></dt> <dd>Request scanning of implicit dependencies of an input file. The language given specifies the programming language whose corresponding dependency scanner should be used. Currently only <code>C</code> and <code>CXX</code> language scanners are supported. The language has to be specified for every file in the <code>IMPLICIT_DEPENDS</code> list. Dependencies discovered from the scanning are added to those of the custom command at build time. Note that the <code>IMPLICIT_DEPENDS</code> option is currently supported only for Makefile generators and will be ignored by other generators.</dd> <dt><code>MAIN_DEPENDENCY</code></dt> <dd>Specify the primary input source file to the command. This is treated just like any value given to the <code>DEPENDS</code> option but also suggests to Visual Studio generators where to hang the custom command. At most one custom command may specify a given source file as its main dependency.</dd> <dt><code>OUTPUT</code></dt> <dd>Specify the output files the command is expected to produce. If an output name is a relative path it will be interpreted relative to the build tree directory corresponding to the current source directory. Each output file will be marked with the <a class=\"reference internal\" href=\"../prop_sf/generated#prop_sf:GENERATED\" title=\"GENERATED\" id=\"index-1-prop_sf:GENERATED\"><code>GENERATED</code></a> source file property automatically. If the output of the custom command is not actually created as a file on disk it should be marked with the <a class=\"reference internal\" href=\"../prop_sf/symbolic#prop_sf:SYMBOLIC\" title=\"SYMBOLIC\" id=\"index-0-prop_sf:SYMBOLIC\"><code>SYMBOLIC</code></a> source file property.</dd> <dt><code>USES_TERMINAL</code></dt> <dd>The command will be given direct access to the terminal if possible. With the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-1-generator:Ninja\"><code>Ninja</code></a> generator, this places the command in the <code>console</code> <a class=\"reference internal\" href=\"../prop_gbl/job_pools#prop_gbl:JOB_POOLS\" title=\"JOB_POOLS\" id=\"index-0-prop_gbl:JOB_POOLS\"><code>pool</code></a>.</dd> <dt><code>VERBATIM</code></dt> <dd>All arguments to the commands will be escaped properly for the build tool so that the invoked command receives each argument unchanged. Note that one level of escapes is still used by the CMake language processor before add_custom_command even sees the arguments. Use of <code>VERBATIM</code> is recommended as it enables correct behavior. When <code>VERBATIM</code> is not given the behavior is platform specific because there is no protection of tool-specific special characters.</dd> <dt><code>WORKING_DIRECTORY</code></dt> <dd>Execute the command with the given current working directory. If it is a relative path it will be interpreted relative to the build tree directory corresponding to the current source directory.</dd> </dl>   <h2 id=\"build-events\">Build Events</h2> <p>The second signature adds a custom command to a target such as a library or executable. This is useful for performing an operation before or after building the target. The command becomes part of the target and will only execute when the target itself is built. If the target is already built, the command will not execute.</p> <pre data-language=\"python\">add_custom_command(TARGET &lt;target&gt;\n                   PRE_BUILD | PRE_LINK | POST_BUILD\n                   COMMAND command1 [ARGS] [args1...]\n                   [COMMAND command2 [ARGS] [args2...] ...]\n                   [BYPRODUCTS [files...]]\n                   [WORKING_DIRECTORY dir]\n                   [COMMENT comment]\n                   [VERBATIM] [USES_TERMINAL])\n</pre> <p>This defines a new command that will be associated with building the specified <code>&lt;target&gt;</code>. The <code>&lt;target&gt;</code> must be defined in the current directory; targets defined in other directories may not be specified.</p> <p>When the command will happen is determined by which of the following is specified:</p> <dl class=\"docutils\"> <dt><code>PRE_BUILD</code></dt> <dd>Run before any other rules are executed within the target. This is supported only on Visual Studio 7 or later. For all other generators <code>PRE_BUILD</code> will be treated as <code>PRE_LINK</code>.</dd> <dt><code>PRE_LINK</code></dt> <dd>Run after sources have been compiled but before linking the binary or running the librarian or archiver tool of a static library. This is not defined for targets created by the <a class=\"reference internal\" href=\"add_custom_target#command:add_custom_target\" title=\"add_custom_target\" id=\"index-2-command:add_custom_target\"><code>add_custom_target()</code></a> command.</dd> <dt><code>POST_BUILD</code></dt> <dd>Run after all other rules within the target have been executed.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/add_custom_command.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/add_custom_command.html</a>\n  </p>\n</div>\n","command/execute_process":"<h1 id=\"command:execute_process\">execute_process</h1> <p id=\"execute-process\">Execute one or more child processes.</p> <pre data-language=\"cmake\">execute_process(COMMAND &lt;cmd1&gt; [args1...]]\n                [COMMAND &lt;cmd2&gt; [args2...] [...]]\n                [WORKING_DIRECTORY &lt;directory&gt;]\n                [TIMEOUT &lt;seconds&gt;]\n                [RESULT_VARIABLE &lt;variable&gt;]\n                [OUTPUT_VARIABLE &lt;variable&gt;]\n                [ERROR_VARIABLE &lt;variable&gt;]\n                [INPUT_FILE &lt;file&gt;]\n                [OUTPUT_FILE &lt;file&gt;]\n                [ERROR_FILE &lt;file&gt;]\n                [OUTPUT_QUIET]\n                [ERROR_QUIET]\n                [OUTPUT_STRIP_TRAILING_WHITESPACE]\n                [ERROR_STRIP_TRAILING_WHITESPACE])\n</pre> <p>Runs the given sequence of one or more commands with the standard output of each process piped to the standard input of the next. A single standard error pipe is used for all processes.</p> <p>Options:</p> <dl class=\"docutils\"> <dt><code>COMMAND</code></dt> <dd>\n<p class=\"first\">A child process command line.</p> <p class=\"last\">CMake executes the child process using operating system APIs directly. All arguments are passed VERBATIM to the child process. No intermediate shell is used, so shell operators such as <code>&gt;</code> are treated as normal arguments. (Use the <code>INPUT_*</code>, <code>OUTPUT_*</code>, and <code>ERROR_*</code> options to redirect stdin, stdout, and stderr.)</p> </dd> <dt><code>WORKING_DIRECTORY</code></dt> <dd>The named directory will be set as the current working directory of the child processes.</dd> <dt><code>TIMEOUT</code></dt> <dd>The child processes will be terminated if they do not finish in the specified number of seconds (fractions are allowed).</dd> <dt><code>RESULT_VARIABLE</code></dt> <dd>The variable will be set to contain the result of running the processes. This will be an integer return code from the last child or a string describing an error condition.</dd> <dt>\n<code>OUTPUT_VARIABLE</code>, <code>ERROR_VARIABLE</code>\n</dt> <dd>The variable named will be set with the contents of the standard output and standard error pipes, respectively. If the same variable is named for both pipes their output will be merged in the order produced.</dd> <dt>\n<code>INPUT_FILE, OUTPUT_FILE</code>, <code>ERROR_FILE</code>\n</dt> <dd>The file named will be attached to the standard input of the first process, standard output of the last process, or standard error of all processes, respectively. If the same file is named for both output and error then it will be used for both.</dd> <dt>\n<code>OUTPUT_QUIET</code>, <code>ERROR_QUIET</code>\n</dt> <dd>The standard output or standard error results will be quietly ignored.</dd> </dl> <p>If more than one <code>OUTPUT_*</code> or <code>ERROR_*</code> option is given for the same pipe the precedence is not specified. If no <code>OUTPUT_*</code> or <code>ERROR_*</code> options are given the output will be shared with the corresponding pipes of the CMake process itself.</p> <p>The <a class=\"reference internal\" href=\"#command:execute_process\" title=\"execute_process\" id=\"index-0-command:execute_process\"><code>execute_process()</code></a> command is a newer more powerful version of <a class=\"reference internal\" href=\"exec_program#command:exec_program\" title=\"exec_program\" id=\"index-0-command:exec_program\"><code>exec_program()</code></a>, but the old command has been kept for compatibility. Both commands run while CMake is processing the project prior to build system generation. Use <a class=\"reference internal\" href=\"add_custom_target#command:add_custom_target\" title=\"add_custom_target\" id=\"index-0-command:add_custom_target\"><code>add_custom_target()</code></a> and <a class=\"reference internal\" href=\"add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-0-command:add_custom_command\"><code>add_custom_command()</code></a> to create custom commands that run at build time.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/execute_process.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/execute_process.html</a>\n  </p>\n</div>\n","command/fltk_wrap_ui":"<h1 id=\"command:fltk_wrap_ui\">fltk_wrap_ui</h1> <p id=\"fltk-wrap-ui\">Create FLTK user interfaces Wrappers.</p> <pre data-language=\"python\">fltk_wrap_ui(resultingLibraryName source1\n             source2 ... sourceN )\n</pre> <p>Produce .h and .cxx files for all the .fl and .fld files listed. The resulting .h and .cxx files will be added to a variable named <code>resultingLibraryName_FLTK_UI_SRCS</code> which should be added to your library.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/fltk_wrap_ui.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/fltk_wrap_ui.html</a>\n  </p>\n</div>\n","command/get_cmake_property":"<h1 id=\"command:get_cmake_property\">get_cmake_property</h1> <p id=\"get-cmake-property\">Get a property of the CMake instance.</p> <pre data-language=\"python\">get_cmake_property(VAR property)\n</pre> <p>Get a property from the CMake instance. The value of the property is stored in the variable <code>VAR</code>. If the property is not found, <code>VAR</code> will be set to “NOTFOUND”. See the <a class=\"reference internal\" href=\"../manual/cmake-properties.7#manual:cmake-properties(7)\" title=\"cmake-properties(7)\" id=\"index-0-manual:cmake-properties(7)\"><code>cmake-properties(7)</code></a> manual for available properties.</p> <p>See also the more general <a class=\"reference internal\" href=\"get_property#command:get_property\" title=\"get_property\" id=\"index-0-command:get_property\"><code>get_property()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/get_cmake_property.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/get_cmake_property.html</a>\n  </p>\n</div>\n","command/find_file":"<h1 id=\"command:find_file\">find_file</h1> <p id=\"find-file\">A short-hand signature is:</p> <pre class=\"literal-block\">\nfind_file (&lt;VAR&gt; name1 [path1 path2 ...])\n</pre> <p>The general signature is:</p> <pre class=\"literal-block\">\nfind_file (\n          &lt;VAR&gt;\n          name | NAMES name1 [name2 ...]\n          [HINTS path1 [path2 ... ENV var]]\n          [PATHS path1 [path2 ... ENV var]]\n          [PATH_SUFFIXES suffix1 [suffix2 ...]]\n          [DOC \"cache documentation string\"]\n          [NO_DEFAULT_PATH]\n          [NO_CMAKE_ENVIRONMENT_PATH]\n          [NO_CMAKE_PATH]\n          [NO_SYSTEM_ENVIRONMENT_PATH]\n          [NO_CMAKE_SYSTEM_PATH]\n          [CMAKE_FIND_ROOT_PATH_BOTH |\n           ONLY_CMAKE_FIND_ROOT_PATH |\n           NO_CMAKE_FIND_ROOT_PATH]\n         )\n</pre> <p>This command is used to find a full path to named file. A cache entry named by <code>&lt;VAR&gt;</code> is created to store the result of this command. If the full path to a file is found the result is stored in the variable and the search will not be repeated unless the variable is cleared. If nothing is found, the result will be <code>&lt;VAR&gt;-NOTFOUND</code>, and the search will be attempted again the next time find_file is invoked with the same variable.</p> <p>Options include:</p> <dl class=\"docutils\"> <dt><code>NAMES</code></dt> <dd>\n<p class=\"first\">Specify one or more possible names for the full path to a file.</p> <p class=\"last\">When using this to specify names with and without a version suffix, we recommend specifying the unversioned name first so that locally-built packages can be found before those provided by distributions.</p> </dd> <dt>\n<code>HINTS</code>, <code>PATHS</code>\n</dt> <dd>Specify directories to search in addition to the default locations. The <code>ENV var</code> sub-option reads paths from a system environment variable.</dd> <dt><code>PATH_SUFFIXES</code></dt> <dd>Specify additional subdirectories to check below each directory location otherwise considered.</dd> <dt><code>DOC</code></dt> <dd>Specify the documentation string for the <code>&lt;VAR&gt;</code> cache entry.</dd> </dl> <p>If <code>NO_DEFAULT_PATH</code> is specified, then no additional paths are added to the search. If <code>NO_DEFAULT_PATH</code> is not specified, the search process is as follows:</p> <ol class=\"arabic simple\"> <li>Search paths specified in cmake-specific cache variables. These are intended to be used on the command line with a <code>-DVAR=value</code>. This can be skipped if <code>NO_CMAKE_PATH</code> is passed.<ul> <li>\n<code>&lt;prefix&gt;/include/&lt;arch&gt;</code> if <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-3-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> is set, and <code>&lt;prefix&gt;/include</code> for each <code>&lt;prefix&gt;</code> in <a class=\"reference internal\" href=\"../variable/cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-2-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>\n</li> <li><a class=\"reference internal\" href=\"../variable/cmake_include_path#variable:CMAKE_INCLUDE_PATH\" title=\"CMAKE_INCLUDE_PATH\" id=\"index-1-variable:CMAKE_INCLUDE_PATH\"><code>CMAKE_INCLUDE_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_framework_path#variable:CMAKE_FRAMEWORK_PATH\" title=\"CMAKE_FRAMEWORK_PATH\" id=\"index-1-variable:CMAKE_FRAMEWORK_PATH\"><code>CMAKE_FRAMEWORK_PATH</code></a></li> </ul> </li> <li>Search paths specified in cmake-specific environment variables. These are intended to be set in the user’s shell configuration. This can be skipped if <code>NO_CMAKE_ENVIRONMENT_PATH</code> is passed.<ul> <li>\n<code>&lt;prefix&gt;/include/&lt;arch&gt;</code> if <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-4-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> is set, and <code>&lt;prefix&gt;/include</code> for each <code>&lt;prefix&gt;</code> in <a class=\"reference internal\" href=\"../variable/cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-3-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>\n</li> <li><a class=\"reference internal\" href=\"../variable/cmake_include_path#variable:CMAKE_INCLUDE_PATH\" title=\"CMAKE_INCLUDE_PATH\" id=\"index-2-variable:CMAKE_INCLUDE_PATH\"><code>CMAKE_INCLUDE_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_framework_path#variable:CMAKE_FRAMEWORK_PATH\" title=\"CMAKE_FRAMEWORK_PATH\" id=\"index-2-variable:CMAKE_FRAMEWORK_PATH\"><code>CMAKE_FRAMEWORK_PATH</code></a></li> </ul> </li> <li>Search the paths specified by the <code>HINTS</code> option. These should be paths computed by system introspection, such as a hint provided by the location of another item already found. Hard-coded guesses should be specified with the <code>PATHS</code> option.</li> <li>Search the standard system environment variables. This can be skipped if <code>NO_SYSTEM_ENVIRONMENT_PATH</code> is an argument.<ul> <li>Directories in <code>INCLUDE</code>, <code>&lt;prefix&gt;/include/&lt;arch&gt;</code> if <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-5-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> is set, and <code>&lt;prefix&gt;/include</code> for each <code>&lt;prefix&gt;/[s]bin</code> in <code>PATH</code>, and <code>&lt;entry&gt;/include</code> for other entries in <code>PATH</code>, and the directories in <code>PATH</code> itself.</li> </ul> </li> <li>Search cmake variables defined in the Platform files for the current system. This can be skipped if <code>NO_CMAKE_SYSTEM_PATH</code> is passed.<ul> <li>\n<code>&lt;prefix&gt;/include/&lt;arch&gt;</code> if <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-6-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> is set, and <code>&lt;prefix&gt;/include</code> for each <code>&lt;prefix&gt;</code> in <a class=\"reference internal\" href=\"../variable/cmake_system_prefix_path#variable:CMAKE_SYSTEM_PREFIX_PATH\" title=\"CMAKE_SYSTEM_PREFIX_PATH\" id=\"index-2-variable:CMAKE_SYSTEM_PREFIX_PATH\"><code>CMAKE_SYSTEM_PREFIX_PATH</code></a>\n</li> <li><a class=\"reference internal\" href=\"../variable/cmake_system_include_path#variable:CMAKE_SYSTEM_INCLUDE_PATH\" title=\"CMAKE_SYSTEM_INCLUDE_PATH\" id=\"index-1-variable:CMAKE_SYSTEM_INCLUDE_PATH\"><code>CMAKE_SYSTEM_INCLUDE_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_system_framework_path#variable:CMAKE_SYSTEM_FRAMEWORK_PATH\" title=\"CMAKE_SYSTEM_FRAMEWORK_PATH\" id=\"index-1-variable:CMAKE_SYSTEM_FRAMEWORK_PATH\"><code>CMAKE_SYSTEM_FRAMEWORK_PATH</code></a></li> </ul> </li> <li>Search the paths specified by the PATHS option or in the short-hand version of the command. These are typically hard-coded guesses.</li> </ol> <p>On OS X the <a class=\"reference internal\" href=\"../variable/cmake_find_framework#variable:CMAKE_FIND_FRAMEWORK\" title=\"CMAKE_FIND_FRAMEWORK\" id=\"index-0-variable:CMAKE_FIND_FRAMEWORK\"><code>CMAKE_FIND_FRAMEWORK</code></a> and <a class=\"reference internal\" href=\"../variable/cmake_find_appbundle#variable:CMAKE_FIND_APPBUNDLE\" title=\"CMAKE_FIND_APPBUNDLE\" id=\"index-0-variable:CMAKE_FIND_APPBUNDLE\"><code>CMAKE_FIND_APPBUNDLE</code></a> variables determine the order of preference between Apple-style and unix-style package components.</p> <p>The CMake variable <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-0-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> specifies one or more directories to be prepended to all other search directories. This effectively “re-roots” the entire search under given locations. Paths which are descendants of the <a class=\"reference internal\" href=\"../variable/cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-0-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a> are excluded from this re-rooting, because that variable is always a path on the host system. By default the <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> is empty.</p> <p>The <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-0-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> variable can also be used to specify exactly one directory to use as a prefix. Setting <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-1-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> also has other effects. See the documentation for that variable for more.</p> <p>These variables are especially useful when cross-compiling to point to the root directory of the target environment and CMake will search there too. By default at first the directories listed in <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-2-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> are searched, then the <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-2-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> directory is searched, and then the non-rooted directories will be searched. The default behavior can be adjusted by setting <a class=\"reference internal\" href=\"../variable/cmake_find_root_path_mode_include#variable:CMAKE_FIND_ROOT_PATH_MODE_INCLUDE\" title=\"CMAKE_FIND_ROOT_PATH_MODE_INCLUDE\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH_MODE_INCLUDE\"><code>CMAKE_FIND_ROOT_PATH_MODE_INCLUDE</code></a>. This behavior can be manually overridden on a per-call basis using options:</p> <dl class=\"docutils\"> <dt><code>CMAKE_FIND_ROOT_PATH_BOTH</code></dt> <dd>Search in the order described above.</dd> <dt><code>NO_CMAKE_FIND_ROOT_PATH</code></dt> <dd>Do not use the <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-3-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> variable.</dd> <dt><code>ONLY_CMAKE_FIND_ROOT_PATH</code></dt> <dd>Search only the re-rooted directories and directories below <a class=\"reference internal\" href=\"../variable/cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-1-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a>.</dd> </dl> <p>The default search order is designed to be most-specific to least-specific for common use cases. Projects may override the order by simply calling the command multiple times and using the <code>NO_*</code> options:</p> <pre class=\"literal-block\">\nfind_file (&lt;VAR&gt; NAMES name PATHS paths... NO_DEFAULT_PATH)\nfind_file (&lt;VAR&gt; NAMES name)\n</pre> <p>Once one of the calls succeeds the result variable will be set and stored in the cache so that no call will search again.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/find_file.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/find_file.html</a>\n  </p>\n</div>\n","command/get_directory_property":"<h1 id=\"command:get_directory_property\">get_directory_property</h1> <p id=\"get-directory-property\">Get a property of <code>DIRECTORY</code> scope.</p> <pre data-language=\"python\">get_directory_property(&lt;variable&gt; [DIRECTORY &lt;dir&gt;] &lt;prop-name&gt;)\n</pre> <p>Store a property of directory scope in the named variable. If the property is not defined the empty-string is returned. The <code>DIRECTORY</code> argument specifies another directory from which to retrieve the property value. The specified directory must have already been traversed by CMake.</p> <pre data-language=\"python\">get_directory_property(&lt;variable&gt; [DIRECTORY &lt;dir&gt;]\n                       DEFINITION &lt;var-name&gt;)\n</pre> <p>Get a variable definition from a directory. This form is useful to get a variable definition from another directory.</p> <p>See also the more general <a class=\"reference internal\" href=\"get_property#command:get_property\" title=\"get_property\" id=\"index-0-command:get_property\"><code>get_property()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/get_directory_property.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/get_directory_property.html</a>\n  </p>\n</div>\n","command/file":"<h1 id=\"command:file\">file</h1> <p id=\"file\">File manipulation command.</p>  <pre data-language=\"python\">file(WRITE &lt;filename&gt; &lt;content&gt;...)\nfile(APPEND &lt;filename&gt; &lt;content&gt;...)\n</pre> <p>Write <code>&lt;content&gt;</code> into a file called <code>&lt;filename&gt;</code>. If the file does not exist, it will be created. If the file already exists, <code>WRITE</code> mode will overwrite it and <code>APPEND</code> mode will append to the end. (If the file is a build input, use the <a class=\"reference internal\" href=\"configure_file#command:configure_file\" title=\"configure_file\" id=\"index-0-command:configure_file\"><code>configure_file()</code></a> command to update the file only when its content changes.)</p>  <pre data-language=\"python\">file(READ &lt;filename&gt; &lt;variable&gt;\n     [OFFSET &lt;offset&gt;] [LIMIT &lt;max-in&gt;] [HEX])\n</pre> <p>Read content from a file called <code>&lt;filename&gt;</code> and store it in a <code>&lt;variable&gt;</code>. Optionally start from the given <code>&lt;offset&gt;</code> and read at most <code>&lt;max-in&gt;</code> bytes. The <code>HEX</code> option causes data to be converted to a hexadecimal representation (useful for binary data).</p>  <pre data-language=\"python\">file(STRINGS &lt;filename&gt; &lt;variable&gt; [&lt;options&gt;...])\n</pre> <p>Parse a list of ASCII strings from <code>&lt;filename&gt;</code> and store it in <code>&lt;variable&gt;</code>. Binary data in the file are ignored. Carriage return (<code>\\r</code>, CR) characters are ignored. The options are:</p> <dl class=\"docutils\"> <dt><code>LENGTH_MAXIMUM &lt;max-len&gt;</code></dt> <dd>Consider only strings of at most a given length.</dd> <dt><code>LENGTH_MINIMUM &lt;min-len&gt;</code></dt> <dd>Consider only strings of at least a given length.</dd> <dt><code>LIMIT_COUNT &lt;max-num&gt;</code></dt> <dd>Limit the number of distinct strings to be extracted.</dd> <dt><code>LIMIT_INPUT &lt;max-in&gt;</code></dt> <dd>Limit the number of input bytes to read from the file.</dd> <dt><code>LIMIT_OUTPUT &lt;max-out&gt;</code></dt> <dd>Limit the number of total bytes to store in the <code>&lt;variable&gt;</code>.</dd> <dt><code>NEWLINE_CONSUME</code></dt> <dd>Treat newline characters (<code>\\n</code>, LF) as part of string content instead of terminating at them.</dd> <dt><code>NO_HEX_CONVERSION</code></dt> <dd>Intel Hex and Motorola S-record files are automatically converted to binary while reading unless this option is given.</dd> <dt><code>REGEX &lt;regex&gt;</code></dt> <dd>Consider only strings that match the given regular expression.</dd> <dt><code>ENCODING &lt;encoding-type&gt;</code></dt> <dd>Consider strings of a given encoding. Currently supported encodings are: UTF-8, UTF-16LE, UTF-16BE, UTF-32LE, UTF-32BE. If the ENCODING option is not provided and the file has a Byte Order Mark, the ENCODING option will be defaulted to respect the Byte Order Mark.</dd> </dl> <p>For example, the code</p> <pre data-language=\"cmake\">file(STRINGS myfile.txt myfile)\n</pre> <p>stores a list in the variable <code>myfile</code> in which each item is a line from the input file.</p>  <pre data-language=\"python\">file(&lt;MD5|SHA1|SHA224|SHA256|SHA384|SHA512&gt; &lt;filename&gt; &lt;variable&gt;)\n</pre> <p>Compute a cryptographic hash of the content of <code>&lt;filename&gt;</code> and store it in a <code>&lt;variable&gt;</code>.</p>  <pre data-language=\"python\">file(GLOB &lt;variable&gt;\n     [LIST_DIRECTORIES true|false] [RELATIVE &lt;path&gt;]\n     [&lt;globbing-expressions&gt;...])\nfile(GLOB_RECURSE &lt;variable&gt; [FOLLOW_SYMLINKS]\n     [LIST_DIRECTORIES true|false] [RELATIVE &lt;path&gt;]\n     [&lt;globbing-expressions&gt;...])\n</pre> <p>Generate a list of files that match the <code>&lt;globbing-expressions&gt;</code> and store it into the <code>&lt;variable&gt;</code>. Globbing expressions are similar to regular expressions, but much simpler. If <code>RELATIVE</code> flag is specified, the results will be returned as relative paths to the given path. No specific order of results is defined. If order is important then sort the list explicitly (e.g. using the <a class=\"reference internal\" href=\"list#command:list\" title=\"list\" id=\"index-0-command:list\"><code>list(SORT)</code></a> command).</p> <p>By default <code>GLOB</code> lists directories - directories are omited in result if <code>LIST_DIRECTORIES</code> is set to false.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">We do not recommend using GLOB to collect a list of source files from your source tree. If no CMakeLists.txt file changes when a source is added or removed then the generated build system cannot know when to ask CMake to regenerate.</p> </div> <p>Examples of globbing expressions include:</p> <pre data-language=\"python\">*.cxx      - match all files with extension cxx\n*.vt?      - match all files with extension vta,...,vtz\nf[3-5].txt - match files f3.txt, f4.txt, f5.txt\n</pre> <p>The <code>GLOB_RECURSE</code> mode will traverse all the subdirectories of the matched directory and match the files. Subdirectories that are symlinks are only traversed if <code>FOLLOW_SYMLINKS</code> is given or policy <a class=\"reference internal\" href=\"../policy/cmp0009#policy:CMP0009\" title=\"CMP0009\" id=\"index-0-policy:CMP0009\"><code>CMP0009</code></a> is not set to <code>NEW</code>.</p> <p>By default <code>GLOB_RECURSE</code> omits directories from result list - setting <code>LIST_DIRECTORIES</code> to true adds directories to result list. If <code>FOLLOW_SYMLINKS</code> is given or policy <a class=\"reference internal\" href=\"../policy/cmp0009#policy:CMP0009\" title=\"CMP0009\" id=\"index-1-policy:CMP0009\"><code>CMP0009</code></a> is not set to <code>OLD</code> then <code>LIST_DIRECTORIES</code> treats symlinks as directories.</p> <p>Examples of recursive globbing include:</p> <pre data-language=\"python\">/dir/*.py  - match all python files in /dir and subdirectories\n</pre>  <pre data-language=\"python\">file(RENAME &lt;oldname&gt; &lt;newname&gt;)\n</pre> <p>Move a file or directory within a filesystem from <code>&lt;oldname&gt;</code> to <code>&lt;newname&gt;</code>, replacing the destination atomically.</p>  <pre data-language=\"python\">file(REMOVE [&lt;files&gt;...])\nfile(REMOVE_RECURSE [&lt;files&gt;...])\n</pre> <p>Remove the given files. The <code>REMOVE_RECURSE</code> mode will remove the given files and directories, also non-empty directories</p>  <pre data-language=\"python\">file(MAKE_DIRECTORY [&lt;directories&gt;...])\n</pre> <p>Create the given directories and their parents as needed.</p>  <pre data-language=\"python\">file(RELATIVE_PATH &lt;variable&gt; &lt;directory&gt; &lt;file&gt;)\n</pre> <p>Compute the relative path from a <code>&lt;directory&gt;</code> to a <code>&lt;file&gt;</code> and store it in the <code>&lt;variable&gt;</code>.</p>  <pre data-language=\"python\">file(TO_CMAKE_PATH \"&lt;path&gt;\" &lt;variable&gt;)\nfile(TO_NATIVE_PATH \"&lt;path&gt;\" &lt;variable&gt;)\n</pre> <p>The <code>TO_CMAKE_PATH</code> mode converts a native <code>&lt;path&gt;</code> into a cmake-style path with forward-slashes (<code>/</code>). The input can be a single path or a system search path like <code>$ENV{PATH}</code>. A search path will be converted to a cmake-style list separated by <code>;</code> characters.</p> <p>The <code>TO_NATIVE_PATH</code> mode converts a cmake-style <code>&lt;path&gt;</code> into a native path with platform-specific slashes (<code>\\</code> on Windows and <code>/</code> elsewhere).</p> <p>Always use double quotes around the <code>&lt;path&gt;</code> to be sure it is treated as a single argument to this command.</p>  <pre data-language=\"python\">file(DOWNLOAD &lt;url&gt; &lt;file&gt; [&lt;options&gt;...])\nfile(UPLOAD   &lt;file&gt; &lt;url&gt; [&lt;options&gt;...])\n</pre> <p>The <code>DOWNLOAD</code> mode downloads the given <code>&lt;url&gt;</code> to a local <code>&lt;file&gt;</code>. The <code>UPLOAD</code> mode uploads a local <code>&lt;file&gt;</code> to a given <code>&lt;url&gt;</code>.</p> <p>Options to both <code>DOWNLOAD</code> and <code>UPLOAD</code> are:</p> <dl class=\"docutils\"> <dt><code>INACTIVITY_TIMEOUT &lt;seconds&gt;</code></dt> <dd>Terminate the operation after a period of inactivity.</dd> <dt><code>LOG &lt;variable&gt;</code></dt> <dd>Store a human-readable log of the operation in a variable.</dd> <dt><code>SHOW_PROGRESS</code></dt> <dd>Print progress information as status messages until the operation is complete.</dd> <dt><code>STATUS &lt;variable&gt;</code></dt> <dd>Store the resulting status of the operation in a variable. The status is a <code>;</code> separated list of length 2. The first element is the numeric return value for the operation, and the second element is a string value for the error. A <code>0</code> numeric error means no error in the operation.</dd> <dt><code>TIMEOUT &lt;seconds&gt;</code></dt> <dd>Terminate the operation after a given total time has elapsed.</dd> </dl> <p>Additional options to <code>DOWNLOAD</code> are:</p> <p><code>EXPECTED_HASH ALGO=&lt;value&gt;</code></p> <blockquote> <div>Verify that the downloaded content hash matches the expected value, where <code>ALGO</code> is one of <code>MD5</code>, <code>SHA1</code>, <code>SHA224</code>, <code>SHA256</code>, <code>SHA384</code>, or <code>SHA512</code>. If it does not match, the operation fails with an error.</div>\n</blockquote> <dl class=\"docutils\"> <dt><code>EXPECTED_MD5 &lt;value&gt;</code></dt> <dd>Historical short-hand for <code>EXPECTED_HASH MD5=&lt;value&gt;</code>.</dd> <dt><code>TLS_VERIFY &lt;ON|OFF&gt;</code></dt> <dd>Specify whether to verify the server certificate for <code>https://</code> URLs. The default is to <em>not</em> verify.</dd> <dt><code>TLS_CAINFO &lt;file&gt;</code></dt> <dd>Specify a custom Certificate Authority file for <code>https://</code> URLs.</dd> </dl> <p>For <code>https://</code> URLs CMake must be built with OpenSSL support. <code>TLS/SSL</code> certificates are not checked by default. Set <code>TLS_VERIFY</code> to <code>ON</code> to check certificates and/or use <code>EXPECTED_HASH</code> to verify downloaded content. If neither <code>TLS</code> option is given CMake will check variables <code>CMAKE_TLS_VERIFY</code> and <code>CMAKE_TLS_CAINFO</code>, respectively.</p>  <pre data-language=\"python\">file(TIMESTAMP &lt;filename&gt; &lt;variable&gt; [&lt;format&gt;] [UTC])\n</pre> <p>Compute a string representation of the modification time of <code>&lt;filename&gt;</code> and store it in <code>&lt;variable&gt;</code>. Should the command be unable to obtain a timestamp variable will be set to the empty string (“”).</p> <p>See the <a class=\"reference internal\" href=\"string#command:string\" title=\"string\" id=\"index-0-command:string\"><code>string(TIMESTAMP)</code></a> command for documentation of the <code>&lt;format&gt;</code> and <code>UTC</code> options.</p>  <pre data-language=\"python\">file(GENERATE OUTPUT output-file\n     &lt;INPUT input-file|CONTENT content&gt;\n     [CONDITION expression])\n</pre> <p>Generate an output file for each build configuration supported by the current <a class=\"reference internal\" href=\"../manual/cmake-generators.7#manual:cmake-generators(7)\" title=\"cmake-generators(7)\" id=\"index-0-manual:cmake-generators(7)\"><code>CMake Generator</code></a>. Evaluate <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a> from the input content to produce the output content. The options are:</p> <dl class=\"docutils\"> <dt><code>CONDITION &lt;condition&gt;</code></dt> <dd>Generate the output file for a particular configuration only if the condition is true. The condition must be either <code>0</code> or <code>1</code> after evaluating generator expressions.</dd> <dt><code>CONTENT &lt;content&gt;</code></dt> <dd>Use the content given explicitly as input.</dd> <dt><code>INPUT &lt;input-file&gt;</code></dt> <dd>Use the content from a given file as input.</dd> <dt><code>OUTPUT &lt;output-file&gt;</code></dt> <dd>Specify the output file name to generate. Use generator expressions such as <code>$&lt;CONFIG&gt;</code> to specify a configuration-specific output file name. Multiple configurations may generate the same output file only if the generated content is identical. Otherwise, the <code>&lt;output-file&gt;</code> must evaluate to an unique name for each configuration.</dd> </dl> <p>Exactly one <code>CONTENT</code> or <code>INPUT</code> option must be given. A specific <code>OUTPUT</code> file may be named by at most one invocation of <code>file(GENERATE)</code>. Generated files are modified on subsequent cmake runs only if their content is changed.</p>  <pre data-language=\"python\">file(&lt;COPY|INSTALL&gt; &lt;files&gt;... DESTINATION &lt;dir&gt;\n     [FILE_PERMISSIONS &lt;permissions&gt;...]\n     [DIRECTORY_PERMISSIONS &lt;permissions&gt;...]\n     [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS]\n     [FILES_MATCHING]\n     [[PATTERN &lt;pattern&gt; | REGEX &lt;regex&gt;]\n      [EXCLUDE] [PERMISSIONS &lt;permissions&gt;...]] [...])\n</pre> <p>The <code>COPY</code> signature copies files, directories, and symlinks to a destination folder. Relative input paths are evaluated with respect to the current source directory, and a relative destination is evaluated with respect to the current build directory. Copying preserves input file timestamps, and optimizes out a file if it exists at the destination with the same timestamp. Copying preserves input permissions unless explicit permissions or <code>NO_SOURCE_PERMISSIONS</code> are given (default is <code>USE_SOURCE_PERMISSIONS</code>).</p> <p>See the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(DIRECTORY)</code></a> command for documentation of permissions, <code>FILES_MATCHING</code>, <code>PATTERN</code>, <code>REGEX</code>, and <code>EXCLUDE</code> options. Copying directories preserves the structure of their content even if options are used to select a subset of files.</p> <p>The <code>INSTALL</code> signature differs slightly from <code>COPY</code>: it prints status messages (subject to the <a class=\"reference internal\" href=\"../variable/cmake_install_message#variable:CMAKE_INSTALL_MESSAGE\" title=\"CMAKE_INSTALL_MESSAGE\" id=\"index-0-variable:CMAKE_INSTALL_MESSAGE\"><code>CMAKE_INSTALL_MESSAGE</code></a> variable), and <code>NO_SOURCE_PERMISSIONS</code> is default. Installation scripts generated by the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install()</code></a> command use this signature (with some undocumented options for internal use).</p>  <pre data-language=\"python\">file(LOCK &lt;path&gt; [DIRECTORY] [RELEASE]\n     [GUARD &lt;FUNCTION|FILE|PROCESS&gt;]\n     [RESULT_VARIABLE &lt;variable&gt;]\n     [TIMEOUT &lt;seconds&gt;])\n</pre> <p>Lock a file specified by <code>&lt;path&gt;</code> if no <code>DIRECTORY</code> option present and file <code>&lt;path&gt;/cmake.lock</code> otherwise. File will be locked for scope defined by <code>GUARD</code> option (default value is <code>PROCESS</code>). <code>RELEASE</code> option can be used to unlock file explicitly. If option <code>TIMEOUT</code> is not specified CMake will wait until lock succeed or until fatal error occurs. If <code>TIMEOUT</code> is set to <code>0</code> lock will be tried once and result will be reported immediately. If <code>TIMEOUT</code> is not <code>0</code> CMake will try to lock file for the period specified by <code>&lt;seconds&gt;</code> value. Any errors will be interpreted as fatal if there is no <code>RESULT_VARIABLE</code> option. Otherwise result will be stored in <code>&lt;variable&gt;</code> and will be <code>0</code> on success or error message on failure.</p> <p>Note that lock is advisory - there is no guarantee that other processes will respect this lock, i.e. lock synchronize two or more CMake instances sharing some modifiable resources. Similar logic applied to <code>DIRECTORY</code> option - locking parent directory doesn’t prevent other <code>LOCK</code> commands to lock any child directory or file.</p> <p>Trying to lock file twice is not allowed. Any intermediate directories and file itself will be created if they not exist. <code>GUARD</code> and <code>TIMEOUT</code> options ignored on <code>RELEASE</code> operation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/file.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/file.html</a>\n  </p>\n</div>\n","command/get_filename_component":"<h1 id=\"command:get_filename_component\">get_filename_component</h1> <p id=\"get-filename-component\">Get a specific component of a full filename.</p>  <pre data-language=\"python\">get_filename_component(&lt;VAR&gt; &lt;FileName&gt; &lt;COMP&gt; [CACHE])\n</pre> <p>Set <code>&lt;VAR&gt;</code> to a component of <code>&lt;FileName&gt;</code>, where <code>&lt;COMP&gt;</code> is one of:</p> <pre data-language=\"python\">DIRECTORY = Directory without file name\nNAME      = File name without directory\nEXT       = File name longest extension (.b.c from d/a.b.c)\nNAME_WE   = File name without directory or longest extension\nPATH      = Legacy alias for DIRECTORY (use for CMake &lt;= 2.8.11)\n</pre> <p>Paths are returned with forward slashes and have no trailing slashes. The longest file extension is always considered. If the optional <code>CACHE</code> argument is specified, the result variable is added to the cache.</p>  <pre data-language=\"python\">get_filename_component(&lt;VAR&gt; &lt;FileName&gt;\n                       &lt;COMP&gt; [BASE_DIR &lt;BASE_DIR&gt;]\n                       [CACHE])\n</pre> <p>Set <code>&lt;VAR&gt;</code> to the absolute path of <code>&lt;FileName&gt;</code>, where <code>&lt;COMP&gt;</code> is one of:</p> <pre data-language=\"python\">ABSOLUTE  = Full path to file\nREALPATH  = Full path to existing file with symlinks resolved\n</pre> <p>If the provided <code>&lt;FileName&gt;</code> is a relative path, it is evaluated relative to the given base directory <code>&lt;BASE_DIR&gt;</code>. If no base directory is provided, the default base directory will be <a class=\"reference internal\" href=\"../variable/cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR\" title=\"CMAKE_CURRENT_SOURCE_DIR\" id=\"index-0-variable:CMAKE_CURRENT_SOURCE_DIR\"><code>CMAKE_CURRENT_SOURCE_DIR</code></a>.</p> <p>Paths are returned with forward slashes and have no trailing slahes. If the optional <code>CACHE</code> argument is specified, the result variable is added to the cache.</p>  <pre data-language=\"python\">get_filename_component(&lt;VAR&gt; &lt;FileName&gt;\n                       PROGRAM [PROGRAM_ARGS &lt;ARG_VAR&gt;]\n                       [CACHE])\n</pre> <p>The program in <code>&lt;FileName&gt;</code> will be found in the system search path or left as a full path. If <code>PROGRAM_ARGS</code> is present with <code>PROGRAM</code>, then any command-line arguments present in the <code>&lt;FileName&gt;</code> string are split from the program name and stored in <code>&lt;ARG_VAR&gt;</code>. This is used to separate a program name from its arguments in a command line string.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/get_filename_component.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/get_filename_component.html</a>\n  </p>\n</div>\n","command/find_path":"<h1 id=\"command:find_path\">find_path</h1> <p id=\"find-path\">A short-hand signature is:</p> <pre class=\"literal-block\">\nfind_path (&lt;VAR&gt; name1 [path1 path2 ...])\n</pre> <p>The general signature is:</p> <pre class=\"literal-block\">\nfind_path (\n          &lt;VAR&gt;\n          name | NAMES name1 [name2 ...]\n          [HINTS path1 [path2 ... ENV var]]\n          [PATHS path1 [path2 ... ENV var]]\n          [PATH_SUFFIXES suffix1 [suffix2 ...]]\n          [DOC \"cache documentation string\"]\n          [NO_DEFAULT_PATH]\n          [NO_CMAKE_ENVIRONMENT_PATH]\n          [NO_CMAKE_PATH]\n          [NO_SYSTEM_ENVIRONMENT_PATH]\n          [NO_CMAKE_SYSTEM_PATH]\n          [CMAKE_FIND_ROOT_PATH_BOTH |\n           ONLY_CMAKE_FIND_ROOT_PATH |\n           NO_CMAKE_FIND_ROOT_PATH]\n         )\n</pre> <p>This command is used to find a directory containing the named file. A cache entry named by <code>&lt;VAR&gt;</code> is created to store the result of this command. If the file in a directory is found the result is stored in the variable and the search will not be repeated unless the variable is cleared. If nothing is found, the result will be <code>&lt;VAR&gt;-NOTFOUND</code>, and the search will be attempted again the next time find_path is invoked with the same variable.</p> <p>Options include:</p> <dl class=\"docutils\"> <dt><code>NAMES</code></dt> <dd>\n<p class=\"first\">Specify one or more possible names for the file in a directory.</p> <p class=\"last\">When using this to specify names with and without a version suffix, we recommend specifying the unversioned name first so that locally-built packages can be found before those provided by distributions.</p> </dd> <dt>\n<code>HINTS</code>, <code>PATHS</code>\n</dt> <dd>Specify directories to search in addition to the default locations. The <code>ENV var</code> sub-option reads paths from a system environment variable.</dd> <dt><code>PATH_SUFFIXES</code></dt> <dd>Specify additional subdirectories to check below each directory location otherwise considered.</dd> <dt><code>DOC</code></dt> <dd>Specify the documentation string for the <code>&lt;VAR&gt;</code> cache entry.</dd> </dl> <p>If <code>NO_DEFAULT_PATH</code> is specified, then no additional paths are added to the search. If <code>NO_DEFAULT_PATH</code> is not specified, the search process is as follows:</p> <ol class=\"arabic simple\"> <li>Search paths specified in cmake-specific cache variables. These are intended to be used on the command line with a <code>-DVAR=value</code>. This can be skipped if <code>NO_CMAKE_PATH</code> is passed.<ul> <li>\n<code>&lt;prefix&gt;/include/&lt;arch&gt;</code> if <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-3-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> is set, and <code>&lt;prefix&gt;/include</code> for each <code>&lt;prefix&gt;</code> in <a class=\"reference internal\" href=\"../variable/cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-2-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>\n</li> <li><a class=\"reference internal\" href=\"../variable/cmake_include_path#variable:CMAKE_INCLUDE_PATH\" title=\"CMAKE_INCLUDE_PATH\" id=\"index-1-variable:CMAKE_INCLUDE_PATH\"><code>CMAKE_INCLUDE_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_framework_path#variable:CMAKE_FRAMEWORK_PATH\" title=\"CMAKE_FRAMEWORK_PATH\" id=\"index-1-variable:CMAKE_FRAMEWORK_PATH\"><code>CMAKE_FRAMEWORK_PATH</code></a></li> </ul> </li> <li>Search paths specified in cmake-specific environment variables. These are intended to be set in the user’s shell configuration. This can be skipped if <code>NO_CMAKE_ENVIRONMENT_PATH</code> is passed.<ul> <li>\n<code>&lt;prefix&gt;/include/&lt;arch&gt;</code> if <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-4-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> is set, and <code>&lt;prefix&gt;/include</code> for each <code>&lt;prefix&gt;</code> in <a class=\"reference internal\" href=\"../variable/cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-3-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>\n</li> <li><a class=\"reference internal\" href=\"../variable/cmake_include_path#variable:CMAKE_INCLUDE_PATH\" title=\"CMAKE_INCLUDE_PATH\" id=\"index-2-variable:CMAKE_INCLUDE_PATH\"><code>CMAKE_INCLUDE_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_framework_path#variable:CMAKE_FRAMEWORK_PATH\" title=\"CMAKE_FRAMEWORK_PATH\" id=\"index-2-variable:CMAKE_FRAMEWORK_PATH\"><code>CMAKE_FRAMEWORK_PATH</code></a></li> </ul> </li> <li>Search the paths specified by the <code>HINTS</code> option. These should be paths computed by system introspection, such as a hint provided by the location of another item already found. Hard-coded guesses should be specified with the <code>PATHS</code> option.</li> <li>Search the standard system environment variables. This can be skipped if <code>NO_SYSTEM_ENVIRONMENT_PATH</code> is an argument.<ul> <li>Directories in <code>INCLUDE</code>, <code>&lt;prefix&gt;/include/&lt;arch&gt;</code> if <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-5-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> is set, and <code>&lt;prefix&gt;/include</code> for each <code>&lt;prefix&gt;/[s]bin</code> in <code>PATH</code>, and <code>&lt;entry&gt;/include</code> for other entries in <code>PATH</code>, and the directories in <code>PATH</code> itself.</li> </ul> </li> <li>Search cmake variables defined in the Platform files for the current system. This can be skipped if <code>NO_CMAKE_SYSTEM_PATH</code> is passed.<ul> <li>\n<code>&lt;prefix&gt;/include/&lt;arch&gt;</code> if <a class=\"reference internal\" href=\"../variable/cmake_library_architecture#variable:CMAKE_LIBRARY_ARCHITECTURE\" title=\"CMAKE_LIBRARY_ARCHITECTURE\" id=\"index-6-variable:CMAKE_LIBRARY_ARCHITECTURE\"><code>CMAKE_LIBRARY_ARCHITECTURE</code></a> is set, and <code>&lt;prefix&gt;/include</code> for each <code>&lt;prefix&gt;</code> in <a class=\"reference internal\" href=\"../variable/cmake_system_prefix_path#variable:CMAKE_SYSTEM_PREFIX_PATH\" title=\"CMAKE_SYSTEM_PREFIX_PATH\" id=\"index-2-variable:CMAKE_SYSTEM_PREFIX_PATH\"><code>CMAKE_SYSTEM_PREFIX_PATH</code></a>\n</li> <li><a class=\"reference internal\" href=\"../variable/cmake_system_include_path#variable:CMAKE_SYSTEM_INCLUDE_PATH\" title=\"CMAKE_SYSTEM_INCLUDE_PATH\" id=\"index-1-variable:CMAKE_SYSTEM_INCLUDE_PATH\"><code>CMAKE_SYSTEM_INCLUDE_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_system_framework_path#variable:CMAKE_SYSTEM_FRAMEWORK_PATH\" title=\"CMAKE_SYSTEM_FRAMEWORK_PATH\" id=\"index-1-variable:CMAKE_SYSTEM_FRAMEWORK_PATH\"><code>CMAKE_SYSTEM_FRAMEWORK_PATH</code></a></li> </ul> </li> <li>Search the paths specified by the PATHS option or in the short-hand version of the command. These are typically hard-coded guesses.</li> </ol> <p>On OS X the <a class=\"reference internal\" href=\"../variable/cmake_find_framework#variable:CMAKE_FIND_FRAMEWORK\" title=\"CMAKE_FIND_FRAMEWORK\" id=\"index-0-variable:CMAKE_FIND_FRAMEWORK\"><code>CMAKE_FIND_FRAMEWORK</code></a> and <a class=\"reference internal\" href=\"../variable/cmake_find_appbundle#variable:CMAKE_FIND_APPBUNDLE\" title=\"CMAKE_FIND_APPBUNDLE\" id=\"index-0-variable:CMAKE_FIND_APPBUNDLE\"><code>CMAKE_FIND_APPBUNDLE</code></a> variables determine the order of preference between Apple-style and unix-style package components.</p> <p>The CMake variable <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-0-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> specifies one or more directories to be prepended to all other search directories. This effectively “re-roots” the entire search under given locations. Paths which are descendants of the <a class=\"reference internal\" href=\"../variable/cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-0-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a> are excluded from this re-rooting, because that variable is always a path on the host system. By default the <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> is empty.</p> <p>The <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-0-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> variable can also be used to specify exactly one directory to use as a prefix. Setting <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-1-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> also has other effects. See the documentation for that variable for more.</p> <p>These variables are especially useful when cross-compiling to point to the root directory of the target environment and CMake will search there too. By default at first the directories listed in <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-2-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> are searched, then the <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-2-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> directory is searched, and then the non-rooted directories will be searched. The default behavior can be adjusted by setting <a class=\"reference internal\" href=\"../variable/cmake_find_root_path_mode_include#variable:CMAKE_FIND_ROOT_PATH_MODE_INCLUDE\" title=\"CMAKE_FIND_ROOT_PATH_MODE_INCLUDE\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH_MODE_INCLUDE\"><code>CMAKE_FIND_ROOT_PATH_MODE_INCLUDE</code></a>. This behavior can be manually overridden on a per-call basis using options:</p> <dl class=\"docutils\"> <dt><code>CMAKE_FIND_ROOT_PATH_BOTH</code></dt> <dd>Search in the order described above.</dd> <dt><code>NO_CMAKE_FIND_ROOT_PATH</code></dt> <dd>Do not use the <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-3-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> variable.</dd> <dt><code>ONLY_CMAKE_FIND_ROOT_PATH</code></dt> <dd>Search only the re-rooted directories and directories below <a class=\"reference internal\" href=\"../variable/cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-1-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a>.</dd> </dl> <p>The default search order is designed to be most-specific to least-specific for common use cases. Projects may override the order by simply calling the command multiple times and using the <code>NO_*</code> options:</p> <pre class=\"literal-block\">\nfind_path (&lt;VAR&gt; NAMES name PATHS paths... NO_DEFAULT_PATH)\nfind_path (&lt;VAR&gt; NAMES name)\n</pre> <p>Once one of the calls succeeds the result variable will be set and stored in the cache so that no call will search again.</p> <p>When searching for frameworks, if the file is specified as <code>A/b.h</code>, then the framework search will look for <code>A.framework/Headers/b.h</code>. If that is found the path will be set to the path to the framework. CMake will convert this to the correct <code>-F</code> option to include the file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/find_path.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/find_path.html</a>\n  </p>\n</div>\n","command/find_program":"<h1 id=\"command:find_program\">find_program</h1> <p id=\"find-program\">A short-hand signature is:</p> <pre class=\"literal-block\">\nfind_program (&lt;VAR&gt; name1 [path1 path2 ...])\n</pre> <p>The general signature is:</p> <pre class=\"literal-block\">\nfind_program (\n          &lt;VAR&gt;\n          name | NAMES name1 [name2 ...] [NAMES_PER_DIR]\n          [HINTS path1 [path2 ... ENV var]]\n          [PATHS path1 [path2 ... ENV var]]\n          [PATH_SUFFIXES suffix1 [suffix2 ...]]\n          [DOC \"cache documentation string\"]\n          [NO_DEFAULT_PATH]\n          [NO_CMAKE_ENVIRONMENT_PATH]\n          [NO_CMAKE_PATH]\n          [NO_SYSTEM_ENVIRONMENT_PATH]\n          [NO_CMAKE_SYSTEM_PATH]\n          [CMAKE_FIND_ROOT_PATH_BOTH |\n           ONLY_CMAKE_FIND_ROOT_PATH |\n           NO_CMAKE_FIND_ROOT_PATH]\n         )\n</pre> <p>This command is used to find a program. A cache entry named by <code>&lt;VAR&gt;</code> is created to store the result of this command. If the program is found the result is stored in the variable and the search will not be repeated unless the variable is cleared. If nothing is found, the result will be <code>&lt;VAR&gt;-NOTFOUND</code>, and the search will be attempted again the next time find_program is invoked with the same variable.</p> <p>Options include:</p> <dl class=\"docutils\"> <dt><code>NAMES</code></dt> <dd>\n<p class=\"first\">Specify one or more possible names for the program.</p> <p class=\"last\">When using this to specify names with and without a version suffix, we recommend specifying the unversioned name first so that locally-built packages can be found before those provided by distributions.</p> </dd> <dt>\n<code>HINTS</code>, <code>PATHS</code>\n</dt> <dd>Specify directories to search in addition to the default locations. The <code>ENV var</code> sub-option reads paths from a system environment variable.</dd> <dt><code>PATH_SUFFIXES</code></dt> <dd>Specify additional subdirectories to check below each directory location otherwise considered.</dd> <dt><code>DOC</code></dt> <dd>Specify the documentation string for the <code>&lt;VAR&gt;</code> cache entry.</dd> </dl> <p>If <code>NO_DEFAULT_PATH</code> is specified, then no additional paths are added to the search. If <code>NO_DEFAULT_PATH</code> is not specified, the search process is as follows:</p> <ol class=\"arabic simple\"> <li>Search paths specified in cmake-specific cache variables. These are intended to be used on the command line with a <code>-DVAR=value</code>. This can be skipped if <code>NO_CMAKE_PATH</code> is passed.<ul> <li>\n<code>&lt;prefix&gt;/[s]bin</code> for each <code>&lt;prefix&gt;</code> in <a class=\"reference internal\" href=\"../variable/cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-2-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>\n</li> <li><a class=\"reference internal\" href=\"../variable/cmake_program_path#variable:CMAKE_PROGRAM_PATH\" title=\"CMAKE_PROGRAM_PATH\" id=\"index-1-variable:CMAKE_PROGRAM_PATH\"><code>CMAKE_PROGRAM_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_appbundle_path#variable:CMAKE_APPBUNDLE_PATH\" title=\"CMAKE_APPBUNDLE_PATH\" id=\"index-1-variable:CMAKE_APPBUNDLE_PATH\"><code>CMAKE_APPBUNDLE_PATH</code></a></li> </ul> </li> <li>Search paths specified in cmake-specific environment variables. These are intended to be set in the user’s shell configuration. This can be skipped if <code>NO_CMAKE_ENVIRONMENT_PATH</code> is passed.<ul> <li>\n<code>&lt;prefix&gt;/[s]bin</code> for each <code>&lt;prefix&gt;</code> in <a class=\"reference internal\" href=\"../variable/cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-3-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>\n</li> <li><a class=\"reference internal\" href=\"../variable/cmake_program_path#variable:CMAKE_PROGRAM_PATH\" title=\"CMAKE_PROGRAM_PATH\" id=\"index-2-variable:CMAKE_PROGRAM_PATH\"><code>CMAKE_PROGRAM_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_appbundle_path#variable:CMAKE_APPBUNDLE_PATH\" title=\"CMAKE_APPBUNDLE_PATH\" id=\"index-2-variable:CMAKE_APPBUNDLE_PATH\"><code>CMAKE_APPBUNDLE_PATH</code></a></li> </ul> </li> <li>Search the paths specified by the <code>HINTS</code> option. These should be paths computed by system introspection, such as a hint provided by the location of another item already found. Hard-coded guesses should be specified with the <code>PATHS</code> option.</li> <li>Search the standard system environment variables. This can be skipped if <code>NO_SYSTEM_ENVIRONMENT_PATH</code> is an argument.<ul> <li><code>PATH</code></li> </ul> </li> <li>Search cmake variables defined in the Platform files for the current system. This can be skipped if <code>NO_CMAKE_SYSTEM_PATH</code> is passed.<ul> <li>\n<code>&lt;prefix&gt;/[s]bin</code> for each <code>&lt;prefix&gt;</code> in <a class=\"reference internal\" href=\"../variable/cmake_system_prefix_path#variable:CMAKE_SYSTEM_PREFIX_PATH\" title=\"CMAKE_SYSTEM_PREFIX_PATH\" id=\"index-2-variable:CMAKE_SYSTEM_PREFIX_PATH\"><code>CMAKE_SYSTEM_PREFIX_PATH</code></a>\n</li> <li><a class=\"reference internal\" href=\"../variable/cmake_system_program_path#variable:CMAKE_SYSTEM_PROGRAM_PATH\" title=\"CMAKE_SYSTEM_PROGRAM_PATH\" id=\"index-1-variable:CMAKE_SYSTEM_PROGRAM_PATH\"><code>CMAKE_SYSTEM_PROGRAM_PATH</code></a></li> <li><a class=\"reference internal\" href=\"../variable/cmake_system_appbundle_path#variable:CMAKE_SYSTEM_APPBUNDLE_PATH\" title=\"CMAKE_SYSTEM_APPBUNDLE_PATH\" id=\"index-1-variable:CMAKE_SYSTEM_APPBUNDLE_PATH\"><code>CMAKE_SYSTEM_APPBUNDLE_PATH</code></a></li> </ul> </li> <li>Search the paths specified by the PATHS option or in the short-hand version of the command. These are typically hard-coded guesses.</li> </ol> <p>On OS X the <a class=\"reference internal\" href=\"../variable/cmake_find_framework#variable:CMAKE_FIND_FRAMEWORK\" title=\"CMAKE_FIND_FRAMEWORK\" id=\"index-0-variable:CMAKE_FIND_FRAMEWORK\"><code>CMAKE_FIND_FRAMEWORK</code></a> and <a class=\"reference internal\" href=\"../variable/cmake_find_appbundle#variable:CMAKE_FIND_APPBUNDLE\" title=\"CMAKE_FIND_APPBUNDLE\" id=\"index-0-variable:CMAKE_FIND_APPBUNDLE\"><code>CMAKE_FIND_APPBUNDLE</code></a> variables determine the order of preference between Apple-style and unix-style package components.</p> <p>The CMake variable <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-0-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> specifies one or more directories to be prepended to all other search directories. This effectively “re-roots” the entire search under given locations. Paths which are descendants of the <a class=\"reference internal\" href=\"../variable/cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-0-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a> are excluded from this re-rooting, because that variable is always a path on the host system. By default the <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> is empty.</p> <p>The <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-0-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> variable can also be used to specify exactly one directory to use as a prefix. Setting <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-1-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> also has other effects. See the documentation for that variable for more.</p> <p>These variables are especially useful when cross-compiling to point to the root directory of the target environment and CMake will search there too. By default at first the directories listed in <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-2-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> are searched, then the <a class=\"reference internal\" href=\"../variable/cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-2-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> directory is searched, and then the non-rooted directories will be searched. The default behavior can be adjusted by setting <a class=\"reference internal\" href=\"../variable/cmake_find_root_path_mode_program#variable:CMAKE_FIND_ROOT_PATH_MODE_PROGRAM\" title=\"CMAKE_FIND_ROOT_PATH_MODE_PROGRAM\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH_MODE_PROGRAM\"><code>CMAKE_FIND_ROOT_PATH_MODE_PROGRAM</code></a>. This behavior can be manually overridden on a per-call basis using options:</p> <dl class=\"docutils\"> <dt><code>CMAKE_FIND_ROOT_PATH_BOTH</code></dt> <dd>Search in the order described above.</dd> <dt><code>NO_CMAKE_FIND_ROOT_PATH</code></dt> <dd>Do not use the <a class=\"reference internal\" href=\"../variable/cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-3-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> variable.</dd> <dt><code>ONLY_CMAKE_FIND_ROOT_PATH</code></dt> <dd>Search only the re-rooted directories and directories below <a class=\"reference internal\" href=\"../variable/cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-1-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a>.</dd> </dl> <p>The default search order is designed to be most-specific to least-specific for common use cases. Projects may override the order by simply calling the command multiple times and using the <code>NO_*</code> options:</p> <pre class=\"literal-block\">\nfind_program (&lt;VAR&gt; NAMES name PATHS paths... NO_DEFAULT_PATH)\nfind_program (&lt;VAR&gt; NAMES name)\n</pre> <p>Once one of the calls succeeds the result variable will be set and stored in the cache so that no call will search again.</p> <p>When more than one value is given to the <code>NAMES</code> option this command by default will consider one name at a time and search every directory for it. The <code>NAMES_PER_DIR</code> option tells this command to consider one directory at a time and search for all names in it.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/find_program.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/find_program.html</a>\n  </p>\n</div>\n","command/get_property":"<h1 id=\"command:get_property\">get_property</h1> <p id=\"get-property\">Get a property.</p> <pre data-language=\"python\">get_property(&lt;variable&gt;\n             &lt;GLOBAL             |\n              DIRECTORY [dir]    |\n              TARGET    &lt;target&gt; |\n              SOURCE    &lt;source&gt; |\n              INSTALL   &lt;file&gt;   |\n              TEST      &lt;test&gt;   |\n              CACHE     &lt;entry&gt;  |\n              VARIABLE&gt;\n             PROPERTY &lt;name&gt;\n             [SET | DEFINED | BRIEF_DOCS | FULL_DOCS])\n</pre> <p>Get one property from one object in a scope. The first argument specifies the variable in which to store the result. The second argument determines the scope from which to get the property. It must be one of the following:</p> <dl class=\"docutils\"> <dt><code>GLOBAL</code></dt> <dd>Scope is unique and does not accept a name.</dd> <dt><code>DIRECTORY</code></dt> <dd>Scope defaults to the current directory but another directory (already processed by CMake) may be named by full or relative path.</dd> <dt><code>TARGET</code></dt> <dd>Scope must name one existing target.</dd> <dt><code>SOURCE</code></dt> <dd>Scope must name one source file.</dd> <dt><code>INSTALL</code></dt> <dd>Scope must name one installed file path.</dd> <dt><code>TEST</code></dt> <dd>Scope must name one existing test.</dd> <dt><code>CACHE</code></dt> <dd>Scope must name one cache entry.</dd> <dt><code>VARIABLE</code></dt> <dd>Scope is unique and does not accept a name.</dd> </dl> <p>The required <code>PROPERTY</code> option is immediately followed by the name of the property to get. If the property is not set an empty value is returned. If the <code>SET</code> option is given the variable is set to a boolean value indicating whether the property has been set. If the <code>DEFINED</code> option is given the variable is set to a boolean value indicating whether the property has been defined such as with the <a class=\"reference internal\" href=\"define_property#command:define_property\" title=\"define_property\" id=\"index-0-command:define_property\"><code>define_property()</code></a> command. If <code>BRIEF_DOCS</code> or <code>FULL_DOCS</code> is given then the variable is set to a string containing documentation for the requested property. If documentation is requested for a property that has not been defined <code>NOTFOUND</code> is returned.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/get_property.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/get_property.html</a>\n  </p>\n</div>\n","command/get_source_file_property":"<h1 id=\"command:get_source_file_property\">get_source_file_property</h1> <p id=\"get-source-file-property\">Get a property for a source file.</p> <pre data-language=\"python\">get_source_file_property(VAR file property)\n</pre> <p>Get a property from a source file. The value of the property is stored in the variable <code>VAR</code>. If the property is not found, <code>VAR</code> will be set to “NOTFOUND”. Use <a class=\"reference internal\" href=\"set_source_files_properties#command:set_source_files_properties\" title=\"set_source_files_properties\" id=\"index-0-command:set_source_files_properties\"><code>set_source_files_properties()</code></a> to set property values. Source file properties usually control how the file is built. One property that is always there is <a class=\"reference internal\" href=\"../prop_sf/location#prop_sf:LOCATION\" title=\"LOCATION\" id=\"index-0-prop_sf:LOCATION\"><code>LOCATION</code></a></p> <p>See also the more general <a class=\"reference internal\" href=\"get_property#command:get_property\" title=\"get_property\" id=\"index-0-command:get_property\"><code>get_property()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/get_source_file_property.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/get_source_file_property.html</a>\n  </p>\n</div>\n","command/get_target_property":"<h1 id=\"command:get_target_property\">get_target_property</h1> <p id=\"get-target-property\">Get a property from a target.</p> <pre data-language=\"python\">get_target_property(VAR target property)\n</pre> <p>Get a property from a target. The value of the property is stored in the variable <code>VAR</code>. If the property is not found, <code>VAR</code> will be set to “NOTFOUND”. Use <a class=\"reference internal\" href=\"set_target_properties#command:set_target_properties\" title=\"set_target_properties\" id=\"index-0-command:set_target_properties\"><code>set_target_properties()</code></a> to set property values. Properties are usually used to control how a target is built, but some query the target instead. This command can get properties for any target so far created. The targets do not need to be in the current <code>CMakeLists.txt</code> file.</p> <p>See also the more general <a class=\"reference internal\" href=\"get_property#command:get_property\" title=\"get_property\" id=\"index-0-command:get_property\"><code>get_property()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/get_target_property.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/get_target_property.html</a>\n  </p>\n</div>\n","command/get_test_property":"<h1 id=\"command:get_test_property\">get_test_property</h1> <p id=\"get-test-property\">Get a property of the test.</p> <pre data-language=\"python\">get_test_property(test property VAR)\n</pre> <p>Get a property from the test. The value of the property is stored in the variable <code>VAR</code>. If the test or property is not found, <code>VAR</code> will be set to “NOTFOUND”. For a list of standard properties you can type <code>cmake --help-property-list</code>.</p> <p>See also the more general <a class=\"reference internal\" href=\"get_property#command:get_property\" title=\"get_property\" id=\"index-0-command:get_property\"><code>get_property()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/get_test_property.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/get_test_property.html</a>\n  </p>\n</div>\n","command/include_directories":"<h1 id=\"command:include_directories\">include_directories</h1> <p id=\"include-directories\">Add include directories to the build.</p> <pre data-language=\"python\">include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])\n</pre> <p>Add the given directories to those the compiler uses to search for include files. Relative paths are interpreted as relative to the current source directory.</p> <p>The include directories are added to the <a class=\"reference internal\" href=\"../prop_dir/include_directories#prop_dir:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-0-prop_dir:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a> directory property for the current <code>CMakeLists</code> file. They are also added to the <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a> target property for each target in the current <code>CMakeLists</code> file. The target property values are the ones used by the generators.</p> <p>By default the directories specified are appended onto the current list of directories. This default behavior can be changed by setting <a class=\"reference internal\" href=\"../variable/cmake_include_directories_before#variable:CMAKE_INCLUDE_DIRECTORIES_BEFORE\" title=\"CMAKE_INCLUDE_DIRECTORIES_BEFORE\" id=\"index-0-variable:CMAKE_INCLUDE_DIRECTORIES_BEFORE\"><code>CMAKE_INCLUDE_DIRECTORIES_BEFORE</code></a> to <code>ON</code>. By using <code>AFTER</code> or <code>BEFORE</code> explicitly, you can select between appending and prepending, independent of the default.</p> <p>If the <code>SYSTEM</code> option is given, the compiler will be told the directories are meant as system include directories on some platforms. Signalling this setting might achieve effects such as the compiler skipping warnings, or these fixed-install system files not being considered in dependency calculations - see compiler docs.</p> <p>Arguments to <code>include_directories</code> may use “generator expressions” with the syntax “$&lt;...&gt;”. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/include_directories.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/include_directories.html</a>\n  </p>\n</div>\n","command/include_external_msproject":"<h1 id=\"command:include_external_msproject\">include_external_msproject</h1> <p id=\"include-external-msproject\">Include an external Microsoft project file in a workspace.</p> <pre data-language=\"python\">include_external_msproject(projectname location\n                           [TYPE projectTypeGUID]\n                           [GUID projectGUID]\n                           [PLATFORM platformName]\n                           dep1 dep2 ...)\n</pre> <p>Includes an external Microsoft project in the generated workspace file. Currently does nothing on UNIX. This will create a target named [projectname]. This can be used in the <a class=\"reference internal\" href=\"add_dependencies#command:add_dependencies\" title=\"add_dependencies\" id=\"index-0-command:add_dependencies\"><code>add_dependencies()</code></a> command to make things depend on the external project.</p> <p><code>TYPE</code>, <code>GUID</code> and <code>PLATFORM</code> are optional parameters that allow one to specify the type of project, id (GUID) of the project and the name of the target platform. This is useful for projects requiring values other than the default (e.g. WIX projects). These options are not supported by the Visual Studio 6 generator.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/include_external_msproject.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/include_external_msproject.html</a>\n  </p>\n</div>\n","command/include_regular_expression":"<h1 id=\"command:include_regular_expression\">include_regular_expression</h1> <p id=\"include-regular-expression\">Set the regular expression used for dependency checking.</p> <pre data-language=\"python\">include_regular_expression(regex_match [regex_complain])\n</pre> <p>Set the regular expressions used in dependency checking. Only files matching <code>regex_match</code> will be traced as dependencies. Only files matching <code>regex_complain</code> will generate warnings if they cannot be found (standard header paths are not searched). The defaults are:</p> <pre data-language=\"python\">regex_match    = \"^.*$\" (match everything)\nregex_complain = \"^$\" (match empty string only)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/include_regular_expression.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/include_regular_expression.html</a>\n  </p>\n</div>\n","command/link_directories":"<h1 id=\"command:link_directories\">link_directories</h1> <p id=\"link-directories\">Specify directories in which the linker will look for libraries.</p> <pre data-language=\"python\">link_directories(directory1 directory2 ...)\n</pre> <p>Specify the paths in which the linker should search for libraries. The command will apply only to targets created after it is called. Relative paths given to this command are interpreted as relative to the current source directory, see <a class=\"reference internal\" href=\"../policy/cmp0015#policy:CMP0015\" title=\"CMP0015\" id=\"index-0-policy:CMP0015\"><code>CMP0015</code></a>.</p> <p>Note that this command is rarely necessary. Library locations returned by <a class=\"reference internal\" href=\"find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> and <a class=\"reference internal\" href=\"find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a> are absolute paths. Pass these absolute library file paths directly to the <a class=\"reference internal\" href=\"target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> command. CMake will ensure the linker finds them.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/link_directories.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/link_directories.html</a>\n  </p>\n</div>\n","command/link_libraries":"<h1 id=\"command:link_libraries\">link_libraries</h1> <p id=\"link-libraries\">Link libraries to all targets added later.</p> <pre data-language=\"python\">link_libraries([item1 [item2 [...]]]\n               [[debug|optimized|general] &lt;item&gt;] ...)\n</pre> <p>Specify libraries or flags to use when linking any targets created later in the current directory or below by commands such as <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> or <a class=\"reference internal\" href=\"add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a>. See the <a class=\"reference internal\" href=\"target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> command for meaning of arguments.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <a class=\"reference internal\" href=\"target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-1-command:target_link_libraries\"><code>target_link_libraries()</code></a> command should be preferred whenever possible. Library dependencies are chained automatically, so directory-wide specification of link libraries is rarely needed.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/link_libraries.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/link_libraries.html</a>\n  </p>\n</div>\n","command/load_cache":"<h1 id=\"command:load_cache\">load_cache</h1> <p id=\"load-cache\">Load in the values from another project’s CMake cache.</p> <pre data-language=\"python\">load_cache(pathToCacheFile READ_WITH_PREFIX\n           prefix entry1...)\n</pre> <p>Read the cache and store the requested entries in variables with their name prefixed with the given prefix. This only reads the values, and does not create entries in the local project’s cache.</p> <pre data-language=\"python\">load_cache(pathToCacheFile [EXCLUDE entry1...]\n           [INCLUDE_INTERNALS entry1...])\n</pre> <p>Load in the values from another cache and store them in the local project’s cache as internal entries. This is useful for a project that depends on another project built in a different tree. <code>EXCLUDE</code> option can be used to provide a list of entries to be excluded. <code>INCLUDE_INTERNALS</code> can be used to provide a list of internal entries to be included. Normally, no internal entries are brought in. Use of this form of the command is strongly discouraged, but it is provided for backward compatibility.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/load_cache.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/load_cache.html</a>\n  </p>\n</div>\n","command/mark_as_advanced":"<h1 id=\"command:mark_as_advanced\">mark_as_advanced</h1> <p id=\"mark-as-advanced\">Mark cmake cached variables as advanced.</p> <pre data-language=\"python\">mark_as_advanced([CLEAR|FORCE] VAR [VAR2 ...])\n</pre> <p>Mark the named cached variables as advanced. An advanced variable will not be displayed in any of the cmake GUIs unless the show advanced option is on. If <code>CLEAR</code> is the first argument advanced variables are changed back to unadvanced. If <code>FORCE</code> is the first argument, then the variable is made advanced. If neither <code>FORCE</code> nor <code>CLEAR</code> is specified, new values will be marked as advanced, but if the variable already has an advanced/non-advanced state, it will not be changed.</p> <p>It does nothing in script mode.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/mark_as_advanced.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/mark_as_advanced.html</a>\n  </p>\n</div>\n","command/math":"<h1 id=\"command:math\">math</h1> <p id=\"math\">Mathematical expressions.</p> <pre data-language=\"python\">math(EXPR &lt;output variable&gt; &lt;math expression&gt;)\n</pre> <p><code>EXPR</code> evaluates mathematical expression and returns result in the output variable. Example mathematical expression is ‘5 * ( 10 + 13 )’. Supported operators are + - * / % | &amp; ^ ~ &lt;&lt; &gt;&gt; * / %. They have the same meaning as they do in C code.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/math.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/math.html</a>\n  </p>\n</div>\n","command/option":"<h1 id=\"command:option\">option</h1> <p id=\"option\">Provides an option that the user can optionally select.</p> <pre data-language=\"python\">option(&lt;option_variable&gt; \"help string describing option\"\n       [initial value])\n</pre> <p>Provide an option for the user to select as <code>ON</code> or <code>OFF</code>. If no initial value is provided, <code>OFF</code> is used.</p> <p>If you have options that depend on the values of other options, see the module help for <a class=\"reference internal\" href=\"../module/cmakedependentoption#module:CMakeDependentOption\" title=\"CMakeDependentOption\" id=\"index-0-module:CMakeDependentOption\"><code>CMakeDependentOption</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/option.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/option.html</a>\n  </p>\n</div>\n","command/message":"<h1 id=\"command:message\">message</h1> <p id=\"message\">Display a message to the user.</p> <pre data-language=\"python\">message([&lt;mode&gt;] \"message to display\" ...)\n</pre> <p>The optional <code>&lt;mode&gt;</code> keyword determines the type of message:</p> <pre data-language=\"python\">(none)         = Important information\nSTATUS         = Incidental information\nWARNING        = CMake Warning, continue processing\nAUTHOR_WARNING = CMake Warning (dev), continue processing\nSEND_ERROR     = CMake Error, continue processing,\n                              but skip generation\nFATAL_ERROR    = CMake Error, stop processing and generation\nDEPRECATION    = CMake Deprecation Error or Warning if variable\n                 CMAKE_ERROR_DEPRECATED or CMAKE_WARN_DEPRECATED\n                 is enabled, respectively, else no message.\n</pre> <p>The CMake command-line tool displays STATUS messages on stdout and all other message types on stderr. The CMake GUI displays all messages in its log area. The interactive dialogs (ccmake and CMakeSetup) show STATUS messages one at a time on a status line and other messages in interactive pop-up boxes.</p> <p>CMake Warning and Error message text displays using a simple markup language. Non-indented text is formatted in line-wrapped paragraphs delimited by newlines. Indented text is considered pre-formatted.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/message.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/message.html</a>\n  </p>\n</div>\n","command/remove_definitions":"<h1 id=\"command:remove_definitions\">remove_definitions</h1> <p id=\"remove-definitions\">Removes -D define flags added by <a class=\"reference internal\" href=\"add_definitions#command:add_definitions\" title=\"add_definitions\" id=\"index-0-command:add_definitions\"><code>add_definitions()</code></a>.</p> <pre data-language=\"python\">remove_definitions(-DFOO -DBAR ...)\n</pre> <p>Removes flags (added by <a class=\"reference internal\" href=\"add_definitions#command:add_definitions\" title=\"add_definitions\" id=\"index-1-command:add_definitions\"><code>add_definitions()</code></a>) from the compiler command line for sources in the current directory and below.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/remove_definitions.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/remove_definitions.html</a>\n  </p>\n</div>\n","command/qt_wrap_cpp":"<h1 id=\"command:qt_wrap_cpp\">qt_wrap_cpp</h1> <p id=\"qt-wrap-cpp\">Create Qt Wrappers.</p> <pre data-language=\"python\">qt_wrap_cpp(resultingLibraryName DestName\n            SourceLists ...)\n</pre> <p>Produce moc files for all the .h files listed in the SourceLists. The moc files will be added to the library using the <code>DestName</code> source list.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/qt_wrap_cpp.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/qt_wrap_cpp.html</a>\n  </p>\n</div>\n","command/qt_wrap_ui":"<h1 id=\"command:qt_wrap_ui\">qt_wrap_ui</h1> <p id=\"qt-wrap-ui\">Create Qt user interfaces Wrappers.</p> <pre data-language=\"python\">qt_wrap_ui(resultingLibraryName HeadersDestName\n           SourcesDestName SourceLists ...)\n</pre> <p>Produce .h and .cxx files for all the .ui files listed in the <code>SourceLists</code>. The .h files will be added to the library using the <code>HeadersDestNamesource</code> list. The .cxx files will be added to the library using the <code>SourcesDestNamesource</code> list.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/qt_wrap_ui.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/qt_wrap_ui.html</a>\n  </p>\n</div>\n","command/return":"<h1 id=\"command:return\">return</h1> <p id=\"return\">Return from a file, directory or function.</p> <pre data-language=\"python\">return()\n</pre> <p>Returns from a file, directory or function. When this command is encountered in an included file (via <a class=\"reference internal\" href=\"include#command:include\" title=\"include\" id=\"index-0-command:include\"><code>include()</code></a> or <a class=\"reference internal\" href=\"find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a>), it causes processing of the current file to stop and control is returned to the including file. If it is encountered in a file which is not included by another file, e.g. a <code>CMakeLists.txt</code>, control is returned to the parent directory if there is one. If return is called in a function, control is returned to the caller of the function. Note that a macro is not a function and does not handle return like a function does.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/return.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/return.html</a>\n  </p>\n</div>\n","command/separate_arguments":"<h1 id=\"command:separate_arguments\">separate_arguments</h1> <p id=\"separate-arguments\">Parse space-separated arguments into a semicolon-separated list.</p> <pre data-language=\"python\">separate_arguments(&lt;var&gt; &lt;UNIX|WINDOWS&gt;_COMMAND \"&lt;args&gt;\")\n</pre> <p>Parses a unix- or windows-style command-line string “&lt;args&gt;” and stores a semicolon-separated list of the arguments in <code>&lt;var&gt;</code>. The entire command line must be given in one “&lt;args&gt;” argument.</p> <p>The <code>UNIX_COMMAND</code> mode separates arguments by unquoted whitespace. It recognizes both single-quote and double-quote pairs. A backslash escapes the next literal character (” is ”); there are no special escapes (n is just n).</p> <p>The <code>WINDOWS_COMMAND</code> mode parses a windows command-line using the same syntax the runtime library uses to construct argv at startup. It separates arguments by whitespace that is not double-quoted. Backslashes are literal unless they precede double-quotes. See the MSDN article “Parsing C Command-Line Arguments” for details.</p> <pre data-language=\"python\">separate_arguments(VARIABLE)\n</pre> <p>Convert the value of <code>VARIABLE</code> to a semi-colon separated list. All spaces are replaced with ‘;’. This helps with generating command lines.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/separate_arguments.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/separate_arguments.html</a>\n  </p>\n</div>\n","command/set_directory_properties":"<h1 id=\"command:set_directory_properties\">set_directory_properties</h1> <p id=\"set-directory-properties\">Set a property of the directory.</p> <pre data-language=\"python\">set_directory_properties(PROPERTIES prop1 value1 prop2 value2)\n</pre> <p>Set a property for the current directory and subdirectories. See <a class=\"reference internal\" href=\"../manual/cmake-properties.7#directory-properties\"><span>Properties on Directories</span></a> for the list of properties known to CMake.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/set_directory_properties.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/set_directory_properties.html</a>\n  </p>\n</div>\n","command/set_source_files_properties":"<h1 id=\"command:set_source_files_properties\">set_source_files_properties</h1> <p id=\"set-source-files-properties\">Source files can have properties that affect how they are built.</p> <pre data-language=\"python\">set_source_files_properties([file1 [file2 [...]]]\n                            PROPERTIES prop1 value1\n                            [prop2 value2 [...]])\n</pre> <p>Set properties associated with source files using a key/value paired list. See <a class=\"reference internal\" href=\"../manual/cmake-properties.7#source-file-properties\"><span>Properties on Source Files</span></a> for the list of properties known to CMake. Source file properties are visible only to targets added in the same directory (CMakeLists.txt).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/set_source_files_properties.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/set_source_files_properties.html</a>\n  </p>\n</div>\n","command/set_tests_properties":"<h1 id=\"command:set_tests_properties\">set_tests_properties</h1> <p id=\"set-tests-properties\">Set a property of the tests.</p> <pre data-language=\"python\">set_tests_properties(test1 [test2...] PROPERTIES prop1 value1 prop2 value2)\n</pre> <p>Set a property for the tests. If the test is not found, CMake will report an error. <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>Generator expressions</code></a> will be expanded the same as supported by the test’s <a class=\"reference internal\" href=\"add_test#command:add_test\" title=\"add_test\" id=\"index-0-command:add_test\"><code>add_test()</code></a> call. See <a class=\"reference internal\" href=\"../manual/cmake-properties.7#test-properties\"><span>Properties on Tests</span></a> for the list of properties known to CMake.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/set_tests_properties.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/set_tests_properties.html</a>\n  </p>\n</div>\n","command/set_target_properties":"<h1 id=\"command:set_target_properties\">set_target_properties</h1> <p id=\"set-target-properties\">Targets can have properties that affect how they are built.</p> <pre data-language=\"python\">set_target_properties(target1 target2 ...\n                      PROPERTIES prop1 value1\n                      prop2 value2 ...)\n</pre> <p>Set properties on a target. The syntax for the command is to list all the files you want to change, and then provide the values you want to set next. You can use any prop value pair you want and extract it later with the <a class=\"reference internal\" href=\"get_property#command:get_property\" title=\"get_property\" id=\"index-0-command:get_property\"><code>get_property()</code></a> or <a class=\"reference internal\" href=\"get_target_property#command:get_target_property\" title=\"get_target_property\" id=\"index-0-command:get_target_property\"><code>get_target_property()</code></a> command.</p> <p>See <a class=\"reference internal\" href=\"../manual/cmake-properties.7#target-properties\"><span>Properties on Targets</span></a> for the list of properties known to CMake.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/set_target_properties.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/set_target_properties.html</a>\n  </p>\n</div>\n","command/source_group":"<h1 id=\"command:source_group\">source_group</h1> <p id=\"source-group\">Define a grouping for source files in IDE project generation.</p> <pre data-language=\"cmake\">source_group(&lt;name&gt; [FILES &lt;src&gt;...] [REGULAR_EXPRESSION &lt;regex&gt;])\n</pre> <p>Defines a group into which sources will be placed in project files. This is intended to set up file tabs in Visual Studio. The options are:</p> <dl class=\"docutils\"> <dt><code>FILES</code></dt> <dd>Any source file specified explicitly will be placed in group <code>&lt;name&gt;</code>. Relative paths are interpreted with respect to the current source directory.</dd> <dt><code>REGULAR_EXPRESSION</code></dt> <dd>Any source file whose name matches the regular expression will be placed in group <code>&lt;name&gt;</code>.</dd> </dl> <p>If a source file matches multiple groups, the <em>last</em> group that explicitly lists the file with <code>FILES</code> will be favored, if any. If no group explicitly lists the file, the <em>last</em> group whose regular expression matches the file will be favored.</p> <p>The <code>&lt;name&gt;</code> of the group may contain backslashes to specify subgroups:</p> <pre data-language=\"cmake\">source_group(outer\\\\inner ...)\n</pre> <p>For backwards compatibility, the short-hand signature</p> <pre data-language=\"cmake\">source_group(&lt;name&gt; &lt;regex&gt;)\n</pre> <p>is equivalent to</p> <pre data-language=\"cmake\">source_group(&lt;name&gt; REGULAR_EXPRESSION &lt;regex&gt;)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/source_group.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/source_group.html</a>\n  </p>\n</div>\n","command/target_compile_features":"<h1 id=\"command:target_compile_features\">target_compile_features</h1> <p id=\"target-compile-features\">Add expected compiler features to a target.</p> <pre data-language=\"python\">target_compile_features(&lt;target&gt; &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;feature&gt; [...])\n</pre> <p>Specify compiler features required when compiling a given target. If the feature is not listed in the <a class=\"reference internal\" href=\"../variable/cmake_c_compile_features#variable:CMAKE_C_COMPILE_FEATURES\" title=\"CMAKE_C_COMPILE_FEATURES\" id=\"index-0-variable:CMAKE_C_COMPILE_FEATURES\"><code>CMAKE_C_COMPILE_FEATURES</code></a> variable or <a class=\"reference internal\" href=\"../variable/cmake_cxx_compile_features#variable:CMAKE_CXX_COMPILE_FEATURES\" title=\"CMAKE_CXX_COMPILE_FEATURES\" id=\"index-0-variable:CMAKE_CXX_COMPILE_FEATURES\"><code>CMAKE_CXX_COMPILE_FEATURES</code></a> variable, then an error will be reported by CMake. If the use of the feature requires an additional compiler flag, such as <code>-std=gnu++11</code>, the flag will be added automatically.</p> <p>The <code>INTERFACE</code>, <code>PUBLIC</code> and <code>PRIVATE</code> keywords are required to specify the scope of the features. <code>PRIVATE</code> and <code>PUBLIC</code> items will populate the <a class=\"reference internal\" href=\"../prop_tgt/compile_features#prop_tgt:COMPILE_FEATURES\" title=\"COMPILE_FEATURES\" id=\"index-0-prop_tgt:COMPILE_FEATURES\"><code>COMPILE_FEATURES</code></a> property of <code>&lt;target&gt;</code>. <code>PUBLIC</code> and <code>INTERFACE</code> items will populate the <a class=\"reference internal\" href=\"../prop_tgt/interface_compile_features#prop_tgt:INTERFACE_COMPILE_FEATURES\" title=\"INTERFACE_COMPILE_FEATURES\" id=\"index-0-prop_tgt:INTERFACE_COMPILE_FEATURES\"><code>INTERFACE_COMPILE_FEATURES</code></a> property of <code>&lt;target&gt;</code>. Repeated calls for the same <code>&lt;target&gt;</code> append items.</p> <p>The named <code>&lt;target&gt;</code> must have been created by a command such as <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> or <a class=\"reference internal\" href=\"add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> and must not be an <code>IMPORTED</code> target.</p> <p>Arguments to <code>target_compile_features</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/target_compile_features.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/target_compile_features.html</a>\n  </p>\n</div>\n","command/target_compile_options":"<h1 id=\"command:target_compile_options\">target_compile_options</h1> <p id=\"target-compile-options\">Add compile options to a target.</p> <pre data-language=\"python\">target_compile_options(&lt;target&gt; [BEFORE]\n  &lt;INTERFACE|PUBLIC|PRIVATE&gt; [items1...]\n  [&lt;INTERFACE|PUBLIC|PRIVATE&gt; [items2...] ...])\n</pre> <p>Specify compile options to use when compiling a given target. The named <code>&lt;target&gt;</code> must have been created by a command such as <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> or <a class=\"reference internal\" href=\"add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> and must not be an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>IMPORTED Target</span></a>. If <code>BEFORE</code> is specified, the content will be prepended to the property instead of being appended.</p> <p>This command can be used to add any options, but alternative commands exist to add preprocessor definitions (<a class=\"reference internal\" href=\"target_compile_definitions#command:target_compile_definitions\" title=\"target_compile_definitions\" id=\"index-0-command:target_compile_definitions\"><code>target_compile_definitions()</code></a> and <a class=\"reference internal\" href=\"add_definitions#command:add_definitions\" title=\"add_definitions\" id=\"index-0-command:add_definitions\"><code>add_definitions()</code></a>) or include directories (<a class=\"reference internal\" href=\"target_include_directories#command:target_include_directories\" title=\"target_include_directories\" id=\"index-0-command:target_include_directories\"><code>target_include_directories()</code></a> and <a class=\"reference internal\" href=\"include_directories#command:include_directories\" title=\"include_directories\" id=\"index-0-command:include_directories\"><code>include_directories()</code></a>). See documentation of the <a class=\"reference internal\" href=\"../prop_dir/compile_options#prop_dir:COMPILE_OPTIONS\" title=\"COMPILE_OPTIONS\" id=\"index-0-prop_dir:COMPILE_OPTIONS\"><code>directory</code></a> and <a class=\"reference internal\" href=\"../prop_tgt/compile_options#prop_tgt:COMPILE_OPTIONS\" title=\"COMPILE_OPTIONS\" id=\"index-0-prop_tgt:COMPILE_OPTIONS\"><code>target</code></a> <code>COMPILE_OPTIONS</code> properties.</p> <p>The <code>INTERFACE</code>, <code>PUBLIC</code> and <code>PRIVATE</code> keywords are required to specify the scope of the following arguments. <code>PRIVATE</code> and <code>PUBLIC</code> items will populate the <a class=\"reference internal\" href=\"../prop_tgt/compile_options#prop_tgt:COMPILE_OPTIONS\" title=\"COMPILE_OPTIONS\" id=\"index-1-prop_tgt:COMPILE_OPTIONS\"><code>COMPILE_OPTIONS</code></a> property of <code>&lt;target&gt;</code>. <code>PUBLIC</code> and <code>INTERFACE</code> items will populate the <a class=\"reference internal\" href=\"../prop_tgt/interface_compile_options#prop_tgt:INTERFACE_COMPILE_OPTIONS\" title=\"INTERFACE_COMPILE_OPTIONS\" id=\"index-0-prop_tgt:INTERFACE_COMPILE_OPTIONS\"><code>INTERFACE_COMPILE_OPTIONS</code></a> property of <code>&lt;target&gt;</code>. The following arguments specify compile options. Repeated calls for the same <code>&lt;target&gt;</code> append items in the order called.</p> <p>Arguments to <code>target_compile_options</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/target_compile_options.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/target_compile_options.html</a>\n  </p>\n</div>\n","command/target_sources":"<h1 id=\"command:target_sources\">target_sources</h1> <p id=\"target-sources\">Add sources to a target.</p> <pre data-language=\"python\">target_sources(&lt;target&gt;\n  &lt;INTERFACE|PUBLIC|PRIVATE&gt; [items1...]\n  [&lt;INTERFACE|PUBLIC|PRIVATE&gt; [items2...] ...])\n</pre> <p>Specify sources to use when compiling a given target. The named <code>&lt;target&gt;</code> must have been created by a command such as <a class=\"reference internal\" href=\"add_executable#command:add_executable\" title=\"add_executable\" id=\"index-0-command:add_executable\"><code>add_executable()</code></a> or <a class=\"reference internal\" href=\"add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> and must not be an <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>IMPORTED Target</span></a>.</p> <p>The <code>INTERFACE</code>, <code>PUBLIC</code> and <code>PRIVATE</code> keywords are required to specify the scope of the following arguments. <code>PRIVATE</code> and <code>PUBLIC</code> items will populate the <a class=\"reference internal\" href=\"../prop_tgt/sources#prop_tgt:SOURCES\" title=\"SOURCES\" id=\"index-0-prop_tgt:SOURCES\"><code>SOURCES</code></a> property of <code>&lt;target&gt;</code>. <code>PUBLIC</code> and <code>INTERFACE</code> items will populate the <a class=\"reference internal\" href=\"../prop_tgt/interface_sources#prop_tgt:INTERFACE_SOURCES\" title=\"INTERFACE_SOURCES\" id=\"index-0-prop_tgt:INTERFACE_SOURCES\"><code>INTERFACE_SOURCES</code></a> property of <code>&lt;target&gt;</code>. The following arguments specify sources. Repeated calls for the same <code>&lt;target&gt;</code> append items in the order called.</p> <p>Arguments to <code>target_sources</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/target_sources.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/target_sources.html</a>\n  </p>\n</div>\n","command/try_run":"<h1 id=\"command:try_run\">try_run</h1>   <ul id=\"try-run\"> <li><a class=\"reference internal\" href=\"#try-compiling-and-running-source-files\" id=\"id2\">Try Compiling and Running Source Files</a></li> <li><a class=\"reference internal\" href=\"#other-behavior-settings\" id=\"id3\">Other Behavior Settings</a></li> <li><a class=\"reference internal\" href=\"#behavior-when-cross-compiling\" id=\"id4\">Behavior when Cross Compiling</a></li> </ul>\n  <p>Try compiling and then running some code.</p>  <h2 id=\"try-compiling-and-running-source-files\">Try Compiling and Running Source Files</h2> <pre data-language=\"python\">try_run(RUN_RESULT_VAR COMPILE_RESULT_VAR\n        bindir srcfile [CMAKE_FLAGS &lt;flags&gt;...]\n        [COMPILE_DEFINITIONS &lt;defs&gt;...]\n        [LINK_LIBRARIES &lt;libs&gt;...]\n        [COMPILE_OUTPUT_VARIABLE &lt;var&gt;]\n        [RUN_OUTPUT_VARIABLE &lt;var&gt;]\n        [OUTPUT_VARIABLE &lt;var&gt;]\n        [ARGS &lt;args&gt;...])\n</pre> <p>Try compiling a <code>&lt;srcfile&gt;</code>. Returns <code>TRUE</code> or <code>FALSE</code> for success or failure in <code>COMPILE_RESULT_VAR</code>. If the compile succeeded, runs the executable and returns its exit code in <code>RUN_RESULT_VAR</code>. If the executable was built, but failed to run, then <code>RUN_RESULT_VAR</code> will be set to <code>FAILED_TO_RUN</code>. See the <a class=\"reference internal\" href=\"try_compile#command:try_compile\" title=\"try_compile\" id=\"index-0-command:try_compile\"><code>try_compile()</code></a> command for information on how the test project is constructed to build the source file.</p> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>CMAKE_FLAGS &lt;flags&gt;...</code></dt> <dd>Specify flags of the form <code>-DVAR:TYPE=VALUE</code> to be passed to the <code>cmake</code> command-line used to drive the test build. The example in <a class=\"reference internal\" href=\"try_compile#command:try_compile\" title=\"try_compile\" id=\"index-1-command:try_compile\"><code>try_compile()</code></a> shows how values for variables <code>INCLUDE_DIRECTORIES</code>, <code>LINK_DIRECTORIES</code>, and <code>LINK_LIBRARIES</code> are used.</dd> <dt><code>COMPILE_DEFINITIONS &lt;defs&gt;...</code></dt> <dd>Specify <code>-Ddefinition</code> arguments to pass to <code>add_definitions</code> in the generated test project.</dd> <dt><code>COMPILE_OUTPUT_VARIABLE &lt;var&gt;</code></dt> <dd>Report the compile step build output in a given variable.</dd> <dt><code>LINK_LIBRARIES &lt;libs&gt;...</code></dt> <dd>\n<p class=\"first\">Specify libraries to be linked in the generated project. The list of libraries may refer to system libraries and to <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#imported-targets\"><span>Imported Targets</span></a> from the calling project.</p> <p class=\"last\">If this option is specified, any <code>-DLINK_LIBRARIES=...</code> value given to the <code>CMAKE_FLAGS</code> option will be ignored.</p> </dd> <dt><code>OUTPUT_VARIABLE &lt;var&gt;</code></dt> <dd>Report the compile build output and the output from running the executable in the given variable. This option exists for legacy reasons. Prefer <code>COMPILE_OUTPUT_VARIABLE</code> and <code>RUN_OUTPUT_VARIABLE</code> instead.</dd> <dt><code>RUN_OUTPUT_VARIABLE &lt;var&gt;</code></dt> <dd>Report the output from running the executable in a given variable.</dd> </dl>   <h2 id=\"other-behavior-settings\">Other Behavior Settings</h2> <p>Set the <a class=\"reference internal\" href=\"../variable/cmake_try_compile_configuration#variable:CMAKE_TRY_COMPILE_CONFIGURATION\" title=\"CMAKE_TRY_COMPILE_CONFIGURATION\" id=\"index-0-variable:CMAKE_TRY_COMPILE_CONFIGURATION\"><code>CMAKE_TRY_COMPILE_CONFIGURATION</code></a> variable to choose a build configuration.</p>   <h2 id=\"behavior-when-cross-compiling\">Behavior when Cross Compiling</h2> <p>When cross compiling, the executable compiled in the first step usually cannot be run on the build host. The <code>try_run</code> command checks the <a class=\"reference internal\" href=\"../variable/cmake_crosscompiling#variable:CMAKE_CROSSCOMPILING\" title=\"CMAKE_CROSSCOMPILING\" id=\"index-0-variable:CMAKE_CROSSCOMPILING\"><code>CMAKE_CROSSCOMPILING</code></a> variable to detect whether CMake is in cross-compiling mode. If that is the case, it will still try to compile the executable, but it will not try to run the executable unless the <a class=\"reference internal\" href=\"../variable/cmake_crosscompiling_emulator#variable:CMAKE_CROSSCOMPILING_EMULATOR\" title=\"CMAKE_CROSSCOMPILING_EMULATOR\" id=\"index-0-variable:CMAKE_CROSSCOMPILING_EMULATOR\"><code>CMAKE_CROSSCOMPILING_EMULATOR</code></a> variable is set. Instead it will create cache variables which must be filled by the user or by presetting them in some CMake script file to the values the executable would have produced if it had been run on its actual target platform. These cache entries are:</p> <dl class=\"docutils\"> <dt><code>&lt;RUN_RESULT_VAR&gt;</code></dt> <dd>Exit code if the executable were to be run on the target platform.</dd> <dt><code>&lt;RUN_RESULT_VAR&gt;__TRYRUN_OUTPUT</code></dt> <dd>Output from stdout and stderr if the executable were to be run on the target platform. This is created only if the <code>RUN_OUTPUT_VARIABLE</code> or <code>OUTPUT_VARIABLE</code> option was used.</dd> </dl> <p>In order to make cross compiling your project easier, use <code>try_run</code> only if really required. If you use <code>try_run</code>, use the <code>RUN_OUTPUT_VARIABLE</code> or <code>OUTPUT_VARIABLE</code> options only if really required. Using them will require that when cross-compiling, the cache variables will have to be set manually to the output of the executable. You can also “guard” the calls to <code>try_run</code> with an <a class=\"reference internal\" href=\"if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> block checking the <a class=\"reference internal\" href=\"../variable/cmake_crosscompiling#variable:CMAKE_CROSSCOMPILING\" title=\"CMAKE_CROSSCOMPILING\" id=\"index-1-variable:CMAKE_CROSSCOMPILING\"><code>CMAKE_CROSSCOMPILING</code></a> variable and provide an easy-to-preset alternative for this case.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/try_run.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/try_run.html</a>\n  </p>\n</div>\n","command/variable_watch":"<h1 id=\"command:variable_watch\">variable_watch</h1> <p id=\"variable-watch\">Watch the CMake variable for change.</p> <pre data-language=\"python\">variable_watch(&lt;variable name&gt; [&lt;command to execute&gt;])\n</pre> <p>If the specified variable changes, the message will be printed about the variable being changed. If the command is specified, the command will be executed. The command will receive the following arguments: COMMAND(&lt;variable&gt; &lt;access&gt; &lt;value&gt; &lt;current list file&gt; &lt;stack&gt;)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/variable_watch.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/variable_watch.html</a>\n  </p>\n</div>\n","command/build_name":"<h1 id=\"command:build_name\">build_name</h1> <p id=\"build-name\">Disallowed. See CMake Policy <a class=\"reference internal\" href=\"../policy/cmp0036#policy:CMP0036\" title=\"CMP0036\" id=\"index-0-policy:CMP0036\"><code>CMP0036</code></a>.</p> <p>Use <code>${CMAKE_SYSTEM}</code> and <code>${CMAKE_CXX_COMPILER}</code> instead.</p> <pre data-language=\"python\">build_name(variable)\n</pre> <p>Sets the specified variable to a string representing the platform and compiler settings. These values are now available through the <a class=\"reference internal\" href=\"../variable/cmake_system#variable:CMAKE_SYSTEM\" title=\"CMAKE_SYSTEM\" id=\"index-0-variable:CMAKE_SYSTEM\"><code>CMAKE_SYSTEM</code></a> and <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER\"><code>CMAKE_CXX_COMPILER</code></a> variables.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/build_name.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/build_name.html</a>\n  </p>\n</div>\n","command/exec_program":"<h1 id=\"command:exec_program\">exec_program</h1> <p id=\"exec-program\">Deprecated. Use the <a class=\"reference internal\" href=\"execute_process#command:execute_process\" title=\"execute_process\" id=\"index-0-command:execute_process\"><code>execute_process()</code></a> command instead.</p> <p>Run an executable program during the processing of the CMakeList.txt file.</p> <pre data-language=\"python\">exec_program(Executable [directory in which to run]\n             [ARGS &lt;arguments to executable&gt;]\n             [OUTPUT_VARIABLE &lt;var&gt;]\n             [RETURN_VALUE &lt;var&gt;])\n</pre> <p>The executable is run in the optionally specified directory. The executable can include arguments if it is double quoted, but it is better to use the optional <code>ARGS</code> argument to specify arguments to the program. This is because cmake will then be able to escape spaces in the executable path. An optional argument <code>OUTPUT_VARIABLE</code> specifies a variable in which to store the output. To capture the return value of the execution, provide a <code>RETURN_VALUE</code>. If <code>OUTPUT_VARIABLE</code> is specified, then no output will go to the stdout/stderr of the console running cmake.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/exec_program.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/exec_program.html</a>\n  </p>\n</div>\n","command/string":"<h1 id=\"command:string\">string</h1>   <ul id=\"string\"> <li>\n<a class=\"reference internal\" href=\"#search-and-replace\" id=\"id2\">Search and Replace</a><ul> <li><a class=\"reference internal\" href=\"#find\" id=\"id3\">FIND</a></li> <li><a class=\"reference internal\" href=\"#replace\" id=\"id4\">REPLACE</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#regular-expressions\" id=\"id5\">Regular Expressions</a><ul> <li><a class=\"reference internal\" href=\"#regex-match\" id=\"id6\">REGEX MATCH</a></li> <li><a class=\"reference internal\" href=\"#regex-matchall\" id=\"id7\">REGEX MATCHALL</a></li> <li><a class=\"reference internal\" href=\"#regex-replace\" id=\"id8\">REGEX REPLACE</a></li> <li><a class=\"reference internal\" href=\"#regex-specification\" id=\"id9\">Regex Specification</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#manipulation\" id=\"id10\">Manipulation</a><ul> <li><a class=\"reference internal\" href=\"#append\" id=\"id11\">APPEND</a></li> <li><a class=\"reference internal\" href=\"#concat\" id=\"id12\">CONCAT</a></li> <li><a class=\"reference internal\" href=\"#tolower\" id=\"id13\">TOLOWER</a></li> <li><a class=\"reference internal\" href=\"#toupper\" id=\"id14\">TOUPPER</a></li> <li><a class=\"reference internal\" href=\"#length\" id=\"id15\">LENGTH</a></li> <li><a class=\"reference internal\" href=\"#substring\" id=\"id16\">SUBSTRING</a></li> <li><a class=\"reference internal\" href=\"#strip\" id=\"id17\">STRIP</a></li> <li><a class=\"reference internal\" href=\"#genex-strip\" id=\"id18\">GENEX_STRIP</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#comparison\" id=\"id19\">Comparison</a></li> <li><a class=\"reference internal\" href=\"#hashing\" id=\"id20\">Hashing</a></li> <li>\n<a class=\"reference internal\" href=\"#generation\" id=\"id21\">Generation</a><ul> <li><a class=\"reference internal\" href=\"#ascii\" id=\"id22\">ASCII</a></li> <li><a class=\"reference internal\" href=\"#configure\" id=\"id23\">CONFIGURE</a></li> <li><a class=\"reference internal\" href=\"#random\" id=\"id24\">RANDOM</a></li> <li><a class=\"reference internal\" href=\"#timestamp\" id=\"id25\">TIMESTAMP</a></li> <li><a class=\"reference internal\" href=\"#uuid\" id=\"id26\">UUID</a></li> </ul> </li> </ul>\n  <p>String operations.</p>  <h2 id=\"search-and-replace\">Search and Replace</h2>  <h3 id=\"find\">FIND</h3> <pre data-language=\"python\">string(FIND &lt;string&gt; &lt;substring&gt; &lt;output variable&gt; [REVERSE])\n</pre> <p>Return the position where the given substring was found in the supplied string. If the <code>REVERSE</code> flag was used, the command will search for the position of the last occurrence of the specified substring. If the substring is not found, a position of -1 is returned.</p>   <h3 id=\"replace\">REPLACE</h3> <pre data-language=\"python\">string(REPLACE &lt;match_string&gt;\n       &lt;replace_string&gt; &lt;output variable&gt;\n       &lt;input&gt; [&lt;input&gt;...])\n</pre> <p>Replace all occurrences of <code>match_string</code> in the input with <code>replace_string</code> and store the result in the output.</p>    <h2 id=\"regular-expressions\">Regular Expressions</h2>  <h3 id=\"regex-match\">REGEX MATCH</h3> <pre data-language=\"python\">string(REGEX MATCH &lt;regular_expression&gt;\n       &lt;output variable&gt; &lt;input&gt; [&lt;input&gt;...])\n</pre> <p>Match the regular expression once and store the match in the output variable. All <code>&lt;input&gt;</code> arguments are concatenated before matching.</p>   <h3 id=\"regex-matchall\">REGEX MATCHALL</h3> <pre data-language=\"python\">string(REGEX MATCHALL &lt;regular_expression&gt;\n       &lt;output variable&gt; &lt;input&gt; [&lt;input&gt;...])\n</pre> <p>Match the regular expression as many times as possible and store the matches in the output variable as a list. All <code>&lt;input&gt;</code> arguments are concatenated before matching.</p>   <h3 id=\"regex-replace\">REGEX REPLACE</h3> <pre data-language=\"python\">string(REGEX REPLACE &lt;regular_expression&gt;\n       &lt;replace_expression&gt; &lt;output variable&gt;\n       &lt;input&gt; [&lt;input&gt;...])\n</pre> <p>Match the regular expression as many times as possible and substitute the replacement expression for the match in the output. All <code>&lt;input&gt;</code> arguments are concatenated before matching.</p> <p>The replace expression may refer to paren-delimited subexpressions of the match using <code>\\1</code>, <code>\\2</code>, ..., <code>\\9</code>. Note that two backslashes (<code>\\\\1</code>) are required in CMake code to get a backslash through argument parsing.</p>   <h3 id=\"regex-specification\">Regex Specification</h3> <p>The following characters have special meaning in regular expressions:</p> <pre data-language=\"python\">^         Matches at beginning of input\n$         Matches at end of input\n.         Matches any single character\n[ ]       Matches any character(s) inside the brackets\n[^ ]      Matches any character(s) not inside the brackets\n -        Inside brackets, specifies an inclusive range between\n          characters on either side e.g. [a-f] is [abcdef]\n          To match a literal - using brackets, make it the first\n          or the last character e.g. [+*/-] matches basic\n          mathematical operators.\n*         Matches preceding pattern zero or more times\n+         Matches preceding pattern one or more times\n?         Matches preceding pattern zero or once only\n|         Matches a pattern on either side of the |\n()        Saves a matched subexpression, which can be referenced\n          in the REGEX REPLACE operation. Additionally it is saved\n          by all regular expression-related commands, including\n          e.g. if( MATCHES ), in the variables CMAKE_MATCH_(0..9).\n</pre> <p><code>*</code>, <code>+</code> and <code>?</code> have higher precedence than concatenation. <code>|</code> has lower precedence than concatenation. This means that the regular expression <code>^ab+d$</code> matches <code>abbd</code> but not <code>ababd</code>, and the regular expression <code>^(ab|cd)$</code> matches <code>ab</code> but not <code>abd</code>.</p>    <h2 id=\"manipulation\">Manipulation</h2>  <h3 id=\"append\">APPEND</h3> <pre data-language=\"python\">string(APPEND &lt;string variable&gt; [&lt;input&gt;...])\n</pre> <p>Append all the input arguments to the string.</p>   <h3 id=\"concat\">CONCAT</h3> <pre data-language=\"python\">string(CONCAT &lt;output variable&gt; [&lt;input&gt;...])\n</pre> <p>Concatenate all the input arguments together and store the result in the named output variable.</p>   <h3 id=\"tolower\">TOLOWER</h3> <pre data-language=\"python\">string(TOLOWER &lt;string1&gt; &lt;output variable&gt;)\n</pre> <p>Convert string to lower characters.</p>   <h3 id=\"toupper\">TOUPPER</h3> <pre data-language=\"python\">string(TOUPPER &lt;string1&gt; &lt;output variable&gt;)\n</pre> <p>Convert string to upper characters.</p>   <h3 id=\"length\">LENGTH</h3> <pre data-language=\"python\">string(LENGTH &lt;string&gt; &lt;output variable&gt;)\n</pre> <p>Store in an output variable a given string’s length.</p>   <h3 id=\"substring\">SUBSTRING</h3> <pre data-language=\"python\">string(SUBSTRING &lt;string&gt; &lt;begin&gt; &lt;length&gt; &lt;output variable&gt;)\n</pre> <p>Store in an output variable a substring of a given string. If length is <code>-1</code> the remainder of the string starting at begin will be returned. If string is shorter than length then end of string is used instead.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">CMake 3.1 and below reported an error if length pointed past the end of string.</p> </div>   <h3 id=\"strip\">STRIP</h3> <pre data-language=\"python\">string(STRIP &lt;string&gt; &lt;output variable&gt;)\n</pre> <p>Store in an output variable a substring of a given string with leading and trailing spaces removed.</p>   <h3 id=\"genex-strip\">GENEX_STRIP</h3> <pre data-language=\"python\">string(GENEX_STRIP &lt;input string&gt; &lt;output variable&gt;)\n</pre> <p>Strip any <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>generator expressions</code></a> from the <code>input string</code> and store the result in the <code>output variable</code>.</p>    <h2 id=\"comparison\">Comparison</h2> <pre data-language=\"python\">string(COMPARE EQUAL &lt;string1&gt; &lt;string2&gt; &lt;output variable&gt;)\nstring(COMPARE NOTEQUAL &lt;string1&gt; &lt;string2&gt; &lt;output variable&gt;)\nstring(COMPARE LESS &lt;string1&gt; &lt;string2&gt; &lt;output variable&gt;)\nstring(COMPARE GREATER &lt;string1&gt; &lt;string2&gt; &lt;output variable&gt;)\n</pre> <p>Compare the strings and store true or false in the output variable.</p>   <h2 id=\"hashing\">Hashing</h2> <pre data-language=\"python\">string(&lt;MD5|SHA1|SHA224|SHA256|SHA384|SHA512&gt;\n       &lt;output variable&gt; &lt;input&gt;)\n</pre> <p>Compute a cryptographic hash of the input string.</p>   <h2 id=\"generation\">Generation</h2>  <h3 id=\"ascii\">ASCII</h3> <pre data-language=\"python\">string(ASCII &lt;number&gt; [&lt;number&gt; ...] &lt;output variable&gt;)\n</pre> <p>Convert all numbers into corresponding ASCII characters.</p>   <h3 id=\"configure\">CONFIGURE</h3> <pre data-language=\"python\">string(CONFIGURE &lt;string1&gt; &lt;output variable&gt;\n       [@ONLY] [ESCAPE_QUOTES])\n</pre> <p>Transform a string like <a class=\"reference internal\" href=\"configure_file#command:configure_file\" title=\"configure_file\" id=\"index-0-command:configure_file\"><code>configure_file()</code></a> transforms a file.</p>   <h3 id=\"random\">RANDOM</h3> <pre data-language=\"python\">string(RANDOM [LENGTH &lt;length&gt;] [ALPHABET &lt;alphabet&gt;]\n       [RANDOM_SEED &lt;seed&gt;] &lt;output variable&gt;)\n</pre> <p>Return a random string of given length consisting of characters from the given alphabet. Default length is 5 characters and default alphabet is all numbers and upper and lower case letters. If an integer <code>RANDOM_SEED</code> is given, its value will be used to seed the random number generator.</p>   <h3 id=\"timestamp\">TIMESTAMP</h3> <pre data-language=\"python\">string(TIMESTAMP &lt;output variable&gt; [&lt;format string&gt;] [UTC])\n</pre> <p>Write a string representation of the current date and/or time to the output variable.</p> <p>Should the command be unable to obtain a timestamp the output variable will be set to the empty string “”.</p> <p>The optional <code>UTC</code> flag requests the current date/time representation to be in Coordinated Universal Time (UTC) rather than local time.</p> <p>The optional <code>&lt;format string&gt;</code> may contain the following format specifiers:</p> <pre data-language=\"python\">%d        The day of the current month (01-31).\n%H        The hour on a 24-hour clock (00-23).\n%I        The hour on a 12-hour clock (01-12).\n%j        The day of the current year (001-366).\n%m        The month of the current year (01-12).\n%M        The minute of the current hour (00-59).\n%S        The second of the current minute.\n          60 represents a leap second. (00-60)\n%U        The week number of the current year (00-53).\n%w        The day of the current week. 0 is Sunday. (0-6)\n%y        The last two digits of the current year (00-99)\n%Y        The current year.\n</pre> <p>Unknown format specifiers will be ignored and copied to the output as-is.</p> <p>If no explicit <code>&lt;format string&gt;</code> is given it will default to:</p> <pre data-language=\"python\">%Y-%m-%dT%H:%M:%S    for local time.\n%Y-%m-%dT%H:%M:%SZ   for UTC.\n</pre> <pre data-language=\"python\">string(MAKE_C_IDENTIFIER &lt;input string&gt; &lt;output variable&gt;)\n</pre> <p>Write a string which can be used as an identifier in C.</p>   <h3 id=\"uuid\">UUID</h3> <pre data-language=\"python\">string(UUID &lt;output variable&gt; NAMESPACE &lt;namespace&gt; NAME &lt;name&gt;\n       TYPE &lt;MD5|SHA1&gt; [UPPER])\n</pre> <p>Create a univerally unique identifier (aka GUID) as per RFC4122 based on the hash of the combined values of <code>&lt;namespace&gt;</code> (which itself has to be a valid UUID) and <code>&lt;name&gt;</code>. The hash algorithm can be either <code>MD5</code> (Version 3 UUID) or <code>SHA1</code> (Version 5 UUID). A UUID has the format <code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code> where each <cite>x</cite> represents a lower case hexadecimal character. Where required an uppercase representation can be requested with the optional <code>UPPER</code> flag.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/string.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/string.html</a>\n  </p>\n</div>\n","command/export_library_dependencies":"<h1 id=\"command:export_library_dependencies\">export_library_dependencies</h1> <p id=\"export-library-dependencies\">Disallowed. See CMake Policy <a class=\"reference internal\" href=\"../policy/cmp0033#policy:CMP0033\" title=\"CMP0033\" id=\"index-0-policy:CMP0033\"><code>CMP0033</code></a>.</p> <p>Use <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(EXPORT)</code></a> or <a class=\"reference internal\" href=\"export#command:export\" title=\"export\" id=\"index-0-command:export\"><code>export()</code></a> command.</p> <p>This command generates an old-style library dependencies file. Projects requiring CMake 2.6 or later should not use the command. Use instead the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install(EXPORT)</code></a> command to help export targets from an installation tree and the <a class=\"reference internal\" href=\"export#command:export\" title=\"export\" id=\"index-1-command:export\"><code>export()</code></a> command to export targets from a build tree.</p> <p>The old-style library dependencies file does not take into account per-configuration names of libraries or the <a class=\"reference internal\" href=\"../prop_tgt/link_interface_libraries#prop_tgt:LINK_INTERFACE_LIBRARIES\" title=\"LINK_INTERFACE_LIBRARIES\" id=\"index-0-prop_tgt:LINK_INTERFACE_LIBRARIES\"><code>LINK_INTERFACE_LIBRARIES</code></a> target property.</p> <pre data-language=\"python\">export_library_dependencies(&lt;file&gt; [APPEND])\n</pre> <p>Create a file named <code>&lt;file&gt;</code> that can be included into a CMake listfile with the INCLUDE command. The file will contain a number of SET commands that will set all the variables needed for library dependency information. This should be the last command in the top level CMakeLists.txt file of the project. If the <code>APPEND</code> option is specified, the SET commands will be appended to the given file instead of replacing it.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/export_library_dependencies.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/export_library_dependencies.html</a>\n  </p>\n</div>\n","command/install_files":"<h1 id=\"command:install_files\">install_files</h1> <p id=\"install-files\">Deprecated. Use the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(FILES)</code></a> command instead.</p> <p>This command has been superceded by the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install()</code></a> command. It is provided for compatibility with older CMake code. The <code>FILES</code> form is directly replaced by the <code>FILES</code> form of the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-2-command:install\"><code>install()</code></a> command. The regexp form can be expressed more clearly using the <code>GLOB</code> form of the <a class=\"reference internal\" href=\"file#command:file\" title=\"file\" id=\"index-0-command:file\"><code>file()</code></a> command.</p> <pre data-language=\"python\">install_files(&lt;dir&gt; extension file file ...)\n</pre> <p>Create rules to install the listed files with the given extension into the given directory. Only files existing in the current source tree or its corresponding location in the binary tree may be listed. If a file specified already has an extension, that extension will be removed first. This is useful for providing lists of source files such as foo.cxx when you want the corresponding foo.h to be installed. A typical extension is ‘.h’.</p> <pre data-language=\"python\">install_files(&lt;dir&gt; regexp)\n</pre> <p>Any files in the current source directory that match the regular expression will be installed.</p> <pre data-language=\"python\">install_files(&lt;dir&gt; FILES file file ...)\n</pre> <p>Any files listed after the <code>FILES</code> keyword will be installed explicitly from the names given. Full paths are allowed in this form.</p> <p>The directory <code>&lt;dir&gt;</code> is relative to the installation prefix, which is stored in the variable <a class=\"reference internal\" href=\"../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/install_files.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/install_files.html</a>\n  </p>\n</div>\n","command/install_programs":"<h1 id=\"command:install_programs\">install_programs</h1> <p id=\"install-programs\">Deprecated. Use the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(PROGRAMS)</code></a> command instead.</p> <p>This command has been superceded by the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install()</code></a> command. It is provided for compatibility with older CMake code. The <code>FILES</code> form is directly replaced by the <code>PROGRAMS</code> form of the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-2-command:install\"><code>install()</code></a> command. The regexp form can be expressed more clearly using the <code>GLOB</code> form of the <a class=\"reference internal\" href=\"file#command:file\" title=\"file\" id=\"index-0-command:file\"><code>file()</code></a> command.</p> <pre data-language=\"python\">install_programs(&lt;dir&gt; file1 file2 [file3 ...])\ninstall_programs(&lt;dir&gt; FILES file1 [file2 ...])\n</pre> <p>Create rules to install the listed programs into the given directory. Use the <code>FILES</code> argument to guarantee that the file list version of the command will be used even when there is only one argument.</p> <pre data-language=\"python\">install_programs(&lt;dir&gt; regexp)\n</pre> <p>In the second form any program in the current source directory that matches the regular expression will be installed.</p> <p>This command is intended to install programs that are not built by cmake, such as shell scripts. See the <code>TARGETS</code> form of the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-3-command:install\"><code>install()</code></a> command to create installation rules for targets built by cmake.</p> <p>The directory <code>&lt;dir&gt;</code> is relative to the installation prefix, which is stored in the variable <a class=\"reference internal\" href=\"../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/install_programs.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/install_programs.html</a>\n  </p>\n</div>\n","command/install_targets":"<h1 id=\"command:install_targets\">install_targets</h1> <p id=\"install-targets\">Deprecated. Use the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install(TARGETS)</code></a> command instead.</p> <p>This command has been superceded by the <a class=\"reference internal\" href=\"install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install()</code></a> command. It is provided for compatibility with older CMake code.</p> <pre data-language=\"python\">install_targets(&lt;dir&gt; [RUNTIME_DIRECTORY dir] target target)\n</pre> <p>Create rules to install the listed targets into the given directory. The directory <code>&lt;dir&gt;</code> is relative to the installation prefix, which is stored in the variable <a class=\"reference internal\" href=\"../variable/cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a>. If <code>RUNTIME_DIRECTORY</code> is specified, then on systems with special runtime files (Windows DLL), the files will be copied to that directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/install_targets.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/install_targets.html</a>\n  </p>\n</div>\n","command/make_directory":"<h1 id=\"command:make_directory\">make_directory</h1> <p id=\"make-directory\">Deprecated. Use the <a class=\"reference internal\" href=\"file#command:file\" title=\"file\" id=\"index-0-command:file\"><code>file(MAKE_DIRECTORY)</code></a> command instead.</p> <pre data-language=\"python\">make_directory(directory)\n</pre> <p>Creates the specified directory. Full paths should be given. Any parent directories that do not exist will also be created. Use with care.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/make_directory.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/make_directory.html</a>\n  </p>\n</div>\n","command/load_command":"<h1 id=\"command:load_command\">load_command</h1> <p id=\"load-command\">Disallowed. See CMake Policy <a class=\"reference internal\" href=\"../policy/cmp0031#policy:CMP0031\" title=\"CMP0031\" id=\"index-0-policy:CMP0031\"><code>CMP0031</code></a>.</p> <p>Load a command into a running CMake.</p> <pre data-language=\"python\">load_command(COMMAND_NAME &lt;loc1&gt; [loc2 ...])\n</pre> <p>The given locations are searched for a library whose name is cmCOMMAND_NAME. If found, it is loaded as a module and the command is added to the set of available CMake commands. Usually, <a class=\"reference internal\" href=\"try_compile#command:try_compile\" title=\"try_compile\" id=\"index-0-command:try_compile\"><code>try_compile()</code></a> is used before this command to compile the module. If the command is successfully loaded a variable named</p> <pre data-language=\"python\">CMAKE_LOADED_COMMAND_&lt;COMMAND_NAME&gt;\n</pre> <p>will be set to the full path of the module that was loaded. Otherwise the variable will not be set.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/load_command.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/load_command.html</a>\n  </p>\n</div>\n","command/output_required_files":"<h1 id=\"command:output_required_files\">output_required_files</h1> <p id=\"output-required-files\">Disallowed. See CMake Policy <a class=\"reference internal\" href=\"../policy/cmp0032#policy:CMP0032\" title=\"CMP0032\" id=\"index-0-policy:CMP0032\"><code>CMP0032</code></a>.</p> <p>Approximate C preprocessor dependency scanning.</p> <p>This command exists only because ancient CMake versions provided it. CMake handles preprocessor dependency scanning automatically using a more advanced scanner.</p> <pre data-language=\"python\">output_required_files(srcfile outputfile)\n</pre> <p>Outputs a list of all the source files that are required by the specified srcfile. This list is written into outputfile. This is similar to writing out the dependencies for srcfile except that it jumps from .h files into .cxx, .c and .cpp files if possible.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/output_required_files.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/output_required_files.html</a>\n  </p>\n</div>\n","command/remove":"<h1 id=\"command:remove\">remove</h1> <p id=\"remove\">Deprecated. Use the <a class=\"reference internal\" href=\"list#command:list\" title=\"list\" id=\"index-0-command:list\"><code>list(REMOVE_ITEM)</code></a> command instead.</p> <pre data-language=\"python\">remove(VAR VALUE VALUE ...)\n</pre> <p>Removes <code>VALUE</code> from the variable <code>VAR</code>. This is typically used to remove entries from a vector (e.g. semicolon separated list). <code>VALUE</code> is expanded.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/remove.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/remove.html</a>\n  </p>\n</div>\n","command/subdir_depends":"<h1 id=\"command:subdir_depends\">subdir_depends</h1> <p id=\"subdir-depends\">Disallowed. See CMake Policy <a class=\"reference internal\" href=\"../policy/cmp0029#policy:CMP0029\" title=\"CMP0029\" id=\"index-0-policy:CMP0029\"><code>CMP0029</code></a>.</p> <p>Does nothing.</p> <pre data-language=\"python\">subdir_depends(subdir dep1 dep2 ...)\n</pre> <p>Does not do anything. This command used to help projects order parallel builds correctly. This functionality is now automatic.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/subdir_depends.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/subdir_depends.html</a>\n  </p>\n</div>\n","command/subdirs":"<h1 id=\"command:subdirs\">subdirs</h1> <p id=\"subdirs\">Deprecated. Use the <a class=\"reference internal\" href=\"add_subdirectory#command:add_subdirectory\" title=\"add_subdirectory\" id=\"index-0-command:add_subdirectory\"><code>add_subdirectory()</code></a> command instead.</p> <p>Add a list of subdirectories to the build.</p> <pre data-language=\"python\">subdirs(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...]\n        [PREORDER] )\n</pre> <p>Add a list of subdirectories to the build. The <a class=\"reference internal\" href=\"add_subdirectory#command:add_subdirectory\" title=\"add_subdirectory\" id=\"index-1-command:add_subdirectory\"><code>add_subdirectory()</code></a> command should be used instead of <code>subdirs</code> although <code>subdirs</code> will still work. This will cause any CMakeLists.txt files in the sub directories to be processed by CMake. Any directories after the <code>PREORDER</code> flag are traversed first by makefile builds, the <code>PREORDER</code> flag has no effect on IDE projects. Any directories after the <code>EXCLUDE_FROM_ALL</code> marker will not be included in the top level makefile or project file. This is useful for having CMake create makefiles or projects for a set of examples in a project. You would want CMake to generate makefiles or project files for all the examples at the same time, but you would not want them to show up in the top level project or be built each time make is run from the top.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/subdirs.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/subdirs.html</a>\n  </p>\n</div>\n","command/use_mangled_mesa":"<h1 id=\"command:use_mangled_mesa\">use_mangled_mesa</h1> <p id=\"use-mangled-mesa\">Disallowed. See CMake Policy <a class=\"reference internal\" href=\"../policy/cmp0030#policy:CMP0030\" title=\"CMP0030\" id=\"index-0-policy:CMP0030\"><code>CMP0030</code></a>.</p> <p>Copy mesa headers for use in combination with system GL.</p> <pre data-language=\"python\">use_mangled_mesa(PATH_TO_MESA OUTPUT_DIRECTORY)\n</pre> <p>The path to mesa includes, should contain gl_mangle.h. The mesa headers are copied to the specified output directory. This allows mangled mesa headers to override other GL headers by being added to the include directory path earlier.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/use_mangled_mesa.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/use_mangled_mesa.html</a>\n  </p>\n</div>\n","command/utility_source":"<h1 id=\"command:utility_source\">utility_source</h1> <p id=\"utility-source\">Disallowed. See CMake Policy <a class=\"reference internal\" href=\"../policy/cmp0034#policy:CMP0034\" title=\"CMP0034\" id=\"index-0-policy:CMP0034\"><code>CMP0034</code></a>.</p> <p>Specify the source tree of a third-party utility.</p> <pre data-language=\"python\">utility_source(cache_entry executable_name\n               path_to_source [file1 file2 ...])\n</pre> <p>When a third-party utility’s source is included in the distribution, this command specifies its location and name. The cache entry will not be set unless the <code>path_to_source</code> and all listed files exist. It is assumed that the source tree of the utility will have been built before it is needed.</p> <p>When cross compiling CMake will print a warning if a <code>utility_source()</code> command is executed, because in many cases it is used to build an executable which is executed later on. This doesn’t work when cross compiling, since the executable can run only on their target platform. So in this case the cache entry has to be adjusted manually so it points to an executable which is runnable on the build host.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/utility_source.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/utility_source.html</a>\n  </p>\n</div>\n","command/variable_requires":"<h1 id=\"command:variable_requires\">variable_requires</h1> <p id=\"variable-requires\">Disallowed. See CMake Policy <a class=\"reference internal\" href=\"../policy/cmp0035#policy:CMP0035\" title=\"CMP0035\" id=\"index-0-policy:CMP0035\"><code>CMP0035</code></a>.</p> <p>Use the <a class=\"reference internal\" href=\"if#command:if\" title=\"if\" id=\"index-0-command:if\"><code>if()</code></a> command instead.</p> <p>Assert satisfaction of an option’s required variables.</p> <pre data-language=\"python\">variable_requires(TEST_VARIABLE RESULT_VARIABLE\n                  REQUIRED_VARIABLE1\n                  REQUIRED_VARIABLE2 ...)\n</pre> <p>The first argument (<code>TEST_VARIABLE</code>) is the name of the variable to be tested, if that variable is false nothing else is done. If <code>TEST_VARIABLE</code> is true, then the next argument (<code>RESULT_VARIABLE</code>) is a variable that is set to true if all the required variables are set. The rest of the arguments are variables that must be true or not set to NOTFOUND to avoid an error. If any are not true, an error is reported.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/variable_requires.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/variable_requires.html</a>\n  </p>\n</div>\n","command/write_file":"<h1 id=\"command:write_file\">write_file</h1> <p id=\"write-file\">Deprecated. Use the <a class=\"reference internal\" href=\"file#command:file\" title=\"file\" id=\"index-0-command:file\"><code>file(WRITE)</code></a> command instead.</p> <pre data-language=\"python\">write_file(filename \"message to write\"... [APPEND])\n</pre> <p>The first argument is the file name, the rest of the arguments are messages to write. If the argument <code>APPEND</code> is specified, then the message will be appended.</p> <p>NOTE 1: <a class=\"reference internal\" href=\"file#command:file\" title=\"file\" id=\"index-1-command:file\"><code>file(WRITE)</code></a> and <a class=\"reference internal\" href=\"file#command:file\" title=\"file\" id=\"index-2-command:file\"><code>file(APPEND)</code></a> do exactly the same as this one but add some more functionality.</p> <p>NOTE 2: When using <code>write_file</code> the produced file cannot be used as an input to CMake (CONFIGURE_FILE, source file ...) because it will lead to an infinite loop. Use <a class=\"reference internal\" href=\"configure_file#command:configure_file\" title=\"configure_file\" id=\"index-0-command:configure_file\"><code>configure_file()</code></a> if you want to generate input files to CMake.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/write_file.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/write_file.html</a>\n  </p>\n</div>\n","command/ctest_empty_binary_directory":"<h1 id=\"command:ctest_empty_binary_directory\">ctest_empty_binary_directory</h1> <p id=\"ctest-empty-binary-directory\">empties the binary directory</p> <pre data-language=\"python\">ctest_empty_binary_directory( directory )\n</pre> <p>Removes a binary directory. This command will perform some checks prior to deleting the directory in an attempt to avoid malicious or accidental directory deletion.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_empty_binary_directory.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_empty_binary_directory.html</a>\n  </p>\n</div>\n","command/ctest_read_custom_files":"<h1 id=\"command:ctest_read_custom_files\">ctest_read_custom_files</h1> <p id=\"ctest-read-custom-files\">read CTestCustom files.</p> <pre data-language=\"python\">ctest_read_custom_files( directory ... )\n</pre> <p>Read all the CTestCustom.ctest or CTestCustom.cmake files from the given directory.</p> <p>By default, invoking <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> without a script will read custom files from the binary directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_read_custom_files.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_read_custom_files.html</a>\n  </p>\n</div>\n","command/ctest_run_script":"<h1 id=\"command:ctest_run_script\">ctest_run_script</h1> <p id=\"ctest-run-script\">runs a ctest -S script</p> <pre data-language=\"python\">ctest_run_script([NEW_PROCESS] script_file_name script_file_name1\n            script_file_name2 ... [RETURN_VALUE var])\n</pre> <p>Runs a script or scripts much like if it was run from ctest -S. If no argument is provided then the current script is run using the current settings of the variables. If <code>NEW_PROCESS</code> is specified then each script will be run in a separate process.If <code>RETURN_VALUE</code> is specified the return value of the last script run will be put into <code>var</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_run_script.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_run_script.html</a>\n  </p>\n</div>\n","command/ctest_sleep":"<h1 id=\"command:ctest_sleep\">ctest_sleep</h1> <p id=\"ctest-sleep\">sleeps for some amount of time</p> <pre data-language=\"python\">ctest_sleep(&lt;seconds&gt;)\n</pre> <p>Sleep for given number of seconds.</p> <pre data-language=\"python\">ctest_sleep(&lt;time1&gt; &lt;duration&gt; &lt;time2&gt;)\n</pre> <p>Sleep for t=(time1 + duration - time2) seconds if t &gt; 0.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_sleep.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_sleep.html</a>\n  </p>\n</div>\n","command/ctest_upload":"<h1 id=\"command:ctest_upload\">ctest_upload</h1> <p id=\"ctest-upload\">Upload files to a dashboard server as a <a class=\"reference internal\" href=\"../manual/ctest.1#dashboard-client\"><span>Dashboard Client</span></a>.</p> <pre data-language=\"python\">ctest_upload(FILES &lt;file&gt;... [QUIET])\n</pre> <p>The options are:</p> <dl class=\"docutils\"> <dt><code>FILES &lt;file&gt;...</code></dt> <dd>Specify a list of files to be sent along with the build results to the dashboard server.</dd> <dt><code>QUIET</code></dt> <dd>Suppress any CTest-specific non-error output that would have been printed to the console otherwise.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/command/ctest_upload.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/command/ctest_upload.html</a>\n  </p>\n</div>\n","variable/cmake_include_current_dir":"<h1 id=\"variable:CMAKE_INCLUDE_CURRENT_DIR\">CMAKE_INCLUDE_CURRENT_DIR</h1> <p id=\"cmake-include-current-dir\">Automatically add the current source- and build directories to the include path.</p> <p>If this variable is enabled, CMake automatically adds <a class=\"reference internal\" href=\"cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR\" title=\"CMAKE_CURRENT_SOURCE_DIR\" id=\"index-0-variable:CMAKE_CURRENT_SOURCE_DIR\"><code>CMAKE_CURRENT_SOURCE_DIR</code></a> and <a class=\"reference internal\" href=\"cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR\" title=\"CMAKE_CURRENT_BINARY_DIR\" id=\"index-0-variable:CMAKE_CURRENT_BINARY_DIR\"><code>CMAKE_CURRENT_BINARY_DIR</code></a> to the include path for each directory. These additional include directories do not propagate down to subdirectories. This is useful mainly for out-of-source builds, where files generated into the build tree are included by files located in the source tree.</p> <p>By default <code>CMAKE_INCLUDE_CURRENT_DIR</code> is <code>OFF</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_INCLUDE_CURRENT_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_INCLUDE_CURRENT_DIR.html</a>\n  </p>\n</div>\n","variable/cmake_automoc_moc_options":"<h1 id=\"variable:CMAKE_AUTOMOC_MOC_OPTIONS\">CMAKE_AUTOMOC_MOC_OPTIONS</h1> <p id=\"cmake-automoc-moc-options\">Additional options for <code>moc</code> when using <a class=\"reference internal\" href=\"cmake_automoc#variable:CMAKE_AUTOMOC\" title=\"CMAKE_AUTOMOC\" id=\"index-0-variable:CMAKE_AUTOMOC\"><code>CMAKE_AUTOMOC</code></a>.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/automoc_moc_options#prop_tgt:AUTOMOC_MOC_OPTIONS\" title=\"AUTOMOC_MOC_OPTIONS\" id=\"index-0-prop_tgt:AUTOMOC_MOC_OPTIONS\"><code>AUTOMOC_MOC_OPTIONS</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTOMOC_MOC_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTOMOC_MOC_OPTIONS.html</a>\n  </p>\n</div>\n","variable/cmake_autouic_options":"<h1 id=\"variable:CMAKE_AUTOUIC_OPTIONS\">CMAKE_AUTOUIC_OPTIONS</h1> <p id=\"cmake-autouic-options\">Whether to handle <code>uic</code> automatically for Qt targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/autouic_options#prop_tgt:AUTOUIC_OPTIONS\" title=\"AUTOUIC_OPTIONS\" id=\"index-0-prop_tgt:AUTOUIC_OPTIONS\"><code>AUTOUIC_OPTIONS</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTOUIC_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTOUIC_OPTIONS.html</a>\n  </p>\n</div>\n","variable/cmake_automoc":"<h1 id=\"variable:CMAKE_AUTOMOC\">CMAKE_AUTOMOC</h1> <p id=\"cmake-automoc\">Whether to handle <code>moc</code> automatically for Qt targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/automoc#prop_tgt:AUTOMOC\" title=\"AUTOMOC\" id=\"index-0-prop_tgt:AUTOMOC\"><code>AUTOMOC</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTOMOC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTOMOC.html</a>\n  </p>\n</div>\n","variable/cmake_autouic":"<h1 id=\"variable:CMAKE_AUTOUIC\">CMAKE_AUTOUIC</h1> <p id=\"cmake-autouic\">Whether to handle <code>uic</code> automatically for Qt targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/autouic#prop_tgt:AUTOUIC\" title=\"AUTOUIC\" id=\"index-0-prop_tgt:AUTOUIC\"><code>AUTOUIC</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTOUIC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTOUIC.html</a>\n  </p>\n</div>\n","variable/cmake_debug_target_properties":"<h1 id=\"variable:CMAKE_DEBUG_TARGET_PROPERTIES\">CMAKE_DEBUG_TARGET_PROPERTIES</h1> <p id=\"cmake-debug-target-properties\">Enables tracing output for target properties.</p> <p>This variable can be populated with a list of properties to generate debug output for when evaluating target properties. Currently it can only be used when evaluating the <a class=\"reference internal\" href=\"../prop_tgt/include_directories#prop_tgt:INCLUDE_DIRECTORIES\" title=\"INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INCLUDE_DIRECTORIES\"><code>INCLUDE_DIRECTORIES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/compile_definitions#prop_tgt:COMPILE_DEFINITIONS\" title=\"COMPILE_DEFINITIONS\" id=\"index-0-prop_tgt:COMPILE_DEFINITIONS\"><code>COMPILE_DEFINITIONS</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/compile_options#prop_tgt:COMPILE_OPTIONS\" title=\"COMPILE_OPTIONS\" id=\"index-0-prop_tgt:COMPILE_OPTIONS\"><code>COMPILE_OPTIONS</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/autouic_options#prop_tgt:AUTOUIC_OPTIONS\" title=\"AUTOUIC_OPTIONS\" id=\"index-0-prop_tgt:AUTOUIC_OPTIONS\"><code>AUTOUIC_OPTIONS</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/sources#prop_tgt:SOURCES\" title=\"SOURCES\" id=\"index-0-prop_tgt:SOURCES\"><code>SOURCES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/compile_features#prop_tgt:COMPILE_FEATURES\" title=\"COMPILE_FEATURES\" id=\"index-0-prop_tgt:COMPILE_FEATURES\"><code>COMPILE_FEATURES</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-0-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> target properties and any other property listed in <a class=\"reference internal\" href=\"../prop_tgt/compatible_interface_string#prop_tgt:COMPATIBLE_INTERFACE_STRING\" title=\"COMPATIBLE_INTERFACE_STRING\" id=\"index-0-prop_tgt:COMPATIBLE_INTERFACE_STRING\"><code>COMPATIBLE_INTERFACE_STRING</code></a> and other <code>COMPATIBLE_INTERFACE_</code> properties. It outputs an origin for each entry in the target property. Default is unset.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_DEBUG_TARGET_PROPERTIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_DEBUG_TARGET_PROPERTIES.html</a>\n  </p>\n</div>\n","variable/cmake_autorcc":"<h1 id=\"variable:CMAKE_AUTORCC\">CMAKE_AUTORCC</h1> <p id=\"cmake-autorcc\">Whether to handle <code>rcc</code> automatically for Qt targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/autorcc#prop_tgt:AUTORCC\" title=\"AUTORCC\" id=\"index-0-prop_tgt:AUTORCC\"><code>AUTORCC</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTORCC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTORCC.html</a>\n  </p>\n</div>\n","variable/cmake_autorcc_options":"<h1 id=\"variable:CMAKE_AUTORCC_OPTIONS\">CMAKE_AUTORCC_OPTIONS</h1> <p id=\"cmake-autorcc-options\">Whether to handle <code>rcc</code> automatically for Qt targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/autorcc_options#prop_tgt:AUTORCC_OPTIONS\" title=\"AUTORCC_OPTIONS\" id=\"index-0-prop_tgt:AUTORCC_OPTIONS\"><code>AUTORCC_OPTIONS</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTORCC_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTORCC_OPTIONS.html</a>\n  </p>\n</div>\n","variable/cmake_cxx_standard":"<h1 id=\"variable:CMAKE_CXX_STANDARD\">CMAKE_CXX_STANDARD</h1> <p id=\"cmake-cxx-standard\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/cxx_standard#prop_tgt:CXX_STANDARD\" title=\"CXX_STANDARD\" id=\"index-0-prop_tgt:CXX_STANDARD\"><code>CXX_STANDARD</code></a> property of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/cxx_standard#prop_tgt:CXX_STANDARD\" title=\"CXX_STANDARD\" id=\"index-1-prop_tgt:CXX_STANDARD\"><code>CXX_STANDARD</code></a> property on all targets. See that target property for additional information.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CXX_STANDARD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CXX_STANDARD.html</a>\n  </p>\n</div>\n","variable/build_shared_libs":"<h1 id=\"variable:BUILD_SHARED_LIBS\">BUILD_SHARED_LIBS</h1> <p id=\"build-shared-libs\">Global flag to cause <a class=\"reference internal\" href=\"../command/add_library#command:add_library\" title=\"add_library\" id=\"index-0-command:add_library\"><code>add_library()</code></a> to create shared libraries if on.</p> <p>If present and true, this will cause all libraries to be built shared unless the library was explicitly added as a static library. This variable is often added to projects as an <a class=\"reference internal\" href=\"../command/option#command:option\" title=\"option\" id=\"index-0-command:option\"><code>option()</code></a> so that each user of a project can decide if they want to build the project using shared or static libraries.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/BUILD_SHARED_LIBS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/BUILD_SHARED_LIBS.html</a>\n  </p>\n</div>\n","variable/cmake_build_type":"<h1 id=\"variable:CMAKE_BUILD_TYPE\">CMAKE_BUILD_TYPE</h1> <p id=\"cmake-build-type\">Specifies the build type on single-configuration generators.</p> <p>This statically specifies what build type (configuration) will be built in this build tree. Possible values are empty, <code>Debug</code>, <code>Release</code>, <code>RelWithDebInfo</code> and <code>MinSizeRel</code>. This variable is only meaningful to single-configuration generators (such as <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> and <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a>) i.e. those which choose a single configuration when CMake runs to generate a build tree as opposed to multi-configuration generators which offer selection of the build configuration within the generated build environment. There are many per-config properties and variables (usually following clean <code>SOME_VAR_&lt;CONFIG&gt;</code> order conventions), such as <code>CMAKE_C_FLAGS_&lt;CONFIG&gt;</code>, specified as uppercase: <code>CMAKE_C_FLAGS_[DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL]</code>. For example, in a build tree configured to build type <code>Debug</code>, CMake will see to having <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_FLAGS_DEBUG\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_FLAGS_DEBUG\"><code>CMAKE_C_FLAGS_DEBUG</code></a> settings get added to the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_FLAGS\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_FLAGS\"><code>CMAKE_C_FLAGS</code></a> settings. See also <a class=\"reference internal\" href=\"cmake_configuration_types#variable:CMAKE_CONFIGURATION_TYPES\" title=\"CMAKE_CONFIGURATION_TYPES\" id=\"index-0-variable:CMAKE_CONFIGURATION_TYPES\"><code>CMAKE_CONFIGURATION_TYPES</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_BUILD_TYPE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_BUILD_TYPE.html</a>\n  </p>\n</div>\n","variable/cmake_ar":"<h1 id=\"variable:CMAKE_AR\">CMAKE_AR</h1> <p id=\"cmake-ar\">Name of archiving tool for static libraries.</p> <p>This specifies the name of the program that creates archive or static libraries.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_AR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_AR.html</a>\n  </p>\n</div>\n","variable/cmake_binary_dir":"<h1 id=\"variable:CMAKE_BINARY_DIR\">CMAKE_BINARY_DIR</h1> <p id=\"cmake-binary-dir\">The path to the top level of the build tree.</p> <p>This is the full path to the top level of the current CMake build tree. For an in-source build, this would be the same as <a class=\"reference internal\" href=\"cmake_source_dir#variable:CMAKE_SOURCE_DIR\" title=\"CMAKE_SOURCE_DIR\" id=\"index-0-variable:CMAKE_SOURCE_DIR\"><code>CMAKE_SOURCE_DIR</code></a>.</p> <p>When run in -P script mode, CMake sets the variables <a class=\"reference internal\" href=\"#variable:CMAKE_BINARY_DIR\" title=\"CMAKE_BINARY_DIR\" id=\"index-0-variable:CMAKE_BINARY_DIR\"><code>CMAKE_BINARY_DIR</code></a>, <a class=\"reference internal\" href=\"cmake_source_dir#variable:CMAKE_SOURCE_DIR\" title=\"CMAKE_SOURCE_DIR\" id=\"index-1-variable:CMAKE_SOURCE_DIR\"><code>CMAKE_SOURCE_DIR</code></a>, <a class=\"reference internal\" href=\"cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR\" title=\"CMAKE_CURRENT_BINARY_DIR\" id=\"index-0-variable:CMAKE_CURRENT_BINARY_DIR\"><code>CMAKE_CURRENT_BINARY_DIR</code></a> and <a class=\"reference internal\" href=\"cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR\" title=\"CMAKE_CURRENT_SOURCE_DIR\" id=\"index-0-variable:CMAKE_CURRENT_SOURCE_DIR\"><code>CMAKE_CURRENT_SOURCE_DIR</code></a> to the current working directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_BINARY_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_BINARY_DIR.html</a>\n  </p>\n</div>\n","variable/cmake_include_current_dir_in_interface":"<h1 id=\"variable:CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE\">CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE</h1> <p id=\"cmake-include-current-dir-in-interface\">Automatically add the current source- and build directories to the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-0-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> target property.</p> <p>If this variable is enabled, CMake automatically adds for each shared library target, static library target, module target and executable target, <a class=\"reference internal\" href=\"cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR\" title=\"CMAKE_CURRENT_SOURCE_DIR\" id=\"index-0-variable:CMAKE_CURRENT_SOURCE_DIR\"><code>CMAKE_CURRENT_SOURCE_DIR</code></a> and <a class=\"reference internal\" href=\"cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR\" title=\"CMAKE_CURRENT_BINARY_DIR\" id=\"index-0-variable:CMAKE_CURRENT_BINARY_DIR\"><code>CMAKE_CURRENT_BINARY_DIR</code></a> to the <a class=\"reference internal\" href=\"../prop_tgt/interface_include_directories#prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\" title=\"INTERFACE_INCLUDE_DIRECTORIES\" id=\"index-1-prop_tgt:INTERFACE_INCLUDE_DIRECTORIES\"><code>INTERFACE_INCLUDE_DIRECTORIES</code></a> target property. By default <code>CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE</code> is <code>OFF</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE.html</a>\n  </p>\n</div>\n","variable/cmake_argc":"<h1 id=\"variable:CMAKE_ARGC\">CMAKE_ARGC</h1> <p id=\"cmake-argc\">Number of command line arguments passed to CMake in script mode.</p> <p>When run in <a class=\"reference internal\" href=\"../manual/cmake.1#cmake-options\"><span>-P</span></a> script mode, CMake sets this variable to the number of command line arguments. See also <a class=\"reference internal\" href=\"cmake_argv0#variable:CMAKE_ARGV0\" title=\"CMAKE_ARGV0\" id=\"index-0-variable:CMAKE_ARGV0\"><code>CMAKE_ARGV0</code></a>, <code>1</code>, <code>2</code> ...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ARGC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ARGC.html</a>\n  </p>\n</div>\n","variable/cmake_argv0":"<h1 id=\"variable:CMAKE_ARGV0\">CMAKE_ARGV0</h1> <p id=\"cmake-argv0\">Command line argument passed to CMake in script mode.</p> <p>When run in <a class=\"reference internal\" href=\"../manual/cmake.1#cmake-options\"><span>-P</span></a> script mode, CMake sets this variable to the first command line argument. It then also sets <code>CMAKE_ARGV1</code>, <code>CMAKE_ARGV2</code>, ... and so on, up to the number of command line arguments given. See also <a class=\"reference internal\" href=\"cmake_argc#variable:CMAKE_ARGC\" title=\"CMAKE_ARGC\" id=\"index-0-variable:CMAKE_ARGC\"><code>CMAKE_ARGC</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ARGV0.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ARGV0.html</a>\n  </p>\n</div>\n","variable/cmake_build_tool":"<h1 id=\"variable:CMAKE_BUILD_TOOL\">CMAKE_BUILD_TOOL</h1> <p id=\"cmake-build-tool\">This variable exists only for backwards compatibility. It contains the same value as <a class=\"reference internal\" href=\"cmake_make_program#variable:CMAKE_MAKE_PROGRAM\" title=\"CMAKE_MAKE_PROGRAM\" id=\"index-0-variable:CMAKE_MAKE_PROGRAM\"><code>CMAKE_MAKE_PROGRAM</code></a>. Use that variable instead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_BUILD_TOOL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_BUILD_TOOL.html</a>\n  </p>\n</div>\n","variable/cmake_cachefile_dir":"<h1 id=\"variable:CMAKE_CACHEFILE_DIR\">CMAKE_CACHEFILE_DIR</h1> <p id=\"cmake-cachefile-dir\">The directory with the <code>CMakeCache.txt</code> file.</p> <p>This is the full path to the directory that has the <code>CMakeCache.txt</code> file in it. This is the same as <a class=\"reference internal\" href=\"cmake_binary_dir#variable:CMAKE_BINARY_DIR\" title=\"CMAKE_BINARY_DIR\" id=\"index-0-variable:CMAKE_BINARY_DIR\"><code>CMAKE_BINARY_DIR</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CACHEFILE_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CACHEFILE_DIR.html</a>\n  </p>\n</div>\n","variable/cmake_cache_major_version":"<h1 id=\"variable:CMAKE_CACHE_MAJOR_VERSION\">CMAKE_CACHE_MAJOR_VERSION</h1> <p id=\"cmake-cache-major-version\">Major version of CMake used to create the <code>CMakeCache.txt</code> file</p> <p>This stores the major version of CMake used to write a CMake cache file. It is only different when a different version of CMake is run on a previously created cache file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CACHE_MAJOR_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CACHE_MAJOR_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_cache_minor_version":"<h1 id=\"variable:CMAKE_CACHE_MINOR_VERSION\">CMAKE_CACHE_MINOR_VERSION</h1> <p id=\"cmake-cache-minor-version\">Minor version of CMake used to create the <code>CMakeCache.txt</code> file</p> <p>This stores the minor version of CMake used to write a CMake cache file. It is only different when a different version of CMake is run on a previously created cache file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CACHE_MINOR_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CACHE_MINOR_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_cache_patch_version":"<h1 id=\"variable:CMAKE_CACHE_PATCH_VERSION\">CMAKE_CACHE_PATCH_VERSION</h1> <p id=\"cmake-cache-patch-version\">Patch version of CMake used to create the <code>CMakeCache.txt</code> file</p> <p>This stores the patch version of CMake used to write a CMake cache file. It is only different when a different version of CMake is run on a previously created cache file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CACHE_PATCH_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CACHE_PATCH_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_crosscompiling_emulator":"<h1 id=\"variable:CMAKE_CROSSCOMPILING_EMULATOR\">CMAKE_CROSSCOMPILING_EMULATOR</h1> <p id=\"cmake-crosscompiling-emulator\">This variable is only used when <a class=\"reference internal\" href=\"cmake_crosscompiling#variable:CMAKE_CROSSCOMPILING\" title=\"CMAKE_CROSSCOMPILING\" id=\"index-0-variable:CMAKE_CROSSCOMPILING\"><code>CMAKE_CROSSCOMPILING</code></a> is on. It should point to a command on the host system that can run executable built for the target system.</p> <p>The command will be used to run <a class=\"reference internal\" href=\"../command/try_run#command:try_run\" title=\"try_run\" id=\"index-0-command:try_run\"><code>try_run()</code></a> generated executables, which avoids manual population of the TryRunResults.cmake file.</p> <p>It is also used as the default value for the <a class=\"reference internal\" href=\"../prop_tgt/crosscompiling_emulator#prop_tgt:CROSSCOMPILING_EMULATOR\" title=\"CROSSCOMPILING_EMULATOR\" id=\"index-0-prop_tgt:CROSSCOMPILING_EMULATOR\"><code>CROSSCOMPILING_EMULATOR</code></a> target property of executables.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CROSSCOMPILING_EMULATOR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CROSSCOMPILING_EMULATOR.html</a>\n  </p>\n</div>\n","variable/cmake_ctest_command":"<h1 id=\"variable:CMAKE_CTEST_COMMAND\">CMAKE_CTEST_COMMAND</h1> <p id=\"cmake-ctest-command\">Full path to <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> command installed with CMake.</p> <p>This is the full path to the CTest executable <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-1-manual:ctest(1)\"><code>ctest(1)</code></a> which is useful from custom commands that want to use the <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> <code>-E</code> option for portable system commands.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CTEST_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CTEST_COMMAND.html</a>\n  </p>\n</div>\n","variable/cmake_current_binary_dir":"<h1 id=\"variable:CMAKE_CURRENT_BINARY_DIR\">CMAKE_CURRENT_BINARY_DIR</h1> <p id=\"cmake-current-binary-dir\">The path to the binary directory currently being processed.</p> <p>This the full path to the build directory that is currently being processed by cmake. Each directory added by <a class=\"reference internal\" href=\"../command/add_subdirectory#command:add_subdirectory\" title=\"add_subdirectory\" id=\"index-0-command:add_subdirectory\"><code>add_subdirectory()</code></a> will create a binary directory in the build tree, and as it is being processed this variable will be set. For in-source builds this is the current source directory being processed.</p> <p>When run in -P script mode, CMake sets the variables <a class=\"reference internal\" href=\"cmake_binary_dir#variable:CMAKE_BINARY_DIR\" title=\"CMAKE_BINARY_DIR\" id=\"index-0-variable:CMAKE_BINARY_DIR\"><code>CMAKE_BINARY_DIR</code></a>, <a class=\"reference internal\" href=\"cmake_source_dir#variable:CMAKE_SOURCE_DIR\" title=\"CMAKE_SOURCE_DIR\" id=\"index-0-variable:CMAKE_SOURCE_DIR\"><code>CMAKE_SOURCE_DIR</code></a>, <a class=\"reference internal\" href=\"#variable:CMAKE_CURRENT_BINARY_DIR\" title=\"CMAKE_CURRENT_BINARY_DIR\" id=\"index-0-variable:CMAKE_CURRENT_BINARY_DIR\"><code>CMAKE_CURRENT_BINARY_DIR</code></a> and <a class=\"reference internal\" href=\"cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR\" title=\"CMAKE_CURRENT_SOURCE_DIR\" id=\"index-0-variable:CMAKE_CURRENT_SOURCE_DIR\"><code>CMAKE_CURRENT_SOURCE_DIR</code></a> to the current working directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CURRENT_BINARY_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CURRENT_BINARY_DIR.html</a>\n  </p>\n</div>\n","variable/cmake_current_list_dir":"<h1 id=\"variable:CMAKE_CURRENT_LIST_DIR\">CMAKE_CURRENT_LIST_DIR</h1> <p id=\"cmake-current-list-dir\">Full directory of the listfile currently being processed.</p> <p>As CMake processes the listfiles in your project this variable will always be set to the directory where the listfile which is currently being processed (<a class=\"reference internal\" href=\"cmake_current_list_file#variable:CMAKE_CURRENT_LIST_FILE\" title=\"CMAKE_CURRENT_LIST_FILE\" id=\"index-0-variable:CMAKE_CURRENT_LIST_FILE\"><code>CMAKE_CURRENT_LIST_FILE</code></a>) is located. The value has dynamic scope. When CMake starts processing commands in a source file it sets this variable to the directory where this file is located. When CMake finishes processing commands from the file it restores the previous value. Therefore the value of the variable inside a macro or function is the directory of the file invoking the bottom-most entry on the call stack, not the directory of the file containing the macro or function definition.</p> <p>See also <a class=\"reference internal\" href=\"cmake_current_list_file#variable:CMAKE_CURRENT_LIST_FILE\" title=\"CMAKE_CURRENT_LIST_FILE\" id=\"index-1-variable:CMAKE_CURRENT_LIST_FILE\"><code>CMAKE_CURRENT_LIST_FILE</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CURRENT_LIST_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CURRENT_LIST_DIR.html</a>\n  </p>\n</div>\n","variable/cmake_current_list_file":"<h1 id=\"variable:CMAKE_CURRENT_LIST_FILE\">CMAKE_CURRENT_LIST_FILE</h1> <p id=\"cmake-current-list-file\">Full path to the listfile currently being processed.</p> <p>As CMake processes the listfiles in your project this variable will always be set to the one currently being processed. The value has dynamic scope. When CMake starts processing commands in a source file it sets this variable to the location of the file. When CMake finishes processing commands from the file it restores the previous value. Therefore the value of the variable inside a macro or function is the file invoking the bottom-most entry on the call stack, not the file containing the macro or function definition.</p> <p>See also <a class=\"reference internal\" href=\"cmake_parent_list_file#variable:CMAKE_PARENT_LIST_FILE\" title=\"CMAKE_PARENT_LIST_FILE\" id=\"index-0-variable:CMAKE_PARENT_LIST_FILE\"><code>CMAKE_PARENT_LIST_FILE</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CURRENT_LIST_FILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CURRENT_LIST_FILE.html</a>\n  </p>\n</div>\n","variable/cmake_current_list_line":"<h1 id=\"variable:CMAKE_CURRENT_LIST_LINE\">CMAKE_CURRENT_LIST_LINE</h1> <p id=\"cmake-current-list-line\">The line number of the current file being processed.</p> <p>This is the line number of the file currently being processed by cmake.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CURRENT_LIST_LINE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CURRENT_LIST_LINE.html</a>\n  </p>\n</div>\n","variable/cmake_current_source_dir":"<h1 id=\"variable:CMAKE_CURRENT_SOURCE_DIR\">CMAKE_CURRENT_SOURCE_DIR</h1> <p id=\"cmake-current-source-dir\">The path to the source directory currently being processed.</p> <p>This the full path to the source directory that is currently being processed by cmake.</p> <p>When run in -P script mode, CMake sets the variables <a class=\"reference internal\" href=\"cmake_binary_dir#variable:CMAKE_BINARY_DIR\" title=\"CMAKE_BINARY_DIR\" id=\"index-0-variable:CMAKE_BINARY_DIR\"><code>CMAKE_BINARY_DIR</code></a>, <a class=\"reference internal\" href=\"cmake_source_dir#variable:CMAKE_SOURCE_DIR\" title=\"CMAKE_SOURCE_DIR\" id=\"index-0-variable:CMAKE_SOURCE_DIR\"><code>CMAKE_SOURCE_DIR</code></a>, <a class=\"reference internal\" href=\"cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR\" title=\"CMAKE_CURRENT_BINARY_DIR\" id=\"index-0-variable:CMAKE_CURRENT_BINARY_DIR\"><code>CMAKE_CURRENT_BINARY_DIR</code></a> and <a class=\"reference internal\" href=\"#variable:CMAKE_CURRENT_SOURCE_DIR\" title=\"CMAKE_CURRENT_SOURCE_DIR\" id=\"index-0-variable:CMAKE_CURRENT_SOURCE_DIR\"><code>CMAKE_CURRENT_SOURCE_DIR</code></a> to the current working directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CURRENT_SOURCE_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CURRENT_SOURCE_DIR.html</a>\n  </p>\n</div>\n","variable/cmake_extra_generator":"<h1 id=\"variable:CMAKE_EXTRA_GENERATOR\">CMAKE_EXTRA_GENERATOR</h1> <p id=\"cmake-extra-generator\">The extra generator used to build the project. See <a class=\"reference internal\" href=\"../manual/cmake-generators.7#manual:cmake-generators(7)\" title=\"cmake-generators(7)\" id=\"index-0-manual:cmake-generators(7)\"><code>cmake-generators(7)</code></a>.</p> <p>When using the Eclipse, CodeBlocks or KDevelop generators, CMake generates Makefiles (<a class=\"reference internal\" href=\"cmake_generator#variable:CMAKE_GENERATOR\" title=\"CMAKE_GENERATOR\" id=\"index-0-variable:CMAKE_GENERATOR\"><code>CMAKE_GENERATOR</code></a>) and additionally project files for the respective IDE. This IDE project file generator is stored in <code>CMAKE_EXTRA_GENERATOR</code> (e.g. <code>Eclipse CDT4</code>).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXTRA_GENERATOR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXTRA_GENERATOR.html</a>\n  </p>\n</div>\n","variable/cmake_dl_libs":"<h1 id=\"variable:CMAKE_DL_LIBS\">CMAKE_DL_LIBS</h1> <p id=\"cmake-dl-libs\">Name of library containing <code>dlopen</code> and <code>dlcose</code>.</p> <p>The name of the library that has <code>dlopen</code> and <code>dlclose</code> in it, usually <code>-ldl</code> on most UNIX machines.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_DL_LIBS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_DL_LIBS.html</a>\n  </p>\n</div>\n","variable/cmake_edit_command":"<h1 id=\"variable:CMAKE_EDIT_COMMAND\">CMAKE_EDIT_COMMAND</h1> <p id=\"cmake-edit-command\">Full path to <a class=\"reference internal\" href=\"../manual/cmake-gui.1#manual:cmake-gui(1)\" title=\"cmake-gui(1)\" id=\"index-0-manual:cmake-gui(1)\"><code>cmake-gui(1)</code></a> or <a class=\"reference internal\" href=\"../manual/ccmake.1#manual:ccmake(1)\" title=\"ccmake(1)\" id=\"index-0-manual:ccmake(1)\"><code>ccmake(1)</code></a>. Defined only for <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> when not using an “extra” generator for an IDE.</p> <p>This is the full path to the CMake executable that can graphically edit the cache. For example, <a class=\"reference internal\" href=\"../manual/cmake-gui.1#manual:cmake-gui(1)\" title=\"cmake-gui(1)\" id=\"index-1-manual:cmake-gui(1)\"><code>cmake-gui(1)</code></a> or <a class=\"reference internal\" href=\"../manual/ccmake.1#manual:ccmake(1)\" title=\"ccmake(1)\" id=\"index-1-manual:ccmake(1)\"><code>ccmake(1)</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_EDIT_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_EDIT_COMMAND.html</a>\n  </p>\n</div>\n","variable/cmake_executable_suffix":"<h1 id=\"variable:CMAKE_EXECUTABLE_SUFFIX\">CMAKE_EXECUTABLE_SUFFIX</h1> <p id=\"cmake-executable-suffix\">The suffix for executables on this platform.</p> <p>The suffix to use for the end of an executable filename if any, <code>.exe</code> on Windows.</p> <p><code>CMAKE_EXECUTABLE_SUFFIX_&lt;LANG&gt;</code> overrides this for language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXECUTABLE_SUFFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXECUTABLE_SUFFIX.html</a>\n  </p>\n</div>\n","variable/cmake_extra_shared_library_suffixes":"<h1 id=\"variable:CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES\">CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES</h1> <p id=\"cmake-extra-shared-library-suffixes\">Additional suffixes for shared libraries.</p> <p>Extensions for shared libraries other than that specified by <a class=\"reference internal\" href=\"cmake_shared_library_suffix#variable:CMAKE_SHARED_LIBRARY_SUFFIX\" title=\"CMAKE_SHARED_LIBRARY_SUFFIX\" id=\"index-0-variable:CMAKE_SHARED_LIBRARY_SUFFIX\"><code>CMAKE_SHARED_LIBRARY_SUFFIX</code></a>, if any. CMake uses this to recognize external shared library files during analysis of libraries linked by a target.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES.html</a>\n  </p>\n</div>\n","variable/cmake_find_package_name":"<h1 id=\"variable:CMAKE_FIND_PACKAGE_NAME\">CMAKE_FIND_PACKAGE_NAME</h1> <p id=\"cmake-find-package-name\">Defined by the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> command while loading a find module to record the caller-specified package name. See command documentation for details.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_PACKAGE_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_PACKAGE_NAME.html</a>\n  </p>\n</div>\n","variable/cmake_generator":"<h1 id=\"variable:CMAKE_GENERATOR\">CMAKE_GENERATOR</h1> <p id=\"cmake-generator\">The generator used to build the project. See <a class=\"reference internal\" href=\"../manual/cmake-generators.7#manual:cmake-generators(7)\" title=\"cmake-generators(7)\" id=\"index-0-manual:cmake-generators(7)\"><code>cmake-generators(7)</code></a>.</p> <p>The name of the generator that is being used to generate the build files. (e.g. <code>Unix Makefiles</code>, <code>Visual Studio 6</code>, etc.)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_GENERATOR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_GENERATOR.html</a>\n  </p>\n</div>\n","variable/cmake_home_directory":"<h1 id=\"variable:CMAKE_HOME_DIRECTORY\">CMAKE_HOME_DIRECTORY</h1> <p id=\"cmake-home-directory\">Path to top of source tree.</p> <p>This is the path to the top level of the source tree.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOME_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOME_DIRECTORY.html</a>\n  </p>\n</div>\n","variable/cmake_import_library_prefix":"<h1 id=\"variable:CMAKE_IMPORT_LIBRARY_PREFIX\">CMAKE_IMPORT_LIBRARY_PREFIX</h1> <p id=\"cmake-import-library-prefix\">The prefix for import libraries that you link to.</p> <p>The prefix to use for the name of an import library if used on this platform.</p> <p><code>CMAKE_IMPORT_LIBRARY_PREFIX_&lt;LANG&gt;</code> overrides this for language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_IMPORT_LIBRARY_PREFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_IMPORT_LIBRARY_PREFIX.html</a>\n  </p>\n</div>\n","variable/cmake_import_library_suffix":"<h1 id=\"variable:CMAKE_IMPORT_LIBRARY_SUFFIX\">CMAKE_IMPORT_LIBRARY_SUFFIX</h1> <p id=\"cmake-import-library-suffix\">The suffix for import libraries that you link to.</p> <p>The suffix to use for the end of an import library filename if used on this platform.</p> <p><code>CMAKE_IMPORT_LIBRARY_SUFFIX_&lt;LANG&gt;</code> overrides this for language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_IMPORT_LIBRARY_SUFFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_IMPORT_LIBRARY_SUFFIX.html</a>\n  </p>\n</div>\n","variable/cmake_job_pool_compile":"<h1 id=\"variable:CMAKE_JOB_POOL_COMPILE\">CMAKE_JOB_POOL_COMPILE</h1> <p id=\"cmake-job-pool-compile\">This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/job_pool_compile#prop_tgt:JOB_POOL_COMPILE\" title=\"JOB_POOL_COMPILE\" id=\"index-0-prop_tgt:JOB_POOL_COMPILE\"><code>JOB_POOL_COMPILE</code></a> property on all the targets. See <a class=\"reference internal\" href=\"../prop_tgt/job_pool_compile#prop_tgt:JOB_POOL_COMPILE\" title=\"JOB_POOL_COMPILE\" id=\"index-1-prop_tgt:JOB_POOL_COMPILE\"><code>JOB_POOL_COMPILE</code></a> for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_JOB_POOL_COMPILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_JOB_POOL_COMPILE.html</a>\n  </p>\n</div>\n","variable/cmake_job_pool_link":"<h1 id=\"variable:CMAKE_JOB_POOL_LINK\">CMAKE_JOB_POOL_LINK</h1> <p id=\"cmake-job-pool-link\">This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/job_pool_link#prop_tgt:JOB_POOL_LINK\" title=\"JOB_POOL_LINK\" id=\"index-0-prop_tgt:JOB_POOL_LINK\"><code>JOB_POOL_LINK</code></a> property on all the targets. See <a class=\"reference internal\" href=\"../prop_tgt/job_pool_link#prop_tgt:JOB_POOL_LINK\" title=\"JOB_POOL_LINK\" id=\"index-1-prop_tgt:JOB_POOL_LINK\"><code>JOB_POOL_LINK</code></a> for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_JOB_POOL_LINK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_JOB_POOL_LINK.html</a>\n  </p>\n</div>\n","variable/cmake_match_count":"<h1 id=\"variable:CMAKE_MATCH_COUNT\">CMAKE_MATCH_COUNT</h1> <p id=\"cmake-match-count\">The number of matches with the last regular expression.</p> <p>When a regular expression match is used, CMake fills in <code>CMAKE_MATCH_&lt;n&gt;</code> variables with the match contents. The <code>CMAKE_MATCH_COUNT</code> variable holds the number of match expressions when these are filled.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_MATCH_COUNT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_MATCH_COUNT.html</a>\n  </p>\n</div>\n","variable/cmake_link_search_end_static":"<h1 id=\"variable:CMAKE_LINK_SEARCH_END_STATIC\">CMAKE_LINK_SEARCH_END_STATIC</h1> <p id=\"cmake-link-search-end-static\">End a link line such that static system libraries are used.</p> <p>Some linkers support switches such as <code>-Bstatic</code> and <code>-Bdynamic</code> to determine whether to use static or shared libraries for <code>-lXXX</code> options. CMake uses these options to set the link type for libraries whose full paths are not known or (in some cases) are in implicit link directories for the platform. By default CMake adds an option at the end of the library list (if necessary) to set the linker search type back to its starting type. This property switches the final linker search type to <code>-Bstatic</code> regardless of how it started.</p> <p>This variable is used to initialize the target property <a class=\"reference internal\" href=\"../prop_tgt/link_search_end_static#prop_tgt:LINK_SEARCH_END_STATIC\" title=\"LINK_SEARCH_END_STATIC\" id=\"index-0-prop_tgt:LINK_SEARCH_END_STATIC\"><code>LINK_SEARCH_END_STATIC</code></a> for all targets. If set, it’s value is also used by the <a class=\"reference internal\" href=\"../command/try_compile#command:try_compile\" title=\"try_compile\" id=\"index-0-command:try_compile\"><code>try_compile()</code></a> command.</p> <p>See also <a class=\"reference internal\" href=\"cmake_link_search_start_static#variable:CMAKE_LINK_SEARCH_START_STATIC\" title=\"CMAKE_LINK_SEARCH_START_STATIC\" id=\"index-0-variable:CMAKE_LINK_SEARCH_START_STATIC\"><code>CMAKE_LINK_SEARCH_START_STATIC</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_SEARCH_END_STATIC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_SEARCH_END_STATIC.html</a>\n  </p>\n</div>\n","variable/cmake_link_search_start_static":"<h1 id=\"variable:CMAKE_LINK_SEARCH_START_STATIC\">CMAKE_LINK_SEARCH_START_STATIC</h1> <p id=\"cmake-link-search-start-static\">Assume the linker looks for static libraries by default.</p> <p>Some linkers support switches such as <code>-Bstatic</code> and <code>-Bdynamic</code> to determine whether to use static or shared libraries for <code>-lXXX</code> options. CMake uses these options to set the link type for libraries whose full paths are not known or (in some cases) are in implicit link directories for the platform. By default the linker search type is assumed to be <code>-Bdynamic</code> at the beginning of the library list. This property switches the assumption to <code>-Bstatic</code>. It is intended for use when linking an executable statically (e.g. with the GNU <code>-static</code> option).</p> <p>This variable is used to initialize the target property <a class=\"reference internal\" href=\"../prop_tgt/link_search_start_static#prop_tgt:LINK_SEARCH_START_STATIC\" title=\"LINK_SEARCH_START_STATIC\" id=\"index-0-prop_tgt:LINK_SEARCH_START_STATIC\"><code>LINK_SEARCH_START_STATIC</code></a> for all targets. If set, it’s value is also used by the <a class=\"reference internal\" href=\"../command/try_compile#command:try_compile\" title=\"try_compile\" id=\"index-0-command:try_compile\"><code>try_compile()</code></a> command.</p> <p>See also <a class=\"reference internal\" href=\"cmake_link_search_end_static#variable:CMAKE_LINK_SEARCH_END_STATIC\" title=\"CMAKE_LINK_SEARCH_END_STATIC\" id=\"index-0-variable:CMAKE_LINK_SEARCH_END_STATIC\"><code>CMAKE_LINK_SEARCH_END_STATIC</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_SEARCH_START_STATIC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_SEARCH_START_STATIC.html</a>\n  </p>\n</div>\n","variable/cmake_major_version":"<h1 id=\"variable:CMAKE_MAJOR_VERSION\">CMAKE_MAJOR_VERSION</h1> <p id=\"cmake-major-version\">First version number component of the <a class=\"reference internal\" href=\"cmake_version#variable:CMAKE_VERSION\" title=\"CMAKE_VERSION\" id=\"index-0-variable:CMAKE_VERSION\"><code>CMAKE_VERSION</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_MAJOR_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_MAJOR_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_make_program":"<h1 id=\"variable:CMAKE_MAKE_PROGRAM\">CMAKE_MAKE_PROGRAM</h1> <p id=\"cmake-make-program\">Tool that can launch the native build system. The value may be the full path to an executable or just the tool name if it is expected to be in the <code>PATH</code>.</p> <p>The tool selected depends on the <a class=\"reference internal\" href=\"cmake_generator#variable:CMAKE_GENERATOR\" title=\"CMAKE_GENERATOR\" id=\"index-0-variable:CMAKE_GENERATOR\"><code>CMAKE_GENERATOR</code></a> used to configure the project:</p> <ul> <li>\n<p class=\"first\">The <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> set this to <code>make</code>, <code>gmake</code>, or a generator-specific tool (e.g. <code>nmake</code> for <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/NMake%20Makefiles.html#generator:NMake%20Makefiles\" title=\"NMake Makefiles\" id=\"index-0-generator:NMake Makefiles\"><code>NMake Makefiles</code></a>).</p> <p>These generators store <code>CMAKE_MAKE_PROGRAM</code> in the CMake cache so that it may be edited by the user.</p> </li> <li>\n<p class=\"first\">The <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a> generator sets this to <code>ninja</code>.</p> <p>This generator stores <code>CMAKE_MAKE_PROGRAM</code> in the CMake cache so that it may be edited by the user.</p> </li> <li>\n<p class=\"first\">The <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Xcode.html#generator:Xcode\" title=\"Xcode\" id=\"index-0-generator:Xcode\"><code>Xcode</code></a> generator sets this to <code>xcodebuild</code> (or possibly an otherwise undocumented <code>cmakexbuild</code> wrapper implementing some workarounds).</p> <p>This generator prefers to lookup the build tool at build time rather than to store <code>CMAKE_MAKE_PROGRAM</code> in the CMake cache ahead of time. This is because <code>xcodebuild</code> is easy to find, the <code>cmakexbuild</code> wrapper is needed only for older Xcode versions, and the path to <code>cmakexbuild</code> may be outdated if CMake itself moves.</p> <p>For compatibility with versions of CMake prior to 3.2, if a user or project explicitly adds <code>CMAKE_MAKE_PROGRAM</code> to the CMake cache then CMake will use the specified value.</p> </li> <li>\n<p class=\"first\">The <a class=\"reference internal\" href=\"../manual/cmake-generators.7#visual-studio-generators\"><span>Visual Studio Generators</span></a> set this to the full path to <code>MSBuild.exe</code> (VS &gt;= 10), <code>devenv.com</code> (VS 7,8,9), <code>VCExpress.exe</code> (VS Express 8,9), or <code>msdev.exe</code> (VS 6). (See also variables <a class=\"reference internal\" href=\"cmake_vs_msbuild_command#variable:CMAKE_VS_MSBUILD_COMMAND\" title=\"CMAKE_VS_MSBUILD_COMMAND\" id=\"index-0-variable:CMAKE_VS_MSBUILD_COMMAND\"><code>CMAKE_VS_MSBUILD_COMMAND</code></a>, <a class=\"reference internal\" href=\"cmake_vs_devenv_command#variable:CMAKE_VS_DEVENV_COMMAND\" title=\"CMAKE_VS_DEVENV_COMMAND\" id=\"index-0-variable:CMAKE_VS_DEVENV_COMMAND\"><code>CMAKE_VS_DEVENV_COMMAND</code></a>, and <a class=\"reference internal\" href=\"cmake_vs_msdev_command#variable:CMAKE_VS_MSDEV_COMMAND\" title=\"CMAKE_VS_MSDEV_COMMAND\" id=\"index-0-variable:CMAKE_VS_MSDEV_COMMAND\"><code>CMAKE_VS_MSDEV_COMMAND</code></a>.)</p> <p>These generators prefer to lookup the build tool at build time rather than to store <code>CMAKE_MAKE_PROGRAM</code> in the CMake cache ahead of time. This is because the tools are version-specific and can be located using the Windows Registry. It is also necessary because the proper build tool may depend on the project content (e.g. the Intel Fortran plugin to VS 10 and 11 requires <code>devenv.com</code> to build its <code>.vfproj</code> project files even though <code>MSBuild.exe</code> is normally preferred to support the <a class=\"reference internal\" href=\"cmake_generator_toolset#variable:CMAKE_GENERATOR_TOOLSET\" title=\"CMAKE_GENERATOR_TOOLSET\" id=\"index-0-variable:CMAKE_GENERATOR_TOOLSET\"><code>CMAKE_GENERATOR_TOOLSET</code></a>).</p> <p>For compatibility with versions of CMake prior to 3.0, if a user or project explicitly adds <code>CMAKE_MAKE_PROGRAM</code> to the CMake cache then CMake will use the specified value if possible.</p> </li> <li>The <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Green%20Hills%20MULTI.html#generator:Green%20Hills%20MULTI\" title=\"Green Hills MULTI\" id=\"index-0-generator:Green Hills MULTI\"><code>Green Hills MULTI</code></a> generator sets this to <code>gbuild</code>. If a user or project explicitly adds <code>CMAKE_MAKE_PROGRAM</code> to the CMake cache then CMake will use the specified value. </li> </ul> <p>The <code>CMAKE_MAKE_PROGRAM</code> variable is set for use by project code. The value is also used by the <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> <code>--build</code> and <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> <code>--build-and-test</code> tools to launch the native build process.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_MAKE_PROGRAM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_MAKE_PROGRAM.html</a>\n  </p>\n</div>\n","variable/cmake_minor_version":"<h1 id=\"variable:CMAKE_MINOR_VERSION\">CMAKE_MINOR_VERSION</h1> <p id=\"cmake-minor-version\">Second version number component of the <a class=\"reference internal\" href=\"cmake_version#variable:CMAKE_VERSION\" title=\"CMAKE_VERSION\" id=\"index-0-variable:CMAKE_VERSION\"><code>CMAKE_VERSION</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_MINOR_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_MINOR_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_project_name":"<h1 id=\"variable:CMAKE_PROJECT_NAME\">CMAKE_PROJECT_NAME</h1> <p id=\"cmake-project-name\">The name of the current project.</p> <p>This specifies name of the current project from the closest inherited <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_PROJECT_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_PROJECT_NAME.html</a>\n  </p>\n</div>\n","variable/cmake_patch_version":"<h1 id=\"variable:CMAKE_PATCH_VERSION\">CMAKE_PATCH_VERSION</h1> <p id=\"cmake-patch-version\">Third version number component of the <a class=\"reference internal\" href=\"cmake_version#variable:CMAKE_VERSION\" title=\"CMAKE_VERSION\" id=\"index-0-variable:CMAKE_VERSION\"><code>CMAKE_VERSION</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_PATCH_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_PATCH_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_cfg_intdir":"<h1 id=\"variable:CMAKE_CFG_INTDIR\">CMAKE_CFG_INTDIR</h1> <p id=\"cmake-cfg-intdir\">Build-time reference to per-configuration output subdirectory.</p> <p>For native build systems supporting multiple configurations in the build tree (such as <a class=\"reference internal\" href=\"../manual/cmake-generators.7#visual-studio-generators\"><span>Visual Studio Generators</span></a> and <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Xcode.html#generator:Xcode\" title=\"Xcode\" id=\"index-0-generator:Xcode\"><code>Xcode</code></a>), the value is a reference to a build-time variable specifying the name of the per-configuration output subdirectory. On <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> this evaluates to <cite>.</cite> because there is only one configuration in a build tree. Example values:</p> <pre data-language=\"python\">$(IntDir)            = Visual Studio 6\n$(ConfigurationName) = Visual Studio 7, 8, 9\n$(Configuration)     = Visual Studio 10\n$(CONFIGURATION)     = Xcode\n.                    = Make-based tools\n</pre> <p>Since these values are evaluated by the native build system, this variable is suitable only for use in command lines that will be evaluated at build time. Example of intended usage:</p> <pre data-language=\"python\">add_executable(mytool mytool.c)\nadd_custom_command(\n  OUTPUT out.txt\n  COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool\n          ${CMAKE_CURRENT_SOURCE_DIR}/in.txt out.txt\n  DEPENDS mytool in.txt\n  )\nadd_custom_target(drive ALL DEPENDS out.txt)\n</pre> <p>Note that <code>CMAKE_CFG_INTDIR</code> is no longer necessary for this purpose but has been left for compatibility with existing projects. Instead <a class=\"reference internal\" href=\"../command/add_custom_command#command:add_custom_command\" title=\"add_custom_command\" id=\"index-0-command:add_custom_command\"><code>add_custom_command()</code></a> recognizes executable target names in its <code>COMMAND</code> option, so <code>${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool</code> can be replaced by just <code>mytool</code>.</p> <p>This variable is read-only. Setting it is undefined behavior. In multi-configuration build systems the value of this variable is passed as the value of preprocessor symbol <code>CMAKE_INTDIR</code> to the compilation of all source files.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CFG_INTDIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CFG_INTDIR.html</a>\n  </p>\n</div>\n","variable/cmake_ranlib":"<h1 id=\"variable:CMAKE_RANLIB\">CMAKE_RANLIB</h1> <p id=\"cmake-ranlib\">Name of randomizing tool for static libraries.</p> <p>This specifies name of the program that randomizes libraries on UNIX, not used on Windows, but may be present.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_RANLIB.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_RANLIB.html</a>\n  </p>\n</div>\n","variable/cmake_root":"<h1 id=\"variable:CMAKE_ROOT\">CMAKE_ROOT</h1> <p id=\"cmake-root\">Install directory for running cmake.</p> <p>This is the install root for the running CMake and the <code>Modules</code> directory can be found here. This is commonly used in this format: <code>${CMAKE_ROOT}/Modules</code></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ROOT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ROOT.html</a>\n  </p>\n</div>\n","variable/cmake_script_mode_file":"<h1 id=\"variable:CMAKE_SCRIPT_MODE_FILE\">CMAKE_SCRIPT_MODE_FILE</h1> <p id=\"cmake-script-mode-file\">Full path to the <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> <code>-P</code> script file currently being processed.</p> <p>When run in <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-1-manual:cmake(1)\"><code>cmake(1)</code></a> <code>-P</code> script mode, CMake sets this variable to the full path of the script file. When run to configure a <code>CMakeLists.txt</code> file, this variable is not set.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SCRIPT_MODE_FILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SCRIPT_MODE_FILE.html</a>\n  </p>\n</div>\n","variable/cmake_shared_library_prefix":"<h1 id=\"variable:CMAKE_SHARED_LIBRARY_PREFIX\">CMAKE_SHARED_LIBRARY_PREFIX</h1> <p id=\"cmake-shared-library-prefix\">The prefix for shared libraries that you link to.</p> <p>The prefix to use for the name of a shared library, <code>lib</code> on UNIX.</p> <p><code>CMAKE_SHARED_LIBRARY_PREFIX_&lt;LANG&gt;</code> overrides this for language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SHARED_LIBRARY_PREFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SHARED_LIBRARY_PREFIX.html</a>\n  </p>\n</div>\n","variable/cmake_shared_module_prefix":"<h1 id=\"variable:CMAKE_SHARED_MODULE_PREFIX\">CMAKE_SHARED_MODULE_PREFIX</h1> <p id=\"cmake-shared-module-prefix\">The prefix for loadable modules that you link to.</p> <p>The prefix to use for the name of a loadable module on this platform.</p> <p><code>CMAKE_SHARED_MODULE_PREFIX_&lt;LANG&gt;</code> overrides this for language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SHARED_MODULE_PREFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SHARED_MODULE_PREFIX.html</a>\n  </p>\n</div>\n","variable/cmake_shared_module_suffix":"<h1 id=\"variable:CMAKE_SHARED_MODULE_SUFFIX\">CMAKE_SHARED_MODULE_SUFFIX</h1> <p id=\"cmake-shared-module-suffix\">The suffix for shared libraries that you link to.</p> <p>The suffix to use for the end of a loadable module filename on this platform</p> <p><code>CMAKE_SHARED_MODULE_SUFFIX_&lt;LANG&gt;</code> overrides this for language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SHARED_MODULE_SUFFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SHARED_MODULE_SUFFIX.html</a>\n  </p>\n</div>\n","variable/cmake_shared_library_suffix":"<h1 id=\"variable:CMAKE_SHARED_LIBRARY_SUFFIX\">CMAKE_SHARED_LIBRARY_SUFFIX</h1> <p id=\"cmake-shared-library-suffix\">The suffix for shared libraries that you link to.</p> <p>The suffix to use for the end of a shared library filename, <code>.dll</code> on Windows.</p> <p><code>CMAKE_SHARED_LIBRARY_SUFFIX_&lt;LANG&gt;</code> overrides this for language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SHARED_LIBRARY_SUFFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SHARED_LIBRARY_SUFFIX.html</a>\n  </p>\n</div>\n","variable/cmake_sizeof_void_p":"<h1 id=\"variable:CMAKE_SIZEOF_VOID_P\">CMAKE_SIZEOF_VOID_P</h1> <p id=\"cmake-sizeof-void-p\">Size of a <code>void</code> pointer.</p> <p>This is set to the size of a pointer on the target machine, and is determined by a try compile. If a 64-bit size is found, then the library search path is modified to look for 64-bit libraries first.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SIZEOF_VOID_P.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SIZEOF_VOID_P.html</a>\n  </p>\n</div>\n","variable/cmake_skip_install_rules":"<h1 id=\"variable:CMAKE_SKIP_INSTALL_RULES\">CMAKE_SKIP_INSTALL_RULES</h1> <p id=\"cmake-skip-install-rules\">Whether to disable generation of installation rules.</p> <p>If <code>TRUE</code>, cmake will neither generate installaton rules nor will it generate <code>cmake_install.cmake</code> files. This variable is <code>FALSE</code> by default.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SKIP_INSTALL_RULES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SKIP_INSTALL_RULES.html</a>\n  </p>\n</div>\n","variable/cmake_skip_rpath":"<h1 id=\"variable:CMAKE_SKIP_RPATH\">CMAKE_SKIP_RPATH</h1> <p id=\"cmake-skip-rpath\">If true, do not add run time path information.</p> <p>If this is set to <code>TRUE</code>, then the rpath information is not added to compiled executables. The default is to add rpath information if the platform supports it. This allows for easy running from the build tree. To omit RPATH in the install step, but not the build step, use <a class=\"reference internal\" href=\"cmake_skip_install_rpath#variable:CMAKE_SKIP_INSTALL_RPATH\" title=\"CMAKE_SKIP_INSTALL_RPATH\" id=\"index-0-variable:CMAKE_SKIP_INSTALL_RPATH\"><code>CMAKE_SKIP_INSTALL_RPATH</code></a> instead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SKIP_RPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SKIP_RPATH.html</a>\n  </p>\n</div>\n","variable/cmake_parent_list_file":"<h1 id=\"variable:CMAKE_PARENT_LIST_FILE\">CMAKE_PARENT_LIST_FILE</h1> <p id=\"cmake-parent-list-file\">Full path to the CMake file that included the current one.</p> <p>While processing a CMake file loaded by <a class=\"reference internal\" href=\"../command/include#command:include\" title=\"include\" id=\"index-0-command:include\"><code>include()</code></a> or <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> this variable contains the full path to the file including it. The top of the include stack is always the <code>CMakeLists.txt</code> for the current directory. See also <a class=\"reference internal\" href=\"cmake_current_list_file#variable:CMAKE_CURRENT_LIST_FILE\" title=\"CMAKE_CURRENT_LIST_FILE\" id=\"index-0-variable:CMAKE_CURRENT_LIST_FILE\"><code>CMAKE_CURRENT_LIST_FILE</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_PARENT_LIST_FILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_PARENT_LIST_FILE.html</a>\n  </p>\n</div>\n","variable/cmake_source_dir":"<h1 id=\"variable:CMAKE_SOURCE_DIR\">CMAKE_SOURCE_DIR</h1> <p id=\"cmake-source-dir\">The path to the top level of the source tree.</p> <p>This is the full path to the top level of the current CMake source tree. For an in-source build, this would be the same as <a class=\"reference internal\" href=\"cmake_binary_dir#variable:CMAKE_BINARY_DIR\" title=\"CMAKE_BINARY_DIR\" id=\"index-0-variable:CMAKE_BINARY_DIR\"><code>CMAKE_BINARY_DIR</code></a>.</p> <p>When run in -P script mode, CMake sets the variables <a class=\"reference internal\" href=\"cmake_binary_dir#variable:CMAKE_BINARY_DIR\" title=\"CMAKE_BINARY_DIR\" id=\"index-1-variable:CMAKE_BINARY_DIR\"><code>CMAKE_BINARY_DIR</code></a>, <a class=\"reference internal\" href=\"#variable:CMAKE_SOURCE_DIR\" title=\"CMAKE_SOURCE_DIR\" id=\"index-0-variable:CMAKE_SOURCE_DIR\"><code>CMAKE_SOURCE_DIR</code></a>, <a class=\"reference internal\" href=\"cmake_current_binary_dir#variable:CMAKE_CURRENT_BINARY_DIR\" title=\"CMAKE_CURRENT_BINARY_DIR\" id=\"index-0-variable:CMAKE_CURRENT_BINARY_DIR\"><code>CMAKE_CURRENT_BINARY_DIR</code></a> and <a class=\"reference internal\" href=\"cmake_current_source_dir#variable:CMAKE_CURRENT_SOURCE_DIR\" title=\"CMAKE_CURRENT_SOURCE_DIR\" id=\"index-0-variable:CMAKE_CURRENT_SOURCE_DIR\"><code>CMAKE_CURRENT_SOURCE_DIR</code></a> to the current working directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SOURCE_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SOURCE_DIR.html</a>\n  </p>\n</div>\n","variable/cmake_static_library_prefix":"<h1 id=\"variable:CMAKE_STATIC_LIBRARY_PREFIX\">CMAKE_STATIC_LIBRARY_PREFIX</h1> <p id=\"cmake-static-library-prefix\">The prefix for static libraries that you link to.</p> <p>The prefix to use for the name of a static library, <code>lib</code> on UNIX.</p> <p><code>CMAKE_STATIC_LIBRARY_PREFIX_&lt;LANG&gt;</code> overrides this for language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_STATIC_LIBRARY_PREFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_STATIC_LIBRARY_PREFIX.html</a>\n  </p>\n</div>\n","variable/cmake_static_library_suffix":"<h1 id=\"variable:CMAKE_STATIC_LIBRARY_SUFFIX\">CMAKE_STATIC_LIBRARY_SUFFIX</h1> <p id=\"cmake-static-library-suffix\">The suffix for static libraries that you link to.</p> <p>The suffix to use for the end of a static library filename, <code>.lib</code> on Windows.</p> <p><code>CMAKE_STATIC_LIBRARY_SUFFIX_&lt;LANG&gt;</code> overrides this for language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_STATIC_LIBRARY_SUFFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_STATIC_LIBRARY_SUFFIX.html</a>\n  </p>\n</div>\n","variable/cmake_toolchain_file":"<h1 id=\"variable:CMAKE_TOOLCHAIN_FILE\">CMAKE_TOOLCHAIN_FILE</h1> <p id=\"cmake-toolchain-file\">Path to toolchain file supplied to <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a>.</p> <p>This variable is specified on the command line when cross-compiling with CMake. It is the path to a file which is read early in the CMake run and which specifies locations for compilers and toolchain utilities, and other target platform and compiler related information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_TOOLCHAIN_FILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_TOOLCHAIN_FILE.html</a>\n  </p>\n</div>\n","variable/cmake_verbose_makefile":"<h1 id=\"variable:CMAKE_VERBOSE_MAKEFILE\">CMAKE_VERBOSE_MAKEFILE</h1> <p id=\"cmake-verbose-makefile\">Enable verbose output from Makefile builds.</p> <p>This variable is a cache entry initialized (to <code>FALSE</code>) by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command. Users may enable the option in their local build tree to get more verbose output from Makefile builds and show each command line as it is launched.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_VERBOSE_MAKEFILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_VERBOSE_MAKEFILE.html</a>\n  </p>\n</div>\n","variable/cmake_tweak_version":"<h1 id=\"variable:CMAKE_TWEAK_VERSION\">CMAKE_TWEAK_VERSION</h1> <p id=\"cmake-tweak-version\">Defined to <code>0</code> for compatibility with code written for older CMake versions that may have defined higher values.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In CMake versions 2.8.2 through 2.8.12, this variable holds the fourth version number component of the <a class=\"reference internal\" href=\"cmake_version#variable:CMAKE_VERSION\" title=\"CMAKE_VERSION\" id=\"index-0-variable:CMAKE_VERSION\"><code>CMAKE_VERSION</code></a> variable.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_TWEAK_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_TWEAK_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_vs_devenv_command":"<h1 id=\"variable:CMAKE_VS_DEVENV_COMMAND\">CMAKE_VS_DEVENV_COMMAND</h1> <p id=\"cmake-vs-devenv-command\">The generators for <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%207.html#generator:Visual%20Studio%207\" title=\"Visual Studio 7\" id=\"index-0-generator:Visual Studio 7\"><code>Visual Studio 7</code></a> and above set this variable to the <code>devenv.com</code> command installed with the corresponding Visual Studio version. Note that this variable may be empty on Visual Studio Express editions because they do not provide this tool.</p> <p>This variable is not defined by other generators even if <code>devenv.com</code> is installed on the computer.</p> <p>The <a class=\"reference internal\" href=\"cmake_vs_msbuild_command#variable:CMAKE_VS_MSBUILD_COMMAND\" title=\"CMAKE_VS_MSBUILD_COMMAND\" id=\"index-0-variable:CMAKE_VS_MSBUILD_COMMAND\"><code>CMAKE_VS_MSBUILD_COMMAND</code></a> is also provided for <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%2010%202010.html#generator:Visual%20Studio%2010%202010\" title=\"Visual Studio 10 2010\" id=\"index-0-generator:Visual Studio 10 2010\"><code>Visual Studio 10 2010</code></a> and above. See also the <a class=\"reference internal\" href=\"cmake_make_program#variable:CMAKE_MAKE_PROGRAM\" title=\"CMAKE_MAKE_PROGRAM\" id=\"index-0-variable:CMAKE_MAKE_PROGRAM\"><code>CMAKE_MAKE_PROGRAM</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_DEVENV_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_DEVENV_COMMAND.html</a>\n  </p>\n</div>\n","variable/cmake_vs_intel_fortran_project_version":"<h1 id=\"variable:CMAKE_VS_INTEL_Fortran_PROJECT_VERSION\">CMAKE_VS_INTEL_Fortran_PROJECT_VERSION</h1> <p id=\"cmake-vs-intel-fortran-project-version\">When generating for <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%207.html#generator:Visual%20Studio%207\" title=\"Visual Studio 7\" id=\"index-0-generator:Visual Studio 7\"><code>Visual Studio 7</code></a> or greater with the Intel Fortran plugin installed, this specifies the <code>.vfproj</code> project file format version. This is intended for internal use by CMake and should not be used by project code.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_INTEL_Fortran_PROJECT_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_INTEL_Fortran_PROJECT_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_vs_msbuild_command":"<h1 id=\"variable:CMAKE_VS_MSBUILD_COMMAND\">CMAKE_VS_MSBUILD_COMMAND</h1> <p id=\"cmake-vs-msbuild-command\">The generators for <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%2010%202010.html#generator:Visual%20Studio%2010%202010\" title=\"Visual Studio 10 2010\" id=\"index-0-generator:Visual Studio 10 2010\"><code>Visual Studio 10 2010</code></a> and above set this variable to the <code>MSBuild.exe</code> command installed with the corresponding Visual Studio version.</p> <p>This variable is not defined by other generators even if <code>MSBuild.exe</code> is installed on the computer.</p> <p>The <a class=\"reference internal\" href=\"cmake_vs_devenv_command#variable:CMAKE_VS_DEVENV_COMMAND\" title=\"CMAKE_VS_DEVENV_COMMAND\" id=\"index-0-variable:CMAKE_VS_DEVENV_COMMAND\"><code>CMAKE_VS_DEVENV_COMMAND</code></a> is also provided for the non-Express editions of Visual Studio. See also the <a class=\"reference internal\" href=\"cmake_make_program#variable:CMAKE_MAKE_PROGRAM\" title=\"CMAKE_MAKE_PROGRAM\" id=\"index-0-variable:CMAKE_MAKE_PROGRAM\"><code>CMAKE_MAKE_PROGRAM</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_MSBUILD_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_MSBUILD_COMMAND.html</a>\n  </p>\n</div>\n","variable/cmake_vs_msdev_command":"<h1 id=\"variable:CMAKE_VS_MSDEV_COMMAND\">CMAKE_VS_MSDEV_COMMAND</h1> <p id=\"cmake-vs-msdev-command\">The <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Visual%20Studio%206.html#generator:Visual%20Studio%206\" title=\"Visual Studio 6\" id=\"index-0-generator:Visual Studio 6\"><code>Visual Studio 6</code></a> generator sets this variable to the <code>msdev.exe</code> command installed with Visual Studio 6.</p> <p>This variable is not defined by other generators even if <code>msdev.exe</code> is installed on the computer.</p> <p>See also the <a class=\"reference internal\" href=\"cmake_make_program#variable:CMAKE_MAKE_PROGRAM\" title=\"CMAKE_MAKE_PROGRAM\" id=\"index-0-variable:CMAKE_MAKE_PROGRAM\"><code>CMAKE_MAKE_PROGRAM</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_MSDEV_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_MSDEV_COMMAND.html</a>\n  </p>\n</div>\n","variable/cmake_vs_nsighttegra_version":"<h1 id=\"variable:CMAKE_VS_NsightTegra_VERSION\">CMAKE_VS_NsightTegra_VERSION</h1> <p id=\"cmake-vs-nsighttegra-version\">When using a Visual Studio generator with the <a class=\"reference internal\" href=\"cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-0-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a> variable set to <code>Android</code>, this variable contains the version number of the installed NVIDIA Nsight Tegra Visual Studio Edition.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_NsightTegra_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_NsightTegra_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_vs_platform_name":"<h1 id=\"variable:CMAKE_VS_PLATFORM_NAME\">CMAKE_VS_PLATFORM_NAME</h1> <p id=\"cmake-vs-platform-name\">Visual Studio target platform name.</p> <p>VS 8 and above allow project files to specify a target platform. CMake provides the name of the chosen platform in this variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_PLATFORM_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_PLATFORM_NAME.html</a>\n  </p>\n</div>\n","variable/cmake_vs_platform_toolset":"<h1 id=\"variable:CMAKE_VS_PLATFORM_TOOLSET\">CMAKE_VS_PLATFORM_TOOLSET</h1> <p id=\"cmake-vs-platform-toolset\">Visual Studio Platform Toolset name.</p> <p>VS 10 and above use MSBuild under the hood and support multiple compiler toolchains. CMake may specify a toolset explicitly, such as <code>v110</code> for VS 11 or <code>Windows7.1SDK</code> for 64-bit support in VS 10 Express. CMake provides the name of the chosen toolset in this variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_PLATFORM_TOOLSET.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_PLATFORM_TOOLSET.html</a>\n  </p>\n</div>\n","variable/cmake_link_library_suffix":"<h1 id=\"variable:CMAKE_LINK_LIBRARY_SUFFIX\">CMAKE_LINK_LIBRARY_SUFFIX</h1> <p id=\"cmake-link-library-suffix\">The suffix for libraries that you link to.</p> <p>The suffix to use for the end of a library filename, <code>.lib</code> on Windows.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_LIBRARY_SUFFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_LIBRARY_SUFFIX.html</a>\n  </p>\n</div>\n","variable/cmake_vs_windows_target_platform_version":"<h1 id=\"variable:CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\">CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION</h1> <p id=\"cmake-vs-windows-target-platform-version\">Visual Studio Windows Target Platform Version.</p> <p>When targeting Windows 10 and above Visual Studio 2015 and above support specification of a target Windows version to select a corresponding SDK. The <a class=\"reference internal\" href=\"cmake_system_version#variable:CMAKE_SYSTEM_VERSION\" title=\"CMAKE_SYSTEM_VERSION\" id=\"index-0-variable:CMAKE_SYSTEM_VERSION\"><code>CMAKE_SYSTEM_VERSION</code></a> variable may be set to specify a version. Otherwise CMake computes a default version based on the Windows SDK versions available. The chosen Windows target version number is provided in <code>CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION</code>. If no Windows 10 SDK is available this value will be empty.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_xcode_platform_toolset":"<h1 id=\"variable:CMAKE_XCODE_PLATFORM_TOOLSET\">CMAKE_XCODE_PLATFORM_TOOLSET</h1> <p id=\"cmake-xcode-platform-toolset\">Xcode compiler selection.</p> <p><a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Xcode.html#generator:Xcode\" title=\"Xcode\" id=\"index-0-generator:Xcode\"><code>Xcode</code></a> supports selection of a compiler from one of the installed toolsets. CMake provides the name of the chosen toolset in this variable, if any is explicitly selected (e.g. via the <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> <code>-T</code> option).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_XCODE_PLATFORM_TOOLSET.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_XCODE_PLATFORM_TOOLSET.html</a>\n  </p>\n</div>\n","variable/project-name_binary_dir":"<h1 id=\"variable:&lt;PROJECT-NAME&gt;_BINARY_DIR\">&lt;PROJECT-NAME&gt;_BINARY_DIR</h1> <p id=\"project-name-binary-dir\">Top level binary directory for the named project.</p> <p>A variable is created with the name used in the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command, and is the binary directory for the project. This can be useful when <a class=\"reference internal\" href=\"../command/add_subdirectory#command:add_subdirectory\" title=\"add_subdirectory\" id=\"index-0-command:add_subdirectory\"><code>add_subdirectory()</code></a> is used to connect several projects.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_BINARY_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_BINARY_DIR.html</a>\n  </p>\n</div>\n","variable/project_name":"<h1 id=\"variable:PROJECT_NAME\">PROJECT_NAME</h1> <p id=\"project-name\">Name of the project given to the project command.</p> <p>This is the name given to the most recent <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT_NAME.html</a>\n  </p>\n</div>\n","variable/project-name_source_dir":"<h1 id=\"variable:&lt;PROJECT-NAME&gt;_SOURCE_DIR\">&lt;PROJECT-NAME&gt;_SOURCE_DIR</h1> <p id=\"project-name-source-dir\">Top level source directory for the named project.</p> <p>A variable is created with the name used in the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command, and is the source directory for the project. This can be useful when <a class=\"reference internal\" href=\"../command/add_subdirectory#command:add_subdirectory\" title=\"add_subdirectory\" id=\"index-0-command:add_subdirectory\"><code>add_subdirectory()</code></a> is used to connect several projects.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_SOURCE_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_SOURCE_DIR.html</a>\n  </p>\n</div>\n","variable/cmake_standard_libraries":"<h1 id=\"variable:CMAKE_STANDARD_LIBRARIES\">CMAKE_STANDARD_LIBRARIES</h1> <p id=\"cmake-standard-libraries\">Libraries linked into every executable and shared library.</p> <p>This is the list of libraries that are linked into all executables and libraries.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_STANDARD_LIBRARIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_STANDARD_LIBRARIES.html</a>\n  </p>\n</div>\n","variable/project-name_version":"<h1 id=\"variable:&lt;PROJECT-NAME&gt;_VERSION\">&lt;PROJECT-NAME&gt;_VERSION</h1> <p id=\"project-name-version\">Value given to the <code>VERSION</code> option of the most recent call to the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command with project name <code>&lt;PROJECT-NAME&gt;</code>, if any.</p> <p>See also the component-wise version variables <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION_MAJOR\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION_MAJOR\"><code>&lt;PROJECT-NAME&gt;_VERSION_MAJOR</code></a>, <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION_MINOR\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION_MINOR\"><code>&lt;PROJECT-NAME&gt;_VERSION_MINOR</code></a>, <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION_PATCH\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION_PATCH\"><code>&lt;PROJECT-NAME&gt;_VERSION_PATCH</code></a>, and <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION_TWEAK\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION_TWEAK\"><code>&lt;PROJECT-NAME&gt;_VERSION_TWEAK</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_VERSION.html</a>\n  </p>\n</div>\n","variable/project-name_version_minor":"<h1 id=\"variable:&lt;PROJECT-NAME&gt;_VERSION_MINOR\">&lt;PROJECT-NAME&gt;_VERSION_MINOR</h1> <p id=\"project-name-version-minor\">Second version number component of the <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION\"><code>&lt;PROJECT-NAME&gt;_VERSION</code></a> variable as set by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_VERSION_MINOR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_VERSION_MINOR.html</a>\n  </p>\n</div>\n","variable/project-name_version_major":"<h1 id=\"variable:&lt;PROJECT-NAME&gt;_VERSION_MAJOR\">&lt;PROJECT-NAME&gt;_VERSION_MAJOR</h1> <p id=\"project-name-version-major\">First version number component of the <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION\"><code>&lt;PROJECT-NAME&gt;_VERSION</code></a> variable as set by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_VERSION_MAJOR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_VERSION_MAJOR.html</a>\n  </p>\n</div>\n","variable/project-name_version_patch":"<h1 id=\"variable:&lt;PROJECT-NAME&gt;_VERSION_PATCH\">&lt;PROJECT-NAME&gt;_VERSION_PATCH</h1> <p id=\"project-name-version-patch\">Third version number component of the <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION\"><code>&lt;PROJECT-NAME&gt;_VERSION</code></a> variable as set by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_VERSION_PATCH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_VERSION_PATCH.html</a>\n  </p>\n</div>\n","variable/project-name_version_tweak":"<h1 id=\"variable:&lt;PROJECT-NAME&gt;_VERSION_TWEAK\">&lt;PROJECT-NAME&gt;_VERSION_TWEAK</h1> <p id=\"project-name-version-tweak\">Fourth version number component of the <a class=\"reference internal\" href=\"#\" title=\"&lt;PROJECT-NAME&gt;_VERSION\" id=\"index-0-variable:&lt;PROJECT-NAME&gt;_VERSION\"><code>&lt;PROJECT-NAME&gt;_VERSION</code></a> variable as set by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_VERSION_TWEAK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT-NAME_VERSION_TWEAK.html</a>\n  </p>\n</div>\n","variable/project_version":"<h1 id=\"variable:PROJECT_VERSION\">PROJECT_VERSION</h1> <p id=\"project-version\">Value given to the <code>VERSION</code> option of the most recent call to the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command, if any.</p> <p>See also the component-wise version variables <a class=\"reference internal\" href=\"project_version_major#variable:PROJECT_VERSION_MAJOR\" title=\"PROJECT_VERSION_MAJOR\" id=\"index-0-variable:PROJECT_VERSION_MAJOR\"><code>PROJECT_VERSION_MAJOR</code></a>, <a class=\"reference internal\" href=\"project_version_minor#variable:PROJECT_VERSION_MINOR\" title=\"PROJECT_VERSION_MINOR\" id=\"index-0-variable:PROJECT_VERSION_MINOR\"><code>PROJECT_VERSION_MINOR</code></a>, <a class=\"reference internal\" href=\"project_version_patch#variable:PROJECT_VERSION_PATCH\" title=\"PROJECT_VERSION_PATCH\" id=\"index-0-variable:PROJECT_VERSION_PATCH\"><code>PROJECT_VERSION_PATCH</code></a>, and <a class=\"reference internal\" href=\"project_version_tweak#variable:PROJECT_VERSION_TWEAK\" title=\"PROJECT_VERSION_TWEAK\" id=\"index-0-variable:PROJECT_VERSION_TWEAK\"><code>PROJECT_VERSION_TWEAK</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT_VERSION.html</a>\n  </p>\n</div>\n","variable/project_version_major":"<h1 id=\"variable:PROJECT_VERSION_MAJOR\">PROJECT_VERSION_MAJOR</h1> <p id=\"project-version-major\">First version number component of the <a class=\"reference internal\" href=\"project_version#variable:PROJECT_VERSION\" title=\"PROJECT_VERSION\" id=\"index-0-variable:PROJECT_VERSION\"><code>PROJECT_VERSION</code></a> variable as set by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT_VERSION_MAJOR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT_VERSION_MAJOR.html</a>\n  </p>\n</div>\n","variable/project_version_minor":"<h1 id=\"variable:PROJECT_VERSION_MINOR\">PROJECT_VERSION_MINOR</h1> <p id=\"project-version-minor\">Second version number component of the <a class=\"reference internal\" href=\"project_version#variable:PROJECT_VERSION\" title=\"PROJECT_VERSION\" id=\"index-0-variable:PROJECT_VERSION\"><code>PROJECT_VERSION</code></a> variable as set by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT_VERSION_MINOR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT_VERSION_MINOR.html</a>\n  </p>\n</div>\n","variable/project_version_patch":"<h1 id=\"variable:PROJECT_VERSION_PATCH\">PROJECT_VERSION_PATCH</h1> <p id=\"project-version-patch\">Third version number component of the <a class=\"reference internal\" href=\"project_version#variable:PROJECT_VERSION\" title=\"PROJECT_VERSION\" id=\"index-0-variable:PROJECT_VERSION\"><code>PROJECT_VERSION</code></a> variable as set by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT_VERSION_PATCH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT_VERSION_PATCH.html</a>\n  </p>\n</div>\n","variable/project_version_tweak":"<h1 id=\"variable:PROJECT_VERSION_TWEAK\">PROJECT_VERSION_TWEAK</h1> <p id=\"project-version-tweak\">Fourth version number component of the <a class=\"reference internal\" href=\"project_version#variable:PROJECT_VERSION\" title=\"PROJECT_VERSION\" id=\"index-0-variable:PROJECT_VERSION\"><code>PROJECT_VERSION</code></a> variable as set by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/PROJECT_VERSION_TWEAK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/PROJECT_VERSION_TWEAK.html</a>\n  </p>\n</div>\n","variable/cmake_appbundle_path":"<h1 id=\"variable:CMAKE_APPBUNDLE_PATH\">CMAKE_APPBUNDLE_PATH</h1> <p id=\"cmake-appbundle-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories specifying a search path for OS X application bundles used by the <a class=\"reference internal\" href=\"../command/find_program#command:find_program\" title=\"find_program\" id=\"index-0-command:find_program\"><code>find_program()</code></a>, and <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> commands.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_APPBUNDLE_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_APPBUNDLE_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_absolute_destination_files":"<h1 id=\"variable:CMAKE_ABSOLUTE_DESTINATION_FILES\">CMAKE_ABSOLUTE_DESTINATION_FILES</h1> <p id=\"cmake-absolute-destination-files\">List of files which have been installed using an <code>ABSOLUTE DESTINATION</code> path.</p> <p>This variable is defined by CMake-generated <code>cmake_install.cmake</code> scripts. It can be used (read-only) by programs or scripts that source those install scripts. This is used by some CPack generators (e.g. RPM).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ABSOLUTE_DESTINATION_FILES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ABSOLUTE_DESTINATION_FILES.html</a>\n  </p>\n</div>\n","variable/cmake_automoc_relaxed_mode":"<h1 id=\"variable:CMAKE_AUTOMOC_RELAXED_MODE\">CMAKE_AUTOMOC_RELAXED_MODE</h1> <p id=\"cmake-automoc-relaxed-mode\">Switch between strict and relaxed automoc mode.</p> <p>By default, <a class=\"reference internal\" href=\"../prop_tgt/automoc#prop_tgt:AUTOMOC\" title=\"AUTOMOC\" id=\"index-0-prop_tgt:AUTOMOC\"><code>AUTOMOC</code></a> behaves exactly as described in the documentation of the <a class=\"reference internal\" href=\"../prop_tgt/automoc#prop_tgt:AUTOMOC\" title=\"AUTOMOC\" id=\"index-1-prop_tgt:AUTOMOC\"><code>AUTOMOC</code></a> target property. When set to <code>TRUE</code>, it accepts more input and tries to find the correct input file for <code>moc</code> even if it differs from the documented behaviour. In this mode it e.g. also checks whether a header file is intended to be processed by moc when a <code>\"foo.moc\"</code> file has been included.</p> <p>Relaxed mode has to be enabled for KDE4 compatibility.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTOMOC_RELAXED_MODE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_AUTOMOC_RELAXED_MODE.html</a>\n  </p>\n</div>\n","variable/cmake_backwards_compatibility":"<h1 id=\"variable:CMAKE_BACKWARDS_COMPATIBILITY\">CMAKE_BACKWARDS_COMPATIBILITY</h1> <p id=\"cmake-backwards-compatibility\">Deprecated. See CMake Policy <a class=\"reference internal\" href=\"../policy/cmp0001#policy:CMP0001\" title=\"CMP0001\" id=\"index-0-policy:CMP0001\"><code>CMP0001</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_BACKWARDS_COMPATIBILITY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_BACKWARDS_COMPATIBILITY.html</a>\n  </p>\n</div>\n","variable/cmake_color_makefile":"<h1 id=\"variable:CMAKE_COLOR_MAKEFILE\">CMAKE_COLOR_MAKEFILE</h1> <p id=\"cmake-color-makefile\">Enables color output when using the <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a>.</p> <p>When enabled, the generated Makefiles will produce colored output. Default is <code>ON</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_COLOR_MAKEFILE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_COLOR_MAKEFILE.html</a>\n  </p>\n</div>\n","variable/cmake_configuration_types":"<h1 id=\"variable:CMAKE_CONFIGURATION_TYPES\">CMAKE_CONFIGURATION_TYPES</h1> <p id=\"cmake-configuration-types\">Specifies the available build types on multi-config generators.</p> <p>This specifies what build types (configurations) will be available such as <code>Debug</code>, <code>Release</code>, <code>RelWithDebInfo</code> etc. This has reasonable defaults on most platforms, but can be extended to provide other build types. See also <a class=\"reference internal\" href=\"cmake_build_type#variable:CMAKE_BUILD_TYPE\" title=\"CMAKE_BUILD_TYPE\" id=\"index-0-variable:CMAKE_BUILD_TYPE\"><code>CMAKE_BUILD_TYPE</code></a> for details of managing configuration data, and <a class=\"reference internal\" href=\"cmake_cfg_intdir#variable:CMAKE_CFG_INTDIR\" title=\"CMAKE_CFG_INTDIR\" id=\"index-0-variable:CMAKE_CFG_INTDIR\"><code>CMAKE_CFG_INTDIR</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CONFIGURATION_TYPES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CONFIGURATION_TYPES.html</a>\n  </p>\n</div>\n","variable/cmake_disable_find_package_packagename":"<h1 id=\"variable:CMAKE_DISABLE_FIND_PACKAGE_&lt;PackageName&gt;\">CMAKE_DISABLE_FIND_PACKAGE_&lt;PackageName&gt;</h1> <p id=\"cmake-disable-find-package-packagename\">Variable for disabling <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> calls.</p> <p>Every non-<code>REQUIRED</code> <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-1-command:find_package\"><code>find_package()</code></a> call in a project can be disabled by setting the variable <code>CMAKE_DISABLE_FIND_PACKAGE_&lt;PackageName&gt;</code> to <code>TRUE</code>. This can be used to build a project without an optional package, although that package is installed.</p> <p>This switch should be used during the initial CMake run. Otherwise if the package has already been found in a previous CMake run, the variables which have been stored in the cache will still be there. In that case it is recommended to remove the cache variables for this package from the cache using the cache editor or <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> <code>-U</code></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.html</a>\n  </p>\n</div>\n","variable/cmake_error_deprecated":"<h1 id=\"variable:CMAKE_ERROR_DEPRECATED\">CMAKE_ERROR_DEPRECATED</h1> <p id=\"cmake-error-deprecated\">Whether to issue errors for deprecated functionality.</p> <p>If <code>TRUE</code>, use of deprecated functionality will issue fatal errors. If this variable is not set, CMake behaves as if it were set to <code>FALSE</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ERROR_DEPRECATED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ERROR_DEPRECATED.html</a>\n  </p>\n</div>\n","variable/cmake_error_on_absolute_install_destination":"<h1 id=\"variable:CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION\">CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION</h1> <p id=\"cmake-error-on-absolute-install-destination\">Ask <code>cmake_install.cmake</code> script to error out as soon as a file with absolute <code>INSTALL DESTINATION</code> is encountered.</p> <p>The fatal error is emitted before the installation of the offending file takes place. This variable is used by CMake-generated <code>cmake_install.cmake</code> scripts. If one sets this variable to <code>ON</code> while running the script, it may get fatal error messages from the script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.html</a>\n  </p>\n</div>\n","variable/cmake_export_compile_commands":"<h1 id=\"variable:CMAKE_EXPORT_COMPILE_COMMANDS\">CMAKE_EXPORT_COMPILE_COMMANDS</h1> <p id=\"cmake-export-compile-commands\">Enable/Disable output of compile commands during generation.</p> <p>If enabled, generates a <code>compile_commands.json</code> file containing the exact compiler calls for all translation units of the project in machine-readable form. The format of the JSON file looks like:</p> <pre data-language=\"javascript\">[\n  {\n    \"directory\": \"/home/user/development/project\",\n    \"command\": \"/usr/bin/c++ ... -c ../foo/foo.cc\",\n    \"file\": \"../foo/foo.cc\"\n  },\n\n  ...\n\n  {\n    \"directory\": \"/home/user/development/project\",\n    \"command\": \"/usr/bin/c++ ... -c ../foo/bar.cc\",\n    \"file\": \"../foo/bar.cc\"\n  }\n]\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This option is implemented only by <a class=\"reference internal\" href=\"../manual/cmake-generators.7#makefile-generators\"><span>Makefile Generators</span></a> and the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Ninja.html#generator:Ninja\" title=\"Ninja\" id=\"index-0-generator:Ninja\"><code>Ninja</code></a>. It is ignored on other generators.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html</a>\n  </p>\n</div>\n","variable/cmake_find_framework":"<h1 id=\"variable:CMAKE_FIND_FRAMEWORK\">CMAKE_FIND_FRAMEWORK</h1> <p id=\"cmake-find-framework\">This variable affects how <code>find_*</code> commands choose between OS X Frameworks and unix-style package components.</p> <p>On Darwin or systems supporting OS X Frameworks, the <code>CMAKE_FIND_FRAMEWORK</code> variable can be set to empty or one of the following:</p> <dl class=\"docutils\"> <dt><code>FIRST</code></dt> <dd>Try to find frameworks before standard libraries or headers. This is the default on Darwin.</dd> <dt><code>LAST</code></dt> <dd>Try to find frameworks after standard libraries or headers.</dd> <dt><code>ONLY</code></dt> <dd>Only try to find frameworks.</dd> <dt><code>NEVER</code></dt> <dd>Never try to find frameworks.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_FRAMEWORK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_FRAMEWORK.html</a>\n  </p>\n</div>\n","variable/cmake_find_library_prefixes":"<h1 id=\"variable:CMAKE_FIND_LIBRARY_PREFIXES\">CMAKE_FIND_LIBRARY_PREFIXES</h1> <p id=\"cmake-find-library-prefixes\">Prefixes to prepend when looking for libraries.</p> <p>This specifies what prefixes to add to library names when the <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a> command looks for libraries. On UNIX systems this is typically <code>lib</code>, meaning that when trying to find the <code>foo</code> library it will look for <code>libfoo</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_LIBRARY_PREFIXES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_LIBRARY_PREFIXES.html</a>\n  </p>\n</div>\n","variable/cmake_find_appbundle":"<h1 id=\"variable:CMAKE_FIND_APPBUNDLE\">CMAKE_FIND_APPBUNDLE</h1> <p id=\"cmake-find-appbundle\">This variable affects how <code>find_*</code> commands choose between OS X Application Bundles and unix-style package components.</p> <p>On Darwin or systems supporting OS X Application Bundles, the <code>CMAKE_FIND_APPBUNDLE</code> variable can be set to empty or one of the following:</p> <dl class=\"docutils\"> <dt><code>FIRST</code></dt> <dd>Try to find application bundles before standard programs. This is the default on Darwin.</dd> <dt><code>LAST</code></dt> <dd>Try to find application bundles after standard programs.</dd> <dt><code>ONLY</code></dt> <dd>Only try to find application bundles.</dd> <dt><code>NEVER</code></dt> <dd>Never try to find application bundles.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_APPBUNDLE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_APPBUNDLE.html</a>\n  </p>\n</div>\n","variable/cmake_find_no_install_prefix":"<h1 id=\"variable:CMAKE_FIND_NO_INSTALL_PREFIX\">CMAKE_FIND_NO_INSTALL_PREFIX</h1> <p id=\"cmake-find-no-install-prefix\">Ignore the <a class=\"reference internal\" href=\"cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> when searching for assets.</p> <p>CMake adds the <a class=\"reference internal\" href=\"cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-1-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> and the <a class=\"reference internal\" href=\"cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-0-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a> variable to the <a class=\"reference internal\" href=\"cmake_system_prefix_path#variable:CMAKE_SYSTEM_PREFIX_PATH\" title=\"CMAKE_SYSTEM_PREFIX_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_PREFIX_PATH\"><code>CMAKE_SYSTEM_PREFIX_PATH</code></a> by default. This variable may be set on the command line to control that behavior.</p> <p>Set <code>CMAKE_FIND_NO_INSTALL_PREFIX</code> to <code>TRUE</code> to tell <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> not to search in the <a class=\"reference internal\" href=\"cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-2-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> or <a class=\"reference internal\" href=\"cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-1-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a> by default. Note that the prefix may still be searched for other reasons, such as being the same prefix as the CMake installation, or for being a built-in system prefix.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_NO_INSTALL_PREFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_NO_INSTALL_PREFIX.html</a>\n  </p>\n</div>\n","variable/cmake_find_library_suffixes":"<h1 id=\"variable:CMAKE_FIND_LIBRARY_SUFFIXES\">CMAKE_FIND_LIBRARY_SUFFIXES</h1> <p id=\"cmake-find-library-suffixes\">Suffixes to append when looking for libraries.</p> <p>This specifies what suffixes to add to library names when the <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a> command looks for libraries. On Windows systems this is typically <code>.lib</code> and <code>.dll</code>, meaning that when trying to find the <code>foo</code> library it will look for <code>foo.dll</code> etc.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_LIBRARY_SUFFIXES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_LIBRARY_SUFFIXES.html</a>\n  </p>\n</div>\n","variable/cmake_find_package_warn_no_module":"<h1 id=\"variable:CMAKE_FIND_PACKAGE_WARN_NO_MODULE\">CMAKE_FIND_PACKAGE_WARN_NO_MODULE</h1> <p id=\"cmake-find-package-warn-no-module\">Tell <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> to warn if called without an explicit mode.</p> <p>If <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-1-command:find_package\"><code>find_package()</code></a> is called without an explicit mode option (<code>MODULE</code>, <code>CONFIG</code>, or <code>NO_MODULE</code>) and no <code>Find&lt;pkg&gt;.cmake</code> module is in <a class=\"reference internal\" href=\"cmake_module_path#variable:CMAKE_MODULE_PATH\" title=\"CMAKE_MODULE_PATH\" id=\"index-0-variable:CMAKE_MODULE_PATH\"><code>CMAKE_MODULE_PATH</code></a> then CMake implicitly assumes that the caller intends to search for a package configuration file. If no package configuration file is found then the wording of the failure message must account for both the case that the package is really missing and the case that the project has a bug and failed to provide the intended Find module. If instead the caller specifies an explicit mode option then the failure message can be more specific.</p> <p>Set <code>CMAKE_FIND_PACKAGE_WARN_NO_MODULE</code> to <code>TRUE</code> to tell <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-2-command:find_package\"><code>find_package()</code></a> to warn when it implicitly assumes Config mode. This helps developers enforce use of an explicit mode in all calls to <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-3-command:find_package\"><code>find_package()</code></a> within a project.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_PACKAGE_WARN_NO_MODULE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_PACKAGE_WARN_NO_MODULE.html</a>\n  </p>\n</div>\n","variable/cmake_find_root_path_mode_include":"<h1 id=\"variable:CMAKE_FIND_ROOT_PATH_MODE_INCLUDE\">CMAKE_FIND_ROOT_PATH_MODE_INCLUDE</h1> <p id=\"cmake-find-root-path-mode-include\">This variable controls whether the <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-0-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> and <a class=\"reference internal\" href=\"cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-0-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> are used by <a class=\"reference internal\" href=\"../command/find_file#command:find_file\" title=\"find_file\" id=\"index-1-command:find_file\"><code>find_file()</code></a> and <a class=\"reference internal\" href=\"../command/find_path#command:find_path\" title=\"find_path\" id=\"index-1-command:find_path\"><code>find_path()</code></a>.</p> <p>If set to <code>ONLY</code>, then only the roots in <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> will be searched. If set to <code>NEVER</code>, then the roots in <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-2-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> will be ignored and only the host system root will be used. If set to <code>BOTH</code>, then the host system paths and the paths in <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-3-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> will be searched.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_ROOT_PATH_MODE_INCLUDE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_ROOT_PATH_MODE_INCLUDE.html</a>\n  </p>\n</div>\n","variable/cmake_find_root_path_mode_library":"<h1 id=\"variable:CMAKE_FIND_ROOT_PATH_MODE_LIBRARY\">CMAKE_FIND_ROOT_PATH_MODE_LIBRARY</h1> <p id=\"cmake-find-root-path-mode-library\">This variable controls whether the <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-0-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> and <a class=\"reference internal\" href=\"cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-0-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> are used by <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-1-command:find_library\"><code>find_library()</code></a>.</p> <p>If set to <code>ONLY</code>, then only the roots in <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> will be searched. If set to <code>NEVER</code>, then the roots in <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-2-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> will be ignored and only the host system root will be used. If set to <code>BOTH</code>, then the host system paths and the paths in <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-3-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> will be searched.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_ROOT_PATH_MODE_LIBRARY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_ROOT_PATH_MODE_LIBRARY.html</a>\n  </p>\n</div>\n","variable/cmake_find_root_path_mode_package":"<h1 id=\"variable:CMAKE_FIND_ROOT_PATH_MODE_PACKAGE\">CMAKE_FIND_ROOT_PATH_MODE_PACKAGE</h1> <p id=\"cmake-find-root-path-mode-package\">This variable controls whether the <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-0-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> and <a class=\"reference internal\" href=\"cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-0-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> are used by <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-1-command:find_package\"><code>find_package()</code></a>.</p> <p>If set to <code>ONLY</code>, then only the roots in <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> will be searched. If set to <code>NEVER</code>, then the roots in <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-2-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> will be ignored and only the host system root will be used. If set to <code>BOTH</code>, then the host system paths and the paths in <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-3-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> will be searched.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_ROOT_PATH_MODE_PACKAGE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_ROOT_PATH_MODE_PACKAGE.html</a>\n  </p>\n</div>\n","variable/cmake_find_root_path_mode_program":"<h1 id=\"variable:CMAKE_FIND_ROOT_PATH_MODE_PROGRAM\">CMAKE_FIND_ROOT_PATH_MODE_PROGRAM</h1> <p id=\"cmake-find-root-path-mode-program\">This variable controls whether the <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-0-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> and <a class=\"reference internal\" href=\"cmake_sysroot#variable:CMAKE_SYSROOT\" title=\"CMAKE_SYSROOT\" id=\"index-0-variable:CMAKE_SYSROOT\"><code>CMAKE_SYSROOT</code></a> are used by <a class=\"reference internal\" href=\"../command/find_program#command:find_program\" title=\"find_program\" id=\"index-1-command:find_program\"><code>find_program()</code></a>.</p> <p>If set to <code>ONLY</code>, then only the roots in <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-1-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> will be searched. If set to <code>NEVER</code>, then the roots in <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-2-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> will be ignored and only the host system root will be used. If set to <code>BOTH</code>, then the host system paths and the paths in <a class=\"reference internal\" href=\"cmake_find_root_path#variable:CMAKE_FIND_ROOT_PATH\" title=\"CMAKE_FIND_ROOT_PATH\" id=\"index-3-variable:CMAKE_FIND_ROOT_PATH\"><code>CMAKE_FIND_ROOT_PATH</code></a> will be searched.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_ROOT_PATH_MODE_PROGRAM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FIND_ROOT_PATH_MODE_PROGRAM.html</a>\n  </p>\n</div>\n","variable/cmake_framework_path":"<h1 id=\"variable:CMAKE_FRAMEWORK_PATH\">CMAKE_FRAMEWORK_PATH</h1> <p id=\"cmake-framework-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories specifying a search path for OS X frameworks used by the <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a>, <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a>, <a class=\"reference internal\" href=\"../command/find_path#command:find_path\" title=\"find_path\" id=\"index-0-command:find_path\"><code>find_path()</code></a>, and <a class=\"reference internal\" href=\"../command/find_file#command:find_file\" title=\"find_file\" id=\"index-0-command:find_file\"><code>find_file()</code></a> commands.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_FRAMEWORK_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_FRAMEWORK_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_ignore_path":"<h1 id=\"variable:CMAKE_IGNORE_PATH\">CMAKE_IGNORE_PATH</h1> <p id=\"cmake-ignore-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories to be <em>ignored</em> by the <a class=\"reference internal\" href=\"../command/find_program#command:find_program\" title=\"find_program\" id=\"index-0-command:find_program\"><code>find_program()</code></a>, <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a>, <a class=\"reference internal\" href=\"../command/find_file#command:find_file\" title=\"find_file\" id=\"index-0-command:find_file\"><code>find_file()</code></a>, and <a class=\"reference internal\" href=\"../command/find_path#command:find_path\" title=\"find_path\" id=\"index-0-command:find_path\"><code>find_path()</code></a> commands. This is useful in cross-compiling environments where some system directories contain incompatible but possibly linkable libraries. For example, on cross-compiled cluster environments, this allows a user to ignore directories containing libraries meant for the front-end machine.</p> <p>By default this is empty; it is intended to be set by the project. Note that <code>CMAKE_IGNORE_PATH</code> takes a list of directory names, <em>not</em> a list of prefixes. To ignore paths under prefixes (<code>bin</code>, <code>include</code>, <code>lib</code>, etc.), specify them explicitly.</p> <p>See also the <a class=\"reference internal\" href=\"cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-0-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>, <a class=\"reference internal\" href=\"cmake_library_path#variable:CMAKE_LIBRARY_PATH\" title=\"CMAKE_LIBRARY_PATH\" id=\"index-0-variable:CMAKE_LIBRARY_PATH\"><code>CMAKE_LIBRARY_PATH</code></a>, <a class=\"reference internal\" href=\"cmake_include_path#variable:CMAKE_INCLUDE_PATH\" title=\"CMAKE_INCLUDE_PATH\" id=\"index-0-variable:CMAKE_INCLUDE_PATH\"><code>CMAKE_INCLUDE_PATH</code></a>, and <a class=\"reference internal\" href=\"cmake_program_path#variable:CMAKE_PROGRAM_PATH\" title=\"CMAKE_PROGRAM_PATH\" id=\"index-0-variable:CMAKE_PROGRAM_PATH\"><code>CMAKE_PROGRAM_PATH</code></a> variables.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_IGNORE_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_IGNORE_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_include_path":"<h1 id=\"variable:CMAKE_INCLUDE_PATH\">CMAKE_INCLUDE_PATH</h1> <p id=\"cmake-include-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories specifying a search path for the <a class=\"reference internal\" href=\"../command/find_file#command:find_file\" title=\"find_file\" id=\"index-0-command:find_file\"><code>find_file()</code></a> and <a class=\"reference internal\" href=\"../command/find_path#command:find_path\" title=\"find_path\" id=\"index-0-command:find_path\"><code>find_path()</code></a> commands. By default it is empty, it is intended to be set by the project. See also <a class=\"reference internal\" href=\"cmake_system_include_path#variable:CMAKE_SYSTEM_INCLUDE_PATH\" title=\"CMAKE_SYSTEM_INCLUDE_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_INCLUDE_PATH\"><code>CMAKE_SYSTEM_INCLUDE_PATH</code></a> and <a class=\"reference internal\" href=\"cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-0-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_INCLUDE_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_INCLUDE_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_include_directories_before":"<h1 id=\"variable:CMAKE_INCLUDE_DIRECTORIES_BEFORE\">CMAKE_INCLUDE_DIRECTORIES_BEFORE</h1> <p id=\"cmake-include-directories-before\">Whether to append or prepend directories by default in <a class=\"reference internal\" href=\"../command/include_directories#command:include_directories\" title=\"include_directories\" id=\"index-0-command:include_directories\"><code>include_directories()</code></a>.</p> <p>This variable affects the default behavior of the <a class=\"reference internal\" href=\"../command/include_directories#command:include_directories\" title=\"include_directories\" id=\"index-1-command:include_directories\"><code>include_directories()</code></a> command. Setting this variable to <code>ON</code> is equivalent to using the <code>BEFORE</code> option in all uses of that command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_INCLUDE_DIRECTORIES_BEFORE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_INCLUDE_DIRECTORIES_BEFORE.html</a>\n  </p>\n</div>\n","variable/cmake_include_directories_project_before":"<h1 id=\"variable:CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE\">CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE</h1> <p id=\"cmake-include-directories-project-before\">Whether to force prepending of project include directories.</p> <p>This variable affects the order of include directories generated in compiler command lines. If set to <code>ON</code>, it causes the <a class=\"reference internal\" href=\"cmake_source_dir#variable:CMAKE_SOURCE_DIR\" title=\"CMAKE_SOURCE_DIR\" id=\"index-0-variable:CMAKE_SOURCE_DIR\"><code>CMAKE_SOURCE_DIR</code></a> and the <a class=\"reference internal\" href=\"cmake_binary_dir#variable:CMAKE_BINARY_DIR\" title=\"CMAKE_BINARY_DIR\" id=\"index-0-variable:CMAKE_BINARY_DIR\"><code>CMAKE_BINARY_DIR</code></a> to appear first.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE.html</a>\n  </p>\n</div>\n","variable/cmake_install_default_component_name":"<h1 id=\"variable:CMAKE_INSTALL_DEFAULT_COMPONENT_NAME\">CMAKE_INSTALL_DEFAULT_COMPONENT_NAME</h1> <p id=\"cmake-install-default-component-name\">Default component used in <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install()</code></a> commands.</p> <p>If an <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-1-command:install\"><code>install()</code></a> command is used without the <code>COMPONENT</code> argument, these files will be grouped into a default component. The name of this default install component will be taken from this variable. It defaults to <code>Unspecified</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_INSTALL_DEFAULT_COMPONENT_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_INSTALL_DEFAULT_COMPONENT_NAME.html</a>\n  </p>\n</div>\n","variable/cmake_install_message":"<h1 id=\"variable:CMAKE_INSTALL_MESSAGE\">CMAKE_INSTALL_MESSAGE</h1> <p id=\"cmake-install-message\">Specify verbosity of installation script code generated by the <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install()</code></a> command (using the <a class=\"reference internal\" href=\"../command/file#command:file\" title=\"file\" id=\"index-0-command:file\"><code>file(INSTALL)</code></a> command). For paths that are newly installed or updated, installation may print lines like:</p> <pre data-language=\"python\">-- Installing: /some/destination/path\n</pre> <p>For paths that are already up to date, installation may print lines like:</p> <pre data-language=\"python\">-- Up-to-date: /some/destination/path\n</pre> <p>The <code>CMAKE_INSTALL_MESSAGE</code> variable may be set to control which messages are printed:</p> <dl class=\"docutils\"> <dt><code>ALWAYS</code></dt> <dd>Print both <code>Installing</code> and <code>Up-to-date</code> messages.</dd> <dt><code>LAZY</code></dt> <dd>Print <code>Installing</code> but not <code>Up-to-date</code> messages.</dd> <dt><code>NEVER</code></dt> <dd>Print neither <code>Installing</code> nor <code>Up-to-date</code> messages.</dd> </dl> <p>Other values have undefined behavior and may not be diagnosed.</p> <p>If this variable is not set, the default behavior is <code>ALWAYS</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_INSTALL_MESSAGE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_INSTALL_MESSAGE.html</a>\n  </p>\n</div>\n","variable/cmake_library_path":"<h1 id=\"variable:CMAKE_LIBRARY_PATH\">CMAKE_LIBRARY_PATH</h1> <p id=\"cmake-library-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories specifying a search path for the <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a> command. By default it is empty, it is intended to be set by the project. See also <a class=\"reference internal\" href=\"cmake_system_library_path#variable:CMAKE_SYSTEM_LIBRARY_PATH\" title=\"CMAKE_SYSTEM_LIBRARY_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_LIBRARY_PATH\"><code>CMAKE_SYSTEM_LIBRARY_PATH</code></a> and <a class=\"reference internal\" href=\"cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-0-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LIBRARY_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LIBRARY_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_mfc_flag":"<h1 id=\"variable:CMAKE_MFC_FLAG\">CMAKE_MFC_FLAG</h1> <p id=\"cmake-mfc-flag\">Tell cmake to use MFC for an executable or dll.</p> <p>This can be set in a <code>CMakeLists.txt</code> file and will enable MFC in the application. It should be set to <code>1</code> for the static MFC library, and <code>2</code> for the shared MFC library. This is used in Visual Studio 6 and 7 project files. The CMakeSetup dialog used MFC and the <code>CMakeLists.txt</code> looks like this:</p> <pre data-language=\"python\">add_definitions(-D_AFXDLL)\nset(CMAKE_MFC_FLAG 2)\nadd_executable(CMakeSetup WIN32 ${SRCS})\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_MFC_FLAG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_MFC_FLAG.html</a>\n  </p>\n</div>\n","variable/cmake_not_using_config_flags":"<h1 id=\"variable:CMAKE_NOT_USING_CONFIG_FLAGS\">CMAKE_NOT_USING_CONFIG_FLAGS</h1> <p id=\"cmake-not-using-config-flags\">Skip <code>_BUILD_TYPE</code> flags if true.</p> <p>This is an internal flag used by the generators in CMake to tell CMake to skip the <code>_BUILD_TYPE</code> flags.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_NOT_USING_CONFIG_FLAGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_NOT_USING_CONFIG_FLAGS.html</a>\n  </p>\n</div>\n","variable/cmake_program_path":"<h1 id=\"variable:CMAKE_PROGRAM_PATH\">CMAKE_PROGRAM_PATH</h1> <p id=\"cmake-program-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories specifying a search path for the <a class=\"reference internal\" href=\"../command/find_program#command:find_program\" title=\"find_program\" id=\"index-0-command:find_program\"><code>find_program()</code></a> command. By default it is empty, it is intended to be set by the project. See also <a class=\"reference internal\" href=\"cmake_system_program_path#variable:CMAKE_SYSTEM_PROGRAM_PATH\" title=\"CMAKE_SYSTEM_PROGRAM_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_PROGRAM_PATH\"><code>CMAKE_SYSTEM_PROGRAM_PATH</code></a> and <a class=\"reference internal\" href=\"cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-0-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_PROGRAM_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_PROGRAM_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_project_project-name_include":"<h1 id=\"variable:CMAKE_PROJECT_&lt;PROJECT-NAME&gt;_INCLUDE\">CMAKE_PROJECT_&lt;PROJECT-NAME&gt;_INCLUDE</h1> <p id=\"cmake-project-project-name-include\">A CMake language file or module to be included by the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> command. This is is intended for injecting custom code into project builds without modifying their source.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_PROJECT_PROJECT-NAME_INCLUDE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_PROJECT_PROJECT-NAME_INCLUDE.html</a>\n  </p>\n</div>\n","variable/cmake_policy_default_cmpnnnn":"<h1 id=\"variable:CMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;\">CMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;</h1> <p id=\"cmake-policy-default-cmp-nnnn\">Default for CMake Policy <code>CMP&lt;NNNN&gt;</code> when it is otherwise left unset.</p> <p>Commands <a class=\"reference internal\" href=\"../command/cmake_minimum_required#command:cmake_minimum_required\" title=\"cmake_minimum_required\" id=\"index-0-command:cmake_minimum_required\"><code>cmake_minimum_required(VERSION)</code></a> and <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-0-command:cmake_policy\"><code>cmake_policy(VERSION)</code></a> by default leave policies introduced after the given version unset. Set <code>CMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;</code> to <code>OLD</code> or <code>NEW</code> to specify the default for policy <code>CMP&lt;NNNN&gt;</code>, where <code>&lt;NNNN&gt;</code> is the policy number.</p> <p>This variable should not be set by a project in CMake code; use <a class=\"reference internal\" href=\"../command/cmake_policy#command:cmake_policy\" title=\"cmake_policy\" id=\"index-1-command:cmake_policy\"><code>cmake_policy(SET)</code></a> instead. Users running CMake may set this variable in the cache (e.g. <code>-DCMAKE_POLICY_DEFAULT_CMP&lt;NNNN&gt;=&lt;OLD|NEW&gt;</code>) to set a policy not otherwise set by the project. Set to <code>OLD</code> to quiet a policy warning while using old behavior or to <code>NEW</code> to try building the project with new behavior.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_POLICY_DEFAULT_CMPNNNN.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_POLICY_DEFAULT_CMPNNNN.html</a>\n  </p>\n</div>\n","variable/cmake_policy_warning_cmpnnnn":"<h1 id=\"variable:CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;\">CMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;</h1> <p id=\"cmake-policy-warning-cmp-nnnn\">Explicitly enable or disable the warning when CMake Policy <code>CMP&lt;NNNN&gt;</code> is not set. This is meaningful only for the few policies that do not warn by default:</p> <ul class=\"simple\"> <li>\n<code>CMAKE_POLICY_WARNING_CMP0025</code> controls the warning for policy <a class=\"reference internal\" href=\"../policy/cmp0025#policy:CMP0025\" title=\"CMP0025\" id=\"index-0-policy:CMP0025\"><code>CMP0025</code></a>.</li> <li>\n<code>CMAKE_POLICY_WARNING_CMP0047</code> controls the warning for policy <a class=\"reference internal\" href=\"../policy/cmp0047#policy:CMP0047\" title=\"CMP0047\" id=\"index-0-policy:CMP0047\"><code>CMP0047</code></a>.</li> <li>\n<code>CMAKE_POLICY_WARNING_CMP0056</code> controls the warning for policy <a class=\"reference internal\" href=\"../policy/cmp0056#policy:CMP0056\" title=\"CMP0056\" id=\"index-0-policy:CMP0056\"><code>CMP0056</code></a>.</li> <li>\n<code>CMAKE_POLICY_WARNING_CMP0060</code> controls the warning for policy <a class=\"reference internal\" href=\"../policy/cmp0060#policy:CMP0060\" title=\"CMP0060\" id=\"index-0-policy:CMP0060\"><code>CMP0060</code></a>.</li> <li>\n<code>CMAKE_POLICY_WARNING_CMP0065</code> controls the warning for policy <a class=\"reference internal\" href=\"../policy/cmp0065#policy:CMP0065\" title=\"CMP0065\" id=\"index-0-policy:CMP0065\"><code>CMP0065</code></a>.</li> </ul> <p>This variable should not be set by a project in CMake code. Project developers running CMake may set this variable in their cache to enable the warning (e.g. <code>-DCMAKE_POLICY_WARNING_CMP&lt;NNNN&gt;=ON</code>). Alternatively, running <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a> with the <code>--debug-output</code>, <code>--trace</code>, or <code>--trace-expand</code> option will also enable the warning.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_POLICY_WARNING_CMPNNNN.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_POLICY_WARNING_CMPNNNN.html</a>\n  </p>\n</div>\n","variable/cmake_skip_install_all_dependency":"<h1 id=\"variable:CMAKE_SKIP_INSTALL_ALL_DEPENDENCY\">CMAKE_SKIP_INSTALL_ALL_DEPENDENCY</h1> <p id=\"cmake-skip-install-all-dependency\">Don’t make the <code>install</code> target depend on the <code>all</code> target.</p> <p>By default, the <code>install</code> target depends on the <code>all</code> target. This has the effect, that when <code>make install</code> is invoked or <code>INSTALL</code> is built, first the <code>all</code> target is built, then the installation starts. If <a class=\"reference internal\" href=\"#variable:CMAKE_SKIP_INSTALL_ALL_DEPENDENCY\" title=\"CMAKE_SKIP_INSTALL_ALL_DEPENDENCY\" id=\"index-0-variable:CMAKE_SKIP_INSTALL_ALL_DEPENDENCY\"><code>CMAKE_SKIP_INSTALL_ALL_DEPENDENCY</code></a> is set to <code>TRUE</code>, this dependency is not created, so the installation process will start immediately, independent from whether the project has been completely built or not.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SKIP_INSTALL_ALL_DEPENDENCY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SKIP_INSTALL_ALL_DEPENDENCY.html</a>\n  </p>\n</div>\n","variable/cmake_system_appbundle_path":"<h1 id=\"variable:CMAKE_SYSTEM_APPBUNDLE_PATH\">CMAKE_SYSTEM_APPBUNDLE_PATH</h1> <p id=\"cmake-system-appbundle-path\">Search path for OS X application bundles used by the <a class=\"reference internal\" href=\"../command/find_program#command:find_program\" title=\"find_program\" id=\"index-0-command:find_program\"><code>find_program()</code></a>, and <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a> commands. By default it contains the standard directories for the current system. It is <em>not</em> intended to be modified by the project, use <a class=\"reference internal\" href=\"cmake_appbundle_path#variable:CMAKE_APPBUNDLE_PATH\" title=\"CMAKE_APPBUNDLE_PATH\" id=\"index-0-variable:CMAKE_APPBUNDLE_PATH\"><code>CMAKE_APPBUNDLE_PATH</code></a> for this.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_APPBUNDLE_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_APPBUNDLE_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_system_framework_path":"<h1 id=\"variable:CMAKE_SYSTEM_FRAMEWORK_PATH\">CMAKE_SYSTEM_FRAMEWORK_PATH</h1> <p id=\"cmake-system-framework-path\">Search path for OS X frameworks used by the <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a>, <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a>, <a class=\"reference internal\" href=\"../command/find_path#command:find_path\" title=\"find_path\" id=\"index-0-command:find_path\"><code>find_path()</code></a>, and <a class=\"reference internal\" href=\"../command/find_file#command:find_file\" title=\"find_file\" id=\"index-0-command:find_file\"><code>find_file()</code></a> commands. By default it contains the standard directories for the current system. It is <em>not</em> intended to be modified by the project, use <a class=\"reference internal\" href=\"cmake_framework_path#variable:CMAKE_FRAMEWORK_PATH\" title=\"CMAKE_FRAMEWORK_PATH\" id=\"index-0-variable:CMAKE_FRAMEWORK_PATH\"><code>CMAKE_FRAMEWORK_PATH</code></a> for this.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_FRAMEWORK_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_FRAMEWORK_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_system_ignore_path":"<h1 id=\"variable:CMAKE_SYSTEM_IGNORE_PATH\">CMAKE_SYSTEM_IGNORE_PATH</h1> <p id=\"cmake-system-ignore-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories to be <em>ignored</em> by the <a class=\"reference internal\" href=\"../command/find_program#command:find_program\" title=\"find_program\" id=\"index-0-command:find_program\"><code>find_program()</code></a>, <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a>, <a class=\"reference internal\" href=\"../command/find_file#command:find_file\" title=\"find_file\" id=\"index-0-command:find_file\"><code>find_file()</code></a>, and <a class=\"reference internal\" href=\"../command/find_path#command:find_path\" title=\"find_path\" id=\"index-0-command:find_path\"><code>find_path()</code></a> commands. This is useful in cross-compiling environments where some system directories contain incompatible but possibly linkable libraries. For example, on cross-compiled cluster environments, this allows a user to ignore directories containing libraries meant for the front-end machine.</p> <p>By default this contains a list of directories containing incompatible binaries for the host system. See the <a class=\"reference internal\" href=\"cmake_ignore_path#variable:CMAKE_IGNORE_PATH\" title=\"CMAKE_IGNORE_PATH\" id=\"index-0-variable:CMAKE_IGNORE_PATH\"><code>CMAKE_IGNORE_PATH</code></a> variable that is intended to be set by the project.</p> <p>See also the <a class=\"reference internal\" href=\"cmake_system_prefix_path#variable:CMAKE_SYSTEM_PREFIX_PATH\" title=\"CMAKE_SYSTEM_PREFIX_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_PREFIX_PATH\"><code>CMAKE_SYSTEM_PREFIX_PATH</code></a>, <a class=\"reference internal\" href=\"cmake_system_library_path#variable:CMAKE_SYSTEM_LIBRARY_PATH\" title=\"CMAKE_SYSTEM_LIBRARY_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_LIBRARY_PATH\"><code>CMAKE_SYSTEM_LIBRARY_PATH</code></a>, <a class=\"reference internal\" href=\"cmake_system_include_path#variable:CMAKE_SYSTEM_INCLUDE_PATH\" title=\"CMAKE_SYSTEM_INCLUDE_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_INCLUDE_PATH\"><code>CMAKE_SYSTEM_INCLUDE_PATH</code></a>, and <a class=\"reference internal\" href=\"cmake_system_program_path#variable:CMAKE_SYSTEM_PROGRAM_PATH\" title=\"CMAKE_SYSTEM_PROGRAM_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_PROGRAM_PATH\"><code>CMAKE_SYSTEM_PROGRAM_PATH</code></a> variables.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_IGNORE_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_IGNORE_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_system_include_path":"<h1 id=\"variable:CMAKE_SYSTEM_INCLUDE_PATH\">CMAKE_SYSTEM_INCLUDE_PATH</h1> <p id=\"cmake-system-include-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories specifying a search path for the <a class=\"reference internal\" href=\"../command/find_file#command:find_file\" title=\"find_file\" id=\"index-0-command:find_file\"><code>find_file()</code></a> and <a class=\"reference internal\" href=\"../command/find_path#command:find_path\" title=\"find_path\" id=\"index-0-command:find_path\"><code>find_path()</code></a> commands. By default this contains the standard directories for the current system. It is <em>not</em> intended to be modified by the project; use <a class=\"reference internal\" href=\"cmake_include_path#variable:CMAKE_INCLUDE_PATH\" title=\"CMAKE_INCLUDE_PATH\" id=\"index-0-variable:CMAKE_INCLUDE_PATH\"><code>CMAKE_INCLUDE_PATH</code></a> for this. See also <a class=\"reference internal\" href=\"cmake_system_prefix_path#variable:CMAKE_SYSTEM_PREFIX_PATH\" title=\"CMAKE_SYSTEM_PREFIX_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_PREFIX_PATH\"><code>CMAKE_SYSTEM_PREFIX_PATH</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_INCLUDE_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_INCLUDE_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_system_library_path":"<h1 id=\"variable:CMAKE_SYSTEM_LIBRARY_PATH\">CMAKE_SYSTEM_LIBRARY_PATH</h1> <p id=\"cmake-system-library-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories specifying a search path for the <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a> command. By default this contains the standard directories for the current system. It is <em>not</em> intended to be modified by the project; use <a class=\"reference internal\" href=\"cmake_library_path#variable:CMAKE_LIBRARY_PATH\" title=\"CMAKE_LIBRARY_PATH\" id=\"index-0-variable:CMAKE_LIBRARY_PATH\"><code>CMAKE_LIBRARY_PATH</code></a> for this. See also <a class=\"reference internal\" href=\"cmake_system_prefix_path#variable:CMAKE_SYSTEM_PREFIX_PATH\" title=\"CMAKE_SYSTEM_PREFIX_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_PREFIX_PATH\"><code>CMAKE_SYSTEM_PREFIX_PATH</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_LIBRARY_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_LIBRARY_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_system_prefix_path":"<h1 id=\"variable:CMAKE_SYSTEM_PREFIX_PATH\">CMAKE_SYSTEM_PREFIX_PATH</h1> <p id=\"cmake-system-prefix-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories specifying installation <em>prefixes</em> to be searched by the <a class=\"reference internal\" href=\"../command/find_package#command:find_package\" title=\"find_package\" id=\"index-0-command:find_package\"><code>find_package()</code></a>, <a class=\"reference internal\" href=\"../command/find_program#command:find_program\" title=\"find_program\" id=\"index-0-command:find_program\"><code>find_program()</code></a>, <a class=\"reference internal\" href=\"../command/find_library#command:find_library\" title=\"find_library\" id=\"index-0-command:find_library\"><code>find_library()</code></a>, <a class=\"reference internal\" href=\"../command/find_file#command:find_file\" title=\"find_file\" id=\"index-0-command:find_file\"><code>find_file()</code></a>, and <a class=\"reference internal\" href=\"../command/find_path#command:find_path\" title=\"find_path\" id=\"index-0-command:find_path\"><code>find_path()</code></a> commands. Each command will add appropriate subdirectories (like <code>bin</code>, <code>lib</code>, or <code>include</code>) as specified in its own documentation.</p> <p>By default this contains the standard directories for the current system, the <a class=\"reference internal\" href=\"cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a>, and the <a class=\"reference internal\" href=\"cmake_staging_prefix#variable:CMAKE_STAGING_PREFIX\" title=\"CMAKE_STAGING_PREFIX\" id=\"index-0-variable:CMAKE_STAGING_PREFIX\"><code>CMAKE_STAGING_PREFIX</code></a>. It is <em>not</em> intended to be modified by the project; use <a class=\"reference internal\" href=\"cmake_prefix_path#variable:CMAKE_PREFIX_PATH\" title=\"CMAKE_PREFIX_PATH\" id=\"index-0-variable:CMAKE_PREFIX_PATH\"><code>CMAKE_PREFIX_PATH</code></a> for this.</p> <p>See also <a class=\"reference internal\" href=\"cmake_system_include_path#variable:CMAKE_SYSTEM_INCLUDE_PATH\" title=\"CMAKE_SYSTEM_INCLUDE_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_INCLUDE_PATH\"><code>CMAKE_SYSTEM_INCLUDE_PATH</code></a>, <a class=\"reference internal\" href=\"cmake_system_library_path#variable:CMAKE_SYSTEM_LIBRARY_PATH\" title=\"CMAKE_SYSTEM_LIBRARY_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_LIBRARY_PATH\"><code>CMAKE_SYSTEM_LIBRARY_PATH</code></a>, <a class=\"reference internal\" href=\"cmake_system_program_path#variable:CMAKE_SYSTEM_PROGRAM_PATH\" title=\"CMAKE_SYSTEM_PROGRAM_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_PROGRAM_PATH\"><code>CMAKE_SYSTEM_PROGRAM_PATH</code></a>, and <a class=\"reference internal\" href=\"cmake_system_ignore_path#variable:CMAKE_SYSTEM_IGNORE_PATH\" title=\"CMAKE_SYSTEM_IGNORE_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_IGNORE_PATH\"><code>CMAKE_SYSTEM_IGNORE_PATH</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_PREFIX_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_PREFIX_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_system_program_path":"<h1 id=\"variable:CMAKE_SYSTEM_PROGRAM_PATH\">CMAKE_SYSTEM_PROGRAM_PATH</h1> <p id=\"cmake-system-program-path\"><a class=\"reference internal\" href=\"../manual/cmake-language.7#cmake-language-lists\"><span>;-list</span></a> of directories specifying a search path for the <a class=\"reference internal\" href=\"../command/find_program#command:find_program\" title=\"find_program\" id=\"index-0-command:find_program\"><code>find_program()</code></a> command. By default this contains the standard directories for the current system. It is <em>not</em> intended to be modified by the project; use <a class=\"reference internal\" href=\"cmake_program_path#variable:CMAKE_PROGRAM_PATH\" title=\"CMAKE_PROGRAM_PATH\" id=\"index-0-variable:CMAKE_PROGRAM_PATH\"><code>CMAKE_PROGRAM_PATH</code></a> for this. See also <a class=\"reference internal\" href=\"cmake_system_prefix_path#variable:CMAKE_SYSTEM_PREFIX_PATH\" title=\"CMAKE_SYSTEM_PREFIX_PATH\" id=\"index-0-variable:CMAKE_SYSTEM_PREFIX_PATH\"><code>CMAKE_SYSTEM_PREFIX_PATH</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_PROGRAM_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM_PROGRAM_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_user_make_rules_override":"<h1 id=\"variable:CMAKE_USER_MAKE_RULES_OVERRIDE\">CMAKE_USER_MAKE_RULES_OVERRIDE</h1> <p id=\"cmake-user-make-rules-override\">Specify a CMake file that overrides platform information.</p> <p>CMake loads the specified file while enabling support for each language from either the <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> or <a class=\"reference internal\" href=\"../command/enable_language#command:enable_language\" title=\"enable_language\" id=\"index-0-command:enable_language\"><code>enable_language()</code></a> commands. It is loaded after CMake’s builtin compiler and platform information modules have been loaded but before the information is used. The file may set platform information variables to override CMake’s defaults.</p> <p>This feature is intended for use only in overriding information variables that must be set before CMake builds its first test project to check that the compiler for a language works. It should not be used to load a file in cases that a normal <a class=\"reference internal\" href=\"../command/include#command:include\" title=\"include\" id=\"index-0-command:include\"><code>include()</code></a> will work. Use it only as a last resort for behavior that cannot be achieved any other way. For example, one may set <code>CMAKE_C_FLAGS_INIT</code> to change the default value used to initialize <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_FLAGS\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_FLAGS\"><code>CMAKE_C_FLAGS</code></a> before it is cached. The override file should NOT be used to set anything that could be set after languages are enabled, such as variables like <a class=\"reference internal\" href=\"cmake_runtime_output_directory#variable:CMAKE_RUNTIME_OUTPUT_DIRECTORY\" title=\"CMAKE_RUNTIME_OUTPUT_DIRECTORY\" id=\"index-0-variable:CMAKE_RUNTIME_OUTPUT_DIRECTORY\"><code>CMAKE_RUNTIME_OUTPUT_DIRECTORY</code></a> that affect the placement of binaries. Information set in the file will be used for <a class=\"reference internal\" href=\"../command/try_compile#command:try_compile\" title=\"try_compile\" id=\"index-0-command:try_compile\"><code>try_compile()</code></a> and <a class=\"reference internal\" href=\"../command/try_run#command:try_run\" title=\"try_run\" id=\"index-0-command:try_run\"><code>try_run()</code></a> builds too.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_USER_MAKE_RULES_OVERRIDE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_USER_MAKE_RULES_OVERRIDE.html</a>\n  </p>\n</div>\n","variable/cmake_warn_deprecated":"<h1 id=\"variable:CMAKE_WARN_DEPRECATED\">CMAKE_WARN_DEPRECATED</h1> <p id=\"cmake-warn-deprecated\">Whether to issue warnings for deprecated functionality.</p> <p>If not <code>FALSE</code>, use of deprecated functionality will issue warnings. If this variable is not set, CMake behaves as if it were set to <code>TRUE</code>.</p> <p>When running <a class=\"reference internal\" href=\"../manual/cmake.1#manual:cmake(1)\" title=\"cmake(1)\" id=\"index-0-manual:cmake(1)\"><code>cmake(1)</code></a>, this option can be enabled with the <code>-Wdeprecated</code> option, or disabled with the <code>-Wno-deprecated</code> option.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_WARN_DEPRECATED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_WARN_DEPRECATED.html</a>\n  </p>\n</div>\n","variable/cmake_warn_on_absolute_install_destination":"<h1 id=\"variable:CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION\">CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION</h1> <p id=\"cmake-warn-on-absolute-install-destination\">Ask <code>cmake_install.cmake</code> script to warn each time a file with absolute <code>INSTALL DESTINATION</code> is encountered.</p> <p>This variable is used by CMake-generated <code>cmake_install.cmake</code> scripts. If one sets this variable to <code>ON</code> while running the script, it may get warning messages from the script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION.html</a>\n  </p>\n</div>\n","variable/apple":"<h1 id=\"variable:APPLE\">APPLE</h1> <p id=\"apple\"><code>True</code> if running on OS X.</p> <p>Set to <code>true</code> on OS X.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/APPLE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/APPLE.html</a>\n  </p>\n</div>\n","variable/borland":"<h1 id=\"variable:BORLAND\">BORLAND</h1> <p id=\"borland\"><code>True</code> if the Borland compiler is being used.</p> <p>This is set to <code>true</code> if the Borland compiler is being used.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/BORLAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/BORLAND.html</a>\n  </p>\n</div>\n","variable/cmake_host_apple":"<h1 id=\"variable:CMAKE_HOST_APPLE\">CMAKE_HOST_APPLE</h1> <p id=\"cmake-host-apple\"><code>True</code> for Apple OS X operating systems.</p> <p>Set to <code>true</code> when the host system is Apple OS X.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_APPLE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_APPLE.html</a>\n  </p>\n</div>\n","variable/cmake_cl_64":"<h1 id=\"variable:CMAKE_CL_64\">CMAKE_CL_64</h1> <p id=\"cmake-cl-64\">Using the 64-bit compiler from Microsoft</p> <p>Set to <code>true</code> when using the 64-bit <code>cl</code> compiler from Microsoft.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CL_64.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CL_64.html</a>\n  </p>\n</div>\n","variable/cmake_compiler_2005":"<h1 id=\"variable:CMAKE_COMPILER_2005\">CMAKE_COMPILER_2005</h1> <p id=\"cmake-compiler-2005\">Using the Visual Studio 2005 compiler from Microsoft</p> <p>Set to true when using the Visual Studio 2005 compiler from Microsoft.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_COMPILER_2005.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_COMPILER_2005.html</a>\n  </p>\n</div>\n","variable/cmake_host_system_name":"<h1 id=\"variable:CMAKE_HOST_SYSTEM_NAME\">CMAKE_HOST_SYSTEM_NAME</h1> <p id=\"cmake-host-system-name\">Name of the OS CMake is running on.</p> <p>On systems that have the uname command, this variable is set to the output of <code>uname -s</code>. <code>Linux</code>, <code>Windows</code>, and <code>Darwin</code> for OS X are the values found on the big three operating systems.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_SYSTEM_NAME.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_SYSTEM_NAME.html</a>\n  </p>\n</div>\n","variable/cmake_host_system_processor":"<h1 id=\"variable:CMAKE_HOST_SYSTEM_PROCESSOR\">CMAKE_HOST_SYSTEM_PROCESSOR</h1> <p id=\"cmake-host-system-processor\">The name of the CPU CMake is running on.</p> <p>On systems that support <code>uname</code>, this variable is set to the output of <code>uname -p</code>. On Windows it is set to the value of the environment variable <code>PROCESSOR_ARCHITECTURE</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_SYSTEM_PROCESSOR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_SYSTEM_PROCESSOR.html</a>\n  </p>\n</div>\n","variable/cmake_host_system":"<h1 id=\"variable:CMAKE_HOST_SYSTEM\">CMAKE_HOST_SYSTEM</h1> <p id=\"cmake-host-system\">Composit Name of OS CMake is being run on.</p> <p>This variable is the composite of <a class=\"reference internal\" href=\"cmake_host_system_name#variable:CMAKE_HOST_SYSTEM_NAME\" title=\"CMAKE_HOST_SYSTEM_NAME\" id=\"index-0-variable:CMAKE_HOST_SYSTEM_NAME\"><code>CMAKE_HOST_SYSTEM_NAME</code></a> and <a class=\"reference internal\" href=\"cmake_host_system_version#variable:CMAKE_HOST_SYSTEM_VERSION\" title=\"CMAKE_HOST_SYSTEM_VERSION\" id=\"index-0-variable:CMAKE_HOST_SYSTEM_VERSION\"><code>CMAKE_HOST_SYSTEM_VERSION</code></a>, e.g. <code>${CMAKE_HOST_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_VERSION}</code>. If <a class=\"reference internal\" href=\"cmake_host_system_version#variable:CMAKE_HOST_SYSTEM_VERSION\" title=\"CMAKE_HOST_SYSTEM_VERSION\" id=\"index-1-variable:CMAKE_HOST_SYSTEM_VERSION\"><code>CMAKE_HOST_SYSTEM_VERSION</code></a> is not set, then this variable is the same as <a class=\"reference internal\" href=\"cmake_host_system_name#variable:CMAKE_HOST_SYSTEM_NAME\" title=\"CMAKE_HOST_SYSTEM_NAME\" id=\"index-1-variable:CMAKE_HOST_SYSTEM_NAME\"><code>CMAKE_HOST_SYSTEM_NAME</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_SYSTEM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_SYSTEM.html</a>\n  </p>\n</div>\n","variable/cmake_host_system_version":"<h1 id=\"variable:CMAKE_HOST_SYSTEM_VERSION\">CMAKE_HOST_SYSTEM_VERSION</h1> <p id=\"cmake-host-system-version\">The OS version CMake is running on.</p> <p>A numeric version string for the system. On systems that support <code>uname</code>, this variable is set to the output of <code>uname -r</code>. On other systems this is set to major-minor version numbers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_SYSTEM_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_SYSTEM_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_host_unix":"<h1 id=\"variable:CMAKE_HOST_UNIX\">CMAKE_HOST_UNIX</h1> <p id=\"cmake-host-unix\"><code>True</code> for UNIX and UNIX like operating systems.</p> <p>Set to <code>true</code> when the host system is UNIX or UNIX like (i.e. APPLE and CYGWIN).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_UNIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_UNIX.html</a>\n  </p>\n</div>\n","variable/cmake_host_win32":"<h1 id=\"variable:CMAKE_HOST_WIN32\">CMAKE_HOST_WIN32</h1> <p id=\"cmake-host-win32\"><code>True</code> on Windows systems, including Win64.</p> <p>Set to <code>true</code> when the host system is Windows and on Cygwin.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_WIN32.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_HOST_WIN32.html</a>\n  </p>\n</div>\n","variable/cmake_library_architecture_regex":"<h1 id=\"variable:CMAKE_LIBRARY_ARCHITECTURE_REGEX\">CMAKE_LIBRARY_ARCHITECTURE_REGEX</h1> <p id=\"cmake-library-architecture-regex\">Regex matching possible target architecture library directory names.</p> <p>This is used to detect <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_LIBRARY_ARCHITECTURE\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_LIBRARY_ARCHITECTURE\"><code>CMAKE_&lt;LANG&gt;_LIBRARY_ARCHITECTURE</code></a> from the implicit linker search path by matching the <code>&lt;arch&gt;</code> name.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LIBRARY_ARCHITECTURE_REGEX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LIBRARY_ARCHITECTURE_REGEX.html</a>\n  </p>\n</div>\n","variable/cmake_library_architecture":"<h1 id=\"variable:CMAKE_LIBRARY_ARCHITECTURE\">CMAKE_LIBRARY_ARCHITECTURE</h1> <p id=\"cmake-library-architecture\">Target architecture library directory name, if detected.</p> <p>This is the value of <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_LIBRARY_ARCHITECTURE\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_LIBRARY_ARCHITECTURE\"><code>CMAKE_&lt;LANG&gt;_LIBRARY_ARCHITECTURE</code></a> as detected for one of the enabled languages.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LIBRARY_ARCHITECTURE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LIBRARY_ARCHITECTURE.html</a>\n  </p>\n</div>\n","variable/cmake_object_path_max":"<h1 id=\"variable:CMAKE_OBJECT_PATH_MAX\">CMAKE_OBJECT_PATH_MAX</h1> <p id=\"cmake-object-path-max\">Maximum object file full-path length allowed by native build tools.</p> <p>CMake computes for every source file an object file name that is unique to the source file and deterministic with respect to the full path to the source file. This allows multiple source files in a target to share the same name if they lie in different directories without rebuilding when one is added or removed. However, it can produce long full paths in a few cases, so CMake shortens the path using a hashing scheme when the full path to an object file exceeds a limit. CMake has a built-in limit for each platform that is sufficient for common tools, but some native tools may have a lower limit. This variable may be set to specify the limit explicitly. The value must be an integer no less than 128.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_OBJECT_PATH_MAX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_OBJECT_PATH_MAX.html</a>\n  </p>\n</div>\n","variable/cmake_system":"<h1 id=\"variable:CMAKE_SYSTEM\">CMAKE_SYSTEM</h1> <p id=\"cmake-system\">Composite name of operating system CMake is compiling for.</p> <p>This variable is the composite of <a class=\"reference internal\" href=\"cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-0-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a> and <a class=\"reference internal\" href=\"cmake_system_version#variable:CMAKE_SYSTEM_VERSION\" title=\"CMAKE_SYSTEM_VERSION\" id=\"index-0-variable:CMAKE_SYSTEM_VERSION\"><code>CMAKE_SYSTEM_VERSION</code></a>, e.g. <code>${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}</code>. If <a class=\"reference internal\" href=\"cmake_system_version#variable:CMAKE_SYSTEM_VERSION\" title=\"CMAKE_SYSTEM_VERSION\" id=\"index-1-variable:CMAKE_SYSTEM_VERSION\"><code>CMAKE_SYSTEM_VERSION</code></a> is not set, then this variable is the same as <a class=\"reference internal\" href=\"cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-1-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SYSTEM.html</a>\n  </p>\n</div>\n","variable/cygwin":"<h1 id=\"variable:CYGWIN\">CYGWIN</h1> <p id=\"cygwin\"><code>True</code> for Cygwin.</p> <p>Set to <code>true</code> when using Cygwin.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CYGWIN.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CYGWIN.html</a>\n  </p>\n</div>\n","variable/env":"<h1 id=\"variable:ENV\">ENV</h1> <p id=\"env\">Access environment variables.</p> <p>Use the syntax <code>$ENV{VAR}</code> to read environment variable <code>VAR</code>. See also the <a class=\"reference internal\" href=\"../command/set#command:set\" title=\"set\" id=\"index-0-command:set\"><code>set()</code></a> command to set <code>ENV{VAR}</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/ENV.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/ENV.html</a>\n  </p>\n</div>\n","variable/ghs-multi":"<h1 id=\"variable:GHS-MULTI\">GHS-MULTI</h1> <p id=\"ghs-multi\">True when using Green Hills MULTI</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/GHS-MULTI.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/GHS-MULTI.html</a>\n  </p>\n</div>\n","variable/mingw":"<h1 id=\"variable:MINGW\">MINGW</h1> <p id=\"mingw\"><code>True</code> when using MinGW</p> <p>Set to <code>true</code> when the compiler is some version of MinGW.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MINGW.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MINGW.html</a>\n  </p>\n</div>\n","variable/msvc10":"<h1 id=\"variable:MSVC10\">MSVC10</h1> <p id=\"msvc10\"><code>True</code> when using Microsoft Visual C++ 10.0</p> <p>Set to <code>true</code> when the compiler is version 10.0 of Microsoft Visual C++.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MSVC10.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MSVC10.html</a>\n  </p>\n</div>\n","variable/msvc11":"<h1 id=\"variable:MSVC11\">MSVC11</h1> <p id=\"msvc11\"><code>True</code> when using Microsoft Visual C++ 11.0</p> <p>Set to <code>true</code> when the compiler is version 11.0 of Microsoft Visual C++.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MSVC11.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MSVC11.html</a>\n  </p>\n</div>\n","variable/msvc12":"<h1 id=\"variable:MSVC12\">MSVC12</h1> <p id=\"msvc12\"><code>True</code> when using Microsoft Visual C++ 12.0.</p> <p>Set to <code>true</code> when the compiler is version 12.0 of Microsoft Visual C++.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MSVC12.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MSVC12.html</a>\n  </p>\n</div>\n","variable/msvc14":"<h1 id=\"variable:MSVC14\">MSVC14</h1> <p id=\"msvc14\"><code>True</code> when using Microsoft Visual C++ 14.0.</p> <p>Set to <code>true</code> when the compiler is version 14.0 of Microsoft Visual C++.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MSVC14.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MSVC14.html</a>\n  </p>\n</div>\n","variable/msvc80":"<h1 id=\"variable:MSVC80\">MSVC80</h1> <p id=\"msvc80\"><code>True</code> when using Microsoft Visual C++ 8.0.</p> <p>Set to <code>true</code> when the compiler is version 8.0 of Microsoft Visual C++.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MSVC80.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MSVC80.html</a>\n  </p>\n</div>\n","variable/msvc70":"<h1 id=\"variable:MSVC70\">MSVC70</h1> <p id=\"msvc70\"><code>True</code> when using Microsoft Visual C++ 7.0.</p> <p>Set to <code>true</code> when the compiler is version 7.0 of Microsoft Visual C++.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MSVC70.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MSVC70.html</a>\n  </p>\n</div>\n","variable/msvc60":"<h1 id=\"variable:MSVC60\">MSVC60</h1> <p id=\"msvc60\"><code>True</code> when using Microsoft Visual C++ 6.0.</p> <p>Set to <code>true</code> when the compiler is version 6.0 of Microsoft Visual C++.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MSVC60.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MSVC60.html</a>\n  </p>\n</div>\n","variable/msvc71":"<h1 id=\"variable:MSVC71\">MSVC71</h1> <p id=\"msvc71\"><code>True</code> when using Microsoft Visual C++ 7.1.</p> <p>Set to <code>true</code> when the compiler is version 7.1 of Microsoft Visual C++.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MSVC71.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MSVC71.html</a>\n  </p>\n</div>\n","variable/msvc90":"<h1 id=\"variable:MSVC90\">MSVC90</h1> <p id=\"msvc90\"><code>True</code> when using Microsoft Visual C++ 9.0.</p> <p>Set to <code>true</code> when the compiler is version 9.0 of Microsoft Visual C++.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MSVC90.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MSVC90.html</a>\n  </p>\n</div>\n","variable/msvc_version":"<h1 id=\"variable:MSVC_VERSION\">MSVC_VERSION</h1> <p id=\"msvc-version\">The version of Microsoft Visual C/C++ being used if any.</p> <p>Known version numbers are:</p> <pre data-language=\"python\">1200 = VS  6.0\n1300 = VS  7.0\n1310 = VS  7.1\n1400 = VS  8.0\n1500 = VS  9.0\n1600 = VS 10.0\n1700 = VS 11.0\n1800 = VS 12.0\n1900 = VS 14.0\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MSVC_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MSVC_VERSION.html</a>\n  </p>\n</div>\n","variable/msvc_ide":"<h1 id=\"variable:MSVC_IDE\">MSVC_IDE</h1> <p id=\"msvc-ide\"><code>True</code> when using the Microsoft Visual C++ IDE.</p> <p>Set to <code>true</code> when the target platform is the Microsoft Visual C++ IDE, as opposed to the command line compiler.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MSVC_IDE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MSVC_IDE.html</a>\n  </p>\n</div>\n","variable/msvc":"<h1 id=\"variable:MSVC\">MSVC</h1> <p id=\"msvc\"><code>True</code> when using Microsoft Visual C++.</p> <p>Set to <code>true</code> when the compiler is some version of Microsoft Visual C++.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/MSVC.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/MSVC.html</a>\n  </p>\n</div>\n","variable/unix":"<h1 id=\"variable:UNIX\">UNIX</h1> <p id=\"unix\"><code>True</code> for UNIX and UNIX like operating systems.</p> <p>Set to <code>true</code> when the target system is UNIX or UNIX like (i.e. <a class=\"reference internal\" href=\"apple#variable:APPLE\" title=\"APPLE\" id=\"index-0-variable:APPLE\"><code>APPLE</code></a> and <a class=\"reference internal\" href=\"cygwin#variable:CYGWIN\" title=\"CYGWIN\" id=\"index-0-variable:CYGWIN\"><code>CYGWIN</code></a>).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/UNIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/UNIX.html</a>\n  </p>\n</div>\n","variable/win32":"<h1 id=\"variable:WIN32\">WIN32</h1> <p id=\"win32\"><code>True</code> on Windows systems, including Win64.</p> <p>Set to <code>true</code> when the target system is Windows.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/WIN32.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/WIN32.html</a>\n  </p>\n</div>\n","variable/wince":"<h1 id=\"variable:WINCE\">WINCE</h1> <p id=\"wince\">True when the <a class=\"reference internal\" href=\"cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-0-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a> variable is set to <code>WindowsCE</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/WINCE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/WINCE.html</a>\n  </p>\n</div>\n","variable/windows_phone":"<h1 id=\"variable:WINDOWS_PHONE\">WINDOWS_PHONE</h1> <p id=\"windows-phone\">True when the <a class=\"reference internal\" href=\"cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-0-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a> variable is set to <code>WindowsPhone</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/WINDOWS_PHONE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/WINDOWS_PHONE.html</a>\n  </p>\n</div>\n","variable/windows_store":"<h1 id=\"variable:WINDOWS_STORE\">WINDOWS_STORE</h1> <p id=\"windows-store\">True when the <a class=\"reference internal\" href=\"cmake_system_name#variable:CMAKE_SYSTEM_NAME\" title=\"CMAKE_SYSTEM_NAME\" id=\"index-0-variable:CMAKE_SYSTEM_NAME\"><code>CMAKE_SYSTEM_NAME</code></a> variable is set to <code>WindowsStore</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/WINDOWS_STORE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/WINDOWS_STORE.html</a>\n  </p>\n</div>\n","variable/cmake_android_api":"<h1 id=\"variable:CMAKE_ANDROID_API\">CMAKE_ANDROID_API</h1> <p id=\"cmake-android-api\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_api#prop_tgt:ANDROID_API\" title=\"ANDROID_API\" id=\"index-0-prop_tgt:ANDROID_API\"><code>ANDROID_API</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_API.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_API.html</a>\n  </p>\n</div>\n","variable/xcode_version":"<h1 id=\"variable:XCODE_VERSION\">XCODE_VERSION</h1> <p id=\"xcode-version\">Version of Xcode (<a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Xcode.html#generator:Xcode\" title=\"Xcode\" id=\"index-0-generator:Xcode\"><code>Xcode</code></a> generator only).</p> <p>Under the Xcode generator, this is the version of Xcode as specified in <code>Xcode.app/Contents/version.plist</code> (such as <code>3.1.2</code>).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/XCODE_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/XCODE_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_android_ant_additional_options":"<h1 id=\"variable:CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS\">CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS</h1> <p id=\"cmake-android-ant-additional-options\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_ant_additional_options#prop_tgt:ANDROID_ANT_ADDITIONAL_OPTIONS\" title=\"ANDROID_ANT_ADDITIONAL_OPTIONS\" id=\"index-0-prop_tgt:ANDROID_ANT_ADDITIONAL_OPTIONS\"><code>ANDROID_ANT_ADDITIONAL_OPTIONS</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS.html</a>\n  </p>\n</div>\n","variable/cmake_android_api_min":"<h1 id=\"variable:CMAKE_ANDROID_API_MIN\">CMAKE_ANDROID_API_MIN</h1> <p id=\"cmake-android-api-min\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_api_min#prop_tgt:ANDROID_API_MIN\" title=\"ANDROID_API_MIN\" id=\"index-0-prop_tgt:ANDROID_API_MIN\"><code>ANDROID_API_MIN</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_API_MIN.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_API_MIN.html</a>\n  </p>\n</div>\n","variable/cmake_android_arch":"<h1 id=\"variable:CMAKE_ANDROID_ARCH\">CMAKE_ANDROID_ARCH</h1> <p id=\"cmake-android-arch\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_arch#prop_tgt:ANDROID_ARCH\" title=\"ANDROID_ARCH\" id=\"index-0-prop_tgt:ANDROID_ARCH\"><code>ANDROID_ARCH</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_ARCH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_ARCH.html</a>\n  </p>\n</div>\n","variable/cmake_android_assets_directories":"<h1 id=\"variable:CMAKE_ANDROID_ASSETS_DIRECTORIES\">CMAKE_ANDROID_ASSETS_DIRECTORIES</h1> <p id=\"cmake-android-assets-directories\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_assets_directories#prop_tgt:ANDROID_ASSETS_DIRECTORIES\" title=\"ANDROID_ASSETS_DIRECTORIES\" id=\"index-0-prop_tgt:ANDROID_ASSETS_DIRECTORIES\"><code>ANDROID_ASSETS_DIRECTORIES</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_ASSETS_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_ASSETS_DIRECTORIES.html</a>\n  </p>\n</div>\n","variable/cmake_android_gui":"<h1 id=\"variable:CMAKE_ANDROID_GUI\">CMAKE_ANDROID_GUI</h1> <p id=\"cmake-android-gui\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_gui#prop_tgt:ANDROID_GUI\" title=\"ANDROID_GUI\" id=\"index-0-prop_tgt:ANDROID_GUI\"><code>ANDROID_GUI</code></a> target property of executables. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_GUI.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_GUI.html</a>\n  </p>\n</div>\n","variable/cmake_android_jar_dependencies":"<h1 id=\"variable:CMAKE_ANDROID_JAR_DEPENDENCIES\">CMAKE_ANDROID_JAR_DEPENDENCIES</h1> <p id=\"cmake-android-jar-dependencies\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_jar_dependencies#prop_tgt:ANDROID_JAR_DEPENDENCIES\" title=\"ANDROID_JAR_DEPENDENCIES\" id=\"index-0-prop_tgt:ANDROID_JAR_DEPENDENCIES\"><code>ANDROID_JAR_DEPENDENCIES</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_JAR_DEPENDENCIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_JAR_DEPENDENCIES.html</a>\n  </p>\n</div>\n","variable/cmake_android_jar_directories":"<h1 id=\"variable:CMAKE_ANDROID_JAR_DIRECTORIES\">CMAKE_ANDROID_JAR_DIRECTORIES</h1> <p id=\"cmake-android-jar-directories\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_jar_directories#prop_tgt:ANDROID_JAR_DIRECTORIES\" title=\"ANDROID_JAR_DIRECTORIES\" id=\"index-0-prop_tgt:ANDROID_JAR_DIRECTORIES\"><code>ANDROID_JAR_DIRECTORIES</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_JAR_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_JAR_DIRECTORIES.html</a>\n  </p>\n</div>\n","variable/cmake_android_java_source_dir":"<h1 id=\"variable:CMAKE_ANDROID_JAVA_SOURCE_DIR\">CMAKE_ANDROID_JAVA_SOURCE_DIR</h1> <p id=\"cmake-android-java-source-dir\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_java_source_dir#prop_tgt:ANDROID_JAVA_SOURCE_DIR\" title=\"ANDROID_JAVA_SOURCE_DIR\" id=\"index-0-prop_tgt:ANDROID_JAVA_SOURCE_DIR\"><code>ANDROID_JAVA_SOURCE_DIR</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_JAVA_SOURCE_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_JAVA_SOURCE_DIR.html</a>\n  </p>\n</div>\n","variable/cmake_android_native_lib_dependencies":"<h1 id=\"variable:CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES\">CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES</h1> <p id=\"cmake-android-native-lib-dependencies\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_native_lib_dependencies#prop_tgt:ANDROID_NATIVE_LIB_DEPENDENCIES\" title=\"ANDROID_NATIVE_LIB_DEPENDENCIES\" id=\"index-0-prop_tgt:ANDROID_NATIVE_LIB_DEPENDENCIES\"><code>ANDROID_NATIVE_LIB_DEPENDENCIES</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES.html</a>\n  </p>\n</div>\n","variable/cmake_android_native_lib_directories":"<h1 id=\"variable:CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES\">CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES</h1> <p id=\"cmake-android-native-lib-directories\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_native_lib_directories#prop_tgt:ANDROID_NATIVE_LIB_DIRECTORIES\" title=\"ANDROID_NATIVE_LIB_DIRECTORIES\" id=\"index-0-prop_tgt:ANDROID_NATIVE_LIB_DIRECTORIES\"><code>ANDROID_NATIVE_LIB_DIRECTORIES</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES.html</a>\n  </p>\n</div>\n","variable/cmake_android_process_max":"<h1 id=\"variable:CMAKE_ANDROID_PROCESS_MAX\">CMAKE_ANDROID_PROCESS_MAX</h1> <p id=\"cmake-android-process-max\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_process_max#prop_tgt:ANDROID_PROCESS_MAX\" title=\"ANDROID_PROCESS_MAX\" id=\"index-0-prop_tgt:ANDROID_PROCESS_MAX\"><code>ANDROID_PROCESS_MAX</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_PROCESS_MAX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_PROCESS_MAX.html</a>\n  </p>\n</div>\n","variable/cmake_android_proguard":"<h1 id=\"variable:CMAKE_ANDROID_PROGUARD\">CMAKE_ANDROID_PROGUARD</h1> <p id=\"cmake-android-proguard\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_proguard#prop_tgt:ANDROID_PROGUARD\" title=\"ANDROID_PROGUARD\" id=\"index-0-prop_tgt:ANDROID_PROGUARD\"><code>ANDROID_PROGUARD</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_PROGUARD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_PROGUARD.html</a>\n  </p>\n</div>\n","variable/cmake_android_proguard_config_path":"<h1 id=\"variable:CMAKE_ANDROID_PROGUARD_CONFIG_PATH\">CMAKE_ANDROID_PROGUARD_CONFIG_PATH</h1> <p id=\"cmake-android-proguard-config-path\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_proguard_config_path#prop_tgt:ANDROID_PROGUARD_CONFIG_PATH\" title=\"ANDROID_PROGUARD_CONFIG_PATH\" id=\"index-0-prop_tgt:ANDROID_PROGUARD_CONFIG_PATH\"><code>ANDROID_PROGUARD_CONFIG_PATH</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_PROGUARD_CONFIG_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_PROGUARD_CONFIG_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_android_secure_props_path":"<h1 id=\"variable:CMAKE_ANDROID_SECURE_PROPS_PATH\">CMAKE_ANDROID_SECURE_PROPS_PATH</h1> <p id=\"cmake-android-secure-props-path\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_secure_props_path#prop_tgt:ANDROID_SECURE_PROPS_PATH\" title=\"ANDROID_SECURE_PROPS_PATH\" id=\"index-0-prop_tgt:ANDROID_SECURE_PROPS_PATH\"><code>ANDROID_SECURE_PROPS_PATH</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_SECURE_PROPS_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_SECURE_PROPS_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_android_skip_ant_step":"<h1 id=\"variable:CMAKE_ANDROID_SKIP_ANT_STEP\">CMAKE_ANDROID_SKIP_ANT_STEP</h1> <p id=\"cmake-android-skip-ant-step\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_skip_ant_step#prop_tgt:ANDROID_SKIP_ANT_STEP\" title=\"ANDROID_SKIP_ANT_STEP\" id=\"index-0-prop_tgt:ANDROID_SKIP_ANT_STEP\"><code>ANDROID_SKIP_ANT_STEP</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_SKIP_ANT_STEP.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_SKIP_ANT_STEP.html</a>\n  </p>\n</div>\n","variable/cmake_android_stl_type":"<h1 id=\"variable:CMAKE_ANDROID_STL_TYPE\">CMAKE_ANDROID_STL_TYPE</h1> <p id=\"cmake-android-stl-type\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/android_stl_type#prop_tgt:ANDROID_STL_TYPE\" title=\"ANDROID_STL_TYPE\" id=\"index-0-prop_tgt:ANDROID_STL_TYPE\"><code>ANDROID_STL_TYPE</code></a> target property. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_STL_TYPE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ANDROID_STL_TYPE.html</a>\n  </p>\n</div>\n","variable/cmake_build_with_install_rpath":"<h1 id=\"variable:CMAKE_BUILD_WITH_INSTALL_RPATH\">CMAKE_BUILD_WITH_INSTALL_RPATH</h1> <p id=\"cmake-build-with-install-rpath\">Use the install path for the <code>RPATH</code>.</p> <p>Normally CMake uses the build tree for the <code>RPATH</code> when building executables etc on systems that use <code>RPATH</code>. When the software is installed the executables etc are relinked by CMake to have the install <code>RPATH</code>. If this variable is set to true then the software is always built with the install path for the <code>RPATH</code> and does not need to be relinked when installed.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_BUILD_WITH_INSTALL_RPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_BUILD_WITH_INSTALL_RPATH.html</a>\n  </p>\n</div>\n","variable/cmake_archive_output_directory":"<h1 id=\"variable:CMAKE_ARCHIVE_OUTPUT_DIRECTORY\">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</h1> <p id=\"cmake-archive-output-directory\">Where to put all the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#archive-output-artifacts\"><span>ARCHIVE</span></a> target files when built.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/archive_output_directory#prop_tgt:ARCHIVE_OUTPUT_DIRECTORY\" title=\"ARCHIVE_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:ARCHIVE_OUTPUT_DIRECTORY\"><code>ARCHIVE_OUTPUT_DIRECTORY</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY.html</a>\n  </p>\n</div>\n","variable/cmake_archive_output_directory_config":"<h1 id=\"variable:CMAKE_ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\">CMAKE_ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</h1> <p id=\"cmake-archive-output-directory-config\">Where to put all the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#archive-output-artifacts\"><span>ARCHIVE</span></a> target files when built for a specific configuration.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"#\" title=\"ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>ARCHIVE_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY_CONFIG.html</a>\n  </p>\n</div>\n","variable/cmake_compile_pdb_output_directory":"<h1 id=\"variable:CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY\">CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY</h1> <p id=\"cmake-compile-pdb-output-directory\">Output directory for MS debug symbol <code>.pdb</code> files generated by the compiler while building source files.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/compile_pdb_output_directory#prop_tgt:COMPILE_PDB_OUTPUT_DIRECTORY\" title=\"COMPILE_PDB_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:COMPILE_PDB_OUTPUT_DIRECTORY\"><code>COMPILE_PDB_OUTPUT_DIRECTORY</code></a> property on all the targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY.html</a>\n  </p>\n</div>\n","variable/cmake_enable_exports":"<h1 id=\"variable:CMAKE_ENABLE_EXPORTS\">CMAKE_ENABLE_EXPORTS</h1> <p id=\"cmake-enable-exports\">Specify whether an executable exports symbols for loadable modules.</p> <p>Normally an executable does not export any symbols because it is the final program. It is possible for an executable to export symbols to be used by loadable modules. When this property is set to true CMake will allow other targets to <code>link</code> to the executable with the <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>TARGET_LINK_LIBRARIES()</code></a> command. On all platforms a target-level dependency on the executable is created for targets that link to it. For DLL platforms an import library will be created for the exported symbols and then used for linking. All Windows-based systems including Cygwin are DLL platforms. For non-DLL platforms that require all symbols to be resolved at link time, such as OS X, the module will <code>link</code> to the executable using a flag like <code>-bundle_loader</code>. For other non-DLL platforms the link rule is simply ignored since the dynamic loader will automatically bind symbols when the module is loaded.</p> <p>This variable is used to initialize the target property <a class=\"reference internal\" href=\"../prop_tgt/enable_exports#prop_tgt:ENABLE_EXPORTS\" title=\"ENABLE_EXPORTS\" id=\"index-0-prop_tgt:ENABLE_EXPORTS\"><code>ENABLE_EXPORTS</code></a> for executable targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_ENABLE_EXPORTS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_ENABLE_EXPORTS.html</a>\n  </p>\n</div>\n","variable/cmake_exe_linker_flags_config":"<h1 id=\"variable:CMAKE_EXE_LINKER_FLAGS_&lt;CONFIG&gt;\">CMAKE_EXE_LINKER_FLAGS_&lt;CONFIG&gt;</h1> <p id=\"cmake-exe-linker-flags-config\">Flags to be used when linking an executable.</p> <p>Same as <code>CMAKE_C_FLAGS_*</code> but used by the linker when creating executables.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXE_LINKER_FLAGS_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXE_LINKER_FLAGS_CONFIG.html</a>\n  </p>\n</div>\n","variable/cmake_exe_linker_flags":"<h1 id=\"variable:CMAKE_EXE_LINKER_FLAGS\">CMAKE_EXE_LINKER_FLAGS</h1> <p id=\"cmake-exe-linker-flags\">Linker flags to be used to create executables.</p> <p>These flags will be used by the linker when creating an executable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXE_LINKER_FLAGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXE_LINKER_FLAGS.html</a>\n  </p>\n</div>\n","variable/cmake_compile_pdb_output_directory_config":"<h1 id=\"variable:CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\">CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</h1> <p id=\"cmake-compile-pdb-output-directory-config\">Per-configuration output directory for MS debug symbol <code>.pdb</code> files generated by the compiler while building source files.</p> <p>This is a per-configuration version of <a class=\"reference internal\" href=\"cmake_compile_pdb_output_directory#variable:CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY\" title=\"CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY\" id=\"index-0-variable:CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY\"><code>CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY</code></a>. This variable is used to initialize the <a class=\"reference internal\" href=\"#\" title=\"COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>COMPILE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> property on all the targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG.html</a>\n  </p>\n</div>\n","variable/cmake_config_postfix":"<h1 id=\"variable:CMAKE_&lt;CONFIG&gt;_POSTFIX\">CMAKE_&lt;CONFIG&gt;_POSTFIX</h1> <p id=\"cmake-config-postfix\">Default filename postfix for libraries under configuration <code>&lt;CONFIG&gt;</code>.</p> <p>When a non-executable target is created its <a class=\"reference internal\" href=\"#\" title=\"&lt;CONFIG&gt;_POSTFIX\" id=\"index-0-prop_tgt:&lt;CONFIG&gt;_POSTFIX\"><code>&lt;CONFIG&gt;_POSTFIX</code></a> target property is initialized with the value of this variable if it is set.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CONFIG_POSTFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CONFIG_POSTFIX.html</a>\n  </p>\n</div>\n","variable/cmake_debug_postfix":"<h1 id=\"variable:CMAKE_DEBUG_POSTFIX\">CMAKE_DEBUG_POSTFIX</h1> <p id=\"cmake-debug-postfix\">See variable <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;CONFIG&gt;_POSTFIX\" id=\"index-0-variable:CMAKE_&lt;CONFIG&gt;_POSTFIX\"><code>CMAKE_&lt;CONFIG&gt;_POSTFIX</code></a>.</p> <p>This variable is a special case of the more-general <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;CONFIG&gt;_POSTFIX\" id=\"index-1-variable:CMAKE_&lt;CONFIG&gt;_POSTFIX\"><code>CMAKE_&lt;CONFIG&gt;_POSTFIX</code></a> variable for the <cite>DEBUG</cite> configuration.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_DEBUG_POSTFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_DEBUG_POSTFIX.html</a>\n  </p>\n</div>\n","variable/cmake_fortran_format":"<h1 id=\"variable:CMAKE_Fortran_FORMAT\">CMAKE_Fortran_FORMAT</h1> <p id=\"cmake-fortran-format\">Set to <code>FIXED</code> or <code>FREE</code> to indicate the Fortran source layout.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/fortran_format#prop_tgt:Fortran_FORMAT\" title=\"Fortran_FORMAT\" id=\"index-0-prop_tgt:Fortran_FORMAT\"><code>Fortran_FORMAT</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_Fortran_FORMAT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_Fortran_FORMAT.html</a>\n  </p>\n</div>\n","variable/cmake_fortran_module_directory":"<h1 id=\"variable:CMAKE_Fortran_MODULE_DIRECTORY\">CMAKE_Fortran_MODULE_DIRECTORY</h1> <p id=\"cmake-fortran-module-directory\">Fortran module output directory.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/fortran_module_directory#prop_tgt:Fortran_MODULE_DIRECTORY\" title=\"Fortran_MODULE_DIRECTORY\" id=\"index-0-prop_tgt:Fortran_MODULE_DIRECTORY\"><code>Fortran_MODULE_DIRECTORY</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_Fortran_MODULE_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_Fortran_MODULE_DIRECTORY.html</a>\n  </p>\n</div>\n","variable/cmake_gnutoms":"<h1 id=\"variable:CMAKE_GNUtoMS\">CMAKE_GNUtoMS</h1> <p id=\"cmake-gnutoms\">Convert GNU import libraries (<code>.dll.a</code>) to MS format (<code>.lib</code>).</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/gnutoms#prop_tgt:GNUtoMS\" title=\"GNUtoMS\" id=\"index-0-prop_tgt:GNUtoMS\"><code>GNUtoMS</code></a> property on targets when they are created. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_GNUtoMS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_GNUtoMS.html</a>\n  </p>\n</div>\n","variable/cmake_install_name_dir":"<h1 id=\"variable:CMAKE_INSTALL_NAME_DIR\">CMAKE_INSTALL_NAME_DIR</h1> <p id=\"cmake-install-name-dir\">OS X directory name for installed targets.</p> <p><code>CMAKE_INSTALL_NAME_DIR</code> is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/install_name_dir#prop_tgt:INSTALL_NAME_DIR\" title=\"INSTALL_NAME_DIR\" id=\"index-0-prop_tgt:INSTALL_NAME_DIR\"><code>INSTALL_NAME_DIR</code></a> property on all targets. See that target property for more information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_INSTALL_NAME_DIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_INSTALL_NAME_DIR.html</a>\n  </p>\n</div>\n","variable/cmake_install_rpath":"<h1 id=\"variable:CMAKE_INSTALL_RPATH\">CMAKE_INSTALL_RPATH</h1> <p id=\"cmake-install-rpath\">The rpath to use for installed targets.</p> <p>A semicolon-separated list specifying the rpath to use in installed targets (for platforms that support it). This is used to initialize the target property <a class=\"reference internal\" href=\"../prop_tgt/install_rpath#prop_tgt:INSTALL_RPATH\" title=\"INSTALL_RPATH\" id=\"index-0-prop_tgt:INSTALL_RPATH\"><code>INSTALL_RPATH</code></a> for all targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_INSTALL_RPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_INSTALL_RPATH.html</a>\n  </p>\n</div>\n","variable/cmake_install_rpath_use_link_path":"<h1 id=\"variable:CMAKE_INSTALL_RPATH_USE_LINK_PATH\">CMAKE_INSTALL_RPATH_USE_LINK_PATH</h1> <p id=\"cmake-install-rpath-use-link-path\">Add paths to linker search and installed rpath.</p> <p><code>CMAKE_INSTALL_RPATH_USE_LINK_PATH</code> is a boolean that if set to <code>true</code> will append directories in the linker search path and outside the project to the <a class=\"reference internal\" href=\"../prop_tgt/install_rpath#prop_tgt:INSTALL_RPATH\" title=\"INSTALL_RPATH\" id=\"index-0-prop_tgt:INSTALL_RPATH\"><code>INSTALL_RPATH</code></a>. This is used to initialize the target property <a class=\"reference internal\" href=\"../prop_tgt/install_rpath_use_link_path#prop_tgt:INSTALL_RPATH_USE_LINK_PATH\" title=\"INSTALL_RPATH_USE_LINK_PATH\" id=\"index-0-prop_tgt:INSTALL_RPATH_USE_LINK_PATH\"><code>INSTALL_RPATH_USE_LINK_PATH</code></a> for all targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_INSTALL_RPATH_USE_LINK_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_INSTALL_RPATH_USE_LINK_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_ios_install_combined":"<h1 id=\"variable:CMAKE_IOS_INSTALL_COMBINED\">CMAKE_IOS_INSTALL_COMBINED</h1> <p id=\"cmake-ios-install-combined\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/ios_install_combined#prop_tgt:IOS_INSTALL_COMBINED\" title=\"IOS_INSTALL_COMBINED\" id=\"index-0-prop_tgt:IOS_INSTALL_COMBINED\"><code>IOS_INSTALL_COMBINED</code></a> of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/ios_install_combined#prop_tgt:IOS_INSTALL_COMBINED\" title=\"IOS_INSTALL_COMBINED\" id=\"index-1-prop_tgt:IOS_INSTALL_COMBINED\"><code>IOS_INSTALL_COMBINED</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_IOS_INSTALL_COMBINED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_IOS_INSTALL_COMBINED.html</a>\n  </p>\n</div>\n","variable/cmake_lang_compiler_launcher":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_COMPILER_LAUNCHER\">CMAKE_&lt;LANG&gt;_COMPILER_LAUNCHER</h1> <p id=\"cmake-lang-compiler-launcher\">Default value for <a class=\"reference internal\" href=\"#\" title=\"&lt;LANG&gt;_COMPILER_LAUNCHER\" id=\"index-0-prop_tgt:&lt;LANG&gt;_COMPILER_LAUNCHER\"><code>&lt;LANG&gt;_COMPILER_LAUNCHER</code></a> target property. This variable is used to initialize the property on each target as it is created. This is done only when <code>&lt;LANG&gt;</code> is <code>C</code> or <code>CXX</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_LAUNCHER.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_LAUNCHER.html</a>\n  </p>\n</div>\n","variable/cmake_lang_visibility_preset":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_VISIBILITY_PRESET\">CMAKE_&lt;LANG&gt;_VISIBILITY_PRESET</h1> <p id=\"cmake-lang-visibility-preset\">Default value for the <a class=\"reference internal\" href=\"#\" title=\"&lt;LANG&gt;_VISIBILITY_PRESET\" id=\"index-0-prop_tgt:&lt;LANG&gt;_VISIBILITY_PRESET\"><code>&lt;LANG&gt;_VISIBILITY_PRESET</code></a> target property when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_VISIBILITY_PRESET.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_VISIBILITY_PRESET.html</a>\n  </p>\n</div>\n","variable/cmake_lang_include_what_you_use":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_INCLUDE_WHAT_YOU_USE\">CMAKE_&lt;LANG&gt;_INCLUDE_WHAT_YOU_USE</h1> <p id=\"cmake-lang-include-what-you-use\">Default value for <a class=\"reference internal\" href=\"#\" title=\"&lt;LANG&gt;_INCLUDE_WHAT_YOU_USE\" id=\"index-0-prop_tgt:&lt;LANG&gt;_INCLUDE_WHAT_YOU_USE\"><code>&lt;LANG&gt;_INCLUDE_WHAT_YOU_USE</code></a> target property. This variable is used to initialize the property on each target as it is created. This is done only when <code>&lt;LANG&gt;</code> is <code>C</code> or <code>CXX</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_INCLUDE_WHAT_YOU_USE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_INCLUDE_WHAT_YOU_USE.html</a>\n  </p>\n</div>\n","variable/cmake_library_path_flag":"<h1 id=\"variable:CMAKE_LIBRARY_PATH_FLAG\">CMAKE_LIBRARY_PATH_FLAG</h1> <p id=\"cmake-library-path-flag\">The flag to be used to add a library search path to a compiler.</p> <p>The flag will be used to specify a library directory to the compiler. On most compilers this is <code>-L</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LIBRARY_PATH_FLAG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LIBRARY_PATH_FLAG.html</a>\n  </p>\n</div>\n","variable/cmake_library_output_directory":"<h1 id=\"variable:CMAKE_LIBRARY_OUTPUT_DIRECTORY\">CMAKE_LIBRARY_OUTPUT_DIRECTORY</h1> <p id=\"cmake-library-output-directory\">Where to put all the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#library-output-artifacts\"><span>LIBRARY</span></a> target files when built.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/library_output_directory#prop_tgt:LIBRARY_OUTPUT_DIRECTORY\" title=\"LIBRARY_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:LIBRARY_OUTPUT_DIRECTORY\"><code>LIBRARY_OUTPUT_DIRECTORY</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY.html</a>\n  </p>\n</div>\n","variable/cmake_library_output_directory_config":"<h1 id=\"variable:CMAKE_LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\">CMAKE_LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</h1> <p id=\"cmake-library-output-directory-config\">Where to put all the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#library-output-artifacts\"><span>LIBRARY</span></a> target files when built for a specific configuration.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"#\" title=\"LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>LIBRARY_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY_CONFIG.html</a>\n  </p>\n</div>\n","variable/cmake_link_depends_no_shared":"<h1 id=\"variable:CMAKE_LINK_DEPENDS_NO_SHARED\">CMAKE_LINK_DEPENDS_NO_SHARED</h1> <p id=\"cmake-link-depends-no-shared\">Whether to skip link dependencies on shared library files.</p> <p>This variable initializes the <a class=\"reference internal\" href=\"../prop_tgt/link_depends_no_shared#prop_tgt:LINK_DEPENDS_NO_SHARED\" title=\"LINK_DEPENDS_NO_SHARED\" id=\"index-0-prop_tgt:LINK_DEPENDS_NO_SHARED\"><code>LINK_DEPENDS_NO_SHARED</code></a> property on targets when they are created. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_DEPENDS_NO_SHARED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_DEPENDS_NO_SHARED.html</a>\n  </p>\n</div>\n","variable/cmake_link_def_file_flag":"<h1 id=\"variable:CMAKE_LINK_DEF_FILE_FLAG\">CMAKE_LINK_DEF_FILE_FLAG</h1> <p id=\"cmake-link-def-file-flag\">Linker flag to be used to specify a <code>.def</code> file for dll creation.</p> <p>The flag will be used to add a <code>.def</code> file when creating a dll on Windows; this is only defined on Windows.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_DEF_FILE_FLAG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_DEF_FILE_FLAG.html</a>\n  </p>\n</div>\n","variable/cmake_link_library_file_flag":"<h1 id=\"variable:CMAKE_LINK_LIBRARY_FILE_FLAG\">CMAKE_LINK_LIBRARY_FILE_FLAG</h1> <p id=\"cmake-link-library-file-flag\">Flag to be used to link a library specified by a path to its file.</p> <p>The flag will be used before a library file path is given to the linker. This is needed only on very few platforms.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_LIBRARY_FILE_FLAG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_LIBRARY_FILE_FLAG.html</a>\n  </p>\n</div>\n","variable/cmake_link_library_flag":"<h1 id=\"variable:CMAKE_LINK_LIBRARY_FLAG\">CMAKE_LINK_LIBRARY_FLAG</h1> <p id=\"cmake-link-library-flag\">Flag to be used to link a library into an executable.</p> <p>The flag will be used to specify a library to link to an executable. On most compilers this is <code>-l</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_LIBRARY_FLAG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_LIBRARY_FLAG.html</a>\n  </p>\n</div>\n","variable/cmake_macosx_bundle":"<h1 id=\"variable:CMAKE_MACOSX_BUNDLE\">CMAKE_MACOSX_BUNDLE</h1> <p id=\"cmake-macosx-bundle\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/macosx_bundle#prop_tgt:MACOSX_BUNDLE\" title=\"MACOSX_BUNDLE\" id=\"index-0-prop_tgt:MACOSX_BUNDLE\"><code>MACOSX_BUNDLE</code></a> of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/macosx_bundle#prop_tgt:MACOSX_BUNDLE\" title=\"MACOSX_BUNDLE\" id=\"index-1-prop_tgt:MACOSX_BUNDLE\"><code>MACOSX_BUNDLE</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_MACOSX_BUNDLE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_MACOSX_BUNDLE.html</a>\n  </p>\n</div>\n","variable/cmake_macosx_rpath":"<h1 id=\"variable:CMAKE_MACOSX_RPATH\">CMAKE_MACOSX_RPATH</h1> <p id=\"cmake-macosx-rpath\">Whether to use rpaths on OS X and iOS.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/macosx_rpath#prop_tgt:MACOSX_RPATH\" title=\"MACOSX_RPATH\" id=\"index-0-prop_tgt:MACOSX_RPATH\"><code>MACOSX_RPATH</code></a> property on all targets.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_MACOSX_RPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_MACOSX_RPATH.html</a>\n  </p>\n</div>\n","variable/cmake_map_imported_config_config":"<h1 id=\"variable:CMAKE_MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;\">CMAKE_MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;</h1> <p id=\"cmake-map-imported-config-config\">Default value for <a class=\"reference internal\" href=\"#\" title=\"MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;\"><code>MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;</code></a> of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"#\" title=\"MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;\" id=\"index-1-prop_tgt:MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;\"><code>MAP_IMPORTED_CONFIG_&lt;CONFIG&gt;</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_MAP_IMPORTED_CONFIG_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_MAP_IMPORTED_CONFIG_CONFIG.html</a>\n  </p>\n</div>\n","variable/cmake_module_linker_flags_config":"<h1 id=\"variable:CMAKE_MODULE_LINKER_FLAGS_&lt;CONFIG&gt;\">CMAKE_MODULE_LINKER_FLAGS_&lt;CONFIG&gt;</h1> <p id=\"cmake-module-linker-flags-config\">Flags to be used when linking a module.</p> <p>Same as <code>CMAKE_C_FLAGS_*</code> but used by the linker when creating modules.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_MODULE_LINKER_FLAGS_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_MODULE_LINKER_FLAGS_CONFIG.html</a>\n  </p>\n</div>\n","variable/cmake_module_linker_flags":"<h1 id=\"variable:CMAKE_MODULE_LINKER_FLAGS\">CMAKE_MODULE_LINKER_FLAGS</h1> <p id=\"cmake-module-linker-flags\">Linker flags to be used to create modules.</p> <p>These flags will be used by the linker when creating a module.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_MODULE_LINKER_FLAGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_MODULE_LINKER_FLAGS.html</a>\n  </p>\n</div>\n","variable/cmake_no_builtin_chrpath":"<h1 id=\"variable:CMAKE_NO_BUILTIN_CHRPATH\">CMAKE_NO_BUILTIN_CHRPATH</h1> <p id=\"cmake-no-builtin-chrpath\">Do not use the builtin ELF editor to fix RPATHs on installation.</p> <p>When an ELF binary needs to have a different RPATH after installation than it does in the build tree, CMake uses a builtin editor to change the RPATH in the installed copy. If this variable is set to true then CMake will relink the binary before installation instead of using its builtin editor.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_NO_BUILTIN_CHRPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_NO_BUILTIN_CHRPATH.html</a>\n  </p>\n</div>\n","variable/cmake_osx_architectures":"<h1 id=\"variable:CMAKE_OSX_ARCHITECTURES\">CMAKE_OSX_ARCHITECTURES</h1> <p id=\"cmake-osx-architectures\">Target specific architectures for OS X and iOS.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/osx_architectures#prop_tgt:OSX_ARCHITECTURES\" title=\"OSX_ARCHITECTURES\" id=\"index-0-prop_tgt:OSX_ARCHITECTURES\"><code>OSX_ARCHITECTURES</code></a> property on each target as it is creaed. See that target property for additional information.</p> <p>The value of this variable should be set prior to the first <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> or <a class=\"reference internal\" href=\"../command/enable_language#command:enable_language\" title=\"enable_language\" id=\"index-0-command:enable_language\"><code>enable_language()</code></a> command invocation because it may influence configuration of the toolchain and flags. It is intended to be set locally by the user creating a build tree.</p> <p>This variable is ignored on platforms other than OS X.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_OSX_ARCHITECTURES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_OSX_ARCHITECTURES.html</a>\n  </p>\n</div>\n","variable/cmake_no_system_from_imported":"<h1 id=\"variable:CMAKE_NO_SYSTEM_FROM_IMPORTED\">CMAKE_NO_SYSTEM_FROM_IMPORTED</h1> <p id=\"cmake-no-system-from-imported\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/no_system_from_imported#prop_tgt:NO_SYSTEM_FROM_IMPORTED\" title=\"NO_SYSTEM_FROM_IMPORTED\" id=\"index-0-prop_tgt:NO_SYSTEM_FROM_IMPORTED\"><code>NO_SYSTEM_FROM_IMPORTED</code></a> of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/no_system_from_imported#prop_tgt:NO_SYSTEM_FROM_IMPORTED\" title=\"NO_SYSTEM_FROM_IMPORTED\" id=\"index-1-prop_tgt:NO_SYSTEM_FROM_IMPORTED\"><code>NO_SYSTEM_FROM_IMPORTED</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_NO_SYSTEM_FROM_IMPORTED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_NO_SYSTEM_FROM_IMPORTED.html</a>\n  </p>\n</div>\n","variable/cmake_osx_deployment_target":"<h1 id=\"variable:CMAKE_OSX_DEPLOYMENT_TARGET\">CMAKE_OSX_DEPLOYMENT_TARGET</h1> <p id=\"cmake-osx-deployment-target\">Specify the minimum version of OS X on which the target binaries are to be deployed. CMake uses this value for the <code>-mmacosx-version-min</code> flag and to help choose the default SDK (see <a class=\"reference internal\" href=\"cmake_osx_sysroot#variable:CMAKE_OSX_SYSROOT\" title=\"CMAKE_OSX_SYSROOT\" id=\"index-0-variable:CMAKE_OSX_SYSROOT\"><code>CMAKE_OSX_SYSROOT</code></a>).</p> <p>If not set explicitly the value is initialized by the <code>MACOSX_DEPLOYMENT_TARGET</code> environment variable, if set, and otherwise computed based on the host platform.</p> <p>The value of this variable should be set prior to the first <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> or <a class=\"reference internal\" href=\"../command/enable_language#command:enable_language\" title=\"enable_language\" id=\"index-0-command:enable_language\"><code>enable_language()</code></a> command invocation because it may influence configuration of the toolchain and flags. It is intended to be set locally by the user creating a build tree.</p> <p>This variable is ignored on platforms other than OS X.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_OSX_DEPLOYMENT_TARGET.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_OSX_DEPLOYMENT_TARGET.html</a>\n  </p>\n</div>\n","variable/cmake_osx_sysroot":"<h1 id=\"variable:CMAKE_OSX_SYSROOT\">CMAKE_OSX_SYSROOT</h1> <p id=\"cmake-osx-sysroot\">Specify the location or name of the OS X platform SDK to be used. CMake uses this value to compute the value of the <code>-isysroot</code> flag or equivalent and to help the <code>find_*</code> commands locate files in the SDK.</p> <p>If not set explicitly the value is initialized by the <code>SDKROOT</code> environment variable, if set, and otherwise computed based on the <a class=\"reference internal\" href=\"cmake_osx_deployment_target#variable:CMAKE_OSX_DEPLOYMENT_TARGET\" title=\"CMAKE_OSX_DEPLOYMENT_TARGET\" id=\"index-0-variable:CMAKE_OSX_DEPLOYMENT_TARGET\"><code>CMAKE_OSX_DEPLOYMENT_TARGET</code></a> or the host platform.</p> <p>The value of this variable should be set prior to the first <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> or <a class=\"reference internal\" href=\"../command/enable_language#command:enable_language\" title=\"enable_language\" id=\"index-0-command:enable_language\"><code>enable_language()</code></a> command invocation because it may influence configuration of the toolchain and flags. It is intended to be set locally by the user creating a build tree.</p> <p>This variable is ignored on platforms other than OS X.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_OSX_SYSROOT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_OSX_SYSROOT.html</a>\n  </p>\n</div>\n","variable/cmake_pdb_output_directory":"<h1 id=\"variable:CMAKE_PDB_OUTPUT_DIRECTORY\">CMAKE_PDB_OUTPUT_DIRECTORY</h1> <p id=\"cmake-pdb-output-directory\">Output directory for MS debug symbol <code>.pdb</code> files generated by the linker for executable and shared library targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/pdb_output_directory#prop_tgt:PDB_OUTPUT_DIRECTORY\" title=\"PDB_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:PDB_OUTPUT_DIRECTORY\"><code>PDB_OUTPUT_DIRECTORY</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_PDB_OUTPUT_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_PDB_OUTPUT_DIRECTORY.html</a>\n  </p>\n</div>\n","variable/cmake_pdb_output_directory_config":"<h1 id=\"variable:CMAKE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\">CMAKE_PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</h1> <p id=\"cmake-pdb-output-directory-config\">Per-configuration output directory for MS debug symbol <code>.pdb</code> files generated by the linker for executable and shared library targets.</p> <p>This is a per-configuration version of <a class=\"reference internal\" href=\"cmake_pdb_output_directory#variable:CMAKE_PDB_OUTPUT_DIRECTORY\" title=\"CMAKE_PDB_OUTPUT_DIRECTORY\" id=\"index-0-variable:CMAKE_PDB_OUTPUT_DIRECTORY\"><code>CMAKE_PDB_OUTPUT_DIRECTORY</code></a>. This variable is used to initialize the <a class=\"reference internal\" href=\"#\" title=\"PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>PDB_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_PDB_OUTPUT_DIRECTORY_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_PDB_OUTPUT_DIRECTORY_CONFIG.html</a>\n  </p>\n</div>\n","variable/cmake_position_independent_code":"<h1 id=\"variable:CMAKE_POSITION_INDEPENDENT_CODE\">CMAKE_POSITION_INDEPENDENT_CODE</h1> <p id=\"cmake-position-independent-code\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-0-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/position_independent_code#prop_tgt:POSITION_INDEPENDENT_CODE\" title=\"POSITION_INDEPENDENT_CODE\" id=\"index-1-prop_tgt:POSITION_INDEPENDENT_CODE\"><code>POSITION_INDEPENDENT_CODE</code></a> property on all the targets. See that target property for additional information. If set, it’s value is also used by the <a class=\"reference internal\" href=\"../command/try_compile#command:try_compile\" title=\"try_compile\" id=\"index-0-command:try_compile\"><code>try_compile()</code></a> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_POSITION_INDEPENDENT_CODE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_POSITION_INDEPENDENT_CODE.html</a>\n  </p>\n</div>\n","variable/cmake_runtime_output_directory":"<h1 id=\"variable:CMAKE_RUNTIME_OUTPUT_DIRECTORY\">CMAKE_RUNTIME_OUTPUT_DIRECTORY</h1> <p id=\"cmake-runtime-output-directory\">Where to put all the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#runtime-output-artifacts\"><span>RUNTIME</span></a> target files when built.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/runtime_output_directory#prop_tgt:RUNTIME_OUTPUT_DIRECTORY\" title=\"RUNTIME_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_DIRECTORY\"><code>RUNTIME_OUTPUT_DIRECTORY</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY.html</a>\n  </p>\n</div>\n","variable/cmake_runtime_output_directory_config":"<h1 id=\"variable:CMAKE_RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\">CMAKE_RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</h1> <p id=\"cmake-runtime-output-directory-config\">Where to put all the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#runtime-output-artifacts\"><span>RUNTIME</span></a> target files when built for a specific configuration.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"#\" title=\"RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;\"><code>RUNTIME_OUTPUT_DIRECTORY_&lt;CONFIG&gt;</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY_CONFIG.html</a>\n  </p>\n</div>\n","variable/cmake_shared_linker_flags":"<h1 id=\"variable:CMAKE_SHARED_LINKER_FLAGS\">CMAKE_SHARED_LINKER_FLAGS</h1> <p id=\"cmake-shared-linker-flags\">Linker flags to be used to create shared libraries.</p> <p>These flags will be used by the linker when creating a shared library.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SHARED_LINKER_FLAGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SHARED_LINKER_FLAGS.html</a>\n  </p>\n</div>\n","variable/cmake_shared_linker_flags_config":"<h1 id=\"variable:CMAKE_SHARED_LINKER_FLAGS_&lt;CONFIG&gt;\">CMAKE_SHARED_LINKER_FLAGS_&lt;CONFIG&gt;</h1> <p id=\"cmake-shared-linker-flags-config\">Flags to be used when linking a shared library.</p> <p>Same as <code>CMAKE_C_FLAGS_*</code> but used by the linker when creating shared libraries.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SHARED_LINKER_FLAGS_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SHARED_LINKER_FLAGS_CONFIG.html</a>\n  </p>\n</div>\n","variable/cmake_skip_install_rpath":"<h1 id=\"variable:CMAKE_SKIP_INSTALL_RPATH\">CMAKE_SKIP_INSTALL_RPATH</h1> <p id=\"cmake-skip-install-rpath\">Do not include RPATHs in the install tree.</p> <p>Normally CMake uses the build tree for the RPATH when building executables etc on systems that use RPATH. When the software is installed the executables etc are relinked by CMake to have the install RPATH. If this variable is set to true then the software is always installed without RPATH, even if RPATH is enabled when building. This can be useful for example to allow running tests from the build directory with RPATH enabled before the installation step. To omit RPATH in both the build and install steps, use <a class=\"reference internal\" href=\"cmake_skip_rpath#variable:CMAKE_SKIP_RPATH\" title=\"CMAKE_SKIP_RPATH\" id=\"index-0-variable:CMAKE_SKIP_RPATH\"><code>CMAKE_SKIP_RPATH</code></a> instead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SKIP_INSTALL_RPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SKIP_INSTALL_RPATH.html</a>\n  </p>\n</div>\n","variable/cmake_static_linker_flags_config":"<h1 id=\"variable:CMAKE_STATIC_LINKER_FLAGS_&lt;CONFIG&gt;\">CMAKE_STATIC_LINKER_FLAGS_&lt;CONFIG&gt;</h1> <p id=\"cmake-static-linker-flags-config\">Flags to be used when linking a static library.</p> <p>Same as <code>CMAKE_C_FLAGS_*</code> but used by the linker when creating static libraries.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG.html</a>\n  </p>\n</div>\n","variable/cmake_static_linker_flags":"<h1 id=\"variable:CMAKE_STATIC_LINKER_FLAGS\">CMAKE_STATIC_LINKER_FLAGS</h1> <p id=\"cmake-static-linker-flags\">Linker flags to be used to create static libraries.</p> <p>These flags will be used by the linker when creating a static library.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_STATIC_LINKER_FLAGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_STATIC_LINKER_FLAGS.html</a>\n  </p>\n</div>\n","variable/cmake_visibility_inlines_hidden":"<h1 id=\"variable:CMAKE_VISIBILITY_INLINES_HIDDEN\">CMAKE_VISIBILITY_INLINES_HIDDEN</h1> <p id=\"cmake-visibility-inlines-hidden\">Default value for the <a class=\"reference internal\" href=\"../prop_tgt/visibility_inlines_hidden#prop_tgt:VISIBILITY_INLINES_HIDDEN\" title=\"VISIBILITY_INLINES_HIDDEN\" id=\"index-0-prop_tgt:VISIBILITY_INLINES_HIDDEN\"><code>VISIBILITY_INLINES_HIDDEN</code></a> target property when a target is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_VISIBILITY_INLINES_HIDDEN.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_VISIBILITY_INLINES_HIDDEN.html</a>\n  </p>\n</div>\n","variable/cmake_use_relative_paths":"<h1 id=\"variable:CMAKE_USE_RELATIVE_PATHS\">CMAKE_USE_RELATIVE_PATHS</h1> <p id=\"cmake-use-relative-paths\">This variable has no effect. The partially implemented effect it had in previous releases was removed in CMake 3.4.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_USE_RELATIVE_PATHS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_USE_RELATIVE_PATHS.html</a>\n  </p>\n</div>\n","variable/cmake_vs_include_install_to_default_build":"<h1 id=\"variable:CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD\">CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD</h1> <p id=\"cmake-vs-include-install-to-default-build\">Include <code>INSTALL</code> target to default build.</p> <p>In Visual Studio solution, by default the <code>INSTALL</code> target will not be part of the default build. Setting this variable will enable the <code>INSTALL</code> target to be part of the default build.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD.html</a>\n  </p>\n</div>\n","variable/cmake_windows_export_all_symbols":"<h1 id=\"variable:CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS\">CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS</h1> <p id=\"cmake-windows-export-all-symbols\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/windows_export_all_symbols#prop_tgt:WINDOWS_EXPORT_ALL_SYMBOLS\" title=\"WINDOWS_EXPORT_ALL_SYMBOLS\" id=\"index-0-prop_tgt:WINDOWS_EXPORT_ALL_SYMBOLS\"><code>WINDOWS_EXPORT_ALL_SYMBOLS</code></a> target property. This variable is used to initialize the property on each target as it is created.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS.html</a>\n  </p>\n</div>\n","variable/cmake_win32_executable":"<h1 id=\"variable:CMAKE_WIN32_EXECUTABLE\">CMAKE_WIN32_EXECUTABLE</h1> <p id=\"cmake-win32-executable\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/win32_executable#prop_tgt:WIN32_EXECUTABLE\" title=\"WIN32_EXECUTABLE\" id=\"index-0-prop_tgt:WIN32_EXECUTABLE\"><code>WIN32_EXECUTABLE</code></a> of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/win32_executable#prop_tgt:WIN32_EXECUTABLE\" title=\"WIN32_EXECUTABLE\" id=\"index-1-prop_tgt:WIN32_EXECUTABLE\"><code>WIN32_EXECUTABLE</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_WIN32_EXECUTABLE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_WIN32_EXECUTABLE.html</a>\n  </p>\n</div>\n","variable/cmake_xcode_attribute_an-attribute":"<h1 id=\"variable:CMAKE_XCODE_ATTRIBUTE_&lt;an-attribute&gt;\">CMAKE_XCODE_ATTRIBUTE_&lt;an-attribute&gt;</h1> <p id=\"cmake-xcode-attribute-an-attribute\">Set Xcode target attributes directly.</p> <p>Tell the <a class=\"reference internal\" href=\"https://cmake.org/cmake/help/v3.5/generator/Xcode.html#generator:Xcode\" title=\"Xcode\" id=\"index-0-generator:Xcode\"><code>Xcode</code></a> generator to set ‘&lt;an-attribute&gt;’ to a given value in the generated Xcode project. Ignored on other generators.</p> <p>See the <a class=\"reference internal\" href=\"#\" title=\"XCODE_ATTRIBUTE_&lt;an-attribute&gt;\" id=\"index-0-prop_tgt:XCODE_ATTRIBUTE_&lt;an-attribute&gt;\"><code>XCODE_ATTRIBUTE_&lt;an-attribute&gt;</code></a> target property to set attributes on a specific target.</p> <p>Contents of <code>CMAKE_XCODE_ATTRIBUTE_&lt;an-attribute&gt;</code> may use “generator expressions” with the syntax <code>$&lt;...&gt;</code>. See the <a class=\"reference internal\" href=\"../manual/cmake-generator-expressions.7#manual:cmake-generator-expressions(7)\" title=\"cmake-generator-expressions(7)\" id=\"index-0-manual:cmake-generator-expressions(7)\"><code>cmake-generator-expressions(7)</code></a> manual for available expressions. See the <a class=\"reference internal\" href=\"../manual/cmake-buildsystem.7#manual:cmake-buildsystem(7)\" title=\"cmake-buildsystem(7)\" id=\"index-0-manual:cmake-buildsystem(7)\"><code>cmake-buildsystem(7)</code></a> manual for more on defining buildsystem properties.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_XCODE_ATTRIBUTE_an-attribute.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_XCODE_ATTRIBUTE_an-attribute.html</a>\n  </p>\n</div>\n","variable/cmake_c_extensions":"<h1 id=\"variable:CMAKE_C_EXTENSIONS\">CMAKE_C_EXTENSIONS</h1> <p id=\"cmake-c-extensions\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/c_extensions#prop_tgt:C_EXTENSIONS\" title=\"C_EXTENSIONS\" id=\"index-0-prop_tgt:C_EXTENSIONS\"><code>C_EXTENSIONS</code></a> property of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/c_extensions#prop_tgt:C_EXTENSIONS\" title=\"C_EXTENSIONS\" id=\"index-1-prop_tgt:C_EXTENSIONS\"><code>C_EXTENSIONS</code></a> property on all targets. See that target property for additional information.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_C_EXTENSIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_C_EXTENSIONS.html</a>\n  </p>\n</div>\n","variable/cmake_c_standard":"<h1 id=\"variable:CMAKE_C_STANDARD\">CMAKE_C_STANDARD</h1> <p id=\"cmake-c-standard\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/c_standard#prop_tgt:C_STANDARD\" title=\"C_STANDARD\" id=\"index-0-prop_tgt:C_STANDARD\"><code>C_STANDARD</code></a> property of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/c_standard#prop_tgt:C_STANDARD\" title=\"C_STANDARD\" id=\"index-1-prop_tgt:C_STANDARD\"><code>C_STANDARD</code></a> property on all targets. See that target property for additional information.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_C_STANDARD.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_C_STANDARD.html</a>\n  </p>\n</div>\n","variable/cmake_c_standard_required":"<h1 id=\"variable:CMAKE_C_STANDARD_REQUIRED\">CMAKE_C_STANDARD_REQUIRED</h1> <p id=\"cmake-c-standard-required\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/c_standard_required#prop_tgt:C_STANDARD_REQUIRED\" title=\"C_STANDARD_REQUIRED\" id=\"index-0-prop_tgt:C_STANDARD_REQUIRED\"><code>C_STANDARD_REQUIRED</code></a> property of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/c_standard_required#prop_tgt:C_STANDARD_REQUIRED\" title=\"C_STANDARD_REQUIRED\" id=\"index-1-prop_tgt:C_STANDARD_REQUIRED\"><code>C_STANDARD_REQUIRED</code></a> property on all targets. See that target property for additional information.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_C_STANDARD_REQUIRED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_C_STANDARD_REQUIRED.html</a>\n  </p>\n</div>\n","variable/cmake_cxx_extensions":"<h1 id=\"variable:CMAKE_CXX_EXTENSIONS\">CMAKE_CXX_EXTENSIONS</h1> <p id=\"cmake-cxx-extensions\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/cxx_extensions#prop_tgt:CXX_EXTENSIONS\" title=\"CXX_EXTENSIONS\" id=\"index-0-prop_tgt:CXX_EXTENSIONS\"><code>CXX_EXTENSIONS</code></a> property of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/cxx_extensions#prop_tgt:CXX_EXTENSIONS\" title=\"CXX_EXTENSIONS\" id=\"index-1-prop_tgt:CXX_EXTENSIONS\"><code>CXX_EXTENSIONS</code></a> property on all targets. See that target property for additional information.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CXX_EXTENSIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CXX_EXTENSIONS.html</a>\n  </p>\n</div>\n","variable/cmake_link_interface_libraries":"<h1 id=\"variable:CMAKE_LINK_INTERFACE_LIBRARIES\">CMAKE_LINK_INTERFACE_LIBRARIES</h1> <p id=\"cmake-link-interface-libraries\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/link_interface_libraries#prop_tgt:LINK_INTERFACE_LIBRARIES\" title=\"LINK_INTERFACE_LIBRARIES\" id=\"index-0-prop_tgt:LINK_INTERFACE_LIBRARIES\"><code>LINK_INTERFACE_LIBRARIES</code></a> of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/link_interface_libraries#prop_tgt:LINK_INTERFACE_LIBRARIES\" title=\"LINK_INTERFACE_LIBRARIES\" id=\"index-1-prop_tgt:LINK_INTERFACE_LIBRARIES\"><code>LINK_INTERFACE_LIBRARIES</code></a> property on all the targets. See that target property for additional information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_INTERFACE_LIBRARIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LINK_INTERFACE_LIBRARIES.html</a>\n  </p>\n</div>\n","variable/cmake_skip_build_rpath":"<h1 id=\"variable:CMAKE_SKIP_BUILD_RPATH\">CMAKE_SKIP_BUILD_RPATH</h1> <p id=\"cmake-skip-build-rpath\">Do not include RPATHs in the build tree.</p> <p>Normally CMake uses the build tree for the RPATH when building executables etc on systems that use RPATH. When the software is installed the executables etc are relinked by CMake to have the install RPATH. If this variable is set to true then the software is always built with no RPATH.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_SKIP_BUILD_RPATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_SKIP_BUILD_RPATH.html</a>\n  </p>\n</div>\n","variable/cmake_cxx_standard_required":"<h1 id=\"variable:CMAKE_CXX_STANDARD_REQUIRED\">CMAKE_CXX_STANDARD_REQUIRED</h1> <p id=\"cmake-cxx-standard-required\">Default value for <a class=\"reference internal\" href=\"../prop_tgt/cxx_standard_required#prop_tgt:CXX_STANDARD_REQUIRED\" title=\"CXX_STANDARD_REQUIRED\" id=\"index-0-prop_tgt:CXX_STANDARD_REQUIRED\"><code>CXX_STANDARD_REQUIRED</code></a> property of targets.</p> <p>This variable is used to initialize the <a class=\"reference internal\" href=\"../prop_tgt/cxx_standard_required#prop_tgt:CXX_STANDARD_REQUIRED\" title=\"CXX_STANDARD_REQUIRED\" id=\"index-1-prop_tgt:CXX_STANDARD_REQUIRED\"><code>CXX_STANDARD_REQUIRED</code></a> property on all targets. See that target property for additional information.</p> <p>See the <a class=\"reference internal\" href=\"../manual/cmake-compile-features.7#manual:cmake-compile-features(7)\" title=\"cmake-compile-features(7)\" id=\"index-0-manual:cmake-compile-features(7)\"><code>cmake-compile-features(7)</code></a> manual for information on compile features and a list of supported compilers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_CXX_STANDARD_REQUIRED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_CXX_STANDARD_REQUIRED.html</a>\n  </p>\n</div>\n","variable/cmake_fortran_moddir_default":"<h1 id=\"variable:CMAKE_Fortran_MODDIR_DEFAULT\">CMAKE_Fortran_MODDIR_DEFAULT</h1> <p id=\"cmake-fortran-moddir-default\">Fortran default module output directory.</p> <p>Most Fortran compilers write <code>.mod</code> files to the current working directory. For those that do not, this is set to <code>.</code> and used when the <a class=\"reference internal\" href=\"../prop_tgt/fortran_module_directory#prop_tgt:Fortran_MODULE_DIRECTORY\" title=\"Fortran_MODULE_DIRECTORY\" id=\"index-0-prop_tgt:Fortran_MODULE_DIRECTORY\"><code>Fortran_MODULE_DIRECTORY</code></a> target property is not set.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_Fortran_MODDIR_DEFAULT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_Fortran_MODDIR_DEFAULT.html</a>\n  </p>\n</div>\n","variable/cmake_lang_archive_create":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_ARCHIVE_CREATE\">CMAKE_&lt;LANG&gt;_ARCHIVE_CREATE</h1> <p id=\"cmake-lang-archive-create\">Rule variable to create a new static archive.</p> <p>This is a rule variable that tells CMake how to create a static archive. It is used in place of <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_CREATE_STATIC_LIBRARY\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_CREATE_STATIC_LIBRARY\"><code>CMAKE_&lt;LANG&gt;_CREATE_STATIC_LIBRARY</code></a> on some platforms in order to support large object counts. See also <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_ARCHIVE_APPEND\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_ARCHIVE_APPEND\"><code>CMAKE_&lt;LANG&gt;_ARCHIVE_APPEND</code></a> and <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_ARCHIVE_FINISH\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_ARCHIVE_FINISH\"><code>CMAKE_&lt;LANG&gt;_ARCHIVE_FINISH</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_ARCHIVE_CREATE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_ARCHIVE_CREATE.html</a>\n  </p>\n</div>\n","variable/cmake_fortran_modout_flag":"<h1 id=\"variable:CMAKE_Fortran_MODOUT_FLAG\">CMAKE_Fortran_MODOUT_FLAG</h1> <p id=\"cmake-fortran-modout-flag\">Fortran flag to enable module output.</p> <p>Most Fortran compilers write <code>.mod</code> files out by default. For others, this stores the flag needed to enable module output.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_Fortran_MODOUT_FLAG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_Fortran_MODOUT_FLAG.html</a>\n  </p>\n</div>\n","variable/cmake_fortran_moddir_flag":"<h1 id=\"variable:CMAKE_Fortran_MODDIR_FLAG\">CMAKE_Fortran_MODDIR_FLAG</h1> <p id=\"cmake-fortran-moddir-flag\">Fortran flag for module output directory.</p> <p>This stores the flag needed to pass the value of the <a class=\"reference internal\" href=\"../prop_tgt/fortran_module_directory#prop_tgt:Fortran_MODULE_DIRECTORY\" title=\"Fortran_MODULE_DIRECTORY\" id=\"index-0-prop_tgt:Fortran_MODULE_DIRECTORY\"><code>Fortran_MODULE_DIRECTORY</code></a> target property to the compiler.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_Fortran_MODDIR_FLAG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_Fortran_MODDIR_FLAG.html</a>\n  </p>\n</div>\n","variable/cmake_lang_archive_append":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_ARCHIVE_APPEND\">CMAKE_&lt;LANG&gt;_ARCHIVE_APPEND</h1> <p id=\"cmake-lang-archive-append\">Rule variable to append to a static archive.</p> <p>This is a rule variable that tells CMake how to append to a static archive. It is used in place of <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_CREATE_STATIC_LIBRARY\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_CREATE_STATIC_LIBRARY\"><code>CMAKE_&lt;LANG&gt;_CREATE_STATIC_LIBRARY</code></a> on some platforms in order to support large object counts. See also <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_ARCHIVE_CREATE\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_ARCHIVE_CREATE\"><code>CMAKE_&lt;LANG&gt;_ARCHIVE_CREATE</code></a> and <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_ARCHIVE_FINISH\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_ARCHIVE_FINISH\"><code>CMAKE_&lt;LANG&gt;_ARCHIVE_FINISH</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_ARCHIVE_APPEND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_ARCHIVE_APPEND.html</a>\n  </p>\n</div>\n","variable/cmake_lang_archive_finish":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_ARCHIVE_FINISH\">CMAKE_&lt;LANG&gt;_ARCHIVE_FINISH</h1> <p id=\"cmake-lang-archive-finish\">Rule variable to finish an existing static archive.</p> <p>This is a rule variable that tells CMake how to finish a static archive. It is used in place of <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_CREATE_STATIC_LIBRARY\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_CREATE_STATIC_LIBRARY\"><code>CMAKE_&lt;LANG&gt;_CREATE_STATIC_LIBRARY</code></a> on some platforms in order to support large object counts. See also <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_ARCHIVE_CREATE\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_ARCHIVE_CREATE\"><code>CMAKE_&lt;LANG&gt;_ARCHIVE_CREATE</code></a> and <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_ARCHIVE_APPEND\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_ARCHIVE_APPEND\"><code>CMAKE_&lt;LANG&gt;_ARCHIVE_APPEND</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_ARCHIVE_FINISH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_ARCHIVE_FINISH.html</a>\n  </p>\n</div>\n","variable/cmake_internal_platform_abi":"<h1 id=\"variable:CMAKE_INTERNAL_PLATFORM_ABI\">CMAKE_INTERNAL_PLATFORM_ABI</h1> <p id=\"cmake-internal-platform-abi\">An internal variable subject to change.</p> <p>This is used in determining the compiler ABI and is subject to change.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_INTERNAL_PLATFORM_ABI.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_INTERNAL_PLATFORM_ABI.html</a>\n  </p>\n</div>\n","variable/cmake_lang_compile_object":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_COMPILE_OBJECT\">CMAKE_&lt;LANG&gt;_COMPILE_OBJECT</h1> <p id=\"cmake-lang-compile-object\">Rule variable to compile a single object file.</p> <p>This is a rule variable that tells CMake how to compile a single object file for the language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILE_OBJECT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILE_OBJECT.html</a>\n  </p>\n</div>\n","variable/cmake_lang_compiler_id":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\">CMAKE_&lt;LANG&gt;_COMPILER_ID</h1> <p id=\"cmake-lang-compiler-id\">Compiler identification string.</p> <p>A short string unique to the compiler vendor. Possible values include:</p> <pre data-language=\"python\">Absoft = Absoft Fortran (absoft.com)\nADSP = Analog VisualDSP++ (analog.com)\nAppleClang = Apple Clang (apple.com)\nARMCC = ARM Compiler (arm.com)\nCCur = Concurrent Fortran (ccur.com)\nClang = LLVM Clang (clang.llvm.org)\nCray = Cray Compiler (cray.com)\nEmbarcadero, Borland = Embarcadero (embarcadero.com)\nG95 = G95 Fortran (g95.org)\nGNU = GNU Compiler Collection (gcc.gnu.org)\nHP = Hewlett-Packard Compiler (hp.com)\nIntel = Intel Compiler (intel.com)\nMIPSpro = SGI MIPSpro (sgi.com)\nMSVC = Microsoft Visual Studio (microsoft.com)\nOpenWatcom = Open Watcom (openwatcom.org)\nPGI = The Portland Group (pgroup.com)\nPathScale = PathScale (pathscale.com)\nSDCC = Small Device C Compiler (sdcc.sourceforge.net)\nSunPro = Oracle Solaris Studio (oracle.com)\nTI = Texas Instruments (ti.com)\nTinyCC = Tiny C Compiler (tinycc.org)\nXL, VisualAge, zOS = IBM XL (ibm.com)\n</pre> <p>This variable is not guaranteed to be defined for all compilers or languages.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_ID.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_ID.html</a>\n  </p>\n</div>\n","variable/cmake_lang_compiler_loaded":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_COMPILER_LOADED\">CMAKE_&lt;LANG&gt;_COMPILER_LOADED</h1> <p id=\"cmake-lang-compiler-loaded\">Defined to true if the language is enabled.</p> <p>When language <code>&lt;LANG&gt;</code> is enabled by <a class=\"reference internal\" href=\"../command/project#command:project\" title=\"project\" id=\"index-0-command:project\"><code>project()</code></a> or <a class=\"reference internal\" href=\"../command/enable_language#command:enable_language\" title=\"enable_language\" id=\"index-0-command:enable_language\"><code>enable_language()</code></a> this variable is defined to <code>1</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_LOADED.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_LOADED.html</a>\n  </p>\n</div>\n","variable/cmake_lang_compiler_abi":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_COMPILER_ABI\">CMAKE_&lt;LANG&gt;_COMPILER_ABI</h1> <p id=\"cmake-lang-compiler-abi\">An internal variable subject to change.</p> <p>This is used in determining the compiler ABI and is subject to change.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_ABI.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_ABI.html</a>\n  </p>\n</div>\n","variable/cmake_lang_compiler":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_COMPILER\">CMAKE_&lt;LANG&gt;_COMPILER</h1> <p id=\"cmake-lang-compiler\">The full path to the compiler for <code>LANG</code>.</p> <p>This is the command that will be used as the <code>&lt;LANG&gt;</code> compiler. Once set, you can not change this variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER.html</a>\n  </p>\n</div>\n","variable/cmake_lang_compiler_external_toolchain":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_COMPILER_EXTERNAL_TOOLCHAIN\">CMAKE_&lt;LANG&gt;_COMPILER_EXTERNAL_TOOLCHAIN</h1> <p id=\"cmake-lang-compiler-external-toolchain\">The external toolchain for cross-compiling, if supported.</p> <p>Some compiler toolchains do not ship their own auxilliary utilities such as archivers and linkers. The compiler driver may support a command-line argument to specify the location of such tools. <code>CMAKE_&lt;LANG&gt;_COMPILER_EXTERNAL_TOOLCHAIN</code> may be set to a path to a path to the external toolchain and will be passed to the compiler driver if supported.</p> <p>This variable may only be set in a toolchain file specified by the <a class=\"reference internal\" href=\"cmake_toolchain_file#variable:CMAKE_TOOLCHAIN_FILE\" title=\"CMAKE_TOOLCHAIN_FILE\" id=\"index-0-variable:CMAKE_TOOLCHAIN_FILE\"><code>CMAKE_TOOLCHAIN_FILE</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_EXTERNAL_TOOLCHAIN.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_EXTERNAL_TOOLCHAIN.html</a>\n  </p>\n</div>\n","variable/cmake_lang_compiler_version":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_COMPILER_VERSION\">CMAKE_&lt;LANG&gt;_COMPILER_VERSION</h1> <p id=\"cmake-lang-compiler-version\">Compiler version string.</p> <p>Compiler version in major[.minor[.patch[.tweak]]] format. This variable is not guaranteed to be defined for all compilers or languages.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_lang_compiler_target":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_COMPILER_TARGET\">CMAKE_&lt;LANG&gt;_COMPILER_TARGET</h1> <p id=\"cmake-lang-compiler-target\">The target for cross-compiling, if supported.</p> <p>Some compiler drivers are inherently cross-compilers, such as clang and QNX qcc. These compiler drivers support a command-line argument to specify the target to cross-compile for.</p> <p>This variable may only be set in a toolchain file specified by the <a class=\"reference internal\" href=\"cmake_toolchain_file#variable:CMAKE_TOOLCHAIN_FILE\" title=\"CMAKE_TOOLCHAIN_FILE\" id=\"index-0-variable:CMAKE_TOOLCHAIN_FILE\"><code>CMAKE_TOOLCHAIN_FILE</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_TARGET.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_COMPILER_TARGET.html</a>\n  </p>\n</div>\n","variable/cmake_lang_create_shared_library":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_CREATE_SHARED_LIBRARY\">CMAKE_&lt;LANG&gt;_CREATE_SHARED_LIBRARY</h1> <p id=\"cmake-lang-create-shared-library\">Rule variable to create a shared library.</p> <p>This is a rule variable that tells CMake how to create a shared library for the language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_CREATE_SHARED_LIBRARY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_CREATE_SHARED_LIBRARY.html</a>\n  </p>\n</div>\n","variable/cmake_lang_create_shared_module":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_CREATE_SHARED_MODULE\">CMAKE_&lt;LANG&gt;_CREATE_SHARED_MODULE</h1> <p id=\"cmake-lang-create-shared-module\">Rule variable to create a shared module.</p> <p>This is a rule variable that tells CMake how to create a shared library for the language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_CREATE_SHARED_MODULE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_CREATE_SHARED_MODULE.html</a>\n  </p>\n</div>\n","variable/executable_output_path":"<h1 id=\"variable:EXECUTABLE_OUTPUT_PATH\">EXECUTABLE_OUTPUT_PATH</h1> <p id=\"executable-output-path\">Old executable location variable.</p> <p>The target property <a class=\"reference internal\" href=\"../prop_tgt/runtime_output_directory#prop_tgt:RUNTIME_OUTPUT_DIRECTORY\" title=\"RUNTIME_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_DIRECTORY\"><code>RUNTIME_OUTPUT_DIRECTORY</code></a> supercedes this variable for a target if it is set. Executable targets are otherwise placed in this directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/EXECUTABLE_OUTPUT_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/EXECUTABLE_OUTPUT_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_lang_create_static_library":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_CREATE_STATIC_LIBRARY\">CMAKE_&lt;LANG&gt;_CREATE_STATIC_LIBRARY</h1> <p id=\"cmake-lang-create-static-library\">Rule variable to create a static library.</p> <p>This is a rule variable that tells CMake how to create a static library for the language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_CREATE_STATIC_LIBRARY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_CREATE_STATIC_LIBRARY.html</a>\n  </p>\n</div>\n","variable/library_output_path":"<h1 id=\"variable:LIBRARY_OUTPUT_PATH\">LIBRARY_OUTPUT_PATH</h1> <p id=\"library-output-path\">Old library location variable.</p> <p>The target properties <a class=\"reference internal\" href=\"../prop_tgt/archive_output_directory#prop_tgt:ARCHIVE_OUTPUT_DIRECTORY\" title=\"ARCHIVE_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:ARCHIVE_OUTPUT_DIRECTORY\"><code>ARCHIVE_OUTPUT_DIRECTORY</code></a>, <a class=\"reference internal\" href=\"../prop_tgt/library_output_directory#prop_tgt:LIBRARY_OUTPUT_DIRECTORY\" title=\"LIBRARY_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:LIBRARY_OUTPUT_DIRECTORY\"><code>LIBRARY_OUTPUT_DIRECTORY</code></a>, and <a class=\"reference internal\" href=\"../prop_tgt/runtime_output_directory#prop_tgt:RUNTIME_OUTPUT_DIRECTORY\" title=\"RUNTIME_OUTPUT_DIRECTORY\" id=\"index-0-prop_tgt:RUNTIME_OUTPUT_DIRECTORY\"><code>RUNTIME_OUTPUT_DIRECTORY</code></a> supercede this variable for a target if they are set. Library targets are otherwise placed in this directory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/LIBRARY_OUTPUT_PATH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/LIBRARY_OUTPUT_PATH.html</a>\n  </p>\n</div>\n","variable/cmake_compiler_is_gnulang":"<h1 id=\"variable:CMAKE_COMPILER_IS_GNU&lt;LANG&gt;\">CMAKE_COMPILER_IS_GNU&lt;LANG&gt;</h1> <p id=\"cmake-compiler-is-gnu-lang\">True if the compiler is GNU.</p> <p>If the selected <code>&lt;LANG&gt;</code> compiler is the GNU compiler then this is <code>TRUE</code>, if not it is <code>FALSE</code>. Unlike the other per-language variables, this uses the GNU syntax for identifying languages instead of the CMake syntax. Recognized values of the <code>&lt;LANG&gt;</code> suffix are:</p> <pre data-language=\"python\">CC = C compiler\nCXX = C++ compiler\nG77 = Fortran compiler\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_COMPILER_IS_GNULANG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_COMPILER_IS_GNULANG.html</a>\n  </p>\n</div>\n","variable/cmake_lang_flags_debug":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_FLAGS_DEBUG\">CMAKE_&lt;LANG&gt;_FLAGS_DEBUG</h1> <p id=\"cmake-lang-flags-debug\">Flags for <code>Debug</code> build type or configuration.</p> <p><code>&lt;LANG&gt;</code> flags used when <a class=\"reference internal\" href=\"cmake_build_type#variable:CMAKE_BUILD_TYPE\" title=\"CMAKE_BUILD_TYPE\" id=\"index-0-variable:CMAKE_BUILD_TYPE\"><code>CMAKE_BUILD_TYPE</code></a> is <code>Debug</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_FLAGS_DEBUG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_FLAGS_DEBUG.html</a>\n  </p>\n</div>\n","variable/cmake_lang_flags_minsizerel":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_FLAGS_MINSIZEREL\">CMAKE_&lt;LANG&gt;_FLAGS_MINSIZEREL</h1> <p id=\"cmake-lang-flags-minsizerel\">Flags for <code>MinSizeRel</code> build type or configuration.</p> <p><code>&lt;LANG&gt;</code> flags used when <a class=\"reference internal\" href=\"cmake_build_type#variable:CMAKE_BUILD_TYPE\" title=\"CMAKE_BUILD_TYPE\" id=\"index-0-variable:CMAKE_BUILD_TYPE\"><code>CMAKE_BUILD_TYPE</code></a> is <code>MinSizeRel</code> (short for minimum size release).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_FLAGS_MINSIZEREL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_FLAGS_MINSIZEREL.html</a>\n  </p>\n</div>\n","variable/cmake_lang_flags_release":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_FLAGS_RELEASE\">CMAKE_&lt;LANG&gt;_FLAGS_RELEASE</h1> <p id=\"cmake-lang-flags-release\">Flags for <code>Release</code> build type or configuration.</p> <p><code>&lt;LANG&gt;</code> flags used when <a class=\"reference internal\" href=\"cmake_build_type#variable:CMAKE_BUILD_TYPE\" title=\"CMAKE_BUILD_TYPE\" id=\"index-0-variable:CMAKE_BUILD_TYPE\"><code>CMAKE_BUILD_TYPE</code></a> is <code>Release</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_FLAGS_RELEASE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_FLAGS_RELEASE.html</a>\n  </p>\n</div>\n","variable/cmake_lang_flags":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_FLAGS\">CMAKE_&lt;LANG&gt;_FLAGS</h1> <p id=\"cmake-lang-flags\">Flags for all build types.</p> <p><code>&lt;LANG&gt;</code> flags used regardless of the value of <a class=\"reference internal\" href=\"cmake_build_type#variable:CMAKE_BUILD_TYPE\" title=\"CMAKE_BUILD_TYPE\" id=\"index-0-variable:CMAKE_BUILD_TYPE\"><code>CMAKE_BUILD_TYPE</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_FLAGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_FLAGS.html</a>\n  </p>\n</div>\n","variable/cmake_lang_flags_relwithdebinfo":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_FLAGS_RELWITHDEBINFO\">CMAKE_&lt;LANG&gt;_FLAGS_RELWITHDEBINFO</h1> <p id=\"cmake-lang-flags-relwithdebinfo\">Flags for <code>RelWithDebInfo</code> type or configuration.</p> <p><code>&lt;LANG&gt;</code> flags used when <a class=\"reference internal\" href=\"cmake_build_type#variable:CMAKE_BUILD_TYPE\" title=\"CMAKE_BUILD_TYPE\" id=\"index-0-variable:CMAKE_BUILD_TYPE\"><code>CMAKE_BUILD_TYPE</code></a> is <code>RelWithDebInfo</code> (short for Release With Debug Information).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_FLAGS_RELWITHDEBINFO.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_FLAGS_RELWITHDEBINFO.html</a>\n  </p>\n</div>\n","variable/cmake_lang_ghs_kernel_flags_minsizerel":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_GHS_KERNEL_FLAGS_MINSIZEREL\">CMAKE_&lt;LANG&gt;_GHS_KERNEL_FLAGS_MINSIZEREL</h1> <p id=\"cmake-lang-ghs-kernel-flags-minsizerel\">GHS kernel flags for <code>MinSizeRel</code> build type or configuration.</p> <p><code>&lt;LANG&gt;</code> flags used when <a class=\"reference internal\" href=\"cmake_build_type#variable:CMAKE_BUILD_TYPE\" title=\"CMAKE_BUILD_TYPE\" id=\"index-0-variable:CMAKE_BUILD_TYPE\"><code>CMAKE_BUILD_TYPE</code></a> is <code>MinSizeRel</code> (short for minimum size release).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_GHS_KERNEL_FLAGS_MINSIZEREL.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_GHS_KERNEL_FLAGS_MINSIZEREL.html</a>\n  </p>\n</div>\n","variable/cmake_try_compile_configuration":"<h1 id=\"variable:CMAKE_TRY_COMPILE_CONFIGURATION\">CMAKE_TRY_COMPILE_CONFIGURATION</h1> <p id=\"cmake-try-compile-configuration\">Build configuration used for <a class=\"reference internal\" href=\"../command/try_compile#command:try_compile\" title=\"try_compile\" id=\"index-0-command:try_compile\"><code>try_compile()</code></a> and <a class=\"reference internal\" href=\"../command/try_run#command:try_run\" title=\"try_run\" id=\"index-0-command:try_run\"><code>try_run()</code></a> projects.</p> <p>Projects built by <a class=\"reference internal\" href=\"../command/try_compile#command:try_compile\" title=\"try_compile\" id=\"index-1-command:try_compile\"><code>try_compile()</code></a> and <a class=\"reference internal\" href=\"../command/try_run#command:try_run\" title=\"try_run\" id=\"index-1-command:try_run\"><code>try_run()</code></a> are built synchronously during the CMake configuration step. Therefore a specific build configuration must be chosen even if the generated build system supports multiple configurations.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_TRY_COMPILE_CONFIGURATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_TRY_COMPILE_CONFIGURATION.html</a>\n  </p>\n</div>\n","variable/cmake_lang_ghs_kernel_flags_debug":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_GHS_KERNEL_FLAGS_DEBUG\">CMAKE_&lt;LANG&gt;_GHS_KERNEL_FLAGS_DEBUG</h1> <p id=\"cmake-lang-ghs-kernel-flags-debug\">GHS kernel flags for <code>Debug</code> build type or configuration.</p> <p><code>&lt;LANG&gt;</code> flags used when <a class=\"reference internal\" href=\"cmake_build_type#variable:CMAKE_BUILD_TYPE\" title=\"CMAKE_BUILD_TYPE\" id=\"index-0-variable:CMAKE_BUILD_TYPE\"><code>CMAKE_BUILD_TYPE</code></a> is <code>Debug</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_GHS_KERNEL_FLAGS_DEBUG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_GHS_KERNEL_FLAGS_DEBUG.html</a>\n  </p>\n</div>\n","variable/cmake_lang_ghs_kernel_flags_release":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_GHS_KERNEL_FLAGS_RELEASE\">CMAKE_&lt;LANG&gt;_GHS_KERNEL_FLAGS_RELEASE</h1> <p id=\"cmake-lang-ghs-kernel-flags-release\">GHS kernel flags for <code>Release</code> build type or configuration.</p> <p><code>&lt;LANG&gt;</code> flags used when <a class=\"reference internal\" href=\"cmake_build_type#variable:CMAKE_BUILD_TYPE\" title=\"CMAKE_BUILD_TYPE\" id=\"index-0-variable:CMAKE_BUILD_TYPE\"><code>CMAKE_BUILD_TYPE</code></a> is <code>Release</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_GHS_KERNEL_FLAGS_RELEASE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_GHS_KERNEL_FLAGS_RELEASE.html</a>\n  </p>\n</div>\n","variable/cmake_lang_ghs_kernel_flags_relwithdebinfo":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_GHS_KERNEL_FLAGS_RELWITHDEBINFO\">CMAKE_&lt;LANG&gt;_GHS_KERNEL_FLAGS_RELWITHDEBINFO</h1> <p id=\"cmake-lang-ghs-kernel-flags-relwithdebinfo\">GHS kernel flags for <code>RelWithDebInfo</code> type or configuration.</p> <p><code>&lt;LANG&gt;</code> flags used when <a class=\"reference internal\" href=\"cmake_build_type#variable:CMAKE_BUILD_TYPE\" title=\"CMAKE_BUILD_TYPE\" id=\"index-0-variable:CMAKE_BUILD_TYPE\"><code>CMAKE_BUILD_TYPE</code></a> is <code>RelWithDebInfo</code> (short for Release With Debug Information).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_GHS_KERNEL_FLAGS_RELWITHDEBINFO.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_GHS_KERNEL_FLAGS_RELWITHDEBINFO.html</a>\n  </p>\n</div>\n","variable/cmake_lang_ignore_extensions":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_IGNORE_EXTENSIONS\">CMAKE_&lt;LANG&gt;_IGNORE_EXTENSIONS</h1> <p id=\"cmake-lang-ignore-extensions\">File extensions that should be ignored by the build.</p> <p>This is a list of file extensions that may be part of a project for a given language but are not compiled.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_IGNORE_EXTENSIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_IGNORE_EXTENSIONS.html</a>\n  </p>\n</div>\n","variable/cmake_lang_implicit_include_directories":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_IMPLICIT_INCLUDE_DIRECTORIES\">CMAKE_&lt;LANG&gt;_IMPLICIT_INCLUDE_DIRECTORIES</h1> <p id=\"cmake-lang-implicit-include-directories\">Directories implicitly searched by the compiler for header files.</p> <p>CMake does not explicitly specify these directories on compiler command lines for language <code>&lt;LANG&gt;</code>. This prevents system include directories from being treated as user include directories on some compilers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_IMPLICIT_INCLUDE_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_IMPLICIT_INCLUDE_DIRECTORIES.html</a>\n  </p>\n</div>\n","variable/cmake_lang_implicit_link_directories":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_IMPLICIT_LINK_DIRECTORIES\">CMAKE_&lt;LANG&gt;_IMPLICIT_LINK_DIRECTORIES</h1> <p id=\"cmake-lang-implicit-link-directories\">Implicit linker search path detected for language <code>&lt;LANG&gt;</code>.</p> <p>Compilers typically pass directories containing language runtime libraries and default library search paths when they invoke a linker. These paths are implicit linker search directories for the compiler’s language. CMake automatically detects these directories for each language and reports the results in this variable.</p> <p>When a library in one of these directories is given by full path to <a class=\"reference internal\" href=\"../command/target_link_libraries#command:target_link_libraries\" title=\"target_link_libraries\" id=\"index-0-command:target_link_libraries\"><code>target_link_libraries()</code></a> CMake will generate the <code>-l&lt;name&gt;</code> form on link lines to ensure the linker searches its implicit directories for the library. Note that some toolchains read implicit directories from an environment variable such as <code>LIBRARY_PATH</code> so keep its value consistent when operating in a given build tree.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES.html</a>\n  </p>\n</div>\n","variable/cmake_lang_implicit_link_framework_directories":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES\">CMAKE_&lt;LANG&gt;_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES</h1> <p id=\"cmake-lang-implicit-link-framework-directories\">Implicit linker framework search path detected for language <code>&lt;LANG&gt;</code>.</p> <p>These paths are implicit linker framework search directories for the compiler’s language. CMake automatically detects these directories for each language and reports the results in this variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES.html</a>\n  </p>\n</div>\n","variable/cmake_lang_implicit_link_libraries":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_IMPLICIT_LINK_LIBRARIES\">CMAKE_&lt;LANG&gt;_IMPLICIT_LINK_LIBRARIES</h1> <p id=\"cmake-lang-implicit-link-libraries\">Implicit link libraries and flags detected for language <code>&lt;LANG&gt;</code>.</p> <p>Compilers typically pass language runtime library names and other flags when they invoke a linker. These flags are implicit link options for the compiler’s language. CMake automatically detects these libraries and flags for each language and reports the results in this variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_IMPLICIT_LINK_LIBRARIES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_IMPLICIT_LINK_LIBRARIES.html</a>\n  </p>\n</div>\n","variable/cmake_lang_library_architecture":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_LIBRARY_ARCHITECTURE\">CMAKE_&lt;LANG&gt;_LIBRARY_ARCHITECTURE</h1> <p id=\"cmake-lang-library-architecture\">Target architecture library directory name detected for <code>&lt;LANG&gt;</code>.</p> <p>If the <code>&lt;LANG&gt;</code> compiler passes to the linker an architecture-specific system library search directory such as <code>&lt;prefix&gt;/lib/&lt;arch&gt;</code> this variable contains the <code>&lt;arch&gt;</code> name if/as detected by CMake.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_LIBRARY_ARCHITECTURE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_LIBRARY_ARCHITECTURE.html</a>\n  </p>\n</div>\n","variable/cmake_lang_linker_preference_propagates":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE_PROPAGATES\">CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE_PROPAGATES</h1> <p id=\"cmake-lang-linker-preference-propagates\">True if <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE\"><code>CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE</code></a> propagates across targets.</p> <p>This is used when CMake selects a linker language for a target. Languages compiled directly into the target are always considered. A language compiled into static libraries linked by the target is considered if this variable is true.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_LINKER_PREFERENCE_PROPAGATES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_LINKER_PREFERENCE_PROPAGATES.html</a>\n  </p>\n</div>\n","variable/cmake_lang_output_extension":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_OUTPUT_EXTENSION\">CMAKE_&lt;LANG&gt;_OUTPUT_EXTENSION</h1> <p id=\"cmake-lang-output-extension\">Extension for the output of a compile for a single file.</p> <p>This is the extension for an object file for the given <code>&lt;LANG&gt;</code>. For example <code>.obj</code> for C on Windows.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_OUTPUT_EXTENSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_OUTPUT_EXTENSION.html</a>\n  </p>\n</div>\n","variable/cmake_lang_linker_preference":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE\">CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE</h1> <p id=\"cmake-lang-linker-preference\">Preference value for linker language selection.</p> <p>The “linker language” for executable, shared library, and module targets is the language whose compiler will invoke the linker. The <a class=\"reference internal\" href=\"../prop_tgt/linker_language#prop_tgt:LINKER_LANGUAGE\" title=\"LINKER_LANGUAGE\" id=\"index-0-prop_tgt:LINKER_LANGUAGE\"><code>LINKER_LANGUAGE</code></a> target property sets the language explicitly. Otherwise, the linker language is that whose linker preference value is highest among languages compiled and linked into the target. See also the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE_PROPAGATES\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE_PROPAGATES\"><code>CMAKE_&lt;LANG&gt;_LINKER_PREFERENCE_PROPAGATES</code></a> variable.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_LINKER_PREFERENCE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_LINKER_PREFERENCE.html</a>\n  </p>\n</div>\n","variable/cmake_lang_link_executable":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_LINK_EXECUTABLE\">CMAKE_&lt;LANG&gt;_LINK_EXECUTABLE</h1> <p id=\"cmake-lang-link-executable\">Rule variable to link an executable.</p> <p>Rule variable to link an executable for the given language.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_LINK_EXECUTABLE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_LINK_EXECUTABLE.html</a>\n  </p>\n</div>\n","variable/cmake_lang_simulate_version":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_SIMULATE_VERSION\">CMAKE_&lt;LANG&gt;_SIMULATE_VERSION</h1> <p id=\"cmake-lang-simulate-version\">Version string of “simulated” compiler.</p> <p>Some compilers simulate other compilers to serve as drop-in replacements. When CMake detects such a compiler it sets this variable to what would have been the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_VERSION\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_VERSION\"><code>CMAKE_&lt;LANG&gt;_COMPILER_VERSION</code></a> for the simulated compiler.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_SIMULATE_VERSION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_SIMULATE_VERSION.html</a>\n  </p>\n</div>\n","variable/cmake_lang_platform_id":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_PLATFORM_ID\">CMAKE_&lt;LANG&gt;_PLATFORM_ID</h1> <p id=\"cmake-lang-platform-id\">An internal variable subject to change.</p> <p>This is used in determining the platform and is subject to change.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_PLATFORM_ID.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_PLATFORM_ID.html</a>\n  </p>\n</div>\n","variable/cmake_lang_simulate_id":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_SIMULATE_ID\">CMAKE_&lt;LANG&gt;_SIMULATE_ID</h1> <p id=\"cmake-lang-simulate-id\">Identification string of “simulated” compiler.</p> <p>Some compilers simulate other compilers to serve as drop-in replacements. When CMake detects such a compiler it sets this variable to what would have been the <a class=\"reference internal\" href=\"#\" title=\"CMAKE_&lt;LANG&gt;_COMPILER_ID\" id=\"index-0-variable:CMAKE_&lt;LANG&gt;_COMPILER_ID\"><code>CMAKE_&lt;LANG&gt;_COMPILER_ID</code></a> for the simulated compiler.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_SIMULATE_ID.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_SIMULATE_ID.html</a>\n  </p>\n</div>\n","variable/cmake_lang_sizeof_data_ptr":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_SIZEOF_DATA_PTR\">CMAKE_&lt;LANG&gt;_SIZEOF_DATA_PTR</h1> <p id=\"cmake-lang-sizeof-data-ptr\">Size of pointer-to-data types for language <code>&lt;LANG&gt;</code>.</p> <p>This holds the size (in bytes) of pointer-to-data types in the target platform ABI. It is defined for languages <code>C</code> and <code>CXX</code> (C++).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_SIZEOF_DATA_PTR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_SIZEOF_DATA_PTR.html</a>\n  </p>\n</div>\n","variable/ctest_change_id":"<h1 id=\"variable:CTEST_CHANGE_ID\">CTEST_CHANGE_ID</h1> <p id=\"ctest-change-id\">Specify the CTest <code>ChangeId</code> setting in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p> <p>This setting allows CTest to pass arbitrary information about this build up to CDash. One use of this feature is to allow CDash to post comments on your pull request if anything goes wrong with your build.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CHANGE_ID.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CHANGE_ID.html</a>\n  </p>\n</div>\n","variable/cmake_lang_source_file_extensions":"<h1 id=\"variable:CMAKE_&lt;LANG&gt;_SOURCE_FILE_EXTENSIONS\">CMAKE_&lt;LANG&gt;_SOURCE_FILE_EXTENSIONS</h1> <p id=\"cmake-lang-source-file-extensions\">Extensions of source files for the given language.</p> <p>This is the list of extensions for a given language’s source files.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_SOURCE_FILE_EXTENSIONS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_LANG_SOURCE_FILE_EXTENSIONS.html</a>\n  </p>\n</div>\n","variable/ctest_checkout_command":"<h1 id=\"variable:CTEST_CHECKOUT_COMMAND\">CTEST_CHECKOUT_COMMAND</h1> <p id=\"ctest-checkout-command\">Tell the <a class=\"reference internal\" href=\"../command/ctest_start#command:ctest_start\" title=\"ctest_start\" id=\"index-0-command:ctest_start\"><code>ctest_start()</code></a> command how to checkout or initialize the source directory in a <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a> dashboard client script.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CHECKOUT_COMMAND.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CHECKOUT_COMMAND.html</a>\n  </p>\n</div>\n","variable/ctest_custom_error_exception":"<h1 id=\"variable:CTEST_CUSTOM_ERROR_EXCEPTION\">CTEST_CUSTOM_ERROR_EXCEPTION</h1> <p id=\"ctest-custom-error-exception\">A list of regular expressions which will be used to exclude when detecting error messages in build outputs by the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_ERROR_EXCEPTION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_ERROR_EXCEPTION.html</a>\n  </p>\n</div>\n","variable/cmake_user_make_rules_override_lang":"<h1 id=\"variable:CMAKE_USER_MAKE_RULES_OVERRIDE_&lt;LANG&gt;\">CMAKE_USER_MAKE_RULES_OVERRIDE_&lt;LANG&gt;</h1> <p id=\"cmake-user-make-rules-override-lang\">Specify a CMake file that overrides platform information for <code>&lt;LANG&gt;</code>.</p> <p>This is a language-specific version of <a class=\"reference internal\" href=\"cmake_user_make_rules_override#variable:CMAKE_USER_MAKE_RULES_OVERRIDE\" title=\"CMAKE_USER_MAKE_RULES_OVERRIDE\" id=\"index-0-variable:CMAKE_USER_MAKE_RULES_OVERRIDE\"><code>CMAKE_USER_MAKE_RULES_OVERRIDE</code></a> loaded only when enabling language <code>&lt;LANG&gt;</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CMAKE_USER_MAKE_RULES_OVERRIDE_LANG.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CMAKE_USER_MAKE_RULES_OVERRIDE_LANG.html</a>\n  </p>\n</div>\n","variable/ctest_custom_coverage_exclude":"<h1 id=\"variable:CTEST_CUSTOM_COVERAGE_EXCLUDE\">CTEST_CUSTOM_COVERAGE_EXCLUDE</h1> <p id=\"ctest-custom-coverage-exclude\">A list of regular expressions which will be used to exclude files by their path from coverage output by the <a class=\"reference internal\" href=\"../command/ctest_coverage#command:ctest_coverage\" title=\"ctest_coverage\" id=\"index-0-command:ctest_coverage\"><code>ctest_coverage()</code></a> command.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_COVERAGE_EXCLUDE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_COVERAGE_EXCLUDE.html</a>\n  </p>\n</div>\n","variable/ctest_custom_error_match":"<h1 id=\"variable:CTEST_CUSTOM_ERROR_MATCH\">CTEST_CUSTOM_ERROR_MATCH</h1> <p id=\"ctest-custom-error-match\">A list of regular expressions which will be used to detect error messages in build outputs by the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_ERROR_MATCH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_ERROR_MATCH.html</a>\n  </p>\n</div>\n","variable/ctest_custom_error_post_context":"<h1 id=\"variable:CTEST_CUSTOM_ERROR_POST_CONTEXT\">CTEST_CUSTOM_ERROR_POST_CONTEXT</h1> <p id=\"ctest-custom-error-post-context\">The number of lines to include as context which follow an error message by the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command. The default is 10.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_ERROR_POST_CONTEXT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_ERROR_POST_CONTEXT.html</a>\n  </p>\n</div>\n","variable/ctest_custom_error_pre_context":"<h1 id=\"variable:CTEST_CUSTOM_ERROR_PRE_CONTEXT\">CTEST_CUSTOM_ERROR_PRE_CONTEXT</h1> <p id=\"ctest-custom-error-pre-context\">The number of lines to include as context which precede an error message by the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command. The default is 10.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_ERROR_PRE_CONTEXT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_ERROR_PRE_CONTEXT.html</a>\n  </p>\n</div>\n","variable/ctest_custom_maximum_failed_test_output_size":"<h1 id=\"variable:CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE\">CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE</h1> <p id=\"ctest-custom-maximum-failed-test-output-size\">When saving a failing test’s output, this is the maximum size, in bytes, that will be collected by the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command. Defaults to 307200 (300 KiB).</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE.html</a>\n  </p>\n</div>\n","variable/ctest_custom_maximum_number_of_errors":"<h1 id=\"variable:CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS\">CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS</h1> <p id=\"ctest-custom-maximum-number-of-errors\">The maximum number of errors in a single build step which will be detected. After this, the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command will truncate the output. Defaults to 50.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS.html</a>\n  </p>\n</div>\n","variable/ctest_custom_maximum_number_of_warnings":"<h1 id=\"variable:CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS\">CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS</h1> <p id=\"ctest-custom-maximum-number-of-warnings\">The maximum number of warnings in a single build step which will be detected. After this, the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command will truncate the output. Defaults to 50.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS.html</a>\n  </p>\n</div>\n","variable/ctest_custom_post_memcheck":"<h1 id=\"variable:CTEST_CUSTOM_POST_MEMCHECK\">CTEST_CUSTOM_POST_MEMCHECK</h1> <p id=\"ctest-custom-post-memcheck\">A list of commands to run at the end of the <a class=\"reference internal\" href=\"../command/ctest_memcheck#command:ctest_memcheck\" title=\"ctest_memcheck\" id=\"index-0-command:ctest_memcheck\"><code>ctest_memcheck()</code></a> command.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_POST_MEMCHECK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_POST_MEMCHECK.html</a>\n  </p>\n</div>\n","variable/ctest_custom_post_test":"<h1 id=\"variable:CTEST_CUSTOM_POST_TEST\">CTEST_CUSTOM_POST_TEST</h1> <p id=\"ctest-custom-post-test\">A list of commands to run at the end of the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_POST_TEST.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_POST_TEST.html</a>\n  </p>\n</div>\n","variable/ctest_custom_memcheck_ignore":"<h1 id=\"variable:CTEST_CUSTOM_MEMCHECK_IGNORE\">CTEST_CUSTOM_MEMCHECK_IGNORE</h1> <p id=\"ctest-custom-memcheck-ignore\">A list of regular expressions to use to exclude tests during the <a class=\"reference internal\" href=\"../command/ctest_memcheck#command:ctest_memcheck\" title=\"ctest_memcheck\" id=\"index-0-command:ctest_memcheck\"><code>ctest_memcheck()</code></a> command.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_MEMCHECK_IGNORE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_MEMCHECK_IGNORE.html</a>\n  </p>\n</div>\n","variable/ctest_custom_pre_memcheck":"<h1 id=\"variable:CTEST_CUSTOM_PRE_MEMCHECK\">CTEST_CUSTOM_PRE_MEMCHECK</h1> <p id=\"ctest-custom-pre-memcheck\">A list of commands to run at the start of the <a class=\"reference internal\" href=\"../command/ctest_memcheck#command:ctest_memcheck\" title=\"ctest_memcheck\" id=\"index-0-command:ctest_memcheck\"><code>ctest_memcheck()</code></a> command.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_PRE_MEMCHECK.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_PRE_MEMCHECK.html</a>\n  </p>\n</div>\n","variable/ctest_custom_pre_test":"<h1 id=\"variable:CTEST_CUSTOM_PRE_TEST\">CTEST_CUSTOM_PRE_TEST</h1> <p id=\"ctest-custom-pre-test\">A list of commands to run at the start of the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_PRE_TEST.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_PRE_TEST.html</a>\n  </p>\n</div>\n","variable/ctest_custom_test_ignore":"<h1 id=\"variable:CTEST_CUSTOM_TEST_IGNORE\">CTEST_CUSTOM_TEST_IGNORE</h1> <p id=\"ctest-custom-test-ignore\">A list of regular expressions to use to exclude tests during the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_TEST_IGNORE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_TEST_IGNORE.html</a>\n  </p>\n</div>\n","variable/ctest_custom_warning_exception":"<h1 id=\"variable:CTEST_CUSTOM_WARNING_EXCEPTION\">CTEST_CUSTOM_WARNING_EXCEPTION</h1> <p id=\"ctest-custom-warning-exception\">A list of regular expressions which will be used to exclude when detecting warning messages in build outputs by the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_WARNING_EXCEPTION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_WARNING_EXCEPTION.html</a>\n  </p>\n</div>\n","variable/ctest_custom_maximum_passed_test_output_size":"<h1 id=\"variable:CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE\">CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE</h1> <p id=\"ctest-custom-maximum-passed-test-output-size\">When saving a passing test’s output, this is the maximum size, in bytes, that will be collected by the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command. Defaults to 1024 (1 KiB).</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE.html</a>\n  </p>\n</div>\n","variable/ctest_custom_warning_match":"<h1 id=\"variable:CTEST_CUSTOM_WARNING_MATCH\">CTEST_CUSTOM_WARNING_MATCH</h1> <p id=\"ctest-custom-warning-match\">A list of regular expressions which will be used to detect warning messages in build outputs by the <a class=\"reference internal\" href=\"../command/ctest_test#command:ctest_test\" title=\"ctest_test\" id=\"index-0-command:ctest_test\"><code>ctest_test()</code></a> command.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_WARNING_MATCH.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CUSTOM_WARNING_MATCH.html</a>\n  </p>\n</div>\n","variable/ctest_cvs_checkout":"<h1 id=\"variable:CTEST_CVS_CHECKOUT\">CTEST_CVS_CHECKOUT</h1> <p id=\"ctest-cvs-checkout\">Deprecated. Use <a class=\"reference internal\" href=\"ctest_checkout_command#variable:CTEST_CHECKOUT_COMMAND\" title=\"CTEST_CHECKOUT_COMMAND\" id=\"index-0-variable:CTEST_CHECKOUT_COMMAND\"><code>CTEST_CHECKOUT_COMMAND</code></a> instead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_CVS_CHECKOUT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_CVS_CHECKOUT.html</a>\n  </p>\n</div>\n","variable/ctest_extra_coverage_glob":"<h1 id=\"variable:CTEST_EXTRA_COVERAGE_GLOB\">CTEST_EXTRA_COVERAGE_GLOB</h1> <p id=\"ctest-extra-coverage-glob\">A list of regular expressions which will be used to find files which should be covered by the <a class=\"reference internal\" href=\"../command/ctest_coverage#command:ctest_coverage\" title=\"ctest_coverage\" id=\"index-0-command:ctest_coverage\"><code>ctest_coverage()</code></a> command.</p> <p>It is initialized by <a class=\"reference internal\" href=\"../manual/ctest.1#manual:ctest(1)\" title=\"ctest(1)\" id=\"index-0-manual:ctest(1)\"><code>ctest(1)</code></a>, but may be edited in a <code>CTestCustom</code> file. See <a class=\"reference internal\" href=\"../command/ctest_read_custom_files#command:ctest_read_custom_files\" title=\"ctest_read_custom_files\" id=\"index-0-command:ctest_read_custom_files\"><code>ctest_read_custom_files()</code></a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CTEST_EXTRA_COVERAGE_GLOB.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CTEST_EXTRA_COVERAGE_GLOB.html</a>\n  </p>\n</div>\n","variable/cpack_component_include_toplevel_directory":"<h1 id=\"variable:CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY\">CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY</h1> <p id=\"cpack-component-include-toplevel-directory\">Boolean toggle to include/exclude top level directory (component case).</p> <p>Similar usage as <a class=\"reference internal\" href=\"cpack_include_toplevel_directory#variable:CPACK_INCLUDE_TOPLEVEL_DIRECTORY\" title=\"CPACK_INCLUDE_TOPLEVEL_DIRECTORY\" id=\"index-0-variable:CPACK_INCLUDE_TOPLEVEL_DIRECTORY\"><code>CPACK_INCLUDE_TOPLEVEL_DIRECTORY</code></a> but for the component case. See <a class=\"reference internal\" href=\"cpack_include_toplevel_directory#variable:CPACK_INCLUDE_TOPLEVEL_DIRECTORY\" title=\"CPACK_INCLUDE_TOPLEVEL_DIRECTORY\" id=\"index-1-variable:CPACK_INCLUDE_TOPLEVEL_DIRECTORY\"><code>CPACK_INCLUDE_TOPLEVEL_DIRECTORY</code></a> documentation for the detail.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY.html</a>\n  </p>\n</div>\n","variable/cpack_absolute_destination_files":"<h1 id=\"variable:CPACK_ABSOLUTE_DESTINATION_FILES\">CPACK_ABSOLUTE_DESTINATION_FILES</h1> <p id=\"cpack-absolute-destination-files\">List of files which have been installed using an <code>ABSOLUTE DESTINATION</code> path.</p> <p>This variable is a Read-Only variable which is set internally by CPack during installation and before packaging using <a class=\"reference internal\" href=\"cmake_absolute_destination_files#variable:CMAKE_ABSOLUTE_DESTINATION_FILES\" title=\"CMAKE_ABSOLUTE_DESTINATION_FILES\" id=\"index-0-variable:CMAKE_ABSOLUTE_DESTINATION_FILES\"><code>CMAKE_ABSOLUTE_DESTINATION_FILES</code></a> defined in <code>cmake_install.cmake</code> scripts. The value can be used within CPack project configuration file and/or <code>CPack&lt;GEN&gt;.cmake</code> file of <code>&lt;GEN&gt;</code> generator.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CPACK_ABSOLUTE_DESTINATION_FILES.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CPACK_ABSOLUTE_DESTINATION_FILES.html</a>\n  </p>\n</div>\n","variable/cpack_error_on_absolute_install_destination":"<h1 id=\"variable:CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION\">CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION</h1> <p id=\"cpack-error-on-absolute-install-destination\">Ask CPack to error out as soon as a file with absolute <code>INSTALL DESTINATION</code> is encountered.</p> <p>The fatal error is emitted before the installation of the offending file takes place. Some CPack generators, like NSIS, enforce this internally. This variable triggers the definition of <a class=\"reference internal\" href=\"cmake_error_on_absolute_install_destination#variable:CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION\" title=\"CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION\" id=\"index-0-variable:CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION\"><code>CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION</code></a> when CPack runs.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.html</a>\n  </p>\n</div>\n","variable/cpack_include_toplevel_directory":"<h1 id=\"variable:CPACK_INCLUDE_TOPLEVEL_DIRECTORY\">CPACK_INCLUDE_TOPLEVEL_DIRECTORY</h1> <p id=\"cpack-include-toplevel-directory\">Boolean toggle to include/exclude top level directory.</p> <p>When preparing a package CPack installs the item under the so-called top level directory. The purpose of is to include (set to <code>1</code> or <code>ON</code> or <code>TRUE</code>) the top level directory in the package or not (set to <code>0</code> or <code>OFF</code> or <code>FALSE</code>).</p> <p>Each CPack generator has a built-in default value for this variable. E.g. Archive generators (ZIP, TGZ, ...) includes the top level whereas RPM or DEB don’t. The user may override the default value by setting this variable.</p> <p>There is a similar variable <a class=\"reference internal\" href=\"cpack_component_include_toplevel_directory#variable:CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY\" title=\"CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY\" id=\"index-0-variable:CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY\"><code>CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY</code></a> which may be used to override the behavior for the component packaging case which may have different default value for historical (now backward compatibility) reason.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CPACK_INCLUDE_TOPLEVEL_DIRECTORY.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CPACK_INCLUDE_TOPLEVEL_DIRECTORY.html</a>\n  </p>\n</div>\n","variable/cpack_install_script":"<h1 id=\"variable:CPACK_INSTALL_SCRIPT\">CPACK_INSTALL_SCRIPT</h1> <p id=\"cpack-install-script\">Extra CMake script provided by the user.</p> <p>If set this CMake script will be executed by CPack during its local [CPack-private] installation which is done right before packaging the files. The script is not called by e.g.: <code>make install</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CPACK_INSTALL_SCRIPT.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CPACK_INSTALL_SCRIPT.html</a>\n  </p>\n</div>\n","variable/cpack_packaging_install_prefix":"<h1 id=\"variable:CPACK_PACKAGING_INSTALL_PREFIX\">CPACK_PACKAGING_INSTALL_PREFIX</h1> <p id=\"cpack-packaging-install-prefix\">The prefix used in the built package.</p> <p>Each CPack generator has a default value (like <code>/usr</code>). This default value may be overwritten from the <code>CMakeLists.txt</code> or the <a class=\"reference internal\" href=\"../manual/cpack.1#manual:cpack(1)\" title=\"cpack(1)\" id=\"index-0-manual:cpack(1)\"><code>cpack(1)</code></a> command line by setting an alternative value. Example:</p> <pre data-language=\"python\">set(CPACK_PACKAGING_INSTALL_PREFIX \"/opt\")\n</pre> <p>This is not the same purpose as <a class=\"reference internal\" href=\"cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> which is used when installing from the build tree without building a package.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CPACK_PACKAGING_INSTALL_PREFIX.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CPACK_PACKAGING_INSTALL_PREFIX.html</a>\n  </p>\n</div>\n","variable/cpack_set_destdir":"<h1 id=\"variable:CPACK_SET_DESTDIR\">CPACK_SET_DESTDIR</h1> <p id=\"cpack-set-destdir\">Boolean toggle to make CPack use <code>DESTDIR</code> mechanism when packaging.</p> <p><code>DESTDIR</code> means DESTination DIRectory. It is commonly used by makefile users in order to install software at non-default location. It is a basic relocation mechanism that should not be used on Windows (see <a class=\"reference internal\" href=\"cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-0-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> documentation). It is usually invoked like this:</p> <pre data-language=\"python\">make DESTDIR=/home/john install\n</pre> <p>which will install the concerned software using the installation prefix, e.g. <code>/usr/local</code> prepended with the <code>DESTDIR</code> value which finally gives <code>/home/john/usr/local</code>. When preparing a package, CPack first installs the items to be packaged in a local (to the build tree) directory by using the same <code>DESTDIR</code> mechanism. Nevertheless, if <code>CPACK_SET_DESTDIR</code> is set then CPack will set <code>DESTDIR</code> before doing the local install. The most noticeable difference is that without <code>CPACK_SET_DESTDIR</code>, CPack uses <a class=\"reference internal\" href=\"cpack_packaging_install_prefix#variable:CPACK_PACKAGING_INSTALL_PREFIX\" title=\"CPACK_PACKAGING_INSTALL_PREFIX\" id=\"index-0-variable:CPACK_PACKAGING_INSTALL_PREFIX\"><code>CPACK_PACKAGING_INSTALL_PREFIX</code></a> as a prefix whereas with <code>CPACK_SET_DESTDIR</code> set, CPack will use <a class=\"reference internal\" href=\"cmake_install_prefix#variable:CMAKE_INSTALL_PREFIX\" title=\"CMAKE_INSTALL_PREFIX\" id=\"index-1-variable:CMAKE_INSTALL_PREFIX\"><code>CMAKE_INSTALL_PREFIX</code></a> as a prefix.</p> <p>Manually setting <code>CPACK_SET_DESTDIR</code> may help (or simply be necessary) if some install rules uses absolute <code>DESTINATION</code> (see CMake <a class=\"reference internal\" href=\"../command/install#command:install\" title=\"install\" id=\"index-0-command:install\"><code>install()</code></a> command). However, starting with CPack/CMake 2.8.3 RPM and DEB installers tries to handle <code>DESTDIR</code> automatically so that it is seldom necessary for the user to set it.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CPACK_SET_DESTDIR.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CPACK_SET_DESTDIR.html</a>\n  </p>\n</div>\n","variable/cpack_warn_on_absolute_install_destination":"<h1 id=\"variable:CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION\">CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION</h1> <p id=\"cpack-warn-on-absolute-install-destination\">Ask CPack to warn each time a file with absolute <code>INSTALL DESTINATION</code> is encountered.</p> <p>This variable triggers the definition of <a class=\"reference internal\" href=\"cmake_warn_on_absolute_install_destination#variable:CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION\" title=\"CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION\" id=\"index-0-variable:CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION\"><code>CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION</code></a> when CPack runs <code>cmake_install.cmake</code> scripts.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2000&ndash;2016 Kitware, Inc.<br>&copy; 2000&ndash;2011 Insight Software Consortium<br>Licensed under the BSD 3-clause License.<br>\n    <a href=\"https://cmake.org/cmake/help/v3.5/variable/CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION.html\" class=\"_attribution-link\">https://cmake.org/cmake/help/v3.5/variable/CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION.html</a>\n  </p>\n</div>\n"}