{"index":"<h1>nginx documentation</h1>\n<h4 id=\"introduction\">Introduction</h4>\n <ul class=\"compact\"> <li> <a href=\"install\">Installing nginx</a> </li> <li> <a href=\"beginners_guide\">Beginner’s Guide</a> </li> <li> <a href=\"https://www.nginx.com/resources/admin-guide/\">Admin’s Guide</a> </li> <li> <a href=\"control\">Controlling nginx</a> </li> <li> <a href=\"events\">Connection processing methods</a> </li> <li> <a href=\"hash\">Setting up hashes</a> </li> <li> <a href=\"debugging_log\">A debugging log</a> </li> <li> <a href=\"syslog\">Logging to syslog</a> </li> <li> <a href=\"syntax\">Configuration file measurement units</a> </li> <li> <a href=\"switches\">Command-line parameters</a> </li> <li> <a href=\"windows\">nginx for Windows</a> </li> </ul>\n <ul class=\"compact\"> <li> <a href=\"http/request_processing\">How nginx processes a request</a> </li> <li> <a href=\"http/server_names\">Server names</a> </li> <li> <a href=\"http/load_balancing\">Using nginx as HTTP load balancer</a> </li> <li> <a href=\"http/configuring_https_servers\">Configuring HTTPS servers</a> </li> </ul>\n <ul class=\"compact\"> <li> <a href=\"http://www.aosabook.org/en/nginx.html\">Chapter “nginx” in “The Architecture of Open Source Applications”</a> </li> </ul>\n\n<h4 id=\"howto\">How-To</h4>\n <ul class=\"compact\"> <li> <a href=\"configure\">Building nginx from Sources</a> </li> <li> <a href=\"howto_build_on_win32\">Building nginx on the Win32 platform with Visual C</a> </li> <li> <a href=\"https://www.nginx.com/resources/admin-guide/setting-nginx-plus-environment-amazon-ec2/\">Setting up NGINX Plus environment on Amazon EC2</a> </li> <li> <a href=\"nginx_dtrace_pid_provider\">Debugging nginx with DTrace pid provider</a> </li> </ul>\n <ul class=\"compact\"> <li> <a href=\"http/converting_rewrite_rules\">Converting rewrite rules</a> </li> <li> <a href=\"http/websocket\">WebSocket proxying</a> </li> </ul>\n\n<h4 id=\"development\">Development</h4>\n <ul class=\"compact\"> <li> <a href=\"https://nginx.org/en/docs/contributing_changes.html\">Contributing Changes</a> </li> </ul>\n\n<h4>Modules reference</h4>\n <ul class=\"compact\"> <li> <a href=\"https://nginx.org/en/docs/dirindex.html\">Alphabetical index of directives</a> </li> <li> <a href=\"https://nginx.org/en/docs/varindex.html\">Alphabetical index of variables</a> </li> </ul>\n\n <ul class=\"compact\"> <li> <a href=\"ngx_core_module\">Core functionality</a> </li> </ul>\n\n <ul class=\"compact\"> <li> <a href=\"http/ngx_http_core_module\"> ngx_http_core_module</a> </li> <li> <a href=\"http/ngx_http_access_module\"> ngx_http_access_module</a> </li> <li> <a href=\"http/ngx_http_addition_module\"> ngx_http_addition_module</a> </li> <li> <a href=\"http/ngx_http_auth_basic_module\"> ngx_http_auth_basic_module</a> </li> <li> <a href=\"http/ngx_http_auth_request_module\"> ngx_http_auth_request_module</a> </li> <li> <a href=\"http/ngx_http_autoindex_module\"> ngx_http_autoindex_module</a> </li> <li> <a href=\"http/ngx_http_browser_module\"> ngx_http_browser_module</a> </li> <li> <a href=\"http/ngx_http_charset_module\"> ngx_http_charset_module</a> </li> <li> <a href=\"http/ngx_http_dav_module\"> ngx_http_dav_module</a> </li> <li> <a href=\"http/ngx_http_empty_gif_module\"> ngx_http_empty_gif_module</a> </li> <li> <a href=\"http/ngx_http_f4f_module\"> ngx_http_f4f_module</a> </li> <li> <a href=\"http/ngx_http_fastcgi_module\"> ngx_http_fastcgi_module</a> </li> <li> <a href=\"http/ngx_http_flv_module\"> ngx_http_flv_module</a> </li> <li> <a href=\"http/ngx_http_geo_module\"> ngx_http_geo_module</a> </li> <li> <a href=\"http/ngx_http_geoip_module\"> ngx_http_geoip_module</a> </li> <li> <a href=\"http/ngx_http_gunzip_module\"> ngx_http_gunzip_module</a> </li> <li> <a href=\"http/ngx_http_gzip_module\"> ngx_http_gzip_module</a> </li> <li> <a href=\"http/ngx_http_gzip_static_module\"> ngx_http_gzip_static_module</a> </li> <li> <a href=\"http/ngx_http_headers_module\"> ngx_http_headers_module</a> </li> <li> <a href=\"http/ngx_http_hls_module\"> ngx_http_hls_module</a> </li> <li> <a href=\"http/ngx_http_image_filter_module\"> ngx_http_image_filter_module</a> </li> <li> <a href=\"http/ngx_http_index_module\"> ngx_http_index_module</a> </li> <li> <a href=\"http/ngx_http_limit_conn_module\"> ngx_http_limit_conn_module</a> </li> <li> <a href=\"http/ngx_http_limit_req_module\"> ngx_http_limit_req_module</a> </li> <li> <a href=\"http/ngx_http_log_module\"> ngx_http_log_module</a> </li> <li> <a href=\"http/ngx_http_map_module\"> ngx_http_map_module</a> </li> <li> <a href=\"http/ngx_http_memcached_module\"> ngx_http_memcached_module</a> </li> <li> <a href=\"http/ngx_http_mp4_module\"> ngx_http_mp4_module</a> </li> <li> <a href=\"http/ngx_http_perl_module\"> ngx_http_perl_module</a> </li> <li> <a href=\"http/ngx_http_proxy_module\"> ngx_http_proxy_module</a> </li> <li> <a href=\"http/ngx_http_random_index_module\"> ngx_http_random_index_module</a> </li> <li> <a href=\"http/ngx_http_realip_module\"> ngx_http_realip_module</a> </li> <li> <a href=\"http/ngx_http_referer_module\"> ngx_http_referer_module</a> </li> <li> <a href=\"http/ngx_http_rewrite_module\"> ngx_http_rewrite_module</a> </li> <li> <a href=\"http/ngx_http_scgi_module\"> ngx_http_scgi_module</a> </li> <li> <a href=\"http/ngx_http_secure_link_module\"> ngx_http_secure_link_module</a> </li> <li> <a href=\"http/ngx_http_session_log_module\"> ngx_http_session_log_module</a> </li> <li> <a href=\"http/ngx_http_slice_module\"> ngx_http_slice_module</a> </li> <li> <a href=\"http/ngx_http_spdy_module\"> ngx_http_spdy_module</a> </li> <li> <a href=\"http/ngx_http_split_clients_module\"> ngx_http_split_clients_module</a> </li> <li> <a href=\"http/ngx_http_ssi_module\"> ngx_http_ssi_module</a> </li> <li> <a href=\"http/ngx_http_ssl_module\"> ngx_http_ssl_module</a> </li> <li> <a href=\"http/ngx_http_status_module\"> ngx_http_status_module</a> </li> <li> <a href=\"http/ngx_http_stub_status_module\"> ngx_http_stub_status_module</a> </li> <li> <a href=\"http/ngx_http_sub_module\"> ngx_http_sub_module</a> </li> <li> <a href=\"http/ngx_http_upstream_module\"> ngx_http_upstream_module</a> </li> <li> <a href=\"http/ngx_http_upstream_conf_module\"> ngx_http_upstream_conf_module</a> </li> <li> <a href=\"http/ngx_http_userid_module\"> ngx_http_userid_module</a> </li> <li> <a href=\"http/ngx_http_uwsgi_module\"> ngx_http_uwsgi_module</a> </li> <li> <a href=\"http/ngx_http_v2_module\"> ngx_http_v2_module</a> </li> <li> <a href=\"http/ngx_http_xslt_module\"> ngx_http_xslt_module</a> </li> </ul>\n\n <ul class=\"compact\"> <li> <a href=\"mail/ngx_mail_core_module\"> ngx_mail_core_module</a> </li> <li> <a href=\"mail/ngx_mail_auth_http_module\"> ngx_mail_auth_http_module</a> </li> <li> <a href=\"mail/ngx_mail_proxy_module\"> ngx_mail_proxy_module</a> </li> <li> <a href=\"mail/ngx_mail_ssl_module\"> ngx_mail_ssl_module</a> </li> <li> <a href=\"mail/ngx_mail_imap_module\"> ngx_mail_imap_module</a> </li> <li> <a href=\"mail/ngx_mail_pop3_module\"> ngx_mail_pop3_module</a> </li> <li> <a href=\"mail/ngx_mail_smtp_module\"> ngx_mail_smtp_module</a> </li> </ul>\n\n <ul class=\"compact\"> <li> <a href=\"stream/ngx_stream_core_module\"> ngx_stream_core_module</a> </li> <li> <a href=\"stream/ngx_stream_access_module\"> ngx_stream_access_module</a> </li> <li> <a href=\"stream/ngx_stream_geo_module\"> ngx_stream_geo_module</a> </li> <li> <a href=\"stream/ngx_stream_geoip_module\"> ngx_stream_geoip_module</a> </li> <li> <a href=\"stream/ngx_stream_limit_conn_module\"> ngx_stream_limit_conn_module</a> </li> <li> <a href=\"stream/ngx_stream_map_module\"> ngx_stream_map_module</a> </li> <li> <a href=\"stream/ngx_stream_proxy_module\"> ngx_stream_proxy_module</a> </li> <li> <a href=\"stream/ngx_stream_return_module\"> ngx_stream_return_module</a> </li> <li> <a href=\"stream/ngx_stream_split_clients_module\"> ngx_stream_split_clients_module</a> </li> <li> <a href=\"stream/ngx_stream_ssl_module\"> ngx_stream_ssl_module</a> </li> <li> <a href=\"stream/ngx_stream_upstream_module\"> ngx_stream_upstream_module</a> </li> </ul>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/\" class=\"_attribution-link\">https://nginx.org/en/docs/</a>\n  </p>\n</div>\n","install":"<h1>Installing nginx</h1>\n<p> nginx can be installed differently, depending on the operating system. </p>\n<h4 id=\"linux\">Installation on Linux</h4>\n<p> For Linux, nginx <a href=\"https://nginx.org/en/linux_packages.html\">packages</a> from nginx.org can be used. </p>\n<h4 id=\"freebsd\">Installation on FreeBSD</h4>\n<p> On FreeBSD, nginx can be installed either from the <a href=\"http://www.freebsd.org/doc/handbook/pkgng-intro.html\">packages</a> or through the <a href=\"http://www.freebsd.org/doc/handbook/ports-using.html\">ports</a> system. The ports system provides greater flexibility, allowing selection among a wide range of options. The port will compile nginx with the specified options and install it. </p>\n<h4 id=\"source_install\">Building from Sources</h4>\n<p> If some special functionality is required, not available with packages and ports, nginx can also be compiled from source files. While more flexible, this approach may be complex for a beginner. For more information, see <a href=\"configure\">Building nginx from Sources</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/install.html\" class=\"_attribution-link\">https://nginx.org/en/docs/install.html</a>\n  </p>\n</div>\n","http/load_balancing":"<h1>Using nginx as HTTP load balancer</h1>\n<ul>\n<li><a href=\"#nginx_load_balancing_methods\">Load balancing methods</a></li>\n<li><a href=\"#nginx_load_balancing_configuration\">Default load balancing configuration</a></li>\n<li><a href=\"#nginx_load_balancing_with_least_connected\">Least connected load balancing</a></li>\n<li><a href=\"#nginx_load_balancing_with_ip_hash\">Session persistence</a></li>\n<li><a href=\"#nginx_weighted_load_balancing\">Weighted load balancing</a></li>\n<li><a href=\"#nginx_load_balancing_health_checks\">Health checks</a></li>\n<li><a href=\"#nginx_load_balancing_additional_information\">Further reading</a></li>\n</ul>\n<h4>Introduction</h4>\n<p> Load balancing across multiple application instances is a commonly used technique for optimizing resource utilization, maximizing throughput, reducing latency, and ensuring fault-tolerant configurations. </p>\n<p> It is possible to use nginx as a very efficient HTTP load balancer to distribute traffic to several application servers and to improve performance, scalability and reliability of web applications with nginx. </p>\n<h4 id=\"nginx_load_balancing_methods\">Load balancing methods</h4>\n<p> The following load balancing mechanisms (or methods) are supported in nginx: </p> <ul> <li> round-robin — requests to the application servers are distributed in a round-robin fashion, </li> <li> least-connected — next request is assigned to the server with the least number of active connections, </li> <li> ip-hash — a hash-function is used to determine what server should be selected for the next request (based on the client’s IP address). </li> </ul>\n\n<h4 id=\"nginx_load_balancing_configuration\">Default load balancing configuration</h4>\n<p> The simplest configuration for load balancing with nginx may look like the following: </p> <pre data-language=\"nginx\">\nhttp {\n    upstream myapp1 {\n        server srv1.example.com;\n        server srv2.example.com;\n        server srv3.example.com;\n    }\n\n    server {\n        listen 80;\n\n        location / {\n            proxy_pass http://myapp1;\n        }\n    }\n}\n</pre>\n\n<p> In the example above, there are 3 instances of the same application running on srv1-srv3. When the load balancing method is not specifically configured, it defaults to round-robin. All requests are <a href=\"ngx_http_proxy_module#proxy_pass\"> proxied</a> to the server group myapp1, and nginx applies HTTP load balancing to distribute the requests. </p>\n<p> Reverse proxy implementation in nginx includes load balancing for HTTP, HTTPS, FastCGI, uwsgi, SCGI, and memcached. </p>\n<p> To configure load balancing for HTTPS instead of HTTP, just use “https” as the protocol. </p>\n<p> When setting up load balancing for FastCGI, uwsgi, SCGI, or memcached, use <a href=\"ngx_http_fastcgi_module#fastcgi_pass\">fastcgi_pass</a>, <a href=\"ngx_http_uwsgi_module#uwsgi_pass\">uwsgi_pass</a>, <a href=\"ngx_http_scgi_module#scgi_pass\">scgi_pass</a>, and <a href=\"ngx_http_memcached_module#memcached_pass\">memcached_pass</a> directives respectively. </p>\n<h4 id=\"nginx_load_balancing_with_least_connected\">Least connected load balancing</h4>\n<p> Another load balancing discipline is least-connected. Least-connected allows controlling the load on application instances more fairly in a situation when some of the requests take longer to complete. </p>\n<p> With the least-connected load balancing, nginx will try not to overload a busy application server with excessive requests, distributing the new requests to a less busy server instead. </p>\n<p> Least-connected load balancing in nginx is activated when the <a href=\"ngx_http_upstream_module#least_conn\"> least_conn</a> directive is used as part of the server group configuration: </p> <pre data-language=\"nginx\">\n    upstream myapp1 {\n        least_conn;\n        server srv1.example.com;\n        server srv2.example.com;\n        server srv3.example.com;\n    }\n</pre>\n\n<h4 id=\"nginx_load_balancing_with_ip_hash\">Session persistence</h4>\n<p> Please note that with round-robin or least-connected load balancing, each subsequent client’s request can be potentially distributed to a different server. There is no guarantee that the same client will be always directed to the same server. </p>\n<p> If there is the need to tie a client to a particular application server — in other words, make the client’s session “sticky” or “persistent” in terms of always trying to select a particular server — the ip-hash load balancing mechanism can be used. </p>\n<p> With ip-hash, the client’s IP address is used as a hashing key to determine what server in a server group should be selected for the client’s requests. This method ensures that the requests from the same client will always be directed to the same server except when this server is unavailable. </p>\n<p> To configure ip-hash load balancing, just add the <a href=\"ngx_http_upstream_module#ip_hash\">ip_hash</a> directive to the server (upstream) group configuration: </p> <pre data-language=\"nginx\">\nupstream myapp1 {\n    ip_hash;\n    server srv1.example.com;\n    server srv2.example.com;\n    server srv3.example.com;\n}\n</pre>\n\n<h4 id=\"nginx_weighted_load_balancing\">Weighted load balancing</h4>\n<p> It is also possible to influence nginx load balancing algorithms even further by using server weights. </p>\n<p> In the examples above, the server weights are not configured which means that all specified servers are treated as equally qualified for a particular load balancing method. </p>\n<p> With the round-robin in particular it also means a more or less equal distribution of requests across the servers — provided there are enough requests, and when the requests are processed in a uniform manner and completed fast enough. </p>\n<p> When the <a href=\"ngx_http_upstream_module#server\">weight</a> parameter is specified for a server, the weight is accounted as part of the load balancing decision. </p> <pre data-language=\"nginx\">\n    upstream myapp1 {\n        server srv1.example.com weight=3;\n        server srv2.example.com;\n        server srv3.example.com;\n    }\n</pre>\n\n<p> With this configuration, every 5 new requests will be distributed across the application instances as the following: 3 requests will be directed to srv1, one request will go to srv2, and another one — to srv3. </p>\n<p> It is similarly possible to use weights with the least-connected and ip-hash load balancing in the recent versions of nginx. </p>\n<h4 id=\"nginx_load_balancing_health_checks\">Health checks</h4>\n<p> Reverse proxy implementation in nginx includes in-band (or passive) server health checks. If the response from a particular server fails with an error, nginx will mark this server as failed, and will try to avoid selecting this server for subsequent inbound requests for a while. </p>\n<p> The <a href=\"ngx_http_upstream_module#server\">max_fails</a> directive sets the number of consecutive unsuccessful attempts to communicate with the server that should happen during <a href=\"ngx_http_upstream_module#server\">fail_timeout</a>. By default, <a href=\"ngx_http_upstream_module#server\">max_fails</a> is set to 1. When it is set to 0, health checks are disabled for this server. The <a href=\"ngx_http_upstream_module#server\">fail_timeout</a> parameter also defines how long the server will be marked as failed. After <a href=\"ngx_http_upstream_module#server\">fail_timeout</a> interval following the server failure, nginx will start to gracefully probe the server with the live client’s requests. If the probes have been successful, the server is marked as a live one. </p>\n<h4 id=\"nginx_load_balancing_additional_information\">Further reading</h4>\n<p> In addition, there are more directives and parameters that control server load balancing in nginx, e.g. <a href=\"ngx_http_proxy_module#proxy_next_upstream\">proxy_next_upstream</a>, <a href=\"ngx_http_upstream_module#server\">backup</a>, <a href=\"ngx_http_upstream_module#server\">down</a>, and <a href=\"ngx_http_upstream_module#keepalive\">keepalive</a>. For more information please check our <a href=\"../index\">reference documentation</a>. </p>\n<p> Last but not least, <a href=\"https://www.nginx.com/products/application-load-balancing/\"> application load balancing</a>, <a href=\"https://www.nginx.com/products/application-health-checks/\"> application health checks</a>, <a href=\"https://www.nginx.com/products/live-activity-monitoring/\"> activity monitoring</a> and <a href=\"https://www.nginx.com/products/on-the-fly-reconfiguration/\"> on-the-fly reconfiguration</a> of server groups are available as part of our paid NGINX Plus subscriptions. </p>\n<p> The following articles describe load balancing with NGINX Plus in more detail: </p> <ul> <li> <a href=\"https://www.nginx.com/blog/load-balancing-with-nginx-plus/\"> Load Balancing with NGINX and NGINX Plus</a> </li> <li> <a href=\"https://www.nginx.com/blog/load-balancing-with-nginx-plus-part2/\"> Load Balancing with NGINX and NGINX Plus part 2</a> </li> </ul>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/load_balancing.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/load_balancing.html</a>\n  </p>\n</div>\n","syntax":"<h1>Configuration file measurement units</h1>\n<p> Sizes can be specified in bytes, kilobytes (suffixes <code>k</code> and <code>K</code>) or megabytes (suffixes <code>m</code> and <code>M</code>), for example, “<code>1024</code>”, “<code>8k</code>”, “<code>1m</code>”. </p>\n<p> Time intervals can be specified in milliseconds, seconds, minutes, hours, days and so on, using the following suffixes: </p>\n<table width=\"30%\"> <tr>\n<td width=\"20%\">ms</td>\n<td>milliseconds</td>\n</tr> <tr>\n<td width=\"20%\">s</td>\n<td>seconds</td>\n</tr> <tr>\n<td width=\"20%\">m</td>\n<td>minutes</td>\n</tr> <tr>\n<td width=\"20%\">h</td>\n<td>hours</td>\n</tr> <tr>\n<td width=\"20%\">d</td>\n<td>days</td>\n</tr> <tr>\n<td width=\"20%\">w</td>\n<td>weeks</td>\n</tr> <tr>\n<td width=\"20%\">M</td>\n<td>months, 30 days</td>\n</tr> <tr>\n<td width=\"20%\">y</td>\n<td>years, 365 days</td>\n</tr> </table> <p> Multiple units can be combined in a single value by specifying them in the order from the most to the least significant, and optionally separated by whitespace. For example, “<code>1h 30m</code>” specifies the same time as “<code>90m</code>” or “<code>5400s</code>”. A value without a suffix means seconds. It is recommended to always specify a suffix. </p>\n<p> Some of the time intervals can be specified only with a seconds resolution. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/syntax.html\" class=\"_attribution-link\">https://nginx.org/en/docs/syntax.html</a>\n  </p>\n</div>\n","http/request_processing":"<h1>How nginx processes a request</h1>\n<ul>\n<li><a href=\"#how_to_prevent_undefined_server_names\">How to prevent processing requests with undefined server names</a></li>\n<li><a href=\"#mixed_name_ip_based_servers\">Mixed name-based and IP-based virtual servers</a></li>\n<li><a href=\"#simple_php_site_configuration\">A simple PHP site configuration</a></li>\n</ul>\n<h4>Name-based virtual servers</h4>\n<p> nginx first decides which <i>server</i> should process the request. Let’s start with a simple configuration where all three virtual servers listen on port *:80: </p> <pre data-language=\"nginx\">\nserver {\n    listen      80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.com www.example.com;\n    ...\n}\n</pre>\n\n<p> In this configuration nginx tests only the request’s header field “Host” to determine which server the request should be routed to. If its value does not match any server name, or the request does not contain this header field at all, then nginx will route the request to the default server for this port. In the configuration above, the default server is the first one — which is nginx’s standard default behaviour. It can also be set explicitly which server should be default, with the <code>default_server</code> parameter in the <a href=\"ngx_http_core_module#listen\">listen</a> directive: </p> <pre data-language=\"nginx\">\nserver {\n    listen      80 <b>default_server</b>;\n    server_name example.net www.example.net;\n    ...\n}\n</pre>\n <blockquote class=\"note\"> The <code>default_server</code> parameter has been available since version 0.8.21. In earlier versions the <code>default</code> parameter should be used instead. </blockquote>\n<p> Note that the default server is a property of the listen port and not of the server name. More about this later. </p>\n<h4 id=\"how_to_prevent_undefined_server_names\">How to prevent processing requests with undefined server names</h4>\n<p> If requests without the “Host” header field should not be allowed, a server that just drops the requests can be defined: </p> <pre data-language=\"nginx\">\nserver {\n    listen      80;\n    server_name \"\";\n    return      444;\n}\n</pre>\n<p> Here, the server name is set to an empty string that will match requests without the “Host” header field, and a special nginx’s non-standard code 444 is returned that closes the connection. </p> <blockquote class=\"note\"> Since version 0.8.48, this is the default setting for the server name, so the <code>server_name \"\"</code> can be omitted. In earlier versions, the machine’s <i>hostname</i> was used as a default server name. </blockquote>\n\n<h4 id=\"mixed_name_ip_based_servers\">Mixed name-based and IP-based virtual servers</h4>\n<p> Let’s look at a more complex configuration where some virtual servers listen on different addresses: </p> <pre data-language=\"nginx\">\nserver {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80;\n    server_name example.com www.example.com;\n    ...\n}\n</pre>\n<p> In this configuration, nginx first tests the IP address and port of the request against the <a href=\"ngx_http_core_module#listen\">listen</a> directives of the <a href=\"ngx_http_core_module#server\">server</a> blocks. It then tests the “Host” header field of the request against the <a href=\"ngx_http_core_module#server_name\">server_name</a> entries of the <a href=\"ngx_http_core_module#server\">server</a> blocks that matched the IP address and port. If the server name is not found, the request will be processed by the default server. For example, a request for <code>www.example.com</code> received on the 192.168.1.1:80 port will be handled by the default server of the 192.168.1.1:80 port, i.e., by the first server, since there is no <code>www.example.com</code> defined for this port. </p>\n<p> As already stated, a default server is a property of the listen port, and different default servers may be defined for different ports: </p> <pre data-language=\"nginx\">\nserver {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80 <b>default_server</b>;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80 <b>default_server</b>;\n    server_name example.com www.example.com;\n    ...\n}\n</pre>\n\n<h4 id=\"simple_php_site_configuration\">A simple PHP site configuration</h4>\n<p> Now let’s look at how nginx chooses a <i>location</i> to process a request for a typical, simple PHP site: </p> <pre data-language=\"nginx\">\nserver {\n    listen      80;\n    server_name example.org www.example.org;\n    root        /data/www;\n\n    location / {\n        index   index.html index.php;\n    }\n\n    location ~* \\.(gif|jpg|png)$ {\n        expires 30d;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass  localhost:9000;\n        fastcgi_param SCRIPT_FILENAME\n                      $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n    }\n}\n</pre>\n\n<p> nginx first searches for the most specific prefix location given by literal strings regardless of the listed order. In the configuration above the only prefix location is “<code>/</code>” and since it matches any request it will be used as a last resort. Then nginx checks locations given by regular expression in the order listed in the configuration file. The first matching expression stops the search and nginx will use this location. If no regular expression matches a request, then nginx uses the most specific prefix location found earlier. </p>\n<p> Note that locations of all types test only a URI part of request line without arguments. This is done because arguments in the query string may be given in several ways, for example: </p> <pre data-language=\"nginx\">\n/index.php?user=john&amp;page=1\n/index.php?page=1&amp;user=john\n</pre>\n<p> Besides, anyone may request anything in the query string: </p> <pre data-language=\"nginx\">\n/index.php?page=1&amp;something+else&amp;user=john\n</pre>\n\n<p> Now let’s look at how requests would be processed in the configuration above: </p> <ul> <li> A request “<code>/logo.gif</code>” is matched by the prefix location “<code>/</code>” first and then by the regular expression “<code>\\.(gif|jpg|png)$</code>”, therefore, it is handled by the latter location. Using the directive “<code>root /data/www</code>” the request is mapped to the file <code>/data/www/logo.gif</code>, and the file is sent to the client. </li> <li> A request “<code>/index.php</code>” is also matched by the prefix location “<code>/</code>” first and then by the regular expression “<code>\\.(php)$</code>”. Therefore, it is handled by the latter location and the request is passed to a FastCGI server listening on localhost:9000. The <a href=\"ngx_http_fastcgi_module#fastcgi_param\">fastcgi_param</a> directive sets the FastCGI parameter <code>SCRIPT_FILENAME</code> to “<code>/data/www/index.php</code>”, and the FastCGI server executes the file. The variable <code>$document_root</code> is equal to the value of the <a href=\"ngx_http_core_module#root\">root</a> directive and the variable <code>$fastcgi_script_name</code> is equal to the request URI, i.e. “<code>/index.php</code>”. </li> <li> A request “<code>/about.html</code>” is matched by the prefix location “<code>/</code>” only, therefore, it is handled in this location. Using the directive “<code>root /data/www</code>” the request is mapped to the file <code>/data/www/about.html</code>, and the file is sent to the client. </li> <li> Handling a request “<code>/</code>” is more complex. It is matched by the prefix location “<code>/</code>” only, therefore, it is handled by this location. Then the <a href=\"ngx_http_index_module#index\">index</a> directive tests for the existence of index files according to its parameters and the “<code>root /data/www</code>” directive. If the file <code>/data/www/index.html</code> does not exist, and the file <code>/data/www/index.php</code> exists, then the directive does an internal redirect to “<code>/index.php</code>”, and nginx searches the locations again as if the request had been sent by a client. As we saw before, the redirected request will eventually be handled by the FastCGI server. </li> </ul>\n\n<table width=\"100%\"><tr><td align=\"right\">written by Igor Sysoev<br>edited by Brian Mercer<br>\n</td></tr></table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/request_processing.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/request_processing.html</a>\n  </p>\n</div>\n","configure":"<h1>Building nginx from Sources</h1>\n<p> The build is configured using the <code>configure</code> command. It defines various aspects of the system, including the methods nginx is allowed to use for connection processing. At the end it creates a <code>Makefile</code>. The <code>configure</code> command supports the following parameters: </p> <ul class=\"compact\"> <li> <p> <code>--prefix=<code><i>path</i></code></code> — defines a directory that will keep server files. This same directory will also be used for all relative paths set by <code>configure</code> (except for paths to libraries sources) and in the <code>nginx.conf</code> configuration file. It is set to the <code>/usr/local/nginx</code> directory by default. </p> </li> <li> <p> <code>--sbin-path=<code><i>path</i></code></code> — sets the name of an nginx executable file. This name is used only during installation. By default the file is named <code><code><i>prefix</i></code>/sbin/nginx</code>. </p> </li> <li> <p> <code>--conf-path=<code><i>path</i></code></code> — sets the name of an <code>nginx.conf</code> configuration file. If needs be, nginx can always be started with a different configuration file, by specifying it in the command-line parameter <nobr><code>-c <code><i>file</i></code></code></nobr>. By default the file is named <code><code><i>prefix</i></code>/conf/nginx.conf</code>. </p> </li> <li> <p> <code>--pid-path=<code><i>path</i></code></code> — sets the name of an nginx.pid file that will store the process ID of the main process. After installation, the file name can always be changed in the <code>nginx.conf</code> configuration file using the <a href=\"ngx_core_module#pid\">pid</a> directive. By default the file is named <code><code><i>prefix</i></code>/logs/nginx.pid</code>. </p> </li> <li> <p> <code>--error-log-path=<code><i>path</i></code></code> — sets the name of the primary error, warnings, and diagnostic file. After installation, the file name can always be changed in the <code>nginx.conf</code> configuration file using the <a href=\"ngx_core_module#error_log\">error_log</a> directive. By default the file is named <code><code><i>prefix</i></code>/logs/error.log</code>. </p> </li> <li> <p> <code>--http-log-path=<code><i>path</i></code></code> — sets the name of the primary request log file of the HTTP server. After installation, the file name can always be changed in the <code>nginx.conf</code> configuration file using the <a href=\"http/ngx_http_log_module#access_log\">access_log</a> directive. By default the file is named <code><code><i>prefix</i></code>/logs/access.log</code>. </p> </li> <li> <p> <code>--user=<code><i>name</i></code></code> — sets the name of an unprivileged user whose credentials will be used by worker processes. After installation, the name can always be changed in the <code>nginx.conf</code> configuration file using the <a href=\"ngx_core_module#user\">user</a> directive. The default user name is nobody. </p> </li> <li> <p> <code>--group=<code><i>name</i></code></code> — sets the name of a group whose credentials will be used by worker processes. After installation, the name can always be changed in the <code>nginx.conf</code> configuration file using the <a href=\"ngx_core_module#user\">user</a> directive. By default, a group name is set to the name of an unprivileged user. </p> </li> <li> <p> <code>--with-select_module</code><br> <code>--without-select_module</code> — enables or disables building a module that allows the server to work with the <code>select()</code> method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll. </p> </li> <li> <p> <code>--with-poll_module</code><br> <code>--without-poll_module</code> — enables or disables building a module that allows the server to work with the <code>poll()</code> method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll. </p> </li> <li> <p> <code>--without-http_gzip_module</code> — disables building a module that <a href=\"http/ngx_http_gzip_module\">compresses responses</a> of an HTTP server. The zlib library is required to build and run this module. </p> </li> <li> <p> <code>--without-http_rewrite_module</code> — disables building a module that allows an HTTP server to <a href=\"http/ngx_http_rewrite_module\">redirect requests and change URI of requests</a>. The PCRE library is required to build and run this module. </p> </li> <li> <p> <code>--without-http_proxy_module</code> — disables building an HTTP server <a href=\"http/ngx_http_proxy_module\">proxying module</a>. </p> </li> <li> <p> <code>--with-http_ssl_module</code> — enables building a module that adds the <a href=\"http/ngx_http_ssl_module\">HTTPS protocol support</a> to an HTTP server. This module is not built by default. The OpenSSL library is required to build and run this module. </p> </li> <li> <p> <code>--with-pcre=<code><i>path</i></code></code> — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.39) needs to be downloaded from the <a href=\"http://www.pcre.org\">PCRE</a> site and extracted. The rest is done by nginx’s <code>./configure</code> and <code>make</code>. The library is required for regular expressions support in the <a href=\"http/ngx_http_core_module#location\">location</a> directive and for the <a href=\"http/ngx_http_rewrite_module\">ngx_http_rewrite_module</a> module. </p> </li> <li> <p> <code>--with-pcre-jit</code> — builds the PCRE library with “just-in-time compilation” support (1.1.12, the <a href=\"ngx_core_module#pcre_jit\">pcre_jit</a> directive). </p> </li> <li> <p> <code>--with-zlib=<code><i>path</i></code></code> — sets the path to the sources of the zlib library. The library distribution (version 1.1.3 — 1.2.8) needs to be downloaded from the <a href=\"http://zlib.net\">zlib</a> site and extracted. The rest is done by nginx’s <code>./configure</code> and <code>make</code>. The library is required for the <a href=\"http/ngx_http_gzip_module\">ngx_http_gzip_module</a> module. </p> </li> <li> <p> <code>--with-cc-opt=<code><i>parameters</i></code></code> — sets additional parameters that will be added to the CFLAGS variable. When using the system PCRE library under FreeBSD, <code>--with-cc-opt=\"-I /usr/local/include\"</code> should be specified. If the number of files supported by <code>select()</code> needs to be increased it can also be specified here such as this: <code>--with-cc-opt=\"-D FD_SETSIZE=2048\"</code>. </p> </li> <li> <p> <code>--with-ld-opt=<code><i>parameters</i></code></code> — sets additional parameters that will be used during linking. When using the system PCRE library under FreeBSD, <code>--with-ld-opt=\"-L /usr/local/lib\"</code> should be specified. </p> </li> </ul>\n\n<p> Example of parameters usage (all of this needs to be typed in one line): </p> <pre data-language=\"nginx\">\n./configure\n    --sbin-path=/usr/local/nginx/nginx\n    --conf-path=/usr/local/nginx/nginx.conf\n    --pid-path=/usr/local/nginx/nginx.pid\n    --with-http_ssl_module\n    --with-pcre=../pcre-8.39\n    --with-zlib=../zlib-1.2.8\n</pre>\n\n<p> After configuration, nginx is compiled and installed using <code>make</code>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/configure.html\" class=\"_attribution-link\">https://nginx.org/en/docs/configure.html</a>\n  </p>\n</div>\n","events":"<h1>Connection processing methods</h1>\n<p> nginx supports a variety of connection processing methods. The availability of a particular method depends on the platform used. On platforms that support several methods nginx will normally select the most efficient method automatically. However, if needed, a connection processing method can be selected explicitly with the <a href=\"ngx_core_module#use\">use</a> directive. </p>\n<p> The following connection processing methods are supported: </p> <ul class=\"compact\"> <li id=\"select\"> <p> <code>select</code> — standard method. The supporting module is built automatically on platforms that lack more efficient methods. The <code>--with-select_module</code> and <code>--without-select_module</code> configuration parameters can be used to forcibly enable or disable the build of this module. </p> </li> <li id=\"poll\"> <p> <code>poll</code> — standard method. The supporting module is built automatically on platforms that lack more efficient methods. The <code>--with-poll_module</code> and <code>--without-poll_module</code> configuration parameters can be used to forcibly enable or disable the build of this module. </p> </li> <li id=\"kqueue\"> <p> <code>kqueue</code> — efficient method used on FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0, and Mac OS X. </p> </li> <li id=\"epoll\"> <p> <code>epoll</code> — efficient method used on Linux 2.6+. </p> <blockquote class=\"note\"> Some older distributions like SuSE 8.2 provide patches that add epoll support to 2.4 kernels. </blockquote>\n </li> <li id=\"devpoll\"> <p> <code>/dev/poll</code> — efficient method used on Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+, and Tru64 UNIX 5.1A+. </p> </li> <li id=\"eventport\"> <p> <code>eventport</code> — event ports, efficient method used on Solaris 10. </p> </li> </ul>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/events.html\" class=\"_attribution-link\">https://nginx.org/en/docs/events.html</a>\n  </p>\n</div>\n","hash":"<h1>Setting up hashes</h1>\n<p> To quickly process static sets of data such as server names, <a href=\"http/ngx_http_map_module#map\">map</a> directive’s values, MIME types, names of request header strings, nginx uses hash tables. During the start and each re-configuration nginx selects the minimum possible sizes of hash tables such that the bucket size that stores keys with identical hash values does not exceed the configured parameter (hash bucket size). The size of a table is expressed in buckets. The adjustment is continued until the table size exceeds the hash max size parameter. Most hashes have the corresponding directives that allow changing these parameters, for example, for the server names hash they are <a href=\"http/ngx_http_core_module#server_names_hash_max_size\">server_names_hash_max_size</a> and <a href=\"http/ngx_http_core_module#server_names_hash_bucket_size\">server_names_hash_bucket_size</a>. </p>\n<p> The hash bucket size parameter is aligned to the size that is a multiple of the processor’s cache line size. This speeds up key search in a hash on modern processors by reducing the number of memory accesses. If hash bucket size is equal to one processor’s cache line size then the number of memory accesses during the key search will be two in the worst case — first to compute the bucket address, and second during the key search inside the bucket. Therefore, if nginx emits the message requesting to increase either hash max size or hash bucket size then the first parameter should first be increased. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/hash.html\" class=\"_attribution-link\">https://nginx.org/en/docs/hash.html</a>\n  </p>\n</div>\n","debugging_log":"<h1>A debugging log</h1>\n<ul>\n<li><a href=\"#clients\">Debugging log for selected clients</a></li>\n<li><a href=\"#memory\">Logging to a cyclic memory buffer</a></li>\n</ul>\n<p> To enable a debugging log, nginx needs to be configured to support debugging during the build: </p> <pre data-language=\"nginx\">\n./configure --with-debug ...\n</pre>\n<p> Then the <code>debug</code> level should be set with the <a href=\"ngx_core_module#error_log\">error_log</a> directive: </p> <pre data-language=\"nginx\">\nerror_log /path/to/log debug;\n</pre>\n<p> To verify that nginx is configured to support debugging, run the <code>nginx -V</code> command: </p> <pre data-language=\"nginx\">\nconfigure arguments: --with-debug ...\n</pre>\n<p> Pre-built <a href=\"https://nginx.org/en/linux_packages.html\">Linux</a> packages provide out-of-the-box support for debugging log with the <code>nginx-debug</code> binary (1.9.8) which can be run using commands </p> <pre data-language=\"nginx\">\nservice nginx stop\nservice nginx-debug start\n</pre>\n<p> and then set the <code>debug</code> level. The nginx binary version for Windows is always built with the debugging log support, so only setting the <code>debug</code> level will suffice. </p>\n<p> Note that redefining the log without also specifying the <code>debug</code> level will disable the debugging log. In the example below, redefining the log on the <a href=\"http/ngx_http_core_module#server\">server</a> level disables the debugging log for this server: </p> <pre data-language=\"nginx\">\nerror_log /path/to/log debug;\n\nhttp {\n    server {\n        error_log /path/to/log;\n        ...\n</pre>\n<p> To avoid this, either the line redefining the log should be commented out, or the <code>debug</code> level specification should also be added: </p> <pre data-language=\"nginx\">\nerror_log /path/to/log debug;\n\nhttp {\n    server {\n        error_log /path/to/log debug;\n        ...\n</pre>\n\n<h4 id=\"clients\">Debugging log for selected clients</h4>\n<p> It is also possible to enable the debugging log for <a href=\"ngx_core_module#debug_connection\">selected client addresses</a> only: </p> <pre data-language=\"nginx\">\nerror_log /path/to/log;\n\nevents {\n    debug_connection 192.168.1.1;\n    debug_connection 192.168.10.0/24;\n}\n</pre>\n\n<h4 id=\"memory\">Logging to a cyclic memory buffer</h4>\n<p> The debugging log can be written to a cyclic memory buffer: </p> <pre data-language=\"nginx\">\nerror_log memory:32m debug;\n</pre>\n<p> Logging to the memory buffer on the <code>debug</code> level does not have significant impact on performance even under high load. In this case, the log can be extracted using a <code>gdb</code> script like the following one: </p> <pre data-language=\"nginx\">\nset $log = ngx_cycle-&gt;log\n\nwhile $log-&gt;writer != ngx_log_memory_writer\n    set $log = $log-&gt;next\nend\n\nset $buf = (ngx_log_memory_buf_t *) $log-&gt;wdata\ndump binary memory debug_log.txt $buf-&gt;start $buf-&gt;end\n</pre>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/debugging_log.html\" class=\"_attribution-link\">https://nginx.org/en/docs/debugging_log.html</a>\n  </p>\n</div>\n","syslog":"<h1>Logging to syslog</h1>\n<p> The <a href=\"ngx_core_module#error_log\">error_log</a> and <a href=\"http/ngx_http_log_module#access_log\">access_log</a> directives support logging to syslog. The following parameters configure logging to syslog: </p> <dl class=\"compact\"> <dt>\n<code>server=</code><code><i>address</i></code>\n</dt> <dd> Defines the address of a syslog server. The address can be specified as a domain name or IP address, with an optional port, or as a UNIX-domain socket path specified after the “<code>unix:</code>” prefix. If port is not specified, the UDP port 514 is used. If a domain name resolves to several IP addresses, the first resolved address is used. </dd> <dt>\n<code>facility=</code><code><i>string</i></code>\n</dt> <dd> Sets facility of syslog messages, as defined in <a href=\"http://tools.ietf.org/html/rfc3164#section-4.1.1\">RFC 3164</a>. Facility can be one of “<code>kern</code>”, “<code>user</code>”, “<code>mail</code>”, “<code>daemon</code>”, “<code>auth</code>”, “<code>intern</code>”, “<code>lpr</code>”, “<code>news</code>”, “<code>uucp</code>”, “<code>clock</code>”, “<code>authpriv</code>”, “<code>ftp</code>”, “<code>ntp</code>”, “<code>audit</code>”, “<code>alert</code>”, “<code>cron</code>”, “<code>local0</code>”..“<code>local7</code>”. Default is “<code>local7</code>”. </dd> <dt>\n<code>severity=</code><code><i>string</i></code>\n</dt> <dd> Sets severity of syslog messages for <a href=\"http/ngx_http_log_module#access_log\">access_log</a>, as defined in <a href=\"http://tools.ietf.org/html/rfc3164#section-4.1.1\">RFC 3164</a>. Possible values are the same as for the second parameter (level) of the <a href=\"ngx_core_module#error_log\">error_log</a> directive. Default is “<code>info</code>”. <blockquote class=\"note\"> Severity of error messages is determined by nginx, thus the parameter is ignored in the <code>error_log</code> directive. </blockquote> </dd> <dt>\n<code>tag=</code><code><i>string</i></code>\n</dt> <dd> Sets the tag of syslog messages. Default is “<code>nginx</code>”. </dd> <dt><code>nohostname</code></dt> <dd> Disables adding the “hostname” field into the syslog message header (1.9.7). </dd> </dl>\n<p> Example syslog configuration: </p> <pre data-language=\"nginx\">\nerror_log syslog:server=192.168.1.1 debug;\n\naccess_log syslog:server=unix:/var/log/nginx.sock,nohostname;\naccess_log syslog:server=[2001:db8::1]:12345,facility=local7,tag=nginx,severity=info combined;\n</pre>\n\n <blockquote class=\"note\"> Logging to syslog is available since version 1.7.1. As part of our <a href=\"http://nginx.com/products/\">commercial subscription</a> logging to syslog is available since version 1.5.3. </blockquote>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/syslog.html\" class=\"_attribution-link\">https://nginx.org/en/docs/syslog.html</a>\n  </p>\n</div>\n","switches":"<h1>Command-line parameters</h1>\n<p> nginx supports the following command-line parameters: </p> <ul class=\"compact\"> <li> <code>-?</code> | <code>-h</code> — print help for command-line parameters. </li> <li> <code>-c <code><i>file</i></code></code> — use an alternative configuration <code><i>file</i></code> instead of a default file. </li> <li> <code>-g <code><i>directives</i></code></code> — set <a href=\"ngx_core_module\">global configuration directives</a>, for example, <pre data-language=\"nginx\">\nnginx -g \"pid /var/run/nginx.pid; worker_processes `sysctl -n hw.ncpu`;\"\n</pre> </li> <li> <code>-p <code><i>prefix</i></code></code> — set nginx path prefix, i.e. a directory that will keep server files (default value is <code><i>/usr/local/nginx</i></code>). </li> <li> <code>-q</code> — suppress non-error messages during configuration testing. </li> <li> <code>-s <code><i>signal</i></code></code> — send a <i>signal</i> to the master process. The argument <i>signal</i> can be one of: <ul class=\"compact\"> <li> <code>stop</code> — shut down quickly </li> <li> <code>quit</code> — shut down gracefully </li> <li> <code>reload</code> — reload configuration, start the new worker process with a new configuration, gracefully shut down old worker processes. </li> <li> <code>reopen</code> — reopen log files </li> </ul> </li> <li> <code>-t</code> — test the configuration file: nginx checks the configuration for correct syntax, and then tries to open files referred in the configuration. </li> <li> <code>-T</code> — same as <code>-t</code>, but additionally dump configuration files to standard output (1.9.2). </li> <li> <code>-v</code> — print nginx version. </li> <li> <code>-V</code> — print nginx version, compiler version, and configure parameters. </li> </ul>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/switches.html\" class=\"_attribution-link\">https://nginx.org/en/docs/switches.html</a>\n  </p>\n</div>\n","windows":"<h1>nginx for Windows</h1>\n<ul>\n<li><a href=\"#known_issues\">Known issues</a></li>\n<li><a href=\"#possible_future_enhancements\">Possible future enhancements</a></li>\n</ul>\n<p> Version of nginx for Windows uses the native Win32 API (not the Cygwin emulation layer). Only the <code>select()</code> connection processing method is currently used, so high performance and scalability should not be expected. Due to this and some other known issues version of nginx for Windows is considered to be a <i>beta</i> version. At this time, it provides almost the same functionality as a UNIX version of nginx except for XSLT filter, image filter, GeoIP module, and embedded Perl language. </p>\n<p> To install nginx/Windows, <a href=\"https://nginx.org/en/download.html\">download</a> the latest mainline version distribution (1.11.3), since the mainline branch of nginx contains all known fixes. Then unpack the distribution, go to the nginx-1.11.3 directory, and run <code>nginx</code>. Here is an example for the drive C: root directory: </p> <pre data-language=\"nginx\">\ncd c:\\\nunzip nginx-1.11.3.zip\ncd nginx-1.11.3\nstart nginx\n</pre>\n<p> Run the <code>tasklist</code> command-line utility to see nginx processes: </p> <pre data-language=\"nginx\">\nC:\\nginx-1.11.3&gt;tasklist /fi \"imagename eq nginx.exe\"\n\nImage Name           PID Session Name     Session#    Mem Usage\n=============== ======== ============== ========== ============\nnginx.exe            652 Console                 0      2 780 K\nnginx.exe           1332 Console                 0      3 112 K\n</pre>\n<p> One of the processes is the master process and another is the worker process. If nginx does not start, look for the reason in the error log file <code>logs\\error.log</code>. If the log file has not been created, the reason for this should be reported in the Windows Event Log. If an error page is displayed instead of the expected page, also look for the reason in the <code>logs\\error.log</code> file. </p>\n<p> nginx/Windows uses the directory where it has been run as the prefix for relative paths in the configuration. In the example above, the prefix is <code>C:\\nginx-1.11.3\\</code>. Paths in a configuration file must be specified in UNIX-style using forward slashes: </p> <pre data-language=\"nginx\">\naccess_log   logs/site.log;\nroot         C:/web/html;\n</pre>\n\n<p> nginx/Windows runs as a standard console application (not a service), and it can be managed using the following commands: </p>\n<table width=\"100%\"> <tr> <td width=\"20%\">nginx -s stop</td> <td>fast shutdown</td> </tr> <tr> <td>nginx -s quit</td> <td>graceful shutdown</td> </tr> <tr> <td>nginx -s reload</td> <td> changing configuration, starting new worker processes with a new configuration, graceful shutdown of old worker processes </td> </tr> <tr> <td>nginx -s reopen</td> <td>re-opening log files</td> </tr> </table> <h4 id=\"known_issues\">Known issues</h4>\n<ul class=\"compact\"> <li> Although several workers can be started, only one of them actually does any work. </li> <li> A worker can handle no more than 1024 simultaneous connections. </li> <li> The cache and other modules which require shared memory support do not work on Windows Vista and later versions due to address space layout randomization being enabled in these Windows versions. </li> <li> The UDP proxy functionality is not supported. </li> </ul>\n<h4 id=\"possible_future_enhancements\">Possible future enhancements</h4>\n<ul class=\"compact\"> <li> Running as a service. </li> <li> Using the I/O completion ports as a connection processing method. </li> <li> Using multiple worker threads inside a single worker process. </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/windows.html\" class=\"_attribution-link\">https://nginx.org/en/docs/windows.html</a>\n  </p>\n</div>\n","http/server_names":"<h1>Server names</h1>\n<ul>\n<li><a href=\"#wildcard_names\">Wildcard names</a></li>\n<li><a href=\"#regex_names\">Regular expressions names</a></li>\n<li><a href=\"#miscellaneous_names\">Miscellaneous names</a></li>\n<li><a href=\"#optimization\">Optimization</a></li>\n<li><a href=\"#compatibility\">Compatibility</a></li>\n</ul>\n<p> Server names are defined using the <a href=\"ngx_http_core_module#server_name\">server_name</a> directive and determine which <a href=\"ngx_http_core_module#server\">server</a> block is used for a given request. See also “<a href=\"request_processing\">How nginx processes a request</a>”. They may be defined using exact names, wildcard names, or regular expressions: </p> <pre data-language=\"nginx\">\nserver {\n    listen       80;\n    server_name  example.org  www.example.org;\n    ...\n}\n\nserver {\n    listen       80;\n    server_name  *.example.org;\n    ...\n}\n\nserver {\n    listen       80;\n    server_name  mail.*;\n    ...\n}\n\nserver {\n    listen       80;\n    server_name  ~^(?&lt;user&gt;.+)\\.example\\.net$;\n    ...\n}\n</pre>\n\n<p> When searching for a virtual server by name, if name matches more than one of the specified variants, e.g. both wildcard name and regular expression match, the first matching variant will be chosen, in the following order of precedence: </p> <ol class=\"compact\"> <li> exact name </li> <li> longest wildcard name starting with an asterisk, e.g. “<code>*.example.org</code>” </li> <li> longest wildcard name ending with an asterisk, e.g. “<code>mail.*</code>” </li> <li> first matching regular expression (in order of appearance in a configuration file) </li> </ol>\n\n<h4 id=\"wildcard_names\">Wildcard names</h4>\n<p> A wildcard name may contain an asterisk only on the name’s start or end, and only on a dot border. The names “<code>www.*.example.org</code>” and “<code>w*.example.org</code>” are invalid. However, these names can be specified using regular expressions, for example, “<code>~^www\\..+\\.example\\.org$</code>” and “<code>~^w.*\\.example\\.org$</code>”. An asterisk can match several name parts. The name “<code>*.example.org</code>” matches not only <code>www.example.org</code> but <code>www.sub.example.org</code> as well. </p>\n<p> A special wildcard name in the form “<code>.example.org</code>” can be used to match both the exact name “<code>example.org</code>” and the wildcard name “<code>*.example.org</code>”. </p>\n<h4 id=\"regex_names\">Regular expressions names</h4>\n<p> The regular expressions used by nginx are compatible with those used by the Perl programming language (PCRE). To use a regular expression, the server name must start with the tilde character: </p> <pre data-language=\"nginx\">\nserver_name  ~^www\\d+\\.example\\.net$;\n</pre>\n<p> otherwise it will be treated as an exact name, or if the expression contains an asterisk, as a wildcard name (and most likely as an invalid one). Do not forget to set “<code>^</code>” and “<code>$</code>” anchors. They are not required syntactically, but logically. Also note that domain name dots should be escaped with a backslash. A regular expression containing the characters “<code>{</code>” and “<code>}</code>” should be quoted: </p> <pre data-language=\"nginx\">\nserver_name  \"~^(?&lt;name&gt;\\w\\d<b>{</b>1,3<b>}</b>+)\\.example\\.net$\";\n</pre>\n<p> otherwise nginx will fail to start and display the error message: </p> <pre data-language=\"nginx\">\ndirective \"server_name\" is not terminated by \";\" in ...\n</pre>\n<p> A named regular expression capture can be used later as a variable: </p> <pre data-language=\"nginx\">\nserver {\n    server_name   ~^(www\\.)?(<b>?&lt;domain&gt;</b>.+)$;\n\n    location / {\n        root   /sites/<b>$domain</b>;\n    }\n}\n</pre>\n<p> The PCRE library supports named captures using the following syntax: </p>\n<table width=\"100%\"> <tr> <td><code>?&lt;<code><i>name</i></code>&gt;</code></td> <td>Perl 5.10 compatible syntax, supported since PCRE-7.0</td> </tr> <tr> <td><code>?'<code><i>name</i></code>'</code></td> <td>Perl 5.10 compatible syntax, supported since PCRE-7.0</td> </tr> <tr> <td><code>?P&lt;<code><i>name</i></code>&gt;</code></td> <td>Python compatible syntax, supported since PCRE-4.0</td> </tr> </table> If nginx fails to start and displays the error message: <pre data-language=\"nginx\">\npcre_compile() failed: unrecognized character after (?&lt; in ...\n</pre>\n<p> this means that the PCRE library is old and the syntax “<code>?P&lt;<code><i>name</i></code>&gt;</code>” should be tried instead. The captures can also be used in digital form: </p> <pre data-language=\"nginx\">\nserver {\n    server_name   ~^(www\\.)?(.+)$;\n\n    location / {\n        root   /sites/<b>$2</b>;\n    }\n}\n</pre>\n<p> However, such usage should be limited to simple cases (like the above), since the digital references can easily be overwritten. </p>\n<h4 id=\"miscellaneous_names\">Miscellaneous names</h4>\n<p> There are some server names that are treated specially. </p>\n<p> If it is required to process requests without the “Host” header field in a <a href=\"ngx_http_core_module#server\">server</a> block which is not the default, an empty name should be specified: </p> <pre data-language=\"nginx\">\nserver {\n    listen       80;\n    server_name  example.org  www.example.org  \"\";\n    ...\n}\n</pre>\n\n<p> If no <a href=\"ngx_http_core_module#server_name\">server_name</a> is defined in a <a href=\"ngx_http_core_module#server\">server</a> block then nginx uses the empty name as the server name. </p> <blockquote class=\"note\"> nginx versions up to 0.8.48 used the machine’s hostname as the server name in this case. </blockquote>\n\n<p> If a server name is defined as “<code>$hostname</code>” (0.9.4), the machine’s hostname is used. </p>\n<p> If someone makes a request using an IP address instead of a server name, the “Host” request header field will contain the IP address and the request can be handled using the IP address as the server name: </p> <pre data-language=\"nginx\">\nserver {\n    listen       80;\n    server_name  example.org\n                 www.example.org\n                 \"\"\n                 <b>192.168.1.1</b>\n                 ;\n    ...\n}\n</pre>\n\n<p> In catch-all server examples the strange name “<code>_</code>” can be seen: </p> <pre data-language=\"nginx\">\nserver {\n    listen       80  default_server;\n    server_name  _;\n    return       444;\n}\n</pre>\n<p> There is nothing special about this name, it is just one of a myriad of invalid domain names which never intersect with any real name. Other invalid names like “<code>--</code>” and “<code>!@#</code>” may equally be used. </p>\n<p> nginx versions up to 0.6.25 supported the special name “<code>*</code>” which was erroneously interpreted to be a catch-all name. It never functioned as a catch-all or wildcard server name. Instead, it supplied the functionality that is now provided by the <a href=\"ngx_http_core_module#server_name_in_redirect\">server_name_in_redirect</a> directive. The special name “<code>*</code>” is now deprecated and the <a href=\"ngx_http_core_module#server_name_in_redirect\">server_name_in_redirect</a> directive should be used. Note that there is no way to specify the catch-all name or the default server using the <a href=\"ngx_http_core_module#server_name\">server_name</a> directive. This is a property of the <a href=\"ngx_http_core_module#listen\">listen</a> directive and not of the <a href=\"ngx_http_core_module#server_name\">server_name</a> directive. See also “<a href=\"request_processing\">How nginx processes a request</a>”. It is possible to define servers listening on ports *:80 and *:8080, and direct that one will be the default server for port *:8080, while the other will be the default for port *:80: </p> <pre data-language=\"nginx\">\nserver {\n    listen       80;\n    listen       8080  default_server;\n    server_name  example.net;\n    ...\n}\n\nserver {\n    listen       80  default_server;\n    listen       8080;\n    server_name  example.org;\n    ...\n}\n</pre>\n\n<h4 id=\"optimization\">Optimization</h4>\n<p> Exact names, wildcard names starting with an asterisk, and wildcard names ending with an asterisk are stored in three hash tables bound to the listen ports. The sizes of hash tables are optimized at the configuration phase so that a name can be found with the fewest CPU cache misses. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p>\n<p> The exact names hash table is searched first. If a name is not found, the hash table with wildcard names starting with an asterisk is searched. If the name is not found there, the hash table with wildcard names ending with an asterisk is searched. </p>\n<p> Searching wildcard names hash table is slower than searching exact names hash table because names are searched by domain parts. Note that the special wildcard form “<code>.example.org</code>” is stored in a wildcard names hash table and not in an exact names hash table. </p>\n<p> Regular expressions are tested sequentially and therefore are the slowest method and are non-scalable. </p>\n<p> For these reasons, it is better to use exact names where possible. For example, if the most frequently requested names of a server are <code>example.org</code> and <code>www.example.org</code>, it is more efficient to define them explicitly: </p> <pre data-language=\"nginx\">\nserver {\n    listen       80;\n    server_name  example.org  www.example.org  *.example.org;\n    ...\n}\n</pre>\n<p> than to use the simplified form: </p> <pre data-language=\"nginx\">\nserver {\n    listen       80;\n    server_name  .example.org;\n    ...\n}\n</pre>\n\n<p> If a large number of server names are defined, or unusually long server names are defined, tuning the <a href=\"ngx_http_core_module#server_names_hash_max_size\">server_names_hash_max_size</a> and <a href=\"ngx_http_core_module#server_names_hash_bucket_size\">server_names_hash_bucket_size</a> directives at the <i>http</i> level may become necessary. The default value of the <a href=\"ngx_http_core_module#server_names_hash_bucket_size\">server_names_hash_bucket_size</a> directive may be equal to 32, or 64, or another value, depending on CPU cache line size. If the default value is 32 and server name is defined as “<code>too.long.server.name.example.org</code>” then nginx will fail to start and display the error message: </p> <pre data-language=\"nginx\">\ncould not build the server_names_hash,\nyou should increase server_names_hash_bucket_size: 32\n</pre>\n<p> In this case, the directive value should be increased to the next power of two: </p> <pre data-language=\"nginx\">\nhttp {\n    server_names_hash_bucket_size  64;\n    ...\n</pre>\n<p> If a large number of server names are defined, another error message will appear: </p> <pre data-language=\"nginx\">\ncould not build the server_names_hash,\nyou should increase either server_names_hash_max_size: 512\nor server_names_hash_bucket_size: 32\n</pre>\n<p> In such a case, first try to set <a href=\"ngx_http_core_module#server_names_hash_max_size\">server_names_hash_max_size</a> to a number close to the number of server names. Only if this does not help, or if nginx’s start time is unacceptably long, try to increase <a href=\"ngx_http_core_module#server_names_hash_bucket_size\">server_names_hash_bucket_size</a>. </p>\n<p> If a server is the only server for a listen port, then nginx will not test server names at all (and will not build the hash tables for the listen port). However, there is one exception. If a server name is a regular expression with captures, then nginx has to execute the expression to get the captures. </p>\n<h4 id=\"compatibility\">Compatibility</h4>\n <ul class=\"compact\"> <li> The special server name “<code>$hostname</code>” has been supported since 0.9.4. </li> <li> A default server name value is an empty name “” since 0.8.48. </li> <li> Named regular expression server name captures have been supported since 0.8.25. </li> <li> Regular expression server name captures have been supported since 0.7.40. </li> <li> An empty server name “” has been supported since 0.7.12. </li> <li> A wildcard server name or regular expression has been supported for use as the first server name since 0.6.25. </li> <li> Regular expression server names have been supported since 0.6.7. </li> <li> Wildcard form <code>example.*</code> has been supported since 0.6.0. </li> <li> The special form <code>.example.org</code> has been supported since 0.3.18. </li> <li> Wildcard form <code>*.example.org</code> has been supported since 0.1.13. </li> </ul>\n\n<table width=\"100%\"><tr><td align=\"right\">written by Igor Sysoev<br>edited by Brian Mercer<br>\n</td></tr></table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/server_names.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/server_names.html</a>\n  </p>\n</div>\n","beginners_guide":"<h1>Beginner’s Guide</h1>\n<ul>\n<li><a href=\"#control\">Starting, Stopping, and Reloading Configuration</a></li>\n<li><a href=\"#conf_structure\">Configuration File’s Structure</a></li>\n<li><a href=\"#static\">Serving Static Content</a></li>\n<li><a href=\"#proxy\">Setting Up a Simple Proxy Server</a></li>\n<li><a href=\"#fastcgi\">Setting Up FastCGI Proxying</a></li>\n</ul>\n<p> This guide gives a basic introduction to nginx and describes some simple tasks that can be done with it. It is supposed that nginx is already installed on the reader’s machine. If it is not, see the <a href=\"install\">Installing nginx</a> page. This guide describes how to start and stop nginx, and reload its configuration, explains the structure of the configuration file and describes how to set up nginx to serve out static content, how to configure nginx as a proxy server, and how to connect it with a FastCGI application. </p>\n<p> nginx has one master process and several worker processes. The main purpose of the master process is to read and evaluate configuration, and maintain worker processes. Worker processes do actual processing of requests. nginx employs event-based model and OS-dependent mechanisms to efficiently distribute requests among worker processes. The number of worker processes is defined in the configuration file and may be fixed for a given configuration or automatically adjusted to the number of available CPU cores (see <a href=\"ngx_core_module#worker_processes\">worker_processes</a>). </p>\n<p> The way nginx and its modules work is determined in the configuration file. By default, the configuration file is named <code>nginx.conf</code> and placed in the directory <code>/usr/local/nginx/conf</code>, <code>/etc/nginx</code>, or <code>/usr/local/etc/nginx</code>. </p>\n<h4 id=\"control\">Starting, Stopping, and Reloading Configuration</h4>\n<p> To start nginx, run the executable file. Once nginx is started, it can be controlled by invoking the executable with the <code>-s</code> parameter. Use the following syntax: </p> <pre data-language=\"nginx\">\nnginx -s <i>signal</i>\n</pre>\n<p> Where <i>signal</i> may be one of the following: </p> <ul class=\"compact\"> <li> <code>stop</code> — fast shutdown </li> <li> <code>quit</code> — graceful shutdown </li> <li> <code>reload</code> — reloading the configuration file </li> <li> <code>reopen</code> — reopening the log files </li> </ul>\n<p> For example, to stop nginx processes with waiting for the worker processes to finish serving current requests, the following command can be executed: </p> <pre data-language=\"nginx\">\nnginx -s quit\n</pre>\n <blockquote class=\"note\">This command should be executed under the same user that started nginx.</blockquote>\n\n<p> Changes made in the configuration file will not be applied until the command to reload configuration is sent to nginx or it is restarted. To reload configuration, execute: </p> <pre data-language=\"nginx\">\nnginx -s reload\n</pre>\n\n<p> Once the master process receives the signal to reload configuration, it checks the syntax validity of the new configuration file and tries to apply the configuration provided in it. If this is a success, the master process starts new worker processes and sends messages to old worker processes, requesting them to shut down. Otherwise, the master process rolls back the changes and continues to work with the old configuration. Old worker processes, receiving a command to shut down, stop accepting new connections and continue to service current requests until all such requests are serviced. After that, the old worker processes exit. </p>\n<p> A signal may also be sent to nginx processes with the help of Unix tools such as the <code>kill</code> utility. In this case a signal is sent directly to a process with a given process ID. The process ID of the nginx master process is written, by default, to the <code>nginx.pid</code> in the directory <code>/usr/local/nginx/logs</code> or <code>/var/run</code>. For example, if the master process ID is 1628, to send the QUIT signal resulting in nginx’s graceful shutdown, execute: </p> <pre data-language=\"nginx\">\nkill -s QUIT 1628\n</pre>\n<p> For getting the list of all running nginx processes, the <code>ps</code> utility may be used, for example, in the following way: </p> <pre data-language=\"nginx\">\nps -ax | grep nginx\n</pre>\n<p> For more information on sending signals to nginx, see <a href=\"control\">Controlling nginx</a>. </p>\n<h4 id=\"conf_structure\">Configuration File’s Structure</h4>\n<p> nginx consists of modules which are controlled by directives specified in the configuration file. Directives are divided into simple directives and block directives. A simple directive consists of the name and parameters separated by spaces and ends with a semicolon (<code>;</code>). A block directive has the same structure as a simple directive, but instead of the semicolon it ends with a set of additional instructions surrounded by braces (<code>{</code> and <code>}</code>). If a block directive can have other directives inside braces, it is called a context (examples: <a href=\"ngx_core_module#events\">events</a>, <a href=\"http/ngx_http_core_module#http\">http</a>, <a href=\"http/ngx_http_core_module#server\">server</a>, and <a href=\"http/ngx_http_core_module#location\">location</a>). </p>\n<p> Directives placed in the configuration file outside of any contexts are considered to be in the <a href=\"ngx_core_module\">main</a> context. The <code>events</code> and <code>http</code> directives reside in the <code>main</code> context, <code>server</code> in <code>http</code>, and <code>location</code> in <code>server</code>. </p>\n<p> The rest of a line after the <code>#</code> sign is considered a comment. </p>\n<h4 id=\"static\">Serving Static Content</h4>\n<p> An important web server task is serving out files (such as images or static HTML pages). You will implement an example where, depending on the request, files will be served from different local directories: <code>/data/www</code> (which may contain HTML files) and <code>/data/images</code> (containing images). This will require editing of the configuration file and setting up of a <a href=\"http/ngx_http_core_module#server\">server</a> block inside the <a href=\"http/ngx_http_core_module#http\">http</a> block with two <a href=\"http/ngx_http_core_module#location\">location</a> blocks. </p>\n<p> First, create the <code>/data/www</code> directory and put an <code>index.html</code> file with any text content into it and create the <code>/data/images</code> directory and place some images in it. </p>\n<p> Next, open the configuration file. The default configuration file already includes several examples of the <code>server</code> block, mostly commented out. For now comment out all such blocks and start a new <code>server</code> block: </p> <pre data-language=\"nginx\">\nhttp {\n    server {\n    }\n}\n</pre>\n<p> Generally, the configuration file may include several <code>server</code> blocks <a href=\"http/request_processing\">distinguished</a> by ports on which they <a href=\"http/ngx_http_core_module#listen\">listen</a> to and by <a href=\"http/server_names\">server names</a>. Once nginx decides which <code>server</code> processes a request, it tests the URI specified in the request’s header against the parameters of the <code>location</code> directives defined inside the <code>server</code> block. </p>\n<p> Add the following <code>location</code> block to the <code>server</code> block: </p> <pre data-language=\"nginx\">\nlocation / {\n    root /data/www;\n}\n</pre>\n<p> This <code>location</code> block specifies the “<code>/</code>” prefix compared with the URI from the request. For matching requests, the URI will be added to the path specified in the <a href=\"http/ngx_http_core_module#root\">root</a> directive, that is, to <code>/data/www</code>, to form the path to the requested file on the local file system. If there are several matching <code>location</code> blocks nginx selects the one with the longest prefix. The <code>location</code> block above provides the shortest prefix, of length one, and so only if all other <code>location</code> blocks fail to provide a match, this block will be used. </p>\n<p> Next, add the second <code>location</code> block: </p> <pre data-language=\"nginx\">\nlocation /images/ {\n    root /data;\n}\n</pre>\n<p> It will be a match for requests starting with <code>/images/</code> (<code>location /</code> also matches such requests, but has shorter prefix). </p>\n<p> The resulting configuration of the <code>server</code> block should look like this: </p> <pre data-language=\"nginx\">\nserver {\n    location / {\n        root /data/www;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n</pre>\n<p> This is already a working configuration of a server that listens on the standard port 80 and is accessible on the local machine at <code>http://localhost/</code>. In response to requests with URIs starting with <code>/images/</code>, the server will send files from the <code>/data/images</code> directory. For example, in response to the <code>http://localhost/images/example.png</code> request nginx will send the <code>/data/images/example.png</code> file. If such file does not exist, nginx will send a response indicating the 404 error. Requests with URIs not starting with <code>/images/</code> will be mapped onto the <code>/data/www</code> directory. For example, in response to the <code>http://localhost/some/example.html</code> request nginx will send the <code>/data/www/some/example.html</code> file. </p>\n<p> To apply the new configuration, start nginx if it is not yet started or send the <code>reload</code> signal to the nginx’s master process, by executing: </p> <pre data-language=\"nginx\">\nnginx -s reload\n</pre>\n\n <blockquote class=\"note\"> In case something does not work as expected, you may try to find out the reason in <code>access.log</code> and <code>error.log</code> files in the directory <code>/usr/local/nginx/logs</code> or <code>/var/log/nginx</code>. </blockquote>\n\n<h4 id=\"proxy\">Setting Up a Simple Proxy Server</h4>\n<p> One of the frequent uses of nginx is setting it up as a proxy server, which means a server that receives requests, passes them to the proxied servers, retrieves responses from them, and sends them to the clients. </p>\n<p> We will configure a basic proxy server, which serves requests of images with files from the local directory and sends all other requests to a proxied server. In this example, both servers will be defined on a single nginx instance. </p>\n<p> First, define the proxied server by adding one more <code>server</code> block to the nginx’s configuration file with the following contents: </p> <pre data-language=\"nginx\">\nserver {\n    listen 8080;\n    root /data/up1;\n\n    location / {\n    }\n}\n</pre>\n<p> This will be a simple server that listens on the port 8080 (previously, the <code>listen</code> directive has not been specified since the standard port 80 was used) and maps all requests to the <code>/data/up1</code> directory on the local file system. Create this directory and put the <code>index.html</code> file into it. Note that the <code>root</code> directive is placed in the <code>server</code> context. Such <code>root</code> directive is used when the <code>location</code> block selected for serving a request does not include own <code>root</code> directive. </p>\n<p> Next, use the server configuration from the previous section and modify it to make it a proxy server configuration. In the first <code>location</code> block, put the <a href=\"http/ngx_http_proxy_module#proxy_pass\">proxy_pass</a> directive with the protocol, name and port of the proxied server specified in the parameter (in our case, it is <code>http://localhost:8080</code>): </p> <pre data-language=\"nginx\">\nserver {\n    location / {\n        proxy_pass http://localhost:8080;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n</pre>\n\n<p> We will modify the second <code>location</code> block, which currently maps requests with the <code>/images/</code> prefix to the files under the <code>/data/images</code> directory, to make it match the requests of images with typical file extensions. The modified <code>location</code> block looks like this: </p> <pre data-language=\"nginx\">\nlocation ~ \\.(gif|jpg|png)$ {\n    root /data/images;\n}\n</pre>\n<p> The parameter is a regular expression matching all URIs ending with <code>.gif</code>, <code>.jpg</code>, or <code>.png</code>. A regular expression should be preceded with <code>~</code>. The corresponding requests will be mapped to the <code>/data/images</code> directory. </p>\n<p> When nginx selects a <code>location</code> block to serve a request it first checks <a href=\"http/ngx_http_core_module#location\">location</a> directives that specify prefixes, remembering <code>location</code> with the longest prefix, and then checks regular expressions. If there is a match with a regular expression, nginx picks this <code>location</code> or, otherwise, it picks the one remembered earlier. </p>\n<p> The resulting configuration of a proxy server will look like this: </p> <pre data-language=\"nginx\">\nserver {\n    location / {\n        proxy_pass http://localhost:8080/;\n    }\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n}\n</pre>\n<p> This server will filter requests ending with <code>.gif</code>, <code>.jpg</code>, or <code>.png</code> and map them to the <code>/data/images</code> directory (by adding URI to the <code>root</code> directive’s parameter) and pass all other requests to the proxied server configured above. </p>\n<p> To apply new configuration, send the <code>reload</code> signal to nginx as described in the previous sections. </p>\n<p> There are many <a href=\"http/ngx_http_proxy_module\">more</a> directives that may be used to further configure a proxy connection. </p>\n<h4 id=\"fastcgi\">Setting Up FastCGI Proxying</h4>\n<p> nginx can be used to route requests to FastCGI servers which run applications built with various frameworks and programming languages such as PHP. </p>\n<p> The most basic nginx configuration to work with a FastCGI server includes using the <a href=\"http/ngx_http_fastcgi_module#fastcgi_pass\">fastcgi_pass</a> directive instead of the <code>proxy_pass</code> directive, and <a href=\"http/ngx_http_fastcgi_module#fastcgi_param\">fastcgi_param</a> directives to set parameters passed to a FastCGI server. Suppose the FastCGI server is accessible on <code>localhost:9000</code>. Taking the proxy configuration from the previous section as a basis, replace the <code>proxy_pass</code> directive with the <code>fastcgi_pass</code> directive and change the parameter to <code>localhost:9000</code>. In PHP, the <code>SCRIPT_FILENAME</code> parameter is used for determining the script name, and the <code>QUERY_STRING</code> parameter is used to pass request parameters. The resulting configuration would be: </p> <pre data-language=\"nginx\">\nserver {\n    location / {\n        fastcgi_pass  localhost:9000;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param QUERY_STRING    $query_string;\n    }\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n}\n</pre>\n<p> This will set up a server that will route all requests except for requests for static images to the proxied server operating on <code>localhost:9000</code> through the FastCGI protocol. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/beginners_guide.html\" class=\"_attribution-link\">https://nginx.org/en/docs/beginners_guide.html</a>\n  </p>\n</div>\n","http/configuring_https_servers":"<h1>Configuring HTTPS servers</h1>\n<ul>\n<li><a href=\"#optimization\">HTTPS server optimization</a></li>\n<li><a href=\"#chains\">SSL certificate chains</a></li>\n<li><a href=\"#single_http_https_server\">A single HTTP/HTTPS server</a></li>\n<li><a href=\"#name_based_https_servers\">Name-based HTTPS servers</a></li>\n<li><a href=\"#certificate_with_several_names\">An SSL certificate with several names</a></li>\n<li><a href=\"#sni\">Server Name Indication</a></li>\n<li><a href=\"#compatibility\">Compatibility</a></li>\n</ul>\n<p> To configure an HTTPS server, the <code>ssl</code> parameter must be enabled on <a href=\"ngx_http_core_module#listen\">listening sockets</a> in the <a href=\"ngx_http_core_module#server\">server</a> block, and the locations of the <a href=\"ngx_http_ssl_module#ssl_certificate\">server certificate</a> and <a href=\"ngx_http_ssl_module#ssl_certificate_key\">private key</a> files should be specified: </p> <pre data-language=\"nginx\">\nserver {\n    listen              443 <b>ssl</b>;\n    server_name         www.example.com;\n    ssl_certificate     <b>www.example.com.crt</b>;\n    ssl_certificate_key <b>www.example.com.key</b>;\n    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers         HIGH:!aNULL:!MD5;\n    ...\n}\n</pre>\n<p> The server certificate is a public entity. It is sent to every client that connects to the server. The private key is a secure entity and should be stored in a file with restricted access, however, it must be readable by nginx’s master process. The private key may alternately be stored in the same file as the certificate: </p> <pre data-language=\"nginx\">\n    ssl_certificate     www.example.com.cert;\n    ssl_certificate_key www.example.com.cert;\n</pre>\n<p> in which case the file access rights should also be restricted. Although the certificate and the key are stored in one file, only the certificate is sent to a client. </p>\n<p> The directives <a href=\"ngx_http_ssl_module#ssl_protocols\">ssl_protocols</a> and <a href=\"ngx_http_ssl_module#ssl_ciphers\">ssl_ciphers</a> can be used to limit connections to include only the strong versions and ciphers of SSL/TLS. By default nginx uses “<code>ssl_protocols TLSv1 TLSv1.1 TLSv1.2</code>” and “<code>ssl_ciphers HIGH:!aNULL:!MD5</code>”, so configuring them explicitly is generally not needed. Note that default values of these directives were <a href=\"#compatibility\">changed</a> several times. </p>\n<h4 id=\"optimization\">HTTPS server optimization</h4>\n<p> SSL operations consume extra CPU resources. On multi-processor systems several <a href=\"../ngx_core_module#worker_processes\">worker processes</a> should be run, no less than the number of available CPU cores. The most CPU-intensive operation is the SSL handshake. There are two ways to minimize the number of these operations per client: the first is by enabling <a href=\"ngx_http_core_module#keepalive_timeout\">keepalive</a> connections to send several requests via one connection and the second is to reuse SSL session parameters to avoid SSL handshakes for parallel and subsequent connections. The sessions are stored in an SSL session cache shared between workers and configured by the <a href=\"ngx_http_ssl_module#ssl_session_cache\">ssl_session_cache</a> directive. One megabyte of the cache contains about 4000 sessions. The default cache timeout is 5 minutes. It can be increased by using the <a href=\"ngx_http_ssl_module#ssl_session_timeout\">ssl_session_timeout</a> directive. Here is a sample configuration optimized for a multi-core system with 10 megabyte shared session cache: </p> <pre data-language=\"nginx\">\n<b>worker_processes auto</b>;\n\nhttp {\n    <b>ssl_session_cache   shared:SSL:10m</b>;\n    <b>ssl_session_timeout 10m</b>;\n\n    server {\n        listen              443 ssl;\n        server_name         www.example.com;\n        <b>keepalive_timeout   70</b>;\n\n        ssl_certificate     www.example.com.crt;\n        ssl_certificate_key www.example.com.key;\n        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers         HIGH:!aNULL:!MD5;\n        ...\n</pre>\n\n<h4 id=\"chains\">SSL certificate chains</h4>\n<p> Some browsers may complain about a certificate signed by a well-known certificate authority, while other browsers may accept the certificate without issues. This occurs because the issuing authority has signed the server certificate using an intermediate certificate that is not present in the certificate base of well-known trusted certificate authorities which is distributed with a particular browser. In this case the authority provides a bundle of chained certificates which should be concatenated to the signed server certificate. The server certificate must appear before the chained certificates in the combined file: </p> <pre data-language=\"nginx\">\n$ cat www.example.com.crt bundle.crt &gt; www.example.com.chained.crt\n</pre>\n<p> The resulting file should be used in the <a href=\"ngx_http_ssl_module#ssl_certificate\">ssl_certificate</a> directive: </p> <pre data-language=\"nginx\">\nserver {\n    listen              443 ssl;\n    server_name         www.example.com;\n    ssl_certificate     www.example.com.chained.crt;\n    ssl_certificate_key www.example.com.key;\n    ...\n}\n</pre>\n<p> If the server certificate and the bundle have been concatenated in the wrong order, nginx will fail to start and will display the error message: </p> <pre data-language=\"nginx\">\nSSL_CTX_use_PrivateKey_file(\" ... /www.example.com.key\") failed\n   (SSL: error:0B080074:x509 certificate routines:\n    X509_check_private_key:key values mismatch)\n</pre>\n<p> because nginx has tried to use the private key with the bundle’s first certificate instead of the server certificate. </p>\n<p> Browsers usually store intermediate certificates which they receive and which are signed by trusted authorities, so actively used browsers may already have the required intermediate certificates and may not complain about a certificate sent without a chained bundle. To ensure the server sends the complete certificate chain, the <code>openssl</code> command-line utility may be used, for example: </p> <pre data-language=\"nginx\">\n$ openssl s_client -connect www.godaddy.com:443\n...\nCertificate chain\n 0 s:/C=US/ST=Arizona/L=Scottsdale/1.3.6.1.4.1.311.60.2.1.3=US\n     /1.3.6.1.4.1.311.60.2.1.2=AZ/O=GoDaddy.com, Inc\n     /OU=MIS Department/<b>CN=www.GoDaddy.com</b>\n     /serialNumber=0796928-7/2.5.4.15=V1.0, Clause 5.(b)\n   i:/C=US/ST=Arizona/L=Scottsdale/O=GoDaddy.com, Inc.\n     /OU=http://certificates.godaddy.com/repository\n     /CN=Go Daddy Secure Certification Authority\n     /serialNumber=07969287\n 1 s:/C=US/ST=Arizona/L=Scottsdale/O=GoDaddy.com, Inc.\n     /OU=http://certificates.godaddy.com/repository\n     /CN=Go Daddy Secure Certification Authority\n     /serialNumber=07969287\n   i:/C=US/O=The Go Daddy Group, Inc.\n     /OU=Go Daddy Class 2 Certification Authority\n 2 s:/C=US/O=The Go Daddy Group, Inc.\n     /OU=Go Daddy Class 2 Certification Authority\n   i:/L=ValiCert Validation Network/O=<b>ValiCert, Inc.</b>\n     /OU=ValiCert Class 2 Policy Validation Authority\n     /CN=http://www.valicert.com//emailAddress=info@valicert.com\n...\n</pre>\n<p> In this example the subject (“<i>s</i>”) of the <code>www.GoDaddy.com</code> server certificate #0 is signed by an issuer (“<i>i</i>”) which itself is the subject of the certificate #1, which is signed by an issuer which itself is the subject of the certificate #2, which signed by the well-known issuer <i>ValiCert, Inc.</i> whose certificate is stored in the browsers’ built-in certificate base (that lay in the house that Jack built). </p>\n<p> If a certificate bundle has not been added, only the server certificate #0 will be shown. </p>\n<h4 id=\"single_http_https_server\">A single HTTP/HTTPS server</h4>\n<p> It is possible to configure a single server that handles both HTTP and HTTPS requests: </p> <pre data-language=\"nginx\">\nserver {\n    listen              80;\n    listen              443 ssl;\n    server_name         www.example.com;\n    ssl_certificate     www.example.com.crt;\n    ssl_certificate_key www.example.com.key;\n    ...\n}\n</pre>\n <blockquote class=\"note\"> Prior to 0.7.14 SSL could not be enabled selectively for individual listening sockets, as shown above. SSL could only be enabled for the entire server using the <a href=\"ngx_http_ssl_module#ssl\">ssl</a> directive, making it impossible to set up a single HTTP/HTTPS server. The <code>ssl</code> parameter of the <a href=\"ngx_http_core_module#listen\">listen</a> directive was added to solve this issue. The use of the <a href=\"ngx_http_ssl_module#ssl\">ssl</a> directive in modern versions is thus discouraged. </blockquote>\n\n<h4 id=\"name_based_https_servers\">Name-based HTTPS servers</h4>\n<p> A common issue arises when configuring two or more HTTPS servers listening on a single IP address: </p> <pre data-language=\"nginx\">\nserver {\n    listen          443 ssl;\n    server_name     www.example.com;\n    ssl_certificate www.example.com.crt;\n    ...\n}\n\nserver {\n    listen          443 ssl;\n    server_name     www.example.org;\n    ssl_certificate www.example.org.crt;\n    ...\n}\n</pre>\n<p> With this configuration a browser receives the default server’s certificate, i.e. <code>www.example.com</code> regardless of the requested server name. This is caused by SSL protocol behaviour. The SSL connection is established before the browser sends an HTTP request and nginx does not know the name of the requested server. Therefore, it may only offer the default server’s certificate. </p>\n<p> The oldest and most robust method to resolve the issue is to assign a separate IP address for every HTTPS server: </p> <pre data-language=\"nginx\">\nserver {\n    listen          192.168.1.1:443 ssl;\n    server_name     www.example.com;\n    ssl_certificate www.example.com.crt;\n    ...\n}\n\nserver {\n    listen          192.168.1.2:443 ssl;\n    server_name     www.example.org;\n    ssl_certificate www.example.org.crt;\n    ...\n}\n</pre>\n\n<h5 id=\"certificate_with_several_names\">An SSL certificate with several names</h5>\n<p> There are other ways that allow sharing a single IP address between several HTTPS servers. However, all of them have their drawbacks. One way is to use a certificate with several names in the SubjectAltName certificate field, for example, <code>www.example.com</code> and <code>www.example.org</code>. However, the SubjectAltName field length is limited. </p>\n<p> Another way is to use a certificate with a wildcard name, for example, <code>*.example.org</code>. A wildcard certificate secures all subdomains of the specified domain, but only on one level. This certificate matches <code>www.example.org</code>, but does not match <code>example.org</code> and <code>www.sub.example.org</code>. These two methods can also be combined. A certificate may contain exact and wildcard names in the SubjectAltName field, for example, <code>example.org</code> and <code>*.example.org</code>. </p>\n<p> It is better to place a certificate file with several names and its private key file at the <i>http</i> level of configuration to inherit their single memory copy in all servers: </p> <pre data-language=\"nginx\">\nssl_certificate     common.crt;\nssl_certificate_key common.key;\n\nserver {\n    listen          443 ssl;\n    server_name     www.example.com;\n    ...\n}\n\nserver {\n    listen          443 ssl;\n    server_name     www.example.org;\n    ...\n}\n</pre>\n\n<h5 id=\"sni\">Server Name Indication</h5>\n<p> A more generic solution for running several HTTPS servers on a single IP address is <a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">TLS Server Name Indication extension</a> (SNI, RFC 6066), which allows a browser to pass a requested server name during the SSL handshake and, therefore, the server will know which certificate it should use for the connection. However, SNI has limited browser support. Currently it is supported starting with the following browsers versions: </p>\n <ul class=\"compact\"> <li> Opera 8.0; </li> <li> MSIE 7.0 (but only on Windows Vista or higher); </li> <li> Firefox 2.0 and other browsers using Mozilla Platform rv:1.8.1; </li> <li> Safari 3.2.1 (Windows version supports SNI on Vista or higher); </li> <li> and Chrome (Windows version supports SNI on Vista or higher, too). </li> </ul>\n <blockquote class=\"note\"> Only domain names can be passed in SNI, however some browsers may erroneously pass an IP address of the server as its name if a request includes literal IP address. One should not rely on this. </blockquote>\n\n<p> In order to use SNI in nginx, it must be supported in both the OpenSSL library with which the nginx binary has been built as well as the library to which it is being dynamically linked at run time. OpenSSL supports SNI since 0.9.8f version if it was built with config option <nobr>“--enable-tlsext”.</nobr> Since OpenSSL 0.9.8j this option is enabled by default. If nginx was built with SNI support, then nginx will show this when run with the “-V” switch: </p> <pre data-language=\"nginx\">\n$ nginx -V\n...\nTLS SNI support enabled\n...\n</pre>\n<p> However, if the SNI-enabled nginx is linked dynamically to an OpenSSL library without SNI support, nginx displays the warning: </p> <pre data-language=\"nginx\">\nnginx was built with SNI support, however, now it is linked\ndynamically to an OpenSSL library which has no tlsext support,\ntherefore SNI is not available\n</pre>\n\n<h4 id=\"compatibility\">Compatibility</h4>\n <ul class=\"compact\"> <li> The SNI support status has been shown by the “-V” switch since 0.8.21 and 0.7.62. </li> <li> The <code>ssl</code> parameter of the <a href=\"ngx_http_core_module#listen\">listen</a> directive has been supported since 0.7.14. Prior to 0.8.21 it could only be specified along with the <code>default</code> parameter. </li> <li> SNI has been supported since 0.5.32. </li> <li> The shared SSL session cache has been supported since 0.5.6. </li> </ul>\n\n <ul class=\"compact\"> <li> Version 1.9.1 and later: the default SSL protocols are TLSv1, TLSv1.1, and TLSv1.2 (if supported by the OpenSSL library). </li> <li> Version 0.7.65, 0.8.19 and later: the default SSL protocols are SSLv3, TLSv1, TLSv1.1, and TLSv1.2 (if supported by the OpenSSL library). </li> <li> Version 0.7.64, 0.8.18 and earlier: the default SSL protocols are SSLv2, SSLv3, and TLSv1. </li> </ul>\n\n <ul class=\"compact\"> <li> Version 1.0.5 and later: the default SSL ciphers are “<code>HIGH:!aNULL:!MD5</code>”. </li> <li> Version 0.7.65, 0.8.20 and later: the default SSL ciphers are “<code>HIGH:!ADH:!MD5</code>”. </li> <li> Version 0.8.19: the default SSL ciphers are “<code>ALL:!ADH:RC4+RSA:+HIGH:+MEDIUM</code>”. </li> <li> Version 0.7.64, 0.8.18 and earlier: the default SSL ciphers are<br> “<code>ALL:!ADH:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP</code>”. </li> </ul>\n\n<table width=\"100%\"><tr><td align=\"right\">written by Igor Sysoev<br>edited by Brian Mercer<br>\n</td></tr></table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/configuring_https_servers.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/configuring_https_servers.html</a>\n  </p>\n</div>\n","http/ngx_http_core_module":"<h1>Module ngx_http_core_module</h1>\n<ul>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#aio\">aio</a></li>\n<li><a href=\"#aio_write\">aio_write</a></li>\n<li><a href=\"#alias\">alias</a></li>\n<li><a href=\"#chunked_transfer_encoding\">chunked_transfer_encoding</a></li>\n<li><a href=\"#client_body_buffer_size\">client_body_buffer_size</a></li>\n<li><a href=\"#client_body_in_file_only\">client_body_in_file_only</a></li>\n<li><a href=\"#client_body_in_single_buffer\">client_body_in_single_buffer</a></li>\n<li><a href=\"#client_body_temp_path\">client_body_temp_path</a></li>\n<li><a href=\"#client_body_timeout\">client_body_timeout</a></li>\n<li><a href=\"#client_header_buffer_size\">client_header_buffer_size</a></li>\n<li><a href=\"#client_header_timeout\">client_header_timeout</a></li>\n<li><a href=\"#client_max_body_size\">client_max_body_size</a></li>\n<li><a href=\"#connection_pool_size\">connection_pool_size</a></li>\n<li><a href=\"#default_type\">default_type</a></li>\n<li><a href=\"#directio\">directio</a></li>\n<li><a href=\"#directio_alignment\">directio_alignment</a></li>\n<li><a href=\"#disable_symlinks\">disable_symlinks</a></li>\n<li><a href=\"#error_page\">error_page</a></li>\n<li><a href=\"#etag\">etag</a></li>\n<li><a href=\"#http\">http</a></li>\n<li><a href=\"#if_modified_since\">if_modified_since</a></li>\n<li><a href=\"#ignore_invalid_headers\">ignore_invalid_headers</a></li>\n<li><a href=\"#internal\">internal</a></li>\n<li><a href=\"#keepalive_disable\">keepalive_disable</a></li>\n<li><a href=\"#keepalive_requests\">keepalive_requests</a></li>\n<li><a href=\"#keepalive_timeout\">keepalive_timeout</a></li>\n<li><a href=\"#large_client_header_buffers\">large_client_header_buffers</a></li>\n<li><a href=\"#limit_except\">limit_except</a></li>\n<li><a href=\"#limit_rate\">limit_rate</a></li>\n<li><a href=\"#limit_rate_after\">limit_rate_after</a></li>\n<li><a href=\"#lingering_close\">lingering_close</a></li>\n<li><a href=\"#lingering_time\">lingering_time</a></li>\n<li><a href=\"#lingering_timeout\">lingering_timeout</a></li>\n<li><a href=\"#listen\">listen</a></li>\n<li><a href=\"#location\">location</a></li>\n<li><a href=\"#log_not_found\">log_not_found</a></li>\n<li><a href=\"#log_subrequest\">log_subrequest</a></li>\n<li><a href=\"#max_ranges\">max_ranges</a></li>\n<li><a href=\"#merge_slashes\">merge_slashes</a></li>\n<li><a href=\"#msie_padding\">msie_padding</a></li>\n<li><a href=\"#msie_refresh\">msie_refresh</a></li>\n<li><a href=\"#open_file_cache\">open_file_cache</a></li>\n<li><a href=\"#open_file_cache_errors\">open_file_cache_errors</a></li>\n<li><a href=\"#open_file_cache_min_uses\">open_file_cache_min_uses</a></li>\n<li><a href=\"#open_file_cache_valid\">open_file_cache_valid</a></li>\n<li><a href=\"#output_buffers\">output_buffers</a></li>\n<li><a href=\"#port_in_redirect\">port_in_redirect</a></li>\n<li><a href=\"#postpone_output\">postpone_output</a></li>\n<li><a href=\"#read_ahead\">read_ahead</a></li>\n<li><a href=\"#recursive_error_pages\">recursive_error_pages</a></li>\n<li><a href=\"#request_pool_size\">request_pool_size</a></li>\n<li><a href=\"#reset_timedout_connection\">reset_timedout_connection</a></li>\n<li><a href=\"#resolver\">resolver</a></li>\n<li><a href=\"#resolver_timeout\">resolver_timeout</a></li>\n<li><a href=\"#root\">root</a></li>\n<li><a href=\"#satisfy\">satisfy</a></li>\n<li><a href=\"#send_lowat\">send_lowat</a></li>\n<li><a href=\"#send_timeout\">send_timeout</a></li>\n<li><a href=\"#sendfile\">sendfile</a></li>\n<li><a href=\"#sendfile_max_chunk\">sendfile_max_chunk</a></li>\n<li><a href=\"#server\">server</a></li>\n<li><a href=\"#server_name\">server_name</a></li>\n<li><a href=\"#server_name_in_redirect\">server_name_in_redirect</a></li>\n<li><a href=\"#server_names_hash_bucket_size\">server_names_hash_bucket_size</a></li>\n<li><a href=\"#server_names_hash_max_size\">server_names_hash_max_size</a></li>\n<li><a href=\"#server_tokens\">server_tokens</a></li>\n<li><a href=\"#tcp_nodelay\">tcp_nodelay</a></li>\n<li><a href=\"#tcp_nopush\">tcp_nopush</a></li>\n<li><a href=\"#try_files\">try_files</a></li>\n<li><a href=\"#types\">types</a></li>\n<li><a href=\"#types_hash_bucket_size\">types_hash_bucket_size</a></li>\n<li><a href=\"#types_hash_max_size\">types_hash_max_size</a></li>\n<li><a href=\"#underscores_in_headers\">underscores_in_headers</a></li>\n<li><a href=\"#variables_hash_bucket_size\">variables_hash_bucket_size</a></li>\n<li><a href=\"#variables_hash_max_size\">variables_hash_max_size</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"aio\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>aio</strong> \n    <code>on</code> |\n    <code>off</code> |\n    <code>threads</code>[<code>=</code><code><i>pool</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>aio off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.8.11. </p>\n</div>\n<p> Enables or disables the use of asynchronous file I/O (AIO) on FreeBSD and Linux: </p> <pre data-language=\"nginx\">\nlocation /video/ {\n    aio            on;\n    output_buffers 1 64k;\n}\n</pre>\n\n<p> On FreeBSD, AIO can be used starting from FreeBSD 4.3. AIO can either be linked statically into a kernel: </p> <pre data-language=\"nginx\">\noptions VFS_AIO\n</pre>\n<p> or loaded dynamically as a kernel loadable module: </p> <pre data-language=\"nginx\">\nkldload aio\n</pre>\n\n<p> On Linux, AIO can be used starting from kernel version 2.6.22. Also, it is necessary to enable <a href=\"#directio\">directio</a>, or otherwise reading will be blocking: </p> <pre data-language=\"nginx\">\nlocation /video/ {\n    aio            on;\n    directio       512;\n    output_buffers 1 128k;\n}\n</pre>\n\n<p> On Linux, <a href=\"#directio\">directio</a> can only be used for reading blocks that are aligned on 512-byte boundaries (or 4K for XFS). File’s unaligned end is read in blocking mode. The same holds true for byte range requests and for FLV requests not from the beginning of a file: reading of unaligned data at the beginning and end of a file will be blocking. </p>\n<p> When both AIO and <a href=\"#sendfile\">sendfile</a> are enabled on Linux, AIO is used for files that are larger than or equal to the size specified in the <a href=\"#directio\">directio</a> directive, while <a href=\"#sendfile\">sendfile</a> is used for files of smaller sizes or when <a href=\"#directio\">directio</a> is disabled. </p> <pre data-language=\"nginx\">\nlocation /video/ {\n    sendfile       on;\n    aio            on;\n    directio       8m;\n}\n</pre>\n\n<p> Finally, files can be read and <a href=\"#sendfile\">sent</a> using multi-threading (1.7.11), without blocking a worker process: </p> <pre data-language=\"nginx\">\nlocation /video/ {\n    sendfile       on;\n    aio            threads;\n}\n</pre>\n<p> Read and send file operations are offloaded to threads of the specified <a href=\"../ngx_core_module#thread_pool\">pool</a>. If the pool name is omitted, the pool with the name “<code>default</code>” is used. The pool name can also be set with variables: </p> <pre data-language=\"nginx\">\naio threads=pool$disk;\n</pre>\n<p> By default, multi-threading is disabled, it should be enabled with the <code>--with-threads</code> configuration parameter. Currently, multi-threading is compatible only with the <a href=\"../events#epoll\">epoll</a>, <a href=\"../events#kqueue\">kqueue</a>, and <a href=\"../events#eventport\">eventport</a> methods. Multi-threaded sending of files is only supported on Linux. </p>\n<p> See also the <a href=\"#sendfile\">sendfile</a> directive. </p>\n<div class=\"directive\" id=\"aio_write\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>aio_write</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>aio_write off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.13. </p>\n</div>\n<p> If <a href=\"#aio\">aio</a> is enabled, specifies whether it is used for writing files. Currently, this only works when using <code>aio threads</code> and is limited to writing temporary files with data received from proxied servers. </p>\n<div class=\"directive\" id=\"alias\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>alias</strong> <code><i>path</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a replacement for the specified location. For example, with the following configuration </p> <pre data-language=\"nginx\">\nlocation /i/ {\n    alias /data/w3/images/;\n}\n</pre>\n<p> on request of “<code>/i/top.gif</code>”, the file <code>/data/w3/images/top.gif</code> will be sent. </p>\n<p> The <code><i>path</i></code> value can contain variables, except <code>$document_root</code> and <code>$realpath_root</code>. </p>\n<p> If <code>alias</code> is used inside a location defined with a regular expression then such regular expression should contain captures and <code>alias</code> should refer to these captures (0.7.40), for example: </p> <pre data-language=\"nginx\">\nlocation ~ ^/users/(.+\\.(?:gif|jpe?g|png))$ {\n    alias /data/w3/images/$1;\n}\n</pre>\n\n<p> When location matches the last part of the directive’s value: </p> <pre data-language=\"nginx\">\nlocation /images/ {\n    alias /data/w3/images/;\n}\n</pre>\n<p> it is better to use the <a href=\"#root\">root</a> directive instead: </p> <pre data-language=\"nginx\">\nlocation /images/ {\n    root /data/w3;\n}\n</pre>\n\n<div class=\"directive\" id=\"chunked_transfer_encoding\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>chunked_transfer_encoding</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>chunked_transfer_encoding on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Allows disabling chunked transfer encoding in HTTP/1.1. It may come in handy when using a software failing to support chunked encoding despite the standard’s requirement. </p>\n<div class=\"directive\" id=\"client_body_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>client_body_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>client_body_buffer_size 8k|16k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets buffer size for reading client request body. In case the request body is larger than the buffer, the whole body or only its part is written to a <a href=\"#client_body_temp_path\">temporary file</a>. By default, buffer size is equal to two memory pages. This is 8K on x86, other 32-bit platforms, and x86-64. It is usually 16K on other 64-bit platforms. </p>\n<div class=\"directive\" id=\"client_body_in_file_only\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>client_body_in_file_only</strong> \n    <code>on</code> |\n    <code>clean</code> |\n    <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>client_body_in_file_only off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines whether nginx should save the entire client request body into a file. This directive can be used during debugging, or when using the <code>$request_body_file</code> variable, or the <a href=\"ngx_http_perl_module#methods\">$r-&gt;request_body_file</a> method of the module <a href=\"ngx_http_perl_module\">ngx_http_perl_module</a>. </p>\n<p> When set to the value <code>on</code>, temporary files are not removed after request processing. </p>\n<p> The value <code>clean</code> will cause the temporary files left after request processing to be removed. </p>\n<div class=\"directive\" id=\"client_body_in_single_buffer\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>client_body_in_single_buffer</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>client_body_in_single_buffer off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines whether nginx should save the entire client request body in a single buffer. The directive is recommended when using the <code>$request_body</code> variable, to save the number of copy operations involved. </p>\n<div class=\"directive\" id=\"client_body_temp_path\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>client_body_temp_path</strong> \n    <code><i>path</i></code>\n    [<code><i>level1</i></code>\n    [<code><i>level2</i></code>\n    [<code><i>level3</i></code>]]];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>client_body_temp_path client_body_temp;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a directory for storing temporary files holding client request bodies. Up to three-level subdirectory hierarchy can be used under the specified directory. For example, in the following configuration </p> <pre data-language=\"nginx\">\nclient_body_temp_path /spool/nginx/client_temp 1 2;\n</pre>\n<p> a path to a temporary file might look like this: </p> <pre data-language=\"nginx\">\n/spool/nginx/client_temp/7/45/00000123457\n</pre>\n\n<div class=\"directive\" id=\"client_body_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>client_body_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>client_body_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for reading client request body. The timeout is set only for a period between two successive read operations, not for the transmission of the whole request body. If a client does not transmit anything within this time, the 408 (Request Time-out) error is returned to the client. </p>\n<div class=\"directive\" id=\"client_header_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>client_header_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>client_header_buffer_size 1k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets buffer size for reading client request header. For most requests, a buffer of 1K bytes is enough. However, if a request includes long cookies, or comes from a WAP client, it may not fit into 1K. If a request line or a request header field does not fit into this buffer then larger buffers, configured by the <a href=\"#large_client_header_buffers\">large_client_header_buffers</a> directive, are allocated. </p>\n<div class=\"directive\" id=\"client_header_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>client_header_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>client_header_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for reading client request header. If a client does not transmit the entire header within this time, the 408 (Request Time-out) error is returned to the client. </p>\n<div class=\"directive\" id=\"client_max_body_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>client_max_body_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>client_max_body_size 1m;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the maximum allowed size of the client request body, specified in the “Content-Length” request header field. If the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to the client. Please be aware that browsers cannot correctly display this error. Setting <code><i>size</i></code> to 0 disables checking of client request body size. </p>\n<div class=\"directive\" id=\"connection_pool_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>connection_pool_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>connection_pool_size 256|512;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Allows accurate tuning of per-connection memory allocations. This directive has minimal impact on performance and should not generally be used. By default, the size is equal to 256 bytes on 32-bit platforms and 512 bytes on 64-bit platforms. </p> <blockquote class=\"note\"> Prior to version 1.9.8, the default value was 256 on all platforms. </blockquote>\n\n<div class=\"directive\" id=\"default_type\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>default_type</strong> <code><i>mime-type</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>default_type text/plain;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines the default MIME type of a response. Mapping of file name extensions to MIME types can be set with the <a href=\"#types\">types</a> directive. </p>\n<div class=\"directive\" id=\"directio\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>directio</strong> <code><i>size</i></code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>directio off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.7.7. </p>\n</div>\n<p> Enables the use of the <code>O_DIRECT</code> flag (FreeBSD, Linux), the <code>F_NOCACHE</code> flag (Mac OS X), or the <code>directio()</code> function (Solaris), when reading files that are larger than or equal to the specified <code><i>size</i></code>. The directive automatically disables (0.7.15) the use of <a href=\"#sendfile\">sendfile</a> for a given request. It can be useful for serving large files: </p> <pre data-language=\"nginx\">\ndirectio 4m;\n</pre>\n<p> or when using <a href=\"#aio\">aio</a> on Linux. </p>\n<div class=\"directive\" id=\"directio_alignment\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>directio_alignment</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>directio_alignment 512;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.8.11. </p>\n</div>\n<p> Sets the alignment for <a href=\"#directio\">directio</a>. In most cases, a 512-byte alignment is enough. However, when using XFS under Linux, it needs to be increased to 4K. </p>\n<div class=\"directive\" id=\"disable_symlinks\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>disable_symlinks</strong> <code>off</code>;</code><br><code><strong>disable_symlinks</strong> \n    <code>on</code> |\n    <code>if_not_owner</code>\n    [<code>from</code>=<code><i>part</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>disable_symlinks off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.15. </p>\n</div>\n<p> Determines how symbolic links should be treated when opening files: </p> <dl class=\"compact\"> <dt><code>off</code></dt> <dd> Symbolic links in the pathname are allowed and not checked. This is the default behavior. </dd> <dt><code>on</code></dt> <dd> If any component of the pathname is a symbolic link, access to a file is denied. </dd> <dt><code>if_not_owner</code></dt> <dd> Access to a file is denied if any component of the pathname is a symbolic link, and the link and object that the link points to have different owners. </dd> <dt>\n<code>from</code>=<code><i>part</i></code>\n</dt> <dd> When checking symbolic links (parameters <code>on</code> and <code>if_not_owner</code>), all components of the pathname are normally checked. Checking of symbolic links in the initial part of the pathname may be avoided by specifying additionally the <code>from</code>=<code><i>part</i></code> parameter. In this case, symbolic links are checked only from the pathname component that follows the specified initial part. If the value is not an initial part of the pathname checked, the whole pathname is checked as if this parameter was not specified at all. If the value matches the whole file name, symbolic links are not checked. The parameter value can contain variables. </dd> </dl>\n\n<p> Example: </p> <pre data-language=\"nginx\">\ndisable_symlinks on from=$document_root;\n</pre>\n\n<p> This directive is only available on systems that have the <code>openat()</code> and <code>fstatat()</code> interfaces. Such systems include modern versions of FreeBSD, Linux, and Solaris. </p>\n<p> Parameters <code>on</code> and <code>if_not_owner</code> add a processing overhead. </p> <blockquote class=\"note\"> On systems that do not support opening of directories only for search, to use these parameters it is required that worker processes have read permissions for all directories being checked. </blockquote>\n\n <blockquote class=\"note\"> The <a href=\"ngx_http_autoindex_module\">ngx_http_autoindex_module</a>, <a href=\"ngx_http_random_index_module\">ngx_http_random_index_module</a>, and <a href=\"ngx_http_dav_module\">ngx_http_dav_module</a> modules currently ignore this directive. </blockquote>\n\n<div class=\"directive\" id=\"error_page\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>error_page</strong> \n    <code><i>code</i></code> ...\n    [<code>=</code>[<code><i>response</i></code>]]\n    <code><i>uri</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Defines the URI that will be shown for the specified errors. <code>error_page</code> directives are inherited from the previous level only if there are no <code>error_page</code> directives defined on the current level. A <code>uri</code> value can contain variables. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nerror_page 404             /404.html;\nerror_page 500 502 503 504 /50x.html;\n</pre>\n\n<p> Furthermore, it is possible to change the response code to another using the “<code>=</code><code><i>response</i></code>” syntax, for example: </p> <pre data-language=\"nginx\">\nerror_page 404 =200 /empty.gif;\n</pre>\n\n<p> If an error response is processed by a proxied server or a FastCGI/uwsgi/SCGI server, and the server may return different response codes (e.g., 200, 302, 401 or 404), it is possible to respond with the code it returns: </p> <pre data-language=\"nginx\">\nerror_page 404 = /404.php;\n</pre>\n\n<p> It is also possible to use redirects for error processing: </p> <pre data-language=\"nginx\">\nerror_page 403      http://example.com/forbidden.html;\nerror_page 404 =301 http://example.com/notfound.html;\n</pre>\n<p> In this case, by default, the response code 302 is returned to the client. It can only be changed to one of the redirect status codes (301, 302, 303, and 307). </p>\n<p> If there is no need to change URI during internal redirection it is possible to pass error processing into a named location: </p> <pre data-language=\"nginx\">\nlocation / {\n    error_page 404 = @fallback;\n}\n\nlocation @fallback {\n    proxy_pass http://backend;\n}\n</pre>\n\n <blockquote class=\"note\"> If <code>uri</code> processing leads to an error, the status code of the last occurred error is returned to the client. </blockquote>\n\n<div class=\"directive\" id=\"etag\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>etag</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>etag on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.3.3. </p>\n</div>\n<p> Enables or disables automatic generation of the “ETag” response header field for static resources. </p>\n<div class=\"directive\" id=\"http\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>http</strong> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Provides the configuration file context in which the HTTP server directives are specified. </p>\n<div class=\"directive\" id=\"if_modified_since\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>if_modified_since</strong> \n    <code>off</code> |\n    <code>exact</code> |\n    <code>before</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>if_modified_since exact;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.7.24. </p>\n</div>\n<p> Specifies how to compare modification time of a response with the time in the “If-Modified-Since” request header field: </p> <dl class=\"compact\"> <dt><code>off</code></dt> <dd> the “If-Modified-Since” request header field is ignored (0.7.34); </dd> <dt><code>exact</code></dt> <dd> exact match; </dd> <dt><code>before</code></dt> <dd> modification time of a response is less than or equal to the time in the “If-Modified-Since” request header field. </dd> </dl>\n\n<div class=\"directive\" id=\"ignore_invalid_headers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ignore_invalid_headers</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ignore_invalid_headers on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Controls whether header fields with invalid names should be ignored. Valid names are composed of English letters, digits, hyphens, and possibly underscores (as controlled by the <a href=\"#underscores_in_headers\">underscores_in_headers</a> directive). </p>\n<p> If the directive is specified on the <a href=\"#server\">server</a> level, its value is only used if a server is a default one. The value specified also applies to all virtual servers listening on the same address and port. </p>\n<div class=\"directive\" id=\"internal\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>internal</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Specifies that a given location can only be used for internal requests. For external requests, the client error 404 (Not Found) is returned. Internal requests are the following: </p> <ul class=\"compact\"> <li> requests redirected by the <a href=\"#error_page\">error_page</a>, <a href=\"ngx_http_index_module#index\">index</a>, <a href=\"ngx_http_random_index_module#random_index\">random_index</a>, and <a href=\"#try_files\">try_files</a> directives; </li> <li> requests redirected by the “X-Accel-Redirect” response header field from an upstream server; </li> <li> subrequests formed by the “<code>include virtual</code>” command of the <a href=\"ngx_http_ssi_module\">ngx_http_ssi_module</a> module and by the <a href=\"ngx_http_addition_module\">ngx_http_addition_module</a> module directives; </li> <li> requests changed by the <a href=\"ngx_http_rewrite_module#rewrite\">rewrite</a> directive. </li> </ul>\n\n<p> Example: </p> <pre data-language=\"nginx\">\nerror_page 404 /404.html;\n\nlocation /404.html {\n    internal;\n}\n</pre>\n <blockquote class=\"note\"> There is a limit of 10 internal redirects per request to prevent request processing cycles that can occur in incorrect configurations. If this limit is reached, the error 500 (Internal Server Error) is returned. In such cases, the “rewrite or internal redirection cycle” message can be seen in the error log. </blockquote>\n\n<div class=\"directive\" id=\"keepalive_disable\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>keepalive_disable</strong> <code>none</code> | <code><i>browser</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>keepalive_disable msie6;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Disables keep-alive connections with misbehaving browsers. The <code><i>browser</i></code> parameters specify which browsers will be affected. The value <code>msie6</code> disables keep-alive connections with old versions of MSIE, once a POST request is received. The value <code>safari</code> disables keep-alive connections with Safari and Safari-like browsers on Mac OS X and Mac OS X-like operating systems. The value <code>none</code> enables keep-alive connections with all browsers. </p> <blockquote class=\"note\"> Prior to version 1.1.18, the value <code>safari</code> matched all Safari and Safari-like browsers on all operating systems, and keep-alive connections with them were disabled by default. </blockquote>\n\n<div class=\"directive\" id=\"keepalive_requests\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>keepalive_requests</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>keepalive_requests 100;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.8.0. </p>\n</div>\n<p> Sets the maximum number of requests that can be served through one keep-alive connection. After the maximum number of requests are made, the connection is closed. </p>\n<div class=\"directive\" id=\"keepalive_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>keepalive_timeout</strong> \n    <code><i>timeout</i></code>\n    [<code><i>header_timeout</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>keepalive_timeout 75s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side. The zero value disables keep-alive client connections. The optional second parameter sets a value in the “Keep-Alive: timeout=<code><i>time</i></code>” response header field. Two parameters may differ. </p>\n<p> The “Keep-Alive: timeout=<code><i>time</i></code>” header field is recognized by Mozilla and Konqueror. MSIE closes keep-alive connections by itself in about 60 seconds. </p>\n<div class=\"directive\" id=\"large_client_header_buffers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>large_client_header_buffers</strong> <code><i>number</i></code> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>large_client_header_buffers 4 8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the maximum <code><i>number</i></code> and <code><i>size</i></code> of buffers used for reading large client request header. A request line cannot exceed the size of one buffer, or the 414 (Request-URI Too Large) error is returned to the client. A request header field cannot exceed the size of one buffer as well, or the 400 (Bad Request) error is returned to the client. Buffers are allocated only on demand. By default, the buffer size is equal to 8K bytes. If after the end of request processing a connection is transitioned into the keep-alive state, these buffers are released. </p>\n<div class=\"directive\" id=\"limit_except\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_except</strong> <code><i>method</i></code> ... { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Limits allowed HTTP methods inside a location. The <code><i>method</i></code> parameter can be one of the following: <code>GET</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>MKCOL</code>, <code>COPY</code>, <code>MOVE</code>, <code>OPTIONS</code>, <code>PROPFIND</code>, <code>PROPPATCH</code>, <code>LOCK</code>, <code>UNLOCK</code>, or <code>PATCH</code>. Allowing the <code>GET</code> method makes the <code>HEAD</code> method also allowed. Access to other methods can be limited using the <a href=\"ngx_http_access_module\">ngx_http_access_module</a> and <a href=\"ngx_http_auth_basic_module\">ngx_http_auth_basic_module</a> modules directives: </p> <pre data-language=\"nginx\">\nlimit_except GET {\n    allow 192.168.1.0/32;\n    deny  all;\n}\n</pre>\n<p> Please note that this will limit access to all methods <strong>except</strong> GET and HEAD. </p>\n<div class=\"directive\" id=\"limit_rate\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_rate</strong> <code><i>rate</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>limit_rate 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Limits the rate of response transmission to a client. The <code><i>rate</i></code> is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if a client simultaneously opens two connections, the overall rate will be twice as much as the specified limit. </p>\n<p> Rate limit can also be set in the <code>$limit_rate</code> variable. It may be useful in cases where rate should be limited depending on a certain condition: </p> <pre data-language=\"nginx\">\nserver {\n\n    if ($slow) {\n        set $limit_rate 4k;\n    }\n\n    ...\n}\n</pre>\n\n<p> Rate limit can also be set in the “X-Accel-Limit-Rate” header field of a proxied server response. This capability can be disabled using the <a href=\"ngx_http_proxy_module#proxy_ignore_headers\">proxy_ignore_headers</a>, <a href=\"ngx_http_fastcgi_module#fastcgi_ignore_headers\">fastcgi_ignore_headers</a>, <a href=\"ngx_http_uwsgi_module#uwsgi_ignore_headers\">uwsgi_ignore_headers</a>, and <a href=\"ngx_http_scgi_module#scgi_ignore_headers\">scgi_ignore_headers</a> directives. </p>\n<div class=\"directive\" id=\"limit_rate_after\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_rate_after</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>limit_rate_after 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.8.0. </p>\n</div>\n<p> Sets the initial amount after which the further transmission of a response to a client will be rate limited. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nlocation /flv/ {\n    flv;\n    limit_rate_after 500k;\n    limit_rate       50k;\n}\n</pre>\n\n<div class=\"directive\" id=\"lingering_close\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>lingering_close</strong> \n    <code>off</code> |\n    <code>on</code> |\n    <code>always</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>lingering_close on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table> <p> This directive appeared in versions 1.1.0 and 1.0.6. </p> </div>\n<p> Controls how nginx closes client connections. </p>\n<p> The default value “<code>on</code>” instructs nginx to <a href=\"#lingering_timeout\">wait for</a> and <a href=\"#lingering_time\">process</a> additional data from a client before fully closing a connection, but only if heuristics suggests that a client may be sending more data. </p>\n<p> The value “<code>always</code>” will cause nginx to unconditionally wait for and process additional client data. </p>\n<p> The value “<code>off</code>” tells nginx to never wait for more data and close the connection immediately. This behavior breaks the protocol and should not be used under normal circumstances. </p>\n<div class=\"directive\" id=\"lingering_time\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>lingering_time</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>lingering_time 30s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> When <a href=\"#lingering_close\">lingering_close</a> is in effect, this directive specifies the maximum time during which nginx will process (read and ignore) additional data coming from a client. After that, the connection will be closed, even if there will be more data. </p>\n<div class=\"directive\" id=\"lingering_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>lingering_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>lingering_timeout 5s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> When <a href=\"#lingering_close\">lingering_close</a> is in effect, this directive specifies the maximum waiting time for more client data to arrive. If data are not received during this time, the connection is closed. Otherwise, the data are read and ignored, and nginx starts waiting for more data again. The “wait-read-ignore” cycle is repeated, but no longer than specified by the <a href=\"#lingering_time\">lingering_time</a> directive. </p>\n<div class=\"directive\" id=\"listen\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>listen</strong> \n    <code><i>address</i></code>[:<code><i>port</i></code>]\n    [<code>default_server</code>]\n    [<code>ssl</code>]\n    [<code>http2</code> | <code>spdy</code>]\n    [<code>proxy_protocol</code>]\n    [<code>setfib</code>=<code><i>number</i></code>]\n    [<code>fastopen</code>=<code><i>number</i></code>]\n    [<code>backlog</code>=<code><i>number</i></code>]\n    [<code>rcvbuf</code>=<code><i>size</i></code>]\n    [<code>sndbuf</code>=<code><i>size</i></code>]\n    [<code>accept_filter</code>=<code><i>filter</i></code>]\n    [<code>deferred</code>]\n    [<code>bind</code>]\n    [<code>ipv6only</code>=<code>on</code>|<code>off</code>]\n    [<code>reuseport</code>]\n    [<code>so_keepalive</code>=<code>on</code>|<code>off</code>|[<code><i>keepidle</i></code>]:[<code><i>keepintvl</i></code>]:[<code><i>keepcnt</i></code>]];</code><br><code><strong>listen</strong> \n    <code><i>port</i></code>\n    [<code>default_server</code>]\n    [<code>ssl</code>]\n    [<code>http2</code> | <code>spdy</code>]\n    [<code>proxy_protocol</code>]\n    [<code>setfib</code>=<code><i>number</i></code>]\n    [<code>fastopen</code>=<code><i>number</i></code>]\n    [<code>backlog</code>=<code><i>number</i></code>]\n    [<code>rcvbuf</code>=<code><i>size</i></code>]\n    [<code>sndbuf</code>=<code><i>size</i></code>]\n    [<code>accept_filter</code>=<code><i>filter</i></code>]\n    [<code>deferred</code>]\n    [<code>bind</code>]\n    [<code>ipv6only</code>=<code>on</code>|<code>off</code>]\n    [<code>reuseport</code>]\n    [<code>so_keepalive</code>=<code>on</code>|<code>off</code>|[<code><i>keepidle</i></code>]:[<code><i>keepintvl</i></code>]:[<code><i>keepcnt</i></code>]];</code><br><code><strong>listen</strong> \n    <code>unix:</code><code><i>path</i></code>\n    [<code>default_server</code>]\n    [<code>ssl</code>]\n    [<code>http2</code> | <code>spdy</code>]\n    [<code>proxy_protocol</code>]\n    [<code>backlog</code>=<code><i>number</i></code>]\n    [<code>rcvbuf</code>=<code><i>size</i></code>]\n    [<code>sndbuf</code>=<code><i>size</i></code>]\n    [<code>accept_filter</code>=<code><i>filter</i></code>]\n    [<code>deferred</code>]\n    [<code>bind</code>]\n    [<code>so_keepalive</code>=<code>on</code>|<code>off</code>|[<code><i>keepidle</i></code>]:[<code><i>keepintvl</i></code>]:[<code><i>keepcnt</i></code>]];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>listen *:80 | *:8000;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>address</i></code> and <code><i>port</i></code> for IP, or the <code><i>path</i></code> for a UNIX-domain socket on which the server will accept requests. Both <code><i>address</i></code> and <code><i>port</i></code>, or only <code><i>address</i></code> or only <code><i>port</i></code> can be specified. An <code><i>address</i></code> may also be a hostname, for example: </p> <pre data-language=\"nginx\">\nlisten 127.0.0.1:8000;\nlisten 127.0.0.1;\nlisten 8000;\nlisten *:8000;\nlisten localhost:8000;\n</pre>\n<p> IPv6 addresses (0.7.36) are specified in square brackets: </p> <pre data-language=\"nginx\">\nlisten [::]:8000;\nlisten [::1];\n</pre>\n<p> UNIX-domain sockets (0.8.21) are specified with the “<code>unix:</code>” prefix: </p> <pre data-language=\"nginx\">\nlisten unix:/var/run/nginx.sock;\n</pre>\n\n<p> If only <code><i>address</i></code> is given, the port 80 is used. </p>\n<p> If the directive is not present then either <code>*:80</code> is used if nginx runs with the superuser privileges, or <code>*:8000</code> otherwise. </p>\n<p> The <code>default_server</code> parameter, if present, will cause the server to become the default server for the specified <code><i>address</i></code>:<code><i>port</i></code> pair. If none of the directives have the <code>default_server</code> parameter then the first server with the <code><i>address</i></code>:<code><i>port</i></code> pair will be the default server for this pair. </p> <blockquote class=\"note\"> In versions prior to 0.8.21 this parameter is named simply <code>default</code>. </blockquote>\n\n<p> The <code>ssl</code> parameter (0.7.14) allows specifying that all connections accepted on this port should work in SSL mode. This allows for a more compact <a href=\"configuring_https_servers#single_http_https_server\">configuration</a> for the server that handles both HTTP and HTTPS requests. </p>\n<p> The <code>http2</code> parameter (1.9.5) configures the port to accept <a href=\"ngx_http_v2_module\">HTTP/2</a> connections. Normally, for this to work the <code>ssl</code> parameter should be specified as well, but nginx can also be configured to accept HTTP/2 connections without SSL. </p>\n<p> The <code>spdy</code> parameter (1.3.15-1.9.4) allows accepting <a href=\"ngx_http_spdy_module\">SPDY</a> connections on this port. Normally, for this to work the <code>ssl</code> parameter should be specified as well, but nginx can also be configured to accept SPDY connections without SSL. </p>\n<p> The <code>proxy_protocol</code> parameter (1.5.12) allows specifying that all connections accepted on this port should use the <a href=\"http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt\">PROXY protocol</a>. </p>\n<p> The <code>listen</code> directive can have several additional parameters specific to socket-related system calls. These parameters can be specified in any <code>listen</code> directive, but only once for a given <code><i>address</i></code>:<code><i>port</i></code> pair. </p> <blockquote class=\"note\"> In versions prior to 0.8.21, they could only be specified in the <code>listen</code> directive together with the <code>default</code> parameter. </blockquote>\n <dl class=\"compact\"> <dt> <code>setfib</code>=<code><i>number</i></code> </dt> <dd> this parameter (0.8.44) sets the associated routing table, FIB (the <code>SO_SETFIB</code> option) for the listening socket. This currently works only on FreeBSD. </dd> <dt> <code>fastopen</code>=<code><i>number</i></code> </dt> <dd> enables “<a href=\"http://en.wikipedia.org/wiki/TCP_Fast_Open\">TCP Fast Open</a>” for the listening socket (1.5.8) and <a href=\"http://tools.ietf.org/html/rfc7413#section-5.1\">limits</a> the maximum length for the queue of connections that have not yet completed the three-way handshake. <blockquote class=\"note\"> Do not enable this feature unless the server can handle receiving the <a href=\"http://tools.ietf.org/html/rfc7413#section-6.1\"> same SYN packet with data</a> more than once. </blockquote> </dd> <dt> <code>backlog</code>=<code><i>number</i></code> </dt> <dd> sets the <code>backlog</code> parameter in the <code>listen()</code> call that limits the maximum length for the queue of pending connections. By default, <code>backlog</code> is set to -1 on FreeBSD, DragonFly BSD, and Mac OS X, and to 511 on other platforms. </dd> <dt> <code>rcvbuf</code>=<code><i>size</i></code> </dt> <dd> sets the receive buffer size (the <code>SO_RCVBUF</code> option) for the listening socket. </dd> <dt> <code>sndbuf</code>=<code><i>size</i></code> </dt> <dd> sets the send buffer size (the <code>SO_SNDBUF</code> option) for the listening socket. </dd> <dt> <code>accept_filter</code>=<code><i>filter</i></code> </dt> <dd> sets the name of accept filter (the <code>SO_ACCEPTFILTER</code> option) for the listening socket that filters incoming connections before passing them to <code>accept()</code>. This works only on FreeBSD and NetBSD 5.0+. Possible values are <a href=\"http://man.freebsd.org/accf_data\">dataready</a> and <a href=\"http://man.freebsd.org/accf_http\">httpready</a>. </dd> <dt> <code>deferred</code> </dt> <dd> instructs to use a deferred <code>accept()</code> (the <code>TCP_DEFER_ACCEPT</code> socket option) on Linux. </dd> <dt> <code>bind</code> </dt> <dd> instructs to make a separate <code>bind()</code> call for a given <code><i>address</i></code>:<code><i>port</i></code> pair. This is useful because if there are several <code>listen</code> directives with the same port but different addresses, and one of the <code>listen</code> directives listens on all addresses for the given port (<code>*:</code><code><i>port</i></code>), nginx will <code>bind()</code> only to <code>*:</code><code><i>port</i></code>. It should be noted that the <code>getsockname()</code> system call will be made in this case to determine the address that accepted the connection. If the <code>setfib</code>, <code>backlog</code>, <code>rcvbuf</code>, <code>sndbuf</code>, <code>accept_filter</code>, <code>deferred</code>, <code>ipv6only</code>, or <code>so_keepalive</code> parameters are used then for a given <code><i>address</i></code>:<code><i>port</i></code> pair a separate <code>bind()</code> call will always be made. </dd> <dt> <code>ipv6only</code>=<code>on</code>|<code>off</code> </dt> <dd> this parameter (0.7.42) determines (via the <code>IPV6_V6ONLY</code> socket option) whether an IPv6 socket listening on a wildcard address <code>[::]</code> will accept only IPv6 connections or both IPv6 and IPv4 connections. This parameter is turned on by default. It can only be set once on start. <blockquote class=\"note\"> Prior to version 1.3.4, if this parameter was omitted then the operating system’s settings were in effect for the socket. </blockquote> </dd> <dt id=\"reuseport\"> <code>reuseport</code> </dt> <dd> this parameter (1.9.1) instructs to create an individual listening socket for each worker process (using the <code>SO_REUSEPORT</code> socket option), allowing a kernel to distribute incoming connections between worker processes. This currently works only on Linux 3.9+ and DragonFly BSD. <blockquote class=\"note\"> Inappropriate use of this option may have its security <a href=\"http://man7.org/linux/man-pages/man7/socket.7.html\">implications</a>. </blockquote> </dd> <dt> <code>so_keepalive</code>=<code>on</code>|<code>off</code>|[<code><i>keepidle</i></code>]:[<code><i>keepintvl</i></code>]:[<code><i>keepcnt</i></code>] </dt> <dd> this parameter (1.1.11) configures the “TCP keepalive” behavior for the listening socket. If this parameter is omitted then the operating system’s settings will be in effect for the socket. If it is set to the value “<code>on</code>”, the <code>SO_KEEPALIVE</code> option is turned on for the socket. If it is set to the value “<code>off</code>”, the <code>SO_KEEPALIVE</code> option is turned off for the socket. Some operating systems support setting of TCP keepalive parameters on a per-socket basis using the <code>TCP_KEEPIDLE</code>, <code>TCP_KEEPINTVL</code>, and <code>TCP_KEEPCNT</code> socket options. On such systems (currently, Linux 2.4+, NetBSD 5+, and FreeBSD 9.0-STABLE), they can be configured using the <code><i>keepidle</i></code>, <code><i>keepintvl</i></code>, and <code><i>keepcnt</i></code> parameters. One or two parameters may be omitted, in which case the system default setting for the corresponding socket option will be in effect. For example, <pre data-language=\"nginx\">so_keepalive=30m::10</pre> will set the idle timeout (<code>TCP_KEEPIDLE</code>) to 30 minutes, leave the probe interval (<code>TCP_KEEPINTVL</code>) at its system default, and set the probes count (<code>TCP_KEEPCNT</code>) to 10 probes. </dd> </dl>\n\n<p> Example: </p> <pre data-language=\"nginx\">\nlisten 127.0.0.1 default_server accept_filter=dataready backlog=1024;\n</pre>\n\n<div class=\"directive\" id=\"location\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>location</strong> [\n    <code>=</code> |\n    <code>~</code> |\n    <code>~*</code> |\n    <code>^~</code>\n    ] <code><i>uri</i></code> { ... }</code><br><code><strong>location</strong> <code>@</code><code><i>name</i></code> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets configuration depending on a request URI. </p>\n<p> The matching is performed against a normalized URI, after decoding the text encoded in the “<code>%XX</code>” form, resolving references to relative path components “<code>.</code>” and “<code>..</code>”, and possible <a href=\"#merge_slashes\">compression</a> of two or more adjacent slashes into a single slash. </p>\n<p> A location can either be defined by a prefix string, or by a regular expression. Regular expressions are specified with the preceding “<code>~*</code>” modifier (for case-insensitive matching), or the “<code>~</code>” modifier (for case-sensitive matching). To find location matching a given request, nginx first checks locations defined using the prefix strings (prefix locations). Among them, the location with the longest matching prefix is selected and remembered. Then regular expressions are checked, in the order of their appearance in the configuration file. The search of regular expressions terminates on the first match, and the corresponding configuration is used. If no match with a regular expression is found then the configuration of the prefix location remembered earlier is used. </p>\n<p> <code>location</code> blocks can be nested, with some exceptions mentioned below. </p>\n<p> For case-insensitive operating systems such as Mac OS X and Cygwin, matching with prefix strings ignores a case (0.7.7). However, comparison is limited to one-byte locales. </p>\n<p> Regular expressions can contain captures (0.7.40) that can later be used in other directives. </p>\n<p> If the longest matching prefix location has the “<code>^~</code>” modifier then regular expressions are not checked. </p>\n<p> Also, using the “<code>=</code>” modifier it is possible to define an exact match of URI and location. If an exact match is found, the search terminates. For example, if a “<code>/</code>” request happens frequently, defining “<code>location = /</code>” will speed up the processing of these requests, as search terminates right after the first comparison. Such a location cannot obviously contain nested locations. </p>\n <blockquote class=\"note\"> In versions from 0.7.1 to 0.8.41, if a request matched the prefix location without the “<code>=</code>” and “<code>^~</code>” modifiers, the search also terminated and regular expressions were not checked. </blockquote>\n\n<p> Let’s illustrate the above by an example: </p> <pre data-language=\"nginx\">\nlocation = / {\n    [ configuration A ]\n}\n\nlocation / {\n    [ configuration B ]\n}\n\nlocation /documents/ {\n    [ configuration C ]\n}\n\nlocation ^~ /images/ {\n    [ configuration D ]\n}\n\nlocation ~* \\.(gif|jpg|jpeg)$ {\n    [ configuration E ]\n}\n</pre>\n<p> The “<code>/</code>” request will match configuration A, the “<code>/index.html</code>” request will match configuration B, the “<code>/documents/document.html</code>” request will match configuration C, the “<code>/images/1.gif</code>” request will match configuration D, and the “<code>/documents/1.jpg</code>” request will match configuration E. </p>\n<p> The “<code>@</code>” prefix defines a named location. Such a location is not used for a regular request processing, but instead used for request redirection. They cannot be nested, and cannot contain nested locations. </p>\n<p> If a location is defined by a prefix string that ends with the slash character, and requests are processed by one of <a href=\"ngx_http_proxy_module#proxy_pass\">proxy_pass</a>, <a href=\"ngx_http_fastcgi_module#fastcgi_pass\">fastcgi_pass</a>, <a href=\"ngx_http_uwsgi_module#uwsgi_pass\">uwsgi_pass</a>, <a href=\"ngx_http_scgi_module#scgi_pass\">scgi_pass</a>, or <a href=\"ngx_http_memcached_module#memcached_pass\">memcached_pass</a>, then the special processing is performed. In response to a request with URI equal to this string, but without the trailing slash, a permanent redirect with the code 301 will be returned to the requested URI with the slash appended. If this is not desired, an exact match of the URI and location could be defined like this: </p> <pre data-language=\"nginx\">\nlocation /user/ {\n    proxy_pass http://user.example.com;\n}\n\nlocation = /user {\n    proxy_pass http://login.example.com;\n}\n</pre>\n\n<div class=\"directive\" id=\"log_not_found\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>log_not_found</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>log_not_found on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables logging of errors about not found files into <a href=\"../ngx_core_module#error_log\">error_log</a>. </p>\n<div class=\"directive\" id=\"log_subrequest\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>log_subrequest</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>log_subrequest off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables logging of subrequests into <a href=\"ngx_http_log_module#access_log\">access_log</a>. </p>\n<div class=\"directive\" id=\"max_ranges\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>max_ranges</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.2. </p>\n</div>\n<p> Limits the maximum allowed number of ranges in byte-range requests. Requests that exceed the limit are processed as if there were no byte ranges specified. By default, the number of ranges is not limited. The zero value disables the byte-range support completely. </p>\n<div class=\"directive\" id=\"merge_slashes\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>merge_slashes</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>merge_slashes on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables or disables compression of two or more adjacent slashes in a URI into a single slash. </p>\n<p> Note that compression is essential for the correct matching of prefix string and regular expression locations. Without it, the “<code>//scripts/one.php</code>” request would not match </p> <pre data-language=\"nginx\">\nlocation /scripts/ {\n    ...\n}\n</pre>\n<p> and might be processed as a static file. So it gets converted to “<code>/scripts/one.php</code>”. </p>\n<p> Turning the compression <code>off</code> can become necessary if a URI contains base64-encoded names, since base64 uses the “<code>/</code>” character internally. However, for security considerations, it is better to avoid turning the compression off. </p>\n<p> If the directive is specified on the <a href=\"#server\">server</a> level, its value is only used if a server is a default one. The value specified also applies to all virtual servers listening on the same address and port. </p>\n<div class=\"directive\" id=\"msie_padding\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>msie_padding</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>msie_padding on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables adding comments to responses for MSIE clients with status greater than 400 to increase the response size to 512 bytes. </p>\n<div class=\"directive\" id=\"msie_refresh\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>msie_refresh</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>msie_refresh off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables issuing refreshes instead of redirects for MSIE clients. </p>\n<div class=\"directive\" id=\"open_file_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>open_file_cache</strong> <code>off</code>;</code><br><code><strong>open_file_cache</strong> \n<code>max</code>=<code><i>N</i></code>\n[<code>inactive</code>=<code><i>time</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>open_file_cache off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Configures a cache that can store: </p> <ul class=\"compact\"> <li> open file descriptors, their sizes and modification times; </li> <li> information on existence of directories; </li> <li> file lookup errors, such as “file not found”, “no read permission”, and so on. <blockquote class=\"note\"> Caching of errors should be enabled separately by the <a href=\"#open_file_cache_errors\">open_file_cache_errors</a> directive. </blockquote> </li> </ul>\n\n<p> The directive has the following parameters: </p> <dl class=\"compact\"> <dt> <code>max</code> </dt> <dd> sets the maximum number of elements in the cache; on cache overflow the least recently used (LRU) elements are removed; </dd> <dt> <code>inactive</code> </dt> <dd> defines a time after which an element is removed from the cache if it has not been accessed during this time; by default, it is 60 seconds; </dd> <dt> <code>off</code> </dt> <dd> disables the cache. </dd> </dl>\n\n<p> Example: </p> <pre data-language=\"nginx\">\nopen_file_cache          max=1000 inactive=20s;\nopen_file_cache_valid    30s;\nopen_file_cache_min_uses 2;\nopen_file_cache_errors   on;\n</pre>\n\n<div class=\"directive\" id=\"open_file_cache_errors\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>open_file_cache_errors</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>open_file_cache_errors off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables caching of file lookup errors by <a href=\"#open_file_cache\">open_file_cache</a>. </p>\n<div class=\"directive\" id=\"open_file_cache_min_uses\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>open_file_cache_min_uses</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>open_file_cache_min_uses 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the minimum <code><i>number</i></code> of file accesses during the period configured by the <code>inactive</code> parameter of the <a href=\"#open_file_cache\">open_file_cache</a> directive, required for a file descriptor to remain open in the cache. </p>\n<div class=\"directive\" id=\"open_file_cache_valid\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>open_file_cache_valid</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>open_file_cache_valid 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a time after which <a href=\"#open_file_cache\">open_file_cache</a> elements should be validated. </p>\n<div class=\"directive\" id=\"output_buffers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>output_buffers</strong> <code><i>number</i></code> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>output_buffers 2 32k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>number</i></code> and <code><i>size</i></code> of the buffers used for reading a response from a disk. </p> <blockquote class=\"note\"> Prior to version 1.9.5, the default value was 1 32k. </blockquote>\n\n<div class=\"directive\" id=\"port_in_redirect\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>port_in_redirect</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>port_in_redirect on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables specifying the port in redirects issued by nginx. </p>\n<p> The use of the primary server name in redirects is controlled by the <a href=\"#server_name_in_redirect\">server_name_in_redirect</a> directive. </p>\n<div class=\"directive\" id=\"postpone_output\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>postpone_output</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>postpone_output 1460;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> If possible, the transmission of client data will be postponed until nginx has at least <code><i>size</i></code> bytes of data to send. The zero value disables postponing data transmission. </p>\n<div class=\"directive\" id=\"read_ahead\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>read_ahead</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>read_ahead 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the amount of pre-reading for the kernel when working with file. </p>\n<p> On Linux, the <code>posix_fadvise(0, 0, 0, POSIX_FADV_SEQUENTIAL)</code> system call is used, and so the <code><i>size</i></code> parameter is ignored. </p>\n<p> On FreeBSD, the <code>fcntl(O_READAHEAD,</code> <code><i>size</i></code><code>)</code> system call, supported since FreeBSD 9.0-CURRENT, is used. FreeBSD 7 has to be <a href=\"http://sysoev.ru/freebsd/patch.readahead.txt\">patched</a>. </p>\n<div class=\"directive\" id=\"recursive_error_pages\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>recursive_error_pages</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>recursive_error_pages off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables doing several redirects using the <a href=\"#error_page\">error_page</a> directive. The number of such redirects is <a href=\"#internal\">limited</a>. </p>\n<div class=\"directive\" id=\"request_pool_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>request_pool_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>request_pool_size 4k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Allows accurate tuning of per-request memory allocations. This directive has minimal impact on performance and should not generally be used. </p>\n<div class=\"directive\" id=\"reset_timedout_connection\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>reset_timedout_connection</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>reset_timedout_connection off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables resetting timed out connections. The reset is performed as follows. Before closing a socket, the <code>SO_LINGER</code> option is set on it with a timeout value of 0. When the socket is closed, TCP RST is sent to the client, and all memory occupied by this socket is released. This helps avoid keeping an already closed socket with filled buffers in a FIN_WAIT1 state for a long time. </p>\n<p> It should be noted that timed out keep-alive connections are closed normally. </p>\n<div class=\"directive\" id=\"resolver\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>resolver</strong> \n    <code><i>address</i></code> ...\n    [<code>valid</code>=<code><i>time</i></code>]\n    [<code>ipv6</code>=<code>on</code>|<code>off</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Configures name servers used to resolve names of upstream servers into addresses, for example: </p> <pre data-language=\"nginx\">\nresolver 127.0.0.1 [::1]:5353;\n</pre>\n<p> An address can be specified as a domain name or IP address, and an optional port (1.3.1, 1.2.2). If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion. </p> <blockquote class=\"note\"> Before version 1.1.7, only a single name server could be configured. Specifying name servers using IPv6 addresses is supported starting from versions 1.3.1 and 1.2.2. </blockquote>\n<p> By default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv6 addresses is not desired, the <code>ipv6=off</code> parameter can be specified. </p> <blockquote class=\"note\"> Resolving of names into IPv6 addresses is supported starting from version 1.5.8. </blockquote>\n<p> By default, nginx caches answers using the TTL value of a response. An optional <code>valid</code> parameter allows overriding it: </p> <pre data-language=\"nginx\">\nresolver 127.0.0.1 [::1]:5353 valid=30s;\n</pre>\n <blockquote class=\"note\"> Before version 1.1.9, tuning of caching time was not possible, and nginx always cached answers for the duration of 5 minutes. </blockquote>\n\n<div class=\"directive\" id=\"resolver_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>resolver_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>resolver_timeout 30s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a timeout for name resolution, for example: </p> <pre data-language=\"nginx\">\nresolver_timeout 5s;\n</pre>\n\n<div class=\"directive\" id=\"root\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>root</strong> <code><i>path</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>root html;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Sets the root directory for requests. For example, with the following configuration </p> <pre data-language=\"nginx\">\nlocation /i/ {\n    root /data/w3;\n}\n</pre>\n<p> The <code>/data/w3/i/top.gif</code> file will be sent in response to the “<code>/i/top.gif</code>” request. </p>\n<p> The <code><i>path</i></code> value can contain variables, except <code>$document_root</code> and <code>$realpath_root</code>. </p>\n<p> A path to the file is constructed by merely adding a URI to the value of the <code>root</code> directive. If a URI has to be modified, the <a href=\"#alias\">alias</a> directive should be used. </p>\n<div class=\"directive\" id=\"satisfy\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>satisfy</strong> <code>all</code> | <code>any</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>satisfy all;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Allows access if all (<code>all</code>) or at least one (<code>any</code>) of the <a href=\"ngx_http_access_module\">ngx_http_access_module</a>, <a href=\"ngx_http_auth_basic_module\">ngx_http_auth_basic_module</a> or <a href=\"ngx_http_auth_request_module\">ngx_http_auth_request_module</a> modules allow access. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nlocation / {\n    satisfy any;\n\n    allow 192.168.1.0/32;\n    deny  all;\n\n    auth_basic           \"closed site\";\n    auth_basic_user_file conf/htpasswd;\n}\n</pre>\n\n<div class=\"directive\" id=\"send_lowat\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>send_lowat</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>send_lowat 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on client sockets by using either <code>NOTE_LOWAT</code> flag of the <a href=\"../events#kqueue\">kqueue</a> method or the <code>SO_SNDLOWAT</code> socket option. In both cases the specified <code><i>size</i></code> is used. </p>\n<p> This directive is ignored on Linux, Solaris, and Windows. </p>\n<div class=\"directive\" id=\"send_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>send_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>send_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a timeout for transmitting a response to the client. The timeout is set only between two successive write operations, not for the transmission of the whole response. If the client does not receive anything within this time, the connection is closed. </p>\n<div class=\"directive\" id=\"sendfile\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>sendfile</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>sendfile off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Enables or disables the use of <code>sendfile()</code>. </p>\n<p> Starting from nginx 0.8.12 and FreeBSD 5.2.1, <a href=\"#aio\">aio</a> can be used to pre-load data for <code>sendfile()</code>: </p> <pre data-language=\"nginx\">\nlocation /video/ {\n    sendfile       on;\n    tcp_nopush     on;\n    aio            on;\n}\n</pre>\n<p> In this configuration, <code>sendfile()</code> is called with the <code>SF_NODISKIO</code> flag which causes it not to block on disk I/O, but, instead, report back that the data are not in memory. nginx then initiates an asynchronous data load by reading one byte. On the first read, the FreeBSD kernel loads the first 128K bytes of a file into memory, although next reads will only load data in 16K chunks. This can be changed using the <a href=\"#read_ahead\">read_ahead</a> directive. </p> <blockquote class=\"note\"> Before version 1.7.11, pre-loading could be enabled with <code>aio sendfile;</code>. </blockquote>\n\n<div class=\"directive\" id=\"sendfile_max_chunk\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>sendfile_max_chunk</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>sendfile_max_chunk 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> When set to a non-zero value, limits the amount of data that can be transferred in a single <code>sendfile()</code> call. Without the limit, one fast connection may seize the worker process entirely. </p>\n<div class=\"directive\" id=\"server\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>server</strong> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets configuration for a virtual server. There is no clear separation between IP-based (based on the IP address) and name-based (based on the “Host” request header field) virtual servers. Instead, the <a href=\"#listen\">listen</a> directives describe all addresses and ports that should accept connections for the server, and the <a href=\"#server_name\">server_name</a> directive lists all server names. Example configurations are provided in the “<a href=\"request_processing\">How nginx processes a request</a>” document. </p>\n<div class=\"directive\" id=\"server_name\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>server_name</strong> <code><i>name</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>server_name \"\";</code> </td> </tr> <tr> <th> Context: </th> <td> <code>server</code><br> </td> </tr> </table></div>\n<p> Sets names of a virtual server, for example: </p> <pre data-language=\"nginx\">\nserver {\n    server_name example.com www.example.com;\n}\n</pre>\n\n<p> The first name becomes the primary server name. </p>\n<p> Server names can include an asterisk (“<code>*</code>”) replacing the first or last part of a name: </p> <pre data-language=\"nginx\">\nserver {\n    server_name example.com *.example.com www.example.*;\n}\n</pre>\n<p> Such names are called wildcard names. </p>\n<p> The first two of the names mentioned above can be combined in one: </p> <pre data-language=\"nginx\">\nserver {\n    server_name .example.com;\n}\n</pre>\n\n<p> It is also possible to use regular expressions in server names, preceding the name with a tilde (“<code>~</code>”): </p> <pre data-language=\"nginx\">\nserver {\n    server_name www.example.com ~^www\\d+\\.example\\.com$;\n}\n</pre>\n\n<p> Regular expressions can contain captures (0.7.40) that can later be used in other directives: </p> <pre data-language=\"nginx\">\nserver {\n    server_name ~^(www\\.)?(.+)$;\n\n    location / {\n        root /sites/$2;\n    }\n}\n\nserver {\n    server_name _;\n\n    location / {\n        root /sites/default;\n    }\n}\n</pre>\n\n<p> Named captures in regular expressions create variables (0.8.25) that can later be used in other directives: </p> <pre data-language=\"nginx\">\nserver {\n    server_name ~^(www\\.)?(?&lt;domain&gt;.+)$;\n\n    location / {\n        root /sites/$domain;\n    }\n}\n\nserver {\n    server_name _;\n\n    location / {\n        root /sites/default;\n    }\n}\n</pre>\n\n<p> If the directive’s parameter is set to “<code>$hostname</code>” (0.9.4), the machine’s hostname is inserted. </p>\n<p> It is also possible to specify an empty server name (0.7.11): </p> <pre data-language=\"nginx\">\nserver {\n    server_name www.example.com \"\";\n}\n</pre>\n<p> It allows this server to process requests without the “Host” header field — instead of the default server — for the given address:port pair. This is the default setting. </p> <blockquote class=\"note\"> Before 0.8.48, the machine’s hostname was used by default. </blockquote>\n\n<p> During searching for a virtual server by name, if the name matches more than one of the specified variants, (e.g. both a wildcard name and regular expression match), the first matching variant will be chosen, in the following order of priority: </p> <ol class=\"compact\"> <li> the exact name </li> <li> the longest wildcard name starting with an asterisk, e.g. “<code>*.example.com</code>” </li> <li> the longest wildcard name ending with an asterisk, e.g. “<code>mail.*</code>” </li> <li> the first matching regular expression (in order of appearance in the configuration file) </li> </ol>\n\n<p> Detailed description of server names is provided in a separate <a href=\"server_names\">Server names</a> document. </p>\n<div class=\"directive\" id=\"server_name_in_redirect\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>server_name_in_redirect</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>server_name_in_redirect off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables the use of the primary server name, specified by the <a href=\"#server_name\">server_name</a> directive, in redirects issued by nginx. When the use of the primary server name is disabled, the name from the “Host” request header field is used. If this field is not present, the IP address of the server is used. </p>\n<p> The use of a port in redirects is controlled by the <a href=\"#port_in_redirect\">port_in_redirect</a> directive. </p>\n<div class=\"directive\" id=\"server_names_hash_bucket_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>server_names_hash_bucket_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>server_names_hash_bucket_size 32|64|128;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets the bucket size for the server names hash tables. The default value depends on the size of the processor’s cache line. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p>\n<div class=\"directive\" id=\"server_names_hash_max_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>server_names_hash_max_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>server_names_hash_max_size 512;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets the maximum <code><i>size</i></code> of the server names hash tables. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p>\n<div class=\"directive\" id=\"server_tokens\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>server_tokens</strong> \n    <code>on</code> |\n    <code>off</code> |\n    <code><i>string</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>server_tokens on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables emitting nginx version in error messages and in the “Server” response header field. </p>\n<p> Additionally, as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>, starting from version 1.9.13 the signature in error messages and the “Server” response header field value can be set explicitly using the <code><i>string</i></code> with variables. An empty string disables the emission of the “Server” field. </p>\n<div class=\"directive\" id=\"tcp_nodelay\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>tcp_nodelay</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>tcp_nodelay on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables the use of the <code>TCP_NODELAY</code> option. The option is enabled only when a connection is transitioned into the keep-alive state. </p>\n<div class=\"directive\" id=\"tcp_nopush\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>tcp_nopush</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>tcp_nopush off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables the use of the <code>TCP_NOPUSH</code> socket option on FreeBSD or the <code>TCP_CORK</code> socket option on Linux. The options are enabled only when <a href=\"#sendfile\">sendfile</a> is used. Enabling the option allows </p> <ul class=\"compact\"> <li> sending the response header and the beginning of a file in one packet, on Linux and FreeBSD 4.*; </li> <li> sending a file in full packets. </li> </ul>\n\n<div class=\"directive\" id=\"try_files\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>try_files</strong> <code><i>file</i></code> ... <code><i>uri</i></code>;</code><br><code><strong>try_files</strong> <code><i>file</i></code> ... =<code><i>code</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Checks the existence of files in the specified order and uses the first found file for request processing; the processing is performed in the current context. The path to a file is constructed from the <code><i>file</i></code> parameter according to the <a href=\"#root\">root</a> and <a href=\"#alias\">alias</a> directives. It is possible to check directory’s existence by specifying a slash at the end of a name, e.g. “<code>$uri/</code>”. If none of the files were found, an internal redirect to the <code><i>uri</i></code> specified in the last parameter is made. For example: </p> <pre data-language=\"nginx\">\nlocation /images/ {\n    try_files $uri /images/default.gif;\n}\n\nlocation = /images/default.gif {\n    expires 30s;\n}\n</pre>\n<p> The last parameter can also point to a named location, as shown in examples below. Starting from version 0.7.51, the last parameter can also be a <code><i>code</i></code>: </p> <pre data-language=\"nginx\">\nlocation / {\n    try_files $uri $uri/index.html $uri.html =404;\n}\n</pre>\n\n<p> Example in proxying Mongrel: </p> <pre data-language=\"nginx\">\nlocation / {\n    try_files /system/maintenance.html\n              $uri $uri/index.html $uri.html\n              @mongrel;\n}\n\nlocation @mongrel {\n    proxy_pass http://mongrel;\n}\n</pre>\n\n<p> Example for Drupal/FastCGI: </p> <pre data-language=\"nginx\">\nlocation / {\n    try_files $uri $uri/ @drupal;\n}\n\nlocation ~ \\.php$ {\n    try_files $uri @drupal;\n\n    fastcgi_pass ...;\n\n    fastcgi_param SCRIPT_FILENAME /path/to$fastcgi_script_name;\n    fastcgi_param SCRIPT_NAME     $fastcgi_script_name;\n    fastcgi_param QUERY_STRING    $args;\n\n    ... other fastcgi_param's\n}\n\nlocation @drupal {\n    fastcgi_pass ...;\n\n    fastcgi_param SCRIPT_FILENAME /path/to/index.php;\n    fastcgi_param SCRIPT_NAME     /index.php;\n    fastcgi_param QUERY_STRING    q=$uri&amp;$args;\n\n    ... other fastcgi_param's\n}\n</pre>\n<p> In the following example, </p> <pre data-language=\"nginx\">\nlocation / {\n    try_files $uri $uri/ @drupal;\n}\n</pre>\n<p> the <code>try_files</code> directive is equivalent to </p> <pre data-language=\"nginx\">\nlocation / {\n    error_page 404 = @drupal;\n    log_not_found off;\n}\n</pre>\n<p> And here, </p> <pre data-language=\"nginx\">\nlocation ~ \\.php$ {\n    try_files $uri @drupal;\n\n    fastcgi_pass ...;\n\n    fastcgi_param SCRIPT_FILENAME /path/to$fastcgi_script_name;\n\n    ...\n}\n</pre>\n<p> <code>try_files</code> checks the existence of the PHP file before passing the request to the FastCGI server. </p>\n<p> Example for Wordpress and Joomla: </p> <pre data-language=\"nginx\">\nlocation / {\n    try_files $uri $uri/ @wordpress;\n}\n\nlocation ~ \\.php$ {\n    try_files $uri @wordpress;\n\n    fastcgi_pass ...;\n\n    fastcgi_param SCRIPT_FILENAME /path/to$fastcgi_script_name;\n    ... other fastcgi_param's\n}\n\nlocation @wordpress {\n    fastcgi_pass ...;\n\n    fastcgi_param SCRIPT_FILENAME /path/to/index.php;\n    ... other fastcgi_param's\n}\n</pre>\n\n<div class=\"directive\" id=\"types\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>types</strong> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>types {\n    text/html  html;\n    image/gif  gif;\n    image/jpeg jpg;\n}</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Maps file name extensions to MIME types of responses. Extensions are case-insensitive. Several extensions can be mapped to one type, for example: </p> <pre data-language=\"nginx\">\ntypes {\n    application/octet-stream bin exe dll;\n    application/octet-stream deb;\n    application/octet-stream dmg;\n}\n</pre>\n\n<p> A sufficiently full mapping table is distributed with nginx in the <code>conf/mime.types</code> file. </p>\n<p> To make a particular location emit the “<code>application/octet-stream</code>” MIME type for all requests, the following configuration can be used: </p> <pre data-language=\"nginx\">\nlocation /download/ {\n    types        { }\n    default_type application/octet-stream;\n}\n</pre>\n\n<div class=\"directive\" id=\"types_hash_bucket_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>types_hash_bucket_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>types_hash_bucket_size 64;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the bucket size for the types hash tables. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p> <blockquote class=\"note\"> Prior to version 1.5.13, the default value depended on the size of the processor’s cache line. </blockquote>\n\n<div class=\"directive\" id=\"types_hash_max_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>types_hash_max_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>types_hash_max_size 1024;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the maximum <code><i>size</i></code> of the types hash tables. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p>\n<div class=\"directive\" id=\"underscores_in_headers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>underscores_in_headers</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>underscores_in_headers off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables or disables the use of underscores in client request header fields. When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the <a href=\"#ignore_invalid_headers\">ignore_invalid_headers</a> directive. </p>\n<p> If the directive is specified on the <a href=\"#server\">server</a> level, its value is only used if a server is a default one. The value specified also applies to all virtual servers listening on the same address and port. </p>\n<div class=\"directive\" id=\"variables_hash_bucket_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>variables_hash_bucket_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>variables_hash_bucket_size 64;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets the bucket size for the variables hash table. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p>\n<div class=\"directive\" id=\"variables_hash_max_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>variables_hash_max_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>variables_hash_max_size 1024;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets the maximum <code><i>size</i></code> of the variables hash table. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p> <blockquote class=\"note\"> Prior to version 1.5.13, the default value was 512. </blockquote>\n <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_core_module</code> module supports embedded variables with names matching the Apache Server variables. First of all, these are variables representing client request header fields, such as <code>$http_user_agent</code>, <code>$http_cookie</code>, and so on. Also there are other variables: </p> <dl class=\"compact\"> <dt id=\"var_arg_\">\n<code>$arg_</code><code><i>name</i></code>\n</dt> <dd> argument <code><i>name</i></code> in the request line </dd> <dt id=\"var_args\"><code>$args</code></dt> <dd> arguments in the request line </dd> <dt id=\"var_binary_remote_addr\"><code>$binary_remote_addr</code></dt> <dd> client address in a binary form, value’s length is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses </dd> <dt id=\"var_body_bytes_sent\"><code>$body_bytes_sent</code></dt> <dd> number of bytes sent to a client, not counting the response header; this variable is compatible with the “<code>%B</code>” parameter of the <code>mod_log_config</code> Apache module </dd> <dt id=\"var_bytes_sent\"><code>$bytes_sent</code></dt> <dd> number of bytes sent to a client (1.3.8, 1.2.5) </dd> <dt id=\"var_connection\"><code>$connection</code></dt> <dd> connection serial number (1.3.8, 1.2.5) </dd> <dt id=\"var_connection_requests\"><code>$connection_requests</code></dt> <dd> current number of requests made through a connection (1.3.8, 1.2.5) </dd> <dt id=\"var_content_length\"><code>$content_length</code></dt> <dd> “Content-Length” request header field </dd> <dt id=\"var_content_type\"><code>$content_type</code></dt> <dd> “Content-Type” request header field </dd> <dt id=\"var_cookie_\">\n<code>$cookie_</code><code><i>name</i></code>\n</dt> <dd> the <code><i>name</i></code> cookie </dd> <dt id=\"var_document_root\"><code>$document_root</code></dt> <dd> <a href=\"#root\">root</a> or <a href=\"#alias\">alias</a> directive’s value for the current request </dd> <dt id=\"var_document_uri\"><code>$document_uri</code></dt> <dd> same as <code>$uri</code> </dd> <dt id=\"var_host\"><code>$host</code></dt> <dd> in this order of precedence: host name from the request line, or host name from the “Host” request header field, or the server name matching a request </dd> <dt id=\"var_hostname\"><code>$hostname</code></dt> <dd> host name </dd> <dt id=\"var_http_\">\n<code>$http_</code><code><i>name</i></code>\n</dt> <dd> arbitrary request header field; the last part of a variable name is the field name converted to lower case with dashes replaced by underscores </dd> <dt id=\"var_https\"><code>$https</code></dt> <dd> “<code>on</code>” if connection operates in SSL mode, or an empty string otherwise </dd> <dt id=\"var_is_args\"><code>$is_args</code></dt> <dd> “<code>?</code>” if a request line has arguments, or an empty string otherwise </dd> <dt id=\"var_limit_rate\"><code>$limit_rate</code></dt> <dd> setting this variable enables response rate limiting; see <a href=\"#limit_rate\">limit_rate</a> </dd> <dt id=\"var_msec\"><code>$msec</code></dt> <dd> current time in seconds with the milliseconds resolution (1.3.9, 1.2.6) </dd> <dt id=\"var_nginx_version\"><code>$nginx_version</code></dt> <dd> nginx version </dd> <dt id=\"var_pid\"><code>$pid</code></dt> <dd> PID of the worker process </dd> <dt id=\"var_pipe\"><code>$pipe</code></dt> <dd> “<code>p</code>” if request was pipelined, “<code>.</code>” otherwise (1.3.12, 1.2.7) </dd> <dt id=\"var_proxy_protocol_addr\"><code>$proxy_protocol_addr</code></dt> <dd> client address from the PROXY protocol header, or an empty string otherwise (1.5.12) <p> The PROXY protocol must be previously enabled by setting the <code>proxy_protocol</code> parameter in the <a href=\"#listen\">listen</a> directive. </p> </dd> <dt id=\"var_proxy_protocol_port\"><code>$proxy_protocol_port</code></dt> <dd> client port from the PROXY protocol header, or an empty string otherwise (1.11.0) <p> The PROXY protocol must be previously enabled by setting the <code>proxy_protocol</code> parameter in the <a href=\"#listen\">listen</a> directive. </p> </dd> <dt id=\"var_query_string\"><code>$query_string</code></dt> <dd> same as <code>$args</code> </dd> <dt id=\"var_realpath_root\"><code>$realpath_root</code></dt> <dd> an absolute pathname corresponding to the <a href=\"#root\">root</a> or <a href=\"#alias\">alias</a> directive’s value for the current request, with all symbolic links resolved to real paths </dd> <dt id=\"var_remote_addr\"><code>$remote_addr</code></dt> <dd> client address </dd> <dt id=\"var_remote_port\"><code>$remote_port</code></dt> <dd> client port </dd> <dt id=\"var_remote_user\"><code>$remote_user</code></dt> <dd> user name supplied with the Basic authentication </dd> <dt id=\"var_request\"><code>$request</code></dt> <dd> full original request line </dd> <dt id=\"var_request_body\"><code>$request_body</code></dt> <dd> request body <p> The variable’s value is made available in locations processed by the <a href=\"ngx_http_proxy_module#proxy_pass\">proxy_pass</a>, <a href=\"ngx_http_fastcgi_module#fastcgi_pass\">fastcgi_pass</a>, <a href=\"ngx_http_uwsgi_module#uwsgi_pass\">uwsgi_pass</a>, and <a href=\"ngx_http_scgi_module#scgi_pass\">scgi_pass</a> directives when the request body was read to a <a href=\"#client_body_buffer_size\">memory buffer</a>. </p> </dd> <dt id=\"var_request_body_file\"><code>$request_body_file</code></dt> <dd> name of a temporary file with the request body <p> At the end of processing, the file needs to be removed. To always write the request body to a file, <a href=\"#client_body_in_file_only\">client_body_in_file_only</a> needs to be enabled. When the name of a temporary file is passed in a proxied request or in a request to a FastCGI/uwsgi/SCGI server, passing the request body should be disabled by the <a href=\"ngx_http_proxy_module#proxy_pass_request_body\"> proxy_pass_request_body off</a>, <a href=\"ngx_http_fastcgi_module#fastcgi_pass_request_body\"> fastcgi_pass_request_body off</a>, <a href=\"ngx_http_uwsgi_module#uwsgi_pass_request_body\"> uwsgi_pass_request_body off</a>, or <a href=\"ngx_http_scgi_module#scgi_pass_request_body\"> scgi_pass_request_body off</a> directives, respectively. </p> </dd> <dt id=\"var_request_completion\"><code>$request_completion</code></dt> <dd> “<code>OK</code>” if a request has completed, or an empty string otherwise </dd> <dt id=\"var_request_filename\"><code>$request_filename</code></dt> <dd> file path for the current request, based on the <a href=\"#root\">root</a> or <a href=\"#alias\">alias</a> directives, and the request URI </dd> <dt id=\"var_request_id\"><code>$request_id</code></dt> <dd> unique request identifier generated from 16 random bytes, in hexadecimal (1.11.0) </dd> <dt id=\"var_request_length\"><code>$request_length</code></dt> <dd> request length (including request line, header, and request body) (1.3.12, 1.2.7) </dd> <dt id=\"var_request_method\"><code>$request_method</code></dt> <dd> request method, usually “<code>GET</code>” or “<code>POST</code>” </dd> <dt id=\"var_request_time\"><code>$request_time</code></dt> <dd> request processing time in seconds with a milliseconds resolution (1.3.9, 1.2.6); time elapsed since the first bytes were read from the client </dd> <dt id=\"var_request_uri\"><code>$request_uri</code></dt> <dd> full original request URI (with arguments) </dd> <dt id=\"var_scheme\"><code>$scheme</code></dt> <dd> request scheme, “<code>http</code>” or “<code>https</code>” </dd> <dt id=\"var_sent_http_\">\n<code>$sent_http_</code><code><i>name</i></code>\n</dt> <dd> arbitrary response header field; the last part of a variable name is the field name converted to lower case with dashes replaced by underscores </dd> <dt id=\"var_server_addr\"><code>$server_addr</code></dt> <dd> an address of the server which accepted a request <p> Computing a value of this variable usually requires one system call. To avoid a system call, the <a href=\"#listen\">listen</a> directives must specify addresses and use the <code>bind</code> parameter. </p> </dd> <dt id=\"var_server_name\"><code>$server_name</code></dt> <dd> name of the server which accepted a request </dd> <dt id=\"var_server_port\"><code>$server_port</code></dt> <dd> port of the server which accepted a request </dd> <dt id=\"var_server_protocol\"><code>$server_protocol</code></dt> <dd> request protocol, usually “<code>HTTP/1.0</code>”, “<code>HTTP/1.1</code>”, or “<a href=\"ngx_http_v2_module\">HTTP/2.0</a>” </dd> <dt id=\"var_status\"><code>$status</code></dt> <dd> response status (1.3.2, 1.2.2) </dd> <dt id=\"var_tcpinfo_\"> <code>$tcpinfo_rtt</code>, <code>$tcpinfo_rttvar</code>, <code>$tcpinfo_snd_cwnd</code>, <code>$tcpinfo_rcv_space</code> </dt> <dd> information about the client TCP connection; available on systems that support the <code>TCP_INFO</code> socket option </dd> <dt id=\"var_time_iso8601\"><code>$time_iso8601</code></dt> <dd> local time in the ISO 8601 standard format (1.3.12, 1.2.7) </dd> <dt id=\"var_time_local\"><code>$time_local</code></dt> <dd> local time in the Common Log Format (1.3.12, 1.2.7) </dd> <dt id=\"var_uri\"><code>$uri</code></dt> <dd> current URI in request, <a href=\"#location\">normalized</a> <p> The value of <code>$uri</code> may change during request processing, e.g. when doing internal redirects, or when using index files. </p> </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_core_module.html</a>\n  </p>\n</div>\n","control":"<h1>Controlling nginx</h1>\n<ul>\n<li><a href=\"#reconfiguration\">Changing Configuration</a></li>\n<li><a href=\"#logs\">Rotating Log-files</a></li>\n<li><a href=\"#upgrade\">Upgrading Executable on the Fly</a></li>\n</ul>\n<p> nginx can be controlled with signals. The process ID of the master process is written to the file <code>/usr/local/nginx/logs/nginx.pid</code> by default. This name may be changed at configuration time, or in <code>nginx.conf</code> using the <a href=\"ngx_core_module#pid\">pid</a> directive. The master process supports the following signals: </p> <table width=\"100%\"> <tr>\n<td width=\"20%\">TERM, INT</td>\n<td>fast shutdown</td>\n</tr> <tr>\n<td width=\"20%\">QUIT</td>\n<td>graceful shutdown</td>\n</tr> <tr>\n<td width=\"20%\">HUP</td>\n<td>changing configuration, keeping up with a changed time zone (only for FreeBSD and Linux), starting new worker processes with a new configuration, graceful shutdown of old worker processes</td>\n</tr> <tr>\n<td width=\"20%\">USR1</td>\n<td>re-opening log files</td>\n</tr> <tr>\n<td width=\"20%\">USR2</td>\n<td>upgrading an executable file</td>\n</tr> <tr>\n<td width=\"20%\">WINCH</td>\n<td>graceful shutdown of worker processes</td>\n</tr> </table>\n\n<p> Individual worker processes can be controlled with signals as well, though it is not required. The supported signals are: </p> <table width=\"100%\"> <tr>\n<td width=\"20%\">TERM, INT</td>\n<td>fast shutdown</td>\n</tr> <tr>\n<td width=\"20%\">QUIT</td>\n<td>graceful shutdown</td>\n</tr> <tr>\n<td width=\"20%\">USR1</td>\n<td>re-opening log files</td>\n</tr> <tr>\n<td width=\"20%\">WINCH</td>\n<td>abnormal termination for debugging (requires <a href=\"ngx_core_module#debug_points\">debug_points</a> to be enabled) </td>\n</tr> </table>\n\n<h4 id=\"reconfiguration\">Changing Configuration</h4>\n<p> In order for nginx to re-read the configuration file, a HUP signal should be sent to the master process. The master process first checks the syntax validity, then tries to apply new configuration, that is, to open log files and new listen sockets. If this fails, it rolls back changes and continues to work with old configuration. If this succeeds, it starts new worker processes, and sends messages to old worker processes requesting them to shut down gracefully. Old worker processes close listen sockets and continue to service old clients. After all clients are serviced, old worker processes are shut down. </p>\n<p> Let’s illustrate this by example. Imagine that nginx is run on FreeBSD 4.x and the command </p> <pre data-language=\"nginx\">\nps axw -o pid,ppid,user,%cpu,vsz,wchan,command | egrep '(nginx|PID)'\n</pre>\n<p> produces the following output: </p> <pre data-language=\"nginx\">\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n33126     1 root     0.0  1148 pause  nginx: master process /usr/local/nginx/sbin/nginx\n33127 33126 nobody   0.0  1380 kqread nginx: worker process (nginx)\n33128 33126 nobody   0.0  1364 kqread nginx: worker process (nginx)\n33129 33126 nobody   0.0  1364 kqread nginx: worker process (nginx)\n</pre>\n\n<p> If HUP is sent to the master process, the output becomes: </p> <pre data-language=\"nginx\">\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n33126     1 root     0.0  1164 pause  nginx: master process /usr/local/nginx/sbin/nginx\n33129 33126 nobody   0.0  1380 kqread nginx: worker process is shutting down (nginx)\n33134 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n33135 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n33136 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n</pre>\n\n<p> One of the old worker processes with PID 33129 still continues to work. After some time it exits: </p> <pre data-language=\"nginx\">\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n33126     1 root     0.0  1164 pause  nginx: master process /usr/local/nginx/sbin/nginx\n33134 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n33135 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n33136 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n</pre>\n\n<h4 id=\"logs\">Rotating Log-files</h4>\n<p> In order to rotate log files, they need to be renamed first. After that USR1 signal should be sent to the master process. The master process will then re-open all currently open log files and assign them an unprivileged user under which the worker processes are running, as an owner. After successful re-opening, the master process closes all open files and sends the message to worker process to ask them to re-open files. Worker processes also open new files and close old files right away. As a result, old files are almost immediately available for post processing, such as compression. </p>\n<h4 id=\"upgrade\">Upgrading Executable on the Fly</h4>\n<p> In order to upgrade the server executable, the new executable file should be put in place of an old file first. After that USR2 signal should be sent to the master process. The master process first renames its file with the process ID to a new file with the <code>.oldbin</code> suffix, e.g. <code>/usr/local/nginx/logs/nginx.pid.oldbin</code>, then starts a new executable file that in turn starts new worker processes: </p> <pre data-language=\"nginx\">\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n33126     1 root     0.0  1164 pause  nginx: master process /usr/local/nginx/sbin/nginx\n33134 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n33135 33126 nobody   0.0  1380 kqread nginx: worker process (nginx)\n33136 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n36264 33126 root     0.0  1148 pause  nginx: master process /usr/local/nginx/sbin/nginx\n36265 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36266 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36267 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n</pre>\n\n<p> After that all worker processes (old and new ones) continue to accept requests. If the WINCH signal is sent to the first master process, it will send messages to its worker processes, requesting them to shut down gracefully, and they will start to exit: </p> <pre data-language=\"nginx\">\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n33126     1 root     0.0  1164 pause  nginx: master process /usr/local/nginx/sbin/nginx\n33135 33126 nobody   0.0  1380 kqread nginx: worker process is shutting down (nginx)\n36264 33126 root     0.0  1148 pause  nginx: master process /usr/local/nginx/sbin/nginx\n36265 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36266 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36267 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n</pre>\n\n<p> After some time, only the new worker processes will process requests: </p> <pre data-language=\"nginx\">\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n33126     1 root     0.0  1164 pause  nginx: master process /usr/local/nginx/sbin/nginx\n36264 33126 root     0.0  1148 pause  nginx: master process /usr/local/nginx/sbin/nginx\n36265 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36266 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36267 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n</pre>\n\n<p> It should be noted that the old master process does not close its listen sockets, and it can be managed to start its worker processes again if needed. If for some reason the new executable file works unacceptably, one of the following can be done: </p> <ul class=\"compact\"> <li> <p> Send the HUP signal to the old master process. The old master process will start new worker processes without re-reading the configuration. After that, all new processes can be shut down gracefully, by sending the QUIT signal to the new master process. </p> </li> <li> <p> Send the TERM signal to the new master process. It will then send a message to its worker processes requesting them to exit immediately, and they will all exit almost immediately. (If new processes do not exit for some reason, the KILL signal should be sent to them to force them to exit.) When the new master process exits, the old master process will start new worker processes automatically. </p> </li> </ul>\n\n<p> If the new master process exits then the old master process discards the <code>.oldbin</code> suffix from the file name with the process ID. </p>\n<p> If upgrade was successful, then the old master process should be sent the QUIT signal, and only new processes will stay: </p> <pre data-language=\"nginx\">\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n36264     1 root     0.0  1148 pause  nginx: master process /usr/local/nginx/sbin/nginx\n36265 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36266 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36267 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n</pre>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/control.html\" class=\"_attribution-link\">https://nginx.org/en/docs/control.html</a>\n  </p>\n</div>\n","howto_build_on_win32":"<h1>Building nginx on the Win32 platform with Visual C</h1>\n<ul>\n<li><a href=\"#build_steps\">Build steps</a></li>\n<li><a href=\"#see_also\">See also</a></li>\n</ul>\n<h4>Prerequisites</h4>\n<p> To build nginx on the Microsoft Win32<sup>®</sup> platform you need: </p> <ul class=\"compact\"> <li> Microsoft Visual C compiler. Microsoft Visual Studio<sup>®</sup> 8 and 10 are known to work. </li> <li> <a href=\"http://www.mingw.org/wiki/MSYS\">MSYS</a>. </li> <li> Perl, if you want to build OpenSSL<sup>®</sup> and nginx with SSL support. For example <a href=\"http://www.activestate.com/activeperl\">ActivePerl</a> or <a href=\"http://strawberryperl.com\">Strawberry Perl</a>. </li> <li> <a href=\"http://mercurial.selenic.com/\">Mercurial</a> client. </li> <li> <a href=\"http://www.pcre.org\">PCRE</a>, <a href=\"http://zlib.net\">zlib</a> and <a href=\"http://www.openssl.org\">OpenSSL</a> libraries sources. </li> </ul>\n\n<h4 id=\"build_steps\">Build steps</h4>\n<p> Ensure that paths to Perl, Mercurial and MSYS bin directories are added to PATH environment variable before you start build. To set Visual C environment run vcvarsall.bat script from Visual C directory. </p>\n<p> To build nginx: </p> <ul class=\"compact\"> <li> Start MSYS bash. </li> <li> Check out nginx sources from the hg.nginx.org repository. For example: <pre data-language=\"nginx\">\nhg clone http://hg.nginx.org/nginx\n</pre> </li> <li> Create a build and lib directories, and unpack zlib, PCRE and OpenSSL libraries sources into lib directory: <pre data-language=\"nginx\">\nmkdir objs\nmkdir objs/lib\ncd objs/lib\ntar -xzf ../../pcre-8.39.tar.gz\ntar -xzf ../../zlib-1.2.8.tar.gz\ntar -xzf ../../openssl-1.0.2h.tar.gz\n</pre> </li> <li> Run configure script: <pre data-language=\"nginx\">\nauto/configure --with-cc=cl --builddir=objs --prefix= \\\n--conf-path=conf/nginx.conf --pid-path=logs/nginx.pid \\\n--http-log-path=logs/access.log --error-log-path=logs/error.log \\\n--sbin-path=nginx.exe --http-client-body-temp-path=temp/client_body_temp \\\n--http-proxy-temp-path=temp/proxy_temp \\\n--http-fastcgi-temp-path=temp/fastcgi_temp \\\n--with-cc-opt=-DFD_SETSIZE=1024 --with-pcre=objs/lib/pcre-8.39 \\\n--with-zlib=objs/lib/zlib-1.2.8 --with-openssl=objs/lib/openssl-1.0.2h \\\n--with-select_module --with-http_ssl_module --with-ipv6\n</pre> </li> <li> Run make: <pre data-language=\"nginx\">\nnmake -f objs/Makefile\n</pre> </li> </ul>\n\n<h4 id=\"see_also\">See also</h4>\n <ul class=\"compact\"> <li> <a href=\"windows\">nginx for Windows</a> </li> </ul>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/howto_build_on_win32.html\" class=\"_attribution-link\">https://nginx.org/en/docs/howto_build_on_win32.html</a>\n  </p>\n</div>\n","nginx_dtrace_pid_provider":"<h1>Debugging nginx with DTrace pid provider</h1>\n<p> This article assumes the reader has a general knowledge of nginx internals and <a href=\"#see_also\">DTrace</a>. </p>\n<p> Although nginx built with the <a href=\"debugging_log\">--with-debug</a> option already provides a lot of information about request processing, it is sometimes desirable to trace particular parts of code path more thoroughly and at the same time omit the rest of debugging output. DTrace pid provider (available on Solaris, Mac OS X) is a useful tool to explore userland program’s internals, since it doesn’t require any code changes and it can help with the task. A simple DTrace script to trace and print nginx function calls may look like this: </p> <pre data-language=\"nginx\">\n#pragma D option flowindent\n\npid$target:nginx::entry {\n}\n\npid$target:nginx::return {\n}\n</pre>\n\n<p> DTrace capabilities for function calls tracing provide only a limited amount of useful information, though. Real-time inspection of function arguments is typically more interesting, but also a bit more complicated. Examples below are intended to help the reader become more familiar with DTrace and the process of analyzing nginx behavior using DTrace. </p>\n<p> One of the common scenarios for using DTrace with nginx is the following: attach to the nginx worker process to log request lines and request start times. The corresponding function to attach is <code>ngx_http_process_request()</code>, and the argument in question is a pointer to the <code>ngx_http_request_t</code> structure. DTrace script for such request logging can be as simple as: </p> <pre data-language=\"nginx\">\npid$target::*ngx_http_process_request:entry\n{\n    this-&gt;request = (ngx_http_request_t *)copyin(arg0, sizeof(ngx_http_request_t));\n    this-&gt;request_line = stringof(copyin((uintptr_t)this-&gt;request-&gt;request_line.data,\n                                         this-&gt;request-&gt;request_line.len));\n    printf(\"request line = %s\\n\", this-&gt;request_line);\n    printf(\"request start sec = %d\\n\", this-&gt;request-&gt;start_sec);\n}\n</pre>\n\n<p> It should be noted that in the example above DTrace requires some knowledge about the <code>ngx_http_process_request</code> structure. Unfortunately while it is possible to use a specific <code>#include</code> directive in the DTrace script and then pass it to a C preprocessor (with the <code>-C</code> flag), that doesn’t really work. Due to a lot of cross dependencies, almost all nginx header files have to be included. In turn, based on <code>configure</code> script settings, nginx headers will include PCRE, OpenSSL and a variety of system header files. While in theory all those header files related to a specific nginx build might be included in DTrace script preprocessing and compilation, in reality DTrace script most probably will fail to compile because of unknown syntax in some header files. </p>\n<p> The problem above can be solved by including only the relevant and necessary structure and type definitions in the DTrace script. DTrace has to know sizes of structures, types, and fields offsets. Thus dependencies can be further reduced by manually optimizing structure definitions for use with DTrace. </p>\n<p> Let’s use DTrace script example above and see what structure definitions it needs to work properly. </p>\n<p> First of all <code>objs/ngx_auto_config.h</code> file generated by configure should be included, because it defines a number of constants affecting various <code>#ifdef</code>’s. After that, some basic types and definitions like <code>ngx_str_t</code>, <code>ngx_table_elt_t</code>, <code>ngx_uint_t</code> etc. should be put at the beginning of the DTrace script. These definitions are compact, commonly used and unlikely to be frequently changed. </p>\n<p> Then there’s the <code>ngx_http_process_request_t</code> structure that contains a lot of pointers to other structures. Because these pointers are really irrelevant to this script, and because they have the same size, it is possible to just replace them with void pointers. Instead of changing definitions, it is better to add appropriate typedefs, though: </p> <pre data-language=\"nginx\">\ntypedef ngx_http_upstream_t     void;\ntypedef ngx_http_request_body_t void;\n</pre>\n<p> Last but not least it is necessary to add definitions of two member structures (<code>ngx_http_headers_in_t</code>, <code>ngx_http_headers_out_t</code>), declarations of callback functions and definitions of constants. </p>\n<p> The final DTrace script can be downloaded from <a href=\"http://nginx.org/download/trace_process_request.d\">here</a>. </p>\n<p> The following example shows the output of running this script: </p> <pre data-language=\"nginx\">\n# dtrace -C -I ./objs -s trace_process_request.d -p 4848\ndtrace: script 'trace_process_request.d' matched 1 probe\nCPU     ID                    FUNCTION:NAME\n  1      4 .XAbmO.ngx_http_process_request:entry request line = GET / HTTP/1.1\nrequest start sec = 1349162898\n\n  0      4 .XAbmO.ngx_http_process_request:entry request line = GET /en/docs/nginx_dtrace_pid_provider.html HTTP/1.1\nrequest start sec = 1349162899\n</pre>\n\n<p>Using similar techniques the reader should be able to trace other nginx function calls. </p>\n<h4 id=\"see_also\">See also</h4>\n <ul class=\"compact\"> <li> <a href=\"http://docs.oracle.com/cd/E19253-01/817-6223/index.html\"> Solaris Dynamic Tracing Guide</a> </li> <li> <a href=\"http://dtrace.org/blogs/brendan/2011/02/09/dtrace-pid-provider/\"> Introduction article on DTrace pid provider</a> </li> </ul>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/nginx_dtrace_pid_provider.html\" class=\"_attribution-link\">https://nginx.org/en/docs/nginx_dtrace_pid_provider.html</a>\n  </p>\n</div>\n","http/converting_rewrite_rules":"<h1>Converting rewrite rules</h1>\n<ul><li><a href=\"#converting_mongrel_rules\">Converting Mongrel rules</a></li></ul>\n<h4>A redirect to a main site</h4>\n<p> People who during their shared hosting life used to configure <i>everything</i> using <i>only</i> Apache’s .htaccess files, usually translate the following rules: </p> <pre data-language=\"nginx\">\nRewriteCond  %{HTTP_HOST}  example.org\nRewriteRule  (.*)          http://www.example.org$1\n</pre>\n<p> to something like this: </p> <pre data-language=\"nginx\">\nserver {\n    listen       80;\n    server_name  www.example.org  example.org;\n    if ($http_host = example.org) {\n        rewrite  (.*)  http://www.example.org$1;\n    }\n    ...\n}\n</pre>\n\n<p> This is a wrong, cumbersome, and ineffective way. The right way is to define a separate server for <code>example.org</code>: </p> <pre data-language=\"nginx\">\nserver {\n    listen       80;\n    server_name  example.org;\n    return       301 http://www.example.org$request_uri;\n}\n\nserver {\n    listen       80;\n    server_name  www.example.org;\n    ...\n}\n</pre>\n <blockquote class=\"note\"> On versions prior to 0.9.1, redirects can be made with: <pre data-language=\"nginx\">\n    rewrite      ^ http://www.example.org$request_uri?;\n</pre> </blockquote>\n\n<p> Another example. Instead of the “upside-down” logic “all that is not <code>example.com</code> and is not <code>www.example.com</code>”: </p> <pre data-language=\"nginx\">\nRewriteCond  %{HTTP_HOST}  !example.com\nRewriteCond  %{HTTP_HOST}  !www.example.com\nRewriteRule  (.*)          http://www.example.com$1\n</pre>\n<p> one should simply define <code>example.com</code>, <code>www.example.com</code>, and “everything else”: </p> <pre data-language=\"nginx\">\nserver {\n    listen       80;\n    server_name  example.com www.example.com;\n    ...\n}\n\nserver {\n    listen       80 default_server;\n    server_name  _;\n    return       301 http://example.com$request_uri;\n}\n</pre>\n <blockquote class=\"note\"> On versions prior to 0.9.1, redirects can be made with: <pre data-language=\"nginx\">\n    rewrite      ^ http://example.com$request_uri?;\n</pre> </blockquote>\n\n<h4 id=\"converting_mongrel_rules\">Converting Mongrel rules</h4>\n<p> Typical Mongrel rules: </p> <pre data-language=\"nginx\">\nDocumentRoot /var/www/myapp.com/current/public\n\nRewriteCond %{DOCUMENT_ROOT}/system/maintenance.html -f\nRewriteCond %{SCRIPT_FILENAME} !maintenance.html\nRewriteRule ^.*$ %{DOCUMENT_ROOT}/system/maintenance.html [L]\n\nRewriteCond %{REQUEST_FILENAME} -f\nRewriteRule ^(.*)$ $1 [QSA,L]\n\nRewriteCond %{REQUEST_FILENAME}/index.html -f\nRewriteRule ^(.*)$ $1/index.html [QSA,L]\n\nRewriteCond %{REQUEST_FILENAME}.html -f\nRewriteRule ^(.*)$ $1.html [QSA,L]\n\nRewriteRule ^/(.*)$ balancer://mongrel_cluster%{REQUEST_URI} [P,QSA,L]\n</pre>\n<p> should be converted to </p> <pre data-language=\"nginx\">\nlocation / {\n    root       /var/www/myapp.com/current/public;\n\n    try_files  /system/maintenance.html\n               $uri  $uri/index.html $uri.html\n               @mongrel;\n}\n\nlocation @mongrel {\n    proxy_pass  http://mongrel;\n}\n</pre>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/converting_rewrite_rules.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/converting_rewrite_rules.html</a>\n  </p>\n</div>\n","http/websocket":"<h1>WebSocket proxying</h1>\n<p> To turn a connection between a client and server from HTTP/1.1 into WebSocket, the <a href=\"http://tools.ietf.org/html/rfc2616#section-14.42\">protocol switch</a> mechanism available in HTTP/1.1 is used. </p>\n<p> There is one subtlety however: since the “Upgrade” is a <a href=\"http://tools.ietf.org/html/rfc2616#section-13.5.1\">hop-by-hop</a> header, it is not passed from a client to proxied server. With forward proxying, clients may use the <code>CONNECT</code> method to circumvent this issue. This does not work with reverse proxying however, since clients are not aware of any proxy servers, and special processing on a proxy server is required. </p>\n<p> Since version 1.3.13, nginx implements special mode of operation that allows setting up a tunnel between a client and proxied server if the proxied server returned a response with the code 101 (Switching Protocols), and the client asked for a protocol switch via the “Upgrade” header in a request. </p>\n<p> As noted above, hop-by-hop headers including “Upgrade” and “Connection” are not passed from a client to proxied server, therefore in order for the proxied server to know about the client’s intention to switch a protocol to WebSocket, these headers have to be passed explicitly: </p> <pre data-language=\"nginx\">\nlocation /chat/ {\n    proxy_pass http://backend;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n}\n</pre>\n<p> A more sophisticated example in which a value of the “Connection” header field in a request to the proxied server depends on the presence of the “Upgrade” field in the client request header: </p> <pre data-language=\"nginx\">\nhttp {\n    map $http_upgrade $connection_upgrade {\n        default upgrade;\n        ''      close;\n    }\n\n    server {\n        ...\n\n        location /chat/ {\n            proxy_pass http://backend;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection $connection_upgrade;\n        }\n    }\n</pre>\n\n<p> By default, the connection will be closed if the proxied server does not transmit any data within 60 seconds. This timeout can be increased with the <a href=\"ngx_http_proxy_module#proxy_read_timeout\">proxy_read_timeout</a> directive. Alternatively, the proxied server can be configured to periodically send WebSocket ping frames to reset the timeout and check if the connection is still alive. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/websocket.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/websocket.html</a>\n  </p>\n</div>\n","http/ngx_http_access_module":"<h1>Module ngx_http_access_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#allow\">allow</a></li>\n<li><a href=\"#deny\">deny</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_access_module</code> module allows limiting access to certain client addresses. </p>\n<p> Access can also be limited by <a href=\"ngx_http_auth_basic_module\">password</a> or by the <a href=\"ngx_http_auth_request_module\">result of subrequest</a>. Simultaneous limitation of access by address and by password is controlled by the <a href=\"ngx_http_core_module#satisfy\">satisfy</a> directive. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    deny  192.168.1.1;\n    allow 192.168.1.0/24;\n    allow 10.1.1.0/16;\n    allow 2001:0db8::/32;\n    deny  all;\n}\n</pre>\n\n<p> The rules are checked in sequence until the first match is found. In this example, access is allowed only for IPv4 networks <code>10.1.1.0/16</code> and <code>192.168.1.0/24</code> excluding the address <code>192.168.1.1</code>, and for IPv6 network <code>2001:0db8::/32</code>. In case of a lot of rules, the use of the <a href=\"ngx_http_geo_module\">ngx_http_geo_module</a> module variables is preferable. </p> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"allow\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>allow</strong> \n    <code><i>address</i></code> |\n    <code><i>CIDR</i></code> |\n    <code>unix:</code> |\n    <code>all</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code><br> </td> </tr> </table></div>\n<p> Allows access for the specified network or address. If the special value <code>unix:</code> is specified (1.5.1), allows access for all UNIX-domain sockets. </p>\n<div class=\"directive\" id=\"deny\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>deny</strong> \n    <code><i>address</i></code> |\n    <code><i>CIDR</i></code> |\n    <code>unix:</code> |\n    <code>all</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code><br> </td> </tr> </table></div>\n<p> Denies access for the specified network or address. If the special value <code>unix:</code> is specified (1.5.1), denies access for all UNIX-domain sockets. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_access_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_access_module.html</a>\n  </p>\n</div>\n","http/ngx_http_addition_module":"<h1>Module ngx_http_addition_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#add_before_body\">add_before_body</a></li>\n<li><a href=\"#add_after_body\">add_after_body</a></li>\n<li><a href=\"#addition_types\">addition_types</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_addition_module</code> module is a filter that adds text before and after a response. This module is not built by default, it should be enabled with the <code>--with-http_addition_module</code> configuration parameter. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    add_before_body /before_action;\n    add_after_body  /after_action;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"add_before_body\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>add_before_body</strong> <code><i>uri</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Adds the text returned as a result of processing a given subrequest before the response body. An empty string (<code>\"\"</code>) as a parameter cancels addition inherited from the previous configuration level. </p>\n<div class=\"directive\" id=\"add_after_body\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>add_after_body</strong> <code><i>uri</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Adds the text returned as a result of processing a given subrequest after the response body. An empty string (<code>\"\"</code>) as a parameter cancels addition inherited from the previous configuration level. </p>\n<div class=\"directive\" id=\"addition_types\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>addition_types</strong> <code><i>mime-type</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>addition_types text/html;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.7.9. </p>\n</div>\n<p> Allows adding text in responses with the specified MIME types, in addition to “<code>text/html</code>”. The special value “<code>*</code>” matches any MIME type (0.8.29). </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_addition_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_addition_module.html</a>\n  </p>\n</div>\n","http/ngx_http_auth_basic_module":"<h1>Module ngx_http_auth_basic_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#auth_basic\">auth_basic</a></li>\n<li><a href=\"#auth_basic_user_file\">auth_basic_user_file</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_auth_basic_module</code> module allows limiting access to resources by validating the user name and password using the “HTTP Basic Authentication” protocol. </p>\n<p> Access can also be limited by <a href=\"ngx_http_access_module\">address</a> or by the <a href=\"ngx_http_auth_request_module\">result of subrequest</a>. Simultaneous limitation of access by address and by password is controlled by the <a href=\"ngx_http_core_module#satisfy\">satisfy</a> directive. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    auth_basic           \"closed site\";\n    auth_basic_user_file conf/htpasswd;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"auth_basic\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>auth_basic</strong> <code><i>string</i></code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>auth_basic off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code><br> </td> </tr> </table></div>\n<p> Enables validation of user name and password using the “HTTP Basic Authentication” protocol. The specified parameter is used as a <code><i>realm</i></code>. Parameter value can contain variables (1.3.10, 1.2.7). The special value <code>off</code> allows cancelling the effect of the <code>auth_basic</code> directive inherited from the previous configuration level. </p>\n<div class=\"directive\" id=\"auth_basic_user_file\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>auth_basic_user_file</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code><br> </td> </tr> </table></div>\n<p> Specifies a file that keeps user names and passwords, in the following format: </p> <pre data-language=\"nginx\">\n# comment\nname1:password1\nname2:password2:comment\nname3:password3\n</pre>\n<p> The <code><i>file</i></code> name can contain variables. </p>\n<p> The following password types are supported: </p> <ul class=\"compact\"> <li> encrypted with the <code>crypt()</code> function; can be generated using the “<code>htpasswd</code>” utility from the Apache HTTP Server distribution or the “<code>openssl passwd</code>” command; </li> <li> hashed with the Apache variant of the MD5-based password algorithm (apr1); can be generated with the same tools; </li> <li> specified by the “<code>{</code><code><i>scheme</i></code><code>}</code><code><i>data</i></code>” syntax (1.0.3+) as described in <a href=\"http://tools.ietf.org/html/rfc2307#section-5.3\">RFC 2307</a>; currently implemented schemes include <code>PLAIN</code> (an example one, should not be used), <code>SHA</code> (1.3.13) (plain SHA-1 hashing, should not be used) and <code>SSHA</code> (salted SHA-1 hashing, used by some software packages, notably OpenLDAP and Dovecot). <blockquote class=\"note\"> Support for <code>SHA</code> scheme was added only to aid in migration from other web servers. It should not be used for new passwords, since unsalted SHA-1 hashing that it employs is vulnerable to <a href=\"http://en.wikipedia.org/wiki/Rainbow_attack\">rainbow table</a> attacks. </blockquote> </li> </ul>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html</a>\n  </p>\n</div>\n","http/ngx_http_auth_request_module":"<h1>Module ngx_http_auth_request_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#auth_request\">auth_request</a></li>\n<li><a href=\"#auth_request_set\">auth_request_set</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_auth_request_module</code> module (1.5.4+) implements client authorization based on the result of a subrequest. If the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403, the access is denied with the corresponding error code. Any other response code returned by the subrequest is considered an error. </p>\n<p> For the 401 error, the client also receives the “WWW-Authenticate” header from the subrequest response. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_auth_request_module</code> configuration parameter. </p>\n<p> The module may be combined with other access modules, such as <a href=\"ngx_http_access_module\">ngx_http_access_module</a> and <a href=\"ngx_http_auth_basic_module\">ngx_http_auth_basic_module</a>, via the <a href=\"ngx_http_core_module#satisfy\">satisfy</a> directive. </p> <blockquote class=\"note\"> Before version 1.7.3, responses to authorization subrequests could not be cached (using <a href=\"ngx_http_proxy_module#proxy_cache\">proxy_cache</a>, <a href=\"ngx_http_proxy_module#proxy_store\">proxy_store</a>, etc.). </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation /private/ {\n    auth_request /auth;\n    ...\n}\n\nlocation = /auth {\n    proxy_pass ...\n    proxy_pass_request_body off;\n    proxy_set_header Content-Length \"\";\n    proxy_set_header X-Original-URI $request_uri;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"auth_request\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>auth_request</strong> <code><i>uri</i></code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>auth_request off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables authorization based on the result of a subrequest and sets the URI to which the subrequest will be sent. </p>\n<div class=\"directive\" id=\"auth_request_set\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>auth_request_set</strong> <code><i>variable</i></code> <code><i>value</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the request <code><i>variable</i></code> to the given <code><i>value</i></code> after the authorization request completes. The value may contain variables from the authorization request, such as <code>$upstream_http_*</code>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_auth_request_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_auth_request_module.html</a>\n  </p>\n</div>\n","http/ngx_http_autoindex_module":"<h1>Module ngx_http_autoindex_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#autoindex\">autoindex</a></li>\n<li><a href=\"#autoindex_exact_size\">autoindex_exact_size</a></li>\n<li><a href=\"#autoindex_format\">autoindex_format</a></li>\n<li><a href=\"#autoindex_localtime\">autoindex_localtime</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_autoindex_module</code> module processes requests ending with the slash character (‘<code>/</code>’) and produces a directory listing. Usually a request is passed to the <code>ngx_http_autoindex_module</code> module when the <a href=\"ngx_http_index_module\">ngx_http_index_module</a> module cannot find an index file. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    autoindex on;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"autoindex\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>autoindex</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>autoindex off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables the directory listing output. </p>\n<div class=\"directive\" id=\"autoindex_exact_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>autoindex_exact_size</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>autoindex_exact_size on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> For the HTML <a href=\"#autoindex_format\">format</a>, specifies whether exact file sizes should be output in the directory listing, or rather rounded to kilobytes, megabytes, and gigabytes. </p>\n<div class=\"directive\" id=\"autoindex_format\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>autoindex_format</strong> \n    <code>html</code> |\n    <code>xml</code> |\n    <code>json</code> |\n    <code>jsonp</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>autoindex_format html;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.9. </p>\n</div>\n<p> Sets the format of a directory listing. </p>\n<p> When the JSONP format is used, the name of a callback function is set with the <code>callback</code> request argument. If the argument is missing or has an empty value, then the JSON format is used. </p>\n<p> The XML output can be transformed using the <a href=\"ngx_http_xslt_module\">ngx_http_xslt_module</a> module. </p>\n<div class=\"directive\" id=\"autoindex_localtime\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>autoindex_localtime</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>autoindex_localtime off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> For the HTML <a href=\"#autoindex_format\">format</a>, specifies whether times in the directory listing should be output in the local time zone or UTC. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_autoindex_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_autoindex_module.html</a>\n  </p>\n</div>\n","http/ngx_http_browser_module":"<h1>Module ngx_http_browser_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#ancient_browser\">ancient_browser</a></li>\n<li><a href=\"#ancient_browser_value\">ancient_browser_value</a></li>\n<li><a href=\"#modern_browser\">modern_browser</a></li>\n<li><a href=\"#modern_browser_value\">modern_browser_value</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_browser_module</code> module creates variables whose values depend on the value of the “User-Agent” request header field: </p> <dl class=\"compact\"> <dt id=\"var_modern_browser\"><code>$modern_browser</code></dt> <dd> equals the value set by the <a href=\"#modern_browser_value\">modern_browser_value</a> directive, if a browser was identified as modern; </dd> <dt id=\"var_ancient_browser\"><code>$ancient_browser</code></dt> <dd> equals the value set by the <a href=\"#ancient_browser_value\">ancient_browser_value</a> directive, if a browser was identified as ancient; </dd> <dt id=\"var_msie\"><code>$msie</code></dt> <dd> equals “1” if a browser was identified as MSIE of any version. </dd> </dl>\n <h4 id=\"example\">Example Configuration</h4>\n<p> Choosing an index file: </p> <pre data-language=\"nginx\">\nmodern_browser_value \"modern.\";\n\nmodern_browser msie      5.5;\nmodern_browser gecko     1.0.0;\nmodern_browser opera     9.0;\nmodern_browser safari    413;\nmodern_browser konqueror 3.0;\n\nindex index.${modern_browser}html index.html;\n</pre>\n\n<p> Redirection for old browsers: </p> <pre data-language=\"nginx\">\nmodern_browser msie      5.0;\nmodern_browser gecko     0.9.1;\nmodern_browser opera     8.0;\nmodern_browser safari    413;\nmodern_browser konqueror 3.0;\n\nmodern_browser unlisted;\n\nancient_browser Links Lynx netscape4;\n\nif ($ancient_browser) {\n    rewrite ^ /ancient.html;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"ancient_browser\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ancient_browser</strong> <code><i>string</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> If any of the specified substrings is found in the “User-Agent” request header field, the browser will be considered ancient. The special string “<code>netscape4</code>” corresponds to the regular expression “<code>^Mozilla/[1-4]</code>”. </p>\n<div class=\"directive\" id=\"ancient_browser_value\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ancient_browser_value</strong> <code><i>string</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ancient_browser_value 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a value for the <code>$ancient_browser</code> variables. </p>\n<div class=\"directive\" id=\"modern_browser\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>modern_browser</strong> <code><i>browser</i></code> <code><i>version</i></code>;</code><br><code><strong>modern_browser</strong> <code>unlisted</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Specifies a version starting from which a browser is considered modern. A browser can be any one of the following: <code>msie</code>, <code>gecko</code> (browsers based on Mozilla), <code>opera</code>, <code>safari</code>, or <code>konqueror</code>. </p>\n<p> Versions can be specified in the following formats: X, X.X, X.X.X, or X.X.X.X. The maximum values for each of the format are 4000, 4000.99, 4000.99.99, and 4000.99.99.99, respectively. </p>\n<p> The special value <code>unlisted</code> specifies to consider a browser as modern if it was not listed by the <code>modern_browser</code> and <a href=\"#ancient_browser\">ancient_browser</a> directives. Otherwise such a browser is considered ancient. If a request does not provide the “User-Agent” field in the header, the browser is treated as not being listed. </p>\n<div class=\"directive\" id=\"modern_browser_value\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>modern_browser_value</strong> <code><i>string</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>modern_browser_value 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a value for the <code>$modern_browser</code> variables. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_browser_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_browser_module.html</a>\n  </p>\n</div>\n","http/ngx_http_charset_module":"<h1>Module ngx_http_charset_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#charset\">charset</a></li>\n<li><a href=\"#charset_map\">charset_map</a></li>\n<li><a href=\"#charset_types\">charset_types</a></li>\n<li><a href=\"#override_charset\">override_charset</a></li>\n<li><a href=\"#source_charset\">source_charset</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_charset_module</code> module adds the specified charset to the “Content-Type” response header field. In addition, the module can convert data from one charset to another, with some limitations: </p> <ul class=\"compact\"> <li> conversion is performed one way — from server to client, </li> <li> only single-byte charsets can be converted </li> <li> or single-byte charsets to/from UTF-8. </li> </ul>\n <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\ninclude        conf/koi-win;\n\ncharset        windows-1251;\nsource_charset koi8-r;\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"charset\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>charset</strong> <code><i>charset</i></code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>charset off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Adds the specified charset to the “Content-Type” response header field. If this charset is different from the charset specified in the <a href=\"#source_charset\">source_charset</a> directive, a conversion is performed. </p>\n<p> The parameter <code>off</code> cancels the addition of charset to the “Content-Type” response header field. </p>\n<p> A charset can be defined with a variable: </p> <pre data-language=\"nginx\">\ncharset $charset;\n</pre>\n<p> In such a case, all possible values of a variable need to be present in the configuration at least once in the form of the <a href=\"#charset_map\">charset_map</a>, <a href=\"#charset\">charset</a>, or <a href=\"#source_charset\">source_charset</a> directives. For <code>utf-8</code>, <code>windows-1251</code>, and <code>koi8-r</code> charsets, it is sufficient to include the files <code>conf/koi-win</code>, <code>conf/koi-utf</code>, and <code>conf/win-utf</code> into configuration. For other charsets, simply making a fictitious conversion table works, for example: </p> <pre data-language=\"nginx\">\ncharset_map iso-8859-5 _ { }\n</pre>\n\n<p> In addition, a charset can be set in the “X-Accel-Charset” response header field. This capability can be disabled using the <a href=\"ngx_http_proxy_module#proxy_ignore_headers\">proxy_ignore_headers</a>, <a href=\"ngx_http_fastcgi_module#fastcgi_ignore_headers\">fastcgi_ignore_headers</a>, <a href=\"ngx_http_uwsgi_module#uwsgi_ignore_headers\">uwsgi_ignore_headers</a>, and <a href=\"ngx_http_scgi_module#scgi_ignore_headers\">scgi_ignore_headers</a> directives. </p>\n<div class=\"directive\" id=\"charset_map\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>charset_map</strong> <code><i>charset1</i></code> <code><i>charset2</i></code> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Describes the conversion table from one charset to another. A reverse conversion table is built using the same data. Character codes are given in hexadecimal. Missing characters in the range 80-FF are replaced with “<code>?</code>”. When converting from UTF-8, characters missing in a one-byte charset are replaced with “<code>&amp;#XXXX;</code>”. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\ncharset_map koi8-r windows-1251 {\n    C0 FE ; # small yu\n    C1 E0 ; # small a\n    C2 E1 ; # small b\n    C3 F6 ; # small ts\n    ...\n}\n</pre>\n\n<p> When describing a conversion table to UTF-8, codes for the UTF-8 charset should be given in the second column, for example: </p> <pre data-language=\"nginx\">\ncharset_map koi8-r utf-8 {\n    C0 D18E ; # small yu\n    C1 D0B0 ; # small a\n    C2 D0B1 ; # small b\n    C3 D186 ; # small ts\n    ...\n}\n</pre>\n\n<p> Full conversion tables from <code>koi8-r</code> to <code>windows-1251</code>, and from <code>koi8-r</code> and <code>windows-1251</code> to <code>utf-8</code> are provided in the distribution files <code>conf/koi-win</code>, <code>conf/koi-utf</code>, and <code>conf/win-utf</code>. </p>\n<div class=\"directive\" id=\"charset_types\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>charset_types</strong> <code><i>mime-type</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>charset_types text/html text/xml text/plain text/vnd.wap.wml\napplication/javascript application/rss+xml;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.7.9. </p>\n</div>\n<p> Enables module processing in responses with the specified MIME types in addition to “<code>text/html</code>”. The special value “<code>*</code>” matches any MIME type (0.8.29). </p>\n <blockquote class=\"note\"> Until version 1.5.4, “<code>application/x-javascript</code>” was used as the default MIME type instead of “<code>application/javascript</code>”. </blockquote>\n\n<div class=\"directive\" id=\"override_charset\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>override_charset</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>override_charset off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Determines whether a conversion should be performed for answers received from a proxied or a FastCGI/uwsgi/SCGI server when the answers already carry a charset in the “Content-Type” response header field. If conversion is enabled, a charset specified in the received response is used as a source charset. </p> <blockquote class=\"note\"> It should be noted that if a response is received in a subrequest then the conversion from the response charset to the main request charset is always performed, regardless of the <code>override_charset</code> directive setting. </blockquote>\n\n<div class=\"directive\" id=\"source_charset\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>source_charset</strong> <code><i>charset</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Defines the source charset of a response. If this charset is different from the charset specified in the <a href=\"#charset\">charset</a> directive, a conversion is performed. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_charset_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_charset_module.html</a>\n  </p>\n</div>\n","http/ngx_http_dav_module":"<h1>Module ngx_http_dav_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#dav_access\">dav_access</a></li>\n<li><a href=\"#dav_methods\">dav_methods</a></li>\n<li><a href=\"#create_full_put_path\">create_full_put_path</a></li>\n<li><a href=\"#min_delete_depth\">min_delete_depth</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_dav_module</code> module is intended for file management automation via the WebDAV protocol. The module processes HTTP and WebDAV methods PUT, DELETE, MKCOL, COPY, and MOVE. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_dav_module</code> configuration parameter. </p>\n <blockquote class=\"note\"> WebDAV clients that require additional WebDAV methods to operate will not work with this module. </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    root                  /data/www;\n\n    client_body_temp_path /data/client_temp;\n\n    dav_methods PUT DELETE MKCOL COPY MOVE;\n\n    create_full_put_path  on;\n    dav_access            group:rw  all:r;\n\n    limit_except GET {\n        allow 192.168.1.0/32;\n        deny  all;\n    }\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"dav_access\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>dav_access</strong> <code><i>users</i></code>:<code><i>permissions</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>dav_access user:rw;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets access permissions for newly created files and directories, e.g.: </p> <pre data-language=\"nginx\">\ndav_access user:rw group:rw all:r;\n</pre>\n\n<p> If any <code>group</code> or <code>all</code> access permissions are specified then <code>user</code> permissions may be omitted: </p> <pre data-language=\"nginx\">\ndav_access group:rw all:r;\n</pre>\n\n<div class=\"directive\" id=\"dav_methods\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>dav_methods</strong> \n    <code>off</code> | <code><i>method</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>dav_methods off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Allows the specified HTTP and WebDAV methods. The parameter <code>off</code> denies all methods processed by this module. The following methods are supported: <code>PUT</code>, <code>DELETE</code>, <code>MKCOL</code>, <code>COPY</code>, and <code>MOVE</code>. </p>\n<p> A file uploaded with the PUT method is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the <a href=\"ngx_http_core_module#client_body_temp_path\">client_body_temp_path</a> directive, are put on the same file system. </p>\n<p> When creating a file with the PUT method, it is possible to specify the modification date by passing it in the “Date” header field. </p>\n<div class=\"directive\" id=\"create_full_put_path\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>create_full_put_path</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>create_full_put_path off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> The WebDAV specification only allows creating files in already existing directories. This directive allows creating all needed intermediate directories. </p>\n<div class=\"directive\" id=\"min_delete_depth\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>min_delete_depth</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>min_delete_depth 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Allows the DELETE method to remove files provided that the number of elements in a request path is not less than the specified number. For example, the directive </p> <pre data-language=\"nginx\">\nmin_delete_depth 4;\n</pre>\n<p> allows removing files on requests </p> <pre data-language=\"nginx\">\n/users/00/00/name\n/users/00/00/name/pic.jpg\n/users/00/00/page.html\n</pre>\n<p> and denies the removal of </p> <pre data-language=\"nginx\">\n/users/00/00\n</pre>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_dav_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_dav_module.html</a>\n  </p>\n</div>\n","http/ngx_http_empty_gif_module":"<h1>Module ngx_http_empty_gif_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#empty_gif\">empty_gif</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_empty_gif_module</code> module emits single-pixel transparent GIF. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation = /_.gif {\n    empty_gif;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"empty_gif\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>empty_gif</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Turns on module processing in a surrounding location. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_empty_gif_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_empty_gif_module.html</a>\n  </p>\n</div>\n","http/ngx_http_f4f_module":"<h1>Module ngx_http_f4f_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#f4f\">f4f</a></li>\n<li><a href=\"#f4f_buffer_size\">f4f_buffer_size</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_f4f_module</code> module provides server-side support for Adobe HTTP Dynamic Streaming (HDS). </p>\n<p> This module implements handling of HTTP Dynamic Streaming requests in the “<code>/videoSeg1-Frag1</code>” form — extracting the needed fragment from the <code>videoSeg1.f4f</code> file using the <code>videoSeg1.f4x</code> index file. This module is an alternative to the Adobe’s f4f module (HTTP Origin Module) for Apache. </p>\n<p> Usual pre-processing with Adobe’s f4fpackager is required, see relevant documentation for details. </p>\n <blockquote class=\"note\"> This module is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation /video/ {\n    f4f;\n    ...\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"f4f\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>f4f</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Turns on module processing in the surrounding location. </p>\n<div class=\"directive\" id=\"f4f_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>f4f_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>f4f_buffer_size 512k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>size</i></code> of the buffer used for reading the <code>.f4x</code> index file. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_f4f_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_f4f_module.html</a>\n  </p>\n</div>\n","http/ngx_http_flv_module":"<h1>Module ngx_http_flv_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#flv\">flv</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_flv_module</code> module provides pseudo-streaming server-side support for Flash Video (FLV) files. </p>\n<p> It handles requests with the <code>start</code> argument in the request URI’s query string specially, by sending back the contents of a file starting from the requested byte offset and with the prepended FLV header. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_flv_module</code> configuration parameter. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation ~ \\.flv$ {\n    flv;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"flv\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>flv</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Turns on module processing in a surrounding location. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_flv_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_flv_module.html</a>\n  </p>\n</div>\n","http/ngx_http_geo_module":"<h1>Module ngx_http_geo_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#geo\">geo</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_geo_module</code> module creates variables with values depending on the client IP address. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\ngeo $geo {\n    default        0;\n\n    127.0.0.1      2;\n    192.168.1.0/24 1;\n    10.1.0.0/16    1;\n\n    ::1            2;\n    2001:0db8::/32 1;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"geo\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>geo</strong> [<code><i>$address</i></code>] <code><i>$variable</i></code> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Describes the dependency of values of the specified variable on the client IP address. By default, the address is taken from the <code>$remote_addr</code> variable, but it can also be taken from another variable (0.7.27), for example: </p> <pre data-language=\"nginx\">\ngeo $arg_remote_addr $geo {\n    ...;\n}\n</pre>\n\n <blockquote class=\"note\"> Since variables are evaluated only when used, the mere existence of even a large number of declared “<code>geo</code>” variables does not cause any extra costs for request processing. </blockquote>\n\n<p> If the value of a variable does not represent a valid IP address then the “<code>255.255.255.255</code>” address is used. </p>\n<p> Addresses are specified either as prefixes in CIDR notation (including individual addresses) or as ranges (0.7.23). </p> <blockquote class=\"note\"> IPv6 prefixes are supported starting from versions 1.3.10 and 1.2.7. </blockquote>\n\n<p> The following special parameters are also supported: </p> <dl class=\"compact\"> <dt><code>delete</code></dt> <dd> deletes the specified network (0.7.23). </dd> <dt><code>default</code></dt> <dd> a value set to the variable if the client address does not match any of the specified addresses. When addresses are specified in CIDR notation, “<code>0.0.0.0/0</code>” and “<code>::/0</code>” can be used instead of <code>default</code>. When <code>default</code> is not specified, the default value will be an empty string. </dd> <dt><code>include</code></dt> <dd> includes a file with addresses and values. There can be several inclusions. </dd> <dt><code>proxy</code></dt> <dd> defines trusted addresses (0.8.7, 0.7.63). When a request comes from a trusted address, an address from the “X-Forwarded-For” request header field will be used instead. In contrast to the regular addresses, trusted addresses are checked sequentially. <blockquote class=\"note\"> Trusted IPv6 addresses are supported starting from versions 1.3.0 and 1.2.1. </blockquote> </dd> <dt><code>proxy_recursive</code></dt> <dd> enables recursive address search (1.3.0, 1.2.1). If recursive search is disabled then instead of the original client address that matches one of the trusted addresses, the last address sent in “X-Forwarded-For” will be used. If recursive search is enabled then instead of the original client address that matches one of the trusted addresses, the last non-trusted address sent in “X-Forwarded-For” will be used. </dd> <dt><code>ranges</code></dt> <dd> indicates that addresses are specified as ranges (0.7.23). This parameter should be the first. To speed up loading of a geo base, addresses should be put in ascending order. </dd> </dl>\n\n<p> Example: </p> <pre data-language=\"nginx\">\ngeo $country {\n    default        ZZ;\n    include        conf/geo.conf;\n    delete         127.0.0.0/16;\n    proxy          192.168.100.0/24;\n    proxy          2001:0db8::/32;\n\n    127.0.0.0/24   US;\n    127.0.0.1/32   RU;\n    10.1.0.0/16    RU;\n    192.168.1.0/24 UK;\n}\n</pre>\n\n<p> The <code>conf/geo.conf</code> file could contain the following lines: </p> <pre data-language=\"nginx\">\n10.2.0.0/16    RU;\n192.168.2.0/24 RU;\n</pre>\n\n<p> A value of the most specific match is used. For example, for the 127.0.0.1 address the value “<code>RU</code>” will be chosen, not “<code>US</code>”. </p>\n<p> Example with ranges: </p> <pre data-language=\"nginx\">\ngeo $country {\n    ranges;\n    default                   ZZ;\n    127.0.0.0-127.0.0.0       US;\n    127.0.0.1-127.0.0.1       RU;\n    127.0.0.1-127.0.0.255     US;\n    10.1.0.0-10.1.255.255     RU;\n    192.168.1.0-192.168.1.255 UK;\n}\n</pre>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_geo_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_geo_module.html</a>\n  </p>\n</div>\n","http/ngx_http_geoip_module":"<h1>Module ngx_http_geoip_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#geoip_country\">geoip_country</a></li>\n<li><a href=\"#geoip_city\">geoip_city</a></li>\n<li><a href=\"#geoip_org\">geoip_org</a></li>\n<li><a href=\"#geoip_proxy\">geoip_proxy</a></li>\n<li><a href=\"#geoip_proxy_recursive\">geoip_proxy_recursive</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_geoip_module</code> module (0.8.6+) creates variables with values depending on the client IP address, using the precompiled <a href=\"http://www.maxmind.com\">MaxMind</a> databases. </p>\n<p> When using the databases with IPv6 support (1.3.12, 1.2.7), IPv4 addresses are looked up as IPv4-mapped IPv6 addresses. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_geoip_module</code> configuration parameter. </p> <blockquote class=\"note\"> This module requires the <a href=\"http://www.maxmind.com/app/c\">MaxMind GeoIP</a> library. </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nhttp {\n    geoip_country         GeoIP.dat;\n    geoip_city            GeoLiteCity.dat;\n    geoip_proxy           192.168.100.0/24;\n    geoip_proxy           2001:0db8::/32;\n    geoip_proxy_recursive on;\n    ...\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"geoip_country\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>geoip_country</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Specifies a database used to determine the country depending on the client IP address. The following variables are available when using this database: </p> <dl class=\"compact\"> <dt id=\"var_geoip_country_code\"><code>$geoip_country_code</code></dt> <dd> two-letter country code, for example, “<code>RU</code>”, “<code>US</code>”. </dd> <dt id=\"var_geoip_country_code3\">\n<code>$geoip_country_code3</code> </dt> <dd> three-letter country code, for example, “<code>RUS</code>”, “<code>USA</code>”. </dd> <dt id=\"var_geoip_country_name\"><code>$geoip_country_name</code></dt> <dd> country name, for example, “<code>Russian Federation</code>”, “<code>United States</code>”. </dd> </dl>\n\n<div class=\"directive\" id=\"geoip_city\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>geoip_city</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Specifies a database used to determine the country, region, and city depending on the client IP address. The following variables are available when using this database: </p> <dl class=\"compact\"> <dt id=\"var_geoip_area_code\"><code>$geoip_area_code</code></dt> <dd>telephone area code (US only). <blockquote class=\"note\"> This variable may contain outdated information since the corresponding database field is deprecated. </blockquote> </dd> <dt id=\"var_geoip_city_continent_code\"> <code>$geoip_city_continent_code</code>\n</dt> <dd>two-letter continent code, for example, “<code>EU</code>”, “<code>NA</code>”. </dd> <dt id=\"var_geoip_city_country_code\">\n<code>$geoip_city_country_code</code> </dt> <dd> two-letter country code, for example, “<code>RU</code>”, “<code>US</code>”. </dd> <dt id=\"var_geoip_city_country_code3\">\n<code>$geoip_city_country_code3</code> </dt> <dd> three-letter country code, for example, “<code>RUS</code>”, “<code>USA</code>”. </dd> <dt id=\"var_geoip_city_country_name\">\n<code>$geoip_city_country_name</code> </dt> <dd> country name, for example, “<code>Russian Federation</code>”, “<code>United States</code>”. </dd> <dt id=\"var_geoip_dma_code\"><code>$geoip_dma_code</code></dt> <dd> DMA region code in US (also known as “metro code”), according to the <a href=\"https://developers.google.com/adwords/api/docs/appendix/cities-DMAregions\">geotargeting</a> in Google AdWords API. </dd> <dt id=\"var_geoip_latitude\"><code>$geoip_latitude</code></dt> <dd>latitude.</dd> <dt id=\"var_geoip_longitude\"><code>$geoip_longitude</code></dt> <dd>longitude.</dd> <dt id=\"var_geoip_region\"><code>$geoip_region</code></dt> <dd> two-symbol country region code (region, territory, state, province, federal land and the like), for example, “<code>48</code>”, “<code>DC</code>”. </dd> <dt id=\"var_geoip_region_name\"><code>$geoip_region_name</code></dt> <dd> country region name (region, territory, state, province, federal land and the like), for example, “<code>Moscow City</code>”, “<code>District of Columbia</code>”. </dd> <dt id=\"var_geoip_city\"><code>$geoip_city</code></dt> <dd> city name, for example, “<code>Moscow</code>”, “<code>Washington</code>”. </dd> <dt id=\"var_geoip_postal_code\"><code>$geoip_postal_code</code></dt> <dd> postal code. </dd> </dl>\n\n<div class=\"directive\" id=\"geoip_org\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>geoip_org</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.0.3. </p>\n</div>\n<p> Specifies a database used to determine the organization depending on the client IP address. The following variable is available when using this database: </p> <dl class=\"compact\"> <dt id=\"var_geoip_org\"><code>$geoip_org</code></dt> <dd> organization name, for example, “The University of Melbourne”. </dd> </dl>\n\n<div class=\"directive\" id=\"geoip_proxy\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>geoip_proxy</strong> <code><i>address</i></code> | <code><i>CIDR</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table> <p> This directive appeared in versions 1.3.0 and 1.2.1. </p> </div>\n<p> Defines trusted addresses. When a request comes from a trusted address, an address from the “X-Forwarded-For” request header field will be used instead. </p>\n<div class=\"directive\" id=\"geoip_proxy_recursive\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>geoip_proxy_recursive</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>geoip_proxy_recursive off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table> <p> This directive appeared in versions 1.3.0 and 1.2.1. </p> </div>\n<p> If recursive search is disabled then instead of the original client address that matches one of the trusted addresses, the last address sent in “X-Forwarded-For” will be used. If recursive search is enabled then instead of the original client address that matches one of the trusted addresses, the last non-trusted address sent in “X-Forwarded-For” will be used. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_geoip_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_geoip_module.html</a>\n  </p>\n</div>\n","ngx_core_module":"<h1>Core functionality</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#accept_mutex\">accept_mutex</a></li>\n<li><a href=\"#accept_mutex_delay\">accept_mutex_delay</a></li>\n<li><a href=\"#daemon\">daemon</a></li>\n<li><a href=\"#debug_connection\">debug_connection</a></li>\n<li><a href=\"#debug_points\">debug_points</a></li>\n<li><a href=\"#error_log\">error_log</a></li>\n<li><a href=\"#env\">env</a></li>\n<li><a href=\"#events\">events</a></li>\n<li><a href=\"#include\">include</a></li>\n<li><a href=\"#load_module\">load_module</a></li>\n<li><a href=\"#lock_file\">lock_file</a></li>\n<li><a href=\"#master_process\">master_process</a></li>\n<li><a href=\"#multi_accept\">multi_accept</a></li>\n<li><a href=\"#pcre_jit\">pcre_jit</a></li>\n<li><a href=\"#pid\">pid</a></li>\n<li><a href=\"#ssl_engine\">ssl_engine</a></li>\n<li><a href=\"#thread_pool\">thread_pool</a></li>\n<li><a href=\"#timer_resolution\">timer_resolution</a></li>\n<li><a href=\"#use\">use</a></li>\n<li><a href=\"#user\">user</a></li>\n<li><a href=\"#worker_aio_requests\">worker_aio_requests</a></li>\n<li><a href=\"#worker_connections\">worker_connections</a></li>\n<li><a href=\"#worker_cpu_affinity\">worker_cpu_affinity</a></li>\n<li><a href=\"#worker_priority\">worker_priority</a></li>\n<li><a href=\"#worker_processes\">worker_processes</a></li>\n<li><a href=\"#worker_rlimit_core\">worker_rlimit_core</a></li>\n<li><a href=\"#worker_rlimit_nofile\">worker_rlimit_nofile</a></li>\n<li><a href=\"#working_directory\">working_directory</a></li>\n</ul> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nuser www www;\nworker_processes 2;\n\nerror_log /var/log/nginx-error.log info;\n\nevents {\n    use kqueue;\n    worker_connections 2048;\n}\n\n...\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"accept_mutex\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>accept_mutex</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>accept_mutex off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>events</code><br> </td> </tr> </table></div>\n<p> If <code>accept_mutex</code> is enabled, worker processes will accept new connections by turn. Otherwise, all worker processes will be notified about new connections, and if volume of new connections is low, some of the worker processes may just waste system resources. </p> <blockquote class=\"note\"> Prior to version 1.11.3, the default value was <code>on</code>. </blockquote>\n\n<div class=\"directive\" id=\"accept_mutex_delay\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>accept_mutex_delay</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>accept_mutex_delay 500ms;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>events</code><br> </td> </tr> </table></div>\n<p> If <a href=\"#accept_mutex\">accept_mutex</a> is enabled, specifies the maximum time during which a worker process will try to restart accepting new connections if another worker process is currently accepting new connections. </p>\n<div class=\"directive\" id=\"daemon\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>daemon</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>daemon on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Determines whether nginx should become a daemon. Mainly used during development. </p>\n<div class=\"directive\" id=\"debug_connection\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>debug_connection</strong> \n    <code><i>address</i></code> |\n    <code><i>CIDR</i></code> |\n    <code>unix:</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>events</code><br> </td> </tr> </table></div>\n<p> Enables debugging log for selected client connections. Other connections will use logging level set by the <a href=\"#error_log\">error_log</a> directive. Debugged connections are specified by IPv4 or IPv6 (1.3.0, 1.2.1) address or network. A connection may also be specified using a hostname. For connections using UNIX-domain sockets (1.3.0, 1.2.1), debugging log is enabled by the “<code>unix:</code>” parameter. </p> <pre data-language=\"nginx\">\nevents {\n    debug_connection 127.0.0.1;\n    debug_connection localhost;\n    debug_connection 192.0.2.0/24;\n    debug_connection ::1;\n    debug_connection 2001:0db8::/32;\n    debug_connection unix:;\n    ...\n}\n</pre>\n <blockquote class=\"note\"> For this directive to work, nginx needs to be built with <code>--with-debug</code>, see “<a href=\"debugging_log\">A debugging log</a>”. </blockquote>\n\n<div class=\"directive\" id=\"debug_points\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>debug_points</strong> <code>abort</code> | <code>stop</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> This directive is used for debugging. </p>\n<p> When internal error is detected, e.g. the leak of sockets on restart of working processes, enabling <code>debug_points</code> leads to a core file creation (<code>abort</code>) or to stopping of a process (<code>stop</code>) for further analysis using a system debugger. </p>\n<div class=\"directive\" id=\"error_log\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>error_log</strong> <code><i>file</i></code> [<code><i>level</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>error_log logs/error.log error;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>main</code>, <code>http</code>, <code>mail</code>, <code>stream</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Configures logging. Several logs can be specified on the same level (1.5.2). </p>\n<p> The first parameter defines a <code><i>file</i></code> that will store the log. The special value <code>stderr</code> selects the standard error file. Logging to <a href=\"syslog\">syslog</a> can be configured by specifying the “<code>syslog:</code>” prefix. Logging to a <a href=\"debugging_log#memory\">cyclic memory buffer</a> can be configured by specifying the “<code>memory:</code>” prefix and buffer <code><i>size</i></code>, and is generally used for debugging (1.7.11). </p>\n<p> The second parameter determines the <code><i>level</i></code> of logging, and can be one of the following: <code>debug</code>, <code>info</code>, <code>notice</code>, <code>warn</code>, <code>error</code>, <code>crit</code>, <code>alert</code>, or <code>emerg</code>. Log levels above are listed in the order of increasing severity. Setting a certain log level will cause all messages of the specified and more severe log levels to be logged. For example, the default level <code>error</code> will cause <code>error</code>, <code>crit</code>, <code>alert</code>, and <code>emerg</code> messages to be logged. If this parameter is omitted then <code>error</code> is used. </p> <blockquote class=\"note\"> For <code>debug</code> logging to work, nginx needs to be built with <code>--with-debug</code>, see “<a href=\"debugging_log\">A debugging log</a>”. </blockquote>\n <blockquote class=\"note\"> The directive can be specified on the <code>stream</code> level starting from version 1.7.11. </blockquote>\n <blockquote class=\"note\"> The directive can be specified on the <code>mail</code> level starting from version 1.9.0. </blockquote>\n\n<div class=\"directive\" id=\"env\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>env</strong> <code><i>variable</i></code>[=<code><i>value</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>env TZ;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> By default, nginx removes all environment variables inherited from its parent process except the TZ variable. This directive allows preserving some of the inherited variables, changing their values, or creating new environment variables. These variables are then: </p> <ul class=\"compact\"> <li> inherited during a <a href=\"control#upgrade\">live upgrade</a> of an executable file; </li> <li> used by the <a href=\"http/ngx_http_perl_module\">ngx_http_perl_module</a> module; </li> <li> used by worker processes. One should bear in mind that controlling system libraries in this way is not always possible as it is common for libraries to check variables only during initialization, well before they can be set using this directive. An exception from this is an above mentioned <a href=\"control#upgrade\">live upgrade</a> of an executable file. </li> </ul>\n\n<p> The TZ variable is always inherited and available to the <a href=\"http/ngx_http_perl_module\">ngx_http_perl_module</a> module, unless it is configured explicitly. </p>\n<p> Usage example: </p> <pre data-language=\"nginx\">\nenv MALLOC_OPTIONS;\nenv PERL5LIB=/data/site/modules;\nenv OPENSSL_ALLOW_PROXY_CERTS=1;\n</pre>\n\n <blockquote class=\"note\"> The NGINX environment variable is used internally by nginx and should not be set directly by the user. </blockquote>\n\n<div class=\"directive\" id=\"events\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>events</strong> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Provides the configuration file context in which the directives that affect connection processing are specified. </p>\n<div class=\"directive\" id=\"include\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>include</strong> <code><i>file</i></code> | <code><i>mask</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>any</code><br> </td> </tr> </table></div>\n<p> Includes another <code><i>file</i></code>, or files matching the specified <code><i>mask</i></code>, into configuration. Included files should consist of syntactically correct directives and blocks. </p>\n<p> Usage example: </p> <pre data-language=\"nginx\">\ninclude mime.types;\ninclude vhosts/*.conf;\n</pre>\n\n<div class=\"directive\" id=\"load_module\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>load_module</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.11. </p>\n</div>\n<p> Loads a dynamic module. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nload_module modules/ngx_mail_module.so;\n</pre>\n\n<div class=\"directive\" id=\"lock_file\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>lock_file</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>lock_file logs/nginx.lock;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> nginx uses the locking mechanism to implement <a href=\"#accept_mutex\">accept_mutex</a> and serialize access to shared memory. On most systems the locks are implemented using atomic operations, and this directive is ignored. On other systems the “lock file” mechanism is used. This directive specifies a prefix for the names of lock files. </p>\n<div class=\"directive\" id=\"master_process\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>master_process</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>master_process on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Determines whether worker processes are started. This directive is intended for nginx developers. </p>\n<div class=\"directive\" id=\"multi_accept\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>multi_accept</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>multi_accept off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>events</code><br> </td> </tr> </table></div>\n<p> If <code>multi_accept</code> is disabled, a worker process will accept one new connection at a time. Otherwise, a worker process will accept all new connections at a time. </p> <blockquote class=\"note\"> The directive is ignored if <a href=\"events#kqueue\">kqueue</a> connection processing method is used, because it reports the number of new connections waiting to be accepted. </blockquote>\n\n<div class=\"directive\" id=\"pcre_jit\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>pcre_jit</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>pcre_jit off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.12. </p>\n</div>\n<p> Enables or disables the use of “just-in-time compilation” (PCRE JIT) for the regular expressions known by the time of configuration parsing. </p>\n<p> PCRE JIT can speed up processing of regular expressions significantly. </p> <blockquote class=\"note\"> The JIT is available in PCRE libraries starting from version 8.20 built with the <code>--enable-jit</code> configuration parameter. When the PCRE library is built with nginx (<code>--with-pcre=</code>), the JIT support is enabled via the <code>--with-pcre-jit</code> configuration parameter. </blockquote>\n\n<div class=\"directive\" id=\"pid\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>pid</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>pid nginx.pid;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Defines a <code><i>file</i></code> that will store the process ID of the main process. </p>\n<div class=\"directive\" id=\"ssl_engine\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_engine</strong> <code><i>device</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Defines the name of the hardware SSL accelerator. </p>\n<div class=\"directive\" id=\"thread_pool\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>thread_pool</strong> \n    <code><i>name</i></code>\n    <code>threads</code>=<code><i>number</i></code>\n    [<code>max_queue</code>=<code><i>number</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>thread_pool default threads=32 max_queue=65536;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.11. </p>\n</div>\n<p> Defines named thread pools used for multi-threaded reading and sending of files <a href=\"http/ngx_http_core_module#aio\">without blocking</a> worker processes. </p>\n<p> The <code>threads</code> parameter defines the number of threads in the pool. </p>\n<p> In the event that all threads in the pool are busy, a new task will wait in the queue. The <code>max_queue</code> parameter limits the number of tasks allowed to be waiting in the queue. By default, up to 65536 tasks can wait in the queue. When the queue overflows, the task is completed with an error. </p>\n<div class=\"directive\" id=\"timer_resolution\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>timer_resolution</strong> <code><i>interval</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Reduces timer resolution in worker processes, thus reducing the number of <code>gettimeofday()</code> system calls made. By default, <code>gettimeofday()</code> is called each time a kernel event is received. With reduced resolution, <code>gettimeofday()</code> is only called once per specified <code><i>interval</i></code>. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\ntimer_resolution 100ms;\n</pre>\n\n<p> Internal implementation of the interval depends on the method used: </p> <ul class=\"compact\"> <li> the <code>EVFILT_TIMER</code> filter if <code>kqueue</code> is used; </li> <li> <code>timer_create()</code> if <code>eventport</code> is used; </li> <li> <code>setitimer()</code> otherwise. </li> </ul>\n\n<div class=\"directive\" id=\"use\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>use</strong> <code><i>method</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>events</code><br> </td> </tr> </table></div>\n<p> Specifies the <a href=\"events\">connection processing</a> <code><i>method</i></code> to use. There is normally no need to specify it explicitly, because nginx will by default use the most efficient method. </p>\n<div class=\"directive\" id=\"user\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>user</strong> <code><i>user</i></code> [<code><i>group</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>user nobody nobody;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Defines <code><i>user</i></code> and <code><i>group</i></code> credentials used by worker processes. If <code><i>group</i></code> is omitted, a group whose name equals that of <code><i>user</i></code> is used. </p>\n<div class=\"directive\" id=\"worker_aio_requests\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>worker_aio_requests</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>worker_aio_requests 32;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>events</code><br> </td> </tr> </table> <p> This directive appeared in versions 1.1.4 and 1.0.7. </p> </div>\n<p> When using <a href=\"http/ngx_http_core_module#aio\">aio</a> with the <a href=\"events#epoll\">epoll</a> connection processing method, sets the maximum <code><i>number</i></code> of outstanding asynchronous I/O operations for a single worker process. </p>\n<div class=\"directive\" id=\"worker_connections\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>worker_connections</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>worker_connections 512;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>events</code><br> </td> </tr> </table></div>\n<p> Sets the maximum number of simultaneous connections that can be opened by a worker process. </p>\n<p> It should be kept in mind that this number includes all connections (e.g. connections with proxied servers, among others), not only connections with clients. Another consideration is that the actual number of simultaneous connections cannot exceed the current limit on the maximum number of open files, which can be changed by <a href=\"#worker_rlimit_nofile\">worker_rlimit_nofile</a>. </p>\n<div class=\"directive\" id=\"worker_cpu_affinity\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>worker_cpu_affinity</strong> <code><i>cpumask</i></code> ...;</code><br><code><strong>worker_cpu_affinity</strong> <code>auto</code> [<code><i>cpumask</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Binds worker processes to the sets of CPUs. Each CPU set is represented by a bitmask of allowed CPUs. There should be a separate set defined for each of the worker processes. By default, worker processes are not bound to any specific CPUs. </p>\n<p> For example, </p> <pre data-language=\"nginx\">\nworker_processes    4;\nworker_cpu_affinity 0001 0010 0100 1000;\n</pre>\n<p> binds each worker process to a separate CPU, while </p> <pre data-language=\"nginx\">\nworker_processes    2;\nworker_cpu_affinity 0101 1010;\n</pre>\n<p> binds the first worker process to CPU0/CPU2, and the second worker process to CPU1/CPU3. The second example is suitable for hyper-threading. </p>\n<p> The special value <code>auto</code> (1.9.10) allows binding worker processes automatically to available CPUs: </p> <pre data-language=\"nginx\">\nworker_processes auto;\nworker_cpu_affinity auto;\n</pre>\n<p> The optional mask parameter can be used to limit the CPUs available for automatic binding: </p> <pre data-language=\"nginx\">\nworker_cpu_affinity auto 01010101;\n</pre>\n\n <blockquote class=\"note\"> The directive is only available on FreeBSD and Linux. </blockquote>\n\n<div class=\"directive\" id=\"worker_priority\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>worker_priority</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>worker_priority 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Defines the scheduling priority for worker processes like it is done by the <code>nice</code> command: a negative <code><i>number</i></code> means higher priority. Allowed range normally varies from -20 to 20. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nworker_priority -10;\n</pre>\n\n<div class=\"directive\" id=\"worker_processes\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>worker_processes</strong> <code><i>number</i></code> | <code>auto</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>worker_processes 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Defines the number of worker processes. </p>\n<p> The optimal value depends on many factors including (but not limited to) the number of CPU cores, the number of hard disk drives that store data, and load pattern. When one is in doubt, setting it to the number of available CPU cores would be a good start (the value “<code>auto</code>” will try to autodetect it). </p> <blockquote class=\"note\"> The <code>auto</code> parameter is supported starting from versions 1.3.8 and 1.2.5. </blockquote>\n\n<div class=\"directive\" id=\"worker_rlimit_core\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>worker_rlimit_core</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Changes the limit on the largest size of a core file (<code>RLIMIT_CORE</code>) for worker processes. Used to increase the limit without restarting the main process. </p>\n<div class=\"directive\" id=\"worker_rlimit_nofile\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>worker_rlimit_nofile</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Changes the limit on the maximum number of open files (<code>RLIMIT_NOFILE</code>) for worker processes. Used to increase the limit without restarting the main process. </p>\n<div class=\"directive\" id=\"working_directory\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>working_directory</strong> <code><i>directory</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Defines the current working directory for a worker process. It is primarily used when writing a core-file, in which case a worker process should have write permission for the specified directory. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/ngx_core_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/ngx_core_module.html</a>\n  </p>\n</div>\n","http/ngx_http_fastcgi_module":"<h1>Module ngx_http_fastcgi_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#fastcgi_bind\">fastcgi_bind</a></li>\n<li><a href=\"#fastcgi_buffer_size\">fastcgi_buffer_size</a></li>\n<li><a href=\"#fastcgi_buffering\">fastcgi_buffering</a></li>\n<li><a href=\"#fastcgi_buffers\">fastcgi_buffers</a></li>\n<li><a href=\"#fastcgi_busy_buffers_size\">fastcgi_busy_buffers_size</a></li>\n<li><a href=\"#fastcgi_cache\">fastcgi_cache</a></li>\n<li><a href=\"#fastcgi_cache_bypass\">fastcgi_cache_bypass</a></li>\n<li><a href=\"#fastcgi_cache_key\">fastcgi_cache_key</a></li>\n<li><a href=\"#fastcgi_cache_lock\">fastcgi_cache_lock</a></li>\n<li><a href=\"#fastcgi_cache_lock_age\">fastcgi_cache_lock_age</a></li>\n<li><a href=\"#fastcgi_cache_lock_timeout\">fastcgi_cache_lock_timeout</a></li>\n<li><a href=\"#fastcgi_cache_methods\">fastcgi_cache_methods</a></li>\n<li><a href=\"#fastcgi_cache_min_uses\">fastcgi_cache_min_uses</a></li>\n<li><a href=\"#fastcgi_cache_path\">fastcgi_cache_path</a></li>\n<li><a href=\"#fastcgi_cache_purge\">fastcgi_cache_purge</a></li>\n<li><a href=\"#fastcgi_cache_revalidate\">fastcgi_cache_revalidate</a></li>\n<li><a href=\"#fastcgi_cache_use_stale\">fastcgi_cache_use_stale</a></li>\n<li><a href=\"#fastcgi_cache_valid\">fastcgi_cache_valid</a></li>\n<li><a href=\"#fastcgi_catch_stderr\">fastcgi_catch_stderr</a></li>\n<li><a href=\"#fastcgi_connect_timeout\">fastcgi_connect_timeout</a></li>\n<li><a href=\"#fastcgi_force_ranges\">fastcgi_force_ranges</a></li>\n<li><a href=\"#fastcgi_hide_header\">fastcgi_hide_header</a></li>\n<li><a href=\"#fastcgi_ignore_client_abort\">fastcgi_ignore_client_abort</a></li>\n<li><a href=\"#fastcgi_ignore_headers\">fastcgi_ignore_headers</a></li>\n<li><a href=\"#fastcgi_index\">fastcgi_index</a></li>\n<li><a href=\"#fastcgi_intercept_errors\">fastcgi_intercept_errors</a></li>\n<li><a href=\"#fastcgi_keep_conn\">fastcgi_keep_conn</a></li>\n<li><a href=\"#fastcgi_limit_rate\">fastcgi_limit_rate</a></li>\n<li><a href=\"#fastcgi_max_temp_file_size\">fastcgi_max_temp_file_size</a></li>\n<li><a href=\"#fastcgi_next_upstream\">fastcgi_next_upstream</a></li>\n<li><a href=\"#fastcgi_next_upstream_timeout\">fastcgi_next_upstream_timeout</a></li>\n<li><a href=\"#fastcgi_next_upstream_tries\">fastcgi_next_upstream_tries</a></li>\n<li><a href=\"#fastcgi_no_cache\">fastcgi_no_cache</a></li>\n<li><a href=\"#fastcgi_param\">fastcgi_param</a></li>\n<li><a href=\"#fastcgi_pass\">fastcgi_pass</a></li>\n<li><a href=\"#fastcgi_pass_header\">fastcgi_pass_header</a></li>\n<li><a href=\"#fastcgi_pass_request_body\">fastcgi_pass_request_body</a></li>\n<li><a href=\"#fastcgi_pass_request_headers\">fastcgi_pass_request_headers</a></li>\n<li><a href=\"#fastcgi_read_timeout\">fastcgi_read_timeout</a></li>\n<li><a href=\"#fastcgi_request_buffering\">fastcgi_request_buffering</a></li>\n<li><a href=\"#fastcgi_send_lowat\">fastcgi_send_lowat</a></li>\n<li><a href=\"#fastcgi_send_timeout\">fastcgi_send_timeout</a></li>\n<li><a href=\"#fastcgi_split_path_info\">fastcgi_split_path_info</a></li>\n<li><a href=\"#fastcgi_store\">fastcgi_store</a></li>\n<li><a href=\"#fastcgi_store_access\">fastcgi_store_access</a></li>\n<li><a href=\"#fastcgi_temp_file_write_size\">fastcgi_temp_file_write_size</a></li>\n<li><a href=\"#fastcgi_temp_path\">fastcgi_temp_path</a></li>\n<li><a href=\"#parameters\">Parameters Passed to a FastCGI Server</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_fastcgi_module</code> module allows passing requests to a FastCGI server. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    fastcgi_pass  localhost:9000;\n    fastcgi_index index.php;\n\n    fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\n    fastcgi_param QUERY_STRING    $query_string;\n    fastcgi_param REQUEST_METHOD  $request_method;\n    fastcgi_param CONTENT_TYPE    $content_type;\n    fastcgi_param CONTENT_LENGTH  $content_length;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"fastcgi_bind\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_bind</strong> <code><i>address</i></code> [transparent] | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.8.22. </p>\n</div>\n<p> Makes outgoing connections to a FastCGI server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value <code>off</code> (1.3.12) cancels the effect of the <code>fastcgi_bind</code> directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port. </p>\n<p id=\"fastcgi_bind_transparent\"> The <code>transparent</code> parameter (1.11.0) allows outgoing connections to a FastCGI server originate from a non-local IP address, for example, from a real IP address of a client: </p> <pre data-language=\"nginx\">\nfastcgi_bind $remote_addr transparent;\n</pre>\n<p> In order for this parameter to work, it is necessary to run nginx worker processes with the <a href=\"../ngx_core_module#user\">superuser</a> privileges and configure kernel routing table to intercept network traffic from the FastCGI server. </p>\n<div class=\"directive\" id=\"fastcgi_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_buffer_size 4k|8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>size</i></code> of the buffer used for reading the first part of the response received from the FastCGI server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however. </p>\n<div class=\"directive\" id=\"fastcgi_buffering\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_buffering</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_buffering on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.6. </p>\n</div>\n<p> Enables or disables buffering of responses from the FastCGI server. </p>\n<p> When buffering is enabled, nginx receives a response from the FastCGI server as soon as possible, saving it into the buffers set by the <a href=\"#fastcgi_buffer_size\">fastcgi_buffer_size</a> and <a href=\"#fastcgi_buffers\">fastcgi_buffers</a> directives. If the whole response does not fit into memory, a part of it can be saved to a <a href=\"#fastcgi_temp_path\">temporary file</a> on the disk. Writing to temporary files is controlled by the <a href=\"#fastcgi_max_temp_file_size\">fastcgi_max_temp_file_size</a> and <a href=\"#fastcgi_temp_file_write_size\">fastcgi_temp_file_write_size</a> directives. </p>\n<p> When buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the FastCGI server. The maximum size of the data that nginx can receive from the server at a time is set by the <a href=\"#fastcgi_buffer_size\">fastcgi_buffer_size</a> directive. </p>\n<p> Buffering can also be enabled or disabled by passing “<code>yes</code>” or “<code>no</code>” in the “X-Accel-Buffering” response header field. This capability can be disabled using the <a href=\"#fastcgi_ignore_headers\">fastcgi_ignore_headers</a> directive. </p>\n<div class=\"directive\" id=\"fastcgi_buffers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_buffers</strong> <code><i>number</i></code> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_buffers 8 4k|8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>number</i></code> and <code><i>size</i></code> of the buffers used for reading a response from the FastCGI server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. </p>\n<div class=\"directive\" id=\"fastcgi_busy_buffers_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_busy_buffers_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_busy_buffers_size 8k|16k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> When <a href=\"#fastcgi_buffering\">buffering</a> of responses from the FastCGI server is enabled, limits the total <code><i>size</i></code> of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, <code><i>size</i></code> is limited by the size of two buffers set by the <a href=\"#fastcgi_buffer_size\">fastcgi_buffer_size</a> and <a href=\"#fastcgi_buffers\">fastcgi_buffers</a> directives. </p>\n<div class=\"directive\" id=\"fastcgi_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache</strong> <code><i>zone</i></code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_cache off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The <code>off</code> parameter disables caching inherited from the previous configuration level. </p>\n<div class=\"directive\" id=\"fastcgi_cache_bypass\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache_bypass</strong> <code><i>string</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache: </p> <pre data-language=\"nginx\">\nfastcgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;\nfastcgi_cache_bypass $http_pragma    $http_authorization;\n</pre>\n<p> Can be used along with the <a href=\"#fastcgi_no_cache\">fastcgi_no_cache</a> directive. </p>\n<div class=\"directive\" id=\"fastcgi_cache_key\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache_key</strong> <code><i>string</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a key for caching, for example </p> <pre data-language=\"nginx\">\nfastcgi_cache_key localhost:9000$request_uri;\n</pre>\n\n<div class=\"directive\" id=\"fastcgi_cache_lock\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache_lock</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_cache_lock off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.12. </p>\n</div>\n<p> When enabled, only one request at a time will be allowed to populate a new cache element identified according to the <a href=\"#fastcgi_cache_key\">fastcgi_cache_key</a> directive by passing a request to a FastCGI server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the <a href=\"#fastcgi_cache_lock_timeout\">fastcgi_cache_lock_timeout</a> directive. </p>\n<div class=\"directive\" id=\"fastcgi_cache_lock_age\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache_lock_age</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_cache_lock_age 5s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.8. </p>\n</div>\n<p> If the last request passed to the FastCGI server for populating a new cache element has not completed for the specified <code><i>time</i></code>, one more request may be passed to the FastCGI server. </p>\n<div class=\"directive\" id=\"fastcgi_cache_lock_timeout\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache_lock_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_cache_lock_timeout 5s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.12. </p>\n</div>\n<p> Sets a timeout for <a href=\"#fastcgi_cache_lock\">fastcgi_cache_lock</a>. When the <code><i>time</i></code> expires, the request will be passed to the FastCGI server, however, the response will not be cached. </p> <blockquote class=\"note\"> Before 1.7.8, the response could be cached. </blockquote>\n\n<div class=\"directive\" id=\"fastcgi_cache_methods\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache_methods</strong> \n    <code>GET</code> |\n    <code>HEAD</code> |\n    <code>POST</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_cache_methods GET HEAD;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.7.59. </p>\n</div>\n<p> If the client request method is listed in this directive then the response will be cached. “<code>GET</code>” and “<code>HEAD</code>” methods are always added to the list, though it is recommended to specify them explicitly. See also the <a href=\"#fastcgi_no_cache\">fastcgi_no_cache</a> directive. </p>\n<div class=\"directive\" id=\"fastcgi_cache_min_uses\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache_min_uses</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_cache_min_uses 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>number</i></code> of requests after which the response will be cached. </p>\n<div class=\"directive\" id=\"fastcgi_cache_path\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache_path</strong> \n    <code><i>path</i></code>\n    [<code>levels</code>=<code><i>levels</i></code>]\n    [<code>use_temp_path</code>=<code>on</code>|<code>off</code>]\n    <code>keys_zone</code>=<code><i>name</i></code>:<code><i>size</i></code>\n    [<code>inactive</code>=<code><i>time</i></code>]\n    [<code>max_size</code>=<code><i>size</i></code>]\n    [<code>loader_files</code>=<code><i>number</i></code>]\n    [<code>loader_sleep</code>=<code><i>time</i></code>]\n    [<code>loader_threshold</code>=<code><i>time</i></code>]\n    [<code>purger</code>=<code>on</code>|<code>off</code>]\n    [<code>purger_files</code>=<code><i>number</i></code>]\n    [<code>purger_sleep</code>=<code><i>time</i></code>]\n    [<code>purger_threshold</code>=<code><i>time</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets the path and other parameters of a cache. Cache data are stored in files. Both the key and file name in a cache are a result of applying the MD5 function to the proxied URL. The <code>levels</code> parameter defines hierarchy levels of a cache. For example, in the following configuration </p> <pre data-language=\"nginx\">\nfastcgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;\n</pre>\n<p> file names in a cache will look like this: </p> <pre data-language=\"nginx\">\n/data/nginx/cache/<strong>c</strong>/<strong>29</strong>/b7f54b2df7773722d382f4809d650<strong>29c</strong>\n</pre>\n\n<p> A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the <code>use_temp_path</code> parameter (1.7.10). If this parameter is omitted or set to the value <code>on</code>, the directory set by the <a href=\"#fastcgi_temp_path\">fastcgi_temp_path</a> directive for the given location will be used. If the value is set to <code>off</code>, temporary files will be put directly in the cache directory. </p>\n<p> In addition, all active keys and information about data are stored in a shared memory zone, whose <code><i>name</i></code> and <code><i>size</i></code> are configured by the <code>keys_zone</code> parameter. One megabyte zone can store about 8 thousand keys. </p>\n<p> Cached data that are not accessed during the time specified by the <code>inactive</code> parameter get removed from the cache regardless of their freshness. By default, <code>inactive</code> is set to 10 minutes. </p>\n<p> The special “cache manager” process monitors the maximum cache size set by the <code>max_size</code> parameter. When this size is exceeded, it removes the least recently used data. </p>\n<p> A minute after the start the special “cache loader” process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is done in iterations. During one iteration no more than <code>loader_files</code> items are loaded (by default, 100). Besides, the duration of one iteration is limited by the <code>loader_threshold</code> parameter (by default, 200 milliseconds). Between iterations, a pause configured by the <code>loader_sleep</code> parameter (by default, 50 milliseconds) is made. </p>\n<p> Additionally, the following parameters are available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>: </p>\n <dl class=\"compact\"> <dt id=\"purger\"> <code>purger</code>=<code>on</code>|<code>off</code> </dt> <dd> Instructs whether cache entries that match a <a href=\"#fastcgi_cache_purge\">wildcard key</a> will be removed from the disk by the cache purger (1.7.12). Setting the parameter to <code>on</code> (default is <code>off</code>) will activate the “cache purger” process that permanently iterates through all cache entries and deletes the entries that match the wildcard key. </dd> <dt id=\"purger_files\"> <code>purger_files</code>=<code><i>number</i></code> </dt> <dd> Sets the number of items that will be scanned during one iteration (1.7.12). By default, <code>purger_files</code> is set to 10. </dd> <dt id=\"purger_threshold\"> <code>purger_threshold</code>=<code><i>number</i></code> </dt> <dd> Sets the duration of one iteration (1.7.12). By default, <code>purger_threshold</code> is set to 50 milliseconds. </dd> <dt id=\"purger_sleep\"> <code>purger_sleep</code>=<code><i>number</i></code> </dt> <dd> Sets a pause between iterations (1.7.12). By default, <code>purger_sleep</code> is set to 50 milliseconds. </dd> </dl>\n\n<div class=\"directive\" id=\"fastcgi_cache_purge\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache_purge</strong> string ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.7. </p>\n</div>\n<p> Defines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding <a href=\"#fastcgi_cache_key\">cache key</a> is removed. The result of successful operation is indicated by returning the 204 (No Content) response. </p>\n<p> If the <a href=\"#fastcgi_cache_key\">cache key</a> of a purge request ends with an asterisk (“<code>*</code>”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either <a href=\"#fastcgi_cache_path\">inactivity</a>, or processed by the <a href=\"#purger\">cache purger</a> (1.7.12), or a client attempts to access them. </p>\n<p> Example configuration: </p> <pre data-language=\"nginx\">\nfastcgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;\n\nmap $request_method $purge_method {\n    PURGE   1;\n    default 0;\n}\n\nserver {\n    ...\n    location / {\n        fastcgi_pass        backend;\n        fastcgi_cache       cache_zone;\n        fastcgi_cache_key   $uri;\n        fastcgi_cache_purge $purge_method;\n    }\n}\n</pre>\n <blockquote class=\"note\"> This functionality is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"fastcgi_cache_revalidate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache_revalidate</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_cache_revalidate off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.7. </p>\n</div>\n<p> Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields. </p>\n<div class=\"directive\" id=\"fastcgi_cache_use_stale\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache_use_stale</strong> \n    <code>error</code> |\n    <code>timeout</code> |\n    <code>invalid_header</code> |\n    <code>updating</code> |\n    <code>http_500</code> |\n    <code>http_503</code> |\n    <code>http_403</code> |\n    <code>http_404</code> |\n    <code>off</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_cache_use_stale off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines in which cases a stale cached response can be used when an error occurs during communication with the FastCGI server. The directive’s parameters match the parameters of the <a href=\"#fastcgi_next_upstream\">fastcgi_next_upstream</a> directive. </p>\n<p> The <code>error</code> parameter also permits using a stale cached response if a FastCGI server to process a request cannot be selected. </p>\n<p> Additionally, the <code>updating</code> parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to FastCGI servers when updating cached data. </p>\n<p> To minimize the number of accesses to FastCGI servers when populating a new cache element, the <a href=\"#fastcgi_cache_lock\">fastcgi_cache_lock</a> directive can be used. </p>\n<div class=\"directive\" id=\"fastcgi_cache_valid\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_cache_valid</strong> [<code><i>code</i></code> ...] <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets caching time for different response codes. For example, the following directives </p> <pre data-language=\"nginx\">\nfastcgi_cache_valid 200 302 10m;\nfastcgi_cache_valid 404      1m;\n</pre>\n<p> set 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404. </p>\n<p> If only caching <code><i>time</i></code> is specified </p> <pre data-language=\"nginx\">\nfastcgi_cache_valid 5m;\n</pre>\n<p> then only 200, 301, and 302 responses are cached. </p>\n<p> In addition, the <code>any</code> parameter can be specified to cache any responses: </p> <pre data-language=\"nginx\">\nfastcgi_cache_valid 200 302 10m;\nfastcgi_cache_valid 301      1h;\nfastcgi_cache_valid any      1m;\n</pre>\n\n<p> Parameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive. </p> <ul> <li> The “X-Accel-Expires” header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the <code>@</code> prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached. </li> <li> If the header does not include the “X-Accel-Expires” field, parameters of caching may be set in the header fields “Expires” or “Cache-Control”. </li> <li> If the header includes the “Set-Cookie” field, such a response will not be cached. </li> <li> If the header includes the “Vary” field with the special value “<code>*</code>”, such a response will not be cached (1.7.7). If the header includes the “Vary” field with another value, such a response will be cached taking into account the corresponding request header fields (1.7.7). </li> </ul>\n<p> Processing of one or more of these response header fields can be disabled using the <a href=\"#fastcgi_ignore_headers\">fastcgi_ignore_headers</a> directive. </p>\n<div class=\"directive\" id=\"fastcgi_catch_stderr\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_catch_stderr</strong> <code><i>string</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a string to search for in the error stream of a response received from a FastCGI server. If the <code><i>string</i></code> is found then it is considered that the FastCGI server has returned an <a href=\"#fastcgi_next_upstream\">invalid response</a>. This allows handling application errors in nginx, for example: </p> <pre data-language=\"nginx\">\nlocation /php {\n    fastcgi_pass backend:9000;\n    ...\n    fastcgi_catch_stderr \"PHP Fatal error\";\n    fastcgi_next_upstream error timeout invalid_header;\n}\n</pre>\n\n<div class=\"directive\" id=\"fastcgi_connect_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_connect_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_connect_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for establishing a connection with a FastCGI server. It should be noted that this timeout cannot usually exceed 75 seconds. </p>\n<div class=\"directive\" id=\"fastcgi_force_ranges\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_force_ranges</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_force_ranges off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.7. </p>\n</div>\n<p> Enables byte-range support for both cached and uncached responses from the FastCGI server regardless of the “Accept-Ranges” field in these responses. </p>\n<div class=\"directive\" id=\"fastcgi_hide_header\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_hide_header</strong> <code><i>field</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of a FastCGI server to a client. The <code>fastcgi_hide_header</code> directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the <a href=\"#fastcgi_pass_header\">fastcgi_pass_header</a> directive can be used. </p>\n<div class=\"directive\" id=\"fastcgi_ignore_client_abort\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_ignore_client_abort</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_ignore_client_abort off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines whether the connection with a FastCGI server should be closed when a client closes the connection without waiting for a response. </p>\n<div class=\"directive\" id=\"fastcgi_ignore_headers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_ignore_headers</strong> <code><i>field</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Disables processing of certain response header fields from the FastCGI server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7). </p>\n<p> If not disabled, processing of these header fields has the following effect: </p> <ul> <li> “X-Accel-Expires”, “Expires”, “Cache-Control”, “Set-Cookie”, and “Vary” set the parameters of response <a href=\"#fastcgi_cache_valid\">caching</a>; </li> <li> “X-Accel-Redirect” performs an <a href=\"ngx_http_core_module#internal\">internal redirect</a> to the specified URI; </li> <li> “X-Accel-Limit-Rate” sets the <a href=\"ngx_http_core_module#limit_rate\">rate limit</a> for transmission of a response to a client; </li> <li> “X-Accel-Buffering” enables or disables <a href=\"#fastcgi_buffering\">buffering</a> of a response; </li> <li> “X-Accel-Charset” sets the desired <a href=\"ngx_http_charset_module#charset\">charset</a> of a response. </li> </ul>\n\n<div class=\"directive\" id=\"fastcgi_index\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_index</strong> <code><i>name</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a file name that will be appended after a URI that ends with a slash, in the value of the <code>$fastcgi_script_name</code> variable. For example, with these settings </p> <pre data-language=\"nginx\">\nfastcgi_index index.php;\nfastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\n</pre>\n<p> and the “<code>/page.php</code>” request, the <code>SCRIPT_FILENAME</code> parameter will be equal to “<code>/home/www/scripts/php/page.php</code>”, and with the “<code>/</code>” request it will be equal to “<code>/home/www/scripts/php/index.php</code>”. </p>\n<div class=\"directive\" id=\"fastcgi_intercept_errors\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_intercept_errors</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_intercept_errors off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines whether FastCGI server responses with codes greater than or equal to 300 should be passed to a client or be redirected to nginx for processing with the <a href=\"ngx_http_core_module#error_page\">error_page</a> directive. </p>\n<div class=\"directive\" id=\"fastcgi_keep_conn\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_keep_conn</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_keep_conn off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.4. </p>\n</div>\n<p> By default, a FastCGI server will close a connection right after sending the response. However, when this directive is set to the value <code>on</code>, nginx will instruct a FastCGI server to keep connections open. This is necessary, in particular, for <a href=\"ngx_http_upstream_module#keepalive\">keepalive</a> connections to FastCGI servers to function. </p>\n<div class=\"directive\" id=\"fastcgi_limit_rate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_limit_rate</strong> <code><i>rate</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_limit_rate 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.7. </p>\n</div>\n<p> Limits the speed of reading the response from the FastCGI server. The <code><i>rate</i></code> is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the FastCFI server, the overall rate will be twice as much as the specified limit. The limitation works only if <a href=\"#fastcgi_buffering\">buffering</a> of responses from the FastCGI server is enabled. </p>\n<div class=\"directive\" id=\"fastcgi_max_temp_file_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_max_temp_file_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_max_temp_file_size 1024m;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> When <a href=\"#fastcgi_buffering\">buffering</a> of responses from the FastCGI server is enabled, and the whole response does not fit into the buffers set by the <a href=\"#fastcgi_buffer_size\">fastcgi_buffer_size</a> and <a href=\"#fastcgi_buffers\">fastcgi_buffers</a> directives, a part of the response can be saved to a temporary file. This directive sets the maximum <code><i>size</i></code> of the temporary file. The size of data written to the temporary file at a time is set by the <a href=\"#fastcgi_temp_file_write_size\">fastcgi_temp_file_write_size</a> directive. </p>\n<p> The zero value disables buffering of responses to temporary files. </p>\n <blockquote class=\"note\"> This restriction does not apply to responses that will be <a href=\"#fastcgi_cache\">cached</a> or <a href=\"#fastcgi_store\">stored</a> on disk. </blockquote>\n\n<div class=\"directive\" id=\"fastcgi_next_upstream\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_next_upstream</strong> \n    <code>error</code> |\n    <code>timeout</code> |\n    <code>invalid_header</code> |\n    <code>http_500</code> |\n    <code>http_503</code> |\n    <code>http_403</code> |\n    <code>http_404</code> |\n    <code>non_idempotent</code> |\n    <code>off</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_next_upstream error timeout;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Specifies in which cases a request should be passed to the next server: </p> <dl class=\"compact\"> <dt><code>error</code></dt> <dd>an error occurred while establishing a connection with the server, passing a request to it, or reading the response header;</dd> <dt><code>timeout</code></dt> <dd>a timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;</dd> <dt><code>invalid_header</code></dt> <dd>a server returned an empty or invalid response;</dd> <dt><code>http_500</code></dt> <dd>a server returned a response with the code 500;</dd> <dt><code>http_503</code></dt> <dd>a server returned a response with the code 503;</dd> <dt><code>http_403</code></dt> <dd>a server returned a response with the code 403;</dd> <dt><code>http_404</code></dt> <dd>a server returned a response with the code 404;</dd> <dt id=\"non_idempotent\"><code>non_idempotent</code></dt> <dd>normally, requests with a <a href=\"http://tools.ietf.org/html/rfc7231#section-4.2.2\">non-idempotent</a> method (<code>POST</code>, <code>LOCK</code>, <code>PATCH</code>) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests; </dd> <dt><code>off</code></dt> <dd>disables passing a request to the next server.</dd> </dl>\n\n<p> One should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible. </p>\n<p> The directive also defines what is considered an <a href=\"ngx_http_upstream_module#max_fails\">unsuccessful attempt</a> of communication with a server. The cases of <code>error</code>, <code>timeout</code> and <code>invalid_header</code> are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of <code>http_500</code> and <code>http_503</code> are considered unsuccessful attempts only if they are specified in the directive. The cases of <code>http_403</code> and <code>http_404</code> are never considered unsuccessful attempts. </p>\n<p> Passing a request to the next server can be limited by <a href=\"#fastcgi_next_upstream_tries\">the number of tries</a> and by <a href=\"#fastcgi_next_upstream_timeout\">time</a>. </p>\n<div class=\"directive\" id=\"fastcgi_next_upstream_timeout\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_next_upstream_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_next_upstream_timeout 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.5. </p>\n</div>\n<p> Limits the time during which a request can be passed to the <a href=\"#fastcgi_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation. </p>\n<div class=\"directive\" id=\"fastcgi_next_upstream_tries\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_next_upstream_tries</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_next_upstream_tries 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.5. </p>\n</div>\n<p> Limits the number of possible tries for passing a request to the <a href=\"#fastcgi_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation. </p>\n<div class=\"directive\" id=\"fastcgi_no_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_no_cache</strong> <code><i>string</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved: </p> <pre data-language=\"nginx\">\nfastcgi_no_cache $cookie_nocache $arg_nocache$arg_comment;\nfastcgi_no_cache $http_pragma    $http_authorization;\n</pre>\n<p> Can be used along with the <a href=\"#fastcgi_cache_bypass\">fastcgi_cache_bypass</a> directive. </p>\n<div class=\"directive\" id=\"fastcgi_param\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_param</strong> \n    <code><i>parameter</i></code> <code><i>value</i></code>\n    [<code>if_not_empty</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a <code><i>parameter</i></code> that should be passed to the FastCGI server. The <code><i>value</i></code> can contain text, variables, and their combination. These directives are inherited from the previous level if and only if there are no <code>fastcgi_param</code> directives defined on the current level. </p>\n<p> The following example shows the minimum required settings for PHP: </p> <pre data-language=\"nginx\">\nfastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\nfastcgi_param QUERY_STRING    $query_string;\n</pre>\n\n<p> The <code>SCRIPT_FILENAME</code> parameter is used in PHP for determining the script name, and the <code>QUERY_STRING</code> parameter is used to pass request parameters. </p>\n<p> For scripts that process <code>POST</code> requests, the following three parameters are also required: </p> <pre data-language=\"nginx\">\nfastcgi_param REQUEST_METHOD  $request_method;\nfastcgi_param CONTENT_TYPE    $content_type;\nfastcgi_param CONTENT_LENGTH  $content_length;\n</pre>\n\n<p> If PHP was built with the <code>--enable-force-cgi-redirect</code> configuration parameter, the <code>REDIRECT_STATUS</code> parameter should also be passed with the value “200”: </p> <pre data-language=\"nginx\">\nfastcgi_param REDIRECT_STATUS 200;\n</pre>\n\n<p> If the directive is specified with <code>if_not_empty</code> (1.1.11) then such a parameter will not be passed to the server until its value is not empty: </p> <pre data-language=\"nginx\">\nfastcgi_param HTTPS           $https if_not_empty;\n</pre>\n\n<div class=\"directive\" id=\"fastcgi_pass\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_pass</strong> <code><i>address</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Sets the address of a FastCGI server. The address can be specified as a domain name or IP address, and a port: </p> <pre data-language=\"nginx\">\nfastcgi_pass localhost:9000;\n</pre>\n<p> or as a UNIX-domain socket path: </p> <pre data-language=\"nginx\">\nfastcgi_pass unix:/tmp/fastcgi.socket;\n</pre>\n\n<p> If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a <a href=\"ngx_http_upstream_module\">server group</a>. </p>\n<div class=\"directive\" id=\"fastcgi_pass_header\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_pass_header</strong> <code><i>field</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Permits passing <a href=\"#fastcgi_hide_header\">otherwise disabled</a> header fields from a FastCGI server to a client. </p>\n<div class=\"directive\" id=\"fastcgi_pass_request_body\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_pass_request_body</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_pass_request_body on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Indicates whether the original request body is passed to the FastCGI server. See also the <a href=\"#fastcgi_pass_request_headers\">fastcgi_pass_request_headers</a> directive. </p>\n<div class=\"directive\" id=\"fastcgi_pass_request_headers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_pass_request_headers</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_pass_request_headers on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Indicates whether the header fields of the original request are passed to the FastCGI server. See also the <a href=\"#fastcgi_pass_request_body\">fastcgi_pass_request_body</a> directive. </p>\n<div class=\"directive\" id=\"fastcgi_read_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_read_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_read_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for reading a response from the FastCGI server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the FastCGI server does not transmit anything within this time, the connection is closed. </p>\n<div class=\"directive\" id=\"fastcgi_request_buffering\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_request_buffering</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_request_buffering on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.11. </p>\n</div>\n<p> Enables or disables buffering of a client request body. </p>\n<p> When buffering is enabled, the entire request body is <a href=\"ngx_http_core_module#client_body_buffer_size\">read</a> from the client before sending the request to a FastCGI server. </p>\n<p> When buffering is disabled, the request body is sent to the FastCGI server immediately as it is received. In this case, the request cannot be passed to the <a href=\"#fastcgi_next_upstream\">next server</a> if nginx already started sending the request body. </p>\n<div class=\"directive\" id=\"fastcgi_send_lowat\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_send_lowat</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_send_lowat 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on outgoing connections to a FastCGI server by using either <code>NOTE_LOWAT</code> flag of the <a href=\"../events#kqueue\">kqueue</a> method, or the <code>SO_SNDLOWAT</code> socket option, with the specified <code><i>size</i></code>. </p>\n<p> This directive is ignored on Linux, Solaris, and Windows. </p>\n<div class=\"directive\" id=\"fastcgi_send_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_send_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_send_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a timeout for transmitting a request to the FastCGI server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the FastCGI server does not receive anything within this time, the connection is closed. </p>\n<div class=\"directive\" id=\"fastcgi_split_path_info\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_split_path_info</strong> <code><i>regex</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a regular expression that captures a value for the <code>$fastcgi_path_info</code> variable. The regular expression should have two captures: the first becomes a value of the <code>$fastcgi_script_name</code> variable, the second becomes a value of the <code>$fastcgi_path_info</code> variable. For example, with these settings </p> <pre data-language=\"nginx\">\nlocation ~ ^(.+\\.php)(.*)$ {\n    fastcgi_split_path_info       ^(.+\\.php)(.*)$;\n    fastcgi_param SCRIPT_FILENAME /path/to/php$fastcgi_script_name;\n    fastcgi_param PATH_INFO       $fastcgi_path_info;\n</pre>\n<p> and the “<code>/show.php/article/0001</code>” request, the <code>SCRIPT_FILENAME</code> parameter will be equal to “<code>/path/to/php/show.php</code>”, and the <code>PATH_INFO</code> parameter will be equal to “<code>/article/0001</code>”. </p>\n<div class=\"directive\" id=\"fastcgi_store\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_store</strong> \n    <code>on</code> |\n    <code>off</code> |\n    <code><i>string</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_store off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables saving of files to a disk. The <code>on</code> parameter saves files with paths corresponding to the directives <a href=\"ngx_http_core_module#alias\">alias</a> or <a href=\"ngx_http_core_module#root\">root</a>. The <code>off</code> parameter disables saving of files. In addition, the file name can be set explicitly using the <code><i>string</i></code> with variables: </p> <pre data-language=\"nginx\">\nfastcgi_store /data/www$original_uri;\n</pre>\n\n<p> The modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the <a href=\"#fastcgi_temp_path\">fastcgi_temp_path</a> directive, are put on the same file system. </p>\n<p> This directive can be used to create local copies of static unchangeable files, e.g.: </p> <pre data-language=\"nginx\">\nlocation /images/ {\n    root                 /data/www;\n    error_page           404 = /fetch$uri;\n}\n\nlocation /fetch/ {\n    internal;\n\n    fastcgi_pass         backend:9000;\n    ...\n\n    fastcgi_store        on;\n    fastcgi_store_access user:rw group:rw all:r;\n    fastcgi_temp_path    /data/temp;\n\n    alias                /data/www/;\n}\n</pre>\n\n<div class=\"directive\" id=\"fastcgi_store_access\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_store_access</strong> <code><i>users</i></code>:<code><i>permissions</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_store_access user:rw;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets access permissions for newly created files and directories, e.g.: </p> <pre data-language=\"nginx\">\nfastcgi_store_access user:rw group:rw all:r;\n</pre>\n\n<p> If any <code>group</code> or <code>all</code> access permissions are specified then <code>user</code> permissions may be omitted: </p> <pre data-language=\"nginx\">\nfastcgi_store_access group:rw all:r;\n</pre>\n\n<div class=\"directive\" id=\"fastcgi_temp_file_write_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_temp_file_write_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_temp_file_write_size 8k|16k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Limits the <code><i>size</i></code> of data written to a temporary file at a time, when buffering of responses from the FastCGI server to temporary files is enabled. By default, <code><i>size</i></code> is limited by two buffers set by the <a href=\"#fastcgi_buffer_size\">fastcgi_buffer_size</a> and <a href=\"#fastcgi_buffers\">fastcgi_buffers</a> directives. The maximum size of a temporary file is set by the <a href=\"#fastcgi_max_temp_file_size\">fastcgi_max_temp_file_size</a> directive. </p>\n<div class=\"directive\" id=\"fastcgi_temp_path\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>fastcgi_temp_path</strong> \n    <code><i>path</i></code>\n    [<code><i>level1</i></code>\n    [<code><i>level2</i></code>\n    [<code><i>level3</i></code>]]];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>fastcgi_temp_path fastcgi_temp;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a directory for storing temporary files with data received from FastCGI servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration </p> <pre data-language=\"nginx\">\nfastcgi_temp_path /spool/nginx/fastcgi_temp 1 2;\n</pre>\n<p> a temporary file might look like this: </p> <pre data-language=\"nginx\">\n/spool/nginx/fastcgi_temp/<strong>7</strong>/<strong>45</strong>/00000123<strong>457</strong>\n</pre>\n\n<p> See also the <code>use_temp_path</code> parameter of the <a href=\"#fastcgi_cache_path\">fastcgi_cache_path</a> directive. </p> <h4 id=\"parameters\">Parameters Passed to a FastCGI Server</h4>\n<p> HTTP request header fields are passed to a FastCGI server as parameters. In applications and scripts running as FastCGI servers, these parameters are usually made available as environment variables. For example, the “User-Agent” header field is passed as the <code>HTTP_USER_AGENT</code> parameter. In addition to HTTP request header fields, it is possible to pass arbitrary parameters using the <a href=\"#fastcgi_param\">fastcgi_param</a> directive. </p> <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_fastcgi_module</code> module supports embedded variables that can be used to set parameters using the <a href=\"#fastcgi_param\">fastcgi_param</a> directive: </p> <dl class=\"compact\"> <dt id=\"var_fastcgi_script_name\">\n<code>$fastcgi_script_name</code> </dt> <dd> request URI or, if a URI ends with a slash, request URI with an index file name configured by the <a href=\"#fastcgi_index\">fastcgi_index</a> directive appended to it. This variable can be used to set the <code>SCRIPT_FILENAME</code> and <code>PATH_TRANSLATED</code> parameters that determine the script name in PHP. For example, for the “<code>/info/</code>” request with the following directives <pre data-language=\"nginx\">\nfastcgi_index index.php;\nfastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\n</pre> the <code>SCRIPT_FILENAME</code> parameter will be equal to “<code>/home/www/scripts/php/info/index.php</code>”. <p> When using the <a href=\"#fastcgi_split_path_info\">fastcgi_split_path_info</a> directive, the <code>$fastcgi_script_name</code> variable equals the value of the first capture set by the directive. </p> </dd> <dt id=\"var_fastcgi_path_info\"><code>$fastcgi_path_info</code></dt> <dd>the value of the second capture set by the <a href=\"#fastcgi_split_path_info\">fastcgi_split_path_info</a> directive. This variable can be used to set the <code>PATH_INFO</code> parameter. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html</a>\n  </p>\n</div>\n","http/ngx_http_gunzip_module":"<h1>Module ngx_http_gunzip_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#gunzip\">gunzip</a></li>\n<li><a href=\"#gunzip_buffers\">gunzip_buffers</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_gunzip_module</code> module is a filter that decompresses responses with “<code>Content-Encoding: gzip</code>” for clients that do not support “gzip” encoding method. The module will be useful when it is desirable to store data compressed to save space and reduce I/O costs. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_gunzip_module</code> configuration parameter. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation /storage/ {\n    gunzip on;\n    ...\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"gunzip\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>gunzip</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>gunzip off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables decompression of gzipped responses for clients that lack gzip support. If enabled, the following directives are also taken into account when determining if clients support gzip: <a href=\"ngx_http_gzip_module#gzip_http_version\">gzip_http_version</a>, <a href=\"ngx_http_gzip_module#gzip_proxied\">gzip_proxied</a>, and <a href=\"ngx_http_gzip_module#gzip_disable\">gzip_disable</a>. See also the <a href=\"ngx_http_gzip_module#gzip_vary\">gzip_vary</a> directive. </p>\n<div class=\"directive\" id=\"gunzip_buffers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>gunzip_buffers</strong> <code><i>number</i></code> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>gunzip_buffers 32 4k|16 8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>number</i></code> and <code><i>size</i></code> of buffers used to decompress a response. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_gunzip_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_gunzip_module.html</a>\n  </p>\n</div>\n","http/ngx_http_headers_module":"<h1>Module ngx_http_headers_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#add_header\">add_header</a></li>\n<li><a href=\"#expires\">expires</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_headers_module</code> module allows adding the “Expires” and “Cache-Control” header fields, and arbitrary fields, to a response header. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nexpires    24h;\nexpires    modified +24h;\nexpires    @24h;\nexpires    0;\nexpires    -1;\nexpires    epoch;\nexpires    $expires;\nadd_header Cache-Control private;\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"add_header\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>add_header</strong> \n<code><i>name</i></code> <code><i>value</i></code>\n[<code>always</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Adds the specified field to a response header provided that the response code equals 200, 201, 204, 206, 301, 302, 303, 304, or 307. A value can contain variables. </p>\n<p> There could be several <code>add_header</code> directives. These directives are inherited from the previous level if and only if there are no <code>add_header</code> directives defined on the current level. </p>\n<p> If the <code>always</code> parameter is specified (1.7.5), the header field will be added regardless of the response code. </p>\n<div class=\"directive\" id=\"expires\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>expires</strong> [<code>modified</code>] <code><i>time</i></code>;</code><br><code><strong>expires</strong> \n    <code>epoch</code> |\n    <code>max</code> |\n    <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>expires off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Enables or disables adding or modifying the “Expires” and “Cache-Control” response header fields provided that the response code equals 200, 201, 204, 206, 301, 302, 303, 304, or 307. A parameter can be a positive or negative <a href=\"../syntax\">time</a>. </p>\n<p> A time in the “Expires” field is computed as a sum of the current time and <code><i>time</i></code> specified in the directive. If the <code>modified</code> parameter is used (0.7.0, 0.6.32) then time is computed as a sum of the file’s modification time and <code><i>time</i></code> specified in the directive. </p>\n<p> In addition, it is possible to specify a time of the day using the “<code>@</code>” prefix (0.7.9, 0.6.34): </p> <pre data-language=\"nginx\">\nexpires @15h30m;\n</pre>\n\n<p> The <code>epoch</code> parameter corresponds to the absolute time “<code>Thu, 01 Jan 1970 00:00:01 GMT</code>”. The contents of the “Cache-Control” field depends on the sign of the specified time: </p> <ul class=\"compact\"> <li> time is negative — “Cache-Control: no-cache”. </li> <li> time is positive or zero — “Cache-Control: max-age=<code><i>t</i></code>”, where <code><i>t</i></code> is a time specified in the directive, in seconds. </li> </ul>\n\n<p> The <code>max</code> parameter sets “Expires” to the value “<code>Thu, 31 Dec 2037 23:55:55 GMT</code>”, and “Cache-Control” to 10 years. </p>\n<p> The <code>off</code> parameter disables adding or modifying the “Expires” and “Cache-Control” response header fields. </p>\n<p> The last parameter value can contain variables (1.7.9): </p> <pre data-language=\"nginx\">\nmap $sent_http_content_type $expires {\n    default         off;\n    application/pdf 42d;\n    ~image/         max;\n}\n\nexpires $expires;\n</pre>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_headers_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_headers_module.html</a>\n  </p>\n</div>\n","http/ngx_http_hls_module":"<h1>Module ngx_http_hls_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#hls\">hls</a></li>\n<li><a href=\"#hls_buffers\">hls_buffers</a></li>\n<li><a href=\"#hls_forward_args\">hls_forward_args</a></li>\n<li><a href=\"#hls_fragment\">hls_fragment</a></li>\n<li><a href=\"#hls_mp4_buffer_size\">hls_mp4_buffer_size</a></li>\n<li><a href=\"#hls_mp4_max_buffer_size\">hls_mp4_max_buffer_size</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_hls_module</code> module provides HTTP Live Streaming (HLS) server-side support for MP4 and MOV media files. Such files typically have the <code>.mp4</code>, <code>.m4v</code>, <code>.m4a</code>, <code>.mov</code>, or <code>.qt</code> filename extensions. The module supports H.264 video codec, AAC and MP3 audio codecs. </p>\n<p> For each media file, two URIs are supported: </p> <ul class=\"compact\"> <li> A playlist URI with the “<code>.m3u8</code>” filename extension. The URI can accept optional arguments: <ul class=\"compact\"> <li> “<code>start</code>” and “<code>end</code>” define playlist boundaries in seconds (1.9.0). </li> <li> “<code>offset</code>” shifts an initial playback position to the time offset in seconds (1.9.0). A positive value sets a time offset from the beginning of the playlist. A negative value sets a time offset from the end of the last fragment in the playlist. </li> <li> “<code>len</code>” defines the fragment length in seconds. </li> </ul> </li> <li> A fragment URI with the “<code>.ts</code>” filename extension. The URI can accept optional arguments: <ul class=\"compact\"> <li> “<code>start</code>” and “<code>end</code>” define fragment boundaries in seconds. </li> </ul> </li> </ul>\n\n <blockquote class=\"note\"> This module is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    hls;\n    hls_fragment            5s;\n    hls_buffers             10 10m;\n    hls_mp4_buffer_size     1m;\n    hls_mp4_max_buffer_size 5m;\n    root /var/video/;\n}\n</pre>\n<p> With this configuration, the following URIs are supported for the “<code>/var/video/test.mp4</code>” file: </p> <pre data-language=\"nginx\">\nhttp://hls.example.com/test.mp4.m3u8?offset=1.000&amp;start=1.000&amp;end=2.200\nhttp://hls.example.com/test.mp4.m3u8?len=8.000\nhttp://hls.example.com/test.mp4.ts?start=1.000&amp;end=2.200\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"hls\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>hls</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Turns on HLS streaming in the surrounding location. </p>\n<div class=\"directive\" id=\"hls_buffers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>hls_buffers</strong> <code><i>number</i></code> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>hls_buffers 8 2m;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the maximum <code><i>number</i></code> and <code><i>size</i></code> of buffers that are used for reading and writing data frames. </p>\n<div class=\"directive\" id=\"hls_forward_args\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>hls_forward_args</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>hls_forward_args off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.12. </p>\n</div>\n<p> Adds arguments from a playlist request to URIs of fragments. This may be useful for performing client authorization at the moment of requesting a fragment, or when protecting an HLS stream with the <a href=\"ngx_http_secure_link_module\">ngx_http_secure_link_module</a> module. </p>\n<p> For example, if a client requests a playlist <code>http://example.com/hls/test.mp4.m3u8?a=1&amp;b=2</code>, the arguments <code>a=1</code> and <code>b=2</code> will be added to URIs of fragments after the arguments <code>start</code> and <code>end</code>: </p> <pre data-language=\"nginx\">\n#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-TARGETDURATION:15\n#EXT-X-PLAYLIST-TYPE:VOD\n\n#EXTINF:9.333,\ntest.mp4.ts?start=0.000&amp;end=9.333&amp;a=1&amp;b=2\n#EXTINF:7.167,\ntest.mp4.ts?start=9.333&amp;end=16.500&amp;a=1&amp;b=2\n#EXTINF:5.416,\ntest.mp4.ts?start=16.500&amp;end=21.916&amp;a=1&amp;b=2\n#EXTINF:5.500,\ntest.mp4.ts?start=21.916&amp;end=27.416&amp;a=1&amp;b=2\n#EXTINF:15.167,\ntest.mp4.ts?start=27.416&amp;end=42.583&amp;a=1&amp;b=2\n#EXTINF:9.626,\ntest.mp4.ts?start=42.583&amp;end=52.209&amp;a=1&amp;b=2\n\n#EXT-X-ENDLIST\n</pre>\n\n<p> If an HLS stream is protected with the <a href=\"ngx_http_secure_link_module\">ngx_http_secure_link_module</a> module, <code>$uri</code> should not be used in the <a href=\"ngx_http_secure_link_module#secure_link_md5\">secure_link_md5</a> expression because this will cause errors when requesting the fragments. <a href=\"ngx_http_map_module#map\">Base URI</a> should be used instead of <code>$uri</code> (<code>$hls_uri</code> in the example): </p> <pre data-language=\"nginx\">\nhttp {\n    ...\n\n    map $uri $hls_uri {\n        ~^(?&lt;base_uri&gt;.*).m3u8$ $base_uri;\n        ~^(?&lt;base_uri&gt;.*).ts$   $base_uri;\n        default                 $uri;\n    }\n\n    server {\n        ...\n\n        location /hls {\n            hls;\n            hls_forward_args on;\n\n            alias /var/videos;\n\n            secure_link $arg_md5,$arg_expires;\n            secure_link_md5 \"$secure_link_expires$hls_uri$remote_addr secret\";\n\n            if ($secure_link = \"\") {\n                return 403;\n            }\n\n            if ($secure_link = \"0\") {\n                return 410;\n            }\n        }\n    }\n}\n</pre>\n\n<div class=\"directive\" id=\"hls_fragment\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>hls_fragment</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>hls_fragment 5s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines the default fragment length for playlist URIs requested without the “<code>len</code>” argument. </p>\n<div class=\"directive\" id=\"hls_mp4_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>hls_mp4_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>hls_mp4_buffer_size 512k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the initial <code><i>size</i></code> of the buffer used for processing MP4 and MOV files. </p>\n<div class=\"directive\" id=\"hls_mp4_max_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>hls_mp4_max_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>hls_mp4_max_buffer_size 10m;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> During metadata processing, a larger buffer may become necessary. Its size cannot exceed the specified <code><i>size</i></code>, or else nginx will return the server error 500 (Internal Server Error), and log the following message: </p> <pre data-language=\"nginx\">\n\"/some/movie/file.mp4\" mp4 moov atom is too large:\n12583268, you may want to increase hls_mp4_max_buffer_size\n</pre>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_hls_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_hls_module.html</a>\n  </p>\n</div>\n","http/ngx_http_image_filter_module":"<h1>Module ngx_http_image_filter_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#image_filter\">image_filter</a></li>\n<li><a href=\"#image_filter_buffer\">image_filter_buffer</a></li>\n<li><a href=\"#image_filter_interlace\">image_filter_interlace</a></li>\n<li><a href=\"#image_filter_jpeg_quality\">image_filter_jpeg_quality</a></li>\n<li><a href=\"#image_filter_sharpen\">image_filter_sharpen</a></li>\n<li><a href=\"#image_filter_transparency\">image_filter_transparency</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_image_filter_module</code> module (0.7.54+) is a filter that transforms images in JPEG, GIF, and PNG formats. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_image_filter_module</code> configuration parameter. </p> <blockquote class=\"note\"> This module utilizes the <a href=\"http://libgd.org\">libgd</a> library. It is recommended to use the latest available version of the library. </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation /img/ {\n    proxy_pass   http://backend;\n    image_filter resize 150 100;\n    image_filter rotate 90;\n    error_page   415 = /empty;\n}\n\nlocation = /empty {\n    empty_gif;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"image_filter\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>image_filter</strong> <code>off</code>;</code><br><code><strong>image_filter</strong> <code>test</code>;</code><br><code><strong>image_filter</strong> <code>size</code>;</code><br><code><strong>image_filter</strong> \n    <code>rotate</code>\n    <code>90</code> | <code>180</code> |\n    <code>270</code>;</code><br><code><strong>image_filter</strong> \n    <code>resize</code>\n    <code><i>width</i></code>\n    <code><i>height</i></code>;</code><br><code><strong>image_filter</strong> \n    <code>crop</code>\n    <code><i>width</i></code>\n    <code><i>height</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>image_filter off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the type of transformation to perform on images: </p> <dl class=\"compact\"> <dt><code>off</code></dt> <dd> turns off module processing in a surrounding location. </dd> <dt><code>test</code></dt> <dd> ensures that responses are images in either JPEG, GIF, or PNG format. Otherwise, the 415 (Unsupported Media Type) error is returned. </dd> <dt><code>size</code></dt> <dd> outputs information about images in a JSON format, e.g.: <pre data-language=\"nginx\">\n{ \"img\" : { \"width\": 100, \"height\": 100, \"type\": \"gif\" } }\n</pre> In case of an error, the output is as follows: <pre data-language=\"nginx\">\n{}\n</pre> </dd> <dt>\n<code>rotate</code> <code>90</code>|<code>180</code>|<code>270</code> </dt> <dd> rotates images counter-clockwise by the specified number of degrees. Parameter value can contain variables. This mode can be used either alone or along with the <code>resize</code> and <code>crop</code> transformations. </dd> <dt>\n<code>resize</code> <code><i>width</i></code> <code><i>height</i></code> </dt> <dd> proportionally reduces an image to the specified sizes. To reduce by only one dimension, another dimension can be specified as “<code>-</code>”. In case of an error, the server will return code 415 (Unsupported Media Type). Parameter values can contain variables. When used along with the <code>rotate</code> parameter, the rotation happens <strong>after</strong> reduction. </dd> <dt>\n<code>crop</code> <code><i>width</i></code> <code><i>height</i></code> </dt> <dd> proportionally reduces an image to the larger side size and crops extraneous edges by another side. To reduce by only one dimension, another dimension can be specified as “<code>-</code>”. In case of an error, the server will return code 415 (Unsupported Media Type). Parameter values can contain variables. When used along with the <code>rotate</code> parameter, the rotation happens <strong>before</strong> reduction. </dd> </dl>\n\n<div class=\"directive\" id=\"image_filter_buffer\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>image_filter_buffer</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>image_filter_buffer 1M;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the maximum size of the buffer used for reading images. When the size is exceeded the server returns error 415 (Unsupported Media Type). </p>\n<div class=\"directive\" id=\"image_filter_interlace\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>image_filter_interlace</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>image_filter_interlace off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.3.15. </p>\n</div>\n<p> If enabled, final images will be interlaced. For JPEG, final images will be in “progressive JPEG” format. </p>\n<div class=\"directive\" id=\"image_filter_jpeg_quality\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>image_filter_jpeg_quality</strong> <code><i>quality</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>image_filter_jpeg_quality 75;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the desired <code><i>quality</i></code> of the transformed JPEG images. Acceptable values are in the range from 1 to 100. Lesser values usually imply both lower image quality and less data to transfer. The maximum recommended value is 95. Parameter value can contain variables. </p>\n<div class=\"directive\" id=\"image_filter_sharpen\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>image_filter_sharpen</strong> <code><i>percent</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>image_filter_sharpen 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Increases sharpness of the final image. The sharpness percentage can exceed 100. The zero value disables sharpening. Parameter value can contain variables. </p>\n<div class=\"directive\" id=\"image_filter_transparency\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>image_filter_transparency</strong> <code>on</code>|<code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>image_filter_transparency on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines whether transparency should be preserved when transforming GIF images or PNG images with colors specified by a palette. The loss of transparency results in images of a better quality. The alpha channel transparency in PNG is always preserved. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_image_filter_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_image_filter_module.html</a>\n  </p>\n</div>\n","http/ngx_http_index_module":"<h1>Module ngx_http_index_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#index\">index</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_index_module</code> module processes requests ending with the slash character (‘<code>/</code>’). Such requests can also be processed by the <a href=\"ngx_http_autoindex_module\">ngx_http_autoindex_module</a> and <a href=\"ngx_http_random_index_module\">ngx_http_random_index_module</a> modules. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    index index.$geo.html index.html;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"index\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>index</strong> <code><i>file</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>index index.html;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines files that will be used as an index. The <code><i>file</i></code> name can contain variables. Files are checked in the specified order. The last element of the list can be a file with an absolute path. Example: </p> <pre data-language=\"nginx\">\nindex index.$geo.html index.0.html /index.html;\n</pre>\n\n<p> It should be noted that using an index file causes an internal redirect, and the request can be processed in a different location. For example, with the following configuration: </p> <pre data-language=\"nginx\">\nlocation = / {\n    index index.html;\n}\n\nlocation / {\n    ...\n}\n</pre>\n<p> a “<code>/</code>” request will actually be processed in the second location as “<code>/index.html</code>”. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_index_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_index_module.html</a>\n  </p>\n</div>\n","http/ngx_http_limit_conn_module":"<h1>Module ngx_http_limit_conn_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#limit_conn\">limit_conn</a></li>\n<li><a href=\"#limit_conn_log_level\">limit_conn_log_level</a></li>\n<li><a href=\"#limit_conn_status\">limit_conn_status</a></li>\n<li><a href=\"#limit_conn_zone\">limit_conn_zone</a></li>\n<li><a href=\"#limit_zone\">limit_zone</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_limit_conn_module</code> module is used to limit the number of connections per the defined key, in particular, the number of connections from a single IP address. </p>\n<p> Not all connections are counted. A connection is counted only if it has a request processed by the server and the whole request header has already been read. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nhttp {\n    limit_conn_zone $binary_remote_addr zone=addr:10m;\n\n    ...\n\n    server {\n\n        ...\n\n        location /download/ {\n            limit_conn addr 1;\n        }\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"limit_conn\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_conn</strong> <code><i>zone</i></code> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the shared memory zone and the maximum allowed number of connections for a given key value. When this limit is exceeded, the server will return the 503 (Service Temporarily Unavailable) error in reply to a request. For example, the directives </p> <pre data-language=\"nginx\">\nlimit_conn_zone $binary_remote_addr zone=addr:10m;\n\nserver {\n    location /download/ {\n        limit_conn addr 1;\n    }\n</pre>\n<p> allow only one connection per an IP address at a time. </p> <blockquote class=\"note\"> In HTTP/2 and SPDY, each concurrent request is considered a separate connection. </blockquote>\n\n<p> There could be several <code>limit_conn</code> directives. For example, the following configuration will limit the number of connections to the server per a client IP and, at the same time, the total number of connections to the virtual server: </p> <pre data-language=\"nginx\">\nlimit_conn_zone $binary_remote_addr zone=perip:10m;\nlimit_conn_zone $server_name zone=perserver:10m;\n\nserver {\n    ...\n    limit_conn perip 10;\n    limit_conn perserver 100;\n}\n</pre>\n\n<p> These directives are inherited from the previous level if and only if there are no <code>limit_conn</code> directives on the current level. </p>\n<div class=\"directive\" id=\"limit_conn_log_level\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_conn_log_level</strong> \n<code>info</code> |\n<code>notice</code> |\n<code>warn</code> |\n<code>error</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>limit_conn_log_level error;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.8.18. </p>\n</div>\n<p> Sets the desired logging level for cases when the server limits the number of connections. </p>\n<div class=\"directive\" id=\"limit_conn_status\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_conn_status</strong> <code><i>code</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>limit_conn_status 503;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.3.15. </p>\n</div>\n<p> Sets the status code to return in response to rejected requests. </p>\n<div class=\"directive\" id=\"limit_conn_zone\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_conn_zone</strong> \n    <code><i>key</i></code>\n    <code>zone</code>=<code><i>name</i></code>:<code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets parameters for a shared memory zone that will keep states for various keys. In particular, the state includes the current number of connections. The <code><i>key</i></code> can contain text, variables, and their combination. Requests with an empty key value are not accounted. </p> <blockquote class=\"note\"> Prior to version 1.7.6, a <code><i>key</i></code> could contain exactly one variable. </blockquote>\n<p> Usage example: </p> <pre data-language=\"nginx\">\nlimit_conn_zone $binary_remote_addr zone=addr:10m;\n</pre>\n<p> Here, a client IP address serves as a key. Note that instead of <code>$remote_addr</code>, the <code>$binary_remote_addr</code> variable is used here. The <code>$remote_addr</code> variable’s size can vary from 7 to 15 bytes. The stored state occupies either 32 or 64 bytes of memory on 32-bit platforms and always 64 bytes on 64-bit platforms. The <code>$binary_remote_addr</code> variable’s size is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses. The stored state always occupies 32 or 64 bytes on 32-bit platforms and 64 bytes on 64-bit platforms. One megabyte zone can keep about 32 thousand 32-byte states or about 16 thousand 64-byte states. If the zone storage is exhausted, the server will return the 503 (Service Temporarily Unavailable) error to all further requests. </p>\n<div class=\"directive\" id=\"limit_zone\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_zone</strong> \n    <code><i>name</i></code>\n    <code><i>$variable</i></code>\n    <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> This directive was made obsolete in version 1.1.8 and was removed in version 1.7.6. An equivalent <a href=\"#limit_conn_zone\">limit_conn_zone</a> directive with a changed syntax should be used instead: </p> <blockquote class=\"note\"> <code>limit_conn_zone</code> <code><i>$variable</i></code> <code>zone</code>=<code><i>name</i></code>:<code><i>size</i></code>; </blockquote>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html</a>\n  </p>\n</div>\n","http/ngx_http_limit_req_module":"<h1>Module ngx_http_limit_req_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#limit_req\">limit_req</a></li>\n<li><a href=\"#limit_req_log_level\">limit_req_log_level</a></li>\n<li><a href=\"#limit_req_status\">limit_req_status</a></li>\n<li><a href=\"#limit_req_zone\">limit_req_zone</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_limit_req_module</code> module (0.7.21) is used to limit the request processing rate per a defined key, in particular, the processing rate of requests coming from a single IP address. The limitation is done using the “leaky bucket” method. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nhttp {\n    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;\n\n    ...\n\n    server {\n\n        ...\n\n        location /search/ {\n            limit_req zone=one burst=5;\n        }\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"limit_req\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_req</strong> \n    <code>zone</code>=<code><i>name</i></code>\n    [<code>burst</code>=<code><i>number</i></code>]\n    [<code>nodelay</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the shared memory zone and the maximum burst size of requests. If the requests rate exceeds the rate configured for a zone, their processing is delayed such that requests are processed at a defined rate. Excessive requests are delayed until their number exceeds the maximum burst size in which case the request is terminated with an error 503 (Service Temporarily Unavailable). By default, the maximum burst size is equal to zero. For example, the directives </p> <pre data-language=\"nginx\">\nlimit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;\n\nserver {\n    location /search/ {\n        limit_req zone=one burst=5;\n    }\n</pre>\n<p> allow not more than 1 request per second at an average, with bursts not exceeding 5 requests. </p>\n<p> If delaying of excessive requests while requests are being limited is not desired, the parameter <code>nodelay</code> should be used: </p> <pre data-language=\"nginx\">\nlimit_req zone=one burst=5 nodelay;\n</pre>\n\n<p> There could be several <code>limit_req</code> directives. For example, the following configuration will limit the processing rate of requests coming from a single IP address and, at the same time, the request processing rate by the virtual server: </p> <pre data-language=\"nginx\">\nlimit_req_zone $binary_remote_addr zone=perip:10m rate=1r/s;\nlimit_req_zone $server_name zone=perserver:10m rate=10r/s;\n\nserver {\n    ...\n    limit_req zone=perip burst=5 nodelay;\n    limit_req zone=perserver burst=10;\n}\n</pre>\n\n<p> These directives are inherited from the previous level if and only if there are no <code>limit_req</code> directives on the current level. </p>\n<div class=\"directive\" id=\"limit_req_log_level\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_req_log_level</strong> \n<code>info</code> |\n<code>notice</code> |\n<code>warn</code> |\n<code>error</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>limit_req_log_level error;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.8.18. </p>\n</div>\n<p> Sets the desired logging level for cases when the server refuses to process requests due to rate exceeding, or delays request processing. Logging level for delays is one point less than for refusals; for example, if “<code>limit_req_log_level notice</code>” is specified, delays are logged with the <code>info</code> level. </p>\n<div class=\"directive\" id=\"limit_req_status\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_req_status</strong> <code><i>code</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>limit_req_status 503;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.3.15. </p>\n</div>\n<p> Sets the status code to return in response to rejected requests. </p>\n<div class=\"directive\" id=\"limit_req_zone\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_req_zone</strong> \n    <code><i>key</i></code>\n    <code>zone</code>=<code><i>name</i></code>:<code><i>size</i></code>\n    <code>rate</code>=<code><i>rate</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets parameters for a shared memory zone that will keep states for various keys. In particular, the state stores the current number of excessive requests. The <code><i>key</i></code> can contain text, variables, and their combination. Requests with an empty key value are not accounted. </p> <blockquote class=\"note\"> Prior to version 1.7.6, a <code><i>key</i></code> could contain exactly one variable. </blockquote>\n<p> Usage example: </p> <pre data-language=\"nginx\">\nlimit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;\n</pre>\n\n<p> Here, the states are kept in a 10 megabyte zone “one”, and an average request processing rate for this zone cannot exceed 1 request per second. </p>\n<p> A client IP address serves as a key. Note that instead of <code>$remote_addr</code>, the <code>$binary_remote_addr</code> variable is used here. The <code>$binary_remote_addr</code> variable’s size is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses. The stored state always occupies 64 bytes on 32-bit platforms and 128 bytes on 64-bit platforms. One megabyte zone can keep about 16 thousand 64-byte states or about 8 thousand 128-byte states. If the zone storage is exhausted, the server will return the 503 (Service Temporarily Unavailable) error to all further requests. </p>\n<p> The rate is specified in requests per second (r/s). If a rate of less than one request per second is desired, it is specified in request per minute (r/m). For example, half-request per second is 30r/m. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_limit_req_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_limit_req_module.html</a>\n  </p>\n</div>\n","http/ngx_http_log_module":"<h1>Module ngx_http_log_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#access_log\">access_log</a></li>\n<li><a href=\"#log_format\">log_format</a></li>\n<li><a href=\"#open_log_file_cache\">open_log_file_cache</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_log_module</code> module writes request logs in the specified format. </p>\n<p> Requests are logged in the context of a location where processing ends. It may be different from the original location, if an <a href=\"ngx_http_core_module#internal\">internal redirect</a> happens during request processing. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlog_format compression '$remote_addr - $remote_user [$time_local] '\n                       '\"$request\" $status $bytes_sent '\n                       '\"$http_referer\" \"$http_user_agent\" \"$gzip_ratio\"';\n\naccess_log /spool/logs/nginx-access.log compression buffer=32k;\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"access_log\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>access_log</strong> \n    <code><i>path</i></code>\n    [<code><i>format</i></code>\n    [<code>buffer</code>=<code><i>size</i></code>]\n    [<code>gzip[=<code><i>level</i></code>]</code>]\n    [<code>flush</code>=<code><i>time</i></code>]\n    [<code>if</code>=<code><i>condition</i></code>]];</code><br><code><strong>access_log</strong> <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>access_log logs/access.log combined;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code>, <code>limit_except</code><br> </td> </tr> </table></div>\n<p> Sets the path, format, and configuration for a buffered log write. Several logs can be specified on the same level. Logging to <a href=\"../syslog\">syslog</a> can be configured by specifying the “<code>syslog:</code>” prefix in the first parameter. The special value <code>off</code> cancels all <code>access_log</code> directives on the current level. If the format is not specified then the predefined “<code>combined</code>” format is used. </p>\n<p> If either the <code>buffer</code> or <code>gzip</code> (1.3.10, 1.2.7) parameter is used, writes to log will be buffered. </p> <blockquote class=\"note\"> The buffer size must not exceed the size of an atomic write to a disk file. For FreeBSD this size is unlimited. </blockquote>\n\n<p> When buffering is enabled, the data will be written to the file: </p> <ul class=\"compact\"> <li> if the next log line does not fit into the buffer; </li> <li> if the buffered data is older than specified by the <code>flush</code> parameter (1.3.10, 1.2.7); </li> <li> when a worker process is <a href=\"../control\">re-opening</a> log files or is shutting down. </li> </ul>\n\n<p> If the <code>gzip</code> parameter is used, then the buffered data will be compressed before writing to the file. The compression level can be set between 1 (fastest, less compression) and 9 (slowest, best compression). By default, the buffer size is equal to 64K bytes, and the compression level is set to 1. Since the data is compressed in atomic blocks, the log file can be decompressed or read by “<code>zcat</code>” at any time. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\naccess_log /path/to/log.gz combined gzip flush=5m;\n</pre>\n\n <blockquote class=\"note\"> For gzip compression to work, nginx must be built with the zlib library. </blockquote>\n\n<p> The file path can contain variables (0.7.6+), but such logs have some constraints: </p> <ul class=\"compact\"> <li> the <a href=\"../ngx_core_module#user\">user</a> whose credentials are used by worker processes should have permissions to create files in a directory with such logs; </li> <li> buffered writes do not work; </li> <li> the file is opened and closed for each log write. However, since the descriptors of frequently used files can be stored in a <a href=\"#open_log_file_cache\">cache</a>, writing to the old file can continue during the time specified by the <a href=\"#open_log_file_cache\">open_log_file_cache</a> directive’s <code>valid</code> parameter </li> <li> during each log write the existence of the request’s <a href=\"ngx_http_core_module#root\">root directory</a> is checked, and if it does not exist the log is not created. It is thus a good idea to specify both <a href=\"ngx_http_core_module#root\">root</a> and <code>access_log</code> on the same level: <pre data-language=\"nginx\">\nserver {\n    root       /spool/vhost/data/$host;\n    access_log /spool/vhost/logs/$host;\n    ...\n</pre> </li> </ul>\n\n<p> The <code>if</code> parameter (1.7.0) enables conditional logging. A request will not be logged if the <code><i>condition</i></code> evaluates to “0” or an empty string. In the following example, the requests with response codes 2xx and 3xx will not be logged: </p> <pre data-language=\"nginx\">\nmap $status $loggable {\n    ~^[23]  0;\n    default 1;\n}\n\naccess_log /path/to/access.log combined if=$loggable;\n</pre>\n\n<div class=\"directive\" id=\"log_format\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>log_format</strong> \n    <code><i>name</i></code>\n    <code><i>string</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>log_format combined \"...\";</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Specifies log format. </p>\n<p> The log format can contain common variables, and variables that exist only at the time of a log write: </p> <dl class=\"compact\"> <dt id=\"var_bytes_sent\"><code>$bytes_sent</code></dt> <dd> the number of bytes sent to a client </dd> <dt id=\"var_connection\"><code>$connection</code></dt> <dd> connection serial number </dd> <dt id=\"var_connection_requests\">\n<code>$connection_requests</code> </dt> <dd> the current number of requests made through a connection (1.1.18) </dd> <dt id=\"var_msec\"><code>$msec</code></dt> <dd> time in seconds with a milliseconds resolution at the time of the log write </dd> <dt id=\"var_pipe\"><code>$pipe</code></dt> <dd> “<code>p</code>” if request was pipelined, “<code>.</code>” otherwise </dd> <dt id=\"var_request_length\"><code>$request_length</code></dt> <dd> request length (including request line, header, and request body) </dd> <dt id=\"var_request_time\"><code>$request_time</code></dt> <dd> request processing time in seconds with a milliseconds resolution; time elapsed between the first bytes were read from the client and the log write after the last bytes were sent to the client </dd> <dt id=\"var_status\"><code>$status</code></dt> <dd> response status </dd> <dt id=\"var_time_iso8601\"><code>$time_iso8601</code></dt> <dd> local time in the ISO 8601 standard format </dd> <dt id=\"var_time_local\"><code>$time_local</code></dt> <dd> local time in the Common Log Format </dd> </dl>\n <blockquote class=\"note\"> In the modern nginx versions variables <a href=\"ngx_http_core_module#var_status\">$status</a> (1.3.2, 1.2.2), <a href=\"ngx_http_core_module#var_bytes_sent\">$bytes_sent</a> (1.3.8, 1.2.5), <a href=\"ngx_http_core_module#var_connection\">$connection</a> (1.3.8, 1.2.5), <a href=\"ngx_http_core_module#var_connection_requests\">$connection_requests</a> (1.3.8, 1.2.5), <a href=\"ngx_http_core_module#var_msec\">$msec</a> (1.3.9, 1.2.6), <a href=\"ngx_http_core_module#var_request_time\">$request_time</a> (1.3.9, 1.2.6), <a href=\"ngx_http_core_module#var_pipe\">$pipe</a> (1.3.12, 1.2.7), <a href=\"ngx_http_core_module#var_request_length\">$request_length</a> (1.3.12, 1.2.7), <a href=\"ngx_http_core_module#var_time_iso8601\">$time_iso8601</a> (1.3.12, 1.2.7), and <a href=\"ngx_http_core_module#var_time_local\">$time_local</a> (1.3.12, 1.2.7) are also available as common variables. </blockquote>\n\n<p> Header lines sent to a client have the prefix “<code>sent_http_</code>”, for example, <code>$sent_http_content_range</code>. </p>\n<p> The configuration always includes the predefined “<code>combined</code>” format: </p> <pre data-language=\"nginx\">\nlog_format combined '$remote_addr - $remote_user [$time_local] '\n                    '\"$request\" $status $body_bytes_sent '\n                    '\"$http_referer\" \"$http_user_agent\"';\n</pre>\n\n<div class=\"directive\" id=\"open_log_file_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>open_log_file_cache</strong> \n<code>max</code>=<code><i>N</i></code>\n[<code>inactive</code>=<code><i>time</i></code>]\n[<code>min_uses</code>=<code><i>N</i></code>]\n[<code>valid</code>=<code><i>time</i></code>];</code><br><code><strong>open_log_file_cache</strong> <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>open_log_file_cache off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a cache that stores the file descriptors of frequently used logs whose names contain variables. The directive has the following parameters: </p> <dl class=\"compact\"> <dt><code>max</code></dt> <dd> sets the maximum number of descriptors in a cache; if the cache becomes full the least recently used (LRU) descriptors are closed </dd> <dt><code>inactive</code></dt> <dd> sets the time after which the cached descriptor is closed if there were no access during this time; by default, 10 seconds </dd> <dt><code>min_uses</code></dt> <dd> sets the minimum number of file uses during the time defined by the <code>inactive</code> parameter to let the descriptor stay open in a cache; by default, 1 </dd> <dt><code>valid</code></dt> <dd> sets the time after which it should be checked that the file still exists with the same name; by default, 60 seconds </dd> <dt><code>off</code></dt> <dd> disables caching </dd> </dl>\n\n<p> Usage example: </p> <pre data-language=\"nginx\">\nopen_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;\n</pre>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_log_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_log_module.html</a>\n  </p>\n</div>\n","http/ngx_http_gzip_module":"<h1>Module ngx_http_gzip_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#gzip\">gzip</a></li>\n<li><a href=\"#gzip_buffers\">gzip_buffers</a></li>\n<li><a href=\"#gzip_comp_level\">gzip_comp_level</a></li>\n<li><a href=\"#gzip_disable\">gzip_disable</a></li>\n<li><a href=\"#gzip_min_length\">gzip_min_length</a></li>\n<li><a href=\"#gzip_http_version\">gzip_http_version</a></li>\n<li><a href=\"#gzip_proxied\">gzip_proxied</a></li>\n<li><a href=\"#gzip_types\">gzip_types</a></li>\n<li><a href=\"#gzip_vary\">gzip_vary</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_gzip_module</code> module is a filter that compresses responses using the “gzip” method. This often helps to reduce the size of transmitted data by half or even more. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\ngzip            on;\ngzip_min_length 1000;\ngzip_proxied    expired no-cache no-store private auth;\ngzip_types      text/plain application/xml;\n</pre>\n\n<p> The <code>$gzip_ratio</code> variable can be used to log the achieved compression ratio. </p> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"gzip\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>gzip</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>gzip off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Enables or disables gzipping of responses. </p>\n<div class=\"directive\" id=\"gzip_buffers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>gzip_buffers</strong> <code><i>number</i></code> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>gzip_buffers 32 4k|16 8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>number</i></code> and <code><i>size</i></code> of buffers used to compress a response. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. </p> <blockquote class=\"note\"> Until version 0.7.28, four 4K or 8K buffers were used by default. </blockquote>\n\n<div class=\"directive\" id=\"gzip_comp_level\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>gzip_comp_level</strong> <code><i>level</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>gzip_comp_level 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a gzip compression <code><i>level</i></code> of a response. Acceptable values are in the range from 1 to 9. </p>\n<div class=\"directive\" id=\"gzip_disable\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>gzip_disable</strong> <code><i>regex</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.6.23. </p>\n</div>\n<p> Disables gzipping of responses for requests with “User-Agent” header fields matching any of the specified regular expressions. </p>\n<p> The special mask “<code>msie6</code>” (0.7.12) corresponds to the regular expression “<code>MSIE [4-6]\\.</code>”, but works faster. Starting from version 0.8.11, “<code>MSIE 6.0; ... SV1</code>” is excluded from this mask. </p>\n<div class=\"directive\" id=\"gzip_min_length\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>gzip_min_length</strong> <code><i>length</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>gzip_min_length 20;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the minimum length of a response that will be gzipped. The length is determined only from the “Content-Length” response header field. </p>\n<div class=\"directive\" id=\"gzip_http_version\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>gzip_http_version</strong> <code>1.0</code> | <code>1.1</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>gzip_http_version 1.1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the minimum HTTP version of a request required to compress a response. </p>\n<div class=\"directive\" id=\"gzip_proxied\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>gzip_proxied</strong> \n    <code>off</code> |\n    <code>expired</code> |\n    <code>no-cache</code> |\n    <code>no-store</code> |\n    <code>private</code> |\n    <code>no_last_modified</code> |\n    <code>no_etag</code> |\n    <code>auth</code> |\n    <code>any</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>gzip_proxied off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables gzipping of responses for proxied requests depending on the request and response. The fact that the request is proxied is determined by the presence of the “Via” request header field. The directive accepts multiple parameters: </p> <dl class=\"compact\"> <dt><code>off</code></dt> <dd> disables compression for all proxied requests, ignoring other parameters; </dd> <dt><code>expired</code></dt> <dd> enables compression if a response header includes the “Expires” field with a value that disables caching; </dd> <dt><code>no-cache</code></dt> <dd> enables compression if a response header includes the “Cache-Control” field with the “<code>no-cache</code>” parameter; </dd> <dt><code>no-store</code></dt> <dd> enables compression if a response header includes the “Cache-Control” field with the “<code>no-store</code>” parameter; </dd> <dt><code>private</code></dt> <dd> enables compression if a response header includes the “Cache-Control” field with the “<code>private</code>” parameter; </dd> <dt><code>no_last_modified</code></dt> <dd> enables compression if a response header does not include the “Last-Modified” field; </dd> <dt><code>no_etag</code></dt> <dd> enables compression if a response header does not include the “ETag” field; </dd> <dt><code>auth</code></dt> <dd> enables compression if a request header includes the “Authorization” field; </dd> <dt><code>any</code></dt> <dd> enables compression for all proxied requests. </dd> </dl>\n\n<div class=\"directive\" id=\"gzip_types\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>gzip_types</strong> <code><i>mime-type</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>gzip_types text/html;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables gzipping of responses for the specified MIME types in addition to “<code>text/html</code>”. The special value “<code>*</code>” matches any MIME type (0.8.29). Responses with the “<code>text/html</code>” type are always compressed. </p>\n<div class=\"directive\" id=\"gzip_vary\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>gzip_vary</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>gzip_vary off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables inserting the “Vary: Accept-Encoding” response header field if the directives <a href=\"#gzip\">gzip</a>, <a href=\"ngx_http_gzip_static_module#gzip_static\">gzip_static</a>, or <a href=\"ngx_http_gunzip_module#gunzip\">gunzip</a> are active. </p> <h4 id=\"variables\">Embedded Variables</h4>\n <dl class=\"compact\"> <dt id=\"var_gzip_ratio\"><code>$gzip_ratio</code></dt> <dd>achieved compression ratio, computed as the ratio between the original and compressed response sizes.</dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_gzip_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_gzip_module.html</a>\n  </p>\n</div>\n","http/ngx_http_gzip_static_module":"<h1>Module ngx_http_gzip_static_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#gzip_static\">gzip_static</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_gzip_static_module</code> module allows sending precompressed files with the “<code>.gz</code>” filename extension instead of regular files. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_gzip_static_module</code> configuration parameter. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\ngzip_static  on;\ngzip_proxied expired no-cache no-store private auth;\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"gzip_static\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>gzip_static</strong> \n    <code>on</code> |\n    <code>off</code> |\n    <code>always</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>gzip_static off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables (“<code>on</code>”) or disables (“<code>off</code>”) checking the existence of precompressed files. The following directives are also taken into account: <a href=\"ngx_http_gzip_module#gzip_http_version\">gzip_http_version</a>, <a href=\"ngx_http_gzip_module#gzip_proxied\">gzip_proxied</a>, <a href=\"ngx_http_gzip_module#gzip_disable\">gzip_disable</a>, and <a href=\"ngx_http_gzip_module#gzip_vary\">gzip_vary</a>. </p>\n<p> With the “<code>always</code>” value (1.3.6), gzipped file is used in all cases, without checking if the client supports it. It is useful if there are no uncompressed files on the disk anyway or the <a href=\"ngx_http_gunzip_module\">ngx_http_gunzip_module</a> is used. </p>\n<p> The files can be compressed using the <code>gzip</code> command, or any other compatible one. It is recommended that the modification date and time of original and compressed files be the same. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html</a>\n  </p>\n</div>\n","http/ngx_http_map_module":"<h1>Module ngx_http_map_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#map\">map</a></li>\n<li><a href=\"#map_hash_bucket_size\">map_hash_bucket_size</a></li>\n<li><a href=\"#map_hash_max_size\">map_hash_max_size</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_map_module</code> module creates variables whose values depend on values of other variables. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nmap $http_host $name {\n    hostnames;\n\n    default       0;\n\n    example.com   1;\n    *.example.com 1;\n    example.org   2;\n    *.example.org 2;\n    .example.net  3;\n    wap.*         4;\n}\n\nmap $http_user_agent $mobile {\n    default       0;\n    \"~Opera Mini\" 1;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"map\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>map</strong> \n    <code><i>string</i></code>\n    <code><i>$variable</i></code> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Creates a new variable whose value depends on values of one or more of the source variables specified in the first parameter. </p> <blockquote class=\"note\"> Before version 0.9.0 only a single variable could be specified in the first parameter. </blockquote>\n\n <blockquote class=\"note\"> Since variables are evaluated only when they are used, the mere declaration even of a large number of “<code>map</code>” variables does not add any extra costs to request processing. </blockquote>\n\n<p> Parameters inside the <code>map</code> block specify a mapping between source and resulting values. </p>\n<p> Source values are specified as strings or regular expressions (0.9.6). </p>\n<p> Strings are matched ignoring the case. </p>\n<p> A regular expression should either start from the “<code>~</code>” symbol for a case-sensitive matching, or from the “<code>~*</code>” symbols (1.0.4) for case-insensitive matching. A regular expression can contain named and positional captures that can later be used in other directives along with the resulting variable. </p>\n<p> If a source value matches one of the names of special parameters described below, it should be prefixed with the “<code>\\</code>” symbol. </p>\n<p> The resulting value can contain text, variable (0.9.0), and their combination (1.11.0). </p>\n<p> The directive also supports three special parameters: </p> <dl class=\"compact\"> <dt>\n<code>default</code> <code><i>value</i></code>\n</dt> <dd> sets the resulting value if the source value matches none of the specified variants. When <code>default</code> is not specified, the default resulting value will be an empty string. </dd> <dt><code>hostnames</code></dt> <dd> indicates that source values can be hostnames with a prefix or suffix mask: <pre data-language=\"nginx\">\n*.example.com 1;\nexample.*     1;\n</pre> The following two records <pre data-language=\"nginx\">\nexample.com   1;\n*.example.com 1;\n</pre> can be combined: <pre data-language=\"nginx\">\n.example.com  1;\n</pre> This parameter should be specified before the list of values. </dd> <dt>\n<code>include</code> <code><i>file</i></code>\n</dt> <dd> includes a file with values. There can be several inclusions. </dd> </dl>\n\n<p> If the source value matches more than one of the specified variants, e.g. both a mask and a regular expression match, the first matching variant will be chosen, in the following order of priority: </p> <ol class=\"compact\"> <li> string value without a mask </li> <li> longest string value with a prefix mask, e.g. “<code>*.example.com</code>” </li> <li> longest string value with a suffix mask, e.g. “<code>mail.*</code>” </li> <li> first matching regular expression (in order of appearance in a configuration file) </li> <li> default value </li> </ol>\n\n<div class=\"directive\" id=\"map_hash_bucket_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>map_hash_bucket_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>map_hash_bucket_size 32|64|128;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets the bucket size for the <a href=\"#map\">map</a> variables hash tables. Default value depends on the processor’s cache line size. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p>\n<div class=\"directive\" id=\"map_hash_max_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>map_hash_max_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>map_hash_max_size 2048;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets the maximum <code><i>size</i></code> of the <a href=\"#map\">map</a> variables hash tables. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_map_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_map_module.html</a>\n  </p>\n</div>\n","http/ngx_http_mp4_module":"<h1>Module ngx_http_mp4_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#mp4\">mp4</a></li>\n<li><a href=\"#mp4_buffer_size\">mp4_buffer_size</a></li>\n<li><a href=\"#mp4_max_buffer_size\">mp4_max_buffer_size</a></li>\n<li><a href=\"#mp4_limit_rate\">mp4_limit_rate</a></li>\n<li><a href=\"#mp4_limit_rate_after\">mp4_limit_rate_after</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_mp4_module</code> module provides pseudo-streaming server-side support for MP4 files. Such files typically have the <code>.mp4</code>, <code>.m4v</code>, or <code>.m4a</code> filename extensions. </p>\n<p> Pseudo-streaming works in alliance with a compatible Flash player. The player sends an HTTP request to the server with the start time specified in the query string argument (named simply <code>start</code> and specified in seconds), and the server responds with the stream such that its start position corresponds to the requested time, for example: </p> <pre data-language=\"nginx\">\nhttp://example.com/elephants_dream.mp4?start=238.88\n</pre>\n<p> This allows performing a random seeking at any time, or starting playback in the middle of the timeline. </p>\n<p> To support seeking, H.264-based formats store metadata in a so-called “moov atom”. It is a part of the file that holds the index information for the whole file. </p>\n<p> To start playback, the player first needs to read metadata. This is done by sending a special request with the <code>start=0</code> argument. A lot of encoding software insert the metadata at the end of the file. This is suboptimal for pseudo-streaming, because the player has to download the entire file before starting playback. If the metadata are located at the beginning of the file, it is enough for nginx to simply start sending back the file contents. If the metadata are located at the end of the file, nginx must read the entire file and prepare a new stream so that the metadata come before the media data. This involves some CPU, memory, and disk I/O overhead, so it is a good idea to <a href=\"http://flowplayer.org/plugins/streaming/pseudostreaming.html#prepare\"> prepare an original file for pseudo-streaming</a> in advance, rather than having nginx do this on every such request. </p>\n<p> The module also supports the <code>end</code> argument of an HTTP request (1.5.13) which sets the end point of playback. The <code>end</code> argument can be specified with the <code>start</code> argument or separately: </p> <pre data-language=\"nginx\">\nhttp://example.com/elephants_dream.mp4?start=238.88&amp;end=555.55\n</pre>\n\n<p> For a matching request with a non-zero <code>start</code> or <code>end</code> argument, nginx will read the metadata from the file, prepare the stream with the requested time range, and send it to the client. This has the same overhead as described above. </p>\n<p> If a matching request does not include the <code>start</code> and <code>end</code> arguments, there is no overhead, and the file is sent simply as a static resource. Some players also support byte-range requests, and thus do not require this module. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_mp4_module</code> configuration parameter. </p> <blockquote class=\"note\"> If a third-party mp4 module was previously used, it should be disabled. </blockquote>\n\n<p> A similar pseudo-streaming support for FLV files is provided by the <a href=\"ngx_http_flv_module\">ngx_http_flv_module</a> module. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation /video/ {\n    mp4;\n    mp4_buffer_size       1m;\n    mp4_max_buffer_size   5m;\n    mp4_limit_rate        on;\n    mp4_limit_rate_after  30s;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"mp4\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>mp4</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Turns on module processing in a surrounding location. </p>\n<div class=\"directive\" id=\"mp4_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>mp4_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>mp4_buffer_size 512K;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the initial <code><i>size</i></code> of the buffer used for processing MP4 files. </p>\n<div class=\"directive\" id=\"mp4_max_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>mp4_max_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>mp4_max_buffer_size 10M;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> During metadata processing, a larger buffer may become necessary. Its size cannot exceed the specified <code><i>size</i></code>, or else nginx will return the 500 (Internal Server Error) server error, and log the following message: </p> <pre data-language=\"nginx\">\n\"/some/movie/file.mp4\" mp4 moov atom is too large:\n12583268, you may want to increase mp4_max_buffer_size\n</pre>\n\n<div class=\"directive\" id=\"mp4_limit_rate\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>mp4_limit_rate</strong> \n    <code>on</code> |\n    <code>off</code> |\n    <code><i>factor</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>mp4_limit_rate off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Limits the rate of response transmission to a client. The rate is limited based on the average bitrate of the MP4 file served. To calculate the rate, the bitrate is multiplied by the specified <code><i>factor</i></code>. The special value “<code>on</code>” corresponds to the factor of 1.1. The special value “<code>off</code>” disables rate limiting. The limit is set per a request, and so if a client simultaneously opens two connections, the overall rate will be twice as much as the specified limit. </p>\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"mp4_limit_rate_after\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>mp4_limit_rate_after</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>mp4_limit_rate_after 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the initial amount of media data (measured in playback time) after which the further transmission of the response to a client will be rate limited. </p>\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_mp4_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_mp4_module.html</a>\n  </p>\n</div>\n","http/ngx_http_random_index_module":"<h1>Module ngx_http_random_index_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#random_index\">random_index</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_random_index_module</code> module processes requests ending with the slash character (‘<code>/</code>’) and picks a random file in a directory to serve as an index file. The module is processed before the <a href=\"ngx_http_index_module\">ngx_http_index_module</a> module. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_random_index_module</code> configuration parameter. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    random_index on;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"random_index\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>random_index</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>random_index off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables module processing in a surrounding location. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_random_index_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_random_index_module.html</a>\n  </p>\n</div>\n","http/ngx_http_realip_module":"<h1>Module ngx_http_realip_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#set_real_ip_from\">set_real_ip_from</a></li>\n<li><a href=\"#real_ip_header\">real_ip_header</a></li>\n<li><a href=\"#real_ip_recursive\">real_ip_recursive</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_realip_module</code> module is used to change the client address and optional port to the one sent in the specified header fields. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_realip_module</code> configuration parameter. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nset_real_ip_from  192.168.1.0/24;\nset_real_ip_from  192.168.2.1;\nset_real_ip_from  2001:0db8::/32;\nreal_ip_header    X-Forwarded-For;\nreal_ip_recursive on;\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"set_real_ip_from\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>set_real_ip_from</strong> \n    <code><i>address</i></code> |\n    <code><i>CIDR</i></code> |\n    <code>unix:</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines trusted addresses that are known to send correct replacement addresses. If the special value <code>unix:</code> is specified, all UNIX-domain sockets will be trusted. </p> <blockquote class=\"note\"> IPv6 addresses are supported starting from versions 1.3.0 and 1.2.1. </blockquote>\n\n<div class=\"directive\" id=\"real_ip_header\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>real_ip_header</strong> \n    <code><i>field</i></code> |\n    <code>X-Real-IP</code> |\n    <code>X-Forwarded-For</code> |\n    <code>proxy_protocol</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>real_ip_header X-Real-IP;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines the request header field whose value will be used to replace the client address. </p>\n<p> The <code>X-Real-IP</code> and <code>X-Forwarded-For</code> parameters may contain an optional port (1.11.0). The address and port should be specified according to <a href=\"http://tools.ietf.org/html/3986\">RFC 3986</a>. </p>\n<p> The <code>proxy_protocol</code> parameter (1.5.12) changes the client address to the one from the PROXY protocol header. The PROXY protocol must be previously enabled by setting the <code>proxy_protocol</code> parameter in the <a href=\"ngx_http_core_module#listen\">listen</a> directive. </p>\n<div class=\"directive\" id=\"real_ip_recursive\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>real_ip_recursive</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>real_ip_recursive off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table> <p> This directive appeared in versions 1.3.0 and 1.2.1. </p> </div>\n<p> If recursive search is disabled, the original client address that matches one of the trusted addresses is replaced by the last address sent in the request header field defined by the <a href=\"#real_ip_header\">real_ip_header</a> directive. If recursive search is enabled, the original client address that matches one of the trusted addresses is replaced by the last non-trusted address sent in the request header field. </p> <h4 id=\"variables\">Embedded Variables</h4>\n <dl class=\"compact\"> <dt id=\"var_realip_remote_addr\"><code>$realip_remote_addr</code></dt> <dd> keeps the original client address (1.9.7) </dd> <dt id=\"var_realip_remote_port\"><code>$realip_remote_port</code></dt> <dd> keeps the original client port (1.11.0) </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_realip_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_realip_module.html</a>\n  </p>\n</div>\n","http/ngx_http_referer_module":"<h1>Module ngx_http_referer_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#referer_hash_bucket_size\">referer_hash_bucket_size</a></li>\n<li><a href=\"#referer_hash_max_size\">referer_hash_max_size</a></li>\n<li><a href=\"#valid_referers\">valid_referers</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_referer_module</code> module is used to block access to a site for requests with invalid values in the “Referer” header field. It should be kept in mind that fabricating a request with an appropriate “Referer” field value is quite easy, and so the intended purpose of this module is not to block such requests thoroughly but to block the mass flow of requests sent by regular browsers. It should also be taken into consideration that regular browsers may not send the “Referer” field even for valid requests. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nvalid_referers none blocked server_names\n               *.example.com example.* www.example.org/galleries/\n               ~\\.google\\.;\n\nif ($invalid_referer) {\n    return 403;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"referer_hash_bucket_size\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>referer_hash_bucket_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>referer_hash_bucket_size 64;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.0.5. </p>\n</div>\n<p> Sets the bucket size for the valid referers hash tables. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p>\n<div class=\"directive\" id=\"referer_hash_max_size\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>referer_hash_max_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>referer_hash_max_size 2048;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.0.5. </p>\n</div>\n<p> Sets the maximum <code><i>size</i></code> of the valid referers hash tables. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p>\n<div class=\"directive\" id=\"valid_referers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>valid_referers</strong> \n    <code>none</code> |\n    <code>blocked</code> |\n    <code>server_names</code> |\n    <code><i>string</i></code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Specifies the “Referer” request header field values that will cause the embedded <code>$invalid_referer</code> variable to be set to an empty string. Otherwise, the variable will be set to “<code>1</code>”. Search for a match is case-insensitive. </p>\n<p> Parameters can be as follows: </p> <dl class=\"compact\"> <dt><code>none</code></dt> <dd> the “Referer” field is missing in the request header; </dd> <dt><code>blocked</code></dt> <dd> the “Referer” field is present in the request header, but its value has been deleted by a firewall or proxy server; such values are strings that do not start with “<code>http://</code>” or “<code>https://</code>”; </dd> <dt><code>server_names</code></dt> <dd> the “Referer” request header field contains one of the server names; </dd> <dt>arbitrary string</dt> <dd> defines a server name and an optional URI prefix. A server name can have an “<code>*</code>” at the beginning or end. During the checking, the server’s port in the “Referer” field is ignored; </dd> <dt>regular expression</dt> <dd> the first symbol should be a “<code>~</code>”. It should be noted that an expression will be matched against the text starting after the “<code>http://</code>” or “<code>https://</code>”. </dd> </dl>\n\n<p> Example: </p> <pre data-language=\"nginx\">\nvalid_referers none blocked server_names\n               *.example.com example.* www.example.org/galleries/\n               ~\\.google\\.;\n</pre>\n <h4 id=\"variables\">Embedded Variables</h4>\n <dl class=\"compact\"> <dt id=\"var_invalid_referer\"><code>$invalid_referer</code></dt> <dd> Empty string, if the “Referer” request header field value is considered <a href=\"#valid_referers\">valid</a>, otherwise “<code>1</code>”. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_referer_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_referer_module.html</a>\n  </p>\n</div>\n","http/ngx_http_memcached_module":"<h1>Module ngx_http_memcached_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#memcached_bind\">memcached_bind</a></li>\n<li><a href=\"#memcached_buffer_size\">memcached_buffer_size</a></li>\n<li><a href=\"#memcached_connect_timeout\">memcached_connect_timeout</a></li>\n<li><a href=\"#memcached_force_ranges\">memcached_force_ranges</a></li>\n<li><a href=\"#memcached_gzip_flag\">memcached_gzip_flag</a></li>\n<li><a href=\"#memcached_next_upstream\">memcached_next_upstream</a></li>\n<li><a href=\"#memcached_next_upstream_timeout\">memcached_next_upstream_timeout</a></li>\n<li><a href=\"#memcached_next_upstream_tries\">memcached_next_upstream_tries</a></li>\n<li><a href=\"#memcached_pass\">memcached_pass</a></li>\n<li><a href=\"#memcached_read_timeout\">memcached_read_timeout</a></li>\n<li><a href=\"#memcached_send_timeout\">memcached_send_timeout</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_memcached_module</code> module is used to obtain responses from a memcached server. The key is set in the <code>$memcached_key</code> variable. A response should be put in memcached in advance by means external to nginx. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nserver {\n    location / {\n        set            $memcached_key \"$uri?$args\";\n        memcached_pass host:11211;\n        error_page     404 502 504 = @fallback;\n    }\n\n    location @fallback {\n        proxy_pass     http://backend;\n    }\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"memcached_bind\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>memcached_bind</strong> <code><i>address</i></code> [transparent] | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.8.22. </p>\n</div>\n<p> Makes outgoing connections to a memcached server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value <code>off</code> (1.3.12) cancels the effect of the <code>memcached_bind</code> directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port. </p>\n<p id=\"memcached_bind_transparent\"> The <code>transparent</code> parameter (1.11.0) allows outgoing connections to a memcached server originate from a non-local IP address, for example, from a real IP address of a client: </p> <pre data-language=\"nginx\">\nmemcached_bind $remote_addr transparent;\n</pre>\n<p> In order for this parameter to work, it is necessary to run nginx worker processes with the <a href=\"../ngx_core_module#user\">superuser</a> privileges and configure kernel routing table to intercept network traffic from the memcached server. </p>\n<div class=\"directive\" id=\"memcached_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>memcached_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>memcached_buffer_size 4k|8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>size</i></code> of the buffer used for reading the response received from the memcached server. The response is passed to the client synchronously, as soon as it is received. </p>\n<div class=\"directive\" id=\"memcached_connect_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>memcached_connect_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>memcached_connect_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for establishing a connection with a memcached server. It should be noted that this timeout cannot usually exceed 75 seconds. </p>\n<div class=\"directive\" id=\"memcached_force_ranges\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>memcached_force_ranges</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>memcached_force_ranges off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.7. </p>\n</div>\n<p> Enables byte-range support for both cached and uncached responses from the memcached server regardless of the “Accept-Ranges” field in these responses. </p>\n<div class=\"directive\" id=\"memcached_gzip_flag\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>memcached_gzip_flag</strong> <code><i>flag</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.3.6. </p>\n</div>\n<p> Enables the test for the <code><i>flag</i></code> presence in the memcached server response and sets the “<code>Content-Encoding</code>” response header field to “<code>gzip</code>” if the flag is set. </p>\n<div class=\"directive\" id=\"memcached_next_upstream\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>memcached_next_upstream</strong> \n    <code>error</code> |\n    <code>timeout</code> |\n    <code>invalid_response</code> |\n    <code>not_found</code> |\n    <code>off</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>memcached_next_upstream error timeout;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Specifies in which cases a request should be passed to the next server: </p> <dl class=\"compact\"> <dt><code>error</code></dt> <dd>an error occurred while establishing a connection with the server, passing a request to it, or reading the response header;</dd> <dt><code>timeout</code></dt> <dd>a timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;</dd> <dt><code>invalid_response</code></dt> <dd>a server returned an empty or invalid response;</dd> <dt><code>not_found</code></dt> <dd>a response was not found on the server;</dd> <dt><code>off</code></dt> <dd>disables passing a request to the next server.</dd> </dl>\n\n<p> One should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible. </p>\n<p> The directive also defines what is considered an <a href=\"ngx_http_upstream_module#max_fails\">unsuccessful attempt</a> of communication with a server. The cases of <code>error</code>, <code>timeout</code> and <code>invalid_header</code> are always considered unsuccessful attempts, even if they are not specified in the directive. The case of <code>not_found</code> is never considered an unsuccessful attempt. </p>\n<p> Passing a request to the next server can be limited by <a href=\"#memcached_next_upstream_tries\">the number of tries</a> and by <a href=\"#memcached_next_upstream_timeout\">time</a>. </p>\n<div class=\"directive\" id=\"memcached_next_upstream_timeout\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>memcached_next_upstream_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>memcached_next_upstream_timeout 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.5. </p>\n</div>\n<p> Limits the time during which a request can be passed to the <a href=\"#memcached_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation. </p>\n<div class=\"directive\" id=\"memcached_next_upstream_tries\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>memcached_next_upstream_tries</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>memcached_next_upstream_tries 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.5. </p>\n</div>\n<p> Limits the number of possible tries for passing a request to the <a href=\"#memcached_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation. </p>\n<div class=\"directive\" id=\"memcached_pass\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>memcached_pass</strong> <code><i>address</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Sets the memcached server address. The address can be specified as a domain name or IP address, and a port: </p> <pre data-language=\"nginx\">\nmemcached_pass localhost:11211;\n</pre>\n<p> or as a UNIX-domain socket path: </p> <pre data-language=\"nginx\">\nmemcached_pass unix:/tmp/memcached.socket;\n</pre>\n\n<p> If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a <a href=\"ngx_http_upstream_module\">server group</a>. </p>\n<div class=\"directive\" id=\"memcached_read_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>memcached_read_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>memcached_read_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for reading a response from the memcached server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the memcached server does not transmit anything within this time, the connection is closed. </p>\n<div class=\"directive\" id=\"memcached_send_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>memcached_send_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>memcached_send_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a timeout for transmitting a request to the memcached server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the memcached server does not receive anything within this time, the connection is closed. </p> <h4 id=\"variables\">Embedded Variables</h4>\n <dl class=\"compact\"> <dt id=\"var_memcached_key\"><code>$memcached_key</code></dt> <dd> Defines a key for obtaining response from a memcached server. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_memcached_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_memcached_module.html</a>\n  </p>\n</div>\n","http/ngx_http_perl_module":"<h1>Module ngx_http_perl_module</h1>\n<ul>\n<li><a href=\"#issues\">Known Issues</a></li>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#perl\">perl</a></li>\n<li><a href=\"#perl_modules\">perl_modules</a></li>\n<li><a href=\"#perl_require\">perl_require</a></li>\n<li><a href=\"#perl_set\">perl_set</a></li>\n<li><a href=\"#ssi\">Calling Perl from SSI</a></li>\n<li><a href=\"#methods\">The $r Request Object Methods</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_perl_module</code> module is used to implement location and variable handlers in Perl and insert Perl calls into SSI. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_perl_module</code> configuration parameter. </p> <blockquote class=\"note\"> This module requires <a href=\"https://www.perl.org/get.html\">Perl</a> version 5.6.1 or higher. The C compiler should be compatible with the one used to build Perl. </blockquote>\n <h4 id=\"issues\">Known Issues</h4>\n<p> The module is experimental, caveat emptor applies. </p>\n<p> In order for Perl to recompile the modified modules during reconfiguration, it should be built with the <code>-Dusemultiplicity=yes</code> or <code>-Dusethreads=yes</code> parameters. Also, to make Perl leak less memory at run time, it should be built with the <code>-Dusemymalloc=no</code> parameter. To check the values of these parameters in an already built Perl (preferred values are specified in the example), run: </p> <pre data-language=\"nginx\">\n$ perl -V:usemultiplicity -V:usemymalloc\nusemultiplicity='define';\nusemymalloc='n';\n</pre>\n\n<p> Note that after rebuilding Perl with the new <code>-Dusemultiplicity=yes</code> or <code>-Dusethreads=yes</code> parameters, all binary Perl modules will have to be rebuilt as well — they will just stop working with the new Perl. </p>\n<p> There is a possibility that the main process and then worker processes will grow in size after every reconfiguration. If the main process grows to an unacceptable size, the <a href=\"../control#upgrade\">live upgrade</a> procedure can be applied without changing the executable file. </p>\n<p> While the Perl module is performing a long-running operation, such as resolving a domain name, connecting to another server, or querying a database, other requests assigned to the current worker process will not be processed. It is thus recommended to perform only such operations that have predictable and short execution time, such as accessing the local file system. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nhttp {\n\n    perl_modules perl/lib;\n    perl_require hello.pm;\n\n    perl_set $msie6 '\n\n        sub {\n            my $r = shift;\n            my $ua = $r-&gt;header_in(\"User-Agent\");\n\n            return \"\" if $ua =~ /Opera/;\n            return \"1\" if $ua =~ / MSIE [6-9]\\.\\d+/;\n            return \"\";\n        }\n\n    ';\n\n    server {\n        location / {\n            perl hello::handler;\n        }\n    }\n</pre>\n\n<p> The <code>perl/lib/hello.pm</code> module: </p> <pre data-language=\"nginx\">\npackage hello;\n\nuse nginx;\n\nsub handler {\n    my $r = shift;\n\n    $r-&gt;send_http_header(\"text/html\");\n    return OK if $r-&gt;header_only;\n\n    $r-&gt;print(\"hello!\\n&lt;br/&gt;\");\n\n    if (-f $r-&gt;filename or -d _) {\n        $r-&gt;print($r-&gt;uri, \" exists!\\n\");\n    }\n\n    return OK;\n}\n\n1;\n__END__\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"perl\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>perl</strong> <code><i>module</i></code>::<code><i>function</i></code>|'sub { ... }';</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code>, <code>limit_except</code><br> </td> </tr> </table></div>\n<p> Sets a Perl handler for the given location. </p>\n<div class=\"directive\" id=\"perl_modules\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>perl_modules</strong> <code><i>path</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets an additional path for Perl modules. </p>\n<div class=\"directive\" id=\"perl_require\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>perl_require</strong> <code><i>module</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Defines the name of a module that will be loaded during each reconfiguration. Several <code>perl_require</code> directives can be present. </p>\n<div class=\"directive\" id=\"perl_set\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>perl_set</strong> \n    <code><i>$variable</i></code>\n    <code><i>module</i></code>::<code><i>function</i></code>|'sub { ... }';</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Installs a Perl handler for the specified variable. </p> <h4 id=\"ssi\">Calling Perl from SSI</h4>\n<p> An SSI command calling Perl has the following format: </p> <pre data-language=\"nginx\">\n&lt;!--# perl sub=\"<code><i>module</i></code>::<code><i>function</i></code>\" arg=\"<code><i>parameter1</i></code>\" arg=\"<code><i>parameter2</i></code>\" ...\n--&gt;\n</pre>\n <h4 id=\"methods\">The $r Request Object Methods</h4>\n <dl class=\"compact\"> <dt><code>$r-&gt;args</code></dt> <dd> returns request arguments. </dd> <dt><code>$r-&gt;filename</code></dt> <dd> returns a filename corresponding to the request URI. </dd> <dt> <code>$r-&gt;has_request_body(<code><i>handler</i></code>)</code> </dt> <dd> returns 0 if there is no body in a request. If there is a body, the specified handler is set for the request and 1 is returned. After reading the request body, nginx will call the specified handler. Note that the handler function should be passed by reference. Example: <pre data-language=\"nginx\">\npackage hello;\n\nuse nginx;\n\nsub handler {\n    my $r = shift;\n\n    if ($r-&gt;request_method ne \"POST\") {\n        return DECLINED;\n    }\n\n    if ($r-&gt;has_request_body(<strong>\\&amp;post</strong>)) {\n        return OK;\n    }\n\n    return HTTP_BAD_REQUEST;\n}\n\nsub <strong>post</strong> {\n    my $r = shift;\n\n    $r-&gt;send_http_header;\n\n    $r-&gt;print(\"request_body: \\\"\", $r-&gt;request_body, \"\\\"&lt;br/&gt;\");\n    $r-&gt;print(\"request_body_file: \\\"\", $r-&gt;request_body_file, \"\\\"&lt;br/&gt;\\n\");\n\n    return OK;\n}\n\n1;\n\n__END__\n</pre> </dd> <dt><code>$r-&gt;allow_ranges</code></dt> <dd> enables the use of byte ranges when sending responses. </dd> <dt><code>$r-&gt;discard_request_body</code></dt> <dd> instructs nginx to discard the request body. </dd> <dt><code>$r-&gt;header_in(<code><i>field</i></code>)</code></dt> <dd> returns the value of the specified client request header field. </dd> <dt><code>$r-&gt;header_only</code></dt> <dd> determines whether the whole response or only its header should be sent to the client. </dd> <dt> <code>$r-&gt;header_out(<code><i>field</i></code>,\n    <code><i>value</i></code>)</code> </dt> <dd> sets a value for the specified response header field. </dd> <dt> <code>$r-&gt;internal_redirect(<code><i>uri</i></code>)</code> </dt> <dd> does an internal redirect to the specified <code><i>uri</i></code>. An actual redirect happens after the Perl handler execution is completed. <blockquote class=\"note\"> Redirections to named locations are currently not supported. </blockquote> </dd> <dt><code>$r-&gt;log_error(<code><i>errno</i></code>,\n<code><i>message</i></code>)</code></dt> <dd> writes the specified <code><i>message</i></code> into the <a href=\"../ngx_core_module#error_log\">error_log</a>. If <code><i>errno</i></code> is non-zero, an error code and its description will be appended to the message. </dd> <dt><code>$r-&gt;print(<code><i>text</i></code>, ...)</code></dt> <dd> passes data to a client. </dd> <dt><code>$r-&gt;request_body</code></dt> <dd> returns the client request body if it has not been written to a temporary file. To ensure that the client request body is in memory, its size should be limited by <a href=\"ngx_http_core_module#client_max_body_size\">client_max_body_size</a>, and a sufficient buffer size should be set using <a href=\"ngx_http_core_module#client_body_buffer_size\">client_body_buffer_size</a>. </dd> <dt><code>$r-&gt;request_body_file</code></dt> <dd> returns the name of the file with the client request body. After the processing, the file should be removed. To always write a request body to a file, <a href=\"ngx_http_core_module#client_body_in_file_only\">client_body_in_file_only</a> should be enabled. </dd> <dt><code>$r-&gt;request_method</code></dt> <dd> returns the client request HTTP method. </dd> <dt><code>$r-&gt;remote_addr</code></dt> <dd> returns the client IP address. </dd> <dt><code>$r-&gt;flush</code></dt> <dd> immediately sends data to the client. </dd> <dt> <code>$r-&gt;sendfile(<code><i>name</i></code>[,\n    <code><i>offset</i></code>[,\n    <code><i>length</i></code>]])</code> </dt> <dd> sends the specified file content to the client. Optional parameters specify the initial offset and length of the data to be transmitted. The actual data transmission happens after the Perl handler has completed. </dd> <dt> <code>$r-&gt;send_http_header([<code><i>type</i></code>])</code> </dt> <dd> sends the response header to the client. The optional <code><i>type</i></code> parameter sets the value of the “Content-Type” response header field. If the value is an empty string, the “Content-Type” header field will not be sent. </dd> <dt><code>$r-&gt;status(<code><i>code</i></code>)</code></dt> <dd> sets a response code. </dd> <dt> <code>$r-&gt;sleep(<code><i>milliseconds</i></code>,\n    <code><i>handler</i></code>)</code> </dt> <dd> sets the specified handler and stops request processing for the specified time. In the meantime, nginx continues to process other requests. After the specified time has elapsed, nginx will call the installed handler. Note that the handler function should be passed by reference. In order to pass data between handlers, <code>$r-&gt;variable()</code> should be used. Example: <pre data-language=\"nginx\">\npackage hello;\n\nuse nginx;\n\nsub handler {\n    my $r = shift;\n\n    $r-&gt;discard_request_body;\n    $r-&gt;variable(\"var\", \"OK\");\n    $r-&gt;sleep(1000, <strong>\\&amp;next</strong>);\n\n    return OK;\n}\n\nsub <strong>next</strong> {\n    my $r = shift;\n\n    $r-&gt;send_http_header;\n    $r-&gt;print($r-&gt;variable(\"var\"));\n\n    return OK;\n}\n\n1;\n\n__END__\n</pre> </dd> <dt><code>$r-&gt;unescape(<code><i>text</i></code>)</code></dt> <dd> decodes a text encoded in the “%XX” form. </dd> <dt><code>$r-&gt;uri</code></dt> <dd> returns a request URI. </dd> <dt> <code>$r-&gt;variable(<code><i>name</i></code>[,\n    <code><i>value</i></code>])</code> </dt> <dd> returns or sets the value of the specified variable. Variables are local to each request. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_perl_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_perl_module.html</a>\n  </p>\n</div>\n","http/ngx_http_rewrite_module":"<h1>Module ngx_http_rewrite_module</h1>\n<ul>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#break\">break</a></li>\n<li><a href=\"#if\">if</a></li>\n<li><a href=\"#return\">return</a></li>\n<li><a href=\"#rewrite\">rewrite</a></li>\n<li><a href=\"#rewrite_log\">rewrite_log</a></li>\n<li><a href=\"#set\">set</a></li>\n<li><a href=\"#uninitialized_variable_warn\">uninitialized_variable_warn</a></li>\n<li><a href=\"#internals\">Internal Implementation</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_rewrite_module</code> module is used to change request URI using PCRE regular expressions, return redirects, and conditionally select configurations. </p>\n<p> The <code>ngx_http_rewrite_module</code> module directives are processed in the following order: </p> <ul class=\"compact\"> <li> the directives of this module specified on the <a href=\"ngx_http_core_module#server\">server</a> level are executed sequentially; </li> <li> repeatedly: <ul class=\"compact\"> <li> a <a href=\"ngx_http_core_module#location\">location</a> is searched based on a request URI; </li> <li> the directives of this module specified inside the found location are executed sequentially; </li> <li> the loop is repeated if a request URI was <a href=\"#rewrite\">rewritten</a>, but not more than <a href=\"ngx_http_core_module#internal\">10 times</a>. </li> </ul> </li> </ul>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"break\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>break</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code>, <code>location</code>, <code>if</code><br> </td> </tr> </table></div>\n<p> Stops processing the current set of <code>ngx_http_rewrite_module</code> directives. </p>\n<p> If a directive is specified inside the <a href=\"ngx_http_core_module#location\">location</a>, further processing of the request continues in this location. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nif ($slow) {\n    limit_rate 10k;\n    break;\n}\n</pre>\n\n<div class=\"directive\" id=\"if\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>if</strong> (<code><i>condition</i></code>) { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> The specified <code><i>condition</i></code> is evaluated. If true, this module directives specified inside the braces are executed, and the request is assigned the configuration inside the <code>if</code> directive. Configurations inside the <code>if</code> directives are inherited from the previous configuration level. </p>\n<p> A condition may be any of the following: </p> <ul class=\"compact\"> <li> a variable name; false if the value of a variable is an empty string or “<code>0</code>”; <blockquote class=\"note\"> Before version 1.0.1, any string starting with “<code>0</code>” was considered a false value. </blockquote> </li> <li> comparison of a variable with a string using the “<code>=</code>” and “<code>!=</code>” operators; </li> <li> matching of a variable against a regular expression using the “<code>~</code>” (for case-sensitive matching) and “<code>~*</code>” (for case-insensitive matching) operators. Regular expressions can contain captures that are made available for later reuse in the <code>$1</code>..<code>$9</code> variables. Negative operators “<code>!~</code>” and “<code>!~*</code>” are also available. If a regular expression includes the “<code>}</code>” or “<code>;</code>” characters, the whole expressions should be enclosed in single or double quotes. </li> <li> checking of a file existence with the “<code>-f</code>” and “<code>!-f</code>” operators; </li> <li> checking of a directory existence with the “<code>-d</code>” and “<code>!-d</code>” operators; </li> <li> checking of a file, directory, or symbolic link existence with the “<code>-e</code>” and “<code>!-e</code>” operators; </li> <li> checking for an executable file with the “<code>-x</code>” and “<code>!-x</code>” operators. </li> </ul>\n\n<p> Examples: </p> <pre data-language=\"nginx\">\nif ($http_user_agent ~ MSIE) {\n    rewrite ^(.*)$ /msie/$1 break;\n}\n\nif ($http_cookie ~* \"id=([^;]+)(?:;|$)\") {\n    set $id $1;\n}\n\nif ($request_method = POST) {\n    return 405;\n}\n\nif ($slow) {\n    limit_rate 10k;\n}\n\nif ($invalid_referer) {\n    return 403;\n}\n</pre>\n <blockquote class=\"note\"> A value of the <code>$invalid_referer</code> embedded variable is set by the <a href=\"ngx_http_referer_module#valid_referers\">valid_referers</a> directive. </blockquote>\n\n<div class=\"directive\" id=\"return\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>return</strong> <code><i>code</i></code> [<code><i>text</i></code>];</code><br><code><strong>return</strong> <code><i>code</i></code> <code><i>URL</i></code>;</code><br><code><strong>return</strong> <code><i>URL</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code>, <code>location</code>, <code>if</code><br> </td> </tr> </table></div>\n<p> Stops processing and returns the specified <code><i>code</i></code> to a client. The non-standard code 444 closes a connection without sending a response header. </p>\n<p> Starting from version 0.8.42, it is possible to specify either a redirect URL (for codes 301, 302, 303, and 307), or the response body <code><i>text</i></code> (for other codes). A response body text and redirect URL can contain variables. As a special case, a redirect URL can be specified as a URI local to this server, in which case the full redirect URL is formed according to the request scheme (<code>$scheme</code>) and the <a href=\"ngx_http_core_module#server_name_in_redirect\">server_name_in_redirect</a> and <a href=\"ngx_http_core_module#port_in_redirect\">port_in_redirect</a> directives. </p>\n<p> In addition, a <code><i>URL</i></code> for temporary redirect with the code 302 can be specified as the sole parameter. Such a parameter should start with the “<code>http://</code>”, “<code>https://</code>”, or “<code>$scheme</code>” string. A <code><i>URL</i></code> can contain variables. </p>\n <blockquote class=\"note\"> Only the following codes could be returned before version 0.7.51: 204, 400, 402 — 406, 408, 410, 411, 413, 416, and 500 — 504. </blockquote>\n <blockquote class=\"note\"> The code 307 was not treated as a redirect until versions 1.1.16 and 1.0.13. </blockquote>\n\n<p> See also the <a href=\"ngx_http_core_module#error_page\">error_page</a> directive. </p>\n<div class=\"directive\" id=\"rewrite\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>rewrite</strong> \n    <code><i>regex</i></code>\n    <code><i>replacement</i></code>\n    [<code><i>flag</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code>, <code>location</code>, <code>if</code><br> </td> </tr> </table></div>\n<p> If the specified regular expression matches a request URI, URI is changed as specified in the <code><i>replacement</i></code> string. The <code>rewrite</code> directives are executed sequentially in order of their appearance in the configuration file. It is possible to terminate further processing of the directives using flags. If a replacement string starts with “<code>http://</code>” or “<code>https://</code>”, the processing stops and the redirect is returned to a client. </p>\n<p> An optional <code><i>flag</i></code> parameter can be one of: </p> <dl class=\"compact\"> <dt><code>last</code></dt> <dd> stops processing the current set of <code>ngx_http_rewrite_module</code> directives and starts a search for a new location matching the changed URI; </dd> <dt><code>break</code></dt> <dd> stops processing the current set of <code>ngx_http_rewrite_module</code> directives as with the <a href=\"#break\">break</a> directive; </dd> <dt><code>redirect</code></dt> <dd> returns a temporary redirect with the 302 code; used if a replacement string does not start with “<code>http://</code>” or “<code>https://</code>”; </dd> <dt><code>permanent</code></dt> <dd> returns a permanent redirect with the 301 code. </dd> </dl>\n<p> The full redirect URL is formed according to the request scheme (<code>$scheme</code>) and the <a href=\"ngx_http_core_module#server_name_in_redirect\">server_name_in_redirect</a> and <a href=\"ngx_http_core_module#port_in_redirect\">port_in_redirect</a> directives. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nserver {\n    ...\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  last;\n    return  403;\n    ...\n}\n</pre>\n\n<p> But if these directives are put inside the “<code>/download/</code>” location, the <code>last</code> flag should be replaced by <code>break</code>, or otherwise nginx will make 10 cycles and return the 500 error: </p> <pre data-language=\"nginx\">\nlocation /download/ {\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 break;\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  break;\n    return  403;\n}\n</pre>\n\n<p> If a <code><i>replacement</i></code> string includes the new request arguments, the previous request arguments are appended after them. If this is undesired, putting a question mark at the end of a replacement string avoids having them appended, for example: </p> <pre data-language=\"nginx\">\nrewrite ^/users/(.*)$ /show?user=$1? last;\n</pre>\n\n<p> If a regular expression includes the “<code>}</code>” or “<code>;</code>” characters, the whole expressions should be enclosed in single or double quotes. </p>\n<div class=\"directive\" id=\"rewrite_log\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>rewrite_log</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>rewrite_log off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if</code><br> </td> </tr> </table></div>\n<p> Enables or disables logging of <code>ngx_http_rewrite_module</code> module directives processing results into the <a href=\"../ngx_core_module#error_log\">error_log</a> at the <code>notice</code> level. </p>\n<div class=\"directive\" id=\"set\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>set</strong> <code><i>$variable</i></code> <code><i>value</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code>, <code>location</code>, <code>if</code><br> </td> </tr> </table></div>\n<p> Sets a <code><i>value</i></code> for the specified <code><i>variable</i></code>. The <code><i>value</i></code> can contain text, variables, and their combination. </p>\n<div class=\"directive\" id=\"uninitialized_variable_warn\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uninitialized_variable_warn</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uninitialized_variable_warn on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if</code><br> </td> </tr> </table></div>\n<p> Controls whether warnings about uninitialized variables are logged. </p> <h4 id=\"internals\">Internal Implementation</h4>\n<p> The <code>ngx_http_rewrite_module</code> module directives are compiled at the configuration stage into internal instructions that are interpreted during request processing. An interpreter is a simple virtual stack machine. </p>\n<p> For example, the directives </p> <pre data-language=\"nginx\">\nlocation /download/ {\n    if ($forbidden) {\n        return 403;\n    }\n\n    if ($slow) {\n        limit_rate 10k;\n    }\n\n    rewrite ^/(download/.*)/media/(.*)\\..*$ /$1/mp3/$2.mp3 break;\n}\n</pre>\n<p> will be translated into these instructions: </p> <pre data-language=\"nginx\">\nvariable $forbidden\ncheck against zero\n    return 403\n    end of code\nvariable $slow\ncheck against zero\nmatch of regular expression\ncopy \"/\"\ncopy $1\ncopy \"/mp3/\"\ncopy $2\ncopy \".mp3\"\nend of regular expression\nend of code\n</pre>\n\n<p> Note that there are no instructions for the <a href=\"ngx_http_core_module#limit_rate\">limit_rate</a> directive above as it is unrelated to the <code>ngx_http_rewrite_module</code> module. A separate configuration is created for the <a href=\"#if\">if</a> block. If the condition holds true, a request is assigned this configuration where <code>limit_rate</code> equals to 10k. </p>\n<p> The directive </p> <pre data-language=\"nginx\">\nrewrite ^/(download/.*)/media/(.*)\\..*$ /$1/mp3/$2.mp3 break;\n</pre>\n<p> can be made smaller by one instruction if the first slash in the regular expression is put inside the parentheses: </p> <pre data-language=\"nginx\">\nrewrite ^(<strong>/</strong>download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 break;\n</pre>\n<p> The corresponding instructions will then look like this: </p> <pre data-language=\"nginx\">\nmatch of regular expression\ncopy $1\ncopy \"/mp3/\"\ncopy $2\ncopy \".mp3\"\nend of regular expression\nend of code\n</pre>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_rewrite_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_rewrite_module.html</a>\n  </p>\n</div>\n","http/ngx_http_secure_link_module":"<h1>Module ngx_http_secure_link_module</h1>\n<ul>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#secure_link\">secure_link</a></li>\n<li><a href=\"#secure_link_md5\">secure_link_md5</a></li>\n<li><a href=\"#secure_link_secret\">secure_link_secret</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_secure_link_module</code> module (0.7.18) is used to check authenticity of requested links, protect resources from unauthorized access, and limit link lifetime. </p>\n<p> The authenticity of a requested link is verified by comparing the checksum value passed in a request with the value computed for the request. If a link has a limited lifetime and the time has expired, the link is considered outdated. The status of these checks is made available in the <code>$secure_link</code> variable. </p>\n<p> The module provides two alternative operation modes. The first mode is enabled by the <a href=\"#secure_link_secret\">secure_link_secret</a> directive and is used to check authenticity of requested links as well as protect resources from unauthorized access. The second mode (0.8.50) is enabled by the <a href=\"#secure_link\">secure_link</a> and <a href=\"#secure_link_md5\">secure_link_md5</a> directives and is also used to limit lifetime of links. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_secure_link_module</code> configuration parameter. </p> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"secure_link\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>secure_link</strong> <code><i>expression</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a string with variables from which the checksum value and lifetime of a link will be extracted. </p>\n<p> Variables used in an <code><i>expression</i></code> are usually associated with a request; see <a href=\"#secure_link_md5\">example</a> below. </p>\n<p> The checksum value extracted from the string is compared with the MD5 hash value of the expression defined by the <a href=\"#secure_link_md5\">secure_link_md5</a> directive. If the checksums are different, the <code>$secure_link</code> variable is set to an empty string. If the checksums are the same, the link lifetime is checked. If the link has a limited lifetime and the time has expired, the <code>$secure_link</code> variable is set to “<code>0</code>”. Otherwise, it is set to “<code>1</code>”. The MD5 hash value passed in a request is encoded in <a href=\"http://tools.ietf.org/html/rfc4648#section-5\">base64url</a>. </p>\n<p> If a link has a limited lifetime, the expiration time is set in seconds since Epoch (Thu, 01 Jan 1970 00:00:00 GMT). The value is specified in the expression after the MD5 hash, and is separated by a comma. The expiration time passed in a request is available through the <code>$secure_link_expires</code> variable for a use in the <a href=\"#secure_link_md5\">secure_link_md5</a> directive. If the expiration time is not specified, a link has the unlimited lifetime. </p>\n<div class=\"directive\" id=\"secure_link_md5\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>secure_link_md5</strong> <code><i>expression</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines an expression for which the MD5 hash value will be computed and compared with the value passed in a request. </p>\n<p> The expression should contain the secured part of a link (resource) and a secret ingredient. If the link has a limited lifetime, the expression should also contain <code>$secure_link_expires</code>. </p>\n<p> To prevent unauthorized access, the expression may contain some information about the client, such as its address and browser version. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nlocation /s/ {\n    secure_link $arg_md5,$arg_expires;\n    secure_link_md5 \"$secure_link_expires$uri$remote_addr secret\";\n\n    if ($secure_link = \"\") {\n        return 403;\n    }\n\n    if ($secure_link = \"0\") {\n        return 410;\n    }\n\n    ...\n}\n</pre>\n<p> The “<code>/s/link?md5=_e4Nc3iduzkWRm01TBBNYw&amp;expires=2147483647</code>” link restricts access to “<code>/s/link</code>” for the client with the IP address 127.0.0.1. The link also has the limited lifetime until January 19, 2038 (GMT). </p>\n<p> On UNIX, the <code><i>md5</i></code> request argument value can be obtained as: </p> <pre data-language=\"nginx\">\necho -n '2147483647/s/link127.0.0.1 secret' | \\\n    openssl md5 -binary | openssl base64 | tr +/ -_ | tr -d =\n</pre>\n\n<div class=\"directive\" id=\"secure_link_secret\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>secure_link_secret</strong> <code><i>word</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a secret <code><i>word</i></code> used to check authenticity of requested links. </p>\n<p> The full URI of a requested link looks as follows: </p> <pre data-language=\"nginx\">\n/<code><i>prefix</i></code>/<code><i>hash</i></code>/<code><i>link</i></code>\n</pre>\n<p> where <code><i>hash</i></code> is a hexadecimal representation of the MD5 hash computed for the concatenation of the link and secret word, and <code><i>prefix</i></code> is an arbitrary string without slashes. </p>\n<p> If the requested link passes the authenticity check, the <code>$secure_link</code> variable is set to the link extracted from the request URI. Otherwise, the <code>$secure_link</code> variable is set to an empty string. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nlocation /p/ {\n    secure_link_secret secret;\n\n    if ($secure_link = \"\") {\n        return 403;\n    }\n\n    rewrite ^ /secure/$secure_link;\n}\n\nlocation /secure/ {\n    internal;\n}\n</pre>\n<p> A request of “<code>/p/5e814704a28d9bc1914ff19fa0c4a00a/link</code>” will be internally redirected to “<code>/secure/link</code>”. </p>\n<p> On UNIX, the hash value for this example can be obtained as: </p> <pre data-language=\"nginx\">\necho -n 'linksecret' | openssl md5 -hex\n</pre>\n <h4 id=\"variables\">Embedded Variables</h4>\n <dl> <dt id=\"var_secure_link\"><code>$secure_link</code></dt> <dd> The status of a link check. The specific value depends on the selected operation mode. </dd> <dt id=\"var_secure_link_expires\">\n<code>$secure_link_expires</code> </dt> <dd> The lifetime of a link passed in a request; intended to be used only in the <a href=\"#secure_link_md5\">secure_link_md5</a> directive. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_secure_link_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_secure_link_module.html</a>\n  </p>\n</div>\n","http/ngx_http_session_log_module":"<h1>Module ngx_http_session_log_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#session_log_format\">session_log_format</a></li>\n<li><a href=\"#session_log_zone\">session_log_zone</a></li>\n<li><a href=\"#session_log\">session_log</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_session_log_module</code> module enables logging sessions (that is, aggregates of multiple HTTP requests) instead of individual HTTP requests. </p>\n <blockquote class=\"note\"> This module is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n<p> The following configuration sets up a session log and maps requests to sessions according to the request client address and “User-Agent” request header field: </p> <pre data-language=\"nginx\">\n    session_log_zone /path/to/log format=combined\n                     zone=one:1m timeout=30s\n                     md5=$binary_remote_addr$http_user_agent;\n\n    location /media/ {\n        session_log one;\n    }\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"session_log_format\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>session_log_format</strong> \n    <code><i>name</i></code>\n    <code><i>string</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>session_log_format combined \"...\";</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Specifies the output format of a log. The value of the <code>$body_bytes_sent</code> variable is aggregated across all requests in a session. The values of all other variables available for logging correspond to the first request in a session. </p>\n<div class=\"directive\" id=\"session_log_zone\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>session_log_zone</strong> \n    <code><i>path</i></code>\n    <code>zone</code>=<code><i>name</i></code>:<code><i>size</i></code>\n    [<code>format</code>=<code><i>format</i></code>]\n    [<code>timeout</code>=<code><i>time</i></code>]\n    [<code>id</code>=<code><i>id</i></code>]\n    [<code>md5</code>=<code><i>md5</i></code>]\n;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets the path to a log file and configures the shared memory zone that is used to store currently active sessions. </p>\n<p> A session is considered active for as long as the time elapsed since the last request in the session does not exceed the specified <code>timeout</code> (by default, 30 seconds). Once a session is no longer active, it is written to the log. </p>\n<p> The <code>id</code> parameter identifies the session to which a request is mapped. The <code>id</code> parameter is set to the hexadecimal representation of an MD5 hash (for example, obtained from a cookie using variables). If this parameter is not specified or does not represent the valid MD5 hash, nginx computes the MD5 hash from the value of the <code>md5</code> parameter and creates a new session using this hash. Both the <code>id</code> and <code>md5</code> parameters can contain variables. </p>\n<p> The <code>format</code> parameter sets the custom session log format configured by the <a href=\"#session_log_format\">session_log_format</a> directive. If <code>format</code> is not specified, the predefined “<code>combined</code>” format is used. </p>\n<div class=\"directive\" id=\"session_log\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>session_log</strong> <code><i>name</i></code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>session_log off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables the use of the specified session log. The special value <code>off</code> cancels all <code>session_log</code> directives inherited from the previous configuration level. </p> <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_session_log_module</code> module supports two embedded variables: </p> <dl class=\"compact\"> <dt id=\"var_session_log_id\"><code>$session_log_id</code></dt> <dd> current session ID; </dd> <dt id=\"var_session_log_binary_id\">\n<code>$session_log_binary_id</code> </dt> <dd> current session ID in binary form (16 bytes). </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_session_log_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_session_log_module.html</a>\n  </p>\n</div>\n","http/ngx_http_slice_module":"<h1>Module ngx_http_slice_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#slice\">slice</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_slice_module</code> module (1.9.8) is a filter that splits a request into subrequests, each returning a certain range of response. The filter provides more effective caching of big responses. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_slice_module</code> configuration parameter. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    <strong>slice</strong>             1m;\n    proxy_cache       cache;\n    proxy_cache_key   $uri$is_args$args<strong>$slice_range</strong>;\n    proxy_set_header  Range <strong>$slice_range</strong>;\n    proxy_cache_valid 200 206 1h;\n    proxy_pass        http://localhost:8000;\n}\n</pre>\n<p> In this example, the response is split into 1-megabyte cacheable slices. </p> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"slice\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>slice</strong> <code>size</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>slice 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>size</i></code> of the slice. The zero value disables splitting responses into slices. Note that a too low value may result in excessive memory usage and a large number of file descriptors. </p>\n<p> In order for a subrequest to return the required range, the <code>$slice_range</code> variable should be <a href=\"ngx_http_proxy_module#proxy_set_header\">passed</a> to the proxied server as the <code>Range</code> request header field. If <a href=\"ngx_http_proxy_module#proxy_cache\">caching</a> is enabled, <code>$slice_range</code> should be added to the <a href=\"ngx_http_proxy_module#proxy_cache_key\">cache key</a> and caching of responses with 206 status code should be <a href=\"ngx_http_proxy_module#proxy_cache_valid\">enabled</a>. </p> <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_slice_module</code> module supports the following embedded variables: </p> <dl class=\"compact\"> <dt id=\"var_slice_range\"><code>$slice_range</code></dt> <dd> the current slice range in <a href=\"https://tools.ietf.org/html/rfc7233#section-2.1\">HTTP byte range</a> format, for example, <code>bytes=0-1048575</code>. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_slice_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_slice_module.html</a>\n  </p>\n</div>\n","http/ngx_http_spdy_module":"<h1>Module ngx_http_spdy_module</h1>\n<ul>\n<li><a href=\"#issues\">Known Issues</a></li>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#spdy_chunk_size\">spdy_chunk_size</a></li>\n<li><a href=\"#spdy_headers_comp\">spdy_headers_comp</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_spdy_module</code> module provides experimental support for <a href=\"http://www.chromium.org/spdy/spdy-protocol\">SPDY</a>. Currently, <a href=\"http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3-1\">draft 3.1</a> of SPDY protocol is implemented. </p> <blockquote class=\"note\"> Before version 1.5.10, <a href=\"http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft2\">draft 2</a> of SPDY protocol was implemented. </blockquote>\n\n<p> This module is not built by default, it should be enabled with the <code>--with-http_spdy_module</code> configuration parameter. </p>\n <blockquote class=\"note\"> This module was superseded by the <a href=\"ngx_http_v2_module\">ngx_http_v2_module</a> module in 1.9.5. </blockquote>\n <h4 id=\"issues\">Known Issues</h4>\n<p> The module is experimental, caveat emptor applies. </p>\n<p> Current implementation of SPDY protocol does not support “server push”. </p>\n<p> In versions prior to 1.5.9, responses in SPDY connections could not be <a href=\"ngx_http_core_module#limit_rate\">rate limited</a>. </p>\n<p> Buffering of a client request body cannot be disabled regardless of <a href=\"ngx_http_proxy_module#proxy_request_buffering\">proxy_request_buffering</a>, <a href=\"ngx_http_fastcgi_module#fastcgi_request_buffering\">fastcgi_request_buffering</a>, <a href=\"ngx_http_uwsgi_module#uwsgi_request_buffering\">uwsgi_request_buffering</a>, and <a href=\"ngx_http_scgi_module#scgi_request_buffering\">scgi_request_buffering</a> directive values. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nserver {\n    listen 443 ssl spdy;\n\n    ssl_certificate server.crt;\n    ssl_certificate_key server.key;\n    ...\n}\n</pre>\n <blockquote class=\"note\"> Note that in order to accept both <a href=\"ngx_http_ssl_module\">HTTPS</a> and SPDY connections simultaneously on the same port, <a href=\"http://www.openssl.org\">OpenSSL</a> library used should support “Next Protocol Negotiation” TLS extension, available since OpenSSL version 1.0.1. </blockquote>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"spdy_chunk_size\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>spdy_chunk_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>spdy_chunk_size 8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.9. </p>\n</div>\n<p> Sets the maximum size of chunks into which the response body is <a href=\"http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft2#TOC-Data-frames\"> sliced</a>. A too low value results in higher overhead. A too high value impairs prioritization due to <a href=\"http://en.wikipedia.org/wiki/Head-of-line_blocking\"> HOL blocking</a>. </p>\n<div class=\"directive\" id=\"spdy_headers_comp\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>spdy_headers_comp</strong> <code><i>level</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>spdy_headers_comp 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the header compression <code><i>level</i></code> of a response in a range from 1 (fastest, less compression) to 9 (slowest, best compression). The special value 0 turns off the header compression. </p> <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_spdy_module</code> module supports the following embedded variables: </p> <dl> <dt id=\"var_spdy\"><code>$spdy</code></dt> <dd> SPDY protocol version for SPDY connections, or an empty string otherwise; </dd> <dt id=\"var_spdy_request_priority\">\n<code>$spdy_request_priority</code> </dt> <dd> request priority for SPDY connections, or an empty string otherwise. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_spdy_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_spdy_module.html</a>\n  </p>\n</div>\n","http/ngx_http_split_clients_module":"<h1>Module ngx_http_split_clients_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#split_clients\">split_clients</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_split_clients_module</code> module creates variables suitable for A/B testing, also known as split testing. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nhttp {\n    split_clients \"${remote_addr}AAA\" $variant {\n                   0.5%               .one;\n                   2.0%               .two;\n                   *                  \"\";\n    }\n\n    server {\n        location / {\n            index index${variant}.html;\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"split_clients\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>split_clients</strong> \n    <code><i>string</i></code>\n    <code><i>$variable</i></code> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Creates a variable for A/B testing, for example: </p> <pre data-language=\"nginx\">\nsplit_clients \"${remote_addr}AAA\" $variant {\n               0.5%               .one;\n               2.0%               .two;\n               *                  \"\";\n}\n</pre>\n<p> The value of the original string is hashed using MurmurHash2. In the example given, hash values from 0 to 21474835 (0.5%) correspond to the value <code>\".one\"</code> of the <code>$variant</code> variable, hash values from 21474836 to 107374180 (2%) correspond to the value <code>\".two\"</code>, and hash values from 107374181 to 4294967295 correspond to the value <code>\"\"</code> (an empty string). </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_split_clients_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_split_clients_module.html</a>\n  </p>\n</div>\n","http/ngx_http_ssi_module":"<h1>Module ngx_http_ssi_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#ssi\">ssi</a></li>\n<li><a href=\"#ssi_last_modified\">ssi_last_modified</a></li>\n<li><a href=\"#ssi_min_file_chunk\">ssi_min_file_chunk</a></li>\n<li><a href=\"#ssi_silent_errors\">ssi_silent_errors</a></li>\n<li><a href=\"#ssi_types\">ssi_types</a></li>\n<li><a href=\"#ssi_value_length\">ssi_value_length</a></li>\n<li><a href=\"#commands\">SSI Commands</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_ssi_module</code> module is a filter that processes SSI (Server Side Includes) commands in responses passing through it. Currently, the list of supported SSI commands is incomplete. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    ssi on;\n    ...\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"ssi\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssi</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssi off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Enables or disables processing of SSI commands in responses. </p>\n<div class=\"directive\" id=\"ssi_last_modified\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssi_last_modified</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssi_last_modified off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.1. </p>\n</div>\n<p> Allows preserving the “Last-Modified” header field from the original response during SSI processing to facilitate response caching. </p>\n<p> By default, the header field is removed as contents of the response are modified during processing and may contain dynamically generated elements or parts that are changed independently of the original response. </p>\n<div class=\"directive\" id=\"ssi_min_file_chunk\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssi_min_file_chunk</strong> <code>size</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssi_min_file_chunk 1k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the minimum <code><i>size</i></code> for parts of a response stored on disk, starting from which it makes sense to send them using <a href=\"ngx_http_core_module#sendfile\">sendfile</a>. </p>\n<div class=\"directive\" id=\"ssi_silent_errors\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssi_silent_errors</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssi_silent_errors off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> If enabled, suppresses the output of the “<code>[an error occurred while processing the directive]</code>” string if an error occurred during SSI processing. </p>\n<div class=\"directive\" id=\"ssi_types\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssi_types</strong> <code><i>mime-type</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssi_types text/html;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables processing of SSI commands in responses with the specified MIME types in addition to “<code>text/html</code>”. The special value “<code>*</code>” matches any MIME type (0.8.29). </p>\n<div class=\"directive\" id=\"ssi_value_length\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssi_value_length</strong> <code><i>length</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssi_value_length 256;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the maximum length of parameter values in SSI commands. </p> <h4 id=\"commands\">SSI Commands</h4>\n<p> SSI commands have the following generic format: </p> <pre data-language=\"nginx\">\n&lt;!--# command parameter1=value1 parameter2=value2 ... --&gt;\n</pre>\n\n<p> The following commands are supported: </p> <dl class=\"compact\"> <dt><code>block</code></dt> <dd> Defines a block that can be used as a stub in the <code>include</code> command. The block can contain other SSI commands. The command has the following parameter: <dl class=\"compact\"> <dt><code>name</code></dt> <dd> block name. </dd> </dl> Example: <pre data-language=\"nginx\">\n&lt;!--# block name=\"one\" --&gt;\nstub\n&lt;!--# endblock --&gt;\n</pre> </dd> <dt><code>config</code></dt> <dd> Sets some parameters used during SSI processing, namely: <dl class=\"compact\"> <dt><code>errmsg</code></dt> <dd> a string that is output if an error occurs during SSI processing. By default, the following string is output: <pre data-language=\"nginx\">\n[an error occurred while processing the directive]\n</pre> </dd> <dt><code>timefmt</code></dt> <dd> a format string passed to the <code>strftime()</code> function used to output date and time. By default, the following format is used: <pre data-language=\"nginx\">\n\"%A, %d-%b-%Y %H:%M:%S %Z\"\n</pre> The “<code>%s</code>” format is suitable to output time in seconds. </dd> </dl> </dd> <dt><code>echo</code></dt> <dd> Outputs the value of a variable. The command has the following parameters: <dl class=\"compact\"> <dt><code>var</code></dt> <dd> the variable name. </dd> <dt><code>encoding</code></dt> <dd> the encoding method. Possible values include <code>none</code>, <code>url</code>, and <code>entity</code>. By default, <code>entity</code> is used. </dd> <dt><code>default</code></dt> <dd> a non-standard parameter that sets a string to be output if a variable is undefined. By default, “<code>none</code>” is output. The command <pre data-language=\"nginx\">\n&lt;!--# echo var=\"name\" default=\"<strong>no</strong>\" --&gt;\n</pre> replaces the following sequence of commands: <pre data-language=\"nginx\">\n&lt;!--# if expr=\"$name\" --&gt;&lt;!--# echo var=\"name\" --&gt;&lt;!--#\n       else --&gt;<strong>no</strong>&lt;!--# endif --&gt;\n</pre> </dd> </dl> </dd> <dt><code>if</code></dt> <dd> Performs a conditional inclusion. The following commands are supported: <pre data-language=\"nginx\">\n&lt;!--# if expr=\"...\" --&gt;\n...\n&lt;!--# elif expr=\"...\" --&gt;\n...\n&lt;!--# else --&gt;\n...\n&lt;!--# endif --&gt;\n</pre> Only one level of nesting is currently supported. The command has the following parameter: <dl class=\"compact\"> <dt><code>expr</code></dt> <dd> expression. An expression can be: <ul class=\"compact\"> <li> variable existence check: <pre data-language=\"nginx\">\n&lt;!--# if expr=\"$name\" --&gt;\n</pre> </li> <li> comparison of a variable with a text: <pre data-language=\"nginx\">\n&lt;!--# if expr=\"$name = <code><i>text</i></code>\" --&gt;\n&lt;!--# if expr=\"$name != <code><i>text</i></code>\" --&gt;\n</pre> </li> <li> comparison of a variable with a regular expression: <pre data-language=\"nginx\">\n&lt;!--# if expr=\"$name = /<code><i>text</i></code>/\" --&gt;\n&lt;!--# if expr=\"$name != /<code><i>text</i></code>/\" --&gt;\n</pre> </li> </ul> If a <code><i>text</i></code> contains variables, their values are substituted. A regular expression can contain positional and named captures that can later be used through variables, for example: <pre data-language=\"nginx\">\n&lt;!--# if expr=\"$name = /(.+)@(?P&lt;domain&gt;.+)/\" --&gt;\n    &lt;!--# echo var=\"1\" --&gt;\n    &lt;!--# echo var=\"domain\" --&gt;\n&lt;!--# endif --&gt;\n</pre> </dd> </dl> </dd> <dt><code>include</code></dt> <dd> Includes the result of another request into a response. The command has the following parameters: <dl class=\"compact\"> <dt><code>file</code></dt> <dd> specifies an included file, for example: <pre data-language=\"nginx\">\n&lt;!--# include file=\"footer.html\" --&gt;\n</pre> </dd> <dt><code>virtual</code></dt> <dd> specifies an included request, for example: <pre data-language=\"nginx\">\n&lt;!--# include virtual=\"/remote/body.php?argument=value\" --&gt;\n</pre> Several requests specified on one page and processed by proxied or FastCGI/uwsgi/SCGI servers run in parallel. If sequential processing is desired, the <code>wait</code> parameter should be used. </dd> <dt><code>stub</code></dt> <dd> a non-standard parameter that names the block whose content will be output if the included request results in an empty body or if an error occurs during the request processing, for example: <pre data-language=\"nginx\">\n&lt;!--# block name=\"one\" --&gt;&amp;nbsp;&lt;!--# endblock --&gt;\n&lt;!--# include virtual=\"/remote/body.php?argument=value\" stub=\"one\" --&gt;\n</pre> The replacement block content is processed in the included request context. </dd> <dt><code>wait</code></dt> <dd> a non-standard parameter that instructs to wait for a request to fully complete before continuing with SSI processing, for example: <pre data-language=\"nginx\">\n&lt;!--# include virtual=\"/remote/body.php?argument=value\" wait=\"yes\" --&gt;\n</pre> </dd> <dt><code>set</code></dt> <dd> a non-standard parameter that instructs to write a successful result of request processing to the specified variable, for example: <pre data-language=\"nginx\">\n&lt;!--# include virtual=\"/remote/body.php?argument=value\" set=\"one\" --&gt;\n</pre> It should be noted that only the results of responses obtained using the <a href=\"ngx_http_proxy_module\">ngx_http_proxy_module</a>, <a href=\"ngx_http_memcached_module\">ngx_http_memcached_module</a>, <a href=\"ngx_http_fastcgi_module\">ngx_http_fastcgi_module</a> (1.5.6), <a href=\"ngx_http_uwsgi_module\">ngx_http_uwsgi_module</a> (1.5.6), and <a href=\"ngx_http_scgi_module\">ngx_http_scgi_module</a> (1.5.6) modules can be written into variables. </dd> </dl> </dd> <dt><code>set</code></dt> <dd> Sets a value of a variable. The command has the following parameters: <dl class=\"compact\"> <dt><code>var</code></dt> <dd> the variable name. </dd> <dt><code>value</code></dt> <dd> the variable value. If an assigned value contains variables, their values are substituted. </dd> </dl> </dd> </dl>\n <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_ssi_module</code> module supports two embedded variables: </p> <dl class=\"compact\"> <dt id=\"var_date_local\"><code>$date_local</code></dt> <dd> current time in the local time zone. The format is set by the <code>config</code> command with the <code>timefmt</code> parameter. </dd> <dt id=\"var_date_gmt\"><code>$date_gmt</code></dt> <dd> current time in GMT. The format is set by the <code>config</code> command with the <code>timefmt</code> parameter. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_ssi_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_ssi_module.html</a>\n  </p>\n</div>\n","http/ngx_http_status_module":"<h1>Module ngx_http_status_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#status\">status</a></li>\n<li><a href=\"#status_format\">status_format</a></li>\n<li><a href=\"#status_zone\">status_zone</a></li>\n<li><a href=\"#data\">Data</a></li>\n<li><a href=\"#compatibility\">Compatibility</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_status_module</code> module provides access to various status information. </p>\n <blockquote class=\"note\"> This module is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nhttp {\n    upstream <strong>backend</strong> {\n        <strong>zone</strong> http_backend 64k;\n\n        server backend1.example.com weight=5;\n        server backend2.example.com;\n    }\n\n    proxy_cache_path /data/nginx/cache_backend keys_zone=<strong>cache_backend</strong>:10m;\n\n    server {\n        server_name backend.example.com;\n\n        location / {\n            proxy_pass  http://backend;\n            proxy_cache cache_backend;\n\n            health_check;\n        }\n\n        <strong>status_zone server_backend;</strong>\n    }\n\n    server {\n        listen 127.0.0.1;\n\n        location /upstream_conf {\n            upstream_conf;\n        }\n\n        location /status {\n            status;\n        }\n\n        location = /status.html {\n        }\n    }\n}\n\nstream {\n    upstream <strong>backend</strong> {\n        <strong>zone</strong> stream_backend 64k;\n\n        server backend1.example.com:12345 weight=5;\n        server backend2.example.com:12345;\n    }\n\n    server {\n        listen      127.0.0.1:12345;\n        proxy_pass  backend;\n        <strong>status_zone server_backend;</strong>\n        health_check;\n    }\n}\n</pre>\n\n<p> Examples of status requests with this configuration: </p> <pre data-language=\"nginx\">\nhttp://127.0.0.1/status\nhttp://127.0.0.1/status/nginx_version\nhttp://127.0.0.1/status/caches/cache_backend\nhttp://127.0.0.1/status/upstreams\nhttp://127.0.0.1/status/upstreams/backend\nhttp://127.0.0.1/status/upstreams/backend/peers/1\nhttp://127.0.0.1/status/upstreams/backend/peers/1/weight\nhttp://127.0.0.1/status/stream\nhttp://127.0.0.1/status/stream/upstreams\nhttp://127.0.0.1/status/stream/upstreams/backend\nhttp://127.0.0.1/status/stream/upstreams/backend/peers/1\nhttp://127.0.0.1/status/stream/upstreams/backend/peers/1/weight\n</pre>\n\n<p> The simple monitoring page is shipped with this distribution, accessible as “<code>/status.html</code>” in the default configuration. It requires the locations “<code>/status</code>” and “<code>/status.html</code>” to be configured as shown above. </p> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"status\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>status</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> The status information will be accessible from the surrounding location. Access to this location should be <a href=\"ngx_http_core_module#satisfy\">limited</a>. </p>\n<div class=\"directive\" id=\"status_format\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>status_format</strong> <code>json</code>;</code><br><code><strong>status_format</strong> <code>jsonp</code> [<code><i>callback</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>status_format json;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> By default, status information is output in the JSON format. </p>\n<p> Alternatively, data may be output as JSONP. The <code><i>callback</i></code> parameter specifies the name of a callback function. The value can contain variables. If parameter is omitted, or the computed value is an empty string, then “<code>ngx_status_jsonp_callback</code>” is used. </p>\n<div class=\"directive\" id=\"status_zone\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>status_zone</strong> <code><i>zone</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code><br> </td> </tr> </table></div>\n<p> Enables collection of virtual <a href=\"ngx_http_core_module#server\">http</a> or <a href=\"../stream/ngx_stream_core_module#server\">stream</a> (1.7.11) server status information in the specified <code><i>zone</i></code>. Several servers may share the same zone. </p> <h4 id=\"data\">Data</h4>\n<p> The following status information is provided: </p> <dl class=\"compact\"> <dt id=\"version\"><code>version</code></dt> <dd> Version of the provided data set. The current version is 6. </dd> <dt><code>nginx_version</code></dt> <dd> Version of nginx. </dd> <dt><code>address</code></dt> <dd> The address of the server that accepted status request. </dd> <dt id=\"generation\"><code>generation</code></dt> <dd> The total number of configuration <a href=\"../control#reconfiguration\">reloads</a>. </dd> <dt id=\"load_timestamp\"><code>load_timestamp</code></dt> <dd> Time of the last reload of configuration, in milliseconds since Epoch. </dd> <dt><code>timestamp</code></dt> <dd> Current time in milliseconds since Epoch. </dd> <dt id=\"pid\"><code>pid</code></dt> <dd> The ID of the worker process that handled status request. </dd> <dt id=\"processes\"><code>processes</code></dt> <dd> <dl class=\"compact\"> <dt id=\"respawned\"><code>respawned</code></dt> <dd> The total number of abnormally terminated and respawned child processes. </dd> </dl> </dd> <dt><code>connections</code></dt> <dd> <dl class=\"compact\"> <dt><code>accepted</code></dt> <dd> The total number of accepted client connections. </dd> <dt><code>dropped</code></dt> <dd> The total number of dropped client connections. </dd> <dt><code>active</code></dt> <dd> The current number of active client connections. </dd> <dt><code>idle</code></dt> <dd> The current number of idle client connections. </dd> </dl> </dd> <dt id=\"ssl\"><code>ssl</code></dt> <dd> <dl class=\"compact\"> <dt><code>handshakes</code></dt> <dd> The total number of successful SSL handshakes. </dd> <dt><code>handshakes_failed</code></dt> <dd> The total number of failed SSL handshakes. </dd> <dt><code>session_reuses</code></dt> <dd> The total number of session reuses during SSL handshake. </dd> </dl> </dd> <dt><code>requests</code></dt> <dd> <dl class=\"compact\"> <dt><code>total</code></dt> <dd> The total number of client requests. </dd> <dt><code>current</code></dt> <dd> The current number of client requests. </dd> </dl> </dd> <dt id=\"server_zones\"><code>server_zones</code></dt> <dd> For each <a href=\"#status_zone\">status_zone</a>: <dl class=\"compact\"> <dt><code>processing</code></dt> <dd> The number of client requests that are currently being processed. </dd> <dt><code>requests</code></dt> <dd> The total number of client requests received from clients. </dd> <dt><code>responses</code></dt> <dd> <dl class=\"compact\"> <dt><code>total</code></dt> <dd> The total number of responses sent to clients. </dd> <dt> <code>1xx</code>, <code>2xx</code>, <code>3xx</code>, <code>4xx</code>, <code>5xx</code> </dt> <dd> The number of responses with status codes 1xx, 2xx, 3xx, 4xx, and 5xx. </dd> </dl> </dd> <dt id=\"discarded\"><code>discarded</code></dt> <dd> The total number of requests completed without sending a response. </dd> <dt><code>received</code></dt> <dd> The total number of bytes received from clients. </dd> <dt><code>sent</code></dt> <dd> The total number of bytes sent to clients. </dd> </dl> </dd> <dt id=\"upstreams\"><code>upstreams</code></dt> <dd> For each <a href=\"ngx_http_upstream_module#zone\">dynamically configurable</a> <a href=\"ngx_http_upstream_module#upstream\">group</a>, the following data are provided: <dl class=\"compact\"> <dt id=\"peers\"><code>peers</code></dt> <dd> For each <a href=\"ngx_http_upstream_module#server\">server</a>, the following data are provided: <dl class=\"compact\"> <dt id=\"id\"><code>id</code></dt> <dd> The ID of the server. </dd> <dt><code>server</code></dt> <dd> An <a href=\"ngx_http_upstream_module#server\">address</a> of the server. </dd> <dt><code>backup</code></dt> <dd> A boolean value indicating whether the server is a <a href=\"ngx_http_upstream_module#backup\">backup</a> server. </dd> <dt><code>weight</code></dt> <dd> <a href=\"ngx_http_upstream_module#weight\">Weight</a> of the server. </dd> <dt id=\"state\"><code>state</code></dt> <dd> Current state, which may be one of “<code>up</code>”, “<code>draining</code>”, “<code>down</code>”, “<code>unavail</code>”, or “<code>unhealthy</code>”. </dd> <dt><code>active</code></dt> <dd> The current number of active connections. </dd> <dt id=\"max_conns\"><code>max_conns</code></dt> <dd> The <a href=\"ngx_http_upstream_module#max_conns\">max_conns</a> limit for the server. </dd> <dt><code>requests</code></dt> <dd> The total number of client requests forwarded to this server. </dd> <dt><code>responses</code></dt> <dd> <dl class=\"compact\"> <dt><code>total</code></dt> <dd> The total number of responses obtained from this server. </dd> <dt> <code>1xx</code>, <code>2xx</code>, <code>3xx</code>, <code>4xx</code>, <code>5xx</code> </dt> <dd> The number of responses with status codes 1xx, 2xx, 3xx, 4xx, and 5xx. </dd> </dl> </dd> <dt><code>sent</code></dt> <dd> The total number of bytes sent to this server. </dd> <dt><code>received</code></dt> <dd> The total number of bytes received from this server. </dd> <dt><code>fails</code></dt> <dd> The total number of unsuccessful attempts to communicate with the server. </dd> <dt><code>unavail</code></dt> <dd> How many times the server became unavailable for client requests (state “<code>unavail</code>”) due to the number of unsuccessful attempts reaching the <a href=\"ngx_http_upstream_module#max_fails\">max_fails</a> threshold. </dd> <dt><code>health_checks</code></dt> <dd> <dl class=\"compact\"> <dt><code>checks</code></dt> <dd> The total number of <a href=\"ngx_http_upstream_module#health_check\">health check</a> requests made. </dd> <dt><code>fails</code></dt> <dd> The number of failed health checks. </dd> <dt><code>unhealthy</code></dt> <dd> How many times the server became unhealthy (state “<code>unhealthy</code>”). </dd> <dt><code>last_passed</code></dt> <dd> Boolean indicating if the last health check request was successful and passed <a href=\"ngx_http_upstream_module#match\">tests</a>. </dd> </dl> </dd> <dt><code>downtime</code></dt> <dd> Total time the server was in the “<code>unavail</code>” and “<code>unhealthy</code>” states. </dd> <dt><code>downstart</code></dt> <dd> The time (in milliseconds since Epoch) when the server became “<code>unavail</code>” or “<code>unhealthy</code>”. </dd> <dt id=\"selected\"><code>selected</code></dt> <dd> The time (in milliseconds since Epoch) when the server was last selected to process a request (1.7.5). </dd> <dt id=\"header_time\"><code>header_time</code></dt> <dd> The average time to get the <a href=\"ngx_http_upstream_module#var_upstream_header_time\">response header</a> from the server (1.7.10). The field is available when using the <a href=\"ngx_http_upstream_module#least_time\">least_time</a> load balancing method. </dd> <dt id=\"response_time\"><code>response_time</code></dt> <dd> The average time to get the <a href=\"ngx_http_upstream_module#var_upstream_response_time\">full response</a> from the server (1.7.10). The field is available when using the <a href=\"ngx_http_upstream_module#least_time\">least_time</a> load balancing method. </dd> </dl> </dd> <dt><code>keepalive</code></dt> <dd> The current number of idle <a href=\"ngx_http_upstream_module#keepalive\">keepalive</a> connections. </dd> <dt id=\"queue\"><code>queue</code></dt> <dd> For the requests <a href=\"ngx_http_upstream_module#queue\">queue</a>, the following data are provided: <dl class=\"compact\"> <dt><code>size</code></dt> <dd> The current number of requests in the queue. </dd> <dt id=\"max_size\"><code>max_size</code></dt> <dd> The maximum number of requests that can be in the queue at the same time. </dd> <dt><code>overflows</code></dt> <dd> The total number of requests rejected due to the queue overflow. </dd> </dl> </dd> </dl> </dd> <dt id=\"caches\"><code>caches</code></dt> <dd> For each cache (configured by <a href=\"ngx_http_proxy_module#proxy_cache_path\">proxy_cache_path</a> and the likes): <dl class=\"compact\"> <dt><code>size</code></dt> <dd> The current size of the cache. </dd> <dt><code>max_size</code></dt> <dd> The limit on the maximum size of the cache specified in the configuration. </dd> <dt><code>cold</code></dt> <dd> A boolean value indicating whether the “cache loader” process is still loading data from disk into the cache. </dd> <dt> <code>hit</code>, <code>stale</code>, <code>updating</code>, <code>revalidated</code> </dt> <dd> <dl class=\"compact\"> <dt><code>responses</code></dt> <dd> The total number of responses read from the cache (hits, or stale responses due to <a href=\"ngx_http_proxy_module#proxy_cache_use_stale\">proxy_cache_use_stale</a> and the likes). </dd> <dt><code>bytes</code></dt> <dd> The total number of bytes read from the cache. </dd> </dl> </dd> <dt> <code>miss</code>, <code>expired</code>, <code>bypass</code> </dt> <dd> <dl class=\"compact\"> <dt><code>responses</code></dt> <dd> The total number of responses not taken from the cache (misses, expires, or bypasses due to <a href=\"ngx_http_proxy_module#proxy_cache_bypass\">proxy_cache_bypass</a> and the likes). </dd> <dt><code>bytes</code></dt> <dd> The total number of bytes read from the proxied server. </dd> <dt><code>responses_written</code></dt> <dd> The total number of responses written to the cache. </dd> <dt><code>bytes_written</code></dt> <dd> The total number of bytes written to the cache. </dd> </dl> </dd> </dl> </dd> <dt id=\"stream\"><code>stream</code></dt> <dd> <dl class=\"compact\"> <dt><code>server_zones</code></dt> <dd> For each <a href=\"#status_zone\">status_zone</a>: <dl class=\"compact\"> <dt><code>processing</code></dt> <dd> The number of client connections that are currently being processed. </dd> <dt><code>connections</code></dt> <dd> The total number of connections accepted from clients. </dd> <dt><code>received</code></dt> <dd> The total number of bytes received from clients. </dd> <dt><code>sent</code></dt> <dd> The total number of bytes sent to clients. </dd> </dl> </dd> <dt><code>upstreams</code></dt> <dd> For each <a href=\"../stream/ngx_stream_upstream_module#zone\">dynamically configurable</a> <a href=\"../stream/ngx_stream_upstream_module#upstream\">group</a>, the following data are provided: <dl class=\"compact\"> <dt><code>peers</code></dt> <dd> For each <a href=\"../stream/ngx_stream_upstream_module#server\">server</a> the following data are provided: <dl class=\"compact\"> <dt><code>id</code></dt> <dd> The ID of the server. </dd> <dt><code>server</code></dt> <dd> An <a href=\"../stream/ngx_stream_upstream_module#server\">address</a> of the server. </dd> <dt><code>backup</code></dt> <dd> A boolean value indicating whether the server is a <a href=\"../stream/ngx_stream_upstream_module#backup\">backup</a> server. </dd> <dt><code>weight</code></dt> <dd> <a href=\"../stream/ngx_stream_upstream_module#weight\">Weight</a> of the server. </dd> <dt><code>state</code></dt> <dd> Current state, which may be one of “<code>up</code>”, “<code>down</code>”, “<code>unavail</code>”, or “<code>unhealthy</code>”. </dd> <dt><code>active</code></dt> <dd> The current number of connections. </dd> <dt><code>connections</code></dt> <dd> The total number of client connections forwarded to this server. </dd> <dt><code>connect_time</code></dt> <dd> The average time to connect to the upstream server. The field is available when using the <a href=\"../stream/ngx_stream_upstream_module#least_time\">least_time</a> load balancing method. </dd> <dt><code>first_byte_time</code></dt> <dd> The average time to receive the first byte of data. The field is available when using the <a href=\"../stream/ngx_stream_upstream_module#least_time\">least_time</a> load balancing method. </dd> <dt><code>response_time</code></dt> <dd> The average time to receive the last byte of data. The field is available when using the <a href=\"../stream/ngx_stream_upstream_module#least_time\">least_time</a> load balancing method. </dd> <dt><code>sent</code></dt> <dd> The total number of bytes sent to this server. </dd> <dt><code>received</code></dt> <dd> The total number of bytes received from this server. </dd> <dt><code>fails</code></dt> <dd> The total number of unsuccessful attempts to communicate with the server. </dd> <dt><code>unavail</code></dt> <dd> How many times the server became unavailable for client connections (state “<code>unavail</code>”) due to the number of unsuccessful attempts reaching the <a href=\"../stream/ngx_stream_upstream_module#max_fails\">max_fails</a> threshold. </dd> <dt><code>health_checks</code></dt> <dd> <dl class=\"compact\"> <dt><code>checks</code></dt> <dd> The total number of <a href=\"../stream/ngx_stream_upstream_module#health_check\">health check</a> requests made. </dd> <dt><code>fails</code></dt> <dd> The number of failed health checks. </dd> <dt><code>unhealthy</code></dt> <dd> How many times the server became unhealthy (state “<code>unhealthy</code>”). </dd> <dt><code>last_passed</code></dt> <dd> Boolean indicating if the last health check request was successful and passed <a href=\"../stream/ngx_stream_upstream_module#match\">tests</a>. </dd> </dl> </dd> <dt><code>downtime</code></dt> <dd> Total time the server was in the “<code>unavail</code>” and “<code>unhealthy</code>” states. </dd> <dt><code>downstart</code></dt> <dd> The time (in milliseconds since Epoch) when the server became “<code>unavail</code>” or “<code>unhealthy</code>”. </dd> <dt><code>selected</code></dt> <dd> The time (in milliseconds since Epoch) when the server was last selected to process a connection. </dd> </dl> </dd> </dl> </dd> </dl> </dd> </dl>\n <h4 id=\"compatibility\">Compatibility</h4>\n <ul class=\"compact\"> <li> The <a href=\"#ssl\">ssl</a> status data were added in <a href=\"#version\">version</a> 6. </li> <li> The <a href=\"#discarded\">discarded</a> field in <a href=\"#server_zones\">server_zones</a> was added in <a href=\"#version\">version</a> 6. </li> <li> The <a href=\"#queue\">queue</a> status data were added in <a href=\"#version\">version</a> 6. </li> <li> The <a href=\"#pid\">pid</a> field was added in <a href=\"#version\">version</a> 6. </li> <li> The list of servers in <a href=\"#upstreams\">upstreams</a> was moved into <a href=\"#peers\">peers</a> in <a href=\"#version\">version</a> 6. </li> <li> The <code>keepalive</code> field of an upstream server was removed in <a href=\"#version\">version</a> 5. </li> <li> The <a href=\"#stream\">stream</a> status data were added in <a href=\"#version\">version</a> 5. </li> <li> The <a href=\"#generation\">generation</a> field was added in <a href=\"#version\">version</a> 5. </li> <li> The <a href=\"#respawned\">respawned</a> field in <a href=\"#processes\">processes</a> was added in <a href=\"#version\">version</a> 5. </li> <li> The <a href=\"#header_time\">header_time</a> and <a href=\"#response_time\">response_time</a> fields in <a href=\"#upstreams\">upstreams</a> were added in <a href=\"#version\">version</a> 5. </li> <li> The <a href=\"#selected\">selected</a> field in <a href=\"#upstreams\">upstreams</a> was added in <a href=\"#version\">version</a> 4. </li> <li> The <a href=\"#state\">draining</a> state in <a href=\"#upstreams\">upstreams</a> was added in <a href=\"#version\">version</a> 4. </li> <li> The <a href=\"#id\">id</a> and <a href=\"#max_conns\">max_conns</a> fields in <a href=\"#upstreams\">upstreams</a> were added in <a href=\"#version\">version</a> 3. </li> <li> The <code>revalidated</code> field in <a href=\"#caches\">caches</a> was added in <a href=\"#version\">version</a> 3. </li> <li> The <a href=\"#server_zones\">server_zones</a>, <a href=\"#caches\">caches</a>, and <a href=\"#load_timestamp\">load_timestamp</a> status data were added in <a href=\"#version\">version</a> 2. </li> </ul>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_status_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_status_module.html</a>\n  </p>\n</div>\n","http/ngx_http_scgi_module":"<h1>Module ngx_http_scgi_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#scgi_bind\">scgi_bind</a></li>\n<li><a href=\"#scgi_buffer_size\">scgi_buffer_size</a></li>\n<li><a href=\"#scgi_buffering\">scgi_buffering</a></li>\n<li><a href=\"#scgi_buffers\">scgi_buffers</a></li>\n<li><a href=\"#scgi_busy_buffers_size\">scgi_busy_buffers_size</a></li>\n<li><a href=\"#scgi_cache\">scgi_cache</a></li>\n<li><a href=\"#scgi_cache_bypass\">scgi_cache_bypass</a></li>\n<li><a href=\"#scgi_cache_key\">scgi_cache_key</a></li>\n<li><a href=\"#scgi_cache_lock\">scgi_cache_lock</a></li>\n<li><a href=\"#scgi_cache_lock_age\">scgi_cache_lock_age</a></li>\n<li><a href=\"#scgi_cache_lock_timeout\">scgi_cache_lock_timeout</a></li>\n<li><a href=\"#scgi_cache_methods\">scgi_cache_methods</a></li>\n<li><a href=\"#scgi_cache_min_uses\">scgi_cache_min_uses</a></li>\n<li><a href=\"#scgi_cache_path\">scgi_cache_path</a></li>\n<li><a href=\"#scgi_cache_purge\">scgi_cache_purge</a></li>\n<li><a href=\"#scgi_cache_revalidate\">scgi_cache_revalidate</a></li>\n<li><a href=\"#scgi_cache_use_stale\">scgi_cache_use_stale</a></li>\n<li><a href=\"#scgi_cache_valid\">scgi_cache_valid</a></li>\n<li><a href=\"#scgi_connect_timeout\">scgi_connect_timeout</a></li>\n<li><a href=\"#scgi_force_ranges\">scgi_force_ranges</a></li>\n<li><a href=\"#scgi_hide_header\">scgi_hide_header</a></li>\n<li><a href=\"#scgi_ignore_client_abort\">scgi_ignore_client_abort</a></li>\n<li><a href=\"#scgi_ignore_headers\">scgi_ignore_headers</a></li>\n<li><a href=\"#scgi_intercept_errors\">scgi_intercept_errors</a></li>\n<li><a href=\"#scgi_limit_rate\">scgi_limit_rate</a></li>\n<li><a href=\"#scgi_max_temp_file_size\">scgi_max_temp_file_size</a></li>\n<li><a href=\"#scgi_next_upstream\">scgi_next_upstream</a></li>\n<li><a href=\"#scgi_next_upstream_timeout\">scgi_next_upstream_timeout</a></li>\n<li><a href=\"#scgi_next_upstream_tries\">scgi_next_upstream_tries</a></li>\n<li><a href=\"#scgi_no_cache\">scgi_no_cache</a></li>\n<li><a href=\"#scgi_param\">scgi_param</a></li>\n<li><a href=\"#scgi_pass\">scgi_pass</a></li>\n<li><a href=\"#scgi_pass_header\">scgi_pass_header</a></li>\n<li><a href=\"#scgi_pass_request_body\">scgi_pass_request_body</a></li>\n<li><a href=\"#scgi_pass_request_headers\">scgi_pass_request_headers</a></li>\n<li><a href=\"#scgi_read_timeout\">scgi_read_timeout</a></li>\n<li><a href=\"#scgi_request_buffering\">scgi_request_buffering</a></li>\n<li><a href=\"#scgi_send_timeout\">scgi_send_timeout</a></li>\n<li><a href=\"#scgi_store\">scgi_store</a></li>\n<li><a href=\"#scgi_store_access\">scgi_store_access</a></li>\n<li><a href=\"#scgi_temp_file_write_size\">scgi_temp_file_write_size</a></li>\n<li><a href=\"#scgi_temp_path\">scgi_temp_path</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_scgi_module</code> module allows passing requests to an SCGI server. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    include   scgi_params;\n    scgi_pass localhost:9000;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"scgi_bind\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_bind</strong> <code><i>address</i></code> [transparent] | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Makes outgoing connections to an SCGI server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value <code>off</code> (1.3.12) cancels the effect of the <code>scgi_bind</code> directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port. </p>\n<p id=\"scgi_bind_transparent\"> The <code>transparent</code> parameter (1.11.0) allows outgoing connections to an SCGI server originate from a non-local IP address, for example, from a real IP address of a client: </p> <pre data-language=\"nginx\">\nscgi_bind $remote_addr transparent;\n</pre>\n<p> In order for this parameter to work, it is necessary to run nginx worker processes with the <a href=\"../ngx_core_module#user\">superuser</a> privileges and configure kernel routing table to intercept network traffic from the SCGI server. </p>\n<div class=\"directive\" id=\"scgi_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_buffer_size 4k|8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>size</i></code> of the buffer used for reading the first part of the response received from the SCGI server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however. </p>\n<div class=\"directive\" id=\"scgi_buffering\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_buffering</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_buffering on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables buffering of responses from the SCGI server. </p>\n<p> When buffering is enabled, nginx receives a response from the SCGI server as soon as possible, saving it into the buffers set by the <a href=\"#scgi_buffer_size\">scgi_buffer_size</a> and <a href=\"#scgi_buffers\">scgi_buffers</a> directives. If the whole response does not fit into memory, a part of it can be saved to a <a href=\"#scgi_temp_path\">temporary file</a> on the disk. Writing to temporary files is controlled by the <a href=\"#scgi_max_temp_file_size\">scgi_max_temp_file_size</a> and <a href=\"#scgi_temp_file_write_size\">scgi_temp_file_write_size</a> directives. </p>\n<p> When buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the SCGI server. The maximum size of the data that nginx can receive from the server at a time is set by the <a href=\"#scgi_buffer_size\">scgi_buffer_size</a> directive. </p>\n<p> Buffering can also be enabled or disabled by passing “<code>yes</code>” or “<code>no</code>” in the “X-Accel-Buffering” response header field. This capability can be disabled using the <a href=\"#scgi_ignore_headers\">scgi_ignore_headers</a> directive. </p>\n<div class=\"directive\" id=\"scgi_buffers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_buffers</strong> <code><i>number</i></code> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_buffers 8 4k|8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>number</i></code> and <code><i>size</i></code> of the buffers used for reading a response from the SCGI server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. </p>\n<div class=\"directive\" id=\"scgi_busy_buffers_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_busy_buffers_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_busy_buffers_size 8k|16k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> When <a href=\"#scgi_buffering\">buffering</a> of responses from the SCGI server is enabled, limits the total <code><i>size</i></code> of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, <code><i>size</i></code> is limited by the size of two buffers set by the <a href=\"#scgi_buffer_size\">scgi_buffer_size</a> and <a href=\"#scgi_buffers\">scgi_buffers</a> directives. </p>\n<div class=\"directive\" id=\"scgi_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache</strong> <code><i>zone</i></code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_cache off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The <code>off</code> parameter disables caching inherited from the previous configuration level. </p>\n<div class=\"directive\" id=\"scgi_cache_bypass\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache_bypass</strong> <code><i>string</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache: </p> <pre data-language=\"nginx\">\nscgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;\nscgi_cache_bypass $http_pragma    $http_authorization;\n</pre>\n<p> Can be used along with the <a href=\"#scgi_no_cache\">scgi_no_cache</a> directive. </p>\n<div class=\"directive\" id=\"scgi_cache_key\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache_key</strong> <code><i>string</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a key for caching, for example </p> <pre data-language=\"nginx\">\nscgi_cache_key localhost:9000$request_uri;\n</pre>\n\n<div class=\"directive\" id=\"scgi_cache_lock\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache_lock</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_cache_lock off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.12. </p>\n</div>\n<p> When enabled, only one request at a time will be allowed to populate a new cache element identified according to the <a href=\"#scgi_cache_key\">scgi_cache_key</a> directive by passing a request to an SCGI server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the <a href=\"#scgi_cache_lock_timeout\">scgi_cache_lock_timeout</a> directive. </p>\n<div class=\"directive\" id=\"scgi_cache_lock_age\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache_lock_age</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_cache_lock_age 5s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.8. </p>\n</div>\n<p> If the last request passed to the SCGI server for populating a new cache element has not completed for the specified <code><i>time</i></code>, one more request may be passed to the SCGI server. </p>\n<div class=\"directive\" id=\"scgi_cache_lock_timeout\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache_lock_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_cache_lock_timeout 5s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.12. </p>\n</div>\n<p> Sets a timeout for <a href=\"#scgi_cache_lock\">scgi_cache_lock</a>. When the <code><i>time</i></code> expires, the request will be passed to the SCGI server, however, the response will not be cached. </p> <blockquote class=\"note\"> Before 1.7.8, the response could be cached. </blockquote>\n\n<div class=\"directive\" id=\"scgi_cache_methods\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache_methods</strong> \n    <code>GET</code> |\n    <code>HEAD</code> |\n    <code>POST</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_cache_methods GET HEAD;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> If the client request method is listed in this directive then the response will be cached. “<code>GET</code>” and “<code>HEAD</code>” methods are always added to the list, though it is recommended to specify them explicitly. See also the <a href=\"#scgi_no_cache\">scgi_no_cache</a> directive. </p>\n<div class=\"directive\" id=\"scgi_cache_min_uses\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache_min_uses</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_cache_min_uses 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>number</i></code> of requests after which the response will be cached. </p>\n<div class=\"directive\" id=\"scgi_cache_path\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache_path</strong> \n    <code><i>path</i></code>\n    [<code>levels</code>=<code><i>levels</i></code>]\n    [<code>use_temp_path</code>=<code>on</code>|<code>off</code>]\n    <code>keys_zone</code>=<code><i>name</i></code>:<code><i>size</i></code>\n    [<code>inactive</code>=<code><i>time</i></code>]\n    [<code>max_size</code>=<code><i>size</i></code>]\n    [<code>loader_files</code>=<code><i>number</i></code>]\n    [<code>loader_sleep</code>=<code><i>time</i></code>]\n    [<code>loader_threshold</code>=<code><i>time</i></code>]\n    [<code>purger</code>=<code>on</code>|<code>off</code>]\n    [<code>purger_files</code>=<code><i>number</i></code>]\n    [<code>purger_sleep</code>=<code><i>time</i></code>]\n    [<code>purger_threshold</code>=<code><i>time</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets the path and other parameters of a cache. Cache data are stored in files. The file name in a cache is a result of applying the MD5 function to the <a href=\"#scgi_cache_key\">cache key</a>. The <code>levels</code> parameter defines hierarchy levels of a cache. For example, in the following configuration </p> <pre data-language=\"nginx\">\nscgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;\n</pre>\n<p> file names in a cache will look like this: </p> <pre data-language=\"nginx\">\n/data/nginx/cache/<strong>c</strong>/<strong>29</strong>/b7f54b2df7773722d382f4809d650<strong>29c</strong>\n</pre>\n\n<p> A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the <code>use_temp_path</code> parameter (1.7.10). If this parameter is omitted or set to the value <code>on</code>, the directory set by the <a href=\"#scgi_temp_path\">scgi_temp_path</a> directive for the given location will be used. If the value is set to <code>off</code>, temporary files will be put directly in the cache directory. </p>\n<p> In addition, all active keys and information about data are stored in a shared memory zone, whose <code><i>name</i></code> and <code><i>size</i></code> are configured by the <code>keys_zone</code> parameter. One megabyte zone can store about 8 thousand keys. </p>\n<p> Cached data that are not accessed during the time specified by the <code>inactive</code> parameter get removed from the cache regardless of their freshness. By default, <code>inactive</code> is set to 10 minutes. </p>\n<p> The special “cache manager” process monitors the maximum cache size set by the <code>max_size</code> parameter. When this size is exceeded, it removes the least recently used data. </p>\n<p> A minute after the start the special “cache loader” process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is done in iterations. During one iteration no more than <code>loader_files</code> items are loaded (by default, 100). Besides, the duration of one iteration is limited by the <code>loader_threshold</code> parameter (by default, 200 milliseconds). Between iterations, a pause configured by the <code>loader_sleep</code> parameter (by default, 50 milliseconds) is made. </p>\n<p> Additionally, the following parameters are available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>: </p>\n <dl class=\"compact\"> <dt id=\"purger\"> <code>purger</code>=<code>on</code>|<code>off</code> </dt> <dd> Instructs whether cache entries that match a <a href=\"#scgi_cache_purge\">wildcard key</a> will be removed from the disk by the cache purger (1.7.12). Setting the parameter to <code>on</code> (default is <code>off</code>) will activate the “cache purger” process that permanently iterates through all cache entries and deletes the entries that match the wildcard key. </dd> <dt id=\"purger_files\"> <code>purger_files</code>=<code><i>number</i></code> </dt> <dd> Sets the number of items that will be scanned during one iteration (1.7.12). By default, <code>purger_files</code> is set to 10. </dd> <dt id=\"purger_threshold\"> <code>purger_threshold</code>=<code><i>number</i></code> </dt> <dd> Sets the duration of one iteration (1.7.12). By default, <code>purger_threshold</code> is set to 50 milliseconds. </dd> <dt id=\"purger_sleep\"> <code>purger_sleep</code>=<code><i>number</i></code> </dt> <dd> Sets a pause between iterations (1.7.12). By default, <code>purger_sleep</code> is set to 50 milliseconds. </dd> </dl>\n\n<div class=\"directive\" id=\"scgi_cache_purge\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache_purge</strong> string ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.7. </p>\n</div>\n<p> Defines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding <a href=\"#scgi_cache_key\">cache key</a> is removed. The result of successful operation is indicated by returning the 204 (No Content) response. </p>\n<p> If the <a href=\"#scgi_cache_key\">cache key</a> of a purge request ends with an asterisk (“<code>*</code>”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either <a href=\"#scgi_cache_path\">inactivity</a>, or processed by the <a href=\"#purger\">cache purger</a> (1.7.12), or a client attempts to access them. </p>\n<p> Example configuration: </p> <pre data-language=\"nginx\">\nscgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;\n\nmap $request_method $purge_method {\n    PURGE   1;\n    default 0;\n}\n\nserver {\n    ...\n    location / {\n        scgi_pass        backend;\n        scgi_cache       cache_zone;\n        scgi_cache_key   $uri;\n        scgi_cache_purge $purge_method;\n    }\n}\n</pre>\n <blockquote class=\"note\"> This functionality is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"scgi_cache_revalidate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache_revalidate</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_cache_revalidate off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.7. </p>\n</div>\n<p> Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields. </p>\n<div class=\"directive\" id=\"scgi_cache_use_stale\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache_use_stale</strong> \n    <code>error</code> |\n    <code>timeout</code> |\n    <code>invalid_header</code> |\n    <code>updating</code> |\n    <code>http_500</code> |\n    <code>http_503</code> |\n    <code>http_403</code> |\n    <code>http_404</code> |\n    <code>off</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_cache_use_stale off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines in which cases a stale cached response can be used when an error occurs during communication with the SCGI server. The directive’s parameters match the parameters of the <a href=\"#scgi_next_upstream\">scgi_next_upstream</a> directive. </p>\n<p> The <code>error</code> parameter also permits using a stale cached response if an SCGI server to process a request cannot be selected. </p>\n<p> Additionally, the <code>updating</code> parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to SCGI servers when updating cached data. </p>\n<p> To minimize the number of accesses to SCGI servers when populating a new cache element, the <a href=\"#scgi_cache_lock\">scgi_cache_lock</a> directive can be used. </p>\n<div class=\"directive\" id=\"scgi_cache_valid\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_cache_valid</strong> [<code><i>code</i></code> ...] <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets caching time for different response codes. For example, the following directives </p> <pre data-language=\"nginx\">\nscgi_cache_valid 200 302 10m;\nscgi_cache_valid 404      1m;\n</pre>\n<p> set 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404. </p>\n<p> If only caching <code><i>time</i></code> is specified </p> <pre data-language=\"nginx\">\nscgi_cache_valid 5m;\n</pre>\n<p> then only 200, 301, and 302 responses are cached. </p>\n<p> In addition, the <code>any</code> parameter can be specified to cache any responses: </p> <pre data-language=\"nginx\">\nscgi_cache_valid 200 302 10m;\nscgi_cache_valid 301      1h;\nscgi_cache_valid any      1m;\n</pre>\n\n<p> Parameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive. </p> <ul> <li> The “X-Accel-Expires” header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the <code>@</code> prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached. </li> <li> If the header does not include the “X-Accel-Expires” field, parameters of caching may be set in the header fields “Expires” or “Cache-Control”. </li> <li> If the header includes the “Set-Cookie” field, such a response will not be cached. </li> <li> If the header includes the “Vary” field with the special value “<code>*</code>”, such a response will not be cached (1.7.7). If the header includes the “Vary” field with another value, such a response will be cached taking into account the corresponding request header fields (1.7.7). </li> </ul>\n<p> Processing of one or more of these response header fields can be disabled using the <a href=\"#scgi_ignore_headers\">scgi_ignore_headers</a> directive. </p>\n<div class=\"directive\" id=\"scgi_connect_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_connect_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_connect_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for establishing a connection with an SCGI server. It should be noted that this timeout cannot usually exceed 75 seconds. </p>\n<div class=\"directive\" id=\"scgi_force_ranges\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_force_ranges</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_force_ranges off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.7. </p>\n</div>\n<p> Enables byte-range support for both cached and uncached responses from the SCGI server regardless of the “Accept-Ranges” field in these responses. </p>\n<div class=\"directive\" id=\"scgi_hide_header\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_hide_header</strong> <code><i>field</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of an SCGI server to a client. The <code>scgi_hide_header</code> directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the <a href=\"#scgi_pass_header\">scgi_pass_header</a> directive can be used. </p>\n<div class=\"directive\" id=\"scgi_ignore_client_abort\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_ignore_client_abort</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_ignore_client_abort off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines whether the connection with an SCGI server should be closed when a client closes the connection without waiting for a response. </p>\n<div class=\"directive\" id=\"scgi_ignore_headers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_ignore_headers</strong> <code><i>field</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Disables processing of certain response header fields from the SCGI server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7). </p>\n<p> If not disabled, processing of these header fields has the following effect: </p> <ul> <li> “X-Accel-Expires”, “Expires”, “Cache-Control”, “Set-Cookie”, and “Vary” set the parameters of response <a href=\"#scgi_cache_valid\">caching</a>; </li> <li> “X-Accel-Redirect” performs an <a href=\"ngx_http_core_module#internal\">internal redirect</a> to the specified URI; </li> <li> “X-Accel-Limit-Rate” sets the <a href=\"ngx_http_core_module#limit_rate\">rate limit</a> for transmission of a response to a client; </li> <li> “X-Accel-Buffering” enables or disables <a href=\"#scgi_buffering\">buffering</a> of a response; </li> <li> “X-Accel-Charset” sets the desired <a href=\"ngx_http_charset_module#charset\">charset</a> of a response. </li> </ul>\n\n<div class=\"directive\" id=\"scgi_intercept_errors\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_intercept_errors</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_intercept_errors off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines whether an SCGI server responses with codes greater than or equal to 300 should be passed to a client or be redirected to nginx for processing with the <a href=\"ngx_http_core_module#error_page\">error_page</a> directive. </p>\n<div class=\"directive\" id=\"scgi_limit_rate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_limit_rate</strong> <code><i>rate</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_limit_rate 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.7. </p>\n</div>\n<p> Limits the speed of reading the response from the SCGI server. The <code><i>rate</i></code> is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the SCGI server, the overall rate will be twice as much as the specified limit. The limitation works only if <a href=\"#scgi_buffering\">buffering</a> of responses from the SCGI server is enabled. </p>\n<div class=\"directive\" id=\"scgi_max_temp_file_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_max_temp_file_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_max_temp_file_size 1024m;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> When <a href=\"#scgi_buffering\">buffering</a> of responses from the SCGI server is enabled, and the whole response does not fit into the buffers set by the <a href=\"#scgi_buffer_size\">scgi_buffer_size</a> and <a href=\"#scgi_buffers\">scgi_buffers</a> directives, a part of the response can be saved to a temporary file. This directive sets the maximum <code><i>size</i></code> of the temporary file. The size of data written to the temporary file at a time is set by the <a href=\"#scgi_temp_file_write_size\">scgi_temp_file_write_size</a> directive. </p>\n<p> The zero value disables buffering of responses to temporary files. </p>\n <blockquote class=\"note\"> This restriction does not apply to responses that will be <a href=\"#scgi_cache\">cached</a> or <a href=\"#scgi_store\">stored</a> on disk. </blockquote>\n\n<div class=\"directive\" id=\"scgi_next_upstream\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_next_upstream</strong> \n    <code>error</code> |\n    <code>timeout</code> |\n    <code>invalid_header</code> |\n    <code>http_500</code> |\n    <code>http_503</code> |\n    <code>http_403</code> |\n    <code>http_404</code> |\n    <code>non_idempotent</code> |\n    <code>off</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_next_upstream error timeout;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Specifies in which cases a request should be passed to the next server: </p> <dl class=\"compact\"> <dt><code>error</code></dt> <dd>an error occurred while establishing a connection with the server, passing a request to it, or reading the response header;</dd> <dt><code>timeout</code></dt> <dd>a timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;</dd> <dt><code>invalid_header</code></dt> <dd>a server returned an empty or invalid response;</dd> <dt><code>http_500</code></dt> <dd>a server returned a response with the code 500;</dd> <dt><code>http_503</code></dt> <dd>a server returned a response with the code 503;</dd> <dt><code>http_403</code></dt> <dd>a server returned a response with the code 403;</dd> <dt><code>http_404</code></dt> <dd>a server returned a response with the code 404;</dd> <dt id=\"non_idempotent\"><code>non_idempotent</code></dt> <dd>normally, requests with a <a href=\"http://tools.ietf.org/html/rfc7231#section-4.2.2\">non-idempotent</a> method (<code>POST</code>, <code>LOCK</code>, <code>PATCH</code>) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests; </dd> <dt><code>off</code></dt> <dd>disables passing a request to the next server.</dd> </dl>\n\n<p> One should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible. </p>\n<p> The directive also defines what is considered an <a href=\"ngx_http_upstream_module#max_fails\">unsuccessful attempt</a> of communication with a server. The cases of <code>error</code>, <code>timeout</code> and <code>invalid_header</code> are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of <code>http_500</code> and <code>http_503</code> are considered unsuccessful attempts only if they are specified in the directive. The cases of <code>http_403</code> and <code>http_404</code> are never considered unsuccessful attempts. </p>\n<p> Passing a request to the next server can be limited by <a href=\"#scgi_next_upstream_tries\">the number of tries</a> and by <a href=\"#scgi_next_upstream_timeout\">time</a>. </p>\n<div class=\"directive\" id=\"scgi_next_upstream_timeout\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_next_upstream_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_next_upstream_timeout 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.5. </p>\n</div>\n<p> Limits the time during which a request can be passed to the <a href=\"#scgi_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation. </p>\n<div class=\"directive\" id=\"scgi_next_upstream_tries\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_next_upstream_tries</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_next_upstream_tries 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.5. </p>\n</div>\n<p> Limits the number of possible tries for passing a request to the <a href=\"#scgi_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation. </p>\n<div class=\"directive\" id=\"scgi_no_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_no_cache</strong> <code><i>string</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved: </p> <pre data-language=\"nginx\">\nscgi_no_cache $cookie_nocache $arg_nocache$arg_comment;\nscgi_no_cache $http_pragma    $http_authorization;\n</pre>\n<p> Can be used along with the <a href=\"#scgi_cache_bypass\">scgi_cache_bypass</a> directive. </p>\n<div class=\"directive\" id=\"scgi_param\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_param</strong> \n    <code><i>parameter</i></code> <code><i>value</i></code>\n    [<code>if_not_empty</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a <code><i>parameter</i></code> that should be passed to the SCGI server. The <code><i>value</i></code> can contain text, variables, and their combination. These directives are inherited from the previous level if and only if there are no <code>scgi_param</code> directives defined on the current level. </p>\n<p> Standard <a href=\"http://tools.ietf.org/html/rfc3875#section-4.1\">CGI environment variables</a> should be provided as SCGI headers, see the <code>scgi_params</code> file provided in the distribution: </p> <pre data-language=\"nginx\">\nlocation / {\n    include scgi_params;\n    ...\n}\n</pre>\n\n<p> If the directive is specified with <code>if_not_empty</code> (1.1.11) then such a parameter will not be passed to the server until its value is not empty: </p> <pre data-language=\"nginx\">\nscgi_param HTTPS $https if_not_empty;\n</pre>\n\n<div class=\"directive\" id=\"scgi_pass\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_pass</strong> <code><i>address</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Sets the address of an SCGI server. The address can be specified as a domain name or IP address, and a port: </p> <pre data-language=\"nginx\">\nscgi_pass localhost:9000;\n</pre>\n<p> or as a UNIX-domain socket path: </p> <pre data-language=\"nginx\">\nscgi_pass unix:/tmp/scgi.socket;\n</pre>\n\n<p> If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a <a href=\"ngx_http_upstream_module\">server group</a>. </p>\n<div class=\"directive\" id=\"scgi_pass_header\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_pass_header</strong> <code><i>field</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Permits passing <a href=\"#scgi_hide_header\">otherwise disabled</a> header fields from an SCGI server to a client. </p>\n<div class=\"directive\" id=\"scgi_pass_request_body\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_pass_request_body</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_pass_request_body on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Indicates whether the original request body is passed to the SCGI server. See also the <a href=\"#scgi_pass_request_headers\">scgi_pass_request_headers</a> directive. </p>\n<div class=\"directive\" id=\"scgi_pass_request_headers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_pass_request_headers</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_pass_request_headers on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Indicates whether the header fields of the original request are passed to the SCGI server. See also the <a href=\"#scgi_pass_request_body\">scgi_pass_request_body</a> directive. </p>\n<div class=\"directive\" id=\"scgi_read_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_read_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_read_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for reading a response from the SCGI server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the SCGI server does not transmit anything within this time, the connection is closed. </p>\n<div class=\"directive\" id=\"scgi_request_buffering\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_request_buffering</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_request_buffering on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.11. </p>\n</div>\n<p> Enables or disables buffering of a client request body. </p>\n<p> When buffering is enabled, the entire request body is <a href=\"ngx_http_core_module#client_body_buffer_size\">read</a> from the client before sending the request to an SCGI server. </p>\n<p> When buffering is disabled, the request body is sent to the SCGI server immediately as it is received. In this case, the request cannot be passed to the <a href=\"#scgi_next_upstream\">next server</a> if nginx already started sending the request body. </p>\n<p> When HTTP/1.1 chunked transfer encoding is used to send the original request body, the request body will be buffered regardless of the directive value. </p>\n<div class=\"directive\" id=\"scgi_send_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_send_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_send_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a timeout for transmitting a request to the SCGI server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the SCGI server does not receive anything within this time, the connection is closed. </p>\n<div class=\"directive\" id=\"scgi_store\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_store</strong> \n    <code>on</code> |\n    <code>off</code> |\n    <code><i>string</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_store off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables saving of files to a disk. The <code>on</code> parameter saves files with paths corresponding to the directives <a href=\"ngx_http_core_module#alias\">alias</a> or <a href=\"ngx_http_core_module#root\">root</a>. The <code>off</code> parameter disables saving of files. In addition, the file name can be set explicitly using the <code><i>string</i></code> with variables: </p> <pre data-language=\"nginx\">\nscgi_store /data/www$original_uri;\n</pre>\n\n<p> The modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the <a href=\"#scgi_temp_path\">scgi_temp_path</a> directive, are put on the same file system. </p>\n<p> This directive can be used to create local copies of static unchangeable files, e.g.: </p> <pre data-language=\"nginx\">\nlocation /images/ {\n    root              /data/www;\n    error_page        404 = /fetch$uri;\n}\n\nlocation /fetch/ {\n    internal;\n\n    scgi_pass         backend:9000;\n    ...\n\n    scgi_store        on;\n    scgi_store_access user:rw group:rw all:r;\n    scgi_temp_path    /data/temp;\n\n    alias             /data/www/;\n}\n</pre>\n\n<div class=\"directive\" id=\"scgi_store_access\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_store_access</strong> <code><i>users</i></code>:<code><i>permissions</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_store_access user:rw;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets access permissions for newly created files and directories, e.g.: </p> <pre data-language=\"nginx\">\nscgi_store_access user:rw group:rw all:r;\n</pre>\n\n<p> If any <code>group</code> or <code>all</code> access permissions are specified then <code>user</code> permissions may be omitted: </p> <pre data-language=\"nginx\">\nscgi_store_access group:rw all:r;\n</pre>\n\n<div class=\"directive\" id=\"scgi_temp_file_write_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_temp_file_write_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_temp_file_write_size 8k|16k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Limits the <code><i>size</i></code> of data written to a temporary file at a time, when buffering of responses from the SCGI server to temporary files is enabled. By default, <code><i>size</i></code> is limited by two buffers set by the <a href=\"#scgi_buffer_size\">scgi_buffer_size</a> and <a href=\"#scgi_buffers\">scgi_buffers</a> directives. The maximum size of a temporary file is set by the <a href=\"#scgi_max_temp_file_size\">scgi_max_temp_file_size</a> directive. </p>\n<div class=\"directive\" id=\"scgi_temp_path\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>scgi_temp_path</strong> \n    <code><i>path</i></code>\n    [<code><i>level1</i></code>\n    [<code><i>level2</i></code>\n    [<code><i>level3</i></code>]]];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>scgi_temp_path scgi_temp;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a directory for storing temporary files with data received from SCGI servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration </p> <pre data-language=\"nginx\">\nscgi_temp_path /spool/nginx/scgi_temp 1 2;\n</pre>\n<p> a temporary file might look like this: </p> <pre data-language=\"nginx\">\n/spool/nginx/scgi_temp/<strong>7</strong>/<strong>45</strong>/00000123<strong>457</strong>\n</pre>\n\n<p> See also the <code>use_temp_path</code> parameter of the <a href=\"#scgi_cache_path\">scgi_cache_path</a> directive. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_scgi_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_scgi_module.html</a>\n  </p>\n</div>\n","http/ngx_http_ssl_module":"<h1>Module ngx_http_ssl_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#ssl\">ssl</a></li>\n<li><a href=\"#ssl_buffer_size\">ssl_buffer_size</a></li>\n<li><a href=\"#ssl_certificate\">ssl_certificate</a></li>\n<li><a href=\"#ssl_certificate_key\">ssl_certificate_key</a></li>\n<li><a href=\"#ssl_ciphers\">ssl_ciphers</a></li>\n<li><a href=\"#ssl_client_certificate\">ssl_client_certificate</a></li>\n<li><a href=\"#ssl_crl\">ssl_crl</a></li>\n<li><a href=\"#ssl_dhparam\">ssl_dhparam</a></li>\n<li><a href=\"#ssl_ecdh_curve\">ssl_ecdh_curve</a></li>\n<li><a href=\"#ssl_password_file\">ssl_password_file</a></li>\n<li><a href=\"#ssl_prefer_server_ciphers\">ssl_prefer_server_ciphers</a></li>\n<li><a href=\"#ssl_protocols\">ssl_protocols</a></li>\n<li><a href=\"#ssl_session_cache\">ssl_session_cache</a></li>\n<li><a href=\"#ssl_session_ticket_key\">ssl_session_ticket_key</a></li>\n<li><a href=\"#ssl_session_tickets\">ssl_session_tickets</a></li>\n<li><a href=\"#ssl_session_timeout\">ssl_session_timeout</a></li>\n<li><a href=\"#ssl_stapling\">ssl_stapling</a></li>\n<li><a href=\"#ssl_stapling_file\">ssl_stapling_file</a></li>\n<li><a href=\"#ssl_stapling_responder\">ssl_stapling_responder</a></li>\n<li><a href=\"#ssl_stapling_verify\">ssl_stapling_verify</a></li>\n<li><a href=\"#ssl_trusted_certificate\">ssl_trusted_certificate</a></li>\n<li><a href=\"#ssl_verify_client\">ssl_verify_client</a></li>\n<li><a href=\"#ssl_verify_depth\">ssl_verify_depth</a></li>\n<li><a href=\"#errors\">Error Processing</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_ssl_module</code> module provides the necessary support for HTTPS. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_ssl_module</code> configuration parameter. </p> <blockquote class=\"note\"> This module requires the <a href=\"http://www.openssl.org\">OpenSSL</a> library. </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n<p> To reduce the processor load it is recommended to </p> <ul class=\"compact\"> <li> set the number of worker processes equal to the number of processors, </li> <li> enable keep-alive connections, </li> <li> enable the shared session cache, </li> <li> disable the built-in session cache, </li> <li> and possibly increase the session lifetime (by default, 5 minutes): </li> </ul>\n <pre data-language=\"nginx\">\n<strong>worker_processes auto;</strong>\n\nhttp {\n\n    ...\n\n    server {\n        listen              443 ssl;\n        <strong>keepalive_timeout   70;</strong>\n\n        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;\n        ssl_certificate     /usr/local/nginx/conf/cert.pem;\n        ssl_certificate_key /usr/local/nginx/conf/cert.key;\n        <strong>ssl_session_cache   shared:SSL:10m;</strong>\n        <strong>ssl_session_timeout 10m;</strong>\n\n        ...\n    }\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"ssl\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables the HTTPS protocol for the given virtual server. </p> <blockquote class=\"note\"> It is recommended to use the <code>ssl</code> parameter of the <a href=\"ngx_http_core_module#listen\">listen</a> directive instead of this directive. </blockquote>\n\n<div class=\"directive\" id=\"ssl_buffer_size\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_buffer_size 16k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.9. </p>\n</div>\n<p> Sets the size of the buffer used for sending data. </p>\n<p> By default, the buffer size is 16k, which corresponds to minimal overhead when sending big responses. To minimize Time To First Byte it may be beneficial to use smaller values, for example: </p> <pre data-language=\"nginx\">\nssl_buffer_size 4k;\n</pre>\n\n<div class=\"directive\" id=\"ssl_certificate\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with the certificate in the PEM format for the given virtual server. If intermediate certificates should be specified in addition to a primary certificate, they should be specified in the same file in the following order: the primary certificate comes first, then the intermediate certificates. A secret key in the PEM format may be placed in the same file. </p>\n<p> Since version 1.11.0, this directive can be specified multiple times to load certificates of different types, for example, RSA and ECDSA: </p> <pre data-language=\"nginx\">\nserver {\n    listen              443 ssl;\n    server_name         example.com;\n\n    ssl_certificate     example.com.rsa.crt;\n    ssl_certificate_key example.com.rsa.key;\n\n    ssl_certificate     example.com.ecdsa.crt;\n    ssl_certificate_key example.com.ecdsa.key;\n\n    ...\n}\n</pre>\n <blockquote class=\"note\"> Only OpenSSL 1.0.2 or higher supports separate <a href=\"configuring_https_servers#chains\">certificate chains</a> for different certificates. With older versions, only one certificate chain can be used. </blockquote>\n\n<p> It should be kept in mind that due to the HTTPS protocol limitations virtual servers should listen on different IP addresses: </p> <pre data-language=\"nginx\">\nserver {\n    listen          192.168.1.1:443;\n    server_name     one.example.com;\n    ssl_certificate one.example.com.crt;\n    ...\n}\n\nserver {\n    listen          192.168.1.2:443;\n    server_name     two.example.com;\n    ssl_certificate two.example.com.crt;\n    ...\n}\n</pre>\n<p> otherwise <a href=\"configuring_https_servers#name_based_https_servers\">the first server’s certificate</a> will be issued for the second site. </p>\n<div class=\"directive\" id=\"ssl_certificate_key\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_certificate_key</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with the secret key in the PEM format for the given virtual server. </p>\n<p> The value <code>engine</code>:<code><i>name</i></code>:<code><i>id</i></code> can be specified instead of the <code><i>file</i></code> (1.7.9), which loads a secret key with a specified <code><i>id</i></code> from the OpenSSL engine <code><i>name</i></code>. </p>\n<div class=\"directive\" id=\"ssl_ciphers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_ciphers</strong> <code><i>ciphers</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_ciphers HIGH:!aNULL:!MD5;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies the enabled ciphers. The ciphers are specified in the format understood by the OpenSSL library, for example: </p> <pre data-language=\"nginx\">\nssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n</pre>\n\n<p> The full list can be viewed using the “<code>openssl ciphers</code>” command. </p>\n <blockquote class=\"note\"> The previous versions of nginx used <a href=\"configuring_https_servers#compatibility\">different</a> ciphers by default. </blockquote>\n\n<div class=\"directive\" id=\"ssl_client_certificate\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_client_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with trusted CA certificates in the PEM format used to <a href=\"#ssl_verify_client\">verify</a> client certificates and OCSP responses if <a href=\"#ssl_stapling\">ssl_stapling</a> is enabled. </p>\n<p> The list of certificates will be sent to clients. If this is not desired, the <a href=\"#ssl_trusted_certificate\">ssl_trusted_certificate</a> directive can be used. </p>\n<div class=\"directive\" id=\"ssl_crl\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_crl</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.8.7. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with revoked certificates (CRL) in the PEM format used to <a href=\"#ssl_verify_client\">verify</a> client certificates. </p>\n<div class=\"directive\" id=\"ssl_dhparam\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_dhparam</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.7.2. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with DH parameters for DHE ciphers. </p>\n<div class=\"directive\" id=\"ssl_ecdh_curve\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_ecdh_curve</strong> <code><i>curve</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_ecdh_curve auto;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table> <p> This directive appeared in versions 1.1.0 and 1.0.6. </p> </div>\n<p> Specifies a <code><i>curve</i></code> for ECDHE ciphers. </p>\n<p> When using OpenSSL 1.0.2 or higher, it is possible to specify multiple curves (1.11.0), for example: </p> <pre data-language=\"nginx\">\nssl_ecdh_curve prime256v1:secp384r1;\n</pre>\n\n<p> The special value <code>auto</code> (1.11.0) instructs nginx to use a list built into the OpenSSL library when using OpenSSL 1.0.2 or higher, or <code>prime256v1</code> with older versions. </p>\n <blockquote class=\"note\"> Prior to version 1.11.0, the <code>prime256v1</code> curve was used by default. </blockquote>\n\n<div class=\"directive\" id=\"ssl_password_file\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_password_file</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.3. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with passphrases for <a href=\"#ssl_certificate_key\">secret keys</a> where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nhttp {\n    ssl_password_file /etc/keys/global.pass;\n    ...\n\n    server {\n        server_name www1.example.com;\n        ssl_certificate_key /etc/keys/first.key;\n    }\n\n    server {\n        server_name www2.example.com;\n\n        # named pipe can also be used instead of a file\n        ssl_password_file /etc/keys/fifo;\n        ssl_certificate_key /etc/keys/second.key;\n    }\n}\n</pre>\n\n<div class=\"directive\" id=\"ssl_prefer_server_ciphers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_prefer_server_ciphers</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_prefer_server_ciphers off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies that server ciphers should be preferred over client ciphers when using the SSLv3 and TLS protocols. </p>\n<div class=\"directive\" id=\"ssl_protocols\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_protocols</strong> \n    [<code>SSLv2</code>]\n    [<code>SSLv3</code>]\n    [<code>TLSv1</code>]\n    [<code>TLSv1.1</code>]\n    [<code>TLSv1.2</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables the specified protocols. The <code>TLSv1.1</code> and <code>TLSv1.2</code> parameters work only when the OpenSSL library of version 1.0.1 or higher is used. </p> <blockquote class=\"note\"> The <code>TLSv1.1</code> and <code>TLSv1.2</code> parameters are supported starting from versions 1.1.13 and 1.0.12, so when the OpenSSL version 1.0.1 or higher is used on older nginx versions, these protocols work, but cannot be disabled. </blockquote>\n\n<div class=\"directive\" id=\"ssl_session_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_session_cache</strong> \n    <code>off</code> |\n    <code>none</code> |\n    [<code>builtin</code>[:<code><i>size</i></code>]]\n    [<code>shared</code>:<code><i>name</i></code>:<code><i>size</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_session_cache none;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the types and sizes of caches that store session parameters. A cache can be of any of the following types: </p> <dl class=\"compact\"> <dt><code>off</code></dt> <dd> the use of a session cache is strictly prohibited: nginx explicitly tells a client that sessions may not be reused. </dd> <dt><code>none</code></dt> <dd> the use of a session cache is gently disallowed: nginx tells a client that sessions may be reused, but does not actually store session parameters in the cache. </dd> <dt><code>builtin</code></dt> <dd> a cache built in OpenSSL; used by one worker process only. The cache size is specified in sessions. If size is not given, it is equal to 20480 sessions. Use of the built-in cache can cause memory fragmentation. </dd> <dt><code>shared</code></dt> <dd> a cache shared between all worker processes. The cache size is specified in bytes; one megabyte can store about 4000 sessions. Each shared cache should have an arbitrary name. A cache with the same name can be used in several virtual servers. </dd> </dl>\n\n<p> Both cache types can be used simultaneously, for example: </p> <pre data-language=\"nginx\">\nssl_session_cache builtin:1000 shared:SSL:10m;\n</pre>\n<p> but using only shared cache without the built-in cache should be more efficient. </p>\n<div class=\"directive\" id=\"ssl_session_ticket_key\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_session_ticket_key</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.7. </p>\n</div>\n<p> Sets a <code><i>file</i></code> with the secret key used to encrypt and decrypt TLS session tickets. The directive is necessary if the same key has to be shared between multiple servers. By default, a randomly generated key is used. </p>\n<p> If several keys are specified, only the first key is used to encrypt TLS session tickets. This allows configuring key rotation, for example: </p> <pre data-language=\"nginx\">\nssl_session_ticket_key current.key;\nssl_session_ticket_key previous.key;\n</pre>\n\n<p> The <code><i>file</i></code> must contain 48 bytes of random data and can be created using the following command: </p> <pre data-language=\"nginx\">\nopenssl rand 48 &gt; ticket.key\n</pre>\n\n<div class=\"directive\" id=\"ssl_session_tickets\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_session_tickets</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_session_tickets on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.9. </p>\n</div>\n<p> Enables or disables session resumption through <a href=\"http://tools.ietf.org/html/rfc5077\">TLS session tickets</a>. </p>\n<div class=\"directive\" id=\"ssl_session_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_session_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_session_timeout 5m;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a time during which a client may reuse the session parameters stored in a cache. </p>\n<div class=\"directive\" id=\"ssl_stapling\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_stapling</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_stapling off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.3.7. </p>\n</div>\n<p> Enables or disables <a href=\"http://tools.ietf.org/html/rfc4366#section-3.6\">stapling of OCSP responses</a> by the server. Example: </p> <pre data-language=\"nginx\">\nssl_stapling on;\nresolver 192.0.2.1;\n</pre>\n\n<p> For the OCSP stapling to work, the certificate of the server certificate issuer should be known. If the <a href=\"#ssl_certificate\">ssl_certificate</a> file does not contain intermediate certificates, the certificate of the server certificate issuer should be present in the <a href=\"#ssl_trusted_certificate\">ssl_trusted_certificate</a> file. </p>\n<p> For a resolution of the OCSP responder hostname, the <a href=\"ngx_http_core_module#resolver\">resolver</a> directive should also be specified. </p>\n<div class=\"directive\" id=\"ssl_stapling_file\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_stapling_file</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.3.7. </p>\n</div>\n<p> When set, the stapled OCSP response will be taken from the specified <code><i>file</i></code> instead of querying the OCSP responder specified in the server certificate. </p>\n<p> The file should be in the DER format as produced by the “<code>openssl ocsp</code>” command. </p>\n<div class=\"directive\" id=\"ssl_stapling_responder\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_stapling_responder</strong> <code><i>url</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.3.7. </p>\n</div>\n<p> Overrides the URL of the OCSP responder specified in the “<a href=\"http://tools.ietf.org/html/rfc5280#section-4.2.2.1\">Authority Information Access</a>” certificate extension. </p>\n<p> Only “<code>http://</code>” OCSP responders are supported: </p> <pre data-language=\"nginx\">\nssl_stapling_responder http://ocsp.example.com/;\n</pre>\n\n<div class=\"directive\" id=\"ssl_stapling_verify\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_stapling_verify</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_stapling_verify off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.3.7. </p>\n</div>\n<p> Enables or disables verification of OCSP responses by the server. </p>\n<p> For verification to work, the certificate of the server certificate issuer, the root certificate, and all intermediate certificates should be configured as trusted using the <a href=\"#ssl_trusted_certificate\">ssl_trusted_certificate</a> directive. </p>\n<div class=\"directive\" id=\"ssl_trusted_certificate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_trusted_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.3.7. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with trusted CA certificates in the PEM format used to <a href=\"#ssl_verify_client\">verify</a> client certificates and OCSP responses if <a href=\"#ssl_stapling\">ssl_stapling</a> is enabled. </p>\n<p> In contrast to the certificate set by <a href=\"#ssl_client_certificate\">ssl_client_certificate</a>, the list of these certificates will not be sent to clients. </p>\n<div class=\"directive\" id=\"ssl_verify_client\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_verify_client</strong> \n    <code>on</code> | <code>off</code> |\n    <code>optional</code> | <code>optional_no_ca</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_verify_client off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables verification of client certificates. The verification result is stored in the <code>$ssl_client_verify</code> variable. </p>\n<p> The <code>optional</code> parameter (0.8.7+) requests the client certificate and verifies it if the certificate is present. </p>\n<p> The <code>optional_no_ca</code> parameter (1.3.8, 1.2.5) requests the client certificate but does not require it to be signed by a trusted CA certificate. This is intended for the use in cases when a service that is external to nginx performs the actual certificate verification. The contents of the certificate is accessible through the <code>$ssl_client_cert</code> variable. </p>\n<div class=\"directive\" id=\"ssl_verify_depth\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_verify_depth</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_verify_depth 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the verification depth in the client certificates chain. </p> <h4 id=\"errors\">Error Processing</h4>\n<p> The <code>ngx_http_ssl_module</code> module supports several non-standard error codes that can be used for redirects using the <a href=\"ngx_http_core_module#error_page\">error_page</a> directive: </p> <dl class=\"compact\"> <dt>495</dt> <dd> an error has occurred during the client certificate verification; </dd> <dt>496</dt> <dd> a client has not presented the required certificate; </dd> <dt>497</dt> <dd> a regular request has been sent to the HTTPS port. </dd> </dl>\n\n<p> The redirection happens after the request is fully parsed and the variables, such as <code>$request_uri</code>, <code>$uri</code>, <code>$args</code> and others, are available. </p> <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_ssl_module</code> module supports several embedded variables: </p> <dl class=\"compact\"> <dt id=\"var_ssl_cipher\"><code>$ssl_cipher</code></dt> <dd> returns the string of ciphers used for an established SSL connection; </dd> <dt id=\"var_ssl_client_cert\"><code>$ssl_client_cert</code></dt> <dd> returns the client certificate in the PEM format for an established SSL connection, with each line except the first prepended with the tab character; this is intended for the use in the <a href=\"ngx_http_proxy_module#proxy_set_header\">proxy_set_header</a> directive; </dd> <dt id=\"var_ssl_client_fingerprint\"><code>$ssl_client_fingerprint</code></dt> <dd> returns the SHA1 fingerprint of the client certificate for an established SSL connection (1.7.1); </dd> <dt id=\"var_ssl_client_raw_cert\">\n<code>$ssl_client_raw_cert</code> </dt> <dd> returns the client certificate in the PEM format for an established SSL connection; </dd> <dt id=\"var_ssl_client_serial\"><code>$ssl_client_serial</code></dt> <dd> returns the serial number of the client certificate for an established SSL connection; </dd> <dt id=\"var_ssl_client_s_dn\"><code>$ssl_client_s_dn</code></dt> <dd> returns the “subject DN” string of the client certificate for an established SSL connection; </dd> <dt id=\"var_ssl_client_i_dn\"><code>$ssl_client_i_dn</code></dt> <dd> returns the “issuer DN” string of the client certificate for an established SSL connection; </dd> <dt id=\"var_ssl_client_verify\"><code>$ssl_client_verify</code></dt> <dd> returns the result of client certificate verification: “<code>SUCCESS</code>”, “<code>FAILED</code>”, and “<code>NONE</code>” if a certificate was not present; </dd> <dt id=\"var_ssl_protocol\"><code>$ssl_protocol</code></dt> <dd> returns the protocol of an established SSL connection; </dd> <dt id=\"var_ssl_server_name\"><code>$ssl_server_name</code></dt> <dd> returns the server name requested through <a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">SNI</a> (1.7.0); </dd> <dt id=\"var_ssl_session_id\"><code>$ssl_session_id</code></dt> <dd> returns the session identifier of an established SSL connection; </dd> <dt id=\"var_ssl_session_reused\"><code>$ssl_session_reused</code></dt> <dd> returns “<code>r</code>” if an SSL session was reused, or “<code>.</code>” otherwise (1.5.11). </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_ssl_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_ssl_module.html</a>\n  </p>\n</div>\n","http/ngx_http_stub_status_module":"<h1>Module ngx_http_stub_status_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#stub_status\">stub_status</a></li>\n<li><a href=\"#data\">Data</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_stub_status_module</code> module provides access to basic status information. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_stub_status_module</code> configuration parameter. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation /basic_status {\n    stub_status;\n}\n</pre>\n<p> This configuration creates a simple web page with basic status data which may look like as follows: </p> <pre data-language=\"nginx\">\nActive connections: 291 \nserver accepts handled requests\n 16630948 16630948 31070465 \nReading: 6 Writing: 179 Waiting: 106 \n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"stub_status\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>stub_status</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> The basic status information will be accessible from the surrounding location. </p>\n <blockquote class=\"note\"> In versions prior to 1.7.5, the directive syntax required an arbitrary argument, for example, “<code>stub_status on</code>”. </blockquote>\n <h4 id=\"data\">Data</h4>\n<p> The following status information is provided: </p> <dl class=\"compact\"> <dt id=\"stubstat_active\"><code>Active connections</code></dt> <dd> The current number of active client connections including <code>Waiting</code> connections. </dd> <dt id=\"stubstat_accepts\"><code>accepts</code></dt> <dd> The total number of accepted client connections. </dd> <dt id=\"stubstat_handled\"><code>handled</code></dt> <dd> The total number of handled connections. Generally, the parameter value is the same as <code>accepts</code> unless some resource limits have been reached (for example, the <a href=\"../ngx_core_module#worker_connections\">worker_connections</a> limit). </dd> <dt id=\"stubstat_requests\"><code>requests</code></dt> <dd> The total number of client requests. </dd> <dt id=\"stubstat_reading\"><code>Reading</code></dt> <dd> The current number of connections where nginx is reading the request header. </dd> <dt id=\"stubstat_writing\"><code>Writing</code></dt> <dd> The current number of connections where nginx is writing the response back to the client. </dd> <dt id=\"stubstat_waiting\"><code>Waiting</code></dt> <dd> The current number of idle client connections waiting for a request. </dd> </dl>\n <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_stub_status_module</code> module supports the following embedded variables (1.3.14): </p> <dl class=\"compact\"> <dt id=\"var_connections_active\"><code>$connections_active</code></dt> <dd> same as the <code>Active connections</code> value; </dd> <dt id=\"var_connections_reading\"><code>$connections_reading</code></dt> <dd> same as the <code>Reading</code> value; </dd> <dt id=\"var_connections_writing\"><code>$connections_writing</code></dt> <dd> same as the <code>Writing</code> value; </dd> <dt id=\"var_connections_waiting\"><code>$connections_waiting</code></dt> <dd> same as the <code>Waiting</code> value. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_stub_status_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_stub_status_module.html</a>\n  </p>\n</div>\n","http/ngx_http_sub_module":"<h1>Module ngx_http_sub_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#sub_filter\">sub_filter</a></li>\n<li><a href=\"#sub_filter_last_modified\">sub_filter_last_modified</a></li>\n<li><a href=\"#sub_filter_once\">sub_filter_once</a></li>\n<li><a href=\"#sub_filter_types\">sub_filter_types</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_sub_module</code> module is a filter that modifies a response by replacing one specified string by another. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_sub_module</code> configuration parameter. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    sub_filter '&lt;a href=\"http://127.0.0.1:8080/'  '&lt;a href=\"https://$host/';\n    sub_filter '&lt;img src=\"http://127.0.0.1:8080/' '&lt;img src=\"https://$host/';\n    sub_filter_once on;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"sub_filter\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>sub_filter</strong> <code><i>string</i></code> <code><i>replacement</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a string to replace and a replacement string. The string to replace is matched ignoring the case. The string to replace (1.9.4) and replacement string can contain variables. Several <code>sub_filter</code> directives can be specified on one configuration level (1.9.4). </p>\n<div class=\"directive\" id=\"sub_filter_last_modified\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>sub_filter_last_modified</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>sub_filter_last_modified off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.1. </p>\n</div>\n<p> Allows preserving the “Last-Modified” header field from the original response during replacement to facilitate response caching. </p>\n<p> By default, the header field is removed as contents of the response are modified during processing. </p>\n<div class=\"directive\" id=\"sub_filter_once\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>sub_filter_once</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>sub_filter_once on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Indicates whether to look for each string to replace once or repeatedly. </p>\n<div class=\"directive\" id=\"sub_filter_types\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>sub_filter_types</strong> <code><i>mime-type</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>sub_filter_types text/html;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables string replacement in responses with the specified MIME types in addition to “<code>text/html</code>”. The special value “<code>*</code>” matches any MIME type (0.8.29). </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_sub_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_sub_module.html</a>\n  </p>\n</div>\n","http/ngx_http_upstream_conf_module":"<h1>Module ngx_http_upstream_conf_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#upstream_conf\">upstream_conf</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_upstream_conf_module</code> module allows configuring upstream server groups on-the-fly via a simple HTTP interface without the need of restarting nginx. The <a href=\"ngx_http_upstream_module#zone\">http</a> or <a href=\"../stream/ngx_stream_upstream_module#zone\">stream</a> server group must reside in the shared memory. </p> <blockquote class=\"note\"> This module is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nupstream backend {\n    zone upstream_backend 64k;\n\n    ...\n}\n\nserver {\n    location /upstream_conf {\n        <strong>upstream_conf</strong>;\n        allow 127.0.0.1;\n        deny all;\n    }\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"upstream_conf\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>upstream_conf</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Turns on the HTTP interface of upstream configuration in the surrounding location. Access to this location should be <a href=\"ngx_http_core_module#satisfy\">limited</a>. </p>\n<p> Configuration commands can be used to: </p> <ul class=\"compact\"> <li>view the group configuration;</li> <li>view, modify, or remove a server;</li> <li>add a new server.</li> </ul>\n <blockquote class=\"note\"> Since addresses in a group are not required to be unique, specific servers in a group are referenced by their IDs. IDs are assigned automatically and shown when adding a new server or viewing the group configuration. </blockquote>\n\n<p> A configuration command consists of parameters passed as request arguments, for example: </p> <pre data-language=\"nginx\">\nhttp://127.0.0.1/upstream_conf?upstream=backend\n</pre>\n\n<p> The following parameters are supported: </p> <dl> <dt> <code>stream=</code>\n</dt> <dd> Selects a <a href=\"../stream/ngx_stream_upstream_module\">stream</a> upstream server group. Without this parameter, selects an <a href=\"ngx_http_upstream_module\">http</a> upstream server group. </dd> <dt> <code>upstream=</code><code><i>name</i></code>\n</dt> <dd> Selects a group to work with. This parameter is mandatory. </dd> <dt> <code>id=</code><code><i>number</i></code>\n</dt> <dd> Selects a server for viewing, modifying, or removing. </dd> <dt> <code>remove=</code>\n</dt> <dd> Removes a server from the group. </dd> <dt> <code>add=</code>\n</dt> <dd> Adds a new server to the group. </dd> <dt> <code>backup=</code>\n</dt> <dd> Required to add a backup server. <blockquote class=\"note\"> Before version 1.7.2, <code>backup=</code> was also required to view, modify, or remove existing backup servers. </blockquote> </dd> <dt> <code>server=</code><code><i>address</i></code>\n</dt> <dd> Same as the “<code>address</code>” parameter of the <a href=\"ngx_http_upstream_module#server\">http</a> or <a href=\"../stream/ngx_stream_upstream_module#server\">stream</a> upstream server. <p> When adding a server, it is possible to specify it as a domain name. In this case, changes of the IP addresses that correspond to a domain name will be monitored and automatically applied to the upstream configuration without the need of restarting nginx (1.7.2). This requires the “<code>resolver</code>” directive in the <a href=\"ngx_http_core_module#resolver\">http</a> or <a href=\"../stream/ngx_stream_core_module#resolver\">stream</a> block. See also the “<code>resolve</code>” parameter of the <a href=\"ngx_http_upstream_module#resolve\">http</a> or <a href=\"../stream/ngx_stream_upstream_module#resolve\">stream</a> upstream server. </p> </dd> <dt> <code>service=</code><code><i>name</i></code>\n</dt> <dd> Same as the “<code>service</code>” parameter of the <a href=\"ngx_http_upstream_module#service\">http</a> or <a href=\"../stream/ngx_stream_upstream_module#service\">stream</a> upstream server (1.9.13). </dd> <dt> <code>weight=</code><code><i>number</i></code>\n</dt> <dd> Same as the “<code>weight</code>” parameter of the <a href=\"ngx_http_upstream_module#weight\">http</a> or <a href=\"../stream/ngx_stream_upstream_module#weight\">stream</a> upstream server. </dd> <dt> <code>max_conns=</code><code><i>number</i></code>\n</dt> <dd> Same as the “<code>max_conns</code>” parameter of the <a href=\"ngx_http_upstream_module#max_conns\">http</a> or <a href=\"../stream/ngx_stream_upstream_module#max_conns\">stream</a> upstream server. </dd> <dt> <code>max_fails=</code><code><i>number</i></code>\n</dt> <dd> Same as the “<code>max_fails</code>” parameter of the <a href=\"ngx_http_upstream_module#max_fails\">http</a> or <a href=\"../stream/ngx_stream_upstream_module#max_fails\">stream</a> upstream server. </dd> <dt> <code>fail_timeout=</code><code><i>time</i></code>\n</dt> <dd> Same as the “<code>fail_timeout</code>” parameter of the <a href=\"ngx_http_upstream_module#fail_timeout\">http</a> or <a href=\"../stream/ngx_stream_upstream_module#fail_timeout\">stream</a> upstream server. </dd> <dt> <code>slow_start=</code><code><i>time</i></code>\n</dt> <dd> Same as the “<code>slow_start</code>” parameter of the <a href=\"ngx_http_upstream_module#slow_start\">http</a> or <a href=\"../stream/ngx_stream_upstream_module#slow_start\">stream</a> upstream server. </dd> <dt> <code>down=</code>\n</dt> <dd> Same as the “<code>down</code>” parameter of the <a href=\"ngx_http_upstream_module#down\">http</a> or <a href=\"../stream/ngx_stream_upstream_module#down\">stream</a> upstream server. </dd> <dt id=\"drain\"><code>drain=</code></dt> <dd> Puts the <a href=\"ngx_http_upstream_module\">http</a> upstream server into the “draining” mode (1.7.5). In this mode, only requests <a href=\"ngx_http_upstream_module#sticky\">bound</a> to the server will be proxied to it. </dd> <dt> <code>up=</code>\n</dt> <dd> The opposite of the “<code>down</code>” parameter of the <a href=\"ngx_http_upstream_module#down\">http</a> or <a href=\"../stream/ngx_stream_upstream_module#down\">stream</a> upstream server. </dd> <dt> <code>route=</code><code><i>string</i></code>\n</dt> <dd> Same as the “<code>route</code>” parameter of the <a href=\"ngx_http_upstream_module#route\">http</a> upstream server. </dd> </dl>\n<p> The first three parameters select an object. This can be either the whole http or stream upstream server group, or a specific server. Without other parameters, the configuration of the selected group or server is shown. </p>\n<p> For example, to view the configuration of the whole group, send: </p> <pre data-language=\"nginx\">\nhttp://127.0.0.1/upstream_conf?upstream=backend\n</pre>\n<p> To view the configuration of a specific server, also specify its ID: </p> <pre data-language=\"nginx\">\nhttp://127.0.0.1/upstream_conf?upstream=backend&amp;id=42\n</pre>\n\n<p> To add a new server, specify its address in the “<code>server=</code>” parameter. Without other parameters specified, a server will be added with other parameters set to their default values (see the <a href=\"ngx_http_upstream_module#server\">http</a> or <a href=\"../stream/ngx_stream_upstream_module#server\">stream</a> “<code>server</code>” directive). </p>\n<p> For example, to add a new primary server, send: </p> <pre data-language=\"nginx\">\nhttp://127.0.0.1/upstream_conf?add=&amp;upstream=backend&amp;server=127.0.0.1:8080\n</pre>\n<p> To add a new backup server, send: </p> <pre data-language=\"nginx\">\nhttp://127.0.0.1/upstream_conf?add=&amp;upstream=backend&amp;backup=&amp;server=127.0.0.1:8080\n</pre>\n<p> To add a new primary server, set its parameters to non-default values and mark it as “<code>down</code>”, send: </p> <pre data-language=\"nginx\">\nhttp://127.0.0.1/upstream_conf?add=&amp;upstream=backend&amp;server=127.0.0.1:8080&amp;weight=2&amp;down=\n</pre>\n<p> To remove a server, specify its ID: </p> <pre data-language=\"nginx\">\nhttp://127.0.0.1/upstream_conf?remove=&amp;upstream=backend&amp;id=42\n</pre>\n<p> To mark an existing server as “<code>down</code>”, send: </p> <pre data-language=\"nginx\">\nhttp://127.0.0.1/upstream_conf?upstream=backend&amp;id=42&amp;down=\n</pre>\n<p> To modify the address of an existing server, send: </p> <pre data-language=\"nginx\">\nhttp://127.0.0.1/upstream_conf?upstream=backend&amp;id=42&amp;server=192.0.2.3:8123\n</pre>\n<p> To modify other parameters of an existing server, send: </p> <pre data-language=\"nginx\">\nhttp://127.0.0.1/upstream_conf?upstream=backend&amp;id=42&amp;max_fails=3&amp;weight=4\n</pre>\n<p> The above examples are for an <a href=\"ngx_http_upstream_module\">http</a> upstream server group. Similar examples for a <a href=\"../stream/ngx_stream_upstream_module\">stream</a> upstream server group require the “<code>stream=</code>” parameter. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_upstream_conf_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_upstream_conf_module.html</a>\n  </p>\n</div>\n","http/ngx_http_userid_module":"<h1>Module ngx_http_userid_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#userid\">userid</a></li>\n<li><a href=\"#userid_domain\">userid_domain</a></li>\n<li><a href=\"#userid_expires\">userid_expires</a></li>\n<li><a href=\"#userid_mark\">userid_mark</a></li>\n<li><a href=\"#userid_name\">userid_name</a></li>\n<li><a href=\"#userid_p3p\">userid_p3p</a></li>\n<li><a href=\"#userid_path\">userid_path</a></li>\n<li><a href=\"#userid_service\">userid_service</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_userid_module</code> module sets cookies suitable for client identification. Received and set cookies can be logged using the embedded variables <a href=\"#var_uid_got\">$uid_got</a> and <a href=\"#var_uid_set\">$uid_set</a>. This module is compatible with the <a href=\"http://www.lexa.ru/programs/mod-uid-eng.html\">mod_uid</a> module for Apache. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nuserid         on;\nuserid_name    uid;\nuserid_domain  example.com;\nuserid_path    /;\nuserid_expires 365d;\nuserid_p3p     'policyref=\"/w3c/p3p.xml\", CP=\"CUR ADM OUR NOR STA NID\"';\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"userid\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>userid</strong> \n    <code>on</code> |\n    <code>v1</code> |\n    <code>log</code> |\n    <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>userid off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables setting cookies and logging the received cookies: </p> <dl class=\"compact\"> <dt><code>on</code></dt> <dd> enables the setting of version 2 cookies and logging of the received cookies; </dd> <dt><code>v1</code></dt> <dd> enables the setting of version 1 cookies and logging of the received cookies; </dd> <dt><code>log</code></dt> <dd> disables the setting of cookies, but enables logging of the received cookies; </dd> <dt><code>off</code></dt> <dd> disables the setting of cookies and logging of the received cookies. </dd> </dl>\n\n<div class=\"directive\" id=\"userid_domain\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>userid_domain</strong> <code><i>name</i></code> | <code>none</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>userid_domain none;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a domain for which the cookie is set. The <code>none</code> parameter disables setting of a domain for the cookie. </p>\n<div class=\"directive\" id=\"userid_expires\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>userid_expires</strong> <code><i>time</i></code> | <code>max</code> |\n    <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>userid_expires off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a time during which a browser should keep the cookie. The parameter <code>max</code> will cause the cookie to expire on “<code>31 Dec 2037 23:55:55 GMT</code>”. The parameter <code>off</code> will cause the cookie to expire at the end of a browser session. </p>\n<div class=\"directive\" id=\"userid_mark\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>userid_mark</strong> \n    <code><i>letter</i></code> | <code><i>digit</i></code> |\n    <code>=</code> |\n    <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>userid_mark off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> If the parameter is not <code>off</code>, enables the cookie marking mechanism and sets the character used as a mark. This mechanism is used to add or change <a href=\"#userid_p3p\">userid_p3p</a> and/or a cookie expiration time while preserving the client identifier. A mark can be any letter of the English alphabet (case-sensitive), digit, or the “<code>=</code>” character. </p>\n<p> If the mark is set, it is compared with the first padding symbol in the base64 representation of the client identifier passed in a cookie. If they do not match, the cookie is resent with the specified mark, expiration time, and “P3P” header. </p>\n<div class=\"directive\" id=\"userid_name\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>userid_name</strong> <code><i>name</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>userid_name uid;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the cookie name. </p>\n<div class=\"directive\" id=\"userid_p3p\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>userid_p3p</strong> <code><i>string</i></code> | <code>none</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>userid_p3p none;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a value for the “P3P” header field that will be sent along with the cookie. If the directive is set to the special value <code>none</code>, the “P3P” header will not be sent in a response. </p>\n<div class=\"directive\" id=\"userid_path\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>userid_path</strong> <code><i>path</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>userid_path /;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a path for which the cookie is set. </p>\n<div class=\"directive\" id=\"userid_service\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>userid_service</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>userid_service IP address of the server;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> If identifiers are issued by multiple servers (services), each service should be assigned its own <code><i>number</i></code> to ensure that client identifiers are unique. For version 1 cookies, the default value is zero. For version 2 cookies, the default value is the number composed from the last four octets of the server’s IP address. </p> <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_userid_module</code> module supports the following embedded variables: </p> <dl class=\"compact\"> <dt id=\"var_uid_got\"><code>$uid_got</code></dt> <dd> The cookie name and received client identifier. </dd> <dt id=\"var_uid_reset\"><code>$uid_reset</code></dt> <dd> If the variable is set to a non-empty string that is not “<code>0</code>”, the client identifiers are reset. The special value “<code>log</code>” additionally leads to the output of messages about the reset identifiers to the <a href=\"../ngx_core_module#error_log\">error_log</a>. </dd> <dt id=\"var_uid_set\"><code>$uid_set</code></dt> <dd> The cookie name and sent client identifier. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_userid_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_userid_module.html</a>\n  </p>\n</div>\n","http/ngx_http_v2_module":"<h1>Module ngx_http_v2_module</h1>\n<ul>\n<li><a href=\"#issues\">Known Issues</a></li>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#http2_chunk_size\">http2_chunk_size</a></li>\n<li><a href=\"#http2_body_preread_size\">http2_body_preread_size</a></li>\n<li><a href=\"#http2_idle_timeout\">http2_idle_timeout</a></li>\n<li><a href=\"#http2_max_concurrent_streams\">http2_max_concurrent_streams</a></li>\n<li><a href=\"#http2_max_field_size\">http2_max_field_size</a></li>\n<li><a href=\"#http2_max_header_size\">http2_max_header_size</a></li>\n<li><a href=\"#http2_recv_buffer_size\">http2_recv_buffer_size</a></li>\n<li><a href=\"#http2_recv_timeout\">http2_recv_timeout</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_v2_module</code> module (1.9.5) provides support for <a href=\"https://tools.ietf.org/html/rfc7540\">HTTP/2</a> and supersedes the <a href=\"ngx_http_spdy_module\">ngx_http_spdy_module</a> module. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_v2_module</code> configuration parameter. </p> <h4 id=\"issues\">Known Issues</h4>\n<p> The module is experimental, caveat emptor applies. </p>\n<p> Before version 1.9.14, buffering of a client request body could not be disabled regardless of <a href=\"ngx_http_proxy_module#proxy_request_buffering\">proxy_request_buffering</a>, <a href=\"ngx_http_fastcgi_module#fastcgi_request_buffering\">fastcgi_request_buffering</a>, <a href=\"ngx_http_uwsgi_module#uwsgi_request_buffering\">uwsgi_request_buffering</a>, and <a href=\"ngx_http_scgi_module#scgi_request_buffering\">scgi_request_buffering</a> directive values. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nserver {\n    listen 443 ssl http2;\n\n    ssl_certificate server.crt;\n    ssl_certificate_key server.key;\n}\n</pre>\n<p> Note that accepting HTTP/2 connections over TLS requires the “Application-Layer Protocol Negotiation” (ALPN) TLS extension support, which is available only since <a href=\"http://www.openssl.org\">OpenSSL</a> version 1.0.2. Using the “Next Protocol Negotiation” (NPN) TLS extension for this purpose (available since OpenSSL version 1.0.1) is not guaranteed. </p>\n<p> Also note that if the <a href=\"ngx_http_ssl_module#ssl_prefer_server_ciphers\">ssl_prefer_server_ciphers</a> directive is set to the value “<code>on</code>”, the <a href=\"ngx_http_ssl_module#ssl_ciphers\">ciphers</a> should be configured to comply with <a href=\"https://tools.ietf.org/html/rfc7540#appendix-A\">RFC 7540, Appendix A</a> black list and supported by clients. </p> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"http2_chunk_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>http2_chunk_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>http2_chunk_size 8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the maximum size of chunks into which the response body is sliced. A too low value results in higher overhead. A too high value impairs prioritization due to <a href=\"http://en.wikipedia.org/wiki/Head-of-line_blocking\"> HOL blocking</a>. </p>\n<div class=\"directive\" id=\"http2_body_preread_size\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>http2_body_preread_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>http2_body_preread_size 64k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.11.0. </p>\n</div>\n<p> Sets the <code><i>size</i></code> of the buffer per each request in which the request body may be saved before it is started to be processed. </p>\n<div class=\"directive\" id=\"http2_idle_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>http2_idle_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>http2_idle_timeout 3m;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the timeout of inactivity after which the connection is closed. </p>\n<div class=\"directive\" id=\"http2_max_concurrent_streams\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>http2_max_concurrent_streams</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>http2_max_concurrent_streams 128;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the maximum number of concurrent HTTP/2 streams in a connection. </p>\n<div class=\"directive\" id=\"http2_max_field_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>http2_max_field_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>http2_max_field_size 4k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Limits the maximum size of an <a href=\"http://tools.ietf.org/html/rfc7541\">HPACK</a>-compressed request header field. The limit applies equally to both name and value. Note that if Huffman encoding is applied, the actual size of decompressed name and value strings may be larger. For most requests, the default limit should be enough. </p>\n<div class=\"directive\" id=\"http2_max_header_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>http2_max_header_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>http2_max_header_size 16k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Limits the maximum size of the entire request header list after <a href=\"http://tools.ietf.org/html/rfc7541\">HPACK</a> decompression. For most requests, the default limit should be enough. </p>\n<div class=\"directive\" id=\"http2_recv_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>http2_recv_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>http2_recv_buffer_size 256k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets the size of the per <a href=\"../ngx_core_module#worker_processes\">worker</a> input buffer. </p>\n<div class=\"directive\" id=\"http2_recv_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>http2_recv_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>http2_recv_timeout 30s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the timeout for expecting more data from the client, after which the connection is closed. </p> <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_v2_module</code> module supports the following embedded variables: </p> <dl> <dt id=\"var_http2\"><code>$http2</code></dt> <dd> negotiated protocol identifier: “<code>h2</code>” for HTTP/2 over TLS, “<code>h2c</code>” for HTTP/2 over cleartext TCP, or an empty string otherwise. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_v2_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_v2_module.html</a>\n  </p>\n</div>\n","http/ngx_http_xslt_module":"<h1>Module ngx_http_xslt_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#xml_entities\">xml_entities</a></li>\n<li><a href=\"#xslt_last_modified\">xslt_last_modified</a></li>\n<li><a href=\"#xslt_param\">xslt_param</a></li>\n<li><a href=\"#xslt_string_param\">xslt_string_param</a></li>\n<li><a href=\"#xslt_stylesheet\">xslt_stylesheet</a></li>\n<li><a href=\"#xslt_types\">xslt_types</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_xslt_module</code> (0.7.8+) is a filter that transforms XML responses using one or more XSLT stylesheets. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-http_xslt_module</code> configuration parameter. </p> <blockquote class=\"note\"> This module requires the <a href=\"http://xmlsoft.org\">libxml2</a> and <a href=\"http://xmlsoft.org/XSLT/\">libxslt</a> libraries. </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    xml_entities    /site/dtd/entities.dtd;\n    xslt_stylesheet /site/xslt/one.xslt param=value;\n    xslt_stylesheet /site/xslt/two.xslt;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"xml_entities\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>xml_entities</strong> <code><i>path</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Specifies the DTD file that declares character entities. This file is compiled at the configuration stage. For technical reasons, the module is unable to use the external subset declared in the processed XML, so it is ignored and a specially defined file is used instead. This file should not describe the XML structure. It is enough to declare just the required character entities, for example: </p> <pre data-language=\"nginx\">\n&lt;!ENTITY nbsp \"&amp;#xa0;\"&gt;\n</pre>\n\n<div class=\"directive\" id=\"xslt_last_modified\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>xslt_last_modified</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>xslt_last_modified off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.1. </p>\n</div>\n<p> Allows preserving the “Last-Modified” header field from the original response during XSLT transformations to facilitate response caching. </p>\n<p> By default, the header field is removed as contents of the response are modified during transformations and may contain dynamically generated elements or parts that are changed independently of the original response. </p>\n<div class=\"directive\" id=\"xslt_param\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>xslt_param</strong> <code><i>parameter</i></code> <code><i>value</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.18. </p>\n</div>\n<p> Defines the parameters for XSLT stylesheets. The <code><i>value</i></code> is treated as an XPath expression. The <code><i>value</i></code> can contain variables. To pass a string value to a stylesheet, the <a href=\"#xslt_string_param\">xslt_string_param</a> directive can be used. </p>\n<p> There could be several <code>xslt_param</code> directives. These directives are inherited from the previous level if and only if there are no <code>xslt_param</code> and <a href=\"#xslt_string_param\">xslt_string_param</a> directives defined on the current level. </p>\n<div class=\"directive\" id=\"xslt_string_param\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>xslt_string_param</strong> <code><i>parameter</i></code> <code><i>value</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.18. </p>\n</div>\n<p> Defines the string parameters for XSLT stylesheets. XPath expressions in the <code><i>value</i></code> are not interpreted. The <code><i>value</i></code> can contain variables. </p>\n<p> There could be several <code>xslt_string_param</code> directives. These directives are inherited from the previous level if and only if there are no <a href=\"#xslt_param\">xslt_param</a> and <code>xslt_string_param</code> directives defined on the current level. </p>\n<div class=\"directive\" id=\"xslt_stylesheet\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>xslt_stylesheet</strong> \n    <code><i>stylesheet</i></code>\n    [<code><i>parameter</i></code>=<code><i>value</i></code> ...];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Defines the XSLT stylesheet and its optional parameters. A stylesheet is compiled at the configuration stage. </p>\n<p> Parameters can either be specified separately, or grouped in a single line using the “<code>:</code>” delimiter. If a parameter includes the “<code>:</code>” character, it should be escaped as “<code>%3A</code>”. Also, <code>libxslt</code> requires to enclose parameters that contain non-alphanumeric characters into single or double quotes, for example: </p> <pre data-language=\"nginx\">\nparam1='http%3A//www.example.com':param2=value2\n</pre>\n\n<p> The parameters description can contain variables, for example, the whole line of parameters can be taken from a single variable: </p> <pre data-language=\"nginx\">\nlocation / {\n    xslt_stylesheet /site/xslt/one.xslt\n                    $arg_xslt_params\n                    param1='$value1':param2=value2\n                    param3=value3;\n}\n</pre>\n\n<p> It is possible to specify several stylesheets. They will be applied sequentially in the specified order. </p>\n<div class=\"directive\" id=\"xslt_types\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>xslt_types</strong> <code><i>mime-type</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>xslt_types text/xml;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables transformations in responses with the specified MIME types in addition to “<code>text/xml</code>”. The special value “<code>*</code>” matches any MIME type (0.8.29). If the transformation result is an HTML response, its MIME type is changed to “<code>text/html</code>”. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_xslt_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_xslt_module.html</a>\n  </p>\n</div>\n","mail/ngx_mail_auth_http_module":"<h1>Module ngx_mail_auth_http_module</h1>\n<ul>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#auth_http\">auth_http</a></li>\n<li><a href=\"#auth_http_header\">auth_http_header</a></li>\n<li><a href=\"#auth_http_pass_client_cert\">auth_http_pass_client_cert</a></li>\n<li><a href=\"#auth_http_timeout\">auth_http_timeout</a></li>\n<li><a href=\"#protocol\">Protocol</a></li>\n</ul> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"auth_http\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>auth_http</strong> <code><i>URL</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the URL of the HTTP authentication server. The protocol is described <a href=\"#protocol\">below</a>. </p>\n<div class=\"directive\" id=\"auth_http_header\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>auth_http_header</strong> <code><i>header</i></code> <code><i>value</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Appends the specified header to requests sent to the authentication server. This header can be used as the shared secret to verify that the request comes from nginx. For example: </p> <pre data-language=\"nginx\">\nauth_http_header X-Auth-Key \"secret_string\";\n</pre>\n\n<div class=\"directive\" id=\"auth_http_pass_client_cert\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>auth_http_pass_client_cert</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>auth_http_pass_client_cert off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.11. </p>\n</div>\n<p> Appends the “Auth-SSL-Cert” header with the <a href=\"ngx_mail_ssl_module#ssl_verify_client\">client</a> certificate in the PEM format (urlencoded) to requests sent to the authentication server. </p>\n<div class=\"directive\" id=\"auth_http_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>auth_http_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>auth_http_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the timeout for communication with the authentication server. </p> <h4 id=\"protocol\">Protocol</h4>\n<p> The HTTP protocol is used to communicate with the authentication server. The data in the response body is ignored, the information is passed only in the headers. </p>\n<p> Examples of requests and responses: </p>\n<p> Request: </p> <pre data-language=\"nginx\">\nGET /auth HTTP/1.0\nHost: localhost\nAuth-Method: plain # plain/apop/cram-md5\nAuth-User: user\nAuth-Pass: password\nAuth-Protocol: imap # imap/pop3/smtp\nAuth-Login-Attempt: 1\nClient-IP: 192.0.2.42\nClient-Host: client.example.org\n</pre>\n<p> Good response: </p> <pre data-language=\"nginx\">\nHTTP/1.0 200 OK\nAuth-Status: OK\nAuth-Server: 198.51.100.1\nAuth-Port: 143\n</pre>\n<p> Bad response: </p> <pre data-language=\"nginx\">\nHTTP/1.0 200 OK\nAuth-Status: Invalid login or password\nAuth-Wait: 3\n</pre>\n\n<p> If there is no “Auth-Wait” header, an error will be returned and the connection will be closed. The current implementation allocates memory for each authentication attempt. The memory is freed only at the end of a session. Therefore, the number of invalid authentication attempts in a single session must be limited — the server must respond without the “Auth-Wait” header after 10-20 attempts (the attempt number is passed in the “Auth-Login-Attempt” header). </p>\n<p> When the APOP or CRAM-MD5 are used, request-response will look as follows: </p> <pre data-language=\"nginx\">\nGET /auth HTTP/1.0\nHost: localhost\nAuth-Method: apop\nAuth-User: user\nAuth-Salt: &lt;238188073.1163692009@mail.example.com&gt;\nAuth-Pass: auth_response\nAuth-Protocol: imap\nAuth-Login-Attempt: 1\nClient-IP: 192.0.2.42\nClient-Host: client.example.org\n</pre>\n<p> Good response: </p> <pre data-language=\"nginx\">\nHTTP/1.0 200 OK\nAuth-Status: OK\nAuth-Server: 198.51.100.1\nAuth-Port: 143\nAuth-Pass: plain-text-pass\n</pre>\n\n<p> If the “Auth-User” header exists in the response, it overrides the username used to authenticate with the backend. </p>\n<p> For the SMTP, the response additionally takes into account the “Auth-Error-Code” header — if exists, it is used as a response code in case of an error. Otherwise, the 535 5.7.0 code will be added to the “Auth-Status” header. </p>\n<p> For example, if the following response is received from the authentication server: </p> <pre data-language=\"nginx\">\nHTTP/1.0 200 OK\nAuth-Status: Temporary server problem, try again later\nAuth-Error-Code: 451 4.3.0\nAuth-Wait: 3\n</pre>\n<p> then the SMTP client will receive an error </p> <pre data-language=\"nginx\">\n451 4.3.0 Temporary server problem, try again later\n</pre>\n\n<p> If proxying SMTP does not require authentication, the request will look as follows: </p> <pre data-language=\"nginx\">\nGET /auth HTTP/1.0\nHost: localhost\nAuth-Method: none\nAuth-User:\nAuth-Pass:\nAuth-Protocol: smtp\nAuth-Login-Attempt: 1\nClient-IP: 192.0.2.42\nClient-Host: client.example.org\nAuth-SMTP-Helo: client.example.org\nAuth-SMTP-From: MAIL FROM: &lt;&gt;\nAuth-SMTP-To: RCPT TO: &lt;postmaster@mail.example.com&gt;\n</pre>\n\n<p> For the SSL/TLS client connection (1.7.11), the “Auth-SSL” header is added, and “Auth-SSL-Verify” will contain the result of client certificate verification, if <a href=\"ngx_mail_ssl_module#ssl_verify_client\">enabled</a>: “<code>SUCCESS</code>”, “<code>FAILED</code>”, and “<code>NONE</code>” if a certificate was not present. When the client certificate was present, its details are passed in the following request headers: “Auth-SSL-Subject”, “Auth-SSL-Issuer”, “Auth-SSL-Serial”, and “Auth-SSL-Fingerprint”. If <a href=\"#auth_http_pass_client_cert\">auth_http_pass_client_cert</a> is enabled, the certificate itself is passed in the “Auth-SSL-Cert” header. The request will look as follows: </p> <pre data-language=\"nginx\">\nGET /auth HTTP/1.0\nHost: localhost\nAuth-Method: plain\nAuth-User: user\nAuth-Pass: password\nAuth-Protocol: imap\nAuth-Login-Attempt: 1\nClient-IP: 192.0.2.42\nAuth-SSL: on\nAuth-SSL-Verify: SUCCESS\nAuth-SSL-Subject: /CN=example.com\nAuth-SSL-Issuer: /CN=example.com\nAuth-SSL-Serial: C07AD56B846B5BFF\nAuth-SSL-Fingerprint: 29d6a80a123d13355ed16b4b04605e29cb55a5ad\n</pre>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/mail/ngx_mail_auth_http_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/mail/ngx_mail_auth_http_module.html</a>\n  </p>\n</div>\n","mail/ngx_mail_proxy_module":"<h1>Module ngx_mail_proxy_module</h1>\n<ul>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#proxy_buffer\">proxy_buffer</a></li>\n<li><a href=\"#proxy_pass_error_message\">proxy_pass_error_message</a></li>\n<li><a href=\"#proxy_timeout\">proxy_timeout</a></li>\n<li><a href=\"#xclient\">xclient</a></li>\n</ul> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"proxy_buffer\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_buffer</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_buffer 4k|8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the size of the buffer used for proxying. By default, the buffer size is equal to one memory page. Depending on a platform, it is either 4K or 8K. </p>\n<div class=\"directive\" id=\"proxy_pass_error_message\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_pass_error_message</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_pass_error_message off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Indicates whether to pass the error message obtained during the authentication on the backend to the client. </p>\n<p> Usually, if the authentication in nginx is a success, the backend cannot return an error. If it nevertheless returns an error, it means some internal error has occurred. In such case the backend message can contain information that should not be shown to the client. However, responding with an error for the correct password is a normal behavior for some POP3 servers. For example, CommuniGatePro informs a user about <a href=\"http://www.stalker.com/CommuniGatePro/Alerts.html#Quota\">mailbox overflow</a> or other events by periodically outputting the <a href=\"http://www.stalker.com/CommuniGatePro/POP.html#Alerts\">authentication error</a>. The directive should be enabled in this case. </p>\n<div class=\"directive\" id=\"proxy_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_timeout</strong> <code><i>timeout</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_timeout 24h;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>timeout</i></code> between two successive read or write operations on client or proxied server connections. If no data is transmitted within this time, the connection is closed. </p>\n<div class=\"directive\" id=\"xclient\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>xclient</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>xclient on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables or disables the passing of the <a href=\"http://www.postfix.org/XCLIENT_README.html\">XCLIENT</a> command with client parameters when connecting to the SMTP backend. </p>\n<p> With <code>XCLIENT</code>, the MTA is able to write client information to the log and apply various limitations based on this data. </p>\n<p> If <code>XCLIENT</code> is enabled then nginx passes the following commands when connecting to the backend: </p> <ul class=\"compact\"> <li> <code>EHLO</code> with the <a href=\"ngx_mail_core_module#server_name\">server name</a> </li> <li> <code>\nXCLIENT\n</code> </li> <li> <code>EHLO</code> or <code>HELO</code>, as passed by the client </li> </ul>\n\n<p> If the name <a href=\"ngx_mail_core_module#resolver\">found</a> by the client IP address points to the same address, it is passed in the <code>NAME</code> parameter of the <code>XCLIENT</code> command. If the name could not be found, points to a different address, or <a href=\"ngx_mail_core_module#resolver\">resolver</a> is not specified, the <code>[UNAVAILABLE]</code> is passed in the <code>NAME</code> parameter. If an error has occurred in the process of resolving, the <code>[TEMPUNAVAIL]</code> value is used. </p>\n<p> If <code>XCLIENT</code> is disabled then nginx passes the <code>EHLO</code> command with the <a href=\"ngx_mail_core_module#server_name\">server name</a> when connecting to the backend if the client has passed <code>EHLO</code>, or <code>HELO</code> with the server name, otherwise. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/mail/ngx_mail_proxy_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/mail/ngx_mail_proxy_module.html</a>\n  </p>\n</div>\n","mail/ngx_mail_imap_module":"<h1>Module ngx_mail_imap_module</h1>\n<ul>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#imap_auth\">imap_auth</a></li>\n<li><a href=\"#imap_capabilities\">imap_capabilities</a></li>\n<li><a href=\"#imap_client_buffer\">imap_client_buffer</a></li>\n</ul> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"imap_auth\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>imap_auth</strong> <code><i>method</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>imap_auth plain;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets permitted methods of authentication for IMAP clients. Supported methods are: </p> <dl class=\"compact\"> <dt><code>login</code></dt> <dd> <a href=\"http://tools.ietf.org/html/draft-murchison-sasl-login-00\">AUTH=LOGIN</a> </dd> <dt><code>plain</code></dt> <dd> <a href=\"http://tools.ietf.org/html/rfc4616\">AUTH=PLAIN</a> </dd> <dt><code>cram-md5</code></dt> <dd> <a href=\"http://tools.ietf.org/html/rfc2195\">AUTH=CRAM-MD5</a>. In order for this method to work, the password must be stored unencrypted. </dd> </dl>\n\n<div class=\"directive\" id=\"imap_capabilities\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>imap_capabilities</strong> <code><i>extension</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>imap_capabilities IMAP4 IMAP4rev1 UIDPLUS;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the <a href=\"http://tools.ietf.org/html/rfc3501\">IMAP protocol</a> extensions list that is passed to the client in response to the <code>CAPABILITY</code> command. The authentication methods specified in the <a href=\"#imap_auth\">imap_auth</a> and <a href=\"http://tools.ietf.org/html/rfc2595\">STARTTLS</a> directives are automatically added to this list if the <a href=\"ngx_mail_ssl_module#starttls\">starttls</a> directive is enabled. </p>\n<p> It makes sense to specify the extensions supported by the IMAP backends to which the clients are proxied (if these extensions are related to commands used after the authentication, when nginx transparently proxies a client connection to the backend). </p>\n<p> The current list of standardized extensions is published at <a href=\"http://www.iana.org/assignments/imap4-capabilities\">www.iana.org</a>. </p>\n<div class=\"directive\" id=\"imap_client_buffer\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>imap_client_buffer</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>imap_client_buffer 4k|8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the IMAP commands read buffer size. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/mail/ngx_mail_imap_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/mail/ngx_mail_imap_module.html</a>\n  </p>\n</div>\n","mail/ngx_mail_pop3_module":"<h1>Module ngx_mail_pop3_module</h1>\n<ul>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#pop3_auth\">pop3_auth</a></li>\n<li><a href=\"#pop3_capabilities\">pop3_capabilities</a></li>\n</ul> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"pop3_auth\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>pop3_auth</strong> <code><i>method</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>pop3_auth plain;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets permitted methods of authentication for POP3 clients. Supported methods are: </p> <dl class=\"compact\"> <dt><code>plain</code></dt> <dd> <a href=\"http://tools.ietf.org/html/rfc1939\">USER/PASS</a>, <a href=\"http://tools.ietf.org/html/rfc4616\">AUTH PLAIN</a>, <a href=\"http://tools.ietf.org/html/draft-murchison-sasl-login-00\">AUTH LOGIN</a>. It is not possible to disable these methods. </dd> <dt><code>apop</code></dt> <dd> <a href=\"http://tools.ietf.org/html/rfc1939\">APOP</a>. In order for this method to work, the password must be stored unencrypted. </dd> <dt><code>cram-md5</code></dt> <dd> <a href=\"http://tools.ietf.org/html/rfc2195\">AUTH CRAM-MD5</a>. In order for this method to work, the password must be stored unencrypted. </dd> </dl>\n\n<div class=\"directive\" id=\"pop3_capabilities\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>pop3_capabilities</strong> <code><i>extension</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>pop3_capabilities TOP USER UIDL;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the <a href=\"http://tools.ietf.org/html/rfc2449\">POP3 protocol</a> extensions list that is passed to the client in response to the <code>CAPA</code> command. The authentication methods specified in the <a href=\"#pop3_auth\">pop3_auth</a> and (<a href=\"http://tools.ietf.org/html/rfc2449\">SASL</a> extension) and <a href=\"http://tools.ietf.org/html/rfc2595\">STLS</a> directives, are automatically added to this list if the <a href=\"ngx_mail_ssl_module#starttls\">starttls</a> directive is enabled. </p>\n<p> It makes sense to specify the extensions supported by the POP3 backends to which the clients are proxied (if these extensions are related to commands used after the authentication, when nginx transparently proxies the client connection to the backend). </p>\n<p> The current list of standardized extensions is published at <a href=\"http://www.iana.org/assignments/pop3-extension-mechanism\">www.iana.org</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/mail/ngx_mail_pop3_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/mail/ngx_mail_pop3_module.html</a>\n  </p>\n</div>\n","mail/ngx_mail_smtp_module":"<h1>Module ngx_mail_smtp_module</h1>\n<ul>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#smtp_auth\">smtp_auth</a></li>\n<li><a href=\"#smtp_capabilities\">smtp_capabilities</a></li>\n</ul> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"smtp_auth\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>smtp_auth</strong> <code><i>method</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>smtp_auth login plain;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets permitted methods of <a href=\"http://tools.ietf.org/html/rfc2554\">SASL authentication</a> for SMTP clients. Supported methods are: </p> <dl class=\"compact\"> <dt><code>login</code></dt> <dd> <a href=\"http://tools.ietf.org/html/draft-murchison-sasl-login-00\">AUTH LOGIN</a> </dd> <dt><code>plain</code></dt> <dd> <a href=\"http://tools.ietf.org/html/rfc4616\">AUTH PLAIN</a> </dd> <dt><code>cram-md5</code></dt> <dd> <a href=\"http://tools.ietf.org/html/rfc2195\">AUTH CRAM-MD5</a>. In order for this method to work, the password must be stored unencrypted. </dd> <dt><code>none</code></dt> <dd> Authentication is not required. </dd> </dl>\n\n<div class=\"directive\" id=\"smtp_capabilities\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>smtp_capabilities</strong> <code><i>extension</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the SMTP protocol extensions list that is passed to the client in response to the <code>EHLO</code> command. Authentication methods specified in the <a href=\"#smtp_auth\">smtp_auth</a> directive are automatically added to this list. </p>\n<p> It makes sense to specify the extensions supported by the MTA to which the clients are proxied (if these extensions are related to commands used after the authentication, when nginx transparently proxies the client connection to the backend). </p>\n<p> The current list of standardized extensions is published at <a href=\"http://www.iana.org/assignments/mail-parameters\">www.iana.org</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/mail/ngx_mail_smtp_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/mail/ngx_mail_smtp_module.html</a>\n  </p>\n</div>\n","stream/ngx_stream_access_module":"<h1>Module ngx_stream_access_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#allow\">allow</a></li>\n<li><a href=\"#deny\">deny</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_stream_access_module</code> module (1.9.2) allows limiting access to certain client addresses. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nserver {\n    ...\n    deny  192.168.1.1;\n    allow 192.168.1.0/24;\n    allow 10.1.1.0/16;\n    allow 2001:0db8::/32;\n    deny  all;\n}\n</pre>\n\n<p> The rules are checked in sequence until the first match is found. In this example, access is allowed only for IPv4 networks <code>10.1.1.0/16</code> and <code>192.168.1.0/24</code> excluding the address <code>192.168.1.1</code>, and for IPv6 network <code>2001:0db8::/32</code>. </p> <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"allow\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>allow</strong> \n    <code><i>address</i></code> |\n    <code><i>CIDR</i></code> |\n    <code>unix:</code> |\n    <code>all</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Allows access for the specified network or address. If the special value <code>unix:</code> is specified, allows access for all UNIX-domain sockets. </p>\n<div class=\"directive\" id=\"deny\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>deny</strong> \n    <code><i>address</i></code> |\n    <code><i>CIDR</i></code> |\n    <code>unix:</code> |\n    <code>all</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Denies access for the specified network or address. If the special value <code>unix:</code> is specified, denies access for all UNIX-domain sockets. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/stream/ngx_stream_access_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/stream/ngx_stream_access_module.html</a>\n  </p>\n</div>\n","http/ngx_http_proxy_module":"<h1>Module ngx_http_proxy_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#proxy_bind\">proxy_bind</a></li>\n<li><a href=\"#proxy_buffer_size\">proxy_buffer_size</a></li>\n<li><a href=\"#proxy_buffering\">proxy_buffering</a></li>\n<li><a href=\"#proxy_buffers\">proxy_buffers</a></li>\n<li><a href=\"#proxy_busy_buffers_size\">proxy_busy_buffers_size</a></li>\n<li><a href=\"#proxy_cache\">proxy_cache</a></li>\n<li><a href=\"#proxy_cache_bypass\">proxy_cache_bypass</a></li>\n<li><a href=\"#proxy_cache_convert_head\">proxy_cache_convert_head</a></li>\n<li><a href=\"#proxy_cache_key\">proxy_cache_key</a></li>\n<li><a href=\"#proxy_cache_lock\">proxy_cache_lock</a></li>\n<li><a href=\"#proxy_cache_lock_age\">proxy_cache_lock_age</a></li>\n<li><a href=\"#proxy_cache_lock_timeout\">proxy_cache_lock_timeout</a></li>\n<li><a href=\"#proxy_cache_methods\">proxy_cache_methods</a></li>\n<li><a href=\"#proxy_cache_min_uses\">proxy_cache_min_uses</a></li>\n<li><a href=\"#proxy_cache_path\">proxy_cache_path</a></li>\n<li><a href=\"#proxy_cache_purge\">proxy_cache_purge</a></li>\n<li><a href=\"#proxy_cache_revalidate\">proxy_cache_revalidate</a></li>\n<li><a href=\"#proxy_cache_use_stale\">proxy_cache_use_stale</a></li>\n<li><a href=\"#proxy_cache_valid\">proxy_cache_valid</a></li>\n<li><a href=\"#proxy_connect_timeout\">proxy_connect_timeout</a></li>\n<li><a href=\"#proxy_cookie_domain\">proxy_cookie_domain</a></li>\n<li><a href=\"#proxy_cookie_path\">proxy_cookie_path</a></li>\n<li><a href=\"#proxy_force_ranges\">proxy_force_ranges</a></li>\n<li><a href=\"#proxy_headers_hash_bucket_size\">proxy_headers_hash_bucket_size</a></li>\n<li><a href=\"#proxy_headers_hash_max_size\">proxy_headers_hash_max_size</a></li>\n<li><a href=\"#proxy_hide_header\">proxy_hide_header</a></li>\n<li><a href=\"#proxy_http_version\">proxy_http_version</a></li>\n<li><a href=\"#proxy_ignore_client_abort\">proxy_ignore_client_abort</a></li>\n<li><a href=\"#proxy_ignore_headers\">proxy_ignore_headers</a></li>\n<li><a href=\"#proxy_intercept_errors\">proxy_intercept_errors</a></li>\n<li><a href=\"#proxy_limit_rate\">proxy_limit_rate</a></li>\n<li><a href=\"#proxy_max_temp_file_size\">proxy_max_temp_file_size</a></li>\n<li><a href=\"#proxy_method\">proxy_method</a></li>\n<li><a href=\"#proxy_next_upstream\">proxy_next_upstream</a></li>\n<li><a href=\"#proxy_next_upstream_timeout\">proxy_next_upstream_timeout</a></li>\n<li><a href=\"#proxy_next_upstream_tries\">proxy_next_upstream_tries</a></li>\n<li><a href=\"#proxy_no_cache\">proxy_no_cache</a></li>\n<li><a href=\"#proxy_pass\">proxy_pass</a></li>\n<li><a href=\"#proxy_pass_header\">proxy_pass_header</a></li>\n<li><a href=\"#proxy_pass_request_body\">proxy_pass_request_body</a></li>\n<li><a href=\"#proxy_pass_request_headers\">proxy_pass_request_headers</a></li>\n<li><a href=\"#proxy_read_timeout\">proxy_read_timeout</a></li>\n<li><a href=\"#proxy_redirect\">proxy_redirect</a></li>\n<li><a href=\"#proxy_request_buffering\">proxy_request_buffering</a></li>\n<li><a href=\"#proxy_send_lowat\">proxy_send_lowat</a></li>\n<li><a href=\"#proxy_send_timeout\">proxy_send_timeout</a></li>\n<li><a href=\"#proxy_set_body\">proxy_set_body</a></li>\n<li><a href=\"#proxy_set_header\">proxy_set_header</a></li>\n<li><a href=\"#proxy_ssl_certificate\">proxy_ssl_certificate</a></li>\n<li><a href=\"#proxy_ssl_certificate_key\">proxy_ssl_certificate_key</a></li>\n<li><a href=\"#proxy_ssl_ciphers\">proxy_ssl_ciphers</a></li>\n<li><a href=\"#proxy_ssl_crl\">proxy_ssl_crl</a></li>\n<li><a href=\"#proxy_ssl_name\">proxy_ssl_name</a></li>\n<li><a href=\"#proxy_ssl_password_file\">proxy_ssl_password_file</a></li>\n<li><a href=\"#proxy_ssl_server_name\">proxy_ssl_server_name</a></li>\n<li><a href=\"#proxy_ssl_session_reuse\">proxy_ssl_session_reuse</a></li>\n<li><a href=\"#proxy_ssl_protocols\">proxy_ssl_protocols</a></li>\n<li><a href=\"#proxy_ssl_trusted_certificate\">proxy_ssl_trusted_certificate</a></li>\n<li><a href=\"#proxy_ssl_verify\">proxy_ssl_verify</a></li>\n<li><a href=\"#proxy_ssl_verify_depth\">proxy_ssl_verify_depth</a></li>\n<li><a href=\"#proxy_store\">proxy_store</a></li>\n<li><a href=\"#proxy_store_access\">proxy_store_access</a></li>\n<li><a href=\"#proxy_temp_file_write_size\">proxy_temp_file_write_size</a></li>\n<li><a href=\"#proxy_temp_path\">proxy_temp_path</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_proxy_module</code> module allows passing requests to another server. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    proxy_pass       http://localhost:8000;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"proxy_bind\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_bind</strong> <code><i>address</i></code> [transparent] | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.8.22. </p>\n</div>\n<p> Makes outgoing connections to a proxied server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value <code>off</code> (1.3.12) cancels the effect of the <code>proxy_bind</code> directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port. </p>\n<p id=\"proxy_bind_transparent\"> The <code>transparent</code> parameter (1.11.0) allows outgoing connections to a proxied server originate from a non-local IP address, for example, from a real IP address of a client: </p> <pre data-language=\"nginx\">\nproxy_bind $remote_addr transparent;\n</pre>\n<p> In order for this parameter to work, it is necessary to run nginx worker processes with the <a href=\"../ngx_core_module#user\">superuser</a> privileges and configure kernel routing table to intercept network traffic from the proxied server. </p>\n<div class=\"directive\" id=\"proxy_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_buffer_size 4k|8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>size</i></code> of the buffer used for reading the first part of the response received from the proxied server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however. </p>\n<div class=\"directive\" id=\"proxy_buffering\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_buffering</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_buffering on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables buffering of responses from the proxied server. </p>\n<p> When buffering is enabled, nginx receives a response from the proxied server as soon as possible, saving it into the buffers set by the <a href=\"#proxy_buffer_size\">proxy_buffer_size</a> and <a href=\"#proxy_buffers\">proxy_buffers</a> directives. If the whole response does not fit into memory, a part of it can be saved to a <a href=\"#proxy_temp_path\">temporary file</a> on the disk. Writing to temporary files is controlled by the <a href=\"#proxy_max_temp_file_size\">proxy_max_temp_file_size</a> and <a href=\"#proxy_temp_file_write_size\">proxy_temp_file_write_size</a> directives. </p>\n<p> When buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the proxied server. The maximum size of the data that nginx can receive from the server at a time is set by the <a href=\"#proxy_buffer_size\">proxy_buffer_size</a> directive. </p>\n<p> Buffering can also be enabled or disabled by passing “<code>yes</code>” or “<code>no</code>” in the “X-Accel-Buffering” response header field. This capability can be disabled using the <a href=\"#proxy_ignore_headers\">proxy_ignore_headers</a> directive. </p>\n<div class=\"directive\" id=\"proxy_buffers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_buffers</strong> <code><i>number</i></code> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_buffers 8 4k|8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>number</i></code> and <code><i>size</i></code> of the buffers used for reading a response from the proxied server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. </p>\n<div class=\"directive\" id=\"proxy_busy_buffers_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_busy_buffers_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_busy_buffers_size 8k|16k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> When <a href=\"#proxy_buffering\">buffering</a> of responses from the proxied server is enabled, limits the total <code><i>size</i></code> of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, <code><i>size</i></code> is limited by the size of two buffers set by the <a href=\"#proxy_buffer_size\">proxy_buffer_size</a> and <a href=\"#proxy_buffers\">proxy_buffers</a> directives. </p>\n<div class=\"directive\" id=\"proxy_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache</strong> <code><i>zone</i></code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_cache off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The <code>off</code> parameter disables caching inherited from the previous configuration level. </p>\n<div class=\"directive\" id=\"proxy_cache_bypass\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_bypass</strong> <code><i>string</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache: </p> <pre data-language=\"nginx\">\nproxy_cache_bypass $cookie_nocache $arg_nocache$arg_comment;\nproxy_cache_bypass $http_pragma    $http_authorization;\n</pre>\n<p> Can be used along with the <a href=\"#proxy_no_cache\">proxy_no_cache</a> directive. </p>\n<div class=\"directive\" id=\"proxy_cache_convert_head\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_convert_head</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_cache_convert_head on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.7. </p>\n</div>\n<p> Enables or disables the conversion of the “<code>HEAD</code>” method to “<code>GET</code>” for caching. When the conversion is disabled, the <a href=\"#proxy_cache_key\">cache key</a> should be configured to include the <code>$request_method</code>. </p>\n<div class=\"directive\" id=\"proxy_cache_key\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_key</strong> <code><i>string</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_cache_key $scheme$proxy_host$request_uri;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a key for caching, for example </p> <pre data-language=\"nginx\">\nproxy_cache_key \"$host$request_uri $cookie_user\";\n</pre>\n<p> By default, the directive’s value is close to the string </p> <pre data-language=\"nginx\">\nproxy_cache_key $scheme$proxy_host$uri$is_args$args;\n</pre>\n\n<div class=\"directive\" id=\"proxy_cache_lock\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_lock</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_cache_lock off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.12. </p>\n</div>\n<p> When enabled, only one request at a time will be allowed to populate a new cache element identified according to the <a href=\"#proxy_cache_key\">proxy_cache_key</a> directive by passing a request to a proxied server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the <a href=\"#proxy_cache_lock_timeout\">proxy_cache_lock_timeout</a> directive. </p>\n<div class=\"directive\" id=\"proxy_cache_lock_age\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_lock_age</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_cache_lock_age 5s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.8. </p>\n</div>\n<p> If the last request passed to the proxied server for populating a new cache element has not completed for the specified <code><i>time</i></code>, one more request may be passed to the proxied server. </p>\n<div class=\"directive\" id=\"proxy_cache_lock_timeout\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_lock_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_cache_lock_timeout 5s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.12. </p>\n</div>\n<p> Sets a timeout for <a href=\"#proxy_cache_lock\">proxy_cache_lock</a>. When the <code><i>time</i></code> expires, the request will be passed to the proxied server, however, the response will not be cached. </p> <blockquote class=\"note\"> Before 1.7.8, the response could be cached. </blockquote>\n\n<div class=\"directive\" id=\"proxy_cache_methods\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_methods</strong> \n    <code>GET</code> |\n    <code>HEAD</code> |\n    <code>POST</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_cache_methods GET HEAD;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.7.59. </p>\n</div>\n<p> If the client request method is listed in this directive then the response will be cached. “<code>GET</code>” and “<code>HEAD</code>” methods are always added to the list, though it is recommended to specify them explicitly. See also the <a href=\"#proxy_no_cache\">proxy_no_cache</a> directive. </p>\n<div class=\"directive\" id=\"proxy_cache_min_uses\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_min_uses</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_cache_min_uses 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>number</i></code> of requests after which the response will be cached. </p>\n<div class=\"directive\" id=\"proxy_cache_path\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_path</strong> \n    <code><i>path</i></code>\n    [<code>levels</code>=<code><i>levels</i></code>]\n    [<code>use_temp_path</code>=<code>on</code>|<code>off</code>]\n    <code>keys_zone</code>=<code><i>name</i></code>:<code><i>size</i></code>\n    [<code>inactive</code>=<code><i>time</i></code>]\n    [<code>max_size</code>=<code><i>size</i></code>]\n    [<code>loader_files</code>=<code><i>number</i></code>]\n    [<code>loader_sleep</code>=<code><i>time</i></code>]\n    [<code>loader_threshold</code>=<code><i>time</i></code>]\n    [<code>purger</code>=<code>on</code>|<code>off</code>]\n    [<code>purger_files</code>=<code><i>number</i></code>]\n    [<code>purger_sleep</code>=<code><i>time</i></code>]\n    [<code>purger_threshold</code>=<code><i>time</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets the path and other parameters of a cache. Cache data are stored in files. The file name in a cache is a result of applying the MD5 function to the <a href=\"#proxy_cache_key\">cache key</a>. The <code>levels</code> parameter defines hierarchy levels of a cache. For example, in the following configuration </p> <pre data-language=\"nginx\">\nproxy_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;\n</pre>\n<p> file names in a cache will look like this: </p> <pre data-language=\"nginx\">\n/data/nginx/cache/<strong>c</strong>/<strong>29</strong>/b7f54b2df7773722d382f4809d650<strong>29c</strong>\n</pre>\n\n<p> A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. The directory for temporary files is set based on the <code>use_temp_path</code> parameter (1.7.10). If this parameter is omitted or set to the value <code>on</code>, the directory set by the <a href=\"#proxy_temp_path\">proxy_temp_path</a> directive for the given location will be used. If the value is set to <code>off</code>, temporary files will be put directly in the cache directory. </p>\n<p> In addition, all active keys and information about data are stored in a shared memory zone, whose <code><i>name</i></code> and <code><i>size</i></code> are configured by the <code>keys_zone</code> parameter. One megabyte zone can store about 8 thousand keys. </p>\n<p> Cached data that are not accessed during the time specified by the <code>inactive</code> parameter get removed from the cache regardless of their freshness. By default, <code>inactive</code> is set to 10 minutes. </p>\n<p> The special “cache manager” process monitors the maximum cache size set by the <code>max_size</code> parameter. When this size is exceeded, it removes the least recently used data. </p>\n<p> A minute after the start the special “cache loader” process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is done in iterations. During one iteration no more than <code>loader_files</code> items are loaded (by default, 100). Besides, the duration of one iteration is limited by the <code>loader_threshold</code> parameter (by default, 200 milliseconds). Between iterations, a pause configured by the <code>loader_sleep</code> parameter (by default, 50 milliseconds) is made. </p>\n<p> Additionally, the following parameters are available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>: </p>\n <dl class=\"compact\"> <dt id=\"purger\"> <code>purger</code>=<code>on</code>|<code>off</code> </dt> <dd> Instructs whether cache entries that match a <a href=\"#proxy_cache_purge\">wildcard key</a> will be removed from the disk by the cache purger (1.7.12). Setting the parameter to <code>on</code> (default is <code>off</code>) will activate the “cache purger” process that permanently iterates through all cache entries and deletes the entries that match the wildcard key. </dd> <dt id=\"purger_files\"> <code>purger_files</code>=<code><i>number</i></code> </dt> <dd> Sets the number of items that will be scanned during one iteration (1.7.12). By default, <code>purger_files</code> is set to 10. </dd> <dt id=\"purger_threshold\"> <code>purger_threshold</code>=<code><i>number</i></code> </dt> <dd> Sets the duration of one iteration (1.7.12). By default, <code>purger_threshold</code> is set to 50 milliseconds. </dd> <dt id=\"purger_sleep\"> <code>purger_sleep</code>=<code><i>number</i></code> </dt> <dd> Sets a pause between iterations (1.7.12). By default, <code>purger_sleep</code> is set to 50 milliseconds. </dd> </dl>\n\n<div class=\"directive\" id=\"proxy_cache_purge\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_purge</strong> string ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.7. </p>\n</div>\n<p> Defines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding <a href=\"#proxy_cache_key\">cache key</a> is removed. The result of successful operation is indicated by returning the 204 (No Content) response. </p>\n<p> If the <a href=\"#proxy_cache_key\">cache key</a> of a purge request ends with an asterisk (“<code>*</code>”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either <a href=\"#proxy_cache_path\">inactivity</a>, or processed by the <a href=\"#purger\">cache purger</a> (1.7.12), or a client attempts to access them. </p>\n<p> Example configuration: </p> <pre data-language=\"nginx\">\nproxy_cache_path /data/nginx/cache keys_zone=cache_zone:10m;\n\nmap $request_method $purge_method {\n    PURGE   1;\n    default 0;\n}\n\nserver {\n    ...\n    location / {\n        proxy_pass http://backend;\n        proxy_cache cache_zone;\n        proxy_cache_key $uri;\n        proxy_cache_purge $purge_method;\n    }\n}\n</pre>\n <blockquote class=\"note\"> This functionality is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"proxy_cache_revalidate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_revalidate</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_cache_revalidate off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.7. </p>\n</div>\n<p> Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields. </p>\n<div class=\"directive\" id=\"proxy_cache_use_stale\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_use_stale</strong> \n    <code>error</code> |\n    <code>timeout</code> |\n    <code>invalid_header</code> |\n    <code>updating</code> |\n    <code>http_500</code> |\n    <code>http_502</code> |\n    <code>http_503</code> |\n    <code>http_504</code> |\n    <code>http_403</code> |\n    <code>http_404</code> |\n    <code>off</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_cache_use_stale off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines in which cases a stale cached response can be used when an error occurs during communication with the proxied server. The directive’s parameters match the parameters of the <a href=\"#proxy_next_upstream\">proxy_next_upstream</a> directive. </p>\n<p> The <code>error</code> parameter also permits using a stale cached response if a proxied server to process a request cannot be selected. </p>\n<p> Additionally, the <code>updating</code> parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to proxied servers when updating cached data. </p>\n<p> To minimize the number of accesses to proxied servers when populating a new cache element, the <a href=\"#proxy_cache_lock\">proxy_cache_lock</a> directive can be used. </p>\n<div class=\"directive\" id=\"proxy_cache_valid\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cache_valid</strong> [<code><i>code</i></code> ...] <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets caching time for different response codes. For example, the following directives </p> <pre data-language=\"nginx\">\nproxy_cache_valid 200 302 10m;\nproxy_cache_valid 404      1m;\n</pre>\n<p> set 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404. </p>\n<p> If only caching <code><i>time</i></code> is specified </p> <pre data-language=\"nginx\">\nproxy_cache_valid 5m;\n</pre>\n<p> then only 200, 301, and 302 responses are cached. </p>\n<p> In addition, the <code>any</code> parameter can be specified to cache any responses: </p> <pre data-language=\"nginx\">\nproxy_cache_valid 200 302 10m;\nproxy_cache_valid 301      1h;\nproxy_cache_valid any      1m;\n</pre>\n\n<p> Parameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive. </p> <ul> <li> The “X-Accel-Expires” header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the <code>@</code> prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached. </li> <li> If the header does not include the “X-Accel-Expires” field, parameters of caching may be set in the header fields “Expires” or “Cache-Control”. </li> <li> If the header includes the “Set-Cookie” field, such a response will not be cached. </li> <li> If the header includes the “Vary” field with the special value “<code>*</code>”, such a response will not be cached (1.7.7). If the header includes the “Vary” field with another value, such a response will be cached taking into account the corresponding request header fields (1.7.7). </li> </ul>\n<p> Processing of one or more of these response header fields can be disabled using the <a href=\"#proxy_ignore_headers\">proxy_ignore_headers</a> directive. </p>\n<div class=\"directive\" id=\"proxy_connect_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_connect_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_connect_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for establishing a connection with a proxied server. It should be noted that this timeout cannot usually exceed 75 seconds. </p>\n<div class=\"directive\" id=\"proxy_cookie_domain\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cookie_domain</strong> <code>off</code>;</code><br><code><strong>proxy_cookie_domain</strong> <code><i>domain</i></code> <code><i>replacement</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_cookie_domain off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.15. </p>\n</div>\n<p> Sets a text that should be changed in the <code>domain</code> attribute of the “Set-Cookie” header fields of a proxied server response. Suppose a proxied server returned the “Set-Cookie” header field with the attribute “<code>domain=localhost</code>”. The directive </p> <pre data-language=\"nginx\">\nproxy_cookie_domain localhost example.org;\n</pre>\n<p> will rewrite this attribute to “<code>domain=example.org</code>”. </p>\n<p> A dot at the beginning of the <code><i>domain</i></code> and <code><i>replacement</i></code> strings and the <code>domain</code> attribute is ignored. Matching is case-insensitive. </p>\n<p> The <code><i>domain</i></code> and <code><i>replacement</i></code> strings can contain variables: </p> <pre data-language=\"nginx\">\nproxy_cookie_domain www.$host $host;\n</pre>\n\n<p> The directive can also be specified using regular expressions. In this case, <code><i>domain</i></code> should start from the “<code>~</code>” symbol. A regular expression can contain named and positional captures, and <code><i>replacement</i></code> can reference them: </p> <pre data-language=\"nginx\">\nproxy_cookie_domain ~\\.(?P&lt;sl_domain&gt;[-0-9a-z]+\\.[a-z]+)$ $sl_domain;\n</pre>\n\n<p> There could be several <code>proxy_cookie_domain</code> directives: </p> <pre data-language=\"nginx\">\nproxy_cookie_domain localhost example.org;\nproxy_cookie_domain ~\\.([a-z]+\\.[a-z]+)$ $1;\n</pre>\n\n<p> The <code>off</code> parameter cancels the effect of all <code>proxy_cookie_domain</code> directives on the current level: </p> <pre data-language=\"nginx\">\nproxy_cookie_domain off;\nproxy_cookie_domain localhost example.org;\nproxy_cookie_domain www.example.org example.org;\n</pre>\n\n<div class=\"directive\" id=\"proxy_cookie_path\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_cookie_path</strong> <code>off</code>;</code><br><code><strong>proxy_cookie_path</strong> <code><i>path</i></code> <code><i>replacement</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_cookie_path off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.15. </p>\n</div>\n<p> Sets a text that should be changed in the <code>path</code> attribute of the “Set-Cookie” header fields of a proxied server response. Suppose a proxied server returned the “Set-Cookie” header field with the attribute “<code>path=/two/some/uri/</code>”. The directive </p> <pre data-language=\"nginx\">\nproxy_cookie_path /two/ /;\n</pre>\n<p> will rewrite this attribute to “<code>path=/some/uri/</code>”. </p>\n<p> The <code><i>path</i></code> and <code><i>replacement</i></code> strings can contain variables: </p> <pre data-language=\"nginx\">\nproxy_cookie_path $uri /some$uri;\n</pre>\n\n<p> The directive can also be specified using regular expressions. In this case, <code><i>path</i></code> should either start from the “<code>~</code>” symbol for a case-sensitive matching, or from the “<code>~*</code>” symbols for case-insensitive matching. The regular expression can contain named and positional captures, and <code><i>replacement</i></code> can reference them: </p> <pre data-language=\"nginx\">\nproxy_cookie_path ~*^/user/([^/]+) /u/$1;\n</pre>\n\n<p> There could be several <code>proxy_cookie_path</code> directives: </p> <pre data-language=\"nginx\">\nproxy_cookie_path /one/ /;\nproxy_cookie_path / /two/;\n</pre>\n\n<p> The <code>off</code> parameter cancels the effect of all <code>proxy_cookie_path</code> directives on the current level: </p> <pre data-language=\"nginx\">\nproxy_cookie_path off;\nproxy_cookie_path /two/ /;\nproxy_cookie_path ~*^/user/([^/]+) /u/$1;\n</pre>\n\n<div class=\"directive\" id=\"proxy_force_ranges\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_force_ranges</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_force_ranges off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.7. </p>\n</div>\n<p> Enables byte-range support for both cached and uncached responses from the proxied server regardless of the “Accept-Ranges” field in these responses. </p>\n<div class=\"directive\" id=\"proxy_headers_hash_bucket_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_headers_hash_bucket_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_headers_hash_bucket_size 64;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the bucket <code><i>size</i></code> for hash tables used by the <a href=\"#proxy_hide_header\">proxy_hide_header</a> and <a href=\"#proxy_set_header\">proxy_set_header</a> directives. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p>\n<div class=\"directive\" id=\"proxy_headers_hash_max_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_headers_hash_max_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_headers_hash_max_size 512;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the maximum <code><i>size</i></code> of hash tables used by the <a href=\"#proxy_hide_header\">proxy_hide_header</a> and <a href=\"#proxy_set_header\">proxy_set_header</a> directives. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p>\n<div class=\"directive\" id=\"proxy_hide_header\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_hide_header</strong> <code><i>field</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> By default, nginx does not pass the header fields “Date”, “Server”, “X-Pad”, and “X-Accel-...” from the response of a proxied server to a client. The <code>proxy_hide_header</code> directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the <a href=\"#proxy_pass_header\">proxy_pass_header</a> directive can be used. </p>\n<div class=\"directive\" id=\"proxy_http_version\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_http_version</strong> <code>1.0</code> | <code>1.1</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_http_version 1.0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.4. </p>\n</div>\n<p> Sets the HTTP protocol version for proxying. By default, version 1.0 is used. Version 1.1 is recommended for use with <a href=\"ngx_http_upstream_module#keepalive\">keepalive</a> connections and <a href=\"ngx_http_upstream_module#ntlm\">NTLM authentication</a>. </p>\n<div class=\"directive\" id=\"proxy_ignore_client_abort\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ignore_client_abort</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ignore_client_abort off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines whether the connection with a proxied server should be closed when a client closes the connection without waiting for a response. </p>\n<div class=\"directive\" id=\"proxy_ignore_headers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ignore_headers</strong> <code><i>field</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Disables processing of certain response header fields from the proxied server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7). </p>\n<p> If not disabled, processing of these header fields has the following effect: </p> <ul> <li> “X-Accel-Expires”, “Expires”, “Cache-Control”, “Set-Cookie”, and “Vary” set the parameters of response <a href=\"#proxy_cache_valid\">caching</a>; </li> <li> “X-Accel-Redirect” performs an <a href=\"ngx_http_core_module#internal\">internal redirect</a> to the specified URI; </li> <li> “X-Accel-Limit-Rate” sets the <a href=\"ngx_http_core_module#limit_rate\">rate limit</a> for transmission of a response to a client; </li> <li> “X-Accel-Buffering” enables or disables <a href=\"#proxy_buffering\">buffering</a> of a response; </li> <li> “X-Accel-Charset” sets the desired <a href=\"ngx_http_charset_module#charset\">charset</a> of a response. </li> </ul>\n\n<div class=\"directive\" id=\"proxy_intercept_errors\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_intercept_errors</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_intercept_errors off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines whether proxied responses with codes greater than or equal to 300 should be passed to a client or be redirected to nginx for processing with the <a href=\"ngx_http_core_module#error_page\">error_page</a> directive. </p>\n<div class=\"directive\" id=\"proxy_limit_rate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_limit_rate</strong> <code><i>rate</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_limit_rate 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.7. </p>\n</div>\n<p> Limits the speed of reading the response from the proxied server. The <code><i>rate</i></code> is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the proxied server, the overall rate will be twice as much as the specified limit. The limitation works only if <a href=\"#proxy_buffering\">buffering</a> of responses from the proxied server is enabled. </p>\n<div class=\"directive\" id=\"proxy_max_temp_file_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_max_temp_file_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_max_temp_file_size 1024m;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> When <a href=\"#proxy_buffering\">buffering</a> of responses from the proxied server is enabled, and the whole response does not fit into the buffers set by the <a href=\"#proxy_buffer_size\">proxy_buffer_size</a> and <a href=\"#proxy_buffers\">proxy_buffers</a> directives, a part of the response can be saved to a temporary file. This directive sets the maximum <code><i>size</i></code> of the temporary file. The size of data written to the temporary file at a time is set by the <a href=\"#proxy_temp_file_write_size\">proxy_temp_file_write_size</a> directive. </p>\n<p> The zero value disables buffering of responses to temporary files. </p>\n <blockquote class=\"note\"> This restriction does not apply to responses that will be <a href=\"#proxy_cache\">cached</a> or <a href=\"#proxy_store\">stored</a> on disk. </blockquote>\n\n<div class=\"directive\" id=\"proxy_method\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_method</strong> <code><i>method</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Specifies the HTTP <code><i>method</i></code> to use in requests forwarded to the proxied server instead of the method from the client request. </p>\n<div class=\"directive\" id=\"proxy_next_upstream\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_next_upstream</strong> \n    <code>error</code> |\n    <code>timeout</code> |\n    <code>invalid_header</code> |\n    <code>http_500</code> |\n    <code>http_502</code> |\n    <code>http_503</code> |\n    <code>http_504</code> |\n    <code>http_403</code> |\n    <code>http_404</code> |\n    <code>non_idempotent</code> |\n    <code>off</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_next_upstream error timeout;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Specifies in which cases a request should be passed to the next server: </p> <dl class=\"compact\"> <dt><code>error</code></dt> <dd>an error occurred while establishing a connection with the server, passing a request to it, or reading the response header;</dd> <dt><code>timeout</code></dt> <dd>a timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;</dd> <dt><code>invalid_header</code></dt> <dd>a server returned an empty or invalid response;</dd> <dt><code>http_500</code></dt> <dd>a server returned a response with the code 500;</dd> <dt><code>http_502</code></dt> <dd>a server returned a response with the code 502;</dd> <dt><code>http_503</code></dt> <dd>a server returned a response with the code 503;</dd> <dt><code>http_504</code></dt> <dd>a server returned a response with the code 504;</dd> <dt><code>http_403</code></dt> <dd>a server returned a response with the code 403;</dd> <dt><code>http_404</code></dt> <dd>a server returned a response with the code 404;</dd> <dt id=\"non_idempotent\"><code>non_idempotent</code></dt> <dd>normally, requests with a <a href=\"http://tools.ietf.org/html/rfc7231#section-4.2.2\">non-idempotent</a> method (<code>POST</code>, <code>LOCK</code>, <code>PATCH</code>) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests; </dd> <dt><code>off</code></dt> <dd>disables passing a request to the next server.</dd> </dl>\n\n<p> One should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible. </p>\n<p> The directive also defines what is considered an <a href=\"ngx_http_upstream_module#max_fails\">unsuccessful attempt</a> of communication with a server. The cases of <code>error</code>, <code>timeout</code> and <code>invalid_header</code> are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of <code>http_500</code>, <code>http_502</code>, <code>http_503</code> and <code>http_504</code> are considered unsuccessful attempts only if they are specified in the directive. The cases of <code>http_403</code> and <code>http_404</code> are never considered unsuccessful attempts. </p>\n<p> Passing a request to the next server can be limited by <a href=\"#proxy_next_upstream_tries\">the number of tries</a> and by <a href=\"#proxy_next_upstream_timeout\">time</a>. </p>\n<div class=\"directive\" id=\"proxy_next_upstream_timeout\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_next_upstream_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_next_upstream_timeout 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.5. </p>\n</div>\n<p> Limits the time during which a request can be passed to the <a href=\"#proxy_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation. </p>\n<div class=\"directive\" id=\"proxy_next_upstream_tries\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_next_upstream_tries</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_next_upstream_tries 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.5. </p>\n</div>\n<p> Limits the number of possible tries for passing a request to the <a href=\"#proxy_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation. </p>\n<div class=\"directive\" id=\"proxy_no_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_no_cache</strong> <code><i>string</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved: </p> <pre data-language=\"nginx\">\nproxy_no_cache $cookie_nocache $arg_nocache$arg_comment;\nproxy_no_cache $http_pragma    $http_authorization;\n</pre>\n<p> Can be used along with the <a href=\"#proxy_cache_bypass\">proxy_cache_bypass</a> directive. </p>\n<div class=\"directive\" id=\"proxy_pass\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_pass</strong> <code><i>URL</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code>, <code>if in location</code>, <code>limit_except</code><br> </td> </tr> </table></div>\n<p> Sets the protocol and address of a proxied server and an optional URI to which a location should be mapped. As a protocol, “<code>http</code>” or “<code>https</code>” can be specified. The address can be specified as a domain name or IP address, and an optional port: </p> <pre data-language=\"nginx\">\nproxy_pass http://localhost:8000/uri/;\n</pre>\n<p> or as a UNIX-domain socket path specified after the word “<code>unix</code>” and enclosed in colons: </p> <pre data-language=\"nginx\">\nproxy_pass http://unix:/tmp/backend.socket:/uri/;\n</pre>\n\n<p> If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a <a href=\"ngx_http_upstream_module\">server group</a>. </p>\n<p> A request URI is passed to the server as follows: </p> <ul> <li> If the <code>proxy_pass</code> directive is specified with a URI, then when a request is passed to the server, the part of a <a href=\"ngx_http_core_module#location\">normalized</a> request URI matching the location is replaced by a URI specified in the directive: <pre data-language=\"nginx\">\nlocation /name/ {\n    proxy_pass http://127.0.0.1/remote/;\n}\n</pre> </li> <li> If <code>proxy_pass</code> is specified without a URI, the request URI is passed to the server in the same form as sent by a client when the original request is processed, or the full normalized request URI is passed when processing the changed URI: <pre data-language=\"nginx\">\nlocation /some/path/ {\n    proxy_pass http://127.0.0.1;\n}\n</pre> <blockquote class=\"note\"> Before version 1.1.12, if <code>proxy_pass</code> is specified without a URI, the original request URI might be passed instead of the changed URI in some cases. </blockquote> </li> </ul>\n\n<p> In some cases, the part of a request URI to be replaced cannot be determined: </p> <ul> <li> When location is specified using a regular expression. <p> In this case, the directive should be specified without a URI. </p> </li> <li> When the URI is changed inside a proxied location using the <a href=\"ngx_http_rewrite_module#rewrite\">rewrite</a> directive, and this same configuration will be used to process a request (<code>break</code>): <pre data-language=\"nginx\">\nlocation /name/ {\n    rewrite    /name/([^/]+) /users?name=$1 break;\n    proxy_pass http://127.0.0.1;\n}\n</pre> <p> In this case, the URI specified in the directive is ignored and the full changed request URI is passed to the server. </p> </li> </ul>\n\n<p> A server name, its port and the passed URI can also be specified using variables: </p> <pre data-language=\"nginx\">\nproxy_pass http://$host$uri;\n</pre>\n<p> or even like this: </p> <pre data-language=\"nginx\">\nproxy_pass $request;\n</pre>\n\n<p> In this case, the server name is searched among the described <a href=\"ngx_http_upstream_module\">server groups</a>, and, if not found, is determined using a <a href=\"ngx_http_core_module#resolver\">resolver</a>. </p>\n<p> <a href=\"websocket\">WebSocket</a> proxying requires special configuration and is supported since version 1.3.13. </p>\n<div class=\"directive\" id=\"proxy_pass_header\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_pass_header</strong> <code><i>field</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Permits passing <a href=\"#proxy_hide_header\">otherwise disabled</a> header fields from a proxied server to a client. </p>\n<div class=\"directive\" id=\"proxy_pass_request_body\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_pass_request_body</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_pass_request_body on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Indicates whether the original request body is passed to the proxied server. </p> <pre data-language=\"nginx\">\nlocation /x-accel-redirect-here/ {\n    proxy_method GET;\n    proxy_pass_request_body off;\n    proxy_set_header Content-Length \"\";\n\n    proxy_pass ...\n}\n</pre>\n<p> See also the <a href=\"#proxy_set_header\">proxy_set_header</a> and <a href=\"#proxy_pass_request_headers\">proxy_pass_request_headers</a> directives. </p>\n<div class=\"directive\" id=\"proxy_pass_request_headers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_pass_request_headers</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_pass_request_headers on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Indicates whether the header fields of the original request are passed to the proxied server. </p> <pre data-language=\"nginx\">\nlocation /x-accel-redirect-here/ {\n    proxy_method GET;\n    proxy_pass_request_headers off;\n    proxy_pass_request_body off;\n\n    proxy_pass ...\n}\n</pre>\n<p> See also the <a href=\"#proxy_set_header\">proxy_set_header</a> and <a href=\"#proxy_pass_request_body\">proxy_pass_request_body</a> directives. </p>\n<div class=\"directive\" id=\"proxy_read_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_read_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_read_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for reading a response from the proxied server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the proxied server does not transmit anything within this time, the connection is closed. </p>\n<div class=\"directive\" id=\"proxy_redirect\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_redirect</strong> <code>default</code>;</code><br><code><strong>proxy_redirect</strong> <code>off</code>;</code><br><code><strong>proxy_redirect</strong> <code><i>redirect</i></code> <code><i>replacement</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_redirect default;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the text that should be changed in the “Location” and “Refresh” header fields of a proxied server response. Suppose a proxied server returned the header field “<code>Location: http://localhost:8000/two/some/uri/</code>”. The directive </p> <pre data-language=\"nginx\">\nproxy_redirect http://localhost:8000/two/ http://frontend/one/;\n</pre>\n<p> will rewrite this string to “<code>Location: http://frontend/one/some/uri/</code>”. </p>\n<p> A server name may be omitted in the <code><i>replacement</i></code> string: </p> <pre data-language=\"nginx\">\nproxy_redirect http://localhost:8000/two/ /;\n</pre>\n<p> then the primary server’s name and port, if different from 80, will be inserted. </p>\n<p> The default replacement specified by the <code>default</code> parameter uses the parameters of the <a href=\"ngx_http_core_module#location\">location</a> and <a href=\"#proxy_pass\">proxy_pass</a> directives. Hence, the two configurations below are equivalent: </p> <pre data-language=\"nginx\">\nlocation /one/ {\n    proxy_pass     http://upstream:port/two/;\n    proxy_redirect default;\n</pre>\n <pre data-language=\"nginx\">\nlocation /one/ {\n    proxy_pass     http://upstream:port/two/;\n    proxy_redirect http://upstream:port/two/ /one/;\n</pre>\n<p> The <code>default</code> parameter is not permitted if <a href=\"#proxy_pass\">proxy_pass</a> is specified using variables. </p>\n<p> A <code><i>replacement</i></code> string can contain variables: </p> <pre data-language=\"nginx\">\nproxy_redirect http://localhost:8000/ http://$host:$server_port/;\n</pre>\n\n<p> A <code><i>redirect</i></code> can also contain (1.1.11) variables: </p> <pre data-language=\"nginx\">\nproxy_redirect http://$proxy_host:8000/ /;\n</pre>\n\n<p> The directive can be specified (1.1.11) using regular expressions. In this case, <code><i>redirect</i></code> should either start with the “<code>~</code>” symbol for a case-sensitive matching, or with the “<code>~*</code>” symbols for case-insensitive matching. The regular expression can contain named and positional captures, and <code><i>replacement</i></code> can reference them: </p> <pre data-language=\"nginx\">\nproxy_redirect ~^(http://[^:]+):\\d+(/.+)$ $1$2;\nproxy_redirect ~*/user/([^/]+)/(.+)$      http://$1.example.com/$2;\n</pre>\n\n<p> There could be several <code>proxy_redirect</code> directives: </p> <pre data-language=\"nginx\">\nproxy_redirect default;\nproxy_redirect http://localhost:8000/  /;\nproxy_redirect http://www.example.com/ /;\n</pre>\n\n<p> The <code>off</code> parameter cancels the effect of all <code>proxy_redirect</code> directives on the current level: </p> <pre data-language=\"nginx\">\nproxy_redirect off;\nproxy_redirect default;\nproxy_redirect http://localhost:8000/  /;\nproxy_redirect http://www.example.com/ /;\n</pre>\n\n<p> Using this directive, it is also possible to add host names to relative redirects issued by a proxied server: </p> <pre data-language=\"nginx\">\nproxy_redirect / /;\n</pre>\n\n<div class=\"directive\" id=\"proxy_request_buffering\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_request_buffering</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_request_buffering on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.11. </p>\n</div>\n<p> Enables or disables buffering of a client request body. </p>\n<p> When buffering is enabled, the entire request body is <a href=\"ngx_http_core_module#client_body_buffer_size\">read</a> from the client before sending the request to a proxied server. </p>\n<p> When buffering is disabled, the request body is sent to the proxied server immediately as it is received. In this case, the request cannot be passed to the <a href=\"#proxy_next_upstream\">next server</a> if nginx already started sending the request body. </p>\n<p> When HTTP/1.1 chunked transfer encoding is used to send the original request body, the request body will be buffered regardless of the directive value unless HTTP/1.1 is <a href=\"#proxy_http_version\">enabled</a> for proxying. </p>\n<div class=\"directive\" id=\"proxy_send_lowat\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_send_lowat</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_send_lowat 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on outgoing connections to a proxied server by using either <code>NOTE_LOWAT</code> flag of the <a href=\"../events#kqueue\">kqueue</a> method, or the <code>SO_SNDLOWAT</code> socket option, with the specified <code><i>size</i></code>. </p>\n<p> This directive is ignored on Linux, Solaris, and Windows. </p>\n<div class=\"directive\" id=\"proxy_send_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_send_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_send_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a timeout for transmitting a request to the proxied server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the proxied server does not receive anything within this time, the connection is closed. </p>\n<div class=\"directive\" id=\"proxy_set_body\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_set_body</strong> <code><i>value</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Allows redefining the request body passed to the proxied server. The <code><i>value</i></code> can contain text, variables, and their combination. </p>\n<div class=\"directive\" id=\"proxy_set_header\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_set_header</strong> <code><i>field</i></code> <code><i>value</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_set_header Host $proxy_host;</code><code>proxy_set_header Connection close;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Allows redefining or appending fields to the request header <a href=\"#proxy_pass_request_headers\">passed</a> to the proxied server. The <code><i>value</i></code> can contain text, variables, and their combinations. These directives are inherited from the previous level if and only if there are no <code>proxy_set_header</code> directives defined on the current level. By default, only two fields are redefined: </p> <pre data-language=\"nginx\">\nproxy_set_header Host       $proxy_host;\nproxy_set_header Connection close;\n</pre>\n<p> If caching is enabled, the header fields “If-Modified-Since”, “If-Unmodified-Since”, “If-None-Match”, “If-Match”, “Range”, and “If-Range” from the original request are not passed to the proxied server. </p>\n<p> An unchanged “Host” request header field can be passed like this: </p> <pre data-language=\"nginx\">\nproxy_set_header Host       $http_host;\n</pre>\n\n<p> However, if this field is not present in a client request header then nothing will be passed. In such a case it is better to use the <code>$host</code> variable - its value equals the server name in the “Host” request header field or the primary server name if this field is not present: </p> <pre data-language=\"nginx\">\nproxy_set_header Host       $host;\n</pre>\n\n<p> In addition, the server name can be passed together with the port of the proxied server: </p> <pre data-language=\"nginx\">\nproxy_set_header Host       $host:$proxy_port;\n</pre>\n\n<p> If the value of a header field is an empty string then this field will not be passed to a proxied server: </p> <pre data-language=\"nginx\">\nproxy_set_header Accept-Encoding \"\";\n</pre>\n\n<div class=\"directive\" id=\"proxy_ssl_certificate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.8. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with the certificate in the PEM format used for authentication to a proxied HTTPS server. </p>\n<div class=\"directive\" id=\"proxy_ssl_certificate_key\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_certificate_key</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.8. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with the secret key in the PEM format used for authentication to a proxied HTTPS server. </p>\n<p> The value <code>engine</code>:<code><i>name</i></code>:<code><i>id</i></code> can be specified instead of the <code><i>file</i></code> (1.7.9), which loads a secret key with a specified <code><i>id</i></code> from the OpenSSL engine <code><i>name</i></code>. </p>\n<div class=\"directive\" id=\"proxy_ssl_ciphers\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_ciphers</strong> <code><i>ciphers</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_ciphers DEFAULT;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.6. </p>\n</div>\n<p> Specifies the enabled ciphers for requests to a proxied HTTPS server. The ciphers are specified in the format understood by the OpenSSL library. </p>\n<p> The full list can be viewed using the “<code>openssl ciphers</code>” command. </p>\n<div class=\"directive\" id=\"proxy_ssl_crl\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_crl</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.0. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with revoked certificates (CRL) in the PEM format used to <a href=\"#proxy_ssl_verify\">verify</a> the certificate of the proxied HTTPS server. </p>\n<div class=\"directive\" id=\"proxy_ssl_name\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_name</strong> <code><i>name</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_name $proxy_host;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.0. </p>\n</div>\n<p> Allows overriding the server name used to <a href=\"#proxy_ssl_verify\">verify</a> the certificate of the proxied HTTPS server and to be <a href=\"#proxy_ssl_server_name\">passed through SNI</a> when establishing a connection with the proxied HTTPS server. </p>\n<p> By default, the host part of the <a href=\"#proxy_pass\">proxy_pass</a> URL is used. </p>\n<div class=\"directive\" id=\"proxy_ssl_password_file\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_password_file</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.8. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with passphrases for <a href=\"#proxy_ssl_certificate_key\">secret keys</a> where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key. </p>\n<div class=\"directive\" id=\"proxy_ssl_server_name\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_server_name</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_server_name off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.0. </p>\n</div>\n<p> Enables or disables passing of the server name through <a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">TLS Server Name Indication extension</a> (SNI, RFC 6066) when establishing a connection with the proxied HTTPS server. </p>\n<div class=\"directive\" id=\"proxy_ssl_session_reuse\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_session_reuse</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_session_reuse on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines whether SSL sessions can be reused when working with the proxied server. If the errors “<code>SSL3_GET_FINISHED:digest check failed</code>” appear in the logs, try disabling session reuse. </p>\n<div class=\"directive\" id=\"proxy_ssl_protocols\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_protocols</strong> \n    [<code>SSLv2</code>]\n    [<code>SSLv3</code>]\n    [<code>TLSv1</code>]\n    [<code>TLSv1.1</code>]\n    [<code>TLSv1.2</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.6. </p>\n</div>\n<p> Enables the specified protocols for requests to a proxied HTTPS server. </p>\n<div class=\"directive\" id=\"proxy_ssl_trusted_certificate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_trusted_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.0. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with trusted CA certificates in the PEM format used to <a href=\"#proxy_ssl_verify\">verify</a> the certificate of the proxied HTTPS server. </p>\n<div class=\"directive\" id=\"proxy_ssl_verify\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_verify</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_verify off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.0. </p>\n</div>\n<p> Enables or disables verification of the proxied HTTPS server certificate. </p>\n<div class=\"directive\" id=\"proxy_ssl_verify_depth\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_verify_depth</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_verify_depth 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.0. </p>\n</div>\n<p> Sets the verification depth in the proxied HTTPS server certificates chain. </p>\n<div class=\"directive\" id=\"proxy_store\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_store</strong> \n    <code>on</code> |\n    <code>off</code> |\n    <code><i>string</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_store off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables saving of files to a disk. The <code>on</code> parameter saves files with paths corresponding to the directives <a href=\"ngx_http_core_module#alias\">alias</a> or <a href=\"ngx_http_core_module#root\">root</a>. The <code>off</code> parameter disables saving of files. In addition, the file name can be set explicitly using the <code><i>string</i></code> with variables: </p> <pre data-language=\"nginx\">\nproxy_store /data/www$original_uri;\n</pre>\n\n<p> The modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the <a href=\"#proxy_temp_path\">proxy_temp_path</a> directive, are put on the same file system. </p>\n<p> This directive can be used to create local copies of static unchangeable files, e.g.: </p> <pre data-language=\"nginx\">\nlocation /images/ {\n    root               /data/www;\n    error_page         404 = /fetch$uri;\n}\n\nlocation /fetch/ {\n    internal;\n\n    proxy_pass         http://backend/;\n    proxy_store        on;\n    proxy_store_access user:rw group:rw all:r;\n    proxy_temp_path    /data/temp;\n\n    alias              /data/www/;\n}\n</pre>\n\n<p> or like this: </p> <pre data-language=\"nginx\">\nlocation /images/ {\n    root               /data/www;\n    error_page         404 = @fetch;\n}\n\nlocation @fetch {\n    internal;\n\n    proxy_pass         http://backend;\n    proxy_store        on;\n    proxy_store_access user:rw group:rw all:r;\n    proxy_temp_path    /data/temp;\n\n    root               /data/www;\n}\n</pre>\n\n<div class=\"directive\" id=\"proxy_store_access\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_store_access</strong> <code><i>users</i></code>:<code><i>permissions</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_store_access user:rw;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets access permissions for newly created files and directories, e.g.: </p> <pre data-language=\"nginx\">\nproxy_store_access user:rw group:rw all:r;\n</pre>\n\n<p> If any <code>group</code> or <code>all</code> access permissions are specified then <code>user</code> permissions may be omitted: </p> <pre data-language=\"nginx\">\nproxy_store_access group:rw all:r;\n</pre>\n\n<div class=\"directive\" id=\"proxy_temp_file_write_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_temp_file_write_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_temp_file_write_size 8k|16k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Limits the <code><i>size</i></code> of data written to a temporary file at a time, when buffering of responses from the proxied server to temporary files is enabled. By default, <code><i>size</i></code> is limited by two buffers set by the <a href=\"#proxy_buffer_size\">proxy_buffer_size</a> and <a href=\"#proxy_buffers\">proxy_buffers</a> directives. The maximum size of a temporary file is set by the <a href=\"#proxy_max_temp_file_size\">proxy_max_temp_file_size</a> directive. </p>\n<div class=\"directive\" id=\"proxy_temp_path\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_temp_path</strong> \n    <code><i>path</i></code>\n    [<code><i>level1</i></code>\n    [<code><i>level2</i></code>\n    [<code><i>level3</i></code>]]];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_temp_path proxy_temp;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a directory for storing temporary files with data received from proxied servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration </p> <pre data-language=\"nginx\">\nproxy_temp_path /spool/nginx/proxy_temp 1 2;\n</pre>\n<p> a temporary file might look like this: </p> <pre data-language=\"nginx\">\n/spool/nginx/proxy_temp/<strong>7</strong>/<strong>45</strong>/00000123<strong>457</strong>\n</pre>\n\n<p> See also the <code>use_temp_path</code> parameter of the <a href=\"#proxy_cache_path\">proxy_cache_path</a> directive. </p> <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_proxy_module</code> module supports embedded variables that can be used to compose headers using the <a href=\"#proxy_set_header\">proxy_set_header</a> directive: </p> <dl class=\"compact\"> <dt id=\"var_proxy_host\"><code>$proxy_host</code></dt> <dd>name and port of a proxied server as specified in the <a href=\"#proxy_pass\">proxy_pass</a> directive;</dd> <dt id=\"var_proxy_port\"><code>$proxy_port</code></dt> <dd>port of a proxied server as specified in the <a href=\"#proxy_pass\">proxy_pass</a> directive, or the protocol’s default port;</dd> <dt id=\"var_proxy_add_x_forwarded_for\"> <code>$proxy_add_x_forwarded_for</code>\n</dt> <dd>the “X-Forwarded-For” client request header field with the <code>$remote_addr</code> variable appended to it, separated by a comma. If the “X-Forwarded-For” field is not present in the client request header, the <code>$proxy_add_x_forwarded_for</code> variable is equal to the <code>$remote_addr</code> variable.</dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_proxy_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_proxy_module.html</a>\n  </p>\n</div>\n","mail/ngx_mail_core_module":"<h1>Module ngx_mail_core_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#listen\">listen</a></li>\n<li><a href=\"#mail\">mail</a></li>\n<li><a href=\"#protocol\">protocol</a></li>\n<li><a href=\"#resolver\">resolver</a></li>\n<li><a href=\"#resolver_timeout\">resolver_timeout</a></li>\n<li><a href=\"#server\">server</a></li>\n<li><a href=\"#server_name\">server_name</a></li>\n<li><a href=\"#timeout\">timeout</a></li>\n</ul> <p id=\"summary\"> This module is not built by default, it should be enabled with the <code>--with-mail</code> configuration parameter. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nworker_processes 1;\n\nerror_log /var/log/nginx/error.log info;\n\nevents {\n    worker_connections  1024;\n}\n\nmail {\n    server_name       mail.example.com;\n    auth_http         localhost:9000/cgi-bin/nginxauth.cgi;\n\n    imap_capabilities IMAP4rev1 UIDPLUS IDLE LITERAL+ QUOTA;\n\n    pop3_auth         plain apop cram-md5;\n    pop3_capabilities LAST TOP USER PIPELINING UIDL;\n\n    smtp_auth         login plain cram-md5;\n    smtp_capabilities \"SIZE 10485760\" ENHANCEDSTATUSCODES 8BITMIME DSN;\n    xclient           off;\n\n    server {\n        listen   25;\n        protocol smtp;\n    }\n    server {\n        listen   110;\n        protocol pop3;\n        proxy_pass_error_message on;\n    }\n    server {\n        listen   143;\n        protocol imap;\n    }\n    server {\n        listen   587;\n        protocol smtp;\n    }\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"listen\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>listen</strong> \n    <code><i>address</i></code>:<code><i>port</i></code>\n    [<code>ssl</code>]\n    [<code>backlog</code>=<code><i>number</i></code>]\n    [<code>bind</code>]\n    [<code>ipv6only</code>=<code>on</code>|<code>off</code>]\n    [<code>so_keepalive</code>=<code>on</code>|<code>off</code>|[<code><i>keepidle</i></code>]:[<code><i>keepintvl</i></code>]:[<code><i>keepcnt</i></code>]];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>address</i></code> and <code><i>port</i></code> for the socket on which the server will accept requests. It is possible to specify just the port. The address can also be a hostname, for example: </p> <pre data-language=\"nginx\">\nlisten 127.0.0.1:110;\nlisten *:110;\nlisten 110;     # same as *:110\nlisten localhost:110;\n</pre>\n<p> IPv6 addresses (0.7.58) are specified in square brackets: </p> <pre data-language=\"nginx\">\nlisten [::1]:110;\nlisten [::]:110;\n</pre>\n<p> UNIX-domain sockets (1.3.5) are specified with the “<code>unix:</code>” prefix: </p> <pre data-language=\"nginx\">\nlisten unix:/var/run/nginx.sock;\n</pre>\n\n<p> Different servers must listen on different <code><i>address</i></code>:<code><i>port</i></code> pairs. </p>\n<p> The <code>ssl</code> parameter allows specifying that all connections accepted on this port should work in SSL mode. </p>\n<p> The <code>listen</code> directive can have several additional parameters specific to socket-related system calls. </p> <dl class=\"compact\"> <dt> <code>backlog</code>=<code><i>number</i></code> </dt> <dd> sets the <code>backlog</code> parameter in the <code>listen()</code> call that limits the maximum length for the queue of pending connections (1.9.2). By default, <code>backlog</code> is set to -1 on FreeBSD, DragonFly BSD, and Mac OS X, and to 511 on other platforms. </dd> <dt> <code>bind</code> </dt> <dd> this parameter instructs to make a separate <code>bind()</code> call for a given address:port pair. The fact is that if there are several <code>listen</code> directives with the same port but different addresses, and one of the <code>listen</code> directives listens on all addresses for the given port (<code>*:</code><code><i>port</i></code>), nginx will <code>bind()</code> only to <code>*:</code><code><i>port</i></code>. It should be noted that the <code>getsockname()</code> system call will be made in this case to determine the address that accepted the connection. If the <code>ipv6only</code> or <code>so_keepalive</code> parameters are used then for a given <code><i>address</i></code>:<code><i>port</i></code> pair a separate <code>bind()</code> call will always be made. </dd> <dt> <code>ipv6only</code>=<code>on</code>|<code>off</code> </dt> <dd> this parameter determines (via the <code>IPV6_V6ONLY</code> socket option) whether an IPv6 socket listening on a wildcard address <code>[::]</code> will accept only IPv6 connections or both IPv6 and IPv4 connections. This parameter is turned on by default. It can only be set once on start. </dd> <dt> <code>so_keepalive</code>=<code>on</code>|<code>off</code>|[<code><i>keepidle</i></code>]:[<code><i>keepintvl</i></code>]:[<code><i>keepcnt</i></code>] </dt> <dd> this parameter configures the “TCP keepalive” behavior for the listening socket. If this parameter is omitted then the operating system’s settings will be in effect for the socket. If it is set to the value “<code>on</code>”, the <code>SO_KEEPALIVE</code> option is turned on for the socket. If it is set to the value “<code>off</code>”, the <code>SO_KEEPALIVE</code> option is turned off for the socket. Some operating systems support setting of TCP keepalive parameters on a per-socket basis using the <code>TCP_KEEPIDLE</code>, <code>TCP_KEEPINTVL</code>, and <code>TCP_KEEPCNT</code> socket options. On such systems (currently, Linux 2.4+, NetBSD 5+, and FreeBSD 9.0-STABLE), they can be configured using the <code><i>keepidle</i></code>, <code><i>keepintvl</i></code>, and <code><i>keepcnt</i></code> parameters. One or two parameters may be omitted, in which case the system default setting for the corresponding socket option will be in effect. For example, <pre data-language=\"nginx\">so_keepalive=30m::10</pre> will set the idle timeout (<code>TCP_KEEPIDLE</code>) to 30 minutes, leave the probe interval (<code>TCP_KEEPINTVL</code>) at its system default, and set the probes count (<code>TCP_KEEPCNT</code>) to 10 probes. </dd> </dl>\n\n<div class=\"directive\" id=\"mail\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>mail</strong> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Provides the configuration file context in which the mail server directives are specified. </p>\n<div class=\"directive\" id=\"protocol\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>protocol</strong> \n  <code>imap</code> |\n  <code>pop3</code> |\n  <code>smtp</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the protocol for a proxied server. Supported protocols are <a href=\"ngx_mail_imap_module\">IMAP</a>, <a href=\"ngx_mail_pop3_module\">POP3</a>, and <a href=\"ngx_mail_smtp_module\">SMTP</a>. </p>\n<p> If the directive is not set, the protocol can be detected automatically based on the well-known port specified in the <a href=\"#listen\">listen</a> directive: </p> <ul class=\"compact\"> <li> <code>imap</code>: 143, 993 </li> <li> <code>pop3</code>: 110, 995 </li> <li> <code>smtp</code>: 25, 587, 465 </li> </ul>\n\n<p> Unnecessary protocols can be disabled using the <a href=\"../configure\">configuration</a> parameters <code>--without-mail_imap_module</code>, <code>--without-mail_pop3_module</code>, and <code>--without-mail_smtp_module</code>. </p>\n<div class=\"directive\" id=\"resolver\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>resolver</strong> \n<code><i>address</i></code> ...\n[<code>valid</code>=<code><i>time</i></code>];</code><br><code><strong>resolver</strong> <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>resolver off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Configures name servers used to find the client’s hostname to pass it to the <a href=\"ngx_mail_auth_http_module\">authentication server</a>, and in the <a href=\"ngx_mail_proxy_module#xclient\">XCLIENT</a> command when proxying SMTP. For example: </p> <pre data-language=\"nginx\">\nresolver 127.0.0.1 [::1]:5353;\n</pre>\n<p> An address can be specified as a domain name or IP address, and an optional port (1.3.1, 1.2.2). If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion. </p> <blockquote class=\"note\"> Before version 1.1.7, only a single name server could be configured. Specifying name servers using IPv6 addresses is supported starting from versions 1.3.1 and 1.2.2. </blockquote>\n<p> By default, nginx caches answers using the TTL value of a response. An optional <code>valid</code> parameter allows overriding it: </p> <pre data-language=\"nginx\">\nresolver 127.0.0.1 [::1]:5353 valid=30s;\n</pre>\n <blockquote class=\"note\"> Before version 1.1.9, tuning of caching time was not possible, and nginx always cached answers for the duration of 5 minutes. </blockquote>\n\n<p> The special value <code>off</code> disables resolving. </p>\n<div class=\"directive\" id=\"resolver_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>resolver_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>resolver_timeout 30s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets a timeout for DNS operations, for example: </p> <pre data-language=\"nginx\">\nresolver_timeout 5s;\n</pre>\n\n<div class=\"directive\" id=\"server\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>server</strong> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code><br> </td> </tr> </table></div>\n<p> Sets the configuration for a server. </p>\n<div class=\"directive\" id=\"server_name\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>server_name</strong> <code><i>name</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>server_name hostname;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the server name that is used: </p> <ul class=\"compact\"> <li> in the initial POP3/SMTP server greeting; </li> <li> in the salt during the SASL CRAM-MD5 authentication; </li> <li> in the <code>EHLO</code> command when connecting to the SMTP backend, if the passing of the <a href=\"ngx_mail_proxy_module#xclient\">XCLIENT</a> command is enabled. </li> </ul>\n\n<p> If the directive is not specified, the machine’s hostname is used. </p>\n<div class=\"directive\" id=\"timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the timeout that is used before proxying to the backend starts. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/mail/ngx_mail_core_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/mail/ngx_mail_core_module.html</a>\n  </p>\n</div>\n","mail/ngx_mail_ssl_module":"<h1>Module ngx_mail_ssl_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#ssl\">ssl</a></li>\n<li><a href=\"#ssl_certificate\">ssl_certificate</a></li>\n<li><a href=\"#ssl_certificate_key\">ssl_certificate_key</a></li>\n<li><a href=\"#ssl_ciphers\">ssl_ciphers</a></li>\n<li><a href=\"#ssl_client_certificate\">ssl_client_certificate</a></li>\n<li><a href=\"#ssl_crl\">ssl_crl</a></li>\n<li><a href=\"#ssl_dhparam\">ssl_dhparam</a></li>\n<li><a href=\"#ssl_ecdh_curve\">ssl_ecdh_curve</a></li>\n<li><a href=\"#ssl_password_file\">ssl_password_file</a></li>\n<li><a href=\"#ssl_prefer_server_ciphers\">ssl_prefer_server_ciphers</a></li>\n<li><a href=\"#ssl_protocols\">ssl_protocols</a></li>\n<li><a href=\"#ssl_session_cache\">ssl_session_cache</a></li>\n<li><a href=\"#ssl_session_ticket_key\">ssl_session_ticket_key</a></li>\n<li><a href=\"#ssl_session_tickets\">ssl_session_tickets</a></li>\n<li><a href=\"#ssl_session_timeout\">ssl_session_timeout</a></li>\n<li><a href=\"#ssl_trusted_certificate\">ssl_trusted_certificate</a></li>\n<li><a href=\"#ssl_verify_client\">ssl_verify_client</a></li>\n<li><a href=\"#ssl_verify_depth\">ssl_verify_depth</a></li>\n<li><a href=\"#starttls\">starttls</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_mail_ssl_module</code> module provides the necessary support for a mail proxy server to work with the SSL/TLS protocol. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-mail_ssl_module</code> configuration parameter. </p> <blockquote class=\"note\"> This module requires the <a href=\"http://www.openssl.org\">OpenSSL</a> library. </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n<p> To reduce the processor load, it is recommended to </p> <ul class=\"compact\"> <li> set the number of worker processes equal to the number of processors, </li> <li> enable the shared session cache, </li> <li> disable the built-in session cache, </li> <li> and possibly increase the session lifetime (by default, 5 minutes): </li> </ul>\n <pre data-language=\"nginx\">\n<strong>worker_processes auto;</strong>\n\nmail {\n\n    ...\n\n    server {\n        listen              993 ssl;\n\n        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;\n        ssl_certificate     /usr/local/nginx/conf/cert.pem;\n        ssl_certificate_key /usr/local/nginx/conf/cert.key;\n        <strong>ssl_session_cache   shared:SSL:10m;</strong>\n        <strong>ssl_session_timeout 10m;</strong>\n\n        ...\n    }\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"ssl\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables the SSL/TLS protocol for the given server. </p>\n<div class=\"directive\" id=\"ssl_certificate\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with the certificate in the PEM format for the given server. If intermediate certificates should be specified in addition to a primary certificate, they should be specified in the same file in the following order: the primary certificate comes first, then the intermediate certificates. A secret key in the PEM format may be placed in the same file. </p>\n<p> Since version 1.11.0, this directive can be specified multiple times to load certificates of different types, for example, RSA and ECDSA: </p> <pre data-language=\"nginx\">\nserver {\n    listen              993 ssl;\n\n    ssl_certificate     example.com.rsa.crt;\n    ssl_certificate_key example.com.rsa.key;\n\n    ssl_certificate     example.com.ecdsa.crt;\n    ssl_certificate_key example.com.ecdsa.key;\n\n    ...\n}\n</pre>\n <blockquote class=\"note\"> Only OpenSSL 1.0.2 or higher supports separate certificate chains for different certificates. With older versions, only one certificate chain can be used. </blockquote>\n\n<div class=\"directive\" id=\"ssl_certificate_key\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_certificate_key</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with the secret key in the PEM format for the given server. </p>\n<p> The value <code>engine</code>:<code><i>name</i></code>:<code><i>id</i></code> can be specified instead of the <code><i>file</i></code> (1.7.9), which loads a secret key with a specified <code><i>id</i></code> from the OpenSSL engine <code><i>name</i></code>. </p>\n<div class=\"directive\" id=\"ssl_ciphers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_ciphers</strong> <code><i>ciphers</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_ciphers HIGH:!aNULL:!MD5;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies the enabled ciphers. The ciphers are specified in the format understood by the OpenSSL library, for example: </p> <pre data-language=\"nginx\">\nssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n</pre>\n\n<p> The full list can be viewed using the “<code>openssl ciphers</code>” command. </p>\n <blockquote class=\"note\"> The previous versions of nginx used <a href=\"../http/configuring_https_servers#compatibility\">different</a> ciphers by default. </blockquote>\n\n<div class=\"directive\" id=\"ssl_client_certificate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_client_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.11. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with trusted CA certificates in the PEM format used to <a href=\"#ssl_verify_client\">verify</a> client certificates. </p>\n<p> The list of certificates will be sent to clients. If this is not desired, the <a href=\"#ssl_trusted_certificate\">ssl_trusted_certificate</a> directive can be used. </p>\n<div class=\"directive\" id=\"ssl_crl\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_crl</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.11. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with revoked certificates (CRL) in the PEM format used to <a href=\"#ssl_verify_client\">verify</a> client certificates. </p>\n<div class=\"directive\" id=\"ssl_dhparam\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_dhparam</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 0.7.2. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with DH parameters for DHE ciphers. </p>\n<div class=\"directive\" id=\"ssl_ecdh_curve\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_ecdh_curve</strong> <code><i>curve</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_ecdh_curve auto;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table> <p> This directive appeared in versions 1.1.0 and 1.0.6. </p> </div>\n<p> Specifies a <code><i>curve</i></code> for ECDHE ciphers. </p>\n<p> When using OpenSSL 1.0.2 or higher, it is possible to specify multiple curves (1.11.0), for example: </p> <pre data-language=\"nginx\">\nssl_ecdh_curve prime256v1:secp384r1;\n</pre>\n\n<p> The special value <code>auto</code> (1.11.0) instructs nginx to use a list built into the OpenSSL library when using OpenSSL 1.0.2 or higher, or <code>prime256v1</code> with older versions. </p>\n <blockquote class=\"note\"> Prior to version 1.11.0, the <code>prime256v1</code> curve was used by default. </blockquote>\n\n<div class=\"directive\" id=\"ssl_password_file\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_password_file</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.3. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with passphrases for <a href=\"#ssl_certificate_key\">secret keys</a> where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nmail {\n    ssl_password_file /etc/keys/global.pass;\n    ...\n\n    server {\n        server_name mail1.example.com;\n        ssl_certificate_key /etc/keys/first.key;\n    }\n\n    server {\n        server_name mail2.example.com;\n\n        # named pipe can also be used instead of a file\n        ssl_password_file /etc/keys/fifo;\n        ssl_certificate_key /etc/keys/second.key;\n    }\n}\n</pre>\n\n<div class=\"directive\" id=\"ssl_prefer_server_ciphers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_prefer_server_ciphers</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_prefer_server_ciphers off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies that server ciphers should be preferred over client ciphers when the SSLv3 and TLS protocols are used. </p>\n<div class=\"directive\" id=\"ssl_protocols\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_protocols</strong> \n    [<code>SSLv2</code>]\n    [<code>SSLv3</code>]\n    [<code>TLSv1</code>]\n    [<code>TLSv1.1</code>]\n    [<code>TLSv1.2</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables the specified protocols. The <code>TLSv1.1</code> and <code>TLSv1.2</code> parameters work only when the OpenSSL library of version 1.0.1 or higher is used. </p> <blockquote class=\"note\"> The <code>TLSv1.1</code> and <code>TLSv1.2</code> parameters are supported starting from versions 1.1.13 and 1.0.12 so when the OpenSSL version 1.0.1 or higher is used on older nginx versions, these protocols work, but cannot be disabled. </blockquote>\n\n<div class=\"directive\" id=\"ssl_session_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_session_cache</strong> \n    <code>off</code> |\n    <code>none</code> |\n    [<code>builtin</code>[:<code><i>size</i></code>]]\n    [<code>shared</code>:<code><i>name</i></code>:<code><i>size</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_session_cache none;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the types and sizes of caches that store session parameters. A cache can be of any of the following types: </p> <dl class=\"compact\"> <dt><code>off</code></dt> <dd> the use of a session cache is strictly prohibited: nginx explicitly tells a client that sessions may not be reused. </dd> <dt><code>none</code></dt> <dd> the use of a session cache is gently disallowed: nginx tells a client that sessions may be reused, but does not actually store session parameters in the cache. </dd> <dt><code>builtin</code></dt> <dd> a cache built in OpenSSL; used by one worker process only. The cache size is specified in sessions. If size is not given, it is equal to 20480 sessions. Use of the built-in cache can cause memory fragmentation. </dd> <dt><code>shared</code></dt> <dd> a cache shared between all worker processes. The cache size is specified in bytes; one megabyte can store about 4000 sessions. Each shared cache should have an arbitrary name. A cache with the same name can be used in several servers. </dd> </dl>\n\n<p> Both cache types can be used simultaneously, for example: </p> <pre data-language=\"nginx\">\nssl_session_cache builtin:1000 shared:SSL:10m;\n</pre>\n<p> but using only shared cache without the built-in cache should be more efficient. </p>\n<div class=\"directive\" id=\"ssl_session_ticket_key\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_session_ticket_key</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.7. </p>\n</div>\n<p> Sets a <code><i>file</i></code> with the secret key used to encrypt and decrypt TLS session tickets. The directive is necessary if the same key has to be shared between multiple servers. By default, a randomly generated key is used. </p>\n<p> If several keys are specified, only the first key is used to encrypt TLS session tickets. This allows configuring key rotation, for example: </p> <pre data-language=\"nginx\">\nssl_session_ticket_key current.key;\nssl_session_ticket_key previous.key;\n</pre>\n\n<p> The <code><i>file</i></code> must contain 48 bytes of random data and can be created using the following command: </p> <pre data-language=\"nginx\">\nopenssl rand 48 &gt; ticket.key\n</pre>\n\n<div class=\"directive\" id=\"ssl_session_tickets\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_session_tickets</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_session_tickets on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.9. </p>\n</div>\n<p> Enables or disables session resumption through <a href=\"http://tools.ietf.org/html/rfc5077\">TLS session tickets</a>. </p>\n<div class=\"directive\" id=\"ssl_session_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_session_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_session_timeout 5m;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a time during which a client may reuse the session parameters stored in a cache. </p>\n<div class=\"directive\" id=\"ssl_trusted_certificate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_trusted_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.11. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with trusted CA certificates in the PEM format used to <a href=\"#ssl_verify_client\">verify</a> client certificates. </p>\n<p> In contrast to the certificate set by <a href=\"#ssl_client_certificate\">ssl_client_certificate</a>, the list of these certificates will not be sent to clients. </p>\n<div class=\"directive\" id=\"ssl_verify_client\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_verify_client</strong> \n    <code>on</code> | <code>off</code> |\n    <code>optional</code> | <code>optional_no_ca</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_verify_client off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.11. </p>\n</div>\n<p> Enables verification of client certificates. The verification result is passed in the “Auth-SSL-Verify” header of the <a href=\"ngx_mail_auth_http_module#auth_http\">authentication</a> request. </p>\n<p> The <code>optional</code> parameter requests the client certificate and verifies it if the certificate is present. </p>\n<p> The <code>optional_no_ca</code> parameter requests the client certificate but does not require it to be signed by a trusted CA certificate. This is intended for the use in cases when a service that is external to nginx performs the actual certificate verification. The contents of the certificate is accessible through requests <a href=\"ngx_mail_auth_http_module#auth_http_pass_client_cert\">sent</a> to the authentication server. </p>\n<div class=\"directive\" id=\"ssl_verify_depth\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_verify_depth</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_verify_depth 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.11. </p>\n</div>\n<p> Sets the verification depth in the client certificates chain. </p>\n<div class=\"directive\" id=\"starttls\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>starttls</strong> \n  <code>on</code> |\n  <code>off</code> |\n  <code>only</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>starttls off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>mail</code>, <code>server</code><br> </td> </tr> </table></div>\n <dl class=\"compact\"> <dt><code>on</code></dt> <dd> allow usage of the <code>STLS</code> command for the POP3 and the <code>STARTTLS</code> command for the IMAP; </dd> <dt><code>off</code></dt> <dd> deny usage of the <code>STLS</code> and <code>STARTTLS</code> commands; </dd> <dt><code>only</code></dt> <dd> require preliminary TLS transition. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/mail/ngx_mail_ssl_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/mail/ngx_mail_ssl_module.html</a>\n  </p>\n</div>\n","stream/ngx_stream_core_module":"<h1>Module ngx_stream_core_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#listen\">listen</a></li>\n<li><a href=\"#resolver\">resolver</a></li>\n<li><a href=\"#resolver_timeout\">resolver_timeout</a></li>\n<li><a href=\"#server\">server</a></li>\n<li><a href=\"#stream\">stream</a></li>\n<li><a href=\"#tcp_nodelay\">tcp_nodelay</a></li>\n<li><a href=\"#variables_hash_bucket_size\">variables_hash_bucket_size</a></li>\n<li><a href=\"#variables_hash_max_size\">variables_hash_max_size</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_stream_core_module</code> module is available since version 1.9.0. This module is not built by default, it should be enabled with the <code>--with-stream</code> configuration parameter. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nworker_processes auto;\n\nerror_log /var/log/nginx/error.log info;\n\nevents {\n    worker_connections  1024;\n}\n\nstream {\n    upstream backend {\n        hash $remote_addr consistent;\n\n        server backend1.example.com:12345 weight=5;\n        server 127.0.0.1:12345            max_fails=3 fail_timeout=30s;\n        server unix:/tmp/backend3;\n    }\n\n    upstream dns {\n       server 192.168.0.1:53535;\n       server dns.example.com:53;\n    }\n\n    server {\n        listen 12345;\n        proxy_connect_timeout 1s;\n        proxy_timeout 3s;\n        proxy_pass backend;\n    }\n\n    server {\n        listen 127.0.0.1:53 udp;\n        proxy_responses 1;\n        proxy_timeout 20s;\n        proxy_pass dns;\n    }\n\n    server {\n        listen [::1]:12345;\n        proxy_pass unix:/tmp/stream.socket;\n    }\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"listen\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>listen</strong> \n    <code><i>address</i></code>:<code><i>port</i></code>\n    [<code>ssl</code>]\n    [<code>udp</code>]\n    [<code>backlog</code>=<code><i>number</i></code>]\n    [<code>bind</code>]\n    [<code>ipv6only</code>=<code>on</code>|<code>off</code>]\n    [<code>reuseport</code>]\n    [<code>so_keepalive</code>=<code>on</code>|<code>off</code>|[<code><i>keepidle</i></code>]:[<code><i>keepintvl</i></code>]:[<code><i>keepcnt</i></code>]];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>address</i></code> and <code><i>port</i></code> for the socket on which the server will accept connections. It is possible to specify just the port. The address can also be a hostname, for example: </p> <pre data-language=\"nginx\">\nlisten 127.0.0.1:12345;\nlisten *:12345;\nlisten 12345;     # same as *:12345\nlisten localhost:12345;\n</pre>\n<p> IPv6 addresses are specified in square brackets: </p> <pre data-language=\"nginx\">\nlisten [::1]:12345;\nlisten [::]:12345;\n</pre>\n<p> UNIX-domain sockets are specified with the “<code>unix:</code>” prefix: </p> <pre data-language=\"nginx\">\nlisten unix:/var/run/nginx.sock;\n</pre>\n\n<p> The <code>ssl</code> parameter allows specifying that all connections accepted on this port should work in SSL mode. </p>\n<p id=\"udp\"> The <code>udp</code> parameter configures a listening socket for working with datagrams (1.9.13). </p>\n<p> The <code>listen</code> directive can have several additional parameters specific to socket-related system calls. </p> <dl class=\"compact\"> <dt> <code>backlog</code>=<code><i>number</i></code> </dt> <dd> sets the <code>backlog</code> parameter in the <code>listen()</code> call that limits the maximum length for the queue of pending connections (1.9.2). By default, <code>backlog</code> is set to -1 on FreeBSD, DragonFly BSD, and Mac OS X, and to 511 on other platforms. </dd> <dt> <code>bind</code> </dt> <dd> this parameter instructs to make a separate <code>bind()</code> call for a given address:port pair. The fact is that if there are several <code>listen</code> directives with the same port but different addresses, and one of the <code>listen</code> directives listens on all addresses for the given port (<code>*:</code><code><i>port</i></code>), nginx will <code>bind()</code> only to <code>*:</code><code><i>port</i></code>. It should be noted that the <code>getsockname()</code> system call will be made in this case to determine the address that accepted the connection. If the <code>ipv6only</code> or <code>so_keepalive</code> parameters are used then for a given <code><i>address</i></code>:<code><i>port</i></code> pair a separate <code>bind()</code> call will always be made. </dd> <dt> <code>ipv6only</code>=<code>on</code>|<code>off</code> </dt> <dd> this parameter determines (via the <code>IPV6_V6ONLY</code> socket option) whether an IPv6 socket listening on a wildcard address <code>[::]</code> will accept only IPv6 connections or both IPv6 and IPv4 connections. This parameter is turned on by default. It can only be set once on start. </dd> <dt id=\"reuseport\"> <code>reuseport</code> </dt> <dd> this parameter (1.9.1) instructs to create an individual listening socket for each worker process (using the <code>SO_REUSEPORT</code> socket option), allowing a kernel to distribute incoming connections between worker processes. This currently works only on Linux 3.9+ and DragonFly BSD. <blockquote class=\"note\"> Inappropriate use of this option may have its security <a href=\"http://man7.org/linux/man-pages/man7/socket.7.html\">implications</a>. </blockquote> </dd> <dt> <code>so_keepalive</code>=<code>on</code>|<code>off</code>|[<code><i>keepidle</i></code>]:[<code><i>keepintvl</i></code>]:[<code><i>keepcnt</i></code>] </dt> <dd> this parameter configures the “TCP keepalive” behavior for the listening socket. If this parameter is omitted then the operating system’s settings will be in effect for the socket. If it is set to the value “<code>on</code>”, the <code>SO_KEEPALIVE</code> option is turned on for the socket. If it is set to the value “<code>off</code>”, the <code>SO_KEEPALIVE</code> option is turned off for the socket. Some operating systems support setting of TCP keepalive parameters on a per-socket basis using the <code>TCP_KEEPIDLE</code>, <code>TCP_KEEPINTVL</code>, and <code>TCP_KEEPCNT</code> socket options. On such systems (currently, Linux 2.4+, NetBSD 5+, and FreeBSD 9.0-STABLE), they can be configured using the <code><i>keepidle</i></code>, <code><i>keepintvl</i></code>, and <code><i>keepcnt</i></code> parameters. One or two parameters may be omitted, in which case the system default setting for the corresponding socket option will be in effect. For example, <pre data-language=\"nginx\">so_keepalive=30m::10</pre> will set the idle timeout (<code>TCP_KEEPIDLE</code>) to 30 minutes, leave the probe interval (<code>TCP_KEEPINTVL</code>) at its system default, and set the probes count (<code>TCP_KEEPCNT</code>) to 10 probes. </dd> </dl>\n\n<p> Different servers must listen on different <code><i>address</i></code>:<code><i>port</i></code> pairs. </p>\n<div class=\"directive\" id=\"resolver\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>resolver</strong> \n    <code><i>address</i></code> ...\n    [<code>valid</code>=<code><i>time</i></code>]\n    [<code>ipv6</code>=<code>on</code>|<code>off</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.11.3. </p>\n</div>\n<p> Configures name servers used to resolve names of upstream servers into addresses, for example: </p> <pre data-language=\"nginx\">\nresolver 127.0.0.1 [::1]:5353;\n</pre>\n<p> An address can be specified as a domain name or IP address, and an optional port. If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion. </p>\n<p> By default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv6 addresses is not desired, the <code>ipv6=off</code> parameter can be specified. </p>\n<p> By default, nginx caches answers using the TTL value of a response. The optional <code>valid</code> parameter allows overriding it: </p> <pre data-language=\"nginx\">\nresolver 127.0.0.1 [::1]:5353 valid=30s;\n</pre>\n <blockquote class=\"note\"> Before version 1.11.3, this directive was available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"resolver_timeout\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>resolver_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>resolver_timeout 30s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.11.3. </p>\n</div>\n<p> Sets a timeout for name resolution, for example: </p> <pre data-language=\"nginx\">\nresolver_timeout 5s;\n</pre>\n <blockquote class=\"note\"> Before version 1.11.3, this directive was available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"server\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>server</strong> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table></div>\n<p> Sets the configuration for a server. </p>\n<div class=\"directive\" id=\"stream\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>stream</strong> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>main</code><br> </td> </tr> </table></div>\n<p> Provides the configuration file context in which the stream server directives are specified. </p>\n<div class=\"directive\" id=\"tcp_nodelay\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>tcp_nodelay</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>tcp_nodelay on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.4. </p>\n</div>\n<p> Enables or disables the use of the <code>TCP_NODELAY</code> option. The option is enabled for both client and proxied server connections. </p>\n<div class=\"directive\" id=\"variables_hash_bucket_size\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>variables_hash_bucket_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>variables_hash_bucket_size 64;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.11.2. </p>\n</div>\n<p> Sets the bucket size for the variables hash table. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p>\n<div class=\"directive\" id=\"variables_hash_max_size\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>variables_hash_max_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>variables_hash_max_size 1024;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.11.2. </p>\n</div>\n<p> Sets the maximum <code><i>size</i></code> of the variables hash table. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p> <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_stream_core_module</code> module supports variables since 1.11.2. </p> <dl class=\"compact\"> <dt id=\"var_binary_remote_addr\"><code>$binary_remote_addr</code></dt> <dd> client address in a binary form, value’s length is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses </dd> <dt id=\"var_bytes_sent\"><code>$bytes_sent</code></dt> <dd> number of bytes sent to a client </dd> <dt id=\"var_connection\"><code>$connection</code></dt> <dd> connection serial number </dd> <dt id=\"var_hostname\"><code>$hostname</code></dt> <dd> host name </dd> <dt id=\"var_msec\"><code>$msec</code></dt> <dd> current time in seconds with the milliseconds resolution </dd> <dt id=\"var_nginx_version\"><code>$nginx_version</code></dt> <dd> nginx version </dd> <dt id=\"var_pid\"><code>$pid</code></dt> <dd> PID of the worker process </dd> <dt id=\"var_remote_addr\"><code>$remote_addr</code></dt> <dd> client address </dd> <dt id=\"var_remote_port\"><code>$remote_port</code></dt> <dd> client port </dd> <dt id=\"var_server_addr\"><code>$server_addr</code></dt> <dd> an address of the server which accepted a connection <p> Computing a value of this variable usually requires one system call. To avoid a system call, the <a href=\"#listen\">listen</a> directives must specify addresses and use the <code>bind</code> parameter. </p> </dd> <dt id=\"var_server_port\"><code>$server_port</code></dt> <dd> port of the server which accepted a connection </dd> <dt id=\"var_time_iso8601\"><code>$time_iso8601</code></dt> <dd> local time in the ISO 8601 standard format </dd> <dt id=\"var_time_local\"><code>$time_local</code></dt> <dd> local time in the Common Log Format </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/stream/ngx_stream_core_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/stream/ngx_stream_core_module.html</a>\n  </p>\n</div>\n","stream/ngx_stream_geo_module":"<h1>Module ngx_stream_geo_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#geo\">geo</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_stream_geo_module</code> module (1.11.3) creates variables with values depending on the client IP address. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\ngeo $geo {\n    default        0;\n\n    127.0.0.1      2;\n    192.168.1.0/24 1;\n    10.1.0.0/16    1;\n\n    ::1            2;\n    2001:0db8::/32 1;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"geo\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>geo</strong> [<code><i>$address</i></code>] <code><i>$variable</i></code> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table></div>\n<p> Describes the dependency of values of the specified variable on the client IP address. By default, the address is taken from the <code>$remote_addr</code> variable, but it can also be taken from another variable, for example: </p> <pre data-language=\"nginx\">\ngeo $arg_remote_addr $geo {\n    ...;\n}\n</pre>\n\n <blockquote class=\"note\"> Since variables are evaluated only when used, the mere existence of even a large number of declared “<code>geo</code>” variables does not cause any extra costs for connection processing. </blockquote>\n\n<p> If the value of a variable does not represent a valid IP address then the “<code>255.255.255.255</code>” address is used. </p>\n<p> Addresses are specified either as prefixes in CIDR notation (including individual addresses) or as ranges. </p>\n<p> The following special parameters are also supported: </p> <dl class=\"compact\"> <dt><code>delete</code></dt> <dd> deletes the specified network. </dd> <dt><code>default</code></dt> <dd> a value set to the variable if the client address does not match any of the specified addresses. When addresses are specified in CIDR notation, “<code>0.0.0.0/0</code>” and “<code>::/0</code>” can be used instead of <code>default</code>. When <code>default</code> is not specified, the default value will be an empty string. </dd> <dt><code>include</code></dt> <dd> includes a file with addresses and values. There can be several inclusions. </dd> <dt><code>ranges</code></dt> <dd> indicates that addresses are specified as ranges. This parameter should be the first. To speed up loading of a geo base, addresses should be put in ascending order. </dd> </dl>\n\n<p> Example: </p> <pre data-language=\"nginx\">\ngeo $country {\n    default        ZZ;\n    include        conf/geo.conf;\n    delete         127.0.0.0/16;\n\n    127.0.0.0/24   US;\n    127.0.0.1/32   RU;\n    10.1.0.0/16    RU;\n    192.168.1.0/24 UK;\n}\n</pre>\n\n<p> The <code>conf/geo.conf</code> file could contain the following lines: </p> <pre data-language=\"nginx\">\n10.2.0.0/16    RU;\n192.168.2.0/24 RU;\n</pre>\n\n<p> A value of the most specific match is used. For example, for the 127.0.0.1 address the value “<code>RU</code>” will be chosen, not “<code>US</code>”. </p>\n<p> Example with ranges: </p> <pre data-language=\"nginx\">\ngeo $country {\n    ranges;\n    default                   ZZ;\n    127.0.0.0-127.0.0.0       US;\n    127.0.0.1-127.0.0.1       RU;\n    127.0.0.1-127.0.0.255     US;\n    10.1.0.0-10.1.255.255     RU;\n    192.168.1.0-192.168.1.255 UK;\n}\n</pre>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/stream/ngx_stream_geo_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/stream/ngx_stream_geo_module.html</a>\n  </p>\n</div>\n","stream/ngx_stream_geoip_module":"<h1>Module ngx_stream_geoip_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#geoip_country\">geoip_country</a></li>\n<li><a href=\"#geoip_city\">geoip_city</a></li>\n<li><a href=\"#geoip_org\">geoip_org</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_stream_geoip_module</code> module (1.11.3) creates variables with values depending on the client IP address, using the precompiled <a href=\"http://www.maxmind.com\">MaxMind</a> databases. </p>\n<p> When using the databases with IPv6 support, IPv4 addresses are looked up as IPv4-mapped IPv6 addresses. </p>\n<p> This module is not built by default, it should be enabled with the <code>--with-stream_geoip_module</code> configuration parameter. </p> <blockquote class=\"note\"> This module requires the <a href=\"http://www.maxmind.com/app/c\">MaxMind GeoIP</a> library. </blockquote>\n <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nstream {\n    geoip_country         GeoIP.dat;\n    geoip_city            GeoLiteCity.dat;\n\n    map $geoip_city_continent_code $nearest_server {\n        default        example.com;\n        EU          eu.example.com;\n        NA          na.example.com;\n        AS          as.example.com;\n    }\n   ...\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"geoip_country\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>geoip_country</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table></div>\n<p> Specifies a database used to determine the country depending on the client IP address. The following variables are available when using this database: </p> <dl class=\"compact\"> <dt id=\"var_geoip_country_code\"><code>$geoip_country_code</code></dt> <dd> two-letter country code, for example, “<code>RU</code>”, “<code>US</code>”. </dd> <dt id=\"var_geoip_country_code3\">\n<code>$geoip_country_code3</code> </dt> <dd> three-letter country code, for example, “<code>RUS</code>”, “<code>USA</code>”. </dd> <dt id=\"var_geoip_country_name\"><code>$geoip_country_name</code></dt> <dd> country name, for example, “<code>Russian Federation</code>”, “<code>United States</code>”. </dd> </dl>\n\n<div class=\"directive\" id=\"geoip_city\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>geoip_city</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table></div>\n<p> Specifies a database used to determine the country, region, and city depending on the client IP address. The following variables are available when using this database: </p> <dl class=\"compact\"> <dt id=\"var_geoip_area_code\"><code>$geoip_area_code</code></dt> <dd>telephone area code (US only). <blockquote class=\"note\"> This variable may contain outdated information since the corresponding database field is deprecated. </blockquote> </dd> <dt id=\"var_geoip_city_continent_code\"> <code>$geoip_city_continent_code</code>\n</dt> <dd>two-letter continent code, for example, “<code>EU</code>”, “<code>NA</code>”. </dd> <dt id=\"var_geoip_city_country_code\">\n<code>$geoip_city_country_code</code> </dt> <dd> two-letter country code, for example, “<code>RU</code>”, “<code>US</code>”. </dd> <dt id=\"var_geoip_city_country_code3\">\n<code>$geoip_city_country_code3</code> </dt> <dd> three-letter country code, for example, “<code>RUS</code>”, “<code>USA</code>”. </dd> <dt id=\"var_geoip_city_country_name\">\n<code>$geoip_city_country_name</code> </dt> <dd> country name, for example, “<code>Russian Federation</code>”, “<code>United States</code>”. </dd> <dt id=\"var_geoip_dma_code\"><code>$geoip_dma_code</code></dt> <dd> DMA region code in US (also known as “metro code”), according to the <a href=\"https://developers.google.com/adwords/api/docs/appendix/cities-DMAregions\">geotargeting</a> in Google AdWords API. </dd> <dt id=\"var_geoip_latitude\"><code>$geoip_latitude</code></dt> <dd>latitude.</dd> <dt id=\"var_geoip_longitude\"><code>$geoip_longitude</code></dt> <dd>longitude.</dd> <dt id=\"var_geoip_region\"><code>$geoip_region</code></dt> <dd> two-symbol country region code (region, territory, state, province, federal land and the like), for example, “<code>48</code>”, “<code>DC</code>”. </dd> <dt id=\"var_geoip_region_name\"><code>$geoip_region_name</code></dt> <dd> country region name (region, territory, state, province, federal land and the like), for example, “<code>Moscow City</code>”, “<code>District of Columbia</code>”. </dd> <dt id=\"var_geoip_city\"><code>$geoip_city</code></dt> <dd> city name, for example, “<code>Moscow</code>”, “<code>Washington</code>”. </dd> <dt id=\"var_geoip_postal_code\"><code>$geoip_postal_code</code></dt> <dd> postal code. </dd> </dl>\n\n<div class=\"directive\" id=\"geoip_org\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>geoip_org</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table></div>\n<p> Specifies a database used to determine the organization depending on the client IP address. The following variable is available when using this database: </p> <dl class=\"compact\"> <dt id=\"var_geoip_org\"><code>$geoip_org</code></dt> <dd> organization name, for example, “The University of Melbourne”. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/stream/ngx_stream_geoip_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/stream/ngx_stream_geoip_module.html</a>\n  </p>\n</div>\n","http/ngx_http_upstream_module":"<h1>Module ngx_http_upstream_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#upstream\">upstream</a></li>\n<li><a href=\"#server\">server</a></li>\n<li><a href=\"#zone\">zone</a></li>\n<li><a href=\"#state\">state</a></li>\n<li><a href=\"#hash\">hash</a></li>\n<li><a href=\"#ip_hash\">ip_hash</a></li>\n<li><a href=\"#keepalive\">keepalive</a></li>\n<li><a href=\"#ntlm\">ntlm</a></li>\n<li><a href=\"#least_conn\">least_conn</a></li>\n<li><a href=\"#least_time\">least_time</a></li>\n<li><a href=\"#health_check\">health_check</a></li>\n<li><a href=\"#match\">match</a></li>\n<li><a href=\"#queue\">queue</a></li>\n<li><a href=\"#sticky\">sticky</a></li>\n<li><a href=\"#sticky_cookie_insert\">sticky_cookie_insert</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_upstream_module</code> module is used to define groups of servers that can be referenced by the <a href=\"ngx_http_proxy_module#proxy_pass\">proxy_pass</a>, <a href=\"ngx_http_fastcgi_module#fastcgi_pass\">fastcgi_pass</a>, <a href=\"ngx_http_uwsgi_module#uwsgi_pass\">uwsgi_pass</a>, <a href=\"ngx_http_scgi_module#scgi_pass\">scgi_pass</a>, and <a href=\"ngx_http_memcached_module#memcached_pass\">memcached_pass</a> directives. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nupstream <strong>backend</strong> {\n    server backend1.example.com       weight=5;\n    server backend2.example.com:8080;\n    server unix:/tmp/backend3;\n\n    server backup1.example.com:8080   backup;\n    server backup2.example.com:8080   backup;\n}\n\nserver {\n    location / {\n        proxy_pass http://<strong>backend</strong>;\n    }\n}\n</pre>\n\n<p> Dynamically configurable group, available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>: </p> <pre data-language=\"nginx\">\nresolver 10.0.0.1;\n\nupstream <strong>dynamic</strong> {\n    zone upstream_dynamic 64k;\n\n    server backend1.example.com      weight=5;\n    server backend2.example.com:8080 fail_timeout=5s slow_start=30s;\n    server 192.0.2.1                 max_fails=3;\n    server backend3.example.com      resolve;\n    server backend4.example.com      service=http resolve;\n\n    server backup1.example.com:8080  backup;\n    server backup2.example.com:8080  backup;\n}\n\nserver {\n    location / {\n        proxy_pass http://<strong>dynamic</strong>;\n        health_check;\n    }\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"upstream\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>upstream</strong> <code><i>name</i></code> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Defines a group of servers. Servers can listen on different ports. In addition, servers listening on TCP and UNIX-domain sockets can be mixed. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nupstream backend {\n    server backend1.example.com weight=5;\n    server 127.0.0.1:8080       max_fails=3 fail_timeout=30s;\n    server unix:/tmp/backend3;\n\n    server backup1.example.com  backup;\n}\n</pre>\n\n<p> By default, requests are distributed between the servers using a weighted round-robin balancing method. In the above example, each 7 requests will be distributed as follows: 5 requests go to <code>backend1.example.com</code> and one request to each of the second and third servers. If an error occurs during communication with a server, the request will be passed to the next server, and so on until all of the functioning servers will be tried. If a successful response could not be obtained from any of the servers, the client will receive the result of the communication with the last server. </p>\n<div class=\"directive\" id=\"server\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>server</strong> <code><i>address</i></code> [<code><i>parameters</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table></div>\n<p> Defines the <code><i>address</i></code> and other <code><i>parameters</i></code> of a server. The address can be specified as a domain name or IP address, with an optional port, or as a UNIX-domain socket path specified after the “<code>unix:</code>” prefix. If a port is not specified, the port 80 is used. A domain name that resolves to several IP addresses defines multiple servers at once. </p>\n<p> The following parameters can be defined: </p> <dl class=\"compact\"> <dt id=\"weight\"> <code>weight</code>=<code><i>number</i></code> </dt> <dd> sets the weight of the server, by default, 1. </dd> <dt id=\"max_fails\"> <code>max_fails</code>=<code><i>number</i></code> </dt> <dd> sets the number of unsuccessful attempts to communicate with the server that should happen in the duration set by the <code>fail_timeout</code> parameter to consider the server unavailable for a duration also set by the <code>fail_timeout</code> parameter. By default, the number of unsuccessful attempts is set to 1. The zero value disables the accounting of attempts. What is considered an unsuccessful attempt is defined by the <a href=\"ngx_http_proxy_module#proxy_next_upstream\">proxy_next_upstream</a>, <a href=\"ngx_http_fastcgi_module#fastcgi_next_upstream\">fastcgi_next_upstream</a>, <a href=\"ngx_http_uwsgi_module#uwsgi_next_upstream\">uwsgi_next_upstream</a>, <a href=\"ngx_http_scgi_module#scgi_next_upstream\">scgi_next_upstream</a>, and <a href=\"ngx_http_memcached_module#memcached_next_upstream\">memcached_next_upstream</a> directives. </dd> <dt id=\"fail_timeout\"> <code>fail_timeout</code>=<code><i>time</i></code> </dt> <dd> sets <ul class=\"compact\"> <li> the time during which the specified number of unsuccessful attempts to communicate with the server should happen to consider the server unavailable; </li> <li> and the period of time the server will be considered unavailable. </li> </ul> By default, the parameter is set to 10 seconds. </dd> <dt id=\"backup\"> <code>backup</code> </dt> <dd> marks the server as a backup server. It will be passed requests when the primary servers are unavailable. </dd> <dt id=\"down\"> <code>down</code> </dt> <dd> marks the server as permanently unavailable. </dd> </dl>\n\n<p> Additionally, the following parameters are available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>: </p> <dl class=\"compact\"> <dt id=\"max_conns\"> <code>max_conns</code>=<code><i>number</i></code> </dt> <dd> limits the maximum <code><i>number</i></code> of simultaneous active connections to the proxied server (1.5.9). Default value is zero, meaning there is no limit. <blockquote class=\"note\"> When <a href=\"#keepalive\">keepalive</a> connections and multiple <a href=\"../ngx_core_module#worker_processes\">workers</a> are enabled, the total number of connections to the proxied server may exceed the <code>max_conns</code> value. </blockquote> </dd> <dt id=\"resolve\"> <code>resolve</code> </dt> <dd> monitors changes of the IP addresses that correspond to a domain name of the server, and automatically modifies the upstream configuration without the need of restarting nginx (1.5.12). The server group must reside in the <a href=\"#zone\">shared memory</a>. <p> In order for this parameter to work, the <a href=\"ngx_http_core_module#resolver\">resolver</a> directive must be specified in the <a href=\"ngx_http_core_module#http\">http</a> block. Example: </p> <pre data-language=\"nginx\">\nhttp {\n    resolver 10.0.0.1;\n\n    upstream u {\n        zone ...;\n        ...\n        server example.com resolve;\n    }\n}\n</pre>\n </dd> <dt id=\"route\"> <code>route</code>=<code><i>string</i></code> </dt> <dd> sets the server route name. </dd> <dt id=\"service\"> <code>service</code>=<code><i>name</i></code> </dt> <dd> enables resolving of DNS <a href=\"https://tools.ietf.org/html/rfc2782\">SRV</a> records and sets the service <code><i>name</i></code> (1.9.13). In order for this parameter to work, it is necessary to specify the <a href=\"#resolve\">resolve</a> parameter for the server and specify a hostname without a port number. <p> If the service name does not contain a dot (“<code>.</code>”), then the <a href=\"https://tools.ietf.org/html/rfc2782\">RFC</a>-compliant name is constructed and the TCP protocol is added to the service prefix. For example, to look up the <code>_http._tcp.backend.example.com</code> SRV record, it is necessary to specify the directive: </p> <pre data-language=\"nginx\">\nserver backend.example.com service=http resolve;\n</pre>\n<p> If the service name contains one or more dots, then the name is constructed by joining the service prefix and the server name. For example, to look up the <code>_http._tcp.backend.example.com</code> and <code>server1.backend.example.com</code> SRV records, it is necessary to specify the directives: </p> <pre data-language=\"nginx\">\nserver backend.example.com service=_http._tcp resolve;\nserver example.com service=server1.backend resolve;\n</pre>\n <p> Highest-priority SRV records (records with the same lowest-number priority value) are resolved as primary servers, the rest of SRV records are resolved as backup servers. If the <a href=\"#backup\">backup</a> parameter is specified for the server, high-priority SRV records are resolved as backup servers, the rest of SRV records are ignored. </p> </dd> <dt id=\"slow_start\"> <code>slow_start</code>=<code><i>time</i></code> </dt> <dd> sets the <code><i>time</i></code> during which the server will recover its weight from zero to a nominal value, when unhealthy server becomes <a href=\"#health_check\">healthy</a>, or when the server becomes available after a period of time it was considered <a href=\"#fail_timeout\">unavailable</a>. Default value is zero, i.e. slow start is disabled. </dd> </dl>\n\n <blockquote class=\"note\"> If there is only a single server in a group, <code>max_fails</code>, <code>fail_timeout</code> and <code>slow_start</code> parameters are ignored, and such a server will never be considered unavailable. </blockquote>\n\n<div class=\"directive\" id=\"zone\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>zone</strong> <code><i>name</i></code> [<code><i>size</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.0. </p>\n</div>\n<p> Defines the <code><i>name</i></code> and <code><i>size</i></code> of the shared memory zone that keeps the group’s configuration and run-time state that are shared between worker processes. Several groups may share the same zone. In this case, it is enough to specify the <code><i>size</i></code> only once. </p>\n<p> Additionally, as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>, such groups allow changing the group membership or modifying the settings of a particular server without the need of restarting nginx. The configuration is accessible via a special location handled by <a href=\"ngx_http_upstream_conf_module#upstream_conf\">upstream_conf</a>. </p>\n<div class=\"directive\" id=\"state\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>state</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.7. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> that keeps the state of the dynamically configurable group. The state is currently limited to the list of servers with their parameters. The file is read when parsing the configuration and is updated each time the upstream configuration is <a href=\"ngx_http_upstream_conf_module#upstream_conf\">changed</a>. Changing the file content directly should be avoided. The directive cannot be used along with the <a href=\"#server\">server</a> directive. </p>\n <blockquote class=\"note\"> Changes made during <a href=\"../control#reconfiguration\">configuration reload</a> or <a href=\"../control#upgrade\">binary upgrade</a> can be lost. </blockquote>\n\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"hash\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>hash</strong> <code><i>key</i></code> [<code>consistent</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.2. </p>\n</div>\n<p> Specifies a load balancing method for a server group where the client-server mapping is based on the hashed <code><i>key</i></code> value. The <code><i>key</i></code> can contain text, variables, and their combinations. Note that adding or removing a server from the group may result in remapping most of the keys to different servers. The method is compatible with the <a href=\"http://search.cpan.org/perldoc?Cache%3A%3AMemcached\">Cache::Memcached</a> Perl library. </p>\n<p> If the <code>consistent</code> parameter is specified the <a href=\"http://www.last.fm/user/RJ/journal/2007/04/10/392555/\">ketama</a> consistent hashing method will be used instead. The method ensures that only a few keys will be remapped to different servers when a server is added to or removed from the group. This helps to achieve a higher cache hit ratio for caching servers. The method is compatible with the <a href=\"http://search.cpan.org/perldoc?Cache%3A%3AMemcached%3A%3AFast\">Cache::Memcached::Fast</a> Perl library with the <code><i>ketama_points</i></code> parameter set to 160. </p>\n<div class=\"directive\" id=\"ip_hash\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ip_hash</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table></div>\n<p> Specifies that a group should use a load balancing method where requests are distributed between servers based on client IP addresses. The first three octets of the client IPv4 address, or the entire IPv6 address, are used as a hashing key. The method ensures that requests from the same client will always be passed to the same server except when this server is unavailable. In the latter case client requests will be passed to another server. Most probably, it will always be the same server as well. </p> <blockquote class=\"note\"> IPv6 addresses are supported starting from versions 1.3.2 and 1.2.2. </blockquote>\n\n<p> If one of the servers needs to be temporarily removed, it should be marked with the <code>down</code> parameter in order to preserve the current hashing of client IP addresses. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nupstream backend {\n    ip_hash;\n\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com <strong>down</strong>;\n    server backend4.example.com;\n}\n</pre>\n\n <blockquote class=\"note\"> Until versions 1.3.1 and 1.2.2, it was not possible to specify a weight for servers using the <code>ip_hash</code> load balancing method. </blockquote>\n\n<div class=\"directive\" id=\"keepalive\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>keepalive</strong> <code><i>connections</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.4. </p>\n</div>\n<p> Activates the cache for connections to upstream servers. </p>\n<p> The <code><i>connections</i></code> parameter sets the maximum number of idle keepalive connections to upstream servers that are preserved in the cache of each worker process. When this number is exceeded, the least recently used connections are closed. </p> <blockquote class=\"note\"> It should be particularly noted that the <code>keepalive</code> directive does not limit the total number of connections to upstream servers that an nginx worker process can open. The <code><i>connections</i></code> parameter should be set to a number small enough to let upstream servers process new incoming connections as well. </blockquote>\n\n<p> Example configuration of memcached upstream with keepalive connections: </p> <pre data-language=\"nginx\">\nupstream memcached_backend {\n    server 127.0.0.1:11211;\n    server 10.0.0.2:11211;\n\n    keepalive 32;\n}\n\nserver {\n    ...\n\n    location /memcached/ {\n        set $memcached_key $uri;\n        memcached_pass memcached_backend;\n    }\n\n}\n</pre>\n\n<p> For HTTP, the <a href=\"ngx_http_proxy_module#proxy_http_version\">proxy_http_version</a> directive should be set to “<code>1.1</code>” and the “Connection” header field should be cleared: </p> <pre data-language=\"nginx\">\nupstream http_backend {\n    server 127.0.0.1:8080;\n\n    keepalive 16;\n}\n\nserver {\n    ...\n\n    location /http/ {\n        proxy_pass http://http_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n        ...\n    }\n}\n</pre>\n\n <blockquote class=\"note\"> Alternatively, HTTP/1.0 persistent connections can be used by passing the “Connection: Keep-Alive” header field to an upstream server, though this method is not recommended. </blockquote>\n\n<p> For FastCGI servers, it is required to set <a href=\"ngx_http_fastcgi_module#fastcgi_keep_conn\">fastcgi_keep_conn</a> for keepalive connections to work: </p> <pre data-language=\"nginx\">\nupstream fastcgi_backend {\n    server 127.0.0.1:9000;\n\n    keepalive 8;\n}\n\nserver {\n    ...\n\n    location /fastcgi/ {\n        fastcgi_pass fastcgi_backend;\n        fastcgi_keep_conn on;\n        ...\n    }\n}\n</pre>\n\n <blockquote class=\"note\"> When using load balancer methods other than the default round-robin method, it is necessary to activate them before the <code>keepalive</code> directive. </blockquote>\n <blockquote class=\"note\"> SCGI and uwsgi protocols do not have a notion of keepalive connections. </blockquote>\n\n<div class=\"directive\" id=\"ntlm\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ntlm</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.2. </p>\n</div>\n<p> Allows proxying requests with <a href=\"https://en.wikipedia.org/wiki/Integrated_Windows_Authentication\">NTLM Authentication</a>. The upstream connection is bound to the client connection once the client sends a request with the “Authorization” header field value starting with “<code>Negotiate</code>” or “<code>NTLM</code>”. Further client requests will be proxied through the same upstream connection, keeping the authentication context. </p>\n<p> In order for NTLM authentication to work, it is necessary to enable keepalive connections to upstream servers. The <a href=\"ngx_http_proxy_module#proxy_http_version\">proxy_http_version</a> directive should be set to “<code>1.1</code>” and the “Connection” header field should be cleared: </p> <pre data-language=\"nginx\">\nupstream http_backend {\n    server 127.0.0.1:8080;\n\n    ntlm;\n}\n\nserver {\n    ...\n\n    location /http/ {\n        proxy_pass http://http_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n        ...\n    }\n}\n</pre>\n\n <blockquote class=\"note\"> When using load balancer methods other than the default round-robin method, it is necessary to activate them before the <code>ntlm</code> directive. </blockquote>\n\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"least_conn\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>least_conn</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table> <p> This directive appeared in versions 1.3.1 and 1.2.2. </p> </div>\n<p> Specifies that a group should use a load balancing method where a request is passed to the server with the least number of active connections, taking into account weights of servers. If there are several such servers, they are tried in turn using a weighted round-robin balancing method. </p>\n<div class=\"directive\" id=\"least_time\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>least_time</strong> <code>header</code> | <code>last_byte</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.10. </p>\n</div>\n<p> Specifies that a group should use a load balancing method where a request is passed to the server with the least average response time and least number of active connections, taking into account weights of servers. If there are several such servers, they are tried in turn using a weighted round-robin balancing method. </p>\n<p> If the <code>header</code> parameter is specified, time to receive the <a href=\"#var_upstream_header_time\">response header</a> is used. If the <code>last_byte</code> parameter is specified, time to receive the <a href=\"#var_upstream_response_time\">full response</a> is used. </p>\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"health_check\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>health_check</strong> [<code><i>parameters</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code><br> </td> </tr> </table></div>\n<p> Enables periodic health checks of the servers in a <a href=\"#upstream\">group</a> referenced in the surrounding location. </p>\n<p> The following optional parameters are supported: </p> <dl class=\"compact\"> <dt id=\"interval\"> <code>interval</code>=<code><i>time</i></code> </dt> <dd> sets the interval between two consecutive health checks, by default, 5 seconds; </dd> <dt id=\"fails\"> <code>fails</code>=<code><i>number</i></code> </dt> <dd> sets the number of consecutive failed health checks of a particular server after which this server will be considered unhealthy, by default, 1; </dd> <dt id=\"passes\"> <code>passes</code>=<code><i>number</i></code> </dt> <dd> sets the number of consecutive passed health checks of a particular server after which the server will be considered healthy, by default, 1; </dd> <dt id=\"uri\"> <code>uri</code>=<code><i>uri</i></code> </dt> <dd> defines the URI used in health check requests, by default, “<code>/</code>”; </dd> <dt id=\"hc_match\"> <code>match</code>=<code><i>name</i></code> </dt> <dd> specifies the <code>match</code> block configuring the tests that a response should pass in order for a health check to pass; by default, the response should have status code 2xx or 3xx; </dd> <dt id=\"health_check_port\"> <code>port</code>=<code><i>number</i></code> </dt> <dd> defines the port used when connecting to a server to perform a health check (1.9.7); by default, equals the <a href=\"#server\">server</a> port. </dd> </dl>\n\n<p> For example, </p> <pre data-language=\"nginx\">\nlocation / {\n    proxy_pass http://backend;\n    health_check;\n}\n</pre>\n<p> will send “<code>/</code>” requests to each server in the <code>backend</code> group every five seconds. If any communication error or timeout occurs, or a proxied server responds with the status code other than 2xx or 3xx, the health check will fail, and the server will be considered unhealthy. Client requests are not passed to unhealthy servers. </p>\n<p> Health checks can be configured to test the status code of a response, presence of certain header fields and their values, and the body contents. Tests are configured separately using the <a href=\"#match\">match</a> directive and referenced in the <code>match</code> parameter. For example: </p> <pre data-language=\"nginx\">\nhttp {\n    server {\n    ...\n        location / {\n            proxy_pass http://backend;\n            health_check match=welcome;\n        }\n    }\n\n    match welcome {\n        status 200;\n        header Content-Type = text/html;\n        body ~ \"Welcome to nginx!\";\n    }\n}\n</pre>\n<p> This configuration shows that in order for a health check to pass, the response to a health check request should succeed, have status 200, content type “<code>text/html</code>”, and contain “<code>Welcome to nginx!</code>” in the body. </p>\n<p> The server group must reside in the <a href=\"#zone\">shared memory</a>. </p>\n<p> If several health checks are defined for the same group of servers, a single failure of any check will make the corresponding server be considered unhealthy. </p>\n <blockquote class=\"note\"> Please note that most of the variables will have empty values when used with health checks. </blockquote>\n\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"match\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>match</strong> <code><i>name</i></code> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Defines the named test set used to verify responses to health check requests. </p>\n<p> The following items can be tested in a response: </p> <dl class=\"compact\"> <dt><code>status 200;</code></dt> <dd>status is 200</dd> <dt><code>status ! 500;</code></dt> <dd>status is not 500</dd> <dt><code>status 200 204;</code></dt> <dd>status is 200 or 204</dd> <dt><code>status ! 301 302;</code></dt> <dd>status is neither 301 nor 302</dd> <dt><code>status 200-399;</code></dt> <dd>status is in the range from 200 to 399</dd> <dt><code>status ! 400-599;</code></dt> <dd>status is not in the range from 400 to 599</dd> <dt><code>status 301-303 307;</code></dt> <dd>status is either 301, 302, 303, or 307</dd> </dl>\n <dl class=\"compact\"> <dt><code>header Content-Type = text/html;</code></dt> <dd> header contains “Content-Type” with value <code>text/html</code> </dd> <dt><code>header Content-Type != text/html;</code></dt> <dd> header contains “Content-Type” with value other than <code>text/html</code> </dd> <dt><code>header Connection ~ close;</code></dt> <dd> header contains “Connection” with value matching regular expression <code>close</code> </dd> <dt><code>header Connection !~ close;</code></dt> <dd> header contains “Connection” with value not matching regular expression <code>close</code> </dd> <dt><code>header Host;</code></dt> <dd>header contains “Host”</dd> <dt><code>header ! X-Accel-Redirect;</code></dt> <dd>header lacks “X-Accel-Redirect”</dd> </dl>\n <dl class=\"compact\"> <dt><code>body ~ \"Welcome to nginx!\";</code></dt> <dd> body matches regular expression “<code>Welcome to nginx!</code>” </dd> <dt><code>body !~ \"Welcome to nginx!\";</code></dt> <dd> body does not match regular expression “<code>Welcome to nginx!</code>” </dd> </dl>\n\n<p> If several tests are specified, the response matches only if it matches all tests. </p> <blockquote class=\"note\"> Only the first 256k of the response body are examined. </blockquote>\n\n<p> Examples: </p> <pre data-language=\"nginx\">\n# status is 200, content type is \"text/html\",\n# and body contains \"Welcome to nginx!\"\nmatch welcome {\n    status 200;\n    header Content-Type = text/html;\n    body ~ \"Welcome to nginx!\";\n}\n</pre>\n <pre data-language=\"nginx\">\n# status is not one of 301, 302, 303, or 307, and header does not have \"Refresh:\"\nmatch not_redirect {\n    status ! 301-303 307;\n    header ! Refresh;\n}\n</pre>\n <pre data-language=\"nginx\">\n# status ok and not in maintenance mode\nmatch server_ok {\n    status 200-399;\n    body !~ \"maintenance mode\";\n}\n</pre>\n\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"queue\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>queue</strong> \n<code><i>number</i></code>\n[<code>timeout</code>=<code><i>time</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.12. </p>\n</div>\n<p> If an upstream server cannot be selected immediately while processing a request, and there are the servers in the group that have reached the <a href=\"#max_conns\">max_conns</a> limit, the request will be placed into the queue. The directive specifies the maximum number of requests that can be in the queue at the same time. If the queue is filled up, or the server to pass the request to cannot be selected within the time period specified in the <code>timeout</code> parameter, the 502 (Bad Gateway) error will be returned to the client. </p>\n<p> The default value of the <code>timeout</code> parameter is 60 seconds. </p>\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"sticky\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>sticky</strong> \n    <code>cookie</code> <code><i>name</i></code>\n    [<code>expires=</code><code><i>time</i></code>]\n    [<code>domain=</code><code><i>domain</i></code>]\n    [<code>httponly</code>]\n    [<code>secure</code>]\n    [<code>path=</code><code><i>path</i></code>];</code><br><code><strong>sticky</strong> \n    <code>route</code> <code><i>$variable</i></code> ...;</code><br><code><strong>sticky</strong> \n    <code>learn</code>\n    <code>create=</code><code><i>$variable</i></code>\n    <code>lookup=</code><code><i>$variable</i></code>\n    <code>zone=</code><code><i>name</i></code>:<code><i>size</i></code>\n    [<code>timeout=</code><code><i>time</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.7. </p>\n</div>\n<p> Enables session affinity, which causes requests from the same client to be passed to the same server in a group of servers. Three methods are available: </p> <dl class=\"compact\"> <dt id=\"sticky_cookie\"><code>cookie</code></dt> <dd> <p> When the <code>cookie</code> method is used, information about the designated server is passed in an HTTP cookie generated by nginx: </p> <pre data-language=\"nginx\">\nupstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n\n    sticky cookie srv_id expires=1h domain=.example.com path=/;\n}\n</pre>\n <p> A request that comes from a client not yet bound to a particular server is passed to the server selected by the configured balancing method. Further requests with this cookie will be passed to the designated server. If the designated server cannot process a request, the new server is selected as if the client has not been bound yet. </p> <p> The first parameter sets the name of the cookie to be set or inspected. Additional parameters may be as follows: </p> <dl class=\"compact\"> <dt>\n<code>expires=</code><code><i>time</i></code>\n</dt> <dd> Sets the <code><i>time</i></code> for which a browser should keep the cookie. The special value <code>max</code> will cause the cookie to expire on “<code>31 Dec 2037 23:55:55 GMT</code>”. If the parameter is not specified, it will cause the cookie to expire at the end of a browser session. </dd> <dt>\n<code>domain=</code><code><i>domain</i></code>\n</dt> <dd> Defines the <code><i>domain</i></code> for which the cookie is set. </dd> <dt><code>httponly</code></dt> <dd> Adds the <code>HttpOnly</code> attribute to the cookie (1.7.11). </dd> <dt><code>secure</code></dt> <dd> Adds the <code>Secure</code> attribute to the cookie (1.7.11). </dd> <dt>\n<code>path=</code><code><i>path</i></code>\n</dt> <dd> Defines the <code><i>path</i></code> for which the cookie is set. </dd> </dl>\n<p> If any parameters are omitted, the corresponding cookie fields are not set. </p> </dd> <dt id=\"sticky_route\"><code>route</code></dt> <dd> <p> When the <code>route</code> method is used, proxied server assigns client a route on receipt of the first request. All subsequent requests from this client will carry routing information in a cookie or URI. This information is compared with the “<code>route</code>” parameter of the <a href=\"#server\">server</a> directive to identify the server to which the request should be proxied. If the designated server cannot process a request, the new server is selected by the configured balancing method as if there is no routing information in the request. </p> <p> The parameters of the <code>route</code> method specify variables that may contain routing information. The first non-empty variable is used to find the matching server. </p> <p> Example: </p> <pre data-language=\"nginx\">\nmap $cookie_jsessionid $route_cookie {\n    ~.+\\.(?P&lt;route&gt;\\w+)$ $route;\n}\n\nmap $request_uri $route_uri {\n    ~jsessionid=.+\\.(?P&lt;route&gt;\\w+)$ $route;\n}\n\nupstream backend {\n    server backend1.example.com route=a;\n    server backend2.example.com route=b;\n\n    sticky route $route_cookie $route_uri;\n}\n</pre>\n<p> Here, the route is taken from the “<code>JSESSIONID</code>” cookie if present in a request. Otherwise, the route from the URI is used. </p> </dd> <dt id=\"sticky_learn\"><code>learn</code></dt> <dd> <p> When the <code>learn</code> method (1.7.1) is used, nginx analyzes upstream server responses and learns server-initiated sessions usually passed in an HTTP cookie. </p> <pre data-language=\"nginx\">\nupstream backend {\n   server backend1.example.com:8080;\n   server backend2.example.com:8081;\n\n   sticky learn\n          create=$upstream_cookie_examplecookie\n          lookup=$cookie_examplecookie\n          zone=client_sessions:1m;\n}\n</pre>\n<p> In the example, the upstream server creates a session by setting the cookie “<code>EXAMPLECOOKIE</code>” in the response. Further requests with this cookie will be passed to the same server. If the server cannot process the request, the new server is selected as if the client has not been bound yet. </p> <p> The parameters <code>create</code> and <code>lookup</code> specify variables that indicate how new sessions are created and existing sessions are searched, respectively. Both parameters may be specified more than once, in which case the first non-empty variable is used. </p> <p> Sessions are stored in a shared memory zone, whose <code><i>name</i></code> and <code><i>size</i></code> are configured by the <code>zone</code> parameter. One megabyte zone can store about 8000 sessions on the 64-bit platform. The sessions that are not accessed during the time specified by the <code>timeout</code> parameter get removed from the zone. By default, <code>timeout</code> is set to 10 minutes. </p> </dd> </dl>\n\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"sticky_cookie_insert\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>sticky_cookie_insert</strong> <code><i>name</i></code>\n[<code>expires=</code><code><i>time</i></code>]\n[<code>domain=</code><code><i>domain</i></code>]\n[<code>path=</code><code><i>path</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table></div>\n<p> This directive is obsolete since version 1.5.7. An equivalent <a href=\"#sticky\">sticky</a> directive with a new syntax should be used instead: </p> <blockquote class=\"note\"> <code>sticky cookie</code> <code><i>name</i></code> [<code>expires=</code><code><i>time</i></code>] [<code>domain=</code><code><i>domain</i></code>] [<code>path=</code><code><i>path</i></code>]; </blockquote>\n <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_upstream_module</code> module supports the following embedded variables: </p> <dl class=\"compact\"> <dt id=\"var_upstream_addr\"><code>$upstream_addr</code></dt> <dd> keeps the IP address and port, or the path to the UNIX-domain socket of the upstream server. If several servers were contacted during request processing, their addresses are separated by commas, e.g. “<code>192.168.1.1:80, 192.168.1.2:80, unix:/tmp/sock</code>”. If an internal redirect from one server group to another happens, initiated by “X-Accel-Redirect” or <a href=\"ngx_http_core_module#error_page\">error_page</a>, then the server addresses from different groups are separated by colons, e.g. “<code>192.168.1.1:80, 192.168.1.2:80, unix:/tmp/sock : 192.168.10.1:80, 192.168.10.2:80</code>”. </dd> <dt id=\"var_upstream_cache_status\">\n<code>$upstream_cache_status</code> </dt> <dd> keeps the status of accessing a response cache (0.8.3). The status can be either “<code>MISS</code>”, “<code>BYPASS</code>”, “<code>EXPIRED</code>”, “<code>STALE</code>”, “<code>UPDATING</code>”, “<code>REVALIDATED</code>”, or “<code>HIT</code>”. </dd> <dt id=\"var_upstream_connect_time\">\n<code>$upstream_connect_time</code> </dt> <dd> keeps time spent on establishing a connection with the upstream server (1.9.1); the time is kept in seconds with millisecond resolution. In case of SSL, includes time spent on handshake. Times of several connections are separated by commas and colons like addresses in the <a href=\"#var_upstream_addr\">$upstream_addr</a> variable. </dd> <dt id=\"var_upstream_cookie_\">\n<code>$upstream_cookie_</code><code><i>name</i></code> </dt> <dd> cookie with the specified <code><i>name</i></code> sent by the upstream server in the “Set-Cookie” response header field (1.7.1). Only the cookies from the response of the last server are saved. </dd> <dt id=\"var_upstream_header_time\">\n<code>$upstream_header_time</code> </dt> <dd> keeps time spent on receiving the response header from the upstream server (1.7.10); the time is kept in seconds with millisecond resolution. Times of several responses are separated by commas and colons like addresses in the <a href=\"#var_upstream_addr\">$upstream_addr</a> variable. </dd> <dt id=\"var_upstream_http_\">\n<code>$upstream_http_</code><code><i>name</i></code>\n</dt> <dd> keep server response header fields. For example, the “Server” response header field is available through the <code>$upstream_http_server</code> variable. The rules of converting header field names to variable names are the same as for the variables that start with the “<a href=\"ngx_http_core_module#var_http_\">$http_</a>” prefix. Only the header fields from the response of the last server are saved. </dd> <dt id=\"var_upstream_response_length\">\n<code>$upstream_response_length</code> </dt> <dd> keeps the length of the response obtained from the upstream server (0.7.27); the length is kept in bytes. Lengths of several responses are separated by commas and colons like addresses in the <a href=\"#var_upstream_addr\">$upstream_addr</a> variable. </dd> <dt id=\"var_upstream_response_time\">\n<code>$upstream_response_time</code> </dt> <dd> keeps time spent on receiving the response from the upstream server; the time is kept in seconds with millisecond resolution. Times of several responses are separated by commas and colons like addresses in the <a href=\"#var_upstream_addr\">$upstream_addr</a> variable. </dd> <dt id=\"var_upstream_status\"><code>$upstream_status</code></dt> <dd> keeps status code of the response obtained from the upstream server. Status codes of several responses are separated by commas and colons like addresses in the <a href=\"#var_upstream_addr\">$upstream_addr</a> variable. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_upstream_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_upstream_module.html</a>\n  </p>\n</div>\n","stream/ngx_stream_limit_conn_module":"<h1>Module ngx_stream_limit_conn_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#limit_conn\">limit_conn</a></li>\n<li><a href=\"#limit_conn_log_level\">limit_conn_log_level</a></li>\n<li><a href=\"#limit_conn_zone\">limit_conn_zone</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_stream_limit_conn_module</code> module (1.9.3) is used to limit the number of connections per the defined key, in particular, the number of connections from a single IP address. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nstream {\n    limit_conn_zone $binary_remote_addr zone=addr:10m;\n\n    ...\n\n    server {\n\n        ...\n\n        limit_conn           addr 1;\n        limit_conn_log_level error;\n    }\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"limit_conn\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_conn</strong> <code><i>zone</i></code> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the shared memory zone and the maximum allowed number of connections for a given key value. When this limit is exceeded, the server will close the connection. For example, the directives </p> <pre data-language=\"nginx\">\nlimit_conn_zone $binary_remote_addr zone=addr:10m;\n\nserver {\n    ...\n    limit_conn addr 1;\n}\n</pre>\n<p> allow only one connection per an IP address at a time. </p>\n<p> When several <code>limit_conn</code> directives are specified, any configured limit will apply. </p>\n<p> The directives are inherited from the previous level if and only if there are no <code>limit_conn</code> directives on the current level. </p>\n<div class=\"directive\" id=\"limit_conn_log_level\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_conn_log_level</strong> \n<code>info</code> |\n<code>notice</code> |\n<code>warn</code> |\n<code>error</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>limit_conn_log_level error;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the desired logging level for cases when the server limits the number of connections. </p>\n<div class=\"directive\" id=\"limit_conn_zone\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>limit_conn_zone</strong> \n    <code><i>key</i></code>\n    <code>zone</code>=<code><i>name</i></code>:<code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table></div>\n<p> Sets parameters for a shared memory zone that will keep states for various keys. In particular, the state includes the current number of connections. The <code><i>key</i></code> can contain text, variables, and their combinations (1.11.2). Connections with an empty key value are not accounted. Usage example: </p> <pre data-language=\"nginx\">\nlimit_conn_zone $binary_remote_addr zone=addr:10m;\n</pre>\n<p> Here, the key is a client IP address set by the <code>$binary_remote_addr</code> variable. The size of <code>$binary_remote_addr</code> is 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses. The stored state always occupies 32 or 64 bytes on 32-bit platforms and 64 bytes on 64-bit platforms. One megabyte zone can keep about 32 thousand 32-byte states or about 16 thousand 64-byte states. If the zone storage is exhausted, the server will close the connection. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/stream/ngx_stream_limit_conn_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/stream/ngx_stream_limit_conn_module.html</a>\n  </p>\n</div>\n","stream/ngx_stream_map_module":"<h1>Module ngx_stream_map_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#map\">map</a></li>\n<li><a href=\"#map_hash_bucket_size\">map_hash_bucket_size</a></li>\n<li><a href=\"#map_hash_max_size\">map_hash_max_size</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_stream_map_module</code> module (1.11.2) creates variables whose values depend on values of other variables. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nmap $remote_addr $limit {\n    127.0.0.1    \"\";\n    default      $binary_remote_addr;\n}\n\nlimit_conn_zone $limit zone=addr:10m;\nlimit_conn addr 1;\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"map\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>map</strong> \n    <code><i>string</i></code>\n    <code><i>$variable</i></code> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table></div>\n<p> Creates a new variable whose value depends on values of one or more of the source variables specified in the first parameter. </p>\n <blockquote class=\"note\"> Since variables are evaluated only when they are used, the mere declaration even of a large number of “<code>map</code>” variables does not add any extra costs to connection processing. </blockquote>\n\n<p> Parameters inside the <code>map</code> block specify a mapping between source and resulting values. </p>\n<p> Source values are specified as strings or regular expressions. </p>\n<p> Strings are matched ignoring the case. </p>\n<p> A regular expression should either start from the “<code>~</code>” symbol for a case-sensitive matching, or from the “<code>~*</code>” symbols for case-insensitive matching. A regular expression can contain named and positional captures that can later be used in other directives along with the resulting variable. </p>\n<p> If a source value matches one of the names of special parameters described below, it should be prefixed with the “<code>\\</code>” symbol. </p>\n<p> The resulting value can contain text, variable, and their combination. </p>\n<p> The directive also supports three special parameters: </p> <dl class=\"compact\"> <dt>\n<code>default</code> <code><i>value</i></code>\n</dt> <dd> sets the resulting value if the source value matches none of the specified variants. When <code>default</code> is not specified, the default resulting value will be an empty string. </dd> <dt><code>hostnames</code></dt> <dd> indicates that source values can be hostnames with a prefix or suffix mask: <pre data-language=\"nginx\">\n*.example.com 1;\nexample.*     1;\n</pre> The following two records <pre data-language=\"nginx\">\nexample.com   1;\n*.example.com 1;\n</pre> can be combined: <pre data-language=\"nginx\">\n.example.com  1;\n</pre> This parameter should be specified before the list of values. </dd> <dt>\n<code>include</code> <code><i>file</i></code>\n</dt> <dd> includes a file with values. There can be several inclusions. </dd> </dl>\n\n<p> If the source value matches more than one of the specified variants, e.g. both a mask and a regular expression match, the first matching variant will be chosen, in the following order of priority: </p> <ol class=\"compact\"> <li> string value without a mask </li> <li> longest string value with a prefix mask, e.g. “<code>*.example.com</code>” </li> <li> longest string value with a suffix mask, e.g. “<code>mail.*</code>” </li> <li> first matching regular expression (in order of appearance in a configuration file) </li> <li> default value </li> </ol>\n\n<div class=\"directive\" id=\"map_hash_bucket_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>map_hash_bucket_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>map_hash_bucket_size 32|64|128;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table></div>\n<p> Sets the bucket size for the <a href=\"#map\">map</a> variables hash tables. Default value depends on the processor’s cache line size. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p>\n<div class=\"directive\" id=\"map_hash_max_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>map_hash_max_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>map_hash_max_size 2048;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table></div>\n<p> Sets the maximum <code><i>size</i></code> of the <a href=\"#map\">map</a> variables hash tables. The details of setting up hash tables are provided in a separate <a href=\"../hash\">document</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/stream/ngx_stream_map_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/stream/ngx_stream_map_module.html</a>\n  </p>\n</div>\n","stream/ngx_stream_return_module":"<h1>Module ngx_stream_return_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#return\">return</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_stream_return_module</code> module (1.11.2) allows sending a specified value to the client and then closing the connection. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nserver {\n    listen 12345;\n    return $time_iso8601;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"return\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>return</strong> <code><i>value</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>value</i></code> to send to the client. The value can contain text, variables, and their combination. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/stream/ngx_stream_return_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/stream/ngx_stream_return_module.html</a>\n  </p>\n</div>\n","stream/ngx_stream_split_clients_module":"<h1>Module ngx_stream_split_clients_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#split_clients\">split_clients</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_stream_split_clients_module</code> module (1.11.3) creates variables suitable for A/B testing, also known as split testing. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nstream {\n    split_clients \"${remote_addr}AAA\" $variant {\n                   0.5%               .one;\n                   2.0%               .two;\n                   *                  \"\";\n    }\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"split_clients\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>split_clients</strong> \n    <code><i>string</i></code>\n    <code><i>$variable</i></code> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table></div>\n<p> Creates a variable for A/B testing, for example: </p> <pre data-language=\"nginx\">\nsplit_clients \"${remote_addr}AAA\" $variant {\n               0.5%               .one;\n               2.0%               .two;\n               *                  \"\";\n}\n</pre>\n<p> The value of the original string is hashed using MurmurHash2. In the example given, hash values from 0 to 21474835 (0.5%) correspond to the value <code>\".one\"</code> of the <code>$variant</code> variable, hash values from 21474836 to 107374180 (2%) correspond to the value <code>\".two\"</code>, and hash values from 107374181 to 4294967295 correspond to the value <code>\"\"</code> (an empty string). </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/stream/ngx_stream_split_clients_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/stream/ngx_stream_split_clients_module.html</a>\n  </p>\n</div>\n","http/ngx_http_uwsgi_module":"<h1>Module ngx_http_uwsgi_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#uwsgi_bind\">uwsgi_bind</a></li>\n<li><a href=\"#uwsgi_buffer_size\">uwsgi_buffer_size</a></li>\n<li><a href=\"#uwsgi_buffering\">uwsgi_buffering</a></li>\n<li><a href=\"#uwsgi_buffers\">uwsgi_buffers</a></li>\n<li><a href=\"#uwsgi_busy_buffers_size\">uwsgi_busy_buffers_size</a></li>\n<li><a href=\"#uwsgi_cache\">uwsgi_cache</a></li>\n<li><a href=\"#uwsgi_cache_bypass\">uwsgi_cache_bypass</a></li>\n<li><a href=\"#uwsgi_cache_key\">uwsgi_cache_key</a></li>\n<li><a href=\"#uwsgi_cache_lock\">uwsgi_cache_lock</a></li>\n<li><a href=\"#uwsgi_cache_lock_age\">uwsgi_cache_lock_age</a></li>\n<li><a href=\"#uwsgi_cache_lock_timeout\">uwsgi_cache_lock_timeout</a></li>\n<li><a href=\"#uwsgi_cache_methods\">uwsgi_cache_methods</a></li>\n<li><a href=\"#uwsgi_cache_min_uses\">uwsgi_cache_min_uses</a></li>\n<li><a href=\"#uwsgi_cache_path\">uwsgi_cache_path</a></li>\n<li><a href=\"#uwsgi_cache_purge\">uwsgi_cache_purge</a></li>\n<li><a href=\"#uwsgi_cache_revalidate\">uwsgi_cache_revalidate</a></li>\n<li><a href=\"#uwsgi_cache_use_stale\">uwsgi_cache_use_stale</a></li>\n<li><a href=\"#uwsgi_cache_valid\">uwsgi_cache_valid</a></li>\n<li><a href=\"#uwsgi_connect_timeout\">uwsgi_connect_timeout</a></li>\n<li><a href=\"#uwsgi_force_ranges\">uwsgi_force_ranges</a></li>\n<li><a href=\"#uwsgi_hide_header\">uwsgi_hide_header</a></li>\n<li><a href=\"#uwsgi_ignore_client_abort\">uwsgi_ignore_client_abort</a></li>\n<li><a href=\"#uwsgi_ignore_headers\">uwsgi_ignore_headers</a></li>\n<li><a href=\"#uwsgi_intercept_errors\">uwsgi_intercept_errors</a></li>\n<li><a href=\"#uwsgi_limit_rate\">uwsgi_limit_rate</a></li>\n<li><a href=\"#uwsgi_max_temp_file_size\">uwsgi_max_temp_file_size</a></li>\n<li><a href=\"#uwsgi_modifier1\">uwsgi_modifier1</a></li>\n<li><a href=\"#uwsgi_modifier2\">uwsgi_modifier2</a></li>\n<li><a href=\"#uwsgi_next_upstream\">uwsgi_next_upstream</a></li>\n<li><a href=\"#uwsgi_next_upstream_timeout\">uwsgi_next_upstream_timeout</a></li>\n<li><a href=\"#uwsgi_next_upstream_tries\">uwsgi_next_upstream_tries</a></li>\n<li><a href=\"#uwsgi_no_cache\">uwsgi_no_cache</a></li>\n<li><a href=\"#uwsgi_param\">uwsgi_param</a></li>\n<li><a href=\"#uwsgi_pass\">uwsgi_pass</a></li>\n<li><a href=\"#uwsgi_pass_header\">uwsgi_pass_header</a></li>\n<li><a href=\"#uwsgi_pass_request_body\">uwsgi_pass_request_body</a></li>\n<li><a href=\"#uwsgi_pass_request_headers\">uwsgi_pass_request_headers</a></li>\n<li><a href=\"#uwsgi_read_timeout\">uwsgi_read_timeout</a></li>\n<li><a href=\"#uwsgi_request_buffering\">uwsgi_request_buffering</a></li>\n<li><a href=\"#uwsgi_send_timeout\">uwsgi_send_timeout</a></li>\n<li><a href=\"#uwsgi_ssl_certificate\">uwsgi_ssl_certificate</a></li>\n<li><a href=\"#uwsgi_ssl_certificate_key\">uwsgi_ssl_certificate_key</a></li>\n<li><a href=\"#uwsgi_ssl_ciphers\">uwsgi_ssl_ciphers</a></li>\n<li><a href=\"#uwsgi_ssl_crl\">uwsgi_ssl_crl</a></li>\n<li><a href=\"#uwsgi_ssl_name\">uwsgi_ssl_name</a></li>\n<li><a href=\"#uwsgi_ssl_password_file\">uwsgi_ssl_password_file</a></li>\n<li><a href=\"#uwsgi_ssl_protocols\">uwsgi_ssl_protocols</a></li>\n<li><a href=\"#uwsgi_ssl_server_name\">uwsgi_ssl_server_name</a></li>\n<li><a href=\"#uwsgi_ssl_session_reuse\">uwsgi_ssl_session_reuse</a></li>\n<li><a href=\"#uwsgi_ssl_trusted_certificate\">uwsgi_ssl_trusted_certificate</a></li>\n<li><a href=\"#uwsgi_ssl_verify\">uwsgi_ssl_verify</a></li>\n<li><a href=\"#uwsgi_ssl_verify_depth\">uwsgi_ssl_verify_depth</a></li>\n<li><a href=\"#uwsgi_store\">uwsgi_store</a></li>\n<li><a href=\"#uwsgi_store_access\">uwsgi_store_access</a></li>\n<li><a href=\"#uwsgi_temp_file_write_size\">uwsgi_temp_file_write_size</a></li>\n<li><a href=\"#uwsgi_temp_path\">uwsgi_temp_path</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_http_uwsgi_module</code> module allows passing requests to a uwsgi server. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nlocation / {\n    include    uwsgi_params;\n    uwsgi_pass localhost:9000;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"uwsgi_bind\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_bind</strong> <code><i>address</i></code> [transparent] | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Makes outgoing connections to a uwsgi server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value <code>off</code> (1.3.12) cancels the effect of the <code>uwsgi_bind</code> directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port. </p>\n<p id=\"uwsgi_bind_transparent\"> The <code>transparent</code> parameter (1.11.0) allows outgoing connections to a uwsgi server originate from a non-local IP address, for example, from a real IP address of a client: </p> <pre data-language=\"nginx\">\nuwsgi_bind $remote_addr transparent;\n</pre>\n<p> In order for this parameter to work, it is necessary to run nginx worker processes with the <a href=\"../ngx_core_module#user\">superuser</a> privileges and configure kernel routing table to intercept network traffic from the uwsgi server. </p>\n<div class=\"directive\" id=\"uwsgi_buffer_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_buffer_size 4k|8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>size</i></code> of the buffer used for reading the first part of the response received from the uwsgi server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however. </p>\n<div class=\"directive\" id=\"uwsgi_buffering\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_buffering</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_buffering on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables or disables buffering of responses from the uwsgi server. </p>\n<p> When buffering is enabled, nginx receives a response from the uwsgi server as soon as possible, saving it into the buffers set by the <a href=\"#uwsgi_buffer_size\">uwsgi_buffer_size</a> and <a href=\"#uwsgi_buffers\">uwsgi_buffers</a> directives. If the whole response does not fit into memory, a part of it can be saved to a <a href=\"#uwsgi_temp_path\">temporary file</a> on the disk. Writing to temporary files is controlled by the <a href=\"#uwsgi_max_temp_file_size\">uwsgi_max_temp_file_size</a> and <a href=\"#uwsgi_temp_file_write_size\">uwsgi_temp_file_write_size</a> directives. </p>\n<p> When buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the uwsgi server. The maximum size of the data that nginx can receive from the server at a time is set by the <a href=\"#uwsgi_buffer_size\">uwsgi_buffer_size</a> directive. </p>\n<p> Buffering can also be enabled or disabled by passing “<code>yes</code>” or “<code>no</code>” in the “X-Accel-Buffering” response header field. This capability can be disabled using the <a href=\"#uwsgi_ignore_headers\">uwsgi_ignore_headers</a> directive. </p>\n<div class=\"directive\" id=\"uwsgi_buffers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_buffers</strong> <code><i>number</i></code> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_buffers 8 4k|8k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>number</i></code> and <code><i>size</i></code> of the buffers used for reading a response from the uwsgi server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. </p>\n<div class=\"directive\" id=\"uwsgi_busy_buffers_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_busy_buffers_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_busy_buffers_size 8k|16k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> When <a href=\"#uwsgi_buffering\">buffering</a> of responses from the uwsgi server is enabled, limits the total <code><i>size</i></code> of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, <code><i>size</i></code> is limited by the size of two buffers set by the <a href=\"#uwsgi_buffer_size\">uwsgi_buffer_size</a> and <a href=\"#uwsgi_buffers\">uwsgi_buffers</a> directives. </p>\n<div class=\"directive\" id=\"uwsgi_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache</strong> <code><i>zone</i></code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_cache off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The <code>off</code> parameter disables caching inherited from the previous configuration level. </p>\n<div class=\"directive\" id=\"uwsgi_cache_bypass\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache_bypass</strong> <code><i>string</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache: </p> <pre data-language=\"nginx\">\nuwsgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;\nuwsgi_cache_bypass $http_pragma    $http_authorization;\n</pre>\n<p> Can be used along with the <a href=\"#uwsgi_no_cache\">uwsgi_no_cache</a> directive. </p>\n<div class=\"directive\" id=\"uwsgi_cache_key\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache_key</strong> <code><i>string</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a key for caching, for example </p> <pre data-language=\"nginx\">\nuwsgi_cache_key localhost:9000$request_uri;\n</pre>\n\n<div class=\"directive\" id=\"uwsgi_cache_lock\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache_lock</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_cache_lock off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.12. </p>\n</div>\n<p> When enabled, only one request at a time will be allowed to populate a new cache element identified according to the <a href=\"#uwsgi_cache_key\">uwsgi_cache_key</a> directive by passing a request to a uwsgi server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the <a href=\"#uwsgi_cache_lock_timeout\">uwsgi_cache_lock_timeout</a> directive. </p>\n<div class=\"directive\" id=\"uwsgi_cache_lock_age\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache_lock_age</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_cache_lock_age 5s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.8. </p>\n</div>\n<p> If the last request passed to the uwsgi server for populating a new cache element has not completed for the specified <code><i>time</i></code>, one more request may be passed to the uwsgi server. </p>\n<div class=\"directive\" id=\"uwsgi_cache_lock_timeout\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache_lock_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_cache_lock_timeout 5s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.1.12. </p>\n</div>\n<p> Sets a timeout for <a href=\"#uwsgi_cache_lock\">uwsgi_cache_lock</a>. When the <code><i>time</i></code> expires, the request will be passed to the uwsgi server, however, the response will not be cached. </p> <blockquote class=\"note\"> Before 1.7.8, the response could be cached. </blockquote>\n\n<div class=\"directive\" id=\"uwsgi_cache_methods\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache_methods</strong> \n    <code>GET</code> |\n    <code>HEAD</code> |\n    <code>POST</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_cache_methods GET HEAD;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> If the client request method is listed in this directive then the response will be cached. “<code>GET</code>” and “<code>HEAD</code>” methods are always added to the list, though it is recommended to specify them explicitly. See also the <a href=\"#uwsgi_no_cache\">uwsgi_no_cache</a> directive. </p>\n<div class=\"directive\" id=\"uwsgi_cache_min_uses\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache_min_uses</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_cache_min_uses 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>number</i></code> of requests after which the response will be cached. </p>\n<div class=\"directive\" id=\"uwsgi_cache_path\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache_path</strong> \n    <code><i>path</i></code>\n    [<code>levels</code>=<code><i>levels</i></code>]\n    [<code>use_temp_path</code>=<code>on</code>|<code>off</code>]\n    <code>keys_zone</code>=<code><i>name</i></code>:<code><i>size</i></code>\n    [<code>inactive</code>=<code><i>time</i></code>]\n    [<code>max_size</code>=<code><i>size</i></code>]\n    [<code>loader_files</code>=<code><i>number</i></code>]\n    [<code>loader_sleep</code>=<code><i>time</i></code>]\n    [<code>loader_threshold</code>=<code><i>time</i></code>]\n    [<code>purger</code>=<code>on</code>|<code>off</code>]\n    [<code>purger_files</code>=<code><i>number</i></code>]\n    [<code>purger_sleep</code>=<code><i>time</i></code>]\n    [<code>purger_threshold</code>=<code><i>time</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code><br> </td> </tr> </table></div>\n<p> Sets the path and other parameters of a cache. Cache data are stored in files. The file name in a cache is a result of applying the MD5 function to the <a href=\"#uwsgi_cache_key\">cache key</a>. The <code>levels</code> parameter defines hierarchy levels of a cache. For example, in the following configuration </p> <pre data-language=\"nginx\">\nuwsgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;\n</pre>\n<p> file names in a cache will look like this: </p> <pre data-language=\"nginx\">\n/data/nginx/cache/<strong>c</strong>/<strong>29</strong>/b7f54b2df7773722d382f4809d650<strong>29c</strong>\n</pre>\n\n<p> A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the <code>use_temp_path</code> parameter (1.7.10). If this parameter is omitted or set to the value <code>on</code>, the directory set by the <a href=\"#uwsgi_temp_path\">uwsgi_temp_path</a> directive for the given location will be used. If the value is set to <code>off</code>, temporary files will be put directly in the cache directory. </p>\n<p> In addition, all active keys and information about data are stored in a shared memory zone, whose <code><i>name</i></code> and <code><i>size</i></code> are configured by the <code>keys_zone</code> parameter. One megabyte zone can store about 8 thousand keys. </p>\n<p> Cached data that are not accessed during the time specified by the <code>inactive</code> parameter get removed from the cache regardless of their freshness. By default, <code>inactive</code> is set to 10 minutes. </p>\n<p> The special “cache manager” process monitors the maximum cache size set by the <code>max_size</code> parameter. When this size is exceeded, it removes the least recently used data. </p>\n<p> A minute after the start the special “cache loader” process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is done in iterations. During one iteration no more than <code>loader_files</code> items are loaded (by default, 100). Besides, the duration of one iteration is limited by the <code>loader_threshold</code> parameter (by default, 200 milliseconds). Between iterations, a pause configured by the <code>loader_sleep</code> parameter (by default, 50 milliseconds) is made. </p>\n<p> Additionally, the following parameters are available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>: </p>\n <dl class=\"compact\"> <dt id=\"purger\"> <code>purger</code>=<code>on</code>|<code>off</code> </dt> <dd> Instructs whether cache entries that match a <a href=\"#uwsgi_cache_purge\">wildcard key</a> will be removed from the disk by the cache purger (1.7.12). Setting the parameter to <code>on</code> (default is <code>off</code>) will activate the “cache purger” process that permanently iterates through all cache entries and deletes the entries that match the wildcard key. </dd> <dt id=\"purger_files\"> <code>purger_files</code>=<code><i>number</i></code> </dt> <dd> Sets the number of items that will be scanned during one iteration (1.7.12). By default, <code>purger_files</code> is set to 10. </dd> <dt id=\"purger_threshold\"> <code>purger_threshold</code>=<code><i>number</i></code> </dt> <dd> Sets the duration of one iteration (1.7.12). By default, <code>purger_threshold</code> is set to 50 milliseconds. </dd> <dt id=\"purger_sleep\"> <code>purger_sleep</code>=<code><i>number</i></code> </dt> <dd> Sets a pause between iterations (1.7.12). By default, <code>purger_sleep</code> is set to 50 milliseconds. </dd> </dl>\n\n<div class=\"directive\" id=\"uwsgi_cache_purge\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache_purge</strong> string ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.7. </p>\n</div>\n<p> Defines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding <a href=\"#uwsgi_cache_key\">cache key</a> is removed. The result of successful operation is indicated by returning the 204 (No Content) response. </p>\n<p> If the <a href=\"#uwsgi_cache_key\">cache key</a> of a purge request ends with an asterisk (“<code>*</code>”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either <a href=\"#uwsgi_cache_path\">inactivity</a>, or processed by the <a href=\"#purger\">cache purger</a> (1.7.12), or a client attempts to access them. </p>\n<p> Example configuration: </p> <pre data-language=\"nginx\">\nuwsgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;\n\nmap $request_method $purge_method {\n    PURGE   1;\n    default 0;\n}\n\nserver {\n    ...\n    location / {\n        uwsgi_pass        backend;\n        uwsgi_cache       cache_zone;\n        uwsgi_cache_key   $uri;\n        uwsgi_cache_purge $purge_method;\n    }\n}\n</pre>\n <blockquote class=\"note\"> This functionality is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"uwsgi_cache_revalidate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache_revalidate</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_cache_revalidate off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.7. </p>\n</div>\n<p> Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields. </p>\n<div class=\"directive\" id=\"uwsgi_cache_use_stale\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache_use_stale</strong> \n    <code>error</code> |\n    <code>timeout</code> |\n    <code>invalid_header</code> |\n    <code>updating</code> |\n    <code>http_500</code> |\n    <code>http_503</code> |\n    <code>http_403</code> |\n    <code>http_404</code> |\n    <code>off</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_cache_use_stale off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines in which cases a stale cached response can be used when an error occurs during communication with the uwsgi server. The directive’s parameters match the parameters of the <a href=\"#uwsgi_next_upstream\">uwsgi_next_upstream</a> directive. </p>\n<p> The <code>error</code> parameter also permits using a stale cached response if a uwsgi server to process a request cannot be selected. </p>\n<p> Additionally, the <code>updating</code> parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to uwsgi servers when updating cached data. </p>\n<p> To minimize the number of accesses to uwsgi servers when populating a new cache element, the <a href=\"#uwsgi_cache_lock\">uwsgi_cache_lock</a> directive can be used. </p>\n<div class=\"directive\" id=\"uwsgi_cache_valid\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_cache_valid</strong> [<code><i>code</i></code> ...] <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets caching time for different response codes. For example, the following directives </p> <pre data-language=\"nginx\">\nuwsgi_cache_valid 200 302 10m;\nuwsgi_cache_valid 404      1m;\n</pre>\n<p> set 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404. </p>\n<p> If only caching <code><i>time</i></code> is specified </p> <pre data-language=\"nginx\">\nuwsgi_cache_valid 5m;\n</pre>\n<p> then only 200, 301, and 302 responses are cached. </p>\n<p> In addition, the <code>any</code> parameter can be specified to cache any responses: </p> <pre data-language=\"nginx\">\nuwsgi_cache_valid 200 302 10m;\nuwsgi_cache_valid 301      1h;\nuwsgi_cache_valid any      1m;\n</pre>\n\n<p> Parameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive. </p> <ul> <li> The “X-Accel-Expires” header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the <code>@</code> prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached. </li> <li> If the header does not include the “X-Accel-Expires” field, parameters of caching may be set in the header fields “Expires” or “Cache-Control”. </li> <li> If the header includes the “Set-Cookie” field, such a response will not be cached. </li> <li> If the header includes the “Vary” field with the special value “<code>*</code>”, such a response will not be cached (1.7.7). If the header includes the “Vary” field with another value, such a response will be cached taking into account the corresponding request header fields (1.7.7). </li> </ul>\n<p> Processing of one or more of these response header fields can be disabled using the <a href=\"#uwsgi_ignore_headers\">uwsgi_ignore_headers</a> directive. </p>\n<div class=\"directive\" id=\"uwsgi_connect_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_connect_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_connect_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for establishing a connection with a uwsgi server. It should be noted that this timeout cannot usually exceed 75 seconds. </p>\n<div class=\"directive\" id=\"uwsgi_force_ranges\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_force_ranges</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_force_ranges off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.7. </p>\n</div>\n<p> Enables byte-range support for both cached and uncached responses from the uwsgi server regardless of the “Accept-Ranges” field in these responses. </p>\n<div class=\"directive\" id=\"uwsgi_hide_header\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_hide_header</strong> <code><i>field</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of a uwsgi server to a client. The <code>uwsgi_hide_header</code> directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the <a href=\"#uwsgi_pass_header\">uwsgi_pass_header</a> directive can be used. </p>\n<div class=\"directive\" id=\"uwsgi_ignore_client_abort\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ignore_client_abort</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_ignore_client_abort off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines whether the connection with a uwsgi server should be closed when a client closes the connection without waiting for a response. </p>\n<div class=\"directive\" id=\"uwsgi_ignore_headers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ignore_headers</strong> <code><i>field</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Disables processing of certain response header fields from the uwsgi server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7). </p>\n<p> If not disabled, processing of these header fields has the following effect: </p> <ul> <li> “X-Accel-Expires”, “Expires”, “Cache-Control”, “Set-Cookie”, and “Vary” set the parameters of response <a href=\"#uwsgi_cache_valid\">caching</a>; </li> <li> “X-Accel-Redirect” performs an <a href=\"ngx_http_core_module#internal\">internal redirect</a> to the specified URI; </li> <li> “X-Accel-Limit-Rate” sets the <a href=\"ngx_http_core_module#limit_rate\">rate limit</a> for transmission of a response to a client; </li> <li> “X-Accel-Buffering” enables or disables <a href=\"#uwsgi_buffering\">buffering</a> of a response; </li> <li> “X-Accel-Charset” sets the desired <a href=\"ngx_http_charset_module#charset\">charset</a> of a response. </li> </ul>\n\n<div class=\"directive\" id=\"uwsgi_intercept_errors\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_intercept_errors</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_intercept_errors off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Determines whether a uwsgi server responses with codes greater than or equal to 300 should be passed to a client or be redirected to nginx for processing with the <a href=\"ngx_http_core_module#error_page\">error_page</a> directive. </p>\n<div class=\"directive\" id=\"uwsgi_limit_rate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_limit_rate</strong> <code><i>rate</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_limit_rate 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.7. </p>\n</div>\n<p> Limits the speed of reading the response from the uwsgi server. The <code><i>rate</i></code> is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the uwsgi server, the overall rate will be twice as much as the specified limit. The limitation works only if <a href=\"#uwsgi_buffering\">buffering</a> of responses from the uwsgi server is enabled. </p>\n<div class=\"directive\" id=\"uwsgi_max_temp_file_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_max_temp_file_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_max_temp_file_size 1024m;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> When <a href=\"#uwsgi_buffering\">buffering</a> of responses from the uwsgi server is enabled, and the whole response does not fit into the buffers set by the <a href=\"#uwsgi_buffer_size\">uwsgi_buffer_size</a> and <a href=\"#uwsgi_buffers\">uwsgi_buffers</a> directives, a part of the response can be saved to a temporary file. This directive sets the maximum <code><i>size</i></code> of the temporary file. The size of data written to the temporary file at a time is set by the <a href=\"#uwsgi_temp_file_write_size\">uwsgi_temp_file_write_size</a> directive. </p>\n<p> The zero value disables buffering of responses to temporary files. </p>\n <blockquote class=\"note\"> This restriction does not apply to responses that will be <a href=\"#uwsgi_cache\">cached</a> or <a href=\"#uwsgi_store\">stored</a> on disk. </blockquote>\n\n<div class=\"directive\" id=\"uwsgi_modifier1\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_modifier1</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_modifier1 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the value of the <code>modifier1</code> field in the <a href=\"http://uwsgi-docs.readthedocs.org/en/latest/Protocol.html#uwsgi-packet-header\">uwsgi packet header</a>. </p>\n<div class=\"directive\" id=\"uwsgi_modifier2\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_modifier2</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_modifier2 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets the value of the <code>modifier2</code> field in the <a href=\"http://uwsgi-docs.readthedocs.org/en/latest/Protocol.html#uwsgi-packet-header\">uwsgi packet header</a>. </p>\n<div class=\"directive\" id=\"uwsgi_next_upstream\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_next_upstream</strong> \n    <code>error</code> |\n    <code>timeout</code> |\n    <code>invalid_header</code> |\n    <code>http_500</code> |\n    <code>http_503</code> |\n    <code>http_403</code> |\n    <code>http_404</code> |\n    <code>non_idempotent</code> |\n    <code>off</code>\n    ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_next_upstream error timeout;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Specifies in which cases a request should be passed to the next server: </p> <dl class=\"compact\"> <dt><code>error</code></dt> <dd>an error occurred while establishing a connection with the server, passing a request to it, or reading the response header;</dd> <dt><code>timeout</code></dt> <dd>a timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;</dd> <dt><code>invalid_header</code></dt> <dd>a server returned an empty or invalid response;</dd> <dt><code>http_500</code></dt> <dd>a server returned a response with the code 500;</dd> <dt><code>http_503</code></dt> <dd>a server returned a response with the code 503;</dd> <dt><code>http_403</code></dt> <dd>a server returned a response with the code 403;</dd> <dt><code>http_404</code></dt> <dd>a server returned a response with the code 404;</dd> <dt id=\"non_idempotent\"><code>non_idempotent</code></dt> <dd>normally, requests with a <a href=\"http://tools.ietf.org/html/rfc7231#section-4.2.2\">non-idempotent</a> method (<code>POST</code>, <code>LOCK</code>, <code>PATCH</code>) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests; </dd> <dt><code>off</code></dt> <dd>disables passing a request to the next server.</dd> </dl>\n\n<p> One should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible. </p>\n<p> The directive also defines what is considered an <a href=\"ngx_http_upstream_module#max_fails\">unsuccessful attempt</a> of communication with a server. The cases of <code>error</code>, <code>timeout</code> and <code>invalid_header</code> are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of <code>http_500</code> and <code>http_503</code> are considered unsuccessful attempts only if they are specified in the directive. The cases of <code>http_403</code> and <code>http_404</code> are never considered unsuccessful attempts. </p>\n<p> Passing a request to the next server can be limited by <a href=\"#uwsgi_next_upstream_tries\">the number of tries</a> and by <a href=\"#uwsgi_next_upstream_timeout\">time</a>. </p>\n<div class=\"directive\" id=\"uwsgi_next_upstream_timeout\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_next_upstream_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_next_upstream_timeout 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.5. </p>\n</div>\n<p> Limits the time during which a request can be passed to the <a href=\"#uwsgi_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation. </p>\n<div class=\"directive\" id=\"uwsgi_next_upstream_tries\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_next_upstream_tries</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_next_upstream_tries 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.5. </p>\n</div>\n<p> Limits the number of possible tries for passing a request to the <a href=\"#uwsgi_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation. </p>\n<div class=\"directive\" id=\"uwsgi_no_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_no_cache</strong> <code><i>string</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved: </p> <pre data-language=\"nginx\">\nuwsgi_no_cache $cookie_nocache $arg_nocache$arg_comment;\nuwsgi_no_cache $http_pragma    $http_authorization;\n</pre>\n<p> Can be used along with the <a href=\"#uwsgi_cache_bypass\">uwsgi_cache_bypass</a> directive. </p>\n<div class=\"directive\" id=\"uwsgi_param\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_param</strong> \n    <code><i>parameter</i></code> <code><i>value</i></code>\n    [<code>if_not_empty</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a <code><i>parameter</i></code> that should be passed to the uwsgi server. The <code><i>value</i></code> can contain text, variables, and their combination. These directives are inherited from the previous level if and only if there are no <code>uwsgi_param</code> directives defined on the current level. </p>\n<p> Standard <a href=\"http://tools.ietf.org/html/rfc3875#section-4.1\">CGI environment variables</a> should be provided as uwsgi headers, see the <code>uwsgi_params</code> file provided in the distribution: </p> <pre data-language=\"nginx\">\nlocation / {\n    include uwsgi_params;\n    ...\n}\n</pre>\n\n<p> If the directive is specified with <code>if_not_empty</code> (1.1.11) then such a parameter will not be passed to the server until its value is not empty: </p> <pre data-language=\"nginx\">\nuwsgi_param HTTPS $https if_not_empty;\n</pre>\n\n<div class=\"directive\" id=\"uwsgi_pass\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_pass</strong> [<code><i>protocol</i></code>://]<code><i>address</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>location</code>, <code>if in location</code><br> </td> </tr> </table></div>\n<p> Sets the protocol and address of a uwsgi server. As a <code><i>protocol</i></code>, “<code>uwsgi</code>” or “<code>suwsgi</code>” (secured uwsgi, uwsgi over SSL) can be specified. The address can be specified as a domain name or IP address, and a port: </p> <pre data-language=\"nginx\">\nuwsgi_pass localhost:9000;\nuwsgi_pass uwsgi://localhost:9000;\nuwsgi_pass suwsgi://[2001:db8::1]:9090;\n</pre>\n<p> or as a UNIX-domain socket path: </p> <pre data-language=\"nginx\">\nuwsgi_pass unix:/tmp/uwsgi.socket;\n</pre>\n\n<p> If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a <a href=\"ngx_http_upstream_module\">server group</a>. </p>\n <blockquote class=\"note\"> Secured uwsgi protocol is supported since version 1.5.8. </blockquote>\n\n<div class=\"directive\" id=\"uwsgi_pass_header\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_pass_header</strong> <code><i>field</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Permits passing <a href=\"#uwsgi_hide_header\">otherwise disabled</a> header fields from a uwsgi server to a client. </p>\n<div class=\"directive\" id=\"uwsgi_pass_request_body\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_pass_request_body</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_pass_request_body on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Indicates whether the original request body is passed to the uwsgi server. See also the <a href=\"#uwsgi_pass_request_headers\">uwsgi_pass_request_headers</a> directive. </p>\n<div class=\"directive\" id=\"uwsgi_pass_request_headers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_pass_request_headers</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_pass_request_headers on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Indicates whether the header fields of the original request are passed to the uwsgi server. See also the <a href=\"#uwsgi_pass_request_body\">uwsgi_pass_request_body</a> directive. </p>\n<div class=\"directive\" id=\"uwsgi_read_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_read_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_read_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for reading a response from the uwsgi server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the uwsgi server does not transmit anything within this time, the connection is closed. </p>\n<div class=\"directive\" id=\"uwsgi_request_buffering\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_request_buffering</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_request_buffering on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.11. </p>\n</div>\n<p> Enables or disables buffering of a client request body. </p>\n<p> When buffering is enabled, the entire request body is <a href=\"ngx_http_core_module#client_body_buffer_size\">read</a> from the client before sending the request to a uwsgi server. </p>\n<p> When buffering is disabled, the request body is sent to the uwsgi server immediately as it is received. In this case, the request cannot be passed to the <a href=\"#uwsgi_next_upstream\">next server</a> if nginx already started sending the request body. </p>\n<p> When HTTP/1.1 chunked transfer encoding is used to send the original request body, the request body will be buffered regardless of the directive value. </p>\n<div class=\"directive\" id=\"uwsgi_send_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_send_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_send_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets a timeout for transmitting a request to the uwsgi server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the uwsgi server does not receive anything within this time, the connection is closed. </p>\n<div class=\"directive\" id=\"uwsgi_ssl_certificate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ssl_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.8. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with the certificate in the PEM format used for authentication to a secured uwsgi server. </p>\n<div class=\"directive\" id=\"uwsgi_ssl_certificate_key\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ssl_certificate_key</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.8. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with the secret key in the PEM format used for authentication to a secured uwsgi server. </p>\n<p> The value <code>engine</code>:<code><i>name</i></code>:<code><i>id</i></code> can be specified instead of the <code><i>file</i></code> (1.7.9), which loads a secret key with a specified <code><i>id</i></code> from the OpenSSL engine <code><i>name</i></code>. </p>\n<div class=\"directive\" id=\"uwsgi_ssl_ciphers\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ssl_ciphers</strong> <code><i>ciphers</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_ssl_ciphers DEFAULT;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.8. </p>\n</div>\n<p> Specifies the enabled ciphers for requests to a secured uwsgi server. The ciphers are specified in the format understood by the OpenSSL library. </p>\n<p> The full list can be viewed using the “<code>openssl ciphers</code>” command. </p>\n<div class=\"directive\" id=\"uwsgi_ssl_crl\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ssl_crl</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.0. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with revoked certificates (CRL) in the PEM format used to <a href=\"#uwsgi_ssl_verify\">verify</a> the certificate of the secured uwsgi server. </p>\n<div class=\"directive\" id=\"uwsgi_ssl_name\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ssl_name</strong> <code><i>name</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_ssl_name host from uwsgi_pass;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.0. </p>\n</div>\n<p> Allows overriding the server name used to <a href=\"#uwsgi_ssl_verify\">verify</a> the certificate of the secured uwsgi server and to be <a href=\"#uwsgi_ssl_server_name\">passed through SNI</a> when establishing a connection with the secured uwsgi server. </p>\n<p> By default, the host part from <a href=\"#uwsgi_pass\">uwsgi_pass</a> is used. </p>\n<div class=\"directive\" id=\"uwsgi_ssl_password_file\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ssl_password_file</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.8. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with passphrases for <a href=\"#uwsgi_ssl_certificate_key\">secret keys</a> where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key. </p>\n<div class=\"directive\" id=\"uwsgi_ssl_protocols\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ssl_protocols</strong> \n    [<code>SSLv2</code>]\n    [<code>SSLv3</code>]\n    [<code>TLSv1</code>]\n    [<code>TLSv1.1</code>]\n    [<code>TLSv1.2</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.8. </p>\n</div>\n<p> Enables the specified protocols for requests to a secured uwsgi server. </p>\n<div class=\"directive\" id=\"uwsgi_ssl_server_name\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ssl_server_name</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_ssl_server_name off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.0. </p>\n</div>\n<p> Enables or disables passing of the server name through <a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">TLS Server Name Indication extension</a> (SNI, RFC 6066) when establishing a connection with the secured uwsgi server. </p>\n<div class=\"directive\" id=\"uwsgi_ssl_session_reuse\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ssl_session_reuse</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_ssl_session_reuse on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.5.8. </p>\n</div>\n<p> Determines whether SSL sessions can be reused when working with a secured uwsgi server. If the errors “<code>SSL3_GET_FINISHED:digest check failed</code>” appear in the logs, try disabling session reuse. </p>\n<div class=\"directive\" id=\"uwsgi_ssl_trusted_certificate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ssl_trusted_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.0. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> with trusted CA certificates in the PEM format used to <a href=\"#uwsgi_ssl_verify\">verify</a> the certificate of the secured uwsgi server. </p>\n<div class=\"directive\" id=\"uwsgi_ssl_verify\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ssl_verify</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_ssl_verify off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.0. </p>\n</div>\n<p> Enables or disables verification of the secured uwsgi server certificate. </p>\n<div class=\"directive\" id=\"uwsgi_ssl_verify_depth\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_ssl_verify_depth</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_ssl_verify_depth 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.7.0. </p>\n</div>\n<p> Sets the verification depth in the secured uwsgi server certificates chain. </p>\n<div class=\"directive\" id=\"uwsgi_store\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_store</strong> \n    <code>on</code> |\n    <code>off</code> |\n    <code><i>string</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_store off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Enables saving of files to a disk. The <code>on</code> parameter saves files with paths corresponding to the directives <a href=\"ngx_http_core_module#alias\">alias</a> or <a href=\"ngx_http_core_module#root\">root</a>. The <code>off</code> parameter disables saving of files. In addition, the file name can be set explicitly using the <code><i>string</i></code> with variables: </p> <pre data-language=\"nginx\">\nuwsgi_store /data/www$original_uri;\n</pre>\n\n<p> The modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the <a href=\"#uwsgi_temp_path\">uwsgi_temp_path</a> directive, are put on the same file system. </p>\n<p> This directive can be used to create local copies of static unchangeable files, e.g.: </p> <pre data-language=\"nginx\">\nlocation /images/ {\n    root               /data/www;\n    error_page         404 = /fetch$uri;\n}\n\nlocation /fetch/ {\n    internal;\n\n    uwsgi_pass         backend:9000;\n    ...\n\n    uwsgi_store        on;\n    uwsgi_store_access user:rw group:rw all:r;\n    uwsgi_temp_path    /data/temp;\n\n    alias              /data/www/;\n}\n</pre>\n\n<div class=\"directive\" id=\"uwsgi_store_access\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_store_access</strong> <code><i>users</i></code>:<code><i>permissions</i></code> ...;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_store_access user:rw;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Sets access permissions for newly created files and directories, e.g.: </p> <pre data-language=\"nginx\">\nuwsgi_store_access user:rw group:rw all:r;\n</pre>\n\n<p> If any <code>group</code> or <code>all</code> access permissions are specified then <code>user</code> permissions may be omitted: </p> <pre data-language=\"nginx\">\nuwsgi_store_access group:rw all:r;\n</pre>\n\n<div class=\"directive\" id=\"uwsgi_temp_file_write_size\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_temp_file_write_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_temp_file_write_size 8k|16k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Limits the <code><i>size</i></code> of data written to a temporary file at a time, when buffering of responses from the uwsgi server to temporary files is enabled. By default, <code><i>size</i></code> is limited by two buffers set by the <a href=\"#uwsgi_buffer_size\">uwsgi_buffer_size</a> and <a href=\"#uwsgi_buffers\">uwsgi_buffers</a> directives. The maximum size of a temporary file is set by the <a href=\"#uwsgi_max_temp_file_size\">uwsgi_max_temp_file_size</a> directive. </p>\n<div class=\"directive\" id=\"uwsgi_temp_path\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>uwsgi_temp_path</strong> \n    <code><i>path</i></code>\n    [<code><i>level1</i></code>\n    [<code><i>level2</i></code>\n    [<code><i>level3</i></code>]]];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>uwsgi_temp_path uwsgi_temp;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>http</code>, <code>server</code>, <code>location</code><br> </td> </tr> </table></div>\n<p> Defines a directory for storing temporary files with data received from uwsgi servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration </p> <pre data-language=\"nginx\">\nuwsgi_temp_path /spool/nginx/uwsgi_temp 1 2;\n</pre>\n<p> a temporary file might look like this: </p> <pre data-language=\"nginx\">\n/spool/nginx/uwsgi_temp/<strong>7</strong>/<strong>45</strong>/00000123<strong>457</strong>\n</pre>\n\n<p> See also the <code>use_temp_path</code> parameter of the <a href=\"#uwsgi_cache_path\">uwsgi_cache_path</a> directive. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html</a>\n  </p>\n</div>\n","stream/ngx_stream_ssl_module":"<h1>Module ngx_stream_ssl_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#ssl_certificate\">ssl_certificate</a></li>\n<li><a href=\"#ssl_certificate_key\">ssl_certificate_key</a></li>\n<li><a href=\"#ssl_ciphers\">ssl_ciphers</a></li>\n<li><a href=\"#ssl_dhparam\">ssl_dhparam</a></li>\n<li><a href=\"#ssl_ecdh_curve\">ssl_ecdh_curve</a></li>\n<li><a href=\"#ssl_handshake_timeout\">ssl_handshake_timeout</a></li>\n<li><a href=\"#ssl_password_file\">ssl_password_file</a></li>\n<li><a href=\"#ssl_prefer_server_ciphers\">ssl_prefer_server_ciphers</a></li>\n<li><a href=\"#ssl_protocols\">ssl_protocols</a></li>\n<li><a href=\"#ssl_session_cache\">ssl_session_cache</a></li>\n<li><a href=\"#ssl_session_ticket_key\">ssl_session_ticket_key</a></li>\n<li><a href=\"#ssl_session_tickets\">ssl_session_tickets</a></li>\n<li><a href=\"#ssl_session_timeout\">ssl_session_timeout</a></li>\n<li><a href=\"#variables\">Embedded Variables</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_stream_ssl_module</code> module (1.9.0) provides the necessary support for a stream proxy server to work with the SSL/TLS protocol. This module is not built by default, it should be enabled with the <code>--with-stream_ssl_module</code> configuration parameter. </p> <h4 id=\"example\">Example Configuration</h4>\n<p> To reduce the processor load, it is recommended to </p> <ul class=\"compact\"> <li> set the number of worker processes equal to the number of processors, </li> <li> enable the shared session cache, </li> <li> disable the built-in session cache, </li> <li> and possibly increase the session lifetime (by default, 5 minutes): </li> </ul>\n <pre data-language=\"nginx\">\n<strong>worker_processes auto;</strong>\n\nstream {\n\n    ...\n\n    server {\n        listen              12345 ssl;\n\n        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;\n        ssl_certificate     /usr/local/nginx/conf/cert.pem;\n        ssl_certificate_key /usr/local/nginx/conf/cert.key;\n        <strong>ssl_session_cache   shared:SSL:10m;</strong>\n        <strong>ssl_session_timeout 10m;</strong>\n\n        ...\n    }\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"ssl_certificate\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with the certificate in the PEM format for the given server. If intermediate certificates should be specified in addition to a primary certificate, they should be specified in the same file in the following order: the primary certificate comes first, then the intermediate certificates. A secret key in the PEM format may be placed in the same file. </p>\n<p> Since version 1.11.0, this directive can be specified multiple times to load certificates of different types, for example, RSA and ECDSA: </p> <pre data-language=\"nginx\">\nserver {\n    listen              12345 ssl;\n\n    ssl_certificate     example.com.rsa.crt;\n    ssl_certificate_key example.com.rsa.key;\n\n    ssl_certificate     example.com.ecdsa.crt;\n    ssl_certificate_key example.com.ecdsa.key;\n\n    ...\n}\n</pre>\n <blockquote class=\"note\"> Only OpenSSL 1.0.2 or higher supports separate certificate chains for different certificates. With older versions, only one certificate chain can be used. </blockquote>\n\n<div class=\"directive\" id=\"ssl_certificate_key\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_certificate_key</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with the secret key in the PEM format for the given server. </p>\n<p> The value <code>engine</code>:<code><i>name</i></code>:<code><i>id</i></code> can be specified instead of the <code><i>file</i></code>, which loads a secret key with a specified <code><i>id</i></code> from the OpenSSL engine <code><i>name</i></code>. </p>\n<div class=\"directive\" id=\"ssl_ciphers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_ciphers</strong> <code><i>ciphers</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_ciphers HIGH:!aNULL:!MD5;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies the enabled ciphers. The ciphers are specified in the format understood by the OpenSSL library, for example: </p> <pre data-language=\"nginx\">\nssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n</pre>\n\n<p> The full list can be viewed using the “<code>openssl ciphers</code>” command. </p>\n<div class=\"directive\" id=\"ssl_dhparam\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_dhparam</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with DH parameters for DHE ciphers. </p>\n<div class=\"directive\" id=\"ssl_ecdh_curve\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_ecdh_curve</strong> <code><i>curve</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_ecdh_curve auto;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>curve</i></code> for ECDHE ciphers. </p>\n<p> When using OpenSSL 1.0.2 or higher, it is possible to specify multiple curves (1.11.0), for example: </p> <pre data-language=\"nginx\">\nssl_ecdh_curve prime256v1:secp384r1;\n</pre>\n\n<p> The special value <code>auto</code> (1.11.0) instructs nginx to use a list built into the OpenSSL library when using OpenSSL 1.0.2 or higher, or <code>prime256v1</code> with older versions. </p>\n <blockquote class=\"note\"> Prior to version 1.11.0, the <code>prime256v1</code> curve was used by default. </blockquote>\n\n<div class=\"directive\" id=\"ssl_handshake_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_handshake_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_handshake_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a timeout for the SSL handshake to complete. </p>\n<div class=\"directive\" id=\"ssl_password_file\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_password_file</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with passphrases for <a href=\"#ssl_certificate_key\">secret keys</a> where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nstream {\n    ssl_password_file /etc/keys/global.pass;\n    ...\n\n    server {\n        listen 127.0.0.1:12345;\n        ssl_certificate_key /etc/keys/first.key;\n    }\n\n    server {\n        listen 127.0.0.1:12346;\n\n        # named pipe can also be used instead of a file\n        ssl_password_file /etc/keys/fifo;\n        ssl_certificate_key /etc/keys/second.key;\n    }\n}\n</pre>\n\n<div class=\"directive\" id=\"ssl_prefer_server_ciphers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_prefer_server_ciphers</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_prefer_server_ciphers off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies that server ciphers should be preferred over client ciphers when the SSLv3 and TLS protocols are used. </p>\n<div class=\"directive\" id=\"ssl_protocols\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_protocols</strong> \n    [<code>SSLv2</code>]\n    [<code>SSLv3</code>]\n    [<code>TLSv1</code>]\n    [<code>TLSv1.1</code>]\n    [<code>TLSv1.2</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables the specified protocols. The <code>TLSv1.1</code> and <code>TLSv1.2</code> parameters work only when the OpenSSL library of version 1.0.1 or higher is used. </p>\n<div class=\"directive\" id=\"ssl_session_cache\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_session_cache</strong> \n    <code>off</code> |\n    <code>none</code> |\n    [<code>builtin</code>[:<code><i>size</i></code>]]\n    [<code>shared</code>:<code><i>name</i></code>:<code><i>size</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_session_cache none;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the types and sizes of caches that store session parameters. A cache can be of any of the following types: </p> <dl class=\"compact\"> <dt><code>off</code></dt> <dd> the use of a session cache is strictly prohibited: nginx explicitly tells a client that sessions may not be reused. </dd> <dt><code>none</code></dt> <dd> the use of a session cache is gently disallowed: nginx tells a client that sessions may be reused, but does not actually store session parameters in the cache. </dd> <dt><code>builtin</code></dt> <dd> a cache built in OpenSSL; used by one worker process only. The cache size is specified in sessions. If size is not given, it is equal to 20480 sessions. Use of the built-in cache can cause memory fragmentation. </dd> <dt><code>shared</code></dt> <dd> a cache shared between all worker processes. The cache size is specified in bytes; one megabyte can store about 4000 sessions. Each shared cache should have an arbitrary name. A cache with the same name can be used in several servers. </dd> </dl>\n\n<p> Both cache types can be used simultaneously, for example: </p> <pre data-language=\"nginx\">\nssl_session_cache builtin:1000 shared:SSL:10m;\n</pre>\n<p> but using only shared cache without the built-in cache should be more efficient. </p>\n<div class=\"directive\" id=\"ssl_session_ticket_key\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_session_ticket_key</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets a <code><i>file</i></code> with the secret key used to encrypt and decrypt TLS session tickets. The directive is necessary if the same key has to be shared between multiple servers. By default, a randomly generated key is used. </p>\n<p> If several keys are specified, only the first key is used to encrypt TLS session tickets. This allows configuring key rotation, for example: </p> <pre data-language=\"nginx\">\nssl_session_ticket_key current.key;\nssl_session_ticket_key previous.key;\n</pre>\n\n<p> The <code><i>file</i></code> must contain 48 bytes of random data and can be created using the following command: </p> <pre data-language=\"nginx\">\nopenssl rand 48 &gt; ticket.key\n</pre>\n\n<div class=\"directive\" id=\"ssl_session_tickets\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_session_tickets</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_session_tickets on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables or disables session resumption through <a href=\"http://tools.ietf.org/html/rfc5077\">TLS session tickets</a>. </p>\n<div class=\"directive\" id=\"ssl_session_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>ssl_session_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>ssl_session_timeout 5m;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a time during which a client may reuse the session parameters stored in a cache. </p> <h4 id=\"variables\">Embedded Variables</h4>\n<p> The <code>ngx_http_ssl_module</code> module supports variables since 1.11.2. </p> <dl class=\"compact\"> <dt id=\"var_ssl_cipher\"><code>$ssl_cipher</code></dt> <dd> returns the string of ciphers used for an established SSL connection; </dd> <dt id=\"var_ssl_protocol\"><code>$ssl_protocol</code></dt> <dd> returns the protocol of an established SSL connection; </dd> <dt id=\"var_ssl_server_name\"><code>$ssl_server_name</code></dt> <dd> returns the server name requested through <a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">SNI</a>; </dd> <dt id=\"var_ssl_session_id\"><code>$ssl_session_id</code></dt> <dd> returns the session identifier of an established SSL connection; </dd> <dt id=\"var_ssl_session_reused\"><code>$ssl_session_reused</code></dt> <dd> returns “<code>r</code>” if an SSL session was reused, or “<code>.</code>” otherwise. </dd> </dl>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/stream/ngx_stream_ssl_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/stream/ngx_stream_ssl_module.html</a>\n  </p>\n</div>\n","stream/ngx_stream_upstream_module":"<h1>Module ngx_stream_upstream_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#upstream\">upstream</a></li>\n<li><a href=\"#server\">server</a></li>\n<li><a href=\"#zone\">zone</a></li>\n<li><a href=\"#state\">state</a></li>\n<li><a href=\"#hash\">hash</a></li>\n<li><a href=\"#least_conn\">least_conn</a></li>\n<li><a href=\"#least_time\">least_time</a></li>\n<li><a href=\"#health_check\">health_check</a></li>\n<li><a href=\"#health_check_timeout\">health_check_timeout</a></li>\n<li><a href=\"#match\">match</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_stream_upstream_module</code> module (1.9.0) is used to define groups of servers that can be referenced by the <a href=\"ngx_stream_proxy_module#proxy_pass\">proxy_pass</a> directive. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nupstream <strong>backend</strong> {\n    hash $remote_addr consistent;\n\n    server backend1.example.com:12345  weight=5;\n    server backend2.example.com:12345;\n    server unix:/tmp/backend3;\n\n    server backup1.example.com:12345   backup;\n    server backup2.example.com:12345   backup;\n}\n\nserver {\n    listen 12346;\n    proxy_pass <strong>backend</strong>;\n}\n</pre>\n\n<p> Dynamically configurable group, available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>: </p> <pre data-language=\"nginx\">\nresolver 10.0.0.1;\n\nupstream <strong>dynamic</strong> {\n    zone upstream_dynamic 64k;\n\n    server backend1.example.com:12345 weight=5;\n    server backend2.example.com:12345 fail_timeout=5s slow_start=30s;\n    server 192.0.2.1:12345            max_fails=3;\n    server backend3.example.com:12345 resolve;\n    server backend4.example.com       service=http resolve;\n\n    server backup1.example.com:12345  backup;\n    server backup2.example.com:12345  backup;\n}\n\nserver {\n    listen 12346;\n    proxy_pass <strong>dynamic</strong>;\n    health_check;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"upstream\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>upstream</strong> <code><i>name</i></code> { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table></div>\n<p> Defines a group of servers. Servers can listen on different ports. In addition, servers listening on TCP and UNIX-domain sockets can be mixed. </p>\n<p> Example: </p> <pre data-language=\"nginx\">\nupstream backend {\n    server backend1.example.com:12345 weight=5;\n    server 127.0.0.1:12345            max_fails=3 fail_timeout=30s;\n    server unix:/tmp/backend2;\n    server backend3.example.com:12345 resolve;\n\n    server backup1.example.com:12345  backup;\n}\n</pre>\n\n<p> By default, connections are distributed between the servers using a weighted round-robin balancing method. In the above example, each 7 connections will be distributed as follows: 5 connections go to <code>backend1.example.com:12345</code> and one connection to each of the second and third servers. If an error occurs during communication with a server, the connection will be passed to the next server, and so on until all of the functioning servers will be tried. If communication with all servers fails, the connection will be closed. </p>\n<div class=\"directive\" id=\"server\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>server</strong> <code><i>address</i></code> [<code><i>parameters</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table></div>\n<p> Defines the <code><i>address</i></code> and other <code><i>parameters</i></code> of a server. The address can be specified as a domain name or IP address with an obligatory port, or as a UNIX-domain socket path specified after the “<code>unix:</code>” prefix. A domain name that resolves to several IP addresses defines multiple servers at once. </p>\n<p> The following parameters can be defined: </p> <dl class=\"compact\"> <dt id=\"weight\"> <code>weight</code>=<code><i>number</i></code> </dt> <dd> sets the weight of the server, by default, 1. </dd> <dt id=\"max_fails\"> <code>max_fails</code>=<code><i>number</i></code> </dt> <dd> sets the number of unsuccessful attempts to communicate with the server that should happen in the duration set by the <code>fail_timeout</code> parameter to consider the server unavailable for a duration also set by the <code>fail_timeout</code> parameter. By default, the number of unsuccessful attempts is set to 1. The zero value disables the accounting of attempts. Here, an unsuccessful attempt is an error or timeout while establishing a connection with the server. </dd> <dt id=\"fail_timeout\"> <code>fail_timeout</code>=<code><i>time</i></code> </dt> <dd> sets <ul class=\"compact\"> <li> the time during which the specified number of unsuccessful attempts to communicate with the server should happen to consider the server unavailable; </li> <li> and the period of time the server will be considered unavailable. </li> </ul> By default, the parameter is set to 10 seconds. </dd> <dt id=\"backup\"> <code>backup</code> </dt> <dd> marks the server as a backup server. Connections to the backup server will be passed when the primary servers are unavailable. </dd> <dt id=\"down\"> <code>down</code> </dt> <dd> marks the server as permanently unavailable. </dd> </dl>\n\n<p> Additionally, the following parameters are available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>: </p> <dl class=\"compact\"> <dt id=\"max_conns\"> <code>max_conns</code>=<code><i>number</i></code> </dt> <dd> limits the maximum <code><i>number</i></code> of simultaneous connections to the proxied server. Default value is zero, meaning there is no limit. </dd> <dt id=\"resolve\"> <code>resolve</code> </dt> <dd> monitors changes of the IP addresses that correspond to a domain name of the server, and automatically modifies the upstream configuration without the need of restarting nginx. The server group must reside in the <a href=\"#zone\">shared memory</a>. <p> In order for this parameter to work, the <a href=\"ngx_stream_core_module#resolver\">resolver</a> directive must be specified in the <a href=\"ngx_stream_core_module#stream\">stream</a> block. Example: </p> <pre data-language=\"nginx\">\nstream {\n    resolver 10.0.0.1;\n\n    upstream u {\n        zone ...;\n        ...\n        server example.com:12345 resolve;\n    }\n}\n</pre>\n </dd> <dt id=\"service\"> <code>service</code>=<code><i>name</i></code> </dt> <dd> enables resolving of DNS <a href=\"https://tools.ietf.org/html/rfc2782\">SRV</a> records and sets the service <code><i>name</i></code> (1.9.13). In order for this parameter to work, it is necessary to specify the <a href=\"#resolve\">resolve</a> parameter for the server and specify a hostname without a port number. <p> If the service name does not contain a dot (“<code>.</code>”), then the <a href=\"https://tools.ietf.org/html/rfc2782\">RFC</a>-compliant name is constructed and the TCP protocol is added to the service prefix. For example, to look up the <code>_http._tcp.backend.example.com</code> SRV record, it is necessary to specify the directive: </p> <pre data-language=\"nginx\">\nserver backend.example.com service=http resolve;\n</pre>\n<p> If the service name contains one or more dots, then the name is constructed by joining the service prefix and the server name. For example, to look up the <code>_http._tcp.backend.example.com</code> and <code>server1.backend.example.com</code> SRV records, it is necessary to specify the directives: </p> <pre data-language=\"nginx\">\nserver backend.example.com service=_http._tcp resolve;\nserver example.com service=server1.backend resolve;\n</pre>\n <p> Highest-priority SRV records (records with the same lowest-number priority value) are resolved as primary servers, the rest of SRV records are resolved as backup servers. If the <a href=\"#backup\">backup</a> parameter is specified for the server, high-priority SRV records are resolved as backup servers, the rest of SRV records are ignored. </p> </dd> <dt id=\"slow_start\"> <code>slow_start</code>=<code><i>time</i></code> </dt> <dd> sets the <code><i>time</i></code> during which the server will recover its weight from zero to a nominal value, when unhealthy server becomes <a href=\"#health_check\">healthy</a>, or when the server becomes available after a period of time it was considered <a href=\"#fail_timeout\">unavailable</a>. Default value is zero, i.e. slow start is disabled. </dd> </dl>\n\n <blockquote class=\"note\"> If there is only a single server in a group, <code>max_fails</code>, <code>fail_timeout</code> and <code>slow_start</code> parameters are ignored, and such a server will never be considered unavailable. </blockquote>\n\n<div class=\"directive\" id=\"zone\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>zone</strong> <code><i>name</i></code> [<code><i>size</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table></div>\n<p> Defines the <code><i>name</i></code> and <code><i>size</i></code> of the shared memory zone that keeps the group’s configuration and run-time state that are shared between worker processes. Several groups may share the same zone. In this case, it is enough to specify the zone size only once. </p>\n<p> Additionally, as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>, such groups allow changing the group membership or modifying the settings of a particular server without the need of restarting nginx. The configuration is accessible via a special location handled by <a href=\"../http/ngx_http_upstream_conf_module#upstream_conf\">upstream_conf</a>. </p>\n<div class=\"directive\" id=\"state\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>state</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.7. </p>\n</div>\n<p> Specifies a <code><i>file</i></code> that keeps the state of the dynamically configurable group. The state is currently limited to the list of servers with their parameters. The file is read when parsing the configuration and is updated each time the upstream configuration is <a href=\"ngx_http_upstream_conf_module#upstream_conf\">changed</a>. Changing the file content directly should be avoided. The directive cannot be used along with the <a href=\"#server\">server</a> directive. </p>\n <blockquote class=\"note\"> Changes made during <a href=\"../control#reconfiguration\">configuration reload</a> or <a href=\"../control#upgrade\">binary upgrade</a> can be lost. </blockquote>\n\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"hash\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>hash</strong> <code><i>key</i></code> [<code>consistent</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table></div>\n<p> Specifies a load balancing method for a server group where client-server mapping is based on the hashed <code><i>key</i></code> value. The <code><i>key</i></code> can contain text, variables, and their combinations (1.11.2). Usage example: </p> <pre data-language=\"nginx\">\nhash $remote_addr;\n</pre>\n<p> Note that adding or removing a server from the group may result in remapping most of the keys to different servers. The method is compatible with the <a href=\"http://search.cpan.org/perldoc?Cache%3A%3AMemcached\">Cache::Memcached</a> Perl library. </p>\n<p> If the <code>consistent</code> parameter is specified, the <a href=\"http://www.last.fm/user/RJ/journal/2007/04/10/392555/\">ketama</a> consistent hashing method will be used instead. The method ensures that only a few keys will be remapped to different servers when a server is added to or removed from the group. This helps to achieve a higher cache hit ratio for caching servers. The method is compatible with the <a href=\"http://search.cpan.org/perldoc?Cache%3A%3AMemcached%3A%3AFast\">Cache::Memcached::Fast</a> Perl library with the <code><i>ketama_points</i></code> parameter set to 160. </p>\n<div class=\"directive\" id=\"least_conn\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>least_conn</strong>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table></div>\n<p> Specifies that a server group should use a load balancing method where a connection is passed to the server with the least number of active connections, taking into account weights of servers. If there are several such servers, they are tried in turn using a weighted round-robin balancing method. </p>\n<div class=\"directive\" id=\"least_time\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>least_time</strong> <code>connect</code> |\n     <code>first_byte</code> |\n     <code>last_byte</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>upstream</code><br> </td> </tr> </table></div>\n<p> Specifies that a group should use a load balancing method where a connection is passed to the server with the least average time and least number of active connections, taking into account weights of servers. If there are several such servers, they are tried in turn using a weighted round-robin balancing method. </p>\n<p> If the <code>connect</code> parameter is specified, time to connect to the upstream server is used. If the <code>first_byte</code> parameter is specified, time to receive the first byte of data is used. If the <code>last_byte</code> is specified, time to receive the last byte of data is used. </p>\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"health_check\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>health_check</strong> [<code><i>parameters</i></code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code><br> </td> </tr> </table></div>\n<p> Enables periodic health checks of the servers in a <a href=\"#upstream\">group</a>. </p>\n<p> The following optional parameters are supported: </p> <dl class=\"compact\"> <dt id=\"interval\"> <code>interval</code>=<code><i>time</i></code> </dt> <dd> sets the interval between two consecutive health checks, by default, 5 seconds; </dd> <dt id=\"fails\"> <code>fails</code>=<code><i>number</i></code> </dt> <dd> sets the number of consecutive failed health checks of a particular server after which this server will be considered unhealthy, by default, 1; </dd> <dt id=\"passes\"> <code>passes</code>=<code><i>number</i></code> </dt> <dd> sets the number of consecutive passed health checks of a particular server after which the server will be considered healthy, by default, 1; </dd> <dt id=\"hc_match\"> <code>match</code>=<code><i>name</i></code> </dt> <dd> specifies the <code>match</code> block configuring the tests that a successful connection should pass in order for a health check to pass. By default, only the ability to establish a TCP connection with the server is checked; </dd> <dt id=\"health_check_port\"> <code>port</code>=<code><i>number</i></code> </dt> <dd> defines the port used when connecting to a server to perform a health check (1.9.7); by default, equals the <a href=\"#server\">server</a> port; </dd> <dt id=\"health_check_udp\"> <code>udp</code> </dt> <dd> specifies that the <code>UDP</code> protocol should be used for health checks instead of the default <code>TCP</code> protocol (1.9.13); requires a <a href=\"#hc_match\">match</a> block with the <a href=\"#match_send\">send</a> and <a href=\"#match_expect\">expect</a> parameters. </dd> </dl>\n\n<p> For example, </p> <pre data-language=\"nginx\">\nserver {\n    proxy_pass backend;\n    health_check;\n}\n</pre>\n<p> will check the ability to establish a TCP connection to each server in the <code>backend</code> group every five seconds. When a connection to the server cannot be established, the health check will fail, and the server will be considered unhealthy. Client connections are not passed to unhealthy servers. </p>\n<p> Health checks can also be configured to test data obtained from the server. Tests are configured separately using the <a href=\"#match\">match</a> directive and referenced in the <code>match</code> parameter. </p>\n<p> The server group must reside in the <a href=\"#zone\">shared memory</a>. </p>\n<p> If several health checks are defined for the same group of servers, a single failure of any check will make the corresponding server be considered unhealthy. </p>\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"health_check_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>health_check_timeout</strong> <code><i>timeout</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>health_check_timeout 5s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Overrides the <a href=\"ngx_stream_proxy_module#proxy_timeout\">proxy_timeout</a> value for health checks. </p>\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n\n<div class=\"directive\" id=\"match\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>match</strong> <code><i>name</i></code>  { ... }</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code><br> </td> </tr> </table></div>\n<p> Defines the named test set used to verify server responses to health checks. </p>\n<p> The following parameters can be configured: </p> <dl class=\"compact\"> <dt id=\"match_send\"> <code>send</code> <code><i>string</i></code>; </dt> <dd> sends a <code><i>string</i></code> to the server; </dd> <dt id=\"match_expect\"> <code>expect</code> <code><i>string</i></code> | <code>~</code> <code><i>regex</i></code>; </dt> <dd> a literal string (1.9.12) or a regular expression that the data obtained from the server should match. The regular expression is specified with the preceding “<code>~*</code>” modifier (for case-insensitive matching), or the “<code>~</code>” modifier (for case-sensitive matching). </dd> </dl>\n<p> Both <code>send</code> and <code>expect</code> parameters can contain hexadecimal literals with the prefix “<code>\\x</code>” followed by two hex digits, for example, “<code>\\x80</code>” (1.9.12). </p>\n<p> Health check is passed if: </p> <ul class=\"compact\"> <li> the TCP connection was successfully established; </li> <li> the <code><i>string</i></code> from the <code>send</code> parameter, if specified, was sent; </li> <li> the data obtained from the server matched the string or regular expression from the <code>expect</code> parameter, if specified; </li> <li> the time elapsed does not exceed the value specified in the <a href=\"#health_check_timeout\">health_check_timeout</a> directive. </li> </ul>\n\n<p> Example: </p> <pre data-language=\"nginx\">\nupstream backend {\n    zone     upstream_backend 10m;\n    server   127.0.0.1:12345;\n}\n\nmatch http {\n    send     \"GET / HTTP/1.0\\r\\nHost: localhost\\r\\n\\r\\n\";\n    expect ~ \"200 OK\";\n}\n\nserver {\n    listen       12346;\n    proxy_pass   backend;\n    health_check match=http;\n}\n</pre>\n\n <blockquote class=\"note\"> Only the first <a href=\"ngx_stream_proxy_module#proxy_buffer_size\">proxy_buffer_size</a> bytes of data obtained from the server are examined. </blockquote>\n\n <blockquote class=\"note\"> This directive is available as part of our <a href=\"http://nginx.com/products/\">commercial subscription</a>. </blockquote>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/stream/ngx_stream_upstream_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/stream/ngx_stream_upstream_module.html</a>\n  </p>\n</div>\n","stream/ngx_stream_proxy_module":"<h1>Module ngx_stream_proxy_module</h1>\n<ul>\n<li><a href=\"#example\">Example Configuration</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#proxy_bind\">proxy_bind</a></li>\n<li><a href=\"#proxy_buffer_size\">proxy_buffer_size</a></li>\n<li><a href=\"#proxy_connect_timeout\">proxy_connect_timeout</a></li>\n<li><a href=\"#proxy_download_rate\">proxy_download_rate</a></li>\n<li><a href=\"#proxy_next_upstream\">proxy_next_upstream</a></li>\n<li><a href=\"#proxy_next_upstream_timeout\">proxy_next_upstream_timeout</a></li>\n<li><a href=\"#proxy_next_upstream_tries\">proxy_next_upstream_tries</a></li>\n<li><a href=\"#proxy_pass\">proxy_pass</a></li>\n<li><a href=\"#proxy_protocol\">proxy_protocol</a></li>\n<li><a href=\"#proxy_responses\">proxy_responses</a></li>\n<li><a href=\"#proxy_ssl\">proxy_ssl</a></li>\n<li><a href=\"#proxy_ssl_certificate\">proxy_ssl_certificate</a></li>\n<li><a href=\"#proxy_ssl_certificate_key\">proxy_ssl_certificate_key</a></li>\n<li><a href=\"#proxy_ssl_ciphers\">proxy_ssl_ciphers</a></li>\n<li><a href=\"#proxy_ssl_crl\">proxy_ssl_crl</a></li>\n<li><a href=\"#proxy_ssl_name\">proxy_ssl_name</a></li>\n<li><a href=\"#proxy_ssl_password_file\">proxy_ssl_password_file</a></li>\n<li><a href=\"#proxy_ssl_server_name\">proxy_ssl_server_name</a></li>\n<li><a href=\"#proxy_ssl_session_reuse\">proxy_ssl_session_reuse</a></li>\n<li><a href=\"#proxy_ssl_protocols\">proxy_ssl_protocols</a></li>\n<li><a href=\"#proxy_ssl_trusted_certificate\">proxy_ssl_trusted_certificate</a></li>\n<li><a href=\"#proxy_ssl_verify\">proxy_ssl_verify</a></li>\n<li><a href=\"#proxy_ssl_verify_depth\">proxy_ssl_verify_depth</a></li>\n<li><a href=\"#proxy_timeout\">proxy_timeout</a></li>\n<li><a href=\"#proxy_upload_rate\">proxy_upload_rate</a></li>\n</ul> <p id=\"summary\"> The <code>ngx_stream_proxy_module</code> module (1.9.0) allows proxying data streams over TCP, UDP (1.9.13), and UNIX-domain sockets. </p> <h4 id=\"example\">Example Configuration</h4>\n <pre data-language=\"nginx\">\nserver {\n    listen 127.0.0.1:12345;\n    proxy_pass 127.0.0.1:8080;\n}\n\nserver {\n    listen 12345;\n    proxy_connect_timeout 1s;\n    proxy_timeout 1m;\n    proxy_pass example.com:12345;\n}\n\nserver {\n    listen 53 udp;\n    proxy_responses 1;\n    proxy_timeout 20s;\n    proxy_pass dns.example.com:53;\n}\n\nserver {\n    listen [::1]:12345;\n    proxy_pass unix:/tmp/stream.socket;\n}\n</pre>\n <h4 id=\"directives\">Directives</h4>\n<div class=\"directive\" id=\"proxy_bind\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_bind</strong> <code><i>address</i></code> [transparent] | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.2. </p>\n</div>\n<p> Makes outgoing connections to a proxied server originate from the specified local IP <code><i>address</i></code>. Parameter value can contain variables (1.11.2). The special value <code>off</code> cancels the effect of the <code>proxy_bind</code> directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address. </p>\n<p id=\"proxy_bind_transparent\"> The <code>transparent</code> parameter (1.11.0) allows outgoing connections to a proxied server originate from a non-local IP address, for example, from a real IP address of a client: </p> <pre data-language=\"nginx\">\nproxy_bind $remote_addr transparent;\n</pre>\n<p> In order for this parameter to work, it is necessary to run nginx worker processes with the <a href=\"../ngx_core_module#user\">superuser</a> privileges and configure kernel routing table to intercept network traffic from the proxied server. </p>\n<div class=\"directive\" id=\"proxy_buffer_size\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_buffer_size</strong> <code><i>size</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_buffer_size 16k;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.4. </p>\n</div>\n<p> Sets the <code><i>size</i></code> of the buffer used for reading data from the proxied server. Also sets the <code><i>size</i></code> of the buffer used for reading data from the client. </p>\n<div class=\"directive\" id=\"proxy_connect_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_connect_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_connect_timeout 60s;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Defines a timeout for establishing a connection with a proxied server. </p>\n<div class=\"directive\" id=\"proxy_download_rate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_download_rate</strong> <code><i>rate</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_download_rate 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.3. </p>\n</div>\n<p> Limits the speed of reading the data from the proxied server. The <code><i>rate</i></code> is specified in bytes per second. The zero value disables rate limiting. The limit is set per a connection, so if nginx simultaneously opens two connections to the proxied server, the overall rate will be twice as much as the specified limit. </p>\n<div class=\"directive\" id=\"proxy_next_upstream\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_next_upstream</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_next_upstream on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> When a connection to the proxied server cannot be established, determines whether a client connection will be passed to the next server. </p>\n<p> Passing a connection to the next server can be limited by <a href=\"#proxy_next_upstream_tries\">the number of tries</a> and by <a href=\"#proxy_next_upstream_timeout\">time</a>. </p>\n<div class=\"directive\" id=\"proxy_next_upstream_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_next_upstream_timeout</strong> <code><i>time</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_next_upstream_timeout 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Limits the time allowed to pass a connection to the <a href=\"#proxy_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation. </p>\n<div class=\"directive\" id=\"proxy_next_upstream_tries\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_next_upstream_tries</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_next_upstream_tries 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Limits the number of possible tries for passing a connection to the <a href=\"#proxy_next_upstream\">next server</a>. The <code>0</code> value turns off this limitation. </p>\n<div class=\"directive\" id=\"proxy_pass\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_pass</strong> <code><i>address</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the address of a proxied server. The address can be specified as a domain name or IP address, and a port: </p> <pre data-language=\"nginx\">\nproxy_pass localhost:12345;\n</pre>\n<p> or as a UNIX-domain socket path: </p> <pre data-language=\"nginx\">\nproxy_pass unix:/tmp/stream.socket;\n</pre>\n\n<p> If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a <a href=\"ngx_stream_upstream_module\">server group</a>. </p>\n<div class=\"directive\" id=\"proxy_protocol\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_protocol</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_protocol off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.2. </p>\n</div>\n<p> Enables the <a href=\"http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt\">PROXY protocol</a> for connections to a proxied server. </p>\n<div class=\"directive\" id=\"proxy_responses\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_responses</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.13. </p>\n</div>\n<p> Sets the number of datagrams expected from the proxied server in response to the client request if the <a href=\"ngx_stream_core_module#udp\">UDP</a> protocol is used. By default, the number of datagrams is not limited: the response datagrams will be sent until the <a href=\"#proxy_timeout\">proxy_timeout</a> value expires. </p>\n<div class=\"directive\" id=\"proxy_ssl\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables the SSL/TLS protocol for connections to a proxied server. </p>\n<div class=\"directive\" id=\"proxy_ssl_certificate\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with the certificate in the PEM format used for authentication to a proxied server. </p>\n<div class=\"directive\" id=\"proxy_ssl_certificate_key\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_certificate_key</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with the secret key in the PEM format used for authentication to a proxied server. </p>\n<div class=\"directive\" id=\"proxy_ssl_ciphers\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_ciphers</strong> <code><i>ciphers</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_ciphers DEFAULT;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies the enabled ciphers for connections to a proxied server. The ciphers are specified in the format understood by the OpenSSL library. </p>\n<p> The full list can be viewed using the “<code>openssl ciphers</code>” command. </p>\n<div class=\"directive\" id=\"proxy_ssl_crl\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_crl</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with revoked certificates (CRL) in the PEM format used to <a href=\"#proxy_ssl_verify\">verify</a> the certificate of the proxied server. </p>\n<div class=\"directive\" id=\"proxy_ssl_name\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_name</strong> <code><i>name</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_name host from proxy_pass;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Allows overriding the server name used to <a href=\"#proxy_ssl_verify\">verify</a> the certificate of the proxied server and to be <a href=\"#proxy_ssl_server_name\">passed through SNI</a> when establishing a connection with the proxied server. </p>\n<p> By default, the host part of the <a href=\"#proxy_pass\">proxy_pass</a> address is used. </p>\n<div class=\"directive\" id=\"proxy_ssl_password_file\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_password_file</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with passphrases for <a href=\"#proxy_ssl_certificate_key\">secret keys</a> where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key. </p>\n<div class=\"directive\" id=\"proxy_ssl_server_name\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_server_name</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_server_name off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables or disables passing of the server name through <a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">TLS Server Name Indication extension</a> (SNI, RFC 6066) when establishing a connection with the proxied server. </p>\n<div class=\"directive\" id=\"proxy_ssl_session_reuse\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_session_reuse</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_session_reuse on;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Determines whether SSL sessions can be reused when working with the proxied server. If the errors “<code>SSL3_GET_FINISHED:digest check failed</code>” appear in the logs, try disabling session reuse. </p>\n<div class=\"directive\" id=\"proxy_ssl_protocols\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_protocols</strong> \n    [<code>SSLv2</code>]\n    [<code>SSLv3</code>]\n    [<code>TLSv1</code>]\n    [<code>TLSv1.1</code>]\n    [<code>TLSv1.2</code>];</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables the specified protocols for connections to a proxied server. </p>\n<div class=\"directive\" id=\"proxy_ssl_trusted_certificate\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_trusted_certificate</strong> <code><i>file</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> — </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Specifies a <code><i>file</i></code> with trusted CA certificates in the PEM format used to <a href=\"#proxy_ssl_verify\">verify</a> the certificate of the proxied server. </p>\n<div class=\"directive\" id=\"proxy_ssl_verify\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_verify</strong> <code>on</code> | <code>off</code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_verify off;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Enables or disables verification of the proxied server certificate. </p>\n<div class=\"directive\" id=\"proxy_ssl_verify_depth\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_ssl_verify_depth</strong> <code><i>number</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_ssl_verify_depth 1;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the verification depth in the proxied server certificates chain. </p>\n<div class=\"directive\" id=\"proxy_timeout\"><table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_timeout</strong> <code><i>timeout</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_timeout 10m;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table></div>\n<p> Sets the <code><i>timeout</i></code> between two successive read or write operations on client or proxied server connections. If no data is transmitted within this time, the connection is closed. </p>\n<div class=\"directive\" id=\"proxy_upload_rate\">\n<table cellspacing=\"0\"> <tr> <th> Syntax: </th> <td> <code><strong>proxy_upload_rate</strong> <code><i>rate</i></code>;</code><br> </td> </tr> <tr> <th> Default: </th> <td> <code>proxy_upload_rate 0;</code> </td> </tr> <tr> <th> Context: </th> <td> <code>stream</code>, <code>server</code><br> </td> </tr> </table>\n<p>This directive appeared in version 1.9.3. </p>\n</div>\n<p> Limits the speed of reading the data from the client. The <code><i>rate</i></code> is specified in bytes per second. The zero value disables rate limiting. The limit is set per a connection, so if the client simultaneously opens two connections, the overall rate will be twice as much as the specified limit. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2002-2016 Igor Sysoev<br>&copy; 2011-2016 Nginx, Inc.<br>Licensed under the BSD License.<br>\n    <a href=\"https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html\" class=\"_attribution-link\">https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html</a>\n  </p>\n</div>\n"}