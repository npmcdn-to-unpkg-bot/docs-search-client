{"index":"<h1>Moment.js</h1>\n<h2 class=\"docs-section-title\" id=\"parsing\">Parse</h2>     <p>Instead of modifying the native <code>Date.prototype</code>, Moment.js creates a wrapper for the <code>Date</code> object. To get this wrapper object, simply call <code>moment()</code> with one of the supported input types.</p> <p>The <code>Moment</code> prototype is exposed through <code>moment.fn</code>. If you want to add your own functions, that is where you would put them.</p> <p>For ease of reference, any method on the <code>Moment.prototype</code> will be referenced in the docs as <code>moment#method</code>. So <code>Moment.prototype.format</code> == <code>moment.fn.format</code> == <code>moment#format</code>.</p>     <h3 class=\"docs-method-title\" id=\"parsing-now\"> Now <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment();\n<span class=\"comment\">// From 2.14.0 onward, also supported</span>\nmoment([]);\nmoment({});</pre>  <p>To get the current date and time, just call <code>moment()</code> with no parameters.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> now = moment();</pre> <p>This is essentially the same as calling <code>moment(new Date())</code>.</p> <p><strong>Note</strong>: From version <strong>2.14.0</strong>, <code>moment([])</code> and <code>moment({})</code> also return now. They used to default to start-of-today before 2.14.0, but that was arbitrary so it was changed.</p>     <h3 class=\"docs-method-title\" id=\"parsing-string\"> String <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment(String);</pre>  <p>When creating a moment from a string, we first check if the string matches known <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> formats, then fall back to <code>new Date(string)</code> if a known format is not found.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> day = moment(<span class=\"string\">\"1995-12-25\"</span>);</pre> <p><strong>Warning:</strong> Browser support for parsing strings <a href=\"http://dygraphs.com/date-formats.html\">is inconsistent</a>. Because there is no specification on which formats should be supported, what works in some browsers will not work in other browsers.</p>  <p>For consistent results parsing anything other than ISO 8601 strings, you should use <a href=\"#/parsing/string-format/\">String + Format</a>.</p> <h4 id=\"supported-iso-8601-strings\">Supported ISO 8601 strings</h4> <p>An ISO 8601 string requires a date part.</p> <pre>2013-02-08  # A calendar date part\n2013-W06-5  # A week date part\n2013-039    # An ordinal date part\n\n20130208    # Basic (short) full date\n2013W065    # Basic (short) week, weekday\n2013W06     # Basic (short) week only\n2013050     # Basic (short) ordinal date</pre> <p>A time part can also be included, separated from the date part by a space or a uppercase T.</p> <pre>2013-02-08T09            # An hour time part separated by a T\n2013-02-08 09            # An hour time part separated by a space\n2013-02-08 09:30         # An hour and minute time part\n2013-02-08 09:30:26      # An hour, minute, and second time part\n2013-02-08 09:30:26.123  # An hour, minute, second, and millisecond time part\n2013-02-08 24:00:00.000  # hour 24, minute, second, millisecond equal 0 means next day at midnight\n\n20130208T080910,123      # Short date and time up to ms, separated by comma\n20130208T080910.123      # Short date and time up to ms\n20130208T080910          # Short date and time up to seconds\n20130208T0809            # Short date and time up to minutes\n20130208T08              # Short date and time, hours only</pre> <p>Any of the date parts can have a time part.</p> <pre>2013-02-08 09  # A calendar date part and hour time part\n2013-W06-5 09  # A week date part and hour time part\n2013-039 09    # An ordinal date part and hour time part</pre> <p>If a time part is included, an offset from UTC can also be included as <code>+-HH:mm</code>, <code>+-HHmm</code>, <code>+-HH</code> or <code>Z</code>.</p> <pre>2013-02-08 09+07:00            # +-HH:mm\n2013-02-08 09-0100             # +-HHmm\n2013-02-08 09Z                 # Z\n2013-02-08 09:30:26.123+07:00  # +-HH:mm\n2013-02-08 09:30:26.123+07     # +-HH</pre> <p><strong>Note:</strong> Automatic cross browser ISO-8601 support was added in version <strong>1.5.0</strong>. Support for the week and ordinal formats was added in version <strong>2.3.0</strong>.</p> <p>If a string does not match any of the above formats and is not able to be parsed with <code>Date.parse</code>, <code>moment#isValid</code> will return false.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">\"not a real date\"</span>).isValid(); <span class=\"comment\">// false</span></pre>     <h3 class=\"docs-method-title\" id=\"parsing-string-format\"> String + Format <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment(String, String);\nmoment(String, String, String);\nmoment(String, String, Boolean);\nmoment(String, String, String, Boolean);</pre>  <p>If you know the format of an input string, you can use that to parse a moment.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">\"12-25-1995\"</span>, <span class=\"string\">\"MM-DD-YYYY\"</span>);</pre> <p>The parser ignores non-alphanumeric characters, so both of the following will return the same thing.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">\"12-25-1995\"</span>, <span class=\"string\">\"MM-DD-YYYY\"</span>);\nmoment(<span class=\"string\">\"12/25/1995\"</span>, <span class=\"string\">\"MM-DD-YYYY\"</span>);</pre> <p>The parsing tokens are similar to the formatting tokens used in <code>moment#format</code>.</p> <h4 id=\"year-month-and-day-tokens\">Year, month, and day tokens</h4> <table> <thead> <tr> <th>Input</th> <th>Example</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><code>YYYY</code></td> <td><code>2014</code></td> <td>4 or 2 digit year</td> </tr> <tr> <td><code>YY</code></td> <td><code>14</code></td> <td>2 digit year</td> </tr> <tr> <td><code>Y</code></td> <td><code>-25</code></td> <td>Year with any number of digits and sign</td> </tr> <tr> <td><code>Q</code></td> <td><code>1..4</code></td> <td>Quarter of year. Sets month to first month in quarter.</td> </tr> <tr> <td><code>M MM</code></td> <td><code>1..12</code></td> <td>Month number</td> </tr> <tr> <td><code>MMM MMMM</code></td> <td><code>Jan..December</code></td> <td>Month name in locale set by <code>moment.locale()</code>\n</td> </tr> <tr> <td><code>D DD</code></td> <td><code>1..31</code></td> <td>Day of month</td> </tr> <tr> <td><code>Do</code></td> <td><code>1st..31st</code></td> <td>Day of month with ordinal</td> </tr> <tr> <td><code>DDD DDDD</code></td> <td><code>1..365</code></td> <td>Day of year</td> </tr> <tr> <td><code>X</code></td> <td><code>1410715640.579</code></td> <td>Unix timestamp</td> </tr> <tr> <td><code>x</code></td> <td><code>1410715640579</code></td> <td>Unix ms timestamp</td> </tr> </tbody> </table> <p><code>YYYY</code> from version <strong>2.10.5</strong> supports 2 digit years, and converts them to a year near 2000 (same as <code>YY</code>).</p> <p><code>Y</code> was added in <strong>2.11.1</strong>. It will match any number, signed or unsigned. It is useful for years that are not 4 digits or are before the common era. It can be used for any year.</p> <h4 id=\"week-year-week-and-weekday-tokens\">Week year, week, and weekday tokens</h4> <p>For these, the lowercase tokens use the locale aware week start days, and the uppercase tokens use the <a href=\"http://en.wikipedia.org/wiki/ISO_week_date\">ISO week date</a> start days.</p> <table> <thead> <tr> <th>Input</th> <th>Example</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><code>gggg</code></td> <td><code>2014</code></td> <td>Locale 4 digit week year</td> </tr> <tr> <td><code>gg</code></td> <td><code>14</code></td> <td>Locale 2 digit week year</td> </tr> <tr> <td><code>w ww</code></td> <td><code>1..53</code></td> <td>Locale week of year</td> </tr> <tr> <td><code>e</code></td> <td><code>0..6</code></td> <td>Locale day of week</td> </tr> <tr> <td><code>ddd dddd</code></td> <td><code>Mon...Sunday</code></td> <td>Day name in locale set by <code>moment.locale()</code>\n</td> </tr> <tr> <td><code>GGGG</code></td> <td><code>2014</code></td> <td>ISO 4 digit week year</td> </tr> <tr> <td><code>GG</code></td> <td><code>14</code></td> <td>ISO 2 digit week year</td> </tr> <tr> <td><code>W WW</code></td> <td><code>1..53</code></td> <td>ISO week of year</td> </tr> <tr> <td><code>E</code></td> <td><code>1..7</code></td> <td>ISO day of week</td> </tr> </tbody> </table> <h4 id=\"hour-minute-second-millisecond-and-offset-tokens\">Hour, minute, second, millisecond, and offset tokens</h4> <table> <thead> <tr> <th>Input</th> <th>Example</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><code>H HH</code></td> <td><code>0..23</code></td> <td>24 hour time</td> </tr> <tr> <td><code>h hh</code></td> <td><code>1..12</code></td> <td>12 hour time used with <code>a A</code>.</td> </tr> <tr> <td><code>a A</code></td> <td><code>am pm</code></td> <td>Post or ante meridiem (Note the one character <code>a p</code> are also considered valid)</td> </tr> <tr> <td><code>m mm</code></td> <td><code>0..59</code></td> <td>Minutes</td> </tr> <tr> <td><code>s ss</code></td> <td><code>0..59</code></td> <td>Seconds</td> </tr> <tr> <td><code>S SS SSS</code></td> <td><code>0..999</code></td> <td>Fractional seconds</td> </tr> <tr> <td><code>Z ZZ</code></td> <td><code>+12:00</code></td> <td>Offset from UTC as <code>+-HH:mm</code>, <code>+-HHmm</code>, or <code>Z</code>\n</td> </tr> </tbody> </table> <p>From version <strong>2.10.5</strong>: fractional second tokens length 4 up to 9 can parse any number of digits, but will only consider the top 3 (milliseconds). Use if you have the time printed with many fractional digits and want to consume the input.</p> <p>Note that the number of <code>S</code> characters provided is only relevant when parsing in strict mode. In standard mode, <code>S</code>, <code>SS</code>, <code>SSS</code>, <code>SSSS</code> are all equivalent, and interpreted as fractions of a second. For example, <code>.12</code> is always 120 milliseconds, passing <code>SS</code> will not cause it to be interpreted as 12 milliseconds.</p> <p>Locale aware date and time formats are also available using <code>LT LTS L LL LLL\nLLLL</code>. They were added in version <strong>2.2.1</strong>, except <code>LTS</code> which was added <strong>2.8.4</strong>.</p> <p><code>Z ZZ</code> were added in version <strong>1.2.0</strong>.</p> <p><code>S SS SSS</code> were added in version <strong>1.6.0</strong>.</p> <p><code>X</code> was added in version <strong>2.0.0</strong>.</p> <p>Unless you specify a time zone offset, parsing a string will create a date in the current time zone.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">\"2010-10-20 4:30\"</span>,       <span class=\"string\">\"YYYY-MM-DD HH:mm\"</span>);   <span class=\"comment\">// parsed as 4:30 local time</span>\nmoment(<span class=\"string\">\"2010-10-20 4:30 +0000\"</span>, <span class=\"string\">\"YYYY-MM-DD HH:mm Z\"</span>); <span class=\"comment\">// parsed as 4:30 UTC</span></pre> <p>If the moment that results from the parsed input does not exist, <code>moment#isValid</code> will return false.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">\"2010 13\"</span>,           <span class=\"string\">\"YYYY MM\"</span>).isValid();     <span class=\"comment\">// false (not a real month)</span>\nmoment(<span class=\"string\">\"2010 11 31\"</span>,        <span class=\"string\">\"YYYY MM DD\"</span>).isValid();  <span class=\"comment\">// false (not a real day)</span>\nmoment(<span class=\"string\">\"2010 2 29\"</span>,         <span class=\"string\">\"YYYY MM DD\"</span>).isValid();  <span class=\"comment\">// false (not a leap year)</span>\nmoment(<span class=\"string\">\"2010 notamonth 29\"</span>, <span class=\"string\">\"YYYY MMM DD\"</span>).isValid(); <span class=\"comment\">// false (not a real month name)</span></pre> <p>As of version <strong>2.0.0</strong>, a locale key can be passed as the third parameter to <code>moment()</code> and <code>moment.utc()</code>.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2012 juillet'</span>, <span class=\"string\">'YYYY MMM'</span>, <span class=\"string\">'fr'</span>);\nmoment(<span class=\"string\">'2012 July'</span>,    <span class=\"string\">'YYYY MMM'</span>, <span class=\"string\">'en'</span>);</pre> <p>Moment's parser is very forgiving, and this can lead to undesired/unexpected behavior.</p> <p>For example, the following behavior can be observed:</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2016 is a date'</span>, <span class=\"string\">'YYYY-MM-DD'</span>).isValid() <span class=\"comment\">//true, 2016 was matched</span></pre> <p>Previous to <strong>2.13.0</strong> the parser exhibited the following behavior. This has been corrected.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'I am spartacus'</span>, <span class=\"string\">'h:hh A'</span>).isValid();     <span class=\"comment\">//true - the 'am' matches the 'A' flag.</span></pre> <p>As of version <strong>2.3.0</strong>, you may specify a boolean for the last argument to make Moment use strict parsing. Strict parsing requires that the format and input match exactly, <em>including delimeters</em>.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'It is 2012-05-25'</span>, <span class=\"string\">'YYYY-MM-DD'</span>).isValid();       <span class=\"comment\">// true</span>\nmoment(<span class=\"string\">'It is 2012-05-25'</span>, <span class=\"string\">'YYYY-MM-DD'</span>, <span class=\"literal\">true</span>).isValid(); <span class=\"comment\">// false</span>\nmoment(<span class=\"string\">'2012-05-25'</span>,       <span class=\"string\">'YYYY-MM-DD'</span>, <span class=\"literal\">true</span>).isValid(); <span class=\"comment\">// true</span>\nmoment(<span class=\"string\">'2012.05.25'</span>,       <span class=\"string\">'YYYY-MM-DD'</span>, <span class=\"literal\">true</span>).isValid(); <span class=\"comment\">// false</span></pre> <p>You can use both locale and strictness.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2012-10-14'</span>, <span class=\"string\">'YYYY-MM-DD'</span>, <span class=\"string\">'fr'</span>, <span class=\"literal\">true</span>);</pre> <p>Strict parsing is frequently the best parsing option. For more information about choosing strict vs forgiving parsing, see the <a href=\"http://momentjs.com/guides/#/parsing/\">parsing guide.</a></p> <h4 id=\"parsing-two-digit-years\">Parsing two digit years</h4> <p>By default, two digit years above 68 are assumed to be in the 1900's and years 68 or below are assumed to be in the 2000's. This can be changed by replacing the <code>moment.parseTwoDigitYear</code> method.</p> <h4 id=\"parsing-glued-hour-and-minutes\">Parsing glued hour and minutes</h4> <p>From version <strong>2.10.7</strong> parsing <code>hmm</code>, <code>Hmm</code>, <code>hmmss</code> and <code>Hmmss</code> is supported:</p> <pre data-language=\"javascript\">moment(<span class=\"string\">\"123\"</span>, <span class=\"string\">\"hmm\"</span>).format(<span class=\"string\">\"HH:mm\"</span>) === <span class=\"string\">\"01:23\"</span>\nmoment(<span class=\"string\">\"1234\"</span>, <span class=\"string\">\"hmm\"</span>).format(<span class=\"string\">\"HH:mm\"</span>) === <span class=\"string\">\"12:34\"</span></pre>     <h3 class=\"docs-method-title\" id=\"parsing-string-formats\"> String + Formats <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment(String, String[], String, Boolean);</pre>  <p>If you don't know the exact format of an input string, but know it could be one of many, you can use an array of formats.</p> <p>This is the same as <a href=\"#/parsing/string-format/\">String + Format</a>, only it will try to match the input to multiple formats.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">\"12-25-1995\"</span>, [<span class=\"string\">\"MM-DD-YYYY\"</span>, <span class=\"string\">\"YYYY-MM-DD\"</span>]);</pre> <p>Starting in version <strong>2.3.0</strong>, Moment uses some simple heuristics to determine which format to use. In order:</p> <ul> <li>Prefer formats resulting in <a href=\"#/parsing/is-valid/\">valid</a> dates over invalid ones.</li> <li>Prefer formats that parse more of the string than less and use more of the format than less, i.e. prefer stricter parsing.</li> <li>Prefer formats earlier in the array than later.</li> </ul> <pre data-language=\"javascript\">moment(<span class=\"string\">\"29-06-1995\"</span>, [<span class=\"string\">\"MM-DD-YYYY\"</span>, <span class=\"string\">\"DD-MM\"</span>, <span class=\"string\">\"DD-MM-YYYY\"</span>]); <span class=\"comment\">// uses the last format</span>\nmoment(<span class=\"string\">\"05-06-1995\"</span>, [<span class=\"string\">\"MM-DD-YYYY\"</span>, <span class=\"string\">\"DD-MM-YYYY\"</span>]);          <span class=\"comment\">// uses the first format</span></pre> <p>You may also specify a locale and strictness argument. They work the same was as they do in the single format case.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">\"29-06-1995\"</span>, [<span class=\"string\">\"MM-DD-YYYY\"</span>, <span class=\"string\">\"DD-MM-YYYY\"</span>], <span class=\"string\">'fr'</span>);       <span class=\"comment\">// uses 'fr' locale</span>\nmoment(<span class=\"string\">\"29-06-1995\"</span>, [<span class=\"string\">\"MM-DD-YYYY\"</span>, <span class=\"string\">\"DD-MM-YYYY\"</span>], <span class=\"literal\">true</span>);       <span class=\"comment\">// uses strict parsing</span>\nmoment(<span class=\"string\">\"05-06-1995\"</span>, [<span class=\"string\">\"MM-DD-YYYY\"</span>, <span class=\"string\">\"DD-MM-YYYY\"</span>], <span class=\"string\">'fr'</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// uses 'fr' locale and strict parsing</span></pre> <p><strong>Note:</strong> Parsing multiple formats is considerably slower than parsing a single format. If you can avoid it, it is much faster to parse a single format.</p>     <h3 class=\"docs-method-title\" id=\"parsing-special-formats\"> Special Formats <span>2.7.0+</span> </h3>    <pre data-language=\"javascript\">moment(String, moment.CUSTOM_FORMAT, [String], [Boolean]);\nmoment(String, [..., moment.ISO_8601, ...], [String], [Boolean]);</pre>  <p><a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO-8601</a> is a standard for time and duration display. Moment already supports parsing iso-8601 strings, but this can be specified explicitly in the format/list of formats when constructing a moment.</p> <p>To specify iso-8601 parsing use <code>moment.ISO_8601</code> constant. More formats will be added in the future.</p> <p>Examples:</p> <pre data-language=\"javascript\">moment(<span class=\"string\">\"2010-01-01T05:06:07\"</span>, moment.ISO_8601);\nmoment(<span class=\"string\">\"2010-01-01T05:06:07\"</span>, [<span class=\"string\">\"YYYY\"</span>, moment.ISO_8601]);</pre>     <h3 class=\"docs-method-title\" id=\"parsing-object\"> Object <span>2.2.1+</span> </h3>    <pre data-language=\"javascript\">moment({unit: value, ...});</pre>  <pre data-language=\"javascript\">moment({ hour:<span class=\"number\">15</span>, minute:<span class=\"number\">10</span> });\nmoment({ y    :<span class=\"number\">2010</span>, M     :<span class=\"number\">3</span>, d   :<span class=\"number\">5</span>, h    :<span class=\"number\">15</span>, m      :<span class=\"number\">10</span>, s      :<span class=\"number\">3</span>, ms          :<span class=\"number\">123</span>});\nmoment({ year :<span class=\"number\">2010</span>, month :<span class=\"number\">3</span>, day :<span class=\"number\">5</span>, hour :<span class=\"number\">15</span>, minute :<span class=\"number\">10</span>, second :<span class=\"number\">3</span>, millisecond :<span class=\"number\">123</span>});\nmoment({ years:<span class=\"number\">2010</span>, months:<span class=\"number\">3</span>, days:<span class=\"number\">5</span>, hours:<span class=\"number\">15</span>, minutes:<span class=\"number\">10</span>, seconds:<span class=\"number\">3</span>, milliseconds:<span class=\"number\">123</span>});\nmoment({ years:<span class=\"number\">2010</span>, months:<span class=\"number\">3</span>, date:<span class=\"number\">5</span>, hours:<span class=\"number\">15</span>, minutes:<span class=\"number\">10</span>, seconds:<span class=\"number\">3</span>, milliseconds:<span class=\"number\">123</span>});\nmoment({ years:<span class=\"string\">'2010'</span>, months:<span class=\"string\">'3'</span>, date:<span class=\"string\">'5'</span>, hours:<span class=\"string\">'15'</span>, minutes:<span class=\"string\">'10'</span>, seconds:<span class=\"string\">'3'</span>, milliseconds:<span class=\"string\">'123'</span>});  <span class=\"comment\">// from 2.10.7</span></pre> <p>You can create a moment by specifying some of the units in an object.</p> <p>Omitted units default to 0 or the current date, month, and year.</p> <p><code>day</code> and <code>date</code> key both mean day-of-the-month.</p> <p><code>date</code> was added in <strong>2.8.4</strong>.</p> <p>String values (as shown on the last line) are supported from version <strong>2.10.7</strong>.</p> <p>Note that like <code>moment(Array)</code> and <code>new Date(year, month, date)</code>, months are 0 indexed.</p>     <h3 class=\"docs-method-title\" id=\"parsing-unix-timestamp-milliseconds\"> Unix Timestamp (milliseconds) <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment(Number);</pre>  <p>Similar to <code>new Date(Number)</code>, you can create a moment by passing an integer value representing the number of <em>milliseconds</em> since the Unix Epoch (Jan 1 1970 12AM UTC).</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> day = moment(<span class=\"number\">1318781876406</span>);</pre> <p><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-time-values-and-time-range\" target=\"_blank\"> Note: ECMAScript calls this a \"Time Value\" </a></p>     <h3 class=\"docs-method-title\" id=\"parsing-unix-timestamp\"> Unix Timestamp (seconds) <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment.unix(Number)</pre>  <p>To create a moment from a Unix timestamp (<em>seconds</em> since the Unix Epoch), use <code>moment.unix(Number)</code>.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> day = moment.unix(<span class=\"number\">1318781876</span>);</pre> <p>This is implemented as <code>moment(timestamp * 1000)</code>, so partial seconds in the input timestamp are included.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> day = moment.unix(<span class=\"number\">1318781876.721</span>);</pre>     <h3 class=\"docs-method-title\" id=\"parsing-date\"> Date <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment(Date);</pre>  <p>You can create a <code>Moment</code> with a pre-existing native Javascript <code>Date</code> object.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> day = <span class=\"keyword\">new</span> Date(<span class=\"number\">2011</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>);\n<span class=\"keyword\">var</span> dayWrapper = moment(day);</pre> <p>This clones the <code>Date</code> object; further changes to the <code>Date</code> won't affect the <code>Moment</code>, and vice-versa.</p>     <h3 class=\"docs-method-title\" id=\"parsing-array\"> Array <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment(Number[]);</pre>  <p>You can create a moment with an array of numbers that mirror the parameters passed to <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\">new Date()</a></p> <p><code>[year, month, day, hour, minute, second, millisecond]</code></p> <pre data-language=\"javascript\">moment([<span class=\"number\">2010</span>, <span class=\"number\">1</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">50</span>, <span class=\"number\">125</span>]); <span class=\"comment\">// February 14th, 3:25:50.125 PM</span></pre> <p>Any value past the year is optional, and will default to the lowest possible number.</p> <pre data-language=\"javascript\">moment([<span class=\"number\">2010</span>]);        <span class=\"comment\">// January 1st</span>\nmoment([<span class=\"number\">2010</span>, <span class=\"number\">6</span>]);     <span class=\"comment\">// July 1st</span>\nmoment([<span class=\"number\">2010</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>]); <span class=\"comment\">// July 10th</span></pre> <p>Construction with an array will create a date in the current time zone. To create a date from an array at UTC, use <code>moment.utc(Number[])</code>.</p> <pre data-language=\"javascript\">moment.utc([<span class=\"number\">2010</span>, <span class=\"number\">1</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">50</span>, <span class=\"number\">125</span>]);</pre> <p><strong>Note:</strong> Because this mirrors the native <code>Date</code> parameters, months, hours, minutes, seconds, and milliseconds are all zero indexed. Years and days of the month are 1 indexed.</p> <p>This is often the cause of frustration, especially with months, so take note!</p> <p>If the date represented by the array does not exist, <code>moment#isValid</code> will return false.</p> <pre data-language=\"javascript\">moment([<span class=\"number\">2010</span>, <span class=\"number\">12</span>]).isValid();     <span class=\"comment\">// false (not a real month)</span>\nmoment([<span class=\"number\">2010</span>, <span class=\"number\">10</span>, <span class=\"number\">31</span>]).isValid(); <span class=\"comment\">// false (not a real day)</span>\nmoment([<span class=\"number\">2010</span>, <span class=\"number\">1</span>, <span class=\"number\">29</span>]).isValid();  <span class=\"comment\">// false (not a leap year)</span></pre>     <h3 class=\"docs-method-title\" id=\"parsing-asp-net-json-date\"> ASP.NET JSON Date <span>1.3.0+</span> </h3>    <pre data-language=\"javascript\">moment(String);</pre>  <p>Microsoft Web API returns JSON dates in proper ISO-8601 format by default, but older ASP.NET technologies may return dates in JSON as <code>/Date(1198908717056)/</code> or <code>/Date(1198908717056-0700)/</code></p> <p>If a string that matches this format is passed in, it will be parsed correctly.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">\"/Date(1198908717056-0700)/\"</span>); <span class=\"comment\">// 2007-12-28T23:11:57.056-07:00</span></pre>     <h3 class=\"docs-method-title\" id=\"parsing-moment-clone\"> Moment Clone <span>1.2.0+</span> </h3>    <pre data-language=\"javascript\">moment(Moment);</pre>  <p>All moments are mutable. If you want a clone of a moment, you can do so implicitly or explicitly.</p> <p>Calling <code>moment()</code> on a moment will clone it.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment([<span class=\"number\">2012</span>]);\n<span class=\"keyword\">var</span> b = moment(a);\na.year(<span class=\"number\">2000</span>);\nb.year(); <span class=\"comment\">// 2012</span></pre> <p>Additionally, you can call <code>moment#clone</code> to clone a moment.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment([<span class=\"number\">2012</span>]);\n<span class=\"keyword\">var</span> b = a.clone();\na.year(<span class=\"number\">2000</span>);\nb.year(); <span class=\"comment\">// 2012</span></pre>     <h3 class=\"docs-method-title\" id=\"parsing-utc\"> UTC <span>1.5.0+</span> </h3>    <pre data-language=\"javascript\">moment.utc();\nmoment.utc(Number);\nmoment.utc(Number[]);\nmoment.utc(String);\nmoment.utc(String, String);\nmoment.utc(String, String[]);\nmoment.utc(String, String, String);\nmoment.utc(Moment);\nmoment.utc(Date);</pre>  <p>By default, moment parses and displays in local time.</p> <p>If you want to parse or display a moment in UTC, you can use <code>moment.utc()</code> instead of <code>moment()</code>.</p> <p>This brings us to an interesting feature of Moment.js. UTC mode.</p> <p>While in UTC mode, all display methods will display in UTC time instead of local time.</p> <pre data-language=\"javascript\">moment().format();     <span class=\"comment\">// 2013-02-04T10:35:24-08:00</span>\nmoment.utc().format(); <span class=\"comment\">// 2013-02-04T18:35:24+00:00</span></pre> <p>Additionally, while in UTC mode, all getters and setters will internally use the <code>Date#getUTC*</code> and <code>Date#setUTC*</code> methods instead of the <code>Date#get*</code> and <code>Date#set*</code> methods.</p> <pre data-language=\"javascript\">moment.utc().seconds(<span class=\"number\">30</span>) === <span class=\"keyword\">new</span> Date().setUTCSeconds(<span class=\"number\">30</span>);\nmoment.utc().seconds()   === <span class=\"keyword\">new</span> Date().getUTCSeconds();</pre> <p>It is important to note that though the displays differ above, they are both the same moment in time.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment();\n<span class=\"keyword\">var</span> b = moment.utc();\na.format();  <span class=\"comment\">// 2013-02-04T10:35:24-08:00</span>\nb.format();  <span class=\"comment\">// 2013-02-04T18:35:24+00:00</span>\na.valueOf(); <span class=\"comment\">// 1360002924000</span>\nb.valueOf(); <span class=\"comment\">// 1360002924000</span></pre> <p>Any moment created with <code>moment.utc()</code> will be in UTC mode, and any moment created with <code>moment()</code> will not.</p> <p>To switch from UTC to local time, you can use <a href=\"#/manipulating/utc/\">moment#utc</a> or <a href=\"#/manipulating/local/\">moment#local</a>.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment.utc([<span class=\"number\">2011</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>]);\na.hours(); <span class=\"comment\">// 8 UTC</span>\na.local();\na.hours(); <span class=\"comment\">// 0 PST</span></pre>     <h3 class=\"docs-method-title\" id=\"parsing-parse-zone\"> parseZone <span>2.3.0+</span> </h3>    <pre data-language=\"javascript\">moment.parseZone(String)</pre>  <p>Moment normally interprets input times as local times (or UTC times if <code>moment.utc()</code> is used). However, often the input string itself contains time zone information. <code>#parseZone</code> parses the time and then sets the zone according to the input string.</p> <pre data-language=\"javascript\">moment.parseZone(<span class=\"string\">\"2013-01-01T00:00:00-13:00\"</span>).utcOffset(); <span class=\"comment\">// -780  (\"-13:00\" in total minutes)</span></pre> <p><code>moment.parseZone</code> is equivalent to parsing the string and using <code>moment#utcOffset</code> to parse the zone.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"2013-01-01T00:00:00-13:00\"</span>;\nmoment(s).utcOffset(s);</pre> <p><strong>Note</strong>: this method only works for a single string argument, not a string and format.</p>     <h3 class=\"docs-method-title\" id=\"parsing-is-valid\"> Validation <span>1.7.0+</span> </h3>    <pre data-language=\"javascript\">moment().isValid();</pre>  <p>Moment applies stricter initialization rules than the <code>Date</code> constructor.</p> <pre data-language=\"javascript\"><span class=\"keyword\">new</span> Date(<span class=\"number\">2013</span>, <span class=\"number\">25</span>, <span class=\"number\">14</span>).toString(); <span class=\"comment\">// \"Sat Feb 14 2015 00:00:00 GMT-0500 (EST)\"</span>\nmoment([<span class=\"number\">2015</span>, <span class=\"number\">25</span>, <span class=\"number\">35</span>]).format();   <span class=\"comment\">// 'Invalid date'</span></pre> <p>You can check whether the Moment considers the date invalid using <code>moment#isValid</code>. You can check the metrics used by <code>#isValid</code> using <code>moment#parsingFlags</code>, which returns an object.</p> <p>The following parsing flags result in an invalid date:</p> <ul> <li>\n<code>overflow</code>: An overflow of a date field, such as a 13th month, a 32nd day of the month (or a 29th of February on non-leap years), a 367th day of the year, etc. <code>overflow</code> contains the index of the invalid unit to match <code>#invalidAt</code> (see below); <code>-1</code> means no overflow.</li> <li>\n<code>invalidMonth</code>: An invalid month name, such as <code>moment('Marbruary', 'MMMM');</code>. Contains the invalid month string itself, or else null.</li> <li>\n<code>empty</code>: An input string that contains nothing parsable, such as <code>moment('this is nonsense');</code>. Boolean.</li> <li>\n<code>nullInput</code>: A <code>null</code> input, like <code>moment(null);</code>. Boolean.</li> <li>\n<code>invalidFormat</code>: An empty list of formats, such as <code>moment('2013-05-25', [])</code>. Boolean.</li> <li>\n<p><code>userInvalidated</code>: A date created explicitly as invalid, such as <code>moment.invalid()</code>. Boolean.</p> <p>In addition to the above, As of <strong>2.13.0</strong> the meridiem and parsedDateParts flags work together to determine date validity.</p> </li> <li>\n<code>meridiem</code>: Indicates what meridiem (AM/PM) was parsed, if any. String.</li> <li>\n<code>parsedDateParts</code>: Returns an array of date parts parsed in descending order - i.e. parsedDateParts[0] === year. If no parts are present, but meridiem has value, date is invalid. Array.</li> </ul> <p>Additionally, if the Moment is parsed in strict mode, these flags must be empty for the Moment to be valid:</p> <ul> <li>\n<code>unusedTokens</code>: array of format substrings not found in the input string</li> <li>\n<code>unusedInput</code>: array of input substrings not matched to the format string</li> </ul> <p><strong>Note:</strong> Moment's concept of validity became more strict and consistent between <strong>2.2</strong> and <strong>2.3</strong>.</p> <p>Additionally, you can use <code>moment#invalidAt</code> to determine which date unit overflowed.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> m = moment(<span class=\"string\">\"2011-10-10T10:20:90\"</span>);\nm.isValid(); <span class=\"comment\">// false</span>\nm.invalidAt(); <span class=\"comment\">// 5 for seconds</span></pre> <p>The return value has the following meaning:</p> <ol> <li>years</li> <li>months</li> <li>days</li> <li>hours</li> <li>minutes</li> <li>seconds</li> <li>milliseconds</li> </ol> <p><strong>Note:</strong> In case of multiple wrong units the first one is returned (because days validity may depend on month, for example).</p> <h1 id=\"invalid-moments\">Invalid Moments</h1> <p>If a moment is invalid, it behaves like a NaN in floating point operations.</p> <p>All of the following produce invalid moments:</p> <ul> <li><code>invalid.add(unit, value)</code></li> <li><code>another.add(invalid)</code></li> <li><code>invalid.clone()</code></li> <li><code>invalid.diff(another)</code></li> <li><code>invalid.endOf(unit)</code></li> <li><code>invalid.max(another)</code></li> <li><code>another.max(invalid)</code></li> <li><code>invalid.min(another)</code></li> <li><code>another.min(invalid)</code></li> <li><code>invalid.set(unit, value)</code></li> <li><code>invalid.startOf(unit)</code></li> <li><code>invalid.subtract(unit, value)</code></li> </ul> <p>The following produce a localized version of <code>'InvalidDate'</code>:</p> <ul> <li>\n<code>invalid.format(anyFmt)</code> results in <code>'Invalid Date'</code> in the current locale</li> <li><code>invalid.from(another)</code></li> <li><code>another.from(invalid)</code></li> <li><code>invalid.fromNow(suffix)</code></li> <li><code>invalid.to(another)</code></li> <li><code>another.to(invalid)</code></li> <li><code>invalid.toNow(suffix)</code></li> <li><code>invalid.toISOString()</code></li> <li><code>invalid.toString()</code></li> </ul> <p>The following return <code>false</code>:</p> <ul> <li><code>invalid.isAfter(another)</code></li> <li><code>another.isAfter(invalid)</code></li> <li><code>invalid.isBefore(another)</code></li> <li><code>another.isBefore(invalid)</code></li> <li><code>invalid.isBetween(another, another)</code></li> <li><code>invalid.isSame(another)</code></li> <li><code>another.isSame(invalid)</code></li> <li><code>invalid.isSameOrAfter(another)</code></li> <li><code>another.isSameOrAfter(invalid)</code></li> <li><code>invalid.isSameOrBefore(another)</code></li> <li><code>another.isSameOrBefore(invalid)</code></li> </ul> <p>And these return <code>null</code> or <code>NaN</code> with some structure:</p> <ul> <li>\n<code>invalid.get(unit)</code> returns null, as all other named getters</li> <li><code>invalid.toArray() === [NaN, NaN, NaN, NaN, NaN, NaN]</code></li> <li>\n<code>invalid.toObject()</code> has all values set to <code>NaN</code>\n</li> <li>\n<code>invalid.toDate()</code> returns an invalid Date object</li> <li>\n<code>invalid.toJSON()</code> returns null</li> <li>\n<code>invalid.unix()</code> returns null</li> <li>\n<code>invalid.valueOf()</code> returns null</li> </ul>     <h3 class=\"docs-method-title\" id=\"parsing-creation-data\"> Creation Data <span>2.10.7+</span> </h3>    <pre data-language=\"javascript\">moment().creationData();</pre>  <p>After a moment object is created, all of the inputs can be accessed with <code>creationData()</code> method:</p>  <pre data-language=\"javascript\">moment(<span class=\"string\">\"2013-01-02\"</span>, <span class=\"string\">\"YYYY-MM-DD\"</span>, <span class=\"literal\">true</span>).creationData() === {\n    input: <span class=\"string\">\"2013-01-02\"</span>,\n    format: <span class=\"string\">\"YYYY-MM-DD\"</span>,\n    locale: Locale obj,\n    isUTC: <span class=\"literal\">false</span>,\n    strict: <span class=\"literal\">true</span>\n}</pre>     <h3 class=\"docs-method-title\" id=\"parsing-defaults\"> Defaults <span>2.2.1+</span> </h3>    <pre data-language=\"javascript\">moment(<span class=\"string\">\"15\"</span>, <span class=\"string\">\"hh\"</span>)</pre>  <p>You can create a moment object specifying only some of the units, and the rest will be defaulted to the current day, month or year, or 0 for hours, minutes, seconds and milliseconds.</p> <p>Defaulting to now, when nothing is passed:</p> <pre data-language=\"javascript\">moment();  <span class=\"comment\">// current date and time</span></pre> <p>Defaulting to today, when only hours, minutes, seconds and milliseconds are passed:</p> <pre data-language=\"javascript\">moment(5, \"HH\");  // today, 5:00:00.000\nmoment({hour: 5});  // today, 5:00:00.000\nmoment({hour: 5, minute: 10});  // today, 5:10.00.000\nmoment({hour: 5, minute: 10, seconds: 20});  // today, 5:10.20.000\nmoment({hour: 5, minute: 10, seconds: 20, milliseconds: 300});  // today, 5:10.20.300</pre> <p>Defaulting to this month and year, when only days and smaller units are passed:</p> <pre data-language=\"javascript\">moment(<span class=\"number\">5</span>, <span class=\"string\">\"DD\"</span>);  <span class=\"comment\">// this month, 5th day-of-month</span>\nmoment(<span class=\"string\">\"4 05:06:07\"</span>, <span class=\"string\">\"DD hh:mm:ss\"</span>);  <span class=\"comment\">// this month, 4th day-of-month, 05:06:07.000</span></pre> <p>Defaulting to this year, if year is not specified:</p> <pre data-language=\"javascript\">moment(<span class=\"number\">3</span>, <span class=\"string\">\"MM\"</span>);  <span class=\"comment\">// this year, 3th month (April)</span>\nmoment(<span class=\"string\">\"Apr 4 05:06:07\"</span>, <span class=\"string\">\"MMM DD hh:mm:ss\"</span>);  <span class=\"comment\">// this year, 5th April, 05:06:07.000</span></pre>     <h2 class=\"docs-section-title\" id=\"get-set\">Get + Set</h2>     <p>Moment.js uses overloaded getters and setters. You may be familiar with this pattern from its use in jQuery.</p> <p>Calling these methods without parameters acts as a getter, and calling them with a parameter acts as a setter.</p> <p>These map to the corresponding function on the native <code>Date</code> object.</p> <pre data-language=\"javascript\">moment().seconds(<span class=\"number\">30</span>) === <span class=\"keyword\">new</span> Date().setSeconds(<span class=\"number\">30</span>);\nmoment().seconds()   === <span class=\"keyword\">new</span> Date().getSeconds();</pre> <p>If you are in <a href=\"#/manipulating/utc/\">UTC mode</a>, they will map to the UTC equivalent.</p> <pre data-language=\"javascript\">moment.utc().seconds(<span class=\"number\">30</span>) === <span class=\"keyword\">new</span> Date().setUTCSeconds(<span class=\"number\">30</span>);\nmoment.utc().seconds()   === <span class=\"keyword\">new</span> Date().getUTCSeconds();</pre> <p>For convenience, both singular and plural method names exist as of version <strong>2.0.0</strong>.</p> <p><strong>Note</strong>: All of these methods mutate the original moment when used as setters.</p>     <h3 class=\"docs-method-title\" id=\"get-set-millisecond\"> Millisecond <span>1.3.0+</span> </h3>    <pre data-language=\"javascript\">moment().millisecond(Number);\nmoment().millisecond(); <span class=\"comment\">// Number</span>\nmoment().milliseconds(Number);\nmoment().milliseconds(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the milliseconds.</p> <p>Accepts numbers from 0 to 999. If the range is exceeded, it will bubble up to the seconds.</p>     <h3 class=\"docs-method-title\" id=\"get-set-second\"> Second <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().second(Number);\nmoment().second(); <span class=\"comment\">// Number</span>\nmoment().seconds(Number);\nmoment().seconds(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the seconds.</p> <p>Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the minutes.</p>     <h3 class=\"docs-method-title\" id=\"get-set-minute\"> Minute <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().minute(Number);\nmoment().minute(); <span class=\"comment\">// Number</span>\nmoment().minutes(Number);\nmoment().minutes(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the minutes.</p> <p>Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the hours.</p>     <h3 class=\"docs-method-title\" id=\"get-set-hour\"> Hour <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().hour(Number);\nmoment().hour(); <span class=\"comment\">// Number</span>\nmoment().hours(Number);\nmoment().hours(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the hour.</p> <p>Accepts numbers from 0 to 23. If the range is exceeded, it will bubble up to the day.</p>     <h3 class=\"docs-method-title\" id=\"get-set-date\"> Date of Month <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().date(Number);\nmoment().date(); <span class=\"comment\">// Number</span>\nmoment().dates(Number);\nmoment().dates(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the day of the month.</p> <p>Accepts numbers from 1 to 31. If the range is exceeded, it will bubble up to the months.</p> <p><strong>Note:</strong> <code>Moment#date</code> is for the date of the month, and <code>Moment#day</code> is for the day of the week.</p> <p><strong>Note:</strong> if you chain multiple actions to construct a date, you should start from a year, then a month, then a day etc. Otherwise you may get unexpected results, like when <code>day=31</code> and current month has only 30 days (the same applies to native JavaScript <code>Date</code> manipulation), the returned date will be 1st of the following month.</p> <p>Bad: <code>moment().date(day).month(month).year(year)</code></p> <p>Good: <code>moment().year(year).month(month).date(day)</code></p>     <h3 class=\"docs-method-title\" id=\"get-set-day\"> Day of Week <span>1.3.0+</span> </h3>    <pre data-language=\"javascript\">moment().day(Number|String);\nmoment().day(); <span class=\"comment\">// Number</span>\nmoment().days(Number|String);\nmoment().days(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the day of the week.</p> <p>This method can be used to set the day of the week, with Sunday as 0 and Saturday as 6.</p> <p>If the range is exceeded, it will bubble up to other weeks.</p> <pre data-language=\"javascript\">moment().day(-<span class=\"number\">7</span>); <span class=\"comment\">// last Sunday (0 - 7)</span>\nmoment().day(<span class=\"number\">7</span>); <span class=\"comment\">// next Sunday (0 + 7)</span>\nmoment().day(<span class=\"number\">10</span>); <span class=\"comment\">// next Wednesday (3 + 7)</span>\nmoment().day(<span class=\"number\">24</span>); <span class=\"comment\">// 3 Wednesdays from now (3 + 7 + 7 + 7)</span></pre> <p><strong>Note:</strong> <code>Moment#date</code> is for the date of the month, and <code>Moment#day</code> is for the day of the week.</p> <p>As of <strong>2.1.0</strong>, a day name is also supported. This is parsed in the moment's current locale.</p> <pre data-language=\"javascript\">moment().day(<span class=\"string\">\"Sunday\"</span>);\nmoment().day(<span class=\"string\">\"Monday\"</span>);</pre>     <h3 class=\"docs-method-title\" id=\"get-set-weekday\"> Day of Week (Locale Aware) <span>2.1.0+</span> </h3>    <pre data-language=\"javascript\">moment().weekday(Number);\nmoment().weekday(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the day of the week according to the locale.</p> <p>If the locale assigns Monday as the first day of the week, <code>moment().weekday(0)</code> will be Monday. If Sunday is the first day of the week, <code>moment().weekday(0)</code> will be Sunday.</p> <p>As with <code>moment#day</code>, if the range is exceeded, it will bubble up to other weeks.</p> <pre data-language=\"javascript\"><span class=\"comment\">// when Monday is the first day of the week</span>\nmoment().weekday(-<span class=\"number\">7</span>); <span class=\"comment\">// last Monday</span>\nmoment().weekday(<span class=\"number\">7</span>); <span class=\"comment\">// next Monday</span>\n<span class=\"comment\">// when Sunday is the first day of the week</span>\nmoment().weekday(-<span class=\"number\">7</span>); <span class=\"comment\">// last Sunday</span>\nmoment().weekday(<span class=\"number\">7</span>); <span class=\"comment\">// next Sunday</span></pre>     <h3 class=\"docs-method-title\" id=\"get-set-iso-weekday\"> ISO Day of Week <span>2.1.0+</span> </h3>    <pre data-language=\"javascript\">moment().isoWeekday(Number);\nmoment().isoWeekday(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the <a href=\"http://en.wikipedia.org/wiki/ISO_week_date\">ISO day of the week</a> with <code>1</code> being Monday and <code>7</code> being Sunday.</p> <pre data-language=\"javascript\">moment().isoWeekday(<span class=\"number\">1</span>); <span class=\"comment\">// Monday</span>\nmoment().isoWeekday(<span class=\"number\">7</span>); <span class=\"comment\">// Sunday</span></pre> <p>A day name is also supported. This is parsed in the moment's current locale.</p> <pre data-language=\"javascript\">moment().isoWeekday(<span class=\"string\">\"Sunday\"</span>);\nmoment().isoWeekday(<span class=\"string\">\"Monday\"</span>);</pre>     <h3 class=\"docs-method-title\" id=\"get-set-day-of-year\"> Day of Year <span>2.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().dayOfYear(Number);\nmoment().dayOfYear(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the day of the year.</p> <p>Accepts numbers from 1 to 366. If the range is exceeded, it will bubble up to the years.</p>     <h3 class=\"docs-method-title\" id=\"get-set-week\"> Week of Year <span>2.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().week(Number);\nmoment().week(); <span class=\"comment\">// Number</span>\nmoment().weeks(Number);\nmoment().weeks(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the week of the year.</p> <p>Because different locales define week of year numbering differently, Moment.js added <code>moment#week</code> to get/set the localized week of the year.</p> <p>The week of the year varies depending on which day is the first day of the week (Sunday, Monday, etc), and which week is the first week of the year.</p> <p>For example, in the United States, Sunday is the first day of the week. The week with January 1st in it is the first week of the year.</p> <p>In France, Monday is the first day of the week, and the week with January 4th is the first week of the year.</p> <p>The output of <code>moment#week</code> will depend on the <a href=\"#/i18n\">locale</a> for that moment.</p> <p>When setting the week of the year, the day of the week is retained.</p>     <h3 class=\"docs-method-title\" id=\"get-set-iso-week\"> Week of Year (ISO) <span>2.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().isoWeek(Number);\nmoment().isoWeek(); <span class=\"comment\">// Number</span>\nmoment().isoWeeks(Number);\nmoment().isoWeeks(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the <a href=\"http://en.wikipedia.org/wiki/ISO_week_date\">ISO week of the year</a>.</p> <p>When setting the week of the year, the day of the week is retained.</p>     <h3 class=\"docs-method-title\" id=\"get-set-month\"> Month <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().month(Number|String);\nmoment().month(); <span class=\"comment\">// Number</span>\nmoment().months(Number|String);\nmoment().months(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the month.</p> <p>Accepts numbers from 0 to 11. If the range is exceeded, it will bubble up to the year.</p> <p><strong>Note</strong>: Months are zero indexed, so January is month 0.</p> <p>As of <strong>2.1.0</strong>, a month name is also supported. This is parsed in the moment's current locale.</p> <pre data-language=\"javascript\">moment().month(<span class=\"string\">\"January\"</span>);\nmoment().month(<span class=\"string\">\"Feb\"</span>);</pre> <p>Before version <strong>2.1.0</strong>, if a moment changed months and the new month did not have enough days to keep the current day of month, it would overflow to the next month.</p> <p>As of version <strong>2.1.0</strong>, this was changed to be clamped to the end of the target month.</p> <pre data-language=\"javascript\"><span class=\"comment\">// before 2.1.0</span>\nmoment([<span class=\"number\">2012</span>, <span class=\"number\">0</span>, <span class=\"number\">31</span>]).month(<span class=\"number\">1</span>).format(<span class=\"string\">\"YYYY-MM-DD\"</span>); <span class=\"comment\">// 2012-03-02</span>\n<span class=\"comment\">// after 2.1.0</span>\nmoment([<span class=\"number\">2012</span>, <span class=\"number\">0</span>, <span class=\"number\">31</span>]).month(<span class=\"number\">1</span>).format(<span class=\"string\">\"YYYY-MM-DD\"</span>); <span class=\"comment\">// 2012-02-29</span></pre>     <h3 class=\"docs-method-title\" id=\"get-set-quarter\"> Quarter <span>2.6.0+</span> </h3>    <pre data-language=\"javascript\">moment().quarter(); <span class=\"comment\">// Number</span>\nmoment().quarter(Number);</pre>  <p>Gets the quarter (1 to 4).</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2013-01-01T00:00:00.000'</span>).quarter() <span class=\"comment\">// 1</span>\nmoment(<span class=\"string\">'2013-04-01T00:00:00.000'</span>).subtract(<span class=\"number\">1</span>, <span class=\"string\">'ms'</span>).quarter() <span class=\"comment\">// 1</span>\nmoment(<span class=\"string\">'2013-04-01T00:00:00.000'</span>).quarter() <span class=\"comment\">// 2</span>\nmoment(<span class=\"string\">'2013-07-01T00:00:00.000'</span>).subtract(<span class=\"number\">1</span>, <span class=\"string\">'ms'</span>).quarter() <span class=\"comment\">// 2</span>\nmoment(<span class=\"string\">'2013-07-01T00:00:00.000'</span>).quarter() <span class=\"comment\">// 3</span>\nmoment(<span class=\"string\">'2013-10-01T00:00:00.000'</span>).subtract(<span class=\"number\">1</span>, <span class=\"string\">'ms'</span>).quarter() <span class=\"comment\">// 3</span>\nmoment(<span class=\"string\">'2013-10-01T00:00:00.000'</span>).quarter() <span class=\"comment\">// 4</span>\nmoment(<span class=\"string\">'2014-01-01T00:00:00.000'</span>).subtract(<span class=\"number\">1</span>, <span class=\"string\">'ms'</span>).quarter() <span class=\"comment\">// 4</span></pre> <p>Sets the quarter (1 to 4).</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2013-01-01T00:00:00.000'</span>).quarter(<span class=\"number\">2</span>) <span class=\"comment\">// '2013-04-01T00:00:00.000'</span>\nmoment(<span class=\"string\">'2013-02-05T05:06:07.000'</span>).quarter(<span class=\"number\">2</span>).format() <span class=\"comment\">// '2013-05-05T05:06:07-07:00'</span></pre>     <h3 class=\"docs-method-title\" id=\"get-set-year\"> Year <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().year(Number);\nmoment().year(); <span class=\"comment\">// Number</span>\nmoment().years(Number);\nmoment().years(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the year.</p> <p>Accepts numbers from -270,000 to 270,000.</p>     <h3 class=\"docs-method-title\" id=\"get-set-week-year\"> Week Year <span>2.1.0+</span> </h3>    <pre data-language=\"javascript\">moment().weekYear(Number);\nmoment().weekYear(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the week-year according to the locale.</p> <p>Because the first day of the first week does not always fall on the first day of the year, sometimes the week-year will differ from the month year.</p> <p>For example, in the US, the week that contains Jan 1 is always the first week. In the US, weeks also start on Sunday. If Jan 1 was a Monday, Dec 31 would belong to the same week as Jan 1, and thus the same week-year as Jan 1. Dec 30 would have a different week-year than Dec 31.</p>     <h3 class=\"docs-method-title\" id=\"get-set-iso-week-year\"> Week Year (ISO) <span>2.1.0+</span> </h3>    <pre data-language=\"javascript\">moment().isoWeekYear(Number);\nmoment().isoWeekYear(); <span class=\"comment\">// Number</span></pre>  <p>Gets or sets the <a href=\"http://en.wikipedia.org/wiki/ISO_week_date\">ISO week-year</a>.</p>     <h3 class=\"docs-method-title\" id=\"get-set-weeks-in-year\"> Weeks In Year <span>2.6.0+</span> </h3>    <pre data-language=\"javascript\">moment().weeksInYear();</pre>  <p>Gets the number of weeks according to locale in the current moment's year.</p>     <h3 class=\"docs-method-title\" id=\"get-set-iso-weeks-in-year\"> Weeks In Year (ISO) <span>2.6.0+</span> </h3>    <pre data-language=\"javascript\">moment().isoWeeksInYear();</pre>  <p>Gets the number of weeks in the current moment's year, according to <a href=\"http://en.wikipedia.org/wiki/ISO_week_date\">ISO weeks</a>.</p>     <h3 class=\"docs-method-title\" id=\"get-set-get\"> Get <span>2.2.1+</span> </h3>    <pre data-language=\"javascript\">moment().get(<span class=\"string\">'year'</span>);\nmoment().get(<span class=\"string\">'month'</span>);  <span class=\"comment\">// 0 to 11</span>\nmoment().get(<span class=\"string\">'date'</span>);\nmoment().get(<span class=\"string\">'hour'</span>);\nmoment().get(<span class=\"string\">'minute'</span>);\nmoment().get(<span class=\"string\">'second'</span>);\nmoment().get(<span class=\"string\">'millisecond'</span>);</pre>  <p>String getter. In general</p> <pre data-language=\"javascript\">moment().get(unit) === moment()[unit]()</pre> <p>Units are case insensitive, and support plural and short forms: year (years, y), month (months, M), date (dates, D), hour (hours, h), minute (minutes, m), second (seconds, s), millisecond (milliseconds, ms).</p>     <h3 class=\"docs-method-title\" id=\"get-set-set\"> Set <span>2.2.1+</span> </h3>    <pre data-language=\"javascript\">moment().set(String, Int);\nmoment().set(Object(String, Int));</pre>  <p>Generic setter, accepting unit as first argument, and value as second:</p> <pre data-language=\"javascript\">moment().set(<span class=\"string\">'year'</span>, <span class=\"number\">2013</span>);\nmoment().set(<span class=\"string\">'month'</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// April</span>\nmoment().set(<span class=\"string\">'date'</span>, <span class=\"number\">1</span>);\nmoment().set(<span class=\"string\">'hour'</span>, <span class=\"number\">13</span>);\nmoment().set(<span class=\"string\">'minute'</span>, <span class=\"number\">20</span>);\nmoment().set(<span class=\"string\">'second'</span>, <span class=\"number\">30</span>);\nmoment().set(<span class=\"string\">'millisecond'</span>, <span class=\"number\">123</span>);\n\nmoment().set({<span class=\"string\">'year'</span>: <span class=\"number\">2013</span>, <span class=\"string\">'month'</span>: <span class=\"number\">3</span>});</pre> <p>Units are case insensitive, and support plural and short forms: year (years, y), month (months, M), date (dates, D), hour (hours, h), minute (minutes, m), second (seconds, s), millisecond (milliseconds, ms).</p> <p>Object parsing was added in <strong>2.9.0</strong></p>     <h3 class=\"docs-method-title\" id=\"get-set-max\"> Maximum <span>2.7.0+</span> </h3>    <pre data-language=\"javascript\">moment.max(Moment[,Moment...]);\nmoment.max(Moment[]);</pre>  <p>Returns the maximum (most distant future) of the given moment instances.</p> <p>For example:</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'day'</span>);\n<span class=\"keyword\">var</span> b = moment().add(<span class=\"number\">1</span>, <span class=\"string\">'day'</span>);\nmoment.max(a, b);  <span class=\"comment\">// b</span>\n\n<span class=\"keyword\">var</span> friends = fetchFriends(); <span class=\"comment\">/* [{name: 'Dan', birthday: '11.12.1977'}, {name: 'Mary', birthday: '11.12.1986'}, {name: 'Stephan', birthday: '11.01.1993'}]*/</span>\n<span class=\"keyword\">var</span> friendsBirthDays = friends.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(friend)</span>{</span>\n    <span class=\"keyword\">return</span> moment(friend.birthday, <span class=\"string\">'DD.MM.YYYY'</span>);\n});\nmoment.max(friendsBirthDays);  <span class=\"comment\">// '11.01.1993'</span></pre> <p>With no arguments the function returns a moment instance with the current time.</p> <p>From version <strong>2.10.5</strong>, if an invalid moment is one of the arguments, the result is an invalid moment.</p> <pre data-language=\"javascript\">moment.max(moment(), moment.invalid()).isValid() === <span class=\"literal\">false</span>\nmoment.max(moment.invalid(), moment()).isValid() === <span class=\"literal\">false</span>\nmoment.max([moment(), moment.invalid()]).isValid() === <span class=\"literal\">false</span>\nmoment.max([moment.invalid(), moment()]).isValid() === <span class=\"literal\">false</span></pre>     <h3 class=\"docs-method-title\" id=\"get-set-min\"> Minimum <span>2.7.0+</span> </h3>    <pre data-language=\"javascript\">moment.min(Moment[,Moment...]);\nmoment.min(Moment[]);</pre>  <p>Returns the minimum (most distant past) of the given moment instances.</p> <p>For example:</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'day'</span>);\n<span class=\"keyword\">var</span> b = moment().add(<span class=\"number\">1</span>, <span class=\"string\">'day'</span>);\nmoment.min(a, b);  <span class=\"comment\">// a</span>\nmoment.min([a, b]); <span class=\"comment\">// a</span></pre> <p>With no arguments the function returns a moment instance with the current time.</p> <p>From version <strong>2.10.5</strong>, if an invalid moment is one of the arguments, the result is an invalid moment.</p> <pre data-language=\"javascript\">moment.min(moment(), moment.invalid()).isValid() === <span class=\"literal\">false</span>\nmoment.min(moment.invalid(), moment()).isValid() === <span class=\"literal\">false</span>\nmoment.min([moment(), moment.invalid()]).isValid() === <span class=\"literal\">false</span>\nmoment.min([moment.invalid(), moment()]).isValid() === <span class=\"literal\">false</span></pre>     <h2 class=\"docs-section-title\" id=\"manipulating\">Manipulate</h2>     <p>Once you have a <code>Moment</code>, you may want to manipulate it in some way. There are a number of methods to help with this.</p> <p>Moment.js uses the <a href=\"http://en.wikipedia.org/wiki/Fluent_interface\">fluent interface pattern</a>, also known as <a href=\"http://en.wikipedia.org/wiki/Method_chaining\">method chaining</a>. This allows you to do crazy things like the following.</p> <pre data-language=\"javascript\">moment().add(<span class=\"number\">7</span>, <span class=\"string\">'days'</span>).subtract(<span class=\"number\">1</span>, <span class=\"string\">'months'</span>).year(<span class=\"number\">2009</span>).hours(<span class=\"number\">0</span>).minutes(<span class=\"number\">0</span>).seconds(<span class=\"number\">0</span>);</pre> <p><strong>Note:</strong> It should be noted that moments are mutable. Calling any of the manipulation methods will change the original moment.</p> <p>If you want to create a copy and manipulate it, you should use <code>moment#clone</code> before manipulating the moment. <a href=\"#/parsing/moment-clone/\">More info on cloning.</a></p>     <h3 class=\"docs-method-title\" id=\"manipulating-add\"> Add <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().add(Number, String);\nmoment().add(Duration);\nmoment().add(Object);</pre>  <p>Mutates the original moment by adding time.</p> <p>This is a pretty robust function for adding time to an existing moment. To add time, pass the key of what time you want to add, and the amount you want to add.</p> <pre data-language=\"javascript\">moment().add(<span class=\"number\">7</span>, <span class=\"string\">'days'</span>);</pre> <p>There are some shorthand keys as well if you're into that whole brevity thing.</p> <pre data-language=\"javascript\">moment().add(<span class=\"number\">7</span>, <span class=\"string\">'d'</span>);</pre> <table class=\"table table-striped table-bordered\"> <tbody> <tr> <th>Key</th> <th>Shorthand</th> </tr> <tr> <td>years</td> <td>y</td> </tr> <tr> <td>quarters</td> <td>Q</td> </tr> <tr> <td>months</td> <td>M</td> </tr> <tr> <td>weeks</td> <td>w</td> </tr> <tr> <td>days</td> <td>d</td> </tr> <tr> <td>hours</td> <td>h</td> </tr> <tr> <td>minutes</td> <td>m</td> </tr> <tr> <td>seconds</td> <td>s</td> </tr> <tr> <td>milliseconds</td> <td>ms</td> </tr> </tbody> </table> <p>If you want to add multiple different keys at the same time, you can pass them in as an object literal.</p> <pre data-language=\"javascript\">moment().add(<span class=\"number\">7</span>, <span class=\"string\">'days'</span>).add(<span class=\"number\">1</span>, <span class=\"string\">'months'</span>); <span class=\"comment\">// with chaining</span>\nmoment().add({days:<span class=\"number\">7</span>,months:<span class=\"number\">1</span>}); <span class=\"comment\">// with object literal</span></pre> <p>There are no upper limits for the amounts, so you can overload any of the parameters.</p> <pre data-language=\"javascript\">moment().add(<span class=\"number\">1000000</span>, <span class=\"string\">'milliseconds'</span>); <span class=\"comment\">// a million milliseconds</span>\nmoment().add(<span class=\"number\">360</span>, <span class=\"string\">'days'</span>); <span class=\"comment\">// 360 days</span></pre> <h4 id=\"special-considerations-for-months-and-years\">Special considerations for months and years</h4> <p>If the day of the month on the original date is greater than the number of days in the final month, the day of the month will change to the last day in the final month.</p> <pre data-language=\"javascript\">moment([<span class=\"number\">2010</span>, <span class=\"number\">0</span>, <span class=\"number\">31</span>]);                  <span class=\"comment\">// January 31</span>\nmoment([<span class=\"number\">2010</span>, <span class=\"number\">0</span>, <span class=\"number\">31</span>]).add(<span class=\"number\">1</span>, <span class=\"string\">'months'</span>); <span class=\"comment\">// February 28</span></pre> <p>There are also special considerations to keep in mind when adding time that crosses over daylight saving time. If you are adding years, months, weeks, or days, the original hour will always match the added hour.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> m = moment(<span class=\"keyword\">new</span> Date(<span class=\"number\">2011</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)); <span class=\"comment\">// the day before DST in the US</span>\nm.hours(); <span class=\"comment\">// 5</span>\nm.add(<span class=\"number\">1</span>, <span class=\"string\">'days'</span>).hours(); <span class=\"comment\">// 5</span></pre> <p>If you are adding hours, minutes, seconds, or milliseconds, the assumption is that you want precision to the hour, and will result in a different hour.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> m = moment(<span class=\"keyword\">new</span> Date(<span class=\"number\">2011</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)); <span class=\"comment\">// the day before DST in the US</span>\nm.hours(); <span class=\"comment\">// 5</span>\nm.add(<span class=\"number\">24</span>, <span class=\"string\">'hours'</span>).hours(); <span class=\"comment\">// 6</span></pre> <p>Alternatively, you can use <a href=\"#/durations/\">durations</a> to add to moments.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> duration = moment.duration({<span class=\"string\">'days'</span> : <span class=\"number\">1</span>});\nmoment([<span class=\"number\">2012</span>, <span class=\"number\">0</span>, <span class=\"number\">31</span>]).add(duration); <span class=\"comment\">// February 1</span></pre> <p>Before version <strong>2.8.0</strong>, the <code>moment#add(String, Number)</code> syntax was also supported. It has been deprecated in favor of <code>moment#add(Number, String)</code>.</p> <pre data-language=\"javascript\">moment().add(<span class=\"string\">'seconds'</span>, <span class=\"number\">1</span>); <span class=\"comment\">// Deprecated in 2.8.0</span>\nmoment().add(<span class=\"number\">1</span>, <span class=\"string\">'seconds'</span>);</pre> <p>As of <strong>2.12.0</strong> when decimal values are passed for days and months, they are rounded to the nearest integer. Weeks, quarters, and years are converted to days or months, and then rounded to the nearest integer.</p> <pre data-language=\"javascript\">moment().add(<span class=\"number\">1.5</span>, <span class=\"string\">'months'</span>) == moment().add(<span class=\"number\">2</span>, <span class=\"string\">'months'</span>)\nmoment().add(<span class=\"number\">.7</span>, <span class=\"string\">'years'</span>) == moment().add(<span class=\"number\">8</span>, <span class=\"string\">'months'</span>) <span class=\"comment\">//.7*12 = 8.4, rounded to 8</span></pre>     <h3 class=\"docs-method-title\" id=\"manipulating-subtract\"> Subtract <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().subtract(Number, String);\nmoment().subtract(Duration);\nmoment().subtract(Object);</pre>  <p>Mutates the original moment by subtracting time.</p> <p>This is exactly the same as <code>moment#add</code>, only instead of adding time, it subtracts time.</p> <pre data-language=\"javascript\">moment().subtract(<span class=\"number\">7</span>, <span class=\"string\">'days'</span>);</pre> <p>Before version <strong>2.8.0</strong>, the <code>moment#subtract(String, Number)</code> syntax was also supported. It has been deprecated in favor of <code>moment#subtract(Number, String)</code>.</p> <pre data-language=\"javascript\">moment().subtract(<span class=\"string\">'seconds'</span>, <span class=\"number\">1</span>); <span class=\"comment\">// Deprecated in 2.8.0</span>\nmoment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'seconds'</span>);</pre> <p>As of <strong>2.12.0</strong> when decimal values are passed for days and months, they are rounded to the nearest integer. Weeks, quarters, and years are converted to days or months, and then rounded to the nearest integer.</p> <pre data-language=\"javascript\">moment().subtract(<span class=\"number\">1.5</span>, <span class=\"string\">'months'</span>) == moment().subtract(<span class=\"number\">2</span>, <span class=\"string\">'months'</span>)\nmoment().subtract(<span class=\"number\">.7</span>, <span class=\"string\">'years'</span>) == moment().subtract(<span class=\"number\">8</span>, <span class=\"string\">'months'</span>) <span class=\"comment\">//.7*12 = 8.4, rounded to 8</span></pre> <p>Note that in order to make the operations <code>moment.add(-.5, 'days')</code> and <code>moment.subtract(.5, 'days')</code> equivalent, -.5, -1.5, -2.5, etc are rounded down.</p>     <h3 class=\"docs-method-title\" id=\"manipulating-start-of\"> Start of Time <span>1.7.0+</span> </h3>    <pre data-language=\"javascript\">moment().startOf(String);</pre>  <p>Mutates the original moment by setting it to the start of a unit of time.</p> <pre data-language=\"javascript\">moment().startOf(<span class=\"string\">'year'</span>);    <span class=\"comment\">// set to January 1st, 12:00 am this year</span>\nmoment().startOf(<span class=\"string\">'month'</span>);   <span class=\"comment\">// set to the first of this month, 12:00 am</span>\nmoment().startOf(<span class=\"string\">'quarter'</span>);  <span class=\"comment\">// set to the beginning of the current quarter, 1st day of months, 12:00 am</span>\nmoment().startOf(<span class=\"string\">'week'</span>);    <span class=\"comment\">// set to the first day of this week, 12:00 am</span>\nmoment().startOf(<span class=\"string\">'isoWeek'</span>); <span class=\"comment\">// set to the first day of this week according to ISO 8601, 12:00 am</span>\nmoment().startOf(<span class=\"string\">'day'</span>);     <span class=\"comment\">// set to 12:00 am today</span>\nmoment().startOf(<span class=\"string\">'date'</span>);     <span class=\"comment\">// set to 12:00 am today</span>\nmoment().startOf(<span class=\"string\">'hour'</span>);    <span class=\"comment\">// set to now, but with 0 mins, 0 secs, and 0 ms</span>\nmoment().startOf(<span class=\"string\">'minute'</span>);  <span class=\"comment\">// set to now, but with 0 seconds and 0 milliseconds</span>\nmoment().startOf(<span class=\"string\">'second'</span>);  <span class=\"comment\">// same as moment().milliseconds(0);</span></pre> <p>These shortcuts are essentially the same as the following.</p> <pre data-language=\"javascript\">moment().startOf(<span class=\"string\">'year'</span>);\nmoment().month(<span class=\"number\">0</span>).date(<span class=\"number\">1</span>).hours(<span class=\"number\">0</span>).minutes(<span class=\"number\">0</span>).seconds(<span class=\"number\">0</span>).milliseconds(<span class=\"number\">0</span>);</pre> <pre data-language=\"javascript\">moment().startOf(<span class=\"string\">'hour'</span>);\nmoment().minutes(<span class=\"number\">0</span>).seconds(<span class=\"number\">0</span>).milliseconds(<span class=\"number\">0</span>)</pre> <p>As of version <strong>2.0.0</strong>, <code>moment#startOf('day')</code> replaced <code>moment#sod</code>.</p> <p><strong>Note:</strong> <code>moment#startOf('week')</code> was added in version <strong>2.0.0</strong>.</p> <p>As of version <strong>2.1.0</strong>, <code>moment#startOf('week')</code> uses the locale aware week start day.</p> <p><strong>Note:</strong> <code>moment#startOf('isoWeek')</code> was added in version <strong>2.2.0</strong>.</p> <p><strong>Note:</strong> <code>moment#startOf('date')</code> was added as an alias for day in <strong>2.13.0</strong></p>     <h3 class=\"docs-method-title\" id=\"manipulating-end-of\"> End of Time <span>1.7.0+</span> </h3>    <pre data-language=\"javascript\">moment().endOf(String);</pre>  <p>Mutates the original moment by setting it to the end of a unit of time.</p> <p>This is the same as <code>moment#startOf</code>, only instead of setting to the start of a unit of time, it sets to the end of a unit of time.</p> <pre data-language=\"javascript\">moment().endOf(<span class=\"string\">\"year\"</span>); <span class=\"comment\">// set the moment to 12-31 23:59:59.999 this year</span></pre> <p>As of version <strong>2.0.0</strong>, <code>moment#endOf('day')</code> replaced <code>moment#eod</code>.</p> <p><strong>Note:</strong> <code>moment#endOf('week')</code> was added in version <strong>2.0.0</strong>.</p> <p>As of version <strong>2.1.0</strong>, <code>moment#endOf('week')</code> uses the locale aware week start day.</p>     <h3 class=\"docs-method-title\" id=\"manipulating-max\"> Maximum <span>From 2.1.0, Deprecated 2.7.0</span> </h3>    <pre data-language=\"javascript\">moment().max(Moment|String|Number|Date|Array);</pre>  <p><strong>NOTE</strong>: This function has been <strong>deprecated</strong> in <strong>2.7.0</strong>. Consider <a href=\"http://momentjs.com/docs/#/get-set/min/\"><code>moment.min</code></a> instead.</p>  <p>Limits the moment to a maximum of another moment value. So <code>a.max(b)</code> is the same as <code>a = moment.min(a, b)</code> (note that <code>max</code> is converted to <code>min</code>).</p> <p>Sometimes, server clocks are not quite in sync with client clocks. This ends up displaying humanized strings such as \"in a few seconds\" rather than \"a few seconds ago\". You can prevent that with <code>moment#max()</code>:</p> <p>This is the counterpart for <code>moment#min</code>.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> momentFromServer = moment(input);\n<span class=\"keyword\">var</span> clampedMoment = momentFromServer.max();</pre> <p>You can pass anything to <code>moment#max</code> that you would pass to <code>moment()</code>.</p> <pre data-language=\"javascript\">moment().max(moment().add(<span class=\"number\">1</span>, <span class=\"string\">'d'</span>));\nmoment().max(<span class=\"string\">\"2013-04-20T20:00:00+0800\"</span>);\nmoment().max(<span class=\"string\">\"Jan 1 2001\"</span>, <span class=\"string\">\"MMM D YYYY\"</span>);\nmoment().max(<span class=\"keyword\">new</span> Date(<span class=\"number\">2012</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>));</pre>     <h3 class=\"docs-method-title\" id=\"manipulating-min\"> Minimum <span>From 2.1.0, Deprecated 2.7.0</span> </h3>    <pre data-language=\"javascript\">moment().min(Moment|String|Number|Date|Array);</pre>  <p><strong>NOTE</strong>: This function has been <strong>deprecated</strong> in <strong>2.7.0</strong>. Consider <a href=\"http://momentjs.com/docs/#/get-set/max/\"><code>moment.max</code></a> instead.</p>  <p>Limits the moment to a minimum of another moment value. So <code>a.min(b)</code> is the same as <code>a = moment.max(a, b)</code> (note that <code>min</code> is converted to <code>max</code>).</p> <p>This is the counterpart for <code>moment#max</code>.</p> <pre data-language=\"javascript\">moment().min(<span class=\"string\">\"2013-04-20T20:00:00+0800\"</span>);</pre> <p>This can be used in conjunction with <code>moment#max</code> to clamp a moment to a range.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> start  = moment().startOf(<span class=\"string\">'week'</span>);\n<span class=\"keyword\">var</span> end    = moment().endOf(<span class=\"string\">'week'</span>);\n<span class=\"keyword\">var</span> actual = moment().min(start).max(end);</pre>     <h3 class=\"docs-method-title\" id=\"manipulating-local\"> Local <span>1.5.0+</span> </h3>    <pre data-language=\"javascript\">moment().local();</pre>  <p>Sets a flag on the original moment to use local time to display a moment instead of the original moment's time.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment.utc([<span class=\"number\">2011</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>]);\na.hours(); <span class=\"comment\">// 8 UTC</span>\na.local();\na.hours(); <span class=\"comment\">// 0 PST</span></pre> <p>Local can also be used to convert out of a fixed offset mode:</p> <pre data-language=\"javascript\">moment.parseZone(<span class=\"string\">'2016-05-03T22:15:01+02:00'</span>).local().format(); <span class=\"comment\">// \"2016-05-03T15:15:01-05:00\"</span></pre> <p>See <a href=\"#/parsing/utc/\">moment.utc()</a> for more information on UTC mode.</p>     <h3 class=\"docs-method-title\" id=\"manipulating-utc\"> UTC <span>1.5.0+</span> </h3>    <pre data-language=\"javascript\">moment().utc();</pre>  <p>Sets a flag on the original moment to use UTC to display a moment instead of the original moment's time.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment([<span class=\"number\">2011</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>]);\na.hours(); <span class=\"comment\">// 8 PST</span>\na.utc();\na.hours(); <span class=\"comment\">// 16 UTC</span></pre> <p>Utc can also be used to convert out of a fixed offset mode:</p> <pre data-language=\"javascript\">moment.parseZone(<span class=\"string\">'2016-05-03T22:15:01+02:00'</span>).utc().format(); <span class=\"comment\">//\"2016-05-03T20:15:01Z\"</span></pre> <p>See <a href=\"#/parsing/utc/\">moment.utc()</a> for more information on UTC mode.</p>     <h3 class=\"docs-method-title\" id=\"manipulating-utc-offset\"> UTC Offset <span>2.9.0++</span> </h3>    <pre data-language=\"javascript\">moment().utcOffset();\nmoment().utcOffset(Number|String);</pre>  <p>Get the utc offset in minutes.</p> <p><strong>NOTE</strong>: Unlike <a href=\"http://momentjs.com/docs/#/manipulating/timezone-offset/\"><code>moment.fn.zone</code></a> this function returns the real offset from UTC, not the reverse offset (as returned by <code>Date.prototype.getTimezoneOffset</code>).</p> <p>Getting the utcOffset of the current object:</p> <pre data-language=\"javascript\">moment().utcOffset(); <span class=\"comment\">// (-240, -120, -60, 0, 60, 120, 240, etc.)</span></pre> <p>Setting the utc offset by supplying minutes. Note that once you set an offset, it's fixed and won't change on its own (i.e there are no DST rules). If you want an actual time zone -- time in a particular location, like <code>America/Los_Angeles</code>, consider <a href=\"http://momentjs.com/timezone/\">moment-timezone</a>.</p> <pre data-language=\"javascript\">moment().utcOffset(<span class=\"number\">120</span>);</pre> <p>If the input is less than <code>16</code> and greater than <code>-16</code>, it will interpret your input as hours instead.</p> <pre data-language=\"javascript\"><span class=\"comment\">// these are equivalent</span>\nmoment().utcOffset(<span class=\"number\">8</span>);  <span class=\"comment\">// set hours offset</span>\nmoment().utcOffset(<span class=\"number\">480</span>);  <span class=\"comment\">// set minutes offset (8 * 60)</span></pre> <p>It is also possible to set the utc offset from a string.</p> <pre data-language=\"javascript\"><span class=\"comment\">// these are equivalent</span>\nmoment().utcOffset(<span class=\"string\">\"+08:00\"</span>);\nmoment().utcOffset(<span class=\"number\">8</span>);\nmoment().utcOffset(<span class=\"number\">480</span>);</pre> <p><code>moment#utcOffset</code> will search the string for the first match of <code>+00:00 +0000\n-00:00 -0000</code>, so you can even pass an ISO8601 formatted string and the moment will be changed to that utc offset.</p> <p>Note that the string is required to start with the <code>+</code> or <code>-</code> character. Passing a string that does not start with <code>+</code> or <code>-</code> will be interpreted as if it were <code>\"+00:00\"</code>.</p> <pre data-language=\"javascript\">moment().utcOffset(<span class=\"string\">\"2013-03-07T07:00:00+08:00\"</span>);</pre>     <h3 class=\"docs-method-title\" id=\"manipulating-timezone-offset\"> Time zone Offset <span>From 1.2.0, deprecated 2.9.0+</span> </h3>    <pre data-language=\"javascript\">moment().zone();\nmoment().zone(Number|String);</pre>  <p><strong>NOTE</strong>: This function has been <strong>deprecated</strong> in <strong>2.9.0</strong>. Consider <a href=\"http://momentjs.com/docs/#/manipulating/utc-offset/\"><code>moment.fn.utcOffset</code></a> instead.</p> <p>Get the time zone offset in minutes.</p> <pre data-language=\"javascript\">moment().zone(); <span class=\"comment\">// (60, 120, 240, etc.)</span></pre> <p>As of version <strong>2.1.0</strong>, it is possible to set the offset by passing in the number of minutes offset from GMT.</p> <pre data-language=\"javascript\">moment().zone(<span class=\"number\">120</span>);</pre> <p>If the input is less than <code>16</code> and greater than <code>-16</code>, it will interpret your input as hours instead.</p> <pre data-language=\"javascript\"><span class=\"comment\">// these are equivalent</span>\nmoment().zone(<span class=\"number\">480</span>);\nmoment().zone(<span class=\"number\">8</span>);</pre> <p>It is also possible to set the zone from a string.</p> <pre data-language=\"javascript\">moment().zone(<span class=\"string\">\"-08:00\"</span>);</pre> <p><code>moment#zone</code> will search the string for the first match of <code>+00:00 +0000 -00:00 -0000</code>, so you can even pass an ISO8601 formatted string and the moment will be changed to that zone.</p> <pre data-language=\"javascript\">moment().zone(<span class=\"string\">\"2013-03-07T07:00:00-08:00\"</span>);</pre>     <h2 class=\"docs-section-title\" id=\"displaying\">Display</h2>     <p>Once parsing and manipulation are done, you need some way to display the moment.</p>     <h3 class=\"docs-method-title\" id=\"displaying-format\"> Format <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().format();\nmoment().format(String);</pre>  <p>This is the most robust display option. It takes a string of tokens and replaces them with their corresponding values.</p> <pre data-language=\"javascript\">moment().format();                                <span class=\"comment\">// \"2014-09-08T08:02:17-05:00\" (ISO 8601)</span>\nmoment().format(<span class=\"string\">\"dddd, MMMM Do YYYY, h:mm:ss a\"</span>); <span class=\"comment\">// \"Sunday, February 14th 2010, 3:25:50 pm\"</span>\nmoment().format(<span class=\"string\">\"ddd, hA\"</span>);                       <span class=\"comment\">// \"Sun, 3PM\"</span>\nmoment(<span class=\"string\">'gibberish'</span>).format(<span class=\"string\">'YYYY MM DD'</span>);         <span class=\"comment\">// \"Invalid date\"</span></pre> <table class=\"table table-striped table-bordered\"> <tbody> <tr> <th></th> <th>Token</th> <th>Output</th> </tr> <tr> <td><b>Month</b></td> <td>M</td> <td>1 2 ... 11 12</td> </tr> <tr> <td></td> <td>Mo</td> <td>1st 2nd ... 11th 12th</td> </tr> <tr> <td></td> <td>MM</td> <td>01 02 ... 11 12</td> </tr> <tr> <td></td> <td>MMM</td> <td>Jan Feb ... Nov Dec</td> </tr> <tr> <td></td> <td>MMMM</td> <td>January February ... November December</td> </tr> <tr> <td><b>Quarter</b></td> <td>Q</td> <td>1 2 3 4</td> </tr> <tr> <td></td> <td>Qo</td> <td>1st 2nd 3rd 4th</td> </tr> <tr> <td><b>Day of Month</b></td> <td>D</td> <td>1 2 ... 30 31</td> </tr> <tr> <td></td> <td>Do</td> <td>1st 2nd ... 30th 31st</td> </tr> <tr> <td></td> <td>DD</td> <td>01 02 ... 30 31</td> </tr> <tr> <td><b>Day of Year</b></td> <td>DDD</td> <td>1 2 ... 364 365</td> </tr> <tr> <td></td> <td>DDDo</td> <td>1st 2nd ... 364th 365th</td> </tr> <tr> <td></td> <td>DDDD</td> <td>001 002 ... 364 365</td> </tr> <tr> <td><b>Day of Week</b></td> <td>d</td> <td>0 1 ... 5 6</td> </tr> <tr> <td></td> <td>do</td> <td>0th 1st ... 5th 6th</td> </tr> <tr> <td></td> <td>dd</td> <td>Su Mo ... Fr Sa</td> </tr> <tr> <td></td> <td>ddd</td> <td>Sun Mon ... Fri Sat</td> </tr> <tr> <td></td> <td>dddd</td> <td>Sunday Monday ... Friday Saturday</td> </tr> <tr> <td><b>Day of Week (Locale)</b></td> <td>e</td> <td>0 1 ... 5 6</td> </tr> <tr> <td><b>Day of Week (ISO)</b></td> <td>E</td> <td>1 2 ... 6 7</td> </tr> <tr> <td><b>Week of Year</b></td> <td>w</td> <td>1 2 ... 52 53</td> </tr> <tr> <td></td> <td>wo</td> <td>1st 2nd ... 52nd 53rd</td> </tr> <tr> <td></td> <td>ww</td> <td>01 02 ... 52 53</td> </tr> <tr> <td><b>Week of Year (ISO)</b></td> <td>W</td> <td>1 2 ... 52 53</td> </tr> <tr> <td></td> <td>Wo</td> <td>1st 2nd ... 52nd 53rd</td> </tr> <tr> <td></td> <td>WW</td> <td>01 02 ... 52 53</td> </tr> <tr> <td><b>Year</b></td> <td>YY</td> <td>70 71 ... 29 30</td> </tr> <tr> <td></td> <td>YYYY</td> <td>1970 1971 ... 2029 2030</td> </tr> <tr> <td></td> <td>Y</td> <td>1970 1971 ... 9999 +10000 +10001 <br> <b>Note:</b> This complies with the ISO 8601 standard for dates past the year 9999 </td> </tr> <tr> <td><b>Week Year</b></td> <td>gg</td> <td>70 71 ... 29 30</td> </tr> <tr> <td></td> <td>gggg</td> <td>1970 1971 ... 2029 2030</td> </tr> <tr> <td><b>Week Year (ISO)</b></td> <td>GG</td> <td>70 71 ... 29 30</td> </tr> <tr> <td></td> <td>GGGG</td> <td>1970 1971 ... 2029 2030</td> </tr> <tr> <td><b>AM/PM</b></td> <td>A</td> <td>AM PM</td> </tr> <tr> <td></td> <td>a</td> <td>am pm</td> </tr> <tr> <td><b>Hour</b></td> <td>H</td> <td>0 1 ... 22 23</td> </tr> <tr> <td></td> <td>HH</td> <td>00 01 ... 22 23</td> </tr> <tr> <td></td> <td>h</td> <td>1 2 ... 11 12</td> </tr> <tr> <td></td> <td>hh</td> <td>01 02 ... 11 12</td> </tr> <tr> <td></td> <td>k</td> <td>1 2 ... 23 24</td> </tr> <tr> <td></td> <td>kk</td> <td>01 02 ... 23 24</td> </tr> <tr> <td><b>Minute</b></td> <td>m</td> <td>0 1 ... 58 59</td> </tr> <tr> <td></td> <td>mm</td> <td>00 01 ... 58 59</td> </tr> <tr> <td><b>Second</b></td> <td>s</td> <td>0 1 ... 58 59</td> </tr> <tr> <td></td> <td>ss</td> <td>00 01 ... 58 59</td> </tr> <tr> <td><b>Fractional Second</b></td> <td>S</td> <td>0 1 ... 8 9</td> </tr> <tr> <td></td> <td>SS</td> <td>00 01 ... 98 99</td> </tr> <tr> <td></td> <td>SSS</td> <td>000 001 ... 998 999</td> </tr> <tr> <td></td> <td>SSSS ... SSSSSSSSS</td> <td>000[0..] 001[0..] ... 998[0..] 999[0..]</td> </tr> <tr> <td><b>Time zone</b></td> <td>z or zz</td> <td> EST CST ... MST PST <br> <b>Note:</b> as of <b>1.6.0</b>, the z/zz format tokens have been deprecated from plain moment objects. <a href=\"https://github.com/moment/moment/issues/162\">Read more about it here.</a> However, they <em>do</em> work if you are using a specific time zone with the moment-timezone addon. </td> </tr> <tr> <td></td> <td>Z</td> <td>-07:00 -06:00 ... +06:00 +07:00</td> </tr> <tr> <td></td> <td>ZZ</td> <td> -0700 -0600 ... +0600 +0700 </td> </tr> <tr> <td><b>Unix Timestamp</b></td> <td>X</td> <td>1360013296</td> </tr> <tr> <td><b>Unix Millisecond Timestamp</b></td> <td>x</td> <td>1360013296123</td> </tr> </tbody> </table> <p><code>Z ZZ</code> were added in <strong>1.2.0</strong>.</p> <p><code>S SS SSS</code> were added in <strong>1.6.0</strong>.</p> <p><code>X</code> was added in <strong>2.0.0</strong>.</p> <p><code>e E gg gggg GG GGGG</code> were added in <strong>2.1.0</strong>.</p> <p><code>x</code> was added in <strong>2.8.4</strong>.</p> <p><code>SSSS</code> to <code>SSSSSSSSS</code> were added in <strong>2.10.5</strong>. They display 3 significant digits and the rest is filled with zeros.</p> <p><code>k</code> and <code>kk</code> were added in <strong>2.13.0</strong>.</p> <h4 id=\"localized-formats\">Localized formats</h4> <p>Because preferred formatting differs based on locale, there are a few tokens that can be used to format a moment based on its locale.</p> <p>There are upper and lower case variations on the same formats. The lowercase version is intended to be the shortened version of its uppercase counterpart.</p> <table class=\"table table-striped table-bordered\"> <tbody> <tr> <td><b>Time</b></td> <td>LT</td> <td>8:30 PM</td> </tr> <tr> <td><b>Time with seconds</b></td> <td>LTS</td> <td>8:30:25 PM</td> </tr> <tr> <td><b>Month numeral, day of month, year</b></td> <td>L</td> <td>09/04/1986</td> </tr> <tr> <td></td> <td>l</td> <td>9/4/1986</td> </tr> <tr> <td><b>Month name, day of month, year</b></td> <td>LL</td> <td>September 4 1986</td> </tr> <tr> <td></td> <td>ll</td> <td>Sep 4 1986</td> </tr> <tr> <td><b>Month name, day of month, year, time</b></td> <td>LLL</td> <td>September 4 1986 8:30 PM</td> </tr> <tr> <td></td> <td>lll</td> <td>Sep 4 1986 8:30 PM</td> </tr> <tr> <td><b>Month name, day of month, day of week, year, time</b></td> <td>LLLL</td> <td>Thursday, September 4 1986 8:30 PM</td> </tr> <tr> <td></td> <td>llll</td> <td>Thu, Sep 4 1986 8:30 PM</td> </tr> </tbody> </table> <p><code>L LL LLL LLLL LT</code> are available in version <strong>1.3.0</strong>. <code>l ll lll llll</code> are available in <strong>2.0.0</strong>. <code>LTS</code> was added in <strong>2.8.4</strong>.</p> <h4 id=\"escaping-characters\">Escaping characters</h4> <p>To escape characters in format strings, you can wrap the characters in square brackets.</p> <pre data-language=\"javascript\">moment().format(<span class=\"string\">'[today] dddd'</span>); <span class=\"comment\">// 'today Sunday'</span></pre> <h4 id=\"similarities-and-differences-with-ldml\">Similarities and differences with LDML</h4> <p><strong>Note:</strong> While these date formats are very similar to LDML date formats, there are a few minor differences regarding day of month, day of year, and day of week.</p> <p>For a breakdown of a few different date formatting tokens across different locales, see <a href=\"https://docs.google.com/spreadsheet/ccc?key=0AtgZluze7WMJdDBOLUZfSFIzenIwOHNjaWZoeGFqbWc&amp;hl=en_US#gid=0\">this chart of date formatting tokens.</a></p> <h4 id=\"formatting-speed\">Formatting speed</h4> <p>To compare Moment.js formatting speed against other libraries, check out <a href=\"http://jsperf.com/date-formatting/8\">this comparison against other libraries</a>.</p> <h4 id=\"other-tokens\">Other tokens</h4> <p>If you are more comfortable working with strftime instead of LDML-like parsing tokens, you can use Ben Oakes' plugin. <a href=\"https://github.com/benjaminoakes/moment-strftime\">benjaminoakes/moment-strftime</a>.</p> <h4 id=\"default-format\">Default format</h4> <p>As of version <strong>1.5.0</strong>, calling <code>moment#format</code> without a format will default to <code>moment.defaultFormat</code>. Out of the box, <code>moment.defaultFormat</code> is the ISO8601 format <code>YYYY-MM-DDTHH:mm:ssZ</code>.</p> <p>As of version <strong>2.13.0</strong>, when in UTC mode, the default format will return <code>Z</code> as the offset, instead of <code>+00:00</code>.</p>     <h3 class=\"docs-method-title\" id=\"displaying-fromnow\"> Time from now <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().fromNow();\nmoment().fromNow(Boolean);</pre>  <p>A common way of displaying time is handled by <code>moment#fromNow</code>. This is sometimes called timeago or relative time.</p> <pre data-language=\"javascript\">moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]).fromNow(); <span class=\"comment\">// 4 years ago</span></pre> <p>If you pass <code>true</code>, you can get the value without the suffix.</p> <pre data-language=\"javascript\">moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]).fromNow();     <span class=\"comment\">// 4 years ago</span>\nmoment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]).fromNow(<span class=\"literal\">true</span>); <span class=\"comment\">// 4 years</span></pre> <p>The base strings are <a href=\"#/customization/relative-time/\">customized by the current locale</a>.</p> <p>The breakdown of which string is displayed for each length of time is outlined in the table below.</p> <table class=\"table table-striped table-bordered\"> <thead> <tr> <th>Range</th> <th>Key</th> <th>Sample Output</th> </tr> </thead> <tbody> <tr> <td>0 to 45 seconds</td> <td>s</td> <td>a few seconds ago</td> </tr> <tr> <td>45 to 90 seconds</td> <td>m</td> <td>a minute ago</td> </tr> <tr> <td>90 seconds to 45 minutes</td> <td>mm</td> <td>2 minutes ago ... 45 minutes ago</td> </tr> <tr> <td>45 to 90 minutes</td> <td>h</td> <td>an hour ago</td> </tr> <tr> <td>90 minutes to 22 hours </td> <td>hh</td> <td>2 hours ago ... 22 hours ago</td> </tr> <tr> <td>22 to 36 hours</td> <td>d</td> <td>a day ago</td> </tr> <tr> <td>36 hours to 25 days</td> <td>dd</td> <td>2 days ago ... 25 days ago</td> </tr> <tr> <td>25 to 45 days</td> <td>M</td> <td>a month ago</td> </tr> <tr> <td>45 to 345 days</td> <td>MM</td> <td>2 months ago ... 11 months ago</td> </tr> <tr> <td>345 to 545 days (1.5 years)</td> <td>y</td> <td>a year ago</td> </tr> <tr> <td>546 days+</td> <td>yy</td> <td>2 years ago ... 20 years ago</td> </tr> </tbody> </table> <p>From version <strong>2.10.3</strong>, if the target moment object is invalid the result is the localized Invalid date string.</p>     <h3 class=\"docs-method-title\" id=\"displaying-from\"> Time from X <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().from(Moment|String|Number|Date|Array);\nmoment().from(Moment|String|Number|Date|Array, Boolean);</pre>  <p>You may want to display a moment in relation to a time other than now. In that case, you can use <code>moment#from</code>.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">28</span>]);\n<span class=\"keyword\">var</span> b = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]);\na.from(b) <span class=\"comment\">// \"a day ago\"</span></pre> <p>The first parameter is anything you can pass to <code>moment()</code> or an actual <code>Moment</code>.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">28</span>]);\n<span class=\"keyword\">var</span> b = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]);\na.from(b);                     <span class=\"comment\">// \"a day ago\"</span>\na.from([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]);         <span class=\"comment\">// \"a day ago\"</span>\na.from(<span class=\"keyword\">new</span> Date(<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>)); <span class=\"comment\">// \"a day ago\"</span>\na.from(<span class=\"string\">\"2007-01-29\"</span>);          <span class=\"comment\">// \"a day ago\"</span></pre> <p>Like <code>moment#fromNow</code>, passing <code>true</code> as the second parameter returns value without the suffix. This is useful wherever you need to have a human readable length of time.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> start = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]);\n<span class=\"keyword\">var</span> end   = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>]);\nend.from(start);       <span class=\"comment\">// \"in 5 days\"</span>\nend.from(start, <span class=\"literal\">true</span>); <span class=\"comment\">// \"5 days\"</span></pre> <p>From version <strong>2.10.3</strong>, if any of the endpoints are invalid the result is the localized Invalid date string.</p>     <h3 class=\"docs-method-title\" id=\"displaying-tonow\"> Time to now <span>2.10.3+</span> </h3>    <pre data-language=\"javascript\">moment().toNow();\nmoment().toNow(Boolean);</pre>  <p>A common way of displaying time is handled by <code>moment#toNow</code>. This is sometimes called timeago or relative time.</p> <p>This is similar to <a href=\"http://momentjs.com/docs/#/displaying/fromnow/\"><code>moment.fromNow</code></a>, but gives the opposite interval: <code>a.fromNow() = - a.toNow()</code>.</p> <p>This is similar to <a href=\"http://momentjs.com/docs/#/displaying/to/\"><code>moment.to</code></a>, but is special-cased for the current time. Use <code>moment.to</code>, if you want to control the two end points of the interval.</p> <pre data-language=\"javascript\">moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]).toNow(); <span class=\"comment\">// in 4 years</span></pre> <p>If you pass <code>true</code>, you can get the value without the prefix.</p> <pre data-language=\"javascript\">moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]).toNow();     <span class=\"comment\">// in 4 years</span>\nmoment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]).toNow(<span class=\"literal\">true</span>); <span class=\"comment\">// 4 years</span></pre> <p>The base strings are <a href=\"#/customization/relative-time/\">customized by the current locale</a>.</p> <p>The breakdown of which string is displayed for each length of time is outlined in the table below.</p> <table class=\"table table-striped table-bordered\"> <thead> <tr> <th>Range</th> <th>Key</th> <th>Sample Output</th> </tr> </thead> <tbody> <tr> <td>0 to 45 seconds</td> <td>s</td> <td>in seconds</td> </tr> <tr> <td>45 to 90 seconds</td> <td>m</td> <td>in a minute</td> </tr> <tr> <td>90 seconds to 45 minutes</td> <td>mm</td> <td>in 2 minutes ... in 45 minutes</td> </tr> <tr> <td>45 to 90 minutes</td> <td>h</td> <td>in an hour</td> </tr> <tr> <td>90 minutes to 22 hours </td> <td>hh</td> <td>in 2 hours ... in 22 hours</td> </tr> <tr> <td>22 to 36 hours</td> <td>d</td> <td>in a day</td> </tr> <tr> <td>36 hours to 25 days</td> <td>dd</td> <td>in 2 days ... in 25 days</td> </tr> <tr> <td>25 to 45 days</td> <td>M</td> <td>in a month</td> </tr> <tr> <td>45 to 345 days</td> <td>MM</td> <td>in 2 months ... in 11 months</td> </tr> <tr> <td>345 to 547 days (1.5 years)</td> <td>y</td> <td>in a year</td> </tr> <tr> <td>548 days+</td> <td>yy</td> <td>in 2 years ... in 20 years</td> </tr> </tbody> </table> <p>From version <strong>2.10.3</strong>, if the target moment object is invalid the result is the localized Invalid date string.</p>     <h3 class=\"docs-method-title\" id=\"displaying-to\"> Time to X <span>2.10.3+</span> </h3>    <pre data-language=\"javascript\">moment().to(Moment|String|Number|Date|Array);\nmoment().to(Moment|String|Number|Date|Array, Boolean);</pre>  <p>You may want to display a moment in relation to a time other than now. In that case, you can use <code>moment#to</code>.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">28</span>]);\n<span class=\"keyword\">var</span> b = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]);\na.to(b) <span class=\"comment\">// \"in a day\"</span></pre> <p>The first parameter is anything you can pass to <code>moment()</code> or an actual <code>Moment</code>.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">28</span>]);\n<span class=\"keyword\">var</span> b = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]);\na.to(b);                     <span class=\"comment\">// \"in a day\"</span>\na.to([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]);         <span class=\"comment\">// \"in a day\"</span>\na.to(<span class=\"keyword\">new</span> Date(<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>)); <span class=\"comment\">// \"in a day\"</span>\na.to(<span class=\"string\">\"2007-01-29\"</span>);          <span class=\"comment\">// \"in a day\"</span></pre> <p>Like <code>moment#toNow</code>, passing <code>true</code> as the second parameter returns value without the suffix. This is useful wherever you need to have a human readable length of time.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> start = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]);\n<span class=\"keyword\">var</span> end   = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>]);\nend.to(start);       <span class=\"comment\">// \"5 days ago\"</span>\nend.to(start, <span class=\"literal\">true</span>); <span class=\"comment\">// \"5 days\"</span></pre> <p>From version <strong>2.10.3</strong>, if any of the endpoints are invalid the result is the localized Invalid date string.</p>     <h3 class=\"docs-method-title\" id=\"displaying-calendar-time\"> Calendar Time <span>1.3.0+</span> </h3>    <pre data-language=\"javascript\">moment().calendar();\nmoment().calendar(referenceTime);\nmoment().calendar(referenceTime, formats);  <span class=\"comment\">// from 2.10.5</span></pre>  <p>Calendar time displays time relative to a given <code>referenceTime</code> (defaults to now), but does so slightly differently than <code>moment#fromNow</code>.</p> <p><code>moment#calendar</code> will format a date with different strings depending on how close to <code>referenceTime</code>'s date (today by default) the date is.</p> <table class=\"table table-striped table-bordered\"> <tr> <td>Last week</td> <td>Last Monday at 2:30 AM</td> </tr> <tr> <td>The day before</td> <td>Yesterday at 2:30 AM</td> </tr> <tr> <td>The same day</td> <td>Today at 2:30 AM</td> </tr> <tr> <td>The next day</td> <td>Tomorrow at 2:30 AM</td> </tr> <tr> <td>The next week</td> <td>Sunday at 2:30 AM</td> </tr> <tr> <td>Everything else</td> <td>7/10/2011</td> </tr> </table> <p>These strings are localized, and <a href=\"#/customization/calendar/\">can be customized</a>.</p> <p>From <strong>2.10.5</strong> moment supports specifying calendar output formats per invocation:</p> <pre data-language=\"javascript\">moment().calendar(<span class=\"literal\">null</span>, {\n    sameDay: <span class=\"string\">'[Today]'</span>,\n    nextDay: <span class=\"string\">'[Tomorrow]'</span>,\n    nextWeek: <span class=\"string\">'dddd'</span>,\n    lastDay: <span class=\"string\">'[Yesterday]'</span>,\n    lastWeek: <span class=\"string\">'[Last] dddd'</span>,\n    sameElse: <span class=\"string\">'DD/MM/YYYY'</span>\n});</pre> <p><code>sameElse</code> is used as the format when the moment is more than a week away from the <code>referenceTime</code></p> <p><strong>Note</strong>: From version <strong>2.14.0</strong> the formats argument to calendar can be a callback that is executed within the moment context with a single argument now:</p> <pre data-language=\"javascript\">moment().calendar(<span class=\"literal\">null</span>, {\n  sameDay: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(now)</span> {</span>\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isBefore(now)) {\n      <span class=\"keyword\">return</span> <span class=\"string\">'[Will Happen Today]'</span>;\n    } <span class=\"keyword\">else</span> {\n      <span class=\"keyword\">return</span> <span class=\"string\">'[Happened Today]'</span>;\n    }\n    <span class=\"comment\">/* ... */</span>\n  }\n});</pre>     <h3 class=\"docs-method-title\" id=\"displaying-difference\"> Difference <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().diff(Moment|String|Number|Date|Array);\nmoment().diff(Moment|String|Number|Date|Array, String);\nmoment().diff(Moment|String|Number|Date|Array, String, Boolean);</pre>  <p>To get the difference in milliseconds, use <code>moment#diff</code> like you would use <code>moment#from</code>.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]);\n<span class=\"keyword\">var</span> b = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">28</span>]);\na.diff(b) <span class=\"comment\">// 86400000</span></pre> <p>To get the difference in another unit of measurement, pass that measurement as the second argument.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">29</span>]);\n<span class=\"keyword\">var</span> b = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>, <span class=\"number\">28</span>]);\na.diff(b, <span class=\"string\">'days'</span>) <span class=\"comment\">// 1</span></pre> <p>The supported measurements are years, months, weeks, days, hours, minutes, and seconds. For ease of development, the singular forms are supported as of <strong>2.0.0</strong>. Units of measurement other than milliseconds are available in version <strong>1.1.1</strong>.</p> <p>By default, <code>moment#diff</code> will return a number rounded towards zero (down for positive, up for negative). If you want a floating point number, pass <code>true</code> as the third argument. Before <strong>2.0.0</strong>, <code>moment#diff</code> returned a number rounded to nearest, not a rounded number rounded towards zero.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment([<span class=\"number\">2008</span>, <span class=\"number\">6</span>]);\n<span class=\"keyword\">var</span> b = moment([<span class=\"number\">2007</span>, <span class=\"number\">0</span>]);\na.diff(b, <span class=\"string\">'years'</span>);       <span class=\"comment\">// 1</span>\na.diff(b, <span class=\"string\">'years'</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// 1.5</span></pre> <p>If the moment is earlier than the moment you are passing to <code>moment.fn.diff</code>, the return value will be negative.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment();\n<span class=\"keyword\">var</span> b = moment().add(<span class=\"number\">1</span>, <span class=\"string\">'seconds'</span>);\na.diff(b) <span class=\"comment\">// -1000</span>\nb.diff(a) <span class=\"comment\">// 1000</span></pre> <p>An easy way to think of this is by replacing <code>.diff(</code> with a minus operator.</p> <pre data-language=\"javascript\">          <span class=\"comment\">// a &lt; b</span>\na.diff(b) <span class=\"comment\">// a - b &lt; 0</span>\nb.diff(a) <span class=\"comment\">// b - a &gt; 0</span></pre> <h4 id=\"month-and-year-diffs\">Month and year diffs</h4> <p><code>moment#diff</code> has some special handling for month and year diffs. It is optimized to ensure that two months with the same date are always a whole number apart.</p> <p>So Jan 15 to Feb 15 should be exactly 1 month.</p> <p>Feb 28 to Mar 28 should be exactly 1 month.</p> <p>Feb 28 2011 to Feb 28 2012 should be exactly 1 year.</p> <p><a href=\"https://github.com/moment/moment/pull/571\">See more discussion on the month and year diffs here</a></p> <p>This change to month and year diffs was made in <strong>2.0.0</strong>. As of version <strong>2.9.0</strong> diff also support quarter unit.</p>     <h3 class=\"docs-method-title\" id=\"displaying-unix-timestamp-milliseconds\"> Unix Timestamp (milliseconds) <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().valueOf();\n+moment();</pre>  <p><code>moment#valueOf</code> simply outputs the number of milliseconds since the Unix Epoch, just like <code>Date#valueOf</code>.</p> <pre data-language=\"javascript\">moment(<span class=\"number\">1318874398806</span>).valueOf(); <span class=\"comment\">// 1318874398806</span>\n+moment(<span class=\"number\">1318874398806</span>); <span class=\"comment\">// 1318874398806</span></pre> <p>To get a Unix timestamp (the number of seconds since the epoch) from a <code>Moment</code>, use <code>moment#unix</code>.</p> <p><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-time-values-and-time-range\" target=\"_blank\"> Note: ECMAScript calls this a \"Time Value\" </a></p>     <h3 class=\"docs-method-title\" id=\"displaying-unix-timestamp\"> Unix Timestamp (seconds) <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment().unix();</pre>  <p><code>moment#unix</code> outputs a Unix timestamp (the number of seconds since the Unix Epoch).</p> <pre data-language=\"javascript\">moment(<span class=\"number\">1318874398806</span>).unix(); <span class=\"comment\">// 1318874398</span></pre> <p>This value is floored to the nearest second, and does not include a milliseconds component.</p>     <h3 class=\"docs-method-title\" id=\"displaying-days-in-month\"> Days in Month <span>1.5.0+</span> </h3>    <pre data-language=\"javascript\">moment().daysInMonth();</pre>  <p>Get the number of days in the current month.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">\"2012-02\"</span>, <span class=\"string\">\"YYYY-MM\"</span>).daysInMonth() <span class=\"comment\">// 29</span>\nmoment(<span class=\"string\">\"2012-01\"</span>, <span class=\"string\">\"YYYY-MM\"</span>).daysInMonth() <span class=\"comment\">// 31</span></pre>     <h3 class=\"docs-method-title\" id=\"displaying-as-javascript-date\"> As Javascript Date <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().toDate();</pre>  <p>To get the native Date object that Moment.js wraps, use <code>moment#toDate</code>.</p> <p>This will return the <code>Date</code> that the moment uses, so any changes to that <code>Date</code> will cause the moment to change. If you want a <code>Date</code> that is a copy, use <code>moment#clone</code> before you use <code>moment#toDate</code>.</p> <p><code>moment#native</code> has been replaced by <code>moment#toDate</code> and has been deprecated as of <strong>1.6.0</strong>.</p>     <h3 class=\"docs-method-title\" id=\"displaying-as-array\"> As Array <span>1.7.0+</span> </h3>    <pre data-language=\"javascript\">moment().toArray();</pre>  <p>This returns an array that mirrors the parameters from <code>new Date()</code>.</p> <pre data-language=\"javascript\">moment().toArray(); <span class=\"comment\">// [2013, 1, 4, 14, 40, 16, 154];</span></pre>     <h3 class=\"docs-method-title\" id=\"displaying-as-json\"> As JSON <span>2.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().toJSON();</pre>  <p>When serializing an object to JSON, if there is a <code>Moment</code> object, it will be represented as an ISO8601 string, adjusted to UTC.</p> <pre data-language=\"javascript\">JSON.stringify({\n    postDate : moment()\n}); <span class=\"comment\">// '{\"postDate\":\"2013-02-04T22:44:30.652Z\"}'</span></pre> <p>If instead you would like an ISO8601 string that reflects the moment's <code>utcOffset()</code>, then you can modify the <code>toJSON</code> function like this:</p> <pre data-language=\"javascript\">moment.fn.toJSON = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> {</span> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.format(); }</pre> <p>This changes the behavior as follows:</p> <pre data-language=\"javascript\">JSON.stringify({\n    postDate : moment()\n}); <span class=\"comment\">// '{\"postDate\":\"2013-02-04T14:44:30-08:00\"}'</span></pre>     <h3 class=\"docs-method-title\" id=\"displaying-as-iso-string\"> As ISO 8601 String <span>2.1.0+</span> </h3>    <pre data-language=\"javascript\">moment().toISOString();</pre>  <p>Formats a string to the ISO8601 standard.</p> <pre data-language=\"javascript\">moment().toISOString() <span class=\"comment\">// 2013-02-04T22:44:30.652Z</span></pre> <p>Note that <code>.toISOString()</code> always returns a timestamp in UTC, even if the moment in question is in local mode. This is done to provide consistency with the specification for native JavaScript Date <code>.toISOString()</code>, as outlined in <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-date.prototype.toisostring\"> the ES2015 specification</a>.</p> <p>From version <strong>2.8.4</strong> the native <code>Date.prototype.toISOString</code> is used if available, for performance reasons.</p>     <h3 class=\"docs-method-title\" id=\"displaying-as-object\"> As Object <span>2.10.5+</span> </h3>    <pre data-language=\"javascript\">moment().toObject();</pre>  <p>This returns an object containing year, month, day-of-month, hour, minute, seconds, milliseconds.</p> <pre data-language=\"javascript\">moment().toObject()  <span class=\"comment\">// {</span>\n                     <span class=\"comment\">//     years: 2015</span>\n                     <span class=\"comment\">//     months: 6</span>\n                     <span class=\"comment\">//     date: 26,</span>\n                     <span class=\"comment\">//     hours: 1,</span>\n                     <span class=\"comment\">//     minutes: 53,</span>\n                     <span class=\"comment\">//     seconds: 14,</span>\n                     <span class=\"comment\">//     milliseconds: 600</span>\n                     <span class=\"comment\">// }</span></pre>     <h3 class=\"docs-method-title\" id=\"displaying-as-string\"> As String <span>2.1.0+</span> </h3>    <pre data-language=\"javascript\">moment().toString();</pre>  <p>Returns an english string in a similar format to JS Date's <code>.toString()</code>.</p> <pre data-language=\"javascript\">moment().toString() <span class=\"comment\">// \"Sat Apr 30 2016 16:59:46 GMT-0500\"</span></pre>     <h2 class=\"docs-section-title\" id=\"query\">Query</h2>         <h3 class=\"docs-method-title\" id=\"query-is-before\"> Is Before <span>2.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().isBefore(Moment|String|Number|Date|Array);\nmoment().isBefore(Moment|String|Number|Date|Array, String);</pre>  <p>Check if a moment is before another moment.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-10-20'</span>).isBefore(<span class=\"string\">'2010-10-21'</span>); <span class=\"comment\">// true</span></pre> <p>If you want to limit the granularity to a unit other than milliseconds, pass the units as the second parameter.</p> <p>As the second parameter determines the precision, and not just a single value to check, using day will check for year, month and day.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-10-20'</span>).isBefore(<span class=\"string\">'2010-12-31'</span>, <span class=\"string\">'year'</span>); <span class=\"comment\">// false</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isBefore(<span class=\"string\">'2011-01-01'</span>, <span class=\"string\">'year'</span>); <span class=\"comment\">// true</span></pre> <p>Like <code>moment#isAfter</code> and <code>moment#isSame</code>, any of the units of time that are supported for <code>moment#startOf</code> are supported for <code>moment#isBefore</code>.</p> <pre data-language=\"javascript\">year month week day hour minute second</pre> <p>If nothing is passed to <code>moment#isBefore</code>, it will default to the current time.</p> <p><em>NOTE</em>: <code>moment().isBefore()</code> has undefined behavior and should not be used! If the code runs fast the initial created moment would be the same as the one created in isBefore to perform the check, so the result would be <code>false</code>. But if the code runs slower it's possible that the moment created in isBefore is measurably after the one created in <code>moment()</code>, so the call would return <code>true</code>.</p>     <h3 class=\"docs-method-title\" id=\"query-is-same\"> Is Same <span>2.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().isSame(Moment|String|Number|Date|Array);\nmoment().isSame(Moment|String|Number|Date|Array, String);</pre>  <p>Check if a moment is the same as another moment.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-10-20'</span>).isSame(<span class=\"string\">'2010-10-20'</span>); <span class=\"comment\">// true</span></pre> <p>If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-10-20'</span>).isSame(<span class=\"string\">'2009-12-31'</span>, <span class=\"string\">'year'</span>);  <span class=\"comment\">// false</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isSame(<span class=\"string\">'2010-01-01'</span>, <span class=\"string\">'year'</span>);  <span class=\"comment\">// true</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isSame(<span class=\"string\">'2010-12-31'</span>, <span class=\"string\">'year'</span>);  <span class=\"comment\">// true</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isSame(<span class=\"string\">'2011-01-01'</span>, <span class=\"string\">'year'</span>);  <span class=\"comment\">// false</span></pre> <p>When including a second parameter, it will match all units equal or larger. Passing in <code>month</code> will check <code>month</code> and <code>year</code>. Passing in <code>day</code> will check <code>day</code>, <code>month</code>, and <code>year</code>.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-01-01'</span>).isSame(<span class=\"string\">'2011-01-01'</span>, <span class=\"string\">'month'</span>); <span class=\"comment\">// false, different year</span>\nmoment(<span class=\"string\">'2010-01-01'</span>).isSame(<span class=\"string\">'2010-02-01'</span>, <span class=\"string\">'day'</span>);   <span class=\"comment\">// false, different month</span></pre> <p>Like <code>moment#isAfter</code> and <code>moment#isBefore</code>, any of the units of time that are supported for <code>moment#startOf</code> are supported for <code>moment#isSame</code>.</p> <pre data-language=\"javascript\">year month week day hour minute second</pre>     <h3 class=\"docs-method-title\" id=\"query-is-after\"> Is After <span>2.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().isAfter(Moment|String|Number|Date|Array);\nmoment().isAfter(Moment|String|Number|Date|Array, String);</pre>  <p>Check if a moment is after another moment.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-10-20'</span>).isAfter(<span class=\"string\">'2010-10-19'</span>); <span class=\"comment\">// true</span></pre> <p>If you want to limit the granularity to a unit other than milliseconds, pass the units as the second parameter.</p> <p>As the second parameter determines the precision, and not just a single value to check, using day will check for year, month and day.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-10-20'</span>).isAfter(<span class=\"string\">'2010-01-01'</span>, <span class=\"string\">'year'</span>); <span class=\"comment\">// false</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isAfter(<span class=\"string\">'2009-12-31'</span>, <span class=\"string\">'year'</span>); <span class=\"comment\">// true</span></pre> <p>Like <code>moment#isSame</code> and <code>moment#isBefore</code>, any of the units of time that are supported for <code>moment#startOf</code> are supported for <code>moment#isAfter</code>.</p> <pre data-language=\"javascript\">year month week day hour minute second</pre> <p>If nothing is passed to <code>moment#isAfter</code>, it will default to the current time.</p> <pre data-language=\"javascript\">moment().isAfter(); <span class=\"comment\">// false</span></pre>     <h3 class=\"docs-method-title\" id=\"query-is-same-or-before\"> Is Same or Before <span>2.10.7+</span> </h3>    <pre data-language=\"javascript\">moment().isSameOrBefore(Moment|String|Number|Date|Array);\nmoment().isSameOrBefore(Moment|String|Number|Date|Array, String);</pre>  <p>Check if a moment is before or the same as another moment.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-10-20'</span>).isSameOrBefore(<span class=\"string\">'2010-10-21'</span>);  <span class=\"comment\">// true</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isSameOrBefore(<span class=\"string\">'2010-10-20'</span>);  <span class=\"comment\">// true</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isSameOrBefore(<span class=\"string\">'2010-10-19'</span>);  <span class=\"comment\">// false</span></pre> <p>If you want to limit the granularity to a unit other than milliseconds, pass the units as the second parameter.</p> <p>As the second parameter determines the precision, and not just a single value to check, using day will check for year, month and day.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-10-20'</span>).isSameOrBefore(<span class=\"string\">'2009-12-31'</span>, <span class=\"string\">'year'</span>); <span class=\"comment\">// false</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isSameOrBefore(<span class=\"string\">'2010-12-31'</span>, <span class=\"string\">'year'</span>); <span class=\"comment\">// true</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isSameOrBefore(<span class=\"string\">'2011-01-01'</span>, <span class=\"string\">'year'</span>); <span class=\"comment\">// true</span></pre> <p>Like <code>moment#isAfter</code> and <code>moment#isSame</code>, any of the units of time that are supported for <code>moment#startOf</code> are supported for <code>moment#isSameOrBefore</code>:</p> <pre data-language=\"javascript\">year month week day hour minute second</pre>     <h3 class=\"docs-method-title\" id=\"query-is-same-or-after\"> Is Same or After <span>2.10.7+</span> </h3>    <pre data-language=\"javascript\">moment().isSameOrAfter(Moment|String|Number|Date|Array);\nmoment().isSameOrAfter(Moment|String|Number|Date|Array, String);</pre>  <p>Check if a moment is after or the same as another moment.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-10-20'</span>).isSameOrAfter(<span class=\"string\">'2010-10-19'</span>); <span class=\"comment\">// true</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isSameOrAfter(<span class=\"string\">'2010-10-20'</span>); <span class=\"comment\">// true</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isSameOrAfter(<span class=\"string\">'2010-10-21'</span>); <span class=\"comment\">// false</span></pre> <p>If you want to limit the granularity to a unit other than milliseconds, pass the units as the second parameter.</p> <p>As the second parameter determines the precision, and not just a single value to check, using day will check for year, month and day.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-10-20'</span>).isSameOrAfter(<span class=\"string\">'2011-12-31'</span>, <span class=\"string\">'year'</span>); <span class=\"comment\">// false</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isSameOrAfter(<span class=\"string\">'2010-01-01'</span>, <span class=\"string\">'year'</span>); <span class=\"comment\">// true</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isSameOrAfter(<span class=\"string\">'2009-12-31'</span>, <span class=\"string\">'year'</span>); <span class=\"comment\">// true</span></pre> <p>Like <code>moment#isSame</code> and <code>moment#isBefore</code>, any of the units of time that are supported for <code>moment#startOf</code> are supported for <code>moment#isSameOrAfter</code>:</p> <pre data-language=\"javascript\">year month week day hour minute second</pre>     <h3 class=\"docs-method-title\" id=\"query-is-between\"> Is Between <span>2.9.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">//From 2.13.0 onward</span>\nmoment().isBetween(moment-like, moment-like);\nmoment().isBetween(moment-like, moment-like, String);\nmoment().isBetween(moment-like, moment-like, String, String);\n<span class=\"comment\">// where moment-like is Moment|String|Number|Date|Array</span>\n\n<span class=\"comment\">//2.9.0 to 2.12.0</span>\nmoment().isBetween(moment-like, moment-like);\nmoment().isBetween(moment-like, moment-like, String);\n<span class=\"comment\">// where moment-like is Moment|String|Number|Date|Array</span></pre>  <p>Check if a moment is between two other moments, optionally looking at unit scale (minutes, hours, days, etc). The match is exclusive.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-10-20'</span>).isBetween(<span class=\"string\">'2010-10-19'</span>, <span class=\"string\">'2010-10-25'</span>); <span class=\"comment\">// true</span></pre> <p>If you want to limit the granularity to a unit other than milliseconds, pass the units as the second parameter.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2010-10-20'</span>).isBetween(<span class=\"string\">'2010-01-01'</span>, <span class=\"string\">'2012-01-01'</span>, <span class=\"string\">'year'</span>); <span class=\"comment\">// false</span>\nmoment(<span class=\"string\">'2010-10-20'</span>).isBetween(<span class=\"string\">'2009-12-31'</span>, <span class=\"string\">'2012-01-01'</span>, <span class=\"string\">'year'</span>); <span class=\"comment\">// true</span></pre> <p>Like <code>moment#isSame</code>, <code>moment#isBefore</code>, <code>moment#isAfter</code> any of the units of time that are supported for <code>moment#startOf</code> are supported for <code>moment#isBetween</code>. Year, month, week, day, hour, minute, and second.</p> <p>Version <strong>2.13.0</strong> introduces inclusivity. A <code>[</code> indicates inclusion of a value. A <code>(</code> indicates exclusion. If the inclusivity parameter is used, both indicators must be passed.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2016-10-30'</span>).isBetween(<span class=\"string\">'2016-10-30'</span>, <span class=\"string\">'2016-12-30'</span>, <span class=\"literal\">null</span>, <span class=\"string\">'()'</span>); <span class=\"comment\">//false</span>\nmoment(<span class=\"string\">'2016-10-30'</span>).isBetween(<span class=\"string\">'2016-10-30'</span>, <span class=\"string\">'2016-12-30'</span>, <span class=\"literal\">null</span>, <span class=\"string\">'[)'</span>); <span class=\"comment\">//true</span>\nmoment(<span class=\"string\">'2016-10-30'</span>).isBetween(<span class=\"string\">'2016-01-01'</span>, <span class=\"string\">'2016-10-30'</span>, <span class=\"literal\">null</span>, <span class=\"string\">'()'</span>); <span class=\"comment\">//false</span>\nmoment(<span class=\"string\">'2016-10-30'</span>).isBetween(<span class=\"string\">'2016-01-01'</span>, <span class=\"string\">'2016-10-30'</span>, <span class=\"literal\">null</span>, <span class=\"string\">'(]'</span>); <span class=\"comment\">//true</span>\nmoment(<span class=\"string\">'2016-10-30'</span>).isBetween(<span class=\"string\">'2016-10-30'</span>, <span class=\"string\">'2016-10-30'</span>, <span class=\"literal\">null</span>, <span class=\"string\">'[]'</span>); <span class=\"comment\">//true</span></pre> <p>Note that in the event that the <code>from</code> and <code>to</code> parameters are the same, but the inclusivity parameters are different, false will preside.</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2016-10-30'</span>).isBetween(<span class=\"string\">'2016-10-30'</span>, <span class=\"string\">'2016-10-30'</span>, <span class=\"literal\">null</span>, <span class=\"string\">'(]'</span>); <span class=\"comment\">//false</span></pre> <p>If the inclusivity parameter is not specified, Moment will default to <code>()</code>.</p>     <h3 class=\"docs-method-title\" id=\"query-is-daylight-saving-time\"> Is Daylight Saving Time <span>1.2.0+</span> </h3>    <pre data-language=\"javascript\">moment().isDST();</pre>  <p><code>moment#isDST</code> checks if the current moment is in daylight saving time.</p> <pre data-language=\"javascript\">moment([<span class=\"number\">2011</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>]).isDST(); <span class=\"comment\">// false, March 12 2011 is not DST</span>\nmoment([<span class=\"number\">2011</span>, <span class=\"number\">2</span>, <span class=\"number\">14</span>]).isDST(); <span class=\"comment\">// true, March 14 2011 is DST</span></pre>     <h3 class=\"docs-method-title\" id=\"query-is-dst-shifted\"> Is DST Shifted <span>From 2.3.0, Deprecated 2.14.0</span> </h3>    <pre data-language=\"javascript\">moment(<span class=\"string\">'2013-03-10 2:30'</span>, <span class=\"string\">'YYYY-MM-DD HH:mm'</span>).isDSTShifted()</pre>  <p><strong>Note</strong>: As of version <strong>2.14.0</strong> this function is <strong>deprecated</strong>. It doesn't give the right answer after modifying the moment object. For more information refert to <a href=\"https://github.com/moment/moment/pull/3160\">moment/3160</a></p> <p>Another important piece of validation is to know if the date has been moved by a DST. For example, in most of the United States:</p> <pre data-language=\"javascript\">moment(<span class=\"string\">'2013-03-10 2:30'</span>, <span class=\"string\">'YYYY-MM-DD HH:mm'</span>).format(); <span class=\"comment\">//=&gt; '2013-03-10T01:30:00-05:00'</span></pre> <p>This is because daylight saving time shifts the time from 2:00 to 3:00, so 2:30 isn't a real time. The resulting time is browser-dependent, either adjusting the time forward or backwards. Use <code>moment#isDSTShifted</code> to test for this condition.</p> <p><strong>Note:</strong> before <strong>2.3.0</strong>, Moment objects in this condition always returned <code>false</code> for <code>moment#isValid</code>; they now return <code>true</code>.</p>     <h3 class=\"docs-method-title\" id=\"query-is-leap-year\"> Is Leap Year <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment().isLeapYear();</pre>  <p><code>moment#isLeapYear</code> returns <code>true</code> if that year is a leap year, and <code>false</code> if it is not.</p> <pre data-language=\"javascript\">moment([<span class=\"number\">2000</span>]).isLeapYear() <span class=\"comment\">// true</span>\nmoment([<span class=\"number\">2001</span>]).isLeapYear() <span class=\"comment\">// false</span>\nmoment([<span class=\"number\">2100</span>]).isLeapYear() <span class=\"comment\">// false</span></pre>     <h3 class=\"docs-method-title\" id=\"query-is-a-moment\"> Is a Moment <span>1.5.0+</span> </h3>    <pre data-language=\"javascript\">moment.isMoment(obj);</pre>  <p>To check if a variable is a moment object, use <code>moment.isMoment()</code>.</p> <pre data-language=\"javascript\">moment.isMoment() <span class=\"comment\">// false</span>\nmoment.isMoment(<span class=\"keyword\">new</span> Date()) <span class=\"comment\">// false</span>\nmoment.isMoment(moment()) <span class=\"comment\">// true</span></pre> <p>From version <strong>2.10.7</strong>, you can also test for a moment object by <code>instanceof</code> operator:</p> <pre data-language=\"javascript\">moment() <span class=\"keyword\">instanceof</span> moment <span class=\"comment\">// true</span></pre>     <h3 class=\"docs-method-title\" id=\"query-is-a-date\"> Is a Date <span>2.9.0+</span> </h3>    <pre data-language=\"javascript\">moment.isDate(obj);</pre>  <p>To check if a variable is a native js Date object, use <code>moment.isDate()</code>.</p> <pre data-language=\"javascript\">moment.isDate(); <span class=\"comment\">// false</span>\nmoment.isDate(<span class=\"keyword\">new</span> Date()); <span class=\"comment\">// true</span>\nmoment.isDate(moment()); <span class=\"comment\">// false</span></pre>     <h2 class=\"docs-section-title\" id=\"i18n\">i18n</h2>     <p>Moment.js has robust support for internationalization.</p> <p>You can load multiple locales and easily switch between them.</p> <p>In addition to assigning a global locale, you can assign a locale to a specific moment.</p>     <h3 class=\"docs-method-title\" id=\"i18n-changing-locale\"> Changing locale globally <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From 2.8.1 onward</span>\nmoment.locale(String);\nmoment.locale(String[]);\nmoment.locale(String, Object);\n\n<span class=\"comment\">// Deprecated in 2.8.1</span>\nmoment.lang(String);\nmoment.lang(String[]);\nmoment.lang(String, Object);</pre>  <p>By default, Moment.js comes with English locale strings. If you need other locales, you can load them into Moment.js for later use.</p> <p>To load a locale, pass the key and the string values to <code>moment.locale</code>.</p> <p>More details on each of the parts of the locale bundle can be found in the <a href=\"#/customization/\">customization</a> section.</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'fr'</span>, {\n    months : <span class=\"string\">\"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre\"</span>.split(<span class=\"string\">\"_\"</span>),\n    monthsShort : <span class=\"string\">\"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.\"</span>.split(<span class=\"string\">\"_\"</span>),\n    weekdays : <span class=\"string\">\"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi\"</span>.split(<span class=\"string\">\"_\"</span>),\n    weekdaysShort : <span class=\"string\">\"dim._lun._mar._mer._jeu._ven._sam.\"</span>.split(<span class=\"string\">\"_\"</span>),\n    weekdaysMin : <span class=\"string\">\"Di_Lu_Ma_Me_Je_Ve_Sa\"</span>.split(<span class=\"string\">\"_\"</span>),\n    longDateFormat : {\n        LT : <span class=\"string\">\"HH:mm\"</span>,\n        LTS : <span class=\"string\">\"HH:mm:ss\"</span>,\n        L : <span class=\"string\">\"DD/MM/YYYY\"</span>,\n        LL : <span class=\"string\">\"D MMMM YYYY\"</span>,\n        LLL : <span class=\"string\">\"D MMMM YYYY LT\"</span>,\n        LLLL : <span class=\"string\">\"dddd D MMMM YYYY LT\"</span>\n    },\n    calendar : {\n        sameDay: <span class=\"string\">\"[Aujourd'hui à] LT\"</span>,\n        nextDay: <span class=\"string\">'[Demain à] LT'</span>,\n        nextWeek: <span class=\"string\">'dddd [à] LT'</span>,\n        lastDay: <span class=\"string\">'[Hier à] LT'</span>,\n        lastWeek: <span class=\"string\">'dddd [dernier à] LT'</span>,\n        sameElse: <span class=\"string\">'L'</span>\n    },\n    relativeTime : {\n        future : <span class=\"string\">\"dans %s\"</span>,\n        past : <span class=\"string\">\"il y a %s\"</span>,\n        s : <span class=\"string\">\"quelques secondes\"</span>,\n        m : <span class=\"string\">\"une minute\"</span>,\n        mm : <span class=\"string\">\"%d minutes\"</span>,\n        h : <span class=\"string\">\"une heure\"</span>,\n        hh : <span class=\"string\">\"%d heures\"</span>,\n        d : <span class=\"string\">\"un jour\"</span>,\n        dd : <span class=\"string\">\"%d jours\"</span>,\n        M : <span class=\"string\">\"un mois\"</span>,\n        MM : <span class=\"string\">\"%d mois\"</span>,\n        y : <span class=\"string\">\"une année\"</span>,\n        yy : <span class=\"string\">\"%d années\"</span>\n    },\n    ordinalParse : <span class=\"regexp\">/\\d{1,2}(er|ème)/</span>,\n    ordinal : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(number)</span> {</span>\n        <span class=\"keyword\">return</span> number + (number === <span class=\"number\">1</span> ? <span class=\"string\">'er'</span> : <span class=\"string\">'ème'</span>);\n    },\n    meridiemParse: <span class=\"regexp\">/PD|MD/</span>,\n    isPM: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(input)</span> {</span>\n        <span class=\"keyword\">return</span> input.charAt(<span class=\"number\">0</span>) === <span class=\"string\">'M'</span>;\n    },\n    <span class=\"comment\">// in case the meridiem units are not separated around 12, then implement</span>\n    <span class=\"comment\">// this function (look at locale/id.js for an example)</span>\n    <span class=\"comment\">// meridiemHour : function (hour, meridiem) {</span>\n    <span class=\"comment\">//     return /* 0-23 hour, given meridiem token and hour 1-12 */</span>\n    <span class=\"comment\">// },</span>\n    meridiem : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(hours, minutes, isLower)</span> {</span>\n        <span class=\"keyword\">return</span> hours &lt; <span class=\"number\">12</span> ? <span class=\"string\">'PD'</span> : <span class=\"string\">'MD'</span>;\n    },\n    week : {\n        dow : <span class=\"number\">1</span>, <span class=\"comment\">// Monday is the first day of the week.</span>\n        doy : <span class=\"number\">4</span>  <span class=\"comment\">// The week that contains Jan 4th is the first week of the year.</span>\n    }\n});</pre> <p>Once you load a locale, it becomes the active locale. To change active locales, simply call <code>moment.locale</code> with the key of a loaded locale.</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'fr'</span>);\nmoment(<span class=\"number\">1316116057189</span>).fromNow() <span class=\"comment\">// il y a une heure</span>\nmoment.locale(<span class=\"string\">'en'</span>);\nmoment(<span class=\"number\">1316116057189</span>).fromNow() <span class=\"comment\">// an hour ago</span></pre> <p>As of <strong>2.8.0</strong>, changing the global locale doesn't affect existing instances.</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'fr'</span>);\n<span class=\"keyword\">var</span> m = moment(<span class=\"number\">1316116057189</span>);\nm.fromNow(); <span class=\"comment\">// il y a une heure</span>\n\nmoment.locale(<span class=\"string\">'en'</span>);\nm.fromNow(); <span class=\"comment\">// il y a une heure</span>\nmoment(<span class=\"number\">1316116057189</span>).fromNow(); <span class=\"comment\">// an hour ago</span></pre> <p><code>moment.locale</code> returns the locale used. This is useful because Moment won't change locales if it doesn't know the one you specify.</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'fr'</span>); <span class=\"comment\">// 'fr'</span>\nmoment.locale(<span class=\"string\">'tq'</span>); <span class=\"comment\">// 'fr'</span></pre> <p>You may also specify a list of locales, and Moment will use the first one it has localizations for.</p> <pre data-language=\"javascript\">moment.locale([<span class=\"string\">'tq'</span>, <span class=\"string\">'fr'</span>]); <span class=\"comment\">// 'fr'</span></pre> <p>Moment will also try locale specifier substrings from most-specific to least-specific until it finds a locale it knows. This is useful when supplying Moment with a locale string pulled from the user's environment, such as <code>window.navigator.language</code>.</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'en-NZ'</span>); <span class=\"comment\">// 'en'</span></pre> <p>Finally, Moment will search intelligently through an array of locales and their substrings.</p> <pre data-language=\"javascript\">moment.locale([<span class=\"string\">'en-NZ'</span>, <span class=\"string\">'en-AU'</span>]); <span class=\"comment\">// 'en-au', not 'en'</span></pre>     <h3 class=\"docs-method-title\" id=\"i18n-instance-locale\"> Changing locales locally <span>1.7.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From version 2.8.1 onward</span>\nmoment().locale(String);\n\n<span class=\"comment\">// Deprecated version 2.8.1</span>\nmoment().lang(String);</pre>  <p>A global locale configuration can be problematic when passing around moments that may need to be formatted into different locale.</p> <p>In <strong>1.7.0</strong> we added instance specific locale configurations.</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'en'</span>); <span class=\"comment\">// default the locale to English</span>\n<span class=\"keyword\">var</span> localLocale = moment();\n\nlocalLocale.locale(<span class=\"string\">'fr'</span>); <span class=\"comment\">// set this instance to use French</span>\nlocalLocale.format(<span class=\"string\">'LLLL'</span>); <span class=\"comment\">// dimanche 15 juillet 2012 11:01</span>\nmoment().format(<span class=\"string\">'LLLL'</span>); <span class=\"comment\">// Sunday, July 15 2012 11:01 AM</span>\n\nmoment.locale(<span class=\"string\">'es'</span>); <span class=\"comment\">// change the global locale to Spanish</span>\nlocalLocale.format(<span class=\"string\">'LLLL'</span>); <span class=\"comment\">// dimanche 15 juillet 2012 11:01</span>\nmoment().format(<span class=\"string\">'LLLL'</span>); <span class=\"comment\">// Domingo 15 Julio 2012 11:01</span>\n\nlocalLocale.locale(<span class=\"literal\">false</span>); <span class=\"comment\">// reset the instance locale</span>\nlocalLocale.format(<span class=\"string\">'LLLL'</span>); <span class=\"comment\">// Domingo 15 Julio 2012 11:01</span>\nmoment().format(<span class=\"string\">'LLLL'</span>); <span class=\"comment\">// Domingo 15 Julio 2012 11:01</span></pre> <p>If you call <code>moment#locale</code> with no parameters, you get back the locale configuration that would be used for that moment.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> fr = moment().locale(<span class=\"string\">'fr'</span>);\nfr.localeData().months(moment([<span class=\"number\">2012</span>, <span class=\"number\">0</span>])) <span class=\"comment\">// \"janvier\"</span>\nfr.locale(<span class=\"string\">'en'</span>);\nfr.localeData().months(moment([<span class=\"number\">2012</span>, <span class=\"number\">0</span>])) <span class=\"comment\">// \"January\"</span></pre> <p>If you need to access the locale data for a moment, this is the preferred way to do so.</p> <p>As of <strong>2.3.0</strong>, you can also specify an array of locale identifiers. It works the same was it does in the <a href=\"#/i18n/changing-locale/\">global locale configuration</a>.</p>     <h3 class=\"docs-method-title\" id=\"i18n-loading-into-nodejs\"> Loading locales in NodeJS <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\">moment.locale(String);</pre>  <p>Loading locales in NodeJS is super easy. If there is a locale file in <code>moment-root/locale/</code> named after that key, the first call to <code>moment.locale</code> will load it.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> moment = require(<span class=\"string\">'moment'</span>);\nmoment.locale(<span class=\"string\">'fr'</span>);\nmoment(<span class=\"number\">1316116057189</span>).fromNow(); <span class=\"comment\">// il y a une heure</span></pre> <p>If you want your locale supported, create a pull request to the <code>develop</code> branch with the <a href=\"#/i18n/adding-locale/\">required locale and unit test files</a>.</p>     <h3 class=\"docs-method-title\" id=\"i18n-loading-into-browser\"> Loading locales in the browser <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From 2.8.1 onward</span>\nmoment.locale(String, Object);\n\n<span class=\"comment\">// Deprecated in 2.8.1</span>\nmoment.lang(String, Object);</pre>  <p>Loading locales in the browser just requires you to include the locale files.</p> <pre data-language=\"html\">&lt;script src=\"moment.js\"&gt;&lt;/script&gt;\n&lt;script src=\"locale/fr.js\"&gt;&lt;/script&gt;\n&lt;script src=\"locale/pt.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  moment.locale('fr');  // Set the default/global locale\n  // ...\n&lt;/script&gt;</pre> <p>There are minified versions of all locales together:</p> <pre data-language=\"html\">&lt;script src=\"moment.js\"&gt;&lt;/script&gt;\n&lt;script src=\"min/locales.js\"&gt;&lt;/script&gt;</pre> <p>To minimize http requests, use our Grunt task to compile <a href=\"https://github.com/moment/moment/\">Moment</a> with a custom list of locales:</p> <pre data-language=\"javascript\">grunt transpile:fr,it</pre> <pre data-language=\"html\">&lt;script src=\"min/moment-with-locales.custom.js\"&gt;&lt;/script&gt;</pre> <p><strong>Note:</strong> Locale files are defined in <a href=\"https://github.com/umdjs/umd\">UMD</a> style, so they should work seamlessly in all environments.</p>     <h3 class=\"docs-method-title\" id=\"i18n-adding-locale\"> Adding your locale to Moment.js </h3>   <p>To add your locale to Moment.js, submit a pull request with both a locale file and a test file. You can find examples in <code>moment/locale/fr.js</code> and <code>moment/test/locale/fr.js</code>.</p> <p>To run the tests in Node.js, do <code>npm install</code>, then <code>grunt</code>.</p> <p>If all the tests pass, submit a pull request, and thank you for contributing!</p>     <h3 class=\"docs-method-title\" id=\"i18n-getting-locale\"> Checking the current Moment.js locale <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From version 2.8.1 onward</span>\nmoment.locale();\n\n<span class=\"comment\">// Deprecated in version 2.8.1</span>\nmoment.lang();</pre>  <p>If you are changing locales frequently, you may want to know what locale is currently being used. This is as simple as calling <code>moment.locale</code> without any parameters.</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'en'</span>); <span class=\"comment\">// set to english</span>\nmoment.locale(); <span class=\"comment\">// returns 'en'</span>\nmoment.locale(<span class=\"string\">'fr'</span>); <span class=\"comment\">// set to french</span>\nmoment.locale(); <span class=\"comment\">// returns 'fr'</span></pre> <p>As of version <strong>2.12.0</strong> it is possible to list all locales that have been loaded and are available to use:</p> <pre data-language=\"javascript\">moment.locales()</pre>     <h3 class=\"docs-method-title\" id=\"i18n-listing-months-weekdays\"> Listing the months and weekdays of the current Moment.js locale <span>2.3.0+</span> </h3>    <pre data-language=\"javascript\">moment.months()\nmoment.monthsShort()\nmoment.weekdays()\nmoment.weekdaysShort()\nmoment.weekdaysMin()</pre>  <p>It is sometimes useful to get the list of months or weekdays in a locale, for example when populating a dropdown menu.</p> <pre data-language=\"javascript\">moment.months();</pre> <p>Returns the list of months in the current locale.</p> <pre data-language=\"javascript\">[ <span class=\"string\">'January'</span>,\n  <span class=\"string\">'February'</span>,\n  <span class=\"string\">'March'</span>,\n  <span class=\"string\">'April'</span>,\n  <span class=\"string\">'May'</span>,\n  <span class=\"string\">'June'</span>,\n  <span class=\"string\">'July'</span>,\n  <span class=\"string\">'August'</span>,\n  <span class=\"string\">'September'</span>,\n  <span class=\"string\">'October'</span>,\n  <span class=\"string\">'November'</span>,\n  <span class=\"string\">'December'</span> ]</pre> <p>Similarly, <code>moment.monthsShort</code> returns abbreviated month names, and <code>moment.weekdays</code>, <code>moment.weekdaysShort</code>, <code>moment.weekdaysMin</code> return lists of weekdays.</p> <p>You can pass an integer into each of those functions to get a specific month or weekday.</p> <pre data-language=\"javascript\">moment.weekdays(<span class=\"number\">3</span>); <span class=\"comment\">// 'Wednesday'</span></pre> <p>As of <strong>2.13.0</strong> you can pass a bool as the first parameter of the weekday functions. If true, the weekdays will be returned in locale specific order. For instance, in the Arabic locale, Saturday is the first day of the week, thus:</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'ar'</span>);\nmoment.weekdays(<span class=\"literal\">true</span>); <span class=\"comment\">// lists weekdays Saturday-Friday in Arabic</span>\nmoment.weekdays(<span class=\"literal\">true</span>, <span class=\"number\">2</span>); <span class=\"comment\">//will result in Monday in Arabic</span></pre> <p><strong>Note:</strong> Absent the locale specific parameter, weekdays always have Sunday as index 0, regardless of the local first day of the week.</p> <p>Some locales make special considerations into account when formatting month names. For example, Dutch formats month abbreviations without a trailing period, but only if it's formatting the month between dashes. The <code>months</code> method supports passing a format in so that the months will be listed in the proper context.</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'nl'</span>);\nmoment.monthsShort(); <span class=\"comment\">// ['jan.', 'feb.', 'mrt.', ...]</span>\nmoment.monthsShort(<span class=\"string\">'-MMM-'</span>); <span class=\"comment\">// [ 'jan', 'feb', 'mrt', ...]</span></pre> <p>And finally, you can combine both the format option and the integer option.</p> <pre data-language=\"javascript\">moment.monthsShort(<span class=\"string\">'-MMM-'</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 'apr'</span></pre>     <h3 class=\"docs-method-title\" id=\"i18n-locale-data\"> Accessing locale specific functionality <span>2.8.0+</span> </h3>    <pre data-language=\"javascript\">localeData = moment.localeData()\nlocaleData.months()\nlocaleData.monthsShort()\nlocaleData.monthsParse()\nlocaleData.weekdays()\nlocaleData.weekdaysShort()\nlocaleData.weekdaysMin()\nlocaleData.weekdaysParse()\nlocaleData.longDateFormat()\nlocaleData.isPM()\nlocaleData.meridiem()\nlocaleData.calendar()\nlocaleData.relativeTime()\nlocaleData.pastFuture()\nlocaleData.ordinal()\nlocaleData.preparse()\nlocaleData.postformat()\nlocaleData.weeks()\nlocaleData.invalidDate()\nlocaleData.firstDayOfWeek()\nlocaleData.firstDayOfYear()</pre>  <p>You can access the properties of the currently loaded locale through the <code>moment.localeData(key)</code> function. It returns the current locale or a locale with the given key:</p> <pre data-language=\"javascript\"><span class=\"comment\">// get current locale</span>\n<span class=\"keyword\">var</span> currentLocaleData = moment.localeData();\n<span class=\"keyword\">var</span> frLocaleData = moment.localeData(<span class=\"string\">'fr'</span>);</pre> <p>The returned object has the following methods:</p> <pre data-language=\"javascript\">localeData.months(aMoment);  <span class=\"comment\">// full month name of aMoment</span>\nlocaleData.monthsShort(aMoment);  <span class=\"comment\">// short month name of aMoment</span>\nlocaleData.monthsParse(longOrShortMonthString);  <span class=\"comment\">// returns month id (0 to 11) of input</span>\nlocaleData.weekdays(aMoment);  <span class=\"comment\">// full weekday name of aMoment</span>\nlocaleData.weekdaysShort(aMoment);  <span class=\"comment\">// short weekday name of aMoment</span>\nlocaleData.weekdaysMin(aMoment);  <span class=\"comment\">// min weekday name of aMoment</span>\nlocaleData.weekdaysParse(minShortOrLongWeekdayString);  <span class=\"comment\">// returns weekday id (0 to 6) of input</span>\nlocaleData.longDateFormat(dateFormat);  <span class=\"comment\">// returns the full format of abbreviated date-time formats LT, L, LL and so on</span>\nlocaleData.isPM(amPmString);  <span class=\"comment\">// returns true iff amPmString represents PM</span>\nlocaleData.meridiem(hours, minutes, isLower);  <span class=\"comment\">// returns am/pm string for particular time-of-day in upper/lower case</span>\nlocaleData.calendar(key, aMoment);  <span class=\"comment\">// returns a format that would be used for calendar representation. Key is one of 'sameDay', 'nextDay', 'lastDay', 'nextWeek', 'prevWeek', 'sameElse'</span>\nlocaleData.relativeTime(number, withoutSuffix, key, isFuture);  <span class=\"comment\">// returns relative time string, key is on of 's', 'm', 'mm', 'h', 'hh', 'd', 'dd', 'M', 'MM', 'y', 'yy'. Single letter when number is 1.</span>\nlocaleData.pastFuture(diff, relTime);  <span class=\"comment\">// convert relTime string to past or future string depending on diff</span>\nlocaleData.ordinal(number);  <span class=\"comment\">// convert number to ordinal string 1 -&gt; 1st</span>\nlocaleData.preparse(str);  <span class=\"comment\">// called before parsing on every input string</span>\nlocaleData.postformat(str);  <span class=\"comment\">// called after formatting on every string</span>\nlocaleData.week(aMoment);  <span class=\"comment\">// returns week-of-year of aMoment</span>\nlocaleData.invalidDate();  <span class=\"comment\">// returns a translation of 'Invalid date'</span>\nlocaleData.firstDayOfWeek();  <span class=\"comment\">// 0-6 (Sunday to Saturday)</span>\nlocaleData.firstDayOfYear();  <span class=\"comment\">// 0-15 this and the first day of week are used</span>\n                              <span class=\"comment\">// to determine which is the first week of the</span>\n                              <span class=\"comment\">// year. dow == 1 and doy == 4 means week starts</span>\n                              <span class=\"comment\">// Monday and first week that has Thursday is the</span>\n                              <span class=\"comment\">// first week of the year (but doy is NOT simply</span>\n                              <span class=\"comment\">// Thursday).</span></pre>     <h3 class=\"docs-method-title\" id=\"i18n-pseudo-locale\"> Pseudo Locale <span>2.13.0+</span> </h3>    <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'x-pseudo'</span>)</pre>  <p>As of version <strong>2.13.0</strong> moment optionally includes a pseudo locale. This locale will populate the dates with very obviously changed data. Pseudo locales can be useful when testing, as they make obvious what data has and has not been localized. Just include the pseudo-locale, and set moment's locale to x-pseudo. Text from Moment will be very easy to spot.</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'x-pseudo'</span>);\nmoment().format(<span class=\"string\">'LLL'</span>); <span class=\"comment\">//14 F~ébrú~árý 2010 15:25</span>\nmoment().fromNow(); <span class=\"comment\">//'á ~féw ~sécó~ñds á~gó'</span>\nmoment().calendar(); <span class=\"comment\">//'T~ódá~ý át 02:00'</span></pre>     <h2 class=\"docs-section-title\" id=\"customization\">Customize</h2>     <p>Moment.js is very easy to customize. In general, you should create a locale setting with your customizations.</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'en-my-settings'</span>, {\n    <span class=\"comment\">// customizations.</span>\n});</pre> <p>You can remove a previously defined locale by passing <code>null</code> as the second argument. The deleted locale will no longer be available for use.</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'fr'</span>); <span class=\"comment\">// 'fr'</span>\nmoment.locale(<span class=\"string\">'en'</span>); <span class=\"comment\">// 'en'</span>\nmoment.locale(<span class=\"string\">'fr'</span>, <span class=\"literal\">null</span>);\nmoment.locale(<span class=\"string\">'fr'</span>); <span class=\"comment\">// 'en'</span></pre> <p>As of <strong>2.12.0</strong> it is possible to create a locale that inherits from a parent locale.</p> <pre data-language=\"javascript\">moment.defineLocale(<span class=\"string\">'en-foo'</span>, {\n  parentLocale: <span class=\"string\">'en'</span>,\n  <span class=\"comment\">/* */</span>\n});</pre> <p>Properties that are not specified in the locale will be inherited from the parent locale.</p> <p>As of <strong>2.12.0</strong> it is also possible to update a locale's properties.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n  <span class=\"comment\">/**/</span>\n});</pre> <p>Any properties specified will be updated, while others will remain the same. This function does not affect moments that already exist.</p> <p>To revert an update use:</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, <span class=\"literal\">null</span>);</pre> <p><strong>2.12.0</strong> deprecated using <code>moment.locale()</code> to change an existing locale. Use <code>moment.updateLocale()</code> instead.</p>     <h3 class=\"docs-method-title\" id=\"customization-month-names\"> Month Names <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From 2.12.0 onward</span>\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    months : String[]\n});\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    months : Function\n});\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    months : {\n        format : String[],\n        standalone : String[]\n    }\n});\n<span class=\"comment\">// From 2.11.0</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    months : {\n        format : String[],\n        standalone : String[]\n    }\n});\n<span class=\"comment\">// From 2.8.1 to 2.11.2</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    months : String[]\n});\nmoment.locale(<span class=\"string\">'en'</span>, {\n    months : Function\n});\n\n<span class=\"comment\">// Deprecated in 2.8.1</span>\nmoment.lang(<span class=\"string\">'en'</span>, {\n    months : String[]\n});\nmoment.lang(<span class=\"string\">'en'</span>, {\n    months : Function\n});</pre>  <p><code>Locale#months</code> should be an array of the month names.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    months : [\n        <span class=\"string\">\"January\"</span>, <span class=\"string\">\"February\"</span>, <span class=\"string\">\"March\"</span>, <span class=\"string\">\"April\"</span>, <span class=\"string\">\"May\"</span>, <span class=\"string\">\"June\"</span>, <span class=\"string\">\"July\"</span>,\n        <span class=\"string\">\"August\"</span>, <span class=\"string\">\"September\"</span>, <span class=\"string\">\"October\"</span>, <span class=\"string\">\"November\"</span>, <span class=\"string\">\"December\"</span>\n    ]\n});</pre> <p>If you need more processing to calculate the name of the month, (for example, if there is different grammar for different formats), <code>Locale#months</code> can be a function with the following signature. It should always return a month name.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    months : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(momentToFormat, format)</span> {</span>\n        <span class=\"comment\">// momentToFormat is the moment currently being formatted</span>\n        <span class=\"comment\">// format is the formatting string</span>\n        <span class=\"keyword\">if</span> (<span class=\"regexp\">/^MMMM/</span>.test(format)) { <span class=\"comment\">// if the format starts with 'MMMM'</span>\n            <span class=\"keyword\">return</span> nominative[momentToFormat.month()];\n        } <span class=\"keyword\">else</span> {\n            <span class=\"keyword\">return</span> subjective[momentToFormat.month()];\n        }\n    }\n});</pre> <p>From version <strong>2.11.0</strong> months can also be an object, specifying <code>standalone</code> and <code>format</code> forms (nominative and accusative). The regular expression that is run on the format to check whether to use the <code>format</code> form is <code>/D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/</code>. From version <strong>2.14.0</strong> a different one can be specified with the <code>isFormat</code> key.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    months : {\n         format: <span class=\"string\">'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'</span>.split(<span class=\"string\">'_'</span>),\n         standalone: <span class=\"string\">'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'</span>.split(<span class=\"string\">'_'</span>),\n         isFormat: <span class=\"regexp\">/D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?|MMMM?(\\[[^\\[\\]]*\\]|\\s+)+D[oD]?/</span>  <span class=\"comment\">// from 2.14.0</span>\n    }\n});</pre>     <h3 class=\"docs-method-title\" id=\"customization-month-abbreviations\"> Month Abbreviations <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From 2.12.0 onward</span>\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    monthsShort : String[]\n});\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    monthsShort : Function\n});\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    monthsShort : {\n        format: String[],\n        standalone : String[]\n    }\n});\n<span class=\"comment\">// From 2.11.0</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    monthsShort : {\n        format: String[],\n        standalone : String[]\n    }\n});\n<span class=\"comment\">// From 2.8.1 to 2.11.2</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    monthsShort : String[]\n});\nmoment.locale(<span class=\"string\">'en'</span>, {\n    monthsShort : Function\n});\n\n<span class=\"comment\">// Deprecated in 2.8.1</span>\nmoment.lang(<span class=\"string\">'en'</span>, {\n    monthsShort : String[]\n});\nmoment.lang(<span class=\"string\">'en'</span>, {\n    monthsShort : Function\n});</pre>  <p><code>Locale#monthsShort</code> should be an array of the month abbreviations.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    monthsShort : [\n        <span class=\"string\">\"Jan\"</span>, <span class=\"string\">\"Feb\"</span>, <span class=\"string\">\"Mar\"</span>, <span class=\"string\">\"Apr\"</span>, <span class=\"string\">\"May\"</span>, <span class=\"string\">\"Jun\"</span>,\n        <span class=\"string\">\"Jul\"</span>, <span class=\"string\">\"Aug\"</span>, <span class=\"string\">\"Sep\"</span>, <span class=\"string\">\"Oct\"</span>, <span class=\"string\">\"Nov\"</span>, <span class=\"string\">\"Dec\"</span>\n    ]\n});</pre> <p>Like <code>Locale#months</code>, <code>Locale#monthsShort</code> can be a callback function as well.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    monthsShort : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(momentToFormat, format)</span> {</span>\n        <span class=\"keyword\">if</span> (<span class=\"regexp\">/^MMMM/</span>.test(format)) {\n            <span class=\"keyword\">return</span> nominative[momentToFormat.month()];\n        } <span class=\"keyword\">else</span> {\n            <span class=\"keyword\">return</span> subjective[momentToFormat.month()];\n        }\n    }\n});</pre> <p><strong>Note</strong>: From version <strong>2.11.0</strong>, like <code>Locale#months</code>, <code>Locale#monthsShort</code> can be an object with <code>standalone</code> and <code>format</code> cases.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    monthsShort : {\n        format: <span class=\"string\">'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'</span>.split(<span class=\"string\">'_'</span>),\n        standalone: <span class=\"string\">'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'</span>.split(<span class=\"string\">'_'</span>)\n    }\n});</pre>     <h3 class=\"docs-method-title\" id=\"customization-weekday-names\"> Weekday Names <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From version 2.12.0 onward</span>\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdays : String[]\n});\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdays : Function\n});\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdays : {\n        standalone : String[],\n        format : String[],\n        isFormat : RegExp\n    }\n});\n<span class=\"comment\">// From version 2.11.0</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    weekdays : {\n        standalone : String[],\n        format : String[],\n        isFormat : Boolean\n    }\n});\n<span class=\"comment\">// From version 2.8.1 to 2.11.2</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    weekdays : String[]\n});\nmoment.locale(<span class=\"string\">'en'</span>, {\n    weekdays : Function\n});\n\n<span class=\"comment\">// Deprecated version 2.8.1</span>\nmoment.lang(<span class=\"string\">'en'</span>, {\n    weekdays : String[]\n});\nmoment.lang(<span class=\"string\">'en'</span>, {\n    weekdays : Function\n});</pre>  <p><code>Locale#weekdays</code> should be an array of the weekdays names.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdays : [\n        <span class=\"string\">\"Sunday\"</span>, <span class=\"string\">\"Monday\"</span>, <span class=\"string\">\"Tuesday\"</span>, <span class=\"string\">\"Wednesday\"</span>, <span class=\"string\">\"Thursday\"</span>, <span class=\"string\">\"Friday\"</span>, <span class=\"string\">\"Saturday\"</span>\n    ]\n});</pre> <p><code>Locale#weekdays</code> can be a callback function as well.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdays : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(momentToFormat, format)</span> {</span>\n        <span class=\"keyword\">return</span> weekdays[momentToFormat.day()];\n    }\n});</pre> <p><strong>Note</strong>: From version <strong>2.11.0</strong> format/standalone cases can be passed as well. <code>isFormat</code> will be used against the full format string to determine which form to use.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdays : {\n        standalone: <span class=\"string\">'Воскресенье_Понедельник_Вторник_Среда_Четверг_Пятница_Суббота'</span>.split(<span class=\"string\">'_'</span>),\n        format: <span class=\"string\">'Воскресенье_Понедельник_Вторник_Среду_Четверг_Пятницу_Субботу'</span>.split(<span class=\"string\">'_'</span>),\n        isFormat: <span class=\"regexp\">/\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\\] ?dddd/</span>\n    }\n});</pre>     <h3 class=\"docs-method-title\" id=\"customization-weekday-abbreviations\"> Weekday Abbreviations <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From 2.12.0 onward</span>\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdaysShort : String[]\n});\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdaysShort : Function\n});\n<span class=\"comment\">// From 2.8.1 to 2.11.2</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    weekdaysShort : String[]\n});\nmoment.locale(<span class=\"string\">'en'</span>, {\n    weekdaysShort : Function\n});\n\n<span class=\"comment\">// Deprecated in 2.8.1</span>\nmoment.lang(<span class=\"string\">'en'</span>, {\n    weekdaysShort : String[]\n});\nmoment.lang(<span class=\"string\">'en'</span>, {\n    weekdaysShort : Function\n});</pre>  <p><code>Locale#weekdaysShort</code> should be an array of the weekdays abbreviations.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdaysShort : [<span class=\"string\">\"Sun\"</span>, <span class=\"string\">\"Mon\"</span>, <span class=\"string\">\"Tue\"</span>, <span class=\"string\">\"Wed\"</span>, <span class=\"string\">\"Thu\"</span>, <span class=\"string\">\"Fri\"</span>, <span class=\"string\">\"Sat\"</span>]\n});</pre> <p><code>Locale#weekdaysShort</code> can be a callback function as well.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdaysShort : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(momentToFormat, format)</span> {</span>\n        <span class=\"keyword\">return</span> weekdaysShort[momentToFormat.day()];\n    }\n});</pre>     <h3 class=\"docs-method-title\" id=\"customization-weekday-min\"> Minimal Weekday Abbreviations <span>1.7.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From 2.12.0 onward</span>\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdaysMin : String[]\n});\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdaysMin : Function\n});\n\n<span class=\"comment\">// From 2.8.1 to 2.11.2</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    weekdaysMin : String[]\n});\nmoment.locale(<span class=\"string\">'en'</span>, {\n    weekdaysMin : Function\n});\n\n<span class=\"comment\">// Deprecated in 2.8.1</span>\nmoment.lang(<span class=\"string\">'en'</span>, {\n    weekdaysMin : String[]\n});\nmoment.lang(<span class=\"string\">'en'</span>, {\n    weekdaysMin : Function\n});</pre>  <p><code>Locale#weekdaysMin</code> should be an array of two letter weekday abbreviations. The purpose of these is for things like calendar pickers, thus they should be as small as possible.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdaysMin : [<span class=\"string\">\"Su\"</span>, <span class=\"string\">\"Mo\"</span>, <span class=\"string\">\"Tu\"</span>, <span class=\"string\">\"We\"</span>, <span class=\"string\">\"Th\"</span>, <span class=\"string\">\"Fr\"</span>, <span class=\"string\">\"Sa\"</span>]\n});</pre> <p><code>Locale#weekdaysMin</code> can be a callback function as well.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdaysMin : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(momentToFormat, format)</span> {</span>\n        <span class=\"keyword\">return</span> weekdaysMin[momentToFormat.day()];\n    }\n});</pre>     <h3 class=\"docs-method-title\" id=\"customization-long-date-formats\"> Long Date Formats <span>1.1.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From 2.12.0 onward</span>\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdaysMin : String[]\n});\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    weekdaysMin : Function\n});\n\n<span class=\"comment\">// From 2.8.1 to 2.11.2</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    longDateFormat : Object\n});\n\n<span class=\"comment\">// Deprecated in 2.8.1</span>\nmoment.lang(<span class=\"string\">'en'</span>, {\n    longDateFormat : Object\n});</pre>  <p><code>Locale#longDateFormat</code> should be an object containing a key/value pair for each long date format <code>L LL LLL LLLL LT LTS</code>. <code>LT</code> should be the time format, and is also used for <code>moment#calendar</code>.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    longDateFormat : {\n        LT: <span class=\"string\">\"h:mm A\"</span>,\n        LTS: <span class=\"string\">\"h:mm:ss A\"</span>,\n        L: <span class=\"string\">\"MM/DD/YYYY\"</span>,\n        l: <span class=\"string\">\"M/D/YYYY\"</span>,\n        LL: <span class=\"string\">\"MMMM Do YYYY\"</span>,\n        ll: <span class=\"string\">\"MMM D YYYY\"</span>,\n        LLL: <span class=\"string\">\"MMMM Do YYYY LT\"</span>,\n        lll: <span class=\"string\">\"MMM D YYYY LT\"</span>,\n        LLLL: <span class=\"string\">\"dddd, MMMM Do YYYY LT\"</span>,\n        llll: <span class=\"string\">\"ddd, MMM D YYYY LT\"</span>\n    }\n});</pre> <p>You can eliminate the lowercase <code>l</code> tokens and they will be created automatically by replacing long tokens with the short token variants.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    longDateFormat : {\n        LT: <span class=\"string\">\"h:mm A\"</span>,\n        LTS: <span class=\"string\">\"h:mm:ss A\"</span>,\n        L: <span class=\"string\">\"MM/DD/YYYY\"</span>,\n        LL: <span class=\"string\">\"MMMM Do YYYY\"</span>,\n        LLL: <span class=\"string\">\"MMMM Do YYYY LT\"</span>,\n        LLLL: <span class=\"string\">\"dddd, MMMM Do YYYY LT\"</span>\n    }\n});</pre>     <h3 class=\"docs-method-title\" id=\"customization-relative-time\"> Relative Time <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From 2.12.0 onward</span>\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    relativeTime : Object\n});\n<span class=\"comment\">// From 2.8.1 to 2.11.2</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    relativeTime : Object\n});\n\n<span class=\"comment\">// Deprecated in 2.8.1</span>\nmoment.lang(<span class=\"string\">'en'</span>, {\n    relativeTime : Object\n});</pre>  <p><code>Locale#relativeTime</code> should be an object of the replacement strings for <code>moment#from</code>.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    relativeTime : {\n        future: <span class=\"string\">\"in %s\"</span>,\n        past:   <span class=\"string\">\"%s ago\"</span>,\n        s:  <span class=\"string\">\"seconds\"</span>,\n        m:  <span class=\"string\">\"a minute\"</span>,\n        mm: <span class=\"string\">\"%d minutes\"</span>,\n        h:  <span class=\"string\">\"an hour\"</span>,\n        hh: <span class=\"string\">\"%d hours\"</span>,\n        d:  <span class=\"string\">\"a day\"</span>,\n        dd: <span class=\"string\">\"%d days\"</span>,\n        M:  <span class=\"string\">\"a month\"</span>,\n        MM: <span class=\"string\">\"%d months\"</span>,\n        y:  <span class=\"string\">\"a year\"</span>,\n        yy: <span class=\"string\">\"%d years\"</span>\n    }\n});</pre> <p><code>Locale#relativeTime.future</code> refers to the prefix/suffix for future dates, and <code>Locale#relativeTime.past</code> refers to the prefix/suffix for past dates. For all others, a single character refers to the singular, and a double character refers to the plural.</p> <p>If a locale requires additional processing for a token, it can set the token as a function with the following signature. The function should return a string.</p>  <pre data-language=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(number, withoutSuffix, key, isFuture)</span> {</span>\n    <span class=\"keyword\">return</span> string;\n}</pre> <p>The <code>key</code> argument refers to the replacement key in the <code>Locale#relativeTime</code> object. (eg. <code>s m mm h</code>, etc.)</p> <p>The <code>number</code> argument refers to the number of units for that key. For <code>m</code>, the number is the number of minutes, etc.</p> <p>The <code>withoutSuffix</code> argument will be true if the token will be displayed without a suffix, and false if it will be displayed with a suffix. (The reason for the inverted logic is because the default behavior is to display with the suffix.)</p> <p>The <code>isFuture</code> argument will be true if it is going to use the future suffix/prefix and false if it is going to use the past prefix/suffix. The <code>isFuture</code> argument was added in version <strong>1.6.0</strong>.</p>     <h3 class=\"docs-method-title\" id=\"customization-am-pm\"> AM/PM <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From 2.12.0 onward</span>\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    meridiem : Function\n});\n<span class=\"comment\">// From 2.8.1 to 2.11.2</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    meridiem : Function\n});\n\n<span class=\"comment\">// Deprecated in 2.8.1</span>\nmoment.lang(<span class=\"string\">'en'</span>, {\n    meridiem : Function\n});</pre>  <p>If your locale uses 'am/pm', <code>Locale#meridiem</code> can be omitted, as those values are the defaults.</p> <p>If your locale needs any different computation for am/pm, <code>Locale#meridiem</code> should be a callback function that returns the correct string based on hour, minute, and upper/lowercase.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'zh-cn'</span>, {\n    meridiem : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(hour, minute, isLowercase)</span> {</span>\n        <span class=\"keyword\">if</span> (hour &lt; <span class=\"number\">9</span>) {\n            <span class=\"keyword\">return</span> <span class=\"string\">\"早上\"</span>;\n        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hour &lt; <span class=\"number\">11</span> &amp;&amp; minute &lt; <span class=\"number\">30</span>) {\n            <span class=\"keyword\">return</span> <span class=\"string\">\"上午\"</span>;\n        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hour &lt; <span class=\"number\">13</span> &amp;&amp; minute &lt; <span class=\"number\">30</span>) {\n            <span class=\"keyword\">return</span> <span class=\"string\">\"中午\"</span>;\n        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hour &lt; <span class=\"number\">18</span>) {\n            <span class=\"keyword\">return</span> <span class=\"string\">\"下午\"</span>;\n        } <span class=\"keyword\">else</span> {\n            <span class=\"keyword\">return</span> <span class=\"string\">\"晚上\"</span>;\n        }\n    }\n});</pre> <p>Before version <strong>1.6.0</strong>, <code>Locale#meridiem</code> was a map of upper and lowercase versions of am/pm.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    meridiem : {\n        am : <span class=\"string\">'am'</span>,\n        AM : <span class=\"string\">'AM'</span>,\n        pm : <span class=\"string\">'pm'</span>,\n        PM : <span class=\"string\">'PM'</span>\n    }\n});</pre> <p>This has been deprecated. The <strong>1.6.0</strong> callback function syntax is now used instead.</p>     <h3 class=\"docs-method-title\" id=\"customization-am-pm-parsing\"> AM/PM Parsing <span>2.1.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From 2.12.0 onward</span>\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    meridiemParse : RegExp\n    isPM : Function\n});\n\n<span class=\"comment\">// From 2.8.1 to 2.11.2</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    meridiemParse : RegExp\n    isPM : Function\n});\n\n<span class=\"comment\">// Deprecated in 2.8.1</span>\nmoment.lang(<span class=\"string\">'en'</span>, {\n    meridiemParse : RegExp\n    isPM : Function\n});</pre>  <p><code>Locale#isPM</code> should return true if the input string is past 12 noon. This is used in parsing the <code>a A</code> tokens.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    isPM : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(input)</span> {</span>\n        <span class=\"keyword\">return</span> ((input + <span class=\"string\">''</span>).toLowerCase()[<span class=\"number\">0</span>] === <span class=\"string\">'p'</span>);\n    }\n});</pre> <p>To configure what strings should be parsed as input, set the <code>meridiemParse</code> property.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    meridiemParse : <span class=\"regexp\">/[ap]\\.?m?\\.?/i</span>\n});</pre>     <h3 class=\"docs-method-title\" id=\"customization-calendar\"> Calendar <span>1.3.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From 2.12.0 onward</span>\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    calendar : Object\n});\n<span class=\"comment\">// From 2.8.1 to 2.11.2</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    calendar : Object\n});\n\n<span class=\"comment\">// Deprecated in 2.8.1</span>\nmoment.lang(<span class=\"string\">'en'</span>, {\n    calendar : Object\n});</pre>  <p><code>Locale#calendar</code> should have the following formatting strings.</p> <pre data-language=\"javascript\">moment.locale(<span class=\"string\">'en'</span>, {\n    calendar : {\n        lastDay : <span class=\"string\">'[Yesterday at] LT'</span>,\n        sameDay : <span class=\"string\">'[Today at] LT'</span>,\n        nextDay : <span class=\"string\">'[Tomorrow at] LT'</span>,\n        lastWeek : <span class=\"string\">'[last] dddd [at] LT'</span>,\n        nextWeek : <span class=\"string\">'dddd [at] LT'</span>,\n        sameElse : <span class=\"string\">'L'</span>\n    }\n});</pre> <p>Each of the <code>Locale#calendar</code> keys can also be a callback function with the scope of the current moment and first argument a moment that depicts now. It should return a formatting string.</p> <pre data-language=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span> <span class=\"params\">(now)</span> {</span>\n    <span class=\"keyword\">return</span> <span class=\"string\">'[hoy a la'</span> + ((<span class=\"keyword\">this</span>.hours() !== <span class=\"number\">1</span>) ? <span class=\"string\">'s'</span> : <span class=\"string\">''</span>) + <span class=\"string\">'] LT'</span>;\n}</pre>     <h3 class=\"docs-method-title\" id=\"customization-calendar-format\"> Calendar Format <span>2.14.0+</span> </h3>    <pre data-language=\"javascript\">moment.calendarFormat = Function</pre>  <p>This lets you modify the tokens used by <a href=\"#/customization/calendar/\">calendar</a>.</p> <pre data-language=\"javascript\">moment.calendarFormat = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(myMoment, now)</span> {</span>\n    <span class=\"keyword\">var</span> diff = myMoment.diff(now, <span class=\"string\">'days'</span>, <span class=\"literal\">true</span>);\n    <span class=\"keyword\">var</span> nextMonth = now.clone().add(<span class=\"number\">1</span>, <span class=\"string\">'month'</span>);\n\n    <span class=\"keyword\">var</span> retVal =  diff &lt; -<span class=\"number\">6</span> ? <span class=\"string\">'sameElse'</span> :\n        diff &lt; -<span class=\"number\">1</span> ? <span class=\"string\">'lastWeek'</span> :\n        diff &lt; <span class=\"number\">0</span> ? <span class=\"string\">'lastDay'</span> :\n        diff &lt; <span class=\"number\">1</span> ? <span class=\"string\">'sameDay'</span> :\n        diff &lt; <span class=\"number\">2</span> ? <span class=\"string\">'nextDay'</span> :\n        diff &lt; <span class=\"number\">7</span> ? <span class=\"string\">'nextWeek'</span> :\n        <span class=\"comment\">// introduce thisMonth and nextMonth</span>\n        (myMoment.month() === now.month() &amp;&amp; myMoment.year() === now.year()) ? <span class=\"string\">'thisMonth'</span> :\n        (nextMonth.month() === myMoment.month() &amp;&amp; nextMonth.year() === myMoment.year()) ? <span class=\"string\">'nextMonth'</span> : <span class=\"string\">'sameElse'</span>;\n    <span class=\"keyword\">return</span> retVal;\n};</pre>     <h3 class=\"docs-method-title\" id=\"customization-ordinal\"> Ordinal <span>1.0.0+</span> </h3>    <pre data-language=\"javascript\"><span class=\"comment\">// From 2.12.0 onward</span>\nmoment.updateLocale(<span class=\"string\">'en'</span>, {\n    ordinal : Function\n});\n<span class=\"comment\">// From 2.8.1 to 2.11.2</span>\nmoment.locale(<span class=\"string\">'en'</span>, {\n    ordinal : Function\n});\n\n<span class=\"comment\">// Deprecated in 2.8.1</span>\nmoment.lang(<span class=\"string\">'en'</span>, {\n    ordinal : Function\n});</pre>  <p><code>Locale#ordinal</code> should be a function that returns the ordinal for a given number.</p> <pre data-language=\"javascript\">moment.updateLocale(<span class=\"string\">'en'</span>, {\n    ordinal : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(number, token)</span> {</span>\n        <span class=\"keyword\">var</span> b = number % <span class=\"number\">10</span>;\n        <span class=\"keyword\">var</span> output = (~~ (number % <span class=\"number\">100</span> / <span class=\"number\">10</span>) === <span class=\"number\">1</span>) ? <span class=\"string\">'th'</span> :\n            (b === <span class=\"number\">1</span>) ? <span class=\"string\">'st'</span> :\n            (b === <span class=\"number\">2</span>) ? <span class=\"string\">'nd'</span> :\n            (b === <span class=\"number\">3</span>) ? <span class=\"string\">'rd'</span> : <span class=\"string\">'th'</span>;\n        <span class=\"keyword\">return</span> number + output;\n    }\n});</pre> <p>As of <strong>2.0.0</strong>, the ordinal function should return both the number and the ordinal. Previously, only the ordinal was returned.</p> <p>As of <strong>2.1.0</strong>, the token parameter was added. It is a string of the token that is being ordinalized, for example: <code>M</code> or <code>d</code>.</p> <p>For more information on ordinal numbers, see <a href=\"http://en.wikipedia.org/wiki/Ordinal_number_%28linguistics%29\">wikipedia</a></p>     <h3 class=\"docs-method-title\" id=\"customization-relative-time-threshold\"> Relative Time Thresholds <span>2.7.0+</span> </h3>    <pre data-language=\"javascript\">moment.relativeTimeThreshold(unit);  <span class=\"comment\">// getter</span>\nmoment.relativeTimeThreshold(unit, limit);  <span class=\"comment\">// setter</span></pre>  <p><code>duration.humanize</code> has thresholds which define when a unit is considered a minute, an hour and so on. For example, by default more than 45 seconds is considered a minute, more than 22 hours is considered a day and so on. To change those cutoffs use <code>moment.relativeTimeThreshold(unit, limit)</code> where unit is one of <code>s</code>, <code>m</code>, <code>h</code>, <code>d</code>, <code>M</code>.</p> <table> <tbody> <tr> <th>unit</th> <th>meaning</th> <th>usage</th> </tr> <tr> <td>s</td> <td>seconds</td> <td>least number of seconds to be considered a minute</td> </tr> <tr> <td>m</td> <td>minutes</td> <td>least number of minutes to be considered an hour</td> </tr> <tr> <td>h</td> <td>hours</td> <td>least number of hours to be considered a day</td> </tr> <tr> <td>d</td> <td>days</td> <td>least number of days to be considered a month</td> </tr> <tr> <td>M</td> <td>months</td> <td>least number of months to be considered a year</td> </tr> </tbody> </table> <pre data-language=\"javascript\">  <span class=\"comment\">// Retrieve existing thresholds</span>\n  moment.relativeTimeThreshold(<span class=\"string\">'s'</span>);  <span class=\"comment\">// 45</span>\n  moment.relativeTimeThreshold(<span class=\"string\">'m'</span>);  <span class=\"comment\">// 45</span>\n  moment.relativeTimeThreshold(<span class=\"string\">'h'</span>);  <span class=\"comment\">// 22</span>\n  moment.relativeTimeThreshold(<span class=\"string\">'d'</span>);  <span class=\"comment\">// 26</span>\n  moment.relativeTimeThreshold(<span class=\"string\">'M'</span>);  <span class=\"comment\">// 11</span>\n\n  <span class=\"comment\">// Set new thresholds</span>\n  moment.relativeTimeThreshold(<span class=\"string\">'s'</span>, <span class=\"number\">40</span>);\n  moment.relativeTimeThreshold(<span class=\"string\">'m'</span>, <span class=\"number\">40</span>);\n  moment.relativeTimeThreshold(<span class=\"string\">'h'</span>, <span class=\"number\">20</span>);\n  moment.relativeTimeThreshold(<span class=\"string\">'d'</span>, <span class=\"number\">25</span>);\n  moment.relativeTimeThreshold(<span class=\"string\">'M'</span>, <span class=\"number\">10</span>);</pre> <p><strong>NOTE</strong>: Retrieving thresholds was added in <strong>2.8.1</strong>.</p>     <h3 class=\"docs-method-title\" id=\"customization-relative-time-rounding\"> Relative Time Rounding <span>2.14.0+</span> </h3>    <pre data-language=\"javascript\">moment.relativeTimeRounding();  <span class=\"comment\">// getter</span>\nmoment.relativeTimeRounding(fn);  <span class=\"comment\">// setter</span></pre>  <p><code>duration.humanize</code> rounds a possibly double value before supplying it to the relativeTime format string specified in the locale. To control the rounding you can use <code>moment.relativeTimeRounding</code>.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> roundingDefault = moment.relativeTimeRounding();\n\n<span class=\"comment\">// Round relative time evaluation down</span>\nmoment.relativeTimeRounding(Math.floor);\n\nmoment.relativeTimeThreshold(<span class=\"string\">'s'</span>, <span class=\"number\">60</span>);\nmoment.relativeTimeThreshold(<span class=\"string\">'m'</span>, <span class=\"number\">60</span>);\nmoment.relativeTimeThreshold(<span class=\"string\">'h'</span>, <span class=\"number\">24</span>);\nmoment.relativeTimeThreshold(<span class=\"string\">'d'</span>, <span class=\"number\">31</span>);\nmoment.relativeTimeThreshold(<span class=\"string\">'M'</span>, <span class=\"number\">12</span>);\n\n<span class=\"keyword\">var</span> a = moment();\na.subtract({hours: <span class=\"number\">23</span>, minutes: <span class=\"number\">59</span>, seconds: <span class=\"number\">59</span>});\na.toNow()  <span class=\"comment\">// == 'in 23 hours'  'Round down towards the nearest hour'</span>\n\n<span class=\"comment\">// back to default</span>\nmoment.relativeTimeRounding(roundingDefault);</pre> <p>You can even choose to do no rounding at all:</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> retainValue = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(value)</span> {</span>\n    <span class=\"keyword\">return</span> value;\n};\nmoment.relativeTimeRounding(retainValue);\n\n<span class=\"keyword\">var</span> a = moment();\na.subtract({hours: <span class=\"number\">39</span>});\na.toNow() <span class=\"comment\">// == 'in 1.625 days', 'Round down towards the nearest year'</span></pre>     <h3 class=\"docs-method-title\" id=\"customization-now\"> Changing Time Source <span>2.10.7+</span> </h3>    <pre data-language=\"javascript\">moment.now = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span> <span class=\"keyword\">return</span> +<span class=\"keyword\">new</span> Date(); }</pre>  <p>If you want to change the time that moment sees, you can specify a method that returns number of milliseconds after unix epoc (1st Jan 1970).</p> <p>The default is:</p> <pre data-language=\"javascript\">moment.now = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n    <span class=\"keyword\">return</span> +<span class=\"keyword\">new</span> Date();\n}</pre> <p>Its used for <code>moment()</code>, and current date used when tokens are omitted from format. In general any method that needs the current time uses that at the lowest level.</p>     <h2 class=\"docs-section-title\" id=\"durations\">Durations</h2>     <p>Moment.js also has duration objects. Where a moment is defined as single points in time, durations are defined as a length of time.</p> <p>Durations do not have a defined beginning and end date. They are contextless.</p> <p>A duration is conceptually more similar to '2 hours' than to 'between 2 and 4 pm today'. As such, they are not a good solution to converting between units that depend on context.</p> <p>For example, a year can be defined as 366 days, 365 days, 365.25 days, 12 months, or 52 weeks. Trying to convert years to days makes no sense without context. It is much better to use <code>moment#diff</code> for calculating days or years between two moments than to use <code>Durations</code>.</p>     <h3 class=\"docs-method-title\" id=\"durations-creating\"> Creating <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration(Number, String);\nmoment.duration(Number);\nmoment.duration(Object);\nmoment.duration(String);</pre>  <p>To create a duration, call <code>moment.duration()</code> with the length of time in milliseconds.</p> <pre data-language=\"javascript\">moment.duration(<span class=\"number\">100</span>); <span class=\"comment\">// 100 milliseconds</span></pre> <p>If you want to create a moment with a unit of measurement other than milliseconds, you can pass the unit of measurement as well.</p> <pre data-language=\"javascript\">moment.duration(<span class=\"number\">2</span>, <span class=\"string\">'seconds'</span>);\nmoment.duration(<span class=\"number\">2</span>, <span class=\"string\">'minutes'</span>);\nmoment.duration(<span class=\"number\">2</span>, <span class=\"string\">'hours'</span>);\nmoment.duration(<span class=\"number\">2</span>, <span class=\"string\">'days'</span>);\nmoment.duration(<span class=\"number\">2</span>, <span class=\"string\">'weeks'</span>);\nmoment.duration(<span class=\"number\">2</span>, <span class=\"string\">'months'</span>);\nmoment.duration(<span class=\"number\">2</span>, <span class=\"string\">'years'</span>);</pre> <p>The same shorthand for <code>moment#add</code> and <code>moment#subtract</code> works here as well.</p> <table class=\"table table-striped table-bordered\"> <tbody> <tr> <th>Key</th> <th>Shorthand</th> </tr> <tr> <td>years</td> <td>y</td> </tr> <tr> <td>months</td> <td>M</td> </tr> <tr> <td>weeks</td> <td>w</td> </tr> <tr> <td>days</td> <td>d</td> </tr> <tr> <td>hours</td> <td>h</td> </tr> <tr> <td>minutes</td> <td>m</td> </tr> <tr> <td>seconds</td> <td>s</td> </tr> <tr> <td>milliseconds</td> <td>ms</td> </tr> </tbody> </table> <p>Much like <code>moment#add</code>, you can pass an object of values if you need multiple different units of measurement.</p> <pre data-language=\"javascript\">moment.duration({\n    seconds: <span class=\"number\">2</span>,\n    minutes: <span class=\"number\">2</span>,\n    hours: <span class=\"number\">2</span>,\n    days: <span class=\"number\">2</span>,\n    weeks: <span class=\"number\">2</span>,\n    months: <span class=\"number\">2</span>,\n    years: <span class=\"number\">2</span>\n});</pre> <p>As of <strong>2.1.0</strong>, moment supports parsing ASP.NET style time spans. The following formats are supported.</p> <p>The format is an hour, minute, second string separated by colons like <code>23:59:59</code>. The number of days can be prefixed with a dot separator like so <code>7.23:59:59</code>. Partial seconds are supported as well <code>23:59:59.999</code>.</p> <pre data-language=\"javascript\">moment.duration(<span class=\"string\">'23:59:59'</span>);\nmoment.duration(<span class=\"string\">'23:59:59.999'</span>);\nmoment.duration(<span class=\"string\">'7.23:59:59.999'</span>);\nmoment.duration(<span class=\"string\">'23:59'</span>);          <span class=\"comment\">//added in 2.3.0</span></pre> <p>As of <strong>2.3.0</strong>, moment also supports parsing <a href=\"http://en.wikipedia.org/wiki/ISO_8601#Time_intervals\">ISO 8601</a> durations.</p> <pre data-language=\"javascript\">moment.duration(<span class=\"string\">'P1Y2M3DT4H5M6S'</span>);\nmoment.duration(<span class=\"string\">'P1M'</span>);</pre> <p>As of <strong>2.10.7</strong>, duration format strings with a space between days and rest is supported.</p> <pre data-language=\"javascript\">moment.duration(<span class=\"string\">'7 23:59:59.999'</span>);</pre> <p>As of <strong>2.13.0</strong>, mixed negative and positive signs are supported when parsing durations.</p> <pre data-language=\"javascript\">moment.duration(<span class=\"string\">'PT-6H3M'</span>)</pre>     <h3 class=\"docs-method-title\" id=\"durations-humanize\"> Humanize <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().humanize();</pre>  <p>Sometimes, you want all the goodness of <code>moment#from</code> but you don't want to have to create two moments, you just want to display a length of time.</p> <p>Enter <code>moment.duration().humanize()</code>.</p> <pre data-language=\"javascript\">moment.duration(<span class=\"number\">1</span>, <span class=\"string\">\"minutes\"</span>).humanize(); <span class=\"comment\">// a minute</span>\nmoment.duration(<span class=\"number\">2</span>, <span class=\"string\">\"minutes\"</span>).humanize(); <span class=\"comment\">// 2 minutes</span>\nmoment.duration(<span class=\"number\">24</span>, <span class=\"string\">\"hours\"</span>).humanize();  <span class=\"comment\">// a day</span></pre> <p>By default, the return string is suffixless. If you want a suffix, pass in true as seen below.</p> <pre data-language=\"javascript\">moment.duration(<span class=\"number\">1</span>, <span class=\"string\">\"minutes\"</span>).humanize(<span class=\"literal\">true</span>); <span class=\"comment\">// in a minute</span></pre> <p>For suffixes before now, pass in a negative number.</p> <pre data-language=\"javascript\">moment.duration(-<span class=\"number\">1</span>, <span class=\"string\">\"minutes\"</span>).humanize(<span class=\"literal\">true</span>); <span class=\"comment\">// a minute ago</span></pre>     <h3 class=\"docs-method-title\" id=\"durations-milliseconds\"> Milliseconds <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().milliseconds();\nmoment.duration().asMilliseconds();</pre>  <p>To get the number of milliseconds in a duration, use <code>moment.duration().milliseconds()</code>.</p> <p>It will return a number between 0 and 999.</p> <pre data-language=\"javascript\">moment.duration(<span class=\"number\">500</span>).milliseconds(); <span class=\"comment\">// 500</span>\nmoment.duration(<span class=\"number\">1500</span>).milliseconds(); <span class=\"comment\">// 500</span>\nmoment.duration(<span class=\"number\">15000</span>).milliseconds(); <span class=\"comment\">// 0</span></pre> <p>If you want the length of the duration in milliseconds, use <code>moment.duration().asMilliseconds()</code> instead.</p> <pre data-language=\"javascript\">moment.duration(<span class=\"number\">500</span>).asMilliseconds(); <span class=\"comment\">// 500</span>\nmoment.duration(<span class=\"number\">1500</span>).asMilliseconds(); <span class=\"comment\">// 1500</span>\nmoment.duration(<span class=\"number\">15000</span>).asMilliseconds(); <span class=\"comment\">// 15000</span></pre>     <h3 class=\"docs-method-title\" id=\"durations-seconds\"> Seconds <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().seconds();\nmoment.duration().asSeconds();</pre>  <p>To get the number of seconds in a duration, use <code>moment.duration().seconds()</code>.</p> <p>It will return a number between 0 and 59.</p> <pre data-language=\"javascript\">moment.duration(<span class=\"number\">500</span>).seconds(); <span class=\"comment\">// 0</span>\nmoment.duration(<span class=\"number\">1500</span>).seconds(); <span class=\"comment\">// 1</span>\nmoment.duration(<span class=\"number\">15000</span>).seconds(); <span class=\"comment\">// 15</span></pre> <p>If you want the length of the duration in seconds, use <code>moment.duration().asSeconds()</code> instead.</p> <pre data-language=\"javascript\">moment.duration(<span class=\"number\">500</span>).asSeconds(); <span class=\"comment\">// 0.5</span>\nmoment.duration(<span class=\"number\">1500</span>).asSeconds(); <span class=\"comment\">// 1.5</span>\nmoment.duration(<span class=\"number\">15000</span>).asSeconds(); <span class=\"comment\">// 15</span></pre>     <h3 class=\"docs-method-title\" id=\"durations-minutes\"> Minutes <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().minutes();\nmoment.duration().asMinutes();</pre>  <p>As with the other getters for durations, <code>moment.duration().minutes()</code> gets the minutes (0 - 59).</p> <p><code>moment.duration().asMinutes()</code> gets the length of the duration in minutes.</p>     <h3 class=\"docs-method-title\" id=\"durations-hours\"> Hours <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().hours();\nmoment.duration().asHours();</pre>  <p>As with the other getters for durations, <code>moment.duration().hours()</code> gets the hours (0 - 23).</p> <p><code>moment.duration().asHours()</code> gets the length of the duration in hours.</p>     <h3 class=\"docs-method-title\" id=\"durations-days\"> Days <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().days();\nmoment.duration().asDays();</pre>  <p>As with the other getters for durations, <code>moment.duration().days()</code> gets the days (0 - 29).</p> <p><code>moment.duration().asDays()</code> gets the length of the duration in days.</p>     <h3 class=\"docs-method-title\" id=\"durations-weeks\"> Weeks <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().weeks();\nmoment.duration().asWeeks();</pre>  <p>As with the other getters for durations, <code>moment.duration().weeks()</code> gets the weeks (0 - 4).</p> <p><code>moment.duration().asWeeks()</code> gets the length of the duration in weeks.</p> <p>Pay attention that unlike the other getters for duration, weeks are counted as a subset of the days, and are not taken off the days count.</p> <p><strong>Note:</strong> The length of a duration in weeks is defined as 7 days.</p>     <h3 class=\"docs-method-title\" id=\"durations-months\"> Months <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().months();\nmoment.duration().asMonths();</pre>  <p>As with the other getters for durations, <code>moment.duration().months()</code> gets the months (0 - 11).</p> <p><code>moment.duration().asMonths()</code> gets the length of the duration in months.</p> <p><strong>Note:</strong> The length of a duration in months is defined as 30 days.</p>     <h3 class=\"docs-method-title\" id=\"durations-years\"> Years <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().years();\nmoment.duration().asYears();</pre>  <p>As with the other getters for durations, <code>moment.duration().years()</code> gets the years.</p> <p><code>moment.duration().asYears()</code> gets the length of the duration in years.</p> <p><strong>Note:</strong> The length of a duration in years is defined as 365 days.</p>     <h3 class=\"docs-method-title\" id=\"durations-add\"> Add Time <span>2.1.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().add(Number, String);\nmoment.duration().add(Number);\nmoment.duration().add(Duration);\nmoment.duration().add(Object);</pre>  <p>Mutates the original duration by adding time.</p> <p>The same keys and shorthands used to create durations can be used here as the second argument.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment.duration(<span class=\"number\">1</span>, <span class=\"string\">'d'</span>);\n<span class=\"keyword\">var</span> b = moment.duration(<span class=\"number\">2</span>, <span class=\"string\">'d'</span>);\na.add(b).days(); <span class=\"comment\">// 3</span></pre>     <h3 class=\"docs-method-title\" id=\"durations-subtract\"> Subtract Time <span>2.1.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().subtract(Number, String);\nmoment.duration().subtract(Number);\nmoment.duration().subtract(Duration);\nmoment.duration().subtract(Object);</pre>  <p>Mutates the original duration by subtracting time.</p> <p>The same keys and shorthands used to create durations can be used here as the second argument.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> a = moment.duration(<span class=\"number\">3</span>, <span class=\"string\">'d'</span>);\n<span class=\"keyword\">var</span> b = moment.duration(<span class=\"number\">2</span>, <span class=\"string\">'d'</span>);\na.subtract(b).days(); <span class=\"comment\">// 1</span></pre>     <h3 class=\"docs-method-title\" id=\"durations-as\"> As Unit of Time <span>2.1.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().as(String);</pre>  <p>As an alternate to <code>Duration#asX</code>, you can use <code>Duration#as('x')</code>. All the <a href=\"#/manipulating/add/\">shorthand keys from</a> <code>moment#add</code> apply here as well.</p> <pre data-language=\"javascript\">duration.as(<span class=\"string\">'hours'</span>);\nduration.as(<span class=\"string\">'minutes'</span>);\nduration.as(<span class=\"string\">'seconds'</span>);\nduration.as(<span class=\"string\">'milliseconds'</span>);</pre>     <h3 class=\"docs-method-title\" id=\"durations-get\"> Get Unit of Time <span>2.1.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().get(String);</pre>  <p>As an alternate to <code>Duration#x()</code> getters, you can use <code>Duration#get('x')</code>. All the <a href=\"#/manipulating/add/\">shorthand keys from</a> <code>moment#add</code> apply here as well.</p> <pre data-language=\"javascript\">duration.get(<span class=\"string\">'hours'</span>);\nduration.get(<span class=\"string\">'minutes'</span>);\nduration.get(<span class=\"string\">'seconds'</span>);\nduration.get(<span class=\"string\">'milliseconds'</span>);</pre>     <h3 class=\"docs-method-title\" id=\"durations-as-json\"> As JSON <span>2.9.0+</span> </h3>    <pre data-language=\"javascript\">moment.duration().toJSON();</pre>  <p>When serializing a duration object to JSON, it will be represented as an ISO8601 string.</p> <pre data-language=\"javascript\">JSON.stringify({\n    postDuration : moment.duration(<span class=\"number\">5</span>, <span class=\"string\">'m'</span>)\n}); <span class=\"comment\">// '{\"postDuration\":\"PT5M\"}'</span></pre>     <h3 class=\"docs-method-title\" id=\"durations-is-a-duration\"> Is a Duration <span>1.6.0+</span> </h3>    <pre data-language=\"javascript\">moment.isDuration(obj);</pre>  <p>To check if a variable is a moment duration object, use <code>moment.isDuration()</code>.</p> <pre data-language=\"javascript\">moment.isDuration() <span class=\"comment\">// false</span>\nmoment.isDuration(<span class=\"keyword\">new</span> Date()) <span class=\"comment\">// false</span>\nmoment.isDuration(moment()) <span class=\"comment\">// false</span>\nmoment.isDuration(moment.duration()) <span class=\"comment\">// true</span>\nmoment.isDuration(moment.duration(<span class=\"number\">2</span>, <span class=\"string\">'minutes'</span>)) <span class=\"comment\">// true</span></pre>     <h2 class=\"docs-section-title\" id=\"utilities\">Utilities</h2>     <p>Moment exposes some methods which may be useful to people extending the library or writing custom parsers.</p>     <h3 class=\"docs-method-title\" id=\"utilities-normalize-units\"> Normalize Units <span>2.3.0+</span> </h3>    <pre data-language=\"javascript\">moment.normalizeUnits(String);</pre>  <p>Many of Moment's functions allow the caller to pass in aliases for unit enums. For example, all of the <code>get</code>s below are equivalent.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> m = moment();\nm.get(<span class=\"string\">'y'</span>);\nm.get(<span class=\"string\">'year'</span>);\nm.get(<span class=\"string\">'years'</span>);</pre> <p>If you're extending the library, you may want access to Moment's facilities for that in order to better align your functionality with Moment's.</p> <pre data-language=\"javascript\">moment.normalizeUnits(<span class=\"string\">'y'</span>);      <span class=\"comment\">// 'year'</span>\nmoment.normalizeUnits(<span class=\"string\">'Y'</span>);      <span class=\"comment\">// 'year'</span>\nmoment.normalizeUnits(<span class=\"string\">'year'</span>);   <span class=\"comment\">// 'year'</span>\nmoment.normalizeUnits(<span class=\"string\">'years'</span>);  <span class=\"comment\">// 'year'</span>\nmoment.normalizeUnits(<span class=\"string\">'YeARS'</span>);  <span class=\"comment\">// 'year'</span></pre>     <h3 class=\"docs-method-title\" id=\"utilities-invalid\"> Invalid <span>2.3.0+</span> </h3>    <pre data-language=\"javascript\">moment.invalid(Object);</pre>  <p>You can create your own invalid Moment objects, which is useful in making your own parser.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> m = moment.invalid();\nm.isValid();                      <span class=\"comment\">// false</span>\nm.format();                       <span class=\"comment\">// 'Invalid date'</span>\nm.parsingFlags().userInvalidated; <span class=\"comment\">// true</span></pre> <p><code>invalid</code> also accepts an object which specifies which parsing flags to set. This will <em>not</em> set the <code>userInvalidated</code> parsing flag unless it's one of the properties specified.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> m = moment.invalid({invalidMonth: <span class=\"string\">'Actober'</span>});\nm.parsingFlags().invalidMonth; <span class=\"comment\">// 'Actober'</span></pre> <p>You need not specify parsing flags recognized by Moment; the Moment will be invalid nonetheless, and the parsing flags will be returned by <code>parsingFlags()</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Tim Wood, Iskren Chernev, Moment.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://momentjs.com/docs/\" class=\"_attribution-link\">http://momentjs.com/docs/</a>\n  </p>\n</div>\n"}