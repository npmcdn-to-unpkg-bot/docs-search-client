{"index":"<h1>Julia Documentation</h1> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#manual\"><span>Manual</span></a></li> <li><a class=\"reference internal\" href=\"#stdlib\"><span>Standard Library</span></a></li> <li><a class=\"reference internal\" href=\"#devdocs\"><span>Developer Documentation</span></a></li> </ul>  <h2 id=\"id1\">Manual</h2>  <ul id=\"manual\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/introduction/index\">Introduction</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/getting-started/index\">Getting Started</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/variables/index\">Variables</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/integers-and-floating-point-numbers/index\">Integers and Floating-Point Numbers</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/mathematical-operations/index\">Mathematical Operations and Elementary Functions</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/complex-and-rational-numbers/index\">Complex and Rational Numbers</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/strings/index\">Strings</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/functions/index\">Functions</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/control-flow/index\">Control Flow</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/variables-and-scoping/index\">Scope of Variables</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/types/index\">Types</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/methods/index\">Methods</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/constructors/index\">Constructors</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/conversion-and-promotion/index\">Conversion and Promotion</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/interfaces/index\">Interfaces</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/modules/index\">Modules</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/documentation/index\">Documentation</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/metaprogramming/index\">Metaprogramming</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/arrays/index\">Multi-dimensional Arrays</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/linear-algebra/index\">Linear algebra</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/networking-and-streams/index\">Networking and Streams</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/parallel-computing/index\">Parallel Computing</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/dates/index\">Date and DateTime</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/running-external-programs/index\">Running External Programs</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code/index\">Calling C and Fortran Code</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/interacting-with-julia/index\">Interacting With Julia</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/embedding/index\">Embedding Julia</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/packages/index\">Packages</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/packages/index#package-development\">Package Development</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/profile/index\">Profiling</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/profile/index#memory-allocation-analysis\">Memory allocation analysis</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/performance-tips/index\">Performance Tips</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/workflow-tips/index\">Workflow Tips</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/style-guide/index\">Style Guide</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/faq/index\">Frequently Asked Questions</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/noteworthy-differences/index\">Noteworthy Differences from other Languages</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/unicode-input/index\">Unicode Input</a></li> </ul>    <h2 id=\"stdlib\">Standard Library</h2>  <ul id=\"standard-library\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/base/index\">Essentials</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/collections/index\">Collections and Data Structures</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/math/index\">Mathematics</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/numbers/index\">Numbers</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/strings/index\">Strings</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/arrays/index\">Arrays</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/parallel/index\">Tasks and Parallel Computing</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/linalg/index\">Linear Algebra</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/constants/index\">Constants</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/file/index\">Filesystem</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/io-network/index\">I/O and Network</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/punctuation/index\">Punctuation</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/sort/index\">Sorting and Related Functions</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/pkg/index\">Package Manager Functions</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/dates/index\">Dates and Time</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/test/index\">Unit and Functional Testing</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/c/index\">C Interface</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/c/index#llvm-interface\">LLVM Interface</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/libc/index\">C Standard Library</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/libdl/index\">Dynamic Linker</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/profile/index\">Profiling</a></li> </ul>    <h2 id=\"devdocs\">Developer Documentation</h2>  <ul id=\"developer-documentation\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/reflection/\">Reflection and introspection</a></li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/julia/\">Documentation of Julia’s Internals</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/init/\">Initialization of the Julia runtime</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/eval/\">Eval of Julia code</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/ast/\">Julia ASTs</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/types/\">More about types</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/object/\">Memory layout of Julia Objects</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/cartesian/\">Base.Cartesian</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/meta/\">Talking to the compiler (the <code>:meta</code> mechanism)</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/subarrays/\">SubArrays</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/sysimg/\">System Image Building</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/llvm/\">Working with LLVM</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/stdio/\">printf() and stdio in the Julia runtime</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/promote-op/\">Operator-sensitive promotion</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/C/\">Developing/debugging Julia’s C code</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/backtraces/\">Reporting and analyzing crashes (segfaults)</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/debuggingtips/\">gdb debugging tips</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/valgrind/\">Using Valgrind with Julia</a></li> </ul> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/</a>\n  </p>\n</div>\n","manual/introduction/index":"<h1 id=\"man-introduction\">Introduction</h1> <p>Scientific computing has traditionally required the highest performance, yet domain experts have largely moved to slower dynamic languages for daily work. We believe there are many good reasons to prefer dynamic languages for these applications, and we do not expect their use to diminish. Fortunately, modern language design and compiler techniques make it possible to mostly eliminate the performance trade-off and provide a single environment productive enough for prototyping and efficient enough for deploying performance-intensive applications. The Julia programming language fills this role: it is a flexible dynamic language, appropriate for scientific and numerical computing, with performance comparable to traditional statically-typed languages.</p> <p>Because Julia’s compiler is different from the interpreters used for languages like Python or R, you may find that Julia’s performance is unintuitive at first. If you find that something is slow, we highly recommend reading through the <a class=\"reference internal\" href=\"../performance-tips/index#man-performance-tips\"><span>Performance Tips</span></a> section before trying anything else. Once you understand how Julia works, it’s easy to write code that’s nearly as fast as C.</p> <p>Julia features optional typing, multiple dispatch, and good performance, achieved using type inference and <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Just-in-time_compilation\">just-in-time (JIT) compilation</a>, implemented using <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Low_Level_Virtual_Machine\">LLVM</a>. It is multi-paradigm, combining features of imperative, functional, and object-oriented programming. Julia provides ease and expressiveness for high-level numerical computing, in the same way as languages such as R, MATLAB, and Python, but also supports general programming. To achieve this, Julia builds upon the lineage of mathematical programming languages, but also borrows much from popular dynamic languages, including <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Lisp_(programming_language)\">Lisp</a>, <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Perl_(programming_language)\">Perl</a>, <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Python_(programming_language)\">Python</a>, <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Lua_(programming_language)\">Lua</a>, and <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Ruby_(programming_language)\">Ruby</a>.</p> <p>The most significant departures of Julia from typical dynamic languages are:</p> <ul class=\"simple\"> <li>The core language imposes very little; the standard library is written in Julia itself, including primitive operations like integer arithmetic</li> <li>A rich language of types for constructing and describing objects, that can also optionally be used to make type declarations</li> <li>The ability to define function behavior across many combinations of argument types via <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Multiple_dispatch\">multiple dispatch</a>\n</li> <li>Automatic generation of efficient, specialized code for different argument types</li> <li>Good performance, approaching that of statically-compiled languages like C</li> </ul> <p>Although one sometimes speaks of dynamic languages as being “typeless”, they are definitely not: every object, whether primitive or user-defined, has a type. The lack of type declarations in most dynamic languages, however, means that one cannot instruct the compiler about the types of values, and often cannot explicitly talk about types at all. In static languages, on the other hand, while one can — and usually must — annotate types for the compiler, types exist only at compile time and cannot be manipulated or expressed at run time. In Julia, types are themselves run-time objects, and can also be used to convey information to the compiler.</p> <p>While the casual programmer need not explicitly use types or multiple dispatch, they are the core unifying features of Julia: functions are defined on different combinations of argument types, and applied by dispatching to the most specific matching definition. This model is a good fit for mathematical programming, where it is unnatural for the first argument to “own” an operation as in traditional object-oriented dispatch. Operators are just functions with special notation — to extend addition to new user-defined data types, you define new methods for the <code>+</code> function. Existing code then seamlessly applies to the new data types.</p> <p>Partly because of run-time type inference (augmented by optional type annotations), and partly because of a strong focus on performance from the inception of the project, Julia’s computational efficiency exceeds that of other dynamic languages, and even rivals that of statically-compiled languages. For large scale numerical problems, speed always has been, continues to be, and probably always will be crucial: the amount of data being processed has easily kept pace with Moore’s Law over the past decades.</p> <p>Julia aims to create an unprecedented combination of ease-of-use, power, and efficiency in a single language. In addition to the above, some advantages of Julia over comparable systems include:</p> <ul class=\"simple\"> <li>Free and open source (<a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/LICENSE.md\">MIT licensed</a>)</li> <li>User-defined types are as fast and compact as built-ins</li> <li>No need to vectorize code for performance; devectorized code is fast</li> <li>Designed for parallelism and distributed computation</li> <li>Lightweight “green” threading (<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Coroutine\">coroutines</a>)</li> <li>Unobtrusive yet powerful type system</li> <li>Elegant and extensible conversions and promotions for numeric and other types</li> <li>Efficient support for <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Unicode\">Unicode</a>, including but not limited to <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/UTF-8\">UTF-8</a>\n</li> <li>Call C functions directly (no wrappers or special APIs needed)</li> <li>Powerful shell-like capabilities for managing other processes</li> <li>Lisp-like macros and other metaprogramming facilities</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/introduction/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/introduction/</a>\n  </p>\n</div>\n","manual/variables/index":"<h1>Variables</h1> <p>A variable, in Julia, is a name associated (or bound) to a value. It’s useful when you want to store a value (that you obtained after some math, for example) for later use. For example:</p> <pre data-language=\"julia\"># Assign the value 10 to the variable x\njulia&gt; x = 10\n10\n\n# Doing math with x's value\njulia&gt; x + 1\n11\n\n# Reassign x's value\njulia&gt; x = 1 + 1\n2\n\n# You can assign values of other types, like strings of text\njulia&gt; x = \"Hello World!\"\n\"Hello World!\"\n</pre> <p>Julia provides an extremely flexible system for naming variables. Variable names are case-sensitive, and have no semantic meaning (that is, the language will not treat variables differently based on their names).</p> <pre data-language=\"julia\">julia&gt; x = 1.0\n1.0\n\njulia&gt; y = -3\n-3\n\njulia&gt; Z = \"My string\"\n\"My string\"\n\njulia&gt; customary_phrase = \"Hello world!\"\n\"Hello world!\"\n\njulia&gt; UniversalDeclarationOfHumanRightsStart = \"人人生而自由，在尊严和权力上一律平等。\"\n\"人人生而自由，在尊严和权力上一律平等。\"\n</pre> <p>Unicode names (in UTF-8 encoding) are allowed:</p> <pre data-language=\"julia\">julia&gt; δ = 0.00001\n1.0e-5\n\njulia&gt; 안녕하세요 = \"Hello\"\n\"Hello\"\n</pre> <p>In the Julia REPL and several other Julia editing environments, you can type many Unicode math symbols by typing the backslashed LaTeX symbol name followed by tab. For example, the variable name <code>δ</code> can be entered by typing <code>\\delta</code>-<em>tab</em>, or even <code>α̂₂</code> by <code>\\alpha</code>-<em>tab</em>-<code>\\hat</code>-<em>tab</em>-<code>\\_2</code>-<em>tab</em>.</p> <p>Julia will even let you redefine built-in constants and functions if needed:</p> <pre data-language=\"julia\">julia&gt; pi\nπ = 3.1415926535897...\n\njulia&gt; pi = 3\nWARNING: imported binding for pi overwritten in module Main\n3\n\njulia&gt; pi\n3\n\njulia&gt; sqrt(100)\n10.0\n\njulia&gt; sqrt = 4\nWARNING: imported binding for sqrt overwritten in module Main\n4\n</pre> <p>However, this is obviously not recommended to avoid potential confusion.</p>  <h2 id=\"allowed-variable-names\">Allowed Variable Names</h2> <p>Variable names must begin with a letter (A-Z or a-z), underscore, or a subset of Unicode code points greater than 00A0; in particular, <a class=\"reference external\" href=\"http://www.fileformat.info/info/unicode/category/index.htm\">Unicode character categories</a> Lu/Ll/Lt/Lm/Lo/Nl (letters), Sc/So (currency and other symbols), and a few other letter-like characters (e.g. a subset of the Sm math symbols) are allowed. Subsequent characters may also include ! and digits (0-9 and other characters in categories Nd/No), as well as other Unicode code points: diacritics and other modifying marks (categories Mn/Mc/Me/Sk), some punctuation connectors (category Pc), primes, and a few other characters.</p> <p>Operators like <code>+</code> are also valid identifiers, but are parsed specially. In some contexts, operators can be used just like variables; for example <code>(+)</code> refers to the addition function, and <code>(+) = f</code> will reassign it. Most of the Unicode infix operators (in category Sm), such as <code>⊕</code>, are parsed as infix operators and are available for user-defined methods (e.g. you can use <code>const ⊗ = kron</code> to define <code>⊗</code> as an infix Kronecker product).</p> <p>The only explicitly disallowed names for variables are the names of built-in statements:</p> <pre data-language=\"julia\">julia&gt; else = false\nERROR: syntax: unexpected \"else\"\n\njulia&gt; try = \"No\"\nERROR: syntax: unexpected \"=\"\n</pre>   <h2 id=\"stylistic-conventions\">Stylistic Conventions</h2> <p>While Julia imposes few restrictions on valid names, it has become useful to adopt the following conventions:</p> <ul class=\"simple\"> <li>Names of variables are in lower case.</li> <li>Word separation can be indicated by underscores (<code>'_'</code>), but use of underscores is discouraged unless the name would be hard to read otherwise.</li> <li>Names of <code>Type</code>s and <code>Module</code>s begin with a capital letter and word separation is shown with upper camel case instead of underscores.</li> <li>Names of <code>function</code>s and <code>macro</code>s are in lower case, without underscores.</li> <li>Functions that write to their arguments have names that end in <code>!</code>. These are sometimes called “mutating” or “in-place” functions because they are intended to produce changes in their arguments after the function is called, not just return a value.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/variables/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/variables/</a>\n  </p>\n</div>\n","manual/complex-and-rational-numbers/index":"<h1 id=\"man-complex-and-rational-numbers\">Complex and Rational Numbers</h1> <p>Julia ships with predefined types representing both complex and rational numbers, and supports all <a class=\"reference internal\" href=\"../mathematical-operations/index#man-mathematical-operations\"><span>standard mathematical operations</span></a> on them. <a class=\"reference internal\" href=\"../conversion-and-promotion/index#man-conversion-and-promotion\"><span>Conversion and Promotion</span></a> are defined so that operations on any combination of predefined numeric types, whether primitive or composite, behave as expected.</p>  <h2 id=\"man-complex-numbers\">Complex Numbers</h2> <p id=\"complex-numbers\">The global constant <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.im\" title=\"Base.im\"><code>im</code></a> is bound to the complex number <em>i</em>, representing the principal square root of -1. It was deemed harmful to co-opt the name <code>i</code> for a global constant, since it is such a popular index variable name. Since Julia allows numeric literals to be <a class=\"reference internal\" href=\"../integers-and-floating-point-numbers/index#man-numeric-literal-coefficients\"><span>juxtaposed with identifiers as coefficients</span></a>, this binding suffices to provide convenient syntax for complex numbers, similar to the traditional mathematical notation:</p> <pre data-language=\"julia\">julia&gt; 1 + 2im\n1 + 2im\n</pre> <p>You can perform all the standard arithmetic operations with complex numbers:</p> <pre data-language=\"julia\">julia&gt; (1 + 2im)*(2 - 3im)\n8 + 1im\n\njulia&gt; (1 + 2im)/(1 - 2im)\n-0.6 + 0.8im\n\njulia&gt; (1 + 2im) + (1 - 2im)\n2 + 0im\n\njulia&gt; (-3 + 2im) - (5 - 1im)\n-8 + 3im\n\njulia&gt; (-1 + 2im)^2\n-3 - 4im\n\njulia&gt; (-1 + 2im)^2.5\n2.7296244647840084 - 6.960664459571898im\n\njulia&gt; (-1 + 2im)^(1 + 1im)\n-0.27910381075826657 + 0.08708053414102428im\n\njulia&gt; 3(2 - 5im)\n6 - 15im\n\njulia&gt; 3(2 - 5im)^2\n-63 - 60im\n\njulia&gt; 3(2 - 5im)^-1.0\n0.20689655172413796 + 0.5172413793103449im\n</pre> <p>The promotion mechanism ensures that combinations of operands of different types just work:</p> <pre data-language=\"julia\">julia&gt; 2(1 - 1im)\n2 - 2im\n\njulia&gt; (2 + 3im) - 1\n1 + 3im\n\njulia&gt; (1 + 2im) + 0.5\n1.5 + 2.0im\n\njulia&gt; (2 + 3im) - 0.5im\n2.0 + 2.5im\n\njulia&gt; 0.75(1 + 2im)\n0.75 + 1.5im\n\njulia&gt; (2 + 3im) / 2\n1.0 + 1.5im\n\njulia&gt; (1 - 3im) / (2 + 2im)\n-0.5 - 1.0im\n\njulia&gt; 2im^2\n-2 + 0im\n\njulia&gt; 1 + 3/4im\n1.0 - 0.75im\n</pre> <p>Note that <code>3/4im == 3/(4im) == -(3/4)im</code>, since a literal coefficient binds more tightly than division.</p> <p>Standard functions to manipulate complex values are provided:</p> <pre data-language=\"julia\">julia&gt; real(1 + 2im)\n1\n\njulia&gt; imag(1 + 2im)\n2\n\njulia&gt; conj(1 + 2im)\n1 - 2im\n\njulia&gt; abs(1 + 2im)\n2.23606797749979\n\njulia&gt; abs2(1 + 2im)\n5\n\njulia&gt; angle(1 + 2im)\n1.1071487177940904\n</pre> <p>As usual, the absolute value (<a class=\"reference internal\" href=\"../../stdlib/math/index#Base.abs\" title=\"Base.abs\"><code>abs()</code></a>) of a complex number is its distance from zero. <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.abs2\" title=\"Base.abs2\"><code>abs2()</code></a> gives the square of the absolute value, and is of particular use for complex numbers where it avoids taking a square root. <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.angle\" title=\"Base.angle\"><code>angle()</code></a> returns the phase angle in radians (also known as the <em>argument</em> or <em>arg</em> function). The full gamut of other <a class=\"reference internal\" href=\"../mathematical-operations/index#man-elementary-functions\"><span>Elementary Functions</span></a> is also defined for complex numbers:</p> <pre data-language=\"julia\">julia&gt; sqrt(1im)\n0.7071067811865476 + 0.7071067811865475im\n\njulia&gt; sqrt(1 + 2im)\n1.272019649514069 + 0.7861513777574233im\n\njulia&gt; cos(1 + 2im)\n2.0327230070196656 - 3.0518977991518im\n\njulia&gt; exp(1 + 2im)\n-1.1312043837568135 + 2.4717266720048188im\n\njulia&gt; sinh(1 + 2im)\n-0.4890562590412937 + 1.4031192506220405im\n</pre> <p>Note that mathematical functions typically return real values when applied to real numbers and complex values when applied to complex numbers. For example, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sqrt\" title=\"Base.sqrt\"><code>sqrt()</code></a> behaves differently when applied to <code>-1</code> versus <code>-1 + 0im</code> even though <code>-1 == -1 + 0im</code>:</p> <pre data-language=\"julia\">julia&gt; sqrt(-1)\nERROR: DomainError:\nsqrt will only return a complex result if called with a complex argument. Try sqrt(complex(x)).\n in sqrt at math.jl:146\n\njulia&gt; sqrt(-1 + 0im)\n0.0 + 1.0im\n</pre> <p>The <a class=\"reference internal\" href=\"../integers-and-floating-point-numbers/index#man-numeric-literal-coefficients\"><span>literal numeric coefficient notation</span></a> does not work when constructing complex number from variables. Instead, the multiplication must be explicitly written out:</p> <pre data-language=\"julia\">julia&gt; a = 1; b = 2; a + b*im\n1 + 2im\n</pre> <p>However, this is <em>not</em> recommended; Use the <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.complex\" title=\"Base.complex\"><code>complex()</code></a> function instead to construct a complex value directly from its real and imaginary parts.:</p> <pre data-language=\"julia\">julia&gt; complex(a,b)\n1 + 2im\n</pre> <p>This construction avoids the multiplication and addition operations.</p> <p><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Inf\" title=\"Base.Inf\"><code>Inf</code></a> and <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.NaN\" title=\"Base.NaN\"><code>NaN</code></a> propagate through complex numbers in the real and imaginary parts of a complex number as described in the <a class=\"reference internal\" href=\"../integers-and-floating-point-numbers/index#man-special-floats\"><span>Special floating-point values</span></a> section:</p> <pre data-language=\"julia\">julia&gt; 1 + Inf*im\n1.0 + Inf*im\n\njulia&gt; 1 + NaN*im\n1.0 + NaN*im\n</pre>   <h2 id=\"man-rational-numbers\">Rational Numbers</h2> <p id=\"rational-numbers\">Julia has a rational number type to represent exact ratios of integers. Rationals are constructed using the <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.//\" title=\"Base.//\"><code>//</code></a> operator:</p> <pre data-language=\"julia\">julia&gt; 2//3\n2//3\n</pre> <p>If the numerator and denominator of a rational have common factors, they are reduced to lowest terms such that the denominator is non-negative:</p> <pre data-language=\"julia\">julia&gt; 6//9\n2//3\n\njulia&gt; -4//8\n-1//2\n\njulia&gt; 5//-15\n-1//3\n\njulia&gt; -4//-12\n1//3\n</pre> <p>This normalized form for a ratio of integers is unique, so equality of rational values can be tested by checking for equality of the numerator and denominator. The standardized numerator and denominator of a rational value can be extracted using the <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.num\" title=\"Base.num\"><code>num()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.den\" title=\"Base.den\"><code>den()</code></a> functions:</p> <pre data-language=\"julia\">julia&gt; num(2//3)\n2\n\njulia&gt; den(2//3)\n3\n</pre> <p>Direct comparison of the numerator and denominator is generally not necessary, since the standard arithmetic and comparison operations are defined for rational values:</p> <pre data-language=\"julia\">julia&gt; 2//3 == 6//9\ntrue\n\njulia&gt; 2//3 == 9//27\nfalse\n\njulia&gt; 3//7 &lt; 1//2\ntrue\n\njulia&gt; 3//4 &gt; 2//3\ntrue\n\njulia&gt; 2//4 + 1//6\n2//3\n\njulia&gt; 5//12 - 1//4\n1//6\n\njulia&gt; 5//8 * 3//12\n5//32\n\njulia&gt; 6//5 / 10//7\n21//25\n</pre> <p>Rationals can be easily converted to floating-point numbers:</p> <pre data-language=\"julia\">julia&gt; float(3//4)\n0.75\n</pre> <p>Conversion from rational to floating-point respects the following identity for any integral values of <code>a</code> and <code>b</code>, with the exception of the case <code>a == 0</code> and <code>b == 0</code>:</p> <pre data-language=\"julia\">julia&gt; isequal(float(a//b), a/b)\ntrue\n</pre> <p>Constructing infinite rational values is acceptable:</p> <pre data-language=\"julia\">julia&gt; 5//0\n1//0\n\njulia&gt; -3//0\n-1//0\n\njulia&gt; typeof(ans)\nRational{Int64}\n</pre> <p>Trying to construct a <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.NaN\" title=\"Base.NaN\"><code>NaN</code></a> rational value, however, is not:</p> <pre data-language=\"julia\">julia&gt; 0//0\nERROR: ArgumentError: invalid rational: zero(Int64)//zero(Int64)\n in call at rational.jl:8\n in // at rational.jl:22\n</pre> <p>As usual, the promotion system makes interactions with other numeric types effortless:</p> <pre data-language=\"julia\">julia&gt; 3//5 + 1\n8//5\n\njulia&gt; 3//5 - 0.5\n0.09999999999999998\n\njulia&gt; 2//7 * (1 + 2im)\n2//7 + 4//7*im\n\njulia&gt; 2//7 * (1.5 + 2im)\n0.42857142857142855 + 0.5714285714285714im\n\njulia&gt; 3//2 / (1 + 2im)\n3//10 - 3//5*im\n\njulia&gt; 1//2 + 2im\n1//2 + 2//1*im\n\njulia&gt; 1 + 2//3im\n1//1 - 2//3*im\n\njulia&gt; 0.5 == 1//2\ntrue\n\njulia&gt; 0.33 == 1//3\nfalse\n\njulia&gt; 0.33 &lt; 1//3\ntrue\n\njulia&gt; 1//3 - 0.33\n0.0033333333333332993\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/complex-and-rational-numbers/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/complex-and-rational-numbers/</a>\n  </p>\n</div>\n","manual/linear-algebra/index":"<h1>Linear algebra</h1>  <h2 id=\"matrix-factorizations\">Matrix factorizations</h2> <p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Matrix_decomposition\">Matrix factorizations (a.k.a. matrix decompositions)</a> compute the factorization of a matrix into a product of matrices, and are one of the central concepts in linear algebra.</p> <p>The following table summarizes the types of matrix factorizations that have been implemented in Julia. Details of their associated methods can be found in the <a class=\"reference internal\" href=\"../../stdlib/linalg/index#stdlib-linalg\"><span>Linear Algebra</span></a> section of the standard library documentation.</p> <table class=\"docutils\">   <tr class=\"row-odd\">\n<td><code>Cholesky</code></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Cholesky_decomposition\">Cholesky factorization</a></td> </tr> <tr class=\"row-even\">\n<td><code>CholeskyPivoted</code></td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Pivot_element\">Pivoted</a> Cholesky factorization</td> </tr> <tr class=\"row-odd\">\n<td><code>LU</code></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/LU_decomposition\">LU factorization</a></td> </tr> <tr class=\"row-even\">\n<td><code>LUTridiagonal</code></td> <td>LU factorization for Tridiagonal matrices</td> </tr> <tr class=\"row-odd\">\n<td><code>UmfpackLU</code></td> <td>LU factorization for sparse matrices (computed by UMFPack)</td> </tr> <tr class=\"row-even\">\n<td><code>QR</code></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/QR_decomposition\">QR factorization</a></td> </tr> <tr class=\"row-odd\">\n<td><code>QRCompactWY</code></td> <td>Compact WY form of the QR factorization</td> </tr> <tr class=\"row-even\">\n<td><code>QRPivoted</code></td> <td>Pivoted <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/QR_decomposition\">QR factorization</a>\n</td> </tr> <tr class=\"row-odd\">\n<td><code>Hessenberg</code></td> <td><a class=\"reference external\" href=\"http://mathworld.wolfram.com/HessenbergDecomposition.html\">Hessenberg decomposition</a></td> </tr> <tr class=\"row-even\">\n<td><code>Eigen</code></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Eigendecomposition_(matrix)\">Spectral decomposition</a></td> </tr> <tr class=\"row-odd\">\n<td><code>SVD</code></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Singular_value_decomposition\">Singular value decomposition</a></td> </tr> <tr class=\"row-even\">\n<td><code>GeneralizedSVD</code></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Generalized_singular_value_decomposition#Higher_order_version\">Generalized SVD</a></td> </tr>  </table>   <h2 id=\"special-matrices\">Special matrices</h2> <p><a class=\"reference external\" href=\"http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=3274\">Matrices with special symmetries and structures</a> arise often in linear algebra and are frequently associated with various matrix factorizations. Julia features a rich collection of special matrix types, which allow for fast computation with specialized routines that are specially developed for particular matrix types.</p> <p>The following tables summarize the types of special matrices that have been implemented in Julia, as well as whether hooks to various optimized methods for them in LAPACK are available.</p> <table class=\"docutils\">   <tr class=\"row-odd\">\n<td><code>Hermitian</code></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Hermitian_matrix\">Hermitian matrix</a></td> </tr> <tr class=\"row-even\">\n<td><code>UpperTriangular</code></td> <td>Upper <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Triangular_matrix\">triangular matrix</a>\n</td> </tr> <tr class=\"row-odd\">\n<td><code>LowerTriangular</code></td> <td>Lower <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Triangular_matrix\">triangular matrix</a>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.Tridiagonal\" title=\"Base.Tridiagonal\"><code>Tridiagonal</code></a></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Tridiagonal_matrix\">Tridiagonal matrix</a></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.SymTridiagonal\" title=\"Base.SymTridiagonal\"><code>SymTridiagonal</code></a></td> <td>Symmetric tridiagonal matrix</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.Bidiagonal\" title=\"Base.Bidiagonal\"><code>Bidiagonal</code></a></td> <td>Upper/lower <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bidiagonal_matrix\">bidiagonal matrix</a>\n</td> </tr> <tr class=\"row-odd\">\n<td><code>Diagonal</code></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Diagonal_matrix\">Diagonal matrix</a></td> </tr> <tr class=\"row-even\">\n<td><code>UniformScaling</code></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Uniform_scaling\">Uniform scaling operator</a></td> </tr>  </table>  <h3 id=\"elementary-operations\">Elementary operations</h3> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Matrix type</th> <th class=\"head\"><code>+</code></th> <th class=\"head\"><code>-</code></th> <th class=\"head\"><code>*</code></th> <th class=\"head\"><code>\\</code></th> <th class=\"head\">Other functions with optimized methods</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>Hermitian</code></td> <td> </td> <td> </td> <td> </td> <td>MV</td> <td>\n<a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.inv\" title=\"Base.inv\"><code>inv()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.sqrtm\" title=\"Base.sqrtm\"><code>sqrtm()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.expm\" title=\"Base.expm\"><code>expm()</code></a>\n</td> </tr> <tr class=\"row-odd\">\n<td><code>UpperTriangular</code></td> <td> </td> <td> </td> <td>MV</td> <td>MV</td> <td>\n<a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.inv\" title=\"Base.inv\"><code>inv()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.det\" title=\"Base.det\"><code>det()</code></a>\n</td> </tr> <tr class=\"row-even\">\n<td><code>LowerTriangular</code></td> <td> </td> <td> </td> <td>MV</td> <td>MV</td> <td>\n<a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.inv\" title=\"Base.inv\"><code>inv()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.det\" title=\"Base.det\"><code>det()</code></a>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.SymTridiagonal\" title=\"Base.SymTridiagonal\"><code>SymTridiagonal</code></a></td> <td>M</td> <td>M</td> <td>MS</td> <td>MV</td> <td>\n<a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.eigmax\" title=\"Base.eigmax\"><code>eigmax()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.eigmin\" title=\"Base.eigmin\"><code>eigmin()</code></a>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.Tridiagonal\" title=\"Base.Tridiagonal\"><code>Tridiagonal</code></a></td> <td>M</td> <td>M</td> <td>MS</td> <td>MV</td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.Bidiagonal\" title=\"Base.Bidiagonal\"><code>Bidiagonal</code></a></td> <td>M</td> <td>M</td> <td>MS</td> <td>MV</td> <td> </td> </tr> <tr class=\"row-even\">\n<td><code>Diagonal</code></td> <td>M</td> <td>M</td> <td>MV</td> <td>MV</td> <td>\n<a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.inv\" title=\"Base.inv\"><code>inv()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.det\" title=\"Base.det\"><code>det()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.logdet\" title=\"Base.logdet\"><code>logdet()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base./\" title=\"Base./\"><code>/()</code></a>\n</td> </tr> <tr class=\"row-odd\">\n<td><code>UniformScaling</code></td> <td>M</td> <td>M</td> <td>MVS</td> <td>MVS</td> <td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base./\" title=\"Base./\"><code>/()</code></a></td> </tr>  </table> <p>Legend:</p> <table class=\"docutils\">   <tr class=\"row-odd\">\n<td>M (matrix)</td> <td>An optimized method for matrix-matrix operations is available</td> </tr> <tr class=\"row-even\">\n<td>V (vector)</td> <td>An optimized method for matrix-vector operations is available</td> </tr> <tr class=\"row-odd\">\n<td>S (scalar)</td> <td>An optimized method for matrix-scalar operations is available</td> </tr>  </table>   <h3 id=\"id3\">Matrix factorizations</h3> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Matrix type</th> <th class=\"head\">LAPACK</th> <th class=\"head\"><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.eig\" title=\"Base.eig\"><code>eig()</code></a></th> <th class=\"head\"><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.eigvals\" title=\"Base.eigvals\"><code>eigvals()</code></a></th> <th class=\"head\"><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.eigvecs\" title=\"Base.eigvecs\"><code>eigvecs()</code></a></th> <th class=\"head\"><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.svd\" title=\"Base.svd\"><code>svd()</code></a></th> <th class=\"head\"><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.svdvals\" title=\"Base.svdvals\"><code>svdvals()</code></a></th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>Hermitian</code></td> <td>HE</td> <td> </td> <td>ARI</td> <td> </td> <td> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><code>UpperTriangular</code></td> <td>TR</td> <td>A</td> <td>A</td> <td>A</td> <td> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td><code>LowerTriangular</code></td> <td>TR</td> <td>A</td> <td>A</td> <td>A</td> <td> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.SymTridiagonal\" title=\"Base.SymTridiagonal\"><code>SymTridiagonal</code></a></td> <td>ST</td> <td>A</td> <td>ARI</td> <td>AV</td> <td> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.Tridiagonal\" title=\"Base.Tridiagonal\"><code>Tridiagonal</code></a></td> <td>GT</td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.Bidiagonal\" title=\"Base.Bidiagonal\"><code>Bidiagonal</code></a></td> <td>BD</td> <td> </td> <td> </td> <td> </td> <td>A</td> <td>A</td> </tr> <tr class=\"row-even\">\n<td><code>Diagonal</code></td> <td>DI</td> <td> </td> <td>A</td> <td> </td> <td> </td> <td> </td> </tr>  </table> <p>Legend:</p> <table class=\"docutils\">   <tr class=\"row-odd\">\n<td>A (all)</td> <td>An optimized method to find all the characteristic values and/or vectors is available</td> <td>e.g. <code>eigvals(M)</code>\n</td> </tr> <tr class=\"row-even\">\n<td>R (range)</td> <td>An optimized method to find the <code>il</code><sup>th</sup> through the <code>ih</code><sup>th</sup> characteristic values are available</td> <td><code>eigvals(M, il, ih)</code></td> </tr> <tr class=\"row-odd\">\n<td>I (interval)</td> <td>An optimized method to find the characteristic values in the interval [<code>vl</code>, <code>vh</code>] is available</td> <td><code>eigvals(M, vl, vh)</code></td> </tr> <tr class=\"row-even\">\n<td>V (vectors)</td> <td>An optimized method to find the characteristic vectors corresponding to the characteristic values <code>x=[x1, x2,...]</code> is available</td> <td><code>eigvecs(M, x)</code></td> </tr>  </table>   <h3 id=\"the-uniform-scaling-operator\">The uniform scaling operator</h3> <p>A <code>UniformScaling</code> operator represents a scalar times the identity operator, <code>λ*I</code>. The identity operator <code>I</code> is defined as a constant and is an instance of <code>UniformScaling</code>. The size of these operators are generic and match the other matrix in the binary operations <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.+\" title=\"Base.+\"><code>+</code></a>, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.-\" title=\"Base.-\"><code>-</code></a>, <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.*\" title=\"Base.*\"><code>*</code></a> and <a class=\"reference internal\" href=\"#\" title=\"Base.\\\"><code>\\</code></a>. For <code>A+I</code> and <code>A-I</code> this means that <code>A</code> must be square. Multiplication with the identity operator <code>I</code> is a noop (except for checking that the scaling factor is one) and therefore almost without overhead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/linear-algebra/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/linear-algebra/</a>\n  </p>\n</div>\n","manual/getting-started/index":"<h1 id=\"man-getting-started\">Getting Started</h1> <p>Julia installation is straightforward, whether using precompiled binaries or compiling from source. Download and install Julia by following the instructions at <a class=\"reference external\" href=\"http://julialang.org/downloads/\">http://julialang.org/downloads/</a>.</p> <p>The easiest way to learn and experiment with Julia is by starting an interactive session (also known as a read-eval-print loop or “repl”) by double-clicking the Julia executable or running <code>julia</code> from the command line:</p> <pre data-language=\"julia\">$ julia\n               _\n   _       _ _(_)_     |  A fresh approach to technical computing\n  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org\n   _ _   _| |_  __ _   |  Type \"?help\" for help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 0.4.3 (2016-01-12 21:37 UTC)\n _/ |\\__'_|_|_|\\__'_|  |\n|__/                   |  x86_64-apple-darwin13.1.0\n\njulia&gt; 1 + 2\n3\n\njulia&gt; ans\n3\n</pre> <p>To exit the interactive session, type <code>^D</code> — the control key together with the <code>d</code> key or type <code>quit()</code>. When run in interactive mode, <code>julia</code> displays a banner and prompts the user for input. Once the user has entered a complete expression, such as <code>1 + 2</code>, and hits enter, the interactive session evaluates the expression and shows its value. If an expression is entered into an interactive session with a trailing semicolon, its value is not shown. The variable <code>ans</code> is bound to the value of the last evaluated expression whether it is shown or not. The <code>ans</code> variable is only bound in interactive sessions, not when Julia code is run in other ways.</p> <p>To evaluate expressions written in a source file <code>file.jl</code>, write <code>include(\"file.jl\")</code>.</p> <p>To run code in a file non-interactively, you can give it as the first argument to the julia command:</p> <pre data-language=\"julia\">$ julia script.jl arg1 arg2...\n</pre> <p>As the example implies, the following command-line arguments to julia are taken as command-line arguments to the program <code>script.jl</code>, passed in the global constant <code>ARGS</code>. <code>ARGS</code> is also set when script code is given using the <code>-e</code> option on the command line (see the <code>julia</code> help output below). For example, to just print the arguments given to a script, you could do this:</p> <pre data-language=\"julia\">$ julia -e 'for x in ARGS; println(x); end' foo bar\nfoo\nbar\n</pre> <p>Or you could put that code into a script and run it:</p> <pre data-language=\"julia\">$ echo 'for x in ARGS; println(x); end' &gt; script.jl\n$ julia script.jl foo bar\nfoo\nbar\n</pre> <p>The <code>--</code> delimiter can be used to separate command-line args to the scriptfile from args to Julia:</p> <pre data-language=\"julia\">$ julia --color=yes -O -- foo.jl arg1 arg2..\n</pre> <p>Julia can be started in parallel mode with either the <code>-p</code> or the <code>--machinefile</code> options. <code>-p n</code> will launch an additional <code>n</code> worker processes, while <code>--machinefile file</code> will launch a worker for each line in file <code>file</code>. The machines defined in <code>file</code> must be accessible via a passwordless <code>ssh</code> login, with Julia installed at the same location as the current host. Each machine definition takes the form <code>[count*][user@]host[:port] [bind_addr[:port]]</code> . <code>user</code> defaults to current user, <code>port</code> to the standard ssh port. <code>count</code> is the number of workers to spawn on the node, and defaults to 1. The optional <code>bind-to bind_addr[:port]</code> specifies the ip-address and port that other workers should use to connect to this worker.</p> <p>If you have code that you want executed whenever julia is run, you can put it in <code>~/.juliarc.jl</code>:</p> <pre data-language=\"julia\">$ echo 'println(\"Greetings! 你好! 안녕하세요?\")' &gt; ~/.juliarc.jl\n$ julia\nGreetings! 你好! 안녕하세요?\n\n...\n</pre> <p>There are various ways to run Julia code and provide options, similar to those available for the <code>perl</code> and <code>ruby</code> programs:</p> <pre data-language=\"julia\">julia [switches] -- [programfile] [args...]\n -v, --version             Display version information\n -h, --help                Print this message\n\n -J, --sysimage &lt;file&gt;     Start up with the given system image file\n --precompiled={yes|no}    Use precompiled code from system image if available\n -H, --home &lt;dir&gt;          Set location of julia executable\n --startup-file={yes|no}   Load ~/.juliarc.jl\n -f, --no-startup          Don't load ~/.juliarc (deprecated, use --startup-file=no)\n -F                        Load ~/.juliarc (deprecated, use --startup-file=yes)\n --handle-signals={yes|no} Enable or disable Julia's default signal handlers\n\n -e, --eval &lt;expr&gt;         Evaluate &lt;expr&gt;\n -E, --print &lt;expr&gt;        Evaluate and show &lt;expr&gt;\n -P, --post-boot &lt;expr&gt;    Evaluate &lt;expr&gt;, but don't disable interactive mode (deprecated, use -i -e instead)\n -L, --load &lt;file&gt;         Load &lt;file&gt; immediately on all processors\n\n -p, --procs {N|auto}      Integer value N launches N additional local worker processes\n                           \"auto\" launches as many workers as the number of local cores\n --machinefile &lt;file&gt;      Run processes on hosts listed in &lt;file&gt;\n\n -i                        Interactive mode; REPL runs and isinteractive() is true\n -q, --quiet               Quiet startup (no banner)\n --color={yes|no}          Enable or disable color text\n --history-file={yes|no}   Load or save history\n --no-history-file         Don't load history file (deprecated, use --history-file=no)\n\n --compile={yes|no|all}    Enable or disable compiler, or request exhaustive compilation\n -C, --cpu-target &lt;target&gt; Limit usage of cpu features up to &lt;target&gt;\n -O, --optimize            Run time-intensive code optimizations\n --inline={yes|no}         Control whether inlining is permitted (overrides functions declared as @inline)\n --check-bounds={yes|no}   Emit bounds checks always or never (ignoring declarations)\n --math-mode={ieee,fast}   Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)\n\n --depwarn={yes|no|error}  Enable or disable syntax and method deprecation warnings (\"error\" turns warnings into errors)\n\n --output-o name           Generate an object file (including system image data)\n --output-ji name          Generate a system image data file (.ji)\n --output-bc name          Generate LLVM bitcode (.bc)\n\n --output-incremental=no   Generate an incremental output file (rather than complete)\n\n --code-coverage={none|user|all}, --code-coverage\n                           Count executions of source lines (omitting setting is equivalent to \"user\")\n --track-allocation={none|user|all}, --track-allocation\n                           Count bytes allocated by each source line\n</pre>  <h2 id=\"resources\">Resources</h2> <p>In addition to this manual, there are various other resources that may help new users get started with Julia:</p> <ul class=\"simple\"> <li><a class=\"reference external\" href=\"http://math.mit.edu/~stevenj/Julia-cheatsheet.pdf\">Julia and IJulia cheatsheet</a></li> <li><a class=\"reference external\" href=\"http://learnxinyminutes.com/docs/julia/\">Learn Julia in a few minutes</a></li> <li><a class=\"reference external\" href=\"https://github.com/chrisvoncsefalvay/learn-julia-the-hard-way\">Learn Julia the Hard Way</a></li> <li><a class=\"reference external\" href=\"http://samuelcolvin.github.io/JuliaByExample/\">Julia by Example</a></li> <li><a class=\"reference external\" href=\"https://github.com/dpsanders/hands_on_julia\">Hands-on Julia</a></li> <li><a class=\"reference external\" href=\"http://homerreid.dyndns.org/teaching/18.330/JuliaProgramming.shtml\">Tutorial for Homer Reid’s numerical analysis class</a></li> <li><a class=\"reference external\" href=\"https://raw.githubusercontent.com/ViralBShah/julia-presentations/master/Fifth-Elephant-2013/Fifth-Elephant-2013.pdf\">An introductory presentation</a></li> <li><a class=\"reference external\" href=\"http://julialang.org/blog/2013/03/julia-tutorial-MIT\">Videos from the Julia tutorial at MIT</a></li> <li><a class=\"reference external\" href=\"http://forio.com/labs/julia-studio/tutorials/\">Forio Julia Tutorials</a></li> <li><a class=\"reference external\" href=\"https://www.youtube.com/user/JuliaLanguage/playlists\">YouTube videos from the JuliaCons</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/getting-started/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/getting-started/</a>\n  </p>\n</div>\n","manual/variables-and-scoping/index":"<h1 id=\"man-variables-and-scoping\">Scope of Variables</h1> <p>The <em>scope</em> of a variable is the region of code within which a variable is visible. Variable scoping helps avoid variable naming conflicts. The concept is intuitive: two functions can both have arguments called <code>x</code> without the two <code>x</code>‘s referring to the same thing. Similarly there are many other cases where different blocks of code can use the same name without referring to the same thing. The rules for when the same variable name does or doesn’t refer to the same thing are called scope rules; this section spells them out in detail.</p> <p>Certain constructs in the language introduce <em>scope blocks</em>, which are regions of code that are eligible to be the scope of some set of variables. The scope of a variable cannot be an arbitrary set of source lines; instead, it will always line up with one of these blocks. There are two main types of scopes in Julia, <em>global scope</em> and <em>local scope</em>, the latter can be nested. The constructs introducing scope blocks are:</p> <table class=\"docutils\" id=\"man-scope-table\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Scope name</th> <th class=\"head\" colspan=\"2\">block/construct introducing this kind of scope</th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#man-global\"><span>global</span></a></td> <td colspan=\"2\">\n<div class=\"first last line-block\"> <div class=\"line\">module, baremodule, at interactive prompt (REPL)</div> </div> </td> </tr> <tr class=\"row-odd\">\n<td rowspan=\"2\"><a class=\"reference internal\" href=\"#man-local-scope\"><span>local</span></a></td> <td><a class=\"reference internal\" href=\"#man-soft-scope\"><span>soft</span></a></td> <td>\n<div class=\"first last line-block\"> <div class=\"line\">for, while, list-comprehensions, try-catch-finally, let</div> </div> </td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#man-hard-scope\"><span>hard</span></a></td> <td>\n<div class=\"first last line-block\"> <div class=\"line\">functions (either syntax, anonymous &amp; do-blocks)</div> <div class=\"line\">type, immutable, macro</div> </div> </td> </tr>  </table> <p>Notably missing from this table are <a class=\"reference internal\" href=\"../control-flow/index#man-compound-expressions\"><span>begin blocks</span></a> and <a class=\"reference internal\" href=\"../control-flow/index#man-conditional-evaluation\"><span>if blocks</span></a>, which do <em>not</em> introduce new scope blocks. All three types of scopes follow somewhat different rules which will be explained below as well as some extra rules for certain blocks.</p> <p>Julia uses <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Scope_%28computer_science%29#Lexical_scoping_vs._dynamic_scoping\">lexical scoping</a>, meaning that a function’s scope does not inherit from its caller’s scope, but from the scope in which the function was defined. For example, in the following code the <code>x</code> inside <code>foo</code> refers to the <code>x</code> in the global scope of its module <code>Bar</code>:</p> <pre data-language=\"julia\">module Bar\nx = 1\nfoo() = x\nend\n</pre> <p>and not a <code>x</code> in the scope where <code>foo</code> is used:</p> <pre data-language=\"julia\">julia&gt; import Bar\n\njulia&gt; x = -1;\n\njulia&gt; Bar.foo()\n1\n</pre> <p>Thus <em>lexical scope</em> means that the scope of variables can be inferred from the source code alone.</p>  <h2 id=\"man-global\">Global Scope</h2> <p id=\"global-scope\"><em>Each module introduces a new global scope</em>, separate from the global scope of all other modules; there is no all-encompassing global scope. Modules can introduce variables of other modules into their scope through the <a class=\"reference internal\" href=\"../modules/index#man-modules\"><span>using or import</span></a> statements or through qualified access using the dot-notation, i.e. each module is a so-called <em>namespace</em>. Note that variable bindings can only be changed within their global scope and not from an outside module.</p> <pre data-language=\"julia\">module A\na = 1 # a global in A's scope\nend\n\nmodule B\n# b = a # would error as B's global scope is separate from A's\n    module C\n    c = 2\n    end\nb = C.c # can access the namespace of a nested global scope\n        # through a qualified access\nimport A # makes module A available\nd = A.a\n# A.a = 2 # would error with: \"ERROR: cannot assign variables in other modules\"\nend\n</pre> <p>Note that the interactive prompt (aka REPL) is in the global scope of the module <code>Main</code>.</p>   <h2 id=\"man-local-scope\">Local Scope</h2> <p id=\"local-scope\">A new local scope is introduced by most code-blocks, see above <a class=\"reference internal\" href=\"#man-scope-table\"><span>table</span></a> for a complete list. A local scope <em>usually</em> inherits all the variables from its parent scope, both for reading and writing. There are two subtypes of local scopes, hard and soft, with slightly different rules concerning what variables are inherited. Unlike global scopes, local scopes are not namespaces, thus variables in an inner scope cannot be retrieved from the parent scope through some sort of qualified access.</p> <p>The following rules and examples pertain to both hard and soft local scopes. A newly introduced variable in a local scope does not back-propagate to its parent scope. For example, here the <code>z</code> is not introduced into the top-level scope:</p> <pre data-language=\"julia\">for i=1:10\n    z = i\nend\n\njulia&gt; z\nERROR: UndefVarError: z not defined\n</pre> <p>(Note, in this and all following examples it is assumed that their top-level is a global scope with a clean workspace, for instance a newly started REPL.)</p> <p>Inside a local scope a variable can be forced to be a local variable using the <code>local</code> keyword:</p> <pre data-language=\"julia\">x = 0\nfor i=1:10\n    local x\n    x = i + 1\nend\n\njulia&gt; x\n0\n</pre> <p>Inside a local scope a new global variable can be defined using the keyword <code>global</code>:</p> <pre data-language=\"julia\">for i=1:10\n    global z\n    z = i\nend\n\njulia&gt; z\n10\n</pre> <p>The location of both the <code>local</code> and <code>global</code> keywords within the scope block is irrelevant. The following is equivalent to the last example (although stylistically worse):</p> <pre data-language=\"julia\">for i=1:10\n    z = i\n    global z\nend\n\njulia&gt; z\n10\n</pre> <p>Multiple global or local definitions can be on one line and can also be paired with assignments:</p> <pre data-language=\"julia\">for i=1:10\n    global x=i, y, z\n    local a=4, b , c=1\nend\n</pre>  <h3 id=\"man-soft-scope\">Soft Local Scope</h3>  In a soft local scope, all variables are inherited from its parent scope unless a variable is specifically marked with the keyword <code>local</code>. <p>Soft local scopes are introduced by for-loops, while-loops, list-comprehensions, try-catch-finally-blocks, and let-blocks. There are some extra rules for <a class=\"reference internal\" href=\"#man-let-blocks\"><span>let-blocks</span></a> and for <a class=\"reference internal\" href=\"#man-for-loops-scope\"><span>for-loops and list-comprehensions</span></a>.</p> <p>In the following example the <code>x</code> and <code>y</code> refer always to the same variables as the soft local scope inherits both read and write variables:</p> <pre data-language=\"julia\">x,y = 0, 1\nfor i = 1:10\n    x = i + y + 1\nend\n\njulia&gt; x\n11\n</pre> <p>Within soft scopes, the <cite>global</cite> keyword is never necessary, although allowed. The only case when it would change the semantics is (currently) a syntax error:</p> <pre data-language=\"julia\">let\n    local x = 2\n    let\n        global x = 3\n    end\nend\n\n# ERROR: syntax: `global x`: x is local variable in the enclosing scope\n</pre>   <h3 id=\"man-hard-scope\">Hard Local Scope</h3> <p id=\"hard-local-scope\">Hard local scopes are introduced by function definitions (in all their forms), type &amp; immutable-blocks and macro-definitions.</p>  <p>In a hard local scope, all variables are inherited from its parent scope unless:</p> <ul class=\"simple\"> <li>an assignment would result in a modified <em>global</em> variable, or</li> <li>a variable is specifically marked with the keyword <code>local</code>.</li> </ul>  <p>Thus global variables are only inherited for reading but not for writing:</p> <pre data-language=\"julia\">x,y = 1,2\nfunction foo()\n    x = 2 # assignment introduces a new local\n    return x + y # y refers to the global\nend\n\njulia&gt; foo()\n4\n\njulia&gt; x\n1\n</pre> <p>An explicit <code>global</code> is needed to assign to a global variable:</p> <pre data-language=\"julia\">x = 1\nfunction foo()\n    global x = 2\nend\nfoo()\n\njulia&gt; x\n2\n</pre> <p>Note that <em>nested functions</em> can behave differently to functions defined in the global scope as they can modify their parent scope’s <em>local</em> variables:</p> <pre data-language=\"julia\">x,y = 1,2\nfunction foo()\n    x = 2 # introduces a new local\n    function bar()\n        x = 10 # modifies the parent's x\n        return x+y # y is global\n    end\n    return bar() + x # 12 + 10 (x is modified in call of bar())\nend\n\njulia&gt; foo()\n22  # (x,y unchanged)\n</pre> <p>The distinction between inheriting global and local variables for assignment can lead to some slight differences between functions defined in local vs. global scopes. Consider the modification of the last example by moving <code>bar</code> to the global scope:</p> <pre data-language=\"julia\">x,y = 1,2\nfunction bar()\n    x = 10 # local\n    return x+y\nend\nfunction foo()\n    x = 2 # local\n    return bar() + x # 12 + 2 (x is not modified)\nend\n\njulia&gt; foo()\n14 # as x is not modified anymore.\n   # (x,y unchanged)\n</pre> <p>Note that above subtlety does not pertain to type and macro definitions as they can only appear at the global scope. There are special scoping rules concerning the evaluation of default and keyword function arguments which are described in the <a class=\"reference internal\" href=\"../functions/index#man-evaluation-scope-default-values\"><span>Function section</span></a>.</p> <p>An assignment introducing a variable used inside a function, type or macro definition need not come before its inner usage:</p> <pre data-language=\"julia\">julia&gt; f = y -&gt; x + y\n(anonymous function)\n\njulia&gt; f(3)\nERROR: UndefVarError: x not defined\n in anonymous at none:1\n\njulia&gt; x = 1\n1\n\njulia&gt; f(3)\n4\n</pre> <p>This behavior may seem slightly odd for a normal variable, but allows for named functions — which are just normal variables holding function objects — to be used before they are defined. This allows functions to be defined in whatever order is intuitive and convenient, rather than forcing bottom up ordering or requiring forward declarations, as long as they are defined by the time they are actually called. As an example, here is an inefficient, mutually recursive way to test if positive integers are even or odd:</p> <pre data-language=\"julia\">even(n) = n == 0 ? true  :  odd(n-1)\nodd(n)  = n == 0 ? false : even(n-1)\n\njulia&gt; even(3)\nfalse\n\njulia&gt; odd(3)\ntrue\n</pre> <p>Julia provides built-in, efficient functions to test for oddness and evenness called <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.iseven\" title=\"Base.iseven\"><code>iseven()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.isodd\" title=\"Base.isodd\"><code>isodd()</code></a> so the above definitions should only be taken as examples.</p>   <h3 id=\"hard-vs-soft-local-scope\">Hard vs. Soft Local Scope</h3> <p>Blocks which introduce a soft local scope, such as loops, are generally used to manipulate the variables in their parent scope. Thus their default is to fully access all variables in their parent scope.</p> <p>Conversely, the code inside blocks which introduce a hard local scope (function, type and macro definitions) can be executed at any place in a program. Remotely changing the state of global variables in other modules should be done with care and thus this is an opt-in feature requiring the <code>global</code> keyword.</p> <p>The reason to allow <em>modifying local</em> variables of parent scopes in nested functions is to allow constructing <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Closure_%28computer_programming%29\">closures</a> which have a private state, for instance the <code>state</code> variable in the following example:</p> <pre data-language=\"julia\">let\n    state = 0\n    global counter\n    counter() = state += 1\nend\n\njulia&gt; counter()\n1\n\njulia&gt; counter()\n2\n</pre> <p>See also the closures in the examples in the next two sections.</p>   <h3 id=\"man-let-blocks\">Let Blocks</h3> <p id=\"let-blocks\">Unlike assignments to local variables, <code>let</code> statements allocate new variable bindings each time they run. An assignment modifies an existing value location, and <code>let</code> creates new locations. This difference is usually not important, and is only detectable in the case of variables that outlive their scope via closures. The <code>let</code> syntax accepts a comma-separated series of assignments and variable names:</p> <pre data-language=\"julia\">let var1 = value1, var2, var3 = value3\n    code\nend\n</pre> <p>The assignments are evaluated in order, with each right-hand side evaluated in the scope before the new variable on the left-hand side has been introduced. Therefore it makes sense to write something like <code>let x = x</code> since the two <code>x</code> variables are distinct and have separate storage. Here is an example where the behavior of <code>let</code> is needed:</p> <pre data-language=\"julia\">Fs = Array(Any,2)\ni = 1\nwhile i &lt;= 2\n  Fs[i] = ()-&gt;i\n  i += 1\nend\n\njulia&gt; Fs[1]()\n3\n\njulia&gt; Fs[2]()\n3\n</pre> <p>Here we create and store two closures that return variable <code>i</code>. However, it is always the same variable <code>i</code>, so the two closures behave identically. We can use <code>let</code> to create a new binding for <code>i</code>:</p> <pre data-language=\"julia\">Fs = Array(Any,2)\ni = 1\nwhile i &lt;= 2\n  let i = i\n    Fs[i] = ()-&gt;i\n  end\n  i += 1\nend\n\njulia&gt; Fs[1]()\n1\n\njulia&gt; Fs[2]()\n2\n</pre> <p>Since the <code>begin</code> construct does not introduce a new scope, it can be useful to use a zero-argument <code>let</code> to just introduce a new scope block without creating any new bindings:</p> <pre data-language=\"julia\">julia&gt; let\n         local x = 1\n         let\n           local x = 2\n         end\n         x\n       end\n1\n</pre> <p>Since <code>let</code> introduces a new scope block, the inner local <code>x</code> is a different variable than the outer local <code>x</code>.</p>   <h3 id=\"man-for-loops-scope\">For Loops and Comprehensions</h3> <p id=\"for-loops-and-comprehensions\"><code>for</code> loops and <a class=\"reference internal\" href=\"../arrays/index#comprehensions\"><span>comprehensions</span></a> have the following behavior: any new variables introduced in their body scopes are freshly allocated for each loop iteration. This is in contrast to <code>while</code> loops which reuse the variables for all iterations. Therefore these constructs are similar to <code>while</code> loops with <code>let</code> blocks inside:</p> <pre data-language=\"julia\">Fs = Array(Any,2)\nfor i = 1:2\n    Fs[i] = ()-&gt;i\nend\n\njulia&gt; Fs[1]()\n1\n\njulia&gt; Fs[2]()\n2\n</pre> <p><code>for</code> loops will reuse existing variables for its iteration variable:</p> <pre data-language=\"julia\">i = 0\nfor i = 1:3\nend\ni  # here equal to 3\n</pre> <p>However, comprehensions do not do this, and always freshly allocate their iteration variables:</p> <pre data-language=\"julia\">x = 0\n[ x for x=1:3 ]\nx  # here still equal to 0\n</pre>    <h2 id=\"constants\">Constants</h2> <p>A common use of variables is giving names to specific, unchanging values. Such variables are only assigned once. This intent can be conveyed to the compiler using the <code>const</code> keyword:</p> <pre data-language=\"julia\">const e  = 2.71828182845904523536\nconst pi = 3.14159265358979323846\n</pre> <p>The <code>const</code> declaration is allowed on both global and local variables, but is especially useful for globals. It is difficult for the compiler to optimize code involving global variables, since their values (or even their types) might change at almost any time. If a global variable will not change, adding a <code>const</code> declaration solves this performance problem.</p> <p>Local constants are quite different. The compiler is able to determine automatically when a local variable is constant, so local constant declarations are not necessary for performance purposes.</p> <p>Special top-level assignments, such as those performed by the <code>function</code> and <code>type</code> keywords, are constant by default.</p> <p>Note that <code>const</code> only affects the variable binding; the variable may be bound to a mutable object (such as an array), and that object may still be modified.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/variables-and-scoping/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/variables-and-scoping/</a>\n  </p>\n</div>\n","manual/modules/index":"<h1 id=\"man-modules\">Modules</h1> <p id=\"index-0\">Modules in Julia are separate variable workspaces, i.e. they introduce a new global scope. They are delimited syntactically, inside <code>module\nName ... end</code>. Modules allow you to create top-level definitions (aka global variables) without worrying about name conflicts when your code is used together with somebody else’s. Within a module, you can control which names from other modules are visible (via importing), and specify which of your names are intended to be public (via exporting).</p> <p>The following example demonstrates the major features of modules. It is not meant to be run, but is shown for illustrative purposes:</p> <pre data-language=\"julia\">module MyModule\nusing Lib\n\nusing BigLib: thing1, thing2\n\nimport Base.show\n\nimportall OtherLib\n\nexport MyType, foo\n\ntype MyType\n    x\nend\n\nbar(x) = 2x\nfoo(a::MyType) = bar(a.x) + 1\n\nshow(io, a::MyType) = print(io, \"MyType $(a.x)\")\nend\n</pre> <p>Note that the style is not to indent the body of the module, since that would typically lead to whole files being indented.</p> <p>This module defines a type <code>MyType</code>, and two functions. Function <code>foo</code> and type <code>MyType</code> are exported, and so will be available for importing into other modules. Function <code>bar</code> is private to <code>MyModule</code>.</p> <p>The statement <code>using Lib</code> means that a module called <code>Lib</code> will be available for resolving names as needed. When a global variable is encountered that has no definition in the current module, the system will search for it among variables exported by <code>Lib</code> and import it if it is found there. This means that all uses of that global within the current module will resolve to the definition of that variable in <code>Lib</code>.</p> <p>The statement <code>using BigLib: thing1, thing2</code> is a syntactic shortcut for <code>using BigLib.thing1, BigLib.thing2</code>.</p> <p>The <code>import</code> keyword supports all the same syntax as <code>using</code>, but only operates on a single name at a time. It does not add modules to be searched the way <code>using</code> does. <code>import</code> also differs from <code>using</code> in that functions must be imported using <code>import</code> to be extended with new methods.</p> <p>In <code>MyModule</code> above we wanted to add a method to the standard <code>show</code> function, so we had to write <code>import Base.show</code>. Functions whose names are only visible via <code>using</code> cannot be extended.</p> <p>The keyword <code>importall</code> explicitly imports all names exported by the specified module, as if <code>import</code> were individually used on all of them.</p> <p>Once a variable is made visible via <code>using</code> or <code>import</code>, a module may not create its own variable with the same name. Imported variables are read-only; assigning to a global variable always affects a variable owned by the current module, or else raises an error.</p>  <h2 id=\"summary-of-module-usage\">Summary of module usage</h2> <p>To load a module, two main keywords can be used: <code>using</code> and <code>import</code>. To understand their differences, consider the following example:</p> <pre data-language=\"julia\">module MyModule\n\nexport x, y\n\nx() = \"x\"\ny() = \"y\"\np() = \"p\"\n\nend\n</pre> <p>In this module we export the <code>x</code> and <code>y</code> functions (with the keyword <code>export</code>), and also have the non-exported function <code>p</code>. There are several different ways to load the Module and its inner functions into the current workspace:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Import Command</th> <th class=\"head\">What is brought into scope</th> <th class=\"head\">Available for method extension</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>using MyModule</code></td> <td>All <code>export</code>ed names (<code>x</code> and <code>y</code>), <code>MyModule.x</code>, <code>MyModule.y</code> and <code>MyModule.p</code>\n</td> <td>\n<code>MyModule.x</code>, <code>MyModule.y</code> and <code>MyModule.p</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><code>using MyModule.x, MyModule.p</code></td> <td>\n<code>x</code> and <code>p</code>\n</td> <td> </td> </tr> <tr class=\"row-even\">\n<td><code>using MyModule: x, p</code></td> <td>\n<code>x</code> and <code>p</code>\n</td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><code>import MyModule</code></td> <td>\n<code>MyModule.x</code>, <code>MyModule.y</code> and <code>MyModule.p</code>\n</td> <td>\n<code>MyModule.x</code>, <code>MyModule.y</code> and <code>MyModule.p</code>\n</td> </tr> <tr class=\"row-even\">\n<td><code>import MyModule.x, MyModule.p</code></td> <td>\n<code>x</code> and <code>p</code>\n</td> <td>\n<code>x</code> and <code>p</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><code>import MyModule: x, p</code></td> <td>\n<code>x</code> and <code>p</code>\n</td> <td>\n<code>x</code> and <code>p</code>\n</td> </tr> <tr class=\"row-even\">\n<td><code>importall MyModule</code></td> <td>All <code>export</code>ed names (<code>x</code> and <code>y</code>)</td> <td>\n<code>x</code> and <code>y</code>\n</td> </tr>  </table>  <h3 id=\"modules-and-files\">Modules and files</h3> <p>Files and file names are mostly unrelated to modules; modules are associated only with module expressions. One can have multiple files per module, and multiple modules per file:</p> <pre data-language=\"julia\">module Foo\n\ninclude(\"file1.jl\")\ninclude(\"file2.jl\")\n\nend\n</pre> <p>Including the same code in different modules provides mixin-like behavior. One could use this to run the same code with different base definitions, for example testing code by running it with “safe” versions of some operators:</p> <pre data-language=\"julia\">module Normal\ninclude(\"mycode.jl\")\nend\n\nmodule Testing\ninclude(\"safe_operators.jl\")\ninclude(\"mycode.jl\")\nend\n</pre>   <h3 id=\"standard-modules\">Standard modules</h3> <p>There are three important standard modules: Main, Core, and Base.</p> <p>Main is the top-level module, and Julia starts with Main set as the current module. Variables defined at the prompt go in Main, and <code>whos()</code> lists variables in Main.</p> <p>Core contains all identifiers considered “built in” to the language, i.e. part of the core language and not libraries. Every module implicitly specifies <code>using Core</code>, since you can’t do anything without those definitions.</p> <p>Base is the standard library (the contents of base/). All modules implicitly contain <code>using Base</code>, since this is needed in the vast majority of cases.</p>   <h3 id=\"default-top-level-definitions-and-bare-modules\">Default top-level definitions and bare modules</h3> <p>In addition to <code>using Base</code>, modules also perform <code>import Base.call</code> by default, to facilitate adding constructors to new types. A new module also automatically contains a definition of the <code>eval</code> function, which evaluates expressions within the context of that module.</p> <p>If these default definitions are not wanted, modules can be defined using the keyword <code>baremodule</code> instead (note: <code>Core</code> is still imported, as per above). In terms of <code>baremodule</code>, a standard <code>module</code> looks like this:</p> <pre data-language=\"julia\">baremodule Mod\n\nusing Base\n\nimport Base.call\n\neval(x) = Core.eval(Mod, x)\neval(m,x) = Core.eval(m, x)\n\n...\n\nend\n</pre>   <h3 id=\"relative-and-absolute-module-paths\">Relative and absolute module paths</h3> <p>Given the statement <code>using Foo</code>, the system looks for <code>Foo</code> within <code>Main</code>. If the module does not exist, the system attempts to <code>require(\"Foo\")</code>, which typically results in loading code from an installed package.</p> <p>However, some modules contain submodules, which means you sometimes need to access a module that is not directly available in <code>Main</code>. There are two ways to do this. The first is to use an absolute path, for example <code>using Base.Sort</code>. The second is to use a relative path, which makes it easier to import submodules of the current module or any of its enclosing modules:</p> <pre data-language=\"julia\">module Parent\n\nmodule Utils\n...\nend\n\nusing .Utils\n\n...\nend\n</pre> <p>Here module <code>Parent</code> contains a submodule <code>Utils</code>, and code in <code>Parent</code> wants the contents of <code>Utils</code> to be visible. This is done by starting the <code>using</code> path with a period. Adding more leading periods moves up additional levels in the module hierarchy. For example <code>using ..Utils</code> would look for <code>Utils</code> in <code>Parent</code>‘s enclosing module rather than in <code>Parent</code> itself.</p> <p>Note that relative-import qualifiers are only valid in <code>using</code> and <code>import</code> statements.</p>   <h3 id=\"module-file-paths\">Module file paths</h3> <p>The global variable LOAD_PATH contains the directories Julia searches for modules when calling <code>require</code>. It can be extended using <code>push!</code>:</p> <pre data-language=\"julia\">push!(LOAD_PATH, \"/Path/To/My/Module/\")\n</pre> <p>Putting this statement in the file <code>~/.juliarc.jl</code> will extend LOAD_PATH on every Julia startup. Alternatively, the module load path can be extended by defining the environment variable JULIA_LOAD_PATH.</p>   <h3 id=\"namespace-miscellanea\">Namespace miscellanea</h3> <p>If a name is qualified (e.g. <code>Base.sin</code>), then it can be accessed even if it is not exported. This is often useful when debugging.</p> <p>Macro names are written with <code>@</code> in import and export statements, e.g. <code>import Mod.@mac</code>. Macros in other modules can be invoked as <code>Mod.@mac</code> or <code>@Mod.mac</code>.</p> <p>The syntax <code>M.x = y</code> does not work to assign a global in another module; global assignment is always module-local.</p> <p>A variable can be “reserved” for the current module without assigning to it by declaring it as <code>global x</code> at the top level. This can be used to prevent name conflicts for globals initialized after load time.</p>   <h3 id=\"man-modules-initialization-precompilation\">Module initialization and precompilation</h3> <p id=\"module-initialization-and-precompilation\">Large modules can take several second to load because executing all of the statements in a module often involves compiling a large amount of code. Julia provides the ability to create precompiled versions of modules to reduce this time.</p> <p>There are two mechanisms that can achieve this: incremental compile and custom system image.</p> <p>To create a custom system image that can be used to start julia with the -J option, recompile Julia after modifying the file <code>base/userimg.jl</code> to require the desired modules.</p> <p>To create an incremental precompiled module file, add <code>__precompile__()</code> at the top of your module file (before the <code>module</code> starts). This will cause it to be automatically compiled the first time it is imported. Alternatively, you can manually call <code>Base.compilecache(modulename)</code>. The resulting cache files will be stored in <code>Base.LOAD_CACHE_PATH[1]</code>. Subsequently, the module is automatically recompiled upon <code>import</code> whenever any of its dependencies change; dependencies are modules it imports, the Julia build, files it includes, or explicit dependencies declared by <code>include_dependency(path)</code> in the module file(s). Precompiling a module also recursively precompiles any modules that are imported therein. If you know that it is <em>not</em> safe to precompile your module (for the reasons described below), you should put <code>__precompile__(false)</code> in the module file to cause <code>Base.compilecache</code> to throw an error (and thereby prevent the module from being imported by any other precompiled module).</p> <p><code>__precompile__()</code> should <em>not</em> be used in a module unless all of its dependencies are also using <code>__precompile__()</code>. Failure to do so can result in a runtime error when loading the module.</p> <p>In order to make your module work with precompilation, however, you may need to change your module to explicitly separate any initialization steps that must occur at <em>runtime</em> from steps that can occur at <em>compile time</em>. For this purpose, Julia allows you to define an <code>__init__()</code> function in your module that executes any initialization steps that must occur at runtime.</p> <p>In particular, if you define a <code>function __init__()</code> in a module, then Julia will call <code>__init__()</code> immediately <em>after</em> the module is loaded (e.g., by <code>import</code>, <code>using</code>, or <code>require</code>) at runtime for the <em>first</em> time (i.e., <code>__init__</code> is only called once, and only after all statements in the module have been executed). Because it is called after the module is fully imported, any submodules or other imported modules have their <code>__init__</code> functions called <em>before</em> the <code>__init__</code> of the enclosing module.</p> <p>Two typical uses of <code>__init__</code> are calling runtime initialization functions of external C libraries and initializing global constants that involve pointers returned by external libraries. For example, suppose that we are calling a C library <code>libfoo</code> that requires us to call a <code>foo_init()</code> initialization function at runtime. Suppose that we also want to define a global constant <code>foo_data_ptr</code> that holds the return value of a <code>void *foo_data()</code> function defined by <code>libfoo</code> — this constant must be initialized at runtime (not at compile time) because the pointer address will change from run to run. You could accomplish this by defining the following <code>__init__</code> function in your module:</p> <pre data-language=\"julia\">function __init__()\n    ccall((:foo_init,:libfoo), Void, ())\n    global const foo_data_ptr = ccall((:foo_data,:libfoo), Ptr{Void}, ())\nend\n</pre> <p>Notice that it is perfectly possible to define a global inside a function like <code>__init__</code>; this is one of the advantages of using a dynamic language. Obviously, any other globals in your module that depends on <code>foo_data_ptr</code> would also have to be initialized in <code>__init__</code>.</p> <p>Constants involving most Julia objects that are not produced by <code>ccall</code> do not need to be placed in <code>__init__</code>: their definitions can be precompiled and loaded from the cached module image. This includes complicated heap-allocated objects like arrays. However, any routine that returns a raw pointer value must be called at runtime for precompilation to work (Ptr objects will turn into null pointers unless they are hidden inside an isbits object). This includes the return values of the Julia functions <code>cfunction</code> and <code>pointer</code>.</p> <p>Dictionary and set types, or in general anything that depends on the output of a <code>hash(key)</code> method, are a trickier case. In the common case where the keys are numbers, strings, symbols, ranges, <code>Expr</code>, or compositions of these types (via arrays, tuples, sets, pairs, etc.) they are safe to precompile. However, for a few other key types, such as <code>Function</code> or <code>DataType</code> and generic user-defined types where you haven’t defined a <code>hash</code> method, the fallback <code>hash</code> method depends on the memory address of the object (via its <code>object_id</code>) and hence may change from run to run. If you have one of these key types, or if you aren’t sure, to be safe you can initialize this dictionary from within your <code>__init__</code> function. Alternatively, you can use the <code>ObjectIdDict</code> dictionary type, which is specially handled by precompilation so that it is safe to initialize at compile-time.</p> <p>When using precompilation, it is important to keep a clear sense of the distinction between the compilation phase and the execution phase. In this mode, it will often be much more clearly apparent that Julia is a compiler which allows execution of arbitrary Julia code, not a standalone interpreter that also generates compiled code.</p> <p>Other known potential failure scenarios include:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Global counters (for example, for attempting to uniquely identify objects) Consider the following code snippet:</p> <pre data-language=\"julia\">type UniquedById\n    myid::Int\n    let counter = 0\n        UniquedById() = new(counter += 1)\n    end\nend\n</pre> <p>while the intent of this code was to give every instance a unique id, the counter value is recorded at the end of compilation. All subsequent usages of this incrementally compiled module will start from that same counter value.</p> <p>Note that <code>object_id</code> (which works by hashing the memory pointer) has similar issues (see notes on Dict usage below).</p> <p>One alternative is to store both <code>current_module()</code> and the current <code>counter</code> value, however, it may be better to redesign the code to not depend on this global state.</p> </li> <li>Associative collections (such as <code>Dict</code> and <code>Set</code>) need to be re-hashed in <code>__init__</code>. (In the future, a mechanism may be provided to register an initializer function.) </li> <li>Depending on compile-time side-effects persisting through load-time. Example include: modifying arrays or other variables in other Julia modules; maintaining handles to open files or devices; storing pointers to other system resources (including memory); </li> <li>\n<p class=\"first\">Creating accidental “copies” of global state from another module, by referencing it directly instead of via its lookup path. For example, (in global scope):</p> <pre data-language=\"julia\">#mystdout = Base.STDOUT #= will not work correctly, since this will copy Base.STDOUT into this module =#\n# instead use accessor functions:\ngetstdout() = Base.STDOUT #= best option =#\n# or move the assignment into the runtime:\n__init__() = global mystdout = Base.STDOUT #= also works =#\n</pre> </li> </ol> <p>Several additional restrictions are placed on the operations that can be done while precompiling code to help the user avoid other wrong-behavior situations:</p> <ol class=\"arabic simple\"> <li>Calling <code>eval</code> to cause a side-effect in another module. This will also cause a warning to be emitted when the incremental precompile flag is set.</li> <li>\n<code>global const</code> statements from local scope after <code>__init__()</code> has been started (see issue #12010 for plans to add an error for this)</li> <li>Replacing a module (or calling <code>workspace()</code>) is a runtime error while doing an incremental precompile.</li> </ol> <p>A few other points to be aware of:</p> <ol class=\"arabic simple\"> <li>No code reload / cache invalidation is performed after changes are made to the source files themselves, (including by <code>Pkg.update</code>), and no cleanup is done after <code>Pkg.rm</code>\n</li> <li>The memory sharing behavior of a reshaped array is disregarded by precompilation (each view gets its own copy)</li> <li>Expecting the filesystem to be unchanged between compile-time and runtime e.g. <code>@__FILE__</code>/<code>source_path()</code> to find resources at runtime, or the BinDeps <code>@checked_lib</code> macro. Sometimes this is unavoidable. However, when possible, it can be good practice to copy resources into the module at compile-time so they won’t need to be found at runtime.</li> <li>WeakRef objects and finalizers are not currently handled properly by the serializer (this will be fixed in an upcoming release).</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/modules/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/modules/</a>\n  </p>\n</div>\n","manual/documentation/index":"<h1 id=\"man-documentation\">Documentation</h1> <p>Julia enables package developers and users to document functions, types and other objects easily via a built-in documentation system since Julia 0.4.</p> <div class=\"admonition tip\"> <p class=\"first admonition-title\">Tip</p> <p class=\"last\">This documentation system can also be used in Julia 0.3 via the <a class=\"reference external\" href=\"https://github.com/MichaelHatherly/Docile.jl\">Docile.jl</a> package; see the documentation for that package for more details.</p> </div> <p>The basic syntax is very simple: any string appearing at the top-level right before an object (function, macro, type or instance) will be interpreted as documenting it (these are called <em>docstrings</em>). Here is a very simple example:</p> <pre data-language=\"julia\">\"Tell whether there are too foo items in the array.\"\nfoo(xs::Array) = ...\n</pre> <p>Documentation is interpreted as <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a>, so you can use indentation and code fences to delimit code examples from text. Technically, any object can be associated with any other as metadata; Markdown happens to be the default, but one can construct other string macros and pass them to the <code>@doc</code> macro just as well.</p> <p>Here is a more complex example, still using Markdown:</p>  <dl class=\"docutils\"> <dt>“”“</dt> <dd>bar(x[, y])</dd> </dl> <p>Compute the Bar index between <cite>x</cite> and <cite>y</cite>. If <cite>y</cite> is missing, compute the Bar index between all pairs of columns of <cite>x</cite>.</p> <p># Examples <code>`julia\njulia&gt; bar([1, 2], [1, 2])\n1\n`</code> “”” function bar(x, y) ...</p>  <p>As in the example above, we recommend following some simple conventions when writing documentation:</p> <p>1. Always show the signature of a function at the top of the documentation, with a four-space indent so that it is printed as Julia code.</p>  This can be identical to the signature present in the Julia code (like <code>mean(x::AbstractArray)</code>), or a simplified form. Optional arguments should be represented with their default values (i.e. <code>f(x, y=1)</code>) when possible, following the actual Julia syntax. Optional arguments which do not have a default value should be put in brackets (i.e. <code>f(x[, y])</code> and <code>f(x[, y[, z]])</code>). An alternative solution is to use several lines: one without optional arguments, the other(s) with them. This solution can also be used to document several related methods of a given function. When a function accepts many keyword arguments, only include a <code>&lt;keyword arguments&gt;</code> placeholder in the signature (i.e. <code>f(x; &lt;keyword arguments&gt;)</code>), and give the complete list under an <code># Arguments</code> section (see point 4 below). <p>2. Include a single one-line sentence describing what the function does or what the object represents after the simplified signature block. If needed, provide more details in a second paragraph, after a blank line.</p>  The one-line sentence should use the imperative form (“Do this”, “Return that”) instead of the third person (do not write “Returns the length...”) when documenting functions. It should end with a period. If the meaning of a function cannot be summarized easily, splitting it into separate composable parts could be beneficial (this should not be taken as an absolute requirement for every single case though). <ol class=\"arabic simple\" start=\"3\"> <li>Do not repeat yourself.</li> </ol>  Since the function name is given by the signature, there is no need to start the documentation with “The function <code>bar</code>...”: go straight to the point. Similarly, if the signature specifies the types of the arguments, mentioning them in the description is redundant. <ol class=\"arabic simple\" start=\"4\"> <li>Only provide an argument list when really necessary.</li> </ol>  <p>For simple functions, it is often clearer to mention the role of the arguments directly in the description of the function’s purpose. An argument list would only repeat information already provided elsewhere. However, providing an argument list can be a good idea for complex functions with many arguments (in particular keyword arguments). In that case, insert it after the general description of the function, under an <code># Arguments</code> header, with one <code>*</code> bullet for each argument. The list should mention the types and default values (if any) of the arguments:</p> <pre data-language=\"julia\">\"\"\"\n...\n# Arguments\n* `n::Integer`: the number of elements to compute.\n* `dim::Integer=1`: the dimensions along which to perform the computation.\n...\n\"\"\"\n</pre>  <p>5. Group examples under an <code># Examples</code> section and use <code>``julia</code> blocks instead of standard text.</p>  Examples should consist of verbatim copies of the Julia REPL, including the <code>julia&gt;</code> prompt (see example above). This will be used in the future to allow running examples automatically and checking that their actual output is consistent with that presented in the documentation (a feature called <em>doctests</em>). This way, the code will be tested and examples won’t get out of date without notice. <ol class=\"arabic simple\" start=\"6\"> <li>Use backticks to identify code and equations.</li> </ol>  Julia identifiers and code excerpts should always appear between backticks <code>`</code> to enable highlighting. Equations in the LaTeX syntax can be inserted between double backticks <code>``</code>. Use Unicode characters rather than their LaTeX escape sequence, i.e. <code>``α = 1``</code> rather than <code>``\\\\alpha = 1``</code>. <ol class=\"arabic simple\" start=\"7\"> <li>Place the starting and ending <code>\"\"\"</code> characters on lines by themselves.</li> </ol>  <p>That is, write:</p> <pre data-language=\"julia\">\"\"\"\n...\n\n...\n\"\"\"\nf(x, y) = ...\n</pre> <p>rather than:</p> <pre data-language=\"julia\">\"\"\"...\n\n...\"\"\"\nf(x, y) = ...\n</pre> <p>This makes it more clear where docstrings start and end.</p>  <ol class=\"arabic simple\" start=\"8\"> <li>Respect the line length limit used in the surrounding code.</li> </ol>  Docstrings are edited using the same tools as code. Therefore, the same conventions should apply. It it advised to add line breaks after 92 characters.  <h2 id=\"accessing-documentation\">Accessing Documentation</h2> <p>Documentation can be accessed at the REPL or in IJulia by typing <code>?</code> followed by the name of a function or macro, and pressing <code>Enter</code>. For example,</p> <pre data-language=\"julia\">?fft\n?@time\n?r\"\"\n</pre> <p>will bring up docs for the relevant function, macro or string macro respectively. In <a class=\"reference external\" href=\"http://junolab.org\">Juno</a> using <code>Ctrl-D</code> will bring up documentation for the object under the cursor.</p>   <h2 id=\"functions-methods\">Functions &amp; Methods</h2> <p>Functions in Julia may have multiple implementations, known as methods. While it’s good practice for generic functions to have a single purpose, Julia allows methods to be documented individually if necessary. In general, only the most generic method should be documented, or even the function itself (i.e. the object created without any methods by <code>function bar end</code>). Specific methods should only be documented if their behaviour differs from the more generic ones. In any case, they should not repeat the information provided elsewhere. For example:</p> <pre data-language=\"julia\">\"\"\"\nMultiplication operator. `x*y*z*...` calls this function with multiple\narguments, i.e. `*(x,y,z...)`.\n\"\"\"\nfunction *(x, y)\n  # ... [implementation sold separately] ...\nend\n\n\"When applied to strings, concatenates them.\"\nfunction *(x::AbstractString, y::AbstractString)\n  # ... [insert secret sauce here] ...\nend\n\nhelp?&gt;*\nMultiplication operator. `x*y*z*...` calls this function with multiple\narguments, i.e. `*(x,y,z...)`.\n\nWhen applied to strings, concatenates them.\n</pre> <p>When retrieving documentation for a generic function, the metadata for each method is concatenated with the <code>catdoc</code> function, which can of course be overridden for custom types.</p>   <h2 id=\"advanced-usage\">Advanced Usage</h2> <p>The <code>@doc</code> macro associates its first argument with its second in a per-module dictionary called <code>META</code>. By default, documentation is expected to be written in Markdown, and the <code>doc\"\"</code> string macro simply creates an object representing the Markdown content. In the future it is likely to do more advanced things such as allowing for relative image or link paths.</p> <p>When used for retrieving documentation, the <code>@doc</code> macro (or equally, the <code>doc</code> function) will search all <code>META</code> dictionaries for metadata relevant to the given object and return it. The returned object (some Markdown content, for example) will by default display itself intelligently. This design also makes it easy to use the doc system in a programmatic way; for example, to re-use documentation between different versions of a function:</p> <pre data-language=\"julia\">@doc \"...\" foo!\n@doc (@doc foo!) foo\n</pre> <p>Or for use with Julia’s metaprogramming functionality:</p> <pre data-language=\"julia\">for (f, op) in ((:add, :+), (:subtract, :-), (:multiply, :*), (:divide, :/))\n    @eval begin\n        $f(a,b) = $op(a,b)\n    end\nend\n@doc \"`add(a,b)` adds `a` and `b` together\" add\n@doc \"`subtract(a,b)` subtracts `b` from `a`\" subtract\n</pre> <p>Documentation written in non-toplevel blocks, such as <code>if</code>, <code>for</code>, and <code>let</code>, are not automatically added to the documentation system. <code>@doc</code> must be used in these cases. For example:</p> <pre data-language=\"julia\">if VERSION &gt; v\"0.4\"\n    \"...\"\n    f(x) = x\nend\n</pre> <p>will not add any documentation to <code>f</code> even when the condition is <code>true</code> and must instead be written as:</p> <pre data-language=\"julia\">if VERSION &gt; v\"0.4\"\n    @doc \"...\" -&gt;\n    f(x) = x\nend\n</pre>   <h2 id=\"syntax-guide\">Syntax Guide</h2> <p>A comprehensive overview of all documentable Julia syntax.</p> <p>In the following examples <code>\"...\"</code> is used to illustrate an arbitrary docstring which may be one of the follow four variants and contain arbitrary text:</p> <pre data-language=\"julia\">\"...\"\n\ndoc\"...\"\n\n\"\"\"\n...\n\"\"\"\n\ndoc\"\"\"\n...\n\"\"\"\n</pre> <p><code>@doc_str</code> should only be used when the docstring contains <code>$</code> or <code>\\</code> characters that should not be parsed by Julia such as LaTeX syntax or Julia source code examples containing interpolation.</p>  <h3 id=\"functions-and-methods\">Functions and Methods</h3> <pre data-language=\"julia\">\"...\"\nfunction f end\n\n\"...\"\nf\n</pre> <p>Adds docstring <code>\"...\"</code> to <code>Function</code> <code>f</code>. The first version is the preferred syntax, however both are equivalent.</p> <pre data-language=\"julia\">\"...\"\nf(x) = x\n\n\"...\"\nfunction f(x)\n    x\nend\n\n\"...\"\nf(x)\n</pre> <p>Adds docstring <code>\"...\"</code> to <code>Method</code> <code>f(::Any)</code>.</p> <pre data-language=\"julia\">\"...\"\nf(x, y = 1) = x + y\n</pre> <p>Adds docstring <code>\"...\"</code> to two <code>Method</code>s, namely <code>f(::Any)</code> and <code>f(::Any, ::Any)</code>.</p>   <h3 id=\"types\">Types</h3> <pre data-language=\"julia\">\"...\"\nabstract T\n\n\"...\"\ntype T end\n\n\"...\"\nimmutable T end\n</pre> <p>Adds the docstring <code>\"...\"</code> to type <code>T</code>.</p> <pre data-language=\"julia\">\"...\"\ntype T\n    \"x\"\n    x\n    \"y\"\n    y\nend\n</pre> <p>Adds docstring <code>\"...\"</code> to type <code>T</code>, <code>\"x\"</code> to field <code>T.x</code> and <code>\"y\"</code> to field <code>T.y</code>. Also applicable to <code>immutable</code> types.</p> <pre data-language=\"julia\">\"...\"\ntypealias A T\n</pre> <p>Adds docstring <code>\"...\"</code> to the <code>Binding</code> <code>A</code>.</p> <p><code>Binding</code>s are used to store a reference to a particular <code>Symbol</code> in a <code>Module</code> without storing the referenced value itself.</p>   <h3 id=\"macros\">Macros</h3> <pre data-language=\"julia\">\"...\"\nmacro m() end\n\n\"...\"\n:(@m)\n</pre> <p>Adds docstring <code>\"...\"</code> to the <code>Binding</code> <code>@m</code>. Adding documentation at the definition is the preferred approach.</p>   <h3 id=\"modules\">Modules</h3> <pre data-language=\"julia\">\"...\"\nmodule M end\n\nmodule M\n\n\"...\"\nM\n\nend\n</pre> <p>Adds docstring <code>\"...\"</code> to the <code>Module</code> <code>M</code>. Adding the docstring above the <code>Module</code> is the preferred syntax, however both are equivalent.</p> <pre data-language=\"julia\">\"...\"\nbaremodule M\n# ...\nend\n\nbaremodule M\n\nimport Base: call, @doc\n\n\"...\"\nf(x) = x\n\nend\n</pre> <p>Documenting a <code>baremodule</code> by placing a docstring above the expression automatically imports <code>call</code> and <code>@doc</code> into the module. These imports must be done manually when the module expression is not documented. Empty <code>baremodule</code>s cannot be documented.</p>   <h3 id=\"global-variables\">Global Variables</h3> <pre data-language=\"julia\">\"...\"\nconst a = 1\n\n\"...\"\nb = 2\n\n\"...\"\nglobal c = 3\n</pre> <p>Adds docstring <code>\"...\"</code> to the <code>Binding</code>s <code>a</code>, <code>b</code>, and <code>c</code>.</p> <pre data-language=\"julia\">\"...\"\nsym\n</pre> <p>Adds docstring <code>\"...\"</code> to the value associated with <code>sym</code>. Users should prefer documenting <code>sym</code> at it’s definition.</p>   <h3 id=\"multiple-objects\">Multiple Objects</h3> <pre data-language=\"julia\">\"...\"\na, b\n</pre> <p>Adds docstring <code>\"...\"</code> to <code>a</code> and <code>b</code> each of which should be a documentable expression. This syntax is equivalent to</p> <pre data-language=\"julia\">\"...\"\na\n\n\"...\"\nb\n</pre> <p>Any number of expressions many be documented together in this way. This syntax can be useful when two functions are related, such as non-mutating and mutating versions <code>f</code> and <code>f!</code>.</p>   <h3 id=\"macro-generated-code\">Macro-generated code</h3> <pre data-language=\"julia\">\"...\"\n@m expression\n</pre> <p>Adds docstring <code>\"...\"</code> to expression generated by expanding <code>@m expression</code>. This allows for expressions decorated with <code>@inline</code>, <code>@noinline</code>, <code>@generated</code>, or any other macro to be documented in the same way as undecorated expressions.</p> <p>Macro authors should take note that only macros that generate a single expression will automatically support docstrings. If a macro returns a block containing multiple subexpressions then the subexpression that should be documented must be marked using the <a class=\"reference internal\" href=\"#@__doc__\" title=\"@__doc__\"><code>@__doc__()</code></a> macro.</p> <p>The <code>@enum</code> macro makes use of <code>@__doc__</code> to allow for documenting <code>Enum</code>s. Examining it’s definition should serve as an example of how to use <code>@__doc__</code> correctly.</p> <dl class=\"function\"> <dt id=\"@__doc__\">\n<code>@__doc__(ex)</code> </dt> <dd>\n<p>Low-level macro used to mark expressions returned by a macro that should be documented. If more than one expression is marked then the same docstring is applied to each expression.</p> <pre data-language=\"julia\">macro example(f)\n    quote\n        $(f)() = 0\n        @__doc__ $(f)(x) = 1\n        $(f)(x, y) = 2\n    end |&gt; esc\nend\n</pre> <p><code>@__doc__</code> has no effect when a macro that uses it is not documented.</p> </dd>\n</dl>    <h2 id=\"markdown-syntax-notes\">Markdown Syntax Notes</h2> <p>Julia’s Markdown parser supports most of the basic Markdown elements, including paragraphs, code blocks, bulleted lists and basic links. It’s also a work in progress, however, and support for more advanced things like tables is in the works.</p> <p>Markdown.jl supports interpolation in a very similar way to basic string literals, with the difference that it will store the object itself in the Markdown tree (as opposed to converting it to a string). When the Markdown content is rendered the usual <code>writemime</code> methods will be called, and these can be overridden as usual. This design allows the Markdown to be extended with arbitrarily complex features (such as references) without cluttering the basic syntax.</p> <p>In principle, the Markdown parser itself can also be arbitrarily extended by packages, or an entirely custom flavour of Markdown can be used, but this should generally be unnecessary.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/documentation/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/documentation/</a>\n  </p>\n</div>\n","manual/functions/index":"<h1 id=\"man-functions\">Functions</h1> <p>In Julia, a function is an object that maps a tuple of argument values to a return value. Julia functions are not pure mathematical functions, in the sense that functions can alter and be affected by the global state of the program. The basic syntax for defining functions in Julia is:</p> <pre data-language=\"julia\">function f(x,y)\n  x + y\nend\n</pre> <p>There is a second, more terse syntax for defining a function in Julia. The traditional function declaration syntax demonstrated above is equivalent to the following compact “assignment form”:</p> <pre data-language=\"julia\">f(x,y) = x + y\n</pre> <p>In the assignment form, the body of the function must be a single expression, although it can be a compound expression (see <a class=\"reference internal\" href=\"../control-flow/index#man-compound-expressions\"><span>Compound Expressions</span></a>). Short, simple function definitions are common in Julia. The short function syntax is accordingly quite idiomatic, considerably reducing both typing and visual noise.</p> <p>A function is called using the traditional parenthesis syntax:</p> <pre data-language=\"julia\">julia&gt; f(2,3)\n5\n</pre> <p>Without parentheses, the expression <code>f</code> refers to the function object, and can be passed around like any value:</p> <pre data-language=\"julia\">julia&gt; g = f;\n\njulia&gt; g(2,3)\n5\n</pre> <p>As with variables, Unicode can also be used for function names:</p> <pre data-language=\"julia\">julia&gt; ∑(x,y) = x + y\n∑ (generic function with 1 method)\n</pre>  <h2 id=\"argument-passing-behavior\">Argument Passing Behavior</h2> <p>Julia function arguments follow a convention sometimes called “pass-by-sharing”, which means that values are not copied when they are passed to functions. Function arguments themselves act as new variable <em>bindings</em> (new locations that can refer to values), but the values they refer to are identical to the passed values. Modifications to mutable values (such as Arrays) made within a function will be visible to the caller. This is the same behavior found in Scheme, most Lisps, Python, Ruby and Perl, among other dynamic languages.</p>   <h2 id=\"man-return-keyword\">The <code>return</code> Keyword</h2> <p id=\"the-return-keyword\">The value returned by a function is the value of the last expression evaluated, which, by default, is the last expression in the body of the function definition. In the example function, <code>f</code>, from the previous section this is the value of the expression <code>x + y</code>. As in C and most other imperative or functional languages, the <code>return</code> keyword causes a function to return immediately, providing an expression whose value is returned:</p> <pre data-language=\"julia\">function g(x,y)\n  return x * y\n  x + y\nend\n</pre> <p>Since function definitions can be entered into interactive sessions, it is easy to compare these definitions:</p> <pre data-language=\"julia\">f(x,y) = x + y\n\nfunction g(x,y)\n  return x * y\n  x + y\nend\n\njulia&gt; f(2,3)\n5\n\njulia&gt; g(2,3)\n6\n</pre> <p>Of course, in a purely linear function body like <code>g</code>, the usage of <code>return</code> is pointless since the expression <code>x + y</code> is never evaluated and we could simply make <code>x * y</code> the last expression in the function and omit the <code>return</code>. In conjunction with other control flow, however, <code>return</code> is of real use. Here, for example, is a function that computes the hypotenuse length of a right triangle with sides of length <em>x</em> and <em>y</em>, avoiding overflow:</p> <pre data-language=\"julia\">function hypot(x,y)\n  x = abs(x)\n  y = abs(y)\n  if x &gt; y\n    r = y/x\n    return x*sqrt(1+r*r)\n  end\n  if y == 0\n    return zero(x)\n  end\n  r = x/y\n  return y*sqrt(1+r*r)\nend\n</pre> <p>There are three possible points of return from this function, returning the values of three different expressions, depending on the values of <em>x</em> and <em>y</em>. The <code>return</code> on the last line could be omitted since it is the last expression.</p>   <h2 id=\"operators-are-functions\">Operators Are Functions</h2> <p>In Julia, most operators are just functions with support for special syntax. (The exceptions are operators with special evaluation semantics like <code>&amp;&amp;</code> and <code>||</code>. These operators cannot be functions since <a class=\"reference internal\" href=\"../control-flow/index#man-short-circuit-evaluation\"><span>short-circuit evaluation</span></a> requires that their operands are not evaluated before evaluation of the operator.) Accordingly, you can also apply them using parenthesized argument lists, just as you would any other function:</p> <pre data-language=\"julia\">julia&gt; 1 + 2 + 3\n6\n\njulia&gt; +(1,2,3)\n6\n</pre> <p>The infix form is exactly equivalent to the function application form — in fact the former is parsed to produce the function call internally. This also means that you can assign and pass around operators such as <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.+\" title=\"Base.+\"><code>+()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.*\" title=\"Base.*\"><code>*()</code></a> just like you would with other function values:</p> <pre data-language=\"julia\">julia&gt; f = +;\n\njulia&gt; f(1,2,3)\n6\n</pre> <p>Under the name <code>f</code>, the function does not support infix notation, however.</p>   <h2 id=\"operators-with-special-names\">Operators With Special Names</h2> <p>A few special expressions correspond to calls to functions with non-obvious names. These are:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Expression</th> <th class=\"head\">Calls</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>[A B C ...]</code></td> <td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.hcat\" title=\"Base.hcat\"><code>hcat()</code></a></td> </tr> <tr class=\"row-odd\">\n<td><code>[A, B, C, ...]</code></td> <td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.vcat\" title=\"Base.vcat\"><code>vcat()</code></a></td> </tr> <tr class=\"row-even\">\n<td><code>[A B; C D; ...]</code></td> <td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.hvcat\" title=\"Base.hvcat\"><code>hvcat()</code></a></td> </tr> <tr class=\"row-odd\">\n<td><code>A'</code></td> <td><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.ctranspose\" title=\"Base.ctranspose\"><code>ctranspose()</code></a></td> </tr> <tr class=\"row-even\">\n<td><code>A.'</code></td> <td><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.transpose\" title=\"Base.transpose\"><code>transpose()</code></a></td> </tr> <tr class=\"row-odd\">\n<td><code>1:n</code></td> <td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.colon\" title=\"Base.colon\"><code>colon()</code></a></td> </tr> <tr class=\"row-even\">\n<td><code>A[i]</code></td> <td><a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.getindex\" title=\"Base.getindex\"><code>getindex()</code></a></td> </tr> <tr class=\"row-odd\">\n<td><code>A[i]=x</code></td> <td><a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.setindex!\" title=\"Base.setindex!\"><code>setindex!()</code></a></td> </tr> <tr class=\"row-even\">\n<td><code>A(x)</code></td> <td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.call\" title=\"Base.call\"><code>call()</code></a></td> </tr>  </table> <p>These functions are included in the <code>Base.Operators</code> module even though they do not have operator-like names.</p>   <h2 id=\"man-anonymous-functions\">Anonymous Functions</h2> <p id=\"anonymous-functions\">Functions in Julia are <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/First-class_citizen\">first-class objects</a>: they can be assigned to variables, called using the standard function call syntax from the variable they have been assigned to. They can be used as arguments, and they can be returned as values. They can also be created anonymously, without being given a name, using either of these syntaxes:</p> <pre data-language=\"julia\">julia&gt; x -&gt; x^2 + 2x - 1\n(anonymous function)\n\njulia&gt; function (x)\n           x^2 + 2x - 1\n       end\n(anonymous function)\n</pre> <p>This creates an unnamed function taking one argument <em>x</em> and returning the value of the polynomial <em>x</em>^2 + 2<em>x</em> - 1 at that value. The primary use for anonymous functions is passing them to functions which take other functions as arguments. A classic example is <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.map\" title=\"Base.map\"><code>map()</code></a>, which applies a function to each value of an array and returns a new array containing the resulting values:</p> <pre data-language=\"julia\">julia&gt; map(round, [1.2,3.5,1.7])\n3-element Array{Float64,1}:\n 1.0\n 4.0\n 2.0\n</pre> <p>This is fine if a named function effecting the transform one wants already exists to pass as the first argument to <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.map\" title=\"Base.map\"><code>map()</code></a>. Often, however, a ready-to-use, named function does not exist. In these situations, the anonymous function construct allows easy creation of a single-use function object without needing a name:</p> <pre data-language=\"julia\">julia&gt; map(x -&gt; x^2 + 2x - 1, [1,3,-1])\n3-element Array{Int64,1}:\n  2\n 14\n -2\n</pre> <p>An anonymous function accepting multiple arguments can be written using the syntax <code>(x,y,z)-&gt;2x+y-z</code>. A zero-argument anonymous function is written as <code>()-&gt;3</code>. The idea of a function with no arguments may seem strange, but is useful for “delaying” a computation. In this usage, a block of code is wrapped in a zero-argument function, which is later invoked by calling it as <code>f()</code>.</p>   <h2 id=\"multiple-return-values\">Multiple Return Values</h2> <p>In Julia, one returns a tuple of values to simulate returning multiple values. However, tuples can be created and destructured without needing parentheses, thereby providing an illusion that multiple values are being returned, rather than a single tuple value. For example, the following function returns a pair of values:</p> <pre data-language=\"julia\">julia&gt; function foo(a,b)\n         a+b, a*b\n       end;\n</pre> <p>If you call it in an interactive session without assigning the return value anywhere, you will see the tuple returned:</p> <pre data-language=\"julia\">julia&gt; foo(2,3)\n(5,6)\n</pre> <p>A typical usage of such a pair of return values, however, extracts each value into a variable. Julia supports simple tuple “destructuring” that facilitates this:</p> <pre data-language=\"julia\">julia&gt; x, y = foo(2,3);\n\njulia&gt; x\n5\n\njulia&gt; y\n6\n</pre> <p>You can also return multiple values via an explicit usage of the <code>return</code> keyword:</p> <pre data-language=\"julia\">function foo(a,b)\n  return a+b, a*b\nend\n</pre> <p>This has the exact same effect as the previous definition of <code>foo</code>.</p>   <h2 id=\"man-varargs-functions\">Varargs Functions</h2> <p id=\"varargs-functions\">It is often convenient to be able to write functions taking an arbitrary number of arguments. Such functions are traditionally known as “varargs” functions, which is short for “variable number of arguments”. You can define a varargs function by following the last argument with an ellipsis:</p> <pre data-language=\"julia\">julia&gt; bar(a,b,x...) = (a,b,x)\nbar (generic function with 1 method)\n</pre> <p>The variables <code>a</code> and <code>b</code> are bound to the first two argument values as usual, and the variable <code>x</code> is bound to an iterable collection of the zero or more values passed to <code>bar</code> after its first two arguments:</p> <pre data-language=\"julia\">julia&gt; bar(1,2)\n(1,2,())\n\njulia&gt; bar(1,2,3)\n(1,2,(3,))\n\njulia&gt; bar(1,2,3,4)\n(1,2,(3,4))\n\njulia&gt; bar(1,2,3,4,5,6)\n(1,2,(3,4,5,6))\n</pre> <p>In all these cases, <code>x</code> is bound to a tuple of the trailing values passed to <code>bar</code>.</p> <p>On the flip side, it is often handy to “splice” the values contained in an iterable collection into a function call as individual arguments. To do this, one also uses <code>...</code> but in the function call instead:</p> <pre data-language=\"julia\">julia&gt; x = (3,4)\n(3,4)\n\njulia&gt; bar(1,2,x...)\n(1,2,(3,4))\n</pre> <p>In this case a tuple of values is spliced into a varargs call precisely where the variable number of arguments go. This need not be the case, however:</p> <pre data-language=\"julia\">julia&gt; x = (2,3,4)\n(2,3,4)\n\njulia&gt; bar(1,x...)\n(1,2,(3,4))\n\njulia&gt; x = (1,2,3,4)\n(1,2,3,4)\n\njulia&gt; bar(x...)\n(1,2,(3,4))\n</pre> <p>Furthermore, the iterable object spliced into a function call need not be a tuple:</p> <pre data-language=\"julia\">julia&gt; x = [3,4]\n2-element Array{Int64,1}:\n 3\n 4\n\njulia&gt; bar(1,2,x...)\n(1,2,(3,4))\n\njulia&gt; x = [1,2,3,4]\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\njulia&gt; bar(x...)\n(1,2,(3,4))\n</pre> <p>Also, the function that arguments are spliced into need not be a varargs function (although it often is):</p> <pre data-language=\"julia\">baz(a,b) = a + b\n\njulia&gt; args = [1,2]\n2-element Array{Int64,1}:\n 1\n 2\n\njulia&gt; baz(args...)\n3\n\njulia&gt; args = [1,2,3]\n3-element Array{Int64,1}:\n 1\n 2\n 3\n\njulia&gt; baz(args...)\nno method baz(Int64,Int64,Int64)\n</pre> <p>As you can see, if the wrong number of elements are in the spliced container, then the function call will fail, just as it would if too many arguments were given explicitly.</p>   <h2 id=\"optional-arguments\">Optional Arguments</h2> <p>In many cases, function arguments have sensible default values and therefore might not need to be passed explicitly in every call. For example, the library function <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.parse\" title=\"Base.parse\"><code>parse(type,num,base)</code></a> interprets a string as a number in some base. The <code>base</code> argument defaults to <code>10</code>. This behavior can be expressed concisely as:</p> <pre data-language=\"julia\">function parse(type, num, base=10)\n    ###\nend\n</pre> <p>With this definition, the function can be called with either two or three arguments, and <code>10</code> is automatically passed when a third argument is not specified:</p> <pre data-language=\"julia\">julia&gt; parse(Int,\"12\",10)\n12\n\njulia&gt; parse(Int,\"12\",3)\n5\n\njulia&gt; parse(Int,\"12\")\n12\n</pre> <p>Optional arguments are actually just a convenient syntax for writing multiple method definitions with different numbers of arguments (see <a class=\"reference internal\" href=\"../methods/index#man-note-on-optional-and-keyword-arguments\"><span>Note on Optional and keyword Arguments</span></a>).</p>   <h2 id=\"keyword-arguments\">Keyword Arguments</h2> <p>Some functions need a large number of arguments, or have a large number of behaviors. Remembering how to call such functions can be difficult. Keyword arguments can make these complex interfaces easier to use and extend by allowing arguments to be identified by name instead of only by position.</p> <p>For example, consider a function <code>plot</code> that plots a line. This function might have many options, for controlling line style, width, color, and so on. If it accepts keyword arguments, a possible call might look like <code>plot(x, y, width=2)</code>, where we have chosen to specify only line width. Notice that this serves two purposes. The call is easier to read, since we can label an argument with its meaning. It also becomes possible to pass any subset of a large number of arguments, in any order.</p> <p>Functions with keyword arguments are defined using a semicolon in the signature:</p> <pre data-language=\"julia\">function plot(x, y; style=\"solid\", width=1, color=\"black\")\n    ###\nend\n</pre> <p>When the function is called, the semicolon is optional: one can either call <code>plot(x, y, width=2)</code> or <code>plot(x, y; width=2)</code>, but the former style is more common. An explicit semicolon is required only for passing varargs or computed keywords as described below.</p> <p>Keyword argument default values are evaluated only when necessary (when a corresponding keyword argument is not passed), and in left-to-right order. Therefore default expressions may refer to prior keyword arguments.</p> <p>The types of keyword arguments can be made explicit as follows:</p> <pre data-language=\"julia\">function f(;x::Int64=1)\n    ###\nend\n</pre> <p>Extra keyword arguments can be collected using <code>...</code>, as in varargs functions:</p> <pre data-language=\"julia\">function f(x; y=0, kwargs...)\n    ###\nend\n</pre> <p>Inside <code>f</code>, <code>kwargs</code> will be a collection of <code>(key,value)</code> tuples, where each <code>key</code> is a symbol. Such collections can be passed as keyword arguments using a semicolon in a call, e.g. <code>f(x, z=1; kwargs...)</code>. Dictionaries can also be used for this purpose.</p> <p>One can also pass <code>(key,value)</code> tuples, or any iterable expression (such as a <code>=&gt;</code> pair) that can be assigned to such a tuple, explicitly after a semicolon. For example, <code>plot(x, y;\n(:width,2))</code> and <code>plot(x, y; :width =&gt; 2)</code> are equivalent to <code>plot(x, y, width=2)</code>. This is useful in situations where the keyword name is computed at runtime.</p>   <h2 id=\"man-evaluation-scope-default-values\">Evaluation Scope of Default Values</h2> <p id=\"evaluation-scope-of-default-values\">Optional and keyword arguments differ slightly in how their default values are evaluated. When optional argument default expressions are evaluated, only <em>previous</em> arguments are in scope. In contrast, <em>all</em> the arguments are in scope when keyword arguments default expressions are evaluated. For example, given this definition:</p> <pre data-language=\"julia\">function f(x, a=b, b=1)\n    ###\nend\n</pre> <p>the <code>b</code> in <code>a=b</code> refers to a <code>b</code> in an outer scope, not the subsequent argument <code>b</code>. However, if <code>a</code> and <code>b</code> were keyword arguments instead, then both would be created in the same scope and the <code>b</code> in <code>a=b</code> would refer to the subsequent argument <code>b</code> (shadowing any <code>b</code> in an outer scope), which would result in an undefined variable error (since the default expressions are evaluated left-to-right, and <code>b</code> has not been assigned yet).</p>   <h2 id=\"do-block-syntax-for-function-arguments\">Do-Block Syntax for Function Arguments</h2> <p>Passing functions as arguments to other functions is a powerful technique, but the syntax for it is not always convenient. Such calls are especially awkward to write when the function argument requires multiple lines. As an example, consider calling <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.map\" title=\"Base.map\"><code>map()</code></a> on a function with several cases:</p> <pre data-language=\"julia\">map(x-&gt;begin\n           if x &lt; 0 &amp;&amp; iseven(x)\n               return 0\n           elseif x == 0\n               return 1\n           else\n               return x\n           end\n       end,\n    [A, B, C])\n</pre> <p>Julia provides a reserved word <code>do</code> for rewriting this code more clearly:</p> <pre data-language=\"julia\">map([A, B, C]) do x\n    if x &lt; 0 &amp;&amp; iseven(x)\n        return 0\n    elseif x == 0\n        return 1\n    else\n        return x\n    end\nend\n</pre> <p>The <code>do x</code> syntax creates an anonymous function with argument <code>x</code> and passes it as the first argument to <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.map\" title=\"Base.map\"><code>map()</code></a>. Similarly, <code>do a,b</code> would create a two-argument anonymous function, and a plain <code>do</code> would declare that what follows is an anonymous function of the form <code>() -&gt; ...</code>.</p> <p>How these arguments are initialized depends on the “outer” function; here, <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.map\" title=\"Base.map\"><code>map()</code></a> will sequentially set <code>x</code> to <code>A</code>, <code>B</code>, <code>C</code>, calling the anonymous function on each, just as would happen in the syntax <code>map(func, [A, B, C])</code>.</p> <p>This syntax makes it easier to use functions to effectively extend the language, since calls look like normal code blocks. There are many possible uses quite different from <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.map\" title=\"Base.map\"><code>map()</code></a>, such as managing system state. For example, there is a version of <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.open\" title=\"Base.open\"><code>open()</code></a> that runs code ensuring that the opened file is eventually closed:</p> <pre data-language=\"julia\">open(\"outfile\", \"w\") do io\n    write(io, data)\nend\n</pre> <p>This is accomplished by the following definition:</p> <pre data-language=\"julia\">function open(f::Function, args...)\n    io = open(args...)\n    try\n        f(io)\n    finally\n        close(io)\n    end\nend\n</pre> <p>In contrast to the <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.map\" title=\"Base.map\"><code>map()</code></a> example, here <code>io</code> is initialized by the <em>result</em> of <code>open(\"outfile\", \"w\")</code>. The stream is then passed to your anonymous function, which performs the writing; finally, the <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.open\" title=\"Base.open\"><code>open()</code></a> function ensures that the stream is closed after your function exits. The <code>try/finally</code> construct will be described in <a class=\"reference internal\" href=\"../control-flow/index#man-control-flow\"><span>Control Flow</span></a>.</p> <p>With the <code>do</code> block syntax, it helps to check the documentation or implementation to know how the arguments of the user function are initialized.</p>   <h2 id=\"further-reading\">Further Reading</h2> <p>We should mention here that this is far from a complete picture of defining functions. Julia has a sophisticated type system and allows multiple dispatch on argument types. None of the examples given here provide any type annotations on their arguments, meaning that they are applicable to all types of arguments. The type system is described in <a class=\"reference internal\" href=\"../types/index#man-types\"><span>Types</span></a> and defining a function in terms of methods chosen by multiple dispatch on run-time argument types is described in <a class=\"reference internal\" href=\"../methods/index#man-methods\"><span>Methods</span></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/functions/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/functions/</a>\n  </p>\n</div>\n","manual/conversion-and-promotion/index":"<h1 id=\"man-conversion-and-promotion\">Conversion and Promotion</h1> <p>Julia has a system for promoting arguments of mathematical operators to a common type, which has been mentioned in various other sections, including <a class=\"reference internal\" href=\"../integers-and-floating-point-numbers/index#man-integers-and-floating-point-numbers\"><span>Integers and Floating-Point Numbers</span></a>, <a class=\"reference internal\" href=\"../mathematical-operations/index#man-mathematical-operations\"><span>Mathematical Operations and Elementary Functions</span></a>, <a class=\"reference internal\" href=\"../types/index#man-types\"><span>Types</span></a>, and <a class=\"reference internal\" href=\"../methods/index#man-methods\"><span>Methods</span></a>. In this section, we explain how this promotion system works, as well as how to extend it to new types and apply it to functions besides built-in mathematical operators. Traditionally, programming languages fall into two camps with respect to promotion of arithmetic arguments:</p> <ul class=\"simple\"> <li>\n<strong>Automatic promotion for built-in arithmetic types and operators.</strong> In most languages, built-in numeric types, when used as operands to arithmetic operators with infix syntax, such as <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code>, are automatically promoted to a common type to produce the expected results. C, Java, Perl, and Python, to name a few, all correctly compute the sum <code>1 + 1.5</code> as the floating-point value <code>2.5</code>, even though one of the operands to <code>+</code> is an integer. These systems are convenient and designed carefully enough that they are generally all-but-invisible to the programmer: hardly anyone consciously thinks of this promotion taking place when writing such an expression, but compilers and interpreters must perform conversion before addition since integers and floating-point values cannot be added as-is. Complex rules for such automatic conversions are thus inevitably part of specifications and implementations for such languages.</li> <li>\n<strong>No automatic promotion.</strong> This camp includes Ada and ML — very “strict” statically typed languages. In these languages, every conversion must be explicitly specified by the programmer. Thus, the example expression <code>1 + 1.5</code> would be a compilation error in both Ada and ML. Instead one must write <code>real(1) + 1.5</code>, explicitly converting the integer <code>1</code> to a floating-point value before performing addition. Explicit conversion everywhere is so inconvenient, however, that even Ada has some degree of automatic conversion: integer literals are promoted to the expected integer type automatically, and floating-point literals are similarly promoted to appropriate floating-point types.</li> </ul> <p>In a sense, Julia falls into the “no automatic promotion” category: mathematical operators are just functions with special syntax, and the arguments of functions are never automatically converted. However, one may observe that applying mathematical operations to a wide variety of mixed argument types is just an extreme case of polymorphic multiple dispatch — something which Julia’s dispatch and type systems are particularly well-suited to handle. “Automatic” promotion of mathematical operands simply emerges as a special application: Julia comes with pre-defined catch-all dispatch rules for mathematical operators, invoked when no specific implementation exists for some combination of operand types. These catch-all rules first promote all operands to a common type using user-definable promotion rules, and then invoke a specialized implementation of the operator in question for the resulting values, now of the same type. User-defined types can easily participate in this promotion system by defining methods for conversion to and from other types, and providing a handful of promotion rules defining what types they should promote to when mixed with other types.</p>  <h2 id=\"man-conversion\">Conversion</h2> <p id=\"conversion\">Conversion of values to various types is performed by the <code>convert</code> function. The <code>convert</code> function generally takes two arguments: the first is a type object while the second is a value to convert to that type; the returned value is the value converted to an instance of given type. The simplest way to understand this function is to see it in action:</p> <pre data-language=\"julia\">julia&gt; x = 12\n12\n\njulia&gt; typeof(x)\nInt64\n\njulia&gt; convert(UInt8, x)\n0x0c\n\njulia&gt; typeof(ans)\nUInt8\n\njulia&gt; convert(AbstractFloat, x)\n12.0\n\njulia&gt; typeof(ans)\nFloat64\n</pre> <p>Conversion isn’t always possible, in which case a no method error is thrown indicating that <code>convert</code> doesn’t know how to perform the requested conversion:</p> <pre data-language=\"julia\">julia&gt; convert(AbstractFloat, \"foo\")\nERROR: MethodError: `convert` has no method matching convert(::Type{AbstractFloat}, ::ASCIIString)\nThis may have arisen from a call to the constructor AbstractFloat(...),\nsince type constructors fall back to convert methods.\nClosest candidates are:\n  call{T}(::Type{T}, ::Any)\n  convert(::Type{AbstractFloat}, !Matched::Bool)\n  convert(::Type{AbstractFloat}, !Matched::Int8)\n  ...\n</pre> <p>Some languages consider parsing strings as numbers or formatting numbers as strings to be conversions (many dynamic languages will even perform conversion for you automatically), however Julia does not: even though some strings can be parsed as numbers, most strings are not valid representations of numbers, and only a very limited subset of them are. Therefore in Julia the dedicated <code>parse()</code> function must be used to perform this operation, making it more explicit.</p>  <h3 id=\"defining-new-conversions\">Defining New Conversions</h3> <p>To define a new conversion, simply provide a new method for <code>convert()</code>. That’s really all there is to it. For example, the method to convert a real number to a boolean is this:</p> <pre data-language=\"julia\">convert(::Type{Bool}, x::Real) = x==0 ? false : x==1 ? true : throw(InexactError())\n</pre> <p>The type of the first argument of this method is a <a class=\"reference internal\" href=\"../types/index#man-singleton-types\"><span>singleton type</span></a>, <code>Type{Bool}</code>, the only instance of which is <code>Bool</code>. Thus, this method is only invoked when the first argument is the type value <code>Bool</code>. Notice the syntax used for the first argument: the argument name is omitted prior to the <code>::</code> symbol, and only the type is given. This is the syntax in Julia for a function argument whose type is specified but whose value is never used in the function body. In this example, since the type is a singleton, there would never be any reason to use its value within the body. When invoked, the method determines whether a numeric value is true or false as a boolean, by comparing it to one and zero:</p> <pre data-language=\"julia\">julia&gt; convert(Bool, 1)\ntrue\n\njulia&gt; convert(Bool, 0)\nfalse\n\njulia&gt; convert(Bool, 1im)\nERROR: InexactError()\n in convert at complex.jl:18\n\njulia&gt; convert(Bool, 0im)\nfalse\n</pre> <p>The method signatures for conversion methods are often quite a bit more involved than this example, especially for parametric types. The example above is meant to be pedagogical, and is not the actual julia behaviour. This is the actual implementation in julia:</p> <pre data-language=\"julia\">convert{T&lt;:Real}(::Type{T}, z::Complex) = (imag(z)==0 ? convert(T,real(z)) :\n                                           throw(InexactError()))\n</pre> <pre data-language=\"julia\">julia&gt; convert(Bool, 1im)\nERROR: InexactError()\n in convert at complex.jl:18\n</pre>   <h3 id=\"case-study-rational-conversions\">Case Study: Rational Conversions</h3> <p>To continue our case study of Julia’s <code>Rational</code> type, here are the conversions declared in <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/base/rational.jl\">rational.jl</a>, right after the declaration of the type and its constructors:</p> <pre data-language=\"julia\">convert{T&lt;:Integer}(::Type{Rational{T}}, x::Rational) = Rational(convert(T,x.num),convert(T,x.den))\nconvert{T&lt;:Integer}(::Type{Rational{T}}, x::Integer) = Rational(convert(T,x), convert(T,1))\n\nfunction convert{T&lt;:Integer}(::Type{Rational{T}}, x::AbstractFloat, tol::Real)\n    if isnan(x); return zero(T)//zero(T); end\n    if isinf(x); return sign(x)//zero(T); end\n    y = x\n    a = d = one(T)\n    b = c = zero(T)\n    while true\n        f = convert(T,round(y)); y -= f\n        a, b, c, d = f*a+c, f*b+d, a, b\n        if y == 0 || abs(a/b-x) &lt;= tol\n            return a//b\n        end\n        y = 1/y\n    end\nend\nconvert{T&lt;:Integer}(rt::Type{Rational{T}}, x::AbstractFloat) = convert(rt,x,eps(x))\n\nconvert{T&lt;:AbstractFloat}(::Type{T}, x::Rational) = convert(T,x.num)/convert(T,x.den)\nconvert{T&lt;:Integer}(::Type{T}, x::Rational) = div(convert(T,x.num),convert(T,x.den))\n</pre> <p>The initial four convert methods provide conversions to rational types. The first method converts one type of rational to another type of rational by converting the numerator and denominator to the appropriate integer type. The second method does the same conversion for integers by taking the denominator to be 1. The third method implements a standard algorithm for approximating a floating-point number by a ratio of integers to within a given tolerance, and the fourth method applies it, using machine epsilon at the given value as the threshold. In general, one should have <code>a//b == convert(Rational{Int64}, a/b)</code>.</p> <p>The last two convert methods provide conversions from rational types to floating-point and integer types. To convert to floating point, one simply converts both numerator and denominator to that floating point type and then divides. To convert to integer, one can use the <code>div</code> operator for truncated integer division (rounded towards zero).</p>    <h2 id=\"man-promotion\">Promotion</h2> <p id=\"promotion\">Promotion refers to converting values of mixed types to a single common type. Although it is not strictly necessary, it is generally implied that the common type to which the values are converted can faithfully represent all of the original values. In this sense, the term “promotion” is appropriate since the values are converted to a “greater” type — i.e. one which can represent all of the input values in a single common type. It is important, however, not to confuse this with object-oriented (structural) super-typing, or Julia’s notion of abstract super-types: promotion has nothing to do with the type hierarchy, and everything to do with converting between alternate representations. For instance, although every <code>Int32</code> value can also be represented as a <code>Float64</code> value, <code>Int32</code> is not a subtype of <code>Float64</code>.</p> <p>Promotion to a common “greater” type is performed in Julia by the <code>promote</code> function, which takes any number of arguments, and returns a tuple of the same number of values, converted to a common type, or throws an exception if promotion is not possible. The most common use case for promotion is to convert numeric arguments to a common type:</p> <pre data-language=\"julia\">julia&gt; promote(1, 2.5)\n(1.0,2.5)\n\njulia&gt; promote(1, 2.5, 3)\n(1.0,2.5,3.0)\n\njulia&gt; promote(2, 3//4)\n(2//1,3//4)\n\njulia&gt; promote(1, 2.5, 3, 3//4)\n(1.0,2.5,3.0,0.75)\n\njulia&gt; promote(1.5, im)\n(1.5 + 0.0im,0.0 + 1.0im)\n\njulia&gt; promote(1 + 2im, 3//4)\n(1//1 + 2//1*im,3//4 + 0//1*im)\n</pre> <p>Floating-point values are promoted to the largest of the floating-point argument types. Integer values are promoted to the larger of either the native machine word size or the largest integer argument type. Mixtures of integers and floating-point values are promoted to a floating-point type big enough to hold all the values. Integers mixed with rationals are promoted to rationals. Rationals mixed with floats are promoted to floats. Complex values mixed with real values are promoted to the appropriate kind of complex value.</p> <p>That is really all there is to using promotions. The rest is just a matter of clever application, the most typical “clever” application being the definition of catch-all methods for numeric operations like the arithmetic operators <code>+</code>, <code>-</code>, <code>*</code> and <code>/</code>. Here are some of the catch-all method definitions given in <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/base/promotion.jl\">promotion.jl</a>:</p> <pre data-language=\"julia\">+(x::Number, y::Number) = +(promote(x,y)...)\n-(x::Number, y::Number) = -(promote(x,y)...)\n*(x::Number, y::Number) = *(promote(x,y)...)\n/(x::Number, y::Number) = /(promote(x,y)...)\n</pre> <p>In certain cases, the result type also depends on the operator; how to handle such scenarios is described <a class=\"reference internal\" href=\"http://docs.julialang.org/en/release-0.4/devdocs/promote-op/#devdocs-promote-op\"><span>elsewhere</span></a>.</p> <p>These method definitions say that in the absence of more specific rules for adding, subtracting, multiplying and dividing pairs of numeric values, promote the values to a common type and then try again. That’s all there is to it: nowhere else does one ever need to worry about promotion to a common numeric type for arithmetic operations — it just happens automatically. There are definitions of catch-all promotion methods for a number of other arithmetic and mathematical functions in <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/base/promotion.jl\">promotion.jl</a>, but beyond that, there are hardly any calls to <code>promote</code> required in the Julia standard library. The most common usages of <code>promote</code> occur in outer constructors methods, provided for convenience, to allow constructor calls with mixed types to delegate to an inner type with fields promoted to an appropriate common type. For example, recall that <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/base/rational.jl\">rational.jl</a> provides the following outer constructor method:</p> <pre data-language=\"julia\">Rational(n::Integer, d::Integer) = Rational(promote(n,d)...)\n</pre> <p>This allows calls like the following to work:</p> <pre data-language=\"julia\">julia&gt; Rational(Int8(15),Int32(-5))\n-3//1\n\njulia&gt; typeof(ans)\nRational{Int32}\n</pre> <p>For most user-defined types, it is better practice to require programmers to supply the expected types to constructor functions explicitly, but sometimes, especially for numeric problems, it can be convenient to do promotion automatically.</p>  <h3 id=\"man-promotion-rules\">Defining Promotion Rules</h3> <p id=\"defining-promotion-rules\">Although one could, in principle, define methods for the <code>promote</code> function directly, this would require many redundant definitions for all possible permutations of argument types. Instead, the behavior of <code>promote</code> is defined in terms of an auxiliary function called <code>promote_rule</code>, which one can provide methods for. The <code>promote_rule</code> function takes a pair of type objects and returns another type object, such that instances of the argument types will be promoted to the returned type. Thus, by defining the rule:</p> <pre data-language=\"julia\">promote_rule(::Type{Float64}, ::Type{Float32} ) = Float64\n</pre> <p>one declares that when 64-bit and 32-bit floating-point values are promoted together, they should be promoted to 64-bit floating-point. The promotion type does not need to be one of the argument types, however; the following promotion rules both occur in Julia’s standard library:</p> <pre data-language=\"julia\">promote_rule(::Type{UInt8}, ::Type{Int8}) = Int\npromote_rule(::Type{BigInt}, ::Type{Int8}) = BigInt\n</pre> <p>In the latter case, the result type is <code>BigInt</code> since <code>BigInt</code> is the only type large enough to hold integers for arbitrary-precision integer arithmetic. Also note that one does not need to define both <code>promote_rule(::Type{A}, ::Type{B})</code> and <code>promote_rule(::Type{B}, ::Type{A})</code> — the symmetry is implied by the way <code>promote_rule</code> is used in the promotion process.</p> <p>The <code>promote_rule</code> function is used as a building block to define a second function called <code>promote_type</code>, which, given any number of type objects, returns the common type to which those values, as arguments to <code>promote</code> should be promoted. Thus, if one wants to know, in absence of actual values, what type a collection of values of certain types would promote to, one can use <code>promote_type</code>:</p> <pre data-language=\"julia\">julia&gt; promote_type(Int8, UInt16)\nInt64\n</pre> <p>Internally, <code>promote_type</code> is used inside of <code>promote</code> to determine what type argument values should be converted to for promotion. It can, however, be useful in its own right. The curious reader can read the code in <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/base/promotion.jl\">promotion.jl</a>, which defines the complete promotion mechanism in about 35 lines.</p>   <h3 id=\"case-study-rational-promotions\">Case Study: Rational Promotions</h3> <p>Finally, we finish off our ongoing case study of Julia’s rational number type, which makes relatively sophisticated use of the promotion mechanism with the following promotion rules:</p> <pre data-language=\"julia\">promote_rule{T&lt;:Integer}(::Type{Rational{T}}, ::Type{T}) = Rational{T}\npromote_rule{T&lt;:Integer,S&lt;:Integer}(::Type{Rational{T}}, ::Type{S}) = Rational{promote_type(T,S)}\npromote_rule{T&lt;:Integer,S&lt;:Integer}(::Type{Rational{T}}, ::Type{Rational{S}}) = Rational{promote_type(T,S)}\npromote_rule{T&lt;:Integer,S&lt;:AbstractFloat}(::Type{Rational{T}}, ::Type{S}) = promote_type(T,S)\n</pre> <p>The first rule asserts that promotion of a rational number with its own numerator/denominator type, simply promotes to itself. The second rule says that promoting a rational number with any other integer type promotes to a rational type whose numerator/denominator type is the result of promotion of its numerator/denominator type with the other integer type. The third rule applies the same logic to two different types of rational numbers, resulting in a rational of the promotion of their respective numerator/denominator types. The fourth and final rule dictates that promoting a rational with a float results in the same type as promoting the numerator/denominator type with the float.</p> <p>This small handful of promotion rules, together with the <a class=\"reference external\" href=\"#case-study-rational-conversions\">conversion methods discussed above</a>, are sufficient to make rational numbers interoperate completely naturally with all of Julia’s other numeric types — integers, floating-point numbers, and complex numbers. By providing appropriate conversion methods and promotion rules in the same manner, any user-defined numeric type can interoperate just as naturally with Julia’s predefined numerics.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/conversion-and-promotion/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/conversion-and-promotion/</a>\n  </p>\n</div>\n","manual/interfaces/index":"<h1 id=\"man-interfaces\">Interfaces</h1> <p>A lot of the power and extensibility in Julia comes from a collection of informal interfaces. By extending a few specific methods to work for a custom type, objects of that type not only receive those functionalities, but they are also able to be used in other methods that are written to generically build upon those behaviors.</p>  <h2 id=\"man-interfaces-iteration\">Iteration</h2> <table class=\"docutils\" id=\"iteration\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Required methods</th> <th class=\"head\"> </th> <th class=\"head\">Brief description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>start(iter)</code></td> <td> </td> <td>Returns the initial iteration state</td> </tr> <tr class=\"row-odd\">\n<td><code>next(iter, state)</code></td> <td> </td> <td>Returns the current item and the next state</td> </tr> <tr class=\"row-even\">\n<td><code>done(iter, state)</code></td> <td> </td> <td>Tests if there are any items remaining</td> </tr> <tr class=\"row-odd\">\n<td><strong>Important optional methods</strong></td> <td><strong>Default definition</strong></td> <td><strong>Brief description</strong></td> </tr> <tr class=\"row-even\">\n<td><code>eltype(IterType)</code></td> <td><code>Any</code></td> <td>The type the items returned by <code>next()</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><code>length(iter)</code></td> <td>(<em>undefined</em>)</td> <td>The number of items, if known</td> </tr>  </table> <p>Sequential iteration is implemented by the methods <code>start()</code>, <code>done()</code>, and <code>next()</code>. Instead of mutating objects as they are iterated over, Julia provides these three methods to keep track of the iteration state externally from the object. The <code>start(iter)</code> method returns the initial state for the iterable object <code>iter</code>. That state gets passed along to <code>done(iter, state)</code>, which tests if there are any elements remaining, and <code>next(iter, state)</code>, which returns a tuple containing the current element and an updated <code>state</code>. The <code>state</code> object can be anything, and is generally considered to be an implementation detail private to the iterable object.</p> <p>Any object defines these three methods is iterable and can be used in the <a class=\"reference internal\" href=\"../../stdlib/collections/index#stdlib-collections-iteration\"><span>many functions that rely upon iteration</span></a>. It can also be used directly in a <code>for</code> loop since the syntax:</p> <pre data-language=\"julia\">for i in iter   # or  \"for i = iter\"\n    # body\nend\n</pre> <p>is translated into:</p> <pre data-language=\"julia\">state = start(iter)\nwhile !done(iter, state)\n    (i, state) = next(iter, state)\n    # body\nend\n</pre> <p>A simple example is an iterable sequence of square numbers with a defined length:</p> <pre data-language=\"julia\">julia&gt; immutable Squares\n           count::Int\n       end\n       Base.start(::Squares) = 1\n       Base.next(S::Squares, state) = (state*state, state+1)\n       Base.done(S::Squares, s) = s &gt; S.count;\n       Base.eltype(::Type{Squares}) = Int # Note that this is defined for the type\n       Base.length(S::Squares) = S.count;\n</pre> <p>With only <code>start</code>, <code>next</code>, and <code>done</code> definitions, the <code>Squares</code> type is already pretty powerful. We can iterate over all the elements:</p> <pre data-language=\"julia\">julia&gt; for i in Squares(7)\n           println(i)\n       end\n1\n4\n9\n16\n25\n36\n49\n</pre> <p>We can use many of the builtin methods that work with iterables, like <code>in()</code>, <code>mean()</code> and <code>std()</code>:</p> <pre data-language=\"julia\">julia&gt; 25 in Squares(10)\ntrue\n\njulia&gt; mean(Squares(100)), std(Squares(100))\n(3383.5,3024.355854282583)\n</pre> <p>There are a few more methods we can extend to give Julia more information about this iterable collection. We know that the elements in a <code>Squares</code> sequence will always be <code>Int</code>. By extending the <code>eltype()</code> method, we can give that information to Julia and help it make more specialized code in the more complicated methods. We also know the number of elements in our sequence, so we can extend <code>length()</code>, too.</p> <p>Now, when we ask Julia to <code>collect()</code> all the elements into an array it can preallocate a <code>Vector{Int}</code> of the right size instead of blindly <code>push!</code>ing each element into a <code>Vector{Any}</code>:</p> <pre data-language=\"julia\">julia&gt; collect(Squares(100))' # transposed to save space\n1x100 Array{Int64,2}:\n 1  4  9  16  25  36  49  64  81  100  …  9025  9216  9409  9604  9801  10000\n</pre> <p>While we can rely upon generic implementations, we can also extend specific methods where we know there is a simpler algorithm. For example, there’s a formula to compute the sum of squares, so we can override the generic iterative version with a more performant solution:</p> <pre data-language=\"julia\">julia&gt; Base.sum(S::Squares) = (n = S.count; return n*(n+1)*(2n+1)÷6)\n       sum(Squares(1803))\n1955361914\n</pre> <p>This is a very common pattern throughout the Julia standard library: a small set of required methods define an informal interface that enable many fancier behaviors. In some cases, types will want to additionally specialize those extra behaviors when they know a more efficient algorithm can be used in their specific case.</p>   <h2 id=\"man-interfaces-indexing\">Indexing</h2> <table class=\"docutils\" id=\"indexing\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Methods to implement</th> <th class=\"head\">Brief description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>getindex(X, i)</code></td> <td>\n<code>X[i]</code>, indexed element access</td> </tr> <tr class=\"row-odd\">\n<td><code>setindex!(X, v, i)</code></td> <td>\n<code>X[i] = v</code>, indexed assignment</td> </tr> <tr class=\"row-even\">\n<td><code>endof(X)</code></td> <td>The last index, used in <code>X[end]</code>\n</td> </tr>  </table> <p>For the <code>Squares</code> iterable above, we can easily compute the <code>i</code>th element of the sequence by squaring it. We can expose this as an indexing expression <code>S[i]</code>. To opt into this behavior, <code>Squares</code> simply needs to define <code>getindex()</code>:</p> <pre data-language=\"julia\">julia&gt; function Base.getindex(S::Squares, i::Int)\n           1 &lt;= i &lt;= S.count || throw(BoundsError(S, i))\n           return i*i\n       end\n       Squares(100)[23]\n529\n</pre> <p>Additionally, to support the syntax <code>S[end]</code>, we must define <code>endof()</code> to specify the last valid index:</p> <pre data-language=\"julia\">julia&gt; Base.endof(S::Squares) = length(S)\n       Squares(23)[end]\n529\n</pre> <p>Note, though, that the above <em>only</em> defines <code>getindex()</code> with one integer index. Indexing with anything other than an <code>Int</code> will throw a <code>MethodError</code> saying that there was no matching method. In order to support indexing with ranges or vectors of Ints, separate methods must be written:</p> <pre data-language=\"julia\">julia&gt; Base.getindex(S::Squares, i::Number) = S[convert(Int, i)]\n       Base.getindex(S::Squares, I) = [S[i] for i in I]\n       Squares(10)[[3,4.,5]]\n3-element Array{Int64,1}:\n  9\n 16\n 25\n</pre> <p>While this is starting to support more of the <a class=\"reference internal\" href=\"../arrays/index#man-array-indexing\"><span>indexing operations supported by some of the builtin types</span></a>, there’s still quite a number of behaviors missing. This <code>Squares</code> sequence is starting to look more and more like a vector as we’ve added behaviors to it. Instead of defining all these behaviors ourselves, we can officially define it as a subtype of an <code>AbstractArray</code>.</p>   <h2 id=\"man-interfaces-abstractarray\">Abstract Arrays</h2> <table class=\"docutils\" id=\"abstract-arrays\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Methods to implement</th> <th class=\"head\"> </th> <th class=\"head\">Brief description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>size(A)</code></td> <td> </td> <td>Returns a tuple containing the dimensions of A</td> </tr> <tr class=\"row-odd\">\n<td><code>Base.linearindexing(Type)</code></td> <td> </td> <td>Returns either <code>Base.LinearFast()</code> or <code>Base.LinearSlow()</code>. See the description below.</td> </tr> <tr class=\"row-even\">\n<td><code>getindex(A, i::Int)</code></td> <td> </td> <td>(if <code>LinearFast</code>) Linear scalar indexing</td> </tr> <tr class=\"row-odd\">\n<td><code>getindex(A, i1::Int, ..., iN::Int)</code></td> <td> </td> <td>(if <code>LinearSlow</code>, where <code>N = ndims(A)</code>) N-dimensional scalar indexing</td> </tr> <tr class=\"row-even\">\n<td><code>setindex!(A, v, i::Int)</code></td> <td> </td> <td>(if <code>LinearFast</code>) Scalar indexed assignment</td> </tr> <tr class=\"row-odd\">\n<td><code>setindex!(A, v, i1::Int, ..., iN::Int)</code></td> <td> </td> <td>(if <code>LinearSlow</code>, where <code>N = ndims(A)</code>) N-dimensional scalar indexed assignment</td> </tr> <tr class=\"row-even\">\n<td><strong>Optional methods</strong></td> <td><strong>Default definition</strong></td> <td><strong>Brief description</strong></td> </tr> <tr class=\"row-odd\">\n<td><code>getindex(A, I...)</code></td> <td>defined in terms of scalar <code>getindex()</code>\n</td> <td><a class=\"reference internal\" href=\"../arrays/index#man-array-indexing\"><span>Multidimensional and nonscalar indexing</span></a></td> </tr> <tr class=\"row-even\">\n<td><code>setindex!(A, I...)</code></td> <td>defined in terms of scalar <code>setindex!()</code>\n</td> <td><a class=\"reference internal\" href=\"../arrays/index#man-array-indexing\"><span>Multidimensional and nonscalar indexed assignment</span></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<code>start()</code>/<code>next()</code>/<code>done()</code>\n</td> <td>defined in terms of scalar <code>getindex()</code>\n</td> <td>Iteration</td> </tr> <tr class=\"row-even\">\n<td><code>length(A)</code></td> <td><code>prod(size(A))</code></td> <td>Number of elements</td> </tr> <tr class=\"row-odd\">\n<td><code>similar(A)</code></td> <td><code>similar(A, eltype(A), size(A))</code></td> <td>Return a mutable array with the same shape and element type</td> </tr> <tr class=\"row-even\">\n<td><code>similar(A, ::Type{S})</code></td> <td><code>similar(A, S, size(A))</code></td> <td>Return a mutable array with the same shape and the specified element type</td> </tr> <tr class=\"row-odd\">\n<td><code>similar(A, dims::NTuple{Int})</code></td> <td><code>similar(A, eltype(A), dims)</code></td> <td>Return a mutable array with the same element type and the specified dimensions</td> </tr> <tr class=\"row-even\">\n<td><code>similar(A, ::Type{S}, dims::NTuple{Int})</code></td> <td><code>Array(S, dims)</code></td> <td>Return a mutable array with the specified element type and dimensions</td> </tr>  </table> <p>If a type is defined as a subtype of <code>AbstractArray</code>, it inherits a very large set of rich behaviors including iteration and multidimensional indexing built on top of single-element access. See the <a class=\"reference internal\" href=\"../arrays/index#man-arrays\"><span>arrays manual page</span></a> and <a class=\"reference internal\" href=\"../../stdlib/arrays/index#stdlib-arrays\"><span>standard library section</span></a> for more supported methods.</p> <p>A key part in defining an <code>AbstractArray</code> subtype is <code>Base.linearindexing()</code>. Since indexing is such an important part of an array and often occurs in hot loops, it’s important to make both indexing and indexed assignment as efficient as possible. Array data structures are typically defined in one of two ways: either it most efficiently accesses its elements using just one index (linear indexing) or it intrinsically accesses the elements with indices specified for every dimension. These two modalities are identified by Julia as <code>Base.LinearFast()</code> and <code>Base.LinearSlow()</code>. Converting a linear index to multiple indexing subscripts is typically very expensive, so this provides a traits-based mechanism to enable efficient generic code for all array types.</p> <p>This distinction determines which scalar indexing methods the type must define. <code>LinearFast()</code> arrays are simple: just define <code>getindex(A::ArrayType, i::Int)</code>. When the array is subsequently indexed with a multidimensional set of indices, the fallback <code>getindex(A::AbstractArray, I...)()</code> efficiently converts the indices into one linear index and then calls the above method. <code>LinearSlow()</code> arrays, on the other hand, require methods to be defined for each supported dimensionality with <code>ndims(A)</code> <code>Int</code> indices. For example, the builtin <code>SparseMatrix</code> type only supports two dimensions, so it just defines <code>getindex(A::SparseMatrix, i::Int, j::Int)()</code>. The same holds for <code>setindex!()</code>.</p> <p>Returning to the sequence of squares from above, we could instead define it as a subtype of an <code>AbstractArray{Int, 1}</code>:</p> <pre data-language=\"julia\">julia&gt; immutable SquaresVector &lt;: AbstractArray{Int, 1}\n           count::Int\n       end\n       Base.size(S::SquaresVector) = (S.count,)\n       Base.linearindexing(::Type{SquaresVector}) = Base.LinearFast()\n       Base.getindex(S::SquaresVector, i::Int) = i*i;\n</pre> <p>Note that it’s very important to specify the two parameters of the <code>AbstractArray</code>; the first defines the <code>eltype()</code>, and the second defines the <code>ndims()</code>. That supertype and those three methods are all it takes for <code>SquaresVector</code> to be an iterable, indexable, and completely functional array:</p> <pre data-language=\"julia\">julia&gt; s = SquaresVector(7)\n7-element SquaresVector:\n  1\n  4\n  9\n 16\n 25\n 36\n 49\n\njulia&gt; s[s .&gt; 20]\n3-element Array{Int64,1}:\n 25\n 36\n 49\n\njulia&gt; s \\ rand(7,2)\n1x2 Array{Float64,2}:\n 0.0151876  0.0179393\n</pre> <p>As a more complicated example, let’s define our own toy N-dimensional sparse-like array type built on top of <code>Dict</code>:</p> <pre data-language=\"julia\">julia&gt; immutable SparseArray{T,N} &lt;: AbstractArray{T,N}\n           data::Dict{NTuple{N,Int}, T}\n           dims::NTuple{N,Int}\n       end\n       SparseArray{T}(::Type{T}, dims::Int...) = SparseArray(T, dims)\n       SparseArray{T,N}(::Type{T}, dims::NTuple{N,Int}) = SparseArray{T,N}(Dict{NTuple{N,Int}, T}(), dims)\nSparseArray{T,N}\n\njulia&gt; Base.size(A::SparseArray) = A.dims\n       Base.similar{T}(A::SparseArray, ::Type{T}, dims::Dims) = SparseArray(T, dims)\n       # Define scalar indexing and indexed assignment for up to 3 dimensions\n       Base.getindex{T}(A::SparseArray{T,1}, i1::Int)                   = get(A.data, (i1,), zero(T))\n       Base.getindex{T}(A::SparseArray{T,2}, i1::Int, i2::Int)          = get(A.data, (i1,i2), zero(T))\n       Base.getindex{T}(A::SparseArray{T,3}, i1::Int, i2::Int, i3::Int) = get(A.data, (i1,i2,i3), zero(T))\n       Base.setindex!{T}(A::SparseArray{T,1}, v, i1::Int)                   = (A.data[(i1,)] = v)\n       Base.setindex!{T}(A::SparseArray{T,2}, v, i1::Int, i2::Int)          = (A.data[(i1,i2)] = v)\n       Base.setindex!{T}(A::SparseArray{T,3}, v, i1::Int, i2::Int, i3::Int) = (A.data[(i1,i2,i3)] = v);\n</pre> <p>Notice that this is a <code>LinearSlow</code> array, so we must manually define <code>getindex()</code> and <code>setindex!()</code> for each dimensionality we’d like to support. Unlike the <code>SquaresVector</code>, we are able to define <code>setindex!()</code>, and so we can mutate the array:</p> <pre data-language=\"julia\">julia&gt; A = SparseArray(Float64,3,3)\n3x3 SparseArray{Float64,2}:\n 0.0  0.0  0.0\n 0.0  0.0  0.0\n 0.0  0.0  0.0\n\njulia&gt; rand!(A)\n3x3 SparseArray{Float64,2}:\n 0.28119   0.0203749  0.0769509\n 0.209472  0.287702   0.640396\n 0.251379  0.859512   0.873544\n\njulia&gt; A[:] = 1:length(A); A\n3x3 SparseArray{Float64,2}:\n 1.0  4.0  7.0\n 2.0  5.0  8.0\n 3.0  6.0  9.0\n</pre> <p>The result of indexing an <code>AbstractArray</code> can itself be an array (for instance when indexing by a <code>Range</code>). The <code>AbstractArray</code> fallback methods use <code>similar()</code> to allocate an <code>Array</code> of the appropriate size and element type, which is filled in using the basic indexing method described above. However, when implementing an array wrapper you often want the result to be wrapped as well:</p> <pre data-language=\"julia\">julia&gt; A[1:2,:]\n2x3 SparseArray{Float64,2}:\n 1.0  4.0  7.0\n 2.0  5.0  8.0\n</pre> <p>In this example it is accomplished by defining <code>Base.similar{T}(A::SparseArray, ::Type{T}, dims::Dims)</code> to create the appropriate wrapped array. For this to work it’s important that <code>SparseArray</code> is mutable (supports <code>setindex!</code>). <code>similar()</code> is also used to allocate result arrays for arithmetic on <code>AbstractArrays</code>, for instance:</p> <pre data-language=\"julia\">julia&gt; A + 4\n3x3 SparseArray{Float64,2}:\n 5.0   8.0  11.0\n 6.0   9.0  12.0\n 7.0  10.0  13.0\n</pre> <p>In addition to all the iterable and indexable methods from above, these types can also interact with each other and use all of the methods defined in the standard library for <code>AbstractArrays</code>:</p> <pre data-language=\"julia\">julia&gt; A[SquaresVector(3)]\n3-element SparseArray{Float64,1}:\n 1.0\n 4.0\n 9.0\n\njulia&gt; dot(A[:,1],A[:,2])\n32.0\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/interfaces/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/interfaces/</a>\n  </p>\n</div>\n","manual/integers-and-floating-point-numbers/index":"<h1 id=\"man-integers-and-floating-point-numbers\">Integers and Floating-Point Numbers</h1> <p>Integers and floating-point values are the basic building blocks of arithmetic and computation. Built-in representations of such values are called numeric primitives, while representations of integers and floating-point numbers as immediate values in code are known as numeric literals. For example, <code>1</code> is an integer literal, while <code>1.0</code> is a floating-point literal; their binary in-memory representations as objects are numeric primitives.</p> <p>Julia provides a broad range of primitive numeric types, and a full complement of arithmetic and bitwise operators as well as standard mathematical functions are defined over them. These map directly onto numeric types and operations that are natively supported on modern computers, thus allowing Julia to take full advantage of computational resources. Additionally, Julia provides software support for <a class=\"reference internal\" href=\"#man-arbitrary-precision-arithmetic\"><span>Arbitrary Precision Arithmetic</span></a>, which can handle operations on numeric values that cannot be represented effectively in native hardware representations, but at the cost of relatively slower performance.</p> <p>The following are Julia’s primitive numeric types:</p> <ul class=\"simple\"> <li><strong>Integer types:</strong></li> </ul> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Type</th> <th class=\"head\">Signed?</th> <th class=\"head\">Number of bits</th> <th class=\"head\">Smallest value</th> <th class=\"head\">Largest value</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>Int8</code></td> <td>✓</td> <td>8</td> <td>-2^7</td> <td>2^7 - 1</td> </tr> <tr class=\"row-odd\">\n<td><code>UInt8</code></td> <td> </td> <td>8</td> <td>0</td> <td>2^8 - 1</td> </tr> <tr class=\"row-even\">\n<td><code>Int16</code></td> <td>✓</td> <td>16</td> <td>-2^15</td> <td>2^15 - 1</td> </tr> <tr class=\"row-odd\">\n<td><code>UInt16</code></td> <td> </td> <td>16</td> <td>0</td> <td>2^16 - 1</td> </tr> <tr class=\"row-even\">\n<td><code>Int32</code></td> <td>✓</td> <td>32</td> <td>-2^31</td> <td>2^31 - 1</td> </tr> <tr class=\"row-odd\">\n<td><code>UInt32</code></td> <td> </td> <td>32</td> <td>0</td> <td>2^32 - 1</td> </tr> <tr class=\"row-even\">\n<td><code>Int64</code></td> <td>✓</td> <td>64</td> <td>-2^63</td> <td>2^63 - 1</td> </tr> <tr class=\"row-odd\">\n<td><code>UInt64</code></td> <td> </td> <td>64</td> <td>0</td> <td>2^64 - 1</td> </tr> <tr class=\"row-even\">\n<td><code>Int128</code></td> <td>✓</td> <td>128</td> <td>-2^127</td> <td>2^127 - 1</td> </tr> <tr class=\"row-odd\">\n<td><code>UInt128</code></td> <td> </td> <td>128</td> <td>0</td> <td>2^128 - 1</td> </tr> <tr class=\"row-even\">\n<td><code>Bool</code></td> <td>N/A</td> <td>8</td> <td>\n<code>false</code> (0)</td> <td>\n<code>true</code> (1)</td> </tr>  </table> <ul class=\"simple\"> <li><strong>Floating-point types:</strong></li> </ul> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Type</th> <th class=\"head\">Precision</th> <th class=\"head\">Number of bits</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>Float16</code></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Half-precision_floating-point_format\">half</a></td> <td>16</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float32\" title=\"Base.Float32\"><code>Float32</code></a></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Single_precision_floating-point_format\">single</a></td> <td>32</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a></td> <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Double_precision_floating-point_format\">double</a></td> <td>64</td> </tr>  </table> <p>Additionally, full support for <a class=\"reference internal\" href=\"../complex-and-rational-numbers/index#man-complex-and-rational-numbers\"><span>Complex and Rational Numbers</span></a> is built on top of these primitive numeric types. All numeric types interoperate naturally without explicit casting, thanks to a flexible, user-extensible <a class=\"reference internal\" href=\"../conversion-and-promotion/index#man-conversion-and-promotion\"><span>type promotion system</span></a>.</p>  <h2 id=\"integers\">Integers</h2> <p>Literal integers are represented in the standard manner:</p> <pre data-language=\"julia\">julia&gt; 1\n1\n\njulia&gt; 1234\n1234\n</pre> <p>The default type for an integer literal depends on whether the target system has a 32-bit architecture or a 64-bit architecture:</p> <pre data-language=\"julia\"># 32-bit system:\njulia&gt; typeof(1)\nInt32\n\n# 64-bit system:\njulia&gt; typeof(1)\nInt64\n</pre> <p>The Julia internal variable <a class=\"reference internal\" href=\"../../stdlib/constants/index#Base.WORD_SIZE\" title=\"Base.WORD_SIZE\"><code>WORD_SIZE</code></a> indicates whether the target system is 32-bit or 64-bit.:</p> <pre data-language=\"julia\"># 32-bit system:\njulia&gt; WORD_SIZE\n32\n\n# 64-bit system:\njulia&gt; WORD_SIZE\n64\n</pre> <p>Julia also defines the types <code>Int</code> and <code>UInt</code>, which are aliases for the system’s signed and unsigned native integer types respectively.:</p> <pre data-language=\"julia\"># 32-bit system:\njulia&gt; Int\nInt32\njulia&gt; UInt\nUInt32\n\n\n# 64-bit system:\njulia&gt; Int\nInt64\njulia&gt; UInt\nUInt64\n</pre> <p>Larger integer literals that cannot be represented using only 32 bits but can be represented in 64 bits always create 64-bit integers, regardless of the system type:</p> <pre data-language=\"julia\"># 32-bit or 64-bit system:\njulia&gt; typeof(3000000000)\nInt64\n</pre> <p>Unsigned integers are input and output using the <code>0x</code> prefix and hexadecimal (base 16) digits <code>0-9a-f</code> (the capitalized digits <code>A-F</code> also work for input). The size of the unsigned value is determined by the number of hex digits used:</p> <pre data-language=\"julia\">julia&gt; 0x1\n0x01\n\njulia&gt; typeof(ans)\nUInt8\n\njulia&gt; 0x123\n0x0123\n\njulia&gt; typeof(ans)\nUInt16\n\njulia&gt; 0x1234567\n0x01234567\n\njulia&gt; typeof(ans)\nUInt32\n\njulia&gt; 0x123456789abcdef\n0x0123456789abcdef\n\njulia&gt; typeof(ans)\nUInt64\n</pre> <p>This behavior is based on the observation that when one uses unsigned hex literals for integer values, one typically is using them to represent a fixed numeric byte sequence, rather than just an integer value.</p> <p>Recall that the variable <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.ans\" title=\"Base.ans\"><code>ans</code></a> is set to the value of the last expression evaluated in an interactive session. This does not occur when Julia code is run in other ways.</p> <p>Binary and octal literals are also supported:</p> <pre data-language=\"julia\">julia&gt; 0b10\n0x02\n\njulia&gt; typeof(ans)\nUInt8\n\njulia&gt; 0o10\n0x08\n\njulia&gt; typeof(ans)\nUInt8\n</pre> <p>The minimum and maximum representable values of primitive numeric types such as integers are given by the <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.typemin\" title=\"Base.typemin\"><code>typemin()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.typemax\" title=\"Base.typemax\"><code>typemax()</code></a> functions:</p> <pre data-language=\"julia\">julia&gt; (typemin(Int32), typemax(Int32))\n(-2147483648,2147483647)\n\njulia&gt; for T in [Int8,Int16,Int32,Int64,Int128,UInt8,UInt16,UInt32,UInt64,UInt128]\n         println(\"$(lpad(T,7)): [$(typemin(T)),$(typemax(T))]\")\n       end\n   Int8: [-128,127]\n  Int16: [-32768,32767]\n  Int32: [-2147483648,2147483647]\n  Int64: [-9223372036854775808,9223372036854775807]\n Int128: [-170141183460469231731687303715884105728,170141183460469231731687303715884105727]\n  UInt8: [0,255]\n UInt16: [0,65535]\n UInt32: [0,4294967295]\n UInt64: [0,18446744073709551615]\nUInt128: [0,340282366920938463463374607431768211455]\n</pre> <p>The values returned by <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.typemin\" title=\"Base.typemin\"><code>typemin()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.typemax\" title=\"Base.typemax\"><code>typemax()</code></a> are always of the given argument type. (The above expression uses several features we have yet to introduce, including <a class=\"reference internal\" href=\"../control-flow/index#man-loops\"><span>for loops</span></a>, <a class=\"reference internal\" href=\"../strings/index#man-strings\"><span>Strings</span></a>, and <a class=\"reference internal\" href=\"../strings/index#man-string-interpolation\"><span>Interpolation</span></a>, but should be easy enough to understand for users with some existing programming experience.)</p>  <h3 id=\"overflow-behavior\">Overflow behavior</h3> <p>In Julia, exceeding the maximum representable value of a given type results in a wraparound behavior:</p> <pre data-language=\"julia\">julia&gt; x = typemax(Int64)\n9223372036854775807\n\njulia&gt; x + 1\n-9223372036854775808\n\njulia&gt; x + 1 == typemin(Int64)\ntrue\n</pre> <p>Thus, arithmetic with Julia integers is actually a form of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Modular_arithmetic\">modular arithmetic</a>. This reflects the characteristics of the underlying arithmetic of integers as implemented on modern computers. In applications where overflow is possible, explicit checking for wraparound produced by overflow is essential; otherwise, the <code>BigInt</code> type in <a class=\"reference internal\" href=\"#man-arbitrary-precision-arithmetic\"><span>Arbitrary Precision Arithmetic</span></a> is recommended instead.</p>   <h3 id=\"division-errors\">Division errors</h3> <p>Integer division (the <code>div</code> function) has two exceptional cases: dividing by zero, and dividing the lowest negative number (<a class=\"reference internal\" href=\"../../stdlib/base/index#Base.typemin\" title=\"Base.typemin\"><code>typemin()</code></a>) by -1. Both of these cases throw a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.DivideError\" title=\"Base.DivideError\"><code>DivideError</code></a>. The remainder and modulus functions (<code>rem</code> and <code>mod</code>) throw a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.DivideError\" title=\"Base.DivideError\"><code>DivideError</code></a> when their second argument is zero.</p>    <h2 id=\"floating-point-numbers\">Floating-Point Numbers</h2> <p>Literal floating-point numbers are represented in the standard formats:</p> <pre data-language=\"julia\">julia&gt; 1.0\n1.0\n\njulia&gt; 1.\n1.0\n\njulia&gt; 0.5\n0.5\n\njulia&gt; .5\n0.5\n\njulia&gt; -1.23\n-1.23\n\njulia&gt; 1e10\n1.0e10\n\njulia&gt; 2.5e-4\n0.00025\n</pre> <p>The above results are all <code>Float64</code> values. Literal <code>Float32</code> values can be entered by writing an <code>f</code> in place of <code>e</code>:</p> <pre data-language=\"julia\">julia&gt; 0.5f0\n0.5f0\n\njulia&gt; typeof(ans)\nFloat32\n\njulia&gt; 2.5f-4\n0.00025f0\n</pre> <p>Values can be converted to <code>Float32</code> easily:</p> <pre data-language=\"julia\">julia&gt; Float32(-1.5)\n-1.5f0\n\njulia&gt; typeof(ans)\nFloat32\n</pre> <p>Hexadecimal floating-point literals are also valid, but only as <code>Float64</code> values:</p> <pre data-language=\"julia\">julia&gt; 0x1p0\n1.0\n\njulia&gt; 0x1.8p3\n12.0\n\njulia&gt; 0x.4p-1\n0.125\n\njulia&gt; typeof(ans)\nFloat64\n</pre> <p>Half-precision floating-point numbers are also supported (<code>Float16</code>), but only as a storage format. In calculations they’ll be converted to <code>Float32</code>:</p> <pre data-language=\"julia\">julia&gt; sizeof(Float16(4.))\n2\n\njulia&gt; 2*Float16(4.)\n8.0f0\n</pre> <p>The underscore <code>_</code> can be used as digit separator:</p> <pre data-language=\"julia\">julia&gt; 10_000, 0.000_000_005, 0xdead_beef, 0b1011_0010\n(10000,5.0e-9,0xdeadbeef,0xb2)\n</pre>  <h3 id=\"floating-point-zero\">Floating-point zero</h3> <p>Floating-point numbers have <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Signed_zero\">two zeros</a>, positive zero and negative zero. They are equal to each other but have different binary representations, as can be seen using the <code>bits</code> function: :</p> <pre data-language=\"julia\">julia&gt; 0.0 == -0.0\ntrue\n\njulia&gt; bits(0.0)\n\"0000000000000000000000000000000000000000000000000000000000000000\"\n\njulia&gt; bits(-0.0)\n\"1000000000000000000000000000000000000000000000000000000000000000\"\n</pre>   <h3 id=\"man-special-floats\">Special floating-point values</h3> <p id=\"special-floating-point-values\">There are three specified standard floating-point values that do not correspond to any point on the real number line:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\" colspan=\"3\">Special value</th> <th class=\"head\">Name</th> <th class=\"head\">Description</th> </tr> <tr class=\"row-even\">\n<th class=\"head\"><code>Float16</code></th> <th class=\"head\"><code>Float32</code></th> <th class=\"head\"><code>Float64</code></th> <th class=\"head\"> </th> <th class=\"head\"> </th> </tr> </thead>  <tr class=\"row-odd\">\n<td><code>Inf16</code></td> <td><code>Inf32</code></td> <td><code>Inf</code></td> <td>positive infinity</td> <td>a value greater than all finite floating-point values</td> </tr> <tr class=\"row-even\">\n<td><code>-Inf16</code></td> <td><code>-Inf32</code></td> <td><code>-Inf</code></td> <td>negative infinity</td> <td>a value less than all finite floating-point values</td> </tr> <tr class=\"row-odd\">\n<td><code>NaN16</code></td> <td><code>NaN32</code></td> <td><code>NaN</code></td> <td>not a number</td> <td>a value not <code>==</code> to any floating-point value (including itself)</td> </tr>  </table> <p>For further discussion of how these non-finite floating-point values are ordered with respect to each other and other floats, see <a class=\"reference internal\" href=\"../mathematical-operations/index#man-numeric-comparisons\"><span>Numeric Comparisons</span></a>. By the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/IEEE_754-2008\">IEEE 754 standard</a>, these floating-point values are the results of certain arithmetic operations:</p> <pre data-language=\"julia\">julia&gt; 1/Inf\n0.0\n\njulia&gt; 1/0\nInf\n\njulia&gt; -5/0\n-Inf\n\njulia&gt; 0.000001/0\nInf\n\njulia&gt; 0/0\nNaN\n\njulia&gt; 500 + Inf\nInf\n\njulia&gt; 500 - Inf\n-Inf\n\njulia&gt; Inf + Inf\nInf\n\njulia&gt; Inf - Inf\nNaN\n\njulia&gt; Inf * Inf\nInf\n\njulia&gt; Inf / Inf\nNaN\n\njulia&gt; 0 * Inf\nNaN\n</pre> <p>The <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.typemin\" title=\"Base.typemin\"><code>typemin()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.typemax\" title=\"Base.typemax\"><code>typemax()</code></a> functions also apply to floating-point types:</p> <pre data-language=\"julia\">julia&gt; (typemin(Float16),typemax(Float16))\n(-Inf16,Inf16)\n\njulia&gt; (typemin(Float32),typemax(Float32))\n(-Inf32,Inf32)\n\njulia&gt; (typemin(Float64),typemax(Float64))\n(-Inf,Inf)\n</pre>   <h3 id=\"machine-epsilon\">Machine epsilon</h3> <p>Most real numbers cannot be represented exactly with floating-point numbers, and so for many purposes it is important to know the distance between two adjacent representable floating-point numbers, which is often known as <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Machine_epsilon\">machine epsilon</a>.</p> <p>Julia provides <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.eps\" title=\"Base.eps\"><code>eps()</code></a>, which gives the distance between <code>1.0</code> and the next larger representable floating-point value:</p> <pre data-language=\"julia\">julia&gt; eps(Float32)\n1.1920929f-7\n\njulia&gt; eps(Float64)\n2.220446049250313e-16\n\njulia&gt; eps() # same as eps(Float64)\n2.220446049250313e-16\n</pre> <p>These values are <code>2.0^-23</code> and <code>2.0^-52</code> as <code>Float32</code> and <code>Float64</code> values, respectively. The <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.eps\" title=\"Base.eps\"><code>eps()</code></a> function can also take a floating-point value as an argument, and gives the absolute difference between that value and the next representable floating point value. That is, <code>eps(x)</code> yields a value of the same type as <code>x</code> such that <code>x + eps(x)</code> is the next representable floating-point value larger than <code>x</code>:</p> <pre data-language=\"julia\">julia&gt; eps(1.0)\n2.220446049250313e-16\n\njulia&gt; eps(1000.)\n1.1368683772161603e-13\n\njulia&gt; eps(1e-27)\n1.793662034335766e-43\n\njulia&gt; eps(0.0)\n5.0e-324\n</pre> <p>The distance between two adjacent representable floating-point numbers is not constant, but is smaller for smaller values and larger for larger values. In other words, the representable floating-point numbers are densest in the real number line near zero, and grow sparser exponentially as one moves farther away from zero. By definition, <code>eps(1.0)</code> is the same as <code>eps(Float64)</code> since <code>1.0</code> is a 64-bit floating-point value.</p> <p>Julia also provides the <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.nextfloat\" title=\"Base.nextfloat\"><code>nextfloat()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.prevfloat\" title=\"Base.prevfloat\"><code>prevfloat()</code></a> functions which return the next largest or smallest representable floating-point number to the argument respectively: :</p> <pre data-language=\"julia\">julia&gt; x = 1.25f0\n1.25f0\n\njulia&gt; nextfloat(x)\n1.2500001f0\n\njulia&gt; prevfloat(x)\n1.2499999f0\n\njulia&gt; bits(prevfloat(x))\n\"00111111100111111111111111111111\"\n\njulia&gt; bits(x)\n\"00111111101000000000000000000000\"\n\njulia&gt; bits(nextfloat(x))\n\"00111111101000000000000000000001\"\n</pre> <p>This example highlights the general principle that the adjacent representable floating-point numbers also have adjacent binary integer representations.</p>   <h3 id=\"rounding-modes\">Rounding modes</h3> <p>If a number doesn’t have an exact floating-point representation, it must be rounded to an appropriate representable value, however, if wanted, the manner in which this rounding is done can be changed according to the rounding modes presented in the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/IEEE_754-2008\">IEEE 754 standard</a>:</p> <pre data-language=\"julia\">julia&gt; 1.1 + 0.1\n1.2000000000000002\n\njulia&gt; with_rounding(Float64,RoundDown) do\n       1.1 + 0.1\n       end\n1.2\n</pre> <p>The default mode used is always <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.RoundNearest\" title=\"Base.RoundNearest\"><code>RoundNearest</code></a>, which rounds to the nearest representable value, with ties rounded towards the nearest value with an even least significant bit.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Rounding is generally only correct for basic arithmetic functions (<a class=\"reference internal\" href=\"../../stdlib/math/index#Base.+\" title=\"Base.+\"><code>+()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.-\" title=\"Base.-\"><code>-()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.*\" title=\"Base.*\"><code>*()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base./\" title=\"Base./\"><code>/()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sqrt\" title=\"Base.sqrt\"><code>sqrt()</code></a>) and type conversion operations. Many other functions assume the default <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.RoundNearest\" title=\"Base.RoundNearest\"><code>RoundNearest</code></a> mode is set, and can give erroneous results when operating under other rounding modes.</p> </div>   <h3 id=\"background-and-references\">Background and References</h3> <p>Floating-point arithmetic entails many subtleties which can be surprising to users who are unfamiliar with the low-level implementation details. However, these subtleties are described in detail in most books on scientific computation, and also in the following references:</p> <ul class=\"simple\"> <li>The definitive guide to floating point arithmetic is the <a class=\"reference external\" href=\"http://standards.ieee.org/findstds/standard/754-2008.html\">IEEE 754-2008 Standard</a>; however, it is not available for free online.</li> <li>For a brief but lucid presentation of how floating-point numbers are represented, see John D. Cook’s <a class=\"reference external\" href=\"http://www.johndcook.com/blog/2009/04/06/anatomy-of-a-floating-point-number/\">article</a> on the subject as well as his <a class=\"reference external\" href=\"http://www.johndcook.com/blog/2009/04/06/numbers-are-a-leaky-abstraction/\">introduction</a> to some of the issues arising from how this representation differs in behavior from the idealized abstraction of real numbers.</li> <li>Also recommended is Bruce Dawson’s <a class=\"reference external\" href=\"https://randomascii.wordpress.com/2012/05/20/thats-not-normalthe-performance-of-odd-floats/\">series of blog posts on floating-point numbers</a>.</li> <li>For an excellent, in-depth discussion of floating-point numbers and issues of numerical accuracy encountered when computing with them, see David Goldberg’s paper <a class=\"reference external\" href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.6768&amp;rep=rep1&amp;type=pdf\">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a>.</li> <li>For even more extensive documentation of the history of, rationale for, and issues with floating-point numbers, as well as discussion of many other topics in numerical computing, see the <a class=\"reference external\" href=\"http://www.cs.berkeley.edu/~wkahan/\">collected writings</a> of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/William_Kahan\">William Kahan</a>, commonly known as the “Father of Floating-Point”. Of particular interest may be <a class=\"reference external\" href=\"http://www.cs.berkeley.edu/~wkahan/ieee754status/754story.html\">An Interview with the Old Man of Floating-Point</a>.</li> </ul>    <h2 id=\"man-arbitrary-precision-arithmetic\">Arbitrary Precision Arithmetic</h2> <p id=\"arbitrary-precision-arithmetic\">To allow computations with arbitrary-precision integers and floating point numbers, Julia wraps the <a class=\"reference external\" href=\"https://gmplib.org\">GNU Multiple Precision Arithmetic Library (GMP)</a> and the <a class=\"reference external\" href=\"http://www.mpfr.org\">GNU MPFR Library</a>, respectively. The <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.BigInt\" title=\"Base.BigInt\"><code>BigInt</code></a> and <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.BigFloat\" title=\"Base.BigFloat\"><code>BigFloat</code></a> types are available in Julia for arbitrary precision integer and floating point numbers respectively.</p> <p>Constructors exist to create these types from primitive numerical types, and <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.parse\" title=\"Base.parse\"><code>parse()</code></a> can be use to construct them from <code>AbstractString</code>s. Once created, they participate in arithmetic with all other numeric types thanks to Julia’s <a class=\"reference internal\" href=\"../conversion-and-promotion/index#man-conversion-and-promotion\"><span>type promotion and conversion mechanism</span></a>:</p> <pre data-language=\"julia\">julia&gt; BigInt(typemax(Int64)) + 1\n9223372036854775808\n\njulia&gt; parse(BigInt, \"123456789012345678901234567890\") + 1\n123456789012345678901234567891\n\njulia&gt; parse(BigFloat, \"1.23456789012345678901\")\n1.234567890123456789010000000000000000000000000000000000000000000000000000000004\n\njulia&gt; BigFloat(2.0^66) / 3\n2.459565876494606882133333333333333333333333333333333333333333333333333333333344e+19\n\njulia&gt; factorial(BigInt(40))\n815915283247897734345611269596115894272000000000\n</pre> <p>However, type promotion between the primitive types above and <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.BigInt\" title=\"Base.BigInt\"><code>BigInt</code></a>/<a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.BigFloat\" title=\"Base.BigFloat\"><code>BigFloat</code></a> is not automatic and must be explicitly stated.</p> <pre data-language=\"julia\">julia&gt; x = typemin(Int64)\n-9223372036854775808\n\njulia&gt; x = x - 1\n9223372036854775807\n\njulia&gt; typeof(x)\nInt64\n\njulia&gt; y = BigInt(typemin(Int64))\n-9223372036854775808\n\njulia&gt; y = y - 1\n-9223372036854775809\n\njulia&gt; typeof(y)\nBigInt\n</pre> <p>The default precision (in number of bits of the significand) and rounding mode of <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.BigFloat\" title=\"Base.BigFloat\"><code>BigFloat</code></a> operations can be changed globally by calling <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.set_bigfloat_precision\" title=\"Base.set_bigfloat_precision\"><code>set_bigfloat_precision()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.set_rounding\" title=\"Base.set_rounding\"><code>set_rounding()</code></a>, and all further calculations will take these changes in account. Alternatively, the precision or the rounding can be changed only within the execution of a particular block of code by <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.with_bigfloat_precision\" title=\"Base.with_bigfloat_precision\"><code>with_bigfloat_precision()</code></a> or <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.with_rounding\" title=\"Base.with_rounding\"><code>with_rounding()</code></a>:</p> <pre data-language=\"julia\">julia&gt; with_rounding(BigFloat,RoundUp) do\n       BigFloat(1) + parse(BigFloat, \"0.1\")\n       end\n1.100000000000000000000000000000000000000000000000000000000000000000000000000003\n\njulia&gt; with_rounding(BigFloat,RoundDown) do\n       BigFloat(1) + parse(BigFloat, \"0.1\")\n       end\n1.099999999999999999999999999999999999999999999999999999999999999999999999999986\n\njulia&gt; with_bigfloat_precision(40) do\n       BigFloat(1) + parse(BigFloat, \"0.1\")\n       end\n1.1000000000004\n</pre>   <h2 id=\"man-numeric-literal-coefficients\">Numeric Literal Coefficients</h2> <p id=\"numeric-literal-coefficients\">To make common numeric formulas and expressions clearer, Julia allows variables to be immediately preceded by a numeric literal, implying multiplication. This makes writing polynomial expressions much cleaner:</p> <pre data-language=\"julia\">julia&gt; x = 3\n3\n\njulia&gt; 2x^2 - 3x + 1\n10\n\njulia&gt; 1.5x^2 - .5x + 1\n13.0\n</pre> <p>It also makes writing exponential functions more elegant:</p> <pre data-language=\"julia\">julia&gt; 2^2x\n64\n</pre> <p>The precedence of numeric literal coefficients is the same as that of unary operators such as negation. So <code>2^3x</code> is parsed as <code>2^(3x)</code>, and <code>2x^3</code> is parsed as <code>2*(x^3)</code>.</p> <p>Numeric literals also work as coefficients to parenthesized expressions:</p> <pre data-language=\"julia\">julia&gt; 2(x-1)^2 - 3(x-1) + 1\n3\n</pre> <p>Additionally, parenthesized expressions can be used as coefficients to variables, implying multiplication of the expression by the variable:</p> <pre data-language=\"julia\">julia&gt; (x-1)x\n6\n</pre> <p>Neither juxtaposition of two parenthesized expressions, nor placing a variable before a parenthesized expression, however, can be used to imply multiplication:</p> <pre data-language=\"julia\">julia&gt; (x-1)(x+1)\nERROR: MethodError: `call` has no method matching call(::Int64, ::Int64)\nClosest candidates are:\n  BoundsError()\n  BoundsError(!Matched::Any...)\n  DivideError()\n  ...\n\njulia&gt; x(x+1)\nERROR: MethodError: `call` has no method matching call(::Int64, ::Int64)\nClosest candidates are:\n  BoundsError()\n  BoundsError(!Matched::Any...)\n  DivideError()\n  ...\n</pre> <p>Both expressions are interpreted as function application: any expression that is not a numeric literal, when immediately followed by a parenthetical, is interpreted as a function applied to the values in parentheses (see <a class=\"reference internal\" href=\"../functions/index#man-functions\"><span>Functions</span></a> for more about functions). Thus, in both of these cases, an error occurs since the left-hand value is not a function.</p> <p>The above syntactic enhancements significantly reduce the visual noise incurred when writing common mathematical formulae. Note that no whitespace may come between a numeric literal coefficient and the identifier or parenthesized expression which it multiplies.</p>  <h3 id=\"syntax-conflicts\">Syntax Conflicts</h3> <p>Juxtaposed literal coefficient syntax may conflict with two numeric literal syntaxes: hexadecimal integer literals and engineering notation for floating-point literals. Here are some situations where syntactic conflicts arise:</p> <ul class=\"simple\"> <li>The hexadecimal integer literal expression <code>0xff</code> could be interpreted as the numeric literal <code>0</code> multiplied by the variable <code>xff</code>.</li> <li>The floating-point literal expression <code>1e10</code> could be interpreted as the numeric literal <code>1</code> multiplied by the variable <code>e10</code>, and similarly with the equivalent <code>E</code> form.</li> </ul> <p>In both cases, we resolve the ambiguity in favor of interpretation as a numeric literals:</p> <ul class=\"simple\"> <li>Expressions starting with <code>0x</code> are always hexadecimal literals.</li> <li>Expressions starting with a numeric literal followed by <code>e</code> or <code>E</code> are always floating-point literals.</li> </ul>    <h2 id=\"literal-zero-and-one\">Literal zero and one</h2> <p>Julia provides functions which return literal 0 and 1 corresponding to a specified type or the type of a given variable.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Function</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.zero\" title=\"Base.zero\"><code>zero(x)</code></a></td> <td>Literal zero of type <code>x</code> or type of variable <code>x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.one\" title=\"Base.one\"><code>one(x)</code></a></td> <td>Literal one of type <code>x</code> or type of variable <code>x</code>\n</td> </tr>  </table> <p>These functions are useful in <a class=\"reference internal\" href=\"../mathematical-operations/index#man-numeric-comparisons\"><span>Numeric Comparisons</span></a> to avoid overhead from unnecessary <a class=\"reference internal\" href=\"../conversion-and-promotion/index#man-conversion-and-promotion\"><span>type conversion</span></a>.</p> <p>Examples:</p> <pre data-language=\"julia\">julia&gt; zero(Float32)\n0.0f0\n\njulia&gt; zero(1.0)\n0.0\n\njulia&gt; one(Int32)\n1\n\njulia&gt; one(BigFloat)\n1.000000000000000000000000000000000000000000000000000000000000000000000000000000\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/integers-and-floating-point-numbers/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/integers-and-floating-point-numbers/</a>\n  </p>\n</div>\n","manual/mathematical-operations/index":"<h1 id=\"man-mathematical-operations\">Mathematical Operations and Elementary Functions</h1> <p>Julia provides a complete collection of basic arithmetic and bitwise operators across all of its numeric primitive types, as well as providing portable, efficient implementations of a comprehensive collection of standard mathematical functions.</p>  <h2 id=\"arithmetic-operators\">Arithmetic Operators</h2> <p>The following <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Arithmetic#Arithmetic_operations\">arithmetic operators</a> are supported on all primitive numeric types:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Expression</th> <th class=\"head\">Name</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>+x</code></td> <td>unary plus</td> <td>the identity operation</td> </tr> <tr class=\"row-odd\">\n<td><code>-x</code></td> <td>unary minus</td> <td>maps values to their additive inverses</td> </tr> <tr class=\"row-even\">\n<td><code>x + y</code></td> <td>binary plus</td> <td>performs addition</td> </tr> <tr class=\"row-odd\">\n<td><code>x - y</code></td> <td>binary minus</td> <td>performs subtraction</td> </tr> <tr class=\"row-even\">\n<td><code>x * y</code></td> <td>times</td> <td>performs multiplication</td> </tr> <tr class=\"row-odd\">\n<td><code>x / y</code></td> <td>divide</td> <td>performs division</td> </tr> <tr class=\"row-even\">\n<td><code>x \\ y</code></td> <td>inverse divide</td> <td>equivalent to <code>y / x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><code>x ^ y</code></td> <td>power</td> <td>raises <code>x</code> to the <code>y</code>th power</td> </tr> <tr class=\"row-even\">\n<td><code>x % y</code></td> <td>remainder</td> <td>equivalent to <code>rem(x,y)</code>\n</td> </tr>  </table> <p>as well as the negation on <code>Bool</code> types:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Expression</th> <th class=\"head\">Name</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>!x</code></td> <td>negation</td> <td>changes <code>true</code> to <code>false</code> and vice versa</td> </tr>  </table> <p>Julia’s promotion system makes arithmetic operations on mixtures of argument types “just work” naturally and automatically. See <a class=\"reference internal\" href=\"../conversion-and-promotion/index#man-conversion-and-promotion\"><span>Conversion and Promotion</span></a> for details of the promotion system.</p> <p>Here are some simple examples using arithmetic operators:</p> <pre data-language=\"julia\">julia&gt; 1 + 2 + 3\n6\n\njulia&gt; 1 - 2\n-1\n\njulia&gt; 3*2/12\n0.5\n</pre> <p>(By convention, we tend to space less tightly binding operators less tightly, but there are no syntactic constraints.)</p>   <h2 id=\"bitwise-operators\">Bitwise Operators</h2> <p>The following <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bitwise_operation#Bitwise_operators\">bitwise operators</a> are supported on all primitive integer types:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Expression</th> <th class=\"head\">Name</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>~x</code></td> <td>bitwise not</td> </tr> <tr class=\"row-odd\">\n<td><code>x &amp; y</code></td> <td>bitwise and</td> </tr> <tr class=\"row-even\">\n<td><code>x | y</code></td> <td>bitwise or</td> </tr> <tr class=\"row-odd\">\n<td><code>x $ y</code></td> <td>bitwise xor (exclusive or)</td> </tr> <tr class=\"row-even\">\n<td><code>x &gt;&gt;&gt; y</code></td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Logical_shift\">logical shift</a> right</td> </tr> <tr class=\"row-odd\">\n<td><code>x &gt;&gt; y</code></td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Arithmetic_shift\">arithmetic shift</a> right</td> </tr> <tr class=\"row-even\">\n<td><code>x &lt;&lt; y</code></td> <td>logical/arithmetic shift left</td> </tr>  </table> <p>Here are some examples with bitwise operators:</p> <pre data-language=\"julia\">julia&gt; ~123\n-124\n\njulia&gt; 123 &amp; 234\n106\n\njulia&gt; 123 | 234\n251\n\njulia&gt; 123 $ 234\n145\n\njulia&gt; ~UInt32(123)\n0xffffff84\n\njulia&gt; ~UInt8(123)\n0x84\n</pre>   <h2 id=\"updating-operators\">Updating operators</h2> <p>Every binary arithmetic and bitwise operator also has an updating version that assigns the result of the operation back into its left operand. The updating version of the binary operator is formed by placing a <code>=</code> immediately after the operator. For example, writing <code>x += 3</code> is equivalent to writing <code>x = x + 3</code>:</p> <pre data-language=\"julia\">julia&gt; x = 1\n1\n\njulia&gt; x += 3\n4\n\njulia&gt; x\n4\n</pre> <p>The updating versions of all the binary arithmetic and bitwise operators are:</p> <pre data-language=\"julia\">+=  -=  *=  /=  \\=  ÷=  %=  ^=  &amp;=  |=  $=  &gt;&gt;&gt;=  &gt;&gt;=  &lt;&lt;=\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>An updating operator rebinds the variable on the left-hand side. As a result, the type of the variable may change.</p> <pre data-language=\"julia\">julia&gt; x = 0x01; typeof(x)\nUInt8\n\njulia&gt; x *= 2 #Same as x = x * 2\n2\n\njulia&gt; isa(x, Int)\ntrue\n</pre> </div>   <h2 id=\"man-numeric-comparisons\">Numeric Comparisons</h2> <p id=\"numeric-comparisons\">Standard comparison operations are defined for all the primitive numeric types:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Name</th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.==\" title=\"Base.==\"><code>==</code></a></td> <td>equality</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"../../stdlib/math/index#Base.!=\" title=\"Base.!=\"><code>!=</code></a> <a class=\"reference internal\" href=\"#\" title=\"Base.≠\"><code>≠</code></a>\n</td> <td>inequality</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#\" title=\"Base.&lt;\"><code>&lt;</code></a></td> <td>less than</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#\" title=\"Base.&lt;=\"><code>&lt;=</code></a> <a class=\"reference internal\" href=\"#\" title=\"Base.≤\"><code>≤</code></a>\n</td> <td>less than or equal to</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#\" title=\"Base.&gt;\"><code>&gt;</code></a></td> <td>greater than</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#\" title=\"Base.&gt;=\"><code>&gt;=</code></a> <a class=\"reference internal\" href=\"#\" title=\"Base.≥\"><code>≥</code></a>\n</td> <td>greater than or equal to</td> </tr>  </table> <p>Here are some simple examples:</p> <pre data-language=\"julia\">julia&gt; 1 == 1\ntrue\n\njulia&gt; 1 == 2\nfalse\n\njulia&gt; 1 != 2\ntrue\n\njulia&gt; 1 == 1.0\ntrue\n\njulia&gt; 1 &lt; 2\ntrue\n\njulia&gt; 1.0 &gt; 3\nfalse\n\njulia&gt; 1 &gt;= 1.0\ntrue\n\njulia&gt; -1 &lt;= 1\ntrue\n\njulia&gt; -1 &lt;= -1\ntrue\n\njulia&gt; -1 &lt;= -2\nfalse\n\njulia&gt; 3 &lt; -0.5\nfalse\n</pre> <p>Integers are compared in the standard manner — by comparison of bits. Floating-point numbers are compared according to the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/IEEE_754-2008\">IEEE 754 standard</a>:</p> <ul class=\"simple\"> <li>Finite numbers are ordered in the usual manner.</li> <li>Positive zero is equal but not greater than negative zero.</li> <li>\n<code>Inf</code> is equal to itself and greater than everything else except <code>NaN</code>.</li> <li>\n<code>-Inf</code> is equal to itself and less then everything else except <code>NaN</code>.</li> <li>\n<code>NaN</code> is not equal to, not less than, and not greater than anything, including itself.</li> </ul> <p>The last point is potentially surprising and thus worth noting:</p> <pre data-language=\"julia\">julia&gt; NaN == NaN\nfalse\n\njulia&gt; NaN != NaN\ntrue\n\njulia&gt; NaN &lt; NaN\nfalse\n\njulia&gt; NaN &gt; NaN\nfalse\n</pre> <p>and can cause especial headaches with <a class=\"reference internal\" href=\"../arrays/index#man-arrays\"><span>Arrays</span></a>:</p> <pre data-language=\"julia\">julia&gt; [1 NaN] == [1 NaN]\nfalse\n</pre> <p>Julia provides additional functions to test numbers for special values, which can be useful in situations like hash key comparisons:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Function</th> <th class=\"head\">Tests if</th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.isequal\" title=\"Base.isequal\"><code>isequal(x, y)</code></a></td> <td>\n<code>x</code> and <code>y</code> are identical</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.isfinite\" title=\"Base.isfinite\"><code>isfinite(x)</code></a></td> <td>\n<code>x</code> is a finite number</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.isinf\" title=\"Base.isinf\"><code>isinf(x)</code></a></td> <td>\n<code>x</code> is infinite</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.isnan\" title=\"Base.isnan\"><code>isnan(x)</code></a></td> <td>\n<code>x</code> is not a number</td> </tr>  </table> <p><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.isequal\" title=\"Base.isequal\"><code>isequal()</code></a> considers <code>NaN</code>s equal to each other:</p> <pre data-language=\"julia\">julia&gt; isequal(NaN,NaN)\ntrue\n\njulia&gt; isequal([1 NaN], [1 NaN])\ntrue\n\njulia&gt; isequal(NaN,NaN32)\ntrue\n</pre> <p><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.isequal\" title=\"Base.isequal\"><code>isequal()</code></a> can also be used to distinguish signed zeros:</p> <pre data-language=\"julia\">julia&gt; -0.0 == 0.0\ntrue\n\njulia&gt; isequal(-0.0, 0.0)\nfalse\n</pre> <p>Mixed-type comparisons between signed integers, unsigned integers, and floats can be tricky. A great deal of care has been taken to ensure that Julia does them correctly.</p> <p>For other types, <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.isequal\" title=\"Base.isequal\"><code>isequal()</code></a> defaults to calling <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.==\" title=\"Base.==\"><code>==()</code></a>, so if you want to define equality for your own types then you only need to add a <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.==\" title=\"Base.==\"><code>==()</code></a> method. If you define your own equality function, you should probably define a corresponding <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.hash\" title=\"Base.hash\"><code>hash()</code></a> method to ensure that <code>isequal(x,y)</code> implies <code>hash(x) == hash(y)</code>.</p>  <h3 id=\"chaining-comparisons\">Chaining comparisons</h3> <p>Unlike most languages, with the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Python_syntax_and_semantics#Comparison_operators\">notable exception of Python</a>, comparisons can be arbitrarily chained:</p> <pre data-language=\"julia\">julia&gt; 1 &lt; 2 &lt;= 2 &lt; 3 == 3 &gt; 2 &gt;= 1 == 1 &lt; 3 != 5\ntrue\n</pre> <p>Chaining comparisons is often quite convenient in numerical code. Chained comparisons use the <code>&amp;&amp;</code> operator for scalar comparisons, and the <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.&amp;\" title=\"Base.&amp;\"><code>&amp;</code></a> operator for elementwise comparisons, which allows them to work on arrays. For example, <code>0 .&lt; A .&lt; 1</code> gives a boolean array whose entries are true where the corresponding elements of <code>A</code> are between 0 and 1.</p> <p>The operator <a class=\"reference internal\" href=\"#\" title=\"Base.&lt;\"><code>&lt;</code></a> is intended for array objects; the operation <code>A .&lt; B</code> is valid only if <code>A</code> and <code>B</code> have the same dimensions. The operator returns an array with boolean entries and with the same dimensions as <code>A</code> and <code>B</code>. Such operators are called <em>elementwise</em>; Julia offers a suite of elementwise operators: <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.*\" title=\"Base.*\"><code>*</code></a>, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.+\" title=\"Base.+\"><code>+</code></a>, etc. Some of the elementwise operators can take a scalar operand such as the example <code>0 .&lt; A .&lt; 1</code> in the preceding paragraph. This notation means that the scalar operand should be replicated for each entry of the array.</p> <p>Note the evaluation behavior of chained comparisons:</p> <pre data-language=\"julia\">v(x) = (println(x); x)\n\njulia&gt; v(1) &lt; v(2) &lt;= v(3)\n2\n1\n3\ntrue\n\njulia&gt; v(1) &gt; v(2) &lt;= v(3)\n2\n1\nfalse\n</pre> <p>The middle expression is only evaluated once, rather than twice as it would be if the expression were written as <code>v(1) &lt; v(2) &amp;&amp; v(2) &lt;= v(3)</code>. However, the order of evaluations in a chained comparison is undefined. It is strongly recommended not to use expressions with side effects (such as printing) in chained comparisons. If side effects are required, the short-circuit <code>&amp;&amp;</code> operator should be used explicitly (see <a class=\"reference internal\" href=\"../control-flow/index#man-short-circuit-evaluation\"><span>Short-Circuit Evaluation</span></a>).</p>   <h3 id=\"operator-precedence\">Operator Precedence</h3> <p>Julia applies the following order of operations, from highest precedence to lowest:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Category</th> <th class=\"head\">Operators</th> </tr> </thead>  <tr class=\"row-even\">\n<td>Syntax</td> <td>\n<code>.</code> followed by <code>::</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>Exponentiation</td> <td>\n<code>^</code> and its elementwise equivalent <code>.^</code>\n</td> </tr> <tr class=\"row-even\">\n<td>Fractions</td> <td>\n<code>//</code> and <code>.//</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>Multiplication</td> <td>\n<code>* / % &amp; \\</code> and <code>.* ./ .% .\\</code>\n</td> </tr> <tr class=\"row-even\">\n<td>Bitshifts</td> <td>\n<code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code> and <code>.&lt;&lt; .&gt;&gt; .&gt;&gt;&gt;</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>Addition</td> <td>\n<code>+ - | $</code> and <code>.+ .-</code>\n</td> </tr> <tr class=\"row-even\">\n<td>Syntax</td> <td>\n<code>: ..</code> followed by <code>|&gt;</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>Comparisons</td> <td>\n<code>&gt; &lt; &gt;= &lt;= == === != !== &lt;:</code> and <code>.&gt; .&lt; .&gt;= .&lt;= .== .!=</code>\n</td> </tr> <tr class=\"row-even\">\n<td>Control flow</td> <td>\n<code>&amp;&amp;</code> followed by <code>||</code> followed by <code>?</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>Assignments</td> <td>\n<code>= += -= *= /= //= \\= ^= ÷= %= |= &amp;= $= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</code> and <code>.+= .-= .*= ./= .//= .\\= .^= .÷= .%=</code>\n</td> </tr>  </table>    <h2 id=\"man-numerical-conversions\">Numerical Conversions</h2> <p id=\"numerical-conversions\">Julia supports three forms of numerical conversion, which differ in their handling of inexact conversions.</p> <ul class=\"simple\"> <li>The notation <code>T(x)</code> or <code>convert(T,x)</code> converts <code>x</code> to a value of type <code>T</code>.<ul> <li>If <code>T</code> is a floating-point type, the result is the nearest representable value, which could be positive or negative infinity.</li> <li>If <code>T</code> is an integer type, an <code>InexactError</code> is raised if <code>x</code> is not representable by <code>T</code>.</li> </ul> </li> <li>\n<code>x % T</code> converts an integer <code>x</code> to a value of integer type <code>T</code> congruent to <code>x</code> modulo <code>2^n</code>, where <code>n</code> is the number of bits in <code>T</code>. In other words, the binary representation is truncated to fit.</li> <li>The <a class=\"reference internal\" href=\"#man-rounding-functions\"><span>Rounding functions</span></a> take a type <code>T</code> as an optional argument. For example, <code>round(Int,x)</code> is a shorthand for <code>Int(round(x))</code>.</li> </ul> <p>The following examples show the different forms.</p> <pre data-language=\"julia\">julia&gt; Int8(127)\n127\n\njulia&gt; Int8(128)\nERROR: InexactError()\n in call at essentials.jl:56\n\njulia&gt; Int8(127.0)\n127\n\njulia&gt; Int8(3.14)\nERROR: InexactError()\n in call at essentials.jl:56\n\njulia&gt; Int8(128.0)\nERROR: InexactError()\n in call at essentials.jl:56\n\njulia&gt; 127 % Int8\n127\n\njulia&gt; 128 % Int8\n-128\n\njulia&gt; round(Int8,127.4)\n127\n\njulia&gt; round(Int8,127.6)\nERROR: InexactError()\n in trunc at float.jl:374\n in round at float.jl:181\n</pre> <p>See <a class=\"reference internal\" href=\"../conversion-and-promotion/index#man-conversion-and-promotion\"><span>Conversion and Promotion</span></a> for how to define your own conversions and promotions.</p>   <h2 id=\"man-elementary-functions\">Elementary Functions</h2> <p id=\"elementary-functions\">Julia provides a comprehensive collection of mathematical functions and operators. These mathematical operations are defined over as broad a class of numerical values as permit sensible definitions, including integers, floating-point numbers, rationals, and complexes, wherever such definitions make sense.</p>  <h3 id=\"man-rounding-functions\">Rounding functions</h3> <table class=\"docutils\" id=\"rounding-functions\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Function</th> <th class=\"head\">Description</th> <th class=\"head\">Return type</th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.round\" title=\"Base.round\"><code>round(x)</code></a></td> <td>round <code>x</code> to the nearest integer</td> <td><code>typeof(x)</code></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.round\" title=\"Base.round\"><code>round(T, x)</code></a></td> <td>round <code>x</code> to the nearest integer</td> <td><code>T</code></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.floor\" title=\"Base.floor\"><code>floor(x)</code></a></td> <td>round <code>x</code> towards <code>-Inf</code>\n</td> <td><code>typeof(x)</code></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.floor\" title=\"Base.floor\"><code>floor(T, x)</code></a></td> <td>round <code>x</code> towards <code>-Inf</code>\n</td> <td><code>T</code></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.ceil\" title=\"Base.ceil\"><code>ceil(x)</code></a></td> <td>round <code>x</code> towards <code>+Inf</code>\n</td> <td><code>typeof(x)</code></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.ceil\" title=\"Base.ceil\"><code>ceil(T, x)</code></a></td> <td>round <code>x</code> towards <code>+Inf</code>\n</td> <td><code>T</code></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.trunc\" title=\"Base.trunc\"><code>trunc(x)</code></a></td> <td>round <code>x</code> towards zero</td> <td><code>typeof(x)</code></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.trunc\" title=\"Base.trunc\"><code>trunc(T, x)</code></a></td> <td>round <code>x</code> towards zero</td> <td><code>T</code></td> </tr>  </table>   <h3 id=\"division-functions\">Division functions</h3> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Function</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.div\" title=\"Base.div\"><code>div(x,y)</code></a></td> <td>truncated division; quotient rounded towards zero</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.fld\" title=\"Base.fld\"><code>fld(x,y)</code></a></td> <td>floored division; quotient rounded towards <code>-Inf</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.cld\" title=\"Base.cld\"><code>cld(x,y)</code></a></td> <td>ceiling division; quotient rounded towards <code>+Inf</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.rem\" title=\"Base.rem\"><code>rem(x,y)</code></a></td> <td>remainder; satisfies <code>x == div(x,y)*y + rem(x,y)</code>; sign matches <code>x</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.mod\" title=\"Base.mod\"><code>mod(x,y)</code></a></td> <td>modulus; satisfies <code>x == fld(x,y)*y + mod(x,y)</code>; sign matches <code>y</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.mod2pi\" title=\"Base.mod2pi\"><code>mod2pi(x)</code></a></td> <td>modulus with respect to 2pi; <code>0 &lt;= mod2pi(x)  &lt; 2pi</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.divrem\" title=\"Base.divrem\"><code>divrem(x,y)</code></a></td> <td>returns <code>(div(x,y),rem(x,y))</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.fldmod\" title=\"Base.fldmod\"><code>fldmod(x,y)</code></a></td> <td>returns <code>(fld(x,y),mod(x,y))</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.gcd\" title=\"Base.gcd\"><code>gcd(x,y...)</code></a></td> <td>greatest common divisor of <code>x</code>, <code>y</code>,...; sign matches <code>x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.lcm\" title=\"Base.lcm\"><code>lcm(x,y...)</code></a></td> <td>least common multiple of <code>x</code>, <code>y</code>,...; sign matches <code>x</code>\n</td> </tr>  </table>   <h3 id=\"sign-and-absolute-value-functions\">Sign and absolute value functions</h3> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Function</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.abs\" title=\"Base.abs\"><code>abs(x)</code></a></td> <td>a positive value with the magnitude of <code>x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.abs2\" title=\"Base.abs2\"><code>abs2(x)</code></a></td> <td>the squared magnitude of <code>x</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sign\" title=\"Base.sign\"><code>sign(x)</code></a></td> <td>indicates the sign of <code>x</code>, returning -1, 0, or +1</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.signbit\" title=\"Base.signbit\"><code>signbit(x)</code></a></td> <td>indicates whether the sign bit is on (true) or off (false)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.copysign\" title=\"Base.copysign\"><code>copysign(x,y)</code></a></td> <td>a value with the magnitude of <code>x</code> and the sign of <code>y</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.flipsign\" title=\"Base.flipsign\"><code>flipsign(x,y)</code></a></td> <td>a value with the magnitude of <code>x</code> and the sign of <code>x*y</code>\n</td> </tr>  </table>   <h3 id=\"powers-logs-and-roots\">Powers, logs and roots</h3> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Function</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sqrt\" title=\"Base.sqrt\"><code>sqrt(x)</code></a> <code>√x</code>\n</td> <td>square root of <code>x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"../../stdlib/math/index#Base.cbrt\" title=\"Base.cbrt\"><code>cbrt(x)</code></a> <code>∛x</code>\n</td> <td>cube root of <code>x</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.hypot\" title=\"Base.hypot\"><code>hypot(x,y)</code></a></td> <td>hypotenuse of right-angled triangle with other sides of length <code>x</code> and <code>y</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.exp\" title=\"Base.exp\"><code>exp(x)</code></a></td> <td>natural exponential function at <code>x</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.expm1\" title=\"Base.expm1\"><code>expm1(x)</code></a></td> <td>accurate <code>exp(x)-1</code> for <code>x</code> near zero</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.ldexp\" title=\"Base.ldexp\"><code>ldexp(x,n)</code></a></td> <td>\n<code>x*2^n</code> computed efficiently for integer values of <code>n</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.log\" title=\"Base.log\"><code>log(x)</code></a></td> <td>natural logarithm of <code>x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.log\" title=\"Base.log\"><code>log(b,x)</code></a></td> <td>base <code>b</code> logarithm of <code>x</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.log2\" title=\"Base.log2\"><code>log2(x)</code></a></td> <td>base 2 logarithm of <code>x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.log10\" title=\"Base.log10\"><code>log10(x)</code></a></td> <td>base 10 logarithm of <code>x</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.log1p\" title=\"Base.log1p\"><code>log1p(x)</code></a></td> <td>accurate <code>log(1+x)</code> for <code>x</code> near zero</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.exponent\" title=\"Base.exponent\"><code>exponent(x)</code></a></td> <td>binary exponent of <code>x</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.significand\" title=\"Base.significand\"><code>significand(x)</code></a></td> <td>binary significand (a.k.a. mantissa) of a floating-point number <code>x</code>\n</td> </tr>  </table> <p>For an overview of why functions like <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.hypot\" title=\"Base.hypot\"><code>hypot()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.expm1\" title=\"Base.expm1\"><code>expm1()</code></a>, and <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.log1p\" title=\"Base.log1p\"><code>log1p()</code></a> are necessary and useful, see John D. Cook’s excellent pair of blog posts on the subject: <a class=\"reference external\" href=\"http://www.johndcook.com/blog/2010/06/07/math-library-functions-that-seem-unnecessary/\">expm1, log1p, erfc</a>, and <a class=\"reference external\" href=\"http://www.johndcook.com/blog/2010/06/02/whats-so-hard-about-finding-a-hypotenuse/\">hypot</a>.</p>   <h3 id=\"trigonometric-and-hyperbolic-functions\">Trigonometric and hyperbolic functions</h3> <p>All the standard trigonometric and hyperbolic functions are also defined:</p> <pre data-language=\"julia\">sin    cos    tan    cot    sec    csc\nsinh   cosh   tanh   coth   sech   csch\nasin   acos   atan   acot   asec   acsc\nasinh  acosh  atanh  acoth  asech  acsch\nsinc   cosc   atan2\n</pre> <p>These are all single-argument functions, with the exception of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Atan2\">atan2</a>, which gives the angle in <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Radian\">radians</a> between the <em>x</em>-axis and the point specified by its arguments, interpreted as <em>x</em> and <em>y</em> coordinates.</p> <p>Additionally, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sinpi\" title=\"Base.sinpi\"><code>sinpi(x)</code></a> and <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.cospi\" title=\"Base.cospi\"><code>cospi(x)</code></a> are provided for more accurate computations of <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sin\" title=\"Base.sin\"><code>sin(pi*x)</code></a> and <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.cos\" title=\"Base.cos\"><code>cos(pi*x)</code></a> respectively.</p> <p>In order to compute trigonometric functions with degrees instead of radians, suffix the function with <code>d</code>. For example, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sind\" title=\"Base.sind\"><code>sind(x)</code></a> computes the sine of <code>x</code> where <code>x</code> is specified in degrees. The complete list of trigonometric functions with degree variants is:</p> <pre data-language=\"julia\">sind   cosd   tand   cotd   secd   cscd\nasind  acosd  atand  acotd  asecd  acscd\n</pre>   <h3 id=\"special-functions\">Special functions</h3> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Function</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.erf\" title=\"Base.erf\"><code>erf(x)</code></a></td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Error_function\">error function</a> at <code>x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.erfc\" title=\"Base.erfc\"><code>erfc(x)</code></a></td> <td>complementary error function, i.e. the accurate version of <code>1-erf(x)</code> for large <code>x</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.erfinv\" title=\"Base.erfinv\"><code>erfinv(x)</code></a></td> <td>inverse function to <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.erf\" title=\"Base.erf\"><code>erf()</code></a>\n</td> </tr> <tr class=\"row-odd\">\n<td><code>erfcinv(x)</code></td> <td>inverse function to <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.erfc\" title=\"Base.erfc\"><code>erfc()</code></a>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.erfi\" title=\"Base.erfi\"><code>erfi(x)</code></a></td> <td>imaginary error function defined as <code>-im * erf(x * im)</code>, where <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.im\" title=\"Base.im\"><code>im</code></a> is the imaginary unit</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.erfcx\" title=\"Base.erfcx\"><code>erfcx(x)</code></a></td> <td>scaled complementary error function, i.e. accurate <code>exp(x^2) * erfc(x)</code> for large <code>x</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.dawson\" title=\"Base.dawson\"><code>dawson(x)</code></a></td> <td>scaled imaginary error function, a.k.a. Dawson function, i.e. accurate <code>exp(-x^2) * erfi(x) * sqrt(pi) / 2</code> for large <code>x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.gamma\" title=\"Base.gamma\"><code>gamma(x)</code></a></td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Gamma_function\">gamma function</a> at <code>x</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.lgamma\" title=\"Base.lgamma\"><code>lgamma(x)</code></a></td> <td>accurate <code>log(gamma(x))</code> for large <code>x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.lfact\" title=\"Base.lfact\"><code>lfact(x)</code></a></td> <td>accurate <code>log(factorial(x))</code> for large <code>x</code>; same as <code>lgamma(x+1)</code> for <code>x &gt; 1</code>, zero otherwise</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.digamma\" title=\"Base.digamma\"><code>digamma(x)</code></a></td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Digamma_function\">digamma function</a> (i.e. the derivative of <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.lgamma\" title=\"Base.lgamma\"><code>lgamma()</code></a>) at <code>x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.beta\" title=\"Base.beta\"><code>beta(x,y)</code></a></td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Beta_function\">beta function</a> at <code>x,y</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.lbeta\" title=\"Base.lbeta\"><code>lbeta(x,y)</code></a></td> <td>accurate <code>log(beta(x,y))</code> for large <code>x</code> or <code>y</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.eta\" title=\"Base.eta\"><code>eta(x)</code></a></td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Dirichlet_eta_function\">Dirichlet eta function</a> at <code>x</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.zeta\" title=\"Base.zeta\"><code>zeta(x)</code></a></td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Riemann_zeta_function\">Riemann zeta function</a> at <code>x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"../../stdlib/math/index#Base.airy\" title=\"Base.airy\"><code>airy(z)</code></a>, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.airyai\" title=\"Base.airyai\"><code>airyai(z)</code></a>, <code>airy(0,z)</code>\n</td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Airy_function\">Airy Ai function</a> at <code>z</code>\n</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"../../stdlib/math/index#Base.airyprime\" title=\"Base.airyprime\"><code>airyprime(z)</code></a>, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.airyaiprime\" title=\"Base.airyaiprime\"><code>airyaiprime(z)</code></a>, <code>airy(1,z)</code>\n</td> <td>derivative of the Airy Ai function at <code>z</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"../../stdlib/math/index#Base.airybi\" title=\"Base.airybi\"><code>airybi(z)</code></a>, <code>airy(2,z)</code>\n</td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Airy_function\">Airy Bi function</a> at <code>z</code>\n</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"../../stdlib/math/index#Base.airybiprime\" title=\"Base.airybiprime\"><code>airybiprime(z)</code></a>, <code>airy(3,z)</code>\n</td> <td>derivative of the Airy Bi function at <code>z</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"../../stdlib/math/index#Base.airyx\" title=\"Base.airyx\"><code>airyx(z)</code></a>, <code>airyx(k,z)</code>\n</td> <td>scaled Airy AI function and <code>k</code> th derivatives at <code>z</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.besselj\" title=\"Base.besselj\"><code>besselj(nu,z)</code></a></td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bessel_function\">Bessel function</a> of the first kind of order <code>nu</code> at <code>z</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.besselj0\" title=\"Base.besselj0\"><code>besselj0(z)</code></a></td> <td><code>besselj(0,z)</code></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.besselj1\" title=\"Base.besselj1\"><code>besselj1(z)</code></a></td> <td><code>besselj(1,z)</code></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.besseljx\" title=\"Base.besseljx\"><code>besseljx(nu,z)</code></a></td> <td>scaled Bessel function of the first kind of order <code>nu</code> at <code>z</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.bessely\" title=\"Base.bessely\"><code>bessely(nu,z)</code></a></td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bessel_function\">Bessel function</a> of the second kind of order <code>nu</code> at <code>z</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.bessely0\" title=\"Base.bessely0\"><code>bessely0(z)</code></a></td> <td><code>bessely(0,z)</code></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.bessely0\" title=\"Base.bessely0\"><code>bessely1(z)</code></a></td> <td><code>bessely(1,z)</code></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.besselyx\" title=\"Base.besselyx\"><code>besselyx(nu,z)</code></a></td> <td>scaled Bessel function of the second kind of order <code>nu</code> at <code>z</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.besselh\" title=\"Base.besselh\"><code>besselh(nu,k,z)</code></a></td> <td>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bessel_function\">Bessel function</a> of the third kind (a.k.a. Hankel function) of order <code>nu</code> at <code>z</code>; <code>k</code> must be either <code>1</code> or <code>2</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.hankelh1\" title=\"Base.hankelh1\"><code>hankelh1(nu,z)</code></a></td> <td><code>besselh(nu, 1, z)</code></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.hankelh1x\" title=\"Base.hankelh1x\"><code>hankelh1x(nu,z)</code></a></td> <td>scaled <code>besselh(nu, 1, z)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.hankelh2\" title=\"Base.hankelh2\"><code>hankelh2(nu,z)</code></a></td> <td><code>besselh(nu, 2, z)</code></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.hankelh2x\" title=\"Base.hankelh2x\"><code>hankelh2x(nu,z)</code></a></td> <td>scaled <code>besselh(nu, 2, z)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.besseli\" title=\"Base.besseli\"><code>besseli(nu,z)</code></a></td> <td>modified <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bessel_function\">Bessel function</a> of the first kind of order <code>nu</code> at <code>z</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.besselix\" title=\"Base.besselix\"><code>besselix(nu,z)</code></a></td> <td>scaled modified Bessel function of the first kind of order <code>nu</code> at <code>z</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.besselk\" title=\"Base.besselk\"><code>besselk(nu,z)</code></a></td> <td>modified <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bessel_function\">Bessel function</a> of the second kind of order <code>nu</code> at <code>z</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/math/index#Base.besselkx\" title=\"Base.besselkx\"><code>besselkx(nu,z)</code></a></td> <td>scaled modified Bessel function of the second kind of order <code>nu</code> at <code>z</code>\n</td> </tr>  </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/mathematical-operations/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/mathematical-operations/</a>\n  </p>\n</div>\n","manual/strings/index":"<h1 id=\"man-strings\">Strings</h1> <p>Strings are finite sequences of characters. Of course, the real trouble comes when one asks what a character is. The characters that English speakers are familiar with are the letters <code>A</code>, <code>B</code>, <code>C</code>, etc., together with numerals and common punctuation symbols. These characters are standardized together with a mapping to integer values between 0 and 127 by the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/ASCII\">ASCII</a> standard. There are, of course, many other characters used in non-English languages, including variants of the ASCII characters with accents and other modifications, related scripts such as Cyrillic and Greek, and scripts completely unrelated to ASCII and English, including Arabic, Chinese, Hebrew, Hindi, Japanese, and Korean. The <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Unicode\">Unicode</a> standard tackles the complexities of what exactly a character is, and is generally accepted as the definitive standard addressing this problem. Depending on your needs, you can either ignore these complexities entirely and just pretend that only ASCII characters exist, or you can write code that can handle any of the characters or encodings that one may encounter when handling non-ASCII text. Julia makes dealing with plain ASCII text simple and efficient, and handling Unicode is as simple and efficient as possible. In particular, you can write C-style string code to process ASCII strings, and they will work as expected, both in terms of performance and semantics. If such code encounters non-ASCII text, it will gracefully fail with a clear error message, rather than silently introducing corrupt results. When this happens, modifying the code to handle non-ASCII data is straightforward.</p> <p>There are a few noteworthy high-level features about Julia’s strings:</p> <ul class=\"simple\"> <li>\n<code>AbstractString</code> is an abstraction, not a concrete type — many different representations can implement the <code>AbstractString</code> interface, but they can easily be used together and interact transparently. Any string type can be used in any function expecting a <code>AbstractString</code>.</li> <li>Like C and Java, but unlike most dynamic languages, Julia has a first-class type representing a single character, called <code>Char</code>. This is just a special kind of 32-bit bitstype whose numeric value represents a Unicode code point.</li> <li>As in Java, strings are immutable: the value of a <code>AbstractString</code> object cannot be changed. To construct a different string value, you construct a new string from parts of other strings.</li> <li>Conceptually, a string is a <em>partial function</em> from indices to characters — for some index values, no character value is returned, and instead an exception is thrown. This allows for efficient indexing into strings by the byte index of an encoded representation rather than by a character index, which cannot be implemented both efficiently and simply for variable-width encodings of Unicode strings.</li> <li>Julia supports the full range of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Unicode\">Unicode</a> characters: literal strings are always <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/ASCII\">ASCII</a> or <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/UTF-8\">UTF-8</a> but other encodings for strings from external sources can be supported.</li> </ul>  <h2 id=\"man-characters\">Characters</h2> <p id=\"characters\">A <code>Char</code> value represents a single character: it is just a 32-bit bitstype with a special literal representation and appropriate arithmetic behaviors, whose numeric value is interpreted as a <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Code_point\">Unicode code point</a>. Here is how <code>Char</code> values are input and shown:</p> <pre data-language=\"julia\">julia&gt; 'x'\n'x'\n\njulia&gt; typeof(ans)\nChar\n</pre> <p>You can convert a <code>Char</code> to its integer value, i.e. code point, easily:</p> <pre data-language=\"julia\">julia&gt; Int('x')\n120\n\njulia&gt; typeof(ans)\nInt64\n</pre> <p>On 32-bit architectures, <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.typeof\" title=\"Base.typeof\"><code>typeof(ans)</code></a> will be <code>Int32</code>. You can convert an integer value back to a <code>Char</code> just as easily:</p> <pre data-language=\"julia\">julia&gt; Char(120)\n'x'\n</pre> <p>Not all integer values are valid Unicode code points, but for performance, the <code>Char()</code> conversion does not check that every character value is valid. If you want to check that each converted value is a valid code point, use the <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.isvalid\" title=\"Base.isvalid\"><code>isvalid()</code></a> function:</p> <pre data-language=\"julia\">julia&gt; Char(0x110000)\n'\\U110000'\n\njulia&gt; isvalid(Char, 0x110000)\nfalse\n</pre> <p>As of this writing, the valid Unicode code points are <code>U+00</code> through <code>U+d7ff</code> and <code>U+e000</code> through <code>U+10ffff</code>. These have not all been assigned intelligible meanings yet, nor are they necessarily interpretable by applications, but all of these values are considered to be valid Unicode characters.</p> <p>You can input any Unicode character in single quotes using <code>\\u</code> followed by up to four hexadecimal digits or <code>\\U</code> followed by up to eight hexadecimal digits (the longest valid value only requires six):</p> <pre data-language=\"julia\">julia&gt; '\\u0'\n'\\0'\n\njulia&gt; '\\u78'\n'x'\n\njulia&gt; '\\u2200'\n'∀'\n\njulia&gt; '\\U10ffff'\n'\\U10ffff'\n</pre> <p>Julia uses your system’s locale and language settings to determine which characters can be printed as-is and which must be output using the generic, escaped <code>\\u</code> or <code>\\U</code> input forms. In addition to these Unicode escape forms, all of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/C_syntax#Backslash_escapes\">C’s traditional escaped input forms</a> can also be used:</p> <pre data-language=\"julia\">julia&gt; Int('\\0')\n0\n\njulia&gt; Int('\\t')\n9\n\njulia&gt; Int('\\n')\n10\n\njulia&gt; Int('\\e')\n27\n\njulia&gt; Int('\\x7f')\n127\n\njulia&gt; Int('\\177')\n127\n\njulia&gt; Int('\\xff')\n255\n</pre> <p>You can do comparisons and a limited amount of arithmetic with <code>Char</code> values:</p> <pre data-language=\"julia\">julia&gt; 'A' &lt; 'a'\ntrue\n\njulia&gt; 'A' &lt;= 'a' &lt;= 'Z'\nfalse\n\njulia&gt; 'A' &lt;= 'X' &lt;= 'Z'\ntrue\n\njulia&gt; 'x' - 'a'\n23\n\njulia&gt; 'A' + 1\n'B'\n</pre>   <h2 id=\"string-basics\">String Basics</h2> <p>String literals are delimited by double quotes or triple double quotes:</p> <pre data-language=\"julia\">julia&gt; str = \"Hello, world.\\n\"\n\"Hello, world.\\n\"\n\njulia&gt; \"\"\"Contains \"quote\" characters\"\"\"\n\"Contains \\\"quote\\\" characters\"\n</pre> <p>If you want to extract a character from a string, you index into it:</p> <pre data-language=\"julia\">julia&gt; str[1]\n'H'\n\njulia&gt; str[6]\n','\n\njulia&gt; str[end]\n'\\n'\n</pre> <p>All indexing in Julia is 1-based: the first element of any integer-indexed object is found at index 1, and the last element is found at index <code>n</code>, when the string has a length of <code>n</code>.</p> <p>In any indexing expression, the keyword <code>end</code> can be used as a shorthand for the last index (computed by <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.endof\" title=\"Base.endof\"><code>endof(str)</code></a>). You can perform arithmetic and other operations with <code>end</code>, just like a normal value:</p> <pre data-language=\"julia\">julia&gt; str[end-1]\n'.'\n\njulia&gt; str[end÷2]\n' '\n</pre> <p>Using an index less than 1 or greater than <code>end</code> raises an error:</p> <pre data-language=\"julia\">julia&gt; str[0]\nERROR: BoundsError()\n in getindex at /Users/sabae/src/julia/usr/lib/julia/sys.dylib (repeats 2 times)\n\njulia&gt; str[end+1]\nERROR: BoundsError()\n in getindex at /Users/sabae/src/julia/usr/lib/julia/sys.dylib (repeats 2 times)\n</pre> <p>You can also extract a substring using range indexing:</p> <pre data-language=\"julia\">julia&gt; str[4:9]\n\"lo, wo\"\n</pre> <p>Notice that the expressions <code>str[k]</code> and <code>str[k:k]</code> do not give the same result:</p> <pre data-language=\"julia\">julia&gt; str[6]\n','\n\njulia&gt; str[6:6]\n\",\"\n</pre> <p>The former is a single character value of type <code>Char</code>, while the latter is a string value that happens to contain only a single character. In Julia these are very different things.</p>   <h2 id=\"unicode-and-utf-8\">Unicode and UTF-8</h2> <p>Julia fully supports Unicode characters and strings. As <a class=\"reference external\" href=\"#characters\">discussed above</a>, in character literals, Unicode code points can be represented using Unicode <code>\\u</code> and <code>\\U</code> escape sequences, as well as all the standard C escape sequences. These can likewise be used to write string literals:</p> <pre data-language=\"julia\">julia&gt; s = \"\\u2200 x \\u2203 y\"\n\"∀ x ∃ y\"\n</pre> <p>Whether these Unicode characters are displayed as escapes or shown as special characters depends on your terminal’s locale settings and its support for Unicode. Non-ASCII string literals are encoded using the UTF-8 encoding. UTF-8 is a variable-width encoding, meaning that not all characters are encoded in the same number of bytes. In UTF-8, ASCII characters — i.e. those with code points less than 0x80 (128) — are encoded as they are in ASCII, using a single byte, while code points 0x80 and above are encoded using multiple bytes — up to four per character. This means that not every byte index into a UTF-8 string is necessarily a valid index for a character. If you index into a string at such an invalid byte index, an error is thrown:</p> <pre data-language=\"julia\">julia&gt; s[1]\n'∀'\n\njulia&gt; s[2]\nERROR: UnicodeError: invalid character index\n in next at ./unicode/utf8.jl:65\n in getindex at strings/basic.jl:37\n\njulia&gt; s[3]\nERROR: UnicodeError: invalid character index\n in next at ./unicode/utf8.jl:65\n in getindex at strings/basic.jl:37\n\njulia&gt; s[4]\n' '\n</pre> <p>In this case, the character <code>∀</code> is a three-byte character, so the indices 2 and 3 are invalid and the next character’s index is 4; this next valid index can be computed by <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.nextind\" title=\"Base.nextind\"><code>nextind(s,1)</code></a>, and the next index after that by <code>nextind(s,4)</code> and so on.</p> <p>Because of variable-length encodings, the number of characters in a string (given by <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.length\" title=\"Base.length\"><code>length(s)</code></a>) is not always the same as the last index. If you iterate through the indices 1 through <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.endof\" title=\"Base.endof\"><code>endof(s)</code></a> and index into <code>s</code>, the sequence of characters returned when errors aren’t thrown is the sequence of characters comprising the string <code>s</code>. Thus we have the identity that <code>length(s) &lt;= endof(s)</code>, since each character in a string must have its own index. The following is an inefficient and verbose way to iterate through the characters of <code>s</code>:</p> <pre data-language=\"julia\">julia&gt; for i = 1:endof(s)\n         try\n           println(s[i])\n         catch\n           # ignore the index error\n         end\n       end\n∀\n\nx\n\n∃\n\ny\n</pre> <p>The blank lines actually have spaces on them. Fortunately, the above awkward idiom is unnecessary for iterating through the characters in a string, since you can just use the string as an iterable object, no exception handling required:</p> <pre data-language=\"julia\">julia&gt; for c in s\n         println(c)\n       end\n∀\n\nx\n\n∃\n\ny\n</pre> <p>UTF-8 is not the only encoding that Julia supports, and adding support for new encodings is quite easy. In particular, Julia also provides <code>UTF16String</code> and <code>UTF32String</code> types, constructed by <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.utf16\" title=\"Base.utf16\"><code>utf16()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.utf32\" title=\"Base.utf32\"><code>utf32()</code></a> respectively, for UTF-16 and UTF-32 encodings. It also provides aliases <code>WString</code> and <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.wstring\" title=\"Base.wstring\"><code>wstring()</code></a> for either UTF-16 or UTF-32 strings, depending on the size of <code>Cwchar_t</code>. Additional discussion of other encodings and how to implement support for them is beyond the scope of this document for the time being. For further discussion of UTF-8 encoding issues, see the section below on <a class=\"reference external\" href=\"#Byte+Array+Literals\">byte array literals</a>, which goes into some greater detail.</p>   <h2 id=\"man-string-interpolation\">Interpolation</h2> <p id=\"interpolation\">One of the most common and useful string operations is concatenation:</p> <pre data-language=\"julia\">julia&gt; greet = \"Hello\"\n\"Hello\"\n\njulia&gt; whom = \"world\"\n\"world\"\n\njulia&gt; string(greet, \", \", whom, \".\\n\")\n\"Hello, world.\\n\"\n</pre> <p>Constructing strings like this can become a bit cumbersome, however. To reduce the need for these verbose calls to <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.string\" title=\"Base.string\"><code>string()</code></a>, Julia allows interpolation into string literals using <code>$</code>, as in Perl:</p> <pre data-language=\"julia\">julia&gt; \"$greet, $whom.\\n\"\n\"Hello, world.\\n\"\n</pre> <p>This is more readable and convenient and equivalent to the above string concatenation — the system rewrites this apparent single string literal into a concatenation of string literals with variables.</p> <p>The shortest complete expression after the <code>$</code> is taken as the expression whose value is to be interpolated into the string. Thus, you can interpolate any expression into a string using parentheses:</p> <pre data-language=\"julia\">julia&gt; \"1 + 2 = $(1 + 2)\"\n\"1 + 2 = 3\"\n</pre> <p>Both concatenation and string interpolation call <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.string\" title=\"Base.string\"><code>string()</code></a> to convert objects into string form. Most non-<code>AbstractString</code> objects are converted to strings closely corresponding to how they are entered as literal expressions:</p> <pre data-language=\"julia\">julia&gt; v = [1,2,3]\n3-element Array{Int64,1}:\n 1\n 2\n 3\n\njulia&gt; \"v: $v\"\n\"v: [1,2,3]\"\n</pre> <p><a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.string\" title=\"Base.string\"><code>string()</code></a> is the identity for <code>AbstractString</code> and <code>Char</code> values, so these are interpolated into strings as themselves, unquoted and unescaped:</p> <pre data-language=\"julia\">julia&gt; c = 'x'\n'x'\n\njulia&gt; \"hi, $c\"\n\"hi, x\"\n</pre> <p>To include a literal <code>$</code> in a string literal, escape it with a backslash:</p> <pre data-language=\"julia\">julia&gt; print(\"I have \\$100 in my account.\\n\")\nI have $100 in my account.\n</pre>   <h2 id=\"triple-quoted-string-literals\">Triple-Quoted String Literals</h2> <p>When strings are created using triple-quotes (<code>\"\"\"...\"\"\"</code>) they have some special behavior that can be useful for creating longer blocks of text. First, if the opening <code>\"\"\"</code> is followed by a newline, the newline is stripped from the resulting string.</p> <pre data-language=\"julia\">\"\"\"hello\"\"\"\n</pre> <p>is equivalent to</p> <pre data-language=\"julia\">\"\"\"\nhello\"\"\"\n</pre> <p>but</p> <pre data-language=\"julia\">\"\"\"\n\nhello\"\"\"\n</pre> <p>will contain a literal newline at the beginning. Trailing whitespace is left unaltered. They can contain <code>\"</code> symbols without escaping. Triple-quoted strings are also dedented to the level of the least-indented line. This is useful for defining strings within code that is indented. For example:</p> <pre data-language=\"julia\">julia&gt; str = \"\"\"\n           Hello,\n           world.\n         \"\"\"\n\"  Hello,\\n  world.\\n\"\n</pre> <p>In this case the final (empty) line before the closing <code>\"\"\"</code> sets the indentation level.</p> <p>Note that line breaks in literal strings, whether single- or triple-quoted, result in a newline (LF) character <code>\\n</code> in the string, even if your editor uses a carriage return <code>\\r</code> (CR) or CRLF combination to end lines. To include a CR in a string, use an explicit escape <code>\\r</code>; for example, you can enter the literal string <code>\"a CRLF line ending\\r\\n\"</code>.</p>   <h2 id=\"common-operations\">Common Operations</h2> <p>You can lexicographically compare strings using the standard comparison operators:</p> <pre data-language=\"julia\">julia&gt; \"abracadabra\" &lt; \"xylophone\"\ntrue\n\njulia&gt; \"abracadabra\" == \"xylophone\"\nfalse\n\njulia&gt; \"Hello, world.\" != \"Goodbye, world.\"\ntrue\n\njulia&gt; \"1 + 2 = 3\" == \"1 + 2 = $(1 + 2)\"\ntrue\n</pre> <p>You can search for the index of a particular character using the <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.search\" title=\"Base.search\"><code>search()</code></a> function:</p> <pre data-language=\"julia\">julia&gt; search(\"xylophone\", 'x')\n1\n\njulia&gt; search(\"xylophone\", 'p')\n5\n\njulia&gt; search(\"xylophone\", 'z')\n0\n</pre> <p>You can start the search for a character at a given offset by providing a third argument:</p> <pre data-language=\"julia\">julia&gt; search(\"xylophone\", 'o')\n4\n\njulia&gt; search(\"xylophone\", 'o', 5)\n7\n\njulia&gt; search(\"xylophone\", 'o', 8)\n0\n</pre> <p>You can use the <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.contains\" title=\"Base.contains\"><code>contains()</code></a> function to check if a substring is contained in a string:</p> <pre data-language=\"julia\">julia&gt; contains(\"Hello, world.\", \"world\")\ntrue\n\njulia&gt; contains(\"Xylophon\", \"o\")\ntrue\n\njulia&gt; contains(\"Xylophon\", \"a\")\nfalse\n\njulia&gt; contains(\"Xylophon\", 'o')\nERROR: MethodError: `contains` has no method matching contains(::ASCIIString, ::Char)\nClosest candidates are:\n  contains(!Matched::Function, ::Any, !Matched::Any)\n  contains(::AbstractString, !Matched::AbstractString)\n</pre> <p>The last error is because <code>'o'</code> is a character literal, and <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.contains\" title=\"Base.contains\"><code>contains()</code></a> is a generic function that looks for subsequences. To look for an element in a sequence, you must use <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.in\" title=\"Base.in\"><code>in()</code></a> instead.</p> <p>Two other handy string functions are <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.repeat\" title=\"Base.repeat\"><code>repeat()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.join\" title=\"Base.join\"><code>join()</code></a>:</p> <pre data-language=\"julia\">julia&gt; repeat(\".:Z:.\", 10)\n\".:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:.\"\n\njulia&gt; join([\"apples\", \"bananas\", \"pineapples\"], \", \", \" and \")\n\"apples, bananas and pineapples\"\n</pre> <p>Some other useful functions include:</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.endof\" title=\"Base.endof\"><code>endof(str)</code></a> gives the maximal (byte) index that can be used to index into <code>str</code>.</li> <li>\n<a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.length\" title=\"Base.length\"><code>length(str)</code></a> the number of characters in <code>str</code>.</li> <li>\n<a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.start\" title=\"Base.start\"><code>i = start(str)</code></a> gives the first valid index at which a character can be found in <code>str</code> (typically 1).</li> <li>\n<a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.next\" title=\"Base.next\"><code>c, j = next(str,i)</code></a> returns next character at or after the index <code>i</code> and the next valid character index following that. With <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.start\" title=\"Base.start\"><code>start()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.endof\" title=\"Base.endof\"><code>endof()</code></a>, can be used to iterate through the characters in <code>str</code>.</li> <li>\n<a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.ind2chr\" title=\"Base.ind2chr\"><code>ind2chr(str,i)</code></a> gives the number of characters in <code>str</code> up to and including any at index <code>i</code>.</li> <li>\n<a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.chr2ind\" title=\"Base.chr2ind\"><code>chr2ind(str,j)</code></a> gives the index at which the <code>j</code>th character in <code>str</code> occurs.</li> </ul>   <h2 id=\"man-non-standard-string-literals\">Non-Standard String Literals</h2> <p id=\"non-standard-string-literals\">There are situations when you want to construct a string or use string semantics, but the behavior of the standard string construct is not quite what is needed. For these kinds of situations, Julia provides <a class=\"reference internal\" href=\"../metaprogramming/index#man-non-standard-string-literals2\"><span>non-standard string literals</span></a>. A non-standard string literal looks like a regular double-quoted string literal, but is immediately prefixed by an identifier, and doesn’t behave quite like a normal string literal. Regular expressions, byte array literals and version number literals, as described below, are some examples of non-standard string literals. Other examples are given in the <a class=\"reference internal\" href=\"../metaprogramming/index#man-non-standard-string-literals2\"><span>metaprogramming</span></a> section.</p>   <h2 id=\"regular-expressions\">Regular Expressions</h2> <p>Julia has Perl-compatible regular expressions (regexes), as provided by the <a class=\"reference external\" href=\"http://www.pcre.org/\">PCRE</a> library. Regular expressions are related to strings in two ways: the obvious connection is that regular expressions are used to find regular patterns in strings; the other connection is that regular expressions are themselves input as strings, which are parsed into a state machine that can be used to efficiently search for patterns in strings. In Julia, regular expressions are input using non-standard string literals prefixed with various identifiers beginning with <code>r</code>. The most basic regular expression literal without any options turned on just uses <code>r\"...\"</code>:</p> <pre data-language=\"julia\">julia&gt; r\"^\\s*(?:#|$)\"\nr\"^\\s*(?:#|$)\"\n\njulia&gt; typeof(ans)\nRegex\n</pre> <p>To check if a regex matches a string, use <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.ismatch\" title=\"Base.ismatch\"><code>ismatch()</code></a>:</p> <pre data-language=\"julia\">julia&gt; ismatch(r\"^\\s*(?:#|$)\", \"not a comment\")\nfalse\n\njulia&gt; ismatch(r\"^\\s*(?:#|$)\", \"# a comment\")\ntrue\n</pre> <p>As one can see here, <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.ismatch\" title=\"Base.ismatch\"><code>ismatch()</code></a> simply returns true or false, indicating whether the given regex matches the string or not. Commonly, however, one wants to know not just whether a string matched, but also <em>how</em> it matched. To capture this information about a match, use the <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.match\" title=\"Base.match\"><code>match()</code></a> function instead:</p> <pre data-language=\"julia\">julia&gt; match(r\"^\\s*(?:#|$)\", \"not a comment\")\n\njulia&gt; match(r\"^\\s*(?:#|$)\", \"# a comment\")\nRegexMatch(\"#\")\n</pre> <p>If the regular expression does not match the given string, <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.match\" title=\"Base.match\"><code>match()</code></a> returns <code>nothing</code> — a special value that does not print anything at the interactive prompt. Other than not printing, it is a completely normal value and you can test for it programmatically:</p> <pre data-language=\"julia\">m = match(r\"^\\s*(?:#|$)\", line)\nif m == nothing\n  println(\"not a comment\")\nelse\n  println(\"blank or comment\")\nend\n</pre> <p>If a regular expression does match, the value returned by <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.match\" title=\"Base.match\"><code>match()</code></a> is a <code>RegexMatch</code> object. These objects record how the expression matches, including the substring that the pattern matches and any captured substrings, if there are any. This example only captures the portion of the substring that matches, but perhaps we want to capture any non-blank text after the comment character. We could do the following:</p> <pre data-language=\"julia\">julia&gt; m = match(r\"^\\s*(?:#\\s*(.*?)\\s*$|$)\", \"# a comment \")\nRegexMatch(\"# a comment \", 1=\"a comment\")\n</pre> <p>When calling <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.match\" title=\"Base.match\"><code>match()</code></a>, you have the option to specify an index at which to start the search. For example:</p> <pre data-language=\"julia\">julia&gt; m = match(r\"[0-9]\",\"aaaa1aaaa2aaaa3\",1)\nRegexMatch(\"1\")\n\njulia&gt; m = match(r\"[0-9]\",\"aaaa1aaaa2aaaa3\",6)\nRegexMatch(\"2\")\n\njulia&gt; m = match(r\"[0-9]\",\"aaaa1aaaa2aaaa3\",11)\nRegexMatch(\"3\")\n</pre> <p>You can extract the following info from a <code>RegexMatch</code> object:</p> <ul class=\"simple\"> <li>the entire substring matched: <code>m.match</code>\n</li> <li>the captured substrings as an array of strings: <code>m.captures</code>\n</li> <li>the offset at which the whole match begins: <code>m.offset</code>\n</li> <li>the offsets of the captured substrings as a vector: <code>m.offsets</code>\n</li> </ul> <p>For when a capture doesn’t match, instead of a substring, <code>m.captures</code> contains <code>nothing</code> in that position, and <code>m.offsets</code> has a zero offset (recall that indices in Julia are 1-based, so a zero offset into a string is invalid). Here is a pair of somewhat contrived examples:</p> <pre data-language=\"julia\">julia&gt; m = match(r\"(a|b)(c)?(d)\", \"acd\")\nRegexMatch(\"acd\", 1=\"a\", 2=\"c\", 3=\"d\")\n\njulia&gt; m.match\n\"acd\"\n\njulia&gt; m.captures\n3-element Array{Union{SubString{UTF8String},Void},1}:\n \"a\"\n \"c\"\n \"d\"\n\njulia&gt; m.offset\n1\n\njulia&gt; m.offsets\n3-element Array{Int64,1}:\n 1\n 2\n 3\n\njulia&gt; m = match(r\"(a|b)(c)?(d)\", \"ad\")\nRegexMatch(\"ad\", 1=\"a\", 2=nothing, 3=\"d\")\n\njulia&gt; m.match\n\"ad\"\n\njulia&gt; m.captures\n3-element Array{Union{SubString{UTF8String},Void},1}:\n \"a\"\n nothing\n \"d\"\n\njulia&gt; m.offset\n1\n\njulia&gt; m.offsets\n3-element Array{Int64,1}:\n 1\n 0\n 2\n</pre> <p>It is convenient to have captures returned as an array so that one can use destructuring syntax to bind them to local variables:</p> <pre data-language=\"julia\">julia&gt; first, second, third = m.captures; first\n\"a\"\n</pre> <p>Captures can also be accessed by indexing the <code>RegexMatch</code> object with the number or name of the capture group:</p> <pre data-language=\"julia\">julia&gt; m=match(r\"(?P&lt;hour&gt;\\d+):(?P&lt;minute&gt;\\d+)\",\"12:45\")\nRegexMatch(\"12:45\", hour=\"12\", minute=\"45\")\njulia&gt; m[:minute]\n\"45\"\njulia&gt; m[2]\n\"45\"\n</pre> <p>Captures can be referenced in a substitution string when using <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.replace\" title=\"Base.replace\"><code>replace()</code></a> by using <code>\\n</code> to refer to the nth capture group and prefixing the subsitution string with <code>s</code>. Capture group 0 refers to the entire match object. Named capture groups can be referenced in the substitution with <code>g&lt;groupname&gt;</code>. For example:</p> <pre data-language=\"julia\">julia&gt; replace(\"first second\", r\"(\\w+) (?P&lt;agroup&gt;\\w+)\", s\"\\g&lt;agroup&gt; \\1\")\njulia&gt; \"second first\"\n</pre> <p>Numbered capture groups can also be referenced as <code>\\g&lt;n&gt;</code> for disambiguation, as in:</p> <pre data-language=\"julia\">julia&gt; replace(\"a\", r\".\", s\"\\g&lt;0&gt;1\")\njulia&gt; a1\n</pre> <p>You can modify the behavior of regular expressions by some combination of the flags <code>i</code>, <code>m</code>, <code>s</code>, and <code>x</code> after the closing double quote mark. These flags have the same meaning as they do in Perl, as explained in this excerpt from the <a class=\"reference external\" href=\"http://perldoc.perl.org/perlre.html#Modifiers\">perlre manpage</a>:</p> <pre data-language=\"julia\">i   Do case-insensitive pattern matching.\n\n    If locale matching rules are in effect, the case map is taken\n    from the current locale for code points less than 255, and\n    from Unicode rules for larger code points. However, matches\n    that would cross the Unicode rules/non-Unicode rules boundary\n    (ords 255/256) will not succeed.\n\nm   Treat string as multiple lines.  That is, change \"^\" and \"$\"\n    from matching the start or end of the string to matching the\n    start or end of any line anywhere within the string.\n\ns   Treat string as single line.  That is, change \".\" to match any\n    character whatsoever, even a newline, which normally it would\n    not match.\n\n    Used together, as r\"\"ms, they let the \".\" match any character\n    whatsoever, while still allowing \"^\" and \"$\" to match,\n    respectively, just after and just before newlines within the\n    string.\n\nx   Tells the regular expression parser to ignore most whitespace\n    that is neither backslashed nor within a character class. You\n    can use this to break up your regular expression into\n    (slightly) more readable parts. The '#' character is also\n    treated as a metacharacter introducing a comment, just as in\n    ordinary code.\n</pre> <p>For example, the following regex has all three flags turned on:</p> <pre data-language=\"julia\">julia&gt; r\"a+.*b+.*?d$\"ism\nr\"a+.*b+.*?d$\"ims\n\njulia&gt; match(r\"a+.*b+.*?d$\"ism, \"Goodbye,\\nOh, angry,\\nBad world\\n\")\nRegexMatch(\"angry,\\nBad world\")\n</pre> <p>Triple-quoted regex strings, of the form <code>r\"\"\"...\"\"\"</code>, are also supported (and may be convenient for regular expressions containing quotation marks or newlines).</p>   <h2 id=\"id3\">Byte Array Literals</h2> <p>Another useful non-standard string literal is the byte-array string literal: <code>b\"...\"</code>. This form lets you use string notation to express literal byte arrays — i.e. arrays of <code>UInt8</code> values. The convention is that non-standard literals with uppercase prefixes produce actual string objects, while those with lowercase prefixes produce non-string objects like byte arrays or compiled regular expressions. The rules for byte array literals are the following:</p> <ul class=\"simple\"> <li>ASCII characters and ASCII escapes produce a single byte.</li> <li>\n<code>\\x</code> and octal escape sequences produce the <em>byte</em> corresponding to the escape value.</li> <li>Unicode escape sequences produce a sequence of bytes encoding that code point in UTF-8.</li> </ul> <p>There is some overlap between these rules since the behavior of <code>\\x</code> and octal escapes less than 0x80 (128) are covered by both of the first two rules, but here these rules agree. Together, these rules allow one to easily use ASCII characters, arbitrary byte values, and UTF-8 sequences to produce arrays of bytes. Here is an example using all three:</p> <pre data-language=\"julia\">julia&gt; b\"DATA\\xff\\u2200\"\n8-element Array{UInt8,1}:\n 0x44\n 0x41\n 0x54\n 0x41\n 0xff\n 0xe2\n 0x88\n 0x80\n</pre> <p>The ASCII string “DATA” corresponds to the bytes 68, 65, 84, 65. <code>\\xff</code> produces the single byte 255. The Unicode escape <code>\\u2200</code> is encoded in UTF-8 as the three bytes 226, 136, 128. Note that the resulting byte array does not correspond to a valid UTF-8 string — if you try to use this as a regular string literal, you will get a syntax error:</p> <pre data-language=\"julia\">julia&gt; \"DATA\\xff\\u2200\"\nERROR: syntax: invalid UTF-8 sequence\n</pre> <p>Also observe the significant distinction between <code>\\xff</code> and <code>\\uff</code>: the former escape sequence encodes the <em>byte 255</em>, whereas the latter escape sequence represents the <em>code point 255</em>, which is encoded as two bytes in UTF-8:</p> <pre data-language=\"julia\">julia&gt; b\"\\xff\"\n1-element Array{UInt8,1}:\n 0xff\n\njulia&gt; b\"\\uff\"\n2-element Array{UInt8,1}:\n 0xc3\n 0xbf\n</pre> <p>In character literals, this distinction is glossed over and <code>\\xff</code> is allowed to represent the code point 255, because characters <em>always</em> represent code points. In strings, however, <code>\\x</code> escapes always represent bytes, not code points, whereas <code>\\u</code> and <code>\\U</code> escapes always represent code points, which are encoded in one or more bytes. For code points less than <code>\\u80</code>, it happens that the UTF-8 encoding of each code point is just the single byte produced by the corresponding <code>\\x</code> escape, so the distinction can safely be ignored. For the escapes <code>\\x80</code> through <code>\\xff</code> as compared to <code>\\u80</code> through <code>\\uff</code>, however, there is a major difference: the former escapes all encode single bytes, which — unless followed by very specific continuation bytes — do not form valid UTF-8 data, whereas the latter escapes all represent Unicode code points with two-byte encodings.</p> <p>If this is all extremely confusing, try reading <a class=\"reference external\" href=\"http://www.joelonsoftware.com/articles/Unicode.html\">“The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets”</a>. It’s an excellent introduction to Unicode and UTF-8, and may help alleviate some confusion regarding the matter.</p>   <h2 id=\"man-version-number-literals\">Version Number Literals</h2> <p id=\"version-number-literals\">Version numbers can easily be expressed with non-standard string literals of the form <code>v\"...\"</code>. Version number literals create <code>VersionNumber</code> objects which follow the specifications of <a class=\"reference external\" href=\"http://semver.org\">semantic versioning</a>, and therefore are composed of major, minor and patch numeric values, followed by pre-release and build alpha-numeric annotations. For example, <code>v\"0.2.1-rc1+win64\"</code> is broken into major version <code>0</code>, minor version <code>2</code>, patch version <code>1</code>, pre-release <code>rc1</code> and build <code>win64</code>. When entering a version literal, everything except the major version number is optional, therefore e.g. <code>v\"0.2\"</code> is equivalent to <code>v\"0.2.0\"</code> (with empty pre-release/build annotations), <code>v\"2\"</code> is equivalent to <code>v\"2.0.0\"</code>, and so on.</p> <p><code>VersionNumber</code> objects are mostly useful to easily and correctly compare two (or more) versions. For example, the constant <code>VERSION</code> holds Julia version number as a <code>VersionNumber</code> object, and therefore one can define some version-specific behavior using simple statements as:</p> <pre data-language=\"julia\">if v\"0.2\" &lt;= VERSION &lt; v\"0.3-\"\n    # do something specific to 0.2 release series\nend\n</pre> <p>Note that in the above example the non-standard version number <code>v\"0.3-\"</code> is used, with a trailing <code>-</code>: this notation is a Julia extension of the standard, and it’s used to indicate a version which is lower than any <code>0.3</code> release, including all of its pre-releases. So in the above example the code would only run with stable <code>0.2</code> versions, and exclude such versions as <code>v\"0.3.0-rc1\"</code>. In order to also allow for unstable (i.e. pre-release) <code>0.2</code> versions, the lower bound check should be modified like this: <code>v\"0.2-\"\n&lt;= VERSION</code>.</p> <p>Another non-standard version specification extension allows one to use a trailing <code>+</code> to express an upper limit on build versions, e.g. <code>VERSION &gt;\n\"v\"0.2-rc1+\"</code> can be used to mean any version above <code>0.2-rc1</code> and any of its builds: it will return <code>false</code> for version <code>v\"0.2-rc1+win64\"</code> and <code>true</code> for <code>v\"0.2-rc2\"</code>.</p> <p>It is good practice to use such special versions in comparisons (particularly, the trailing <code>-</code> should always be used on upper bounds unless there’s a good reason not to), but they must not be used as the actual version number of anything, as they are invalid in the semantic versioning scheme.</p> <p>Besides being used for the <a class=\"reference internal\" href=\"../../stdlib/constants/index#Base.VERSION\" title=\"Base.VERSION\"><code>VERSION</code></a> constant, <code>VersionNumber</code> objects are widely used in the <a class=\"reference internal\" href=\"../../stdlib/pkg/index#module-Base.Pkg\" title=\"Base.Pkg\"><code>Pkg</code></a> module, to specify packages versions and their dependencies.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/strings/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/strings/</a>\n  </p>\n</div>\n","manual/constructors/index":"<h1 id=\"man-constructors\">Constructors</h1> <p>Constructors <a class=\"footnote-reference\" href=\"#id2\" id=\"id1\">[1]</a> are functions that create new objects — specifically, instances of <a class=\"reference internal\" href=\"../types/index#man-composite-types\"><span>Composite Types</span></a>. In Julia, type objects also serve as constructor functions: they create new instances of themselves when applied to an argument tuple as a function. This much was already mentioned briefly when composite types were introduced. For example:</p> <pre data-language=\"julia\">type Foo\n  bar\n  baz\nend\n\njulia&gt; foo = Foo(1,2)\nFoo(1,2)\n\njulia&gt; foo.bar\n1\n\njulia&gt; foo.baz\n2\n</pre> <p>For many types, forming new objects by binding their field values together is all that is ever needed to create instances. There are, however, cases where more functionality is required when creating composite objects. Sometimes invariants must be enforced, either by checking arguments or by transforming them. <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Recursion_%28computer_science%29#Recursive_data_structures_.28structural_recursion.29\">Recursive data structures</a>, especially those that may be self-referential, often cannot be constructed cleanly without first being created in an incomplete state and then altered programmatically to be made whole, as a separate step from object creation. Sometimes, it’s just convenient to be able to construct objects with fewer or different types of parameters than they have fields. Julia’s system for object construction addresses all of these cases and more.</p> <table class=\"docutils footnote\" frame=\"void\" id=\"id2\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[1]</a></td>\n<td>Nomenclature: while the term “constructor” generally refers to the entire function which constructs objects of a type, it is common to abuse terminology slightly and refer to specific constructor methods as “constructors”. In such situations, it is generally clear from context that the term is used to mean “constructor method” rather than “constructor function”, especially as it is often used in the sense of singling out a particular method of the constructor from all of the others.</td>\n</tr>  </table>  <h2 id=\"outer-constructor-methods\">Outer Constructor Methods</h2> <p>A constructor is just like any other function in Julia in that its overall behavior is defined by the combined behavior of its methods. Accordingly, you can add functionality to a constructor by simply defining new methods. For example, let’s say you want to add a constructor method for <code>Foo</code> objects that takes only one argument and uses the given value for both the <code>bar</code> and <code>baz</code> fields. This is simple:</p> <pre data-language=\"julia\">Foo(x) = Foo(x,x)\n\njulia&gt; Foo(1)\nFoo(1,1)\n</pre> <p>You could also add a zero-argument <code>Foo</code> constructor method that supplies default values for both of the <code>bar</code> and <code>baz</code> fields:</p> <pre data-language=\"julia\">Foo() = Foo(0)\n\njulia&gt; Foo()\nFoo(0,0)\n</pre> <p>Here the zero-argument constructor method calls the single-argument constructor method, which in turn calls the automatically provided two-argument constructor method. For reasons that will become clear very shortly, additional constructor methods declared as normal methods like this are called <em>outer</em> constructor methods. Outer constructor methods can only ever create a new instance by calling another constructor method, such as the automatically provided default ones.</p>   <h2 id=\"inner-constructor-methods\">Inner Constructor Methods</h2> <p>While outer constructor methods succeed in addressing the problem of providing additional convenience methods for constructing objects, they fail to address the other two use cases mentioned in the introduction of this chapter: enforcing invariants, and allowing construction of self-referential objects. For these problems, one needs <em>inner</em> constructor methods. An inner constructor method is much like an outer constructor method, with two differences:</p> <ol class=\"arabic simple\"> <li>It is declared inside the block of a type declaration, rather than outside of it like normal methods.</li> <li>It has access to a special locally existent function called <code>new</code> that creates objects of the block’s type.</li> </ol> <p>For example, suppose one wants to declare a type that holds a pair of real numbers, subject to the constraint that the first number is not greater than the second one. One could declare it like this:</p> <pre data-language=\"julia\">type OrderedPair\n  x::Real\n  y::Real\n\n  OrderedPair(x,y) = x &gt; y ? error(\"out of order\") : new(x,y)\nend\n</pre> <p>Now <code>OrderedPair</code> objects can only be constructed such that <code>x &lt;= y</code>:</p> <pre data-language=\"julia\">julia&gt; OrderedPair(1,2)\nOrderedPair(1,2)\n\njulia&gt; OrderedPair(2,1)\nERROR: out of order\n in call at none:5\n</pre> <p>You can still reach in and directly change the field values to violate this invariant, but messing around with an object’s internals uninvited is considered poor form. You (or someone else) can also provide additional outer constructor methods at any later point, but once a type is declared, there is no way to add more inner constructor methods. Since outer constructor methods can only create objects by calling other constructor methods, ultimately, some inner constructor must be called to create an object. This guarantees that all objects of the declared type must come into existence by a call to one of the inner constructor methods provided with the type, thereby giving some degree of enforcement of a type’s invariants.</p> <p>Of course, if the type is declared as <code>immutable</code>, then its constructor-provided invariants are fully enforced. This is an important consideration when deciding whether a type should be immutable.</p> <p>If any inner constructor method is defined, no default constructor method is provided: it is presumed that you have supplied yourself with all the inner constructors you need. The default constructor is equivalent to writing your own inner constructor method that takes all of the object’s fields as parameters (constrained to be of the correct type, if the corresponding field has a type), and passes them to <code>new</code>, returning the resulting object:</p> <pre data-language=\"julia\">type Foo\n  bar\n  baz\n\n  Foo(bar,baz) = new(bar,baz)\nend\n</pre> <p>This declaration has the same effect as the earlier definition of the <code>Foo</code> type without an explicit inner constructor method. The following two types are equivalent — one with a default constructor, the other with an explicit constructor:</p> <pre data-language=\"julia\">type T1\n  x::Int64\nend\n\ntype T2\n  x::Int64\n  T2(x) = new(x)\nend\n\njulia&gt; T1(1)\nT1(1)\n\njulia&gt; T2(1)\nT2(1)\n\njulia&gt; T1(1.0)\nT1(1)\n\njulia&gt; T2(1.0)\nT2(1)\n</pre> <p>It is considered good form to provide as few inner constructor methods as possible: only those taking all arguments explicitly and enforcing essential error checking and transformation. Additional convenience constructor methods, supplying default values or auxiliary transformations, should be provided as outer constructors that call the inner constructors to do the heavy lifting. This separation is typically quite natural.</p>   <h2 id=\"incomplete-initialization\">Incomplete Initialization</h2> <p>The final problem which has still not been addressed is construction of self-referential objects, or more generally, recursive data structures. Since the fundamental difficulty may not be immediately obvious, let us briefly explain it. Consider the following recursive type declaration:</p> <pre data-language=\"julia\">type SelfReferential\n  obj::SelfReferential\nend\n</pre> <p>This type may appear innocuous enough, until one considers how to construct an instance of it. If <code>a</code> is an instance of <code>SelfReferential</code>, then a second instance can be created by the call:</p> <pre data-language=\"julia\">b = SelfReferential(a)\n</pre> <p>But how does one construct the first instance when no instance exists to provide as a valid value for its <code>obj</code> field? The only solution is to allow creating an incompletely initialized instance of <code>SelfReferential</code> with an unassigned <code>obj</code> field, and using that incomplete instance as a valid value for the <code>obj</code> field of another instance, such as, for example, itself.</p> <p>To allow for the creation of incompletely initialized objects, Julia allows the <code>new</code> function to be called with fewer than the number of fields that the type has, returning an object with the unspecified fields uninitialized. The inner constructor method can then use the incomplete object, finishing its initialization before returning it. Here, for example, we take another crack at defining the <code>SelfReferential</code> type, with a zero-argument inner constructor returning instances having <code>obj</code> fields pointing to themselves:</p> <pre data-language=\"julia\">type SelfReferential\n  obj::SelfReferential\n\n  SelfReferential() = (x = new(); x.obj = x)\nend\n</pre> <p>We can verify that this constructor works and constructs objects that are, in fact, self-referential:</p> <pre data-language=\"julia\">julia&gt; x = SelfReferential();\n\njulia&gt; is(x, x)\ntrue\n\njulia&gt; is(x, x.obj)\ntrue\n\njulia&gt; is(x, x.obj.obj)\ntrue\n</pre> <p>Although it is generally a good idea to return a fully initialized object from an inner constructor, incompletely initialized objects can be returned:</p> <pre data-language=\"julia\">julia&gt; type Incomplete\n         xx\n         Incomplete() = new()\n       end\n\njulia&gt; z = Incomplete();\n</pre> <p>While you are allowed to create objects with uninitialized fields, any access to an uninitialized reference is an immediate error:</p> <pre data-language=\"julia\">julia&gt; z.xx\nERROR: UndefRefError: access to undefined reference\n</pre> <p>This avoids the need to continually check for <code>null</code> values. However, not all object fields are references. Julia considers some types to be “plain data”, meaning all of their data is self-contained and does not reference other objects. The plain data types consist of bits types (e.g. <code>Int</code>) and immutable structs of other plain data types. The initial contents of a plain data type is undefined:</p> <pre data-language=\"julia\">julia&gt; type HasPlain\n         n::Int\n         HasPlain() = new()\n       end\n\njulia&gt; HasPlain()\nHasPlain(438103441441)\n</pre> <p>Arrays of plain data types exhibit the same behavior.</p> <p>You can pass incomplete objects to other functions from inner constructors to delegate their completion:</p> <pre data-language=\"julia\">type Lazy\n  xx\n\n  Lazy(v) = complete_me(new(), v)\nend\n</pre> <p>As with incomplete objects returned from constructors, if <code>complete_me</code> or any of its callees try to access the <code>xx</code> field of the <code>Lazy</code> object before it has been initialized, an error will be thrown immediately.</p>   <h2 id=\"parametric-constructors\">Parametric Constructors</h2> <p>Parametric types add a few wrinkles to the constructor story. Recall from <a class=\"reference internal\" href=\"../types/index#man-parametric-types\"><span>Parametric Types</span></a> that, by default, instances of parametric composite types can be constructed either with explicitly given type parameters or with type parameters implied by the types of the arguments given to the constructor. Here are some examples:</p> <pre data-language=\"julia\">julia&gt; type Point{T&lt;:Real}\n         x::T\n         y::T\n       end\n\n## implicit T ##\n\njulia&gt; Point(1,2)\nPoint{Int64}(1,2)\n\njulia&gt; Point(1.0,2.5)\nPoint{Float64}(1.0,2.5)\n\njulia&gt; Point(1,2.5)\nERROR: MethodError: `convert` has no method matching convert(::Type{Point{T&lt;:Real}}, ::Int64, ::Float64)\nThis may have arisen from a call to the constructor Point{T&lt;:Real}(...),\nsince type constructors fall back to convert methods.\nClosest candidates are:\n  Point{T&lt;:Real}(::T&lt;:Real, !Matched::T&lt;:Real)\n  call{T}(::Type{T}, ::Any)\n  convert{T}(::Type{T}, !Matched::T)\n in call at essentials.jl:57\n\n## explicit T ##\n\njulia&gt; Point{Int64}(1,2)\nPoint{Int64}(1,2)\n\njulia&gt; Point{Int64}(1.0,2.5)\nERROR: InexactError()\n in call at none:2\n\njulia&gt; Point{Float64}(1.0,2.5)\nPoint{Float64}(1.0,2.5)\n\njulia&gt; Point{Float64}(1,2)\nPoint{Float64}(1.0,2.0)\n</pre> <p>As you can see, for constructor calls with explicit type parameters, the arguments are converted to the implied field types: <code>Point{Int64}(1,2)</code> works, but <code>Point{Int64}(1.0,2.5)</code> raises an <code>InexactError</code> when converting <code>2.5</code> to <code>Int64</code>. When the type is implied by the arguments to the constructor call, as in <code>Point(1,2)</code>, then the types of the arguments must agree — otherwise the <code>T</code> cannot be determined — but any pair of real arguments with matching type may be given to the generic <code>Point</code> constructor.</p> <p>What’s really going on here is that <code>Point</code>, <code>Point{Float64}</code> and <code>Point{Int64}</code> are all different constructor functions. In fact, <code>Point{T}</code> is a distinct constructor function for each type <code>T</code>. Without any explicitly provided inner constructors, the declaration of the composite type <code>Point{T&lt;:Real}</code> automatically provides an inner constructor, <code>Point{T}</code>, for each possible type <code>T&lt;:Real</code>, that behaves just like non-parametric default inner constructors do. It also provides a single general outer <code>Point</code> constructor that takes pairs of real arguments, which must be of the same type. This automatic provision of constructors is equivalent to the following explicit declaration:</p> <pre data-language=\"julia\">type Point{T&lt;:Real}\n  x::T\n  y::T\n\n  Point(x,y) = new(x,y)\nend\n\nPoint{T&lt;:Real}(x::T, y::T) = Point{T}(x,y)\n</pre> <p>Some features of parametric constructor definitions at work here deserve comment. First, inner constructor declarations always define methods of <code>Point{T}</code> rather than methods of the general <code>Point</code> constructor function. Since <code>Point</code> is not a concrete type, it makes no sense for it to even have inner constructor methods at all. Thus, the inner method declaration <code>Point(x,y) = new(x,y)</code> provides an inner constructor method for each value of <code>T</code>. It is this method declaration that defines the behavior of constructor calls with explicit type parameters like <code>Point{Int64}(1,2)</code> and <code>Point{Float64}(1.0,2.0)</code>. The outer constructor declaration, on the other hand, defines a method for the general <code>Point</code> constructor which only applies to pairs of values of the same real type. This declaration makes constructor calls without explicit type parameters, like <code>Point(1,2)</code> and <code>Point(1.0,2.5)</code>, work. Since the method declaration restricts the arguments to being of the same type, calls like <code>Point(1,2.5)</code>, with arguments of different types, result in “no method” errors.</p> <p>Suppose we wanted to make the constructor call <code>Point(1,2.5)</code> work by “promoting” the integer value <code>1</code> to the floating-point value <code>1.0</code>. The simplest way to achieve this is to define the following additional outer constructor method:</p> <pre data-language=\"julia\">julia&gt; Point(x::Int64, y::Float64) = Point(convert(Float64,x),y);\n</pre> <p>This method uses the <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.convert\" title=\"Base.convert\"><code>convert()</code></a> function to explicitly convert <code>x</code> to <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a> and then delegates construction to the general constructor for the case where both arguments are <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a>. With this method definition what was previously a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.MethodError\" title=\"Base.MethodError\"><code>MethodError</code></a> now successfully creates a point of type <code>Point{Float64}</code>:</p> <pre data-language=\"julia\">julia&gt; Point(1,2.5)\nPoint{Float64}(1.0,2.5)\n\njulia&gt; typeof(ans)\nPoint{Float64}\n</pre> <p>However, other similar calls still don’t work:</p> <pre data-language=\"julia\">julia&gt; Point(1.5,2)\nERROR: MethodError: `convert` has no method matching convert(::Type{Point{T&lt;:Real}}, ::Float64, ::Int64)\nThis may have arisen from a call to the constructor Point{T&lt;:Real}(...),\nsince type constructors fall back to convert methods.\nClosest candidates are:\n  Point{T&lt;:Real}(::T&lt;:Real, !Matched::T&lt;:Real)\n  call{T}(::Type{T}, ::Any)\n  convert{T}(::Type{T}, !Matched::T)\n  ...\n in call at essentials.jl:57\n</pre> <p>For a much more general way of making all such calls work sensibly, see <a class=\"reference internal\" href=\"../conversion-and-promotion/index#man-conversion-and-promotion\"><span>Conversion and Promotion</span></a>. At the risk of spoiling the suspense, we can reveal here that all it takes is the following outer method definition to make all calls to the general <code>Point</code> constructor work as one would expect:</p> <pre data-language=\"julia\">julia&gt; Point(x::Real, y::Real) = Point(promote(x,y)...);\n</pre> <p>The <code>promote</code> function converts all its arguments to a common type — in this case <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a>. With this method definition, the <code>Point</code> constructor promotes its arguments the same way that numeric operators like <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.+\" title=\"Base.+\"><code>+</code></a> do, and works for all kinds of real numbers:</p> <pre data-language=\"julia\">julia&gt; Point(1.5,2)\nPoint{Float64}(1.5,2.0)\n\njulia&gt; Point(1,1//2)\nPoint{Rational{Int64}}(1//1,1//2)\n\njulia&gt; Point(1.0,1//2)\nPoint{Float64}(1.0,0.5)\n</pre> <p>Thus, while the implicit type parameter constructors provided by default in Julia are fairly strict, it is possible to make them behave in a more relaxed but sensible manner quite easily. Moreover, since constructors can leverage all of the power of the type system, methods, and multiple dispatch, defining sophisticated behavior is typically quite simple.</p>   <h2 id=\"case-study-rational\">Case Study: Rational</h2> <p>Perhaps the best way to tie all these pieces together is to present a real world example of a parametric composite type and its constructor methods. To that end, here is beginning of <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/base/rational.jl\">rational.jl</a>, which implements Julia’s <a class=\"reference internal\" href=\"../complex-and-rational-numbers/index#man-rational-numbers\"><span>Rational Numbers</span></a>:</p> <pre data-language=\"julia\">immutable Rational{T&lt;:Integer} &lt;: Real\n    num::T\n    den::T\n\n    function Rational(num::T, den::T)\n        if num == 0 &amp;&amp; den == 0\n            error(\"invalid rational: 0//0\")\n        end\n        g = gcd(den, num)\n        num = div(num, g)\n        den = div(den, g)\n        new(num, den)\n    end\nend\nRational{T&lt;:Integer}(n::T, d::T) = Rational{T}(n,d)\nRational(n::Integer, d::Integer) = Rational(promote(n,d)...)\nRational(n::Integer) = Rational(n,one(n))\n\n//(n::Integer, d::Integer) = Rational(n,d)\n//(x::Rational, y::Integer) = x.num // (x.den*y)\n//(x::Integer, y::Rational) = (x*y.den) // y.num\n//(x::Complex, y::Real) = complex(real(x)//y, imag(x)//y)\n//(x::Real, y::Complex) = x*y'//real(y*y')\n\nfunction //(x::Complex, y::Complex)\n    xy = x*y'\n    yy = real(y*y')\n    complex(real(xy)//yy, imag(xy)//yy)\nend\n</pre> <p>The first line — <code>immutable Rational{T&lt;:Int} &lt;: Real</code> — declares that <code>Rational</code> takes one type parameter of an integer type, and is itself a real type. The field declarations <code>num::T</code> and <code>den::T</code> indicate that the data held in a <code>Rational{T}</code> object are a pair of integers of type <code>T</code>, one representing the rational value’s numerator and the other representing its denominator.</p> <p>Now things get interesting. <code>Rational</code> has a single inner constructor method which checks that both of <code>num</code> and <code>den</code> aren’t zero and ensures that every rational is constructed in “lowest terms” with a non-negative denominator. This is accomplished by dividing the given numerator and denominator values by their greatest common divisor, computed using the <code>gcd</code> function. Since <code>gcd</code> returns the greatest common divisor of its arguments with sign matching the first argument (<code>den</code> here), after this division the new value of <code>den</code> is guaranteed to be non-negative. Because this is the only inner constructor for <code>Rational</code>, we can be certain that <code>Rational</code> objects are always constructed in this normalized form.</p> <p><code>Rational</code> also provides several outer constructor methods for convenience. The first is the “standard” general constructor that infers the type parameter <code>T</code> from the type of the numerator and denominator when they have the same type. The second applies when the given numerator and denominator values have different types: it promotes them to a common type and then delegates construction to the outer constructor for arguments of matching type. The third outer constructor turns integer values into rationals by supplying a value of <code>1</code> as the denominator.</p> <p>Following the outer constructor definitions, we have a number of methods for the <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.//\" title=\"Base.//\"><code>//</code></a> operator, which provides a syntax for writing rationals. Before these definitions, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.//\" title=\"Base.//\"><code>//</code></a> is a completely undefined operator with only syntax and no meaning. Afterwards, it behaves just as described in <a class=\"reference internal\" href=\"../complex-and-rational-numbers/index#man-rational-numbers\"><span>Rational Numbers</span></a> — its entire behavior is defined in these few lines. The first and most basic definition just makes <code>a//b</code> construct a <code>Rational</code> by applying the <code>Rational</code> constructor to <code>a</code> and <code>b</code> when they are integers. When one of the operands of <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.//\" title=\"Base.//\"><code>//</code></a> is already a rational number, we construct a new rational for the resulting ratio slightly differently; this behavior is actually identical to division of a rational with an integer. Finally, applying <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.//\" title=\"Base.//\"><code>//</code></a> to complex integral values creates an instance of <code>Complex{Rational}</code> — a complex number whose real and imaginary parts are rationals:</p> <pre data-language=\"julia\">julia&gt; (1 + 2im)//(1 - 2im)\n-3//5 + 4//5*im\n\njulia&gt; typeof(ans)\nComplex{Rational{Int64}}\n\njulia&gt; ans &lt;: Complex{Rational}\nfalse\n</pre> <p>Thus, although the <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.//\" title=\"Base.//\"><code>//</code></a> operator usually returns an instance of <code>Rational</code>, if either of its arguments are complex integers, it will return an instance of <code>Complex{Rational}</code> instead. The interested reader should consider perusing the rest of <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/base/rational.jl\">rational.jl</a>: it is short, self-contained, and implements an entire basic Julia type.</p>   <h2 id=\"id4\">Constructors, Call, and Conversion</h2> <p id=\"constructors-call-and-conversion\">Technically, constructors <code>T(args...)</code> in Julia are implemented by defining new methods <code>Base.call(::Type{T}, args...)</code> for the <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.call\" title=\"Base.call\"><code>call()</code></a> function. That is, Julia types are not functions, but they can be called as if they were functions (functors) via call overloading, just like any other Julia object. This also means that you can declare more flexible constructors, e.g. constructors for abstract types, by instead explicitly defining <code>Base.call</code> methods using <code>function</code> syntax.</p> <p>However, in some cases you could consider adding methods to <code>Base.convert</code> <em>instead</em> of defining a constructor, because defining a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.convert\" title=\"Base.convert\"><code>convert()</code></a> method <em>automatically</em> defines a corresponding constructor, while the reverse is not true. That is, defining <code>Base.convert(::Type{T}, args...) = ...</code> automatically defines a constructor <code>T(args...) = ...</code>.</p> <p><code>convert</code> is used extensively throughout Julia whenever one type needs to be converted to another (e.g. in assignment, <code>ccall</code>, etcetera), and should generally only be defined (or successful) if the conversion is lossless. For example, <code>convert(Int, 3.0)</code> produces <code>3</code>, but <code>convert(Int, 3.2)</code> throws an <code>InexactError</code>. If you want to define a constructor for a lossless conversion from one type to another, you should probably define a <code>convert</code> method instead.</p> <p>On the other hand, if your constructor does not represent a lossless conversion, or doesn’t represent “conversion” at all, it is better to leave it as a constructor rather than a <code>convert</code> method. For example, the <code>Array(Int)</code> constructor creates a zero-dimensional <code>Array</code> of the type <code>Int</code>, but is not really a “conversion” from <code>Int</code> to an <code>Array</code>.</p>   <h2 id=\"outer-only-constructors\">Outer-only constructors</h2> <p>As we have seen, a typical parametric type has inner constructors that are called when type parameters are known; e.g. they apply to <code>Point{Int}</code> but not to <code>Point</code>. Optionally, outer constructors that determine type parameters automatically can be added, for example constructing a <code>Point{Int}</code> from the call <code>Point(1,2)</code>. Outer constructors call inner constructors to do the core work of making an instance. However, in some cases one would rather not provide inner constructors, so that specific type parameters cannot be requested manually.</p> <p>For example, say we define a type that stores a vector along with an accurate representation of its sum:</p> <pre data-language=\"julia\">type SummedArray{T&lt;:Number,S&lt;:Number}\n    data::Vector{T}\n    sum::S\nend\n</pre> <p>The problem is that we want <code>S</code> to be a larger type than <code>T</code>, so that we can sum many elements with less information loss. For example, when <code>T</code> is <code>Int32</code>, we would like <code>S</code> to be <code>Int64</code>. Therefore we want to avoid an interface that allows the user to construct instances of the type <code>SummedArray{Int32,Int32}</code>. One way to do this is to provide only an outer constructor for <code>SummedArray</code>. This can be done using explicit <code>call</code> overloading:</p> <pre data-language=\"julia\">type SummedArray{T&lt;:Number,S&lt;:Number}\n    data::Vector{T}\n    sum::S\n\n    function call{T}(::Type{SummedArray}, a::Vector{T})\n        S = widen(T)\n        new{T,S}(a, sum(S, a))\n    end\nend\n</pre> <p>This constructor will be invoked by the syntax <code>SummedArray(a)</code>. The syntax <code>new{T,S}</code> allows specifying parameters for the type to be constructed, i.e. this call will return a <code>SummedArray{T,S}</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/constructors/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/constructors/</a>\n  </p>\n</div>\n","manual/networking-and-streams/index":"<h1 id=\"man-networking-and-streams\">Networking and Streams</h1> <p>Julia provides a rich interface to deal with streaming I/O objects such as terminals, pipes and TCP sockets. This interface, though asynchronous at the system level, is presented in a synchronous manner to the programmer and it is usually unnecessary to think about the underlying asynchronous operation. This is achieved by making heavy use of Julia cooperative threading (<a class=\"reference internal\" href=\"../control-flow/index#man-tasks\"><span>coroutine</span></a>) functionality.</p>  <h2 id=\"basic-stream-i-o\">Basic Stream I/O</h2> <p>All Julia streams expose at least a <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.read\" title=\"Base.read\"><code>read()</code></a> and a <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.write\" title=\"Base.write\"><code>write()</code></a> method, taking the stream as their first argument, e.g.:</p> <pre data-language=\"julia\">julia&gt; write(STDOUT,\"Hello World\");  # suppress return value 11 with ;\nHello World\njulia&gt; read(STDIN,Char)\n\n'\\n'\n</pre> <p>Note that <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.write\" title=\"Base.write\"><code>write()</code></a> returns 11, the number of bytes (in <code>\"Hello World\"</code>) written to <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.STDOUT\" title=\"Base.STDOUT\"><code>STDOUT</code></a>, but this return value is suppressed with the <code>;</code>.</p> <p>Here Enter was pressed again so that Julia would read the newline. Now, as you can see from this example, <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.write\" title=\"Base.write\"><code>write()</code></a> takes the data to write as its second argument, while <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.read\" title=\"Base.read\"><code>read()</code></a> takes the type of the data to be read as the second argument.</p> <p>For example, to read a simple byte array, we could do:</p> <pre data-language=\"julia\">julia&gt; x = zeros(UInt8,4)\n4-element Array{UInt8,1}:\n 0x00\n 0x00\n 0x00\n 0x00\n\njulia&gt; read!(STDIN,x)\nabcd\n4-element Array{UInt8,1}:\n 0x61\n 0x62\n 0x63\n 0x64\n</pre> <p>However, since this is slightly cumbersome, there are several convenience methods provided. For example, we could have written the above as:</p> <pre data-language=\"julia\">julia&gt; readbytes(STDIN,4)\nabcd\n4-element Array{UInt8,1}:\n 0x61\n 0x62\n 0x63\n 0x64\n</pre> <p>or if we had wanted to read the entire line instead:</p> <pre data-language=\"julia\">julia&gt; readline(STDIN)\nabcd\n\"abcd\\n\"\n</pre> <p>Note that depending on your terminal settings, your TTY may be line buffered and might thus require an additional enter before the data is sent to Julia.</p> <p>To read every line from <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.STDIN\" title=\"Base.STDIN\"><code>STDIN</code></a> you can use <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.eachline\" title=\"Base.eachline\"><code>eachline()</code></a>:</p> <pre data-language=\"julia\">for line in eachline(STDIN)\n    print(\"Found $line\")\nend\n</pre> <p>or <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.read\" title=\"Base.read\"><code>read()</code></a> if you wanted to read by character instead:</p> <pre data-language=\"julia\">while !eof(STDIN)\n    x = read(STDIN, Char)\n    println(\"Found: $x\")\nend\n</pre>   <h2 id=\"text-i-o\">Text I/O</h2> <p>Note that the <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.write\" title=\"Base.write\"><code>write()</code></a> method mentioned above operates on binary streams. In particular, values do not get converted to any canonical text representation but are written out as is:</p> <pre data-language=\"julia\">julia&gt; write(STDOUT,0x61);  # suppress return value 1 with ;\na\n</pre> <p>Note that <code>a</code> is written to <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.STDOUT\" title=\"Base.STDOUT\"><code>STDOUT</code></a> by the <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.write\" title=\"Base.write\"><code>write()</code></a> function and that the returned value is <code>1</code> (since <code>0x61</code> is one byte).</p> <p>For text I/O, use the <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.print\" title=\"Base.print\"><code>print()</code></a> or <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.show\" title=\"Base.show\"><code>show()</code></a> methods, depending on your needs (see the standard library reference for a detailed discussion of the difference between the two):</p> <pre data-language=\"julia\">julia&gt; print(STDOUT,0x61)\n97\n</pre>   <h2 id=\"working-with-files\">Working with Files</h2> <p>Like many other environments, Julia has an <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.open\" title=\"Base.open\"><code>open()</code></a> function, which takes a filename and returns an <code>IOStream</code> object that you can use to read and write things from the file. For example if we have a file, <code>hello.txt</code>, whose contents are <code>Hello, World!</code>:</p> <pre data-language=\"julia\">julia&gt; f = open(\"hello.txt\")\nIOStream(&lt;file hello.txt&gt;)\n\njulia&gt; readlines(f)\n1-element Array{Union{ASCIIString,UTF8String},1}:\n \"Hello, World!\\n\"\n</pre> <p>If you want to write to a file, you can open it with the write (<code>\"w\"</code>) flag:</p> <pre data-language=\"julia\">julia&gt; f = open(\"hello.txt\",\"w\")\nIOStream(&lt;file hello.txt&gt;)\n\njulia&gt; write(f,\"Hello again.\")\n12\n</pre> <p>If you examine the contents of <code>hello.txt</code> at this point, you will notice that it is empty; nothing has actually been written to disk yet. This is because the <code>IOStream</code> must be closed before the write is actually flushed to disk:</p> <pre data-language=\"julia\">julia&gt; close(f)\n</pre> <p>Examining <code>hello.txt</code> again will show its contents have been changed.</p> <p>Opening a file, doing something to its contents, and closing it again is a very common pattern. To make this easier, there exists another invocation of <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.open\" title=\"Base.open\"><code>open()</code></a> which takes a function as its first argument and filename as its second, opens the file, calls the function with the file as an argument, and then closes it again. For example, given a function:</p> <pre data-language=\"julia\">function read_and_capitalize(f::IOStream)\n    return uppercase(readall(f))\nend\n</pre> <p>You can call:</p> <pre data-language=\"julia\">julia&gt; open(read_and_capitalize, \"hello.txt\")\n\"HELLO AGAIN.\"\n</pre> <p>to open <code>hello.txt</code>, call <code>read_and_capitalize on it</code>, close <code>hello.txt</code> and return the capitalized contents.</p> <p>To avoid even having to define a named function, you can use the <code>do</code> syntax, which creates an anonymous function on the fly:</p> <pre data-language=\"julia\">julia&gt; open(\"hello.txt\") do f\n          uppercase(readall(f))\n       end\n\"HELLO AGAIN.\"\n</pre>   <h2 id=\"a-simple-tcp-example\">A simple TCP example</h2> <p>Let’s jump right in with a simple example involving TCP sockets. Let’s first create a simple server:</p> <pre data-language=\"julia\">julia&gt; @async begin\n         server = listen(2000)\n         while true\n           sock = accept(server)\n           println(\"Hello World\\n\")\n         end\n       end\nTask\n\njulia&gt;\n</pre> <p>To those familiar with the Unix socket API, the method names will feel familiar, though their usage is somewhat simpler than the raw Unix socket API. The first call to <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.listen\" title=\"Base.listen\"><code>listen()</code></a> will create a server waiting for incoming connections on the specified port (2000) in this case. The same function may also be used to create various other kinds of servers:</p> <pre data-language=\"julia\">julia&gt; listen(2000) # Listens on localhost:2000 (IPv4)\nTCPServer(active)\n\njulia&gt; listen(ip\"127.0.0.1\",2000) # Equivalent to the first\nTCPServer(active)\n\njulia&gt; listen(ip\"::1\",2000) # Listens on localhost:2000 (IPv6)\nTCPServer(active)\n\njulia&gt; listen(IPv4(0),2001) # Listens on port 2001 on all IPv4 interfaces\nTCPServer(active)\n\njulia&gt; listen(IPv6(0),2001) # Listens on port 2001 on all IPv6 interfaces\nTCPServer(active)\n\njulia&gt; listen(\"testsocket\") # Listens on a domain socket/named pipe\nPipeServer(active)\n</pre> <p>Note that the return type of the last invocation is different. This is because this server does not listen on TCP, but rather on a named pipe (Windows) or domain socket (UNIX). The difference is subtle and has to do with the <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.accept\" title=\"Base.accept\"><code>accept()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.connect\" title=\"Base.connect\"><code>connect()</code></a> methods. The <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.accept\" title=\"Base.accept\"><code>accept()</code></a> method retrieves a connection to the client that is connecting on the server we just created, while the <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.connect\" title=\"Base.connect\"><code>connect()</code></a> function connects to a server using the specified method. The <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.connect\" title=\"Base.connect\"><code>connect()</code></a> function takes the same arguments as <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.listen\" title=\"Base.listen\"><code>listen()</code></a>, so, assuming the environment (i.e. host, cwd, etc.) is the same you should be able to pass the same arguments to <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.connect\" title=\"Base.connect\"><code>connect()</code></a> as you did to listen to establish the connection. So let’s try that out (after having created the server above):</p> <pre data-language=\"julia\">julia&gt; connect(2000)\nTCPSocket(open, 0 bytes waiting)\n\njulia&gt; Hello World\n</pre> <p>As expected we saw “Hello World” printed. So, let’s actually analyze what happened behind the scenes. When we called <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.connect\" title=\"Base.connect\"><code>connect()</code></a>, we connect to the server we had just created. Meanwhile, the accept function returns a server-side connection to the newly created socket and prints “Hello World” to indicate that the connection was successful.</p> <p>A great strength of Julia is that since the API is exposed synchronously even though the I/O is actually happening asynchronously, we didn’t have to worry callbacks or even making sure that the server gets to run. When we called <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.connect\" title=\"Base.connect\"><code>connect()</code></a> the current task waited for the connection to be established and only continued executing after that was done. In this pause, the server task resumed execution (because a connection request was now available), accepted the connection, printed the message and waited for the next client. Reading and writing works in the same way. To see this, consider the following simple echo server:</p> <pre data-language=\"julia\">julia&gt; @async begin\n         server = listen(2001)\n         while true\n           sock = accept(server)\n           @async while isopen(sock)\n             write(sock,readline(sock))\n           end\n         end\n       end\nTask\n\njulia&gt; clientside=connect(2001)\nTCPSocket(open, 0 bytes waiting)\n\njulia&gt; @async while true\n          write(STDOUT,readline(clientside))\n       end\n\njulia&gt; println(clientside,\"Hello World from the Echo Server\")\n\njulia&gt; Hello World from the Echo Server\n</pre> <p>As with other streams, use <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.close\" title=\"Base.close\"><code>close()</code></a> to disconnect the socket:</p> <pre data-language=\"julia\">julia&gt; close(clientside)\n</pre>   <h2 id=\"resolving-ip-addresses\">Resolving IP Addresses</h2> <p>One of the <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.connect\" title=\"Base.connect\"><code>connect()</code></a> methods that does not follow the <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.listen\" title=\"Base.listen\"><code>listen()</code></a> methods is <code>connect(host::ASCIIString,port)</code>, which will attempt to connect to the host given by the <code>host</code> parameter on the port given by the port parameter. It allows you to do things like:</p> <pre data-language=\"julia\">julia&gt; connect(\"google.com\",80)\nTCPSocket(open, 0 bytes waiting)\n</pre> <p>At the base of this functionality is <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.getaddrinfo\" title=\"Base.getaddrinfo\"><code>getaddrinfo()</code></a>, which will do the appropriate address resolution:</p> <pre data-language=\"julia\">julia&gt; getaddrinfo(\"google.com\")\nIPv4(74.125.226.225)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/networking-and-streams/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/networking-and-streams/</a>\n  </p>\n</div>\n","manual/control-flow/index":"<h1 id=\"man-control-flow\">Control Flow</h1> <p>Julia provides a variety of control flow constructs:</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#man-compound-expressions\"><span>Compound Expressions</span></a>: <code>begin</code> and <code>(;)</code>.</li> <li>\n<a class=\"reference internal\" href=\"#man-conditional-evaluation\"><span>Conditional Evaluation</span></a>: <code>if</code>-<code>elseif</code>-<code>else</code> and <code>?:</code> (ternary operator).</li> <li>\n<a class=\"reference internal\" href=\"#man-short-circuit-evaluation\"><span>Short-Circuit Evaluation</span></a>: <code>&amp;&amp;</code>, <code>||</code> and chained comparisons.</li> <li>\n<a class=\"reference internal\" href=\"#man-loops\"><span>Repeated Evaluation: Loops</span></a>: <code>while</code> and <code>for</code>.</li> <li>\n<a class=\"reference internal\" href=\"#man-exception-handling\"><span>Exception Handling</span></a>: <code>try</code>-<code>catch</code>, <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.error\" title=\"Base.error\"><code>error()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.throw\" title=\"Base.throw\"><code>throw()</code></a>.</li> <li>\n<a class=\"reference internal\" href=\"#man-tasks\"><span>Tasks (aka Coroutines)</span></a>: <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.yieldto\" title=\"Base.yieldto\"><code>yieldto()</code></a>.</li> </ul> <p>The first five control flow mechanisms are standard to high-level programming languages. <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.Task\" title=\"Base.Task\"><code>Task</code></a>s are not so standard: they provide non-local control flow, making it possible to switch between temporarily-suspended computations. This is a powerful construct: both exception handling and cooperative multitasking are implemented in Julia using tasks. Everyday programming requires no direct usage of tasks, but certain problems can be solved much more easily by using tasks.</p>  <h2 id=\"man-compound-expressions\">Compound Expressions</h2> <p id=\"compound-expressions\">Sometimes it is convenient to have a single expression which evaluates several subexpressions in order, returning the value of the last subexpression as its value. There are two Julia constructs that accomplish this: <code>begin</code> blocks and <code>(;)</code> chains. The value of both compound expression constructs is that of the last subexpression. Here’s an example of a <code>begin</code> block:</p> <pre data-language=\"julia\">julia&gt; z = begin\n         x = 1\n         y = 2\n         x + y\n       end\n3\n</pre> <p>Since these are fairly small, simple expressions, they could easily be placed onto a single line, which is where the <code>(;)</code> chain syntax comes in handy:</p> <pre data-language=\"julia\">julia&gt; z = (x = 1; y = 2; x + y)\n3\n</pre> <p>This syntax is particularly useful with the terse single-line function definition form introduced in <a class=\"reference internal\" href=\"../functions/index#man-functions\"><span>Functions</span></a>. Although it is typical, there is no requirement that <code>begin</code> blocks be multiline or that <code>(;)</code> chains be single-line:</p> <pre data-language=\"julia\">julia&gt; begin x = 1; y = 2; x + y end\n3\n\njulia&gt; (x = 1;\n        y = 2;\n        x + y)\n3\n</pre>   <h2 id=\"man-conditional-evaluation\">Conditional Evaluation</h2> <p id=\"conditional-evaluation\">Conditional evaluation allows portions of code to be evaluated or not evaluated depending on the value of a boolean expression. Here is the anatomy of the <code>if</code>-<code>elseif</code>-<code>else</code> conditional syntax:</p> <pre data-language=\"julia\">if x &lt; y\n  println(\"x is less than y\")\nelseif x &gt; y\n  println(\"x is greater than y\")\nelse\n  println(\"x is equal to y\")\nend\n</pre> <p>If the condition expression <code>x &lt; y</code> is <code>true</code>, then the corresponding block is evaluated; otherwise the condition expression <code>x &gt; y</code> is evaluated, and if it is <code>true</code>, the corresponding block is evaluated; if neither expression is true, the <code>else</code> block is evaluated. Here it is in action:</p> <pre data-language=\"julia\">julia&gt; function test(x, y)\n         if x &lt; y\n           println(\"x is less than y\")\n         elseif x &gt; y\n           println(\"x is greater than y\")\n         else\n           println(\"x is equal to y\")\n         end\n       end\ntest (generic function with 1 method)\n\njulia&gt; test(1, 2)\nx is less than y\n\njulia&gt; test(2, 1)\nx is greater than y\n\njulia&gt; test(1, 1)\nx is equal to y\n</pre> <p>The <code>elseif</code> and <code>else</code> blocks are optional, and as many <code>elseif</code> blocks as desired can be used. The condition expressions in the <code>if</code>-<code>elseif</code>-<code>else</code> construct are evaluated until the first one evaluates to <code>true</code>, after which the associated block is evaluated, and no further condition expressions or blocks are evaluated.</p> <p><code>if</code> blocks are “leaky”, i.e. they do not introduce a local scope. This means that new variables defined inside the <code>ìf</code> clauses can be used after the <code>if</code> block, even if they weren’t defined before. So, we could have defined the <code>test</code> function above as</p> <pre data-language=\"julia\">julia&gt; function test(x,y)\n         if x &lt; y\n           relation = \"less than\"\n         elseif x == y\n           relation = \"equal to\"\n         else\n           relation = \"greater than\"\n         end\n         println(\"x is \", relation, \" y.\")\n       end\ntest (generic function with 1 method)\n</pre> <p>The variable <code>relation</code> is declared inside the <code>if</code> block, but used outside. However, when depending on this behavior, make sure all possible code paths define a value for the variable. The following change to the above function results in a runtime error</p> <pre data-language=\"julia\">julia&gt; function test(x,y)\n         if x &lt; y\n           relation = \"less than\"\n         elseif x == y\n           relation = \"equal to\"\n         end\n         println(\"x is \", relation, \" y.\")\n       end\ntest (generic function with 1 method)\n\njulia&gt; test(1,2)\nx is less than y.\n\njulia&gt; test(2,1)\nERROR: UndefVarError: relation not defined\n in test at none:7\n</pre> <p><code>if</code> blocks also return a value, which may seem unintuitive to users coming from many other languages. This value is simply the return value of the last executed statement in the branch that was chosen, so</p> <pre data-language=\"julia\">julia&gt; x = 3\n3\n\njulia&gt; if x &gt; 0\n           \"positive!\"\n       else\n           \"negative...\"\n       end\n\"positive!\"\n</pre> <p>Note that very short conditional statements (one-liners) are frequently expressed using Short-Circuit Evaluation in Julia, as outlined in the next section.</p> <p>Unlike C, MATLAB, Perl, Python, and Ruby — but like Java, and a few other stricter, typed languages — it is an error if the value of a conditional expression is anything but <code>true</code> or <code>false</code>:</p> <pre data-language=\"julia\">julia&gt; if 1\n         println(\"true\")\n       end\nERROR: TypeError: non-boolean (Int64) used in boolean context\n</pre> <p>This error indicates that the conditional was of the wrong type: <code>Int64</code> rather than the required <code>Bool</code>.</p> <p>The so-called “ternary operator”, <code>?:</code>, is closely related to the <code>if</code>-<code>elseif</code>-<code>else</code> syntax, but is used where a conditional choice between single expression values is required, as opposed to conditional execution of longer blocks of code. It gets its name from being the only operator in most languages taking three operands:</p> <pre data-language=\"julia\">a ? b : c\n</pre> <p>The expression <code>a</code>, before the <code>?</code>, is a condition expression, and the ternary operation evaluates the expression <code>b</code>, before the <code>:</code>, if the condition <code>a</code> is <code>true</code> or the expression <code>c</code>, after the <code>:</code>, if it is <code>false</code>.</p> <p>The easiest way to understand this behavior is to see an example. In the previous example, the <code>println</code> call is shared by all three branches: the only real choice is which literal string to print. This could be written more concisely using the ternary operator. For the sake of clarity, let’s try a two-way version first:</p> <pre data-language=\"julia\">julia&gt; x = 1; y = 2;\n\njulia&gt; println(x &lt; y ? \"less than\" : \"not less than\")\nless than\n\njulia&gt; x = 1; y = 0;\n\njulia&gt; println(x &lt; y ? \"less than\" : \"not less than\")\nnot less than\n</pre> <p>If the expression <code>x &lt; y</code> is true, the entire ternary operator expression evaluates to the string <code>\"less than\"</code> and otherwise it evaluates to the string <code>\"not less than\"</code>. The original three-way example requires chaining multiple uses of the ternary operator together:</p> <pre data-language=\"julia\">julia&gt; test(x, y) = println(x &lt; y ? \"x is less than y\"    :\n                            x &gt; y ? \"x is greater than y\" : \"x is equal to y\")\ntest (generic function with 1 method)\n\njulia&gt; test(1, 2)\nx is less than y\n\njulia&gt; test(2, 1)\nx is greater than y\n\njulia&gt; test(1, 1)\nx is equal to y\n</pre> <p>To facilitate chaining, the operator associates from right to left.</p> <p>It is significant that like <code>if</code>-<code>elseif</code>-<code>else</code>, the expressions before and after the <code>:</code> are only evaluated if the condition expression evaluates to <code>true</code> or <code>false</code>, respectively:</p> <pre data-language=\"julia\">julia&gt; v(x) = (println(x); x)\nv (generic function with 1 method)\n\n\njulia&gt; 1 &lt; 2 ? v(\"yes\") : v(\"no\")\nyes\n\"yes\"\n\njulia&gt; 1 &gt; 2 ? v(\"yes\") : v(\"no\")\nno\n\"no\"\n</pre>   <h2 id=\"man-short-circuit-evaluation\">Short-Circuit Evaluation</h2> <p id=\"short-circuit-evaluation\">Short-circuit evaluation is quite similar to conditional evaluation. The behavior is found in most imperative programming languages having the <code>&amp;&amp;</code> and <code>||</code> boolean operators: in a series of boolean expressions connected by these operators, only the minimum number of expressions are evaluated as are necessary to determine the final boolean value of the entire chain. Explicitly, this means that:</p> <ul class=\"simple\"> <li>In the expression <code>a &amp;&amp; b</code>, the subexpression <code>b</code> is only evaluated if <code>a</code> evaluates to <code>true</code>.</li> <li>In the expression <code>a || b</code>, the subexpression <code>b</code> is only evaluated if <code>a</code> evaluates to <code>false</code>.</li> </ul> <p>The reasoning is that <code>a &amp;&amp; b</code> must be <code>false</code> if <code>a</code> is <code>false</code>, regardless of the value of <code>b</code>, and likewise, the value of <code>a || b</code> must be true if <code>a</code> is <code>true</code>, regardless of the value of <code>b</code>. Both <code>&amp;&amp;</code> and <code>||</code> associate to the right, but <code>&amp;&amp;</code> has higher precedence than <code>||</code> does. It’s easy to experiment with this behavior:</p> <pre data-language=\"julia\">julia&gt; t(x) = (println(x); true)\nt (generic function with 1 method)\n\njulia&gt; f(x) = (println(x); false)\nf (generic function with 1 method)\n\njulia&gt; t(1) &amp;&amp; t(2)\n1\n2\ntrue\n\njulia&gt; t(1) &amp;&amp; f(2)\n1\n2\nfalse\n\njulia&gt; f(1) &amp;&amp; t(2)\n1\nfalse\n\njulia&gt; f(1) &amp;&amp; f(2)\n1\nfalse\n\njulia&gt; t(1) || t(2)\n1\ntrue\n\njulia&gt; t(1) || f(2)\n1\ntrue\n\njulia&gt; f(1) || t(2)\n1\n2\ntrue\n\njulia&gt; f(1) || f(2)\n1\n2\nfalse\n</pre> <p>You can easily experiment in the same way with the associativity and precedence of various combinations of <code>&amp;&amp;</code> and <code>||</code> operators.</p> <p>This behavior is frequently used in Julia to form an alternative to very short <code>if</code> statements. Instead of <code>if &lt;cond&gt; &lt;statement&gt; end</code>, one can write <code>&lt;cond&gt; &amp;&amp; &lt;statement&gt;</code> (which could be read as: &lt;cond&gt; <em>and then</em> &lt;statement&gt;). Similarly, instead of <code>if ! &lt;cond&gt; &lt;statement&gt; end</code>, one can write <code>&lt;cond&gt; || &lt;statement&gt;</code> (which could be read as: &lt;cond&gt; <em>or else</em> &lt;statement&gt;).</p> <p>For example, a recursive factorial routine could be defined like this:</p> <pre data-language=\"julia\">julia&gt; function factorial(n::Int)\n           n &gt;= 0 || error(\"n must be non-negative\")\n           n == 0 &amp;&amp; return 1\n           n * factorial(n-1)\n       end\nfactorial (generic function with 1 method)\n\njulia&gt; factorial(5)\n120\n\njulia&gt; factorial(0)\n1\n\njulia&gt; factorial(-1)\nERROR: n must be non-negative\n in factorial at none:2\n</pre> <p>Boolean operations <em>without</em> short-circuit evaluation can be done with the bitwise boolean operators introduced in <a class=\"reference internal\" href=\"../mathematical-operations/index#man-mathematical-operations\"><span>Mathematical Operations and Elementary Functions</span></a>: <code>&amp;</code> and <code>|</code>. These are normal functions, which happen to support infix operator syntax, but always evaluate their arguments:</p> <pre data-language=\"julia\">julia&gt; f(1) &amp; t(2)\n1\n2\nfalse\n\njulia&gt; t(1) | t(2)\n1\n2\ntrue\n</pre> <p>Just like condition expressions used in <code>if</code>, <code>elseif</code> or the ternary operator, the operands of <code>&amp;&amp;</code> or <code>||</code> must be boolean values (<code>true</code> or <code>false</code>). Using a non-boolean value anywhere except for the last entry in a conditional chain is an error:</p> <pre data-language=\"julia\">julia&gt; 1 &amp;&amp; true\nERROR: TypeError: non-boolean (Int64) used in boolean context\n</pre> <p>On the other hand, any type of expression can be used at the end of a conditional chain. It will be evaluated and returned depending on the preceding conditionals:</p> <pre data-language=\"julia\">julia&gt; true &amp;&amp; (x = rand(2,2))\n2x2 Array{Float64,2}:\n 0.768448  0.673959\n 0.940515  0.395453\n\njulia&gt; false &amp;&amp; (x = rand(2,2))\nfalse\n</pre>   <h2 id=\"man-loops\">Repeated Evaluation: Loops</h2> <p id=\"repeated-evaluation-loops\">There are two constructs for repeated evaluation of expressions: the <code>while</code> loop and the <code>for</code> loop. Here is an example of a <code>while</code> loop:</p> <pre data-language=\"julia\">julia&gt; i = 1;\n\njulia&gt; while i &lt;= 5\n         println(i)\n         i += 1\n       end\n1\n2\n3\n4\n5\n</pre> <p>The <code>while</code> loop evaluates the condition expression (<code>i &lt;= 5</code> in this case), and as long it remains <code>true</code>, keeps also evaluating the body of the <code>while</code> loop. If the condition expression is <code>false</code> when the <code>while</code> loop is first reached, the body is never evaluated.</p> <p>The <code>for</code> loop makes common repeated evaluation idioms easier to write. Since counting up and down like the above <code>while</code> loop does is so common, it can be expressed more concisely with a <code>for</code> loop:</p> <pre data-language=\"julia\">julia&gt; for i = 1:5\n         println(i)\n       end\n1\n2\n3\n4\n5\n</pre> <p>Here the <code>1:5</code> is a <code>Range</code> object, representing the sequence of numbers 1, 2, 3, 4, 5. The <code>for</code> loop iterates through these values, assigning each one in turn to the variable <code>i</code>. One rather important distinction between the previous <code>while</code> loop form and the <code>for</code> loop form is the scope during which the variable is visible. If the variable <code>i</code> has not been introduced in an other scope, in the <code>for</code> loop form, it is visible only inside of the <code>for</code> loop, and not afterwards. You’ll either need a new interactive session instance or a different variable name to test this:</p> <pre data-language=\"julia\">julia&gt; for j = 1:5\n         println(j)\n       end\n1\n2\n3\n4\n5\n\njulia&gt; j\nERROR: UndefVarError: j not defined\n</pre> <p>See <a class=\"reference internal\" href=\"../variables-and-scoping/index#man-variables-and-scoping\"><span>Scope of Variables</span></a> for a detailed explanation of variable scope and how it works in Julia.</p> <p>In general, the <code>for</code> loop construct can iterate over any container. In these cases, the alternative (but fully equivalent) keyword <code>in</code> is typically used instead of <code>=</code>, since it makes the code read more clearly:</p> <pre data-language=\"julia\">julia&gt; for i in [1,4,0]\n         println(i)\n       end\n1\n4\n0\n\njulia&gt; for s in [\"foo\",\"bar\",\"baz\"]\n         println(s)\n       end\nfoo\nbar\nbaz\n</pre> <p>Various types of iterable containers will be introduced and discussed in later sections of the manual (see, e.g., <a class=\"reference internal\" href=\"../arrays/index#man-arrays\"><span>Multi-dimensional Arrays</span></a>).</p> <p>It is sometimes convenient to terminate the repetition of a <code>while</code> before the test condition is falsified or stop iterating in a <code>for</code> loop before the end of the iterable object is reached. This can be accomplished with the <code>break</code> keyword:</p> <pre data-language=\"julia\">julia&gt; i = 1;\n\njulia&gt; while true\n         println(i)\n         if i &gt;= 5\n           break\n         end\n         i += 1\n       end\n1\n2\n3\n4\n5\n\njulia&gt; for i = 1:1000\n         println(i)\n         if i &gt;= 5\n           break\n         end\n       end\n1\n2\n3\n4\n5\n</pre> <p>The above <code>while</code> loop would never terminate on its own, and the <code>for</code> loop would iterate up to 1000. These loops are both exited early by using the <code>break</code> keyword.</p> <p>In other circumstances, it is handy to be able to stop an iteration and move on to the next one immediately. The <code>continue</code> keyword accomplishes this:</p> <pre data-language=\"julia\">julia&gt; for i = 1:10\n         if i % 3 != 0\n           continue\n         end\n         println(i)\n       end\n3\n6\n9\n</pre> <p>This is a somewhat contrived example since we could produce the same behavior more clearly by negating the condition and placing the <code>println</code> call inside the <code>if</code> block. In realistic usage there is more code to be evaluated after the <code>continue</code>, and often there are multiple points from which one calls <code>continue</code>.</p> <p>Multiple nested <code>for</code> loops can be combined into a single outer loop, forming the cartesian product of its iterables:</p> <pre data-language=\"julia\">julia&gt; for i = 1:2, j = 3:4\n         println((i, j))\n       end\n(1,3)\n(1,4)\n(2,3)\n(2,4)\n</pre> <p>A <code>break</code> statement inside such a loop exits the entire nest of loops, not just the inner one.</p>   <h2 id=\"man-exception-handling\">Exception Handling</h2> <p id=\"exception-handling\">When an unexpected condition occurs, a function may be unable to return a reasonable value to its caller. In such cases, it may be best for the exceptional condition to either terminate the program, printing a diagnostic error message, or if the programmer has provided code to handle such exceptional circumstances, allow that code to take the appropriate action.</p>  <h3 id=\"built-in-exceptions\">Built-in <code>Exception</code>s</h3> <p><code>Exception</code>s are thrown when an unexpected condition has occurred. The built-in <code>Exception</code>s listed below all interrupt the normal flow of control.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\"><code>Exception</code></th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.ArgumentError\" title=\"Base.ArgumentError\"><code>ArgumentError</code></a></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.BoundsError\" title=\"Base.BoundsError\"><code>BoundsError</code></a></td> </tr> <tr class=\"row-even\">\n<td><code>CompositeException</code></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.DivideError\" title=\"Base.DivideError\"><code>DivideError</code></a></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.DomainError\" title=\"Base.DomainError\"><code>DomainError</code></a></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.EOFError\" title=\"Base.EOFError\"><code>EOFError</code></a></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.ErrorException\" title=\"Base.ErrorException\"><code>ErrorException</code></a></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.InexactError\" title=\"Base.InexactError\"><code>InexactError</code></a></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.InitError\" title=\"Base.InitError\"><code>InitError</code></a></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.InterruptException\" title=\"Base.InterruptException\"><code>InterruptException</code></a></td> </tr> <tr class=\"row-even\">\n<td><code>InvalidStateException</code></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.KeyError\" title=\"Base.KeyError\"><code>KeyError</code></a></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.LoadError\" title=\"Base.LoadError\"><code>LoadError</code></a></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.OutOfMemoryError\" title=\"Base.OutOfMemoryError\"><code>OutOfMemoryError</code></a></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.ReadOnlyMemoryError\" title=\"Base.ReadOnlyMemoryError\"><code>ReadOnlyMemoryError</code></a></td> </tr> <tr class=\"row-odd\">\n<td><code>RemoteException</code></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.MethodError\" title=\"Base.MethodError\"><code>MethodError</code></a></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.OverflowError\" title=\"Base.OverflowError\"><code>OverflowError</code></a></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.ParseError\" title=\"Base.ParseError\"><code>ParseError</code></a></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.SystemError\" title=\"Base.SystemError\"><code>SystemError</code></a></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.TypeError\" title=\"Base.TypeError\"><code>TypeError</code></a></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.UndefRefError\" title=\"Base.UndefRefError\"><code>UndefRefError</code></a></td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.UndefVarError\" title=\"Base.UndefVarError\"><code>UndefVarError</code></a></td> </tr> <tr class=\"row-odd\">\n<td><code>UnicodeError</code></td> </tr>  </table> <p>For example, the <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sqrt\" title=\"Base.sqrt\"><code>sqrt()</code></a> function throws a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.DomainError\" title=\"Base.DomainError\"><code>DomainError</code></a> if applied to a negative real value:</p> <pre data-language=\"julia\">julia&gt; sqrt(-1)\nERROR: DomainError:\nsqrt will only return a complex result if called with a complex argument. Try sqrt(complex(x)).\n in sqrt at math.jl:146\n</pre> <p>You may define your own exceptions in the following way:</p> <pre data-language=\"julia\">julia&gt; type MyCustomException &lt;: Exception end\n</pre>   <h3 id=\"the-throw-function\">The <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.throw\" title=\"Base.throw\"><code>throw()</code></a> function</h3> <p>Exceptions can be created explicitly with <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.throw\" title=\"Base.throw\"><code>throw()</code></a>. For example, a function defined only for nonnegative numbers could be written to <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.throw\" title=\"Base.throw\"><code>throw()</code></a> a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.DomainError\" title=\"Base.DomainError\"><code>DomainError</code></a> if the argument is negative:</p> <pre data-language=\"julia\">julia&gt; f(x) = x&gt;=0 ? exp(-x) : throw(DomainError())\nf (generic function with 1 method)\n\njulia&gt; f(1)\n0.36787944117144233\n\njulia&gt; f(-1)\nERROR: DomainError:\n in f at none:1\n</pre> <p>Note that <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.DomainError\" title=\"Base.DomainError\"><code>DomainError</code></a> without parentheses is not an exception, but a type of exception. It needs to be called to obtain an <code>Exception</code> object:</p> <pre data-language=\"julia\">julia&gt; typeof(DomainError()) &lt;: Exception\ntrue\n\njulia&gt; typeof(DomainError) &lt;: Exception\nfalse\n</pre> <p>Additionally, some exception types take one or more arguments that are used for error reporting:</p> <pre data-language=\"julia\">julia&gt; throw(UndefVarError(:x))\nERROR: UndefVarError: x not defined\n</pre> <p>This mechanism can be implemented easily by custom exception types following the way <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.UndefVarError\" title=\"Base.UndefVarError\"><code>UndefVarError</code></a> is written:</p> <pre data-language=\"julia\">julia&gt; type MyUndefVarError &lt;: Exception\n           var::Symbol\n       end\njulia&gt; Base.showerror(io::IO, e::MyUndefVarError) = print(io, e.var, \" not defined\");\n</pre>   <h3 id=\"errors\">Errors</h3> <p>The <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.error\" title=\"Base.error\"><code>error()</code></a> function is used to produce an <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.ErrorException\" title=\"Base.ErrorException\"><code>ErrorException</code></a> that interrupts the normal flow of control.</p> <p>Suppose we want to stop execution immediately if the square root of a negative number is taken. To do this, we can define a fussy version of the <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sqrt\" title=\"Base.sqrt\"><code>sqrt()</code></a> function that raises an error if its argument is negative:</p> <pre data-language=\"julia\">julia&gt; fussy_sqrt(x) = x &gt;= 0 ? sqrt(x) : error(\"negative x not allowed\")\nfussy_sqrt (generic function with 1 method)\n\njulia&gt; fussy_sqrt(2)\n1.4142135623730951\n\njulia&gt; fussy_sqrt(-1)\nERROR: negative x not allowed\n in fussy_sqrt at none:1\n</pre> <p>If <code>fussy_sqrt</code> is called with a negative value from another function, instead of trying to continue execution of the calling function, it returns immediately, displaying the error message in the interactive session:</p> <pre data-language=\"julia\">julia&gt; function verbose_fussy_sqrt(x)\n         println(\"before fussy_sqrt\")\n         r = fussy_sqrt(x)\n         println(\"after fussy_sqrt\")\n         return r\n       end\nverbose_fussy_sqrt (generic function with 1 method)\n\njulia&gt; verbose_fussy_sqrt(2)\nbefore fussy_sqrt\nafter fussy_sqrt\n1.4142135623730951\n\njulia&gt; verbose_fussy_sqrt(-1)\nbefore fussy_sqrt\nERROR: negative x not allowed\n in verbose_fussy_sqrt at none:3\n</pre>   <h3 id=\"warnings-and-informational-messages\">Warnings and informational messages</h3> <p>Julia also provides other functions that write messages to the standard error I/O, but do not throw any <code>Exception</code>s and hence do not interrupt execution.:</p> <pre data-language=\"julia\">julia&gt; info(\"Hi\"); 1+1\nINFO: Hi\n2\n\njulia&gt; warn(\"Hi\"); 1+1\nWARNING: Hi\n2\n\njulia&gt; error(\"Hi\"); 1+1\nERROR: Hi\n in error at ./error.jl:21\n</pre>   <h3 id=\"the-try-catch-statement\">The <code>try/catch</code> statement</h3> <p>The <code>try/catch</code> statement allows for <code>Exception</code>s to be tested for. For example, a customized square root function can be written to automatically call either the real or complex square root method on demand using <code>Exception</code>s :</p> <pre data-language=\"julia\">julia&gt; f(x) = try\n         sqrt(x)\n       catch\n         sqrt(complex(x, 0))\n       end\nf (generic function with 1 method)\n\njulia&gt; f(1)\n1.0\n\njulia&gt; f(-1)\n0.0 + 1.0im\n</pre> <p>It is important to note that in real code computing this function, one would compare <code>x</code> to zero instead of catching an exception. The exception is much slower than simply comparing and branching.</p> <p><code>try/catch</code> statements also allow the <code>Exception</code> to be saved in a variable. In this contrived example, the following example calculates the square root of the second element of <code>x</code> if <code>x</code> is indexable, otherwise assumes <code>x</code> is a real number and returns its square root:</p> <pre data-language=\"julia\">julia&gt; sqrt_second(x) = try\n         sqrt(x[2])\n       catch y\n         if isa(y, DomainError)\n           sqrt(complex(x[2], 0))\n         elseif isa(y, BoundsError)\n           sqrt(x)\n         end\n       end\nsqrt_second (generic function with 1 method)\n\njulia&gt; sqrt_second([1 4])\n2.0\n\njulia&gt; sqrt_second([1 -4])\n0.0 + 2.0im\n\njulia&gt; sqrt_second(9)\n3.0\n\njulia&gt; sqrt_second(-9)\nERROR: DomainError:\n in sqrt_second at none:7\n</pre> <p>Note that the symbol following <code>catch</code> will always be interpreted as a name for the exception, so care is needed when writing <code>try/catch</code> expressions on a single line. The following code will <em>not</em> work to return the value of <code>x</code> in case of an error:</p> <pre data-language=\"julia\">try bad() catch x end\n</pre> <p>Instead, use a semicolon or insert a line break after <code>catch</code>:</p> <pre data-language=\"julia\">try bad() catch; x end\n\ntry bad()\ncatch\n  x\nend\n</pre> <p>The <code>catch</code> clause is not strictly necessary; when omitted, the default return value is <code>nothing</code>.</p> <pre data-language=\"julia\">julia&gt; try error() end #Returns nothing\n</pre> <p>The power of the <code>try/catch</code> construct lies in the ability to unwind a deeply nested computation immediately to a much higher level in the stack of calling functions. There are situations where no error has occurred, but the ability to unwind the stack and pass a value to a higher level is desirable. Julia provides the <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.rethrow\" title=\"Base.rethrow\"><code>rethrow()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.backtrace\" title=\"Base.backtrace\"><code>backtrace()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.catch_backtrace\" title=\"Base.catch_backtrace\"><code>catch_backtrace()</code></a> functions for more advanced error handling.</p>   <h3 id=\"finally-clauses\">finally Clauses</h3> <p>In code that performs state changes or uses resources like files, there is typically clean-up work (such as closing files) that needs to be done when the code is finished. Exceptions potentially complicate this task, since they can cause a block of code to exit before reaching its normal end. The <code>finally</code> keyword provides a way to run some code when a given block of code exits, regardless of how it exits.</p> <p>For example, here is how we can guarantee that an opened file is closed:</p> <pre data-language=\"julia\">f = open(\"file\")\ntry\n    # operate on file f\nfinally\n    close(f)\nend\n</pre> <p>When control leaves the <code>try</code> block (for example due to a <code>return</code>, or just finishing normally), <code>close(f)</code> will be executed. If the <code>try</code> block exits due to an exception, the exception will continue propagating. A <code>catch</code> block may be combined with <code>try</code> and <code>finally</code> as well. In this case the <code>finally</code> block will run after <code>catch</code> has handled the error.</p>    <h2 id=\"man-tasks\">Tasks (aka Coroutines)</h2> <p id=\"tasks-aka-coroutines\">Tasks are a control flow feature that allows computations to be suspended and resumed in a flexible manner. This feature is sometimes called by other names, such as symmetric coroutines, lightweight threads, cooperative multitasking, or one-shot continuations.</p> <p>When a piece of computing work (in practice, executing a particular function) is designated as a <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.Task\" title=\"Base.Task\"><code>Task</code></a>, it becomes possible to interrupt it by switching to another <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.Task\" title=\"Base.Task\"><code>Task</code></a>. The original <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.Task\" title=\"Base.Task\"><code>Task</code></a> can later be resumed, at which point it will pick up right where it left off. At first, this may seem similar to a function call. However there are two key differences. First, switching tasks does not use any space, so any number of task switches can occur without consuming the call stack. Second, switching among tasks can occur in any order, unlike function calls, where the called function must finish executing before control returns to the calling function.</p> <p>This kind of control flow can make it much easier to solve certain problems. In some problems, the various pieces of required work are not naturally related by function calls; there is no obvious “caller” or “callee” among the jobs that need to be done. An example is the producer-consumer problem, where one complex procedure is generating values and another complex procedure is consuming them. The consumer cannot simply call a producer function to get a value, because the producer may have more values to generate and so might not yet be ready to return. With tasks, the producer and consumer can both run as long as they need to, passing values back and forth as necessary.</p> <p>Julia provides the functions <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.produce\" title=\"Base.produce\"><code>produce()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.consume\" title=\"Base.consume\"><code>consume()</code></a> for solving this problem. A producer is a function that calls <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.produce\" title=\"Base.produce\"><code>produce()</code></a> on each value it needs to produce:</p> <pre data-language=\"julia\">julia&gt; function producer()\n         produce(\"start\")\n         for n=1:4\n           produce(2n)\n         end\n         produce(\"stop\")\n       end;\n</pre> <p>To consume values, first the producer is wrapped in a <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.Task\" title=\"Base.Task\"><code>Task</code></a>, then <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.consume\" title=\"Base.consume\"><code>consume()</code></a> is called repeatedly on that object:</p> <pre data-language=\"julia\">julia&gt; p = Task(producer);\n\njulia&gt; consume(p)\n\"start\"\n\njulia&gt; consume(p)\n2\n\njulia&gt; consume(p)\n4\n\njulia&gt; consume(p)\n6\n\njulia&gt; consume(p)\n8\n\njulia&gt; consume(p)\n\"stop\"\n</pre> <p>One way to think of this behavior is that <code>producer</code> was able to return multiple times. Between calls to <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.produce\" title=\"Base.produce\"><code>produce()</code></a>, the producer’s execution is suspended and the consumer has control.</p> <p>A Task can be used as an iterable object in a <code>for</code> loop, in which case the loop variable takes on all the produced values:</p> <pre data-language=\"julia\">julia&gt; for x in Task(producer)\n         println(x)\n       end\nstart\n2\n4\n6\n8\nstop\n</pre> <p>Note that the <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.Task\" title=\"Base.Task\"><code>Task()</code></a> constructor expects a 0-argument function. A common pattern is for the producer to be parameterized, in which case a partial function application is needed to create a 0-argument <a class=\"reference internal\" href=\"../functions/index#man-anonymous-functions\"><span>anonymous function</span></a>. This can be done either directly or by use of a convenience macro:</p> <pre data-language=\"julia\">function mytask(myarg)\n    ...\nend\n\ntaskHdl = Task(() -&gt; mytask(7))\n# or, equivalently\ntaskHdl = @task mytask(7)\n</pre> <p><a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.produce\" title=\"Base.produce\"><code>produce()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.consume\" title=\"Base.consume\"><code>consume()</code></a> do not launch threads that can run on separate CPUs. True kernel threads are discussed under the topic of <a class=\"reference internal\" href=\"../parallel-computing/index#man-parallel-computing\"><span>Parallel Computing</span></a>.</p>  <h3 id=\"core-task-operations\">Core task operations</h3> <p>While <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.produce\" title=\"Base.produce\"><code>produce()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.consume\" title=\"Base.consume\"><code>consume()</code></a> illustrate the essential nature of tasks, they are actually implemented as library functions using a more primitive function, <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.yieldto\" title=\"Base.yieldto\"><code>yieldto()</code></a>. <code>yieldto(task,value)</code> suspends the current task, switches to the specified <code>task</code>, and causes that task’s last <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.yieldto\" title=\"Base.yieldto\"><code>yieldto()</code></a> call to return the specified <code>value</code>. Notice that <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.yieldto\" title=\"Base.yieldto\"><code>yieldto()</code></a> is the only operation required to use task-style control flow; instead of calling and returning we are always just switching to a different task. This is why this feature is also called “symmetric coroutines”; each task is switched to and from using the same mechanism.</p> <p><a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.yieldto\" title=\"Base.yieldto\"><code>yieldto()</code></a> is powerful, but most uses of tasks do not invoke it directly. Consider why this might be. If you switch away from the current task, you will probably want to switch back to it at some point, but knowing when to switch back, and knowing which task has the responsibility of switching back, can require considerable coordination. For example, <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.produce\" title=\"Base.produce\"><code>produce()</code></a> needs to maintain some state to remember who the consumer is. Not needing to manually keep track of the consuming task is what makes <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.produce\" title=\"Base.produce\"><code>produce()</code></a> easier to use than <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.yieldto\" title=\"Base.yieldto\"><code>yieldto()</code></a>.</p> <p>In addition to <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.yieldto\" title=\"Base.yieldto\"><code>yieldto()</code></a>, a few other basic functions are needed to use tasks effectively.</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.current_task\" title=\"Base.current_task\"><code>current_task()</code></a> gets a reference to the currently-running task.</li> <li>\n<a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.istaskdone\" title=\"Base.istaskdone\"><code>istaskdone()</code></a> queries whether a task has exited.</li> <li>\n<a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.istaskstarted\" title=\"Base.istaskstarted\"><code>istaskstarted()</code></a> queries whether a task has run yet.</li> <li>\n<a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.task_local_storage\" title=\"Base.task_local_storage\"><code>task_local_storage()</code></a> manipulates a key-value store specific to the current task.</li> </ul>   <h3 id=\"tasks-and-events\">Tasks and events</h3> <p>Most task switches occur as a result of waiting for events such as I/O requests, and are performed by a scheduler included in the standard library. The scheduler maintains a queue of runnable tasks, and executes an event loop that restarts tasks based on external events such as message arrival.</p> <p>The basic function for waiting for an event is <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.wait\" title=\"Base.wait\"><code>wait()</code></a>. Several objects implement <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.wait\" title=\"Base.wait\"><code>wait()</code></a>; for example, given a <code>Process</code> object, <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.wait\" title=\"Base.wait\"><code>wait()</code></a> will wait for it to exit. <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.wait\" title=\"Base.wait\"><code>wait()</code></a> is often implicit; for example, a <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.wait\" title=\"Base.wait\"><code>wait()</code></a> can happen inside a call to <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.read\" title=\"Base.read\"><code>read()</code></a> to wait for data to be available.</p> <p>In all of these cases, <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.wait\" title=\"Base.wait\"><code>wait()</code></a> ultimately operates on a <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.Condition\" title=\"Base.Condition\"><code>Condition</code></a> object, which is in charge of queueing and restarting tasks. When a task calls <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.wait\" title=\"Base.wait\"><code>wait()</code></a> on a <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.Condition\" title=\"Base.Condition\"><code>Condition</code></a>, the task is marked as non-runnable, added to the condition’s queue, and switches to the scheduler. The scheduler will then pick another task to run, or block waiting for external events. If all goes well, eventually an event handler will call <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.notify\" title=\"Base.notify\"><code>notify()</code></a> on the condition, which causes tasks waiting for that condition to become runnable again.</p> <p>A task created explicitly by calling <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.Task\" title=\"Base.Task\"><code>Task</code></a> is initially not known to the scheduler. This allows you to manage tasks manually using <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.yieldto\" title=\"Base.yieldto\"><code>yieldto()</code></a> if you wish. However, when such a task waits for an event, it still gets restarted automatically when the event happens, as you would expect. It is also possible to make the scheduler run a task whenever it can, without necessarily waiting for any events. This is done by calling <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.schedule\" title=\"Base.schedule\"><code>schedule()</code></a>, or using the <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@schedule\" title=\"Base.@schedule\"><code>@schedule</code></a> or <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@async\" title=\"Base.@async\"><code>@async</code></a> macros (see <a class=\"reference internal\" href=\"../parallel-computing/index#man-parallel-computing\"><span>Parallel Computing</span></a> for more details).</p>   <h3 id=\"task-states\">Task states</h3> <p>Tasks have a <code>state</code> field that describes their execution status. A task state is one of the following symbols:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Symbol</th> <th class=\"head\">Meaning</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>:runnable</code></td> <td>Currently running, or available to be switched to</td> </tr> <tr class=\"row-odd\">\n<td><code>:waiting</code></td> <td>Blocked waiting for a specific event</td> </tr> <tr class=\"row-even\">\n<td><code>:queued</code></td> <td>In the scheduler’s run queue about to be restarted</td> </tr> <tr class=\"row-odd\">\n<td><code>:done</code></td> <td>Successfully finished executing</td> </tr> <tr class=\"row-even\">\n<td><code>:failed</code></td> <td>Finished with an uncaught exception</td> </tr>  </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/control-flow/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/control-flow/</a>\n  </p>\n</div>\n","manual/metaprogramming/index":"<h1 id=\"man-metaprogramming\">Metaprogramming</h1> <p>The strongest legacy of Lisp in the Julia language is its metaprogramming support. Like Lisp, Julia represents its own code as a data structure of the language itself. Since code is represented by objects that can be created and manipulated from within the language, it is possible for a program to transform and generate its own code. This allows sophisticated code generation without extra build steps, and also allows true Lisp-style macros operating at the level of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">abstract syntax trees</a>. In contrast, preprocessor “macro” systems, like that of C and C++, perform textual manipulation and substitution before any actual parsing or interpretation occurs. Because all data types and code in Julia are represented by Julia data structures, powerful <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\">reflection</a> capabilities are available to explore the internals of a program and its types just like any other data.</p>  <h2 id=\"program-representation\">Program representation</h2> <p>Every Julia program starts life as a string:</p> <pre data-language=\"julia\">julia&gt; prog = \"1 + 1\"\n\"1 + 1\"\n</pre> <p><strong>What happens next?</strong></p> <p>The next step is to <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Parsing#Computer_languages\">parse</a> each string into an object called an expression, represented by the Julia type <code>Expr</code>:</p> <pre data-language=\"julia\">julia&gt; ex1 = parse(prog)\n:(1 + 1)\n\njulia&gt; typeof(ex1)\nExpr\n</pre> <p><code>Expr</code> objects contain three parts:</p> <ul class=\"simple\"> <li>a <code>Symbol</code> identifying the kind of expression. A symbol is an <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/String_interning\">interned string</a> identifier (more discussion below).</li> </ul> <pre data-language=\"julia\">julia&gt; ex1.head\n:call\n</pre> <ul class=\"simple\"> <li>the expression arguments, which may be symbols, other expressions, or literal values:</li> </ul> <pre data-language=\"julia\">julia&gt; ex1.args\n3-element Array{Any,1}:\n  :+\n 1\n 1\n</pre> <ul class=\"simple\"> <li>finally, the expression result type, which may be annotated by the user or inferred by the compiler (and may be ignored completely for the purposes of this chapter):</li> </ul> <pre data-language=\"julia\">julia&gt; ex1.typ\nAny\n</pre> <p>Expressions may also be constructed directly in <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Polish_notation\">prefix notation</a>:</p> <pre data-language=\"julia\">julia&gt; ex2 = Expr(:call, :+, 1, 1)\n:(1 + 1)\n</pre> <p>The two expressions constructed above – by parsing and by direct construction – are equivalent:</p> <pre data-language=\"julia\">julia&gt; ex1 == ex2\ntrue\n</pre> <p><strong>The key point here is that Julia code is internally represented as a data structure that is accessible from the language itself.</strong></p> <p>The <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.dump\" title=\"Base.dump\"><code>dump()</code></a> function provides indented and annotated display of <code>Expr</code> objects:</p> <pre data-language=\"julia\">julia&gt; dump(ex2)\nExpr\n  head: Symbol call\n  args: Array(Any,(3,))\n    1: Symbol +\n    2: Int64 1\n    3: Int64 1\n  typ: Any\n</pre> <p><code>Expr</code> objects may also be nested:</p> <pre data-language=\"julia\">julia&gt; ex3 = parse(\"(4 + 4) / 2\")\n:((4 + 4) / 2)\n</pre> <p>Another way to view expressions is with Meta.show_sexpr, which displays the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/S-expression\">S-expression</a> form of a given <code>Expr</code>, which may look very familiar to users of Lisp. Here’s an example illustrating the display on a nested <code>Expr</code>:</p> <pre data-language=\"julia\">julia&gt; Meta.show_sexpr(ex3)\n(:call, :/, (:call, :+, 4, 4), 2)\n</pre>  <h3 id=\"symbols\">Symbols</h3> <p>The <code>:</code> character has two syntactic purposes in Julia. The first form creates a <code>Symbol</code>, an <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/String_interning\">interned string</a> used as one building-block of expressions:</p> <pre data-language=\"julia\">julia&gt; :foo\n:foo\n\njulia&gt; typeof(ans)\nSymbol\n</pre> <p><code>Symbol</code>s can also be created using <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.symbol\" title=\"Base.symbol\"><code>symbol()</code></a>, which takes any number of arguments and creates a new symbol by concatenating their string representations together:</p> <pre data-language=\"julia\">julia&gt; :foo == symbol(\"foo\")\ntrue\n\njulia&gt; symbol(\"func\",10)\n:func10\n\njulia&gt; symbol(:var,'_',\"sym\")\n:var_sym\n</pre> <p>In the context of an expression, symbols are used to indicate access to variables; when an expression is evaluated, a symbol is replaced with the value bound to that symbol in the appropriate <a class=\"reference internal\" href=\"../variables-and-scoping/index#man-variables-and-scoping\"><span>scope</span></a>.</p> <p>Sometimes extra parentheses around the argument to <code>:</code> are needed to avoid ambiguity in parsing.:</p> <pre data-language=\"julia\">julia&gt; :(:)\n:(:)\n\njulia&gt; :(::)\n:(::)\n</pre>    <h2 id=\"expressions-and-evaluation\">Expressions and evaluation</h2>  <h3 id=\"quoting\">Quoting</h3> <p>The second syntactic purpose of the <code>:</code> character is to create expression objects without using the explicit <code>Expr</code> constructor. This is referred to as <em>quoting</em>. The <code>:</code> character, followed by paired parentheses around a single statement of Julia code, produces an <code>Expr</code> object based on the enclosed code. Here is example of the short form used to quote an arithmetic expression:</p> <pre data-language=\"julia\">julia&gt; ex = :(a+b*c+1)\n:(a + b * c + 1)\n\njulia&gt; typeof(ex)\nExpr\n</pre> <p>(to view the structure of this expression, try <code>ex.head</code> and <code>ex.args</code>, or use <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.dump\" title=\"Base.dump\"><code>dump()</code></a> as above)</p> <p>Note that equivalent expressions may be constructed using <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.parse\" title=\"Base.parse\"><code>parse()</code></a> or the direct <code>Expr</code> form:</p> <pre data-language=\"julia\">julia&gt;      :(a + b*c + 1)  ==\n       parse(\"a + b*c + 1\") ==\n       Expr(:call, :+, :a, Expr(:call, :*, :b, :c), 1)\ntrue\n</pre> <p>Expressions provided by the parser generally only have symbols, other expressions, and literal values as their args, whereas expressions constructed by Julia code can have arbitrary run-time values without literal forms as args. In this specific example, <code>+</code> and <code>a</code> are symbols, <code>*(b,c)</code> is a subexpression, and <code>1</code> is a literal 64-bit signed integer.</p> <p>There is a second syntactic form of quoting for multiple expressions: blocks of code enclosed in <code>quote ... end</code>. Note that this form introduces <code>QuoteNode</code> elements to the expression tree, which must be considered when directly manipulating an expression tree generated from <code>quote</code> blocks. For other purposes, <code>:( ... )</code> and <code>quote .. end</code> blocks are treated identically.</p> <pre data-language=\"julia\">julia&gt; ex = quote\n           x = 1\n           y = 2\n           x + y\n       end\nquote  # none, line 2:\n    x = 1 # none, line 3:\n    y = 2 # none, line 4:\n    x + y\nend\n\njulia&gt; typeof(ex)\nExpr\n</pre>   <h3 id=\"interpolation\">Interpolation</h3> <p>Direct construction of <code>Expr</code> objects with value arguments is powerful, but <code>Expr</code> constructors can be tedious compared to “normal” Julia syntax. As an alternative, Julia allows “splicing” or interpolation of literals or expressions into quoted expressions. Interpolation is indicated by the <code>$</code> prefix.</p> <p>In this example, the literal value of <code>a</code> is interpolated:</p> <pre data-language=\"julia\">julia&gt; a = 1;\n\njulia&gt; ex = :($a + b)\n:(1 + b)\n</pre> <p>Interpolating into an unquoted expression is not supported and will cause a compile-time error:</p> <pre data-language=\"julia\">julia&gt; $a + b\nERROR: unsupported or misplaced expression $\n</pre> <p>In this example, the tuple <code>(1,2,3)</code> is interpolated as an expression into a conditional test:</p> <pre data-language=\"julia\">julia&gt; ex = :(a in $:((1,2,3)) )\n:($(Expr(:in, :a, :((1,2,3)))))\n</pre> <p>Interpolating symbols into a nested expression requires enclosing each symbol in an enclosing quote block:</p> <pre data-language=\"julia\">julia&gt; :( :a in $( :(:a + :b) ) )\n                   ^^^^^^^^^^\n                   quoted inner expression\n</pre> <p>The use of <code>$</code> for expression interpolation is intentionally reminiscent of <a class=\"reference internal\" href=\"../strings/index#man-string-interpolation\"><span>string interpolation</span></a> and <a class=\"reference internal\" href=\"../running-external-programs/index#man-command-interpolation\"><span>command interpolation</span></a>. Expression interpolation allows convenient, readable programmatic construction of complex Julia expressions.</p>   <h3 id=\"eval-and-effects\">\n<a class=\"reference internal\" href=\"../../stdlib/base/index#Base.eval\" title=\"Base.eval\"><code>eval()</code></a> and effects</h3> <p>Given an expression object, one can cause Julia to evaluate (execute) it at global scope using <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.eval\" title=\"Base.eval\"><code>eval()</code></a>:</p> <pre data-language=\"julia\">julia&gt; :(1 + 2)\n:(1 + 2)\n\njulia&gt; eval(ans)\n3\n\njulia&gt; ex = :(a + b)\n:(a + b)\n\njulia&gt; eval(ex)\nERROR: UndefVarError: b not defined\n\njulia&gt; a = 1; b = 2;\n\njulia&gt; eval(ex)\n3\n</pre> <p>Every <a class=\"reference internal\" href=\"../modules/index#man-modules\"><span>module</span></a> has its own <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.eval\" title=\"Base.eval\"><code>eval()</code></a> function that evaluates expressions in its global scope. Expressions passed to <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.eval\" title=\"Base.eval\"><code>eval()</code></a> are not limited to returning values — they can also have side-effects that alter the state of the enclosing module’s environment:</p> <pre data-language=\"julia\">julia&gt; ex = :(x = 1)\n:(x = 1)\n\njulia&gt; x\nERROR: UndefVarError: x not defined\n\njulia&gt; eval(ex)\n1\n\njulia&gt; x\n1\n</pre> <p>Here, the evaluation of an expression object causes a value to be assigned to the global variable <code>x</code>.</p> <p>Since expressions are just <code>Expr</code> objects which can be constructed programmatically and then evaluated, it is possible to dynamically generate arbitrary code which can then be run using <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.eval\" title=\"Base.eval\"><code>eval()</code></a>. Here is a simple example:</p> <pre data-language=\"julia\">julia&gt; a = 1;\n\njulia&gt; ex = Expr(:call, :+, a, :b)\n:(1 + b)\n\njulia&gt; a = 0; b = 2;\n\njulia&gt; eval(ex)\n3\n</pre> <p>The value of <code>a</code> is used to construct the expression <code>ex</code> which applies the <code>+</code> function to the value 1 and the variable <code>b</code>. Note the important distinction between the way <code>a</code> and <code>b</code> are used:</p> <ul class=\"simple\"> <li>The value of the <em>variable</em> <code>a</code> at expression construction time is used as an immediate value in the expression. Thus, the value of <code>a</code> when the expression is evaluated no longer matters: the value in the expression is already <code>1</code>, independent of whatever the value of <code>a</code> might be.</li> <li>On the other hand, the <em>symbol</em> <code>:b</code> is used in the expression construction, so the value of the variable <code>b</code> at that time is irrelevant — <code>:b</code> is just a symbol and the variable <code>b</code> need not even be defined. At expression evaluation time, however, the value of the symbol <code>:b</code> is resolved by looking up the value of the variable <code>b</code>.</li> </ul>   <h3 id=\"functions-on-expressions\">Functions on <code>Expr</code>essions</h3> <p>As hinted above, one extremely useful feature of Julia is the capability to generate and manipulate Julia code within Julia itself. We have already seen one example of a function returning <code>Expr</code> objects: the <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.parse\" title=\"Base.parse\"><code>parse()</code></a> function, which takes a string of Julia code and returns the corresponding <code>Expr</code>. A function can also take one or more <code>Expr</code> objects as arguments, and return another <code>Expr</code>. Here is a simple, motivating example:</p> <pre data-language=\"julia\">julia&gt; function math_expr(op, op1, op2)\n         expr = Expr(:call, op, op1, op2)\n         return expr\n       end\n\n julia&gt;  ex = math_expr(:+, 1, Expr(:call, :*, 4, 5))\n :(1 + 4*5)\n\n julia&gt; eval(ex)\n 21\n</pre> <p>As another example, here is a function that doubles any numeric argument, but leaves expressions alone:</p> <pre data-language=\"julia\">julia&gt; function make_expr2(op, opr1, opr2)\n         opr1f, opr2f = map(x -&gt; isa(x, Number) ? 2*x : x, (opr1, opr2))\n         retexpr = Expr(:call, op, opr1f, opr2f)\n\n         return retexpr\n   end\nmake_expr2 (generic function with 1 method)\n\njulia&gt; make_expr2(:+, 1, 2)\n:(2 + 4)\n\njulia&gt; ex = make_expr2(:+, 1, Expr(:call, :*, 5, 8))\n:(2 + 5 * 8)\n\njulia&gt; eval(ex)\n42\n</pre>    <h2 id=\"man-macros\">Macros</h2> <p id=\"macros\">Macros provide a method to include generated code in the final body of a program. A macro maps a tuple of arguments to a returned <em>expression</em>, and the resulting expression is compiled directly rather than requiring a runtime <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.eval\" title=\"Base.eval\"><code>eval()</code></a> call. Macro arguments may include expressions, literal values, and symbols.</p>  <h3 id=\"basics\">Basics</h3> <p>Here is an extraordinarily simple macro:</p> <pre data-language=\"julia\">julia&gt; macro sayhello()\n           return :( println(\"Hello, world!\") )\n       end\n</pre> <p>Macros have a dedicated character in Julia’s syntax: the <code>@</code> (at-sign), followed by the unique name declared in a <code>macro NAME ... end</code> block. In this example, the compiler will replace all instances of <code>@sayhello</code> with:</p> <pre data-language=\"julia\">:( println(\"Hello, world!\") )\n</pre> <p>When <code>@sayhello</code> is given at the REPL, the expression executes immediately, thus we only see the evaluation result:</p> <pre data-language=\"julia\">julia&gt; @sayhello()\n\"Hello, world!\"\n</pre> <p>Now, consider a slightly more complex macro:</p> <pre data-language=\"julia\">julia&gt; macro sayhello(name)\n           return :( println(\"Hello, \", $name) )\n       end\n</pre> <p>This macro takes one argument: <code>name</code>. When <code>@sayhello</code> is encountered, the quoted expression is <em>expanded</em> to interpolate the value of the argument into the final expression:</p> <pre data-language=\"julia\">julia&gt; @sayhello(\"human\")\nHello, human\n</pre> <p>We can view the quoted return expression using the function <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.macroexpand\" title=\"Base.macroexpand\"><code>macroexpand()</code></a> (<strong>important note:</strong> this is an extremely useful tool for debugging macros):</p> <pre data-language=\"julia\">julia&gt; ex = macroexpand( :(@sayhello(\"human\")) )\n:(println(\"Hello, \",\"human\"))\n                    ^^^^^^^\n                    interpolated: now a literal string\n\njulia&gt; typeof(ex)\nExpr\n</pre>   <h3 id=\"hold-up-why-macros\">Hold up: why macros?</h3> <p>We have already seen a function <code>f(::Expr...) -&gt; Expr</code> in a previous section. In fact, <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.macroexpand\" title=\"Base.macroexpand\"><code>macroexpand()</code></a> is also such a function. So, why do macros exist?</p> <p>Macros are necessary because they execute when code is parsed, therefore, macros allow the programmer to generate and include fragments of customized code <em>before</em> the full program is run. To illustrate the difference, consider the following example:</p> <pre data-language=\"julia\">julia&gt; macro twostep(arg)\n           println(\"I execute at parse time. The argument is: \", arg)\n\n           return :(println(\"I execute at runtime. The argument is: \", $arg))\n       end\n\njulia&gt; ex = macroexpand( :(@twostep :(1, 2, 3)) );\nI execute at parse time. The argument is: :((1,2,3))\n</pre> <p>The first call to <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.println\" title=\"Base.println\"><code>println()</code></a> is executed when <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.macroexpand\" title=\"Base.macroexpand\"><code>macroexpand()</code></a> is called. The resulting expression contains <em>only</em> the second <code>println</code>:</p> <pre data-language=\"julia\">julia&gt; typeof(ex)\nExpr\n\njulia&gt; ex\n:(println(\"I execute at runtime. The argument is: \",$(Expr(:copyast, :(:((1,2,3)))))))\n\njulia&gt; eval(ex)\nI execute at runtime. The argument is: (1,2,3)\n</pre>   <h3 id=\"macro-invocation\">Macro invocation</h3> <p>Macros are invoked with the following general syntax:</p> <pre data-language=\"julia\">@name expr1 expr2 ...\n@name(expr1, expr2, ...)\n</pre> <p>Note the distinguishing <code>@</code> before the macro name and the lack of commas between the argument expressions in the first form, and the lack of whitespace after <code>@name</code> in the second form. The two styles should not be mixed. For example, the following syntax is different from the examples above; it passes the tuple <code>(expr1, expr2, ...)</code> as one argument to the macro:</p> <pre data-language=\"julia\">@name (expr1, expr2, ...)\n</pre> <p>It is important to emphasize that macros receive their arguments as expressions, literals, or symbols. One way to explore macro arguments is to call the <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.show\" title=\"Base.show\"><code>show()</code></a> function within the macro body:</p> <pre data-language=\"julia\">julia&gt; macro showarg(x)\n   show(x)\n   # ... remainder of macro, returning an expression\nend\n\n\njulia&gt; @showarg(a)\n(:a,)\n\njulia&gt; @showarg(1+1)\n:(1 + 1)\n\njulia&gt; @showarg(println(\"Yo!\"))\n:(println(\"Yo!\"))\n</pre>   <h3 id=\"building-an-advanced-macro\">Building an advanced macro</h3> <p>Here is a simplified definition of Julia’s <code>@assert</code> macro:</p> <pre data-language=\"julia\">macro assert(ex)\n    return :( $ex ? nothing : throw(AssertionError($(string(ex)))) )\nend\n</pre> <p>This macro can be used like this:</p> <pre data-language=\"julia\">julia&gt; @assert 1==1.0\n\njulia&gt; @assert 1==0\nERROR: AssertionError: 1 == 0\n</pre> <p>In place of the written syntax, the macro call is expanded at parse time to its returned result. This is equivalent to writing:</p> <pre data-language=\"julia\">1==1.0 ? nothing : throw(AssertionError(\"1==1.0\"))\n1==0 ? nothing : throw(AssertionError(\"1==0\"))\n</pre> <p>That is, in the first call, the expression <code>:(1==1.0)</code> is spliced into the test condition slot, while the value of <code>string(:(1==1.0))</code> is spliced into the assertion message slot. The entire expression, thus constructed, is placed into the syntax tree where the <code>@assert</code> macro call occurs. Then at execution time, if the test expression evaluates to true, then <code>nothing</code> is returned, whereas if the test is false, an error is raised indicating the asserted expression that was false. Notice that it would not be possible to write this as a function, since only the <em>value</em> of the condition is available and it would be impossible to display the expression that computed it in the error message.</p> <p>The actual definition of <code>@assert</code> in the standard library is more complicated. It allows the user to optionally specify their own error message, instead of just printing the failed expression. Just like in functions with a variable number of arguments, this is specified with an ellipses following the last argument:</p> <pre data-language=\"julia\">macro assert(ex, msgs...)\n    msg_body = isempty(msgs) ? ex : msgs[1]\n    msg = string(msg_body)\n    return :($ex ? nothing : throw(AssertionError($msg)))\nend\n</pre> <p>Now <code>@assert</code> has two modes of operation, depending upon the number of arguments it receives! If there’s only one argument, the tuple of expressions captured by <code>msgs</code> will be empty and it will behave the same as the simpler definition above. But now if the user specifies a second argument, it is printed in the message body instead of the failing expression. You can inspect the result of a macro expansion with the aptly named <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.macroexpand\" title=\"Base.macroexpand\"><code>macroexpand()</code></a> function:</p> <pre data-language=\"julia\">julia&gt; macroexpand(:(@assert a==b))\n:(if a == b\n        nothing\n    else\n        Base.throw(Base.Main.Base.AssertionError(\"a == b\"))\n    end)\n\njulia&gt; macroexpand(:(@assert a==b \"a should equal b!\"))\n:(if a == b\n        nothing\n    else\n        Base.throw(Base.Main.Base.AssertionError(\"a should equal b!\"))\n    end)\n</pre> <p>There is yet another case that the actual <code>@assert</code> macro handles: what if, in addition to printing “a should equal b,” we wanted to print their values? One might naively try to use string interpolation in the custom message, e.g., <code>@assert a==b \"a ($a) should equal b ($b)!\"</code>, but this won’t work as expected with the above macro. Can you see why? Recall from <a class=\"reference internal\" href=\"../strings/index#man-string-interpolation\"><span>string interpolation</span></a> that an interpolated string is rewritten to a call to <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.string\" title=\"Base.string\"><code>string()</code></a>. Compare:</p> <pre data-language=\"julia\">julia&gt; typeof(:(\"a should equal b\"))\nASCIIString\n\njulia&gt; typeof(:(\"a ($a) should equal b ($b)!\"))\nExpr\n\njulia&gt; dump(:(\"a ($a) should equal b ($b)!\"))\nExpr\n  head: Symbol string\n  args: Array(Any,(5,))\n    1: ASCIIString \"a (\"\n    2: Symbol a\n    3: ASCIIString \") should equal b (\"\n    4: Symbol b\n    5: ASCIIString \")!\"\n  typ: Any\n</pre> <p>So now instead of getting a plain string in <code>msg_body</code>, the macro is receiving a full expression that will need to be evaluated in order to display as expected. This can be spliced directly into the returned expression as an argument to the <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.string\" title=\"Base.string\"><code>string()</code></a> call; see <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/base/error.jl\">error.jl</a> for the complete implementation.</p> <p>The <code>@assert</code> macro makes great use of splicing into quoted expressions to simplify the manipulation of expressions inside the macro body.</p>   <h3 id=\"hygiene\">Hygiene</h3> <p>An issue that arises in more complex macros is that of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Hygienic_macro\">hygiene</a>. In short, macros must ensure that the variables they introduce in their returned expressions do not accidentally clash with existing variables in the surrounding code they expand into. Conversely, the expressions that are passed into a macro as arguments are often <em>expected</em> to evaluate in the context of the surrounding code, interacting with and modifying the existing variables. Another concern arises from the fact that a macro may be called in a different module from where it was defined. In this case we need to ensure that all global variables are resolved to the correct module. Julia already has a major advantage over languages with textual macro expansion (like C) in that it only needs to consider the returned expression. All the other variables (such as <code>msg</code> in <code>@assert</code> above) follow the <a class=\"reference internal\" href=\"../variables-and-scoping/index#man-variables-and-scoping\"><span>normal scoping block behavior</span></a>.</p> <p>To demonstrate these issues, let us consider writing a <code>@time</code> macro that takes an expression as its argument, records the time, evaluates the expression, records the time again, prints the difference between the before and after times, and then has the value of the expression as its final value. The macro might look like this:</p> <pre data-language=\"julia\">macro time(ex)\n  return quote\n    local t0 = time()\n    local val = $ex\n    local t1 = time()\n    println(\"elapsed time: \", t1-t0, \" seconds\")\n    val\n  end\nend\n</pre> <p>Here, we want <code>t0</code>, <code>t1</code>, and <code>val</code> to be private temporary variables, and we want <code>time</code> to refer to the <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.time\" title=\"Base.time\"><code>time()</code></a> function in the standard library, not to any <code>time</code> variable the user might have (the same applies to <code>println</code>). Imagine the problems that could occur if the user expression <code>ex</code> also contained assignments to a variable called <code>t0</code>, or defined its own <code>time</code> variable. We might get errors, or mysteriously incorrect behavior.</p> <p>Julia’s macro expander solves these problems in the following way. First, variables within a macro result are classified as either local or global. A variable is considered local if it is assigned to (and not declared global), declared local, or used as a function argument name. Otherwise, it is considered global. Local variables are then renamed to be unique (using the <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.gensym\" title=\"Base.gensym\"><code>gensym()</code></a> function, which generates new symbols), and global variables are resolved within the macro definition environment. Therefore both of the above concerns are handled; the macro’s locals will not conflict with any user variables, and <code>time</code> and <code>println</code> will refer to the standard library definitions.</p> <p>One problem remains however. Consider the following use of this macro:</p> <pre data-language=\"julia\">module MyModule\nimport Base.@time\n\ntime() = ... # compute something\n\n@time time()\nend\n</pre> <p>Here the user expression <code>ex</code> is a call to <code>time</code>, but not the same <code>time</code> function that the macro uses. It clearly refers to <code>MyModule.time</code>. Therefore we must arrange for the code in <code>ex</code> to be resolved in the macro call environment. This is done by “escaping” the expression with <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.esc\" title=\"Base.esc\"><code>esc()</code></a>:</p> <pre data-language=\"julia\">macro time(ex)\n    ...\n    local val = $(esc(ex))\n    ...\nend\n</pre> <p>An expression wrapped in this manner is left alone by the macro expander and simply pasted into the output verbatim. Therefore it will be resolved in the macro call environment.</p> <p>This escaping mechanism can be used to “violate” hygiene when necessary, in order to introduce or manipulate user variables. For example, the following macro sets <code>x</code> to zero in the call environment:</p> <pre data-language=\"julia\">macro zerox()\n  return esc(:(x = 0))\nend\n\nfunction foo()\n  x = 1\n  @zerox\n  x  # is zero\nend\n</pre> <p>This kind of manipulation of variables should be used judiciously, but is occasionally quite handy.</p>    <h2 id=\"code-generation\">Code Generation</h2> <p>When a significant amount of repetitive boilerplate code is required, it is common to generate it programmatically to avoid redundancy. In most languages, this requires an extra build step, and a separate program to generate the repetitive code. In Julia, expression interpolation and <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.eval\" title=\"Base.eval\"><code>eval()</code></a> allow such code generation to take place in the normal course of program execution. For example, the following code defines a series of operators on three arguments in terms of their 2-argument forms:</p> <pre data-language=\"julia\">for op = (:+, :*, :&amp;, :|, :$)\n  eval(quote\n    ($op)(a,b,c) = ($op)(($op)(a,b),c)\n  end)\nend\n</pre> <p>In this manner, Julia acts as its own <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Preprocessor\">preprocessor</a>, and allows code generation from inside the language. The above code could be written slightly more tersely using the <code>:</code> prefix quoting form:</p> <pre data-language=\"julia\">for op = (:+, :*, :&amp;, :|, :$)\n  eval(:(($op)(a,b,c) = ($op)(($op)(a,b),c)))\nend\n</pre> <p>This sort of in-language code generation, however, using the <code>eval(quote(...))</code> pattern, is common enough that Julia comes with a macro to abbreviate this pattern:</p> <pre data-language=\"julia\">for op = (:+, :*, :&amp;, :|, :$)\n  @eval ($op)(a,b,c) = ($op)(($op)(a,b),c)\nend\n</pre> <p>The <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@eval\" title=\"Base.@eval\"><code>@eval</code></a> macro rewrites this call to be precisely equivalent to the above longer versions. For longer blocks of generated code, the expression argument given to <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@eval\" title=\"Base.@eval\"><code>@eval</code></a> can be a block:</p> <pre data-language=\"julia\">@eval begin\n  # multiple lines\nend\n</pre>   <h2 id=\"man-non-standard-string-literals2\">Non-Standard String Literals</h2> <p id=\"non-standard-string-literals\">Recall from <a class=\"reference internal\" href=\"../strings/index#man-non-standard-string-literals\"><span>Strings</span></a> that string literals prefixed by an identifier are called non-standard string literals, and can have different semantics than un-prefixed string literals. For example:</p> <ul class=\"simple\"> <li>\n<code>r\"^\\s*(?:#|$)\"</code> produces a regular expression object rather than a string</li> <li>\n<code>b\"DATA\\xff\\u2200\"</code> is a byte array literal for <code>[68,65,84,65,255,226,136,128]</code>.</li> </ul> <p>Perhaps surprisingly, these behaviors are not hard-coded into the Julia parser or compiler. Instead, they are custom behaviors provided by a general mechanism that anyone can use: prefixed string literals are parsed as calls to specially-named macros. For example, the regular expression macro is just the following:</p> <pre data-language=\"julia\">macro r_str(p)\n  Regex(p)\nend\n</pre> <p>That’s all. This macro says that the literal contents of the string literal <code>r\"^\\s*(?:#|$)\"</code> should be passed to the <code>@r_str</code> macro and the result of that expansion should be placed in the syntax tree where the string literal occurs. In other words, the expression <code>r\"^\\s*(?:#|$)\"</code> is equivalent to placing the following object directly into the syntax tree:</p> <pre data-language=\"julia\">Regex(\"^\\\\s*(?:#|\\$)\")\n</pre> <p>Not only is the string literal form shorter and far more convenient, but it is also more efficient: since the regular expression is compiled and the <code>Regex</code> object is actually created <em>when the code is compiled</em>, the compilation occurs only once, rather than every time the code is executed. Consider if the regular expression occurs in a loop:</p> <pre data-language=\"julia\">for line = lines\n  m = match(r\"^\\s*(?:#|$)\", line)\n  if m == nothing\n    # non-comment\n  else\n    # comment\n  end\nend\n</pre> <p>Since the regular expression <code>r\"^\\s*(?:#|$)\"</code> is compiled and inserted into the syntax tree when this code is parsed, the expression is only compiled once instead of each time the loop is executed. In order to accomplish this without macros, one would have to write this loop like this:</p> <pre data-language=\"julia\">re = Regex(\"^\\\\s*(?:#|\\$)\")\nfor line = lines\n  m = match(re, line)\n  if m == nothing\n    # non-comment\n  else\n    # comment\n  end\nend\n</pre> <p>Moreover, if the compiler could not determine that the regex object was constant over all loops, certain optimizations might not be possible, making this version still less efficient than the more convenient literal form above. Of course, there are still situations where the non-literal form is more convenient: if one needs to interpolate a variable into the regular expression, one must take this more verbose approach; in cases where the regular expression pattern itself is dynamic, potentially changing upon each loop iteration, a new regular expression object must be constructed on each iteration. In the vast majority of use cases, however, regular expressions are not constructed based on run-time data. In this majority of cases, the ability to write regular expressions as compile-time values is invaluable.</p> <p>The mechanism for user-defined string literals is deeply, profoundly powerful. Not only are Julia’s non-standard literals implemented using it, but also the command literal syntax (<code>`echo \"Hello, $person\"`</code>) is implemented with the following innocuous-looking macro:</p> <pre data-language=\"julia\">macro cmd(str)\n  :(cmd_gen($shell_parse(str)))\nend\n</pre> <p>Of course, a large amount of complexity is hidden in the functions used in this macro definition, but they are just functions, written entirely in Julia. You can read their source and see precisely what they do — and all they do is construct expression objects to be inserted into your program’s syntax tree.</p>   <h2 id=\"generated-functions\">Generated functions</h2> <p>A very special macro is <code>@generated</code>, which allows you to define so-called <em>generated functions</em>. These have the capability to generate specialized code depending on the types of their arguments with more flexibility and/or less code than what can be achieved with multiple dispatch. While macros work with expressions at parsing-time and cannot access the types of their inputs, a generated function gets expanded at a time when the types of the arguments are known, but the function is not yet compiled.</p> <p>Instead of performing some calculation or action, a generated function declaration returns a quoted expression which then forms the body for the method corresponding to the types of the arguments. When called, the body expression is compiled (or fetched from a cache, on subsequent calls) and only the returned expression - not the code that generated it - is evaluated. Thus, generated functions provide a flexible framework to move work from run-time to compile-time.</p> <p>When defining generated functions, there are three main differences to ordinary functions:</p> <ol class=\"arabic simple\"> <li>You annotate the function declaration with the <code>@generated</code> macro. This adds some information to the AST that lets the compiler know that this is a generated function.</li> <li>In the body of the generated function you only have access to the <em>types</em> of the arguments, not their values.</li> <li>Instead of calculating something or performing some action, you return a <em>quoted expression</em> which, when evaluated, does what you want.</li> </ol> <p>It’s easiest to illustrate this with an example. We can declare a generated function <code>foo</code> as</p> <pre data-language=\"julia\">julia&gt; @generated function foo(x)\n           println(x)\n           return :(x*x)\n       end\nfoo (generic function with 1 method)\n</pre> <p>Note that the body returns a quoted expression, namely <code>:(x*x)</code>, rather than just the value of <code>x*x</code>.</p> <p>From the caller’s perspective, they are very similar to regular functions; in fact, you don’t have to know if you’re calling a regular or generated function - the syntax and result of the call is just the same. Let’s see how <code>foo</code> behaves:</p> <pre data-language=\"julia\"># note: output is from println() statement in the body\njulia&gt; x = foo(2);\nInt64\n\njulia&gt; x           # now we print x\n4\n\njulia&gt; y = foo(\"bar\");\nASCIIString\n\njulia&gt; y\n\"barbar\"\n</pre> <p>So, we see that in the body of the generated function, <code>x</code> is the <em>type</em> of the passed argument, and the value returned by the generated function, is the result of evaluating the quoted expression we returned from the definition, now with the <em>value</em> of <code>x</code>.</p> <p>What happens if we evaluate <code>foo</code> again with a type that we have already used?</p> <pre data-language=\"julia\">julia&gt; foo(4)\n16\n</pre> <p>Note that there is no printout of <code>Int64</code>. The body of the generated function is only executed <em>once</em> (not entirely true, see note below) when the method for that specific set of argument types is compiled. After that, the expression returned from the generated function on the first invocation is re-used as the method body.</p> <p>The reason for the disclaimer above is that the number of times a generated function is generated is really an implementation detail; it <em>might</em> be only once, but it <em>might</em> also be more often. As a consequence, you should <em>never</em> write a generated function with side effects - when, and how often, the side effects occur is undefined. (This is true for macros too - and just like for macros, the use of <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.eval\" title=\"Base.eval\"><code>eval()</code></a> in a generated function is a sign that you’re doing something the wrong way.)</p> <p>The example generated function <code>foo</code> above did not do anything a normal function <code>foo(x)=x*x</code> could not do, except printing the type on the first invocation (and incurring a higher compile-time cost). However, the power of a generated function lies in its ability to compute different quoted expression depending on the types passed to it:</p> <pre data-language=\"julia\">julia&gt; @generated function bar(x)\n           if x &lt;: Integer\n               return :(x^2)\n           else\n               return :(x)\n           end\n       end\nbar (generic function with 1 method)\n\njulia&gt; bar(4)\n16\njulia&gt; bar(\"baz\")\n\"baz\"\n</pre> <p>(although of course this contrived example is easily implemented using multiple dispatch...)</p> <p>We can, of course, abuse this to produce some interesting behavior:</p> <pre data-language=\"julia\">julia&gt; @generated function baz(x)\n           if rand() &lt; .9\n               return :(x^2)\n           else\n               return :(\"boo!\")\n           end\n       end\nbaz (generic function with 1 method)\n</pre> <p>Since the body of the generated function is non-deterministic, its behavior is undefined; the expression returned on the <em>first</em> invocation will be used for <em>all</em> subsequent invocations with the same type (again, with the exception covered by the disclaimer above). When we call the generated function with <code>x</code> of a new type, <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.rand\" title=\"Base.rand\"><code>rand()</code></a> will be called again to see which method body to use for the new type. In this case, for one <em>type</em> out of ten, <code>baz(x)</code> will return the string <code>\"boo!\"</code>.</p> <p><em>Don’t copy these examples!</em></p> <p>These examples are hopefully helpful to illustrate how generated functions work, both in the definition end and at the call site; however, <em>don’t copy them</em>, for the following reasons:</p> <ul class=\"simple\"> <li>the <code>foo</code> function has side-effects, and it is undefined exactly when, how often or how many times these side-effects will occur</li> <li>the <code>bar</code> function solves a problem that is better solved with multiple dispatch - defining <code>bar(x) = x</code> and <code>bar(x::Integer) = x^2</code> will do the same thing, but it is both simpler and faster.</li> <li>the <code>baz</code> function is pathologically insane</li> </ul> <p>Instead, now that we have a better understanding for how generated functions work, let’s use them to build some more advanced functionality...</p>  <h3 id=\"an-advanced-example\">An advanced example</h3> <p>Julia’s base library has a <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sub2ind\" title=\"Base.sub2ind\"><code>sub2ind()</code></a> function to calculate a linear index into an n-dimensional array, based on a set of n multilinear indices - in other words, to calculate the index <code>i</code> that can be used to index into an array <code>A</code> using <code>A[i]</code>, instead of <code>A[x,y,z,...]</code>. One possible implementation is the following:</p> <pre data-language=\"julia\">function sub2ind_loop{N}(dims::NTuple{N}, I::Integer...)\n    ind = I[N] - 1\n    for i = N-1:-1:1\n        ind = I[i]-1 + dims[i]*ind\n    end\n    return ind + 1\nend\n</pre> <p>The same thing can be done using recursion:</p> <pre data-language=\"julia\">sub2ind_rec(dims::Tuple{}) = 1\nsub2ind_rec(dims::Tuple{},i1::Integer, I::Integer...) =\n    i1==1 ? sub2ind_rec(dims,I...) : throw(BoundsError())\nsub2ind_rec(dims::Tuple{Integer,Vararg{Integer}}, i1::Integer) = i1\nsub2ind_rec(dims::Tuple{Integer,Vararg{Integer}}, i1::Integer, I::Integer...) =\n    i1 + dims[1]*(sub2ind_rec(tail(dims),I...)-1)\n</pre> <p>Both these implementations, although different, do essentially the same thing: a runtime loop over the dimensions of the array, collecting the offset in each dimension into the final index.</p> <p>However, all the information we need for the loop is embedded in the type information of the arguments. Thus, we can utilize generated functions to move the iteration to compile-time; in compiler parlance, we use generated functions to manually unroll the loop. The body becomes almost identical, but instead of calculating the linear index, we build up an <em>expression</em> that calculates the index:</p> <pre data-language=\"julia\">@generated function sub2ind_gen{N}(dims::NTuple{N}, I::Integer...)\n    ex = :(I[$N] - 1)\n    for i = N-1:-1:1\n        ex = :(I[$i] - 1 + dims[$i]*$ex)\n    end\n    return :($ex + 1)\nend\n</pre> <p><strong>What code will this generate?</strong></p> <p>An easy way to find out, is to extract the body into another (regular) function:</p> <pre data-language=\"julia\">julia&gt; @generated function sub2ind_gen{N}(dims::NTuple{N}, I::Integer...)\n           sub2ind_gen_impl(dims, I...)\n       end\nsub2ind_gen (generic function with 1 method)\n\njulia&gt; function sub2ind_gen_impl{N}(dims::Type{NTuple{N}}, I...)\n           length(I) == N || return :(error(\"partial indexing is unsupported\"))\n           ex = :(I[$N] - 1)\n           for i = N-1:-1:1\n               ex = :(I[$i] - 1 + dims[$i]*$ex)\n           end\n           return :($ex + 1)\n       end\nsub2ind_gen_impl (generic function with 1 method)\n</pre> <p>We can now execute <code>sub2ind_gen_impl</code> and examine the expression it returns:</p> <pre data-language=\"julia\">julia&gt; sub2ind_gen_impl(Tuple{Int,Int}, Int, Int)\n:(((I[1] - 1) + dims[1] * (I[2] - 1)) + 1)\n</pre> <p>So, the method body that will be used here doesn’t include a loop at all - just indexing into the two tuples, multiplication and addition/subtraction. All the looping is performed compile-time, and we avoid looping during execution entirely. Thus, we only loop <em>once per type</em>, in this case once per <code>N</code> (except in edge cases where the function is generated more than once - see disclaimer above).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/metaprogramming/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/metaprogramming/</a>\n  </p>\n</div>\n","manual/arrays/index":"<h1 id=\"man-arrays\">Multi-dimensional Arrays</h1> <p>Julia, like most technical computing languages, provides a first-class array implementation. Most technical computing languages pay a lot of attention to their array implementation at the expense of other containers. Julia does not treat arrays in any special way. The array library is implemented almost completely in Julia itself, and derives its performance from the compiler, just like any other code written in Julia. As such, it’s also possible to define custom array types by inheriting from <code>AbstractArray.</code> See the <a class=\"reference internal\" href=\"../interfaces/index#man-interfaces-abstractarray\"><span>manual section on the AbstractArray interface</span></a> for more details on implementing a custom array type.</p> <p>An array is a collection of objects stored in a multi-dimensional grid. In the most general case, an array may contain objects of type <code>Any</code>. For most computational purposes, arrays should contain objects of a more specific type, such as <code>Float64</code> or <code>Int32</code>.</p> <p>In general, unlike many other technical computing languages, Julia does not expect programs to be written in a vectorized style for performance. Julia’s compiler uses type inference and generates optimized code for scalar array indexing, allowing programs to be written in a style that is convenient and readable, without sacrificing performance, and using less memory at times.</p> <p>In Julia, all arguments to functions are passed by reference. Some technical computing languages pass arrays by value, and this is convenient in many cases. In Julia, modifications made to input arrays within a function will be visible in the parent function. The entire Julia array library ensures that inputs are not modified by library functions. User code, if it needs to exhibit similar behavior, should take care to create a copy of inputs that it may modify.</p>  <h2 id=\"arrays\">Arrays</h2>  <h3 id=\"basic-functions\">Basic Functions</h3> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Function</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.eltype\" title=\"Base.eltype\"><code>eltype(A)</code></a></td> <td>the type of the elements contained in <code>A</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.length\" title=\"Base.length\"><code>length(A)</code></a></td> <td>the number of elements in <code>A</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.ndims\" title=\"Base.ndims\"><code>ndims(A)</code></a></td> <td>the number of dimensions of <code>A</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.size\" title=\"Base.size\"><code>size(A)</code></a></td> <td>a tuple containing the dimensions of <code>A</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.size\" title=\"Base.size\"><code>size(A,n)</code></a></td> <td>the size of <code>A</code> in a particular dimension</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.eachindex\" title=\"Base.eachindex\"><code>eachindex(A)</code></a></td> <td>an efficient iterator for visiting each position in <code>A</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.stride\" title=\"Base.stride\"><code>stride(A,k)</code></a></td> <td>the stride (linear index distance between adjacent elements) along dimension <code>k</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.strides\" title=\"Base.strides\"><code>strides(A)</code></a></td> <td>a tuple of the strides in each dimension</td> </tr>  </table>   <h3 id=\"construction-and-initialization\">Construction and Initialization</h3> <p>Many functions for constructing and initializing arrays are provided. In the following list of such functions, calls with a <code>dims...</code> argument can either take a single tuple of dimension sizes or a series of dimension sizes passed as a variable number of arguments.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Function</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.Array\" title=\"Base.Array\"><code>Array(type, dims...)</code></a></td> <td>an uninitialized dense array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.cell\" title=\"Base.cell\"><code>cell(dims...)</code></a></td> <td>an uninitialized cell array (heterogeneous array)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.zeros\" title=\"Base.zeros\"><code>zeros(type, dims...)</code></a></td> <td>an array of all zeros of specified type, defaults to <code>Float64</code> if <code>type</code> not specified</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.zeros\" title=\"Base.zeros\"><code>zeros(A)</code></a></td> <td>an array of all zeros of same element type and shape of <code>A</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.ones\" title=\"Base.ones\"><code>ones(type, dims...)</code></a></td> <td>an array of all ones of specified type, defaults to <code>Float64</code> if <code>type</code> not specified</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.ones\" title=\"Base.ones\"><code>ones(A)</code></a></td> <td>an array of all ones of same element type and shape of <code>A</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.trues\" title=\"Base.trues\"><code>trues(dims...)</code></a></td> <td>a <code>Bool</code> array with all values <code>true</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.trues\" title=\"Base.trues\"><code>trues(A)</code></a></td> <td>a <code>Bool</code> array with all values <code>true</code> and the shape of <code>A</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.falses\" title=\"Base.falses\"><code>falses(dims...)</code></a></td> <td>a <code>Bool</code> array with all values <code>false</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.falses\" title=\"Base.falses\"><code>falses(A)</code></a></td> <td>a <code>Bool</code> array with all values <code>false</code> and the shape of <code>A</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.reshape\" title=\"Base.reshape\"><code>reshape(A, dims...)</code></a></td> <td>an array with the same data as the given array, but with different dimensions.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.copy\" title=\"Base.copy\"><code>copy(A)</code></a></td> <td>copy <code>A</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/base/index#Base.deepcopy\" title=\"Base.deepcopy\"><code>deepcopy(A)</code></a></td> <td>copy <code>A</code>, recursively copying its elements</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.similar\" title=\"Base.similar\"><code>similar(A, element_type, dims...)</code></a></td> <td>an uninitialized array of the same type as the given array (dense, sparse, etc.), but with the specified element type and dimensions. The second and third arguments are both optional, defaulting to the element type and dimensions of <code>A</code> if omitted.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.reinterpret\" title=\"Base.reinterpret\"><code>reinterpret(type, A)</code></a></td> <td>an array with the same binary data as the given array, but with the specified element type</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.rand\" title=\"Base.rand\"><code>rand(dims)</code></a></td> <td>\n<a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a> of <code>Float64</code>s with random, iid[#]_ and uniformly distributed values in the half-open interval <span class=\"math\">\\([0, 1)\\)</span>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.randn\" title=\"Base.randn\"><code>randn(dims)</code></a></td> <td>\n<a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a> of <code>Float64</code>s with random, iid and standard normally distributed random values</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.eye\" title=\"Base.eye\"><code>eye(n)</code></a></td> <td>\n<code>n</code>-by-<code>n</code> identity matrix</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.eye\" title=\"Base.eye\"><code>eye(m, n)</code></a></td> <td>\n<code>m</code>-by-<code>n</code> identity matrix</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.linspace\" title=\"Base.linspace\"><code>linspace(start, stop, n)</code></a></td> <td>range of <code>n</code> linearly spaced elements from <code>start</code> to <code>stop</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.fill!\" title=\"Base.fill!\"><code>fill!(A, x)</code></a></td> <td>fill the array <code>A</code> with the value <code>x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.fill\" title=\"Base.fill\"><code>fill(x, dims)</code></a></td> <td>create an array filled with the value <code>x</code>\n</td> </tr>  </table> <table class=\"docutils footnote\" frame=\"void\" id=\"id1\" rules=\"none\">   <tr>\n<td class=\"label\">[1]</td>\n<td>\n<em>iid</em>, independently and identically distributed.</td>\n</tr>  </table> <p>The syntax <code>[A, B, C, ...]</code> constructs a 1-d array (vector) of its arguments.</p>   <h3 id=\"concatenation\">Concatenation</h3> <p>Arrays can be constructed and also concatenated using the following functions:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Function</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.cat\" title=\"Base.cat\"><code>cat(k, A...)</code></a></td> <td>concatenate input n-d arrays along the dimension <code>k</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.vcat\" title=\"Base.vcat\"><code>vcat(A...)</code></a></td> <td>shorthand for <code>cat(1, A...)</code>\n</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.hcat\" title=\"Base.hcat\"><code>hcat(A...)</code></a></td> <td>shorthand for <code>cat(2, A...)</code>\n</td> </tr>  </table> <p>Scalar values passed to these functions are treated as 1-element arrays.</p> <p>The concatenation functions are used so often that they have special syntax:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Expression</th> <th class=\"head\">Calls</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>[A; B; C; ...]</code></td> <td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.vcat\" title=\"Base.vcat\"><code>vcat()</code></a></td> </tr> <tr class=\"row-odd\">\n<td><code>[A B C ...]</code></td> <td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.hcat\" title=\"Base.hcat\"><code>hcat()</code></a></td> </tr> <tr class=\"row-even\">\n<td><code>[A B; C D; ...]</code></td> <td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.hvcat\" title=\"Base.hvcat\"><code>hvcat()</code></a></td> </tr>  </table> <p><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.hvcat\" title=\"Base.hvcat\"><code>hvcat()</code></a> concatenates in both dimension 1 (with semicolons) and dimension 2 (with spaces).</p>   <h3 id=\"typed-array-initializers\">Typed array initializers</h3> <p>An array with a specific element type can be constructed using the syntax <code>T[A, B, C, ...]</code>. This will construct a 1-d array with element type <code>T</code>, initialized to contain elements <code>A</code>, <code>B</code>, <code>C</code>, etc. For example <code>Any[x, y, z]</code> constructs a heterogeneous array that can contain any values.</p> <p>Concatenation syntax can similarly be prefixed with a type to specify the element type of the result.</p> <pre data-language=\"julia\">julia&gt; [[1 2] [3 4]]\n1x4 Array{Int64,2}:\n 1  2  3  4\n\njulia&gt; Int8[[1 2] [3 4]]\n1x4 Array{Int8,2}:\n 1  2  3  4\n</pre>   <h3 id=\"id2\">Comprehensions</h3> <p id=\"comprehensions\">Comprehensions provide a general and powerful way to construct arrays. Comprehension syntax is similar to set construction notation in mathematics:</p> <pre data-language=\"julia\">A = [ F(x,y,...) for x=rx, y=ry, ... ]\n</pre> <p>The meaning of this form is that <code>F(x,y,...)</code> is evaluated with the variables <code>x</code>, <code>y</code>, etc. taking on each value in their given list of values. Values can be specified as any iterable object, but will commonly be ranges like <code>1:n</code> or <code>2:(n-1)</code>, or explicit arrays of values like <code>[1.2, 3.4, 5.7]</code>. The result is an N-d dense array with dimensions that are the concatenation of the dimensions of the variable ranges <code>rx</code>, <code>ry</code>, etc. and each <code>F(x,y,...)</code> evaluation returns a scalar.</p> <p>The following example computes a weighted average of the current element and its left and right neighbor along a 1-d grid. :</p> <pre data-language=\"julia\">julia&gt; const x = rand(8)\n8-element Array{Float64,1}:\n 0.843025\n 0.869052\n 0.365105\n 0.699456\n 0.977653\n 0.994953\n 0.41084\n 0.809411\n\njulia&gt; [ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]\n6-element Array{Float64,1}:\n 0.736559\n 0.57468\n 0.685417\n 0.912429\n 0.8446\n 0.656511\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In the above example, <code>x</code> is declared as constant because type inference in Julia does not work as well on non-constant global variables.</p> </div> <p>The resulting array type is inferred from the expression; in order to control the type explicitly, the type can be prepended to the comprehension. For example, in the above example we could have avoided declaring <code>x</code> as constant, and ensured that the result is of type <code>Float64</code> by writing:</p> <pre data-language=\"julia\">Float64[ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]\n</pre>   <h3 id=\"man-array-indexing\">Indexing</h3> <p id=\"indexing\">The general syntax for indexing into an n-dimensional array A is:</p> <pre data-language=\"julia\">X = A[I_1, I_2, ..., I_n]\n</pre> <p>where each <code>I_k</code> may be:</p> <ol class=\"arabic simple\"> <li>A scalar integer</li> <li>A <code>Range</code> of the form <code>a:b</code>, or <code>a:b:c</code>\n</li> <li>A <code>:</code> or <code>Colon()</code> to select entire dimensions</li> <li>An arbitrary integer vector, including the empty vector <code>[]</code>\n</li> <li>A boolean vector</li> </ol> <p>The result <code>X</code> generally has dimensions <code>(length(I_1), length(I_2), ..., length(I_n))</code>, with location <code>(i_1, i_2, ..., i_n)</code> of <code>X</code> containing the value <code>A[I_1[i_1], I_2[i_2], ..., I_n[i_n]]</code>. Trailing dimensions indexed with scalars are dropped. For example, the dimensions of <code>A[I, 1]</code> will be <code>(length(I),)</code>. Boolean vectors are first transformed with <code>find</code>; the size of a dimension indexed by a boolean vector will be the number of true values in the vector. As a special part of this syntax, the <code>end</code> keyword may be used to represent the last index of each dimension within the indexing brackets, as determined by the size of the innermost array being indexed.</p> <p>Alternatively, single elements of a multidimensional array can be indexed as</p> <pre data-language=\"julia\">x = A[I]\n</pre> <p>where <code>I</code> is a <code>CartesianIndex</code>, effectively an <code>n</code>-tuple of integers. See <a class=\"reference internal\" href=\"#man-array-iteration\"><span>Iteration</span></a> below.</p> <p>Indexing syntax is equivalent to a call to <code>getindex</code>:</p> <pre data-language=\"julia\">X = getindex(A, I_1, I_2, ..., I_n)\n</pre> <p>Example:</p> <pre data-language=\"julia\">julia&gt; x = reshape(1:16, 4, 4)\n4x4 Array{Int64,2}:\n 1  5   9  13\n 2  6  10  14\n 3  7  11  15\n 4  8  12  16\n\njulia&gt; x[2:3, 2:end-1]\n2x2 Array{Int64,2}:\n 6  10\n 7  11\n</pre> <p>Empty ranges of the form <code>n:n-1</code> are sometimes used to indicate the inter-index location between <code>n-1</code> and <code>n</code>. For example, the <a class=\"reference internal\" href=\"../../stdlib/sort/index#Base.searchsorted\" title=\"Base.searchsorted\"><code>searchsorted()</code></a> function uses this convention to indicate the insertion point of a value not found in a sorted array:</p> <pre data-language=\"julia\">julia&gt; a = [1,2,5,6,7];\n\njulia&gt; searchsorted(a, 3)\n3:2\n</pre>   <h3 id=\"assignment\">Assignment</h3> <p>The general syntax for assigning values in an n-dimensional array A is:</p> <pre data-language=\"julia\">A[I_1, I_2, ..., I_n] = X\n</pre> <p>where each <code>I_k</code> may be:</p> <ol class=\"arabic simple\"> <li>A scalar integer</li> <li>A <code>Range</code> of the form <code>a:b</code>, or <code>a:b:c</code>\n</li> <li>A <code>:</code> or <code>Colon()</code> to select entire dimensions</li> <li>An arbitrary integer vector, including the empty vector <code>[]</code>\n</li> <li>A boolean vector</li> </ol> <p>If <code>X</code> is an array, its size must be <code>(length(I_1), length(I_2), ..., length(I_n))</code>, and the value in location <code>i_1, i_2, ..., i_n</code> of <code>A</code> is overwritten with the value <code>X[I_1[i_1], I_2[i_2], ..., I_n[i_n]]</code>. If <code>X</code> is not an array, its value is written to all referenced locations of <code>A</code>.</p> <p>A boolean vector used as an index behaves as in <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.getindex\" title=\"Base.getindex\"><code>getindex()</code></a> (it is first transformed with <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.find\" title=\"Base.find\"><code>find()</code></a>).</p> <p>Index assignment syntax is equivalent to a call to <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.setindex!\" title=\"Base.setindex!\"><code>setindex!()</code></a>:</p> <pre data-language=\"julia\">setindex!(A, X, I_1, I_2, ..., I_n)\n</pre> <p>Example:</p> <pre data-language=\"julia\">julia&gt; x = reshape(1:9, 3, 3)\n3x3 Array{Int64,2}:\n 1  4  7\n 2  5  8\n 3  6  9\n\njulia&gt; x[1:2, 2:3] = -1\n-1\n\njulia&gt; x\n3x3 Array{Int64,2}:\n 1  -1  -1\n 2  -1  -1\n 3   6   9\n</pre>   <h3 id=\"man-array-iteration\">Iteration</h3> <p id=\"iteration\">The recommended ways to iterate over a whole array are</p> <pre data-language=\"julia\">for a in A\n    # Do something with the element a\nend\n\nfor i in eachindex(A)\n    # Do something with i and/or A[i]\nend\n</pre> <p>The first construct is used when you need the value, but not index, of each element. In the second construct, <code>i</code> will be an <code>Int</code> if <code>A</code> is an array type with fast linear indexing; otherwise, it will be a <code>CartesianIndex</code>:</p> <pre data-language=\"julia\">A = rand(4,3)\nB = sub(A, 1:3, 2:3)\njulia&gt; for i in eachindex(B)\n           @show i\n       end\n       i = Base.IteratorsMD.CartesianIndex_2(1,1)\n       i = Base.IteratorsMD.CartesianIndex_2(2,1)\n       i = Base.IteratorsMD.CartesianIndex_2(3,1)\n       i = Base.IteratorsMD.CartesianIndex_2(1,2)\n       i = Base.IteratorsMD.CartesianIndex_2(2,2)\n       i = Base.IteratorsMD.CartesianIndex_2(3,2)\n</pre> <p>In contrast with <code>for i = 1:length(A)</code>, iterating with <code>eachindex</code> provides an efficient way to iterate over any array type.</p>   <h3 id=\"array-traits\">Array traits</h3> <p>If you write a custom <code>AbstractArray</code> type, you can specify that it has fast linear indexing using</p> <pre data-language=\"julia\">Base.linearindexing{T&lt;:MyArray}(::Type{T}) = LinearFast()\n</pre> <p>This setting will cause <code>eachindex</code> iteration over a <code>MyArray</code> to use integers. If you don’t specify this trait, the default value <code>LinearSlow()</code> is used.</p>   <h3 id=\"vectorized-operators-and-functions\">Vectorized Operators and Functions</h3> <p>The following operators are supported for arrays. The dot version of a binary operator should be used for elementwise operations.</p> <ol class=\"arabic simple\"> <li>Unary arithmetic — <code>-</code>, <code>+</code>, <code>!</code>\n</li> <li>Binary arithmetic — <code>+</code>, <code>-</code>, <code>*</code>, <code>.*</code>, <code>/</code>, <code>./</code>, <code>\\</code>, <code>.\\</code>, <code>^</code>, <code>.^</code>, <code>div</code>, <code>mod</code>\n</li> <li>Comparison — <code>.==</code>, <code>.!=</code>, <code>.&lt;</code>, <code>.&lt;=</code>, <code>.&gt;</code>, <code>.&gt;=</code>\n</li> <li>Unary Boolean or bitwise — <code>~</code>\n</li> <li>Binary Boolean or bitwise — <code>&amp;</code>, <code>|</code>, <code>$</code>\n</li> </ol> <p>Some operators without dots operate elementwise anyway when one argument is a scalar. These operators are <code>*</code>, <code>+</code>, <code>-</code>, and the bitwise operators. The operators <code>/</code> and <code>\\</code> operate elementwise when the denominator is a scalar.</p> <p>Note that comparisons such as <code>==</code> operate on whole arrays, giving a single boolean answer. Use dot operators for elementwise comparisons.</p> <p>The following built-in functions are also vectorized, whereby the functions act elementwise:</p> <pre data-language=\"julia\">abs abs2 angle cbrt\nairy airyai airyaiprime airybi airybiprime airyprime\nacos acosh asin asinh atan atan2 atanh\nacsc acsch asec asech acot acoth\ncos  cospi cosh  sin  sinpi sinh  tan  tanh  sinc  cosc\ncsc  csch  sec  sech  cot  coth\nacosd asind atand asecd acscd acotd\ncosd  sind  tand  secd  cscd  cotd\nbesselh besseli besselj besselj0 besselj1 besselk bessely bessely0 bessely1\nexp  erf  erfc  erfinv erfcinv exp2  expm1\nbeta dawson digamma erfcx erfi\nexponent eta zeta gamma\nhankelh1 hankelh2\n ceil  floor  round  trunc\nisfinite isinf isnan\nlbeta lfact lgamma\nlog log10 log1p log2\ncopysign max min significand\nsqrt hypot\n</pre> <p>Note that there is a difference between <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.min\" title=\"Base.min\"><code>min()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.max\" title=\"Base.max\"><code>max()</code></a>, which operate elementwise over multiple array arguments, and <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.minimum\" title=\"Base.minimum\"><code>minimum()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.maximum\" title=\"Base.maximum\"><code>maximum()</code></a>, which find the smallest and largest values within an array.</p> <p>Julia provides the <code>@vectorize_1arg()</code> and <code>@vectorize_2arg()</code> macros to automatically vectorize any function of one or two arguments respectively. Each of these takes two arguments, namely the <code>Type</code> of argument (which is usually chosen to be the most general possible) and the name of the function to vectorize. Here is a simple example:</p> <pre data-language=\"julia\">julia&gt; square(x) = x^2\nsquare (generic function with 1 method)\n\njulia&gt; @vectorize_1arg Number square\nsquare (generic function with 4 methods)\n\njulia&gt; methods(square)\n# 4 methods for generic function \"square\":\nsquare{T&lt;:Number}(::AbstractArray{T&lt;:Number,1}) at operators.jl:380\nsquare{T&lt;:Number}(::AbstractArray{T&lt;:Number,2}) at operators.jl:381\nsquare{T&lt;:Number}(::AbstractArray{T&lt;:Number,N}) at operators.jl:383\nsquare(x) at none:1\n\njulia&gt; square([1 2 4; 5 6 7])\n2x3 Array{Int64,2}:\n  1   4  16\n 25  36  49\n</pre>   <h3 id=\"broadcasting\">Broadcasting</h3> <p>It is sometimes useful to perform element-by-element binary operations on arrays of different sizes, such as adding a vector to each column of a matrix. An inefficient way to do this would be to replicate the vector to the size of the matrix:</p> <pre data-language=\"julia\">julia&gt; a = rand(2,1); A = rand(2,3);\n\njulia&gt; repmat(a,1,3)+A\n2x3 Array{Float64,2}:\n 1.20813  1.82068  1.25387\n 1.56851  1.86401  1.67846\n</pre> <p>This is wasteful when dimensions get large, so Julia offers <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.broadcast\" title=\"Base.broadcast\"><code>broadcast()</code></a>, which expands singleton dimensions in array arguments to match the corresponding dimension in the other array without using extra memory, and applies the given function elementwise:</p> <pre data-language=\"julia\">julia&gt; broadcast(+, a, A)\n2x3 Array{Float64,2}:\n 1.20813  1.82068  1.25387\n 1.56851  1.86401  1.67846\n\njulia&gt; b = rand(1,2)\n1x2 Array{Float64,2}:\n 0.867535  0.00457906\n\njulia&gt; broadcast(+, a, b)\n2x2 Array{Float64,2}:\n 1.71056  0.847604\n 1.73659  0.873631\n</pre> <p>Elementwise operators such as <code>.+</code> and <code>.*</code> perform broadcasting if necessary. There is also a <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.broadcast!\" title=\"Base.broadcast!\"><code>broadcast!()</code></a> function to specify an explicit destination, and <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.broadcast_getindex\" title=\"Base.broadcast_getindex\"><code>broadcast_getindex()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.broadcast_setindex!\" title=\"Base.broadcast_setindex!\"><code>broadcast_setindex!()</code></a> that broadcast the indices before indexing.</p>   <h3 id=\"implementation\">Implementation</h3> <p>The base array type in Julia is the abstract type <code>AbstractArray{T,N}</code>. It is parametrized by the number of dimensions <code>N</code> and the element type <code>T</code>. <code>AbstractVector</code> and <code>AbstractMatrix</code> are aliases for the 1-d and 2-d cases. Operations on <code>AbstractArray</code> objects are defined using higher level operators and functions, in a way that is independent of the underlying storage. These operations generally work correctly as a fallback for any specific array implementation.</p> <p>The <code>AbstractArray</code> type includes anything vaguely array-like, and implementations of it might be quite different from conventional arrays. For example, elements might be computed on request rather than stored. However, any concrete <code>AbstractArray{T,N}</code> type should generally implement at least <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.size\" title=\"Base.size\"><code>size(A)</code></a> (returning an <code>Int</code> tuple), <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.getindex\" title=\"Base.getindex\"><code>getindex(A,i)</code></a> and <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.getindex\" title=\"Base.getindex\"><code>getindex(A,i1,...,iN)</code></a>; mutable arrays should also implement <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.setindex!\" title=\"Base.setindex!\"><code>setindex!()</code></a>. It is recommended that these operations have nearly constant time complexity, or technically Õ(1) complexity, as otherwise some array functions may be unexpectedly slow. Concrete types should also typically provide a <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.similar\" title=\"Base.similar\"><code>similar(A,T=eltype(A),dims=size(A))</code></a> method, which is used to allocate a similar array for <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.copy\" title=\"Base.copy\"><code>copy()</code></a> and other out-of-place operations. No matter how an <code>AbstractArray{T,N}</code> is represented internally, <code>T</code> is the type of object returned by <em>integer</em> indexing (<code>A[1,\n..., 1]</code>, when <code>A</code> is not empty) and <code>N</code> should be the length of the tuple returned by <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.size\" title=\"Base.size\"><code>size()</code></a>.</p> <p><code>DenseArray</code> is an abstract subtype of <code>AbstractArray</code> intended to include all arrays that are laid out at regular offsets in memory, and which can therefore be passed to external C and Fortran functions expecting this memory layout. Subtypes should provide a method <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.stride\" title=\"Base.stride\"><code>stride(A,k)</code></a> that returns the “stride” of dimension <code>k</code>: increasing the index of dimension <code>k</code> by <code>1</code> should increase the index <code>i</code> of <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.getindex\" title=\"Base.getindex\"><code>getindex(A,i)</code></a> by <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.stride\" title=\"Base.stride\"><code>stride(A,k)</code></a>. If a pointer conversion method <a class=\"reference internal\" href=\"../../stdlib/c/index#Base.unsafe_convert\" title=\"Base.unsafe_convert\"><code>Base.unsafe_convert(Ptr{T}, A)</code></a> is provided, the memory layout should correspond in the same way to these strides.</p> <p>The <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a> type is a specific instance of <code>DenseArray</code> where elements are stored in column-major order (see additional notes in <a class=\"reference internal\" href=\"../performance-tips/index#man-performance-tips\"><span>Performance Tips</span></a>). <code>Vector</code> and <code>Matrix</code> are aliases for the 1-d and 2-d cases. Specific operations such as scalar indexing, assignment, and a few other basic storage-specific operations are all that have to be implemented for <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a>, so that the rest of the array library can be implemented in a generic manner.</p> <p><code>SubArray</code> is a specialization of <code>AbstractArray</code> that performs indexing by reference rather than by copying. A <code>SubArray</code> is created with the <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sub\" title=\"Base.sub\"><code>sub()</code></a> function, which is called the same way as <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.getindex\" title=\"Base.getindex\"><code>getindex()</code></a> (with an array and a series of index arguments). The result of <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sub\" title=\"Base.sub\"><code>sub()</code></a> looks the same as the result of <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.getindex\" title=\"Base.getindex\"><code>getindex()</code></a>, except the data is left in place. <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sub\" title=\"Base.sub\"><code>sub()</code></a> stores the input index vectors in a <code>SubArray</code> object, which can later be used to index the original array indirectly.</p> <p><code>StridedVector</code> and <code>StridedMatrix</code> are convenient aliases defined to make it possible for Julia to call a wider range of BLAS and LAPACK functions by passing them either <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a> or <code>SubArray</code> objects, and thus saving inefficiencies from memory allocation and copying.</p> <p>The following example computes the QR decomposition of a small section of a larger array, without creating any temporaries, and by calling the appropriate LAPACK function with the right leading dimension size and stride parameters.</p> <pre data-language=\"julia\">julia&gt; a = rand(10,10)\n10x10 Array{Float64,2}:\n 0.561255   0.226678   0.203391  0.308912   …  0.750307  0.235023   0.217964\n 0.718915   0.537192   0.556946  0.996234      0.666232  0.509423   0.660788\n 0.493501   0.0565622  0.118392  0.493498      0.262048  0.940693   0.252965\n 0.0470779  0.736979   0.264822  0.228787      0.161441  0.897023   0.567641\n 0.343935   0.32327    0.795673  0.452242      0.468819  0.628507   0.511528\n 0.935597   0.991511   0.571297  0.74485    …  0.84589   0.178834   0.284413\n 0.160706   0.672252   0.133158  0.65554       0.371826  0.770628   0.0531208\n 0.306617   0.836126   0.301198  0.0224702     0.39344   0.0370205  0.536062\n 0.890947   0.168877   0.32002   0.486136      0.096078  0.172048   0.77672\n 0.507762   0.573567   0.220124  0.165816      0.211049  0.433277   0.539476\n\njulia&gt; b = sub(a, 2:2:8,2:2:4)\n4x2 SubArray{Float64,2,Array{Float64,2},Tuple{StepRange{Int64,Int64},StepRange{Int64,Int64}},1}:\n 0.537192  0.996234\n 0.736979  0.228787\n 0.991511  0.74485\n 0.836126  0.0224702\n\njulia&gt; (q,r) = qr(b);\n\njulia&gt; q\n4x2 Array{Float64,2}:\n -0.338809   0.78934\n -0.464815  -0.230274\n -0.625349   0.194538\n -0.527347  -0.534856\n\njulia&gt; r\n2x2 Array{Float64,2}:\n -1.58553  -0.921517\n  0.0       0.866567\n</pre>    <h2 id=\"sparse-matrices\">Sparse Matrices</h2> <p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Sparse_matrix\">Sparse matrices</a> are matrices that contain enough zeros that storing them in a special data structure leads to savings in space and execution time. Sparse matrices may be used when operations on the sparse representation of a matrix lead to considerable gains in either time or space when compared to performing the same operations on a dense matrix.</p>  <h3 id=\"compressed-sparse-column-csc-storage\">Compressed Sparse Column (CSC) Storage</h3> <p>In Julia, sparse matrices are stored in the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_.28CSC_or_CCS.29\">Compressed Sparse Column (CSC) format</a>. Julia sparse matrices have the type <code>SparseMatrixCSC{Tv,Ti}</code>, where <code>Tv</code> is the type of the nonzero values, and <code>Ti</code> is the integer type for storing column pointers and row indices.:</p> <pre data-language=\"julia\">type SparseMatrixCSC{Tv,Ti&lt;:Integer} &lt;: AbstractSparseMatrix{Tv,Ti}\n    m::Int                  # Number of rows\n    n::Int                  # Number of columns\n    colptr::Vector{Ti}      # Column i is in colptr[i]:(colptr[i+1]-1)\n    rowval::Vector{Ti}      # Row values of nonzeros\n    nzval::Vector{Tv}       # Nonzero values\nend\n</pre> <p>The compressed sparse column storage makes it easy and quick to access the elements in the column of a sparse matrix, whereas accessing the sparse matrix by rows is considerably slower. Operations such as insertion of nonzero values one at a time in the CSC structure tend to be slow. This is because all elements of the sparse matrix that are beyond the point of insertion have to be moved one place over.</p> <p>All operations on sparse matrices are carefully implemented to exploit the CSC data structure for performance, and to avoid expensive operations.</p> <p>If you have data in CSC format from a different application or library, and wish to import it in Julia, make sure that you use 1-based indexing. The row indices in every column need to be sorted. If your <code>SparseMatrixCSC</code> object contains unsorted row indices, one quick way to sort them is by doing a double transpose.</p> <p>In some applications, it is convenient to store explicit zero values in a <code>SparseMatrixCSC</code>. These <em>are</em> accepted by functions in <code>Base</code> (but there is no guarantee that they will be preserved in mutating operations). Such explicitly stored zeros are treated as structural nonzeros by many routines. The <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.nnz\" title=\"Base.nnz\"><code>nnz()</code></a> function returns the number of elements explicitly stored in the sparse data structure, including structural nonzeros. In order to count the exact number of actual values that are nonzero, use <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.countnz\" title=\"Base.countnz\"><code>countnz()</code></a>, which inspects every stored element of a sparse matrix.</p>   <h3 id=\"sparse-matrix-constructors\">Sparse matrix constructors</h3> <p>The simplest way to create sparse matrices is to use functions equivalent to the <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.zeros\" title=\"Base.zeros\"><code>zeros()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.eye\" title=\"Base.eye\"><code>eye()</code></a> functions that Julia provides for working with dense matrices. To produce sparse matrices instead, you can use the same names with an <code>sp</code> prefix:</p> <pre data-language=\"julia\">julia&gt; spzeros(3,5)\n3x5 sparse matrix with 0 Float64 entries:\n\njulia&gt; speye(3,5)\n3x5 sparse matrix with 3 Float64 entries:\n        [1, 1]  =  1.0\n        [2, 2]  =  1.0\n        [3, 3]  =  1.0\n</pre> <p>The <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sparse\" title=\"Base.sparse\"><code>sparse()</code></a> function is often a handy way to construct sparse matrices. It takes as its input a vector <code>I</code> of row indices, a vector <code>J</code> of column indices, and a vector <code>V</code> of nonzero values. <code>sparse(I,J,V)</code> constructs a sparse matrix such that <code>S[I[k], J[k]] = V[k]</code>.</p> <pre data-language=\"julia\">julia&gt; I = [1, 4, 3, 5]; J = [4, 7, 18, 9]; V = [1, 2, -5, 3];\n\njulia&gt; S = sparse(I,J,V)\n5x18 sparse matrix with 4 Int64 entries:\n        [1 ,  4]  =  1\n        [4 ,  7]  =  2\n        [5 ,  9]  =  3\n        [3 , 18]  =  -5\n</pre> <p>The inverse of the <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sparse\" title=\"Base.sparse\"><code>sparse()</code></a> function is <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.findn\" title=\"Base.findn\"><code>findn()</code></a>, which retrieves the inputs used to create the sparse matrix.</p> <pre data-language=\"julia\">julia&gt; findn(S)\n([1,4,5,3],[4,7,9,18])\n\njulia&gt; findnz(S)\n([1,4,5,3],[4,7,9,18],[1,2,3,-5])\n</pre> <p>Another way to create sparse matrices is to convert a dense matrix into a sparse matrix using the <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sparse\" title=\"Base.sparse\"><code>sparse()</code></a> function:</p> <pre data-language=\"julia\">julia&gt; sparse(eye(5))\n5x5 sparse matrix with 5 Float64 entries:\n        [1, 1]  =  1.0\n        [2, 2]  =  1.0\n        [3, 3]  =  1.0\n        [4, 4]  =  1.0\n        [5, 5]  =  1.0\n</pre> <p>You can go in the other direction using the <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.full\" title=\"Base.full\"><code>full()</code></a> function. The <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.issparse\" title=\"Base.issparse\"><code>issparse()</code></a> function can be used to query if a matrix is sparse.</p> <pre data-language=\"julia\">julia&gt; issparse(speye(5))\ntrue\n</pre>   <h3 id=\"sparse-matrix-operations\">Sparse matrix operations</h3> <p>Arithmetic operations on sparse matrices also work as they do on dense matrices. Indexing of, assignment into, and concatenation of sparse matrices work in the same way as dense matrices. Indexing operations, especially assignment, are expensive, when carried out one element at a time. In many cases it may be better to convert the sparse matrix into <code>(I,J,V)</code> format using <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.findnz\" title=\"Base.findnz\"><code>findnz()</code></a>, manipulate the non-zeroes or the structure in the dense vectors <code>(I,J,V)</code>, and then reconstruct the sparse matrix.</p>   <h3 id=\"correspondence-of-dense-and-sparse-methods\">Correspondence of dense and sparse methods</h3> <p>The following table gives a correspondence between built-in methods on sparse matrices and their corresponding methods on dense matrix types. In general, methods that generate sparse matrices differ from their dense counterparts in that the resulting matrix follows the same sparsity pattern as a given sparse matrix <code>S</code>, or that the resulting sparse matrix has density <code>d</code>, i.e. each matrix element has a probability <code>d</code> of being non-zero.</p> <p>Details can be found in the <a class=\"reference internal\" href=\"../../stdlib/arrays/index#stdlib-sparse\"><span>Sparse Matrices</span></a> section of the standard library reference.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Sparse</th> <th class=\"head\">Dense</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.spzeros\" title=\"Base.spzeros\"><code>spzeros(m,n)</code></a></td> <td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.zeros\" title=\"Base.zeros\"><code>zeros(m,n)</code></a></td> <td>Creates a <em>m</em>-by-<em>n</em> matrix of zeros. (<a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.spzeros\" title=\"Base.spzeros\"><code>spzeros(m,n)</code></a> is empty.)</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.spones\" title=\"Base.spones\"><code>spones(S)</code></a></td> <td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.ones\" title=\"Base.ones\"><code>ones(m,n)</code></a></td> <td>Creates a matrix filled with ones. Unlike the dense version, <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.spones\" title=\"Base.spones\"><code>spones()</code></a> has the same sparsity pattern as <em>S</em>.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.speye\" title=\"Base.speye\"><code>speye(n)</code></a></td> <td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.eye\" title=\"Base.eye\"><code>eye(n)</code></a></td> <td>Creates a <em>n</em>-by-<em>n</em> identity matrix.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.full\" title=\"Base.full\"><code>full(S)</code></a></td> <td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sparse\" title=\"Base.sparse\"><code>sparse(A)</code></a></td> <td>Interconverts between dense and sparse formats.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sprand\" title=\"Base.sprand\"><code>sprand(m,n,d)</code></a></td> <td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.rand\" title=\"Base.rand\"><code>rand(m,n)</code></a></td> <td>Creates a <em>m</em>-by-<em>n</em> random matrix (of density <em>d</em>) with iid non-zero elements distributed uniformly on the half-open interval <span class=\"math\">\\([0, 1)\\)</span>.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sprandn\" title=\"Base.sprandn\"><code>sprandn(m,n,d)</code></a></td> <td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.randn\" title=\"Base.randn\"><code>randn(m,n)</code></a></td> <td>Creates a <em>m</em>-by-<em>n</em> random matrix (of density <em>d</em>) with iid non-zero elements distributed according to the standard normal (Gaussian) distribution.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sprandn\" title=\"Base.sprandn\"><code>sprandn(m,n,d,X)</code></a></td> <td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.randn\" title=\"Base.randn\"><code>randn(m,n,X)</code></a></td> <td>Creates a <em>m</em>-by-<em>n</em> random matrix (of density <em>d</em>) with iid non-zero elements distributed according to the <em>X</em> distribution. (Requires the <code>Distributions</code> package.)</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sprandbool\" title=\"Base.sprandbool\"><code>sprandbool(m,n,d)</code></a></td> <td><a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.rand\" title=\"Base.rand\"><code>rand(Bool,m,n)</code></a></td> <td>Creates a <em>m</em>-by-<em>n</em> random matrix (of density <em>d</em>) with non-zero <code>Bool</code> elements with probability <em>d</em> (<em>d</em> =0.5 for <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.rand\" title=\"Base.rand\"><code>rand(Bool)</code></a>.)</td> </tr>  </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/arrays/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/arrays/</a>\n  </p>\n</div>\n","manual/types/index":"<h1 id=\"man-types\">Types</h1> <p>Type systems have traditionally fallen into two quite different camps: static type systems, where every program expression must have a type computable before the execution of the program, and dynamic type systems, where nothing is known about types until run time, when the actual values manipulated by the program are available. Object orientation allows some flexibility in statically typed languages by letting code be written without the precise types of values being known at compile time. The ability to write code that can operate on different types is called polymorphism. All code in classic dynamically typed languages is polymorphic: only by explicitly checking types, or when objects fail to support operations at run-time, are the types of any values ever restricted.</p> <p>Julia’s type system is dynamic, but gains some of the advantages of static type systems by making it possible to indicate that certain values are of specific types. This can be of great assistance in generating efficient code, but even more significantly, it allows method dispatch on the types of function arguments to be deeply integrated with the language. Method dispatch is explored in detail in <a class=\"reference internal\" href=\"../methods/index#man-methods\"><span>Methods</span></a>, but is rooted in the type system presented here.</p> <p>The default behavior in Julia when types are omitted is to allow values to be of any type. Thus, one can write many useful Julia programs without ever explicitly using types. When additional expressiveness is needed, however, it is easy to gradually introduce explicit type annotations into previously “untyped” code. Doing so will typically increase both the performance and robustness of these systems, and perhaps somewhat counterintuitively, often significantly simplify them.</p> <p>Describing Julia in the lingo of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Type_system\">type systems</a>, it is: dynamic, nominative and parametric. Generic types can be parameterized, and the hierarchical relationships between types are explicitly declared, rather than implied by compatible structure. One particularly distinctive feature of Julia’s type system is that concrete types may not subtype each other: all concrete types are final and may only have abstract types as their supertypes. While this might at first seem unduly restrictive, it has many beneficial consequences with surprisingly few drawbacks. It turns out that being able to inherit behavior is much more important than being able to inherit structure, and inheriting both causes significant difficulties in traditional object-oriented languages. Other high-level aspects of Julia’s type system that should be mentioned up front are:</p> <ul class=\"simple\"> <li>There is no division between object and non-object values: all values in Julia are true objects having a type that belongs to a single, fully connected type graph, all nodes of which are equally first-class as types.</li> <li>There is no meaningful concept of a “compile-time type”: the only type a value has is its actual type when the program is running. This is called a “run-time type” in object-oriented languages where the combination of static compilation with polymorphism makes this distinction significant.</li> <li>Only values, not variables, have types — variables are simply names bound to values.</li> <li>Both abstract and concrete types can be parameterized by other types. They can also be parameterized by symbols, by values of any type for which <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.isbits\" title=\"Base.isbits\"><code>isbits()</code></a> returns true (essentially, things like numbers and bools that are stored like C types or structs with no pointers to other objects), and also by tuples thereof. Type parameters may be omitted when they do not need to be referenced or restricted.</li> </ul> <p>Julia’s type system is designed to be powerful and expressive, yet clear, intuitive and unobtrusive. Many Julia programmers may never feel the need to write code that explicitly uses types. Some kinds of programming, however, become clearer, simpler, faster and more robust with declared types.</p>  <h2 id=\"type-declarations\">Type Declarations</h2> <p>The <code>::</code> operator can be used to attach type annotations to expressions and variables in programs. There are two primary reasons to do this:</p> <ol class=\"arabic simple\"> <li>As an assertion to help confirm that your program works the way you expect,</li> <li>To provide extra type information to the compiler, which can then improve performance in some cases</li> </ol> <p>When appended to an expression computing a <em>value</em>, the <code>::</code> operator is read as “is an instance of”. It can be used anywhere to assert that the value of the expression on the left is an instance of the type on the right. When the type on the right is concrete, the value on the left must have that type as its implementation — recall that all concrete types are final, so no implementation is a subtype of any other. When the type is abstract, it suffices for the value to be implemented by a concrete type that is a subtype of the abstract type. If the type assertion is not true, an exception is thrown, otherwise, the left-hand value is returned:</p> <pre data-language=\"julia\">julia&gt; (1+2)::AbstractFloat\nERROR: TypeError: typeassert: expected AbstractFloat, got Int64\n\njulia&gt; (1+2)::Int\n3\n</pre> <p>This allows a type assertion to be attached to any expression in-place. The most common usage of <code>::</code> as an assertion is in function/methods signatures, such as <code>f(x::Int8) = ...</code> (see <a class=\"reference internal\" href=\"../methods/index#man-methods\"><span>Methods</span></a>).</p> <p>When appended to a <em>variable</em> in a statement context, the <code>::</code> operator means something a bit different: it declares the variable to always have the specified type, like a type declaration in a statically-typed language such as C. Every value assigned to the variable will be converted to the declared type using <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.convert\" title=\"Base.convert\"><code>convert()</code></a>:</p> <pre data-language=\"julia\">julia&gt; function foo()\n         x::Int8 = 100\n         x\n       end\nfoo (generic function with 1 method)\n\njulia&gt; foo()\n100\n\njulia&gt; typeof(ans)\nInt8\n</pre> <p>This feature is useful for avoiding performance “gotchas” that could occur if one of the assignments to a variable changed its type unexpectedly.</p> <p>The “declaration” behavior only occurs in specific contexts:</p> <pre data-language=\"julia\">x::Int8        # a variable by itself\nlocal x::Int8  # in a local declaration\nx::Int8 = 10   # as the left-hand side of an assignment\n</pre> <p>and applies to the whole current scope, even before the declaration. Currently, type declarations cannot be used in global scope, e.g. in the REPL, since Julia does not yet have constant-type globals. Note that in a function return statement, the first two of the above expressions compute a value and then <code>::</code> is a type assertion and not a declaration.</p>   <h2 id=\"man-abstract-types\">Abstract Types</h2> <p id=\"abstract-types\">Abstract types cannot be instantiated, and serve only as nodes in the type graph, thereby describing sets of related concrete types: those concrete types which are their descendants. We begin with abstract types even though they have no instantiation because they are the backbone of the type system: they form the conceptual hierarchy which makes Julia’s type system more than just a collection of object implementations.</p> <p>Recall that in <a class=\"reference internal\" href=\"../integers-and-floating-point-numbers/index#man-integers-and-floating-point-numbers\"><span>Integers and Floating-Point Numbers</span></a>, we introduced a variety of concrete types of numeric values: <code>Int8</code>, <code>UInt8</code>, <code>Int16</code>, <code>UInt16</code>, <code>Int32</code>, <code>UInt32</code>, <code>Int64</code>, <code>UInt64</code>, <code>Int128</code>, <code>UInt128</code>, <code>Float16</code>, <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float32\" title=\"Base.Float32\"><code>Float32</code></a>, and <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a>. Although they have different representation sizes, <code>Int8</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code> and <code>Int128</code> all have in common that they are signed integer types. Likewise <code>UInt8</code>, <code>UInt16</code>, <code>UInt32</code>, <code>UInt64</code> and <code>UInt128</code> are all unsigned integer types, while <code>Float16</code>, <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float32\" title=\"Base.Float32\"><code>Float32</code></a> and <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a> are distinct in being floating-point types rather than integers. It is common for a piece of code to make sense, for example, only if its arguments are some kind of integer, but not really depend on what particular <em>kind</em> of integer. For example, the greatest common denominator algorithm works for all kinds of integers, but will not work for floating-point numbers. Abstract types allow the construction of a hierarchy of types, providing a context into which concrete types can fit. This allows you, for example, to easily program to any type that is an integer, without restricting an algorithm to a specific type of integer.</p> <p>Abstract types are declared using the <code>abstract</code> keyword. The general syntaxes for declaring an abstract type are:</p> <pre data-language=\"julia\">abstract «name»\nabstract «name» &lt;: «supertype»\n</pre> <p>The <code>abstract</code> keyword introduces a new abstract type, whose name is given by <code>«name»</code>. This name can be optionally followed by <code>&lt;:</code> and an already-existing type, indicating that the newly declared abstract type is a subtype of this “parent” type.</p> <p>When no supertype is given, the default supertype is <code>Any</code> — a predefined abstract type that all objects are instances of and all types are subtypes of. In type theory, <code>Any</code> is commonly called “top” because it is at the apex of the type graph. Julia also has a predefined abstract “bottom” type, at the nadir of the type graph, which is written as <code>Union{}</code>. It is the exact opposite of <code>Any</code>: no object is an instance of <code>Union{}</code> and all types are supertypes of <code>Union{}</code>.</p> <p>Let’s consider some of the abstract types that make up Julia’s numerical hierarchy:</p> <pre data-language=\"julia\">abstract Number\nabstract Real     &lt;: Number\nabstract AbstractFloat &lt;: Real\nabstract Integer  &lt;: Real\nabstract Signed   &lt;: Integer\nabstract Unsigned &lt;: Integer\n</pre> <p>The <code>Number</code> type is a direct child type of <code>Any</code>, and <code>Real</code> is its child. In turn, <code>Real</code> has two children (it has more, but only two are shown here; we’ll get to the others later): <code>Integer</code> and <code>AbstractFloat</code>, separating the world into representations of integers and representations of real numbers. Representations of real numbers include, of course, floating-point types, but also include other types, such as rationals. Hence, <code>AbstractFloat</code> is a proper subtype of <code>Real</code>, including only floating-point representations of real numbers. Integers are further subdivided into <code>Signed</code> and <code>Unsigned</code> varieties.</p> <p>The <code>&lt;:</code> operator in general means “is a subtype of”, and, used in declarations like this, declares the right-hand type to be an immediate supertype of the newly declared type. It can also be used in expressions as a subtype operator which returns <code>true</code> when its left operand is a subtype of its right operand:</p> <pre data-language=\"julia\">julia&gt; Integer &lt;: Number\ntrue\n\njulia&gt; Integer &lt;: AbstractFloat\nfalse\n</pre> <p>An important use of abstract types is to provide default implementations for concrete types. To give a simple example, consider:</p> <pre data-language=\"julia\">function myplus(x,y)\n x+y\nend\n</pre> <p>The first thing to note is that the above argument declarations are equivalent to <code>x::Any</code> and <code>y::Any</code>. When this function is invoked, say as <code>myplus(2,5)</code>, the dispatcher chooses the most specific method named <code>myplus</code> that matches the given arguments. (See <a class=\"reference internal\" href=\"../methods/index#man-methods\"><span>Methods</span></a> for more information on multiple dispatch.)</p> <p>Assuming no method more specific than the above is found, Julia next internally defines and compiles a method called <code>myplus</code> specifically for two <code>Int</code> arguments based on the generic function given above, i.e., it implicitly defines and compiles:</p> <pre data-language=\"julia\">function myplus(x::Int,y::Int)\n x+y\nend\n</pre> <p>and finally, it invokes this specific method.</p> <p>Thus, abstract types allow programmers to write generic functions that can later be used as the default method by many combinations of concrete types. Thanks to multiple dispatch, the programmer has full control over whether the default or more specific method is used.</p> <p>An important point to note is that there is no loss in performance if the programmer relies on a function whose arguments are abstract types, because it is recompiled for each tuple of argument concrete types with which it is invoked. (There may be a performance issue, however, in the case of function arguments that are containers of abstract types; see <a class=\"reference internal\" href=\"../performance-tips/index#man-performance-tips\"><span>Performance Tips</span></a>.)</p>   <h2 id=\"bits-types\">Bits Types</h2> <p>A bits type is a concrete type whose data consists of plain old bits. Classic examples of bits types are integers and floating-point values. Unlike most languages, Julia lets you declare your own bits types, rather than providing only a fixed set of built-in bits types. In fact, the standard bits types are all defined in the language itself:</p> <pre data-language=\"julia\">bitstype 16 Float16 &lt;: AbstractFloat\nbitstype 32 Float32 &lt;: AbstractFloat\nbitstype 64 Float64 &lt;: AbstractFloat\n\nbitstype 8  Bool &lt;: Integer\nbitstype 32 Char\n\nbitstype 8  Int8     &lt;: Signed\nbitstype 8  UInt8    &lt;: Unsigned\nbitstype 16 Int16    &lt;: Signed\nbitstype 16 UInt16   &lt;: Unsigned\nbitstype 32 Int32    &lt;: Signed\nbitstype 32 UInt32   &lt;: Unsigned\nbitstype 64 Int64    &lt;: Signed\nbitstype 64 UInt64   &lt;: Unsigned\nbitstype 128 Int128  &lt;: Signed\nbitstype 128 UInt128 &lt;: Unsigned\n</pre> <p>The general syntaxes for declaration of a <code>bitstype</code> are:</p> <pre data-language=\"julia\">bitstype «bits» «name»\nbitstype «bits» «name» &lt;: «supertype»\n</pre> <p>The number of bits indicates how much storage the type requires and the name gives the new type a name. A bits type can optionally be declared to be a subtype of some supertype. If a supertype is omitted, then the type defaults to having <code>Any</code> as its immediate supertype. The declaration of <code>Bool</code> above therefore means that a boolean value takes eight bits to store, and has <code>Integer</code> as its immediate supertype. Currently, only sizes that are multiples of 8 bits are supported. Therefore, boolean values, although they really need just a single bit, cannot be declared to be any smaller than eight bits.</p> <p>The types <code>Bool</code>, <code>Int8</code> and <code>UInt8</code> all have identical representations: they are eight-bit chunks of memory. Since Julia’s type system is nominative, however, they are not interchangeable despite having identical structure. Another fundamental difference between them is that they have different supertypes: <code>Bool</code>‘s direct supertype is <code>Integer</code>, <code>Int8</code>‘s is <code>Signed</code>, and <code>UInt8</code>‘s is <code>Unsigned</code>. All other differences between <code>Bool</code>, <code>Int8</code>, and <code>UInt8</code> are matters of behavior — the way functions are defined to act when given objects of these types as arguments. This is why a nominative type system is necessary: if structure determined type, which in turn dictates behavior, then it would be impossible to make <code>Bool</code> behave any differently than <code>Int8</code> or <code>UInt8</code>.</p>   <h2 id=\"man-composite-types\">Composite Types</h2> <p id=\"composite-types\"><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Composite_data_type\">Composite types</a> are called records, structures (<code>struct</code>s in C), or objects in various languages. A composite type is a collection of named fields, an instance of which can be treated as a single value. In many languages, composite types are the only kind of user-definable type, and they are by far the most commonly used user-defined type in Julia as well.</p> <p>In mainstream object oriented languages, such as C++, Java, Python and Ruby, composite types also have named functions associated with them, and the combination is called an “object”. In purer object-oriented languages, such as Python and Ruby, all values are objects whether they are composites or not. In less pure object oriented languages, including C++ and Java, some values, such as integers and floating-point values, are not objects, while instances of user-defined composite types are true objects with associated methods. In Julia, all values are objects, but functions are not bundled with the objects they operate on. This is necessary since Julia chooses which method of a function to use by multiple dispatch, meaning that the types of <em>all</em> of a function’s arguments are considered when selecting a method, rather than just the first one (see <a class=\"reference internal\" href=\"../methods/index#man-methods\"><span>Methods</span></a> for more information on methods and dispatch). Thus, it would be inappropriate for functions to “belong” to only their first argument. Organizing methods into function objects rather than having named bags of methods “inside” each object ends up being a highly beneficial aspect of the language design.</p> <p>Since composite types are the most common form of user-defined concrete type, they are simply introduced with the <code>type</code> keyword followed by a block of field names, optionally annotated with types using the <code>::</code> operator:</p> <pre data-language=\"julia\">julia&gt; type Foo\n         bar\n         baz::Int\n         qux::Float64\n       end\n</pre> <p>Fields with no type annotation default to <code>Any</code>, and can accordingly hold any type of value.</p> <p>New objects of composite type <code>Foo</code> are created by applying the <code>Foo</code> type object like a function to values for its fields:</p> <pre data-language=\"julia\">julia&gt; foo = Foo(\"Hello, world.\", 23, 1.5)\nFoo(\"Hello, world.\",23,1.5)\n\njulia&gt; typeof(foo)\nFoo\n</pre> <p>When a type is applied like a function it is called a <em>constructor</em>. Two constructors are generated automatically (these are called <em>default constructors</em>). One accepts any arguments and calls <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.convert\" title=\"Base.convert\"><code>convert()</code></a> to convert them to the types of the fields, and the other accepts arguments that match the field types exactly. The reason both of these are generated is that this makes it easier to add new definitions without inadvertently replacing a default constructor.</p> <p>Since the <code>bar</code> field is unconstrained in type, any value will do. However, the value for <code>baz</code> must be convertible to <code>Int</code>:</p> <pre data-language=\"julia\">julia&gt; Foo((), 23.5, 1)\nERROR: InexactError()\n in call at none:2\n</pre> <p>You may find a list of field names using the <code>fieldnames</code> function.</p> <pre data-language=\"julia\">julia&gt; fieldnames(foo)\n3-element Array{Symbol,1}:\n :bar\n :baz\n :qux\n</pre> <p>You can access the field values of a composite object using the traditional <code>foo.bar</code> notation:</p> <pre data-language=\"julia\">julia&gt; foo.bar\n\"Hello, world.\"\n\njulia&gt; foo.baz\n23\n\njulia&gt; foo.qux\n1.5\n</pre> <p>You can also change the values as one would expect:</p> <pre data-language=\"julia\">julia&gt; foo.qux = 2\n2.0\n\njulia&gt; foo.bar = 1//2\n1//2\n</pre> <p>Composite types with no fields are singletons; there can be only one instance of such types:</p> <pre data-language=\"julia\">type NoFields\nend\n\njulia&gt; is(NoFields(), NoFields())\ntrue\n</pre> <p>The <code>is</code> function confirms that the “two” constructed instances of <code>NoFields</code> are actually one and the same. Singleton types are described in further detail <a class=\"reference external\" href=\"#man-singleton-types\">below</a>.</p> <p>There is much more to say about how instances of composite types are created, but that discussion depends on both <a class=\"reference external\" href=\"#man-parametric-types\">Parametric Types</a> and on <a class=\"reference internal\" href=\"../methods/index#man-methods\"><span>Methods</span></a>, and is sufficiently important to be addressed in its own section: <a class=\"reference internal\" href=\"../constructors/index#man-constructors\"><span>Constructors</span></a>.</p>   <h2 id=\"man-immutable-composite-types\">Immutable Composite Types</h2> <p id=\"immutable-composite-types\">It is also possible to define <em>immutable</em> composite types by using the keyword <code>immutable</code> instead of <code>type</code>:</p> <pre data-language=\"julia\">immutable Complex\n  real::Float64\n  imag::Float64\nend\n</pre> <p>Such types behave much like other composite types, except that instances of them cannot be modified. Immutable types have several advantages:</p> <ul class=\"simple\"> <li>They are more efficient in some cases. Types like the <code>Complex</code> example above can be packed efficiently into arrays, and in some cases the compiler is able to avoid allocating immutable objects entirely.</li> <li>It is not possible to violate the invariants provided by the type’s constructors.</li> <li>Code using immutable objects can be easier to reason about.</li> </ul> <p>An immutable object might contain mutable objects, such as arrays, as fields. Those contained objects will remain mutable; only the fields of the immutable object itself cannot be changed to point to different objects.</p> <p>A useful way to think about immutable composites is that each instance is associated with specific field values — the field values alone tell you everything about the object. In contrast, a mutable object is like a little container that might hold different values over time, and so is not identified with specific field values. In deciding whether to make a type immutable, ask whether two instances with the same field values would be considered identical, or if they might need to change independently over time. If they would be considered identical, the type should probably be immutable.</p> <p>To recap, two essential properties define immutability in Julia:</p> <ul class=\"simple\"> <li>An object with an immutable type is passed around (both in assignment statements and in function calls) by copying, whereas a mutable type is passed around by reference.</li> <li>It is not permitted to modify the fields of a composite immutable type.</li> </ul> <p>It is instructive, particularly for readers whose background is C/C++, to consider why these two properties go hand in hand. If they were separated, i.e., if the fields of objects passed around by copying could be modified, then it would become more difficult to reason about certain instances of generic code. For example, suppose <code>x</code> is a function argument of an abstract type, and suppose that the function changes a field: <code>x.isprocessed = true</code>. Depending on whether <code>x</code> is passed by copying or by reference, this statement may or may not alter the actual argument in the calling routine. Julia sidesteps the possibility of creating functions with unknown effects in this scenario by forbidding modification of fields of objects passed around by copying.</p>   <h2 id=\"declared-types\">Declared Types</h2> <p>The three kinds of types discussed in the previous three sections are actually all closely related. They share the same key properties:</p> <ul class=\"simple\"> <li>They are explicitly declared.</li> <li>They have names.</li> <li>They have explicitly declared supertypes.</li> <li>They may have parameters.</li> </ul> <p>Because of these shared properties, these types are internally represented as instances of the same concept, <code>DataType</code>, which is the type of any of these types:</p> <pre data-language=\"julia\">julia&gt; typeof(Real)\nDataType\n\njulia&gt; typeof(Int)\nDataType\n</pre> <p>A <code>DataType</code> may be abstract or concrete. If it is concrete, it has a specified size, storage layout, and (optionally) field names. Thus a bits type is a <code>DataType</code> with nonzero size, but no field names. A composite type is a <code>DataType</code> that has field names or is empty (zero size).</p> <p>Every concrete value in the system is an instance of some <code>DataType</code>.</p>   <h2 id=\"type-unions\">Type Unions</h2> <p>A type union is a special abstract type which includes as objects all instances of any of its argument types, constructed using the special <code>Union</code> function:</p> <pre data-language=\"julia\">julia&gt; IntOrString = Union{Int,AbstractString}\nUnion{AbstractString,Int64}\n\njulia&gt; 1 :: IntOrString\n1\n\njulia&gt; \"Hello!\" :: IntOrString\n\"Hello!\"\n\njulia&gt; 1.0 :: IntOrString\nERROR: type: typeassert: expected Union{AbstractString,Int64}, got Float64\n</pre> <p>The compilers for many languages have an internal union construct for reasoning about types; Julia simply exposes it to the programmer.</p>   <h2 id=\"id2\">Parametric Types</h2> <p id=\"man-parametric-types\">An important and powerful feature of Julia’s type system is that it is parametric: types can take parameters, so that type declarations actually introduce a whole family of new types — one for each possible combination of parameter values. There are many languages that support some version of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Generic_programming\">generic programming</a>, wherein data structures and algorithms to manipulate them may be specified without specifying the exact types involved. For example, some form of generic programming exists in ML, Haskell, Ada, Eiffel, C++, Java, C#, F#, and Scala, just to name a few. Some of these languages support true parametric polymorphism (e.g. ML, Haskell, Scala), while others support ad-hoc, template-based styles of generic programming (e.g. C++, Java). With so many different varieties of generic programming and parametric types in various languages, we won’t even attempt to compare Julia’s parametric types to other languages, but will instead focus on explaining Julia’s system in its own right. We will note, however, that because Julia is a dynamically typed language and doesn’t need to make all type decisions at compile time, many traditional difficulties encountered in static parametric type systems can be relatively easily handled.</p> <p>All declared types (the <code>DataType</code> variety) can be parameterized, with the same syntax in each case. We will discuss them in the following order: first, parametric composite types, then parametric abstract types, and finally parametric bits types.</p>  <h3 id=\"parametric-composite-types\">Parametric Composite Types</h3> <p>Type parameters are introduced immediately after the type name, surrounded by curly braces:</p> <pre data-language=\"julia\">type Point{T}\n  x::T\n  y::T\nend\n</pre> <p>This declaration defines a new parametric type, <code>Point{T}</code>, holding two “coordinates” of type <code>T</code>. What, one may ask, is <code>T</code>? Well, that’s precisely the point of parametric types: it can be any type at all (or a value of any bits type, actually, although here it’s clearly used as a type). <code>Point{Float64}</code> is a concrete type equivalent to the type defined by replacing <code>T</code> in the definition of <code>Point</code> with <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a>. Thus, this single declaration actually declares an unlimited number of types: <code>Point{Float64}</code>, <code>Point{AbstractString}</code>, <code>Point{Int64}</code>, etc. Each of these is now a usable concrete type:</p> <pre data-language=\"julia\">julia&gt; Point{Float64}\nPoint{Float64}\n\njulia&gt; Point{AbstractString}\nPoint{AbstractString}\n</pre> <p>The type <code>Point{Float64}</code> is a point whose coordinates are 64-bit floating-point values, while the type <code>Point{AbstractString}</code> is a “point” whose “coordinates” are string objects (see <a class=\"reference internal\" href=\"../strings/index#man-strings\"><span>Strings</span></a>). However, <code>Point</code> itself is also a valid type object:</p> <pre data-language=\"julia\">julia&gt; Point\nPoint{T}\n</pre> <p>Here the <code>T</code> is the dummy type symbol used in the original declaration of <code>Point</code>. What does <code>Point</code> by itself mean? It is an abstract type that contains all the specific instances <code>Point{Float64}</code>, <code>Point{AbstractString}</code>, etc.:</p> <pre data-language=\"julia\">julia&gt; Point{Float64} &lt;: Point\ntrue\n\njulia&gt; Point{AbstractString} &lt;: Point\ntrue\n</pre> <p>Other types, of course, are not subtypes of it:</p> <pre data-language=\"julia\">julia&gt; Float64 &lt;: Point\nfalse\n\njulia&gt; AbstractString &lt;: Point\nfalse\n</pre> <p>Concrete <code>Point</code> types with different values of <code>T</code> are never subtypes of each other:</p> <pre data-language=\"julia\">julia&gt; Point{Float64} &lt;: Point{Int64}\nfalse\n\njulia&gt; Point{Float64} &lt;: Point{Real}\nfalse\n</pre> <p>This last point is very important:</p> <ul class=\"simple\"> <li>\n<strong>Even though</strong> <code>Float64 &lt;: Real</code> <strong>we DO NOT have</strong> <code>Point{Float64} &lt;: Point{Real}</code><strong>.</strong>\n</li> </ul> <p>In other words, in the parlance of type theory, Julia’s type parameters are <em>invariant</em>, rather than being covariant (or even contravariant). This is for practical reasons: while any instance of <code>Point{Float64}</code> may conceptually be like an instance of <code>Point{Real}</code> as well, the two types have different representations in memory:</p> <ul class=\"simple\"> <li>An instance of <code>Point{Float64}</code> can be represented compactly and efficiently as an immediate pair of 64-bit values;</li> <li>An instance of <code>Point{Real}</code> must be able to hold any pair of instances of <code>Real</code>. Since objects that are instances of <code>Real</code> can be of arbitrary size and structure, in practice an instance of <code>Point{Real}</code> must be represented as a pair of pointers to individually allocated <code>Real</code> objects.</li> </ul> <p>The efficiency gained by being able to store <code>Point{Float64}</code> objects with immediate values is magnified enormously in the case of arrays: an <code>Array{Float64}</code> can be stored as a contiguous memory block of 64-bit floating-point values, whereas an <code>Array{Real}</code> must be an array of pointers to individually allocated <code>Real</code> objects — which may well be <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Object_type_%28object-oriented_programming%29#Boxing\">boxed</a> 64-bit floating-point values, but also might be arbitrarily large, complex objects, which are declared to be implementations of the <code>Real</code> abstract type.</p> <p>Since <code>Point{Float64}</code> is not a subtype of <code>Point{Real}</code>, the following method can’t be applied to arguments of type <code>Point{Float64}</code>:</p> <pre data-language=\"julia\">function norm(p::Point{Real})\n   sqrt(p.x^2 + p.y^2)\nend\n</pre> <p>The correct way to define a method that accepts all arguments of type <code>Point{T}</code> where <code>T</code> is a subtype of <code>Real</code> is:</p> <pre data-language=\"julia\">function norm{T&lt;:Real}(p::Point{T})\n   sqrt(p.x^2 + p.y^2)\nend\n</pre> <p>More examples will be discussed later in <a class=\"reference internal\" href=\"../methods/index#man-methods\"><span>Methods</span></a>.</p> <p>How does one construct a <code>Point</code> object? It is possible to define custom constructors for composite types, which will be discussed in detail in <a class=\"reference internal\" href=\"../constructors/index#man-constructors\"><span>Constructors</span></a>, but in the absence of any special constructor declarations, there are two default ways of creating new composite objects, one in which the type parameters are explicitly given and the other in which they are implied by the arguments to the object constructor.</p> <p>Since the type <code>Point{Float64}</code> is a concrete type equivalent to <code>Point</code> declared with <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a> in place of <code>T</code>, it can be applied as a constructor accordingly:</p> <pre data-language=\"julia\">julia&gt; Point{Float64}(1.0,2.0)\nPoint{Float64}(1.0,2.0)\n\njulia&gt; typeof(ans)\nPoint{Float64}\n</pre> <p>For the default constructor, exactly one argument must be supplied for each field:</p> <pre data-language=\"julia\">julia&gt; Point{Float64}(1.0)\nERROR: MethodError: `convert` has no method matching convert(::Type{Point{Float64}}, ::Float64)\nThis may have arisen from a call to the constructor Point{Float64}(...),\nsince type constructors fall back to convert methods.\nClosest candidates are:\n  Point{T}(::Any, !Matched::Any)\n  call{T}(::Type{T}, ::Any)\n  convert{T}(::Type{T}, !Matched::T)\n in call at essentials.jl:56\n\njulia&gt; Point{Float64}(1.0,2.0,3.0)\nERROR: MethodError: `convert` has no method matching convert(::Type{Point{Float64}}, ::Float64, ::Float64, ::Float64)\nThis may have arisen from a call to the constructor Point{Float64}(...),\nsince type constructors fall back to convert methods.\nClosest candidates are:\n  Point{T}(::Any, ::Any)\n  call{T}(::Type{T}, ::Any)\n  convert{T}(::Type{T}, !Matched::T)\n in call at essentials.jl:57\n</pre> <p>Only one default constructor is generated for parametric types, since overriding it is not possible. This constructor accepts any arguments and converts them to the field types.</p> <p>In many cases, it is redundant to provide the type of <code>Point</code> object one wants to construct, since the types of arguments to the constructor call already implicitly provide type information. For that reason, you can also apply <code>Point</code> itself as a constructor, provided that the implied value of the parameter type <code>T</code> is unambiguous:</p> <pre data-language=\"julia\">julia&gt; Point(1.0,2.0)\nPoint{Float64}(1.0,2.0)\n\njulia&gt; typeof(ans)\nPoint{Float64}\n\njulia&gt; Point(1,2)\nPoint{Int64}(1,2)\n\njulia&gt; typeof(ans)\nPoint{Int64}\n</pre> <p>In the case of <code>Point</code>, the type of <code>T</code> is unambiguously implied if and only if the two arguments to <code>Point</code> have the same type. When this isn’t the case, the constructor will fail with a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.MethodError\" title=\"Base.MethodError\"><code>MethodError</code></a>:</p> <pre data-language=\"julia\">julia&gt; Point(1,2.5)\nERROR: MethodError: `convert` has no method matching convert(::Type{Point{T}}, ::Int64, ::Float64)\nThis may have arisen from a call to the constructor Point{T}(...),\nsince type constructors fall back to convert methods.\nClosest candidates are:\n  Point{T}(::T, !Matched::T)\n  call{T}(::Type{T}, ::Any)\n  convert{T}(::Type{T}, !Matched::T)\n in call at essentials.jl:57\n</pre> <p>Constructor methods to appropriately handle such mixed cases can be defined, but that will not be discussed until later on in <a class=\"reference internal\" href=\"../constructors/index#man-constructors\"><span>Constructors</span></a>.</p>   <h3 id=\"parametric-abstract-types\">Parametric Abstract Types</h3> <p>Parametric abstract type declarations declare a collection of abstract types, in much the same way:</p> <pre data-language=\"julia\">abstract Pointy{T}\n</pre> <p>With this declaration, <code>Pointy{T}</code> is a distinct abstract type for each type or integer value of <code>T</code>. As with parametric composite types, each such instance is a subtype of <code>Pointy</code>:</p> <pre data-language=\"julia\">julia&gt; Pointy{Int64} &lt;: Pointy\ntrue\n\njulia&gt; Pointy{1} &lt;: Pointy\ntrue\n</pre> <p>Parametric abstract types are invariant, much as parametric composite types are:</p> <pre data-language=\"julia\">julia&gt; Pointy{Float64} &lt;: Pointy{Real}\nfalse\n\njulia&gt; Pointy{Real} &lt;: Pointy{Float64}\nfalse\n</pre> <p>Much as plain old abstract types serve to create a useful hierarchy of types over concrete types, parametric abstract types serve the same purpose with respect to parametric composite types. We could, for example, have declared <code>Point{T}</code> to be a subtype of <code>Pointy{T}</code> as follows:</p> <pre data-language=\"julia\">type Point{T} &lt;: Pointy{T}\n  x::T\n  y::T\nend\n</pre> <p>Given such a declaration, for each choice of <code>T</code>, we have <code>Point{T}</code> as a subtype of <code>Pointy{T}</code>:</p> <pre data-language=\"julia\">julia&gt; Point{Float64} &lt;: Pointy{Float64}\ntrue\n\njulia&gt; Point{Real} &lt;: Pointy{Real}\ntrue\n\njulia&gt; Point{AbstractString} &lt;: Pointy{AbstractString}\ntrue\n</pre> <p>This relationship is also invariant:</p> <pre data-language=\"julia\">julia&gt; Point{Float64} &lt;: Pointy{Real}\nfalse\n</pre> <p>What purpose do parametric abstract types like <code>Pointy</code> serve? Consider if we create a point-like implementation that only requires a single coordinate because the point is on the diagonal line <em>x = y</em>:</p> <pre data-language=\"julia\">type DiagPoint{T} &lt;: Pointy{T}\n  x::T\nend\n</pre> <p>Now both <code>Point{Float64}</code> and <code>DiagPoint{Float64}</code> are implementations of the <code>Pointy{Float64}</code> abstraction, and similarly for every other possible choice of type <code>T</code>. This allows programming to a common interface shared by all <code>Pointy</code> objects, implemented for both <code>Point</code> and <code>DiagPoint</code>. This cannot be fully demonstrated, however, until we have introduced methods and dispatch in the next section, <a class=\"reference internal\" href=\"../methods/index#man-methods\"><span>Methods</span></a>.</p> <p>There are situations where it may not make sense for type parameters to range freely over all possible types. In such situations, one can constrain the range of <code>T</code> like so:</p> <pre data-language=\"julia\">abstract Pointy{T&lt;:Real}\n</pre> <p>With such a declaration, it is acceptable to use any type that is a subtype of <code>Real</code> in place of <code>T</code>, but not types that are not subtypes of <code>Real</code>:</p> <pre data-language=\"julia\">julia&gt; Pointy{Float64}\nPointy{Float64}\n\njulia&gt; Pointy{Real}\nPointy{Real}\n\njulia&gt; Pointy{AbstractString}\nERROR: TypeError: Pointy: in T, expected T&lt;:Real, got Type{AbstractString}\n\njulia&gt; Pointy{1}\nERROR: TypeError: Pointy: in T, expected T&lt;:Real, got Int64\n</pre> <p>Type parameters for parametric composite types can be restricted in the same manner:</p> <pre data-language=\"julia\">type Point{T&lt;:Real} &lt;: Pointy{T}\n  x::T\n  y::T\nend\n</pre> <p>To give a real-world example of how all this parametric type machinery can be useful, here is the actual definition of Julia’s <code>Rational</code> immutable type (except that we omit the constructor here for simplicity), representing an exact ratio of integers:</p> <pre data-language=\"julia\">immutable Rational{T&lt;:Integer} &lt;: Real\n  num::T\n  den::T\nend\n</pre> <p>It only makes sense to take ratios of integer values, so the parameter type <code>T</code> is restricted to being a subtype of <code>Integer</code>, and a ratio of integers represents a value on the real number line, so any <code>Rational</code> is an instance of the <code>Real</code> abstraction.</p>   <h3 id=\"tuple-types\">Tuple Types</h3> <p>Tuples are an abstraction of the arguments of a function — without the function itself. The salient aspects of a function’s arguments are their order and their types. Therefore a tuple type is similar to a parameterized immutable type where each parameter is the type of one field. For example, a 2-element tuple type resembles the following immutable type:</p> <pre data-language=\"julia\">immutable Tuple2{A,B}\n  a::A\n  b::B\nend\n</pre> <p>However, there are three key differences:</p> <ul class=\"simple\"> <li>Tuple types may have any number of parameters.</li> <li>Tuple types are <em>covariant</em> in their parameters: <code>Tuple{Int}</code> is a subtype of <code>Tuple{Any}</code>. Therefore <code>Tuple{Any}</code> is considered an abstract type, and tuple types are only concrete if their parameters are.</li> <li>Tuples do not have field names; fields are only accessed by index.</li> </ul> <p>Tuple values are written with parentheses and commas. When a tuple is constructed, an appropriate tuple type is generated on demand:</p> <pre data-language=\"julia\">julia&gt; typeof((1,\"foo\",2.5))\nTuple{Int64,ASCIIString,Float64}\n</pre> <p>Note the implications of covariance:</p> <pre data-language=\"julia\">julia&gt; Tuple{Int,AbstractString} &lt;: Tuple{Real,Any}\ntrue\n\njulia&gt; Tuple{Int,AbstractString} &lt;: Tuple{Real,Real}\nfalse\n\njulia&gt; Tuple{Int,AbstractString} &lt;: Tuple{Real,}\nfalse\n</pre> <p>Intuitively, this corresponds to the type of a function’s arguments being a subtype of the function’s signature (when the signature matches).</p>   <h3 id=\"vararg-tuple-types\">Vararg Tuple Types</h3> <p>The last parameter of a tuple type can be the special type <code>Vararg</code>, which denotes any number of trailing elements:</p> <pre data-language=\"julia\">julia&gt; isa((\"1\",), Tuple{AbstractString,Vararg{Int}})\ntrue\n\njulia&gt; isa((\"1\",1), Tuple{AbstractString,Vararg{Int}})\ntrue\n\njulia&gt; isa((\"1\",1,2), Tuple{AbstractString,Vararg{Int}})\ntrue\n\njulia&gt; isa((\"1\",1,2,3.0), Tuple{AbstractString,Vararg{Int}})\nfalse\n</pre> <p>Notice that <code>Vararg{T}</code> matches zero or more elements of type <code>T</code>. Vararg tuple types are used to represent the arguments accepted by varargs methods (see <a class=\"reference internal\" href=\"../functions/index#man-varargs-functions\"><span>Varargs Functions</span></a>).</p>  <h4 id=\"man-singleton-types\">Singleton Types</h4> <p id=\"singleton-types\">There is a special kind of abstract parametric type that must be mentioned here: singleton types. For each type, <code>T</code>, the “singleton type” <code>Type{T}</code> is an abstract type whose only instance is the object <code>T</code>. Since the definition is a little difficult to parse, let’s look at some examples:</p> <pre data-language=\"julia\">julia&gt; isa(Float64, Type{Float64})\ntrue\n\njulia&gt; isa(Real, Type{Float64})\nfalse\n\njulia&gt; isa(Real, Type{Real})\ntrue\n\njulia&gt; isa(Float64, Type{Real})\nfalse\n</pre> <p>In other words, <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.isa\" title=\"Base.isa\"><code>isa(A,Type{B})</code></a> is true if and only if <code>A</code> and <code>B</code> are the same object and that object is a type. Without the parameter, <code>Type</code> is simply an abstract type which has all type objects as its instances, including, of course, singleton types:</p> <pre data-language=\"julia\">julia&gt; isa(Type{Float64},Type)\ntrue\n\njulia&gt; isa(Float64,Type)\ntrue\n\njulia&gt; isa(Real,Type)\ntrue\n</pre> <p>Any object that is not a type is not an instance of <code>Type</code>:</p> <pre data-language=\"julia\">julia&gt; isa(1,Type)\nfalse\n\njulia&gt; isa(\"foo\",Type)\nfalse\n</pre> <p>Until we discuss <a class=\"reference internal\" href=\"../methods/index#man-parametric-methods\"><span>Parametric Methods</span></a> and <a class=\"reference internal\" href=\"../conversion-and-promotion/index#man-conversion\"><span>conversions</span></a>, it is difficult to explain the utility of the singleton type construct, but in short, it allows one to specialize function behavior on specific type <em>values</em>. This is useful for writing methods (especially parametric ones) whose behavior depends on a type that is given as an explicit argument rather than implied by the type of one of its arguments.</p> <p>A few popular languages have singleton types, including Haskell, Scala and Ruby. In general usage, the term “singleton type” refers to a type whose only instance is a single value. This meaning applies to Julia’s singleton types, but with that caveat that only type objects have singleton types.</p>    <h3 id=\"parametric-bits-types\">Parametric Bits Types</h3> <p>Bits types can also be declared parametrically. For example, pointers are represented as boxed bits types which would be declared in Julia like this:</p> <pre data-language=\"julia\"># 32-bit system:\nbitstype 32 Ptr{T}\n\n# 64-bit system:\nbitstype 64 Ptr{T}\n</pre> <p>The slightly odd feature of these declarations as compared to typical parametric composite types, is that the type parameter <code>T</code> is not used in the definition of the type itself — it is just an abstract tag, essentially defining an entire family of types with identical structure, differentiated only by their type parameter. Thus, <code>Ptr{Float64}</code> and <code>Ptr{Int64}</code> are distinct types, even though they have identical representations. And of course, all specific pointer types are subtype of the umbrella <code>Ptr</code> type:</p> <pre data-language=\"julia\">julia&gt; Ptr{Float64} &lt;: Ptr\ntrue\n\njulia&gt; Ptr{Int64} &lt;: Ptr\ntrue\n</pre>    <h2 id=\"type-aliases\">Type Aliases</h2> <p>Sometimes it is convenient to introduce a new name for an already expressible type. For such occasions, Julia provides the <code>typealias</code> mechanism. For example, <code>UInt</code> is type aliased to either <code>UInt32</code> or <code>UInt64</code> as is appropriate for the size of pointers on the system:</p> <pre data-language=\"julia\"># 32-bit system:\njulia&gt; UInt\nUInt32\n\n# 64-bit system:\njulia&gt; UInt\nUInt64\n</pre> <p>This is accomplished via the following code in <code>base/boot.jl</code>:</p> <pre data-language=\"julia\">if is(Int,Int64)\n    typealias UInt UInt64\nelse\n    typealias UInt UInt32\nend\n</pre> <p>Of course, this depends on what <code>Int</code> is aliased to — but that is predefined to be the correct type — either <code>Int32</code> or <code>Int64</code>.</p> <p>For parametric types, <code>typealias</code> can be convenient for providing names for cases where some of the parameter choices are fixed. Julia’s arrays have type <code>Array{T,N}</code> where <code>T</code> is the element type and <code>N</code> is the number of array dimensions. For convenience, writing <code>Array{Float64}</code> allows one to specify the element type without specifying the dimension:</p> <pre data-language=\"julia\">julia&gt; Array{Float64,1} &lt;: Array{Float64} &lt;: Array\ntrue\n</pre> <p>However, there is no way to equally simply restrict just the dimension but not the element type. Yet, one often needs to ensure an object is a vector or a matrix (imposing restrictions on the number of dimensions). For that reason, the following type aliases are provided:</p> <pre data-language=\"julia\">typealias Vector{T} Array{T,1}\ntypealias Matrix{T} Array{T,2}\n</pre> <p>Writing <code>Vector{Float64}</code> is equivalent to writing <code>Array{Float64,1}</code>, and the umbrella type <code>Vector</code> has as instances all <code>Array</code> objects where the second parameter — the number of array dimensions — is 1, regardless of what the element type is. In languages where parametric types must always be specified in full, this is not especially helpful, but in Julia, this allows one to write just <code>Matrix</code> for the abstract type including all two-dimensional dense arrays of any element type.</p> <p>This declaration of <code>Vector</code> creates a subtype relation <code>Vector{Int} &lt;: Vector</code>. However, it is not always the case that a parametric <code>typealias</code> statement creates such a relation; for example, the statement:</p> <pre data-language=\"julia\">typealias AA{T} Array{Array{T,1},1}\n</pre> <p>does not create the relation <code>AA{Int} &lt;: AA</code>. The reason is that <code>Array{Array{T,1},1}</code> is not an abstract type at all; in fact, it is a concrete type describing a 1-dimensional array in which each entry is an object of type <code>Array{T,1}</code> for some value of <code>T</code>.</p>   <h2 id=\"operations-on-types\">Operations on Types</h2> <p>Since types in Julia are themselves objects, ordinary functions can operate on them. Some functions that are particularly useful for working with or exploring types have already been introduced, such as the <code>&lt;:</code> operator, which indicates whether its left hand operand is a subtype of its right hand operand.</p> <p>The <code>isa</code> function tests if an object is of a given type and returns true or false:</p> <pre data-language=\"julia\">julia&gt; isa(1,Int)\ntrue\n\njulia&gt; isa(1,AbstractFloat)\nfalse\n</pre> <p>The <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.typeof\" title=\"Base.typeof\"><code>typeof()</code></a> function, already used throughout the manual in examples, returns the type of its argument. Since, as noted above, types are objects, they also have types, and we can ask what their types are:</p> <pre data-language=\"julia\">julia&gt; typeof(Rational)\nDataType\n\njulia&gt; typeof(Union{Real,Float64,Rational})\nDataType\n\njulia&gt; typeof(Union{Real,ASCIIString})\nUnion\n</pre> <p>What if we repeat the process? What is the type of a type of a type? As it happens, types are all composite values and thus all have a type of <code>DataType</code>:</p> <pre data-language=\"julia\">julia&gt; typeof(DataType)\nDataType\n\njulia&gt; typeof(Union)\nDataType\n</pre> <p><code>DataType</code> is its own type.</p> <p>Another operation that applies to some types is <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.super\" title=\"Base.super\"><code>super()</code></a>, which reveals a type’s supertype. Only declared types (<code>DataType</code>) have unambiguous supertypes:</p> <pre data-language=\"julia\">julia&gt; super(Float64)\nAbstractFloat\n\njulia&gt; super(Number)\nAny\n\njulia&gt; super(AbstractString)\nAny\n\njulia&gt; super(Any)\nAny\n</pre> <p>If you apply <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.super\" title=\"Base.super\"><code>super()</code></a> to other type objects (or non-type objects), a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.MethodError\" title=\"Base.MethodError\"><code>MethodError</code></a> is raised:</p> <pre data-language=\"julia\">julia&gt; super(Union{Float64,Int64})\nERROR: `super` has no method matching super(::Type{Union{Float64,Int64}})\n</pre>   <h2 id=\"value-types\">“Value types”</h2> <p>As one application of these ideas, Julia includes a parametric type, <code>Val{T}</code>, designated for dispatching on bits-type <em>values</em>. For example, if you pass a boolean to a function, you have to test the value at run-time:</p> <pre data-language=\"julia\">function firstlast(b::Bool)\n    return b ? \"First\" : \"Last\"\nend\n\nprintln(firstlast(true))\n</pre> <p>You can instead cause the conditional to be evaluated during function compilation by using the <code>Val</code> trick:</p> <pre data-language=\"julia\">firstlast(::Type{Val{true}}) = \"First\"\nfirstlast(::Type{Val{false}}) = \"Last\"\n\nprintln(firstlast(Val{true}))\n</pre> <p>Any legal type parameter (Types, Symbols, Integers, floating-point numbers, tuples, etc.) can be passed via <code>Val</code>.</p> <p>For consistency across Julia, the call site should always pass a <code>Val</code> type rather than creating an instance, i.e., use <code>foo(Val{:bar})</code> rather than <code>foo(Val{:bar}())</code>.</p>   <h2 id=\"man-nullable-types\">Nullable Types: Representing Missing Values</h2> <p id=\"nullable-types-representing-missing-values\">In many settings, you need to interact with a value of type <code>T</code> that may or may not exist. To handle these settings, Julia provides a parametric type called <code>Nullable{T}</code>, which can be thought of as a specialized container type that can contain either zero or one values. <code>Nullable{T}</code> provides a minimal interface designed to ensure that interactions with missing values are safe. At present, the interface consists of four possible interactions:</p> <ul class=\"simple\"> <li>Construct a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.Nullable\" title=\"Base.Nullable\"><code>Nullable</code></a> object.</li> <li>Check if a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.Nullable\" title=\"Base.Nullable\"><code>Nullable</code></a> object has a missing value.</li> <li>Access the value of a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.Nullable\" title=\"Base.Nullable\"><code>Nullable</code></a> object with a guarantee that a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.NullException\" title=\"Base.NullException\"><code>NullException</code></a> will be thrown if the object’s value is missing.</li> <li>Access the value of a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.Nullable\" title=\"Base.Nullable\"><code>Nullable</code></a> object with a guarantee that a default value of type <code>T</code> will be returned if the object’s value is missing.</li> </ul>  <h3 id=\"constructing-nullable-objects\">Constructing <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.Nullable\" title=\"Base.Nullable\"><code>Nullable</code></a> objects</h3> <p>To construct an object representing a missing value of type <code>T</code>, use the <code>Nullable{T}()</code> function:</p> <pre data-language=\"julia\">julia&gt; x1 = Nullable{Int64}()\nNullable{Int64}()\n\njulia&gt; x2 = Nullable{Float64}()\nNullable{Float64}()\n\njulia&gt; x3 = Nullable{Vector{Int64}}()\nNullable{Array{Int64,1}}()\n</pre> <p>To construct an object representing a non-missing value of type <code>T</code>, use the <code>Nullable(x::T)</code> function:</p> <pre data-language=\"julia\">julia&gt; x1 = Nullable(1)\nNullable(1)\n\njulia&gt; x2 = Nullable(1.0)\nNullable(1.0)\n\njulia&gt; x3 = Nullable([1, 2, 3])\nNullable([1,2,3])\n</pre> <p>Note the core distinction between these two ways of constructing a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.Nullable\" title=\"Base.Nullable\"><code>Nullable</code></a> object: in one style, you provide a type, <code>T</code>, as a function parameter; in the other style, you provide a single value of type <code>T</code> as an argument.</p>   <h3 id=\"checking-if-a-nullable-object-has-a-value\">Checking if a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.Nullable\" title=\"Base.Nullable\"><code>Nullable</code></a> object has a value</h3> <p>You can check if a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.Nullable\" title=\"Base.Nullable\"><code>Nullable</code></a> object has any value using <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.isnull\" title=\"Base.isnull\"><code>isnull()</code></a>:</p> <pre data-language=\"julia\">julia&gt; isnull(Nullable{Float64}())\ntrue\n\njulia&gt; isnull(Nullable(0.0))\nfalse\n</pre>   <h3 id=\"safely-accessing-the-value-of-a-nullable-object\">Safely accessing the value of a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.Nullable\" title=\"Base.Nullable\"><code>Nullable</code></a> object</h3> <p>You can safely access the value of a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.Nullable\" title=\"Base.Nullable\"><code>Nullable</code></a> object using <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.get\" title=\"Base.get\"><code>get()</code></a>:</p> <pre data-language=\"julia\">julia&gt; get(Nullable{Float64}())\nERROR: NullException()\n in get at nullable.jl:32\n\njulia&gt; get(Nullable(1.0))\n1.0\n</pre> <p>If the value is not present, as it would be for <code>Nullable{Float64}</code>, a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.NullException\" title=\"Base.NullException\"><code>NullException</code></a> error will be thrown. The error-throwing nature of the <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.get\" title=\"Base.get\"><code>get()</code></a> function ensures that any attempt to access a missing value immediately fails.</p> <p>In cases for which a reasonable default value exists that could be used when a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.Nullable\" title=\"Base.Nullable\"><code>Nullable</code></a> object’s value turns out to be missing, you can provide this default value as a second argument to <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.get\" title=\"Base.get\"><code>get()</code></a>:</p> <pre data-language=\"julia\">julia&gt; get(Nullable{Float64}(), 0)\n0.0\n\njulia&gt; get(Nullable(1.0), 0)\n1.0\n</pre> <p>Note that this default value will automatically be converted to the type of the <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.Nullable\" title=\"Base.Nullable\"><code>Nullable</code></a> object that you attempt to access using the <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.get\" title=\"Base.get\"><code>get()</code></a> function. For example, in the code shown above the value <code>0</code> would be automatically converted to a <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a> value before being returned. The presence of default replacement values makes it easy to use the <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.get\" title=\"Base.get\"><code>get()</code></a> function to write type-stable code that interacts with sources of potentially missing values.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/types/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/types/</a>\n  </p>\n</div>\n","manual/running-external-programs/index":"<h1 id=\"man-running-external-programs\">Running External Programs</h1> <p>Julia borrows backtick notation for commands from the shell, Perl, and Ruby. However, in Julia, writing</p> <pre data-language=\"julia\">julia&gt; `echo hello`\n`echo hello`\n</pre> <p>differs in several aspects from the behavior in various shells, Perl, or Ruby:</p> <ul class=\"simple\"> <li>Instead of immediately running the command, backticks create a <code>Cmd</code> object to represent the command. You can use this object to connect the command to others via pipes, run it, and read or write to it.</li> <li>When the command is run, Julia does not capture its output unless you specifically arrange for it to. Instead, the output of the command by default goes to <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.STDOUT\" title=\"Base.STDOUT\"><code>STDOUT</code></a> as it would using <code>libc</code>‘s <code>system</code> call.</li> <li>The command is never run with a shell. Instead, Julia parses the command syntax directly, appropriately interpolating variables and splitting on words as the shell would, respecting shell quoting syntax. The command is run as <code>julia</code>‘s immediate child process, using <code>fork</code> and <code>exec</code> calls.</li> </ul> <p>Here’s a simple example of running an external program:</p> <pre data-language=\"julia\">julia&gt; run(`echo hello`)\nhello\n</pre> <p>The <code>hello</code> is the output of the <code>echo</code> command, sent to <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.STDOUT\" title=\"Base.STDOUT\"><code>STDOUT</code></a>. The run method itself returns <code>nothing</code>, and throws an <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.ErrorException\" title=\"Base.ErrorException\"><code>ErrorException</code></a> if the external command fails to run successfully.</p> <p>If you want to read the output of the external command, <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.readall\" title=\"Base.readall\"><code>readall()</code></a> can be used instead:</p> <pre data-language=\"julia\">julia&gt; a=readall(`echo hello`)\n\"hello\\n\"\n\njulia&gt; (chomp(a)) == \"hello\"\ntrue\n</pre> <p>More generally, you can use <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.open\" title=\"Base.open\"><code>open()</code></a> to read from or write to an external command.</p> <pre data-language=\"julia\">julia&gt; open(`less`, \"w\", STDOUT) do io\n           for i = 1:3\n               println(io, i)\n           end\n       end\n1\n2\n3\n</pre>  <h2 id=\"man-command-interpolation\">Interpolation</h2> <p id=\"interpolation\">Suppose you want to do something a bit more complicated and use the name of a file in the variable <code>file</code> as an argument to a command. You can use <code>$</code> for interpolation much as you would in a string literal (see <a class=\"reference internal\" href=\"../strings/index#man-strings\"><span>Strings</span></a>):</p> <pre data-language=\"julia\">julia&gt; file = \"/etc/passwd\"\n\"/etc/passwd\"\n\njulia&gt; `sort $file`\n`sort /etc/passwd`\n</pre> <p>A common pitfall when running external programs via a shell is that if a file name contains characters that are special to the shell, they may cause undesirable behavior. Suppose, for example, rather than <code>/etc/passwd</code>, we wanted to sort the contents of the file <code>/Volumes/External HD/data.csv</code>. Let’s try it:</p> <pre data-language=\"julia\">julia&gt; file = \"/Volumes/External HD/data.csv\"\n\"/Volumes/External HD/data.csv\"\n\njulia&gt; `sort $file`\n`sort '/Volumes/External HD/data.csv'`\n</pre> <p>How did the file name get quoted? Julia knows that <code>file</code> is meant to be interpolated as a single argument, so it quotes the word for you. Actually, that is not quite accurate: the value of <code>file</code> is never interpreted by a shell, so there’s no need for actual quoting; the quotes are inserted only for presentation to the user. This will even work if you interpolate a value as part of a shell word:</p> <pre data-language=\"julia\">julia&gt; path = \"/Volumes/External HD\"\n\"/Volumes/External HD\"\n\njulia&gt; name = \"data\"\n\"data\"\n\njulia&gt; ext = \"csv\"\n\"csv\"\n\njulia&gt; `sort $path/$name.$ext`\n`sort '/Volumes/External HD/data.csv'`\n</pre> <p>As you can see, the space in the <code>path</code> variable is appropriately escaped. But what if you <em>want</em> to interpolate multiple words? In that case, just use an array (or any other iterable container):</p> <pre data-language=\"julia\">julia&gt; files = [\"/etc/passwd\",\"/Volumes/External HD/data.csv\"]\n2-element Array{ASCIIString,1}:\n \"/etc/passwd\"\n \"/Volumes/External HD/data.csv\"\n\n\njulia&gt; `grep foo $files`\n`grep foo /etc/passwd '/Volumes/External HD/data.csv'`\n</pre> <p>If you interpolate an array as part of a shell word, Julia emulates the shell’s <code>{a,b,c}</code> argument generation:</p> <pre data-language=\"julia\">julia&gt; names = [\"foo\",\"bar\",\"baz\"]\n3-element Array{ASCIIString,1}:\n \"foo\"\n \"bar\"\n \"baz\"\n\njulia&gt; `grep xylophone $names.txt`\n`grep xylophone foo.txt bar.txt baz.txt`\n</pre> <p>Moreover, if you interpolate multiple arrays into the same word, the shell’s Cartesian product generation behavior is emulated:</p> <pre data-language=\"julia\">julia&gt; names = [\"foo\",\"bar\",\"baz\"]\n3-element Array{ASCIIString,1}:\n \"foo\"\n \"bar\"\n \"baz\"\n\njulia&gt; exts = [\"aux\",\"log\"]\n2-element Array{ASCIIString,1}:\n \"aux\"\n \"log\"\n\njulia&gt; `rm -f $names.$exts`\n`rm -f foo.aux foo.log bar.aux bar.log baz.aux baz.log`\n</pre> <p>Since you can interpolate literal arrays, you can use this generative functionality without needing to create temporary array objects first:</p> <pre data-language=\"julia\">julia&gt; `rm -rf $[\"foo\",\"bar\",\"baz\",\"qux\"].$[\"aux\",\"log\",\"pdf\"]`\n`rm -rf foo.aux foo.log foo.pdf bar.aux bar.log bar.pdf baz.aux baz.log baz.pdf qux.aux qux.log qux.pdf`\n</pre>   <h2 id=\"quoting\">Quoting</h2> <p>Inevitably, one wants to write commands that aren’t quite so simple, and it becomes necessary to use quotes. Here’s a simple example of a Perl one-liner at a shell prompt:</p> <pre data-language=\"sh\">sh$ perl -le '$|=1; for (0..3) { print }'\n0\n1\n2\n3\n</pre> <p>The Perl expression needs to be in single quotes for two reasons: so that spaces don’t break the expression into multiple shell words, and so that uses of Perl variables like <code>$|</code> (yes, that’s the name of a variable in Perl), don’t cause interpolation. In other instances, you may want to use double quotes so that interpolation <em>does</em> occur:</p> <pre data-language=\"sh\">sh$ first=\"A\"\nsh$ second=\"B\"\nsh$ perl -le '$|=1; print for @ARGV' \"1: $first\" \"2: $second\"\n1: A\n2: B\n</pre> <p>In general, the Julia backtick syntax is carefully designed so that you can just cut-and-paste shell commands as is into backticks and they will work: the escaping, quoting, and interpolation behaviors are the same as the shell’s. The only difference is that the interpolation is integrated and aware of Julia’s notion of what is a single string value, and what is a container for multiple values. Let’s try the above two examples in Julia:</p> <pre data-language=\"julia\">julia&gt; `perl -le '$|=1; for (0..3) { print }'`\n`perl -le '$|=1; for (0..3) { print }'`\n\njulia&gt; run(ans)\n0\n1\n2\n3\n\njulia&gt; first = \"A\"; second = \"B\";\n\njulia&gt; `perl -le 'print for @ARGV' \"1: $first\" \"2: $second\"`\n`perl -le 'print for @ARGV' '1: A' '2: B'`\n\njulia&gt; run(ans)\n1: A\n2: B\n</pre> <p>The results are identical, and Julia’s interpolation behavior mimics the shell’s with some improvements due to the fact that Julia supports first-class iterable objects while most shells use strings split on spaces for this, which introduces ambiguities. When trying to port shell commands to Julia, try cut and pasting first. Since Julia shows commands to you before running them, you can easily and safely just examine its interpretation without doing any damage.</p>   <h2 id=\"pipelines\">Pipelines</h2> <p>Shell metacharacters, such as <code>|</code>, <code>&amp;</code>, and <code>&gt;</code>, are not special inside of Julia’s backticks: unlike in the shell, inside of Julia’s backticks, a pipe is always just a pipe:</p> <pre data-language=\"julia\">julia&gt; run(`echo hello | sort`)\nhello | sort\n</pre> <p>This expression invokes the <code>echo</code> command with three words as arguments: “hello”, “|”, and “sort”. The result is that a single line is printed: “hello | sort”. Inside of backticks, a “|” is just a literal pipe character. How, then, does one construct a pipeline? Instead of using “|” inside of backticks, one uses <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.pipeline\" title=\"Base.pipeline\"><code>pipeline()</code></a>:</p> <pre data-language=\"julia\">julia&gt; run(pipeline(`echo hello`, `sort`))\nhello\n</pre> <p>This pipes the output of the <code>echo</code> command to the <code>sort</code> command. Of course, this isn’t terribly interesting since there’s only one line to sort, but we can certainly do much more interesting things:</p> <pre data-language=\"julia\">julia&gt; run(pipeline(`cut -d: -f3 /etc/passwd`, `sort -n`, `tail -n5`))\n210\n211\n212\n213\n214\n</pre> <p>This prints the highest five user IDs on a UNIX system. The <code>cut</code>, <code>sort</code> and <code>tail</code> commands are all spawned as immediate children of the current <code>julia</code> process, with no intervening shell process. Julia itself does the work to setup pipes and connect file descriptors that is normally done by the shell. Since Julia does this itself, it retains better control and can do some things that shells cannot.</p> <p>Julia can run multiple commands in parallel:</p> <pre data-language=\"julia\">julia&gt; run(`echo hello` &amp; `echo world`)\nworld\nhello\n</pre> <p>The order of the output here is non-deterministic because the two <code>echo</code> processes are started nearly simultaneously, and race to make the first write to the <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.STDOUT\" title=\"Base.STDOUT\"><code>STDOUT</code></a> descriptor they share with each other and the <code>julia</code> parent process. Julia lets you pipe the output from both of these processes to another program:</p> <pre data-language=\"julia\">julia&gt; run(pipeline(`echo world` &amp; `echo hello`, `sort`))\nhello\nworld\n</pre> <p>In terms of UNIX plumbing, what’s happening here is that a single UNIX pipe object is created and written to by both <code>echo</code> processes, and the other end of the pipe is read from by the <code>sort</code> command.</p> <p>IO redirection can be accomplished by passing keyword arguments stdin, stdout, and stderr to the <code>pipeline</code> function:</p> <pre data-language=\"julia\">pipeline(`do_work`, stdout=pipeline(`sort`, \"out.txt\"), stderr=\"errs.txt\")\n</pre>  <h3 id=\"avoiding-deadlock-in-pipelines\">Avoiding Deadlock in Pipelines</h3> <p>When reading and writing to both ends of a pipeline from a single process, it is important to avoid forcing the kernel to buffer all of the data.</p> <p>For example, when reading all of the output from a command, call <code>readall(out)</code>, not <code>wait(process)</code>, since the former will actively consume all of the data written by the process, whereas the latter will attempt to store the data in the kernel’s buffers while waiting for a reader to be connected.</p> <p>Another common solution is to separate the reader and writer of the pipeline into separate Tasks:</p> <pre data-language=\"julia\">writer = @async writeall(process, \"data\")\nreader = @async do_compute(readall(process))\nwait(process)\nfetch(reader)\n</pre>   <h3 id=\"complex-example\">Complex Example</h3> <p>The combination of a high-level programming language, a first-class command abstraction, and automatic setup of pipes between processes is a powerful one. To give some sense of the complex pipelines that can be created easily, here are some more sophisticated examples, with apologies for the excessive use of Perl one-liners:</p> <pre data-language=\"julia\">julia&gt; prefixer(prefix, sleep) = `perl -nle '$|=1; print \"'$prefix' \", $_; sleep '$sleep';'`;\n\njulia&gt; run(pipeline(`perl -le '$|=1; for(0..9){ print; sleep 1 }'`, prefixer(\"A\",2) &amp; prefixer(\"B\",2)))\nA 0\nB 1\nA 2\nB 3\nA 4\nB 5\nA 6\nB 7\nA 8\nB 9\n</pre> <p>This is a classic example of a single producer feeding two concurrent consumers: one <code>perl</code> process generates lines with the numbers 0 through 9 on them, while two parallel processes consume that output, one prefixing lines with the letter “A”, the other with the letter “B”. Which consumer gets the first line is non-deterministic, but once that race has been won, the lines are consumed alternately by one process and then the other. (Setting <code>$|=1</code> in Perl causes each print statement to flush the <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.STDOUT\" title=\"Base.STDOUT\"><code>STDOUT</code></a> handle, which is necessary for this example to work. Otherwise all the output is buffered and printed to the pipe at once, to be read by just one consumer process.)</p> <p>Here is an even more complex multi-stage producer-consumer example:</p> <pre data-language=\"julia\">julia&gt; run(pipeline(`perl -le '$|=1; for(0..9){ print; sleep 1 }'`,\n           prefixer(\"X\",3) &amp; prefixer(\"Y\",3) &amp; prefixer(\"Z\",3),\n           prefixer(\"A\",2) &amp; prefixer(\"B\",2)))\nA X 0\nB Y 1\nA Z 2\nB X 3\nA Y 4\nB Z 5\nA X 6\nB Y 7\nA Z 8\nB X 9\n</pre> <p>This example is similar to the previous one, except there are two stages of consumers, and the stages have different latency so they use a different number of parallel workers, to maintain saturated throughput.</p> <p>We strongly encourage you to try all these examples to see how they work.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/running-external-programs/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/running-external-programs/</a>\n  </p>\n</div>\n","manual/interacting-with-julia/index":"<h1 id=\"man-interacting-with-julia\">Interacting With Julia</h1> <p>Julia comes with a full-featured interactive command-line REPL (read-eval-print loop) built into the <code>julia</code> executable. In addition to allowing quick and easy evaluation of Julia statements, it has a searchable history, tab-completion, many helpful keybindings, and dedicated help and shell modes. The REPL can be started by simply calling julia with no arguments or double-clicking on the executable:</p> <pre data-language=\"julia\">$ julia\n               _\n   _       _ _(_)_     |  A fresh approach to technical computing\n  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org\n   _ _   _| |_  __ _   |  Type \"help()\" to list help topics\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 0.3.0-prerelease+2834 (2014-04-30 03:13 UTC)\n _/ |\\__'_|_|_|\\__'_|  |  Commit 64f437b (0 days old master)\n|__/                   |  x86_64-apple-darwin13.1.0\n\njulia&gt;\n</pre> <p>To exit the interactive session, type <code>^D</code> — the control key together with the <code>d</code> key on a blank line — or type <code>quit()</code> followed by the return or enter key. The REPL greets you with a banner and a <code>julia&gt;</code> prompt.</p>  <h2 id=\"the-different-prompt-modes\">The different prompt modes</h2>  <h3 id=\"the-julian-mode\">The Julian mode</h3> <p>The REPL has four main modes of operation. The first and most common is the Julian prompt. It is the default mode of operation; each new line initially starts with <code>julia&gt;</code>. It is here that you can enter Julia expressions. Hitting return or enter after a complete expression has been entered will evaluate the entry and show the result of the last expression.</p> <pre data-language=\"julia\">julia&gt; string(1 + 2)\n\"3\"\n</pre> <p>There are a number useful features unique to interactive work. In addition to showing the result, the REPL also binds the result to the variable <code>ans</code>. A trailing semicolon on the line can be used as a flag to suppress showing the result.</p> <pre data-language=\"julia\">julia&gt; string(3 * 4);\n\njulia&gt; ans\n\"12\"\n</pre>   <h3 id=\"help-mode\">Help mode</h3> <p>When the cursor is at the beginning of the line, the prompt can be changed to a help mode by typing <code>?</code>. Julia will attempt to print help or documentation for anything entered in help mode:</p> <pre data-language=\"julia\">julia&gt; ? # upon typing ?, the prompt changes (in place) to: help&gt;\n\nhelp&gt; string\nBase.string(xs...)\n\n   Create a string from any values using the \"print\" function.\n</pre> <p>In addition to function names, complete function calls may be entered to see which method is called for the given argument(s). Macros, types and variables can also be queried:</p> <pre data-language=\"julia\">help&gt; string(1)\nstring(x::Union{Int16,Int128,Int8,Int32,Int64}) at string.jl:1553\n\nhelp&gt; @printf\nBase.@printf([io::IOStream], \"%Fmt\", args...)\n\n   Print arg(s) using C \"printf()\" style format specification\n   string. Optionally, an IOStream may be passed as the first argument\n   to redirect output.\n\nhelp&gt; AbstractString\nDataType   : AbstractString\n  supertype: Any\n  subtypes : Any[DirectIndexString,RepString,RevString{T&lt;:AbstractString},RopeString,SubString{T&lt;:AbstractString},UTF16String,UTF8String]\n</pre> <p>Help mode can be exited by pressing backspace at the beginning of the line.</p>   <h3 id=\"man-shell-mode\">Shell mode</h3> <p id=\"shell-mode\">Just as help mode is useful for quick access to documentation, another common task is to use the system shell to execute system commands. Just as <code>?</code> entered help mode when at the beginning of the line, a semicolon (<code>;</code>) will enter the shell mode. And it can be exited by pressing backspace at the beginning of the line.</p> <pre data-language=\"julia\">julia&gt; ; # upon typing ;, the prompt changes (in place) to: shell&gt;\n\nshell&gt; echo hello\nhello\n</pre>   <h3 id=\"search-modes\">Search modes</h3> <p>In all of the above modes, the executed lines get saved to a history file, which can be searched. To initiate an incremental search through the previous history, type <code>^R</code> — the control key together with the <code>r</code> key. The prompt will change to <code>(reverse-i-search)`':</code>, and as you type the search query will appear in the quotes. The most recent result that matches the query will dynamically update to the right of the colon as more is typed. To find an older result using the same query, simply type <code>^R</code> again.</p> <p>Just as <code>^R</code> is a reverse search, <code>^S</code> is a forward search, with the prompt <code>(i-search)`':</code>. The two may be used in conjunction with each other to move through the previous or next matching results, respectively.</p>    <h2 id=\"key-bindings\">Key bindings</h2> <p>The Julia REPL makes great use of key bindings. Several control-key bindings were already introduced above (<code>^D</code> to exit, <code>^R</code> and <code>^S</code> for searching), but there are many more. In addition to the control-key, there are also meta-key bindings. These vary more by platform, but most terminals default to using alt- or option- held down with a key to send the meta-key (or can be configured to do so).</p> <table class=\"docutils\">   <tr class=\"row-odd\">\n<td colspan=\"2\"><strong>Program control</strong></td> </tr> <tr class=\"row-even\">\n<td><code>^D</code></td> <td>Exit (when buffer is empty)</td> </tr> <tr class=\"row-odd\">\n<td><code>^C</code></td> <td>Interrupt or cancel</td> </tr> <tr class=\"row-even\">\n<td><code>^L</code></td> <td>Clear console screen</td> </tr> <tr class=\"row-odd\">\n<td>Return/Enter, <code>^J</code>\n</td> <td>New line, executing if it is complete</td> </tr> <tr class=\"row-even\">\n<td>meta-Return/Enter</td> <td>Insert new line without executing it</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>?</code> or <code>;</code>\n</td> <td>Enter help or shell mode (when at start of a line)</td> </tr> <tr class=\"row-even\">\n<td>\n<code>^R</code>, <code>^S</code>\n</td> <td>Incremental history search, described above</td> </tr> <tr class=\"row-odd\">\n<td colspan=\"2\"><strong>Cursor movement</strong></td> </tr> <tr class=\"row-even\">\n<td>Right arrow, <code>^F</code>\n</td> <td>Move right one character</td> </tr> <tr class=\"row-odd\">\n<td>Left arrow, <code>^B</code>\n</td> <td>Move left one character</td> </tr> <tr class=\"row-even\">\n<td>Home, <code>^A</code>\n</td> <td>Move to beginning of line</td> </tr> <tr class=\"row-odd\">\n<td>End, <code>^E</code>\n</td> <td>Move to end of line</td> </tr> <tr class=\"row-even\">\n<td><code>^P</code></td> <td>Change to the previous or next history entry</td> </tr> <tr class=\"row-odd\">\n<td><code>^N</code></td> <td>Change to the next history entry</td> </tr> <tr class=\"row-even\">\n<td>Up arrow</td> <td>Move up one line (or to the previous history entry)</td> </tr> <tr class=\"row-odd\">\n<td>Down arrow</td> <td>Move down one line (or to the next history entry)</td> </tr> <tr class=\"row-even\">\n<td>Page-up</td> <td>Change to the previous history entry that matches the text before the cursor</td> </tr> <tr class=\"row-odd\">\n<td>Page-down</td> <td>Change to the next history entry that matches the text before the cursor</td> </tr> <tr class=\"row-even\">\n<td><code>meta-F</code></td> <td>Move right one word</td> </tr> <tr class=\"row-odd\">\n<td><code>meta-B</code></td> <td>Move left one word</td> </tr> <tr class=\"row-even\">\n<td colspan=\"2\"><strong>Editing</strong></td> </tr> <tr class=\"row-odd\">\n<td>Backspace, <code>^H</code>\n</td> <td>Delete the previous character</td> </tr> <tr class=\"row-even\">\n<td>Delete, <code>^D</code>\n</td> <td>Forward delete one character (when buffer has text)</td> </tr> <tr class=\"row-odd\">\n<td>meta-Backspace</td> <td>Delete the previous word</td> </tr> <tr class=\"row-even\">\n<td><code>meta-D</code></td> <td>Forward delete the next word</td> </tr> <tr class=\"row-odd\">\n<td><code>^W</code></td> <td>Delete previous text up to the nearest whitespace</td> </tr> <tr class=\"row-even\">\n<td><code>^K</code></td> <td>“Kill” to end of line, placing the text in a buffer</td> </tr> <tr class=\"row-odd\">\n<td><code>^Y</code></td> <td>“Yank” insert the text from the kill buffer</td> </tr> <tr class=\"row-even\">\n<td><code>^T</code></td> <td>Transpose the characters about the cursor</td> </tr>  </table>  <h3 id=\"customizing-keybindings\">Customizing keybindings</h3> <p>Julia’s REPL keybindings may be fully customized to a user’s preferences by passing a dictionary to <code>REPL.setup_interface()</code>. The keys of this dictionary may be characters or strings. The key <code>'*'</code> refers to the default action. Control plus character <code>x</code> bindings are indicated with <code>\"^x\"</code>. Meta plus <code>x</code> can be written <code>\"\\\\Mx\"</code>. The values of the custom keymap must be <code>nothing</code> (indicating that the input should be ignored) or functions that accept the signature <code>(PromptState, AbstractREPL, Char)</code>. The <code>REPL.setup_interface()</code> function must be called before the REPL is initialized, by registering the operation with <code>atreplinit()</code>. For example, to bind the up and down arrow keys to move through history without prefix search, one could put the following code in <code>.juliarc.jl</code>:</p> <pre data-language=\"julia\">import Base: LineEdit, REPL\n\nconst mykeys = Dict{Any,Any}(\n  # Up Arrow\n  \"\\e[A\" =&gt; (s,o...)-&gt;(LineEdit.edit_move_up(s) || LineEdit.history_prev(s, LineEdit.mode(s).hist)),\n  # Down Arrow\n  \"\\e[B\" =&gt; (s,o...)-&gt;(LineEdit.edit_move_up(s) || LineEdit.history_next(s, LineEdit.mode(s).hist))\n)\n\nfunction customize_keys(repl)\n  repl.interface = REPL.setup_interface(repl; extra_repl_keymap = mykeys)\nend\n\natreplinit(customize_keys)\n</pre> <p>Users should refer to <code>base/LineEdit.jl</code> to discover the available actions on key input.</p>    <h2 id=\"tab-completion\">Tab completion</h2> <p>In both the Julian and help modes of the REPL, one can enter the first few characters of a function or type and then press the tab key to get a list all matches:</p> <pre data-language=\"julia\">julia&gt; stri\nstride     strides     string      stringmime  strip\n\njulia&gt; Stri\nStridedArray    StridedVecOrMat  AbstractString\nStridedMatrix   StridedVector\n</pre> <p>The tab key can also be used to substitute LaTeX math symbols with their Unicode equivalents, and get a list of LaTeX matches as well:</p> <pre data-language=\"julia\">julia&gt; \\pi[TAB]\njulia&gt; π\nπ = 3.1415926535897...\n\njulia&gt; e\\_1[TAB] = [1,0]\njulia&gt; e₁ = [1,0]\n2-element Array{Int64,1}:\n 1\n 0\n\njulia&gt; e\\^1[TAB] = [1 0]\njulia&gt; e¹ = [1 0]\n1x2 Array{Int64,2}:\n 1  0\n\njulia&gt; \\sqrt[TAB]2     # √ is equivalent to the sqrt() function\njulia&gt; √2\n1.4142135623730951\n\njulia&gt; \\hbar[TAB](h) = h / 2\\pi[TAB]\njulia&gt; ħ(h) = h / 2π\nħ (generic function with 1 method)\n\njulia&gt; \\h[TAB]\n\\hat              \\heartsuit         \\hksearow          \\hookleftarrow     \\hslash\n\\hbar             \\hermitconjmatrix  \\hkswarow          \\hookrightarrow    \\hspace\n</pre> <p>A full list of tab-completions can be found in the <a class=\"reference internal\" href=\"../unicode-input/index#man-unicode-input\"><span>Unicode Input</span></a> section of the manual.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/interacting-with-julia/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/interacting-with-julia/</a>\n  </p>\n</div>\n","manual/workflow-tips/index":"<h1 id=\"man-workflow-tips\">Workflow Tips</h1> <p>Here are some tips for working with Julia efficiently.</p>  <h2 id=\"repl-based-workflow\">REPL-based workflow</h2> <p>As already elaborated in <a class=\"reference internal\" href=\"../interacting-with-julia/index#man-interacting-with-julia\"><span>Interacting With Julia</span></a>, Julia’s REPL provides rich functionality that facilitates an efficient interactive workflow. Here are some tips that might further enhance your experience at the command line.</p>  <h3 id=\"a-basic-editor-repl-workflow\">A basic editor/REPL workflow</h3> <p>The most basic Julia workflows involve using a text editor in conjunction with the <code>julia</code> command line. A common pattern includes the following elements:</p> <ul> <li>\n<p class=\"first\"><strong>Put code under development in a temporary module.</strong> Create a file, say <code>Tmp.jl</code>, and include within it</p> <pre data-language=\"julia\">module Tmp\n\n&lt;your definitions here&gt;\n\nend\n</pre> </li> <li>\n<p class=\"first\"><strong>Put your test code in another file.</strong> Create another file, say <code>tst.jl</code>, which begins with</p> <pre data-language=\"julia\">import Tmp\n</pre> <p>and includes tests for the contents of <code>Tmp</code>. The value of using <code>import</code> versus <code>using</code> is that you can call <code>reload</code> <code>(\"Tmp\")</code> instead of having to restart the REPL when your definitions change. Of course, the cost is the need to prepend <code>Tmp.</code> to uses of names defined in your module. (You can lower that cost by keeping your module name short.)</p> <p>Alternatively, you can wrap the contents of your test file in a module, as</p> <pre data-language=\"julia\">module Tst\n    using Tmp\n\n    &lt;scratch work&gt;\n\nend\n</pre> <p>The advantage is that you can now do <code>using</code> <code>Tmp</code> in your test code and can therefore avoid prepending <code>Tmp.</code> everywhere. The disadvantage is that code can no longer be selectively copied to the REPL without some tweaking.</p> </li> <li>\n<p class=\"first\"><strong>Lather. Rinse. Repeat.</strong> Explore ideas at the <code>julia</code> command prompt. Save good ideas in <code>tst.jl</code>. Occasionally restart the REPL, issuing</p> <pre data-language=\"julia\">reload(\"Tmp\")\ninclude(\"tst.jl\")\n</pre> </li> </ul>   <h3 id=\"simplify-initialization\">Simplify initialization</h3> <p>To simplify restarting the REPL, put project-specific initialization code in a file, say <code>_init.jl</code>, which you can run on startup by issuing the command:</p> <pre data-language=\"julia\">julia -L _init.jl\n</pre> <p>If you further add the following to your <code>.juliarc.jl</code> file</p> <pre data-language=\"julia\">isinteractive() &amp;&amp; isfile(\"_init.jl\") &amp;&amp; require(\"_init.jl\")\n</pre> <p>then calling <code>julia</code> from that directory will run the initialization code without the additional command line argument.</p>    <h2 id=\"browser-based-workflow\">Browser-based workflow</h2> <p>It is also possible to interact with a Julia REPL in the browser via <a class=\"reference external\" href=\"https://github.com/JuliaLang/IJulia.jl\">IJulia</a>. See the package home for details.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/workflow-tips/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/workflow-tips/</a>\n  </p>\n</div>\n","manual/methods/index":"<h1 id=\"man-methods\">Methods</h1> <p>Recall from <a class=\"reference internal\" href=\"../functions/index#man-functions\"><span>Functions</span></a> that a function is an object that maps a tuple of arguments to a return value, or throws an exception if no appropriate value can be returned. It is common for the same conceptual function or operation to be implemented quite differently for different types of arguments: adding two integers is very different from adding two floating-point numbers, both of which are distinct from adding an integer to a floating-point number. Despite their implementation differences, these operations all fall under the general concept of “addition”. Accordingly, in Julia, these behaviors all belong to a single object: the <code>+</code> function.</p> <p>To facilitate using many different implementations of the same concept smoothly, functions need not be defined all at once, but can rather be defined piecewise by providing specific behaviors for certain combinations of argument types and counts. A definition of one possible behavior for a function is called a <em>method</em>. Thus far, we have presented only examples of functions defined with a single method, applicable to all types of arguments. However, the signatures of method definitions can be annotated to indicate the types of arguments in addition to their number, and more than a single method definition may be provided. When a function is applied to a particular tuple of arguments, the most specific method applicable to those arguments is applied. Thus, the overall behavior of a function is a patchwork of the behaviors of its various method definitions. If the patchwork is well designed, even though the implementations of the methods may be quite different, the outward behavior of the function will appear seamless and consistent.</p> <p>The choice of which method to execute when a function is applied is called <em>dispatch</em>. Julia allows the dispatch process to choose which of a function’s methods to call based on the number of arguments given, and on the types of all of the function’s arguments. This is different than traditional object-oriented languages, where dispatch occurs based only on the first argument, which often has a special argument syntax, and is sometimes implied rather than explicitly written as an argument. <a class=\"footnote-reference\" href=\"#id2\" id=\"id1\">[1]</a> Using all of a function’s arguments to choose which method should be invoked, rather than just the first, is known as <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Multiple_dispatch\">multiple dispatch</a>. Multiple dispatch is particularly useful for mathematical code, where it makes little sense to artificially deem the operations to “belong” to one argument more than any of the others: does the addition operation in <code>x + y</code> belong to <code>x</code> any more than it does to <code>y</code>? The implementation of a mathematical operator generally depends on the types of all of its arguments. Even beyond mathematical operations, however, multiple dispatch ends up being a powerful and convenient paradigm for structuring and organizing programs.</p> <table class=\"docutils footnote\" frame=\"void\" id=\"id2\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[1]</a></td>\n<td>In C++ or Java, for example, in a method call like <code>obj.meth(arg1,arg2)</code>, the object obj “receives” the method call and is implicitly passed to the method via the <code>this</code> keyword, rather than as an explicit method argument. When the current <code>this</code> object is the receiver of a method call, it can be omitted altogether, writing just <code>meth(arg1,arg2)</code>, with <code>this</code> implied as the receiving object.</td>\n</tr>  </table>  <h2 id=\"defining-methods\">Defining Methods</h2> <p>Until now, we have, in our examples, defined only functions with a single method having unconstrained argument types. Such functions behave just like they would in traditional dynamically typed languages. Nevertheless, we have used multiple dispatch and methods almost continually without being aware of it: all of Julia’s standard functions and operators, like the aforementioned <code>+</code> function, have many methods defining their behavior over various possible combinations of argument type and count.</p> <p>When defining a function, one can optionally constrain the types of parameters it is applicable to, using the <code>::</code> type-assertion operator, introduced in the section on <a class=\"reference internal\" href=\"../types/index#man-composite-types\"><span>Composite Types</span></a>:</p> <pre data-language=\"julia\">julia&gt; f(x::Float64, y::Float64) = 2x + y;\n</pre> <p>This function definition applies only to calls where <code>x</code> and <code>y</code> are both values of type <code>Float64</code>:</p> <pre data-language=\"julia\">julia&gt; f(2.0, 3.0)\n7.0\n</pre> <p>Applying it to any other types of arguments will result in a <code>MethodError</code>:</p> <pre data-language=\"julia\">julia&gt; f(2.0, 3)\nERROR: MethodError: `f` has no method matching f(::Float64, ::Int64)\nClosest candidates are:\n  f(::Float64, !Matched::Float64)\n\njulia&gt; f(Float32(2.0), 3.0)\nERROR: MethodError: `f` has no method matching f(::Float32, ::Float64)\nClosest candidates are:\n  f(!Matched::Float64, ::Float64)\n\njulia&gt; f(2.0, \"3.0\")\nERROR: MethodError: `f` has no method matching f(::Float64, ::ASCIIString)\nClosest candidates are:\n  f(::Float64, !Matched::Float64)\n\njulia&gt; f(\"2.0\", \"3.0\")\nERROR: MethodError: `f` has no method matching f(::ASCIIString, ::ASCIIString)\n</pre> <p>As you can see, the arguments must be precisely of type <code>Float64</code>. Other numeric types, such as integers or 32-bit floating-point values, are not automatically converted to 64-bit floating-point, nor are strings parsed as numbers. Because <code>Float64</code> is a concrete type and concrete types cannot be subclassed in Julia, such a definition can only be applied to arguments that are exactly of type <code>Float64</code>. It may often be useful, however, to write more general methods where the declared parameter types are abstract:</p> <pre data-language=\"julia\">julia&gt; f(x::Number, y::Number) = 2x - y;\n\njulia&gt; f(2.0, 3)\n1.0\n</pre> <p>This method definition applies to any pair of arguments that are instances of <code>Number</code>. They need not be of the same type, so long as they are each numeric values. The problem of handling disparate numeric types is delegated to the arithmetic operations in the expression <code>2x - y</code>.</p> <p>To define a function with multiple methods, one simply defines the function multiple times, with different numbers and types of arguments. The first method definition for a function creates the function object, and subsequent method definitions add new methods to the existing function object. The most specific method definition matching the number and types of the arguments will be executed when the function is applied. Thus, the two method definitions above, taken together, define the behavior for <code>f</code> over all pairs of instances of the abstract type <code>Number</code> — but with a different behavior specific to pairs of <code>Float64</code> values. If one of the arguments is a 64-bit float but the other one is not, then the <code>f(Float64,Float64)</code> method cannot be called and the more general <code>f(Number,Number)</code> method must be used:</p> <pre data-language=\"julia\">julia&gt; f(2.0, 3.0)\n7.0\n\njulia&gt; f(2, 3.0)\n1.0\n\njulia&gt; f(2.0, 3)\n1.0\n\njulia&gt; f(2, 3)\n1\n</pre> <p>The <code>2x + y</code> definition is only used in the first case, while the <code>2x - y</code> definition is used in the others. No automatic casting or conversion of function arguments is ever performed: all conversion in Julia is non-magical and completely explicit. <a class=\"reference internal\" href=\"../conversion-and-promotion/index#man-conversion-and-promotion\"><span>Conversion and Promotion</span></a>, however, shows how clever application of sufficiently advanced technology can be indistinguishable from magic. <a class=\"reference internal\" href=\"#clarke61\" id=\"id3\">[Clarke61]</a></p> <p>For non-numeric values, and for fewer or more than two arguments, the function <code>f</code> remains undefined, and applying it will still result in a <code>MethodError</code>:</p> <pre data-language=\"julia\">julia&gt; f(\"foo\", 3)\nERROR: MethodError: `f` has no method matching f(::ASCIIString, ::Int64)\nClosest candidates are:\n  f(!Matched::Number, ::Number)\n\njulia&gt; f()\nERROR: MethodError: `f` has no method matching f()\n</pre> <p>You can easily see which methods exist for a function by entering the function object itself in an interactive session:</p> <pre data-language=\"julia\">julia&gt; f\nf (generic function with 2 methods)\n</pre> <p>This output tells us that <code>f</code> is a function object with two methods. To find out what the signatures of those methods are, use the <code>methods()</code> function:</p> <pre data-language=\"julia\">julia&gt; methods(f)\n# 2 methods for generic function \"f\":\nf(x::Float64, y::Float64) at none:1\nf(x::Number, y::Number) at none:1\n</pre> <p>which shows that <code>f</code> has two methods, one taking two <code>Float64</code> arguments and one taking arguments of type <code>Number</code>. It also indicates the file and line number where the methods were defined: because these methods were defined at the REPL, we get the apparent line number <code>none:1</code>.</p> <p>In the absence of a type declaration with <code>::</code>, the type of a method parameter is <code>Any</code> by default, meaning that it is unconstrained since all values in Julia are instances of the abstract type <code>Any</code>. Thus, we can define a catch-all method for <code>f</code> like so:</p> <pre data-language=\"julia\">julia&gt; f(x,y) = println(\"Whoa there, Nelly.\");\n\njulia&gt; f(\"foo\", 1)\nWhoa there, Nelly.\n</pre> <p>This catch-all is less specific than any other possible method definition for a pair of parameter values, so it is only be called on pairs of arguments to which no other method definition applies.</p> <p>Although it seems a simple concept, multiple dispatch on the types of values is perhaps the single most powerful and central feature of the Julia language. Core operations typically have dozens of methods:</p> <pre data-language=\"julia\">julia&gt; methods(+)\n# 139 methods for generic function \"+\":\n+(x::Bool) at bool.jl:33\n+(x::Bool,y::Bool) at bool.jl:36\n+(y::AbstractFloat,x::Bool) at bool.jl:46\n+(x::Int64,y::Int64) at int.jl:14\n+(x::Int8,y::Int8) at int.jl:14\n+(x::UInt8,y::UInt8) at int.jl:14\n+(x::Int16,y::Int16) at int.jl:14\n+(x::UInt16,y::UInt16) at int.jl:14\n+(x::Int32,y::Int32) at int.jl:14\n+(x::UInt32,y::UInt32) at int.jl:14\n+(x::UInt64,y::UInt64) at int.jl:14\n+(x::Int128,y::Int128) at int.jl:14\n+(x::UInt128,y::UInt128) at int.jl:14\n+(x::Float32,y::Float32) at float.jl:192\n+(x::Float64,y::Float64) at float.jl:193\n+(z::Complex{T&lt;:Real},w::Complex{T&lt;:Real}) at complex.jl:96\n+(x::Real,z::Complex{T&lt;:Real}) at complex.jl:106\n+(z::Complex{T&lt;:Real},x::Real) at complex.jl:107\n+(x::Rational{T&lt;:Integer},y::Rational{T&lt;:Integer}) at rational.jl:167\n+(a::Float16,b::Float16) at float16.jl:136\n+(x::Base.GMP.BigInt,y::Base.GMP.BigInt) at gmp.jl:243\n+(a::Base.GMP.BigInt,b::Base.GMP.BigInt,c::Base.GMP.BigInt) at gmp.jl:266\n+(a::Base.GMP.BigInt,b::Base.GMP.BigInt,c::Base.GMP.BigInt,d::Base.GMP.BigInt) at gmp.jl:272\n+(a::Base.GMP.BigInt,b::Base.GMP.BigInt,c::Base.GMP.BigInt,d::Base.GMP.BigInt,e::Base.GMP.BigInt) at gmp.jl:279\n+(x::Base.GMP.BigInt,c::Union{UInt32,UInt16,UInt8,UInt64}) at gmp.jl:291\n+(c::Union{UInt32,UInt16,UInt8,UInt64},x::Base.GMP.BigInt) at gmp.jl:295\n+(x::Base.GMP.BigInt,c::Union{Int16,Int32,Int8,Int64}) at gmp.jl:307\n+(c::Union{Int16,Int32,Int8,Int64},x::Base.GMP.BigInt) at gmp.jl:308\n+(x::Base.MPFR.BigFloat,y::Base.MPFR.BigFloat) at mpfr.jl:206\n+(x::Base.MPFR.BigFloat,c::Union{UInt32,UInt16,UInt8,UInt64}) at mpfr.jl:213\n+(c::Union{UInt32,UInt16,UInt8,UInt64},x::Base.MPFR.BigFloat) at mpfr.jl:217\n+(x::Base.MPFR.BigFloat,c::Union{Int16,Int32,Int8,Int64}) at mpfr.jl:221\n+(c::Union{Int16,Int32,Int8,Int64},x::Base.MPFR.BigFloat) at mpfr.jl:225\n+(x::Base.MPFR.BigFloat,c::Union{Float16,Float64,Float32}) at mpfr.jl:229\n+(c::Union{Float16,Float64,Float32},x::Base.MPFR.BigFloat) at mpfr.jl:233\n+(x::Base.MPFR.BigFloat,c::Base.GMP.BigInt) at mpfr.jl:237\n+(c::Base.GMP.BigInt,x::Base.MPFR.BigFloat) at mpfr.jl:241\n+(a::Base.MPFR.BigFloat,b::Base.MPFR.BigFloat,c::Base.MPFR.BigFloat) at mpfr.jl:318\n+(a::Base.MPFR.BigFloat,b::Base.MPFR.BigFloat,c::Base.MPFR.BigFloat,d::Base.MPFR.BigFloat) at mpfr.jl:324\n+(a::Base.MPFR.BigFloat,b::Base.MPFR.BigFloat,c::Base.MPFR.BigFloat,d::Base.MPFR.BigFloat,e::Base.MPFR.BigFloat) at mpfr.jl:331\n+(x::Irrational{sym},y::Irrational{sym}) at constants.jl:71\n+{T&lt;:Number}(x::T&lt;:Number,y::T&lt;:Number) at promotion.jl:205\n+{T&lt;:AbstractFloat}(x::Bool,y::T&lt;:AbstractFloat) at bool.jl:43\n+(x::Number,y::Number) at promotion.jl:167\n+(x::Integer,y::Ptr{T}) at pointer.jl:70\n+(x::Bool,A::AbstractArray{Bool,N}) at array.jl:829\n+(x::Integer,y::Char) at char.jl:41\n+(x::Number) at operators.jl:72\n+(r1::OrdinalRange{T,S},r2::OrdinalRange{T,S}) at operators.jl:325\n+{T&lt;:AbstractFloat}(r1::FloatRange{T&lt;:AbstractFloat},r2::FloatRange{T&lt;:AbstractFloat}) at operators.jl:331\n+(r1::FloatRange{T&lt;:AbstractFloat},r2::FloatRange{T&lt;:AbstractFloat}) at operators.jl:348\n+(r1::FloatRange{T&lt;:AbstractFloat},r2::OrdinalRange{T,S}) at operators.jl:349\n+(r1::OrdinalRange{T,S},r2::FloatRange{T&lt;:AbstractFloat}) at operators.jl:350\n+(x::Ptr{T},y::Integer) at pointer.jl:68\n+{S,T}(A::Range{S},B::Range{T}) at array.jl:773\n+{S,T}(A::Range{S},B::AbstractArray{T,N}) at array.jl:791\n+(A::AbstractArray{Bool,N},x::Bool) at array.jl:828\n+(A::BitArray{N},B::BitArray{N}) at bitarray.jl:926\n+(A::Union{DenseArray{Bool,N},SubArray{Bool,N,A&lt;:DenseArray{T,N},I&lt;:Tuple{Vararg{Union{Colon,Range{Int64},Int64}}},LD}},B::Union{DenseArray{Bool,N},SubArray{Bool,N,A&lt;:DenseArray{T,N},I&lt;:Tuple{Vararg{Union{Colon,Range{Int64},Int64}}},LD}}) at array.jl:859\n+(A::Base.LinAlg.SymTridiagonal{T},B::Base.LinAlg.SymTridiagonal{T}) at linalg/tridiag.jl:59\n+(A::Base.LinAlg.Tridiagonal{T},B::Base.LinAlg.Tridiagonal{T}) at linalg/tridiag.jl:254\n+(A::Base.LinAlg.Tridiagonal{T},B::Base.LinAlg.SymTridiagonal{T}) at linalg/special.jl:113\n+(A::Base.LinAlg.SymTridiagonal{T},B::Base.LinAlg.Tridiagonal{T}) at linalg/special.jl:112\n+(A::Base.LinAlg.UpperTriangular{T,S&lt;:AbstractArray{T,2}},B::Base.LinAlg.UpperTriangular{T,S&lt;:AbstractArray{T,2}}) at linalg/triangular.jl:164\n+(A::Base.LinAlg.LowerTriangular{T,S&lt;:AbstractArray{T,2}},B::Base.LinAlg.LowerTriangular{T,S&lt;:AbstractArray{T,2}}) at linalg/triangular.jl:165\n+(A::Base.LinAlg.UpperTriangular{T,S&lt;:AbstractArray{T,2}},B::Base.LinAlg.UnitUpperTriangular{T,S&lt;:AbstractArray{T,2}}) at linalg/triangular.jl:166\n+(A::Base.LinAlg.LowerTriangular{T,S&lt;:AbstractArray{T,2}},B::Base.LinAlg.UnitLowerTriangular{T,S&lt;:AbstractArray{T,2}}) at linalg/triangular.jl:167\n+(A::Base.LinAlg.UnitUpperTriangular{T,S&lt;:AbstractArray{T,2}},B::Base.LinAlg.UpperTriangular{T,S&lt;:AbstractArray{T,2}}) at linalg/triangular.jl:168\n+(A::Base.LinAlg.UnitLowerTriangular{T,S&lt;:AbstractArray{T,2}},B::Base.LinAlg.LowerTriangular{T,S&lt;:AbstractArray{T,2}}) at linalg/triangular.jl:169\n+(A::Base.LinAlg.UnitUpperTriangular{T,S&lt;:AbstractArray{T,2}},B::Base.LinAlg.UnitUpperTriangular{T,S&lt;:AbstractArray{T,2}}) at linalg/triangular.jl:170\n+(A::Base.LinAlg.UnitLowerTriangular{T,S&lt;:AbstractArray{T,2}},B::Base.LinAlg.UnitLowerTriangular{T,S&lt;:AbstractArray{T,2}}) at linalg/triangular.jl:171\n+(A::Base.LinAlg.AbstractTriangular{T,S&lt;:AbstractArray{T,2}},B::Base.LinAlg.AbstractTriangular{T,S&lt;:AbstractArray{T,2}}) at linalg/triangular.jl:172\n+(Da::Base.LinAlg.Diagonal{T},Db::Base.LinAlg.Diagonal{T}) at linalg/diagonal.jl:50\n+(A::Base.LinAlg.Bidiagonal{T},B::Base.LinAlg.Bidiagonal{T}) at linalg/bidiag.jl:111\n+{T}(B::BitArray{2},J::Base.LinAlg.UniformScaling{T}) at linalg/uniformscaling.jl:28\n+(A::Base.LinAlg.Diagonal{T},B::Base.LinAlg.Bidiagonal{T}) at linalg/special.jl:103\n+(A::Base.LinAlg.Bidiagonal{T},B::Base.LinAlg.Diagonal{T}) at linalg/special.jl:104\n+(A::Base.LinAlg.Diagonal{T},B::Base.LinAlg.Tridiagonal{T}) at linalg/special.jl:103\n+(A::Base.LinAlg.Tridiagonal{T},B::Base.LinAlg.Diagonal{T}) at linalg/special.jl:104\n+(A::Base.LinAlg.Diagonal{T},B::Array{T,2}) at linalg/special.jl:103\n+(A::Array{T,2},B::Base.LinAlg.Diagonal{T}) at linalg/special.jl:104\n+(A::Base.LinAlg.Bidiagonal{T},B::Base.LinAlg.Tridiagonal{T}) at linalg/special.jl:103\n+(A::Base.LinAlg.Tridiagonal{T},B::Base.LinAlg.Bidiagonal{T}) at linalg/special.jl:104\n+(A::Base.LinAlg.Bidiagonal{T},B::Array{T,2}) at linalg/special.jl:103\n+(A::Array{T,2},B::Base.LinAlg.Bidiagonal{T}) at linalg/special.jl:104\n+(A::Base.LinAlg.Tridiagonal{T},B::Array{T,2}) at linalg/special.jl:103\n+(A::Array{T,2},B::Base.LinAlg.Tridiagonal{T}) at linalg/special.jl:104\n+(A::Base.LinAlg.SymTridiagonal{T},B::Array{T,2}) at linalg/special.jl:112\n+(A::Array{T,2},B::Base.LinAlg.SymTridiagonal{T}) at linalg/special.jl:113\n+(A::Base.LinAlg.Diagonal{T},B::Base.LinAlg.SymTridiagonal{T}) at linalg/special.jl:121\n+(A::Base.LinAlg.SymTridiagonal{T},B::Base.LinAlg.Diagonal{T}) at linalg/special.jl:122\n+(A::Base.LinAlg.Bidiagonal{T},B::Base.LinAlg.SymTridiagonal{T}) at linalg/special.jl:121\n+(A::Base.LinAlg.SymTridiagonal{T},B::Base.LinAlg.Bidiagonal{T}) at linalg/special.jl:122\n+{Tv1,Ti1,Tv2,Ti2}(A_1::Base.SparseMatrix.SparseMatrixCSC{Tv1,Ti1},A_2::Base.SparseMatrix.SparseMatrixCSC{Tv2,Ti2}) at sparse/sparsematrix.jl:873\n+(A::Base.SparseMatrix.SparseMatrixCSC{Tv,Ti&lt;:Integer},B::Array{T,N}) at sparse/sparsematrix.jl:885\n+(A::Array{T,N},B::Base.SparseMatrix.SparseMatrixCSC{Tv,Ti&lt;:Integer}) at sparse/sparsematrix.jl:887\n+{P&lt;:Base.Dates.Period}(Y::Union{SubArray{P&lt;:Base.Dates.Period,N,A&lt;:DenseArray{T,N},I&lt;:Tuple{Vararg{Union{Colon,Range{Int64},Int64}}},LD},DenseArray{P&lt;:Base.Dates.Period,N}},x::P&lt;:Base.Dates.Period) at dates/periods.jl:50\n+{T&lt;:Base.Dates.TimeType}(r::Range{T&lt;:Base.Dates.TimeType},x::Base.Dates.Period) at dates/ranges.jl:39\n+{T&lt;:Number}(x::AbstractArray{T&lt;:Number,N}) at abstractarray.jl:442\n+{S,T}(A::AbstractArray{S,N},B::Range{T}) at array.jl:782\n+{S,T}(A::AbstractArray{S,N},B::AbstractArray{T,N}) at array.jl:800\n+(A::AbstractArray{T,N},x::Number) at array.jl:832\n+(x::Number,A::AbstractArray{T,N}) at array.jl:833\n+(x::Char,y::Integer) at char.jl:40\n+{N}(index1::Base.IteratorsMD.CartesianIndex{N},index2::Base.IteratorsMD.CartesianIndex{N}) at multidimensional.jl:121\n+(J1::Base.LinAlg.UniformScaling{T&lt;:Number},J2::Base.LinAlg.UniformScaling{T&lt;:Number}) at linalg/uniformscaling.jl:27\n+(J::Base.LinAlg.UniformScaling{T&lt;:Number},B::BitArray{2}) at linalg/uniformscaling.jl:29\n+(J::Base.LinAlg.UniformScaling{T&lt;:Number},A::AbstractArray{T,2}) at linalg/uniformscaling.jl:30\n+(J::Base.LinAlg.UniformScaling{T&lt;:Number},x::Number) at linalg/uniformscaling.jl:31\n+(x::Number,J::Base.LinAlg.UniformScaling{T&lt;:Number}) at linalg/uniformscaling.jl:32\n+{TA,TJ}(A::AbstractArray{TA,2},J::Base.LinAlg.UniformScaling{TJ}) at linalg/uniformscaling.jl:35\n+{T}(a::Base.Pkg.Resolve.VersionWeights.HierarchicalValue{T},b::Base.Pkg.Resolve.VersionWeights.HierarchicalValue{T}) at pkg/resolve/versionweight.jl:21\n+(a::Base.Pkg.Resolve.VersionWeights.VWPreBuildItem,b::Base.Pkg.Resolve.VersionWeights.VWPreBuildItem) at pkg/resolve/versionweight.jl:83\n+(a::Base.Pkg.Resolve.VersionWeights.VWPreBuild,b::Base.Pkg.Resolve.VersionWeights.VWPreBuild) at pkg/resolve/versionweight.jl:129\n+(a::Base.Pkg.Resolve.VersionWeights.VersionWeight,b::Base.Pkg.Resolve.VersionWeights.VersionWeight) at pkg/resolve/versionweight.jl:183\n+(a::Base.Pkg.Resolve.MaxSum.FieldValues.FieldValue,b::Base.Pkg.Resolve.MaxSum.FieldValues.FieldValue) at pkg/resolve/fieldvalue.jl:43\n+{P&lt;:Base.Dates.Period}(x::P&lt;:Base.Dates.Period,y::P&lt;:Base.Dates.Period) at dates/periods.jl:43\n+{P&lt;:Base.Dates.Period}(x::P&lt;:Base.Dates.Period,Y::Union{SubArray{P&lt;:Base.Dates.Period,N,A&lt;:DenseArray{T,N},I&lt;:Tuple{Vararg{Union{Colon,Range{Int64},Int64}}},LD},DenseArray{P&lt;:Base.Dates.Period,N}}) at dates/periods.jl:49\n+(x::Base.Dates.Period,y::Base.Dates.Period) at dates/periods.jl:196\n+(x::Base.Dates.CompoundPeriod,y::Base.Dates.Period) at dates/periods.jl:197\n+(y::Base.Dates.Period,x::Base.Dates.CompoundPeriod) at dates/periods.jl:198\n+(x::Base.Dates.CompoundPeriod,y::Base.Dates.CompoundPeriod) at dates/periods.jl:199\n+(dt::Base.Dates.DateTime,y::Base.Dates.Year) at dates/arithmetic.jl:13\n+(dt::Base.Dates.Date,y::Base.Dates.Year) at dates/arithmetic.jl:17\n+(dt::Base.Dates.DateTime,z::Base.Dates.Month) at dates/arithmetic.jl:37\n+(dt::Base.Dates.Date,z::Base.Dates.Month) at dates/arithmetic.jl:43\n+(x::Base.Dates.Date,y::Base.Dates.Week) at dates/arithmetic.jl:60\n+(x::Base.Dates.Date,y::Base.Dates.Day) at dates/arithmetic.jl:62\n+(x::Base.Dates.DateTime,y::Base.Dates.Period) at dates/arithmetic.jl:64\n+(a::Base.Dates.TimeType,b::Base.Dates.Period,c::Base.Dates.Period) at dates/periods.jl:210\n+(a::Base.Dates.TimeType,b::Base.Dates.Period,c::Base.Dates.Period,d::Base.Dates.Period...) at dates/periods.jl:212\n+(x::Base.Dates.TimeType,y::Base.Dates.CompoundPeriod) at dates/periods.jl:216\n+(x::Base.Dates.CompoundPeriod,y::Base.Dates.TimeType) at dates/periods.jl:221\n+(x::Base.Dates.Instant) at dates/arithmetic.jl:4\n+(x::Base.Dates.TimeType) at dates/arithmetic.jl:8\n+(y::Base.Dates.Period,x::Base.Dates.TimeType) at dates/arithmetic.jl:66\n+{T&lt;:Base.Dates.TimeType}(x::Base.Dates.Period,r::Range{T&lt;:Base.Dates.TimeType}) at dates/ranges.jl:40\n+(a,b,c) at operators.jl:83\n+(a,b,c,xs...) at operators.jl:84\n</pre> <p>Multiple dispatch together with the flexible parametric type system give Julia its ability to abstractly express high-level algorithms decoupled from implementation details, yet generate efficient, specialized code to handle each case at run time.</p>   <h2 id=\"method-ambiguities\">Method Ambiguities</h2> <p>It is possible to define a set of function methods such that there is no unique most specific method applicable to some combinations of arguments:</p> <pre data-language=\"julia\">julia&gt; g(x::Float64, y) = 2x + y;\n\njulia&gt; g(x, y::Float64) = x + 2y;\nWARNING: New definition\n    g(Any, Float64) at none:1\nis ambiguous with:\n    g(Float64, Any) at none:1.\nTo fix, define\n    g(Float64, Float64)\nbefore the new definition.\n\njulia&gt; g(2.0, 3)\n7.0\n\njulia&gt; g(2, 3.0)\n8.0\n\njulia&gt; g(2.0, 3.0)\n7.0\n</pre> <p>Here the call <code>g(2.0, 3.0)</code> could be handled by either the <code>g(Float64, Any)</code> or the <code>g(Any, Float64)</code> method, and neither is more specific than the other. In such cases, Julia warns you about this ambiguity, but allows you to proceed, arbitrarily picking a method. You should avoid method ambiguities by specifying an appropriate method for the intersection case:</p> <pre data-language=\"julia\">julia&gt; g(x::Float64, y::Float64) = 2x + 2y;\n\njulia&gt; g(x::Float64, y) = 2x + y;\n\njulia&gt; g(x, y::Float64) = x + 2y;\n\njulia&gt; g(2.0, 3)\n7.0\n\njulia&gt; g(2, 3.0)\n8.0\n\njulia&gt; g(2.0, 3.0)\n10.0\n</pre> <p>To suppress Julia’s warning, the disambiguating method must be defined first, since otherwise the ambiguity exists, if transiently, until the more specific method is defined.</p>   <h2 id=\"man-parametric-methods\">Parametric Methods</h2> <p id=\"parametric-methods\">Method definitions can optionally have type parameters immediately after the method name and before the parameter tuple:</p> <pre data-language=\"julia\">julia&gt; same_type{T}(x::T, y::T) = true;\n\njulia&gt; same_type(x,y) = false;\n</pre> <p>The first method applies whenever both arguments are of the same concrete type, regardless of what type that is, while the second method acts as a catch-all, covering all other cases. Thus, overall, this defines a boolean function that checks whether its two arguments are of the same type:</p> <pre data-language=\"julia\">julia&gt; same_type(1, 2)\ntrue\n\njulia&gt; same_type(1, 2.0)\nfalse\n\njulia&gt; same_type(1.0, 2.0)\ntrue\n\njulia&gt; same_type(\"foo\", 2.0)\nfalse\n\njulia&gt; same_type(\"foo\", \"bar\")\ntrue\n\njulia&gt; same_type(Int32(1), Int64(2))\nfalse\n</pre> <p>This kind of definition of function behavior by dispatch is quite common — idiomatic, even — in Julia. Method type parameters are not restricted to being used as the types of parameters: they can be used anywhere a value would be in the signature of the function or body of the function. Here’s an example where the method type parameter <code>T</code> is used as the type parameter to the parametric type <code>Vector{T}</code> in the method signature:</p> <pre data-language=\"julia\">julia&gt; myappend{T}(v::Vector{T}, x::T) = [v..., x]\nmyappend (generic function with 1 method)\n\njulia&gt; myappend([1,2,3],4)\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\njulia&gt; myappend([1,2,3],2.5)\nERROR: MethodError: `myappend` has no method matching myappend(::Array{Int64,1}, ::Float64)\nClosest candidates are:\n  myappend{T}(::Array{T,1}, !Matched::T)\n\njulia&gt; myappend([1.0,2.0,3.0],4.0)\n4-element Array{Float64,1}:\n 1.0\n 2.0\n 3.0\n 4.0\n\njulia&gt; myappend([1.0,2.0,3.0],4)\nERROR: MethodError: `myappend` has no method matching myappend(::Array{Float64,1}, ::Int64)\nClosest candidates are:\n  myappend{T}(::Array{T,1}, !Matched::T)\n</pre> <p>As you can see, the type of the appended element must match the element type of the vector it is appended to, or else a <code>MethodError</code> is raised. In the following example, the method type parameter <code>T</code> is used as the return value:</p> <pre data-language=\"julia\">julia&gt; mytypeof{T}(x::T) = T\nmytypeof (generic function with 1 method)\n\njulia&gt; mytypeof(1)\nInt64\n\njulia&gt; mytypeof(1.0)\nFloat64\n</pre> <p>Just as you can put subtype constraints on type parameters in type declarations (see <a class=\"reference internal\" href=\"../types/index#man-parametric-types\"><span>Parametric Types</span></a>), you can also constrain type parameters of methods:</p> <pre data-language=\"julia\">same_type_numeric{T&lt;:Number}(x::T, y::T) = true\nsame_type_numeric(x::Number, y::Number) = false\n\njulia&gt; same_type_numeric(1, 2)\ntrue\n\njulia&gt; same_type_numeric(1, 2.0)\nfalse\n\njulia&gt; same_type_numeric(1.0, 2.0)\ntrue\n\njulia&gt; same_type_numeric(\"foo\", 2.0)\nno method same_type_numeric(ASCIIString,Float64)\n\njulia&gt; same_type_numeric(\"foo\", \"bar\")\nno method same_type_numeric(ASCIIString,ASCIIString)\n\njulia&gt; same_type_numeric(Int32(1), Int64(2))\nfalse\n</pre> <p>The <code>same_type_numeric</code> function behaves much like the <code>same_type</code> function defined above, but is only defined for pairs of numbers.</p>   <h2 id=\"man-note-on-optional-and-keyword-arguments\">Note on Optional and keyword Arguments</h2> <p id=\"note-on-optional-and-keyword-arguments\">As mentioned briefly in <a class=\"reference internal\" href=\"../functions/index#man-functions\"><span>Functions</span></a>, optional arguments are implemented as syntax for multiple method definitions. For example, this definition:</p> <pre data-language=\"julia\">f(a=1,b=2) = a+2b\n</pre> <p>translates to the following three methods:</p> <pre data-language=\"julia\">f(a,b) = a+2b\nf(a) = f(a,2)\nf() = f(1,2)\n</pre> <p>This means that calling <code>f()</code> is equivalent to calling <code>f(1,2)</code>. In this case the result is <code>5</code>, because <code>f(1,2)</code> invokes the first method of <code>f</code> above. However, this need not always be the case. If you define a fourth method that is more specialized for integers:</p> <pre data-language=\"julia\">f(a::Int,b::Int) = a-2b\n</pre> <p>then the result of both <code>f()</code> and <code>f(1,2)</code> is <code>-3</code>. In other words, optional arguments are tied to a function, not to any specific method of that function. It depends on the types of the optional arguments which method is invoked. When optional arguments are defined in terms of a global variable, the type of the optional argument may even change at run-time.</p> <p>Keyword arguments behave quite differently from ordinary positional arguments. In particular, they do not participate in method dispatch. Methods are dispatched based only on positional arguments, with keyword arguments processed after the matching method is identified.</p>   <h2 id=\"call-overloading-and-function-like-objects\">Call overloading and function-like objects</h2> <p>For any arbitrary Julia object <code>x</code> other than <code>Function</code> objects (defined via <code>function</code> syntax), <code>x(args...)</code> is equivalent to <code>call(x, args...)</code>, where <code>call()</code> is a generic function in the Julia <code>Base</code> module. By adding new methods to <code>call</code>, you can add a function-call syntax to arbitrary Julia types. (Such “callable” objects are sometimes called “functors.”)</p> <p>For example, if you want to make <code>x(arg)</code> equivalent to <code>x * arg</code> for <code>x::Number</code>, you can define:</p> <pre data-language=\"julia\">Base.call(x::Number, arg) = x * arg\n</pre> <p>at which point you can do:</p> <pre data-language=\"julia\">x = 7\nx(10)\n</pre> <p>to get <code>70</code>.</p> <p><code>call</code> overloading is also used extensively for type constructors in Julia, discussed <a class=\"reference internal\" href=\"../constructors/index#constructors-call-and-conversion\"><span>later in the manual</span></a>.</p>   <h2 id=\"empty-generic-functions\">Empty generic functions</h2> <p>Occasionally it is useful to introduce a generic function without yet adding methods. This can be used to separate interface definitions from implementations. It might also be done for the purpose of documentation or code readability. The syntax for this is an empty <code>function</code> block without a tuple of arguments:</p> <pre data-language=\"julia\">function emptyfunc\nend\n</pre> <table class=\"docutils citation\" frame=\"void\" id=\"clarke61\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id3\">[Clarke61]</a></td>\n<td>Arthur C. Clarke, <em>Profiles of the Future</em> (1961): Clarke’s Third Law.</td>\n</tr>  </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/methods/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/methods/</a>\n  </p>\n</div>\n","manual/dates/index":"<h1 id=\"man-dates\">Date and DateTime</h1> <p>The <a class=\"reference internal\" href=\"../../stdlib/dates/index#module-Dates\" title=\"Dates\"><code>Dates</code></a> module provides two types for working with dates: <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Date\" title=\"Dates.Date\"><code>Date</code></a> and <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.DateTime\" title=\"Dates.DateTime\"><code>DateTime</code></a>, representing day and millisecond precision, respectively; both are subtypes of the abstract <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.TimeType\" title=\"Dates.TimeType\"><code>TimeType</code></a>. The motivation for distinct types is simple: some operations are much simpler, both in terms of code and mental reasoning, when the complexities of greater precision don’t have to be dealt with. For example, since the <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Date\" title=\"Dates.Date\"><code>Date</code></a> type only resolves to the precision of a single date (i.e. no hours, minutes, or seconds), normal considerations for time zones, daylight savings/summer time, and leap seconds are unnecessary and avoided.</p> <p>Both <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Date\" title=\"Dates.Date\"><code>Date</code></a> and <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.DateTime\" title=\"Dates.DateTime\"><code>DateTime</code></a> are basically immutable <code>Int64</code> wrappers. The single <code>instant</code> field of either type is actually a <code>UTInstant{P}</code> type, which represents a continuously increasing machine timeline based on the UT second <a class=\"footnote-reference\" href=\"#id2\" id=\"id1\">[1]</a>. The <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.DateTime\" title=\"Dates.DateTime\"><code>DateTime</code></a> type is <em>timezone-unaware</em> (in Python parlance) or is analogous to a <em>LocalDateTime</em> in Java 8. Additional time zone functionality can be added through the <a class=\"reference external\" href=\"https://github.com/quinnj/Timezones.jl/\">Timezones.jl package</a>, which compiles the <a class=\"reference external\" href=\"http://www.iana.org/time-zones\">Olsen Time Zone Database</a>. Both <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Date\" title=\"Dates.Date\"><code>Date</code></a> and <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.DateTime\" title=\"Dates.DateTime\"><code>DateTime</code></a> are based on the ISO 8601 standard, which follows the proleptic Gregorian calendar. One note is that the ISO 8601 standard is particular about BC/BCE dates. In general, the last day of the BC/BCE era, 1-12-31 BC/BCE, was followed by 1-1-1 AD/CE, thus no year zero exists. The ISO standard, however, states that 1 BC/BCE is year zero, so <code>0000-12-31</code> is the day before <code>0001-01-01</code>, and year <code>-0001</code> (yes, negative one for the year) is 2 BC/BCE, year <code>-0002</code> is 3 BC/BCE, etc.</p> <table class=\"docutils footnote\" frame=\"void\" id=\"id2\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[1]</a></td>\n<td>The notion of the UT second is actually quite fundamental. There are basically two different notions of time generally accepted, one based on the physical rotation of the earth (one full rotation = 1 day), the other based on the SI second (a fixed, constant value). These are radically different! Think about it, a “UT second”, as defined relative to the rotation of the earth, may have a different absolute length depending on the day! Anyway, the fact that <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Date\" title=\"Dates.Date\"><code>Date</code></a> and <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.DateTime\" title=\"Dates.DateTime\"><code>DateTime</code></a> are based on UT seconds is a simplifying, yet honest assumption so that things like leap seconds and all their complexity can be avoided. This basis of time is formally called <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Universal_Time\">UT</a> or UT1. Basing types on the UT second basically means that every minute has 60 seconds and every day has 24 hours and leads to more natural calculations when working with calendar dates.</td>\n</tr>  </table>  <h2 id=\"constructors\">Constructors</h2> <p><a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Date\" title=\"Dates.Date\"><code>Date</code></a> and <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.DateTime\" title=\"Dates.DateTime\"><code>DateTime</code></a> types can be constructed by integer or <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Period\" title=\"Dates.Period\"><code>Period</code></a> types, by parsing, or through adjusters (more on those later):</p> <pre data-language=\"julia\">julia&gt; DateTime(2013)\n2013-01-01T00:00:00\n\njulia&gt; DateTime(2013,7)\n2013-07-01T00:00:00\n\njulia&gt; DateTime(2013,7,1)\n2013-07-01T00:00:00\n\njulia&gt; DateTime(2013,7,1,12)\n2013-07-01T12:00:00\n\njulia&gt; DateTime(2013,7,1,12,30)\n2013-07-01T12:30:00\n\njulia&gt; DateTime(2013,7,1,12,30,59)\n2013-07-01T12:30:59\n\njulia&gt; DateTime(2013,7,1,12,30,59,1)\n2013-07-01T12:30:59.001\n\njulia&gt; Date(2013)\n2013-01-01\n\njulia&gt; Date(2013,7)\n2013-07-01\n\njulia&gt; Date(2013,7,1)\n2013-07-01\n\njulia&gt; Date(Dates.Year(2013),Dates.Month(7),Dates.Day(1))\n2013-07-01\n\njulia&gt; Date(Dates.Month(7),Dates.Year(2013))\n2013-07-01\n</pre> <p><a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Date\" title=\"Dates.Date\"><code>Date</code></a> or <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.DateTime\" title=\"Dates.DateTime\"><code>DateTime</code></a> parsing is accomplished by the use of format strings. Format strings work by the notion of defining <em>delimited</em> or <em>fixed-width</em> “slots” that contain a period to parse and passing the text to parse and format string to a <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Date\" title=\"Dates.Date\"><code>Date</code></a> or <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.DateTime\" title=\"Dates.DateTime\"><code>DateTime</code></a> constructor, of the form <code>Date(\"2015-01-01\",\"y-m-d\")</code> or <code>DateTime(\"20150101\",\"yyyymmdd\")</code>.</p> <p>Delimited slots are marked by specifying the delimiter the parser should expect between two subsequent periods; so <code>\"y-m-d\"</code> lets the parser know that between the first and second slots in a date string like <code>\"2014-07-16\"</code>, it should find the <code>-</code> character. The <code>y</code>, <code>m</code>, and <code>d</code> characters let the parser know which periods to parse in each slot.</p> <p>Fixed-width slots are specified by repeating the period character the number of times corresponding to the width with no delimiter between characters. So <code>\"yyyymmdd\"</code> would correspond to a date string like <code>\"20140716\"</code>. The parser distinguishes a fixed-width slot by the absence of a delimiter, noting the transition <code>\"yyyymm\"</code> from one period character to the next.</p> <p>Support for text-form month parsing is also supported through the <code>u</code> and <code>U</code> characters, for abbreviated and full-length month names, respectively. By default, only English month names are supported, so <code>u</code> corresponds to “Jan”, “Feb”, “Mar”, etc. And <code>U</code> corresponds to “January”, “February”, “March”, etc. Similar to other name=&gt;value mapping functions <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.dayname\" title=\"Dates.dayname\"><code>dayname()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.monthname\" title=\"Dates.monthname\"><code>monthname()</code></a>, custom locales can be loaded by passing in the <code>locale=&gt;Dict{UTF8String,Int}</code> mapping to the <code>MONTHTOVALUEABBR</code> and <code>MONTHTOVALUE</code> dicts for abbreviated and full-name month names, respectively.</p> <p>One note on parsing performance: using the <code>Date(date_string,format_string)</code> function is fine if only called a few times. If there are many similarly formatted date strings to parse however, it is much more efficient to first create a <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.DateFormat\" title=\"Dates.DateFormat\"><code>Dates.DateFormat</code></a>, and pass it instead of a raw format string.</p> <pre data-language=\"julia\">julia&gt; df = Dates.DateFormat(\"y-m-d\");\n\njulia&gt; dt = Date(\"2015-01-01\",df)\n2015-01-01\n\njulia&gt; dt2 = Date(\"2015-01-02\",df)\n2015-01-02\n</pre> <p>A full suite of parsing and formatting tests and examples is available in <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/test/dates/io.jl\">tests/dates/io.jl</a>.</p>   <h2 id=\"durations-comparisons\">Durations/Comparisons</h2> <p>Finding the length of time between two <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Date\" title=\"Dates.Date\"><code>Date</code></a> or <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.DateTime\" title=\"Dates.DateTime\"><code>DateTime</code></a> is straightforward given their underlying representation as <code>UTInstant{Day}</code> and <code>UTInstant{Millisecond}</code>, respectively. The difference between <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Date\" title=\"Dates.Date\"><code>Date</code></a> is returned in the number of <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Day\" title=\"Dates.Day\"><code>Day</code></a>, and <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.DateTime\" title=\"Dates.DateTime\"><code>DateTime</code></a> in the number of <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Millisecond\" title=\"Dates.Millisecond\"><code>Millisecond</code></a>. Similarly, comparing <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.TimeType\" title=\"Dates.TimeType\"><code>TimeType</code></a> is a simple matter of comparing the underlying machine instants (which in turn compares the internal <code>Int64</code> values).</p> <pre data-language=\"julia\">julia&gt; dt = Date(2012,2,29)\n2012-02-29\n\njulia&gt; dt2 = Date(2000,2,1)\n2000-02-01\n\njulia&gt; dump(dt)\nDate\n  instant: UTInstant{Day}\n    periods: Day\n      value: Int64 734562\n\njulia&gt; dump(dt2)\nDate\ninstant: UTInstant{Day}\n  periods: Day\n    value: Int64 730151\n\njulia&gt; dt &gt; dt2\ntrue\n\njulia&gt; dt != dt2\ntrue\n\njulia&gt; dt + dt2\nOperation not defined for TimeTypes\n\njulia&gt; dt * dt2\nOperation not defined for TimeTypes\n\njulia&gt; dt / dt2\nOperation not defined for TimeTypes\n\njulia&gt; dt - dt2\n4411 days\n\njulia&gt; dt2 - dt\n-4411 days\n\njulia&gt; dt = DateTime(2012,2,29)\n2012-02-29T00:00:00\n\njulia&gt; dt2 = DateTime(2000,2,1)\n2000-02-01T00:00:00\n\njulia&gt; dt - dt2\n381110402000 milliseconds\n</pre>   <h2 id=\"accessor-functions\">Accessor Functions</h2> <p>Because the <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Date\" title=\"Dates.Date\"><code>Date</code></a> and <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.DateTime\" title=\"Dates.DateTime\"><code>DateTime</code></a> types are stored as single <code>Int64</code> values, date parts or fields can be retrieved through accessor functions. The lowercase accessors return the field as an integer:</p> <pre data-language=\"julia\">julia&gt; t = Date(2014,1,31)\n2014-01-31\n\njulia&gt; Dates.year(t)\n2014\n\njulia&gt; Dates.month(t)\n1\n\njulia&gt; Dates.week(t)\n5\n\njulia&gt; Dates.day(t)\n31\n</pre> <p>While propercase return the same value in the corresponding <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Period\" title=\"Dates.Period\"><code>Period</code></a> type:</p> <pre data-language=\"julia\">julia&gt; Dates.Year(t)\n2014 years\n\njulia&gt; Dates.Day(t)\n31 days\n</pre> <p>Compound methods are provided, as they provide a measure of efficiency if multiple fields are needed at the same time:</p> <pre data-language=\"julia\">julia&gt; Dates.yearmonth(t)\n(2014,1)\n\njulia&gt; Dates.monthday(t)\n(1,31)\n\njulia&gt; Dates.yearmonthday(t)\n(2014,1,31)\n</pre> <p>One may also access the underlying <code>UTInstant</code> or integer value:</p> <pre data-language=\"julia\">julia&gt; dump(t)\nDate\ninstant: UTInstant{Day}\n  periods: Day\n    value: Int64 735264\n\njulia&gt; t.instant\nUTInstant{Day}(735264 days)\n\njulia&gt; Dates.value(t)\n735264\n</pre>   <h2 id=\"query-functions\">Query Functions</h2> <p>Query functions provide calendrical information about a <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.TimeType\" title=\"Dates.TimeType\"><code>TimeType</code></a>. They include information about the day of the week:</p> <pre data-language=\"julia\">julia&gt; t = Date(2014,1,31)\n2014-01-31\n\njulia&gt; Dates.dayofweek(t)\n5\n\njulia&gt; Dates.dayname(t)\n\"Friday\"\n\njulia&gt; Dates.dayofweekofmonth(t)\n5  # 5th Friday of January\n</pre> <p>Month of the year:</p> <pre data-language=\"julia\">julia&gt; Dates.monthname(t)\n\"January\"\n\njulia&gt; Dates.daysinmonth(t)\n31\n</pre> <p>As well as information about the <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.TimeType\" title=\"Dates.TimeType\"><code>TimeType</code></a>‘s year and quarter:</p> <pre data-language=\"julia\">julia&gt; Dates.isleapyear(t)\nfalse\n\njulia&gt; Dates.dayofyear(t)\n31\n\njulia&gt; Dates.quarterofyear(t)\n1\n\njulia&gt; Dates.dayofquarter(t)\n31\n</pre> <p>The <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.dayname\" title=\"Dates.dayname\"><code>dayname()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.monthname\" title=\"Dates.monthname\"><code>monthname()</code></a> methods can also take an optional <code>locale</code> keyword that can be used to return the name of the day or month of the year for other languages/locales:</p> <pre data-language=\"julia\">julia&gt; const french_daysofweek = Dict(1=&gt;\"Lundi\",2=&gt;\"Mardi\",3=&gt;\"Mercredi\",4=&gt;\"Jeudi\",5=&gt;\"Vendredi\",6=&gt;\"Samedi\",7=&gt;\"Dimanche\");\n\n# Load the mapping into the Dates module under locale name \"french\"\njulia&gt; Dates.VALUETODAYOFWEEK[\"french\"] = french_daysofweek;\n\njulia&gt; Dates.dayname(t;locale=\"french\")\n\"Vendredi\"\n</pre> <p>Similarly for the <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.monthname\" title=\"Dates.monthname\"><code>monthname()</code></a> function, a mapping of <code>locale=&gt;Dict{Int,UTF8String}</code> should be loaded in <code>VALUETOMONTH</code>.</p>   <h2 id=\"timetype-period-arithmetic\">TimeType-Period Arithmetic</h2> <p>It’s good practice when using any language/date framework to be familiar with how date-period arithmetic is handled as there are some <a class=\"reference external\" href=\"http://codeblog.jonskeet.uk/2010/12/01/the-joys-of-date-time-arithmetic\">tricky issues</a> to deal with (though much less so for day-precision types).</p> <p>The <a class=\"reference internal\" href=\"../../stdlib/dates/index#module-Dates\" title=\"Dates\"><code>Dates</code></a> module approach tries to follow the simple principle of trying to change as little as possible when doing <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Period\" title=\"Dates.Period\"><code>Period</code></a> arithmetic. This approach is also often known as <em>calendrical</em> arithmetic or what you would probably guess if someone were to ask you the same calculation in a conversation. Why all the fuss about this? Let’s take a classic example: add 1 month to January 31st, 2014. What’s the answer? Javascript will say <a class=\"reference external\" href=\"http://www.markhneedham.com/blog/2009/01/07/javascript-add-a-month-to-a-date/\">March 3</a> (assumes 31 days). PHP says <a class=\"reference external\" href=\"http://stackoverflow.com/questions/5760262/php-adding-months-to-a-date-while-not-exceeding-the-last-day-of-the-month\">March 2</a> (assumes 30 days). The fact is, there is no right answer. In the <a class=\"reference internal\" href=\"../../stdlib/dates/index#module-Dates\" title=\"Dates\"><code>Dates</code></a> module, it gives the result of February 28th. How does it figure that out? I like to think of the classic 7-7-7 gambling game in casinos.</p> <p>Now just imagine that instead of 7-7-7, the slots are Year-Month-Day, or in our example, 2014-01-31. When you ask to add 1 month to this date, the month slot is incremented, so now we have 2014-02-31. Then the day number is checked if it is greater than the last valid day of the new month; if it is (as in the case above), the day number is adjusted down to the last valid day (28). What are the ramifications with this approach? Go ahead and add another month to our date, <code>2014-02-28 + Month(1) == 2014-03-28</code>. What? Were you expecting the last day of March? Nope, sorry, remember the 7-7-7 slots. As few slots as possible are going to change, so we first increment the month slot by 1, 2014-03-28, and boom, we’re done because that’s a valid date. On the other hand, if we were to add 2 months to our original date, 2014-01-31, then we end up with 2014-03-31, as expected. The other ramification of this approach is a loss in associativity when a specific ordering is forced (i.e. adding things in different orders results in different outcomes). For example:</p> <pre data-language=\"julia\">julia&gt; (Date(2014,1,29)+Dates.Day(1)) + Dates.Month(1)\n2014-02-28\n\njulia&gt; (Date(2014,1,29)+Dates.Month(1)) + Dates.Day(1)\n2014-03-01\n</pre> <p>What’s going on there? In the first line, we’re adding 1 day to January 29th, which results in 2014-01-30; then we add 1 month, so we get 2014-02-30, which then adjusts down to 2014-02-28. In the second example, we add 1 month <em>first</em>, where we get 2014-02-29, which adjusts down to 2014-02-28, and <em>then</em> add 1 day, which results in 2014-03-01. One design principle that helps in this case is that, in the presence of multiple Periods, the operations will be ordered by the Periods’ <em>types</em>, not their value or positional order; this means <code>Year</code> will always be added first, then <code>Month</code>, then <code>Week</code>, etc. Hence the following <em>does</em> result in associativity and Just Works:</p> <pre data-language=\"julia\">julia&gt; Date(2014,1,29) + Dates.Day(1) + Dates.Month(1)\n2014-03-01\n\njulia&gt; Date(2014,1,29) + Dates.Month(1) + Dates.Day(1)\n2014-03-01\n</pre> <p>Tricky? Perhaps. What is an innocent <a class=\"reference internal\" href=\"../../stdlib/dates/index#module-Dates\" title=\"Dates\"><code>Dates</code></a> user to do? The bottom line is to be aware that explicitly forcing a certain associativity, when dealing with months, may lead to some unexpected results, but otherwise, everything should work as expected. Thankfully, that’s pretty much the extent of the odd cases in date-period arithmetic when dealing with time in UT (avoiding the “joys” of dealing with daylight savings, leap seconds, etc.).</p>   <h2 id=\"adjuster-functions\">Adjuster Functions</h2> <p>As convenient as date-period arithmetics are, often the kinds of calculations needed on dates take on a <em>calendrical</em> or <em>temporal</em> nature rather than a fixed number of periods. Holidays are a perfect example; most follow rules such as “Memorial Day = Last Monday of May”, or “Thanksgiving = 4th Thursday of November”. These kinds of temporal expressions deal with rules relative to the calendar, like first or last of the month, next Tuesday, or the first and third Wednesdays, etc.</p> <p>The <a class=\"reference internal\" href=\"../../stdlib/dates/index#module-Dates\" title=\"Dates\"><code>Dates</code></a> module provides the <em>adjuster</em> API through several convenient methods that aid in simply and succinctly expressing temporal rules. The first group of adjuster methods deal with the first and last of weeks, months, quarters, and years. They each take a single <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.TimeType\" title=\"Dates.TimeType\"><code>TimeType</code></a> as input and return or <em>adjust to</em> the first or last of the desired period relative to the input.</p> <pre data-language=\"julia\"># Adjusts the input to the Monday of the input's week\njulia&gt; Dates.firstdayofweek(Date(2014,7,16))\n2014-07-14\n\n# Adjusts to the last day of the input's month\njulia&gt; Dates.lastdayofmonth(Date(2014,7,16))\n2014-07-31\n\n# Adjusts to the last day of the input's quarter\njulia&gt; Dates.lastdayofquarter(Date(2014,7,16))\n2014-09-30\n</pre> <p>The next two higher-order methods, <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.tonext\" title=\"Dates.tonext\"><code>tonext()</code></a>, and <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.toprev\" title=\"Dates.toprev\"><code>toprev()</code></a>, generalize working with temporal expressions by taking a <code>DateFunction</code> as first argument, along with a starting <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.TimeType\" title=\"Dates.TimeType\"><code>TimeType</code></a>. A <code>DateFunction</code> is just a function, usually anonymous, that takes a single <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.TimeType\" title=\"Dates.TimeType\"><code>TimeType</code></a> as input and returns a <code>Bool</code>, <code>true</code> indicating a satisfied adjustment criterion. For example:</p> <pre data-language=\"julia\">julia&gt; istuesday = x-&gt;Dates.dayofweek(x) == Dates.Tuesday  # Returns true if the day of the week of x is Tuesday\n(anonymous function)\n\njulia&gt; Dates.tonext(istuesday, Date(2014,7,13)) # 2014-07-13 is a Sunday\n2014-07-15\n\n# Convenience method provided for day of the week adjustments\njulia&gt; Dates.tonext(Date(2014,7,13), Dates.Tuesday)\n2014-07-15\n</pre> <p>This is useful with the do-block syntax for more complex temporal expressions:</p> <pre data-language=\"julia\">julia&gt; Dates.tonext(Date(2014,7,13)) do x\n          # Return true on the 4th Thursday of November (Thanksgiving)\n          Dates.dayofweek(x) == Dates.Thursday &amp;&amp;\n          Dates.dayofweekofmonth(x) == 4 &amp;&amp;\n          Dates.month(x) == Dates.November\n      end\n2014-11-27\n</pre> <p>The final method in the adjuster API is the <code>recur()</code> function. <code>recur()</code> vectorizes the adjustment process by taking a start and stop date (optionally specificed by a <code>StepRange</code>), along with a <code>DateFunction</code> to specify all valid dates/moments to be returned in the specified range. In this case, the <code>DateFunction</code> is often referred to as the “inclusion” function because it specifies (by returning <code>true</code>) which dates/moments should be included in the returned vector of dates.</p> <pre data-language=\"julia\"># Pittsburgh street cleaning; Every 2nd Tuesday from April to November\n# Date range from January 1st, 2014 to January 1st, 2015\njulia&gt; dr = Dates.Date(2014):Dates.Date(2015);\njulia&gt; recur(dr) do x\n           Dates.dayofweek(x) == Dates.Tue &amp;&amp;\n           Dates.April &lt;= Dates.month(x) &lt;= Dates.Nov &amp;&amp;\n           Dates.dayofweekofmonth(x) == 2\n       end\n 8-element Array{Date,1}:\n  2014-04-08\n  2014-05-13\n  2014-06-10\n  2014-07-08\n  2014-08-12\n  2014-09-09\n  2014-10-14\n  2014-11-11\n</pre> <p>Additional examples and tests are available in <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/test/dates/adjusters.jl\">test/dates/adjusters.jl</a>.</p>   <h2 id=\"period-types\">Period Types</h2> <p>Periods are a human view of discrete, sometimes irregular durations of time. Consider 1 month; it could represent, in days, a value of 28, 29, 30, or 31 depending on the year and month context. Or a year could represent 365 or 366 days in the case of a leap year. <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Period\" title=\"Dates.Period\"><code>Period</code></a> types are simple <code>Int64</code> wrappers and are constructed by wrapping any <code>Int64</code> convertible type, i.e. <code>Year(1)</code> or <code>Month(3.0)</code>. Arithmetic between <a class=\"reference internal\" href=\"../../stdlib/dates/index#Dates.Period\" title=\"Dates.Period\"><code>Period</code></a> of the same type behave like integers, and limited <code>Period-Real</code> arithmetic is available.</p> <pre data-language=\"julia\">julia&gt; y1 = Dates.Year(1)\n1 year\n\njulia&gt; y2 = Dates.Year(2)\n2 years\n\njulia&gt; y3 = Dates.Year(10)\n10 years\n\njulia&gt; y1 + y2\n3 years\n\njulia&gt; div(y3,y2)\n5 years\n\njulia&gt; y3 - y2\n8 years\n\njulia&gt; y3 * y2\n20 years\n\njulia&gt; y3 % y2\n0 years\n\njulia&gt; y1 + 20\n21 years\n\njulia&gt; div(y3,3) # mirrors integer division\n3 years\n</pre> <p>See the <a class=\"reference external\" href=\"http://docs.julialang.org/en/latest/stdlib/dates/\">API reference</a> for additional information on methods exported from the <a class=\"reference internal\" href=\"../../stdlib/dates/index#module-Dates\" title=\"Dates\"><code>Dates</code></a> module.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/dates/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/dates/</a>\n  </p>\n</div>\n","manual/embedding/index":"<h1 id=\"man-embedding\">Embedding Julia</h1> <p>As we have seen in <a class=\"reference internal\" href=\"../calling-c-and-fortran-code/index#man-calling-c-and-fortran-code\"><span>Calling C and Fortran Code</span></a>, Julia has a simple and efficient way to call functions written in C. But there are situations where the opposite is needed: calling Julia function from C code. This can be used to integrate Julia code into a larger C/C++ project, without the need to rewrite everything in C/C++. Julia has a C API to make this possible. As almost all programming languages have some way to call C functions, the Julia C API can also be used to build further language bridges (e.g. calling Julia from Python or C#).</p>  <h2 id=\"high-level-embedding\">High-Level Embedding</h2> <p>We start with a simple C program that initializes Julia and calls some Julia code:</p> <pre data-language=\"c\">#include &lt;julia.h&gt;\n\nint main(int argc, char *argv[])\n{\n    /* required: setup the julia context */\n    jl_init(NULL);\n\n    /* run julia commands */\n    jl_eval_string(\"print(sqrt(2.0))\");\n\n    /* strongly recommended: notify julia that the\n         program is about to terminate. this allows\n         julia time to cleanup pending write requests\n         and run all finalizers\n    */\n    jl_atexit_hook(0);\n    return 0;\n}\n</pre> <p>In order to build this program you have to put the path to the Julia header into the include path and link against <code>libjulia</code>. For instance, when Julia is installed to <code>$JULIA_DIR</code>, one can compile the above test program <code>test.c</code> with <code>gcc</code> using:</p> <pre data-language=\"c\">gcc -o test -fPIC -I$JULIA_DIR/include/julia -L$JULIA_DIR/lib/julia test.c -ljulia $JULIA_DIR/lib/julia/libstdc++.so.6\n</pre> <p>Then if the environment variable <code>JULIA_HOME</code> is set to <code>$JULIA_DIR/bin</code>, the output <code>test</code> program can be executed.</p> <p>Alternatively, look at the <code>embedding.c</code> program in the Julia source tree in the <code>examples/</code> folder. The file <code>ui/repl.c</code> program is another simple example of how to set <code>jl_options</code> options while linking against <code>libjulia</code>.</p> <p>The first thing that has to be done before calling any other Julia C function is to initialize Julia. This is done by calling <code>jl_init</code>, which takes as argument a C string (<code>const char*</code>) to the location where Julia is installed. When the argument is <code>NULL</code>, Julia tries to determine the install location automatically.</p> <p>The second statement in the test program evaluates a Julia statement using a call to <code>jl_eval_string</code>.</p> <p>Before the program terminates, it is strongly recommended to call <code>jl_atexit_hook</code>. The above example program calls this before returning from <code>main</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>Currently, dynamically linking with the <code>libjulia</code> shared library requires passing the <code>RTLD_GLOBAL</code> option. In Python, this looks like:</p> <pre data-language=\"c\">&gt;&gt;&gt; julia=CDLL('./libjulia.dylib',RTLD_GLOBAL)\n&gt;&gt;&gt; julia.jl_init.argtypes = [c_char_p]\n&gt;&gt;&gt; julia.jl_init('.')\n250593296\n</pre> </div>  <h3 id=\"using-julia-config-to-automatically-determine-build-parameters\">Using julia-config to automatically determine build parameters</h3> <p>The script <em>julia-config.jl</em> was created to aid in determining what build parameters are required by a program that uses embedded Julia. This script uses the build parameters and system configuration of the particular Julia distribution it is invoked by to export the necessary compiler flags for an embedding program to interact with that distribution. This script is located in the Julia shared data directory.</p>  <h4 id=\"example\">Example</h4> <p>Below is essentially the same as above with one small change; the argument to <code>jl_init</code> is now <strong>JULIA_INIT_DIR</strong> which is defined by <em>julia-config.jl</em>.:</p> <pre data-language=\"c\">#include &lt;julia.h&gt;\n\nint main(int argc, char *argv[])\n{\n   jl_init(JULIA_INIT_DIR);\n   (void)jl_eval_string(\"println(sqrt(2.0))\");\n   jl_atexit_hook(0);\n   return 0;\n}\n</pre>   <h4 id=\"on-the-command-line\">On the command line</h4> <p>A simple use of this script is from the command line. Assuming that <em>julia-config.jl</em> is located in <em>/usr/local/julia/share/julia</em>, it can be invoked on the command line directly and takes any combination of 3 flags:</p> <pre data-language=\"c\">/usr/local/julia/share/julia/julia-config.jl\nUsage: julia-config [--cflags|--ldflags|--ldlibs]\n</pre> <p>If the above example source is saved in the file <em>embed_example.c</em>, then the following command will compile it into a running program on Linux and Windows (MSYS2 environment), or if on OS/X, then substitute <code>clang</code> for <code>gcc</code>.:</p> <pre data-language=\"c\">/usr/local/julia/share/julia/julia-config.jl --cflags --ldflags --ldlibs | xargs gcc embed_example.c\n</pre>   <h4 id=\"use-in-makefiles\">Use in Makefiles</h4> <p>But in general, embedding projects will be more complicated than the above, and so the following allows general makefile support as well – assuming GNU make because of the use of the <strong>shell</strong> macro expansions. Additionally, though many times <em>julia-config.jl</em> may be found in the directory <em>/usr/local</em>, this is not necessarily the case, but Julia can be used to locate <em>julia-config.jl</em> too, and the makefile can be used to take advantage of that. The above example is extended to use a Makefile:</p> <pre data-language=\"c\">JL_SHARE = $(shell julia -e 'print(joinpath(JULIA_HOME,Base.DATAROOTDIR,\"julia\"))')\nCFLAGS   += $(shell $(JL_SHARE)/julia-config.jl --cflags)\nCXXFLAGS += $(shell $(JL_SHARE)/julia-config.jl --cflags)\nLDFLAGS  += $(shell $(JL_SHARE)/julia-config.jl --ldflags)\nLDLIBS   += $(shell $(JL_SHARE)/julia-config.jl --ldlibs)\n\nall: embed_example\n</pre> <p>Now the build command is simply <strong>make</strong>.</p>     <h2 id=\"converting-types\">Converting Types</h2> <p>Real applications will not just need to execute expressions, but also return their values to the host program. <code>jl_eval_string</code> returns a <code>jl_value_t*</code>, which is a pointer to a heap-allocated Julia object. Storing simple data types like <code>Float64</code> in this way is called <code>boxing</code>, and extracting the stored primitive data is called <code>unboxing</code>. Our improved sample program that calculates the square root of 2 in Julia and reads back the result in C looks as follows:</p> <pre data-language=\"c\">jl_value_t *ret = jl_eval_string(\"sqrt(2.0)\");\n\nif (jl_is_float64(ret)) {\n    double ret_unboxed = jl_unbox_float64(ret);\n    printf(\"sqrt(2.0) in C: %e \\n\", ret_unboxed);\n}\n</pre> <p>In order to check whether <code>ret</code> is of a specific Julia type, we can use the <code>jl_is_...</code> functions. By typing <code>typeof(sqrt(2.0))</code> into the Julia shell we can see that the return type is <code>Float64</code> (<code>double</code> in C). To convert the boxed Julia value into a C double the <code>jl_unbox_float64</code> function is used in the above code snippet.</p> <p>Corresponding <code>jl_box_...</code> functions are used to convert the other way:</p> <pre data-language=\"c\">jl_value_t *a = jl_box_float64(3.0);\njl_value_t *b = jl_box_float32(3.0f);\njl_value_t *c = jl_box_int32(3);\n</pre> <p>As we will see next, boxing is required to call Julia functions with specific arguments.</p>   <h2 id=\"calling-julia-functions\">Calling Julia Functions</h2> <p>While <code>jl_eval_string</code> allows C to obtain the result of a Julia expression, it does not allow passing arguments computed in C to Julia. For this you will need to invoke Julia functions directly, using <code>jl_call</code>:</p> <pre data-language=\"c\">jl_function_t *func = jl_get_function(jl_base_module, \"sqrt\");\njl_value_t *argument = jl_box_float64(2.0);\njl_value_t *ret = jl_call1(func, argument);\n</pre> <p>In the first step, a handle to the Julia function <code>sqrt</code> is retrieved by calling <code>jl_get_function</code>. The first argument passed to <code>jl_get_function</code> is a pointer to the <code>Base</code> module in which <code>sqrt</code> is defined. Then, the double value is boxed using <code>jl_box_float64</code>. Finally, in the last step, the function is called using <code>jl_call1</code>. <code>jl_call0</code>, <code>jl_call2</code>, and <code>jl_call3</code> functions also exist, to conveniently handle different numbers of arguments. To pass more arguments, use <code>jl_call</code>:</p> <pre data-language=\"c\">jl_value_t *jl_call(jl_function_t *f, jl_value_t **args, int32_t nargs)\n</pre> <p>Its second argument <code>args</code> is an array of <code>jl_value_t*</code> arguments and <code>nargs</code> is the number of arguments.</p>   <h2 id=\"memory-management\">Memory Management</h2> <p>As we have seen, Julia objects are represented in C as pointers. This raises the question of who is responsible for freeing these objects.</p> <p>Typically, Julia objects are freed by a garbage collector (GC), but the GC does not automatically know that we are holding a reference to a Julia value from C. This means the GC can free objects out from under you, rendering pointers invalid.</p> <p>The GC can only run when Julia objects are allocated. Calls like <code>jl_box_float64</code> perform allocation, and allocation might also happen at any point in running Julia code. However, it is generally safe to use pointers in between <code>jl_...</code> calls. But in order to make sure that values can survive <code>jl_...</code> calls, we have to tell Julia that we hold a reference to a Julia value. This can be done using the <code>JL_GC_PUSH</code> macros:</p> <pre data-language=\"c\">jl_value_t *ret = jl_eval_string(\"sqrt(2.0)\");\nJL_GC_PUSH1(&amp;ret);\n// Do something with ret\nJL_GC_POP();\n</pre> <p>The <code>JL_GC_POP</code> call releases the references established by the previous <code>JL_GC_PUSH</code>. Note that <code>JL_GC_PUSH</code> is working on the stack, so it must be exactly paired with a <code>JL_GC_POP</code> before the stack frame is destroyed.</p> <p>Several Julia values can be pushed at once using the <code>JL_GC_PUSH2</code> , <code>JL_GC_PUSH3</code> , and <code>JL_GC_PUSH4</code> macros. To push an array of Julia values one can use the <code>JL_GC_PUSHARGS</code> macro, which can be used as follows:</p> <pre data-language=\"c\">jl_value_t **args;\nJL_GC_PUSHARGS(args, 2); // args can now hold 2 `jl_value_t*` objects\nargs[0] = some_value;\nargs[1] = some_other_value;\n// Do something with args (e.g. call jl_... functions)\nJL_GC_POP();\n</pre> <p>The garbage collector also operates under the assumption that it is aware of every old-generation object pointing to a young-generation one. Any time a pointer is updated breaking that assumption, it must be signaled to the collector with the <code>jl_gc_wb</code> (write barrier) function like so:</p> <pre data-language=\"c\">jl_value_t *parent = some_old_value, *child = some_young_value;\n((some_specific_type*)parent)-&gt;field = child;\njl_gc_wb(parent, child);\n</pre> <p>It is in general impossible to predict which values will be old at runtime, so the write barrier must be inserted after all explicit stores. One notable exception is if the <code>parent</code> object was just allocated and garbage collection was not run since then. Remember that most <code>jl_...</code> functions can sometimes invoke garbage collection.</p> <p>The write barrier is also necessary for arrays of pointers when updating their data directly. For example:</p> <pre data-language=\"c\">jl_array_t *some_array = ...; // e.g. a Vector{Any}\nvoid **data = (void**)jl_array_data(some_array);\njl_value_t *some_value = ...;\ndata[0] = some_value;\njl_gc_wb(some_array, some_value);\n</pre>  <h3 id=\"manipulating-the-garbage-collector\">Manipulating the Garbage Collector</h3> <p>There are some functions to control the GC. In normal use cases, these should not be necessary.</p> <table class=\"docutils\">   <tr class=\"row-odd\">\n<td><code>jl_gc_collect()</code></td> <td>Force a GC run</td> </tr> <tr class=\"row-even\">\n<td><code>jl_gc_enable(0)</code></td> <td>Disable the GC, return previous state as int</td> </tr> <tr class=\"row-odd\">\n<td><code>jl_gc_enable(1)</code></td> <td>Enable the GC, return previous state as int</td> </tr> <tr class=\"row-even\">\n<td><code>jl_gc_is_enabled()</code></td> <td>Return current state as int</td> </tr>  </table>    <h2 id=\"working-with-arrays\">Working with Arrays</h2> <p>Julia and C can share array data without copying. The next example will show how this works.</p> <p>Julia arrays are represented in C by the datatype <code>jl_array_t*</code>. Basically, <code>jl_array_t</code> is a struct that contains:</p> <ul class=\"simple\"> <li>Information about the datatype</li> <li>A pointer to the data block</li> <li>Information about the sizes of the array</li> </ul> <p>To keep things simple, we start with a 1D array. Creating an array containing Float64 elements of length 10 is done by:</p> <pre data-language=\"c\">jl_value_t* array_type = jl_apply_array_type(jl_float64_type, 1);\njl_array_t* x          = jl_alloc_array_1d(array_type, 10);\n</pre> <p>Alternatively, if you have already allocated the array you can generate a thin wrapper around its data:</p> <pre data-language=\"c\">double *existingArray = (double*)malloc(sizeof(double)*10);\njl_array_t *x = jl_ptr_to_array_1d(array_type, existingArray, 10, 0);\n</pre> <p>The last argument is a boolean indicating whether Julia should take ownership of the data. If this argument is non-zero, the GC will call <code>free</code> on the data pointer when the array is no longer referenced.</p> <p>In order to access the data of x, we can use <code>jl_array_data</code>:</p> <pre data-language=\"c\">double *xData = (double*)jl_array_data(x);\n</pre> <p>Now we can fill the array:</p> <pre data-language=\"c\">for(size_t i=0; i&lt;jl_array_len(x); i++)\n    xData[i] = i;\n</pre> <p>Now let us call a Julia function that performs an in-place operation on <code>x</code>:</p> <pre data-language=\"c\">jl_function_t *func  = jl_get_function(jl_base_module, \"reverse!\");\njl_call1(func, (jl_value_t*)x);\n</pre> <p>By printing the array, one can verify that the elements of <code>x</code> are now reversed.</p>  <h3 id=\"accessing-returned-arrays\">Accessing Returned Arrays</h3> <p>If a Julia function returns an array, the return value of <code>jl_eval_string</code> and <code>jl_call</code> can be cast to a <code>jl_array_t*</code>:</p> <pre data-language=\"c\">jl_function_t *func  = jl_get_function(jl_base_module, \"reverse\");\njl_array_t *y = (jl_array_t*)jl_call1(func, (jl_value_t*)x);\n</pre> <p>Now the content of <code>y</code> can be accessed as before using <code>jl_array_data</code>. As always, be sure to keep a reference to the array while it is in use.</p>   <h3 id=\"multidimensional-arrays\">Multidimensional Arrays</h3> <p>Julia’s multidimensional arrays are stored in memory in column-major order. Here is some code that creates a 2D array and accesses its properties:</p> <pre data-language=\"c\">// Create 2D array of float64 type\njl_value_t *array_type = jl_apply_array_type(jl_float64_type, 2);\njl_array_t *x  = jl_alloc_array_2d(array_type, 10, 5);\n\n// Get array pointer\ndouble *p = (double*)jl_array_data(x);\n// Get number of dimensions\nint ndims = jl_array_ndims(x);\n// Get the size of the i-th dim\nsize_t size0 = jl_array_dim(x,0);\nsize_t size1 = jl_array_dim(x,1);\n\n// Fill array with data\nfor(size_t i=0; i&lt;size1; i++)\n    for(size_t j=0; j&lt;size0; j++)\n        p[j + size0*i] = i + j;\n</pre> <p>Notice that while Julia arrays use 1-based indexing, the C API uses 0-based indexing (for example in calling <code>jl_array_dim</code>) in order to read as idiomatic C code.</p>    <h2 id=\"exceptions\">Exceptions</h2> <p>Julia code can throw exceptions. For example, consider:</p> <pre data-language=\"c\">jl_eval_string(\"this_function_does_not_exist()\");\n</pre> <p>This call will appear to do nothing. However, it is possible to check whether an exception was thrown:</p> <pre data-language=\"c\">if (jl_exception_occurred())\n    printf(\"%s \\n\", jl_typeof_str(jl_exception_occurred()));\n</pre> <p>If you are using the Julia C API from a language that supports exceptions (e.g. Python, C#, C++), it makes sense to wrap each call into <code>libjulia</code> with a function that checks whether an exception was thrown, and then rethrows the exception in the host language.</p>  <h3 id=\"throwing-julia-exceptions\">Throwing Julia Exceptions</h3> <p>When writing Julia callable functions, it might be necessary to validate arguments and throw exceptions to indicate errors. A typical type check looks like:</p> <pre data-language=\"c\">if (!jl_is_float64(val)) {\n    jl_type_error(function_name, (jl_value_t*)jl_float64_type, val);\n}\n</pre> <p>General exceptions can be raised using the functions:</p> <pre data-language=\"c\">void jl_error(const char *str);\nvoid jl_errorf(const char *fmt, ...);\n</pre> <p><code>jl_error</code> takes a C string, and <code>jl_errorf</code> is called like <code>printf</code>:</p> <pre data-language=\"c\">jl_errorf(\"argument x = %d is too large\", x);\n</pre> <p>where in this example <code>x</code> is assumed to be an integer.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/embedding/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/embedding/</a>\n  </p>\n</div>\n","manual/profile/index":"<h1 id=\"man-profiling\">Profiling</h1> <p>The <a class=\"reference internal\" href=\"../../stdlib/profile/index#module-Profile\" title=\"Profile\"><code>Profile</code></a> module provides tools to help developers improve the performance of their code. When used, it takes measurements on running code, and produces output that helps you understand how much time is spent on individual line(s). The most common usage is to identify “bottlenecks” as targets for optimization.</p> <p><a class=\"reference internal\" href=\"../../stdlib/profile/index#module-Profile\" title=\"Profile\"><code>Profile</code></a> implements what is known as a “sampling” or <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Profiling_(computer_programming)\">statistical profiler</a>. It works by periodically taking a backtrace during the execution of any task. Each backtrace captures the currently-running function and line number, plus the complete chain of function calls that led to this line, and hence is a “snapshot” of the current state of execution.</p> <p>If much of your run time is spent executing a particular line of code, this line will show up frequently in the set of all backtraces. In other words, the “cost” of a given line—or really, the cost of the sequence of function calls up to and including this line—is proportional to how often it appears in the set of all backtraces.</p> <p>A sampling profiler does not provide complete line-by-line coverage, because the backtraces occur at intervals (by default, 1 ms on Unix systems and 10 ms on Windows, although the actual scheduling is subject to operating system load). Moreover, as discussed further below, because samples are collected at a sparse subset of all execution points, the data collected by a sampling profiler is subject to statistical noise.</p> <p>Despite these limitations, sampling profilers have substantial strengths:</p> <ul class=\"simple\"> <li>You do not have to make any modifications to your code to take timing measurements (in contrast to the alternative <a class=\"reference external\" href=\"https://github.com/timholy/IProfile.jl\">instrumenting profiler</a>).</li> <li>It can profile into Julia’s core code and even (optionally) into C and Fortran libraries.</li> <li>By running “infrequently” there is very little performance overhead; while profiling, your code can run at nearly native speed.</li> </ul> <p>For these reasons, it’s recommended that you try using the built-in sampling profiler before considering any alternatives.</p>  <h2 id=\"basic-usage\">Basic usage</h2> <p>Let’s work with a simple test case:</p> <pre data-language=\"julia\">function myfunc()\n    A = rand(100, 100, 200)\n    maximum(A)\nend\n</pre> <p>It’s a good idea to first run the code you intend to profile at least once (unless you want to profile Julia’s JIT-compiler):</p> <pre data-language=\"julia\">julia&gt; myfunc()  # run once to force compilation\n</pre> <p>Now we’re ready to profile this function:</p> <pre data-language=\"julia\">julia&gt; @profile myfunc()\n</pre> <p>To see the profiling results, there is a <a class=\"reference external\" href=\"https://github.com/timholy/ProfileView.jl\">graphical browser</a> available, but here we’ll use the text-based display that comes with the standard library:</p> <pre data-language=\"julia\">julia&gt; Profile.print()\n      23 client.jl; _start; line: 373\n        23 client.jl; run_repl; line: 166\n           23 client.jl; eval_user_input; line: 91\n              23 profile.jl; anonymous; line: 14\n                 8  none; myfunc; line: 2\n                  8 dSFMT.jl; dsfmt_gv_fill_array_close_open!; line: 128\n                 15 none; myfunc; line: 3\n                  2  reduce.jl; max; line: 35\n                  2  reduce.jl; max; line: 36\n                  11 reduce.jl; max; line: 37\n</pre> <p>Each line of this display represents a particular spot (line number) in the code. Indentation is used to indicate the nested sequence of function calls, with more-indented lines being deeper in the sequence of calls. In each line, the first “field” indicates the number of backtraces (samples) taken <em>at this line or in any functions executed by this line</em>. The second field is the file name, followed by a semicolon; the third is the function name followed by a semicolon, and the fourth is the line number. Note that the specific line numbers may change as Julia’s code changes; if you want to follow along, it’s best to run this example yourself.</p> <p>In this example, we can see that the top level is <code>client.jl</code>‘s <code>_start</code> function. This is the first Julia function that gets called when you launch Julia. If you examine line 373 of <code>client.jl</code>, you’ll see that (at the time of this writing) it calls <code>run_repl()</code>, mentioned on the second line. This in turn calls <code>eval_user_input()</code>. These are the functions in <code>client.jl</code> that interpret what you type at the REPL, and since we’re working interactively these functions were invoked when we entered <code>@profile myfunc()</code>. The next line reflects actions taken in the <a class=\"reference internal\" href=\"../../stdlib/profile/index#Base.@profile\" title=\"Base.@profile\"><code>@profile</code></a> macro.</p> <p>The first line shows that 23 backtraces were taken at line 373 of <code>client.jl</code>, but it’s not that this line was “expensive” on its own: the second line reveals that all 23 of these backtraces were actually triggered inside its call to <code>run_repl</code>, and so on. To find out which operations are actually taking the time, we need to look deeper in the call chain.</p> <p>The first “important” line in this output is this one:</p> <pre data-language=\"julia\">8  none; myfunc; line: 2\n</pre> <p><code>none</code> refers to the fact that we defined <code>myfunc</code> in the REPL, rather than putting it in a file; if we had used a file, this would show the file name. Line 2 of <code>myfunc()</code> contains the call to <code>rand</code>, and there were 8 (out of 23) backtraces that occurred at this line. Below that, you can see a call to <code>dsfmt_gv_fill_array_close_open!()</code> inside <code>dSFMT.jl</code>. You might be surprised not to see the <code>rand</code> function listed explicitly: that’s because <code>rand</code> is <em>inlined</em>, and hence doesn’t appear in the backtraces.</p> <p>A little further down, you see:</p> <pre data-language=\"julia\">15 none; myfunc; line: 3\n</pre> <p>Line 3 of <code>myfunc</code> contains the call to <code>max</code>, and there were 15 (out of 23) backtraces taken here. Below that, you can see the specific places in <code>base/reduce.jl</code> that carry out the time-consuming operations in the <code>max</code> function for this type of input data.</p> <p>Overall, we can tentatively conclude that finding the maximum element is approximately twice as expensive as generating the random numbers. We could increase our confidence in this result by collecting more samples:</p> <pre data-language=\"julia\">julia&gt; @profile (for i = 1:100; myfunc(); end)\n\njulia&gt; Profile.print()\n       3121 client.jl; _start; line: 373\n        3121 client.jl; run_repl; line: 166\n           3121 client.jl; eval_user_input; line: 91\n              3121 profile.jl; anonymous; line: 1\n                 848  none; myfunc; line: 2\n                  842 dSFMT.jl; dsfmt_gv_fill_array_close_open!; line: 128\n                 1510 none; myfunc; line: 3\n                  74   reduce.jl; max; line: 35\n                  122  reduce.jl; max; line: 36\n                  1314 reduce.jl; max; line: 37\n</pre> <p>In general, if you have <code>N</code> samples collected at a line, you can expect an uncertainty on the order of <code>sqrt(N)</code> (barring other sources of noise, like how busy the computer is with other tasks). The major exception to this rule is garbage collection, which runs infrequently but tends to be quite expensive. (Since Julia’s garbage collector is written in C, such events can be detected using the <code>C=true</code> output mode described below, or by using <a class=\"reference external\" href=\"https://github.com/timholy/ProfileView.jl\">ProfileView.jl</a>.)</p> <p>This illustrates the default “tree” dump; an alternative is the “flat” dump, which accumulates counts independent of their nesting:</p> <pre data-language=\"julia\">julia&gt; Profile.print(format=:flat)\n Count File         Function                         Line\n  3121 client.jl    _start                            373\n  3121 client.jl    eval_user_input                    91\n  3121 client.jl    run_repl                          166\n   842 dSFMT.jl     dsfmt_gv_fill_array_close_open!   128\n   848 none         myfunc                              2\n  1510 none         myfunc                              3\n  3121 profile.jl   anonymous                           1\n    74 reduce.jl    max                                35\n   122 reduce.jl    max                                36\n  1314 reduce.jl    max                                37\n</pre> <p>If your code has recursion, one potentially-confusing point is that a line in a “child” function can accumulate more counts than there are total backtraces. Consider the following function definitions:</p> <pre data-language=\"julia\">dumbsum(n::Integer) = n == 1 ? 1 : 1 + dumbsum(n-1)\ndumbsum3() = dumbsum(3)\n</pre> <p>If you were to profile <code>dumbsum3</code>, and a backtrace was taken while it was executing <code>dumbsum(1)</code>, the backtrace would look like this:</p> <pre data-language=\"julia\">dumbsum3\n    dumbsum(3)\n        dumbsum(2)\n            dumbsum(1)\n</pre> <p>Consequently, this child function gets 3 counts, even though the parent only gets one. The “tree” representation makes this much clearer, and for this reason (among others) is probably the most useful way to view the results.</p>   <h2 id=\"accumulation-and-clearing\">Accumulation and clearing</h2> <p>Results from <a class=\"reference internal\" href=\"../../stdlib/profile/index#Base.@profile\" title=\"Base.@profile\"><code>@profile</code></a> accumulate in a buffer; if you run multiple pieces of code under <a class=\"reference internal\" href=\"../../stdlib/profile/index#Base.@profile\" title=\"Base.@profile\"><code>@profile</code></a>, then <a class=\"reference internal\" href=\"../../stdlib/profile/index#Base.Profile.print\" title=\"Base.Profile.print\"><code>Profile.print()</code></a> will show you the combined results. This can be very useful, but sometimes you want to start fresh; you can do so with <a class=\"reference internal\" href=\"../../stdlib/profile/index#Base.Profile.clear\" title=\"Base.Profile.clear\"><code>Profile.clear()</code></a>.</p>   <h2 id=\"options-for-controlling-the-display-of-profile-results\">Options for controlling the display of profile results</h2> <p><a class=\"reference internal\" href=\"../../stdlib/profile/index#Base.Profile.print\" title=\"Base.Profile.print\"><code>Profile.print()</code></a> has more options than we’ve described so far. Let’s see the full declaration:</p> <pre data-language=\"julia\">function print(io::IO = STDOUT, data = fetch(); format = :tree, C = false, combine = true, cols = tty_cols(), maxdepth = typemax(Int), sortedby = :filefuncline)\n</pre> <p>Let’s discuss these arguments in order:</p> <ul> <li>The first argument allows you to save the results to a file, but the default is to print to <code>STDOUT</code> (the console). </li> <li>\n<p class=\"first\">The second argument contains the data you want to analyze; by default that is obtained from <a class=\"reference internal\" href=\"../../stdlib/profile/index#Base.Profile.fetch\" title=\"Base.Profile.fetch\"><code>Profile.fetch()</code></a>, which pulls out the backtraces from a pre-allocated buffer. For example, if you want to profile the profiler, you could say:</p> <pre data-language=\"julia\">data = copy(Profile.fetch())\nProfile.clear()\n@profile Profile.print(STDOUT, data) # Prints the previous results\nProfile.print()                      # Prints results from Profile.print()\n</pre> </li> <li>The first keyword argument, <code>format</code>, was introduced above. The possible choices are <code>:tree</code> and <code>:flat</code>. </li> <li>\n<code>C</code>, if set to <code>true</code>, allows you to see even the calls to C code. Try running the introductory example with <code>Profile.print(C =\ntrue)</code>. This can be extremely helpful in deciding whether it’s Julia code or C code that is causing a bottleneck; setting <code>C=true</code> also improves the interpretability of the nesting, at the cost of longer profile dumps. </li> <li>Some lines of code contain multiple operations; for example, <code>s +=\nA[i]</code> contains both an array reference (<code>A[i]</code>) and a sum operation. These correspond to different lines in the generated machine code, and hence there may be two or more different addresses captured during backtraces on this line. <code>combine=true</code> lumps them together, and is probably what you typically want, but you can generate an output separately for each unique instruction pointer with <code>combine=false</code>. </li> <li>\n<p class=\"first\"><code>cols</code> allows you to control the number of columns that you are willing to use for display. When the text would be wider than the display, you might see output like this:</p> <pre data-language=\"julia\">33 inference.jl; abstract_call; line: 645\n  33 inference.jl; abstract_call; line: 645\n    33 ...rence.jl; abstract_call_gf; line: 567\n       33 ...nce.jl; typeinf; line: 1201\n     +1 5  ...nce.jl; ...t_interpret; line: 900\n     +3 5 ...ence.jl; abstract_eval; line: 758\n     +4 5 ...ence.jl; ...ct_eval_call; line: 733\n     +6 5 ...ence.jl; abstract_call; line: 645\n</pre> <p>File/function names are sometimes truncated (with <code>...</code>), and indentation is truncated with a <code>+n</code> at the beginning, where <code>n</code> is the number of extra spaces that would have been inserted, had there been room. If you want a complete profile of deeply-nested code, often a good idea is to save to a file and use a very wide <code>cols</code> setting:</p> <pre data-language=\"julia\">s = open(\"/tmp/prof.txt\",\"w\")\nProfile.print(s,cols = 500)\nclose(s)\n</pre> </li> <li>\n<code>maxdepth</code> can be used to limit the size of the output in <code>:tree</code> format (it nests only up to level <code>maxdepth</code>) </li> <li>\n<code>sortedby = :count</code> sorts the <code>:flat</code> format in order of increasing counts </li> </ul>   <h2 id=\"configuration\">Configuration</h2> <p><a class=\"reference internal\" href=\"../../stdlib/profile/index#Base.@profile\" title=\"Base.@profile\"><code>@profile</code></a> just accumulates backtraces, and the analysis happens when you call <a class=\"reference internal\" href=\"../../stdlib/profile/index#Base.Profile.print\" title=\"Base.Profile.print\"><code>Profile.print()</code></a>. For a long-running computation, it’s entirely possible that the pre-allocated buffer for storing backtraces will be filled. If that happens, the backtraces stop but your computation continues. As a consequence, you may miss some important profiling data (you will get a warning when that happens).</p> <p>You can obtain and configure the relevant parameters this way:</p> <pre data-language=\"julia\">Profile.init()            # returns the current settings\nProfile.init(n, delay)\nProfile.init(delay = 0.01)\n</pre> <p><code>n</code> is the total number of instruction pointers you can store, with a default value of <code>10^6</code>. If your typical backtrace is 20 instruction pointers, then you can collect 50000 backtraces, which suggests a statistical uncertainty of less than 1%. This may be good enough for most applications.</p> <p>Consequently, you are more likely to need to modify <code>delay</code>, expressed in seconds, which sets the amount of time that Julia gets between snapshots to perform the requested computations. A very long-running job might not need frequent backtraces. The default setting is <code>delay = 0.001</code>. Of course, you can decrease the delay as well as increase it; however, the overhead of profiling grows once the delay becomes similar to the amount of time needed to take a backtrace (~30 microseconds on the author’s laptop).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/profile/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/profile/</a>\n  </p>\n</div>\n","manual/parallel-computing/index":"<h1 id=\"man-parallel-computing\">Parallel Computing</h1> <p>Most modern computers possess more than one CPU, and several computers can be combined together in a cluster. Harnessing the power of these multiple CPUs allows many computations to be completed more quickly. There are two major factors that influence performance: the speed of the CPUs themselves, and the speed of their access to memory. In a cluster, it’s fairly obvious that a given CPU will have fastest access to the RAM within the same computer (node). Perhaps more surprisingly, similar issues are relevant on a typical multicore laptop, due to differences in the speed of main memory and the <a class=\"reference external\" href=\"http://www.akkadia.org/drepper/cpumemory.pdf\">cache</a>. Consequently, a good multiprocessing environment should allow control over the “ownership” of a chunk of memory by a particular CPU. Julia provides a multiprocessing environment based on message passing to allow programs to run on multiple processes in separate memory domains at once.</p> <p>Julia’s implementation of message passing is different from other environments such as MPI <a class=\"footnote-reference\" href=\"#mpi2rma\" id=\"id1\">[1]</a>. Communication in Julia is generally “one-sided”, meaning that the programmer needs to explicitly manage only one process in a two-process operation. Furthermore, these operations typically do not look like “message send” and “message receive” but rather resemble higher-level operations like calls to user functions.</p> <p>Parallel programming in Julia is built on two primitives: <em>remote references</em> and <em>remote calls</em>. A remote reference is an object that can be used from any process to refer to an object stored on a particular process. A remote call is a request by one process to call a certain function on certain arguments on another (possibly the same) process. A remote call returns a remote reference to its result. Remote calls return immediately; the process that made the call proceeds to its next operation while the remote call happens somewhere else. You can wait for a remote call to finish by calling <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.wait\" title=\"Base.wait\"><code>wait()</code></a> on its remote reference, and you can obtain the full value of the result using <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.fetch\" title=\"Base.fetch\"><code>fetch()</code></a>. You can store a value to a remote reference using <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.put!\" title=\"Base.put!\"><code>put!()</code></a>.</p> <p>Let’s try this out. Starting with <code>julia -p n</code> provides <code>n</code> worker processes on the local machine. Generally it makes sense for <code>n</code> to equal the number of CPU cores on the machine.</p> <pre data-language=\"julia\">$ ./julia -p 2\n\njulia&gt; r = remotecall(2, rand, 2, 2)\nRemoteRef(2,1,5)\n\njulia&gt; fetch(r)\n2x2 Float64 Array:\n 0.60401   0.501111\n 0.174572  0.157411\n\njulia&gt; s = @spawnat 2 1 .+ fetch(r)\nRemoteRef(2,1,7)\n\njulia&gt; fetch(s)\n2x2 Float64 Array:\n 1.60401  1.50111\n 1.17457  1.15741\n</pre> <p>The first argument to <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.remotecall\" title=\"Base.remotecall\"><code>remotecall()</code></a> is the index of the process that will do the work. Most parallel programming in Julia does not reference specific processes or the number of processes available, but <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.remotecall\" title=\"Base.remotecall\"><code>remotecall()</code></a> is considered a low-level interface providing finer control. The second argument to <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.remotecall\" title=\"Base.remotecall\"><code>remotecall()</code></a> is the function to call, and the remaining arguments will be passed to this function. As you can see, in the first line we asked process 2 to construct a 2-by-2 random matrix, and in the second line we asked it to add 1 to it. The result of both calculations is available in the two remote references, <code>r</code> and <code>s</code>. The <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@spawnat\" title=\"Base.@spawnat\"><code>@spawnat</code></a> macro evaluates the expression in the second argument on the process specified by the first argument.</p> <p>Occasionally you might want a remotely-computed value immediately. This typically happens when you read from a remote object to obtain data needed by the next local operation. The function <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.remotecall_fetch\" title=\"Base.remotecall_fetch\"><code>remotecall_fetch()</code></a> exists for this purpose. It is equivalent to <code>fetch(remotecall(...))</code> but is more efficient.</p> <pre data-language=\"julia\">julia&gt; remotecall_fetch(2, getindex, r, 1, 1)\n0.10824216411304866\n</pre> <p>Remember that <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.getindex\" title=\"Base.getindex\"><code>getindex(r,1,1)</code></a> is <a class=\"reference internal\" href=\"../arrays/index#man-array-indexing\"><span>equivalent</span></a> to <code>r[1,1]</code>, so this call fetches the first element of the remote reference <code>r</code>.</p> <p>The syntax of <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.remotecall\" title=\"Base.remotecall\"><code>remotecall()</code></a> is not especially convenient. The macro <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@spawn\" title=\"Base.@spawn\"><code>@spawn</code></a> makes things easier. It operates on an expression rather than a function, and picks where to do the operation for you:</p> <pre data-language=\"julia\">julia&gt; r = @spawn rand(2,2)\nRemoteRef(1,1,0)\n\njulia&gt; s = @spawn 1 .+ fetch(r)\nRemoteRef(1,1,1)\n\njulia&gt; fetch(s)\n1.10824216411304866 1.13798233877923116\n1.12376292706355074 1.18750497916607167\n</pre> <p>Note that we used <code>1 .+ fetch(r)</code> instead of <code>1 .+ r</code>. This is because we do not know where the code will run, so in general a <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.fetch\" title=\"Base.fetch\"><code>fetch()</code></a> might be required to move <code>r</code> to the process doing the addition. In this case, <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@spawn\" title=\"Base.@spawn\"><code>@spawn</code></a> is smart enough to perform the computation on the process that owns <code>r</code>, so the <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.fetch\" title=\"Base.fetch\"><code>fetch()</code></a> will be a no-op.</p> <p>(It’s worth noting that <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@spawn\" title=\"Base.@spawn\"><code>@spawn</code></a> is not a built-in but is defined in Julia as a <a class=\"reference internal\" href=\"../metaprogramming/index#man-macros\"><span>macro</span></a>. It is possible to define such constructs of your own.)</p>  <h2 id=\"man-parallel-computing-code-availability\">Code Availability and Loading Packages</h2> <p id=\"code-availability-and-loading-packages\">Your code must be available on any process that runs it. For example, type the following into the Julia prompt:</p> <pre data-language=\"julia\">julia&gt; function rand2(dims...)\n         return 2*rand(dims...)\n       end\n\njulia&gt; rand2(2,2)\n2x2 Float64 Array:\n 0.153756  0.368514\n 1.15119   0.918912\n\njulia&gt; fetch(@spawn rand2(2,2))\nERROR: On worker 2:\nfunction rand2 not defined on process 2\n</pre> <p>Process 1 knew about the function <code>rand2</code>, but process 2 did not.</p> <p>Most commonly you’ll be loading code from files or packages, and you have a considerable amount of flexibility in controlling which processes load code. Consider a file, <code>\"DummyModule.jl\"</code>, containing the following code:</p> <pre data-language=\"julia\">module DummyModule\n\nexport MyType, f\n\ntype MyType\n    a::Int\nend\n\nf(x) = x^2+1\n\nprintln(\"loaded\")\n\nend\n</pre> <p>Starting julia with <code>julia -p 2</code>, you can use this to verify the following:</p> <ul> <li>\n<a class=\"reference internal\" href=\"../../stdlib/base/index#Base.include\" title=\"Base.include\"><code>include(\"DummyModule.jl\")</code></a> loads the file on just a single process (whichever one executes the statement). </li> <li>\n<code>using DummyModule</code> causes the module to be loaded on all processes; however, the module is brought into scope only on the one executing the statement. </li> <li>\n<p class=\"first\">As long as <code>DummyModule</code> is loaded on process 2, commands like</p> <pre data-language=\"julia\">rr = RemoteRef(2)\nput!(rr, MyType(7))\n</pre> <p>allow you to store an object of type <code>MyType</code> on process 2 even if <code>DummyModule</code> is not in scope on process 2.</p> </li> </ul> <p>You can force a command to run on all processes using the <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@everywhere\" title=\"Base.@everywhere\"><code>@everywhere</code></a> macro. For example, <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@everywhere\" title=\"Base.@everywhere\"><code>@everywhere</code></a> can also be used to directly define a function on all processes:</p> <pre data-language=\"julia\">julia&gt; @everywhere id = myid()\n\njulia&gt; remotecall_fetch(2, ()-&gt;id)\n2\n</pre> <p>A file can also be preloaded on multiple processes at startup, and a driver script can be used to drive the computation:</p> <pre data-language=\"julia\">julia -p &lt;n&gt; -L file1.jl -L file2.jl driver.jl\n</pre> <p>Each process has an associated identifier. The process providing the interactive Julia prompt always has an id equal to 1, as would the Julia process running the driver script in the example above. The processes used by default for parallel operations are referred to as “workers”. When there is only one process, process 1 is considered a worker. Otherwise, workers are considered to be all processes other than process 1.</p> <p>The base Julia installation has in-built support for two types of clusters:</p> <ul class=\"simple\"> <li>A local cluster specified with the <code>-p</code> option as shown above.</li> <li>A cluster spanning machines using the <code>--machinefile</code> option. This uses a passwordless <code>ssh</code> login to start julia worker processes (from the same path as the current host) on the specified machines.</li> </ul> <p>Functions <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.addprocs\" title=\"Base.addprocs\"><code>addprocs()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.rmprocs\" title=\"Base.rmprocs\"><code>rmprocs()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.workers\" title=\"Base.workers\"><code>workers()</code></a>, and others are available as a programmatic means of adding, removing and querying the processes in a cluster.</p> <p>Note that workers do not run a <code>.juliarc.jl</code> startup script, nor do they synchronize their global state (such as global variables, new method definitions, and loaded modules) with any of the other running processes.</p> <p>Other types of clusters can be supported by writing your own custom <code>ClusterManager</code>, as described below in the <a class=\"reference internal\" href=\"#man-clustermanagers\"><span>ClusterManagers</span></a> section.</p>   <h2 id=\"data-movement\">Data Movement</h2> <p>Sending messages and moving data constitute most of the overhead in a parallel program. Reducing the number of messages and the amount of data sent is critical to achieving performance and scalability. To this end, it is important to understand the data movement performed by Julia’s various parallel programming constructs.</p> <p><a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.fetch\" title=\"Base.fetch\"><code>fetch()</code></a> can be considered an explicit data movement operation, since it directly asks that an object be moved to the local machine. <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@spawn\" title=\"Base.@spawn\"><code>@spawn</code></a> (and a few related constructs) also moves data, but this is not as obvious, hence it can be called an implicit data movement operation. Consider these two approaches to constructing and squaring a random matrix:</p> <pre data-language=\"julia\"># method 1\nA = rand(1000,1000)\nBref = @spawn A^2\n...\nfetch(Bref)\n\n# method 2\nBref = @spawn rand(1000,1000)^2\n...\nfetch(Bref)\n</pre> <p>The difference seems trivial, but in fact is quite significant due to the behavior of <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@spawn\" title=\"Base.@spawn\"><code>@spawn</code></a>. In the first method, a random matrix is constructed locally, then sent to another process where it is squared. In the second method, a random matrix is both constructed and squared on another process. Therefore the second method sends much less data than the first.</p> <p>In this toy example, the two methods are easy to distinguish and choose from. However, in a real program designing data movement might require more thought and likely some measurement. For example, if the first process needs matrix <code>A</code> then the first method might be better. Or, if computing <code>A</code> is expensive and only the current process has it, then moving it to another process might be unavoidable. Or, if the current process has very little to do between the <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@spawn\" title=\"Base.@spawn\"><code>@spawn</code></a> and <code>fetch(Bref)</code> then it might be better to eliminate the parallelism altogether. Or imagine <code>rand(1000,1000)</code> is replaced with a more expensive operation. Then it might make sense to add another <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@spawn\" title=\"Base.@spawn\"><code>@spawn</code></a> statement just for this step.</p>   <h2 id=\"parallel-map-and-loops\">Parallel Map and Loops</h2> <p>Fortunately, many useful parallel computations do not require data movement. A common example is a Monte Carlo simulation, where multiple processes can handle independent simulation trials simultaneously. We can use <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@spawn\" title=\"Base.@spawn\"><code>@spawn</code></a> to flip coins on two processes. First, write the following function in <code>count_heads.jl</code>:</p> <pre data-language=\"julia\">function count_heads(n)\n    c::Int = 0\n    for i=1:n\n        c += rand(Bool)\n    end\n    c\nend\n</pre> <p>The function <code>count_heads</code> simply adds together <code>n</code> random bits. Here is how we can perform some trials on two machines, and add together the results:</p> <pre data-language=\"julia\">require(\"count_heads\")\n\na = @spawn count_heads(100000000)\nb = @spawn count_heads(100000000)\nfetch(a)+fetch(b)\n</pre> <p>This example demonstrates a powerful and often-used parallel programming pattern. Many iterations run independently over several processes, and then their results are combined using some function. The combination process is called a <em>reduction</em>, since it is generally tensor-rank-reducing: a vector of numbers is reduced to a single number, or a matrix is reduced to a single row or column, etc. In code, this typically looks like the pattern <code>x = f(x,v[i])</code>, where <code>x</code> is the accumulator, <code>f</code> is the reduction function, and the <code>v[i]</code> are the elements being reduced. It is desirable for <code>f</code> to be associative, so that it does not matter what order the operations are performed in.</p> <p>Notice that our use of this pattern with <code>count_heads</code> can be generalized. We used two explicit <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@spawn\" title=\"Base.@spawn\"><code>@spawn</code></a> statements, which limits the parallelism to two processes. To run on any number of processes, we can use a <em>parallel for loop</em>, which can be written in Julia like this:</p> <pre data-language=\"julia\">nheads = @parallel (+) for i=1:200000000\n  Int(rand(Bool))\nend\n</pre> <p>This construct implements the pattern of assigning iterations to multiple processes, and combining them with a specified reduction (in this case <code>(+)</code>). The result of each iteration is taken as the value of the last expression inside the loop. The whole parallel loop expression itself evaluates to the final answer.</p> <p>Note that although parallel for loops look like serial for loops, their behavior is dramatically different. In particular, the iterations do not happen in a specified order, and writes to variables or arrays will not be globally visible since iterations run on different processes. Any variables used inside the parallel loop will be copied and broadcast to each process.</p> <p>For example, the following code will not work as intended:</p> <pre data-language=\"julia\">a = zeros(100000)\n@parallel for i=1:100000\n  a[i] = i\nend\n</pre> <p>However, this code will not initialize all of <code>a</code>, since each process will have a separate copy of it. Parallel for loops like these must be avoided. Fortunately, distributed arrays can be used to get around this limitation (see the <a class=\"reference external\" href=\"https://github.com/JuliaParallel/DistributedArrays.jl\">DistributedArrays.jl</a> package).</p> <p>Using “outside” variables in parallel loops is perfectly reasonable if the variables are read-only:</p> <pre data-language=\"julia\">a = randn(1000)\n@parallel (+) for i=1:100000\n  f(a[rand(1:end)])\nend\n</pre> <p>Here each iteration applies <code>f</code> to a randomly-chosen sample from a vector <code>a</code> shared by all processes.</p> <p>As you could see, the reduction operator can be omitted if it is not needed. In that case, the loop executes asynchronously, i.e. it spawns independent tasks on all available workers and returns an array of <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.RemoteRef\" title=\"Base.RemoteRef\"><code>RemoteRef</code></a> immediately without waiting for completion. The caller can wait for the <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.RemoteRef\" title=\"Base.RemoteRef\"><code>RemoteRef</code></a> completions at a later point by calling <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.fetch\" title=\"Base.fetch\"><code>fetch()</code></a> on them, or wait for completion at the end of the loop by prefixing it with <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@sync\" title=\"Base.@sync\"><code>@sync</code></a>, like <code>@sync @parallel for</code>.</p> <p>In some cases no reduction operator is needed, and we merely wish to apply a function to all integers in some range (or, more generally, to all elements in some collection). This is another useful operation called <em>parallel map</em>, implemented in Julia as the <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.pmap\" title=\"Base.pmap\"><code>pmap()</code></a> function. For example, we could compute the singular values of several large random matrices in parallel as follows:</p> <pre data-language=\"julia\">M = Matrix{Float64}[rand(1000,1000) for i=1:10]\npmap(svd, M)\n</pre> <p>Julia’s <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.pmap\" title=\"Base.pmap\"><code>pmap()</code></a> is designed for the case where each function call does a large amount of work. In contrast, <code>@parallel for</code> can handle situations where each iteration is tiny, perhaps merely summing two numbers. Only worker processes are used by both <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.pmap\" title=\"Base.pmap\"><code>pmap()</code></a> and <code>@parallel for</code> for the parallel computation. In case of <code>@parallel for</code>, the final reduction is done on the calling process.</p>   <h2 id=\"synchronization-with-remote-references\">Synchronization With Remote References</h2>   <h2 id=\"scheduling\">Scheduling</h2> <p>Julia’s parallel programming platform uses <a class=\"reference internal\" href=\"../control-flow/index#man-tasks\"><span>Tasks (aka Coroutines)</span></a> to switch among multiple computations. Whenever code performs a communication operation like <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.fetch\" title=\"Base.fetch\"><code>fetch()</code></a> or <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.wait\" title=\"Base.wait\"><code>wait()</code></a>, the current task is suspended and a scheduler picks another task to run. A task is restarted when the event it is waiting for completes.</p> <p>For many problems, it is not necessary to think about tasks directly. However, they can be used to wait for multiple events at the same time, which provides for <em>dynamic scheduling</em>. In dynamic scheduling, a program decides what to compute or where to compute it based on when other jobs finish. This is needed for unpredictable or unbalanced workloads, where we want to assign more work to processes only when they finish their current tasks.</p> <p>As an example, consider computing the singular values of matrices of different sizes:</p> <pre data-language=\"julia\">M = Matrix{Float64}[rand(800,800), rand(600,600), rand(800,800), rand(600,600)]\npmap(svd, M)\n</pre> <p>If one process handles both 800x800 matrices and another handles both 600x600 matrices, we will not get as much scalability as we could. The solution is to make a local task to “feed” work to each process when it completes its current task. This can be seen in the implementation of <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.pmap\" title=\"Base.pmap\"><code>pmap()</code></a>:</p> <pre data-language=\"julia\">function pmap(f, lst)\n    np = nprocs()  # determine the number of processes available\n    n = length(lst)\n    results = cell(n)\n    i = 1\n    # function to produce the next work item from the queue.\n    # in this case it's just an index.\n    nextidx() = (idx=i; i+=1; idx)\n    @sync begin\n        for p=1:np\n            if p != myid() || np == 1\n                @async begin\n                    while true\n                        idx = nextidx()\n                        if idx &gt; n\n                            break\n                        end\n                        results[idx] = remotecall_fetch(p, f, lst[idx])\n                    end\n                end\n            end\n        end\n    end\n    results\nend\n</pre> <p><a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@async\" title=\"Base.@async\"><code>@async</code></a> is similar to <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@spawn\" title=\"Base.@spawn\"><code>@spawn</code></a>, but only runs tasks on the local process. We use it to create a “feeder” task for each process. Each task picks the next index that needs to be computed, then waits for its process to finish, then repeats until we run out of indexes. Note that the feeder tasks do not begin to execute until the main task reaches the end of the <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.@sync\" title=\"Base.@sync\"><code>@sync</code></a> block, at which point it surrenders control and waits for all the local tasks to complete before returning from the function. The feeder tasks are able to share state via <code>nextidx()</code> because they all run on the same process. No locking is required, since the threads are scheduled cooperatively and not preemptively. This means context switches only occur at well-defined points: in this case, when <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.remotecall_fetch\" title=\"Base.remotecall_fetch\"><code>remotecall_fetch()</code></a> is called.</p>   <h2 id=\"channels\">Channels</h2> <p>Channels provide for a fast means of inter-task communication. A <code>Channel(T::Type, n::Int)</code> is a shared queue of maximum length <code>n</code> holding objects of type <code>T</code>. Multiple readers can read off the channel via <code>fetch</code> and <code>take!</code>. Multiple writers can add to the channel via <code>put!</code>. <code>isready</code> tests for the presence of any object in the channel, while <code>wait</code> waits for an object to become available. <code>close</code> closes a Channel. On a closed channel, <code>put!</code> will fail, while <code>take!</code> and <code>fetch</code> successfully return any existing values till it is emptied.</p> <p>A Channel can be used as an iterable object in a <code>for</code> loop, in which case the loop runs as long as the channel has data or is open. The loop variable takes on all values added to the channel. An empty, closed channel causes the <code>for</code> loop to terminate.</p>   <h2 id=\"remoterefs-and-abstractchannels\">RemoteRefs and AbstractChannels</h2> <p>A <code>RemoteRef</code> is a proxy for an implementation of an <code>AbstractChannel</code></p> <p>A concrete implementation of an <code>AbstractChannel</code> (like <code>Channel</code>), is required to implement <code>put!</code>, <code>take!</code>, <code>fetch</code>, <code>isready</code> and <code>wait</code>. The remote object referred to by a <code>RemoteRef()</code> or <code>RemoteRef(pid)</code> is stored in a <code>Channel{Any}(1)</code>, i.e., a channel of size 1 capable of holding objects of <code>Any</code> type.</p> <p>Methods <code>put!</code>, <code>take!</code>, <code>fetch</code>, <code>isready</code> and <code>wait</code> on a <code>RemoteRef</code> are proxied onto the backing store on the remote process.</p> <p>The constructor <code>RemoteRef(f::Function, pid)</code> allows us to construct references to channels holding more than one value of a specific type. <code>f()</code> is a function executed on <code>pid</code> and it must return an <code>AbstractChannel</code>.</p> <p>For example, <code>RemoteRef(()-&gt;Channel{Int}(10), pid)</code>, will return a reference to a channel of type <code>Int</code> and size 10.</p> <p><code>RemoteRef</code> can thus be used to refer to user implemented <code>AbstractChannel</code> objects. A simple example of this is provided in <code>examples/dictchannel.jl</code> which uses a dictionary as its remote store.</p>   <h2 id=\"shared-arrays\">Shared Arrays</h2> <p>Shared Arrays use system shared memory to map the same array across many processes. While there are some similarities to a <a class=\"reference external\" href=\"https://github.com/JuliaParallel/DistributedArrays.jl\">DArray</a>, the behavior of a <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.SharedArray\" title=\"Base.SharedArray\"><code>SharedArray</code></a> is quite different. In a <a class=\"reference external\" href=\"https://github.com/JuliaParallel/DistributedArrays.jl\">DArray</a>, each process has local access to just a chunk of the data, and no two processes share the same chunk; in contrast, in a <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.SharedArray\" title=\"Base.SharedArray\"><code>SharedArray</code></a> each “participating” process has access to the entire array. A <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.SharedArray\" title=\"Base.SharedArray\"><code>SharedArray</code></a> is a good choice when you want to have a large amount of data jointly accessible to two or more processes on the same machine.</p> <p><a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.SharedArray\" title=\"Base.SharedArray\"><code>SharedArray</code></a> indexing (assignment and accessing values) works just as with regular arrays, and is efficient because the underlying memory is available to the local process. Therefore, most algorithms work naturally on <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.SharedArray\" title=\"Base.SharedArray\"><code>SharedArray</code></a>s, albeit in single-process mode. In cases where an algorithm insists on an <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a> input, the underlying array can be retrieved from a <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.SharedArray\" title=\"Base.SharedArray\"><code>SharedArray</code></a> by calling <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.sdata\" title=\"Base.sdata\"><code>sdata()</code></a>. For other <code>AbstractArray</code> types, <code>sdata</code> just returns the object itself, so it’s safe to use <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.sdata\" title=\"Base.sdata\"><code>sdata()</code></a> on any Array-type object.</p> <p>The constructor for a shared array is of the form:</p> <pre data-language=\"julia\">SharedArray(T::Type, dims::NTuple; init=false, pids=Int[])\n</pre> <p>which creates a shared array of a bitstype <code>T</code> and size <code>dims</code> across the processes specified by <code>pids</code>. Unlike distributed arrays, a shared array is accessible only from those participating workers specified by the <code>pids</code> named argument (and the creating process too, if it is on the same host).</p> <p>If an <code>init</code> function, of signature <code>initfn(S::SharedArray)</code>, is specified, it is called on all the participating workers. You can arrange it so that each worker runs the <code>init</code> function on a distinct portion of the array, thereby parallelizing initialization.</p> <p>Here’s a brief example:</p> <pre data-language=\"julia\">julia&gt; addprocs(3)\n3-element Array{Int64,1}:\n 2\n 3\n 4\n\njulia&gt; S = SharedArray(Int, (3,4), init = S -&gt; S[Base.localindexes(S)] = myid())\n3x4 SharedArray{Int64,2}:\n 2  2  3  4\n 2  3  3  4\n 2  3  4  4\n\njulia&gt; S[3,2] = 7\n7\n\njulia&gt; S\n3x4 SharedArray{Int64,2}:\n 2  2  3  4\n 2  3  3  4\n 2  7  4  4\n</pre> <p><a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.localindexes\" title=\"Base.localindexes\"><code>Base.localindexes()</code></a> provides disjoint one-dimensional ranges of indexes, and is sometimes convenient for splitting up tasks among processes. You can, of course, divide the work any way you wish:</p> <pre data-language=\"julia\">julia&gt; S = SharedArray(Int, (3,4), init = S -&gt; S[indexpids(S):length(procs(S)):length(S)] = myid())\n3x4 SharedArray{Int64,2}:\n 2  2  2  2\n 3  3  3  3\n 4  4  4  4\n</pre> <p>Since all processes have access to the underlying data, you do have to be careful not to set up conflicts. For example:</p> <pre data-language=\"julia\">@sync begin\n    for p in procs(S)\n        @async begin\n            remotecall_wait(p, fill!, S, p)\n        end\n    end\nend\n</pre> <p>would result in undefined behavior: because each process fills the <em>entire</em> array with its own <code>pid</code>, whichever process is the last to execute (for any particular element of <code>S</code>) will have its <code>pid</code> retained.</p> <p>As a more extended and complex example, consider running the following “kernel” in parallel:</p> <pre data-language=\"julia\">q[i,j,t+1] = q[i,j,t] + u[i,j,t]\n</pre> <p>In this case, if we try to split up the work using a one-dimensional index, we are likely to run into trouble: if <code>q[i,j,t]</code> is near the end of the block assigned to one worker and <code>q[i,j,t+1]</code> is near the beginning of the block assigned to another, it’s very likely that <code>q[i,j,t]</code> will not be ready at the time it’s needed for computing <code>q[i,j,t+1]</code>. In such cases, one is better off chunking the array manually. Let’s split along the second dimension:</p> <pre data-language=\"julia\"># This function retuns the (irange,jrange) indexes assigned to this worker\n@everywhere function myrange(q::SharedArray)\n    idx = indexpids(q)\n    if idx == 0\n        # This worker is not assigned a piece\n        return 1:0, 1:0\n    end\n    nchunks = length(procs(q))\n    splits = [round(Int, s) for s in linspace(0,size(q,2),nchunks+1)]\n    1:size(q,1), splits[idx]+1:splits[idx+1]\nend\n\n# Here's the kernel\n@everywhere function advection_chunk!(q, u, irange, jrange, trange)\n    @show (irange, jrange, trange)  # display so we can see what's happening\n    for t in trange, j in jrange, i in irange\n        q[i,j,t+1] = q[i,j,t] +  u[i,j,t]\n    end\n    q\nend\n\n# Here's a convenience wrapper for a SharedArray implementation\n@everywhere advection_shared_chunk!(q, u) = advection_chunk!(q, u, myrange(q)..., 1:size(q,3)-1)\n</pre> <p>Now let’s compare three different versions, one that runs in a single process:</p> <pre data-language=\"julia\">advection_serial!(q, u) = advection_chunk!(q, u, 1:size(q,1), 1:size(q,2), 1:size(q,3)-1)\n</pre> <p>one that uses <code>@parallel</code>:</p> <pre data-language=\"julia\">function advection_parallel!(q, u)\n    for t = 1:size(q,3)-1\n        @sync @parallel for j = 1:size(q,2)\n            for i = 1:size(q,1)\n                q[i,j,t+1]= q[i,j,t] + u[i,j,t]\n            end\n        end\n    end\n    q\nend\n</pre> <p>and one that delegates in chunks:</p> <pre data-language=\"julia\">function advection_shared!(q, u)\n    @sync begin\n        for p in procs(q)\n            @async remotecall_wait(p, advection_shared_chunk!, q, u)\n        end\n    end\n    q\nend\n</pre> <p>If we create SharedArrays and time these functions, we get the following results (with <code>julia -p 4</code>):</p> <pre data-language=\"julia\">q = SharedArray(Float64, (500,500,500))\nu = SharedArray(Float64, (500,500,500))\n\n# Run once to JIT-compile\nadvection_serial!(q, u)\nadvection_parallel!(q, u)\nadvection_shared!(q,u)\n\n# Now the real results:\njulia&gt; @time advection_serial!(q, u);\n(irange,jrange,trange) = (1:500,1:500,1:499)\n 830.220 milliseconds (216 allocations: 13820 bytes)\n\njulia&gt; @time advection_parallel!(q, u);\n   2.495 seconds      (3999 k allocations: 289 MB, 2.09% gc time)\n\njulia&gt; @time advection_shared!(q,u);\n        From worker 2:       (irange,jrange,trange) = (1:500,1:125,1:499)\n        From worker 4:       (irange,jrange,trange) = (1:500,251:375,1:499)\n        From worker 3:       (irange,jrange,trange) = (1:500,126:250,1:499)\n        From worker 5:       (irange,jrange,trange) = (1:500,376:500,1:499)\n 238.119 milliseconds (2264 allocations: 169 KB)\n</pre> <p>The biggest advantage of <code>advection_shared!</code> is that it minimizes traffic among the workers, allowing each to compute for an extended time on the assigned piece.</p>   <h2 id=\"distributed-garbage-collection\">Distributed Garbage Collection</h2> <p>Objects referred to by remote references can be freed only when <em>all</em> held references in the cluster are deleted.</p> <p>The node where the value is stored keeps track of which of the workers have a reference to it. Every time a <code>RemoteRef</code> is serialized to a worker, the node pointed to by the reference is notified. And every time a <code>RemoteRef</code> is garbage collected locally, the node owning the value is again notified.</p> <p>The notifications are done via sending of “tracking” messages - an “add reference” message when a reference is serialized to a different process and a “delete reference” message when a reference is locally garbage collected.</p> <p>It is important to note that <em>when</em> an object is locally garbage collected depends on the size of the object and the current memory pressure in the system.</p> <p>In case of remote references, the size of the local reference object is quite small, while the value stored on the remote node may be quite large. Since the local object may not be collected immediately, it is a good practice to explicitly call <code>finalize</code> on local instances of <code>RemoteRef</code>. Explicitly calling <code>finalize</code> results in an immediate message sent to the remote node to go ahead and remove its reference to the value.</p> <p>Once finalized, a reference becomes invalid and cannot be used in any further calls.</p> <p>Like remote references, <code>SharedArray</code> objects are also dependent on garbage collection on the creating node to release references from all participating workers. Code which creates many short lived shared array objects would benefit from explicitly finalizing these objects as soon as possible. This results in both memory and file handles mapping the shared segment being released sooner.</p>   <h2 id=\"man-clustermanagers\">ClusterManagers</h2> <p id=\"clustermanagers\">The launching, management and networking of julia processes into a logical cluster is done via cluster managers. A <code>ClusterManager</code> is responsible for</p> <ul class=\"simple\"> <li>launching worker processes in a cluster environment</li> <li>managing events during the lifetime of each worker</li> <li>optionally, a cluster manager can also provide data transport</li> </ul> <p>A julia cluster has the following characteristics: - The initial julia process, also called the <code>master</code> is special and has a julia id of 1. - Only the <code>master</code> process can add or remove worker processes. - All processes can directly communicate with each other.</p> <p>Connections between workers (using the in-built TCP/IP transport) is established in the following manner:</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.addprocs\" title=\"Base.addprocs\"><code>addprocs()</code></a> is called on the master process with a <code>ClusterManager</code> object</li> <li>\n<a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.addprocs\" title=\"Base.addprocs\"><code>addprocs()</code></a> calls the appropriate <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.launch\" title=\"Base.launch\"><code>launch()</code></a> method which spawns required number of worker processes on appropriate machines</li> <li>Each worker starts listening on a free port and writes out its host, port information to <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.STDOUT\" title=\"Base.STDOUT\"><code>STDOUT</code></a>\n</li> <li>The cluster manager captures the stdout’s of each worker and makes it available to the master process</li> <li>The master process parses this information and sets up TCP/IP connections to each worker</li> <li>Every worker is also notified of other workers in the cluster</li> <li>Each worker connects to all workers whose julia id is less than its own id</li> <li>In this way a mesh network is established, wherein every worker is directly connected with every other worker</li> </ul> <p>While the default transport layer uses plain TCP sockets, it is possible for a julia cluster to provide its own transport.</p> <p>Julia provides two in-built cluster managers:</p> <ul class=\"simple\"> <li>\n<code>LocalManager</code>, used when <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.addprocs\" title=\"Base.addprocs\"><code>addprocs()</code></a> or <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.addprocs\" title=\"Base.addprocs\"><code>addprocs(np::Integer)</code></a> are called</li> <li>\n<code>SSHManager</code>, used when <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.addprocs\" title=\"Base.addprocs\"><code>addprocs(hostnames::Array)</code></a> is called with a list of hostnames</li> </ul> <p><code>LocalManager</code> is used to launch additional workers on the same host, thereby leveraging multi-core and multi-processor hardware.</p> <p>Thus, a minimal cluster manager would need to:</p> <ul class=\"simple\"> <li>be a subtype of the abstract <code>ClusterManager</code>\n</li> <li>implement <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.launch\" title=\"Base.launch\"><code>launch()</code></a>, a method responsible for launching new workers</li> <li>implement <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.manage\" title=\"Base.manage\"><code>manage()</code></a>, which is called at various events during a worker’s lifetime</li> </ul> <p><a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.addprocs\" title=\"Base.addprocs\"><code>addprocs(manager::FooManager)</code></a> requires <code>FooManager</code> to implement:</p> <pre data-language=\"julia\">function launch(manager::FooManager, params::Dict, launched::Array, c::Condition)\n    ...\nend\n\nfunction manage(manager::FooManager, id::Integer, config::WorkerConfig, op::Symbol)\n    ...\nend\n</pre> <p>As an example let us see how the <code>LocalManager</code>, the manager responsible for starting workers on the same host, is implemented:</p> <pre data-language=\"julia\">immutable LocalManager &lt;: ClusterManager\n    np::Integer\nend\n\nfunction launch(manager::LocalManager, params::Dict, launched::Array, c::Condition)\n    ...\nend\n\nfunction manage(manager::LocalManager, id::Integer, config::WorkerConfig, op::Symbol)\n    ...\nend\n</pre> <p>The <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.launch\" title=\"Base.launch\"><code>launch()</code></a> method takes the following arguments:</p> <ul class=\"simple\"> <li>\n<code>manager::ClusterManager</code> - the cluster manager <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.addprocs\" title=\"Base.addprocs\"><code>addprocs()</code></a> is called with</li> <li>\n<code>params::Dict</code> - all the keyword arguments passed to <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.addprocs\" title=\"Base.addprocs\"><code>addprocs()</code></a>\n</li> <li>\n<code>launched::Array</code> - the array to append one or more <code>WorkerConfig</code> objects to</li> <li>\n<code>c::Condition</code> - the condition variable to be notified as and when workers are launched</li> </ul> <p>The <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.launch\" title=\"Base.launch\"><code>launch()</code></a> method is called asynchronously in a separate task. The termination of this task signals that all requested workers have been launched. Hence the <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.launch\" title=\"Base.launch\"><code>launch()</code></a> function MUST exit as soon as all the requested workers have been launched.</p> <p>Newly launched workers are connected to each other, and the master process, in a all-to-all manner. Specifying command argument, <code>--worker</code> results in the launched processes initializing themselves as workers and connections being setup via TCP/IP sockets. Optionally <code>--bind-to bind_addr[:port]</code> may also be specified to enable other workers to connect to it at the specified <code>bind_addr</code> and <code>port</code>. This is useful for multi-homed hosts.</p> <p>For non-TCP/IP transports, for example, an implementation may choose to use MPI as the transport, <code>--worker</code> must NOT be specified. Instead newly launched workers should call <code>init_worker()</code> before using any of the parallel constructs</p> <p>For every worker launched, the <a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.launch\" title=\"Base.launch\"><code>launch()</code></a> method must add a <code>WorkerConfig</code> object (with appropriate fields initialized) to <code>launched</code></p> <pre data-language=\"julia\">type WorkerConfig\n    # Common fields relevant to all cluster managers\n    io::Nullable{IO}\n    host::Nullable{AbstractString}\n    port::Nullable{Integer}\n\n    # Used when launching additional workers at a host\n    count::Nullable{Union{Int, Symbol}}\n    exename::Nullable{AbstractString}\n    exeflags::Nullable{Cmd}\n\n    # External cluster managers can use this to store information at a per-worker level\n    # Can be a dict if multiple fields need to be stored.\n    userdata::Nullable{Any}\n\n    # SSHManager / SSH tunnel connections to workers\n    tunnel::Nullable{Bool}\n    bind_addr::Nullable{AbstractString}\n    sshflags::Nullable{Cmd}\n    max_parallel::Nullable{Integer}\n\n    connect_at::Nullable{Any}\n\n    .....\nend\n</pre> <p>Most of the fields in <code>WorkerConfig</code> are used by the inbuilt managers. Custom cluster managers would typically specify only <code>io</code> or <code>host</code> / <code>port</code>:</p> <p>If <code>io</code> is specified, it is used to read host/port information. A Julia worker prints out its bind address and port at startup. This allows Julia workers to listen on any free port available instead of requiring worker ports to be configured manually.</p> <p>If <code>io</code> is not specified, <code>host</code> and <code>port</code> are used to connect.</p> <p><code>count</code>, <code>exename</code> and <code>exeflags</code> are relevant for launching additional workers from a worker. For example, a cluster manager may launch a single worker per node, and use that to launch additional workers. <code>count</code> with an integer value <code>n</code> will launch a total of <code>n</code> workers, while a value of <code>:auto</code> will launch as many workers as cores on that machine. <code>exename</code> is the name of the julia executable including the full path. <code>exeflags</code> should be set to the required command line arguments for new workers.</p> <p><code>tunnel</code>, <code>bind_addr</code>, <code>sshflags</code> and <code>max_parallel</code> are used when a ssh tunnel is required to connect to the workers from the master process.</p> <p><code>userdata</code> is provided for custom cluster managers to store their own worker specific information.</p> <p><code>manage(manager::FooManager, id::Integer, config::WorkerConfig, op::Symbol)</code> is called at different times during the worker’s lifetime with appropriate <code>op</code> values:</p> <ul class=\"simple\"> <li>with <code>:register</code>/<code>:deregister</code> when a worker is added / removed from the Julia worker pool.</li> <li>with <code>:interrupt</code> when <code>interrupt(workers)</code> is called. The <code>ClusterManager</code> should signal the appropriate worker with an interrupt signal.</li> <li>with <code>:finalize</code> for cleanup purposes.</li> </ul>   <h2 id=\"cluster-managers-with-custom-transports\">Cluster Managers with custom transports</h2> <p>Replacing the default TCP/IP all-to-all socket connections with a custom transport layer is a little more involved. Each julia process has as many communication tasks as the workers it is connected to. For example, consider a julia cluster of 32 processes in a all-to-all mesh network:</p> <ul class=\"simple\"> <li>Each julia process thus has 31 communication tasks</li> <li>Each task handles all incoming messages from a single remote worker in a message processing loop</li> <li>The message processing loop waits on an <code>AsyncStream</code> object - for example, a TCP socket in the default implementation, reads an entire message, processes it and waits for the next one</li> <li>Sending messages to a process is done directly from any julia task - not just communication tasks - again, via the appropriate <code>AsyncStream</code> object</li> </ul> <p>Replacing the default transport involves the new implementation to setup connections to remote workers, and to provide appropriate <code>AsyncStream</code> objects that the message processing loops can wait on. The manager specific callbacks to be implemented are:</p> <pre data-language=\"julia\">connect(manager::FooManager, pid::Integer, config::WorkerConfig)\nkill(manager::FooManager, pid::Int, config::WorkerConfig)\n</pre> <p>The default implementation (which uses TCP/IP sockets) is implemented as <code>connect(manager::ClusterManager, pid::Integer, config::WorkerConfig)</code>.</p> <p><code>connect</code> should return a pair of <code>AsyncStream</code> objects, one for reading data sent from worker <code>pid</code>, and the other to write data that needs to be sent to worker <code>pid</code>. Custom cluster managers can use an in-memory <code>BufferStream</code> as the plumbing to proxy data between the custom, possibly non-AsyncStream transport and julia’s in-built parallel infrastructure.</p> <p>A <code>BufferStream</code> is an in-memory <code>IOBuffer</code> which behaves like an <code>AsyncStream</code>.</p> <p>Folder <code>examples/clustermanager/0mq</code> is an example of using ZeroMQ is connect julia workers in a star network with a 0MQ broker in the middle. Note: The julia processes are still all <em>logically</em> connected to each other - any worker can message any other worker directly without any awareness of 0MQ being used as the transport layer.</p> <p>When using custom transports:</p> <ul class=\"simple\"> <li>julia workers must NOT be started with <code>--worker</code>. Starting with <code>--worker</code> will result in the newly launched workers defaulting to the TCP/IP socket transport implementation</li> <li>For every incoming logical connection with a worker, <code>Base.process_messages(rd::AsyncStream, wr::AsyncStream)</code> must be called. This launches a new task that handles reading and writing of messages from/to the worker represented by the <code>AsyncStream</code> objects</li> <li>\n<code>init_worker(manager::FooManager)</code> MUST be called as part of worker process initializaton</li> <li>Field <code>connect_at::Any</code> in <code>WorkerConfig</code> can be set by the cluster manager when <code>launch</code> is called. The value of this field is passed in in all <code>connect</code> callbacks. Typically, it carries information on <em>how to connect</em> to a worker. For example, the TCP/IP socket transport uses this field to specify the <code>(host, port)</code> tuple at which to connect to a worker</li> </ul> <p><code>kill(manager, pid, config)</code> is called to remove a worker from the cluster. On the master process, the corresponding <code>AsyncStream</code> objects must be closed by the implementation to ensure proper cleanup. The default implementation simply executes an <code>exit()</code> call on the specified remote worker.</p> <p><code>examples/clustermanager/simple</code> is an example that shows a simple implementation using unix domain sockets for cluster setup</p>   <h2 id=\"specifying-network-topology-experimental\">Specifying network topology (Experimental)</h2> <p>Keyword argument <code>topology</code> to <code>addprocs</code> is used to specify how the workers must be connected to each other:</p> <ul class=\"simple\"> <li>\n<code>:all_to_all</code> : is the default, where all workers are connected to each other.</li> <li>\n<code>:master_slave</code> : only the driver process, i.e. pid 1 has connections to the workers.</li> <li>\n<code>:custom</code> : the <code>launch</code> method of the cluster manager specifes the connection topology. Fields <code>ident</code> and <code>connect_idents</code> in <code>WorkerConfig</code> are used to specify the same. <code>connect_idents</code> is a list of <code>ClusterManager</code> provided identifiers to workers that worker with identified by <code>ident</code> must connect to.</li> </ul> <p>Currently sending a message between unconnected workers results in an error. This behaviour, as also the functionality and interface should be considered experimental in nature and may change in future releases.</p> <h4 class=\"rubric\">Footnotes</h4> <table class=\"docutils footnote\" frame=\"void\" id=\"mpi2rma\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[1]</a></td>\n<td>In this context, MPI refers to the MPI-1 standard. Beginning with MPI-2, the MPI standards committee introduced a new set of communication mechanisms, collectively referred to as Remote Memory Access (RMA). The motivation for adding RMA to the MPI standard was to facilitate one-sided communication patterns. For additional information on the latest MPI standard, see <a class=\"reference external\" href=\"http://www.mpi-forum.org/docs\">http://www.mpi-forum.org/docs</a>.</td>\n</tr>  </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/parallel-computing/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/parallel-computing/</a>\n  </p>\n</div>\n","manual/style-guide/index":"<h1 id=\"man-style-guide\">Style Guide</h1> <p>The following sections explain a few aspects of idiomatic Julia coding style. None of these rules are absolute; they are only suggestions to help familiarize you with the language and to help you choose among alternative designs.</p>  <h2 id=\"write-functions-not-just-scripts\">Write functions, not just scripts</h2> <p>Writing code as a series of steps at the top level is a quick way to get started solving a problem, but you should try to divide a program into functions as soon as possible. Functions are more reusable and testable, and clarify what steps are being done and what their inputs and outputs are. Furthermore, code inside functions tends to run much faster than top level code, due to how Julia’s compiler works.</p> <p>It is also worth emphasizing that functions should take arguments, instead of operating directly on global variables (aside from constants like <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.pi\" title=\"Base.pi\"><code>pi</code></a>).</p>   <h2 id=\"avoid-writing-overly-specific-types\">Avoid writing overly-specific types</h2> <p>Code should be as generic as possible. Instead of writing:</p> <pre data-language=\"julia\">convert(Complex{Float64}, x)\n</pre> <p>it’s better to use available generic functions:</p> <pre data-language=\"julia\">complex(float(x))\n</pre> <p>The second version will convert <code>x</code> to an appropriate type, instead of always the same type.</p> <p>This style point is especially relevant to function arguments. For example, don’t declare an argument to be of type <code>Int</code> or <code>Int32</code> if it really could be any integer, expressed with the abstract type <code>Integer</code>. In fact, in many cases you can omit the argument type altogether, unless it is needed to disambiguate from other method definitions, since a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.MethodError\" title=\"Base.MethodError\"><code>MethodError</code></a> will be thrown anyway if a type is passed that does not support any of the requisite operations. (This is known as <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Duck_typing\">duck typing</a>.)</p> <p>For example, consider the following definitions of a function <code>addone</code> that returns one plus its argument:</p> <pre data-language=\"julia\">addone(x::Int) = x + 1             # works only for Int\naddone(x::Integer) = x + one(x)    # any integer type\naddone(x::Number) = x + one(x)     # any numeric type\naddone(x) = x + one(x)             # any type supporting + and one\n</pre> <p>The last definition of <code>addone</code> handles any type supporting <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.one\" title=\"Base.one\"><code>one()</code></a> (which returns 1 in the same type as <code>x</code>, which avoids unwanted type promotion) and the <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.+\" title=\"Base.+\"><code>+</code></a> function with those arguments. The key thing to realize is that there is <em>no performance penalty</em> to defining <em>only</em> the general <code>addone(x) = x + one(x)</code>, because Julia will automatically compile specialized versions as needed. For example, the first time you call <code>addone(12)</code>, Julia will automatically compile a specialized <code>addone</code> function for <code>x::Int</code> arguments, with the call to <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.one\" title=\"Base.one\"><code>one()</code></a> replaced by its inlined value <code>1</code>. Therefore, the first three definitions of <code>addone</code> above are completely redundant.</p>   <h2 id=\"handle-excess-argument-diversity-in-the-caller\">Handle excess argument diversity in the caller</h2> <p>Instead of:</p> <pre data-language=\"julia\">function foo(x, y)\n    x = Int(x); y = Int(y)\n    ...\nend\nfoo(x, y)\n</pre> <p>use:</p> <pre data-language=\"julia\">function foo(x::Int, y::Int)\n    ...\nend\nfoo(Int(x), Int(y))\n</pre> <p>This is better style because <code>foo</code> does not really accept numbers of all types; it really needs <code>Int</code> s.</p> <p>One issue here is that if a function inherently requires integers, it might be better to force the caller to decide how non-integers should be converted (e.g. floor or ceiling). Another issue is that declaring more specific types leaves more “space” for future method definitions.</p>   <h2 id=\"append-to-names-of-functions-that-modify-their-arguments\">Append <code>!</code> to names of functions that modify their arguments</h2> <p>Instead of:</p> <pre data-language=\"julia\">function double{T&lt;:Number}(a::AbstractArray{T})\n    for i = 1:endof(a); a[i] *= 2; end\n    a\nend\n</pre> <p>use:</p> <pre data-language=\"julia\">function double!{T&lt;:Number}(a::AbstractArray{T})\n    for i = 1:endof(a); a[i] *= 2; end\n    a\nend\n</pre> <p>The Julia standard library uses this convention throughout and contains examples of functions with both copying and modifying forms (e.g., <a class=\"reference internal\" href=\"../../stdlib/sort/index#Base.sort\" title=\"Base.sort\"><code>sort()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/sort/index#Base.sort!\" title=\"Base.sort!\"><code>sort!()</code></a>), and others which are just modifying (e.g., <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.push!\" title=\"Base.push!\"><code>push!()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.pop!\" title=\"Base.pop!\"><code>pop!()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.splice!\" title=\"Base.splice!\"><code>splice!()</code></a>). It is typical for such functions to also return the modified array for convenience.</p>   <h2 id=\"avoid-strange-type-unions\">Avoid strange type Unions</h2> <p>Types such as <code>Union{Function,AbstractString}</code> are often a sign that some design could be cleaner.</p>   <h2 id=\"avoid-type-unions-in-fields\">Avoid type Unions in fields</h2> <p>When creating a type such as:</p> <pre data-language=\"julia\">type MyType\n    ...\n    x::Union{Void,T}\nend\n</pre> <p>ask whether the option for <code>x</code> to be <code>nothing</code> (of type <code>Void</code>) is really necessary. Here are some alternatives to consider:</p> <ul class=\"simple\"> <li>Find a safe default value to initialize <code>x</code> with</li> <li>Introduce another type that lacks <code>x</code>\n</li> <li>If there are many fields like <code>x</code>, store them in a dictionary</li> <li>Determine whether there is a simple rule for when <code>x</code> is <code>nothing</code>. For example, often the field will start as <code>nothing</code> but get initialized at some well-defined point. In that case, consider leaving it undefined at first.</li> <li>If <code>x</code> really needs to hold no value at some times, define it as <code>::Nullable{T}</code> instead, as this guarantees type-stability in the code accessing this field (see <a class=\"reference internal\" href=\"../types/index#man-nullable-types\"><span>Nullable types</span></a>)</li> </ul>   <h2 id=\"avoid-elaborate-container-types\">Avoid elaborate container types</h2> <p>It is usually not much help to construct arrays like the following:</p> <pre data-language=\"julia\">a = Array(Union{Int,AbstractString,Tuple,Array}, n)\n</pre> <p>In this case <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.cell\" title=\"Base.cell\"><code>cell(n)</code></a> is better. It is also more helpful to the compiler to annotate specific uses (e.g. <code>a[i]::Int</code>) than to try to pack many alternatives into one type.</p>   <h2 id=\"use-naming-conventions-consistent-with-julia-s-base\">Use naming conventions consistent with Julia’s <code>base/</code>\n</h2> <ul class=\"simple\"> <li>modules and type names use capitalization and camel case: <code>module SparseMatrix</code>, <code>immutable UnitRange</code>.</li> <li>functions are lowercase (<a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.maximum\" title=\"Base.maximum\"><code>maximum()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.convert\" title=\"Base.convert\"><code>convert()</code></a>) and, when readable, with multiple words squashed together (<a class=\"reference internal\" href=\"../../stdlib/base/index#Base.isequal\" title=\"Base.isequal\"><code>isequal()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.haskey\" title=\"Base.haskey\"><code>haskey()</code></a>). When necessary, use underscores as word separators. Underscores are also used to indicate a combination of concepts (<a class=\"reference internal\" href=\"../../stdlib/parallel/index#Base.remotecall_fetch\" title=\"Base.remotecall_fetch\"><code>remotecall_fetch()</code></a> as a more efficient implementation of <code>fetch(remotecall(...))</code>) or as modifiers (<a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.sum_kbn\" title=\"Base.sum_kbn\"><code>sum_kbn()</code></a>).</li> <li>conciseness is valued, but avoid abbreviation (<a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.indexin\" title=\"Base.indexin\"><code>indexin()</code></a> rather than <code>indxin()</code>) as it becomes difficult to remember whether and how particular words are abbreviated.</li> </ul> <p>If a function name requires multiple words, consider whether it might represent more than one concept and might be better split into pieces.</p>   <h2 id=\"don-t-overuse-try-catch\">Don’t overuse try-catch</h2> <p>It is better to avoid errors than to rely on catching them.</p>   <h2 id=\"don-t-parenthesize-conditions\">Don’t parenthesize conditions</h2> <p>Julia doesn’t require parens around conditions in <code>if</code> and <code>while</code>. Write:</p> <pre data-language=\"julia\">if a == b\n</pre> <p>instead of:</p> <pre data-language=\"julia\">if (a == b)\n</pre>   <h2 id=\"don-t-overuse\">Don’t overuse ...</h2> <p>Splicing function arguments can be addictive. Instead of <code>[a..., b...]</code>, use simply <code>[a; b]</code>, which already concatenates arrays. <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.collect\" title=\"Base.collect\"><code>collect(a)</code></a> is better than <code>[a...]</code>, but since <code>a</code> is already iterable it is often even better to leave it alone, and not convert it to an array.</p>   <h2 id=\"don-t-use-unnecessary-static-parameters\">Don’t use unnecessary static parameters</h2> <p>A function signature:</p> <pre data-language=\"julia\">foo{T&lt;:Real}(x::T) = ...\n</pre> <p>should be written as:</p> <pre data-language=\"julia\">foo(x::Real) = ...\n</pre> <p>instead, especially if <code>T</code> is not used in the function body. Even if <code>T</code> is used, it can be replaced with <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.typeof\" title=\"Base.typeof\"><code>typeof(x)</code></a> if convenient. There is no performance difference. Note that this is not a general caution against static parameters, just against uses where they are not needed.</p> <p>Note also that container types, specifically may need type parameters in function calls. See the FAQ <a class=\"reference internal\" href=\"../performance-tips/index#man-abstract-container-type\"><span>Avoid fields with abstract containers</span></a> for more information.</p>   <h2 id=\"avoid-confusion-about-whether-something-is-an-instance-or-a-type\">Avoid confusion about whether something is an instance or a type</h2> <p>Sets of definitions like the following are confusing:</p> <pre data-language=\"julia\">foo(::Type{MyType}) = ...\nfoo(::MyType) = foo(MyType)\n</pre> <p>Decide whether the concept in question will be written as <code>MyType</code> or <code>MyType()</code>, and stick to it.</p> <p>The preferred style is to use instances by default, and only add methods involving <code>Type{MyType}</code> later if they become necessary to solve some problem.</p> <p>If a type is effectively an enumeration, it should be defined as a single (ideally <code>immutable</code>) type, with the enumeration values being instances of it. Constructors and conversions can check whether values are valid. This design is preferred over making the enumeration an abstract type, with the “values” as subtypes.</p>   <h2 id=\"don-t-overuse-macros\">Don’t overuse macros</h2> <p>Be aware of when a macro could really be a function instead.</p> <p>Calling <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.eval\" title=\"Base.eval\"><code>eval()</code></a> inside a macro is a particularly dangerous warning sign; it means the macro will only work when called at the top level. If such a macro is written as a function instead, it will naturally have access to the run-time values it needs.</p>   <h2 id=\"don-t-expose-unsafe-operations-at-the-interface-level\">Don’t expose unsafe operations at the interface level</h2> <p>If you have a type that uses a native pointer:</p> <pre data-language=\"julia\">type NativeType\n    p::Ptr{UInt8}\n    ...\nend\n</pre> <p>don’t write definitions like the following:</p> <pre data-language=\"julia\">getindex(x::NativeType, i) = unsafe_load(x.p, i)\n</pre> <p>The problem is that users of this type can write <code>x[i]</code> without realizing that the operation is unsafe, and then be susceptible to memory bugs.</p> <p>Such a function should either check the operation to ensure it is safe, or have <code>unsafe</code> somewhere in its name to alert callers.</p>   <h2 id=\"don-t-overload-methods-of-base-container-types\">Don’t overload methods of base container types</h2> <p>It is possible to write definitions like the following:</p> <pre data-language=\"julia\">show(io::IO, v::Vector{MyType}) = ...\n</pre> <p>This would provide custom showing of vectors with a specific new element type. While tempting, this should be avoided. The trouble is that users will expect a well-known type like <code>Vector()</code> to behave in a certain way, and overly customizing its behavior can make it harder to work with.</p>   <h2 id=\"be-careful-with-type-equality\">Be careful with type equality</h2> <p>You generally want to use <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.isa\" title=\"Base.isa\"><code>isa()</code></a> and <code>&lt;:</code> (<a class=\"reference internal\" href=\"../../stdlib/base/index#Base.issubtype\" title=\"Base.issubtype\"><code>issubtype()</code></a>) for testing types, not <code>==</code>. Checking types for exact equality typically only makes sense when comparing to a known concrete type (e.g. <code>T == Float64</code>), or if you <em>really, really</em> know what you’re doing.</p>   <h2 id=\"do-not-write-x-f-x\">Do not write <code>x-&gt;f(x)</code>\n</h2> <p>Since higher-order functions are often called with anonymous functions, it is easy to conclude that this is desirable or even necessary. But any function can be passed directly, without being “wrapped” in an anonymous function. Instead of writing <code>map(x-&gt;f(x), a)</code>, write <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.map\" title=\"Base.map\"><code>map(f, a)</code></a>.</p>   <h2 id=\"avoid-using-floats-for-numeric-literals-in-generic-code-when-possible\">Avoid using floats for numeric literals in generic code when possible</h2> <p>If you write generic code which handles numbers, and which can be expected to run with many different numeric type arguments, try using literals of a numeric type that will affect the arguments as little as possible through promotion.</p> <p>For example,</p> <pre data-language=\"julia\">julia&gt; f(x) = 2.0 * x\nf (generic function with 1 method)\n\njulia&gt; f(1//2)\n1.0\n\njulia&gt; f(1/2)\n1.0\n\njulia&gt; f(1)\n2.0\n</pre> <p>while</p> <pre data-language=\"julia\">julia&gt; g(x) = 2 * x\ng (generic function with 1 method)\n\njulia&gt; g(1//2)\n1//1\n\njulia&gt; g(1/2)\n1.0\n\njulia&gt; g(2)\n4\n</pre> <p>As you can see, the second version, where we used an <code>Int</code> literal, preserved the type of the input argument, while the first didn’t. This is because e.g. <code>promote_type(Int, Float64) == Float64</code>, and promotion happens with the multiplication. Similarly, <code>Rational</code> literals are less type disruptive than <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a> literals, but more disruptive than <code>Int</code>s:</p> <pre data-language=\"julia\">julia&gt; h(x) = 2//1 * x\nh (generic function with 1 method)\n\njulia&gt; h(1//2)\n1//1\n\njulia&gt; h(1/2)\n1.0\n\njulia&gt; h(1)\n2//1\n</pre> <p>Thus, use <code>Int</code> literals when possible, with <code>Rational{Int}</code> for literal non-integer numbers, in order to make it easier to use your code.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/style-guide/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/style-guide/</a>\n  </p>\n</div>\n","manual/calling-c-and-fortran-code/index":"<h1 id=\"man-calling-c-and-fortran-code\">Calling C and Fortran Code</h1> <p>Though most code can be written in Julia, there are many high-quality, mature libraries for numerical computing already written in C and Fortran. To allow easy use of this existing code, Julia makes it simple and efficient to call C and Fortran functions. Julia has a “no boilerplate” philosophy: functions can be called directly from Julia without any “glue” code, code generation, or compilation — even from the interactive prompt. This is accomplished just by making an appropriate call with <code>ccall</code> syntax, which looks like an ordinary function call.</p> <p>The code to be called must be available as a shared library. Most C and Fortran libraries ship compiled as shared libraries already, but if you are compiling the code yourself using GCC (or Clang), you will need to use the <code>-shared</code> and <code>-fPIC</code> options. The machine instructions generated by Julia’s JIT are the same as a native C call would be, so the resulting overhead is the same as calling a library function from C code. (Non-library function calls in both C and Julia can be inlined and thus may have even less overhead than calls to shared library functions. When both libraries and executables are generated by LLVM, it is possible to perform whole-program optimizations that can even optimize across this boundary, but Julia does not yet support that. In the future, however, it may do so, yielding even greater performance gains.)</p> <p>Shared libraries and functions are referenced by a tuple of the form <code>(:function, \"library\")</code> or <code>(\"function\", \"library\")</code> where <code>function</code> is the C-exported function name. <code>library</code> refers to the shared library name: shared libraries available in the (platform-specific) load path will be resolved by name, and if necessary a direct path may be specified.</p> <p>A function name may be used alone in place of the tuple (just <code>:function</code> or <code>\"function\"</code>). In this case the name is resolved within the current process. This form can be used to call C library functions, functions in the Julia runtime, or functions in an application linked to Julia.</p> <p>By default, Fortran compilers <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Name_mangling#Fortran\">generate mangled names</a> (for example, converting function names to lowercase or uppercase, often appending an underscore), and so to call a Fortran function via <code>ccall</code> you must pass the mangled identifier corresponding to the rule followed by your Fortran compiler. Also, when calling a Fortran function, all inputs must be passed by reference.</p> <p>Finally, you can use <code>ccall</code> to actually generate a call to the library function. Arguments to <code>ccall</code> are as follows:</p> <ol class=\"arabic simple\"> <li>(:function, “library”) pair (must be a constant, but see below).</li> <li>Return type (see below for mapping the declared C type to Julia)<ul> <li>This argument will be evaluated at compile-time.</li> </ul> </li> <li>A tuple of input types. The input types must be written as a literal tuple, not a tuple-valued variable or expression.<ul> <li>This argument will be evaluated at compile-time.</li> </ul> </li> <li>The following arguments, if any, are the actual argument values passed to the function.</li> </ol> <p>As a complete but simple example, the following calls the <code>clock</code> function from the standard C library:</p> <pre data-language=\"julia\">julia&gt; t = ccall( (:clock, \"libc\"), Int32, ())\n2292761\n\njulia&gt; t\n2292761\n\njulia&gt; typeof(ans)\nInt32\n</pre> <p><code>clock</code> takes no arguments and returns an <code>Int32</code>. One common gotcha is that a 1-tuple must be written with a trailing comma. For example, to call the <code>getenv</code> function to get a pointer to the value of an environment variable, one makes a call like this:</p> <pre data-language=\"julia\">julia&gt; path = ccall((:getenv, \"libc\"), Ptr{UInt8}, (Ptr{UInt8},), \"SHELL\")\nPtr{UInt8} @0x00007fff5fbffc45\n\njulia&gt; bytestring(path)\n\"/bin/bash\"\n</pre> <p>Note that the argument type tuple must be written as <code>(Ptr{UInt8},)</code>, rather than <code>(Ptr{UInt8})</code>. This is because <code>(Ptr{UInt8})</code> is just the expression <code>Ptr{UInt8}</code> surrounded by parentheses, rather than a 1-tuple containing <code>Ptr{UInt8}</code>:</p> <pre data-language=\"julia\">julia&gt; (Ptr{UInt8})\nPtr{UInt8}\n\njulia&gt; (Ptr{UInt8},)\n(Ptr{UInt8},)\n</pre> <p>In practice, especially when providing reusable functionality, one generally wraps <code>ccall</code> uses in Julia functions that set up arguments and then check for errors in whatever manner the C or Fortran function indicates them, propagating to the Julia caller as exceptions. This is especially important since C and Fortran APIs are notoriously inconsistent about how they indicate error conditions. For example, the <code>getenv</code> C library function is wrapped in the following Julia function in <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/base/env.jl\">env.jl</a>:</p> <pre data-language=\"julia\">function getenv(var::AbstractString)\n  val = ccall((:getenv, \"libc\"),\n              Ptr{UInt8}, (Ptr{UInt8},), var)\n  if val == C_NULL\n    error(\"getenv: undefined variable: \", var)\n  end\n  bytestring(val)\nend\n</pre> <p>The C <code>getenv</code> function indicates an error by returning <code>NULL</code>, but other standard C functions indicate errors in various different ways, including by returning -1, 0, 1 and other special values. This wrapper throws an exception clearly indicating the problem if the caller tries to get a non-existent environment variable:</p> <pre data-language=\"julia\">julia&gt; getenv(\"SHELL\")\n\"/bin/bash\"\n\njulia&gt; getenv(\"FOOBAR\")\ngetenv: undefined variable: FOOBAR\n</pre> <p>Here is a slightly more complex example that discovers the local machine’s hostname:</p> <pre data-language=\"julia\">function gethostname()\n  hostname = Array(UInt8, 128)\n  ccall((:gethostname, \"libc\"), Int32,\n        (Ptr{UInt8}, Csize_t),\n        hostname, sizeof(hostname))\n  hostname[end] = 0; # ensure null-termination\n  return bytestring(pointer(hostname))\nend\n</pre> <p>This example first allocates an array of bytes, then calls the C library function <code>gethostname</code> to fill the array in with the hostname, takes a pointer to the hostname buffer, and converts the pointer to a Julia string, assuming that it is a NUL-terminated C string. It is common for C libraries to use this pattern of requiring the caller to allocate memory to be passed to the callee and filled in. Allocation of memory from Julia like this is generally accomplished by creating an uninitialized array and passing a pointer to its data to the C function.</p>  <h2 id=\"creating-c-compatible-julia-function-pointers\">Creating C-Compatible Julia Function Pointers</h2> <p>It is possible to pass Julia functions to native c-functions that accept function pointer arguments. For example, to match c-prototypes of the form:</p> <pre data-language=\"julia\">typedef returntype (*functiontype)(argumenttype,...)\n</pre> <p>The function <code>cfunction</code> generates the c-compatible function pointer for a call to a Julia library function. Arguments to <code>cfunction</code> are as follows:</p> <ol class=\"arabic simple\"> <li>A Julia Function</li> <li>Return type</li> <li>A tuple of input types</li> </ol> <p>A classic example is the standard C library <code>qsort</code> function, declared as:</p> <pre data-language=\"julia\">void qsort(void *base, size_t nmemb, size_t size,\n           int(*compare)(const void *a, const void *b));\n</pre> <p>The <code>base</code> argument is a pointer to an array of length <code>nmemb</code>, with elements of <code>size</code> bytes each. <code>compare</code> is a callback function which takes pointers to two elements <code>a</code> and <code>b</code> and returns an integer less/greater than zero if <code>a</code> should appear before/after <code>b</code> (or zero if any order is permitted). Now, suppose that we have a 1d array <code>A</code> of values in Julia that we want to sort using the <code>qsort</code> function (rather than Julia’s built-in <code>sort</code> function). Before we worry about calling <code>qsort</code> and passing arguments, we need to write a comparison function that works for some arbitrary type T:</p> <pre data-language=\"julia\">function mycompare{T}(a::T, b::T)\n    return convert(Cint, a &lt; b ? -1 : a &gt; b ? +1 : 0)::Cint\nend\n</pre> <p>Notice that we have to be careful about the return type: <code>qsort</code> expects a function returning a C <code>int</code>, so we must be sure to return <code>Cint</code> via a call to <code>convert</code> and a <code>typeassert</code>.</p> <p>In order to pass this function to C, we obtain its address using the function <code>cfunction</code>:</p> <pre data-language=\"julia\">const mycompare_c = cfunction(mycompare, Cint, (Ref{Cdouble}, Ref{Cdouble}))\n</pre> <p><code>cfunction</code> accepts three arguments: the Julia function (<code>mycompare</code>), the return type (<code>Cint</code>), and a tuple of the argument types, in this case to sort an array of <code>Cdouble</code> (Float64) elements.</p> <p>The final call to <code>qsort</code> looks like this:</p> <pre data-language=\"julia\">A = [1.3, -2.7, 4.4, 3.1]\nccall(:qsort, Void, (Ptr{Cdouble}, Csize_t, Csize_t, Ptr{Void}),\n      A, length(A), sizeof(eltype(A)), mycompare_c)\n</pre> <p>After this executes, <code>A</code> is changed to the sorted array <code>[-2.7, 1.3, 3.1, 4.4]</code>. Note that Julia knows how to convert an array into a <code>Ptr{Cdouble}</code>, how to compute the size of a type in bytes (identical to C’s <code>sizeof</code> operator), and so on. For fun, try inserting a <code>println(\"mycompare($a,$b)\")</code> line into <code>mycompare</code>, which will allow you to see the comparisons that <code>qsort</code> is performing (and to verify that it is really calling the Julia function that you passed to it).</p>   <h2 id=\"mapping-c-types-to-julia\">Mapping C Types to Julia</h2> <p>It is critical to exactly match the declared C type with its declaration in Julia. Inconsistencies can cause code that works correctly on one system to fail or produce indeterminate results on a different system.</p> <p>Note that no C header files are used anywhere in the process of calling C functions: you are responsible for making sure that your Julia types and call signatures accurately reflect those in the C header file. (The <a class=\"reference external\" href=\"https://github.com/ihnorton/Clang.jl\">Clang package</a> can be used to auto-generate Julia code from a C header file.)</p>  <h3 id=\"auto-conversion\">Auto-conversion:</h3> <p>Julia automatically inserts calls to the <code>convert</code> function to convert each argument to the specified type. For example, the following call:</p> <pre data-language=\"julia\">ccall((:foo, \"libfoo\"), Void, (Int32, Float64), x, y)\n</pre> <p>will behave as if the following were written:</p> <pre data-language=\"julia\">ccall((:foo, \"libfoo\"), Void, (Int32, Float64),\n      Base.unsafe_convert(Int32, Base.cconvert(Int32, x)),\n      Base.unsafe_convert(Float64, Base.cconvert(Float64, y)))\n</pre> <p><code>cconvert</code> normally just calls <code>convert</code>, but can be defined to return an arbitrary new object more appropriate for passing to C. For example, this is used to convert an <code>Array</code> of objects (e.g. strings) to an array of pointers.</p> <p><code>unsafe_convert</code> handles conversion to <code>Ptr</code> types. It is considered unsafe because converting an object to a native pointer can hide the object from the garbage collector, causing it to be freed prematurely.</p>   <h3 id=\"type-correspondences\">Type Correspondences:</h3> <p>First, a review of some relevant Julia type terminology:</p> <table class=\"text-wrap docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Syntax / Keyword</th> <th class=\"head\">Example</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>type</code></td> <td><code>ASCIIString</code></td> <td>“Leaf Type” :: A group of related data that includes a type-tag, is managed by the Julia GC, and is defined by object-identity. The type parameters of a leaf type must be fully defined (no <code>TypeVars</code> are allowed) in order for the instance to be constructed.</td> </tr> <tr class=\"row-odd\">\n<td><code>abstract</code></td> <td>\n<code>Any</code>, <code>AbstractArray{T,N}</code>, <code>Complex{T}</code>\n</td> <td>“Super Type” :: A super-type (not a leaf-type) that cannot be instantiated, but can be used to describe a group of types.</td> </tr> <tr class=\"row-even\">\n<td><code>{T}</code></td> <td><code>Vector{Int}</code></td> <td>\n<p class=\"first\">“Type Parameter” :: A specialization of a type (typically used for dispatch or storage optimization).</p> <p class=\"last\">“TypeVar” :: The <code>T</code> in the type parameter declaration is referred to as a TypeVar (short for type variable).</p> </td> </tr> <tr class=\"row-odd\">\n<td><code>bitstype</code></td> <td>\n<code>Int</code>, <code>Float64</code>\n</td> <td>“Bits Type” :: A type with no fields, but a size. It is stored and defined by-value.</td> </tr> <tr class=\"row-even\">\n<td><code>immutable</code></td> <td>\n<p class=\"first\"><code>Pair{Int,Int}</code></p> <p class=\"last\"><code>Complex128</code> (<code>isbits</code>)</p> </td> <td>\n<p class=\"first\">“Immutable” :: A type with all fields defined to be constant. It is defined by-value. And may be stored with a type-tag.</p> <p class=\"last\">“Is-Bits” :: A <code>bitstype</code>, or an <code>immutable</code> type where all fields are other <code>isbits</code> types. It is defined by-value, and is stored without a type-tag.</p> </td> </tr> <tr class=\"row-odd\">\n<td><code>type ...; end</code></td> <td><code>nothing</code></td> <td>“Singleton” :: a Leaf Type or Immutable with no fields.</td> </tr> <tr class=\"row-even\">\n<td>\n<code>(...)</code> or <code>tuple(...)`</code>\n</td> <td><code>(1,2,3)</code></td> <td>“Tuple” :: an immutable data-structure similar to an anonymous immutable type, or a constant array. Represented as either an array or a struct.</td> </tr> <tr class=\"row-odd\">\n<td><code>typealias</code></td> <td>Not applicable here</td> <td>Type aliases, and other similar mechanisms of doing type indirection, are resolved to their base type (this includes assigning a type to another name, or getting the type out of a function call).</td> </tr>  </table>   <h3 id=\"bits-types\">Bits Types:</h3> <p>There are several special types to be aware of, as no other type can be defined to behave the same:</p> <dl class=\"docutils\"> <dt>\n<code>Float32</code> </dt> <dd>Exactly corresponds to the <code>float</code> type in C (or <code>REAL*4</code> in Fortran).</dd> <dt>\n<code>Float64</code> </dt> <dd>Exactly corresponds to the <code>double</code> type in C (or <code>REAL*8</code> in Fortran).</dd> <dt>\n<code>Complex64</code> </dt> <dd>Exactly corresponds to the <code>complex float</code> type in C (or <code>COMPLEX*8</code> in Fortran).</dd> <dt>\n<code>Complex128</code> </dt> <dd>Exactly corresponds to the <code>complex double</code> type in C (or <code>COMPLEX*16</code> in Fortran).</dd> <dt>\n<code>Signed</code> </dt> <dd>Exactly corresponds to the <code>signed</code> type annotation in C (or any <code>INTEGER</code> type in Fortran). Any Julia type that is not a subtype of <code>Signed</code> is assumed to be unsigned.</dd> <dt>\n<code>Ref{T}</code> </dt> <dd>Behaves like a <code>Ptr{T}</code> that owns its memory.</dd> <dt>\n<code>Array{T,N}</code> </dt> <dd>\n<p class=\"first\">When an array is passed to C as a <code>Ptr{T}</code> argument, it is not reinterpret-cast: Julia requires that the element type of the array matches <code>T</code>, and the address of the first element is passed.</p> <p>Therefore, if an <code>Array</code> contains data in the wrong format, it will have to be explicitly converted using a call such as <code>trunc(Int32,a)</code>.</p> <p>To pass an array <code>A</code> as a pointer of a different type <em>without</em> converting the data beforehand (for example, to pass a <code>Float64</code> array to a function that operates on uninterpreted bytes), you can declare the argument as <code>Ptr{Void}</code>.</p> <p class=\"last\">If an array of eltype <code>Ptr{T}</code> is passed as a <code>Ptr{Ptr{T}}</code> argument, the Julia base library <code>cconvert</code> function will attempt to first make a null-terminated copy of the array with each element replaced by its <code>cconvert</code> version. This allows, for example, passing an <code>argv</code> pointer array of type <code>Vector{ByteString}</code> to an argument of type <code>Ptr{Ptr{Cchar}}</code>.</p> </dd> </dl> <p>On all systems we currently support, basic C/C++ value types may be translated to Julia types as follows. Every C type also has a corresponding Julia type with the same name, prefixed by C. This can help for writing portable code (and remembering that an <code>int</code> in C is not the same as an <code>Int</code> in Julia).</p> <p><strong>System Independent:</strong></p> <table class=\"text-wrap docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">C name</th> <th class=\"head\">Fortran name</th> <th class=\"head\">Standard Julia Alias</th> <th class=\"head\">Julia Base Type</th> </tr> </thead>  <tr class=\"row-even\">\n<td>\n<p class=\"first\"><code>unsigned char</code></p> <p class=\"last\"><code>bool</code> (C++)</p> </td> <td><code>CHARACTER</code></td> <td><code>Cuchar</code></td> <td><code>UInt8</code></td> </tr> <tr class=\"row-odd\">\n<td><code>short</code></td> <td>\n<p class=\"first\"><code>INTEGER*2</code></p> <p class=\"last\"><code>LOGICAL*2</code></p> </td> <td><code>Cshort</code></td> <td><code>Int16</code></td> </tr> <tr class=\"row-even\">\n<td><code>unsigned short</code></td> <td> </td> <td><code>Cushort</code></td> <td><code>UInt16</code></td> </tr> <tr class=\"row-odd\">\n<td>\n<p class=\"first\"><code>int</code></p> <p class=\"last\"><code>BOOL</code> (C, typical)</p> </td> <td>\n<p class=\"first\"><code>INTEGER*4</code></p> <p class=\"last\"><code>LOGICAL*4</code></p> </td> <td><code>Cint</code></td> <td><code>Int32</code></td> </tr> <tr class=\"row-even\">\n<td><code>unsigned int</code></td> <td> </td> <td><code>Cuint</code></td> <td><code>UInt32</code></td> </tr> <tr class=\"row-odd\">\n<td><code>long long</code></td> <td>\n<p class=\"first\"><code>INTEGER*8</code></p> <p class=\"last\"><code>LOGICAL*8</code></p> </td> <td><code>Clonglong</code></td> <td><code>Int64</code></td> </tr> <tr class=\"row-even\">\n<td><code>unsigned long long</code></td> <td> </td> <td><code>Culonglong</code></td> <td><code>UInt64</code></td> </tr> <tr class=\"row-odd\">\n<td><code>intmax_t</code></td> <td> </td> <td><code>Cintmax_t</code></td> <td><code>Int64</code></td> </tr> <tr class=\"row-even\">\n<td><code>uintmax_t</code></td> <td> </td> <td><code>Cuintmax_t</code></td> <td><code>UInt64</code></td> </tr> <tr class=\"row-odd\">\n<td><code>float</code></td> <td><code>REAL*4i</code></td> <td><code>Cfloat</code></td> <td><code>Float32</code></td> </tr> <tr class=\"row-even\">\n<td><code>double</code></td> <td><code>REAL*8</code></td> <td><code>Cdouble</code></td> <td><code>Float64</code></td> </tr> <tr class=\"row-odd\">\n<td><code>complex float</code></td> <td><code>COMPLEX*8</code></td> <td><code>Complex64</code></td> <td><code>Complex{Float32}</code></td> </tr> <tr class=\"row-even\">\n<td><code>complex double</code></td> <td><code>COMPLEX*16</code></td> <td><code>Complex128</code></td> <td><code>Complex{Float64}</code></td> </tr> <tr class=\"row-odd\">\n<td><code>ptrdiff_t</code></td> <td> </td> <td><code>Cptrdiff_t</code></td> <td><code>Int</code></td> </tr> <tr class=\"row-even\">\n<td><code>ssize_t</code></td> <td> </td> <td><code>Cssize_t</code></td> <td><code>Int</code></td> </tr> <tr class=\"row-odd\">\n<td><code>size_t</code></td> <td> </td> <td><code>Csize_t</code></td> <td><code>UInt</code></td> </tr> <tr class=\"row-even\">\n<td><code>void</code></td> <td> </td> <td> </td> <td><code>Void</code></td> </tr> <tr class=\"row-odd\">\n<td><code>void*</code></td> <td> </td> <td> </td> <td><code>Ptr{Void}</code></td> </tr> <tr class=\"row-even\">\n<td>\n<code>T*</code> (where T represents an appropriately defined type)</td> <td> </td> <td> </td> <td><code>Ref{T}</code></td> </tr> <tr class=\"row-odd\">\n<td>\n<code>char*</code> (or <code>char[]</code>, e.g. a string)</td> <td><code>CHARACTER*N</code></td> <td> </td> <td>\n<code>Cstring</code> if NUL-terminated, or <code>Ptr{UInt8}</code> if not</td> </tr> <tr class=\"row-even\">\n<td>\n<code>char**</code> (or <code>*char[]</code>)</td> <td> </td> <td> </td> <td><code>Ptr{Ptr{UInt8}}</code></td> </tr> <tr class=\"row-odd\">\n<td>\n<code>jl_value_t*</code> (any Julia Type)</td> <td> </td> <td> </td> <td><code>Any</code></td> </tr> <tr class=\"row-even\">\n<td>\n<code>jl_value_t**</code> (a reference to a Julia Type)</td> <td> </td> <td> </td> <td><code>Ref{Any}</code></td> </tr> <tr class=\"row-odd\">\n<td><code>va_arg</code></td> <td> </td> <td> </td> <td>Not supported</td> </tr> <tr class=\"row-even\">\n<td>\n<code>...</code> (variadic function specification)</td> <td> </td> <td> </td> <td>\n<code>T...</code> (where <code>T</code> is one of the above types, variadic functions of different argument types are not supported)</td> </tr>  </table> <p>The <code>Cstring</code> type is essentially a synonym for <code>Ptr{UInt8}</code>, except the conversion to <code>Cstring</code> throws an error if the Julia string contains any embedded NUL characters (which would cause the string to be silently truncated if the C routine treats NUL as the terminator). If you are passing a <code>char*</code> to a C routine that does not assume NUL termination (e.g. because you pass an explicit string length), or if you know for certain that your Julia string does not contain NUL and want to skip the check, you can use <code>Ptr{UInt8}</code> as the argument type.</p> <p><strong>System-dependent:</strong></p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">C name</th> <th class=\"head\">Standard Julia Alias</th> <th class=\"head\">Julia Base Type</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>char</code></td> <td><code>Cchar</code></td> <td>\n<p class=\"first\"><code>Int8</code> (x86, x86_64)</p> <p class=\"last\"><code>UInt8</code> (powerpc, arm)</p> </td> </tr> <tr class=\"row-odd\">\n<td><code>long</code></td> <td><code>Clong</code></td> <td>\n<p class=\"first\"><code>Int</code> (UNIX)</p> <p class=\"last\"><code>Int32</code> (Windows)</p> </td> </tr> <tr class=\"row-even\">\n<td><code>unsigned long</code></td> <td><code>Culong</code></td> <td>\n<p class=\"first\"><code>UInt</code> (UNIX)</p> <p class=\"last\"><code>UInt32</code> (Windows)</p> </td> </tr> <tr class=\"row-odd\">\n<td><code>wchar_t</code></td> <td><code>Cwchar_t</code></td> <td>\n<p class=\"first\"><code>Int32</code> (UNIX)</p> <p class=\"last\"><code>UInt16</code> (Windows)</p> </td> </tr>  </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When calling a Fortran function, all inputs must be passed by reference, so all type correspondences above should contain an additional <code>Ptr{..}</code> or <code>Ref{..}</code> wrapper around their type specification.</p> </div> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">For string arguments (<code>char*</code>) the Julia type should be <code>Cstring</code> (if NUL- terminated data is expected) or either <code>Ptr{Cchar}</code> or <code>Ptr{UInt8}</code> otherwise (these two pointer types have the same effect), as described above, not <code>ASCIIString</code>. Similarly, for array arguments (<code>T[]</code> or <code>T*</code>), the Julia type should again be <code>Ptr{T}</code>, not <code>Vector{T}</code>.</p> </div> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Julia’s <code>Char</code> type is 32 bits, which is not the same as the wide character type (<code>wchar_t</code> or <code>wint_t</code>) on all platforms.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For <code>wchar_t*</code> arguments, the Julia type should be <code>Cwstring</code> (if the C routine expects a NUL-terminated string) or <code>Ptr{Cwchar_t}</code> otherwise, and data can be converted to/from ordinary Julia strings by the <code>wstring(s)</code> function (equivalent to either <code>utf16(s)</code> or <code>utf32(s)</code> depending upon the width of <code>Cwchar_t</code>); this conversion will be called automatically for <code>Cwstring</code> arguments. Note also that ASCII, UTF-8, UTF-16, and UTF-32 string data in Julia is internally NUL-terminated, so it can be passed to C functions expecting NUL-terminated data without making a copy (but using the <code>Cwstring</code> type will cause an error to be thrown if the string itself contains NUL characters).</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>C functions that take an argument of the type <code>char**</code> can be called by using a <code>Ptr{Ptr{UInt8}}</code> type within Julia. For example, C functions of the form:</p> <pre data-language=\"julia\">int main(int argc, char **argv);\n</pre> <p>can be called via the following Julia code:</p> <pre data-language=\"julia\">argv = [ \"a.out\", \"arg1\", \"arg2\" ]\nccall(:main, Int32, (Int32, Ptr{Ptr{UInt8}}), length(argv), argv)\n</pre> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">A C function declared to return <code>Void</code> will return the value <code>nothing</code> in Julia.</p> </div>   <h3 id=\"struct-type-correspondences\">Struct Type correspondences</h3> <p>Composite types, aka <code>struct</code> in C or <code>TYPE</code> in Fortran90 (or <code>STRUCTURE</code> / <code>RECORD</code> in some variants of F77), can be mirrored in Julia by creating a <code>type</code> or <code>immutable</code> definition with the same field layout.</p> <p>When used recursively, <code>isbits</code> types are stored inline. All other types are stored as a pointer to the data. When mirroring a struct used by-value inside another struct in C, it is imperative that you do not attempt to manually copy the fields over, as this will not preserve the correct field alignment. Instead, declare an immutable isbits type and use that instead. Unnamed structs are not possible in the translation to Julia.</p> <p>Packed structs and union declarations are not supported by Julia.</p> <p>You can get a near approximation of a <code>union</code> if you know, a priori, the field that will have the greatest size (potentially including padding). When translating your fields to Julia, declare the Julia field to be only of that type.</p> <p>Arrays of parameters must be expanded manually, currently (either inline, or in an immutable helper-type). For example:</p> <pre data-language=\"julia\">in C:\nstruct B {\n    int A[3];\n};\nb_a_2 = B.A[2];\n\nin Julia:\nimmutable B_A\n    A_1::Cint\n    A_2::Cint\n    A_3::Cint\nend\ntype B\n    A::B_A\nend\nb_a_2 = B.A.(2)\n</pre> <p>Arrays of unknown size are not supported.</p> <p>In the future, some of these restrictions may be reduced or eliminated.</p>   <h3 id=\"memory-ownership\">Memory Ownership:</h3> <p><strong>malloc/free</strong></p> <p>Memory allocation and deallocation of such objects must be handled by calls to the appropriate cleanup routines in the libraries being used, just like in any C program. Do not try to free an object received from a C library with <code>Libc.free</code> in Julia, as this may result in the <code>free</code> function being called via the wrong <code>libc</code> library and cause Julia to crash. The reverse (passing an object allocated in Julia to be freed by an external library) is equally invalid.</p> <p><strong>Ptr{T} vs. Array{T} vs. Ref{T} vs. T</strong></p> <p>The choice of type-wrapper declaration strongly depends on who allocated the memory, and the declared type. In general, use <code>T</code> if the memory is intended to be allocated in (and managed by) Julia (with type-tag). Use <code>Ptr{T}</code> if the memory is expected to be populated by <code>C</code> (without type-tag). Use <code>Ref{T}</code> if you have an <code>isbits</code> type, but you want to turn it into a pointer to a struct in another struct definition.</p>    <h2 id=\"mapping-c-functions-to-julia\">Mapping C Functions to Julia</h2>  <h3 id=\"ccall-cfunction-argument-translation-guide\">ccall/cfunction argument translation guide</h3> <p>For translating a <code>c</code> argument list to <code>Julia</code>:</p> <ul class=\"simple\"> <li>\n<code>T</code>, where <code>T</code> is one of the primitive types: <code>char</code>, <code>int</code>, <code>long</code>, <code>short</code>, <code>float</code>, <code>double</code>, <code>complex</code>, <code>enum</code> or any of their <code>typedef</code> equivalents<ul> <li>\n<code>T</code>, where <code>T</code> is an equivalent Julia Bits Type (per the table above)</li> <li>if <code>T</code> is an <code>enum</code>, the argument type should be equivalent to <code>Cint</code> or <code>Cuint</code>\n</li> <li>argument value will be copied (passed by-value)</li> </ul> </li> <li>\n<code>struct T</code> (including typedef to a struct)<ul> <li>\n<code>T</code>, where <code>T</code> is a Julia Leaf Type</li> <li>argument value will be copied (passed by-value)</li> </ul> </li> <li>\n<code>void*</code><ul> <li>depends on how this parameter is used, first translate this to the intended pointer type, then determine the Julia equivalent using the remaining rules in this list</li> <li>this argument may be declared as <code>Ptr{Void}</code>, if it really is just an unknown pointer</li> </ul> </li> <li>\n<code>jl_value_t*</code><ul> <li><code>Any</code></li> <li>argument value must be a valid Julia object</li> <li>currently unsupported by cfunction</li> </ul> </li> <li>\n<code>jl_value_t**</code><ul> <li><code>Ref{Any}</code></li> <li>argument value must be a valid Julia object (or <code>C_NULL</code>)</li> <li>currently unsupported by cfunction</li> </ul> </li> <li>\n<code>T*</code><ul> <li>\n<code>Ref{T}</code>, where <code>T</code> is the Julia type corresponding to <code>T</code>\n</li> <li>argument value will be copied if it is an <code>isbits</code> type otherwise, the value must be a valid Julia object</li> </ul> </li> <li>\n<code>(T*)(...)</code> (e.g. a pointer to a function)<ul> <li>\n<code>Ptr{Void}</code> (you may need to use <code>cfunction</code> explicitly to create this pointer)</li> </ul> </li> <li>\n<code>...</code> (e.g. a vararg)<ul> <li>\n<code>T...</code>, where <code>T</code> is the Julia type</li> </ul> </li> <li>\n<code>va_arg</code><ul> <li>not supported</li> </ul> </li> </ul>   <h3 id=\"ccall-cfunction-return-type-translation-guide\">ccall/cfunction return type translation guide</h3> <p>For translating a <code>c</code> return type to <code>Julia</code>:</p> <ul class=\"simple\"> <li>\n<code>void</code><ul> <li>\n<code>Void</code> (this will return the singleton instance <code>nothing::Void</code>)</li> </ul> </li> <li>\n<code>T</code>, where <code>T</code> is one of the primitive types: <code>char</code>, <code>int</code>, <code>long</code>, <code>short</code>, <code>float</code>, <code>double</code>, <code>complex</code>, <code>enum</code> or any of their <code>typedef</code> equivalents<ul> <li>\n<code>T</code>, where <code>T</code> is an equivalent Julia Bits Type (per the table above)</li> <li>if <code>T</code> is an <code>enum</code>, the argument type should be equivalent to <code>Cint</code> or <code>Cuint</code>\n</li> <li>argument value will be copied (returned by-value)</li> </ul> </li> <li>\n<code>struct T</code> (including typedef to a struct)<ul> <li>\n<code>T</code>, where <code>T</code> is a Julia Leaf Type</li> <li>argument value will be copied (returned by-value)</li> </ul> </li> <li>\n<code>void*</code><ul> <li>depends on how this parameter is used, first translate this to the intended pointer type, then determine the Julia equivalent using the remaining rules in this list</li> <li>this argument may be declared as <code>Ptr{Void}</code>, if it really is just an unknown pointer</li> </ul> </li> <li>\n<code>jl_value_t*</code><ul> <li><code>Any</code></li> <li>argument value must be a valid Julia object</li> </ul> </li> <li>\n<code>jl_value_t**</code><ul> <li><code>Ref{Any}</code></li> <li>argument value must be a valid Julia object (or <code>C_NULL</code>)</li> </ul> </li> <li>\n<code>T*</code><ul> <li>If the memory is already owned by Julia, or is an <code>isbits</code> type, and is known to be non-null:<ul> <li>\n<code>Ref{T}</code>, where <code>T</code> is the Julia type corresponding to <code>T</code>\n</li> <li>a return type of <code>Ref{Any}</code> is invalid, it should either be <code>Any</code> (corresponding to <code>jl_value_t*</code>) or <code>Ptr{Any}</code> (corresponding to <code>Ptr{Any}</code>)</li> <li>currently partially unsupported by cfunction due to #2818</li> <li>C <strong>MUST NOT</strong> modify the memory returned via <code>Ref{T}</code> if <code>T</code> is an <code>isbits</code> type</li> </ul> </li> <li>If the memory is owned by C:<ul> <li>\n<code>Ptr{T}</code>, where <code>T</code> is the Julia type corresponding to <code>T</code>\n</li> </ul> </li> </ul> </li> <li>\n<code>(T*)(...)</code> (e.g. a pointer to a function)<ul> <li>\n<code>Ptr{Void}</code> (you may need to use <code>cfunction</code> explicitly to create this pointer)</li> </ul> </li> </ul>   <h3 id=\"passing-pointers-for-modifying-inputs\">Passing Pointers for Modifying Inputs</h3> <p>Because C doesn’t support multiple return values, often C functions will take pointers to data that the function will modify. To accomplish this within a <code>ccall</code>, you need to first encapsulate the value inside an <code>Ref{T}</code> of the appropriate type. When you pass this <code>Ref</code> object as an argument, julia will automatically pass a C pointer to the encapsulated data:</p> <pre data-language=\"julia\">width = Ref{Cint}(0)\nrange = Ref{Cfloat}(0)\nccall(:foo, Void, (Ref{Cint}, Ref{Cfloat}), width, range)\n</pre> <p>Upon return, the contents of <code>width</code> and <code>range</code> can be retrieved (if they were changed by <code>foo</code>) by <code>width[]</code> and <code>range[]</code>; that is, they act like zero-dimensional arrays.</p>   <h3 id=\"special-reference-syntax-for-ccall-deprecated\">Special Reference Syntax for ccall (deprecated):</h3> <p>The <code>&amp;</code> syntax is deprecated, use the <code>Ref{T}</code> argument type instead.</p> <p>A prefix <code>&amp;</code> is used on an argument to ccall to indicate that a pointer to a scalar argument should be passed instead of the scalar value itself (required for all Fortran function arguments, as noted above). The following example computes a dot product using a BLAS function.</p> <pre data-language=\"julia\">function compute_dot(DX::Vector{Float64}, DY::Vector{Float64})\n  assert(length(DX) == length(DY))\n  n = length(DX)\n  incx = incy = 1\n  product = ccall((:ddot_, \"libLAPACK\"),\n                  Float64,\n                  (Ptr{Int32}, Ptr{Float64}, Ptr{Int32}, Ptr{Float64}, Ptr{Int32}),\n                  &amp;n, DX, &amp;incx, DY, &amp;incy)\n  return product\nend\n</pre> <p>The meaning of prefix <code>&amp;</code> is not quite the same as in C. In particular, any changes to the referenced variables will not be visible in Julia unless the type is mutable (declared via <code>type</code>). However, even for immutable types it will not cause any harm for called functions to attempt such modifications (that is, writing through the passed pointers). Moreover, <code>&amp;</code> may be used with any expression, such as <code>&amp;0</code> or <code>&amp;f(x)</code>.</p> <p>When a scalar value is passed with <code>&amp;</code> as an argument of type <code>Ptr{T}</code>, the value will first be converted to type <code>T</code>.</p>    <h2 id=\"garbage-collection-safety\">Garbage Collection Safety</h2> <p>When passing data to a ccall, it is best to avoid using the <code>pointer()</code> function. Instead define a convert method and pass the variables directly to the ccall. ccall automatically arranges that all of its arguments will be preserved from garbage collection until the call returns. If a C API will store a reference to memory allocated by Julia, after the ccall returns, you must arrange that the object remains visible to the garbage collector. The suggested way to handle this is to make a global variable of type <code>Array{Ref,1}</code> to hold these values, until the C library notifies you that it is finished with them.</p> <p>Whenever you have created a pointer to Julia data, you must ensure the original data exists until you are done with using the pointer. Many methods in Julia such as <code>unsafe_load()</code> and <code>bytestring()</code> make copies of data instead of taking ownership of the buffer, so that it is safe to free (or alter) the original data without affecting Julia. A notable exception is <code>pointer_to_array()</code> which, for performance reasons, shares (or can be told to take ownership of) the underlying buffer.</p> <p>The garbage collector does not guarantee any order of finalization. That is, if <code>a</code> contained a reference to <code>b</code> and both <code>a</code> and <code>b</code> are due for garbage collection, there is no guarantee that <code>b</code> would be finalized after <code>a</code>. If proper finalization of <code>a</code> depends on <code>b</code> being valid, it must be handled in other ways.</p>   <h2 id=\"non-constant-function-specifications\">Non-constant Function Specifications</h2> <p>A <code>(name, library)</code> function specification must be a constant expression. However, it is possible to use computed values as function names by staging through <code>eval</code> as follows:</p> <pre data-language=\"julia\">@eval ccall(($(string(\"a\",\"b\")),\"lib\"), ...\n</pre> <p>This expression constructs a name using <code>string</code>, then substitutes this name into a new <code>ccall</code> expression, which is then evaluated. Keep in mind that <code>eval</code> only operates at the top level, so within this expression local variables will not be available (unless their values are substituted with <code>$</code>). For this reason, <code>eval</code> is typically only used to form top-level definitions, for example when wrapping libraries that contain many similar functions.</p> <p>If your usage is more dynamic, use indirect calls as described in the next section.</p>   <h2 id=\"indirect-calls\">Indirect Calls</h2> <p>The first argument to <code>ccall</code> can also be an expression evaluated at run time. In this case, the expression must evaluate to a <code>Ptr</code>, which will be used as the address of the native function to call. This behavior occurs when the first <code>ccall</code> argument contains references to non-constants, such as local variables, function arguments, or non-constant globals.</p> <p>For example, you might lookup the function via <code>dlsym</code>, then cache it in a global variable for that session. For example:</p> <pre data-language=\"julia\">macro dlsym(func, lib)\n    z, zlocal = gensym(string(func)), gensym()\n    eval(current_module(),:(global $z = C_NULL))\n    z = esc(z)\n    quote\n        let $zlocal::Ptr{Void} = $z::Ptr{Void}\n            if $zlocal == C_NULL\n               $zlocal = dlsym($(esc(lib))::Ptr{Void}, $(esc(func)))\n               global $z = $zlocal\n            end\n            $zlocal\n        end\n    end\nend\n\nmylibvar = dlopen(\"mylib\")\nccall(@dlsym(\"myfunc\", mylibvar), Void, ())\n</pre>   <h2 id=\"calling-convention\">Calling Convention</h2> <p>The second argument to <code>ccall</code> can optionally be a calling convention specifier (immediately preceding return type). Without any specifier, the platform-default C calling convention is used. Other supported conventions are: <code>stdcall</code>, <code>cdecl</code>, <code>fastcall</code>, and <code>thiscall</code>. For example (from base/libc.jl) we see the same <code>gethostname</code> ccall as above, but with the correct signature for Windows:</p> <pre data-language=\"julia\">hn = Array(UInt8, 256)\nerr = ccall(:gethostname, stdcall, Int32, (Ptr{UInt8}, UInt32), hn, length(hn))\n</pre> <p>For more information, please see the <a class=\"reference external\" href=\"http://llvm.org/docs/LangRef.html#calling-conventions\">LLVM Language Reference</a>.</p>   <h2 id=\"accessing-global-variables\">Accessing Global Variables</h2> <p>Global variables exported by native libraries can be accessed by name using the <code>cglobal</code> function. The arguments to <code>cglobal</code> are a symbol specification identical to that used by <code>ccall</code>, and a type describing the value stored in the variable:</p> <pre data-language=\"julia\">julia&gt; cglobal((:errno,:libc), Int32)\nPtr{Int32} @0x00007f418d0816b8\n</pre> <p>The result is a pointer giving the address of the value. The value can be manipulated through this pointer using <code>unsafe_load</code> and <code>unsafe_store</code>.</p>   <h2 id=\"accessing-data-through-a-pointer\">Accessing Data through a Pointer</h2> <p>The following methods are described as “unsafe” because a bad pointer or type declaration can cause Julia to terminate abruptly (although, that’s quite alike with ccall).</p> <p>Given a <code>Ptr{T}</code>, the contents of type <code>T</code> can generally be copied from the referenced memory into a Julia object using <code>unsafe_load(ptr, [index])</code>. The index argument is optional (default is 1), and follows the Julia-convention of 1-based indexing. This function is intentionally similar to the behavior of <code>getindex()</code> and <code>setindex!()</code> (e.g. <code>[]</code> access syntax).</p> <p>The return value will be a new object initialized to contain a copy of the contents of the referenced memory. The referenced memory can safely be freed or released.</p> <p>If <code>T</code> is <code>Any</code>, then the memory is assumed to contain a reference to a Julia object (a <code>jl_value_t*</code>), the result will be a reference to this object, and the object will not be copied. You must be careful in this case to ensure that the object was always visible to the garbage collector (pointers do not count, but the new reference does) to ensure the memory is not prematurely freed. Note that if the object was not originally allocated by Julia, the new object will never be finalized by Julia’s garbage collector. If the <code>Ptr</code> itself is actually a <code>jl_value_t*</code>, it can be converted back to a Julia object reference by <code>unsafe_pointer_to_objref(ptr)</code>. (Julia values <code>v</code> can be converted to <code>jl_value_t*</code> pointers, as <code>Ptr{Void}</code>, by calling <code>pointer_from_objref(v)</code>.)</p> <p>The reverse operation (writing data to a Ptr{T}), can be performed using <code>unsafe_store!(ptr, value, [index])</code>. Currently, this is only supported for bitstypes or other pointer-free (<code>isbits</code>) immutable types.</p> <p>Any operation that throws an error is probably currently unimplemented and should be posted as a bug so that it can be resolved.</p> <p>If the pointer of interest is a plain-data array (bitstype or immutable), the function <code>pointer_to_array(ptr,dims,[own])</code> may be more useful. The final parameter should be true if Julia should “take ownership” of the underlying buffer and call <code>free(ptr)</code> when the returned <code>Array</code> object is finalized. If the <code>own</code> parameter is omitted or false, the caller must ensure the buffer remains in existence until all access is complete.</p> <p>Arithmetic on the <code>Ptr</code> type in Julia (e.g. using <code>+</code>) does not behave the same as C’s pointer arithmetic. Adding an integer to a <code>Ptr</code> in Julia always moves the pointer by some number of <em>bytes</em>, not elements. This way, the address values obtained from pointer arithmetic do not depend on the element types of pointers.</p>   <h2 id=\"thread-safety\">Thread-safety</h2> <p>Some C libraries execute their callbacks from a different thread, and since Julia isn’t thread-safe you’ll need to take some extra precautions. In particular, you’ll need to set up a two-layered system: the C callback should only <em>schedule</em> (via Julia’s event loop) the execution of your “real” callback. To do this, you pass a function of one argument (the <code>AsyncWork</code> object for which the event was triggered, which you’ll probably just ignore) to <code>SingleAsyncWork</code>:</p> <pre data-language=\"julia\">cb = Base.SingleAsyncWork(data -&gt; my_real_callback(args))\n</pre> <p>The callback you pass to C should only execute a <code>ccall</code> to <code>:uv_async_send</code>, passing <code>cb.handle</code> as the argument.</p>   <h2 id=\"more-about-callbacks\">More About Callbacks</h2> <p>For more details on how to pass callbacks to C libraries, see this <a class=\"reference external\" href=\"http://julialang.org/blog/2013/05/callback\">blog post</a>.</p>   <h2 id=\"c\">C++</h2> <p>Limited support for C++ is provided by the <a class=\"reference external\" href=\"https://github.com/timholy/Cpp.jl\">Cpp</a>, <a class=\"reference external\" href=\"https://github.com/ihnorton/Clang.jl\">Clang</a>, and <a class=\"reference external\" href=\"https://github.com/Keno/Cxx.jl\">Cxx</a> packages.</p>   <h2 id=\"handling-operating-system-variation\">Handling Operating System Variation</h2> <p>When dealing with platform libraries, it is often necessary to provide special cases for various platforms. The variable <code>OS_NAME</code> can be used to write these special cases. Additionally, there are several macros intended to make this easier: <code>@windows</code>, <code>@unix</code>, <code>@linux</code>, and <code>@osx</code>. Note that linux and osx are mutually exclusive subsets of unix. Their usage takes the form of a ternary conditional operator, as demonstrated in the following examples.</p> <p>Simple blocks:</p> <pre data-language=\"julia\">ccall( (@windows? :_fopen : :fopen), ...)\n</pre> <p>Complex blocks:</p> <pre data-language=\"julia\">@linux? (\n         begin\n             some_complicated_thing(a)\n         end\n       : begin\n             some_different_thing(a)\n         end\n       )\n</pre> <p>Chaining (parentheses optional, but recommended for readability):</p> <pre data-language=\"julia\">@windows? :a : (@osx? :b : :c)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/calling-c-and-fortran-code/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/calling-c-and-fortran-code/</a>\n  </p>\n</div>\n","manual/noteworthy-differences/index":"<h1 id=\"man-noteworthy-differences\">Noteworthy Differences from other Languages</h1>  <h2 id=\"noteworthy-differences-from-matlab\">Noteworthy differences from MATLAB</h2> <p>Although MATLAB users may find Julia’s syntax familiar, Julia is not a MATLAB clone. There are major syntactic and functional differences. The following are some noteworthy differences that may trip up Julia users accustomed to MATLAB:</p> <ul class=\"simple\"> <li>Julia arrays are indexed with square brackets, <code>A[i,j]</code>.</li> <li>Julia arrays are assigned by reference. After <code>A=B</code>, changing elements of <code>B</code> will modify <code>A</code> as well.</li> <li>Julia values are passed and assigned by reference. If a function modifies an array, the changes will be visible in the caller.</li> <li>Julia does not automatically grow arrays in an assignment statement. Whereas in MATLAB <code>a(4) = 3.2</code> can create the array <code>a = [0 0 0 3.2]</code> and <code>a(5) = 7</code> can grow it into <code>a = [0 0 0 3.2 7]</code>, the corresponding Julia statement <code>a[5] = 7</code> throws an error if the length of <code>a</code> is less than 5 or if this statement is the first use of the identifier <code>a</code>. Julia has <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.push!\" title=\"Base.push!\"><code>push!()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.append!\" title=\"Base.append!\"><code>append!()</code></a>, which grow <code>Vector</code>s much more efficiently than MATLAB’s <code>a(end+1) = val</code>.</li> <li>The imaginary unit <code>sqrt(-1)</code> is represented in Julia as <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.im\" title=\"Base.im\"><code>im</code></a>, not <code>i</code> or <code>j</code> as in MATLAB.</li> <li>In Julia, literal numbers without a decimal point (such as <code>42</code>) create integers instead of floating point numbers. Arbitrarily large integer literals are supported. As a result, some operations such as <code>2^-1</code> will throw a domain error as the result is not an integer (see <a class=\"reference internal\" href=\"../faq/index#man-domain-error\"><span>the FAQ entry on domain errors</span></a> for details).</li> <li>In Julia, multiple values are returned and assigned as tuples, e.g. <code>(a, b) = (1, 2)</code> or <code>a, b = 1, 2</code>. MATLAB’s <code>nargout</code>, which is often used in MATLAB to do optional work based on the number of returned values, does not exist in Julia. Instead, users can use optional and keyword arguments to achieve similar capabilities.</li> <li>Julia has true one-dimensional arrays. Column vectors are of size <code>N</code>, not <code>Nx1</code>. For example, <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.rand\" title=\"Base.rand\"><code>rand(N)</code></a> makes a 1-dimensional array.</li> <li>In Julia v0.3, concatenating scalars and arrays with the syntax <code>[x,y,z]</code> concatenates in the first dimension (“vertically”). For concatenation in the second dimension (“horizontally”), use spaces as in <code>[x y z]</code>. To construct block matrices (concatenating in the first two dimensions), the syntax <code>[a b; c d]</code> is used to avoid confusion. In Julia v0.4, the concatenation syntax <code>[x, [y, z]]</code> is deprecated in favor of <code>[x; [y, z]]</code>.</li> <li>In Julia, <code>a:b</code> and <code>a:b:c</code> construct <code>Range</code> objects. To construct a full vector like in MATLAB, use <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.collect\" title=\"Base.collect\"><code>collect(a:b)</code></a>. Generally, there is no need to call <code>collect</code> though. <code>Range</code> will act like a normal array in most cases but is more efficient because it lazily computes its values. This pattern of creating specialized objects instead of full arrays is used frequently, and is also seen in functions such as <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.linspace\" title=\"Base.linspace\"><code>linspace</code></a>, or with iterators such as <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.enumerate\" title=\"Base.enumerate\"><code>enumerate</code></a>, and <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.zip\" title=\"Base.zip\"><code>zip</code></a>. The special objects can mostly be used as if they were normal arrays.</li> <li>Functions in Julia return values from their last expression or the <code>return</code> keyword instead of listing the names of variables to return in the function definition (see <a class=\"reference internal\" href=\"../functions/index#man-return-keyword\"><span>The return Keyword</span></a> for details).</li> <li>A Julia script may contain any number of functions, and all definitions will be externally visible when the file is loaded. Function definitions can be loaded from files outside the current working directory.</li> <li>In Julia, reductions such as <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.sum\" title=\"Base.sum\"><code>sum()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.prod\" title=\"Base.prod\"><code>prod()</code></a>, and <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.max\" title=\"Base.max\"><code>max()</code></a> are performed over every element of an array when called with a single argument, as in <code>sum(A)</code>, even if <code>A</code> has more than one dimension.</li> <li>In Julia, functions such as <a class=\"reference internal\" href=\"../../stdlib/sort/index#Base.sort\" title=\"Base.sort\"><code>sort()</code></a> that operate column-wise by default (<code>sort(A)</code> is equivalent to <code>sort(A,1)</code>) do not have special behavior for <code>1xN</code> arrays; the argument is returned unmodified since it still performs <code>sort(A,1)</code>. To sort a <code>1xN</code> matrix like a vector, use <code>sort(A,2)</code>.</li> <li>In Julia, if <code>A</code> is a 2-dimensional array, <code>fft(A)</code> computes a 2D FFT. In particular, it is not equivalent to <code>fft(A,1)</code>, which computes a 1D FFT acting column-wise.</li> <li>In Julia, parentheses must be used to call a function with zero arguments, like in <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.tic\" title=\"Base.tic\"><code>tic()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.toc\" title=\"Base.toc\"><code>toc()</code></a>.</li> <li>Julia discourages the used of semicolons to end statements. The results of statements are not automatically printed (except at the interactive prompt), and lines of code do not need to end with semicolons. <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.println\" title=\"Base.println\"><code>println()</code></a> or <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.@printf\" title=\"Base.@printf\"><code>@printf()</code></a> can be used to print specific output.</li> <li>In Julia, if <code>A</code> and <code>B</code> are arrays, logical comparison operations like <code>A == B</code> do not return an array of booleans. Instead, use <code>A .== B</code>, and similarly for the other boolean operators like <a class=\"reference internal\" href=\"#\" title=\"Base.&lt;\"><code>&lt;</code></a>, <a class=\"reference internal\" href=\"#\" title=\"Base.&gt;\"><code>&gt;</code></a> and <code>=</code>.</li> <li>In Julia, the operators <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.&amp;\" title=\"Base.&amp;\"><code>&amp;</code></a>, <a class=\"reference internal\" href=\"#\" title=\"Base.|\"><code>|</code></a>, and <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.%24\" title=\"Base.$\"><code>$</code></a> perform the bitwise operations equivalent to <code>and</code>, <code>or</code>, and <code>xor</code> respectively in MATLAB, and have precedence similar to Python’s bitwise operators (unlike C). They can operate on scalars or element-wise across arrays and can be used to combine logical arrays, but note the difference in order of operations: parentheses may be required (e.g., to select elements of <code>A</code> equal to 1 or 2 use <code>(A .== 1) | (A .== 2)</code>).</li> <li>In Julia, the elements of a collection can be passed as arguments to a function using the splat operator <code>...</code>, as in <code>xs=[1,2]; f(xs...)</code>.</li> <li>Julia’s <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.svd\" title=\"Base.svd\"><code>svd()</code></a> returns singular values as a vector instead of as a dense diagonal matrix.</li> <li>In Julia, <code>...</code> is not used to continue lines of code. Instead, incomplete expressions automatically continue onto the next line.</li> <li>In both Julia and MATLAB, the variable <code>ans</code> is set to the value of the last expression issued in an interactive session. In Julia, unlike MATLAB, <code>ans</code> is not set when Julia code is run in non-interactive mode.</li> <li>Julia’s <code>type</code>s do not support dynamically adding fields at runtime, unlike MATLAB’s <code>class</code>es. Instead, use a <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.Dict\" title=\"Base.Dict\"><code>Dict</code></a>.</li> <li>In Julia each module has its own global scope/namespace, whereas in Matlab there is just one global scope.</li> </ul>   <h2 id=\"noteworthy-differences-from-r\">Noteworthy differences from R</h2> <p>One of Julia’s goals is to provide an effective language for data analysis and statistical programming. For users coming to Julia from R, these are some noteworthy differences:</p> <ul class=\"simple\"> <li>Julia’s single quotes enclose characters, not strings.</li> <li>Julia can create substrings by indexing into strings. In R, strings must be converted into character vectors before creating substrings.</li> <li>In Julia, like Python but unlike R, strings can be created with triple quotes <code>\"\"\" ... \"\"\"</code>. This syntax is convenient for constructing strings that contain line breaks.</li> <li>In Julia, varargs are specified using the splat operator <code>...</code>, which always follows the name of a specific variable, unlike R, for which <code>...</code> can occur in isolation.</li> <li>In Julia, modulus is <code>mod(a, b)</code>, not <code>a %% b</code>. <code>%</code> in Julia is the remainder operator.</li> <li>In Julia, not all data structures support logical indexing. Furthermore, logical indexing in Julia is supported only with vectors of length equal to the object being indexed. For example: - In R, <code>c(1, 2, 3, 4)[c(TRUE, FALSE)]</code> is equivalent to <code>c(1,3)</code>. - In R, <code>c(1, 2, 3, 4)[c(TRUE, FALSE, TRUE, FALSE)]</code> is equivalent to <code>c(1,3)</code>. - In Julia, <code>[1, 2, 3, 4][[true, false]]</code> throws a <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.BoundsError\" title=\"Base.BoundsError\"><code>BoundsError</code></a>. - In Julia, <code>[1, 2, 3, 4][[true, false, true, false]]</code> produces <code>[1, 3]</code>.</li> <li>Like many languages, Julia does not always allow operations on vectors of different lengths, unlike R where the vectors only need to share a common index range. For example, <code>c(1,2,3,4) + c(1,2)</code> is valid R but the equivalent <code>[1:4] + [1:2]</code> will throw an error in Julia.</li> <li>Julia’s <code>apply()</code> takes the function first, then its arguments, unlike <code>lapply(&lt;structure&gt;, function, arg2, ...)</code> in R.</li> <li>Julia uses <code>end</code> to denote the end of conditional blocks, like <code>if</code>, loop blocks, like <code>while</code>/<code>for</code>, and functions. In lieu of the one-line <code>if ( cond ) statement</code>, Julia allows statements of the form <code>if cond; statement; end</code>, <code>cond &amp;&amp; statement</code> and <code>!cond || statement</code>. Assignment statements in the latter two syntaxes must be explicitly wrapped in parentheses, e.g. <code>cond &amp;&amp; (x = value)</code>.</li> <li>In Julia, <code>&lt;-</code>, <code>&lt;&lt;-</code> and <code>-&gt;</code> are not assignment operators.</li> <li>Julia’s <code>-&gt;</code> creates an anonymous function, like Python.</li> <li>Julia constructs vectors using brackets. Julia’s <code>[1, 2, 3]</code> is the equivalent of R’s <code>c(1, 2, 3)</code>.</li> <li>Julia’s <a class=\"reference internal\" href=\"../../stdlib/strings/index#Base.*\" title=\"Base.*\"><code>*</code></a> operator can perform matrix multiplication, unlike in R. If <code>A</code> and <code>B</code> are matrices, then <code>A * B</code> denotes a matrix multiplication in Julia, equivalent to R’s <code>A %*% B</code>. In R, this same notation would perform an element-wise (Hadamard) product. To get the element-wise multiplication operation, you need to write <code>A .* B</code> in Julia.</li> <li>Julia performs matrix transposition using the <code>'</code> operator and conjugated transposition using the <code>'</code> operator. Julia’s <code>A.'</code> is therefore equivalent to R’s <code>t(A)</code>.</li> <li>Julia does not require parentheses when writing <code>if</code> statements or <code>for</code>/<code>while</code> loops: use <code>for i in [1, 2, 3]</code> instead of <code>for (i in c(1, 2, 3))</code> and <code>if i == 1</code> instead of <code>if (i == 1)</code>.</li> <li>Julia does not treat the numbers <code>0</code> and <code>1</code> as Booleans. You cannot write <code>if (1)</code> in Julia, because <code>if</code> statements accept only booleans. Instead, you can write <code>if true</code>, <code>if Bool(1)</code>, or <code>if 1==1</code>.</li> <li>Julia does not provide <code>nrow</code> and <code>ncol</code>. Instead, use <code>size(M, 1)</code> for <code>nrow(M)</code> and <code>size(M, 2)</code> for <code>ncol(M)</code>.</li> <li>Julia is careful to distinguish scalars, vectors and matrices. In R, <code>1</code> and <code>c(1)</code> are the same. In Julia, they can not be used interchangeably. One potentially confusing result of this is that <code>x' * y</code> for vectors <code>x</code> and <code>y</code> is a 1-element vector, not a scalar. To get a scalar, use <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.dot\" title=\"Base.dot\"><code>dot(x, y)</code></a>.</li> <li>Julia’s <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.diag\" title=\"Base.diag\"><code>diag()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.diagm\" title=\"Base.diagm\"><code>diagm()</code></a> are not like R’s.</li> <li>Julia cannot assign to the results of function calls on the left hand side of an assignment operation: you cannot write <code>diag(M) = ones(n)</code>.</li> <li>Julia discourages populating the main namespace with functions. Most statistical functionality for Julia is found in <a class=\"reference external\" href=\"http://pkg.julialang.org/\">packages</a> under the <a class=\"reference external\" href=\"https://github.com/JuliaStats\">JuliaStats organization</a>. For example:<ul> <li>Functions pertaining to probability distributions are provided by the <a class=\"reference external\" href=\"https://github.com/JuliaStats/Distributions.jl\">Distributions package</a>.</li> <li>The <a class=\"reference external\" href=\"https://github.com/JuliaStats/DataFrames.jl\">DataFrames package</a> provides data frames.</li> <li>Generalized linear models are provided by the <a class=\"reference external\" href=\"https://github.com/JuliaStats/GLM.jl\">GLM package</a>.</li> </ul> </li> <li>Julia provides tuples and real hash tables, but not R-style lists. When returning multiple items, you should typically use a tuple: instead of <code>list(a = 1, b = 2)</code>, use <code>(1, 2)</code>.</li> <li>Julia encourages users to write their own types, which are easier to use than S3 or S4 objects in R. Julia’s multiple dispatch system means that <code>table(x::TypeA)</code> and <code>table(x::TypeB)</code> act like R’s <code>table.TypeA(x)</code> and <code>table.TypeB(x)</code>.</li> <li>In Julia, values are passed and assigned by reference. If a function modifies an array, the changes will be visible in the caller. This is very different from R and allows new functions to operate on large data structures much more efficiently.</li> <li>In Julia, vectors and matrices are concatenated using <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.hcat\" title=\"Base.hcat\"><code>hcat()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.vcat\" title=\"Base.vcat\"><code>vcat()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.hvcat\" title=\"Base.hvcat\"><code>hvcat()</code></a>, not <code>c</code>, <code>rbind</code> and <code>cbind</code> like in R.</li> <li>In Julia, a range like <code>a:b</code> is not shorthand for a vector like in R, but is a specialized <code>Range</code> that is used for iteration without high memory overhead. To convert a range into a vector, use <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.collect\" title=\"Base.collect\"><code>collect(a:b)</code></a>.</li> <li>Julia’s <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.max\" title=\"Base.max\"><code>max()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.min\" title=\"Base.min\"><code>min()</code></a> are the equivalent of <code>pmax</code> and <code>pmin</code> respectively in R, but both arguments need to have the same dimensions. While <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.maximum\" title=\"Base.maximum\"><code>maximum()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.minimum\" title=\"Base.minimum\"><code>minimum()</code></a> replace <code>max</code> and <code>min</code> in R, there are important differences.</li> <li>Julia’s <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.sum\" title=\"Base.sum\"><code>sum()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.prod\" title=\"Base.prod\"><code>prod()</code></a>, <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.maximum\" title=\"Base.maximum\"><code>maximum()</code></a>, and <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.minimum\" title=\"Base.minimum\"><code>minimum()</code></a> are different from their counterparts in R. They all accept one or two arguments. The first argument is an iterable collection such as an array. If there is a second argument, then this argument indicates the dimensions, over which the operation is carried out. For instance, let <code>A=[[1 2],[3 4]]</code> in Julia and <code>B=rbind(c(1,2),c(3,4))</code> be the same matrix in R. Then <code>sum(A)</code> gives the same result as <code>sum(B)</code>, but <code>sum(A, 1)</code> is a row vector containing the sum over each column and <code>sum(A, 2)</code> is a column vector containing the sum over each row. This contrasts to the behavior of R, where <code>sum(B,1)=11</code> and <code>sum(B,2)=12</code>. If the second argument is a vector, then it specifies all the dimensions over which the sum is performed, e.g., <code>sum(A,[1,2])=10</code>. It should be noted that there is no error checking regarding the second argument.</li> <li>Julia has several functions that can mutate their arguments. For example, it has both <a class=\"reference internal\" href=\"../../stdlib/sort/index#Base.sort\" title=\"Base.sort\"><code>sort()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/sort/index#Base.sort!\" title=\"Base.sort!\"><code>sort!()</code></a>.</li> <li>In R, performance requires vectorization. In Julia, almost the opposite is true: the best performing code is often achieved by using devectorized loops.</li> <li>Julia is eagerly evaluated and does not support R-style lazy evaluation. For most users, this means that there are very few unquoted expressions or column names.</li> <li>Julia does not support the <code>NULL</code> type.</li> <li>Julia lacks the equivalent of R’s <code>assign</code> or <code>get</code>.</li> <li>In Julia, <code>return</code> does not require parentheses.</li> </ul>   <h2 id=\"noteworthy-differences-from-python\">Noteworthy differences from Python</h2> <ul class=\"simple\"> <li>In Julia, a vector of vectors can automatically concatenate into a one-dimensional vector <em>if</em> no explicit element type is specified. For example:<ul> <li>In Julia, <code>[1, [2, 3]]</code> concatenates into <code>[1, 2, 3]</code>, like in R.</li> <li>In Julia, <code>Int[1, Int[2, 3]]</code> will <em>not</em> concatenate, but instead throw an error.</li> <li>In Julia, <code>Any[1, [2,3]]</code> will <em>not</em> concatenate.</li> <li>In Julia, <code>Vector{Int}[[1, 2], [3, 4]]</code> will <em>not</em> concatenate, but produces an object similar to Python’s list of lists. This object is <em>different</em> from a two-dimensional <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a> of <code>Int</code>s.</li> </ul> </li> <li>Julia requires <code>end</code> to end a block. Unlike Python, Julia has no <code>pass</code> keyword.</li> <li>In Julia, indexing of arrays, strings, etc. is 1-based not 0-based.</li> <li>Julia’s slice indexing includes the last element, unlike in Python. <code>a[2:3]</code> in Julia is <code>a[1:3]</code> in Python.</li> <li>Julia does not support negative indexes. In particular, the last element of a list or array is indexed with <code>end</code> in Julia, not <code>-1</code> as in Python.</li> <li>Julia’s list comprehensions do not support the optional <code>if</code> clause that Python has.</li> <li>Julia’s <code>for</code>, <code>if</code>, <code>while</code>, etc. blocks are terminated by the <code>end</code> keyword. Indentation level is not significant as it is in Python.</li> <li>Julia has no line continuation syntax: if, at the end of a line, the input so far is a complete expression, it is considered done; otherwise the input continues. One way to force an expression to continue is to wrap it in parentheses.</li> <li>Julia arrays are column major (Fortran ordered) whereas NumPy arrays are row major (C-ordered) by default. To get optimal performance when looping over arrays, the order of the loops should be reversed in Julia relative to NumPy (see relevant section of <a class=\"reference internal\" href=\"../performance-tips/index#man-performance-tips\"><span>Performance Tips</span></a>).</li> <li>Julia’s updating operators (e.g. <code>+=</code>, <code>-=</code>, ...) are <em>not in-place</em> whereas NumPy’s are. This means <code>A = ones(4); B = A; B += 3</code> doesn’t change values in <code>A</code>, it rather rebinds the name <code>B</code> to the result of the right- hand side <code>B = B + 3</code>, which is a new array. Use <code>B[:] += 3</code>, explicit loops, or <code>InplaceOps.jl</code>.</li> <li>Julia evaluates default values of function arguments every time the method is invoked, unlike in Python where the default values are evaluated only once when the function is defined. For example, the function <code>f(x=rand()) = x</code> returns a new random number every time it is invoked without argument. On the other hand, the function <code>g(x=[1,2]) = push!(x,3)</code> returns <code>[1,2,3]</code> every time it is called as <code>g()</code>.</li> <li>In Julia <code>%</code> is the remainder operator, whereas in Python it is the modulus.</li> </ul>   <h2 id=\"noteworthy-differences-from-c-c\">Noteworthy differences from C/C++</h2> <ul class=\"simple\"> <li>Julia arrays are indexed with square brackets, and can have more than one dimension <code>A[i,j]</code>. This syntax is not just syntactic sugar for a reference to a pointer or address as in C/C++. See the Julia documentation for the syntax for array construction (it has changed between versions).</li> <li>In Julia, indexing of arrays, strings, etc. is 1-based not 0-based.</li> <li>Julia arrays are assigned by reference. After <code>A=B</code>, changing elements of <code>B</code> will modify <code>A</code> as well. Updating operators like <code>+=</code> do not operate in-place, they are equivalent to <code>A = A + B</code> which rebinds the left-hand side to the result of the right-hand side expression.</li> <li>Julia arrays are column major (Fortran ordered) whereas C/C++ arrays are row major ordered by default. To get optimal performance when looping over arrays, the order of the loops should be reversed in Julia relative to C/C++ (see relevant section of <a class=\"reference internal\" href=\"../performance-tips/index#man-performance-tips\"><span>Performance Tips</span></a>).</li> <li>Julia values are passed and assigned by reference. If a function modifies an array, the changes will be visible in the caller.</li> <li>In Julia, whitespace is significant, unlike C/C++, so care must be taken when adding/removing whitespace from a Julia program.</li> <li>In Julia, literal numbers without a decimal point (such as <code>42</code>) create signed integers, of type <code>Int</code>, but literals too large to fit in the machine word size will automatically be promoted to a larger size type, such as <code>Int64</code> (if <code>Int</code> is <code>Int32</code>), <code>Int128</code>, or the arbitrarily large <code>BigInt</code> type. There are no numeric literal suffixes, such as <code>L</code>, <code>LL</code>, <code>U</code>, <code>UL</code>, <code>ULL</code> to indicate unsigned and/or signed vs. unsigned. Decimal literals are always signed, and hexadecimal literals (which start with <code>0x</code> like C/C++), are unsigned. Hexadecimal literals also, unlike C/C++/Java and unlike decimal literals in Julia, have a type based on the <em>length</em> of the literal, including leading 0s. For example, <code>0x0</code> and <code>0x00</code> have type UInt8, <code>0x000</code> and <code>0x0000</code> have type <code>UInt16</code>, then literals with 5 to 8 hex digits have type <code>UInt32</code>, 9 to 16 hex digits type <code>UInt64</code> and 17 to 32 hex digits type <code>UInt128</code>. This needs to be taken into account when defining hexadecimal masks, for example <code>~0xf == 0xf0</code> is very different from <code>~0x000f == 0xfff0</code>. 64 bit <code>Float64</code> and 32 bit <code>Float32</code> bit literals are expressed as <code>1.0</code> and <code>1.0f0</code> respectively. Floating point literals are rounded (and not promoted to the <code>BigFloat</code> type) if they can not be exactly represented. Floating point literals are closer in behavior to C/C++. Octal (prefixed with <code>0o</code>) and binary (prefixed with <code>0b</code>) literals are also treated as unsigned.</li> <li>String literals can be delimited with either <code>\"</code> or <code>\"\"\"</code>, <code>\"\"\"</code> delimited literals can contain <code>\"</code> characters without quoting it like <code>\"\\\"\"</code> String literals can have values of other variables or expressions interpolated into them, indicated by <code>$variablename</code> or <code>$(expression)</code>, which evaluates the variable name or the expression in the context of the function.</li> <li>\n<code>//</code> indicates a <code>Rational</code> number, and not a single-line comment (which is <code>#</code> in Julia)</li> <li>\n<code>#=</code> indicates the start of a multiline comment, and <code>=#</code> ends it.</li> <li>Functions in Julia return values from their last expression(s) or the <code>return</code> keyword. Multiple values can be returned from functions and assigned as tuples, e.g. <code>(a, b) = myfunction()</code> or <code>a, b = myfunction()</code>, instead of having to pass pointers to values as one would have to do in C/C++ (i.e. <code>a = myfunction(&amp;b)</code>.</li> <li>Julia does not require the use of semicolons to end statements. The results of expressions are not automatically printed (except at the interactive prompt, i.e. the REPL), and lines of code do not need to end with semicolons. <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.println\" title=\"Base.println\"><code>println()</code></a> or <a class=\"reference internal\" href=\"../../stdlib/io-network/index#Base.@printf\" title=\"Base.@printf\"><code>@printf()</code></a> can be used to print specific output. In the REPL, <code>;</code> can be used to suppress output. <code>;</code> also has a different meaning within <code>[ ]</code>, something to watch out for. <code>;</code> can be used to separate expressions on a single line, but are not strictly necessary in many cases, and are more an aid to readability.</li> <li>In Julia, the operator <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.%24\" title=\"Base.$\"><code>$</code></a> performs the bitwise XOR operation, i.e. <a class=\"reference internal\" href=\"#\" title=\"Base.^\"><code>^</code></a> in C/C++. Also, the bitwise operators do not have the same precedence as C/++, so parenthesis may be required.</li> <li>Julia’s <a class=\"reference internal\" href=\"#\" title=\"Base.^\"><code>^</code></a> is exponentiation (pow), not bitwise XOR as in C/C++ (use <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.%24\" title=\"Base.$\"><code>$</code></a> in Julia)</li> <li>Julia has two right-shift operators, <code>&gt;&gt;</code> and <code>&gt;&gt;&gt;</code>. <code>&gt;&gt;&gt;</code> performs an arithmetic shift, <code>&gt;&gt;</code> always performs a logical shift, unlike C/C++, where the meaning of <code>&gt;&gt;</code> depends on the type of the value being shifted.</li> <li>Julia’s <code>-&gt;</code> creates an anonymous function, it does not access a member via a pointer.</li> <li>Julia does not require parentheses when writing <code>if</code> statements or <code>for</code>/<code>while</code> loops: use <code>for i in [1, 2, 3]</code> instead of <code>for (int i=1; i &lt;= 3; i++)</code> and <code>if i == 1</code> instead of <code>if (i == 1)</code>.</li> <li>Julia does not treat the numbers <code>0</code> and <code>1</code> as Booleans. You cannot write <code>if (1)</code> in Julia, because <code>if</code> statements accept only booleans. Instead, you can write <code>if true</code>, <code>if Bool(1)</code>, or <code>if 1==1</code>.</li> <li>Julia uses <code>end</code> to denote the end of conditional blocks, like <code>if</code>, loop blocks, like <code>while</code>/<code>for</code>, and functions. In lieu of the one-line <code>if ( cond ) statement</code>, Julia allows statements of the form <code>if cond; statement; end</code>, <code>cond &amp;&amp; statement</code> and <code>!cond || statement</code>. Assignment statements in the latter two syntaxes must be explicitly wrapped in parentheses, e.g. <code>cond &amp;&amp; (x = value)</code>, because of the operator precedence.</li> <li>Julia has no line continuation syntax: if, at the end of a line, the input so far is a complete expression, it is considered done; otherwise the input continues. One way to force an expression to continue is to wrap it in parentheses.</li> <li>Julia macros operate on parsed expressions, rather than the text of the program, which allows them to perform sophisticated transformations of Julia code. Macro names start with the <code>@</code> character, and have both a function-like syntax, <code>@mymacro(arg1, arg2, arg3)</code>, and a statement-like syntax, <code>@mymacro arg1 arg2 arg3</code>. The forms are interchangable; the function-like form is particularly useful if the macro appears within another expression, and is often clearest. The statement-like form is often used to annotate blocks, as in the parallel <code>for</code> construct: <code>@parallel for i in 1:n; #= body =#; end</code>. Where the end of the macro construct may be unclear, use the function-like form.</li> <li>Julia now has an enumeration type, expressed using the macro <code>@enum(name, value1, value2, ...)</code> For example: <code>@enum(Fruit, Banana=1, Apple, Pear)</code>\n</li> <li>By convention, functions that modify their arguments have a <code>!</code> at the end of the name, for example <code>push!</code>.</li> <li>In C++, by default, you have static dispatch, i.e. you need to annotate a function as virtual, in order to have dynamic dispatch. On the other hand, in Julia every method is “virtual” (although it’s more general than that since methods are dispatched on every argument type, not only <code>this</code>, using the most-specific-declaration rule).</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/noteworthy-differences/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/noteworthy-differences/</a>\n  </p>\n</div>\n","manual/faq/index":"<h1 id=\"man-faq\">Frequently Asked Questions</h1>  <h2 id=\"sessions-and-the-repl\">Sessions and the REPL</h2>  <h3 id=\"how-do-i-delete-an-object-in-memory\">How do I delete an object in memory?</h3> <p>Julia does not have an analog of MATLAB’s <code>clear</code> function; once a name is defined in a Julia session (technically, in module <code>Main</code>), it is always present.</p> <p>If memory usage is your concern, you can always replace objects with ones that consume less memory. For example, if <code>A</code> is a gigabyte-sized array that you no longer need, you can free the memory with <code>A = 0</code>. The memory will be released the next time the garbage collector runs; you can force this to happen with <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.gc\" title=\"Base.gc\"><code>gc()</code></a>.</p>   <h3 id=\"how-can-i-modify-the-declaration-of-a-type-immutable-in-my-session\">How can I modify the declaration of a type/immutable in my session?</h3> <p>Perhaps you’ve defined a type and then realize you need to add a new field. If you try this at the REPL, you get the error:</p> <pre data-language=\"julia\">ERROR: invalid redefinition of constant MyType\n</pre> <p>Types in module <code>Main</code> cannot be redefined.</p> <p>While this can be inconvenient when you are developing new code, there’s an excellent workaround. Modules can be replaced by redefining them, and so if you wrap all your new code inside a module you can redefine types and constants. You can’t import the type names into <code>Main</code> and then expect to be able to redefine them there, but you can use the module name to resolve the scope. In other words, while developing you might use a workflow something like this:</p> <pre data-language=\"julia\">include(\"mynewcode.jl\")              # this defines a module MyModule\nobj1 = MyModule.ObjConstructor(a, b)\nobj2 = MyModule.somefunction(obj1)\n# Got an error. Change something in \"mynewcode.jl\"\ninclude(\"mynewcode.jl\")              # reload the module\nobj1 = MyModule.ObjConstructor(a, b) # old objects are no longer valid, must reconstruct\nobj2 = MyModule.somefunction(obj1)   # this time it worked!\nobj3 = MyModule.someotherfunction(obj2, c)\n...\n</pre>    <h2 id=\"functions\">Functions</h2>  <h3 id=\"i-passed-an-argument-x-to-a-function-modified-it-inside-that-function-but-on-the-outside-the-variable-x-is-still-unchanged-why\">I passed an argument <code>x</code> to a function, modified it inside that function, but on the outside, the variable <code>x</code> is still unchanged. Why?</h3> <p>Suppose you call a function like this:</p> <pre data-language=\"julia\">julia&gt; x = 10\njulia&gt; function change_value!(y) # Create a new function\n           y = 17\n       end\njulia&gt; change_value!(x)\njulia&gt; x # x is unchanged!\n10\n</pre> <p>In Julia, any function (including <code>change_value!()</code>) can’t change the binding of a local variable. If <code>x</code> (in the calling scope) is bound to a immutable object (like a real number), you can’t modify the object; likewise, if x is bound in the calling scope to a Dict, you can’t change it to be bound to an ASCIIString.</p> <p>But here is a thing you should pay attention to: suppose <code>x</code> is bound to an Array (or any other mutable type). You cannot “unbind” <code>x</code> from this Array. But, since an Array is a <em>mutable</em> type, you can change its content. For example:</p> <pre data-language=\"julia\">julia&gt; x = [1,2,3]\n3-element Array{Int64,1}:\n1\n2\n3\n\njulia&gt; function change_array!(A) # Create a new function\n           A[1] = 5\n       end\njulia&gt; change_array!(x)\njulia&gt; x\n3-element Array{Int64,1}:\n5\n2\n3\n</pre> <p>Here we created a function <code>change_array!()</code>, that assigns <code>5</code> to the first element of the Array. We passed <code>x</code> (which was previously bound to an Array) to the function. Notice that, after the function call, <code>x</code> is still bound to the same Array, but the content of that Array changed.</p>   <h3 id=\"can-i-use-using-or-import-inside-a-function\">Can I use <code>using</code> or <code>import</code> inside a function?</h3> <p>No, you are not allowed to have a <code>using</code> or <code>import</code> statement inside a function. If you want to import a module but only use its symbols inside a specific function or set of functions, you have two options:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Use <code>import</code>:</p> <pre data-language=\"julia\">import Foo\nfunction bar(...)\n    ... refer to Foo symbols via Foo.baz ...\nend\n</pre> <p>This loads the module <code>Foo</code> and defines a variable <code>Foo</code> that refers to the module, but does not import any of the other symbols from the module into the current namespace. You refer to the <code>Foo</code> symbols by their qualified names <code>Foo.bar</code> etc.</p> </li> <li>\n<p class=\"first\">Wrap your function in a module:</p> <pre data-language=\"julia\">module Bar\nexport bar\nusing Foo\nfunction bar(...)\n    ... refer to Foo.baz as simply baz ....\nend\nend\nusing Bar\n</pre> <p>This imports all the symbols from <code>Foo</code>, but only inside the module <code>Bar</code>.</p> </li> </ol>   <h3 id=\"man-slurping-splatting\">What does the <code>...</code> operator do?</h3>   <h3 id=\"the-two-uses-of-the-operator-slurping-and-splatting\">The two uses of the <code>...</code> operator: slurping and splatting</h3> <p>Many newcomers to Julia find the use of <code>...</code> operator confusing. Part of what makes the <code>...</code> operator confusing is that it means two different things depending on context.</p>   <h3 id=\"combines-many-arguments-into-one-argument-in-function-definitions\">\n<code>...</code> combines many arguments into one argument in function definitions</h3> <p>In the context of function definitions, the <code>...</code> operator is used to combine many different arguments into a single argument. This use of <code>...</code> for combining many different arguments into a single argument is called slurping:</p> <pre data-language=\"julia\">julia&gt; function printargs(args...)\n           @printf(\"%s\\n\", typeof(args))\n           for (i, arg) in enumerate(args)\n               @printf(\"Arg %d = %s\\n\", i, arg)\n           end\n       end\nprintargs (generic function with 1 method)\n\njulia&gt; printargs(1, 2, 3)\n(Int64,Int64,Int64)\nArg 1 = 1\nArg 2 = 2\nArg 3 = 3\n</pre> <p>If Julia were a language that made more liberal use of ASCII characters, the slurping operator might have been written as <code>&lt;-...</code> instead of <code>...</code>.</p>   <h3 id=\"splits-one-argument-into-many-different-arguments-in-function-calls\">\n<code>...</code> splits one argument into many different arguments in function calls</h3> <p>In contrast to the use of the <code>...</code> operator to denote slurping many different arguments into one argument when defining a function, the <code>...</code> operator is also used to cause a single function argument to be split apart into many different arguments when used in the context of a function call. This use of <code>...</code> is called splatting:</p> <pre data-language=\"julia\">julia&gt; function threeargs(a, b, c)\n           @printf(\"a = %s::%s\\n\", a, typeof(a))\n           @printf(\"b = %s::%s\\n\", b, typeof(b))\n           @printf(\"c = %s::%s\\n\", c, typeof(c))\n       end\nthreeargs (generic function with 1 method)\n\njulia&gt; vec = [1, 2, 3]\n3-element Array{Int64,1}:\n 1\n 2\n 3\n\njulia&gt; threeargs(vec...)\na = 1::Int64\nb = 2::Int64\nc = 3::Int64\n</pre> <p>If Julia were a language that made more liberal use of ASCII characters, the splatting operator might have been written as <code>...-&gt;</code> instead of <code>...</code>.</p>    <h2 id=\"types-type-declarations-and-constructors\">Types, type declarations, and constructors</h2>  <h3 id=\"man-type-stable\">What does “type-stable” mean?</h3> <p id=\"what-does-type-stable-mean\">It means that the type of the output is predictable from the types of the inputs. In particular, it means that the type of the output cannot vary depending on the <em>values</em> of the inputs. The following code is <em>not</em> type-stable:</p> <pre data-language=\"julia\">function unstable(flag::Bool)\n    if flag\n        return 1\n    else\n        return 1.0\n    end\nend\n</pre> <p>It returns either an <code>Int</code> or a <code>Float64</code> depending on the value of its argument. Since Julia can’t predict the return type of this function at compile-time, any computation that uses it will have to guard against both types possibly occurring, making generation of fast machine code difficult.</p>   <h3 id=\"man-domain-error\">Why does Julia give a <code>DomainError</code> for certain seemingly-sensible operations?</h3> <p id=\"why-does-julia-give-a-domainerror-for-certain-seemingly-sensible-operations\">Certain operations make mathematical sense but result in errors:</p> <pre data-language=\"julia\">julia&gt; sqrt(-2.0)\nERROR: DomainError\n in sqrt at math.jl:128\n\njulia&gt; 2^-5\nERROR: DomainError\n in power_by_squaring at intfuncs.jl:70\n in ^ at intfuncs.jl:84\n</pre> <p>This behavior is an inconvenient consequence of the requirement for type-stability. In the case of <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sqrt\" title=\"Base.sqrt\"><code>sqrt()</code></a>, most users want <code>sqrt(2.0)</code> to give a real number, and would be unhappy if it produced the complex number <code>1.4142135623730951 + 0.0im</code>. One could write the <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sqrt\" title=\"Base.sqrt\"><code>sqrt()</code></a> function to switch to a complex-valued output only when passed a negative number (which is what <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sqrt\" title=\"Base.sqrt\"><code>sqrt()</code></a> does in some other languages), but then the result would not be <a class=\"reference external\" href=\"#man-type-stable\">type-stable</a> and the <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.sqrt\" title=\"Base.sqrt\"><code>sqrt()</code></a> function would have poor performance.</p> <p>In these and other cases, you can get the result you want by choosing an <em>input type</em> that conveys your willingness to accept an <em>output type</em> in which the result can be represented:</p> <pre data-language=\"julia\">julia&gt; sqrt(-2.0+0im)\n0.0 + 1.4142135623730951im\n\njulia&gt; 2.0^-5\n0.03125\n</pre>   <h3 id=\"why-does-julia-use-native-machine-integer-arithmetic\">Why does Julia use native machine integer arithmetic?</h3> <p>Julia uses machine arithmetic for integer computations. This means that the range of <code>Int</code> values is bounded and wraps around at either end so that adding, subtracting and multiplying integers can overflow or underflow, leading to some results that can be unsettling at first:</p> <pre data-language=\"julia\">julia&gt; typemax(Int)\n9223372036854775807\n\njulia&gt; ans+1\n-9223372036854775808\n\njulia&gt; -ans\n-9223372036854775808\n\njulia&gt; 2*ans\n0\n</pre> <p>Clearly, this is far from the way mathematical integers behave, and you might think it less than ideal for a high-level programming language to expose this to the user. For numerical work where efficiency and transparency are at a premium, however, the alternatives are worse.</p> <p>One alternative to consider would be to check each integer operation for overflow and promote results to bigger integer types such as <code>Int128</code> or <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.BigInt\" title=\"Base.BigInt\"><code>BigInt</code></a> in the case of overflow. Unfortunately, this introduces major overhead on every integer operation (think incrementing a loop counter) – it requires emitting code to perform run-time overflow checks after arithmetic instructions and branches to handle potential overflows. Worse still, this would cause every computation involving integers to be type-unstable. As we mentioned above, <a class=\"reference external\" href=\"#man-type-stable\">type-stability is crucial</a> for effective generation of efficient code. If you can’t count on the results of integer operations being integers, it’s impossible to generate fast, simple code the way C and Fortran compilers do.</p> <p>A variation on this approach, which avoids the appearance of type instability is to merge the <code>Int</code> and <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.BigInt\" title=\"Base.BigInt\"><code>BigInt</code></a> types into a single hybrid integer type, that internally changes representation when a result no longer fits into the size of a machine integer. While this superficially avoids type-instability at the level of Julia code, it just sweeps the problem under the rug by foisting all of the same difficulties onto the C code implementing this hybrid integer type. This approach <em>can</em> be made to work and can even be made quite fast in many cases, but has several drawbacks. One problem is that the in-memory representation of integers and arrays of integers no longer match the natural representation used by C, Fortran and other languages with native machine integers. Thus, to interoperate with those languages, we would ultimately need to introduce native integer types anyway. Any unbounded representation of integers cannot have a fixed number of bits, and thus cannot be stored inline in an array with fixed-size slots – large integer values will always require separate heap-allocated storage. And of course, no matter how clever a hybrid integer implementation one uses, there are always performance traps – situations where performance degrades unexpectedly. Complex representation, lack of interoperability with C and Fortran, the inability to represent integer arrays without additional heap storage, and unpredictable performance characteristics make even the cleverest hybrid integer implementations a poor choice for high-performance numerical work.</p> <p>An alternative to using hybrid integers or promoting to BigInts is to use saturating integer arithmetic, where adding to the largest integer value leaves it unchanged and likewise for subtracting from the smallest integer value. This is precisely what Matlab™ does:</p> <pre data-language=\"julia\">&gt;&gt; int64(9223372036854775807)\n\nans =\n\n  9223372036854775807\n\n&gt;&gt; int64(9223372036854775807) + 1\n\nans =\n\n  9223372036854775807\n\n&gt;&gt; int64(-9223372036854775808)\n\nans =\n\n -9223372036854775808\n\n&gt;&gt; int64(-9223372036854775808) - 1\n\nans =\n\n -9223372036854775808\n</pre> <p>At first blush, this seems reasonable enough since 9223372036854775807 is much closer to 9223372036854775808 than -9223372036854775808 is and integers are still represented with a fixed size in a natural way that is compatible with C and Fortran. Saturated integer arithmetic, however, is deeply problematic. The first and most obvious issue is that this is not the way machine integer arithmetic works, so implementing saturated operations requires emitting instructions after each machine integer operation to check for underflow or overflow and replace the result with <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.typemin\" title=\"Base.typemin\"><code>typemin(Int)</code></a> or <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.typemax\" title=\"Base.typemax\"><code>typemax(Int)</code></a> as appropriate. This alone expands each integer operation from a single, fast instruction into half a dozen instructions, probably including branches. Ouch. But it gets worse – saturating integer arithmetic isn’t associative. Consider this Matlab computation:</p> <pre data-language=\"julia\">&gt;&gt; n = int64(2)^62\n4611686018427387904\n\n&gt;&gt; n + (n - 1)\n9223372036854775807\n\n&gt;&gt; (n + n) - 1\n9223372036854775806\n</pre> <p>This makes it hard to write many basic integer algorithms since a lot of common techniques depend on the fact that machine addition with overflow <em>is</em> associative. Consider finding the midpoint between integer values <code>lo</code> and <code>hi</code> in Julia using the expression <code>(lo + hi) &gt;&gt;&gt; 1</code>:</p> <pre data-language=\"julia\">julia&gt; n = 2^62\n4611686018427387904\n\njulia&gt; (n + 2n) &gt;&gt;&gt; 1\n6917529027641081856\n</pre> <p>See? No problem. That’s the correct midpoint between 2^62 and 2^63, despite the fact that <code>n + 2n</code> is -4611686018427387904. Now try it in Matlab:</p> <pre data-language=\"julia\">&gt;&gt; (n + 2*n)/2\n\nans =\n\n  4611686018427387904\n</pre> <p>Oops. Adding a <code>&gt;&gt;&gt;</code> operator to Matlab wouldn’t help, because saturation that occurs when adding <code>n</code> and <code>2n</code> has already destroyed the information necessary to compute the correct midpoint.</p> <p>Not only is lack of associativity unfortunate for programmers who cannot rely it for techniques like this, but it also defeats almost anything compilers might want to do to optimize integer arithmetic. For example, since Julia integers use normal machine integer arithmetic, LLVM is free to aggressively optimize simple little functions like <code>f(k) = 5k-1</code>. The machine code for this function is just this:</p> <pre data-language=\"julia\">julia&gt; code_native(f,(Int,))\n    .section    __TEXT,__text,regular,pure_instructions\nFilename: none\nSource line: 1\n    push    RBP\n    mov RBP, RSP\nSource line: 1\n    lea RAX, QWORD PTR [RDI + 4*RDI - 1]\n    pop RBP\n    ret\n</pre> <p>The actual body of the function is a single <code>lea</code> instruction, which computes the integer multiply and add at once. This is even more beneficial when <code>f</code> gets inlined into another function:</p> <pre data-language=\"julia\">julia&gt; function g(k,n)\n         for i = 1:n\n           k = f(k)\n         end\n         return k\n       end\ng (generic function with 2 methods)\n\njulia&gt; code_native(g,(Int,Int))\n    .section    __TEXT,__text,regular,pure_instructions\nFilename: none\nSource line: 3\n    push    RBP\n    mov RBP, RSP\n    test    RSI, RSI\n    jle 22\n    mov EAX, 1\nSource line: 3\n    lea RDI, QWORD PTR [RDI + 4*RDI - 1]\n    inc RAX\n    cmp RAX, RSI\nSource line: 2\n    jle -17\nSource line: 5\n    mov RAX, RDI\n    pop RBP\n    ret\n</pre> <p>Since the call to <code>f</code> gets inlined, the loop body ends up being just a single <code>lea</code> instruction. Next, consider what happens if we make the number of loop iterations fixed:</p> <pre data-language=\"julia\">julia&gt; function g(k)\n         for i = 1:10\n           k = f(k)\n         end\n         return k\n       end\ng (generic function with 2 methods)\n\njulia&gt; code_native(g,(Int,))\n    .section    __TEXT,__text,regular,pure_instructions\nFilename: none\nSource line: 3\n    push    RBP\n    mov RBP, RSP\nSource line: 3\n    imul    RAX, RDI, 9765625\n    add RAX, -2441406\nSource line: 5\n    pop RBP\n    ret\n</pre> <p>Because the compiler knows that integer addition and multiplication are associative and that multiplication distributes over addition – neither of which is true of saturating arithmetic – it can optimize the entire loop down to just a multiply and an add. Saturated arithmetic completely defeats this kind of optimization since associativity and distributivity can fail at each loop iteration, causing different outcomes depending on which iteration the failure occurs in. The compiler can unroll the loop, but it cannot algebraically reduce multiple operations into fewer equivalent operations.</p> <p>The most reasonable alternative to having integer arithmetic silently overflow is to do checked arithmetic everywhere, raising errors when adds, subtracts, and multiplies overflow, producing values that are not value-correct. In this <a class=\"reference external\" href=\"http://danluu.com/integer-overflow\">blog post</a>, Dan Luu analyzes this and finds that rather than the trivial cost that this approach should in theory have, it ends up having a substantial cost due to compilers (LLVM and GCC) not gracefully optimizing around the added overflow checks. If this improves in the future, we could consider defaulting to checked integer arithmetic in Julia, but for now, we have to live with the possibility of overflow.</p>    <h2 id=\"faq-packages\">Packages and Modules</h2>  <h3 id=\"packages-and-modules\">What is the difference between “using” and “importall”?</h3> <p>There is only one difference, and on the surface (syntax-wise) it may seem very minor. The difference between <code>using</code> and <code>importall</code> is that with <code>using</code> you need to say <code>function Foo.bar(..</code> to extend module Foo’s function bar with a new method, but with <code>importall</code> or <code>import Foo.bar</code>, you only need to say <code>function bar(...</code> and it automatically extends module Foo’s function bar.</p> <p>If you use <code>importall</code>, then <code>function Foo.bar(...</code> and <code>function bar(...</code> become equivalent. If you use <code>using</code>, then they are different.</p> <p>The reason this is important enough to have been given separate syntax is that you don’t want to accidentally extend a function that you didn’t know existed, because that could easily cause a bug. This is most likely to happen with a method that takes a common type like a string or integer, because both you and the other module could define a method to handle such a common type. If you use <code>importall</code>, then you’ll replace the other module’s implementation of <code>bar(s::AbstractString)</code> with your new implementation, which could easily do something completely different (and break all/many future usages of the other functions in module Foo that depend on calling bar).</p>    <h2 id=\"man-nothing\">Nothingness and missing values</h2>  <h3 id=\"nothingness-and-missing-values\">How does “null” or “nothingness” work in Julia?</h3> <p>Unlike many languages (for example, C and Java), Julia does not have a “null” value. When a reference (variable, object field, or array element) is uninitialized, accessing it will immediately throw an error. This situation can be detected using the <code>isdefined</code> function.</p> <p>Some functions are used only for their side effects, and do not need to return a value. In these cases, the convention is to return the value <code>nothing</code>, which is just a singleton object of type <code>Void</code>. This is an ordinary type with no fields; there is nothing special about it except for this convention, and that the REPL does not print anything for it. Some language constructs that would not otherwise have a value also yield <code>nothing</code>, for example <code>if false; end</code>.</p> <p>For situations where a value exists only sometimes (for example, missing statistical data), it is best to use the <code>Nullable{T}</code> type, which allows specifying the type of a missing value.</p> <p>The empty tuple (<code>()</code>) is another form of nothingness. But, it should not really be thought of as nothing but rather a tuple of zero values.</p> <p>In code written for Julia prior to version 0.4 you may occasionally see <code>None</code>, which is quite different. It is the empty (or “bottom”) type, a type with no values and no subtypes (except itself). This is now written as <code>Union{}</code> (an empty union type). You will generally not need to use this type.</p>    <h2 id=\"memory\">Memory</h2>  <h3 id=\"why-does-x-y-allocate-memory-when-x-and-y-are-arrays\">Why does <code>x += y</code> allocate memory when <code>x</code> and <code>y</code> are arrays?</h3> <p>In julia, <code>x += y</code> gets replaced during parsing by <code>x = x + y</code>. For arrays, this has the consequence that, rather than storing the result in the same location in memory as <code>x</code>, it allocates a new array to store the result.</p> <p>While this behavior might surprise some, the choice is deliberate. The main reason is the presence of <code>immutable</code> objects within julia, which cannot change their value once created. Indeed, a number is an immutable object; the statements <code>x = 5; x += 1</code> do not modify the meaning of <code>5</code>, they modify the value bound to <code>x</code>. For an immutable, the only way to change the value is to reassign it.</p> <p>To amplify a bit further, consider the following function:</p> <pre data-language=\"julia\">function power_by_squaring(x, n::Int)\n    ispow2(n) || error(\"This implementation only works for powers of 2\")\n    while n &gt;= 2\n        x *= x\n        n &gt;&gt;= 1\n    end\n    x\nend\n</pre> <p>After a call like <code>x = 5; y = power_by_squaring(x, 4)</code>, you would get the expected result: <code>x == 5 &amp;&amp; y == 625</code>. However, now suppose that <code>*=</code>, when used with matrices, instead mutated the left hand side. There would be two problems:</p> <ul class=\"simple\"> <li>For general square matrices, <code>A = A*B</code> cannot be implemented without temporary storage: <code>A[1,1]</code> gets computed and stored on the left hand side before you’re done using it on the right hand side.</li> <li>Suppose you were willing to allocate a temporary for the computation (which would eliminate most of the point of making <code>*=</code> work in-place); if you took advantage of the mutability of <code>x</code>, then this function would behave differently for mutable vs. immutable inputs. In particular, for immutable <code>x</code>, after the call you’d have (in general) <code>y != x</code>, but for mutable <code>x</code> you’d have <code>y\n== x</code>.</li> </ul> <p>Because supporting generic programming is deemed more important than potential performance optimizations that can be achieved by other means (e.g., using explicit loops), operators like <code>+=</code> and <code>*=</code> work by rebinding new values.</p>    <h2 id=\"asynchronous-io-and-concurrent-synchronous-writes\">Asynchronous IO and concurrent synchronous writes</h2>  <h3 id=\"why-do-concurrent-writes-to-the-same-stream-result-in-inter-mixed-output\">Why do concurrent writes to the same stream result in inter-mixed output?</h3> <p>While the streaming I/O API is synchronous, the underlying implementation is fully asynchronous.</p> <p>The following:</p> <pre data-language=\"julia\">@sync for i in 1:3\n    @async write(STDOUT, string(i), \" Foo \", \" Bar \")\nend\n</pre> <p>results in:</p> <pre data-language=\"julia\">123 Foo  Foo  Foo  Bar  Bar  Bar\n</pre> <p>This is happening because, while the <code>write</code> call is synchronous, the writing of each argument yields to other tasks while waiting for that part of the I/O to complete.</p> <p><code>print</code> and <code>println</code> “lock” the stream during a call. Consequently changing <code>write</code> to <code>println</code> in the above example results in:</p> <pre data-language=\"julia\">1 Foo  Bar\n2 Foo  Bar\n3 Foo  Bar\n</pre> <p>You can lock your writes with a <code>ReentrantLock</code> like this:</p> <pre data-language=\"julia\">l = ReentrantLock()\n@sync for i in 1:3\n    @async begin\n        lock(l)\n        try\n            write(STDOUT, string(i), \" Foo \", \" Bar \")\n        finally\n            unlock(l)\n        end\n    end\nend\n</pre>    <h2 id=\"julia-releases\">Julia Releases</h2>  <h3 id=\"do-i-want-to-use-a-release-beta-or-nightly-version-of-julia\">Do I want to use a release, beta, or nightly version of Julia?</h3> <p>You may prefer the release version of Julia if you are looking for a stable code base. Releases generally occur every 6 months, giving you a stable platform for writing code.</p> <p>You may prefer the beta version of Julia if you don’t mind being slightly behind the latest bugfixes and changes, but find the slightly faster rate of changes more appealing. Additionally, these binaries are tested before they are published to ensure they are fully functional.</p> <p>You may prefer the nightly version of Julia if you want to take advantage of the latest updates to the language, and don’t mind if the version available today occasionally doesn’t actually work.</p> <p>Finally, you may also consider building Julia from source for yourself. This option is mainly for those individuals who are comfortable at the command line, or interested in learning. If this describes you, you may also be interested in reading our <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/CONTRIBUTING.md\">guidelines for contributing</a>.</p> <p>Links to each of these download types can be found on the download page at <a class=\"reference external\" href=\"http://julialang.org/downloads/\">http://julialang.org/downloads/</a>. Note that not all versions of Julia are available for all platforms.</p>   <h3 id=\"when-are-deprecated-functions-removed\">When are deprecated functions removed?</h3> <p>Deprecated functions are removed after the subsequent release. For example, functions marked as deprecated in the 0.1 release will not be available starting with the 0.2 release.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/faq/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/faq/</a>\n  </p>\n</div>\n","manual/packages/index":"<h1 id=\"man-packages\">Packages</h1> <p>Julia has a built-in package manager for installing add-on functionality written in Julia. It can also install external libraries using your operating system’s standard system for doing so, or by compiling from source. The list of registered Julia packages can be found at <a class=\"reference external\" href=\"http://pkg.julialang.org\">http://pkg.julialang.org</a>. All package manager commands are found in the <a class=\"reference internal\" href=\"../../stdlib/pkg/index#module-Base.Pkg\" title=\"Base.Pkg\"><code>Pkg</code></a> module, included in Julia’s <code>Base</code> install.</p> <p>First we’ll go over the mechanics of the <code>Pkg</code> family of commands and then we’ll provide some guidance on how to get your package registered. Be sure to read the section below on package naming conventions, tagging versions and the importance of a <code>REQUIRE</code> file for when you’re ready to add your code to the curated METADATA repository.</p>  <h2 id=\"package-status\">Package Status</h2> <p>The <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.status\" title=\"Base.Pkg.status\"><code>Pkg.status()</code></a> function prints out a summary of the state of packages you have installed. Initially, you’ll have no packages installed:</p> <pre data-language=\"julia\">julia&gt; Pkg.status()\nINFO: Initializing package repository /Users/stefan/.julia/v0.4\nINFO: Cloning METADATA from git://github.com/JuliaLang/METADATA.jl\nNo packages installed.\n</pre> <p>Your package directory is automatically initialized the first time you run a <a class=\"reference internal\" href=\"../../stdlib/pkg/index#module-Base.Pkg\" title=\"Base.Pkg\"><code>Pkg</code></a> command that expects it to exist – which includes <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.status\" title=\"Base.Pkg.status\"><code>Pkg.status()</code></a>. Here’s an example non-trivial set of required and additional packages:</p> <pre data-language=\"julia\">julia&gt; Pkg.status()\nRequired packages:\n - Distributions                 0.2.8\n - UTF16                         0.2.0\nAdditional packages:\n - NumericExtensions             0.2.17\n - Stats                         0.2.6\n</pre> <p>These packages are all on registered versions, managed by <a class=\"reference internal\" href=\"../../stdlib/pkg/index#module-Base.Pkg\" title=\"Base.Pkg\"><code>Pkg</code></a>. Packages can be in more complicated states, indicated by annotations to the right of the installed package version; we will explain these states and annotations as we encounter them. For programmatic usage, <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.installed\" title=\"Base.Pkg.installed\"><code>Pkg.installed()</code></a> returns a dictionary, mapping installed package names to the version of that package which is installed:</p> <pre data-language=\"julia\">julia&gt; Pkg.installed()\nDict{ASCIIString,VersionNumber} with 4 entries:\n\"Distributions\"     =&gt; v\"0.2.8\"\n\"Stats\"             =&gt; v\"0.2.6\"\n\"UTF16\"             =&gt; v\"0.2.0\"\n\"NumericExtensions\" =&gt; v\"0.2.17\"\n</pre>   <h2 id=\"adding-and-removing-packages\">Adding and Removing Packages</h2> <p>Julia’s package manager is a little unusual in that it is declarative rather than imperative. This means that you tell it what you want and it figures out what versions to install (or remove) to satisfy those requirements optimally – and minimally. So rather than installing a package, you just add it to the list of requirements and then “resolve” what needs to be installed. In particular, this means that if some package had been installed because it was needed by a previous version of something you wanted, and a newer version doesn’t have that requirement anymore, updating will actually remove that package.</p> <p>Your package requirements are in the file <code>~/.julia/v0.4/REQUIRE</code>. You can edit this file by hand and then call <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.resolve\" title=\"Base.Pkg.resolve\"><code>Pkg.resolve()</code></a> to install, upgrade or remove packages to optimally satisfy the requirements, or you can do <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.edit\" title=\"Base.Pkg.edit\"><code>Pkg.edit()</code></a>, which will open <code>REQUIRE</code> in your editor (configured via the <code>EDITOR</code> or <code>VISUAL</code> environment variables), and then automatically call <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.resolve\" title=\"Base.Pkg.resolve\"><code>Pkg.resolve()</code></a> afterwards if necessary. If you only want to add or remove the requirement for a single package, you can also use the non-interactive <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.add\" title=\"Base.Pkg.add\"><code>Pkg.add()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.rm\" title=\"Base.Pkg.rm\"><code>Pkg.rm()</code></a> commands, which add or remove a single requirement to <code>REQUIRE</code> and then call <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.resolve\" title=\"Base.Pkg.resolve\"><code>Pkg.resolve()</code></a>.</p> <p>You can add a package to the list of requirements with the <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.add\" title=\"Base.Pkg.add\"><code>Pkg.add()</code></a> function, and the package and all the packages that it depends on will be installed:</p> <pre data-language=\"julia\">julia&gt; Pkg.status()\nNo packages installed.\n\njulia&gt; Pkg.add(\"Distributions\")\nINFO: Cloning cache of Distributions from git://github.com/JuliaStats/Distributions.jl.git\nINFO: Cloning cache of NumericExtensions from git://github.com/lindahua/NumericExtensions.jl.git\nINFO: Cloning cache of Stats from git://github.com/JuliaStats/Stats.jl.git\nINFO: Installing Distributions v0.2.7\nINFO: Installing NumericExtensions v0.2.17\nINFO: Installing Stats v0.2.6\nINFO: REQUIRE updated.\n\njulia&gt; Pkg.status()\nRequired packages:\n - Distributions                 0.2.7\nAdditional packages:\n - NumericExtensions             0.2.17\n - Stats                         0.2.6\n</pre> <p>What this is doing is first adding <code>Distributions</code> to your <code>~/.julia/v0.4/REQUIRE</code> file:</p> <pre data-language=\"julia\">$ cat ~/.julia/v0.4/REQUIRE\nDistributions\n</pre> <p>It then runs <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.resolve\" title=\"Base.Pkg.resolve\"><code>Pkg.resolve()</code></a> using these new requirements, which leads to the conclusion that the <code>Distributions</code> package should be installed since it is required but not installed. As stated before, you can accomplish the same thing by editing your <code>~/.julia/v0.4/REQUIRE</code> file by hand and then running <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.resolve\" title=\"Base.Pkg.resolve\"><code>Pkg.resolve()</code></a> yourself:</p> <pre data-language=\"julia\">$ echo UTF16 &gt;&gt; ~/.julia/v0.4/REQUIRE\n\njulia&gt; Pkg.resolve()\nINFO: Cloning cache of UTF16 from git://github.com/nolta/UTF16.jl.git\nINFO: Installing UTF16 v0.2.0\n\njulia&gt; Pkg.status()\nRequired packages:\n - Distributions                 0.2.7\n - UTF16                         0.2.0\nAdditional packages:\n - NumericExtensions             0.2.17\n - Stats                         0.2.6\n</pre> <p>This is functionally equivalent to calling <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.add\" title=\"Base.Pkg.add\"><code>Pkg.add(\"UTF16\")</code></a>, except that <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.add\" title=\"Base.Pkg.add\"><code>Pkg.add()</code></a> doesn’t change <code>REQUIRE</code> until <em>after</em> installation has completed, so if there are problems, <code>REQUIRE</code> will be left as it was before calling <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.add\" title=\"Base.Pkg.add\"><code>Pkg.add()</code></a>. The format of the <code>REQUIRE</code> file is described in <a class=\"reference external\" href=\"#man-package-requirements\">Requirements Specification</a>; it allows, among other things, requiring specific ranges of versions of packages.</p> <p>When you decide that you don’t want to have a package around any more, you can use <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.rm\" title=\"Base.Pkg.rm\"><code>Pkg.rm()</code></a> to remove the requirement for it from the <code>REQUIRE</code> file:</p> <pre data-language=\"julia\">julia&gt; Pkg.rm(\"Distributions\")\nINFO: Removing Distributions v0.2.7\nINFO: Removing Stats v0.2.6\nINFO: Removing NumericExtensions v0.2.17\nINFO: REQUIRE updated.\n\njulia&gt; Pkg.status()\nRequired packages:\n - UTF16                         0.2.0\n\njulia&gt; Pkg.rm(\"UTF16\")\nINFO: Removing UTF16 v0.2.0\nINFO: REQUIRE updated.\n\njulia&gt; Pkg.status()\nNo packages installed.\n</pre> <p>Once again, this is equivalent to editing the <code>REQUIRE</code> file to remove the line with each package name on it then running <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.resolve\" title=\"Base.Pkg.resolve\"><code>Pkg.resolve()</code></a> to update the set of installed packages to match. While <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.add\" title=\"Base.Pkg.add\"><code>Pkg.add()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.rm\" title=\"Base.Pkg.rm\"><code>Pkg.rm()</code></a> are convenient for adding and removing requirements for a single package, when you want to add or remove multiple packages, you can call <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.edit\" title=\"Base.Pkg.edit\"><code>Pkg.edit()</code></a> to manually change the contents of <code>REQUIRE</code> and then update your packages accordingly. <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.edit\" title=\"Base.Pkg.edit\"><code>Pkg.edit()</code></a> does not roll back the contents of <code>REQUIRE</code> if <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.resolve\" title=\"Base.Pkg.resolve\"><code>Pkg.resolve()</code></a> fails – rather, you have to run <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.edit\" title=\"Base.Pkg.edit\"><code>Pkg.edit()</code></a> again to fix the files contents yourself.</p> <p>Because the package manager uses git internally to manage the package git repositories, users may run into protocol issues (if behind a firewall, for example), when running <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.add\" title=\"Base.Pkg.add\"><code>Pkg.add()</code></a>. The following command can be run from the command line to tell git to use ‘https’ instead of the ‘git’ protocol when cloning repositories:</p> <pre data-language=\"julia\">git config --global url.\"https://\".insteadOf git://\n</pre>   <h2 id=\"offline-installation-of-packages\">Offline Installation of Packages</h2> <p>For machines with no Internet connection, packages may be installed by copying the package root directory (given by <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.dir\" title=\"Base.Pkg.dir\"><code>Pkg.dir()</code></a>) from a machine with the same operating system and environment.</p> <p><a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.add\" title=\"Base.Pkg.add\"><code>Pkg.add()</code></a> does the following within the package root directory:</p> <ol class=\"arabic simple\"> <li>Adds the name of the package to <code>REQUIRE</code>.</li> <li>Downloads the package to <code>.cache</code>, then copies the package to the package root directory.</li> <li>Recursively performs step 2 against all the packages listed in the package’s <code>REQUIRE</code> file.</li> <li>Runs <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.build\" title=\"Base.Pkg.build\"><code>Pkg.build()</code></a>\n</li> </ol> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Copying installed packages from a different machine is brittle for packages requiring binary external dependencies. Such packages may break due to differences in operating system versions, build environments, and/or absolute path dependencies.</p> </div>   <h2 id=\"installing-unregistered-packages\">Installing Unregistered Packages</h2> <p>Julia packages are simply git repositories, clonable via any of the <a class=\"reference external\" href=\"https://www.kernel.org/pub/software/scm/git/docs/git-clone.html#URLS\">protocols</a> that git supports, and containing Julia code that follows certain layout conventions. Official Julia packages are registered in the <a class=\"reference external\" href=\"https://github.com/JuliaLang/METADATA.jl\">METADATA.jl</a> repository, available at a well-known location <a class=\"footnote-reference\" href=\"#id2\" id=\"id1\">[1]</a>. The <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.add\" title=\"Base.Pkg.add\"><code>Pkg.add()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.rm\" title=\"Base.Pkg.rm\"><code>Pkg.rm()</code></a> commands in the previous section interact with registered packages, but the package manager can install and work with unregistered packages too. To install an unregistered package, use <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.clone\" title=\"Base.Pkg.clone\"><code>Pkg.clone(url)</code></a>, where <code>url</code> is a git URL from which the package can be cloned:</p> <pre data-language=\"julia\">julia&gt; Pkg.clone(\"git://example.com/path/to/Package.jl.git\")\nINFO: Cloning Package from git://example.com/path/to/Package.jl.git\nCloning into 'Package'...\nremote: Counting objects: 22, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 22 (delta 8), reused 22 (delta 8)\nReceiving objects: 100% (22/22), 2.64 KiB, done.\nResolving deltas: 100% (8/8), done.\n</pre> <p>By convention, Julia repository names end with <code>.jl</code> (the additional <code>.git</code> indicates a “bare” git repository), which keeps them from colliding with repositories for other languages, and also makes Julia packages easy to find in search engines. When packages are installed in your <code>.julia/v0.4</code> directory, however, the extension is redundant so we leave it off.</p> <p>If unregistered packages contain a <code>REQUIRE</code> file at the top of their source tree, that file will be used to determine which registered packages the unregistered package depends on, and they will automatically be installed. Unregistered packages participate in the same version resolution logic as registered packages, so installed package versions will be adjusted as necessary to satisfy the requirements of both registered and unregistered packages.</p> <table class=\"docutils footnote\" frame=\"void\" id=\"id2\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[1]</a></td>\n<td>The official set of packages is at <a class=\"reference external\" href=\"https://github.com/JuliaLang/METADATA.jl\">https://github.com/JuliaLang/METADATA.jl</a>, but individuals and organizations can easily use a different metadata repository. This allows control which packages are available for automatic installation. One can allow only audited and approved package versions, and make private packages or forks available. See <a class=\"reference internal\" href=\"#man-custom-metadata\"><span>Custom METADATA</span></a> for details.</td>\n</tr>  </table>   <h2 id=\"updating-packages\">Updating Packages</h2> <p>When package developers publish new registered versions of packages that you’re using, you will, of course, want the new shiny versions. To get the latest and greatest versions of all your packages, just do <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.update\" title=\"Base.Pkg.update\"><code>Pkg.update()</code></a>:</p> <pre data-language=\"julia\">julia&gt; Pkg.update()\nINFO: Updating METADATA...\nINFO: Computing changes...\nINFO: Upgrading Distributions: v0.2.8 =&gt; v0.2.10\nINFO: Upgrading Stats: v0.2.7 =&gt; v0.2.8\n</pre> <p>The first step of updating packages is to pull new changes to <code>~/.julia/v0.4/METADATA</code> and see if any new registered package versions have been published. After this, <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.update\" title=\"Base.Pkg.update\"><code>Pkg.update()</code></a> attempts to update packages that are checked out on a branch and not dirty (i.e. no changes have been made to files tracked by git) by pulling changes from the package’s upstream repository. Upstream changes will only be applied if no merging or rebasing is necessary – i.e. if the branch can be <a class=\"reference external\" href=\"http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging\">“fast-forwarded”</a>. If the branch cannot be fast-forwarded, it is assumed that you’re working on it and will update the repository yourself.</p> <p>Finally, the update process recomputes an optimal set of package versions to have installed to satisfy your top-level requirements and the requirements of “fixed” packages. A package is considered fixed if it is one of the following:</p> <ol class=\"arabic simple\"> <li>\n<strong>Unregistered:</strong> the package is not in <code>METADATA</code> – you installed it with <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.clone\" title=\"Base.Pkg.clone\"><code>Pkg.clone()</code></a>.</li> <li>\n<strong>Checked out:</strong> the package repo is on a development branch.</li> <li>\n<strong>Dirty:</strong> changes have been made to files in the repo.</li> </ol> <p>If any of these are the case, the package manager cannot freely change the installed version of the package, so its requirements must be satisfied by whatever other package versions it picks. The combination of top-level requirements in <code>~/.julia/v0.4/REQUIRE</code> and the requirement of fixed packages are used to determine what should be installed.</p>   <h2 id=\"checkout-pin-and-free\">Checkout, Pin and Free</h2> <p>You may want to use the <code>master</code> version of a package rather than one of its registered versions. There might be fixes or functionality on master that you need that aren’t yet published in any registered versions, or you may be a developer of the package and need to make changes on <code>master</code> or some other development branch. In such cases, you can do <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.checkout\" title=\"Base.Pkg.checkout\"><code>Pkg.checkout(pkg)</code></a> to checkout the <code>master</code> branch of <code>pkg</code> or <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.checkout\" title=\"Base.Pkg.checkout\"><code>Pkg.checkout(pkg,branch)</code></a> to checkout some other branch:</p> <pre data-language=\"julia\">julia&gt; Pkg.add(\"Distributions\")\nINFO: Installing Distributions v0.2.9\nINFO: Installing NumericExtensions v0.2.17\nINFO: Installing Stats v0.2.7\nINFO: REQUIRE updated.\n\njulia&gt; Pkg.status()\nRequired packages:\n - Distributions                 0.2.9\nAdditional packages:\n - NumericExtensions             0.2.17\n - Stats                         0.2.7\n\njulia&gt; Pkg.checkout(\"Distributions\")\nINFO: Checking out Distributions master...\nINFO: No packages to install, update or remove.\n\njulia&gt; Pkg.status()\nRequired packages:\n - Distributions                 0.2.9+             master\nAdditional packages:\n - NumericExtensions             0.2.17\n - Stats                         0.2.7\n</pre> <p>Immediately after installing <code>Distributions</code> with <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.add\" title=\"Base.Pkg.add\"><code>Pkg.add()</code></a> it is on the current most recent registered version – <code>0.2.9</code> at the time of writing this. Then after running <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.checkout\" title=\"Base.Pkg.checkout\"><code>Pkg.checkout(\"Distributions\")</code></a>, you can see from the output of <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.status\" title=\"Base.Pkg.status\"><code>Pkg.status()</code></a> that <code>Distributions</code> is on an unregistered version greater than <code>0.2.9</code>, indicated by the “pseudo-version” number <code>0.2.9+</code>.</p> <p>When you checkout an unregistered version of a package, the copy of the <code>REQUIRE</code> file in the package repo takes precedence over any requirements registered in <code>METADATA</code>, so it is important that developers keep this file accurate and up-to-date, reflecting the actual requirements of the current version of the package. If the <code>REQUIRE</code> file in the package repo is incorrect or missing, dependencies may be removed when the package is checked out. This file is also used to populate newly published versions of the package if you use the API that <a class=\"reference internal\" href=\"../../stdlib/pkg/index#module-Base.Pkg\" title=\"Base.Pkg\"><code>Pkg</code></a> provides for this (described below).</p> <p>When you decide that you no longer want to have a package checked out on a branch, you can “free” it back to the control of the package manager with <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.free\" title=\"Base.Pkg.free\"><code>Pkg.free(pkg)</code></a>:</p> <pre data-language=\"julia\">julia&gt; Pkg.free(\"Distributions\")\nINFO: Freeing Distributions...\nINFO: No packages to install, update or remove.\n\njulia&gt; Pkg.status()\nRequired packages:\n - Distributions                 0.2.9\nAdditional packages:\n - NumericExtensions             0.2.17\n - Stats                         0.2.7\n</pre> <p>After this, since the package is on a registered version and not on a branch, its version will be updated as new registered versions of the package are published.</p> <p>If you want to pin a package at a specific version so that calling <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.update\" title=\"Base.Pkg.update\"><code>Pkg.update()</code></a> won’t change the version the package is on, you can use the <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.pin\" title=\"Base.Pkg.pin\"><code>Pkg.pin()</code></a> function:</p> <pre data-language=\"julia\">julia&gt; Pkg.pin(\"Stats\")\nINFO: Creating Stats branch pinned.47c198b1.tmp\n\njulia&gt; Pkg.status()\nRequired packages:\n - Distributions                 0.2.9\nAdditional packages:\n - NumericExtensions             0.2.17\n - Stats                         0.2.7              pinned.47c198b1.tmp\n</pre> <p>After this, the <code>Stats</code> package will remain pinned at version <code>0.2.7</code> – or more specifically, at commit <code>47c198b1</code>, but since versions are permanently associated a given git hash, this is the same thing. <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.pin\" title=\"Base.Pkg.pin\"><code>Pkg.pin()</code></a> works by creating a throw-away branch for the commit you want to pin the package at and then checking that branch out. By default, it pins a package at the current commit, but you can choose a different version by passing a second argument:</p> <pre data-language=\"julia\">julia&gt; Pkg.pin(\"Stats\",v\"0.2.5\")\nINFO: Creating Stats branch pinned.1fd0983b.tmp\nINFO: No packages to install, update or remove.\n\njulia&gt; Pkg.status()\nRequired packages:\n - Distributions                 0.2.9\nAdditional packages:\n - NumericExtensions             0.2.17\n - Stats                         0.2.5              pinned.1fd0983b.tmp\n</pre> <p>Now the <code>Stats</code> package is pinned at commit <code>1fd0983b</code>, which corresponds to version <code>0.2.5</code>. When you decide to “unpin” a package and let the package manager update it again, you can use <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.free\" title=\"Base.Pkg.free\"><code>Pkg.free()</code></a> like you would to move off of any branch:</p> <pre data-language=\"julia\">julia&gt; Pkg.free(\"Stats\")\nINFO: Freeing Stats...\nINFO: No packages to install, update or remove.\n\njulia&gt; Pkg.status()\nRequired packages:\n - Distributions                 0.2.9\nAdditional packages:\n - NumericExtensions             0.2.17\n - Stats                         0.2.7\n</pre> <p>After this, the <code>Stats</code> package is managed by the package manager again, and future calls to <a class=\"reference internal\" href=\"../../stdlib/pkg/index#Base.Pkg.update\" title=\"Base.Pkg.update\"><code>Pkg.update()</code></a> will upgrade it to newer versions when they are published. The throw-away <code>pinned.1fd0983b.tmp</code> branch remains in your local <code>Stats</code> repo, but since git branches are extremely lightweight, this doesn’t really matter; if you feel like cleaning them up, you can go into the repo and delete those branches <a class=\"footnote-reference\" href=\"#id4\" id=\"id3\">[2]</a>.</p> <table class=\"docutils footnote\" frame=\"void\" id=\"id4\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id3\">[2]</a></td>\n<td>Packages that aren’t on branches will also be marked as dirty if you make changes in the repo, but that’s a less common thing to do.</td>\n</tr>  </table>   <h2 id=\"man-custom-metadata\">Custom METADATA Repository</h2> <p id=\"custom-metadata-repository\">By default, Julia assumes you will be using the <a class=\"reference external\" href=\"https://github.com/JuliaLang/METADATA.jl\">official METADATA.jl</a> repository for downloading and installing packages. You can also provide a different metadata repository location. A common approach is to keep your <code>metadata-v2</code> branch up to date with the Julia official branch and add another branch with your custom packages. You can initialize your local metadata repository using that custom location and branch and then periodically rebase your custom branch with the official <code>metadata-v2</code> branch. In order to use a custom repository and branch, issue the following command:</p> <pre data-language=\"julia\">julia&gt; Pkg.init(\"https://me.example.com/METADATA.jl.git\", \"branch\")\n</pre> <p>The branch argument is optional and defaults to <code>metadata-v2</code>. Once initialized, a file named <code>META_BRANCH</code> in your <code>~/.julia/vX.Y/</code> path will track the branch that your METADATA repository was initialized with. If you want to change branches, you will need to either modify the <code>META_BRANCH</code> file directly (be careful!) or remove the <code>vX.Y</code> directory and re-initialize your METADATA repository using the <code>Pkg.init</code> command.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/packages/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/packages/</a>\n  </p>\n</div>\n","stdlib/numbers/index":"<h1>Numbers</h1>  <h2 id=\"standard-numeric-types\">Standard Numeric Types</h2> <p><code>Bool</code> <code>Int8</code> <code>UInt8</code> <code>Int16</code> <code>UInt16</code> <code>Int32</code> <code>UInt32</code> <code>Int64</code> <code>UInt64</code> <code>Int128</code> <code>UInt128</code> <code>Float16</code> <code>Float32</code> <code>Float64</code> <code>Complex64</code> <code>Complex128</code></p>   <h2 id=\"data-formats\">Data Formats</h2> <dl class=\"function\"> <dt id=\"Base.bin\">\n<code>bin(n[, pad])</code> </dt> <dd>\n<p>Convert an integer to a binary string, optionally specifying a number of digits to pad to.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hex\">\n<code>hex(n[, pad])</code> </dt> <dd>\n<p>Convert an integer to a hexadecimal string, optionally specifying a number of digits to pad to.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.dec\">\n<code>dec(n[, pad])</code> </dt> <dd>\n<p>Convert an integer to a decimal string, optionally specifying a number of digits to pad to.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.oct\">\n<code>oct(n[, pad])</code> </dt> <dd>\n<p>Convert an integer to an octal string, optionally specifying a number of digits to pad to.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.base\">\n<code>base(base, n[, pad])</code> </dt> <dd>\n<p>Convert an integer to a string in the given base, optionally specifying a number of digits to pad to. The base can be specified as either an integer, or as a <code>UInt8</code> array of character values to use as digit symbols.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.digits\">\n<code>digits(n[, base][, pad])</code> </dt> <dd>\n<p>Returns an array of the digits of <code>n</code> in the given base, optionally padded with zeros to a specified size. More significant digits are at higher indexes, such that <code>n == sum([digits[k]*base^(k-1) for k=1:length(digits)])</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.digits!\">\n<code>digits!(array, n[, base])</code> </dt> <dd>\n<p>Fills an array of the digits of <code>n</code> in the given base. More significant digits are at higher indexes. If the array length is insufficient, the least significant digits are filled up to the array length. If the array length is excessive, the excess portion is filled with zeros.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bits\">\n<code>bits(n)</code> </dt> <dd>\n<p>A string giving the literal bit representation of a number.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.parse\">\n<code>parse(type, str[, base])</code> </dt> <dd>\n<p>Parse a string as a number. If the type is an integer type, then a base can be specified (the default is 10). If the type is a floating point type, the string is parsed as a decimal floating point number. If the string does not contain a valid number, an error is raised.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.tryparse\">\n<code>tryparse(type, str[, base])</code> </dt> <dd>\n<p>Like <code>parse</code>, but returns a <code>Nullable</code> of the requested type. The result will be null if the string does not contain a valid number.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.big\">\n<code>big(x)</code> </dt> <dd>\n<p>Convert a number to a maximum precision representation (typically <code>BigInt</code> or <code>BigFloat</code>). See <code>BigFloat</code> for information about some pitfalls with floating-point numbers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.signed\">\n<code>signed(x)</code> </dt> <dd>\n<p>Convert a number to a signed integer. If the argument is unsigned, it is reinterpreted as signed without checking for overflow.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.unsigned\">\n<code>unsigned(x) → Unsigned</code> </dt> <dd>\n<p>Convert a number to an unsigned integer. If the argument is signed, it is reinterpreted as unsigned without checking for negative values.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.float\">\n<code>float(x)</code> </dt> <dd>\n<p>Convert a number, array, or string to a <code>AbstractFloat</code> data type. For numeric data, the smallest suitable <code>AbstractFloat</code> type is used. Converts strings to <code>Float64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.significand\">\n<code>significand(x)</code> </dt> <dd>\n<p>Extract the <code>significand(s)</code> (a.k.a. mantissa), in binary representation, of a floating-point number or array. If <code>x</code> is a non-zero finite number, than the result will be a number of the same type on the interval <span class=\"math\">\\([1,2)\\)</span>. Otherwise <code>x</code> is returned.</p> <pre data-language=\"julia\">julia&gt; significand(15.2)/15.2\n0.125\n\njulia&gt; significand(15.2)*8\n15.2\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.exponent\">\n<code>exponent(x) → Int</code> </dt> <dd>\n<p>Get the exponent of a normalized floating-point number.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.complex\">\n<code>complex(r[, i])</code> </dt> <dd>\n<p>Convert real numbers or arrays to complex. <code>i</code> defaults to zero.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bswap\">\n<code>bswap(n)</code> </dt> <dd>\n<p>Byte-swap an integer</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.num2hex\">\n<code>num2hex(f)</code> </dt> <dd>\n<p>Get a hexadecimal string of the binary representation of a floating point number</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hex2num\">\n<code>hex2num(str)</code> </dt> <dd>\n<p>Convert a hexadecimal string to the floating point number it represents</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hex2bytes\">\n<code>hex2bytes(s::ASCIIString)</code> </dt> <dd>\n<p>Convert an arbitrarily long hexadecimal string to its binary representation. Returns an <code>Array{UInt8,1}</code>, i.e. an array of bytes.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bytes2hex\">\n<code>bytes2hex(bin_arr::Array{UInt8, 1})</code> </dt> <dd>\n<p>Convert an array of bytes to its hexadecimal representation. All characters are in lower-case. Returns an <code>ASCIIString</code>.</p> </dd>\n</dl>   <h2 id=\"general-number-functions-and-constants\">General Number Functions and Constants</h2> <dl class=\"function\"> <dt id=\"Base.one\">\n<code>one(x)</code> </dt> <dd>\n<p>Get the multiplicative identity element for the type of <code>x</code> (<code>x</code> can also specify the type itself). For matrices, returns an identity matrix of the appropriate size and type.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.zero\">\n<code>zero(x)</code> </dt> <dd>\n<p>Get the additive identity element for the type of <code>x</code> (<code>x</code> can also specify the type itself).</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.pi\">\n<code>pi</code> </dt> <dt id=\"Base.π\">\n<code>π</code> </dt> <dd>\n<p>The constant pi</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.im\">\n<code>im</code> </dt> <dd>\n<p>The imaginary unit</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.e\">\n<code>e</code> </dt> <dt id=\"Base.eu\">\n<code>eu</code> </dt> <dd>\n<p>The constant e</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.catalan\">\n<code>catalan</code> </dt> <dd>\n<p>Catalan’s constant</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.γ\">\n<code>γ</code> </dt> <dt id=\"Base.eulergamma\">\n<code>eulergamma</code> </dt> <dd>\n<p>Euler’s constant</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.φ\">\n<code>φ</code> </dt> <dt id=\"Base.golden\">\n<code>golden</code> </dt> <dd>\n<p>The golden ratio</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Inf\">\n<code>Inf</code> </dt> <dd>\n<p>Positive infinity of type <code>Float64</code></p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Inf32\">\n<code>Inf32</code> </dt> <dd>\n<p>Positive infinity of type <code>Float32</code></p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Inf16\">\n<code>Inf16</code> </dt> <dd>\n<p>Positive infinity of type <code>Float16</code></p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.NaN\">\n<code>NaN</code> </dt> <dd>\n<p>A not-a-number value of type <code>Float64</code></p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.NaN32\">\n<code>NaN32</code> </dt> <dd>\n<p>A not-a-number value of type <code>Float32</code></p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.NaN16\">\n<code>NaN16</code> </dt> <dd>\n<p>A not-a-number value of type <code>Float16</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.issubnormal\">\n<code>issubnormal(f) → Bool</code> </dt> <dd>\n<p>Test whether a floating point number is subnormal</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isfinite\">\n<code>isfinite(f) → Bool</code> </dt> <dd>\n<p>Test whether a number is finite</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isinf\">\n<code>isinf(f) → Bool</code> </dt> <dd>\n<p>Test whether a number is infinite</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isnan\">\n<code>isnan(f) → Bool</code> </dt> <dd>\n<p>Test whether a floating point number is not a number (NaN)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.inf\">\n<code>inf(f)</code> </dt> <dd>\n<p>Returns positive infinity of the floating point type <code>f</code> or of the same floating point type as <code>f</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nan\">\n<code>nan(f)</code> </dt> <dd>\n<p>Returns NaN (not-a-number) of the floating point type <code>f</code> or of the same floating point type as <code>f</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nextfloat\">\n<code>nextfloat(f)</code> </dt> <dd>\n<p>Get the next floating point number in lexicographic order</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.prevfloat\">\n<code>prevfloat(f) → AbstractFloat</code> </dt> <dd>\n<p>Get the previous floating point number in lexicographic order</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isinteger\">\n<code>isinteger(x) → Bool</code> </dt> <dd>\n<p>Test whether <code>x</code> or all its elements are numerically equal to some integer</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isreal\">\n<code>isreal(x) → Bool</code> </dt> <dd>\n<p>Test whether <code>x</code> or all its elements are numerically equal to some real number</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Float32\">\n<code>Float32(x[, mode::RoundingMode])</code> </dt> <dd>\n<p>Create a Float32 from <code>x</code>. If <code>x</code> is not exactly representable then <code>mode</code> determines how <code>x</code> is rounded.</p> <pre data-language=\"julia\">julia&gt; Float32(1/3, RoundDown)\n0.3333333f0\n\njulia&gt; Float32(1/3, RoundUp)\n0.33333334f0\n</pre> <p>See <code>get_rounding</code> for available rounding modes.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Float64\">\n<code>Float64(x[, mode::RoundingMode])</code> </dt> <dd>\n<p>Create a Float64 from <code>x</code>. If <code>x</code> is not exactly representable then <code>mode</code> determines how <code>x</code> is rounded.</p> <pre data-language=\"julia\">julia&gt; Float64(pi, RoundDown)\n3.141592653589793\n\njulia&gt; Float64(pi, RoundUp)\n3.1415926535897936\n</pre> <p>See <code>get_rounding</code> for available rounding modes.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.BigInt\">\n<code>BigInt(x)</code> </dt> <dd>\n<p>Create an arbitrary precision integer. <code>x</code> may be an <code>Int</code> (or anything that can be converted to an <code>Int</code>). The usual mathematical operators are defined for this type, and results are promoted to a <code>BigInt</code>.</p> <p>Instances can be constructed from strings via <a class=\"reference internal\" href=\"#Base.parse\" title=\"Base.parse\"><code>parse()</code></a>, or using the <code>big</code> string literal.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.BigFloat\">\n<code>BigFloat(x)</code> </dt> <dd>\n<p>Create an arbitrary precision floating point number. <code>x</code> may be an <code>Integer</code>, a <code>Float64</code> or a <code>BigInt</code>. The usual mathematical operators are defined for this type, and results are promoted to a <code>BigFloat</code>.</p> <p>Note that because decimal literals are converted to floating point numbers when parsed, <code>BigFloat(2.1)</code> may not yield what you expect. You may instead prefer to initialize constants from strings via <a class=\"reference internal\" href=\"#Base.parse\" title=\"Base.parse\"><code>parse()</code></a>, or using the <code>big</code> string literal.</p> <pre data-language=\"julia\">julia&gt; BigFloat(2.1)\n2.100000000000000088817841970012523233890533447265625000000000000000000000000000\n\njulia&gt; big\"2.1\"\n2.099999999999999999999999999999999999999999999999999999999999999999999999999986\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.get_rounding\">\n<code>get_rounding(T)</code> </dt> <dd>\n<p>Get the current floating point rounding mode for type <code>T</code>, controlling the rounding of basic arithmetic functions (<a class=\"reference internal\" href=\"../math/index#Base.+\" title=\"Base.+\"><code>+()</code></a>, <a class=\"reference internal\" href=\"../math/index#Base.-\" title=\"Base.-\"><code>-()</code></a>, <a class=\"reference internal\" href=\"../strings/index#Base.*\" title=\"Base.*\"><code>*()</code></a>, <a class=\"reference internal\" href=\"../math/index#Base./\" title=\"Base./\"><code>/()</code></a> and <a class=\"reference internal\" href=\"../math/index#Base.sqrt\" title=\"Base.sqrt\"><code>sqrt()</code></a>) and type conversion.</p> <p>Valid modes are <code>RoundNearest</code>, <code>RoundToZero</code>, <code>RoundUp</code>, <code>RoundDown</code>, and <code>RoundFromZero</code> (<code>BigFloat</code> only).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.set_rounding\">\n<code>set_rounding(T, mode)</code> </dt> <dd>\n<p>Set the rounding mode of floating point type <code>T</code>, controlling the rounding of basic arithmetic functions (<a class=\"reference internal\" href=\"../math/index#Base.+\" title=\"Base.+\"><code>+()</code></a>, <a class=\"reference internal\" href=\"../math/index#Base.-\" title=\"Base.-\"><code>-()</code></a>, <a class=\"reference internal\" href=\"../strings/index#Base.*\" title=\"Base.*\"><code>*()</code></a>, <a class=\"reference internal\" href=\"../math/index#Base./\" title=\"Base./\"><code>/()</code></a> and <a class=\"reference internal\" href=\"../math/index#Base.sqrt\" title=\"Base.sqrt\"><code>sqrt()</code></a>) and type conversion.</p> <p>Note that this may affect other types, for instance changing the rounding mode of <code>Float64</code> will change the rounding mode of <code>Float32</code>. See <code>get_rounding</code> for available modes</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.with_rounding\">\n<code>with_rounding(f::Function, T, mode)</code> </dt> <dd>\n<p>Change the rounding mode of floating point type <code>T</code> for the duration of <code>f</code>. It is logically equivalent to:</p> <pre data-language=\"julia\">old = get_rounding(T)\nset_rounding(T, mode)\nf()\nset_rounding(T, old)\n</pre> <p>See <code>get_rounding</code> for available rounding modes.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.get_zero_subnormals\">\n<code>get_zero_subnormals() → Bool</code> </dt> <dd>\n<p>Returns <code>false</code> if operations on subnormal floating-point values (“denormals”) obey rules for IEEE arithmetic, and <code>true</code> if they might be converted to zeros.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.set_zero_subnormals\">\n<code>set_zero_subnormals(yes::Bool) → Bool</code> </dt> <dd>\n<p>If <code>yes</code> is <code>false</code>, subsequent floating-point operations follow rules for IEEE arithmetic on subnormal values (“denormals”). Otherwise, floating-point operations are permitted (but not required) to convert subnormal inputs or outputs to zero. Returns <code>true</code> unless <code>yes==true</code> but the hardware does not support zeroing of subnormal numbers.</p> <p><code>set_zero_subnormals(true)</code> can speed up some computations on some hardware. However, it can break identities such as <code>(x-y==0) == (x==y)</code>.</p> </dd>\n</dl>  <h3 id=\"integers\">Integers</h3> <dl class=\"function\"> <dt id=\"Base.count_ones\">\n<code>count_ones(x::Integer) → Integer</code> </dt> <dd>\n<p>Number of ones in the binary representation of <code>x</code>.</p> <pre data-language=\"julia\">julia&gt; count_ones(7)\n3\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.count_zeros\">\n<code>count_zeros(x::Integer) → Integer</code> </dt> <dd>\n<p>Number of zeros in the binary representation of <code>x</code>.</p> <pre data-language=\"julia\">julia&gt; count_zeros(Int32(2 ^ 16 - 1))\n16\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.leading_zeros\">\n<code>leading_zeros(x::Integer) → Integer</code> </dt> <dd>\n<p>Number of zeros leading the binary representation of <code>x</code>.</p> <pre data-language=\"julia\">julia&gt; leading_zeros(Int32(1))\n31\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.leading_ones\">\n<code>leading_ones(x::Integer) → Integer</code> </dt> <dd>\n<p>Number of ones leading the binary representation of <code>x</code>.</p> <pre data-language=\"julia\">julia&gt; leading_ones(UInt32(2 ^ 32 - 2))\n31\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.trailing_zeros\">\n<code>trailing_zeros(x::Integer) → Integer</code> </dt> <dd>\n<p>Number of zeros trailing the binary representation of <code>x</code>.</p> <pre data-language=\"julia\">julia&gt; trailing_zeros(2)\n1\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.trailing_ones\">\n<code>trailing_ones(x::Integer) → Integer</code> </dt> <dd>\n<p>Number of ones trailing the binary representation of <code>x</code>.</p> <pre data-language=\"julia\">julia&gt; trailing_ones(3)\n2\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isprime\">\n<code>isprime(x::Integer) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>x</code> is prime, and <code>false</code> otherwise.</p> <pre data-language=\"julia\">julia&gt; isprime(3)\ntrue\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>isprime(x::BigInt[, reps = 25]) → Bool</code> </dt> <dd>\n<p>Probabilistic primality test. Returns <code>true</code> if <code>x</code> is prime; and <code>false</code> if <code>x</code> is not prime with high probability. The false positive rate is about <code>0.25^reps</code>. <code>reps = 25</code> is considered safe for cryptographic applications (Knuth, Seminumerical Algorithms).</p> <pre data-language=\"julia\">julia&gt; isprime(big(3))\ntrue\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.primes\">\n<code>primes([lo, ]hi)</code> </dt> <dd>\n<p>Returns a collection of the prime numbers (from <code>lo</code>, if specified) up to <code>hi</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.primesmask\">\n<code>primesmask([lo, ]hi)</code> </dt> <dd>\n<p>Returns a prime sieve, as a <code>BitArray</code>, of the positive integers (from <code>lo</code>, if specified) up to <code>hi</code>. Useful when working with either primes or composite numbers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isodd\">\n<code>isodd(x::Integer) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>x</code> is odd (that is, not divisible by 2), and <code>false</code> otherwise.</p> <pre data-language=\"julia\">julia&gt; isodd(9)\ntrue\n\njulia&gt; isodd(10)\nfalse\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.iseven\">\n<code>iseven(x::Integer) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> is <code>x</code> is even (that is, divisible by 2), and <code>false</code> otherwise.</p> <pre data-language=\"julia\">julia&gt; iseven(9)\nfalse\n\njulia&gt; iseven(10)\ntrue\n</pre> </dd>\n</dl>    <h2 id=\"bigfloats\">BigFloats</h2> <p>The <code>BigFloat</code> type implements arbitrary-precision floating-point arithmetic using the <a class=\"reference external\" href=\"http://www.mpfr.org/\">GNU MPFR library</a>.</p> <dl class=\"function\"> <dt id=\"Base.precision\">\n<code>precision(num::AbstractFloat)</code> </dt> <dd>\n<p>Get the precision of a floating point number, as defined by the effective number of bits in the mantissa.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.get_bigfloat_precision\">\n<code>get_bigfloat_precision()</code> </dt> <dd>\n<p>Get the precision (in bits) currently used for <code>BigFloat</code> arithmetic.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.set_bigfloat_precision\">\n<code>set_bigfloat_precision(x::Int64)</code> </dt> <dd>\n<p>Set the precision (in bits) to be used to <code>BigFloat</code> arithmetic.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.with_bigfloat_precision\">\n<code>with_bigfloat_precision(f::Function, precision::Integer)</code> </dt> <dd>\n<p>Change the <code>BigFloat</code> arithmetic precision (in bits) for the duration of <code>f</code>. It is logically equivalent to:</p> <pre data-language=\"julia\">old = get_bigfloat_precision()\nset_bigfloat_precision(precision)\nf()\nset_bigfloat_precision(old)\n</pre> </dd>\n</dl>   <h2 id=\"id1\">Random Numbers</h2> <p id=\"random-numbers\">Random number generation in Julia uses the <a class=\"reference external\" href=\"http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/#dSFMT\">Mersenne Twister library</a> via <code>MersenneTwister</code> objects. Julia has a global RNG, which is used by default. Other RNG types can be plugged in by inheriting the <code>AbstractRNG</code> type; they can then be used to have multiple streams of random numbers. Besides <code>MersenneTwister</code>, Julia also provides the <code>RandomDevice</code> RNG type, which is a wrapper over the OS provided entropy.</p> <p>Most functions related to random generation accept an optional <code>AbstractRNG</code> as the first argument, <code>rng</code> , which defaults to the global one if not provided. Morever, some of them accept optionally dimension specifications <code>dims...</code> (which can be given as a tuple) to generate arrays of random values.</p> <p>A <code>MersenneTwister</code> or <code>RandomDevice</code> RNG can generate random numbers of the following types: <code>Float16</code>, <code>Float32</code>, <code>Float64</code>, <code>Bool</code>, <code>Int8</code>, <code>UInt8</code>, <code>Int16</code>, <code>UInt16</code>, <code>Int32</code>, <code>UInt32</code>, <code>Int64</code>, <code>UInt64</code>, <code>Int128</code>, <code>UInt128</code>, <code>BigInt</code> (or complex numbers of those types). Random floating point numbers are generated uniformly in <span class=\"math\">\\([0, 1)\\)</span>. As <code>BigInt</code> represents unbounded integers, the interval must be specified (e.g. <code>rand(big(1:6))</code>).</p> <dl class=\"function\"> <dt id=\"Base.srand\">\n<code>srand([rng][, seed])</code> </dt> <dd>\n<p>Reseed the random number generator. If a <code>seed</code> is provided, the RNG will give a reproducible sequence of numbers, otherwise Julia will get entropy from the system. For <code>MersenneTwister</code>, the <code>seed</code> may be a non-negative integer, a vector of <code>UInt32</code> integers or a filename, in which case the seed is read from a file. <code>RandomDevice</code> does not support seeding.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.MersenneTwister\">\n<code>MersenneTwister([seed])</code> </dt> <dd>\n<p>Create a <code>MersenneTwister</code> RNG object. Different RNG objects can have their own seeds, which may be useful for generating different streams of random numbers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.RandomDevice\">\n<code>RandomDevice()</code> </dt> <dd>\n<p>Create a <code>RandomDevice</code> RNG object. Two such objects will always generate different streams of random numbers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rand\">\n<code>rand([rng][, S][, dims...])</code> </dt> <dd>\n<p>Pick a random element or array of random elements from the set of values specified by <code>S</code>; <code>S</code> can be</p> <ul class=\"simple\"> <li>an indexable collection (for example <code>1:n</code> or <code>['x','y','z']</code>), or</li> <li>a type: the set of values to pick from is then equivalent to <code>typemin(S):typemax(S)</code> for integers (this is not applicable to <code>BigInt</code>), and to <span class=\"math\">\\([0, 1)\\)</span> for floating point numbers;</li> </ul> <p><code>S</code> defaults to <code>Float64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rand!\">\n<code>rand!([rng, ]A[, coll])</code> </dt> <dd>\n<p>Populate the array <code>A</code> with random values. If the indexable collection <code>coll</code> is specified, the values are picked randomly from <code>coll</code>. This is equivalent to <code>copy!(A, rand(rng, coll, size(A)))</code> or <code>copy!(A, rand(rng, eltype(A), size(A)))</code> but without allocating a new array.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bitrand\">\n<code>bitrand([rng][, dims...])</code> </dt> <dd>\n<p>Generate a <code>BitArray</code> of random boolean values.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.randn\">\n<code>randn([rng][, dims...])</code> </dt> <dd>\n<p>Generate a normally-distributed random number with mean 0 and standard deviation 1. Optionally generate an array of normally-distributed random numbers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.randn!\">\n<code>randn!([rng, ]A::Array{Float64, N})</code> </dt> <dd>\n<p>Fill the array <code>A</code> with normally-distributed (mean 0, standard deviation 1) random numbers. Also see the rand function.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.randexp\">\n<code>randexp([rng][, dims...])</code> </dt> <dd>\n<p>Generate a random number according to the exponential distribution with scale 1. Optionally generate an array of such random numbers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.randexp!\">\n<code>randexp!([rng, ]A::Array{Float64, N})</code> </dt> <dd>\n<p>Fill the array <code>A</code> with random numbers following the exponential distribution (with scale 1).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.randjump\">\n<code>randjump(r::MersenneTwister, jumps[, jumppoly]) → Vector{MersenneTwister}</code> </dt> <dd>\n<p>Create an array of the size <code>jumps</code> of initialized <code>MersenneTwister</code> RNG objects where the first RNG object given as a parameter and following <code>MersenneTwister</code> RNGs in the array initialized such that a state of the RNG object in the array would be moved forward (without generating numbers) from a previous RNG object array element on a particular number of steps encoded by the jump polynomial <code>jumppoly</code>.</p> <p>Default jump polynomial moves forward <code>MersenneTwister</code> RNG state by 10^20 steps.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/numbers/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/numbers/</a>\n  </p>\n</div>\n","stdlib/constants/index":"<h1>Constants</h1> <dl class=\"data\"> <dt id=\"Base.nothing\">\n<code>nothing</code> </dt> <dd>\n<p>The singleton instance of type <code>Void</code>, used by convention when there is no value to return (as in a C <code>void</code> function). Can be converted to an empty <code>Nullable</code> value.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.OS_NAME\">\n<code>OS_NAME</code> </dt> <dd>\n<p>A symbol representing the name of the operating system. Possible values are <code>:Linux</code>, <code>:Darwin</code> (OS X), or <code>:Windows</code>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.ARGS\">\n<code>ARGS</code> </dt> <dd>\n<p>An array of the command line arguments passed to Julia, as strings.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.C_NULL\">\n<code>C_NULL</code> </dt> <dd>\n<p>The C null pointer constant, sometimes used when calling external code.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.CPU_CORES\">\n<code>CPU_CORES</code> </dt> <dd>\n<p>The number of CPU cores in the system.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.WORD_SIZE\">\n<code>WORD_SIZE</code> </dt> <dd>\n<p>Standard word size on the current machine, in bits.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.VERSION\">\n<code>VERSION</code> </dt> <dd>\n<p>An object describing which version of Julia is in use.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.LOAD_PATH\">\n<code>LOAD_PATH</code> </dt> <dd>\n<p>An array of paths (as strings) where the <code>require</code> function looks for code.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.JULIA_HOME\">\n<code>JULIA_HOME</code> </dt> <dd>\n<p>A string containing the full path to the directory containing the <code>julia</code> executable.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.ANY\">\n<code>ANY</code> </dt> <dd>\n<p>Equivalent to <code>Any</code> for dispatch purposes, but signals the compiler to skip code generation specialization for that field</p> </dd>\n</dl> <p>See also:</p> <p><a class=\"reference internal\" href=\"../io-network/index#Base.STDIN\" title=\"Base.STDIN\"><code>STDIN</code></a> <a class=\"reference internal\" href=\"../io-network/index#Base.STDOUT\" title=\"Base.STDOUT\"><code>STDOUT</code></a> <a class=\"reference internal\" href=\"../io-network/index#Base.STDERR\" title=\"Base.STDERR\"><code>STDERR</code></a> <a class=\"reference internal\" href=\"../base/index#Base.ENV\" title=\"Base.ENV\"><code>ENV</code></a> <a class=\"reference internal\" href=\"../io-network/index#Base.ENDIAN_BOM\" title=\"Base.ENDIAN_BOM\"><code>ENDIAN_BOM</code></a> <code>MS_ASYNC</code> <code>MS_INVALIDATE</code> <code>MS_SYNC</code> <code>DL_LOAD_PATH</code> <code>RTLD_DEEPBIND</code> <code>RTLD_LOCAL</code> <code>RTLD_NOLOAD</code> <code>RTLD_LAZY</code> <code>RTLD_NOW</code> <code>RTLD_GLOBAL</code> <code>RTLD_NODELETE</code> <code>RTLD_FIRST</code></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/constants/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/constants/</a>\n  </p>\n</div>\n","stdlib/strings/index":"<h1>Strings</h1> <dl class=\"function\"> <dt id=\"Base.length\">\n<code>length(s)</code> </dt> <dd>\n<p>The number of characters in string <code>s</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sizeof\">\n<code>sizeof(s::AbstractString)</code> </dt> <dd>\n<p>The number of bytes in string <code>s</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.*\">\n<code>*(s, t)</code> </dt> <dd>\n<p>Concatenate strings. The <code>*</code> operator is an alias to this function.</p> <pre data-language=\"julia\">julia&gt; \"Hello \" * \"world\"\n\"Hello world\"\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.^\">\n<code>^(s, n)</code> </dt> <dd>\n<p>Repeat <code>n</code> times the string <code>s</code>. The <code>repeat</code> function is an alias to this operator.</p> <pre data-language=\"julia\">julia&gt; \"Test \"^3\n\"Test Test Test \"\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.string\">\n<code>string(xs...)</code> </dt> <dd>\n<p>Create a string from any values using the <code>print</code> function.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.repr\">\n<code>repr(x)</code> </dt> <dd>\n<p>Create a string from any value using the <code>showall</code> function.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bytestring\">\n<code>bytestring(::Ptr{UInt8}[, length])</code> </dt> <dd>\n<p>Create a string from the address of a C (0-terminated) string encoded in ASCII or UTF-8. A copy is made; the ptr can be safely freed. If <code>length</code> is specified, the string does not have to be 0-terminated.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>bytestring(s)</code> </dt> <dd>\n<p>Convert a string to a contiguous byte array representation appropriate for passing it to C functions. The string will be encoded as either ASCII or UTF-8.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ascii\">\n<code>ascii(::Array{UInt8, 1})</code> </dt> <dd>\n<p>Create an ASCII string from a byte array.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>ascii(s)</code> </dt> <dd>\n<p>Convert a string to a contiguous ASCII string (all characters must be valid ASCII characters).</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>ascii(::Ptr{UInt8}[, length])</code> </dt> <dd>\n<p>Create an ASCII string from the address of a C (0-terminated) string encoded in ASCII. A copy is made; the ptr can be safely freed. If <code>length</code> is specified, the string does not have to be 0-terminated.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.utf8\">\n<code>utf8(::Array{UInt8, 1})</code> </dt> <dd>\n<p>Create a UTF-8 string from a byte array.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>utf8(::Ptr{UInt8}[, length])</code> </dt> <dd>\n<p>Create a UTF-8 string from the address of a C (0-terminated) string encoded in UTF-8. A copy is made; the ptr can be safely freed. If <code>length</code> is specified, the string does not have to be 0-terminated.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>utf8(s)</code> </dt> <dd>\n<p>Convert a string to a contiguous UTF-8 string (all characters must be valid UTF-8 characters).</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>@r_str -&gt; Regex</code> </dt> <dd>\n<p>Construct a regex, such as <code>r\"^[a-z]*$\"</code>. The regex also accepts one or more flags, listed after the ending quote, to change its behaviour:</p> <ul class=\"simple\"> <li>\n<code>i</code> enables case-insensitive matching</li> <li>\n<code>m</code> treats the <code>^</code> and <code>$</code> tokens as matching the start and end of individual lines, as opposed to the whole string.</li> <li>\n<code>s</code> allows the <code>.</code> modifier to match newlines.</li> <li>\n<code>x</code> enables “comment mode”: whitespace is enabled except when escaped with <code>\\</code>, and <code>#</code> is treated as starting a comment.</li> </ul> <p>For example, this regex has all three flags enabled:</p> <pre data-language=\"julia\">julia&gt; match(r\"a+.*b+.*?d$\"ism, \"Goodbye,\\nOh, angry,\\nBad world\\n\")\nRegexMatch(\"angry,\\nBad world\")\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>@html_str -&gt; Docs.HTML</code> </dt> <dd>\n<p>Create an <code>HTML</code> object from a literal string.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>@text_str -&gt; Docs.Text</code> </dt> <dd>\n<p>Create a <code>Text</code> object from a literal string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.normalize_string\">\n<code>normalize_string(s, normalform::Symbol)</code> </dt> <dd>\n<p>Normalize the string <code>s</code> according to one of the four “normal forms” of the Unicode standard: <code>normalform</code> can be <code>:NFC</code>, <code>:NFD</code>, <code>:NFKC</code>, or <code>:NFKD</code>. Normal forms C (canonical composition) and D (canonical decomposition) convert different visually identical representations of the same abstract string into a single canonical form, with form C being more compact. Normal forms KC and KD additionally canonicalize “compatibility equivalents”: they convert characters that are abstractly similar but visually distinct into a single canonical choice (e.g. they expand ligatures into the individual characters), with form KC being more compact.</p> <p>Alternatively, finer control and additional transformations may be be obtained by calling <code>normalize_string(s; keywords...)</code>, where any number of the following boolean keywords options (which all default to <code>false</code> except for <code>compose</code>) are specified:</p> <ul class=\"simple\"> <li>\n<code>compose=false</code>: do not perform canonical composition</li> <li>\n<code>decompose=true</code>: do canonical decomposition instead of canonical composition (<code>compose=true</code> is ignored if present)</li> <li>\n<code>compat=true</code>: compatibility equivalents are canonicalized</li> <li>\n<code>casefold=true</code>: perform Unicode case folding, e.g. for case-insensitive string comparison</li> <li>\n<code>newline2lf=true</code>, <code>newline2ls=true</code>, or <code>newline2ps=true</code>: convert various newline sequences (LF, CRLF, CR, NEL) into a linefeed (LF), line-separation (LS), or paragraph-separation (PS) character, respectively</li> <li>\n<code>stripmark=true</code>: strip diacritical marks (e.g. accents)</li> <li>\n<code>stripignore=true</code>: strip Unicode’s “default ignorable” characters (e.g. the soft hyphen or the left-to-right marker)</li> <li>\n<code>stripcc=true</code>: strip control characters; horizontal tabs and form feeds are converted to spaces; newlines are also converted to spaces unless a newline-conversion flag was specified</li> <li>\n<code>rejectna=true</code>: throw an error if unassigned code points are found</li> <li>\n<code>stable=true</code>: enforce Unicode Versioning Stability</li> </ul> <p>For example, NFKC corresponds to the options <code>compose=true, compat=true, stable=true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.graphemes\">\n<code>graphemes(s) → iterator over substrings of s</code> </dt> <dd>\n<p>Returns an iterator over substrings of <code>s</code> that correspond to the extended graphemes in the string, as defined by Unicode UAX #29. (Roughly, these are what users would perceive as single characters, even though they may contain more than one codepoint; for example a letter combined with an accent mark is a single grapheme.)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isvalid\">\n<code>isvalid(value) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if the given value is valid for its type, which currently can be one of <code>Char</code>, <code>ASCIIString</code>, <code>UTF8String</code>, <code>UTF16String</code>, or <code>UTF32String</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>isvalid(T, value) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if the given value is valid for that type. Types currently can be <code>Char</code>, <code>ASCIIString</code>, <code>UTF8String</code>, <code>UTF16String</code>, or <code>UTF32String</code> Values for <code>Char</code> can be of type <code>Char</code> or <code>UInt32</code> Values for <code>ASCIIString</code> and <code>UTF8String</code> can be of that type, or <code>Vector{UInt8}</code> Values for <code>UTF16String</code> can be <code>UTF16String</code> or <code>Vector{UInt16}</code> Values for <code>UTF32String</code> can be <code>UTF32String</code>, <code>Vector{Char}</code> or <code>Vector{UInt32}</code></p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>isvalid(str, i)</code> </dt> <dd>\n<p>Tells whether index <code>i</code> is valid for the given string</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.is_assigned_char\">\n<code>is_assigned_char(c) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if the given char or integer is an assigned Unicode code point.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ismatch\">\n<code>ismatch(r::Regex, s::AbstractString) → Bool</code> </dt> <dd>\n<p>Test whether a string contains a match of the given regular expression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.match\">\n<code>match(r::Regex, s::AbstractString[, idx::Integer[, addopts]])</code> </dt> <dd>\n<p>Search for the first match of the regular expression <code>r</code> in <code>s</code> and return a <code>RegexMatch</code> object containing the match, or nothing if the match failed. The matching substring can be retrieved by accessing <code>m.match</code> and the captured sequences can be retrieved by accessing <code>m.captures</code> The optional <code>idx</code> argument specifies an index at which to start the search.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eachmatch\">\n<code>eachmatch(r::Regex, s::AbstractString[, overlap::Bool=false])</code> </dt> <dd>\n<p>Search for all matches of a the regular expression <code>r</code> in <code>s</code> and return a iterator over the matches. If overlap is <code>true</code>, the matching sequences are allowed to overlap indices in the original string, otherwise they must be from distinct character ranges.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.matchall\">\n<code>matchall(r::Regex, s::AbstractString[, overlap::Bool=false]) → Vector{AbstractString}</code> </dt> <dd>\n<p>Return a vector of the matching substrings from eachmatch.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lpad\">\n<code>lpad(string, n, p)</code> </dt> <dd>\n<p>Make a string at least <code>n</code> columns wide when printed, by padding on the left with copies of <code>p</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rpad\">\n<code>rpad(string, n, p)</code> </dt> <dd>\n<p>Make a string at least <code>n</code> columns wide when printed, by padding on the right with copies of <code>p</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.search\">\n<code>search(string, chars[, start])</code> </dt> <dd>\n<p>Search for the first occurrence of the given characters within the given string. The second argument may be a single character, a vector or a set of characters, a string, or a regular expression (though regular expressions are only allowed on contiguous strings, such as ASCII or UTF-8 strings). The third argument optionally specifies a starting index. The return value is a range of indexes where the matching sequence is found, such that <code>s[search(s,x)] == x</code>:</p> <p><code>search(string, \"substring\")</code> = <code>start:end</code> such that <code>string[start:end] == \"substring\"</code>, or <code>0:-1</code> if unmatched.</p> <p><code>search(string, 'c')</code> = <code>index</code> such that <code>string[index] == 'c'</code>, or <code>0</code> if unmatched.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rsearch\">\n<code>rsearch(string, chars[, start])</code> </dt> <dd>\n<p>Similar to <code>search</code>, but returning the last occurrence of the given characters within the given string, searching in reverse from <code>start</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.searchindex\">\n<code>searchindex(string, substring[, start])</code> </dt> <dd>\n<p>Similar to <code>search</code>, but return only the start index at which the substring is found, or <code>0</code> if it is not.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rsearchindex\">\n<code>rsearchindex(string, substring[, start])</code> </dt> <dd>\n<p>Similar to <code>rsearch</code>, but return only the start index at which the substring is found, or <code>0</code> if it is not.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.contains\">\n<code>contains(haystack, needle)</code> </dt> <dd>\n<p>Determine whether the second argument is a substring of the first.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reverse\">\n<code>reverse(s::AbstractString) → AbstractString</code> </dt> <dd>\n<p>Reverses a string</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.replace\">\n<code>replace(string, pat, r[, n])</code> </dt> <dd>\n<p>Search for the given pattern <code>pat</code>, and replace each occurrence with <code>r</code>. If <code>n</code> is provided, replace at most <code>n</code> occurrences. As with search, the second argument may be a single character, a vector or a set of characters, a string, or a regular expression. If <code>r</code> is a function, each occurrence is replaced with <code>r(s)</code> where <code>s</code> is the matched substring. If <code>pat</code> is a regular expression and <code>r</code> is a <code>SubstitutionString</code>, then capture group references in <code>r</code> are replaced with the corresponding matched text.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.split\">\n<code>split(string, [chars]; limit=0, keep=true)</code> </dt> <dd>\n<p>Return an array of substrings by splitting the given string on occurrences of the given character delimiters, which may be specified in any of the formats allowed by <code>search</code>‘s second argument (i.e. a single character, collection of characters, string, or regular expression). If <code>chars</code> is omitted, it defaults to the set of all space characters, and <code>keep</code> is taken to be <code>false</code>. The two keyword arguments are optional: they are are a maximum size for the result and a flag determining whether empty fields should be kept in the result.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rsplit\">\n<code>rsplit(string, [chars]; limit=0, keep=true)</code> </dt> <dd>\n<p>Similar to <code>split</code>, but starting from the end of the string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.strip\">\n<code>strip(string[, chars])</code> </dt> <dd>\n<p>Return <code>string</code> with any leading and trailing whitespace removed. If <code>chars</code> (a character, or vector or set of characters) is provided, instead remove characters contained in it.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lstrip\">\n<code>lstrip(string[, chars])</code> </dt> <dd>\n<p>Return <code>string</code> with any leading whitespace removed. If <code>chars</code> (a character, or vector or set of characters) is provided, instead remove characters contained in it.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rstrip\">\n<code>rstrip(string[, chars])</code> </dt> <dd>\n<p>Return <code>string</code> with any trailing whitespace removed. If <code>chars</code> (a character, or vector or set of characters) is provided, instead remove characters contained in it.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.startswith\">\n<code>startswith(string, prefix | chars)</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>string</code> starts with <code>prefix</code>. If the second argument is a vector or set of characters, tests whether the first character of <code>string</code> belongs to that set.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.endswith\">\n<code>endswith(string, suffix | chars)</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>string</code> ends with <code>suffix</code>. If the second argument is a vector or set of characters, tests whether the last character of <code>string</code> belongs to that set.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.uppercase\">\n<code>uppercase(string)</code> </dt> <dd>\n<p>Returns <code>string</code> with all characters converted to uppercase.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lowercase\">\n<code>lowercase(string)</code> </dt> <dd>\n<p>Returns <code>string</code> with all characters converted to lowercase.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ucfirst\">\n<code>ucfirst(string)</code> </dt> <dd>\n<p>Returns <code>string</code> with the first character converted to uppercase.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lcfirst\">\n<code>lcfirst(string)</code> </dt> <dd>\n<p>Returns <code>string</code> with the first character converted to lowercase.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.join\">\n<code>join(strings, delim[, last])</code> </dt> <dd>\n<p>Join an array of <code>strings</code> into a single string, inserting the given delimiter between adjacent strings. If <code>last</code> is given, it will be used instead of <code>delim</code> between the last two strings. For example, <code>join([\"apples\", \"bananas\", \"pineapples\"], \", \", \" and \") == \"apples, bananas and pineapples\"</code>.</p> <p><code>strings</code> can be any iterable over elements <code>x</code> which are convertible to strings via <code>print(io::IOBuffer, x)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.chop\">\n<code>chop(string)</code> </dt> <dd>\n<p>Remove the last character from a string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.chomp\">\n<code>chomp(string)</code> </dt> <dd>\n<p>Remove a trailing newline from a string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ind2chr\">\n<code>ind2chr(string, i)</code> </dt> <dd>\n<p>Convert a byte index to a character index.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.chr2ind\">\n<code>chr2ind(string, i)</code> </dt> <dd>\n<p>Convert a character index to a byte index.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nextind\">\n<code>nextind(str, i)</code> </dt> <dd>\n<p>Get the next valid string index after <code>i</code>. Returns a value greater than <code>endof(str)</code> at or after the end of the string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.prevind\">\n<code>prevind(str, i)</code> </dt> <dd>\n<p>Get the previous valid string index before <code>i</code>. Returns a value less than <code>1</code> at the beginning of the string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.randstring\">\n<code>randstring([rng, ]len=8)</code> </dt> <dd>\n<p>Create a random ASCII string of length <code>len</code>, consisting of upper- and lower-case letters and the digits 0-9. The optional <code>rng</code> argument specifies a random number generator, see <a class=\"reference internal\" href=\"../numbers/index#random-numbers\"><span>Random Numbers</span></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.charwidth\">\n<code>charwidth(c)</code> </dt> <dd>\n<p>Gives the number of columns needed to print a character.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.strwidth\">\n<code>strwidth(s)</code> </dt> <dd>\n<p>Gives the number of columns needed to print a string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isalnum\">\n<code>isalnum(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character is alphanumeric, or whether this is true for all elements of a string. A character is classified as alphabetic if it belongs to the Unicode general category Letter or Number, i.e. a character whose category code begins with ‘L’ or ‘N’.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isalpha\">\n<code>isalpha(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character is alphabetic, or whether this is true for all elements of a string. A character is classified as alphabetic if it belongs to the Unicode general category Letter, i.e. a character whose category code begins with ‘L’.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isascii\">\n<code>isascii(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character belongs to the ASCII character set, or whether this is true for all elements of a string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.iscntrl\">\n<code>iscntrl(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character is a control character, or whether this is true for all elements of a string. Control characters are the non-printing characters of the Latin-1 subset of Unicode.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isdigit\">\n<code>isdigit(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character is a numeric digit (0-9), or whether this is true for all elements of a string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isgraph\">\n<code>isgraph(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character is printable, and not a space, or whether this is true for all elements of a string. Any character that would cause a printer to use ink should be classified with <code>isgraph(c)==true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.islower\">\n<code>islower(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character is a lowercase letter, or whether this is true for all elements of a string. A character is classified as lowercase if it belongs to Unicode category Ll, Letter: Lowercase.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isnumber\">\n<code>isnumber(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character is numeric, or whether this is true for all elements of a string. A character is classified as numeric if it belongs to the Unicode general category Number, i.e. a character whose category code begins with ‘N’.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isprint\">\n<code>isprint(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character is printable, including spaces, but not a control character. For strings, tests whether this is true for all elements of the string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ispunct\">\n<code>ispunct(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character belongs to the Unicode general category Punctuation, i.e. a character whose category code begins with ‘P’. For strings, tests whether this is true for all elements of the string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isspace\">\n<code>isspace(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character is any whitespace character. Includes ASCII characters ‘\\t’, ‘\\n’, ‘\\v’, ‘\\f’, ‘\\r’, and ‘ ‘, Latin-1 character U+0085, and characters in Unicode category Zs. For strings, tests whether this is true for all elements of the string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isupper\">\n<code>isupper(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character is an uppercase letter, or whether this is true for all elements of a string. A character is classified as uppercase if it belongs to Unicode category Lu, Letter: Uppercase, or Lt, Letter: Titlecase.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isxdigit\">\n<code>isxdigit(c::Union{Char, AbstractString}) → Bool</code> </dt> <dd>\n<p>Tests whether a character is a valid hexadecimal digit, or whether this is true for all elements of a string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.symbol\">\n<code>symbol(x...) → Symbol</code> </dt> <dd>\n<p>Create a <code>Symbol</code> by concatenating the string representations of the arguments together.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.escape_string\">\n<code>escape_string(str::AbstractString) → AbstractString</code> </dt> <dd>\n<p>General escaping of traditional C and Unicode escape sequences. See <a class=\"reference internal\" href=\"../io-network/index#Base.print_escaped\" title=\"Base.print_escaped\"><code>print_escaped()</code></a> for more general escaping.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.unescape_string\">\n<code>unescape_string(s::AbstractString) → AbstractString</code> </dt> <dd>\n<p>General unescaping of traditional C and Unicode escape sequences. Reverse of <a class=\"reference internal\" href=\"#Base.escape_string\" title=\"Base.escape_string\"><code>escape_string()</code></a>. See also <a class=\"reference internal\" href=\"../io-network/index#Base.print_unescaped\" title=\"Base.print_unescaped\"><code>print_unescaped()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.utf16\">\n<code>utf16(s)</code> </dt> <dd>\n<p>Create a UTF-16 string from a byte array, array of <code>UInt16</code>, or any other string type. (Data must be valid UTF-16. Conversions of byte arrays check for a byte-order marker in the first two bytes, and do not include it in the resulting string.)</p> <p>Note that the resulting <code>UTF16String</code> data is terminated by the NUL codepoint (16-bit zero), which is not treated as a character in the string (so that it is mostly invisible in Julia); this allows the string to be passed directly to external functions requiring NUL-terminated data. This NUL is appended automatically by the <code>utf16(s)</code> conversion function. If you have a <code>UInt16</code> array <code>A</code> that is already NUL-terminated valid UTF-16 data, then you can instead use <code>UTF16String(A)</code> to construct the string without making a copy of the data and treating the NUL as a terminator rather than as part of the string.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>utf16(::Union{Ptr{UInt16}, Ptr{Int16}}[, length])</code> </dt> <dd>\n<p>Create a string from the address of a NUL-terminated UTF-16 string. A copy is made; the pointer can be safely freed. If <code>length</code> is specified, the string does not have to be NUL-terminated.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.utf32\">\n<code>utf32(s)</code> </dt> <dd>\n<p>Create a UTF-32 string from a byte array, array of <code>Char</code> or <code>UInt32</code>, or any other string type. (Conversions of byte arrays check for a byte-order marker in the first four bytes, and do not include it in the resulting string.)</p> <p>Note that the resulting <code>UTF32String</code> data is terminated by the NUL codepoint (32-bit zero), which is not treated as a character in the string (so that it is mostly invisible in Julia); this allows the string to be passed directly to external functions requiring NUL-terminated data. This NUL is appended automatically by the <code>utf32(s)</code> conversion function. If you have a <code>Char</code> or <code>UInt32</code> array <code>A</code> that is already NUL-terminated UTF-32 data, then you can instead use <code>UTF32String(A)</code> to construct the string without making a copy of the data and treating the NUL as a terminator rather than as part of the string.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>utf32(::Union{Ptr{Char}, Ptr{UInt32}, Ptr{Int32}}[, length])</code> </dt> <dd>\n<p>Create a string from the address of a NUL-terminated UTF-32 string. A copy is made; the pointer can be safely freed. If <code>length</code> is specified, the string does not have to be NUL-terminated.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.wstring\">\n<code>wstring(s)</code> </dt> <dd>\n<p>This is a synonym for either <code>utf32(s)</code> or <code>utf16(s)</code>, depending on whether <code>Cwchar_t</code> is 32 or 16 bits, respectively. The synonym <code>WString</code> for <code>UTF32String</code> or <code>UTF16String</code> is also provided.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/strings/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/strings/</a>\n  </p>\n</div>\n","stdlib/punctuation/index":"<h1>Punctuation</h1> <p>Extended documentation for mathematical symbols &amp; functions is <a class=\"reference internal\" href=\"../math/index#mathematical-operators\"><span>here</span></a>.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">symbol</th> <th class=\"head\">meaning</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>@m</code></td> <td>invoke macro <code>m</code>; followed by space-separated expressions</td> </tr> <tr class=\"row-odd\">\n<td><code>!</code></td> <td>prefix “not” operator</td> </tr> <tr class=\"row-even\">\n<td><code>a!( )</code></td> <td>at the end of a function name, <code>!</code> indicates that a function modifies its argument(s)</td> </tr> <tr class=\"row-odd\">\n<td><code>#</code></td> <td>begin single line comment</td> </tr> <tr class=\"row-even\">\n<td><code>#=</code></td> <td>begin multi-line comment (these are nestable)</td> </tr> <tr class=\"row-odd\">\n<td><code>=#</code></td> <td>end multi-line comment</td> </tr> <tr class=\"row-even\">\n<td><code>$</code></td> <td>bitwise xor operator, string and expression interpolation</td> </tr> <tr class=\"row-odd\">\n<td><code>%</code></td> <td>remainder operator</td> </tr> <tr class=\"row-even\">\n<td><code>^</code></td> <td>exponent operator</td> </tr> <tr class=\"row-odd\">\n<td><code>&amp;</code></td> <td>bitwise and</td> </tr> <tr class=\"row-even\">\n<td><code>&amp;&amp;</code></td> <td>short-circuiting boolean and</td> </tr> <tr class=\"row-odd\">\n<td><code>|</code></td> <td>bitwise or</td> </tr> <tr class=\"row-even\">\n<td><code>||</code></td> <td>short-circuiting boolean or</td> </tr> <tr class=\"row-odd\">\n<td><code>*</code></td> <td>multiply, or matrix multiply</td> </tr> <tr class=\"row-even\">\n<td><code>()</code></td> <td>the empty tuple</td> </tr> <tr class=\"row-odd\">\n<td><code>~</code></td> <td>bitwise not operator</td> </tr> <tr class=\"row-even\">\n<td><code>\\</code></td> <td>backslash operator</td> </tr> <tr class=\"row-odd\">\n<td><code>'</code></td> <td>complex transpose operator A<sup>H</sup>\n</td> </tr> <tr class=\"row-even\">\n<td><code>a[]</code></td> <td>array indexing</td> </tr> <tr class=\"row-odd\">\n<td><code>[,]</code></td> <td>vertical concatenation</td> </tr> <tr class=\"row-even\">\n<td><code>[;]</code></td> <td>also vertical concatenation</td> </tr> <tr class=\"row-odd\">\n<td><code>[  ]</code></td> <td>with space-separated expressions, horizontal concatenation</td> </tr> <tr class=\"row-even\">\n<td><code>T{ }</code></td> <td>parametric type instantiation</td> </tr> <tr class=\"row-odd\">\n<td><code>{  }</code></td> <td>construct a cell array (deprecated in 0.4 in favor of <code>Any[]</code>)</td> </tr> <tr class=\"row-even\">\n<td><code>;</code></td> <td>statement separator</td> </tr> <tr class=\"row-odd\">\n<td><code>,</code></td> <td>separate function arguments or tuple components</td> </tr> <tr class=\"row-even\">\n<td><code>?</code></td> <td>3-argument conditional operator (conditional ? if_true : if_false)</td> </tr> <tr class=\"row-odd\">\n<td><code>\"\"</code></td> <td>delimit string literals</td> </tr> <tr class=\"row-even\">\n<td><code>''</code></td> <td>delimit character literals</td> </tr> <tr class=\"row-odd\">\n<td><code>` `</code></td> <td>delimit external process (command) specifications</td> </tr> <tr class=\"row-even\">\n<td><code>...</code></td> <td>splice arguments into a function call or declare a varargs function or type</td> </tr> <tr class=\"row-odd\">\n<td><code>.</code></td> <td>access named fields in objects or names inside modules, also prefixes elementwise operators</td> </tr> <tr class=\"row-even\">\n<td><code>a:b</code></td> <td>range a, a+1, a+2, ..., b</td> </tr> <tr class=\"row-odd\">\n<td><code>a:s:b</code></td> <td>range a, a+s, a+2s, ..., b</td> </tr> <tr class=\"row-even\">\n<td><code>:</code></td> <td>index an entire dimension (1:end)</td> </tr> <tr class=\"row-odd\">\n<td><code>::</code></td> <td>type annotation, depending on context</td> </tr> <tr class=\"row-even\">\n<td><code>:( )</code></td> <td>quoted expression</td> </tr> <tr class=\"row-odd\">\n<td><code>:a</code></td> <td>symbol a</td> </tr>  </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/punctuation/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/punctuation/</a>\n  </p>\n</div>\n","manual/performance-tips/index":"<h1 id=\"man-performance-tips\">Performance Tips</h1> <p>In the following sections, we briefly go through a few techniques that can help make your Julia code run as fast as possible.</p>  <h2 id=\"avoid-global-variables\">Avoid global variables</h2> <p>A global variable might have its value, and therefore its type, change at any point. This makes it difficult for the compiler to optimize code using global variables. Variables should be local, or passed as arguments to functions, whenever possible.</p> <p>Any code that is performance critical or being benchmarked should be inside a function.</p> <p>We find that global names are frequently constants, and declaring them as such greatly improves performance:</p> <pre data-language=\"julia\">const DEFAULT_VAL = 0\n</pre> <p>Uses of non-constant globals can be optimized by annotating their types at the point of use:</p> <pre data-language=\"julia\">global x\ny = f(x::Int + 1)\n</pre> <p>Writing functions is better style. It leads to more reusable code and clarifies what steps are being done, and what their inputs and outputs are.</p> <p><strong>NOTE:</strong> All code in the REPL is evaluated in global scope, so a variable defined and assigned at toplevel will be a <strong>global</strong> variable.</p> <p>In the following REPL session:</p> <pre data-language=\"julia\">julia&gt; x = 1.0\n</pre> <p>is equivalent to:</p> <pre data-language=\"julia\">julia&gt; global x = 1.0\n</pre> <p>so all the performance issues discussed previously apply.</p>   <h2 id=\"measure-performance-with-time-and-pay-attention-to-memory-allocation\">Measure performance with @time and pay attention to memory allocation</h2> <p>The most useful tool for measuring performance is the <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@time\" title=\"Base.@time\"><code>@time</code></a> macro. The following example illustrates good working style:</p> <pre data-language=\"julia\">julia&gt; function f(n)\n           s = 0\n           for i = 1:n\n               s += i/2\n           end\n           s\n       end\nf (generic function with 1 method)\n\njulia&gt; @time f(1)\nelapsed time: 0.004710563 seconds (93504 bytes allocated)\n0.5\n\njulia&gt; @time f(10^6)\nelapsed time: 0.04123202 seconds (32002136 bytes allocated)\n2.5000025e11\n</pre> <p>On the first call (<code>@time f(1)</code>), <code>f</code> gets compiled. (If you’ve not yet used <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@time\" title=\"Base.@time\"><code>@time</code></a> in this session, it will also compile functions needed for timing.) You should not take the results of this run seriously. For the second run, note that in addition to reporting the time, it also indicated that a large amount of memory was allocated. This is the single biggest advantage of <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@time\" title=\"Base.@time\"><code>@time</code></a> vs. functions like <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.tic\" title=\"Base.tic\"><code>tic()</code></a> and <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.toc\" title=\"Base.toc\"><code>toc()</code></a>, which only report time.</p> <p>Unexpected memory allocation is almost always a sign of some problem with your code, usually a problem with type-stability. Consequently, in addition to the allocation itself, it’s very likely that the code generated for your function is far from optimal. Take such indications seriously and follow the advice below.</p> <p>As a teaser, note that an improved version of this function allocates no memory (except to pass back the result back to the REPL) and has an order of magnitude faster execution after the first call:</p> <pre data-language=\"julia\">julia&gt; @time f_improved(1)   # first call\nelapsed time: 0.003702172 seconds (78944 bytes allocated)\n0.5\n\njulia&gt; @time f_improved(10^6)\nelapsed time: 0.004313644 seconds (112 bytes allocated)\n2.5000025e11\n</pre> <p>Below you’ll learn how to spot the problem with <code>f</code> and how to fix it.</p> <p>In some situations, your function may need to allocate memory as part of its operation, and this can complicate the simple picture above. In such cases, consider using one of the <a class=\"reference internal\" href=\"#man-performance-tools\"><span>tools</span></a> below to diagnose problems, or write a version of your function that separates allocation from its algorithmic aspects (see <a class=\"reference internal\" href=\"#man-preallocation\"><span>Pre-allocating outputs</span></a>).</p>   <h2 id=\"man-performance-tools\">Tools</h2> <p id=\"tools\">Julia and its package ecosystem includes tools that may help you diagnose problems and improve the performance of your code:</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"../../stdlib/profile/index#stdlib-profiling\"><span>Profiling</span></a> allows you to measure the performance of your running code and identify lines that serve as bottlenecks. For complex projects, the <a class=\"reference external\" href=\"https://github.com/timholy/ProfileView.jl\">ProfileView</a> package can help you visualize your profiling results.</li> <li>Unexpectedly-large memory allocations—as reported by <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@time\" title=\"Base.@time\"><code>@time</code></a>, <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@allocated\" title=\"Base.@allocated\"><code>@allocated</code></a>, or the profiler (through calls to the garbage-collection routines)—hint that there might be issues with your code. If you don’t see another reason for the allocations, suspect a type problem. You can also start Julia with the <code>--track-allocation=user</code> option and examine the resulting <code>*.mem</code> files to see information about where those allocations occur. See <a class=\"reference internal\" href=\"../profile/index#man-track-allocation\"><span>Memory allocation analysis</span></a>.</li> <li>\n<code>@code_warntype</code> generates a representation of your code that can be helpful in finding expressions that result in type uncertainty. See <a class=\"reference internal\" href=\"#man-code-warntype\"><span>@code_warntype</span></a> below.</li> <li>The <a class=\"reference external\" href=\"https://github.com/tonyhffong/Lint.jl\">Lint</a> and <a class=\"reference external\" href=\"https://github.com/astrieanna/TypeCheck.jl\">TypeCheck</a> packages can also warn you of certain types of programming errors.</li> </ul>   <h2 id=\"avoid-containers-with-abstract-type-parameters\">Avoid containers with abstract type parameters</h2> <p>When working with parameterized types, including arrays, it is best to avoid parameterizing with abstract types where possible.</p> <p>Consider the following:</p> <pre data-language=\"julia\">a = Real[]    # typeof(a) = Array{Real,1}\nif (f = rand()) &lt; .8\n    push!(a, f)\nend\n</pre> <p>Because <code>a</code> is a an array of abstract type <code>Real</code>, it must be able to hold any Real value. Since <code>Real</code> objects can be of arbitrary size and structure, <code>a</code> must be represented as an array of pointers to individually allocated <code>Real</code> objects. Because <code>f</code> will always be a <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a>, we should instead, use:</p> <pre data-language=\"julia\">a = Float64[] # typeof(a) = Array{Float64,1}\n</pre> <p>which will create a contiguous block of 64-bit floating-point values that can be manipulated efficiently.</p> <p>See also the discussion under <a class=\"reference internal\" href=\"../types/index#man-parametric-types\"><span>Parametric Types</span></a>.</p>   <h2 id=\"type-declarations\">Type declarations</h2> <p>In many languages with optional type declarations, adding declarations is the principal way to make code run faster. This is <em>not</em> the case in Julia. In Julia, the compiler generally knows the types of all function arguments, local variables, and expressions. However, there are a few specific instances where declarations are helpful.</p>  <h3 id=\"man-abstract-fields\">Avoid fields with abstract type</h3> <p id=\"avoid-fields-with-abstract-type\">Types can be declared without specifying the types of their fields:</p> <pre data-language=\"julia\">julia&gt; type MyAmbiguousType\n           a\n       end\n</pre> <p>This allows <code>a</code> to be of any type. This can often be useful, but it does have a downside: for objects of type <code>MyAmbiguousType</code>, the compiler will not be able to generate high-performance code. The reason is that the compiler uses the types of objects, not their values, to determine how to build code. Unfortunately, very little can be inferred about an object of type <code>MyAmbiguousType</code>:</p> <pre data-language=\"julia\">julia&gt; b = MyAmbiguousType(\"Hello\")\nMyAmbiguousType(\"Hello\")\n\njulia&gt; c = MyAmbiguousType(17)\nMyAmbiguousType(17)\n\njulia&gt; typeof(b)\nMyAmbiguousType\n\njulia&gt; typeof(c)\nMyAmbiguousType\n</pre> <p><code>b</code> and <code>c</code> have the same type, yet their underlying representation of data in memory is very different. Even if you stored just numeric values in field <code>a</code>, the fact that the memory representation of a <code>UInt8</code> differs from a <code>Float64</code> also means that the CPU needs to handle them using two different kinds of instructions. Since the required information is not available in the type, such decisions have to be made at run-time. This slows performance.</p> <p>You can do better by declaring the type of <code>a</code>. Here, we are focused on the case where <code>a</code> might be any one of several types, in which case the natural solution is to use parameters. For example:</p> <pre data-language=\"julia\">julia&gt; type MyType{T&lt;:AbstractFloat}\n         a::T\n       end\n</pre> <p>This is a better choice than</p> <pre data-language=\"julia\">julia&gt; type MyStillAmbiguousType\n         a::AbstractFloat\n       end\n</pre> <p>because the first version specifies the type of <code>a</code> from the type of the wrapper object. For example:</p> <pre data-language=\"julia\">julia&gt; m = MyType(3.2)\nMyType{Float64}(3.2)\n\njulia&gt; t = MyStillAmbiguousType(3.2)\nMyStillAmbiguousType(3.2)\n\njulia&gt; typeof(m)\nMyType{Float64}\n\njulia&gt; typeof(t)\nMyStillAmbiguousType\n</pre> <p>The type of field <code>a</code> can be readily determined from the type of <code>m</code>, but not from the type of <code>t</code>. Indeed, in <code>t</code> it’s possible to change the type of field <code>a</code>:</p> <pre data-language=\"julia\">julia&gt; typeof(t.a)\nFloat64\n\njulia&gt; t.a = 4.5f0\n4.5f0\n\njulia&gt; typeof(t.a)\nFloat32\n</pre> <p>In contrast, once <code>m</code> is constructed, the type of <code>m.a</code> cannot change:</p> <pre data-language=\"julia\">julia&gt; m.a = 4.5f0\n4.5\n\njulia&gt; typeof(m.a)\nFloat64\n</pre> <p>The fact that the type of <code>m.a</code> is known from <code>m</code>‘s type—coupled with the fact that its type cannot change mid-function—allows the compiler to generate highly-optimized code for objects like <code>m</code> but not for objects like <code>t</code>.</p> <p>Of course, all of this is true only if we construct <code>m</code> with a concrete type. We can break this by explicitly constructing it with an abstract type:</p> <pre data-language=\"julia\">julia&gt; m = MyType{AbstractFloat}(3.2)\nMyType{AbstractFloat}(3.2)\n\njulia&gt; typeof(m.a)\nFloat64\n\njulia&gt; m.a = 4.5f0\n4.5f0\n\njulia&gt; typeof(m.a)\nFloat32\n</pre> <p>For all practical purposes, such objects behave identically to those of <code>MyStillAmbiguousType</code>.</p> <p>It’s quite instructive to compare the sheer amount code generated for a simple function</p> <pre data-language=\"julia\">func(m::MyType) = m.a+1\n</pre> <p>using</p> <pre data-language=\"julia\">code_llvm(func,(MyType{Float64},))\ncode_llvm(func,(MyType{AbstractFloat},))\ncode_llvm(func,(MyType,))\n</pre> <p>For reasons of length the results are not shown here, but you may wish to try this yourself. Because the type is fully-specified in the first case, the compiler doesn’t need to generate any code to resolve the type at run-time. This results in shorter and faster code.</p>   <h3 id=\"man-abstract-container-type\">Avoid fields with abstract containers</h3> <p id=\"avoid-fields-with-abstract-containers\">The same best practices also work for container types:</p> <pre data-language=\"julia\">julia&gt; type MySimpleContainer{A&lt;:AbstractVector}\n         a::A\n       end\n\njulia&gt; type MyAmbiguousContainer{T}\n         a::AbstractVector{T}\n       end\n</pre> <p>For example:</p> <pre data-language=\"julia\">julia&gt; c = MySimpleContainer(1:3);\n\njulia&gt; typeof(c)\nMySimpleContainer{UnitRange{Int64}}\n\njulia&gt; c = MySimpleContainer([1:3;]);\n\njulia&gt; typeof(c)\nMySimpleContainer{Array{Int64,1}}\n\njulia&gt; b = MyAmbiguousContainer(1:3);\n\njulia&gt; typeof(b)\nMyAmbiguousContainer{Int64}\n\njulia&gt; b = MyAmbiguousContainer([1:3;]);\n\njulia&gt; typeof(b)\nMyAmbiguousContainer{Int64}\n</pre> <p>For <code>MySimpleContainer</code>, the object is fully-specified by its type and parameters, so the compiler can generate optimized functions. In most instances, this will probably suffice.</p> <p>While the compiler can now do its job perfectly well, there are cases where <em>you</em> might wish that your code could do different things depending on the <em>element type</em> of <code>a</code>. Usually the best way to achieve this is to wrap your specific operation (here, <code>foo</code>) in a separate function:</p> <pre data-language=\"julia\">function sumfoo(c::MySimpleContainer)\n    s = 0\nfor x in c.a\n    s += foo(x)\nend\ns\nend\n\nfoo(x::Integer) = x\nfoo(x::AbstractFloat) = round(x)\n</pre> <p>This keeps things simple, while allowing the compiler to generate optimized code in all cases.</p> <p>However, there are cases where you may need to declare different versions of the outer function for different element types of <code>a</code>. You could do it like this:</p> <pre data-language=\"julia\">function myfun{T&lt;:AbstractFloat}(c::MySimpleContainer{Vector{T}})\n    ...\nend\nfunction myfun{T&lt;:Integer}(c::MySimpleContainer{Vector{T}})\n    ...\nend\n</pre> <p>This works fine for <code>Vector{T}</code>, but we’d also have to write explicit versions for <code>UnitRange{T}</code> or other abstract types. To prevent such tedium, you can use two parameters in the declaration of <code>MyContainer</code>:</p> <pre data-language=\"julia\">type MyContainer{T, A&lt;:AbstractVector}\n    a::A\nend\nMyContainer(v::AbstractVector) = MyContainer{eltype(v), typeof(v)}(v)\n\njulia&gt; b = MyContainer(1.3:5);\n\njulia&gt; typeof(b)\nMyContainer{Float64,UnitRange{Float64}}\n</pre> <p>Note the somewhat surprising fact that <code>T</code> doesn’t appear in the declaration of field <code>a</code>, a point that we’ll return to in a moment. With this approach, one can write functions such as:</p> <pre data-language=\"julia\">function myfunc{T&lt;:Integer, A&lt;:AbstractArray}(c::MyContainer{T,A})\n    return c.a[1]+1\nend\n# Note: because we can only define MyContainer for\n# A&lt;:AbstractArray, and any unspecified parameters are arbitrary,\n# the previous could have been written more succinctly as\n#     function myfunc{T&lt;:Integer}(c::MyContainer{T})\n\nfunction myfunc{T&lt;:AbstractFloat}(c::MyContainer{T})\n    return c.a[1]+2\nend\n\nfunction myfunc{T&lt;:Integer}(c::MyContainer{T,Vector{T}})\n    return c.a[1]+3\nend\n\njulia&gt; myfunc(MyContainer(1:3))\n2\n\njulia&gt; myfunc(MyContainer(1.0:3))\n3.0\n\njulia&gt; myfunc(MyContainer([1:3]))\n4\n</pre> <p>As you can see, with this approach it’s possible to specialize on both the element type <code>T</code> and the array type <code>A</code>.</p> <p>However, there’s one remaining hole: we haven’t enforced that <code>A</code> has element type <code>T</code>, so it’s perfectly possible to construct an object like this:</p> <pre data-language=\"julia\">julia&gt; b = MyContainer{Int64, UnitRange{Float64}}(1.3:5);\n\njulia&gt; typeof(b)\nMyContainer{Int64,UnitRange{Float64}}\n</pre> <p>To prevent this, we can add an inner constructor:</p> <pre data-language=\"julia\">type MyBetterContainer{T&lt;:Real, A&lt;:AbstractVector}\n    a::A\n\n    MyBetterContainer(v::AbstractVector{T}) = new(v)\nend\nMyBetterContainer(v::AbstractVector) = MyBetterContainer{eltype(v),typeof(v)}(v)\n\n\njulia&gt; b = MyBetterContainer(1.3:5);\n\njulia&gt; typeof(b)\nMyBetterContainer{Float64,UnitRange{Float64}}\n\njulia&gt; b = MyBetterContainer{Int64, UnitRange{Float64}}(1.3:5);\nERROR: no method MyBetterContainer(UnitRange{Float64},)\n</pre> <p>The inner constructor requires that the element type of <code>A</code> be <code>T</code>.</p>   <h3 id=\"annotate-values-taken-from-untyped-locations\">Annotate values taken from untyped locations</h3> <p>It is often convenient to work with data structures that may contain values of any type, such as cell arrays (arrays of type <code>Array{Any}</code>). But, if you’re using one of these structures and happen to know the type of an element, it helps to share this knowledge with the compiler:</p> <pre data-language=\"julia\">function foo(a::Array{Any,1})\n    x = a[1]::Int32\n    b = x+1\n    ...\nend\n</pre> <p>Here, we happened to know that the first element of <code>a</code> would be an <code>Int32</code>. Making an annotation like this has the added benefit that it will raise a run-time error if the value is not of the expected type, potentially catching certain bugs earlier.</p>   <h3 id=\"declare-types-of-keyword-arguments\">Declare types of keyword arguments</h3> <p>Keyword arguments can have declared types:</p> <pre data-language=\"julia\">function with_keyword(x; name::Int = 1)\n    ...\nend\n</pre> <p>Functions are specialized on the types of keyword arguments, so these declarations will not affect performance of code inside the function. However, they will reduce the overhead of calls to the function that include keyword arguments.</p> <p>Functions with keyword arguments have near-zero overhead for call sites that pass only positional arguments.</p> <p>Passing dynamic lists of keyword arguments, as in <code>f(x; keywords...)</code>, can be slow and should be avoided in performance-sensitive code.</p>    <h2 id=\"break-functions-into-multiple-definitions\">Break functions into multiple definitions</h2> <p>Writing a function as many small definitions allows the compiler to directly call the most applicable code, or even inline it.</p> <p>Here is an example of a “compound function” that should really be written as multiple definitions:</p> <pre data-language=\"julia\">function norm(A)\n    if isa(A, Vector)\n        return sqrt(real(dot(A,A)))\n    elseif isa(A, Matrix)\n        return max(svd(A)[2])\n    else\n        error(\"norm: invalid argument\")\n    end\nend\n</pre> <p>This can be written more concisely and efficiently as:</p> <pre data-language=\"julia\">norm(x::Vector) = sqrt(real(dot(x,x)))\nnorm(A::Matrix) = max(svd(A)[2])\n</pre>   <h2 id=\"write-type-stable-functions\">Write “type-stable” functions</h2> <p>When possible, it helps to ensure that a function always returns a value of the same type. Consider the following definition:</p> <pre data-language=\"julia\">pos(x) = x &lt; 0 ? 0 : x\n</pre> <p>Although this seems innocent enough, the problem is that <code>0</code> is an integer (of type <code>Int</code>) and <code>x</code> might be of any type. Thus, depending on the value of <code>x</code>, this function might return a value of either of two types. This behavior is allowed, and may be desirable in some cases. But it can easily be fixed as follows:</p> <pre data-language=\"julia\">pos(x) = x &lt; 0 ? zero(x) : x\n</pre> <p>There is also a <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.one\" title=\"Base.one\"><code>one()</code></a> function, and a more general <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.oftype\" title=\"Base.oftype\"><code>oftype(x,y)</code></a> function, which returns <code>y</code> converted to the type of <code>x</code>.</p>   <h2 id=\"avoid-changing-the-type-of-a-variable\">Avoid changing the type of a variable</h2> <p>An analogous “type-stability” problem exists for variables used repeatedly within a function:</p> <pre data-language=\"julia\">function foo()\n    x = 1\n    for i = 1:10\n        x = x/bar()\n    end\n    return x\nend\n</pre> <p>Local variable <code>x</code> starts as an integer, and after one loop iteration becomes a floating-point number (the result of <a class=\"reference internal\" href=\"../../stdlib/math/index#Base./\" title=\"Base./\"><code>/</code></a> operator). This makes it more difficult for the compiler to optimize the body of the loop. There are several possible fixes:</p> <ul class=\"simple\"> <li>Initialize <code>x</code> with <code>x = 1.0</code>\n</li> <li>Declare the type of <code>x</code>: <code>x::Float64 = 1</code>\n</li> <li>Use an explicit conversion: <code>x = one(T)</code>\n</li> </ul>   <h2 id=\"separate-kernel-functions\">Separate kernel functions</h2> <p>Many functions follow a pattern of performing some set-up work, and then running many iterations to perform a core computation. Where possible, it is a good idea to put these core computations in separate functions. For example, the following contrived function returns an array of a randomly-chosen type:</p> <pre data-language=\"julia\">function strange_twos(n)\n    a = Array(rand(Bool) ? Int64 : Float64, n)\n    for i = 1:n\n        a[i] = 2\n    end\n    return a\nend\n</pre> <p>This should be written as:</p> <pre data-language=\"julia\">function fill_twos!(a)\n    for i=1:length(a)\n        a[i] = 2\n    end\nend\n\nfunction strange_twos(n)\n    a = Array(rand(Bool) ? Int64 : Float64, n)\n    fill_twos!(a)\n    return a\nend\n</pre> <p>Julia’s compiler specializes code for argument types at function boundaries, so in the original implementation it does not know the type of <code>a</code> during the loop (since it is chosen randomly). Therefore the second version is generally faster since the inner loop can be recompiled as part of <code>fill_twos!</code> for different types of <code>a</code>.</p> <p>The second form is also often better style and can lead to more code reuse.</p> <p>This pattern is used in several places in the standard library. For example, see <code>hvcat_fill</code> in <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/base/abstractarray.jl\">abstractarray.jl</a>, or the <code>fill!</code> function, which we could have used instead of writing our own <code>fill_twos!</code>.</p> <p>Functions like <code>strange_twos</code> occur when dealing with data of uncertain type, for example data loaded from an input file that might contain either integers, floats, strings, or something else.</p>   <h2 id=\"access-arrays-in-memory-order-along-columns\">Access arrays in memory order, along columns</h2> <p>Multidimensional arrays in Julia are stored in column-major order. This means that arrays are stacked one column at a time. This can be verified using the <code>vec</code> function or the syntax <code>[:]</code> as shown below (notice that the array is ordered <code>[1 3 2 4]</code>, not <code>[1 2 3 4]</code>):</p> <pre data-language=\"julia\">julia&gt; x = [1 2; 3 4]\n2x2 Array{Int64,2}:\n 1  2\n 3  4\n\njulia&gt; x[:]\n4-element Array{Int64,1}:\n 1\n 3\n 2\n 4\n</pre> <p>This convention for ordering arrays is common in many languages like Fortran, Matlab, and R (to name a few). The alternative to column-major ordering is row-major ordering, which is the convention adopted by C and Python (<code>numpy</code>) among other languages. Remembering the ordering of arrays can have significant performance effects when looping over arrays. A rule of thumb to keep in mind is that with column-major arrays, the first index changes most rapidly. Essentially this means that looping will be faster if the inner-most loop index is the first to appear in a slice expression.</p> <p>Consider the following contrived example. Imagine we wanted to write a function that accepts a <code>Vector</code> and returns a square <code>Matrix</code> with either the rows or the columns filled with copies of the input vector. Assume that it is not important whether rows or columns are filled with these copies (perhaps the rest of the code can be easily adapted accordingly). We could conceivably do this in at least four ways (in addition to the recommended call to the built-in <a class=\"reference internal\" href=\"../../stdlib/linalg/index#Base.repmat\" title=\"Base.repmat\"><code>repmat()</code></a>):</p> <pre data-language=\"julia\">function copy_cols{T}(x::Vector{T})\n    n = size(x, 1)\n    out = Array(eltype(x), n, n)\n    for i=1:n\n        out[:, i] = x\n    end\n    out\nend\n\nfunction copy_rows{T}(x::Vector{T})\n    n = size(x, 1)\n    out = Array(eltype(x), n, n)\n    for i=1:n\n        out[i, :] = x\n    end\n    out\nend\n\nfunction copy_col_row{T}(x::Vector{T})\n    n = size(x, 1)\n    out = Array(T, n, n)\n    for col=1:n, row=1:n\n        out[row, col] = x[row]\n    end\n    out\nend\n\nfunction copy_row_col{T}(x::Vector{T})\n    n = size(x, 1)\n    out = Array(T, n, n)\n    for row=1:n, col=1:n\n        out[row, col] = x[col]\n    end\n    out\nend\n</pre> <p>Now we will time each of these functions using the same random <code>10000</code> by <code>1</code> input vector:</p> <pre data-language=\"julia\">julia&gt; x = randn(10000);\n\njulia&gt; fmt(f) = println(rpad(string(f)*\": \", 14, ' '), @elapsed f(x))\n\njulia&gt; map(fmt, Any[copy_cols, copy_rows, copy_col_row, copy_row_col]);\ncopy_cols:    0.331706323\ncopy_rows:    1.799009911\ncopy_col_row: 0.415630047\ncopy_row_col: 1.721531501\n</pre> <p>Notice that <code>copy_cols</code> is much faster than <code>copy_rows</code>. This is expected because <code>copy_cols</code> respects the column-based memory layout of the <code>Matrix</code> and fills it one column at a time. Additionally, <code>copy_col_row</code> is much faster than <code>copy_row_col</code> because it follows our rule of thumb that the first element to appear in a slice expression should be coupled with the inner-most loop.</p>   <h2 id=\"man-preallocation\">Pre-allocating outputs</h2> <p id=\"pre-allocating-outputs\">If your function returns an Array or some other complex type, it may have to allocate memory. Unfortunately, oftentimes allocation and its converse, garbage collection, are substantial bottlenecks.</p> <p>Sometimes you can circumvent the need to allocate memory on each function call by preallocating the output. As a trivial example, compare</p> <pre data-language=\"julia\">function xinc(x)\n    return [x, x+1, x+2]\nend\n\nfunction loopinc()\n    y = 0\n    for i = 1:10^7\n        ret = xinc(i)\n        y += ret[2]\n    end\n    y\nend\n</pre> <p>with</p> <pre data-language=\"julia\">function xinc!{T}(ret::AbstractVector{T}, x::T)\n    ret[1] = x\n    ret[2] = x+1\n    ret[3] = x+2\n    nothing\nend\n\nfunction loopinc_prealloc()\n    ret = Array(Int, 3)\n    y = 0\n    for i = 1:10^7\n        xinc!(ret, i)\n        y += ret[2]\n    end\n    y\nend\n</pre> <p>Timing results:</p> <pre data-language=\"julia\">julia&gt; @time loopinc()\nelapsed time: 1.955026528 seconds (1279975584 bytes allocated)\n50000015000000\n\njulia&gt; @time loopinc_prealloc()\nelapsed time: 0.078639163 seconds (144 bytes allocated)\n50000015000000\n</pre> <p>Preallocation has other advantages, for example by allowing the caller to control the “output” type from an algorithm. In the example above, we could have passed a <code>SubArray</code> rather than an <a class=\"reference internal\" href=\"../../stdlib/arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a>, had we so desired.</p> <p>Taken to its extreme, pre-allocation can make your code uglier, so performance measurements and some judgment may be required.</p>   <h2 id=\"avoid-string-interpolation-for-i-o\">Avoid string interpolation for I/O</h2> <p>When writing data to a file (or other I/O device), forming extra intermediate strings is a source of overhead. Instead of:</p> <pre data-language=\"julia\">println(file, \"$a $b\")\n</pre> <p>use:</p> <pre data-language=\"julia\">println(file, a, \" \", b)\n</pre> <p>The first version of the code forms a string, then writes it to the file, while the second version writes values directly to the file. Also notice that in some cases string interpolation can be harder to read. Consider:</p> <pre data-language=\"julia\">println(file, \"$(f(a))$(f(b))\")\n</pre> <p>versus:</p> <pre data-language=\"julia\">println(file, f(a), f(b))\n</pre>   <h2 id=\"optimize-network-i-o-during-parallel-execution\">Optimize network I/O during parallel execution</h2> <p>When executing a remote function in parallel:</p> <pre data-language=\"julia\">responses = cell(nworkers())\n@sync begin\n    for (idx, pid) in enumerate(workers())\n        @async responses[idx] = remotecall_fetch(pid, foo, args...)\n    end\nend\n</pre> <p>is faster than:</p> <pre data-language=\"julia\">refs = cell(nworkers())\nfor (idx, pid) in enumerate(workers())\n    refs[idx] = @spawnat pid foo(args...)\nend\nresponses = [fetch(r) for r in refs]\n</pre> <p>The former results in a single network round-trip to every worker, while the latter results in two network calls - first by the <code>@spawnat</code> and the second due to the <code>fetch</code> (or even a <code>wait</code>). The <code>fetch</code>/<code>wait</code> is also being executed serially resulting in an overall poorer performance.</p>   <h2 id=\"fix-deprecation-warnings\">Fix deprecation warnings</h2> <p>A deprecated function internally performs a lookup in order to print a relevant warning only once. This extra lookup can cause a significant slowdown, so all uses of deprecated functions should be modified as suggested by the warnings.</p>   <h2 id=\"tweaks\">Tweaks</h2> <p>These are some minor points that might help in tight inner loops.</p> <ul class=\"simple\"> <li>Avoid unnecessary arrays. For example, instead of <a class=\"reference internal\" href=\"../../stdlib/collections/index#Base.sum\" title=\"Base.sum\"><code>sum([x,y,z])</code></a> use <code>x+y+z</code>.</li> <li>Use <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.abs2\" title=\"Base.abs2\"><code>abs2(z)</code></a> instead of <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.abs\" title=\"Base.abs\"><code>abs(z)^2</code></a> for complex <code>z</code>. In general, try to rewrite code to use <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.abs2\" title=\"Base.abs2\"><code>abs2()</code></a> instead of <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.abs\" title=\"Base.abs\"><code>abs()</code></a> for complex arguments.</li> <li>Use <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.div\" title=\"Base.div\"><code>div(x,y)</code></a> for truncating division of integers instead of <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.trunc\" title=\"Base.trunc\"><code>trunc(x/y)</code></a>, <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.fld\" title=\"Base.fld\"><code>fld(x,y)</code></a> instead of <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.floor\" title=\"Base.floor\"><code>floor(x/y)</code></a>, and <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.cld\" title=\"Base.cld\"><code>cld(x,y)</code></a> instead of <a class=\"reference internal\" href=\"../../stdlib/math/index#Base.ceil\" title=\"Base.ceil\"><code>ceil(x/y)</code></a>.</li> </ul>   <h2 id=\"performance-annotations\">Performance Annotations</h2> <p>Sometimes you can enable better optimization by promising certain program properties.</p> <ul class=\"simple\"> <li>Use <code>@inbounds</code> to eliminate array bounds checking within expressions. Be certain before doing this. If the subscripts are ever out of bounds, you may suffer crashes or silent corruption.</li> <li>Use <code>@fastmath</code> to allow floating point optimizations that are correct for real numbers, but lead to differences for IEEE numbers. Be careful when doing this, as this may change numerical results. This corresponds to the <code>-ffast-math</code> option of clang.</li> <li>Write <code>@simd</code> in front of <code>for</code> loops that are amenable to vectorization. <strong>This feature is experimental</strong> and could change or disappear in future versions of Julia.</li> </ul> <p>Note: While <code>@simd</code> needs to be placed directly in front of a loop, both <code>@inbounds</code> and <code>@fastmath</code> can be applied to several statements at once, e.g. using <code>begin</code> ... <code>end</code>, or even to a whole function.</p> <p>Here is an example with both <code>@inbounds</code> and <code>@simd</code> markup:</p> <pre data-language=\"julia\">function inner( x, y )\n    s = zero(eltype(x))\n    for i=1:length(x)\n        @inbounds s += x[i]*y[i]\n    end\n    s\nend\n\nfunction innersimd( x, y )\n    s = zero(eltype(x))\n    @simd for i=1:length(x)\n        @inbounds s += x[i]*y[i]\n    end\n    s\nend\n\nfunction timeit( n, reps )\n    x = rand(Float32,n)\n    y = rand(Float32,n)\n    s = zero(Float64)\n    time = @elapsed for j in 1:reps\n        s+=inner(x,y)\n    end\n    println(\"GFlop        = \",2.0*n*reps/time*1E-9)\n    time = @elapsed for j in 1:reps\n        s+=innersimd(x,y)\n    end\n    println(\"GFlop (SIMD) = \",2.0*n*reps/time*1E-9)\nend\n\ntimeit(1000,1000)\n</pre> <p>On a computer with a 2.4GHz Intel Core i5 processor, this produces:</p> <pre data-language=\"julia\">GFlop        = 1.9467069505224963\nGFlop (SIMD) = 17.578554163920018\n</pre> <p>The range for a <code>@simd for</code> loop should be a one-dimensional range. A variable used for accumulating, such as <code>s</code> in the example, is called a <em>reduction variable</em>. By using <code>@simd</code>, you are asserting several properties of the loop:</p> <ul class=\"simple\"> <li>It is safe to execute iterations in arbitrary or overlapping order, with special consideration for reduction variables.</li> <li>Floating-point operations on reduction variables can be reordered, possibly causing different results than without <code>@simd</code>.</li> <li>No iteration ever waits on another iteration to make forward progress.</li> </ul> <p>A loop containing <code>break</code>, <code>continue</code>, or <code>@goto</code> will cause a compile-time error.</p> <p>Using <code>@simd</code> merely gives the compiler license to vectorize. Whether it actually does so depends on the compiler. To actually benefit from the current implementation, your loop should have the following additional properties:</p> <ul class=\"simple\"> <li>The loop must be an innermost loop.</li> <li>The loop body must be straight-line code. This is why <code>@inbounds</code> is currently needed for all array accesses. The compiler can sometimes turn short <code>&amp;&amp;</code>, <code>||</code>, and <code>?:</code> expressions into straight-line code, if it is safe to evaluate all operands unconditionally. Consider using <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.ifelse\" title=\"Base.ifelse\"><code>ifelse()</code></a> instead of <code>?:</code> in the loop if it is safe to do so.</li> <li>Accesses must have a stride pattern and cannot be “gathers” (random-index reads) or “scatters” (random-index writes).</li> <li>The stride should be unit stride.</li> <li>In some simple cases, for example with 2-3 arrays accessed in a loop, the LLVM auto-vectorization may kick in automatically, leading to no further speedup with <code>@simd</code>.</li> </ul> <p>Here is an example with all three kinds of markup. This program first calculates the finite difference of a one-dimensional array, and then evaluates the L2-norm of the result:</p> <pre data-language=\"julia\">function init!(u)\n    n = length(u)\n    dx = 1.0 / (n-1)\n    @fastmath @inbounds @simd for i in 1:n\n        u[i] = sin(2pi*dx*i)\n    end\nend\n\nfunction deriv!(u, du)\n    n = length(u)\n    dx = 1.0 / (n-1)\n    @fastmath @inbounds du[1] = (u[2] - u[1]) / dx\n    @fastmath @inbounds @simd for i in 2:n-1\n        du[i] = (u[i+1] - u[i-1]) / (2*dx)\n    end\n    @fastmath @inbounds du[n] = (u[n] - u[n-1]) / dx\nend\n\nfunction norm(u)\n    n = length(u)\n    T = eltype(u)\n    s = zero(T)\n    @fastmath @inbounds @simd for i in 1:n\n        s += u[i]^2\n    end\n    @fastmath @inbounds return sqrt(s/n)\nend\n\nfunction main()\n    n = 2000\n    u = Array(Float64, n)\n    init!(u)\n    du = similar(u)\n\n    deriv!(u, du)\n    nu = norm(du)\n\n    @time for i in 1:10^6\n        deriv!(u, du)\n        nu = norm(du)\n    end\n\n    println(nu)\nend\n\nmain()\n</pre> <p>On a computer with a 2.7 GHz Intel Core i7 processor, this produces:</p> <pre data-language=\"julia\">$ julia wave.jl\nelapsed time: 1.207814709 seconds (0 bytes allocated)\n4.443986180758243\n\n$ julia --math-mode=ieee wave.jl\nelapsed time: 4.487083643 seconds (0 bytes allocated)\n4.443986180758243\n</pre> <p>Here, the option <code>--math-mode=ieee</code> disables the <code>@fastmath</code> macro, so that we can compare results.</p> <p>In this case, the speedup due to <code>@fastmath</code> is a factor of about 3.7. This is unusually large – in general, the speedup will be smaller. (In this particular example, the working set of the benchmark is small enough to fit into the L1 cache of the processor, so that memory access latency does not play a role, and computing time is dominated by CPU usage. In many real world programs this is not the case.) Also, in this case this optimization does not change the result – in general, the result will be slightly different. In some cases, especially for numerically unstable algorithms, the result can be very different.</p> <p>The annotation <code>@fastmath</code> re-arranges floating point expressions, e.g. changing the order of evaluation, or assuming that certain special cases (inf, nan) cannot occur. In this case (and on this particular computer), the main difference is that the expression <code>1 / (2*dx)</code> in the function <code>deriv</code> is hoisted out of the loop (i.e. calculated outside the loop), as if one had written <code>idx = 1 /\n(2*dx)</code>. In the loop, the expression <code>... / (2*dx)</code> then becomes <code>... * idx</code>, which is much faster to evaluate. Of course, both the actual optimization that is applied by the compiler as well as the resulting speedup depend very much on the hardware. You can examine the change in generated code by using Julia’s <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.code_native\" title=\"Base.code_native\"><code>code_native()</code></a> function.</p>   <h2 id=\"treat-subnormal-numbers-as-zeros\">Treat Subnormal Numbers as Zeros</h2> <p>Subnormal numbers, formerly called <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Denormal_number\">denormal numbers</a>, are useful in many contexts, but incur a performance penalty on some hardware. A call <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.set_zero_subnormals\" title=\"Base.set_zero_subnormals\"><code>set_zero_subnormals(true)</code></a> grants permission for floating-point operations to treat subnormal inputs or outputs as zeros, which may improve performance on some hardware. A call <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.set_zero_subnormals\" title=\"Base.set_zero_subnormals\"><code>set_zero_subnormals(false)</code></a> enforces strict IEEE behavior for subnormal numbers.</p> <p>Below is an example where subnormals noticeably impact performance on some hardware:</p> <pre data-language=\"julia\">function timestep{T}( b::Vector{T}, a::Vector{T}, Δt::T )\n    @assert length(a)==length(b)\n    n = length(b)\n    b[1] = 1                            # Boundary condition\n    for i=2:n-1\n        b[i] = a[i] + (a[i-1] - T(2)*a[i] + a[i+1]) * Δt\n    end\n    b[n] = 0                            # Boundary condition\nend\n\nfunction heatflow{T}( a::Vector{T}, nstep::Integer )\n    b = similar(a)\n    for t=1:div(nstep,2)                # Assume nstep is even\n        timestep(b,a,T(0.1))\n        timestep(a,b,T(0.1))\n    end\nend\n\nheatflow(zeros(Float32,10),2)           # Force compilation\nfor trial=1:6\n    a = zeros(Float32,1000)\n    set_zero_subnormals(iseven(trial))  # Odd trials use strict IEEE arithmetic\n    @time heatflow(a,1000)\nend\n</pre> <p>This example generates many subnormal numbers because the values in <code>a</code> become an exponentially decreasing curve, which slowly flattens out over time.</p> <p>Treating subnormals as zeros should be used with caution, because doing so breaks some identities, such as <code>x-y==0</code> implies <code>x==y</code>:</p> <pre data-language=\"julia\">julia&gt; x=3f-38; y=2f-38;\n\njulia&gt; set_zero_subnormals(false); (x-y,x==y)\n(1.0000001f-38,false)\n\njulia&gt; set_zero_subnormals(true); (x-y,x==y)\n(0.0f0,false)\n</pre> <p>In some applications, an alternative to zeroing subnormal numbers is to inject a tiny bit of noise. For example, instead of initializing <code>a</code> with zeros, initialize it with:</p> <pre data-language=\"julia\">a = rand(Float32,1000) * 1.f-9\n</pre>   <h2 id=\"man-code-warntype\">@code_warntype</h2> <p id=\"code-warntype\">The macro <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@code_warntype\" title=\"Base.@code_warntype\"><code>@code_warntype</code></a> (or its function variant <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.code_warntype\" title=\"Base.code_warntype\"><code>code_warntype()</code></a>) can sometimes be helpful in diagnosing type-related problems. Here’s an example:</p> <pre data-language=\"julia\">pos(x) = x &lt; 0 ? 0 : x\n\nfunction f(x)\n    y = pos(x)\n    sin(y*x+1)\nend\n\njulia&gt; @code_warntype f(3.2)\nVariables:\n  x::Float64\n  y::UNION(INT64,FLOAT64)\n  _var0::Float64\n  _var3::Tuple{Int64}\n  _var4::UNION(INT64,FLOAT64)\n  _var1::Float64\n  _var2::Float64\n\nBody:\n  begin  # none, line 2:\n      _var0 = (top(box))(Float64,(top(sitofp))(Float64,0))\n      unless (top(box))(Bool,(top(or_int))((top(lt_float))(x::Float64,_var0::Float64)::Bool,(top(box))(Bool,(top(and_int))((top(box))(Bool,(top(and_int))((top(eq_float))(x::Float64,_var0::Float64)::Bool,(top(lt_float))(_var0::Float64,9.223372036854776e18)::Bool)),(top(slt_int))((top(box))(Int64,(top(fptosi))(Int64,_var0::Float64)),0)::Bool)))) goto 1\n      _var4 = 0\n      goto 2\n      1:\n      _var4 = x::Float64\n      2:\n      y = _var4::UNION(INT64,FLOAT64) # line 3:\n      _var1 = y::UNION(INT64,FLOAT64) * x::Float64::Float64\n      _var2 = (top(box))(Float64,(top(add_float))(_var1::Float64,(top(box))(Float64,(top(sitofp))(Float64,1))))\n      return (GlobalRef(Base.Math,:nan_dom_err))((top(ccall))($(Expr(:call1, :(top(tuple)), \"sin\", GlobalRef(Base.Math,:libm))),Float64,$(Expr(:call1, :(top(tuple)), :Float64)),_var2::Float64,0)::Float64,_var2::Float64)::Float64\n  end::Float64\n</pre> <p>Interpreting the output of <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@code_warntype\" title=\"Base.@code_warntype\"><code>@code_warntype</code></a>, like that of its cousins <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@code_lowered\" title=\"Base.@code_lowered\"><code>@code_lowered</code></a>, <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@code_typed\" title=\"Base.@code_typed\"><code>@code_typed</code></a>, <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@code_llvm\" title=\"Base.@code_llvm\"><code>@code_llvm</code></a>, and <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@code_native\" title=\"Base.@code_native\"><code>@code_native</code></a>, takes a little practice. Your code is being presented in form that has been partially digested on its way to generating compiled machine code. Most of the expressions are annotated by a type, indicated by the <code>::T</code> (where <code>T</code> might be <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a>, for example). The most important characteristic of <a class=\"reference internal\" href=\"../../stdlib/base/index#Base.@code_warntype\" title=\"Base.@code_warntype\"><code>@code_warntype</code></a> is that non-concrete types are displayed in red; in the above example, such output is shown in all-caps.</p> <p>The top part of the output summarizes the type information for the different variables internal to the function. You can see that <code>y</code>, one of the variables you created, is a <code>Union{Int64,Float64}</code>, due to the type-instability of <code>pos</code>. There is another variable, <code>_var4</code>, which you can see also has the same type.</p> <p>The next lines represent the body of <code>f</code>. The lines starting with a number followed by a colon (<code>1:</code>, <code>2:</code>) are labels, and represent targets for jumps (via <code>goto</code>) in your code. Looking at the body, you can see that <code>pos</code> has been <em>inlined</em> into <code>f</code>—everything before <code>2:</code> comes from code defined in <code>pos</code>.</p> <p>Starting at <code>2:</code>, the variable <code>y</code> is defined, and again annotated as a <code>Union</code> type. Next, we see that the compiler created the temporary variable <code>_var1</code> to hold the result of <code>y*x</code>. Because a <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a> times <em>either</em> an <code>Int64</code> or <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a> yields a <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a>, all type-instability ends here. The net result is that <code>f(x::Float64)</code> will not be type-unstable in its output, even if some of the intermediate computations are type-unstable.</p> <p>How you use this information is up to you. Obviously, it would be far and away best to fix <code>pos</code> to be type-stable: if you did so, all of the variables in <code>f</code> would be concrete, and its performance would be optimal. However, there are circumstances where this kind of <em>ephemeral</em> type instability might not matter too much: for example, if <code>pos</code> is never used in isolation, the fact that <code>f</code>‘s output is type-stable (for <a class=\"reference internal\" href=\"../../stdlib/numbers/index#Base.Float64\" title=\"Base.Float64\"><code>Float64</code></a> inputs) will shield later code from the propagating effects of type instability. This is particularly relevant in cases where fixing the type instability is difficult or impossible: for example, currently it’s not possible to infer the return type of an anonymous function. In such cases, the tips above (e.g., adding type annotations and/or breaking up functions) are your best tools to contain the “damage” from type instability.</p> <p>The following examples may help you interpret expressions marked as containing non-leaf types:</p> <ul class=\"simple\"> <li>Function body ending in <code>end::Union{T1,T2})</code><ul> <li>Interpretation: function with unstable return type</li> <li>Suggestion: make the return value type-stable, even if you have to annotate it</li> </ul> </li> <li>\n<code>f(x::T)::Union{T1,T2}</code><ul> <li>Interpretation: call to a type-unstable function</li> <li>Suggestion: fix the function, or if necessary annotate the return value</li> </ul> </li> <li>\n<code>(top(arrayref))(A::Array{Any,1},1)::Any</code><ul> <li>Interpretation: accessing elements of poorly-typed arrays</li> <li>Suggestion: use arrays with better-defined types, or if necessary annotate the type of individual element accesses</li> </ul> </li> <li>\n<code>(top(getfield))(A::ArrayContainer{Float64},:data)::Array{Float64,N}</code><ul> <li>Interpretation: getting a field that is of non-leaf type. In this case, <code>ArrayContainer</code> had a field <code>data::Array{T}</code>. But <code>Array</code> needs the dimension <code>N</code>, too, to be a concrete type.</li> <li>Suggestion: use concrete types like <code>Array{T,3}</code> or <code>Array{T,N}</code>, where <code>N</code> is now a parameter of <code>ArrayContainer</code>\n</li> </ul> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/performance-tips/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/performance-tips/</a>\n  </p>\n</div>\n","stdlib/parallel/index":"<h1>Tasks and Parallel Computing</h1>  <h2 id=\"tasks\">Tasks</h2> <dl class=\"function\"> <dt id=\"Base.Task\">\n<code>Task(func)</code> </dt> <dd>\n<p>Create a <code>Task</code> (i.e. thread, or coroutine) to execute the given function (which must be callable with no arguments). The task exits when this function returns.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.yieldto\">\n<code>yieldto(task, arg = nothing)</code> </dt> <dd>\n<p>Switch to the given task. The first time a task is switched to, the task’s function is called with no arguments. On subsequent switches, <code>arg</code> is returned from the task’s last call to <code>yieldto</code>. This is a low-level call that only switches tasks, not considering states or scheduling in any way. Its use is discouraged.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.current_task\">\n<code>current_task()</code> </dt> <dd>\n<p>Get the currently running <code>Task</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.istaskdone\">\n<code>istaskdone(task) → Bool</code> </dt> <dd>\n<p>Tell whether a task has exited.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.istaskstarted\">\n<code>istaskstarted(task) → Bool</code> </dt> <dd>\n<p>Tell whether a task has started executing.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.consume\">\n<code>consume(task, values...)</code> </dt> <dd>\n<p>Receive the next value passed to <code>produce</code> by the specified task. Additional arguments may be passed, to be returned from the last <code>produce</code> call in the producer.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.produce\">\n<code>produce(value)</code> </dt> <dd>\n<p>Send the given value to the last <code>consume</code> call, switching to the consumer task. If the next <code>consume</code> call passes any values, they are returned by <code>produce</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.yield\">\n<code>yield()</code> </dt> <dd>\n<p>Switch to the scheduler to allow another scheduled task to run. A task that calls this function is still runnable, and will be restarted immediately if there are no other runnable tasks.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.task_local_storage\">\n<code>task_local_storage(symbol)</code> </dt> <dd>\n<p>Look up the value of a symbol in the current task’s task-local storage.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>task_local_storage(symbol, value)</code> </dt> <dd>\n<p>Assign a value to a symbol in the current task’s task-local storage.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>task_local_storage(body, symbol, value)</code> </dt> <dd>\n<p>Call the function <code>body</code> with a modified task-local storage, in which <code>value</code> is assigned to <code>symbol</code>; the previous value of <code>symbol</code>, or lack thereof, is restored afterwards. Useful for emulating dynamic scoping.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Condition\">\n<code>Condition()</code> </dt> <dd>\n<p>Create an edge-triggered event source that tasks can wait for. Tasks that call <code>wait</code> on a <code>Condition</code> are suspended and queued. Tasks are woken up when <code>notify</code> is later called on the <code>Condition</code>. Edge triggering means that only tasks waiting at the time <code>notify</code> is called can be woken up. For level-triggered notifications, you must keep extra state to keep track of whether a notification has happened. The <code>Channel</code> type does this, and so can be used for level-triggered events.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.notify\">\n<code>notify(condition, val=nothing; all=true, error=false)</code> </dt> <dd>\n<p>Wake up tasks waiting for a condition, passing them <code>val</code>. If <code>all</code> is <code>true</code> (the default), all waiting tasks are woken, otherwise only one is. If <code>error</code> is <code>true</code>, the passed value is raised as an exception in the woken tasks.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.schedule\">\n<code>schedule(t::Task, [val]; error=false)</code> </dt> <dd>\n<p>Add a task to the scheduler’s queue. This causes the task to run constantly when the system is otherwise idle, unless the task performs a blocking operation such as <code>wait</code>.</p> <p>If a second argument is provided, it will be passed to the task (via the return value of <code>yieldto</code>) when it runs again. If <code>error</code> is <code>true</code>, the value is raised as an exception in the woken task.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@schedule\">\n<code>@schedule()</code> </dt> <dd>\n<p>Wrap an expression in a <code>Task</code> and add it to the local machine’s scheduler queue.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@task\">\n<code>@task()</code> </dt> <dd>\n<p>Wrap an expression in a <code>Task</code> without executing it, and return the <code>Task</code>. This only creates a task, and does not run it.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sleep\">\n<code>sleep(seconds)</code> </dt> <dd>\n<p>Block the current task for a specified number of seconds. The minimum sleep time is 1 millisecond or input of <code>0.001</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ReentrantLock\">\n<code>ReentrantLock()</code> </dt> <dd>\n<p>Creates a reentrant lock. The same task can acquire the lock as many times as required. Each lock must be matched with an unlock.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lock\">\n<code>lock(l::ReentrantLock)</code> </dt> <dd>\n<p>Associates <code>l</code> with the current task. If <code>l</code> is already locked by a different task, waits for it to become available. The same task can acquire the lock multiple times. Each “lock” must be matched by an “unlock”</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.unlock\">\n<code>unlock(l::ReentrantLock)</code> </dt> <dd>\n<p>Releases ownership of the lock by the current task. If the lock had been acquired before, it just decrements an internal counter and returns immediately.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Channel{T}\">\n<code>Channel{T}(sz::Int)</code> </dt> <dd>\n<p>Constructs a <code>Channel</code> that can hold a maximum of <code>sz</code> objects of type <code>T</code>. <code>put!</code> calls on a full channel block till an object is removed with <code>take!</code>.</p> <p>Other constructors:</p> <ul class=\"simple\"> <li>\n<code>Channel()</code> - equivalent to <code>Channel{Any}(32)</code>\n</li> <li>\n<code>Channel(sz::Int)</code> equivalent to <code>Channel{Any}(sz)</code>\n</li> </ul> </dd>\n</dl>   <h2 id=\"general-parallel-computing-support\">General Parallel Computing Support</h2> <dl class=\"function\"> <dt id=\"Base.addprocs\">\n<code>addprocs(n::Integer; exeflags=``) → List of process identifiers</code> </dt> <dd>\n<p>Launches workers using the in-built <code>LocalManager</code> which only launches workers on the local host. This can be used to take advantage of multiple cores. <code>addprocs(4)</code> will add 4 processes on the local machine.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>addprocs() → List of process identifiers</code> </dt> <dd>\n<p>Equivalent to <code>addprocs(CPU_CORES)</code></p> <p>Note that workers do not run a <code>.juliarc.jl</code> startup script, nor do they synchronize their global state (such as global variables, new method definitions, and loaded modules) with any of the other running processes.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>addprocs(machines; keyword_args...) → List of process identifiers</code> </dt> <dd>\n<p>Add processes on remote machines via SSH. Requires julia to be installed in the same location on each node, or to be available via a shared file system.</p> <p><code>machines</code> is a vector of machine specifications. Worker are started for each specification.</p> <p>A machine specification is either a string <code>machine_spec</code> or a tuple - <code>(machine_spec, count)</code>.</p> <p><code>machine_spec</code> is a string of the form <code>[user@]host[:port] [bind_addr[:port]]</code>. <code>user</code> defaults to current user, <code>port</code> to the standard ssh port. If <code>[bind_addr[:port]]</code> is specified, other workers will connect to this worker at the specified <code>bind_addr</code> and <code>port</code>.</p> <p><code>count</code> is the number of workers to be launched on the specified host. If specified as <code>:auto</code> it will launch as many workers as the number of cores on the specific host.</p> <p>Keyword arguments:</p> <ul class=\"simple\"> <li>\n<code>tunnel</code>: if <code>true</code> then SSH tunneling will be used to connect to the worker from the master process. Default is <code>false</code>.</li> <li>\n<code>sshflags</code>: specifies additional ssh options, e.g.</li> </ul> <pre data-language=\"julia\">sshflags=`-i /home/foo/bar.pem`\n</pre> <ul class=\"simple\"> <li>\n<code>max_parallel</code>: specifies the maximum number of workers connected to in parallel at a host. Defaults to 10.</li> <li>\n<code>dir</code>: specifies the working directory on the workers. Defaults to the host’s current directory (as found by <code>pwd()</code>)</li> <li>\n<code>exename</code>: name of the julia executable. Defaults to <code>\"$JULIA_HOME/julia\"</code> or <code>\"$JULIA_HOME/julia-debug\"</code> as the case may be.</li> <li>\n<code>exeflags</code>: additional flags passed to the worker processes.</li> <li>\n<code>topology</code>: Specifies how the workers connect to each other. Sending a message between unconnected workers results in an error.</li> <li>\n<code>topology=:all_to_all</code> : All processes are connected to each other. This is the default.</li> <li>\n<code>topology=:master_slave</code> : Only the driver process, i.e. pid 1 connects to the workers. The workers do not connect to each other.</li> <li>\n<code>topology=:custom</code> : The <code>launch</code> method of the cluster manager specifes the connection topology via fields <code>ident</code> and <code>connect_idents</code> in <code>WorkerConfig</code>. A worker with a cluster manager identity <code>ident</code> will connect to all workers specified in <code>connect_idents</code>.</li> </ul> <p>Environment variables :</p> <p>If the master process fails to establish a connection with a newly launched worker within 60.0 seconds, the worker treats it a fatal situation and terminates. This timeout can be controlled via environment variable <code>JULIA_WORKER_TIMEOUT</code>. The value of <code>JULIA_WORKER_TIMEOUT</code> on the master process, specifies the number of seconds a newly launched worker waits for connection establishment.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>addprocs(manager::ClusterManager; kwargs...) → List of process identifiers</code> </dt> <dd>\n<p>Launches worker processes via the specified cluster manager.</p> <p>For example Beowulf clusters are supported via a custom cluster manager implemented in package <code>ClusterManagers</code>.</p> <p>The number of seconds a newly launched worker waits for connection establishment from the master can be specified via variable <code>JULIA_WORKER_TIMEOUT</code> in the worker process’s environment. Relevant only when using TCP/IP as transport.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nprocs\">\n<code>nprocs()</code> </dt> <dd>\n<p>Get the number of available processes.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nworkers\">\n<code>nworkers()</code> </dt> <dd>\n<p>Get the number of available worker processes. This is one less than <code>nprocs()</code>. Equal to <code>nprocs()</code> if <code>nprocs() == 1</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.procs\">\n<code>procs()</code> </dt> <dd>\n<p>Returns a list of all process identifiers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.workers\">\n<code>workers()</code> </dt> <dd>\n<p>Returns a list of all worker process identifiers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rmprocs\">\n<code>rmprocs(pids...)</code> </dt> <dd>\n<p>Removes the specified workers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.interrupt\">\n<code>interrupt([pids...])</code> </dt> <dd>\n<p>Interrupt the current executing task on the specified workers. This is equivalent to pressing Ctrl-C on the local machine. If no arguments are given, all workers are interrupted.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.myid\">\n<code>myid()</code> </dt> <dd>\n<p>Get the id of the current process.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.pmap\">\n<code>pmap(f, lsts...; err_retry=true, err_stop=false, pids=workers())</code> </dt> <dd>\n<p>Transform collections <code>lsts</code> by applying <code>f</code> to each element in parallel. (Note that <code>f</code> must be made available to all worker processes; see <a class=\"reference internal\" href=\"../../manual/parallel-computing/index#man-parallel-computing-code-availability\"><span>Code Availability and Loading Packages</span></a> for details.) If <code>nprocs() &gt; 1</code>, the calling process will be dedicated to assigning tasks. All other available processes will be used as parallel workers, or on the processes specified by <code>pids</code>.</p> <p>If <code>err_retry</code> is <code>true</code>, it retries a failed application of <code>f</code> on a different worker. If <code>err_stop</code> is <code>true</code>, it takes precedence over the value of <code>err_retry</code> and <code>pmap</code> stops execution on the first error.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.remotecall\">\n<code>remotecall(id, func, args...)</code> </dt> <dd>\n<p>Call a function asynchronously on the given arguments on the specified process. Returns a <code>RemoteRef</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.wait\">\n<code>wait([x])</code> </dt> <dd>\n<p>Block the current task until some event occurs, depending on the type of the argument:</p> <ul class=\"simple\"> <li>\n<code>RemoteRef</code>: Wait for a value to become available for the specified remote reference.</li> <li>\n<code>Channel</code>: Wait for a value to be appended to the channel.</li> <li>\n<code>Condition</code>: Wait for <code>notify</code> on a condition.</li> <li>\n<code>Process</code>: Wait for a process or process chain to exit. The <code>exitcode</code> field of a process can be used to determine success or failure.</li> <li>\n<code>Task</code>: Wait for a <code>Task</code> to finish, returning its result value. If the task fails with an exception, the exception is propagated (re-thrown in the task that called <code>wait</code>).</li> <li>\n<code>RawFD</code>: Wait for changes on a file descriptor (see <code>poll_fd</code> for keyword arguments and return code)</li> </ul> <p>If no argument is passed, the task blocks for an undefined period. If the task’s state is set to <code>:waiting</code>, it can only be restarted by an explicit call to <code>schedule</code> or <code>yieldto</code>. If the task’s state is <code>:runnable</code>, it might be restarted unpredictably.</p> <p>Often <code>wait</code> is called within a <code>while</code> loop to ensure a waited-for condition is met before proceeding.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fetch\">\n<code>fetch(x)</code> </dt> <dd>\n<p>Waits and fetches a value from <code>x</code> depending on the type of <code>x</code>. Does not remove the item fetched:</p> <ul class=\"simple\"> <li>\n<code>RemoteRef</code>: Wait for and get the value of a remote reference. If the remote value is an exception, throws a <code>RemoteException</code> which captures the remote exception and backtrace.</li> <li>\n<code>Channel</code> : Wait for and get the first available item from the channel.</li> </ul> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.remotecall_wait\">\n<code>remotecall_wait(id, func, args...)</code> </dt> <dd>\n<p>Perform <code>wait(remotecall(...))</code> in one message.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.remotecall_fetch\">\n<code>remotecall_fetch(id, func, args...)</code> </dt> <dd>\n<p>Perform <code>fetch(remotecall(...))</code> in one message. Any remote exceptions are captured in a <code>RemoteException</code> and thrown.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.put!\">\n<code>put!(RemoteRef, value)</code> </dt> <dd>\n<p>Store a value to a remote reference. Implements “shared queue of length 1” semantics: if a value is already present, blocks until the value is removed with <code>take!</code>. Returns its first argument.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>put!(Channel, value)</code> </dt> <dd>\n<p>Appends an item to the channel. Blocks if the channel is full.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.take!\">\n<code>take!(RemoteRef)</code> </dt> <dd>\n<p>Fetch the value of a remote reference, removing it so that the reference is empty again.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>take!(Channel)</code> </dt> <dd>\n<p>Removes and returns a value from a <code>Channel</code>. Blocks till data is available.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isready\">\n<code>isready(r::RemoteRef)</code> </dt> <dd>\n<p>Determine whether a <code>RemoteRef</code> has a value stored to it. Note that this function can cause race conditions, since by the time you receive its result it may no longer be true. It is recommended that this function only be used on a <code>RemoteRef</code> that is assigned once.</p> <p>If the argument <code>RemoteRef</code> is owned by a different node, this call will block to wait for the answer. It is recommended to wait for <code>r</code> in a separate task instead, or to use a local <code>RemoteRef</code> as a proxy:</p> <pre data-language=\"julia\">rr = RemoteRef()\n@async put!(rr, remotecall_fetch(p, long_computation))\nisready(rr)  # will not block\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.close\">\n<code>close(Channel)</code> </dt> <dd>\n<p>Closes a channel. An exception is thrown by:</p> <ul class=\"simple\"> <li>\n<code>put!</code> on a closed channel.</li> <li>\n<code>take!</code> and <code>fetch</code> on an empty, closed channel.</li> </ul> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.RemoteRef\">\n<code>RemoteRef()</code> </dt> <dd>\n<p>Make an uninitialized remote reference on the local machine.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>RemoteRef(n)</code> </dt> <dd>\n<p>Make an uninitialized remote reference on process <code>n</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.timedwait\">\n<code>timedwait(testcb::Function, secs::Float64; pollint::Float64=0.1)</code> </dt> <dd>\n<p>Waits till <code>testcb</code> returns <code>true</code> or for <code>secs</code> seconds, whichever is earlier. <code>testcb</code> is polled every <code>pollint</code> seconds.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@spawn\">\n<code>@spawn()</code> </dt> <dd>\n<p>Creates a closure around an expression and runs it on an automatically-chosen process, returning a <code>RemoteRef</code> to the result.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@spawnat\">\n<code>@spawnat()</code> </dt> <dd>\n<p>Accepts two arguments, <code>p</code> and an expression. A closure is created around the expression and run asynchronously on process <code>p</code>. Returns a <code>RemoteRef</code> to the result.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@fetch\">\n<code>@fetch()</code> </dt> <dd>\n<p>Equivalent to <code>fetch(@spawn expr)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@fetchfrom\">\n<code>@fetchfrom()</code> </dt> <dd>\n<p>Equivalent to <code>fetch(@spawnat p expr)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@async\">\n<code>@async()</code> </dt> <dd>\n<p>Like <code>@schedule</code>, <code>@async</code> wraps an expression in a <code>Task</code> and adds it to the local machine’s scheduler queue. Additionally it adds the task to the set of items that the nearest enclosing <code>@sync</code> waits for. <code>@async</code> also wraps the expression in a <code>let x=x, y=y, ...</code> block to create a new scope with copies of all variables referenced in the expression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@sync\">\n<code>@sync()</code> </dt> <dd>\n<p>Wait until all dynamically-enclosed uses of <code>@async</code>, <code>@spawn</code>, <code>@spawnat</code> and <code>@parallel</code> are complete. All exceptions thrown by enclosed async operations are collected and thrown as a <code>CompositeException</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@parallel\">\n<code>@parallel()</code> </dt> <dd>\n<p>A parallel for loop of the form :</p> <pre data-language=\"julia\">@parallel [reducer] for var = range\n    body\nend\n</pre> <p>The specified range is partitioned and locally executed across all workers. In case an optional reducer function is specified, <code>@parallel</code> performs local reductions on each worker with a final reduction on the calling process.</p> <p>Note that without a reducer function, <code>@parallel</code> executes asynchronously, i.e. it spawns independent tasks on all available workers and returns immediately without waiting for completion. To wait for completion, prefix the call with <code>@sync</code>, like :</p> <pre data-language=\"julia\">@sync @parallel for var = range\n    body\nend\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@everywhere\">\n<code>@everywhere()</code> </dt> <dd>\n<p>Execute an expression on all processes. Errors on any of the processes are collected into a <code>CompositeException</code> and thrown.</p> </dd>\n</dl>   <h2 id=\"shared-arrays\">Shared Arrays</h2> <dl class=\"function\"> <dt id=\"Base.SharedArray\">\n<code>SharedArray(T::Type, dims::NTuple; init=false, pids=Int[])</code> </dt> <dd>\n<p>Construct a <code>SharedArray</code> of a bitstype <code>T</code> and size <code>dims</code> across the processes specified by <code>pids</code> - all of which have to be on the same host.</p> <p>If <code>pids</code> is left unspecified, the shared array will be mapped across all processes on the current host, including the master. But, <code>localindexes</code> and <code>indexpids</code> will only refer to worker processes. This facilitates work distribution code to use workers for actual computation with the master process acting as a driver.</p> <p>If an <code>init</code> function of the type <code>initfn(S::SharedArray)</code> is specified, it is called on all the participating workers.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>SharedArray(filename::AbstractString, T::Type, dims::NTuple, [offset=0]; mode=nothing, init=false, pids=Int[])</code> </dt> <dd>\n<p>Construct a <code>SharedArray</code> backed by the file <code>filename</code>, with element type <code>T</code> (must be a <code>bitstype</code>) and size <code>dims</code>, across the processes specified by <code>pids</code> - all of which have to be on the same host. This file is mmapped into the host memory, with the following consequences:</p> <ul class=\"simple\"> <li>The array data must be represented in binary format (e.g., an ASCII format like CSV cannot be supported)</li> <li>Any changes you make to the array values (e.g., <code>A[3] = 0</code>) will also change the values on disk</li> </ul> <p>If <code>pids</code> is left unspecified, the shared array will be mapped across all processes on the current host, including the master. But, <code>localindexes</code> and <code>indexpids</code> will only refer to worker processes. This facilitates work distribution code to use workers for actual computation with the master process acting as a driver.</p> <p><code>mode</code> must be one of <code>\"r\"</code>, <code>\"r+\"</code>, <code>\"w+\"</code>, or <code>\"a+\"</code>, and defaults to <code>\"r+\"</code> if the file specified by <code>filename</code> already exists, or <code>\"w+\"</code> if not. If an <code>init</code> function of the type <code>initfn(S::SharedArray)</code> is specified, it is called on all the participating workers. You cannot specify an <code>init</code> function if the file is not writable.</p> <p><code>offset</code> allows you to skip the specified number of bytes at the beginning of the file.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>procs(S::SharedArray)</code> </dt> <dd>\n<p>Get the vector of processes that have mapped the shared array</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sdata\">\n<code>sdata(S::SharedArray)</code> </dt> <dd>\n<p>Returns the actual <code>Array</code> object backing <code>S</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.indexpids\">\n<code>indexpids(S::SharedArray)</code> </dt> <dd>\n<p>Returns the index of the current worker into the <code>pids</code> vector, i.e., the list of workers mapping the SharedArray</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.localindexes\">\n<code>localindexes(S::SharedArray)</code> </dt> <dd>\n<p>Returns a range describing the “default” indexes to be handled by the current process. This range should be interpreted in the sense of linear indexing, i.e., as a sub-range of <code>1:length(S)</code>. In multi-process contexts, returns an empty range in the parent process (or any process for which <code>indexpids</code> returns 0).</p> <p>It’s worth emphasizing that <code>localindexes</code> exists purely as a convenience, and you can partition work on the array among workers any way you wish. For a SharedArray, all indexes should be equally fast for each worker process.</p> </dd>\n</dl>   <h2 id=\"cluster-manager-interface\">Cluster Manager Interface</h2> <p>This interface provides a mechanism to launch and manage Julia workers on different cluster environments. LocalManager, for launching additional workers on the same host and SSHManager, for launching on remote hosts via ssh are present in Base. TCP/IP sockets are used to connect and transport messages between processes. It is possible for Cluster Managers to provide a different transport.</p> <dl class=\"function\"> <dt id=\"Base.launch\">\n<code>launch(manager::FooManager, params::Dict, launched::Vector{WorkerConfig}, launch_ntfy::Condition)</code> </dt> <dd>\n<p>Implemented by cluster managers. For every Julia worker launched by this function, it should append a <code>WorkerConfig</code> entry to <code>launched</code> and notify <code>launch_ntfy</code>. The function MUST exit once all workers, requested by <code>manager</code> have been launched. <code>params</code> is a dictionary of all keyword arguments <code>addprocs</code> was called with.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.manage\">\n<code>manage(manager::FooManager, pid::Int, config::WorkerConfig. op::Symbol)</code> </dt> <dd>\n<p>Implemented by cluster managers. It is called on the master process, during a worker’s lifetime, with appropriate <code>op</code> values:</p> <ul class=\"simple\"> <li>with <code>:register</code>/<code>:deregister</code> when a worker is added / removed from the Julia worker pool.</li> <li>with <code>:interrupt</code> when <code>interrupt(workers)</code> is called. The <code>ClusterManager</code> should signal the appropriate worker with an interrupt signal.</li> <li>with <code>:finalize</code> for cleanup purposes.</li> </ul> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.kill\">\n<code>kill(manager::FooManager, pid::Int, config::WorkerConfig)</code> </dt> <dd>\n<p>Implemented by cluster managers. It is called on the master process, by <code>rmprocs</code>. It should cause the remote worker specified by <code>pid</code> to exit. <code>Base.kill(manager::ClusterManager.....)</code> executes a remote <code>exit()</code> on <code>pid</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.init_worker\">\n<code>init_worker(manager::FooManager)</code> </dt> <dd>\n<p>Called by cluster managers implementing custom transports. It initializes a newly launched process as a worker. Command line argument <code>--worker</code> has the effect of initializing a process as a worker using TCP/IP sockets for transport.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.connect\">\n<code>connect(manager::FooManager, pid::Int, config::WorkerConfig) -&gt; (instrm::AsyncStream, outstrm::AsyncStream)</code> </dt> <dd>\n<p>Implemented by cluster managers using custom transports. It should establish a logical connection to worker with id <code>pid</code>, specified by <code>config</code> and return a pair of <code>AsyncStream</code> objects. Messages from <code>pid</code> to current process will be read off <code>instrm</code>, while messages to be sent to <code>pid</code> will be written to <code>outstrm</code>. The custom transport implementation must ensure that messages are delivered and received completely and in order. <code>Base.connect(manager::ClusterManager.....)</code> sets up TCP/IP socket connections in-between workers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Base.process_messages\">\n<code>Base.process_messages(instrm::AsyncStream, outstrm::AsyncStream)</code> </dt> <dd>\n<p>Called by cluster managers using custom transports. It should be called when the custom transport implementation receives the first message from a remote worker. The custom transport must manage a logical connection to the remote worker and provide two <code>AsyncStream</code> objects, one for incoming messages and the other for messages addressed to the remote worker.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/parallel/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/parallel/</a>\n  </p>\n</div>\n","stdlib/file/index":"<h1>Filesystem</h1> <dl class=\"function\"> <dt id=\"Base.pwd\">\n<code>pwd() → AbstractString</code> </dt> <dd>\n<p>Get the current working directory.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cd\">\n<code>cd([dir::AbstractString=homedir()])</code> </dt> <dd>\n<p>Set the current working directory.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>cd(f[, dir=homedir()])</code> </dt> <dd>\n<p>Temporarily changes the current working directory and applies function <code>f</code> before returning.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readdir\">\n<code>readdir([dir]) → Vector{ByteString}</code> </dt> <dd>\n<p>Returns the files and directories in the directory <code>dir</code> (or the current working directory if not given).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mkdir\">\n<code>mkdir(path[, mode])</code> </dt> <dd>\n<p>Make a new directory with name <code>path</code> and permissions <code>mode</code>. <code>mode</code> defaults to 0o777, modified by the current file creation mask.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mkpath\">\n<code>mkpath(path[, mode])</code> </dt> <dd>\n<p>Create all directories in the given <code>path</code>, with permissions <code>mode</code>. <code>mode</code> defaults to 0o777, modified by the current file creation mask.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.symlink\">\n<code>symlink(target, link)</code> </dt> <dd>\n<p>Creates a symbolic link to <code>target</code> with the name <code>link</code>.</p> <p><strong>note</strong></p> <p>This function raises an error under operating systems that do not support soft symbolic links, such as Windows XP.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readlink\">\n<code>readlink(path) → AbstractString</code> </dt> <dd>\n<p>Returns the value of a symbolic link <code>path</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.chmod\">\n<code>chmod(path, mode)</code> </dt> <dd>\n<p>Change the permissions mode of <code>path</code> to <code>mode</code>. Only integer <code>mode</code>s (e.g. 0o777) are currently supported.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.stat\">\n<code>stat(file)</code> </dt> <dd>\n<p>Returns a structure whose fields contain information about the file. The fields of the structure are:</p> <table class=\"docutils\">   <tr class=\"row-odd\">\n<td>size</td> <td>The size (in bytes) of the file</td> </tr> <tr class=\"row-even\">\n<td>device</td> <td>ID of the device that contains the file</td> </tr> <tr class=\"row-odd\">\n<td>inode</td> <td>The inode number of the file</td> </tr> <tr class=\"row-even\">\n<td>mode</td> <td>The protection mode of the file</td> </tr> <tr class=\"row-odd\">\n<td>nlink</td> <td>The number of hard links to the file</td> </tr> <tr class=\"row-even\">\n<td>uid</td> <td>The user id of the owner of the file</td> </tr> <tr class=\"row-odd\">\n<td>gid</td> <td>The group id of the file owner</td> </tr> <tr class=\"row-even\">\n<td>rdev</td> <td>If this file refers to a device, the ID of the device it refers to</td> </tr> <tr class=\"row-odd\">\n<td>blksize</td> <td>The file-system preferred block size for the file</td> </tr> <tr class=\"row-even\">\n<td>blocks</td> <td>The number of such blocks allocated</td> </tr> <tr class=\"row-odd\">\n<td>mtime</td> <td>Unix timestamp of when the file was last modified</td> </tr> <tr class=\"row-even\">\n<td>ctime</td> <td>Unix timestamp of when the file was created</td> </tr>  </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lstat\">\n<code>lstat(file)</code> </dt> <dd>\n<p>Like stat, but for symbolic links gets the info for the link itself rather than the file it refers to. This function must be called on a file path rather than a file object or a file descriptor.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ctime\">\n<code>ctime(file)</code> </dt> <dd>\n<p>Equivalent to <code>stat(file).ctime</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mtime\">\n<code>mtime(file)</code> </dt> <dd>\n<p>Equivalent to <code>stat(file).mtime</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.filemode\">\n<code>filemode(file)</code> </dt> <dd>\n<p>Equivalent to <code>stat(file).mode</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.filesize\">\n<code>filesize(path...)</code> </dt> <dd>\n<p>Equivalent to <code>stat(file).size</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.uperm\">\n<code>uperm(file)</code> </dt> <dd>\n<p>Gets the permissions of the owner of the file as a bitfield of</p> <table class=\"docutils\">   <tr class=\"row-odd\">\n<td>01</td> <td>Execute Permission</td> </tr> <tr class=\"row-even\">\n<td>02</td> <td>Write Permission</td> </tr> <tr class=\"row-odd\">\n<td>04</td> <td>Read Permission</td> </tr>  </table> <p>For allowed arguments, see <code>stat</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.gperm\">\n<code>gperm(file)</code> </dt> <dd>\n<p>Like uperm but gets the permissions of the group owning the file</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.operm\">\n<code>operm(file)</code> </dt> <dd>\n<p>Like uperm but gets the permissions for people who neither own the file nor are a member of the group owning the file</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cp\">\n<code>cp(src::AbstractString, dst::AbstractString; remove_destination::Bool=false, follow_symlinks::Bool=false)</code> </dt> <dd>\n<p>Copy the file, link, or directory from <em>src</em> to <em>dest</em>. <code>remove_destination=true</code> will first remove an existing <code>dst</code>.</p> <p>If <code>follow_symlinks=false</code>, and <code>src</code> is a symbolic link, <code>dst</code> will be created as a symbolic link. If <code>follow_symlinks=true</code> and <code>src</code> is a symbolic link, <code>dst</code> will be a copy of the file or directory <code>src</code> refers to.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.download\">\n<code>download(url[, localfile])</code> </dt> <dd>\n<p>Download a file from the given url, optionally renaming it to the given local file name. Note that this function relies on the availability of external tools such as <code>curl</code>, <code>wget</code> or <code>fetch</code> to download the file and is provided for convenience. For production use or situations in which more options are needed, please use a package that provides the desired functionality instead.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mv\">\n<code>mv(src::AbstractString, dst::AbstractString; remove_destination::Bool=false)</code> </dt> <dd>\n<p>Move the file, link, or directory from <code>src</code> to <code>dst</code>. <code>remove_destination=true</code> will first remove an existing <code>dst</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rm\">\n<code>rm(path::AbstractString; recursive=false)</code> </dt> <dd>\n<p>Delete the file, link, or empty directory at the given path. If <code>recursive=true</code> is passed and the path is a directory, then all contents are removed recursively.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.touch\">\n<code>touch(path::AbstractString)</code> </dt> <dd>\n<p>Update the last-modified timestamp on a file to the current time.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.tempname\">\n<code>tempname()</code> </dt> <dd>\n<p>Generate a unique temporary file path.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.tempdir\">\n<code>tempdir()</code> </dt> <dd>\n<p>Obtain the path of a temporary directory (possibly shared with other processes).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mktemp\">\n<code>mktemp([parent=tempdir()])</code> </dt> <dd>\n<p>Returns <code>(path, io)</code>, where <code>path</code> is the path of a new temporary file in <code>parent</code> and <code>io</code> is an open file object for this path.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>mktemp(f::Function[, parent=tempdir()])</code> </dt> <dd>\n<p>Apply the function <code>f</code> to the result of <code>mktemp(parent)</code> and remove the temporary file upon completion.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mktempdir\">\n<code>mktempdir([parent=tempdir()])</code> </dt> <dd>\n<p>Create a temporary directory in the <code>parent</code> directory and return its path.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>mktempdir(f::Function[, parent=tempdir()])</code> </dt> <dd>\n<p>Apply the function <code>f</code> to the result of <code>mktempdir(parent)</code> and remove the temporary directory upon completion.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isblockdev\">\n<code>isblockdev(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>path</code> is a block device, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ischardev\">\n<code>ischardev(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>path</code> is a character device, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isdir\">\n<code>isdir(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>path</code> is a directory, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isexecutable\">\n<code>isexecutable(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if the current user has permission to execute <code>path</code>, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isfifo\">\n<code>isfifo(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>path</code> is a FIFO, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isfile\">\n<code>isfile(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>path</code> is a regular file, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.islink\">\n<code>islink(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>path</code> is a symbolic link, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ismount\">\n<code>ismount(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>path</code> is a mount point, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ispath\">\n<code>ispath(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>path</code> is a valid filesystem path, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isreadable\">\n<code>isreadable(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if the current user has permission to read <code>path</code>, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.issetgid\">\n<code>issetgid(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>path</code> has the setgid flag set, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.issetuid\">\n<code>issetuid(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>path</code> has the setuid flag set, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.issocket\">\n<code>issocket(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>path</code> is a socket, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.issticky\">\n<code>issticky(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>path</code> has the sticky bit set, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.iswritable\">\n<code>iswritable(path) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if the current user has permission to write to <code>path</code>, <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.homedir\">\n<code>homedir() → AbstractString</code> </dt> <dd>\n<p>Return the current user’s home directory.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.dirname\">\n<code>dirname(path::AbstractString) → AbstractString</code> </dt> <dd>\n<p>Get the directory part of a path.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.basename\">\n<code>basename(path::AbstractString) → AbstractString</code> </dt> <dd>\n<p>Get the file name part of a path.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>@__FILE__ -&gt; AbstractString</code> </dt> <dd>\n<p><code>@__FILE__</code> expands to a string with the absolute path and file name of the script being run. Returns <code>nothing</code> if run from a REPL or an empty string if evaluated by <code>julia -e &lt;expr&gt;</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>@__LINE__ -&gt; Int</code> </dt> <dd>\n<p><code>@__LINE__</code> expands to the line number of the call-site.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isabspath\">\n<code>isabspath(path::AbstractString) → Bool</code> </dt> <dd>\n<p>Determines whether a path is absolute (begins at the root directory).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isdirpath\">\n<code>isdirpath(path::AbstractString) → Bool</code> </dt> <dd>\n<p>Determines whether a path refers to a directory (for example, ends with a path separator).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.joinpath\">\n<code>joinpath(parts...) → AbstractString</code> </dt> <dd>\n<p>Join path components into a full path. If some argument is an absolute path, then prior components are dropped.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.abspath\">\n<code>abspath(path::AbstractString) → AbstractString</code> </dt> <dd>\n<p>Convert a path to an absolute path by adding the current directory if necessary.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.normpath\">\n<code>normpath(path::AbstractString) → AbstractString</code> </dt> <dd>\n<p>Normalize a path, removing ”.” and ”..” entries.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.realpath\">\n<code>realpath(path::AbstractString) → AbstractString</code> </dt> <dd>\n<p>Canonicalize a path by expanding symbolic links and removing ”.” and ”..” entries.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.relpath\">\n<code>relpath(path::AbstractString, startpath::AbstractString = \".\") → AbstractString</code> </dt> <dd>\n<p>Return a relative filepath to path either from the current directory or from an optional start directory. This is a path computation: the filesystem is not accessed to confirm the existence or nature of path or startpath.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.expanduser\">\n<code>expanduser(path::AbstractString) → AbstractString</code> </dt> <dd>\n<p>On Unix systems, replace a tilde character at the start of a path with the current user’s home directory.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.splitdir\">\n<code>splitdir(path::AbstractString) -&gt; (AbstractString, AbstractString)</code> </dt> <dd>\n<p>Split a path into a tuple of the directory name and file name.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.splitdrive\">\n<code>splitdrive(path::AbstractString) -&gt; (AbstractString, AbstractString)</code> </dt> <dd>\n<p>On Windows, split a path into the drive letter part and the path part. On Unix systems, the first component is always the empty string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.splitext\">\n<code>splitext(path::AbstractString) -&gt; (AbstractString, AbstractString)</code> </dt> <dd>\n<p>If the last component of a path contains a dot, split the path into everything before the dot and everything including and after the dot. Otherwise, return a tuple of the argument unmodified and the empty string.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/file/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/file/</a>\n  </p>\n</div>\n","stdlib/pkg/index":"<h1>Package Manager Functions</h1> <p>All package manager functions are defined in the <code>Pkg</code> module. None of the <code>Pkg</code> module’s functions are exported; to use them, you’ll need to prefix each function call with an explicit <code>Pkg.</code>, e.g. <code>Pkg.status()</code> or <code>Pkg.dir()</code>.</p> <dl class=\"function\"> <dt id=\"Base.Pkg.dir\">\n<code>dir() → AbstractString</code> </dt> <dd>\n<p>Returns the absolute path of the package directory. This defaults to <code>joinpath(homedir(),\".julia\",\"v$(VERSION.major).$(VERSION.minor)\")</code> on all platforms (i.e. <code>~/.julia/v0.4</code> in UNIX shell syntax). If the <code>JULIA_PKGDIR</code> environment variable is set, then that path is used in the returned value as <code>joinpath(ENV[\"JULIA_PKGDIR\"],\"v$(VERSION.major).$(VERSION.minor)\")</code>. If <code>JULIA_PKGDIR</code> is a relative path, it is interpreted relative to whatever the current working directory is.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>dir(names...) → AbstractString</code> </dt> <dd>\n<p>Equivalent to <code>normpath(Pkg.dir(),names...)</code> – i.e. it appends path components to the package directory and normalizes the resulting path. In particular, <code>Pkg.dir(pkg)</code> returns the path to the package <code>pkg</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.init\">\n<code>init(meta::AbstractString=DEFAULT_META, branch::AbstractString=META_BRANCH)</code> </dt> <dd>\n<p>Initialize <code>Pkg.dir()</code> as a package directory. This will be done automatically when the <code>JULIA_PKGDIR</code> is not set and <code>Pkg.dir()</code> uses its default value. As part of this process, clones a local METADATA git repository from the site and branch specified by its arguments, which are typically not provided. Explicit (non-default) arguments can be used to support a custom METADATA setup.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.resolve\">\n<code>resolve()</code> </dt> <dd>\n<p>Determines an optimal, consistent set of package versions to install or upgrade to. The optimal set of package versions is based on the contents of <code>Pkg.dir(\"REQUIRE\")</code> and the state of installed packages in <code>Pkg.dir()</code>, Packages that are no longer required are moved into <code>Pkg.dir(\".trash\")</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.edit\">\n<code>edit()</code> </dt> <dd>\n<p>Opens <code>Pkg.dir(\"REQUIRE\")</code> in the editor specified by the <code>VISUAL</code> or <code>EDITOR</code> environment variables; when the editor command returns, it runs <code>Pkg.resolve()</code> to determine and install a new optimal set of installed package versions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.add\">\n<code>add(pkg, vers...)</code> </dt> <dd>\n<p>Add a requirement entry for <code>pkg</code> to <code>Pkg.dir(\"REQUIRE\")</code> and call <code>Pkg.resolve()</code>. If <code>vers</code> are given, they must be <code>VersionNumber</code> objects and they specify acceptable version intervals for <code>pkg</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.rm\">\n<code>rm(pkg)</code> </dt> <dd>\n<p>Remove all requirement entries for <code>pkg</code> from <code>Pkg.dir(\"REQUIRE\")</code> and call <code>Pkg.resolve()</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.clone\">\n<code>clone(url[, pkg])</code> </dt> <dd>\n<p>Clone a package directly from the git URL <code>url</code>. The package does not need to be a registered in <code>Pkg.dir(\"METADATA\")</code>. The package repo is cloned by the name <code>pkg</code> if provided; if not provided, <code>pkg</code> is determined automatically from <code>url</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>clone(pkg)</code> </dt> <dd>\n<p>If <code>pkg</code> has a URL registered in <code>Pkg.dir(\"METADATA\")</code>, clone it from that URL on the default branch. The package does not need to have any registered versions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.available\">\n<code>available() → Vector{ASCIIString}</code> </dt> <dd>\n<p>Returns the names of available packages.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>available(pkg) → Vector{VersionNumber}</code> </dt> <dd>\n<p>Returns the version numbers available for package <code>pkg</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.installed\">\n<code>installed() → Dict{ASCIIString,VersionNumber}</code> </dt> <dd>\n<p>Returns a dictionary mapping installed package names to the installed version number of each package.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>installed(pkg) → Void | VersionNumber</code> </dt> <dd>\n<p>If <code>pkg</code> is installed, return the installed version number, otherwise return <code>nothing</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.status\">\n<code>status()</code> </dt> <dd>\n<p>Prints out a summary of what packages are installed and what version and state they’re in.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.update\">\n<code>update()</code> </dt> <dd>\n<p>Update package the metadata repo – kept in <code>Pkg.dir(\"METADATA\")</code> – then update any fixed packages that can safely be pulled from their origin; then call <code>Pkg.resolve()</code> to determine a new optimal set of packages versions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.checkout\">\n<code>checkout(pkg[, branch=\"master\"])</code> </dt> <dd>\n<p>Checkout the <code>Pkg.dir(pkg)</code> repo to the branch <code>branch</code>. Defaults to checking out the “master” branch. To go back to using the newest compatible released version, use <code>Pkg.free(pkg)</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.pin\">\n<code>pin(pkg)</code> </dt> <dd>\n<p>Pin <code>pkg</code> at the current version. To go back to using the newest compatible released version, use <code>Pkg.free(pkg)</code></p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>pin(pkg, version)</code> </dt> <dd>\n<p>Pin <code>pkg</code> at registered version <code>version</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.free\">\n<code>free(pkg)</code> </dt> <dd>\n<p>Free the package <code>pkg</code> to be managed by the package manager again. It calls <code>Pkg.resolve()</code> to determine optimal package versions after. This is an inverse for both <code>Pkg.checkout</code> and <code>Pkg.pin</code>.</p> <p>You can also supply an iterable collection of package names, e.g., <code>Pkg.free((\"Pkg1\", \"Pkg2\"))</code> to free multiple packages at once.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.build\">\n<code>build()</code> </dt> <dd>\n<p>Run the build scripts for all installed packages in depth-first recursive order.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>build(pkgs...)</code> </dt> <dd>\n<p>Run the build script in <code>deps/build.jl</code> for each package in <code>pkgs</code> and all of their dependencies in depth-first recursive order. This is called automatically by <code>Pkg.resolve()</code> on all installed or updated packages.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.generate\">\n<code>generate(pkg, license)</code> </dt> <dd>\n<p>Generate a new package named <code>pkg</code> with one of these license keys: <code>\"MIT\"</code>, <code>\"BSD\"</code> or <code>\"ASL\"</code>. If you want to make a package with a different license, you can edit it afterwards. Generate creates a git repo at <code>Pkg.dir(pkg)</code> for the package and inside it <code>LICENSE.md</code>, <code>README.md</code>, <code>REQUIRE</code>, the julia entrypoint <code>$pkg/src/$pkg.jl</code>, and Travis and AppVeyor CI configuration files <code>.travis.yml</code> and <code>appveyor.yml</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.register\">\n<code>register(pkg[, url])</code> </dt> <dd>\n<p>Register <code>pkg</code> at the git URL <code>url</code>, defaulting to the configured origin URL of the git repo <code>Pkg.dir(pkg)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.tag\">\n<code>tag(pkg[, ver[, commit]])</code> </dt> <dd>\n<p>Tag <code>commit</code> as version <code>ver</code> of package <code>pkg</code> and create a version entry in <code>METADATA</code>. If not provided, <code>commit</code> defaults to the current commit of the <code>pkg</code> repo. If <code>ver</code> is one of the symbols <code>:patch</code>, <code>:minor</code>, <code>:major</code> the next patch, minor or major version is used. If <code>ver</code> is not provided, it defaults to <code>:patch</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.publish\">\n<code>publish()</code> </dt> <dd>\n<p>For each new package version tagged in <code>METADATA</code> not already published, make sure that the tagged package commits have been pushed to the repo at the registered URL for the package and if they all have, open a pull request to <code>METADATA</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Pkg.test\">\n<code>test()</code> </dt> <dd>\n<p>Run the tests for all installed packages ensuring that each package’s test dependencies are installed for the duration of the test. A package is tested by running its <code>test/runtests.jl</code> file and test dependencies are specified in <code>test/REQUIRE</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>test(pkgs...)</code> </dt> <dd>\n<p>Run the tests for each package in <code>pkgs</code> ensuring that each package’s test dependencies are installed for the duration of the test. A package is tested by running its <code>test/runtests.jl</code> file and test dependencies are specified in <code>test/REQUIRE</code>.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/pkg/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/pkg/</a>\n  </p>\n</div>\n","stdlib/base/index":"<h1>Essentials</h1>  <h2 id=\"introduction\">Introduction</h2> <p>The Julia standard library contains a range of functions and macros appropriate for performing scientific and numerical computing, but is also as broad as those of many general purpose programming languages. Additional functionality is available from a growing collection of available packages. Functions are grouped by topic below.</p> <p>Some general notes:</p> <ul class=\"simple\"> <li>Except for functions in built-in modules (<a class=\"reference internal\" href=\"../pkg/index#module-Base.Pkg\" title=\"Base.Pkg\"><code>Pkg</code></a>, <a class=\"reference internal\" href=\"../collections/index#module-Base.Collections\" title=\"Base.Collections\"><code>Collections</code></a>, <a class=\"reference internal\" href=\"../test/index#module-Base.Test\" title=\"Base.Test\"><code>Test</code></a> and <code>Profile</code>), all functions documented here are directly available for use in programs.</li> <li>To use module functions, use <code>import Module</code> to import the module, and <code>Module.fn(x)</code> to use the functions.</li> <li>Alternatively, <code>using Module</code> will import all exported <code>Module</code> functions into the current namespace.</li> <li>By convention, function names ending with an exclamation point (<code>!</code>) modify their arguments. Some functions have both modifying (e.g., <code>sort!</code>) and non-modifying (<code>sort</code>) versions.</li> </ul>   <h2 id=\"getting-around\">Getting Around</h2> <dl class=\"function\"> <dt id=\"Base.exit\">\n<code>exit([code])</code> </dt> <dd>\n<p>Quit (or control-D at the prompt). The default exit code is zero, indicating that the processes completed successfully.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.quit\">\n<code>quit()</code> </dt> <dd>\n<p>Quit the program indicating that the processes completed successfully. This function calls <code>exit(0)</code> (see <a class=\"reference internal\" href=\"#Base.exit\" title=\"Base.exit\"><code>exit()</code></a>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.atexit\">\n<code>atexit(f)</code> </dt> <dd>\n<p>Register a zero-argument function <code>f()</code> to be called at process exit. <code>atexit()</code> hooks are called in last in first out (LIFO) order and run before object finalizers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.atreplinit\">\n<code>atreplinit(f)</code> </dt> <dd>\n<p>Register a one-argument function to be called before the REPL interface is initialized in interactive sessions; this is useful to customize the interface. The argument of <code>f</code> is the REPL object. This function should be called from within the <code>.juliarc.jl</code> initialization file.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isinteractive\">\n<code>isinteractive() → Bool</code> </dt> <dd>\n<p>Determine whether Julia is running an interactive session.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.whos\">\n<code>whos([io,] [Module,] [pattern::Regex])</code> </dt> <dd>\n<p>Print information about exported global variables in a module, optionally restricted to those matching <code>pattern</code>.</p> <p>The memory consumption estimate is an approximate lower bound on the size of the internal structure of the object.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Base.summarysize\">\n<code>Base.summarysize(obj; exclude=Union{Module, Function, DataType, TypeName}) → Int</code> </dt> <dd>\n<p>Compute the amount of memory used by all unique objects reachable from the argument. Keyword argument <code>exclude</code> specifies a type of objects to exclude from the traversal.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.edit\">\n<code>edit(path::AbstractString[, line])</code> </dt> <dd>\n<p>Edit a file or directory optionally providing a line number to edit the file at. Returns to the julia prompt when you quit the editor.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>edit(function[, types])</code> </dt> <dd>\n<p>Edit the definition of a function, optionally specifying a tuple of types to indicate which method to edit.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@edit\">\n<code>@edit()</code> </dt> <dd>\n<p>Evaluates the arguments to the function call, determines their types, and calls the <code>edit</code> function on the resulting expression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.less\">\n<code>less(file::AbstractString[, line])</code> </dt> <dd>\n<p>Show a file using the default pager, optionally providing a starting line number. Returns to the julia prompt when you quit the pager.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>less(function[, types])</code> </dt> <dd>\n<p>Show the definition of a function using the default pager, optionally specifying a tuple of types to indicate which method to see.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@less\">\n<code>@less()</code> </dt> <dd>\n<p>Evaluates the arguments to the function call, determines their types, and calls the <code>less</code> function on the resulting expression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.clipboard\">\n<code>clipboard(x)</code> </dt> <dd>\n<p>Send a printed form of <code>x</code> to the operating system clipboard (“copy”).</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>clipboard() → AbstractString</code> </dt> <dd>\n<p>Return a string with the contents of the operating system clipboard (“paste”).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reload\">\n<code>reload(name::AbstractString)</code> </dt> <dd>\n<p>Force reloading of a package, even if it has been loaded before. This is intended for use during package development as code is modified.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.require\">\n<code>require(module::Symbol)</code> </dt> <dd>\n<p>This function is part of the implementation of <code>using</code> / <code>import</code>, if a module is not already defined in <code>Main</code>. It can also be called directly to force reloading a module, regardless of whether it has been loaded before (for example, when interactively developing libraries).</p> <p>Loads a source files, in the context of the <code>Main</code> module, on every active node, searching standard locations for files. <code>require</code> is considered a top-level operation, so it sets the current <code>include</code> path but does not use it to search for files (see help for <code>include</code>). This function is typically used to load library code, and is implicitly called by <code>using</code> to load packages.</p> <p>When searching for files, <code>require</code> first looks in the current working directory, then looks for package code under <code>Pkg.dir()</code>, then tries paths in the global array <code>LOAD_PATH</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Base.compilecache\">\n<code>Base.compilecache(module::ByteString)</code> </dt> <dd>\n<p>Creates a precompiled cache file for module (see help for <code>require</code>) and all of its dependencies. This can be used to reduce package load times. Cache files are stored in <code>LOAD_CACHE_PATH[1]</code>, which defaults to <code>~/.julia/lib/VERSION</code>. See <a class=\"reference internal\" href=\"../../manual/modules/index#man-modules-initialization-precompilation\"><span>Module initialization and precompilation</span></a> for important notes.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.__precompile__\">\n<code>__precompile__(isprecompilable::Bool=true)</code> </dt> <dd>\n<p>Specify whether the file calling this function is precompilable. If <code>isprecompilable</code> is <code>true</code>, then <code>__precompile__</code> throws an exception when the file is loaded by <code>using</code>/<code>import</code>/<code>require</code> <em>unless</em> the file is being precompiled, and in a module file it causes the module to be automatically precompiled when it is imported. Typically, <code>__precompile__()</code> should occur before the <code>module</code> declaration in the file, or better yet <code>VERSION &gt;= v\"0.4\" &amp;&amp; __precompile__()</code> in order to be backward-compatible with Julia 0.3.</p> <p>If a module or file is <em>not</em> safely precompilable, it should call <code>__precompile__(false)</code> in order to throw an error if Julia attempts to precompile it.</p> <p><code>__precompile__()</code> should <em>not</em> be used in a module unless all of its dependencies are also using <code>__precompile__()</code>. Failure to do so can result in a runtime error when loading the module.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.include\">\n<code>include(path::AbstractString)</code> </dt> <dd>\n<p>Evaluate the contents of a source file in the current context. During including, a task-local include path is set to the directory containing the file. Nested calls to <code>include</code> will search relative to that path. All paths refer to files on node 1 when running in parallel, and files will be fetched from node 1. This function is typically used to load source interactively, or to combine files in packages that are broken into multiple source files.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.include_string\">\n<code>include_string(code::AbstractString[, filename])</code> </dt> <dd>\n<p>Like <code>include</code>, except reads code from the given string rather than from a file. Since there is no file path involved, no path processing or fetching from node 1 is done.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.include_dependency\">\n<code>include_dependency(path::AbstractString)</code> </dt> <dd>\n<p>In a module, declare that the file specified by <code>path</code> (relative or absolute) is a dependency for precompilation; that is, the module will need to be recompiled if this file changes.</p> <p>This is only needed if your module depends on a file that is not used via <code>include</code>. It has no effect outside of compilation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.apropos\">\n<code>apropos(string)</code> </dt> <dd>\n<p>Search through all documentation for a string, ignoring case.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.which\">\n<code>which(f, types)</code> </dt> <dd>\n<p>Returns the method of <code>f</code> (a <code>Method</code> object) that would be called for arguments of the given <code>types</code>.</p> <p>If <code>types</code> is an abstract type, then the method that would be called by <code>invoke</code> is returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>which(symbol)</code> </dt> <dd>\n<p>Return the module in which the binding for the variable referenced by <code>symbol</code> was created.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@which\">\n<code>@which()</code> </dt> <dd>\n<p>Applied to a function call, it evaluates the arguments to the specified function call, and returns the <code>Method</code> object for the method that would be called for those arguments. Applied to a variable, it returns the module in which the variable was bound. It calls out to the <code>which</code> function.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.methods\">\n<code>methods(f[, types])</code> </dt> <dd>\n<p>Returns the method table for <code>f</code>.</p> <p>If <code>types</code> is specified, returns an array of methods whose types match.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.methodswith\">\n<code>methodswith(typ[, module or function][, showparents])</code> </dt> <dd>\n<p>Return an array of methods with an argument of type <code>typ</code>. If optional <code>showparents</code> is <code>true</code>, also return arguments with a parent type of <code>typ</code>, excluding type <code>Any</code>.</p> <p>The optional second argument restricts the search to a particular module or function.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@show\">\n<code>@show()</code> </dt> <dd>\n<p>Show an expression and result, returning the result.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.versioninfo\">\n<code>versioninfo([verbose::Bool])</code> </dt> <dd>\n<p>Print information about the version of Julia in use. If the <code>verbose</code> argument is <code>true</code>, detailed system information is shown as well.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.workspace\">\n<code>workspace()</code> </dt> <dd>\n<p>Replace the top-level module (<code>Main</code>) with a new one, providing a clean workspace. The previous <code>Main</code> module is made available as <code>LastMain</code>. A previously-loaded package can be accessed using a statement such as <code>using LastMain.Package</code>.</p> <p>This function should only be used interactively.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.ans\">\n<code>ans</code> </dt> <dd>\n<p>A variable referring to the last computed value, automatically set at the interactive prompt.</p> </dd>\n</dl>   <h2 id=\"all-objects\">All Objects</h2> <dl class=\"function\"> <dt id=\"Base.is\">\n<code>is(x, y) → Bool</code> </dt> <dt id=\"Base.===\">\n<code>===(x, y) → Bool</code> </dt> <dt id=\"Base.≡\">\n<code>≡(x, y) → Bool</code> </dt> <dd>\n<p>Determine whether <code>x</code> and <code>y</code> are identical, in the sense that no program could distinguish them. Compares mutable objects by address in memory, and compares immutable objects (such as numbers) by contents at the bit level. This function is sometimes called <code>egal</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isa\">\n<code>isa(x, type) → Bool</code> </dt> <dd>\n<p>Determine whether <code>x</code> is of the given <code>type</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isequal\">\n<code>isequal(x, y)</code> </dt> <dd>\n<p>Similar to <code>==</code>, except treats all floating-point <code>NaN</code> values as equal to each other, and treats <code>-0.0</code> as unequal to <code>0.0</code>. The default implementation of <code>isequal</code> calls <code>==</code>, so if you have a type that doesn’t have these floating-point subtleties then you probably only need to define <code>==</code>.</p> <p><code>isequal</code> is the comparison function used by hash tables (<code>Dict</code>). <code>isequal(x,y)</code> must imply that <code>hash(x) == hash(y)</code>.</p> <p>This typically means that if you define your own <code>==</code> function then you must define a corresponding <code>hash</code> (and vice versa). Collections typically implement <code>isequal</code> by calling <code>isequal</code> recursively on all contents.</p> <p>Scalar types generally do not need to implement <code>isequal</code> separate from <code>==</code>, unless they represent floating-point numbers amenable to a more efficient implementation than that provided as a generic fallback (based on <code>isnan</code>, <code>signbit</code>, and <code>==</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isless\">\n<code>isless(x, y)</code> </dt> <dd>\n<p>Test whether <code>x</code> is less than <code>y</code>, according to a canonical total order. Values that are normally unordered, such as <code>NaN</code>, are ordered in an arbitrary but consistent fashion. This is the default comparison used by <code>sort</code>. Non-numeric types with a canonical total order should implement this function. Numeric types only need to implement it if they have special values such as <code>NaN</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ifelse\">\n<code>ifelse(condition::Bool, x, y)</code> </dt> <dd>\n<p>Return <code>x</code> if <code>condition</code> is <code>true</code>, otherwise return <code>y</code>. This differs from <code>?</code> or <code>if</code> in that it is an ordinary function, so all the arguments are evaluated first. In some cases, using <code>ifelse</code> instead of an <code>if</code> statement can eliminate the branch in generated code and provide higher performance in tight loops.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lexcmp\">\n<code>lexcmp(x, y)</code> </dt> <dd>\n<p>Compare <code>x</code> and <code>y</code> lexicographically and return -1, 0, or 1 depending on whether <code>x</code> is less than, equal to, or greater than <code>y</code>, respectively. This function should be defined for lexicographically comparable types, and <code>lexless</code> will call <code>lexcmp</code> by default.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lexless\">\n<code>lexless(x, y)</code> </dt> <dd>\n<p>Determine whether <code>x</code> is lexicographically less than <code>y</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.typeof\">\n<code>typeof(x)</code> </dt> <dd>\n<p>Get the concrete type of <code>x</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.tuple\">\n<code>tuple(xs...)</code> </dt> <dd>\n<p>Construct a tuple of the given objects.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ntuple\">\n<code>ntuple(f::Function, n)</code> </dt> <dd>\n<p>Create a tuple of length <code>n</code>, computing each element as <code>f(i)</code>, where <code>i</code> is the index of the element.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.object_id\">\n<code>object_id(x)</code> </dt> <dd>\n<p>Get a unique integer id for <code>x</code>. <code>object_id(x)==object_id(y)</code> if and only if <code>is(x,y)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hash\">\n<code>hash(x[, h::UInt])</code> </dt> <dd>\n<p>Compute an integer hash code such that <code>isequal(x,y)</code> implies <code>hash(x)==hash(y)</code>. The optional second argument <code>h</code> is a hash code to be mixed with the result.</p> <p>New types should implement the 2-argument form, typically by calling the 2-argument <code>hash</code> method recursively in order to mix hashes of the contents with each other (and with <code>h</code>). Typically, any type that implements <code>hash</code> should also implement its own <code>==</code> (hence <code>isequal</code>) to guarantee the property mentioned above.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.finalizer\">\n<code>finalizer(x, function)</code> </dt> <dd>\n<p>Register a function <code>f(x)</code> to be called when there are no program-accessible references to <code>x</code>. The behavior of this function is unpredictable if <code>x</code> is of a bits type.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.finalize\">\n<code>finalize(x)</code> </dt> <dd>\n<p>Immediately run finalizers registered for object <code>x</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.copy\">\n<code>copy(x)</code> </dt> <dd>\n<p>Create a shallow copy of <code>x</code>: the outer structure is copied, but not all internal values. For example, copying an array produces a new array with identically-same elements as the original.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.deepcopy\">\n<code>deepcopy(x)</code> </dt> <dd>\n<p>Create a deep copy of <code>x</code>: everything is copied recursively, resulting in a fully independent object. For example, deep-copying an array produces a new array whose elements are deep copies of the original elements. Calling <code>deepcopy</code> on an object should generally have the same effect as serializing and then deserializing it.</p> <p>As a special case, functions can only be actually deep-copied if they are anonymous, otherwise they are just copied. The difference is only relevant in the case of closures, i.e. functions which may contain hidden internal references.</p> <p>While it isn’t normally necessary, user-defined types can override the default <code>deepcopy</code> behavior by defining a specialized version of the function <code>deepcopy_internal(x::T, dict::ObjectIdDict)</code> (which shouldn’t otherwise be used), where <code>T</code> is the type to be specialized for, and <code>dict</code> keeps track of objects copied so far within the recursion. Within the definition, <code>deepcopy_internal</code> should be used in place of <code>deepcopy</code>, and the <code>dict</code> variable should be updated as appropriate before returning.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isdefined\">\n<code>isdefined([object, ]index | symbol)</code> </dt> <dd>\n<p>Tests whether an assignable location is defined. The arguments can be an array and index, a composite object and field name (as a symbol), or a module and a symbol. With a single symbol argument, tests whether a global variable with that name is defined in <code>current_module()</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.convert\">\n<code>convert(T, x)</code> </dt> <dd>\n<p>Convert <code>x</code> to a value of type <code>T</code>.</p> <p>If <code>T</code> is an <code>Integer</code> type, an <a class=\"reference internal\" href=\"#Base.InexactError\" title=\"Base.InexactError\"><code>InexactError</code></a> will be raised if <code>x</code> is not representable by <code>T</code>, for example if <code>x</code> is not integer-valued, or is outside the range supported by <code>T</code>.</p> <pre data-language=\"julia\">julia&gt; convert(Int, 3.0)\n3\n\njulia&gt; convert(Int, 3.5)\nERROR: InexactError()\n in convert at int.jl:209\n</pre> <p>If <code>T</code> is a <code>AbstractFloat</code> or <code>Rational</code> type, then it will return the closest value to <code>x</code> representable by <code>T</code>.</p> <pre data-language=\"julia\">julia&gt; x = 1/3\n0.3333333333333333\n\njulia&gt; convert(Float32, x)\n0.33333334f0\n\njulia&gt; convert(Rational{Int32}, x)\n1//3\n\njulia&gt; convert(Rational{Int64}, x)\n6004799503160661//18014398509481984\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.promote\">\n<code>promote(xs...)</code> </dt> <dd>\n<p>Convert all arguments to their common promotion type (if any), and return them all (as a tuple).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.oftype\">\n<code>oftype(x, y)</code> </dt> <dd>\n<p>Convert <code>y</code> to the type of <code>x</code> (<code>convert(typeof(x), y)</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.widen\">\n<code>widen(type | x)</code> </dt> <dd>\n<p>If the argument is a type, return a “larger” type (for numeric types, this will be a type with at least as much range and precision as the argument, and usually more). Otherwise the argument <code>x</code> is converted to <code>widen(typeof(x))</code>.</p> <pre data-language=\"julia\">julia&gt; widen(Int32)\nInt64\n\njulia&gt; widen(1.5f0)\n1.5\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.identity\">\n<code>identity(x)</code> </dt> <dd>\n<p>The identity function. Returns its argument.</p> </dd>\n</dl>   <h2 id=\"types\">Types</h2> <dl class=\"function\"> <dt id=\"Base.super\">\n<code>super(T::DataType)</code> </dt> <dd>\n<p>Return the supertype of DataType <code>T</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.issubtype\">\n<code>issubtype(type1, type2)</code> </dt> <dd>\n<p>Return <code>true</code> if and only if all values of <code>type1</code> are also of <code>type2</code>. Can also be written using the <code>&lt;:</code> infix operator as <code>type1 &lt;: type2</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.&lt;:\"><code><: t2> </:></code></dt> <dd>\n<p>Subtype operator, equivalent to <code>issubtype(T1,T2)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.subtypes\">\n<code>subtypes(T::DataType)</code> </dt> <dd>\n<p>Return a list of immediate subtypes of DataType <code>T</code>. Note that all currently loaded subtypes are included, including those not visible in the current module.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.typemin\">\n<code>typemin(T)</code> </dt> <dd>\n<p>The lowest value representable by the given (real) numeric DataType <code>T</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.typemax\">\n<code>typemax(T)</code> </dt> <dd>\n<p>The highest value representable by the given (real) numeric <code>DataType</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.realmin\">\n<code>realmin(T)</code> </dt> <dd>\n<p>The smallest in absolute value non-subnormal value representable by the given floating-point DataType <code>T</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.realmax\">\n<code>realmax(T)</code> </dt> <dd>\n<p>The highest finite value representable by the given floating-point DataType <code>T</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.maxintfloat\">\n<code>maxintfloat(T)</code> </dt> <dd>\n<p>The largest integer losslessly representable by the given floating-point DataType <code>T</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sizeof\">\n<code>sizeof(T)</code> </dt> <dd>\n<p>Size, in bytes, of the canonical binary representation of the given DataType <code>T</code>, if any.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eps\">\n<code>eps(T)</code> </dt> <dd>\n<p>The distance between 1.0 and the next larger representable floating-point value of <code>DataType</code> <code>T</code>. Only floating-point types are sensible arguments.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>eps()</code> </dt> <dd>\n<p>The distance between 1.0 and the next larger representable floating-point value of <code>Float64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>eps(x)</code> </dt> <dd>\n<p>The distance between <code>x</code> and the next larger representable floating-point value of the same <code>DataType</code> as <code>x</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.promote_type\">\n<code>promote_type(type1, type2)</code> </dt> <dd>\n<p>Determine a type big enough to hold values of each argument type without loss, whenever possible. In some cases, where no type exists to which both types can be promoted losslessly, some loss is tolerated; for example, <code>promote_type(Int64,Float64)</code> returns <code>Float64</code> even though strictly, not all <code>Int64</code> values can be represented exactly as <code>Float64</code> values.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.promote_rule\">\n<code>promote_rule(type1, type2)</code> </dt> <dd>\n<p>Specifies what type should be used by <code>promote</code> when given values of types <code>type1</code> and <code>type2</code>. This function should not be called directly, but should have definitions added to it for new types as appropriate.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.getfield\">\n<code>getfield(value, name::Symbol)</code> </dt> <dd>\n<p>Extract a named field from a <code>value</code> of composite type. The syntax <code>a.b</code> calls <code>getfield(a, :b)</code>, and the syntax <code>a.(b)</code> calls <code>getfield(a, b)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.setfield!\">\n<code>setfield!(value, name::Symbol, x)</code> </dt> <dd>\n<p>Assign <code>x</code> to a named field in <code>value</code> of composite type. The syntax <code>a.b = c</code> calls <code>setfield!(a, :b, c)</code>, and the syntax <code>a.(b) = c</code> calls <code>setfield!(a, b, c)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fieldoffsets\">\n<code>fieldoffsets(type)</code> </dt> <dd>\n<p>The byte offset of each field of a type relative to the data start. For example, we could use it in the following manner to summarize information about a struct type:</p> <pre data-language=\"julia\">julia&gt; structinfo(T) = [zip(fieldoffsets(T),fieldnames(T),T.types)...];\n\njulia&gt; structinfo(StatStruct)\n12-element Array{Tuple{Int64,Symbol,DataType},1}:\n (0,:device,UInt64)\n (8,:inode,UInt64)\n (16,:mode,UInt64)\n (24,:nlink,Int64)\n (32,:uid,UInt64)\n (40,:gid,UInt64)\n (48,:rdev,UInt64)\n (56,:size,Int64)\n (64,:blksize,Int64)\n (72,:blocks,Int64)\n (80,:mtime,Float64)\n (88,:ctime,Float64)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fieldtype\">\n<code>fieldtype(T, name::Symbol | index::Int)</code> </dt> <dd>\n<p>Determine the declared type of a field (specified by name or index) in a composite DataType <code>T</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isimmutable\">\n<code>isimmutable(v)</code> </dt> <dd>\n<p>Return <code>true</code> iff value <code>v</code> is immutable. See <a class=\"reference internal\" href=\"../../manual/types/index#man-immutable-composite-types\"><span>Immutable Composite Types</span></a> for a discussion of immutability. Note that this function works on values, so if you give it a type, it will tell you that a value of <code>DataType</code> is mutable.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isbits\">\n<code>isbits(T)</code> </dt> <dd>\n<p>Return <code>true</code> if <code>T</code> is a “plain data” type, meaning it is immutable and contains no references to other values. Typical examples are numeric types such as <code>UInt8</code>, <code>Float64</code>, and <code>Complex{Float64}</code>.</p> <pre data-language=\"julia\">julia&gt; isbits(Complex{Float64})\ntrue\n\njulia&gt; isbits(Complex)\nfalse\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isleaftype\">\n<code>isleaftype(T)</code> </dt> <dd>\n<p>Determine whether <code>T</code> is a concrete type that can have instances, meaning its only subtypes are itself and <code>None</code> (but <code>T</code> itself is not <code>None</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.typejoin\">\n<code>typejoin(T, S)</code> </dt> <dd>\n<p>Compute a type that contains both <code>T</code> and <code>S</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.typeintersect\">\n<code>typeintersect(T, S)</code> </dt> <dd>\n<p>Compute a type that contains the intersection of <code>T</code> and <code>S</code>. Usually this will be the smallest such type or one close to it.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Val{c}\">\n<code>Val{c}()</code> </dt> <dd>\n<p>Create a “value type” out of <code>c</code>, which must be an <code>isbits</code> value. The intent of this construct is to be able to dispatch on constants, e.g., <code>f(Val{false})</code> allows you to dispatch directly (at compile-time) to an implementation <code>f(::Type{Val{false}})</code>, without having to test the boolean value at runtime.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>@enum EnumName EnumValue1[=x] EnumValue2[=y]</code> </dt> <dd>\n<p>Create an <code>Enum</code> type with name <code>EnumName</code> and enum member values of <code>EnumValue1</code> and <code>EnumValue2</code> with optional assigned values of <code>x</code> and <code>y</code>, respectively. <code>EnumName</code> can be used just like other types and enum member values as regular values, such as</p> <pre data-language=\"julia\">julia&gt; @enum FRUIT apple=1 orange=2 kiwi=3\n\njulia&gt; f(x::FRUIT) = \"I'm a FRUIT with value: $(Int(x))\"\nf (generic function with 1 method)\n\njulia&gt; f(apple)\n\"I'm a FRUIT with value: 1\"\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.instances\">\n<code>instances(T::Type)</code> </dt> <dd>\n<p>Return a collection of all instances of the given type, if applicable. Mostly used for enumerated types (see <code>@enum</code>).</p> </dd>\n</dl>   <h2 id=\"generic-functions\">Generic Functions</h2> <dl class=\"function\"> <dt id=\"Base.method_exists\">\n<code>method_exists(f, Tuple type) → Bool</code> </dt> <dd>\n<p>Determine whether the given generic function has a method matching the given <code>Tuple</code> of argument types.</p> <pre data-language=\"julia\">julia&gt; method_exists(length, Tuple{Array})\ntrue\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.applicable\">\n<code>applicable(f, args...) → Bool</code> </dt> <dd>\n<p>Determine whether the given generic function has a method applicable to the given arguments.</p> <pre data-language=\"julia\">julia&gt; function f(x, y)\n           x + y\n       end;\n\njulia&gt; applicable(f, 1)\nfalse\n\njulia&gt; applicable(f, 1, 2)\ntrue\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.invoke\">\n<code>invoke(f, (types...), args...)</code> </dt> <dd>\n<p>Invoke a method for the given generic function matching the specified types (as a tuple), on the specified arguments. The arguments must be compatible with the specified types. This allows invoking a method other than the most specific matching method, which is useful when the behavior of a more general definition is explicitly needed (often as part of the implementation of a more specific method of the same function).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.|&gt;\">\n<code>|&gt;(x, f)</code> </dt> <dd>\n<p>Applies a function to the preceding argument. This allows for easy function chaining.</p> <pre data-language=\"julia\">julia&gt; [1:5;] |&gt; x-&gt;x.^2 |&gt; sum |&gt; inv\n0.01818181818181818\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.call\">\n<code>call(x, args...)</code> </dt> <dd>\n<p>If <code>x</code> is not a <code>Function</code>, then <code>x(args...)</code> is equivalent to <code>call(x, args...)</code>. This means that function-like behavior can be added to any type by defining new <code>call</code> methods.</p> </dd>\n</dl>   <h2 id=\"syntax\">Syntax</h2> <dl class=\"function\"> <dt id=\"Base.eval\">\n<code>eval([m::Module, ]expr::Expr)</code> </dt> <dd>\n<p>Evaluate an expression in the given module and return the result. Every <code>Module</code> (except those defined with <code>baremodule</code>) has its own 1-argument definition of <code>eval</code>, which evaluates expressions in that module.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@eval\">\n<code>@eval()</code> </dt> <dd>\n<p>Evaluate an expression and return the value.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.evalfile\">\n<code>evalfile(path::AbstractString)</code> </dt> <dd>\n<p>Load the file using <code>include</code>, evaluate all expressions, and return the value of the last one.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.esc\">\n<code>esc(e::ANY)</code> </dt> <dd>\n<p>Only valid in the context of an <code>Expr</code> returned from a macro. Prevents the macro hygiene pass from turning embedded variables into gensym variables. See the <a class=\"reference internal\" href=\"../../manual/metaprogramming/index#man-macros\"><span>Macros</span></a> section of the Metaprogramming chapter of the manual for more details and examples.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.gensym\">\n<code>gensym([tag])</code> </dt> <dd>\n<p>Generates a symbol which will not conflict with other variable names.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@gensym\">\n<code>@gensym()</code> </dt> <dd>\n<p>Generates a gensym symbol for a variable. For example, <code>@gensym x y</code> is transformed into <code>x = gensym(\"x\"); y = gensym(\"y\")</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.parse\">\n<code>parse(str, start; greedy=true, raise=true)</code> </dt> <dd>\n<p>Parse the expression string and return an expression (which could later be passed to eval for execution). <code>start</code> is the index of the first character to start parsing. If <code>greedy</code> is <code>true</code> (default), <code>parse</code> will try to consume as much input as it can; otherwise, it will stop as soon as it has parsed a valid expression. Incomplete but otherwise syntactically valid expressions will return <code>Expr(:incomplete, \"(error message)\")</code>. If <code>raise</code> is <code>true</code> (default), syntax errors other than incomplete expressions will raise an error. If <code>raise</code> is <code>false</code>, <code>parse</code> will return an expression that will raise an error upon evaluation.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>parse(str; raise=true)</code> </dt> <dd>\n<p>Parse the expression string greedily, returning a single expression. An error is thrown if there are additional characters after the first expression. If <code>raise</code> is <code>true</code> (default), syntax errors will raise an error; otherwise, <code>parse</code> will return an expression that will raise an error upon evaluation.</p> </dd>\n</dl>   <h2 id=\"nullables\">Nullables</h2> <dl class=\"function\"> <dt id=\"Base.Nullable\">\n<code>Nullable(x)</code> </dt> <dd>\n<p>Wrap value <code>x</code> in an object of type <code>Nullable</code>, which indicates whether a value is present. <code>Nullable(x)</code> yields a non-empty wrapper, and <code>Nullable{T}()</code> yields an empty instance of a wrapper that might contain a value of type <code>T</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.get\">\n<code>get(x)</code> </dt> <dd>\n<p>Attempt to access the value of the <code>Nullable</code> object, <code>x</code>. Returns the value if it is present; otherwise, throws a <code>NullException</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>get(x, y)</code> </dt> <dd>\n<p>Attempt to access the value of the <code>Nullable{T}</code> object, <code>x</code>. Returns the value if it is present; otherwise, returns <code>convert(T, y)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isnull\">\n<code>isnull(x)</code> </dt> <dd>\n<p>Is the <code>Nullable</code> object <code>x</code> null, i.e. missing a value?</p> </dd>\n</dl>   <h2 id=\"system\">System</h2> <dl class=\"function\"> <dt id=\"Base.run\">\n<code>run(command)</code> </dt> <dd>\n<p>Run a command object, constructed with backticks. Throws an error if anything goes wrong, including the process exiting with a non-zero status.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.spawn\">\n<code>spawn(command)</code> </dt> <dd>\n<p>Run a command object asynchronously, returning the resulting <code>Process</code> object.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.DevNull\">\n<code>DevNull</code> </dt> <dd>\n<p>Used in a stream redirect to discard all data written to it. Essentially equivalent to /dev/null on Unix or NUL on Windows. Usage: <code>run(`cat test.txt` |&gt; DevNull)</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.success\">\n<code>success(command)</code> </dt> <dd>\n<p>Run a command object, constructed with backticks, and tell whether it was successful (exited with a code of 0). An exception is raised if the process cannot be started.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.process_running\">\n<code>process_running(p::Process)</code> </dt> <dd>\n<p>Determine whether a process is currently running.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.process_exited\">\n<code>process_exited(p::Process)</code> </dt> <dd>\n<p>Determine whether a process has exited.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.kill\">\n<code>kill(p::Process, signum=SIGTERM)</code> </dt> <dd>\n<p>Send a signal to a process. The default is to terminate the process.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Sys.set_process_title\">\n<code>Sys.set_process_title(title::AbstractString)</code> </dt> <dd>\n<p>Set the process title. No-op on some operating systems. (not exported)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Sys.get_process_title\">\n<code>Sys.get_process_title()</code> </dt> <dd>\n<p>Get the process title. On some systems, will always return empty string. (not exported)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readandwrite\">\n<code>readandwrite(command)</code> </dt> <dd>\n<p>Starts running a command asynchronously, and returns a tuple (stdout,stdin,process) of the output stream and input stream of the process, and the process object itself.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ignorestatus\">\n<code>ignorestatus(command)</code> </dt> <dd>\n<p>Mark a command object so that running it will not throw an error if the result code is non-zero.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.detach\">\n<code>detach(command)</code> </dt> <dd>\n<p>Mark a command object so that it will be run in a new process group, allowing it to outlive the julia process, and not have Ctrl-C interrupts passed to it.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.setenv\">\n<code>setenv(command, env; dir=working_dir)</code> </dt> <dd>\n<p>Set environment variables to use when running the given <code>command</code>. <code>env</code> is either a dictionary mapping strings to strings, an array of strings of the form <code>\"var=val\"</code>, or zero or more <code>\"var\"=&gt;val</code> pair arguments. In order to modify (rather than replace) the existing environment, create <code>env</code> by <code>copy(ENV)</code> and then setting <code>env[\"var\"]=val</code> as desired, or use <code>withenv</code>.</p> <p>The <code>dir</code> keyword argument can be used to specify a working directory for the command.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.withenv\">\n<code>withenv(f::Function, kv::Pair...)</code> </dt> <dd>\n<p>Execute <code>f()</code> in an environment that is temporarily modified (not replaced as in <code>setenv</code>) by zero or more <code>\"var\"=&gt;val</code> arguments <code>kv</code>. <code>withenv</code> is generally used via the <code>withenv(kv...) do ... end</code> syntax. A value of <code>nothing</code> can be used to temporarily unset an environment variable (if it is set). When <code>withenv</code> returns, the original environment has been restored.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.pipeline\">\n<code>pipeline(from, to, ...)</code> </dt> <dd>\n<p>Create a pipeline from a data source to a destination. The source and destination can be commands, I/O streams, strings, or results of other <code>pipeline</code> calls. At least one argument must be a command. Strings refer to filenames. When called with more than two arguments, they are chained together from left to right. For example <code>pipeline(a,b,c)</code> is equivalent to <code>pipeline(pipeline(a,b),c)</code>. This provides a more concise way to specify multi-stage pipelines.</p> <p><strong>Examples</strong>:</p> <ul class=\"simple\"> <li><code>run(pipeline(`ls`, `grep xyz`))</code></li> <li><code>run(pipeline(`ls`, \"out.txt\"))</code></li> <li><code>run(pipeline(\"out.txt\", `grep xyz`))</code></li> </ul> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>pipeline(command; stdin, stdout, stderr, append=false)</code> </dt> <dd>\n<p>Redirect I/O to or from the given <code>command</code>. Keyword arguments specify which of the command’s streams should be redirected. <code>append</code> controls whether file output appends to the file. This is a more general version of the 2-argument <code>pipeline</code> function. <code>pipeline(from, to)</code> is equivalent to <code>pipeline(from, stdout=to)</code> when <code>from</code> is a command, and to <code>pipe(to, stdin=from)</code> when <code>from</code> is another kind of data source.</p> <p><strong>Examples</strong>:</p> <ul class=\"simple\"> <li><code>run(pipeline(`dothings`, stdout=\"out.txt\", stderr=\"errs.txt\"))</code></li> <li><code>run(pipeline(`update`, stdout=\"log.txt\", append=true))</code></li> </ul> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.gethostname\">\n<code>gethostname() → AbstractString</code> </dt> <dd>\n<p>Get the local machine’s host name.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.getipaddr\">\n<code>getipaddr() → AbstractString</code> </dt> <dd>\n<p>Get the IP address of the local machine, as a string of the form “x.x.x.x”.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.getpid\">\n<code>getpid() → Int32</code> </dt> <dd>\n<p>Get julia’s process ID.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.time\">\n<code>time()</code> </dt> <dd>\n<p>Get the system time in seconds since the epoch, with fairly high (typically, microsecond) resolution.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.time_ns\">\n<code>time_ns()</code> </dt> <dd>\n<p>Get the time in nanoseconds. The time corresponding to 0 is undefined, and wraps every 5.8 years.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.tic\">\n<code>tic()</code> </dt> <dd>\n<p>Set a timer to be read by the next call to <a class=\"reference internal\" href=\"#Base.toc\" title=\"Base.toc\"><code>toc()</code></a> or <a class=\"reference internal\" href=\"#Base.toq\" title=\"Base.toq\"><code>toq()</code></a>. The macro call <code>@time expr</code> can also be used to time evaluation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.toc\">\n<code>toc()</code> </dt> <dd>\n<p>Print and return the time elapsed since the last <a class=\"reference internal\" href=\"#Base.tic\" title=\"Base.tic\"><code>tic()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.toq\">\n<code>toq()</code> </dt> <dd>\n<p>Return, but do not print, the time elapsed since the last <a class=\"reference internal\" href=\"#Base.tic\" title=\"Base.tic\"><code>tic()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@time\">\n<code>@time()</code> </dt> <dd>\n<p>A macro to execute an expression, printing the time it took to execute, the number of allocations, and the total number of bytes its execution caused to be allocated, before returning the value of the expression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@timev\">\n<code>@timev()</code> </dt> <dd>\n<p>This is a verbose version of the <code>@time</code> macro. It first prints the same information as <code>@time</code>, then any non-zero memory allocation counters, and then returns the value of the expression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@timed\">\n<code>@timed()</code> </dt> <dd>\n<p>A macro to execute an expression, and return the value of the expression, elapsed time, total bytes allocated, garbage collection time, and an object with various memory allocation counters.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@elapsed\">\n<code>@elapsed()</code> </dt> <dd>\n<p>A macro to evaluate an expression, discarding the resulting value, instead returning the number of seconds it took to execute as a floating-point number.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@allocated\">\n<code>@allocated()</code> </dt> <dd>\n<p>A macro to evaluate an expression, discarding the resulting value, instead returning the total number of bytes allocated during evaluation of the expression. Note: the expression is evaluated inside a local function, instead of the current context, in order to eliminate the effects of compilation, however, there still may be some allocations due to JIT compilation. This also makes the results inconsistent with the <code>@time</code> macros, which do not try to adjust for the effects of compilation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.EnvHash\">\n<code>EnvHash() → EnvHash</code> </dt> <dd>\n<p>A singleton of this type provides a hash table interface to environment variables.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.ENV\">\n<code>ENV</code> </dt> <dd>\n<p>Reference to the singleton <code>EnvHash</code>, providing a dictionary interface to system environment variables.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@unix\">\n<code>@unix()</code> </dt> <dd>\n<p>Given <code>@unix? a : b</code>, do <code>a</code> on Unix systems (including Linux and OS X) and <code>b</code> elsewhere. See documentation for Handling Platform Variations in the Calling C and Fortran Code section of the manual.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@osx\">\n<code>@osx()</code> </dt> <dd>\n<p>Given <code>@osx? a : b</code>, do <code>a</code> on OS X and <code>b</code> elsewhere. See documentation for Handling Platform Variations in the Calling C and Fortran Code section of the manual.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@linux\">\n<code>@linux()</code> </dt> <dd>\n<p>Given <code>@linux? a : b</code>, do <code>a</code> on Linux and <code>b</code> elsewhere. See documentation for Handling Platform Variations in the Calling C and Fortran Code section of the manual.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@windows\">\n<code>@windows()</code> </dt> <dd>\n<p>Given <code>@windows? a : b</code>, do <code>a</code> on Windows and <code>b</code> elsewhere. See documentation for Handling Platform Variations in the Calling C and Fortran Code section of the manual.</p> </dd>\n</dl>   <h2 id=\"errors\">Errors</h2> <dl class=\"function\"> <dt id=\"Base.error\">\n<code>error(message::AbstractString)</code> </dt> <dd>\n<p>Raise an <code>ErrorException</code> with the given message</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.throw\">\n<code>throw(e)</code> </dt> <dd>\n<p>Throw an object as an exception</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rethrow\">\n<code>rethrow([e])</code> </dt> <dd>\n<p>Throw an object without changing the current exception backtrace. The default argument is the current exception (if called within a <code>catch</code> block).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.backtrace\">\n<code>backtrace()</code> </dt> <dd>\n<p>Get a backtrace object for the current program point.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.catch_backtrace\">\n<code>catch_backtrace()</code> </dt> <dd>\n<p>Get the backtrace of the current exception, for use within <code>catch</code> blocks.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.assert\">\n<code>assert(cond)</code> </dt> <dd>\n<p>Throw an <code>AssertionError</code> if <code>cond</code> is <code>false</code>. Also available as the macro <code>@assert expr</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>@assert cond [text]</code> </dt> <dd>\n<p>Throw an <code>AssertionError</code> if <code>cond</code> is <code>false</code>. Preferred syntax for writing assertions. Message <code>text</code> is optionally displayed upon assertion failure.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ArgumentError\">\n<code>ArgumentError(msg)</code> </dt> <dd>\n<p>The parameters to a function call do not match a valid signature. Argument <code>msg</code> is a descriptive error string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.AssertionError\">\n<code>AssertionError([msg])</code> </dt> <dd>\n<p>The asserted condition did not evaluate to <code>true</code>. Optional argument <code>msg</code> is a descriptive error string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.BoundsError\">\n<code>BoundsError([a][, i])</code> </dt> <dd>\n<p>An indexing operation into an array, <code>a</code>, tried to access an out-of-bounds element, <code>i</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.DimensionMismatch\">\n<code>DimensionMismatch([msg])</code> </dt> <dd>\n<p>The objects called do not have matching dimensionality. Optional argument <code>msg</code> is a descriptive error string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.DivideError\">\n<code>DivideError()</code> </dt> <dd>\n<p>Integer division was attempted with a denominator value of 0.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.DomainError\">\n<code>DomainError()</code> </dt> <dd>\n<p>The arguments to a function or constructor are outside the valid domain.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.EOFError\">\n<code>EOFError()</code> </dt> <dd>\n<p>No more data was available to read from a file or stream.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ErrorException\">\n<code>ErrorException(msg)</code> </dt> <dd>\n<p>Generic error type. The error message, in the <code>.msg</code> field, may provide more specific details.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.InexactError\">\n<code>InexactError()</code> </dt> <dd>\n<p>Type conversion cannot be done exactly.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.InterruptException\">\n<code>InterruptException()</code> </dt> <dd>\n<p>The process was stopped by a terminal interrupt (CTRL+C).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.KeyError\">\n<code>KeyError(key)</code> </dt> <dd>\n<p>An indexing operation into an <code>Associative</code> (<code>Dict</code>) or <code>Set</code> like object tried to access or delete a non-existent element.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LoadError\">\n<code>LoadError(file::AbstractString, line::Int, error)</code> </dt> <dd>\n<p>An error occurred while <code>include</code>ing, <code>require</code>ing, or <code>using</code> a file. The error specifics should be available in the <code>.error</code> field.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.MethodError\">\n<code>MethodError(f, args)</code> </dt> <dd>\n<p>A method with the required type signature does not exist in the given generic function.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.NullException\">\n<code>NullException()</code> </dt> <dd>\n<p>An attempted access to a <code>Nullable</code> with no defined value.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.OutOfMemoryError\">\n<code>OutOfMemoryError()</code> </dt> <dd>\n<p>An operation allocated too much memory for either the system or the garbage collector to handle properly.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ReadOnlyMemoryError\">\n<code>ReadOnlyMemoryError()</code> </dt> <dd>\n<p>An operation tried to write to memory that is read-only.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.OverflowError\">\n<code>OverflowError()</code> </dt> <dd>\n<p>The result of an expression is too large for the specified type and will cause a wraparound.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ParseError\">\n<code>ParseError(msg)</code> </dt> <dd>\n<p>The expression passed to the <code>parse</code> function could not be interpreted as a valid Julia expression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ProcessExitedException\">\n<code>ProcessExitedException()</code> </dt> <dd>\n<p>After a client Julia process has exited, further attempts to reference the dead child will throw this exception.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.StackOverflowError\">\n<code>StackOverflowError()</code> </dt> <dd>\n<p>The function call grew beyond the size of the call stack. This usually happens when a call recurses infinitely.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.SystemError\">\n<code>SystemError(prefix::AbstractString[, errno::Int32])</code> </dt> <dd>\n<p>A system call failed with an error code (in the <code>errno</code> global variable).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.TypeError\">\n<code>TypeError(func::Symbol, context::AbstractString, expected::Type, got)</code> </dt> <dd>\n<p>A type assertion failure, or calling an intrinsic function with an incorrect argument type.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.UndefRefError\">\n<code>UndefRefError()</code> </dt> <dd>\n<p>The item or field is not defined for the given object.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.UndefVarError\">\n<code>UndefVarError(var::Symbol)</code> </dt> <dd>\n<p>A symbol in the current scope is not defined.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.InitError\">\n<code>InitError(mod::Symbol, error)</code> </dt> <dd>\n<p>An error occurred when running a module’s <code>__init__</code> function. The actual error thrown is available in the <code>.error</code> field.</p> </dd>\n</dl>   <h2 id=\"events\">Events</h2> <dl class=\"function\"> <dt id=\"Base.Timer\">\n<code>Timer(callback::Function, delay, repeat=0)</code> </dt> <dd>\n<p>Create a timer to call the given <code>callback</code> function. The <code>callback</code> is passed one argument, the timer object itself. The callback will be invoked after the specified initial <code>delay</code>, and then repeating with the given <code>repeat</code> interval. If <code>repeat</code> is <code>0</code>, the timer is only triggered once. Times are in seconds. A timer is stopped and has its resources freed by calling <code>close</code> on it.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Timer(delay, repeat=0)</code> </dt> <dd>\n<p>Create a timer that wakes up tasks waiting for it (by calling <code>wait</code> on the timer object) at a specified interval. Times are in seconds. Waiting tasks are woken with an error when the timer is closed (by <code>close</code>). Use <code>isopen</code> to check whether a timer is still active.</p> </dd>\n</dl>   <h2 id=\"reflection\">Reflection</h2> <dl class=\"function\"> <dt id=\"Base.module_name\">\n<code>module_name(m::Module) → Symbol</code> </dt> <dd>\n<p>Get the name of a <code>Module</code> as a <code>Symbol</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.module_parent\">\n<code>module_parent(m::Module) → Module</code> </dt> <dd>\n<p>Get a module’s enclosing <code>Module</code>. <code>Main</code> is its own parent, as is <code>LastMain</code> after <code>workspace()</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.current_module\">\n<code>current_module() → Module</code> </dt> <dd>\n<p>Get the <em>dynamically</em> current <code>Module</code>, which is the <code>Module</code> code is currently being read from. In general, this is not the same as the module containing the call to this function.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fullname\">\n<code>fullname(m::Module)</code> </dt> <dd>\n<p>Get the fully-qualified name of a module as a tuple of symbols. For example, <code>fullname(Base.Pkg)</code> gives <code>(:Base,:Pkg)</code>, and <code>fullname(Main)</code> gives <code>()</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.names\">\n<code>names(x::Module[, all=false[, imported=false]])</code> </dt> <dd>\n<p>Get an array of the names exported by a <code>Module</code>, with optionally more <code>Module</code> globals according to the additional parameters.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nfields\">\n<code>nfields(x::DataType) → Int</code> </dt> <dd>\n<p>Get the number of fields of a <code>DataType</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fieldnames\">\n<code>fieldnames(x::DataType)</code> </dt> <dd>\n<p>Get an array of the fields of a <code>DataType</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isconst\">\n<code>isconst([m::Module, ]s::Symbol) → Bool</code> </dt> <dd>\n<p>Determine whether a global is declared <code>const</code> in a given <code>Module</code>. The default <code>Module</code> argument is <code>current_module()</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isgeneric\">\n<code>isgeneric(f::Function) → Bool</code> </dt> <dd>\n<p>Determine whether a <code>Function</code> is generic.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.function_name\">\n<code>function_name(f::Function) → Symbol</code> </dt> <dd>\n<p>Get the name of a generic <code>Function</code> as a symbol, or <code>:anonymous</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.function_module\">\n<code>function_module(f::Function, types) → Module</code> </dt> <dd>\n<p>Determine the module containing a given definition of a generic function.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.functionloc\">\n<code>functionloc(f::Function, types)</code> </dt> <dd>\n<p>Returns a tuple <code>(filename,line)</code> giving the location of a generic <code>Function</code> definition.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>functionloc(m::Method)</code> </dt> <dd>\n<p>Returns a tuple <code>(filename,line)</code> giving the location of a <code>Method</code> definition.</p> </dd>\n</dl>   <h2 id=\"internals\">Internals</h2> <dl class=\"function\"> <dt id=\"Base.gc\">\n<code>gc()</code> </dt> <dd>\n<p>Perform garbage collection. This should not generally be used.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.gc_enable\">\n<code>gc_enable(on::Bool)</code> </dt> <dd>\n<p>Control whether garbage collection is enabled using a boolean argument (<code>true</code> for enabled, <code>false</code> for disabled). Returns previous GC state. Disabling garbage collection should be used only with extreme caution, as it can cause memory use to grow without bound.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.macroexpand\">\n<code>macroexpand(x)</code> </dt> <dd>\n<p>Takes the expression <code>x</code> and returns an equivalent expression with all macros removed (expanded).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.expand\">\n<code>expand(x)</code> </dt> <dd>\n<p>Takes the expression <code>x</code> and returns an equivalent expression in lowered form.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.code_lowered\">\n<code>code_lowered(f, types)</code> </dt> <dd>\n<p>Returns an array of lowered ASTs for the methods matching the given generic function and type signature.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@code_lowered\">\n<code>@code_lowered()</code> </dt> <dd>\n<p>Evaluates the arguments to the function call, determines their types, and calls <a class=\"reference internal\" href=\"#Base.code_lowered\" title=\"Base.code_lowered\"><code>code_lowered()</code></a> on the resulting expression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.code_typed\">\n<code>code_typed(f, types; optimize=true)</code> </dt> <dd>\n<p>Returns an array of lowered and type-inferred ASTs for the methods matching the given generic function and type signature. The keyword argument <code>optimize</code> controls whether additional optimizations, such as inlining, are also applied.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@code_typed\">\n<code>@code_typed()</code> </dt> <dd>\n<p>Evaluates the arguments to the function call, determines their types, and calls <a class=\"reference internal\" href=\"#Base.code_typed\" title=\"Base.code_typed\"><code>code_typed()</code></a> on the resulting expression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.code_warntype\">\n<code>code_warntype(f, types)</code> </dt> <dd>\n<p>Displays lowered and type-inferred ASTs for the methods matching the given generic function and type signature. The ASTs are annotated in such a way as to cause “non-leaf” types to be emphasized (if color is available, displayed in red). This serves as a warning of potential type instability. Not all non-leaf types are particularly problematic for performance, so the results need to be used judiciously. See <a class=\"reference internal\" href=\"../../manual/performance-tips/index#man-code-warntype\"><span>@code_warntype</span></a> for more information.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@code_warntype\">\n<code>@code_warntype()</code> </dt> <dd>\n<p>Evaluates the arguments to the function call, determines their types, and calls <a class=\"reference internal\" href=\"#Base.code_warntype\" title=\"Base.code_warntype\"><code>code_warntype()</code></a> on the resulting expression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.code_llvm\">\n<code>code_llvm(f, types)</code> </dt> <dd>\n<p>Prints the LLVM bitcodes generated for running the method matching the given generic function and type signature to <a class=\"reference internal\" href=\"../io-network/index#Base.STDOUT\" title=\"Base.STDOUT\"><code>STDOUT</code></a>.</p> <p>All metadata and dbg.* calls are removed from the printed bitcode. Use code_llvm_raw for the full IR.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@code_llvm\">\n<code>@code_llvm()</code> </dt> <dd>\n<p>Evaluates the arguments to the function call, determines their types, and calls <a class=\"reference internal\" href=\"#Base.code_llvm\" title=\"Base.code_llvm\"><code>code_llvm()</code></a> on the resulting expression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.code_native\">\n<code>code_native(f, types)</code> </dt> <dd>\n<p>Prints the native assembly instructions generated for running the method matching the given generic function and type signature to <code>STDOUT</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@code_native\">\n<code>@code_native()</code> </dt> <dd>\n<p>Evaluates the arguments to the function call, determines their types, and calls <a class=\"reference internal\" href=\"#Base.code_native\" title=\"Base.code_native\"><code>code_native()</code></a> on the resulting expression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.precompile\">\n<code>precompile(f, args::Tuple{Vararg{Any}})</code> </dt> <dd>\n<p>Compile the given function <code>f</code> for the argument tuple (of types) <code>args</code>, but do not execute it.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/base/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/base/</a>\n  </p>\n</div>\n","stdlib/arrays/index":"<h1 id=\"stdlib-arrays\">Arrays</h1>  <h2 id=\"basic-functions\">Basic functions</h2> <dl class=\"function\"> <dt id=\"Base.ndims\">\n<code>ndims(A) → Integer</code> </dt> <dd>\n<p>Returns the number of dimensions of <code>A</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.size\">\n<code>size(A[, dim...])</code> </dt> <dd>\n<p>Returns a tuple containing the dimensions of <code>A</code>. Optionally you can specify the dimension(s) you want the length of, and get the length of that dimension, or a tuple of the lengths of dimensions you asked for.:</p> <pre data-language=\"julia\">julia&gt; A = rand(2,3,4);\n\njulia&gt; size(A, 2)\n3\n\njulia&gt; size(A,3,2)\n(4,3)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.iseltype\">\n<code>iseltype(A, T)</code> </dt> <dd>\n<p>Tests whether <code>A</code> or its elements are of type <code>T</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.length\">\n<code>length(A) → Integer</code> </dt> <dd>\n<p>Returns the number of elements in <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eachindex\">\n<code>eachindex(A...)</code> </dt> <dd>\n<p>Creates an iterable object for visiting each index of an AbstractArray <code>A</code> in an efficient manner. For array types that have opted into fast linear indexing (like <code>Array</code>), this is simply the range <code>1:length(A)</code>. For other array types, this returns a specialized Cartesian range to efficiently index into the array with indices specified for every dimension. For other iterables, including strings and dictionaries, this returns an iterator object supporting arbitrary index types (e.g. unevenly spaced or non-integer indices).</p> <p>Example for a sparse 2-d array:</p> <pre data-language=\"julia\">julia&gt; A = sparse([1, 1, 2], [1, 3, 1], [1, 2, -5])\n2x3 sparse matrix with 3 Int64 entries:\n        [1, 1]  =  1\n        [2, 1]  =  -5\n        [1, 3]  =  2\n\njulia&gt; for iter in eachindex(A)\n           @show iter.I[1], iter.I[2]\n           @show A[iter]\n       end\n(iter.I[1],iter.I[2]) = (1,1)\nA[iter] = 1\n(iter.I[1],iter.I[2]) = (2,1)\nA[iter] = -5\n(iter.I[1],iter.I[2]) = (1,2)\nA[iter] = 0\n(iter.I[1],iter.I[2]) = (2,2)\nA[iter] = 0\n(iter.I[1],iter.I[2]) = (1,3)\nA[iter] = 2\n(iter.I[1],iter.I[2]) = (2,3)\nA[iter] = 0\n</pre> <p>If you supply more than one <code>AbstractArray</code> argument, <code>eachindex</code> will create an iterable object that is fast for all arguments (a <code>UnitRange</code> if all inputs have fast linear indexing, a CartesianRange otherwise). If the arrays have different sizes and/or dimensionalities, <code>eachindex</code> returns an iterable that spans the largest range along each dimension.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Base.linearindexing\">\n<code>Base.linearindexing(A)</code> </dt> <dd>\n<p><code>linearindexing</code> defines how an AbstractArray most efficiently accesses its elements. If <code>Base.linearindexing(A)</code> returns <code>Base.LinearFast()</code>, this means that linear indexing with only one index is an efficient operation. If it instead returns <code>Base.LinearSlow()</code> (by default), this means that the array intrinsically accesses its elements with indices specified for every dimension. Since converting a linear index to multiple indexing subscripts is typically very expensive, this provides a traits-based mechanism to enable efficient generic code for all array types.</p> <p>An abstract array subtype <code>MyArray</code> that wishes to opt into fast linear indexing behaviors should define <code>linearindexing</code> in the type-domain:</p> <pre data-language=\"julia\">Base.linearindexing{T&lt;:MyArray}(::Type{T}) = Base.LinearFast()\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.countnz\">\n<code>countnz(A)</code> </dt> <dd>\n<p>Counts the number of nonzero values in array <code>A</code> (dense or sparse). Note that this is not a constant-time operation. For sparse matrices, one should usually use <code>nnz</code>, which returns the number of stored values.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.conj!\">\n<code>conj!(A)</code> </dt> <dd>\n<p>Convert an array to its complex conjugate in-place</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.stride\">\n<code>stride(A, k)</code> </dt> <dd>\n<p>Returns the distance in memory (in number of elements) between adjacent elements in dimension <code>k</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.strides\">\n<code>strides(A)</code> </dt> <dd>\n<p>Returns a tuple of the memory strides in each dimension</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ind2sub\">\n<code>ind2sub(dims, index) → subscripts</code> </dt> <dd>\n<p>Returns a tuple of subscripts into an array with dimensions <code>dims</code>, corresponding to the linear index <code>index</code>.</p> <p><strong>Example</strong>: <code>i, j, ... = ind2sub(size(A), indmax(A))</code> provides the indices of the maximum element</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>ind2sub(a, index) → subscripts</code> </dt> <dd>\n<p>Returns a tuple of subscripts into array <code>a</code> corresponding to the linear index <code>index</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sub2ind\">\n<code>sub2ind(dims, i, j, k...) → index</code> </dt> <dd>\n<p>The inverse of <code>ind2sub</code>, returns the linear index corresponding to the provided subscripts</p> </dd>\n</dl>   <h2 id=\"constructors\">Constructors</h2> <dl class=\"function\"> <dt id=\"Base.Array\">\n<code>Array(dims)</code> </dt> <dd>\n<p><code>Array{T}(dims)</code> constructs an uninitialized dense array with element type <code>T</code>. <code>dims</code> may be a tuple or a series of integer arguments. The syntax <code>Array(T, dims)</code> is also available, but deprecated.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.getindex\">\n<code>getindex(type[, elements...])</code> </dt> <dd>\n<p>Construct a 1-d array of the specified type. This is usually called with the syntax <code>Type[]</code>. Element values can be specified using <code>Type[a,b,c,...]</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cell\">\n<code>cell(dims)</code> </dt> <dd>\n<p>Construct an uninitialized cell array (heterogeneous array). <code>dims</code> can be either a tuple or a series of integer arguments.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.zeros\">\n<code>zeros(type, dims)</code> </dt> <dd>\n<p>Create an array of all zeros of specified type. The type defaults to Float64 if not specified.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>zeros(A)</code> </dt> <dd>\n<p>Create an array of all zeros with the same element type and shape as <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ones\">\n<code>ones(type, dims)</code> </dt> <dd>\n<p>Create an array of all ones of specified type. The type defaults to <code>Float64</code> if not specified.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>ones(A)</code> </dt> <dd>\n<p>Create an array of all ones with the same element type and shape as <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.trues\">\n<code>trues(dims)</code> </dt> <dd>\n<p>Create a <code>BitArray</code> with all values set to <code>true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>trues(A)</code> </dt> <dd>\n<p>Create a <code>BitArray</code> with all values set to <code>true</code> of the same shape as <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.falses\">\n<code>falses(dims)</code> </dt> <dd>\n<p>Create a <code>BitArray</code> with all values set to <code>false</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>falses(A)</code> </dt> <dd>\n<p>Create a <code>BitArray</code> with all values set to <code>false</code> of the same shape as <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fill\">\n<code>fill(x, dims)</code> </dt> <dd>\n<p>Create an array filled with the value <code>x</code>. For example, <code>fill(1.0, (10,10))</code> returns a 10x10 array of floats, with each element initialized to <code>1.0</code>.</p> <p>If <code>x</code> is an object reference, all elements will refer to the same object. <code>fill(Foo(), dims)</code> will return an array filled with the result of evaluating <code>Foo()</code> once.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fill!\">\n<code>fill!(A, x)</code> </dt> <dd>\n<p>Fill array <code>A</code> with the value <code>x</code>. If <code>x</code> is an object reference, all elements will refer to the same object. <code>fill!(A, Foo())</code> will return <code>A</code> filled with the result of evaluating <code>Foo()</code> once.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reshape\">\n<code>reshape(A, dims)</code> </dt> <dd>\n<p>Create an array with the same data as the given array, but with different dimensions. An implementation for a particular type of array may choose whether the data is copied or shared.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.similar\">\n<code>similar(array[, element_type=eltype(array)][, dims=size(array)])</code> </dt> <dd>\n<p>Create an uninitialized mutable array with the given element type and size, based upon the given source array. The second and third arguments are both optional, defaulting to the given array’s <code>eltype</code> and <code>size</code>. The dimensions may be specified either as a single tuple argument or as a series of integer arguments.</p> <p>Custom AbstractArray subtypes may choose which specific array type is best-suited to return for the given element type and dimensionality. If they do not specialize this method, the default is an <code>Array(element_type, dims...)</code>.</p> <p>For example, <code>similar(1:10, 1, 4)</code> returns an uninitialized <code>Array{Int,2}</code> since ranges are neither mutable nor support 2 dimensions:</p> <pre data-language=\"julia\">julia&gt; similar(1:10, 1, 4)\n1x4 Array{Int64,2}:\n 4419743872  4374413872  4419743888  0\n</pre> <p>Conversely, <code>similar(trues(10,10), 2)</code> returns an uninitialized <code>BitVector</code> with two elements since <code>BitArray</code>s are both mutable and can support 1-dimensional arrays:</p> <pre data-language=\"julia\">julia&gt; similar(trues(10,10), 2)\n2-element BitArray{1}:\n false\n false\n</pre> <p>Since <code>BitArray</code>s can only store elements of type <code>Bool</code>, however, if you request a different element type it will create a regular <code>Array</code> instead:</p> <pre data-language=\"julia\">julia&gt; similar(falses(10), Float64, 2, 4)\n2x4 Array{Float64,2}:\n 2.18425e-314  2.18425e-314  2.18425e-314  2.18425e-314\n 2.18425e-314  2.18425e-314  2.18425e-314  2.18425e-314\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reinterpret\">\n<code>reinterpret(type, A)</code> </dt> <dd>\n<p>Change the type-interpretation of a block of memory. For example, <code>reinterpret(Float32, UInt32(7))</code> interprets the 4 bytes corresponding to <code>UInt32(7)</code> as a <code>Float32</code>. For arrays, this constructs an array with the same binary data as the given array, but with the specified element type.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eye\">\n<code>eye(n)</code> </dt> <dd>\n<p><code>n</code>-by-<code>n</code> identity matrix</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>eye(m, n)</code> </dt> <dd>\n<p><code>m</code>-by-<code>n</code> identity matrix</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>eye(A)</code> </dt> <dd>\n<p>Constructs an identity matrix of the same dimensions and type as <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.linspace\">\n<code>linspace(start, stop, n=100)</code> </dt> <dd>\n<p>Construct a range of <code>n</code> linearly spaced elements from <code>start</code> to <code>stop</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.logspace\">\n<code>logspace(start, stop, n=50)</code> </dt> <dd>\n<p>Construct a vector of <code>n</code> logarithmically spaced numbers from <code>10^start</code> to <code>10^stop</code>.</p> </dd>\n</dl>   <h2 id=\"mathematical-operators-and-functions\">Mathematical operators and functions</h2> <p>All mathematical operations and functions are supported for arrays</p> <dl class=\"function\"> <dt id=\"Base.broadcast\">\n<code>broadcast(f, As...)</code> </dt> <dd>\n<p>Broadcasts the arrays <code>As</code> to a common size by expanding singleton dimensions, and returns an array of the results <code>f(as...)</code> for each position.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.broadcast!\">\n<code>broadcast!(f, dest, As...)</code> </dt> <dd>\n<p>Like <code>broadcast</code>, but store the result of <code>broadcast(f, As...)</code> in the <code>dest</code> array. Note that <code>dest</code> is only used to store the result, and does not supply arguments to <code>f</code> unless it is also listed in the <code>As</code>, as in <code>broadcast!(f, A, A, B)</code> to perform <code>A[:] = broadcast(f, A, B)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bitbroadcast\">\n<code>bitbroadcast(f, As...)</code> </dt> <dd>\n<p>Like <code>broadcast</code>, but allocates a <code>BitArray</code> to store the result, rather then an <code>Array</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.broadcast_function\">\n<code>broadcast_function(f)</code> </dt> <dd>\n<p>Returns a function <code>broadcast_f</code> such that <code>broadcast_function(f)(As...) === broadcast(f, As...)</code>. Most useful in the form <code>const broadcast_f = broadcast_function(f)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.broadcast!_function\">\n<code>broadcast!_function(f)</code> </dt> <dd>\n<p>Like <code>broadcast_function</code>, but for <code>broadcast!</code>.</p> </dd>\n</dl>   <h2 id=\"indexing-assignment-and-concatenation\">Indexing, Assignment, and Concatenation</h2> <dl class=\"function\"> <dt>\n<code>getindex(A, inds...)</code> </dt> <dd>\n<p>Returns a subset of array <code>A</code> as specified by <code>inds</code>, where each <code>ind</code> may be an <code>Int</code>, a <code>Range</code>, or a <code>Vector</code>. See the manual section on <a class=\"reference internal\" href=\"../../manual/arrays/index#man-array-indexing\"><span>array indexing</span></a> for details.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sub\">\n<code>sub(A, inds...)</code> </dt> <dd>\n<p>Like <a class=\"reference internal\" href=\"../collections/index#Base.getindex\" title=\"Base.getindex\"><code>getindex()</code></a>, but returns a view into the parent array <code>A</code> with the given indices instead of making a copy. Calling <a class=\"reference internal\" href=\"../collections/index#Base.getindex\" title=\"Base.getindex\"><code>getindex()</code></a> or <a class=\"reference internal\" href=\"../collections/index#Base.setindex!\" title=\"Base.setindex!\"><code>setindex!()</code></a> on the returned <code>SubArray</code> computes the indices to the parent array on the fly without checking bounds.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.parent\">\n<code>parent(A)</code> </dt> <dd>\n<p>Returns the “parent array” of an array view type (e.g., <code>SubArray</code>), or the array itself if it is not a view</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.parentindexes\">\n<code>parentindexes(A)</code> </dt> <dd>\n<p>From an array view <code>A</code>, returns the corresponding indexes in the parent</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.slicedim\">\n<code>slicedim(A, d, i)</code> </dt> <dd>\n<p>Return all the data of <code>A</code> where the index for dimension <code>d</code> equals <code>i</code>. Equivalent to <code>A[:,:,...,i,:,:,...]</code> where <code>i</code> is in position <code>d</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.slice\">\n<code>slice(A, inds...)</code> </dt> <dd>\n<p>Returns a view of array <code>A</code> with the given indices like <a class=\"reference internal\" href=\"#Base.sub\" title=\"Base.sub\"><code>sub()</code></a>, but drops all dimensions indexed with scalars.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.setindex!\">\n<code>setindex!(A, X, inds...)</code> </dt> <dd>\n<p>Store values from array <code>X</code> within some subset of <code>A</code> as specified by <code>inds</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.broadcast_getindex\">\n<code>broadcast_getindex(A, inds...)</code> </dt> <dd>\n<p>Broadcasts the <code>inds</code> arrays to a common size like <code>broadcast</code>, and returns an array of the results <code>A[ks...]</code>, where <code>ks</code> goes over the positions in the broadcast.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.broadcast_setindex!\">\n<code>broadcast_setindex!(A, X, inds...)</code> </dt> <dd>\n<p>Broadcasts the <code>X</code> and <code>inds</code> arrays to a common size and stores the value from each position in <code>X</code> at the indices given by the same positions in <code>inds</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cat\">\n<code>cat(dims, A...)</code> </dt> <dd>\n<p>Concatenate the input arrays along the specified dimensions in the iterable <code>dims</code>. For dimensions not in <code>dims</code>, all input arrays should have the same size, which will also be the size of the output array along that dimension. For dimensions in <code>dims</code>, the size of the output array is the sum of the sizes of the input arrays along that dimension. If <code>dims</code> is a single number, the different arrays are tightly stacked along that dimension. If <code>dims</code> is an iterable containing several dimensions, this allows one to construct block diagonal matrices and their higher-dimensional analogues by simultaneously increasing several dimensions for every new input array and putting zero blocks elsewhere. For example, <code>cat([1,2], matrices...)</code> builds a block diagonal matrix, i.e. a block matrix with <code>matrices[1]</code>, <code>matrices[2]</code>, ... as diagonal blocks and matching zero blocks away from the diagonal.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.vcat\">\n<code>vcat(A...)</code> </dt> <dd>\n<p>Concatenate along dimension 1</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hcat\">\n<code>hcat(A...)</code> </dt> <dd>\n<p>Concatenate along dimension 2</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hvcat\">\n<code>hvcat(rows::Tuple{Vararg{Int}}, values...)</code> </dt> <dd>\n<p>Horizontal and vertical concatenation in one call. This function is called for block matrix syntax. The first argument specifies the number of arguments to concatenate in each block row.</p> <pre data-language=\"julia\">julia&gt; a, b, c, d, e, f = 1, 2, 3, 4, 5, 6\n(1,2,3,4,5,6)\n\njulia&gt; [a b c; d e f]\n2x3 Array{Int64,2}:\n 1  2  3\n 4  5  6\n\njulia&gt; hvcat((3,3), a,b,c,d,e,f)\n2x3 Array{Int64,2}:\n 1  2  3\n 4  5  6\n\njulia&gt; [a b;c d; e f]\n3x2 Array{Int64,2}:\n 1  2\n 3  4\n 5  6\n\njulia&gt; hvcat((2,2,2), a,b,c,d,e,f)\n3x2 Array{Int64,2}:\n 1  2\n 3  4\n 5  6\n</pre> <p>If the first argument is a single integer <code>n</code>, then all block rows are assumed to have <code>n</code> block columns.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.flipdim\">\n<code>flipdim(A, d)</code> </dt> <dd>\n<p>Reverse <code>A</code> in dimension <code>d</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.circshift\">\n<code>circshift(A, shifts)</code> </dt> <dd>\n<p>Circularly shift the data in an array. The second argument is a vector giving the amount to shift in each dimension.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.find\">\n<code>find(A)</code> </dt> <dd>\n<p>Return a vector of the linear indexes of the non-zeros in <code>A</code> (determined by <code>A[i]!=0</code>). A common use of this is to convert a boolean array to an array of indexes of the <code>true</code> elements.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>find(f, A)</code> </dt> <dd>\n<p>Return a vector of the linear indexes of <code>A</code> where <code>f</code> returns <code>true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.findn\">\n<code>findn(A)</code> </dt> <dd>\n<p>Return a vector of indexes for each dimension giving the locations of the non-zeros in <code>A</code> (determined by <code>A[i]!=0</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.findnz\">\n<code>findnz(A)</code> </dt> <dd>\n<p>Return a tuple <code>(I, J, V)</code> where <code>I</code> and <code>J</code> are the row and column indexes of the non-zero values in matrix <code>A</code>, and <code>V</code> is a vector of the non-zero values.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.findfirst\">\n<code>findfirst(A)</code> </dt> <dd>\n<p>Return the index of the first non-zero value in <code>A</code> (determined by <code>A[i]!=0</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>findfirst(A, v)</code> </dt> <dd>\n<p>Return the index of the first element equal to <code>v</code> in <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>findfirst(predicate, A)</code> </dt> <dd>\n<p>Return the index of the first element of <code>A</code> for which <code>predicate</code> returns <code>true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.findlast\">\n<code>findlast(A)</code> </dt> <dd>\n<p>Return the index of the last non-zero value in <code>A</code> (determined by <code>A[i]!=0</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>findlast(A, v)</code> </dt> <dd>\n<p>Return the index of the last element equal to <code>v</code> in <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>findlast(predicate, A)</code> </dt> <dd>\n<p>Return the index of the last element of <code>A</code> for which <code>predicate</code> returns <code>true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.findnext\">\n<code>findnext(A, i)</code> </dt> <dd>\n<p>Find the next index &gt;= <code>i</code> of a non-zero element of <code>A</code>, or <code>0</code> if not found.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>findnext(predicate, A, i)</code> </dt> <dd>\n<p>Find the next index &gt;= <code>i</code> of an element of <code>A</code> for which <code>predicate</code> returns <code>true</code>, or <code>0</code> if not found.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>findnext(A, v, i)</code> </dt> <dd>\n<p>Find the next index &gt;= <code>i</code> of an element of <code>A</code> equal to <code>v</code> (using <code>==</code>), or <code>0</code> if not found.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.findprev\">\n<code>findprev(A, i)</code> </dt> <dd>\n<p>Find the previous index &lt;= <code>i</code> of a non-zero element of <code>A</code>, or <code>0</code> if not found.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>findprev(predicate, A, i)</code> </dt> <dd>\n<p>Find the previous index &lt;= <code>i</code> of an element of <code>A</code> for which <code>predicate</code> returns <code>true</code>, or <code>0</code> if not found.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>findprev(A, v, i)</code> </dt> <dd>\n<p>Find the previous index &lt;= <code>i</code> of an element of <code>A</code> equal to <code>v</code> (using <code>==</code>), or <code>0</code> if not found.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.permutedims\">\n<code>permutedims(A, perm)</code> </dt> <dd>\n<p>Permute the dimensions of array <code>A</code>. <code>perm</code> is a vector specifying a permutation of length <code>ndims(A)</code>. This is a generalization of transpose for multi-dimensional arrays. Transpose is equivalent to <code>permutedims(A, [2,1])</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ipermutedims\">\n<code>ipermutedims(A, perm)</code> </dt> <dd>\n<p>Like <a class=\"reference internal\" href=\"#Base.permutedims\" title=\"Base.permutedims\"><code>permutedims()</code></a>, except the inverse of the given permutation is applied.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.permutedims!\">\n<code>permutedims!(dest, src, perm)</code> </dt> <dd>\n<p>Permute the dimensions of array <code>src</code> and store the result in the array <code>dest</code>. <code>perm</code> is a vector specifying a permutation of length <code>ndims(src)</code>. The preallocated array <code>dest</code> should have <code>size(dest) == size(src)[perm]</code> and is completely overwritten. No in-place permutation is supported and unexpected results will happen if <code>src</code> and <code>dest</code> have overlapping memory regions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.squeeze\">\n<code>squeeze(A, dims)</code> </dt> <dd>\n<p>Remove the dimensions specified by <code>dims</code> from array <code>A</code>. Elements of <code>dims</code> must be unique and within the range <code>1:ndims(A)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.vec\">\n<code>vec(Array) → Vector</code> </dt> <dd>\n<p>Vectorize an array using column-major convention.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.promote_shape\">\n<code>promote_shape(s1, s2)</code> </dt> <dd>\n<p>Check two array shapes for compatibility, allowing trailing singleton dimensions, and return whichever shape has more dimensions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.checkbounds\">\n<code>checkbounds(array, indexes...)</code> </dt> <dd>\n<p>Throw an error if the specified indexes are not in bounds for the given array. Subtypes of <code>AbstractArray</code> should specialize this method if they need to provide custom bounds checking behaviors.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>checkbounds(::Type{Bool}, dimlength::Integer, index)</code> </dt> <dd>\n<p>Return a <code>Bool</code> describing if the given index is within the bounds of the given dimension length. Custom types that would like to behave as indices for all arrays can extend this method in order to provide a specialized bounds checking implementation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.randsubseq\">\n<code>randsubseq(A, p) → Vector</code> </dt> <dd>\n<p>Return a vector consisting of a random subsequence of the given array <code>A</code>, where each element of <code>A</code> is included (in order) with independent probability <code>p</code>. (Complexity is linear in <code>p*length(A)</code>, so this function is efficient even if <code>p</code> is small and <code>A</code> is large.) Technically, this process is known as “Bernoulli sampling” of <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.randsubseq!\">\n<code>randsubseq!(S, A, p)</code> </dt> <dd>\n<p>Like <code>randsubseq</code>, but the results are stored in <code>S</code> (which is resized as needed).</p> </dd>\n</dl>   <h2 id=\"array-functions\">Array functions</h2> <dl class=\"function\"> <dt id=\"Base.cumprod\">\n<code>cumprod(A[, dim])</code> </dt> <dd>\n<p>Cumulative product along a dimension <code>dim</code> (defaults to 1). See also <a class=\"reference internal\" href=\"#Base.cumprod!\" title=\"Base.cumprod!\"><code>cumprod!()</code></a> to use a preallocated output array, both for performance and to control the precision of the output (e.g. to avoid overflow).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cumprod!\">\n<code>cumprod!(B, A[, dim])</code> </dt> <dd>\n<p>Cumulative product of <code>A</code> along a dimension, storing the result in <code>B</code>. The dimension defaults to 1.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cumsum\">\n<code>cumsum(A[, dim])</code> </dt> <dd>\n<p>Cumulative sum along a dimension <code>dim</code> (defaults to 1). See also <a class=\"reference internal\" href=\"#Base.cumsum!\" title=\"Base.cumsum!\"><code>cumsum!()</code></a> to use a preallocated output array, both for performance and to control the precision of the output (e.g. to avoid overflow).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cumsum!\">\n<code>cumsum!(B, A[, dim])</code> </dt> <dd>\n<p>Cumulative sum of <code>A</code> along a dimension, storing the result in <code>B</code>. The dimension defaults to 1.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cumsum_kbn\">\n<code>cumsum_kbn(A[, dim])</code> </dt> <dd>\n<p>Cumulative sum along a dimension, using the Kahan-Babuska-Neumaier compensated summation algorithm for additional accuracy. The dimension defaults to 1.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cummin\">\n<code>cummin(A[, dim])</code> </dt> <dd>\n<p>Cumulative minimum along a dimension. The dimension defaults to 1.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cummax\">\n<code>cummax(A[, dim])</code> </dt> <dd>\n<p>Cumulative maximum along a dimension. The dimension defaults to 1.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.diff\">\n<code>diff(A[, dim])</code> </dt> <dd>\n<p>Finite difference operator of matrix or vector.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.gradient\">\n<code>gradient(F[, h])</code> </dt> <dd>\n<p>Compute differences along vector <code>F</code>, using <code>h</code> as the spacing between points. The default spacing is one.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rot180\">\n<code>rot180(A)</code> </dt> <dd>\n<p>Rotate matrix <code>A</code> 180 degrees.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>rot180(A, k)</code> </dt> <dd>\n<p>Rotate matrix <code>A</code> 180 degrees an integer <code>k</code> number of times. If <code>k</code> is even, this is equivalent to a <code>copy</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rotl90\">\n<code>rotl90(A)</code> </dt> <dd>\n<p>Rotate matrix <code>A</code> left 90 degrees.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>rotl90(A, k)</code> </dt> <dd>\n<p>Rotate matrix <code>A</code> left 90 degrees an integer <code>k</code> number of times. If <code>k</code> is zero or a multiple of four, this is equivalent to a <code>copy</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rotr90\">\n<code>rotr90(A)</code> </dt> <dd>\n<p>Rotate matrix <code>A</code> right 90 degrees.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>rotr90(A, k)</code> </dt> <dd>\n<p>Rotate matrix <code>A</code> right 90 degrees an integer <code>k</code> number of times. If <code>k</code> is zero or a multiple of four, this is equivalent to a <code>copy</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reducedim\">\n<code>reducedim(f, A, dims[, initial])</code> </dt> <dd>\n<p>Reduce 2-argument function <code>f</code> along dimensions of <code>A</code>. <code>dims</code> is a vector specifying the dimensions to reduce, and <code>initial</code> is the initial value to use in the reductions. For <code>+</code>, <code>*</code>, <code>max</code> and <code>min</code> the <code>initial</code> argument is optional.</p> <p>The associativity of the reduction is implementation-dependent; if you need a particular associativity, e.g. left-to-right, you should write your own loop. See documentation for <code>reduce</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mapreducedim\">\n<code>mapreducedim(f, op, A, dims[, initial])</code> </dt> <dd>\n<p>Evaluates to the same as <code>reducedim(op, map(f, A), dims, f(initial))</code>, but is generally faster because the intermediate array is avoided.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mapslices\">\n<code>mapslices(f, A, dims)</code> </dt> <dd>\n<p>Transform the given dimensions of array <code>A</code> using function <code>f</code>. <code>f</code> is called on each slice of <code>A</code> of the form <code>A[...,:,...,:,...]</code>. <code>dims</code> is an integer vector specifying where the colons go in this expression. The results are concatenated along the remaining dimensions. For example, if <code>dims</code> is <code>[1,2]</code> and <code>A</code> is 4-dimensional, <code>f</code> is called on <code>A[:,:,i,j]</code> for all <code>i</code> and <code>j</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sum_kbn\">\n<code>sum_kbn(A)</code> </dt> <dd>\n<p>Returns the sum of all array elements, using the Kahan-Babuska-Neumaier compensated summation algorithm for additional accuracy.</p> </dd>\n</dl>   <h2 id=\"combinatorics\">Combinatorics</h2> <dl class=\"function\"> <dt id=\"Base.nthperm\">\n<code>nthperm(v, k)</code> </dt> <dd>\n<p>Compute the kth lexicographic permutation of a vector.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>nthperm(p)</code> </dt> <dd>\n<p>Return the <code>k</code> that generated permutation <code>p</code>. Note that <code>nthperm(nthperm([1:n], k)) == k</code> for <code>1 &lt;= k &lt;= factorial(n)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nthperm!\">\n<code>nthperm!(v, k)</code> </dt> <dd>\n<p>In-place version of <a class=\"reference internal\" href=\"#Base.nthperm\" title=\"Base.nthperm\"><code>nthperm()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.randperm\">\n<code>randperm([rng, ]n)</code> </dt> <dd>\n<p>Construct a random permutation of length <code>n</code>. The optional <code>rng</code> argument specifies a random number generator, see <a class=\"reference internal\" href=\"../numbers/index#random-numbers\"><span>Random Numbers</span></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.invperm\">\n<code>invperm(v)</code> </dt> <dd>\n<p>Return the inverse permutation of v.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isperm\">\n<code>isperm(v) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>v</code> is a valid permutation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.permute!\">\n<code>permute!(v, p)</code> </dt> <dd>\n<p>Permute vector <code>v</code> in-place, according to permutation <code>p</code>. No checking is done to verify that <code>p</code> is a permutation.</p> <p>To return a new permutation, use <code>v[p]</code>. Note that this is generally faster than <code>permute!(v,p)</code> for large vectors.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ipermute!\">\n<code>ipermute!(v, p)</code> </dt> <dd>\n<p>Like permute!, but the inverse of the given permutation is applied.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.randcycle\">\n<code>randcycle([rng, ]n)</code> </dt> <dd>\n<p>Construct a random cyclic permutation of length <code>n</code>. The optional <code>rng</code> argument specifies a random number generator, see <a class=\"reference internal\" href=\"../numbers/index#random-numbers\"><span>Random Numbers</span></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.shuffle\">\n<code>shuffle([rng, ]v)</code> </dt> <dd>\n<p>Return a randomly permuted copy of <code>v</code>. The optional <code>rng</code> argument specifies a random number generator, see <a class=\"reference internal\" href=\"../numbers/index#random-numbers\"><span>Random Numbers</span></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.shuffle!\">\n<code>shuffle!([rng, ]v)</code> </dt> <dd>\n<p>In-place version of <a class=\"reference internal\" href=\"#Base.shuffle\" title=\"Base.shuffle\"><code>shuffle()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reverse\">\n<code>reverse(v[, start=1[, stop=length(v)]])</code> </dt> <dd>\n<p>Return a copy of <code>v</code> reversed from start to stop.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reverseind\">\n<code>reverseind(v, i)</code> </dt> <dd>\n<p>Given an index <code>i</code> in <code>reverse(v)</code>, return the corresponding index in <code>v</code> so that <code>v[reverseind(v,i)] == reverse(v)[i]</code>. (This can be nontrivial in the case where <code>v</code> is a Unicode string.)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reverse!\">\n<code>reverse!(v[, start=1[, stop=length(v)]]) → v</code> </dt> <dd>\n<p>In-place version of <a class=\"reference internal\" href=\"../strings/index#Base.reverse\" title=\"Base.reverse\"><code>reverse()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.combinations\">\n<code>combinations(array, n)</code> </dt> <dd>\n<p>Generate all combinations of <code>n</code> elements from an indexable object. Because the number of combinations can be very large, this function returns an iterator object. Use <code>collect(combinations(array,n))</code> to get an array of all combinations.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.permutations\">\n<code>permutations(array)</code> </dt> <dd>\n<p>Generate all permutations of an indexable object. Because the number of permutations can be very large, this function returns an iterator object. Use <code>collect(permutations(array))</code> to get an array of all permutations.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.partitions\">\n<code>partitions(n)</code> </dt> <dd>\n<p>Generate all integer arrays that sum to <code>n</code>. Because the number of partitions can be very large, this function returns an iterator object. Use <code>collect(partitions(n))</code> to get an array of all partitions. The number of partitions to generate can be efficiently computed using <code>length(partitions(n))</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>partitions(n, m)</code> </dt> <dd>\n<p>Generate all arrays of <code>m</code> integers that sum to <code>n</code>. Because the number of partitions can be very large, this function returns an iterator object. Use <code>collect(partitions(n,m))</code> to get an array of all partitions. The number of partitions to generate can be efficiently computed using <code>length(partitions(n,m))</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>partitions(array)</code> </dt> <dd>\n<p>Generate all set partitions of the elements of an array, represented as arrays of arrays. Because the number of partitions can be very large, this function returns an iterator object. Use <code>collect(partitions(array))</code> to get an array of all partitions. The number of partitions to generate can be efficiently computed using <code>length(partitions(array))</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>partitions(array, m)</code> </dt> <dd>\n<p>Generate all set partitions of the elements of an array into exactly m subsets, represented as arrays of arrays. Because the number of partitions can be very large, this function returns an iterator object. Use <code>collect(partitions(array,m))</code> to get an array of all partitions. The number of partitions into m subsets is equal to the Stirling number of the second kind and can be efficiently computed using <code>length(partitions(array,m))</code>.</p> </dd>\n</dl>   <h2 id=\"bitarrays\">BitArrays</h2> <dl class=\"function\"> <dt id=\"Base.bitpack\">\n<code>bitpack(A::AbstractArray{T, N}) → BitArray</code> </dt> <dd>\n<p>Converts a numeric array to a packed boolean array</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bitunpack\">\n<code>bitunpack(B::BitArray{N}) → Array{Bool,N}</code> </dt> <dd>\n<p>Converts a packed boolean array to an array of booleans</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.flipbits!\">\n<code>flipbits!(B::BitArray{N}) → BitArray{N}</code> </dt> <dd>\n<p>Performs a bitwise not operation on <code>B</code>. See <a class=\"reference internal\" href=\"../math/index#id33\"><span>~ operator</span></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rol!\">\n<code>rol!(dest::BitArray{1}, src::BitArray{1}, i::Integer) → BitArray{1}</code> </dt> <dd>\n<p>Performs a left rotation operation on <code>src</code> and put the result into <code>dest</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>rol!(B::BitArray{1}, i::Integer) → BitArray{1}</code> </dt> <dd>\n<p>Performs a left rotation operation on <code>B</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rol\">\n<code>rol(B::BitArray{1}, i::Integer) → BitArray{1}</code> </dt> <dd>\n<p>Performs a left rotation operation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ror!\">\n<code>ror!(dest::BitArray{1}, src::BitArray{1}, i::Integer) → BitArray{1}</code> </dt> <dd>\n<p>Performs a right rotation operation on <code>src</code> and put the result into <code>dest</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>ror!(B::BitArray{1}, i::Integer) → BitArray{1}</code> </dt> <dd>\n<p>Performs a right rotation operation on <code>B</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ror\">\n<code>ror(B::BitArray{1}, i::Integer) → BitArray{1}</code> </dt> <dd>\n<p>Performs a right rotation operation.</p> </dd>\n</dl>   <h2 id=\"stdlib-sparse\">Sparse Matrices</h2> <p id=\"sparse-matrices\">Sparse matrices support much of the same set of operations as dense matrices. The following functions are specific to sparse matrices.</p> <dl class=\"function\"> <dt id=\"Base.sparse\">\n<code>sparse(I, J, V[, m, n, combine])</code> </dt> <dd>\n<p>Create a sparse matrix <code>S</code> of dimensions <code>m x n</code> such that <code>S[I[k], J[k]] = V[k]</code>. The <code>combine</code> function is used to combine duplicates. If <code>m</code> and <code>n</code> are not specified, they are set to <code>maximum(I)</code> and <code>maximum(J)</code> respectively. If the <code>combine</code> function is not supplied, duplicates are added by default. All elements of <code>I</code> must satisfy <code>1 &lt;= I[k] &lt;= m</code>, and all elements of <code>J</code> must satisfy <code>1 &lt;= J[k] &lt;= n</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sparsevec\">\n<code>sparsevec(I, V[, m, combine])</code> </dt> <dd>\n<p>Create a sparse matrix <code>S</code> of size <code>m x 1</code> such that <code>S[I[k]] = V[k]</code>. Duplicates are combined using the <code>combine</code> function, which defaults to <code>+</code> if it is not provided. In julia, sparse vectors are really just sparse matrices with one column. Given Julia’s Compressed Sparse Columns (CSC) storage format, a sparse column matrix with one column is sparse, whereas a sparse row matrix with one row ends up being dense.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>sparsevec(D::Dict[, m])</code> </dt> <dd>\n<p>Create a sparse matrix of size <code>m x 1</code> where the row values are keys from the dictionary, and the nonzero values are the values from the dictionary.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.issparse\">\n<code>issparse(S)</code> </dt> <dd>\n<p>Returns <code>true</code> if <code>S</code> is sparse, and <code>false</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>sparse(A)</code> </dt> <dd>\n<p>Convert an AbstractMatrix <code>A</code> into a sparse matrix.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>sparsevec(A)</code> </dt> <dd>\n<p>Convert a dense vector <code>A</code> into a sparse matrix of size <code>m x 1</code>. In julia, sparse vectors are really just sparse matrices with one column.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.full\">\n<code>full(S)</code> </dt> <dd>\n<p>Convert a sparse matrix <code>S</code> into a dense matrix.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nnz\">\n<code>nnz(A)</code> </dt> <dd>\n<p>Returns the number of stored (filled) elements in a sparse matrix.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.spzeros\">\n<code>spzeros(m, n)</code> </dt> <dd>\n<p>Create a sparse matrix of size <code>m x n</code>. This sparse matrix will not contain any nonzero values. No storage will be allocated for nonzero values during construction.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.spones\">\n<code>spones(S)</code> </dt> <dd>\n<p>Create a sparse matrix with the same structure as that of <code>S</code>, but with every nonzero element having the value <code>1.0</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.speye\">\n<code>speye(type, m[, n])</code> </dt> <dd>\n<p>Create a sparse identity matrix of specified type of size <code>m x m</code>. In case <code>n</code> is supplied, create a sparse identity matrix of size <code>m x n</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.spdiagm\">\n<code>spdiagm(B, d[, m, n])</code> </dt> <dd>\n<p>Construct a sparse diagonal matrix. <code>B</code> is a tuple of vectors containing the diagonals and <code>d</code> is a tuple containing the positions of the diagonals. In the case the input contains only one diagonal, <code>B</code> can be a vector (instead of a tuple) and <code>d</code> can be the diagonal position (instead of a tuple), defaulting to 0 (diagonal). Optionally, <code>m</code> and <code>n</code> specify the size of the resulting sparse matrix.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sprand\">\n<code>sprand([rng, ]m, n, p[, rfn])</code> </dt> <dd>\n<p>Create a random <code>m</code> by <code>n</code> sparse matrix, in which the probability of any element being nonzero is independently given by <code>p</code> (and hence the mean density of nonzeros is also exactly <code>p</code>). Nonzero values are sampled from the distribution specified by <code>rfn</code>. The uniform distribution is used in case <code>rfn</code> is not specified. The optional <code>rng</code> argument specifies a random number generator, see <a class=\"reference internal\" href=\"../numbers/index#random-numbers\"><span>Random Numbers</span></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sprandn\">\n<code>sprandn(m, n, p)</code> </dt> <dd>\n<p>Create a random <code>m</code> by <code>n</code> sparse matrix with the specified (independent) probability <code>p</code> of any entry being nonzero, where nonzero values are sampled from the normal distribution.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sprandbool\">\n<code>sprandbool(m, n, p)</code> </dt> <dd>\n<p>Create a random <code>m</code> by <code>n</code> sparse boolean matrix with the specified (independent) probability <code>p</code> of any entry being <code>true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.etree\">\n<code>etree(A[, post])</code> </dt> <dd>\n<p>Compute the elimination tree of a symmetric sparse matrix <code>A</code> from <code>triu(A)</code> and, optionally, its post-ordering permutation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.symperm\">\n<code>symperm(A, p)</code> </dt> <dd>\n<p>Return the symmetric permutation of <code>A</code>, which is <code>A[p,p]</code>. <code>A</code> should be symmetric and sparse, where only the upper triangular part of the matrix is stored. This algorithm ignores the lower triangular part of the matrix. Only the upper triangular part of the result is returned as well.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nonzeros\">\n<code>nonzeros(A)</code> </dt> <dd>\n<p>Return a vector of the structural nonzero values in sparse matrix <code>A</code>. This includes zeros that are explicitly stored in the sparse matrix. The returned vector points directly to the internal nonzero storage of <code>A</code>, and any modifications to the returned vector will mutate <code>A</code> as well. See <code>rowvals(A)</code> and <code>nzrange(A, col)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rowvals\">\n<code>rowvals(A)</code> </dt> <dd>\n<p>Return a vector of the row indices of <code>A</code>, and any modifications to the returned vector will mutate <code>A</code> as well. Given the internal storage format of sparse matrices, providing access to how the row indices are stored internally can be useful in conjunction with iterating over structural nonzero values. See <code>nonzeros(A)</code> and <code>nzrange(A, col)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nzrange\">\n<code>nzrange(A, col)</code> </dt> <dd>\n<p>Return the range of indices to the structural nonzero values of a sparse matrix column. In conjunction with <code>nonzeros(A)</code> and <code>rowvals(A)</code>, this allows for convenient iterating over a sparse matrix :</p> <pre data-language=\"julia\">A = sparse(I,J,V)\nrows = rowvals(A)\nvals = nonzeros(A)\nm, n = size(A)\nfor i = 1:n\n   for j in nzrange(A, i)\n      row = rows[j]\n      val = vals[j]\n      # perform sparse wizardry...\n   end\nend\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/arrays/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/arrays/</a>\n  </p>\n</div>\n","stdlib/sort/index":"<h1>Sorting and Related Functions</h1> <p>Julia has an extensive, flexible API for sorting and interacting with already-sorted arrays of values. By default, Julia picks reasonable algorithms and sorts in standard ascending order:</p> <pre data-language=\"julia\">julia&gt; sort([2,3,1])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</pre> <p>You can easily sort in reverse order as well:</p> <pre data-language=\"julia\">julia&gt; sort([2,3,1], rev=true)\n3-element Array{Int64,1}:\n 3\n 2\n 1\n</pre> <p>To sort an array in-place, use the “bang” version of the sort function:</p> <pre data-language=\"julia\">julia&gt; a = [2,3,1];\n\njulia&gt; sort!(a);\n\njulia&gt; a\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</pre> <p>Instead of directly sorting an array, you can compute a permutation of the array’s indices that puts the array into sorted order:</p> <pre data-language=\"julia\">julia&gt; v = randn(5)\n5-element Array{Float64,1}:\n  0.297288\n  0.382396\n -0.597634\n -0.0104452\n -0.839027\n\njulia&gt; p = sortperm(v)\n5-element Array{Int64,1}:\n 5\n 3\n 4\n 1\n 2\n\njulia&gt; v[p]\n5-element Array{Float64,1}:\n -0.839027\n -0.597634\n -0.0104452\n  0.297288\n  0.382396\n</pre> <p>Arrays can easily be sorted according to an arbitrary transformation of their values:</p> <pre data-language=\"julia\">julia&gt; sort(v, by=abs)\n5-element Array{Float64,1}:\n -0.0104452\n  0.297288\n  0.382396\n -0.597634\n -0.839027\n</pre> <p>Or in reverse order by a transformation:</p> <pre data-language=\"julia\">julia&gt; sort(v, by=abs, rev=true)\n5-element Array{Float64,1}:\n -0.839027\n -0.597634\n  0.382396\n  0.297288\n -0.0104452\n</pre> <p>If needed, the sorting algorithm can be chosen:</p> <pre data-language=\"julia\">julia&gt; sort(v, alg=InsertionSort)\n5-element Array{Float64,1}:\n -0.839027\n -0.597634\n -0.0104452\n  0.297288\n  0.382396\n</pre> <p>All the sorting and order related functions rely on a “less than” relation defining a total order on the values to be manipulated. The <code>isless</code> function is invoked by default, but the relation can be specified via the <code>lt</code> keyword.</p>  <h2 id=\"sorting-functions\">Sorting Functions</h2> <dl class=\"function\"> <dt id=\"Base.sort!\">\n<code>sort!(v, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></algorithm></code> </dt> <dd>\n<p>Sort the vector <code>v</code> in place. <code>QuickSort</code> is used by default for numeric arrays while <code>MergeSort</code> is used for other arrays. You can specify an algorithm to use via the <code>alg</code> keyword (see Sorting Algorithms for available algorithms). The <code>by</code> keyword lets you provide a function that will be applied to each element before comparison; the <code>lt</code> keyword allows providing a custom “less than” function; use <code>rev=true</code> to reverse the sorting order. These options are independent and can be used together in all possible combinations: if both <code>by</code> and <code>lt</code> are specified, the <code>lt</code> function is applied to the result of the <code>by</code> function; <code>rev=true</code> reverses whatever ordering specified via the <code>by</code> and <code>lt</code> keywords.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sort\">\n<code>sort(v, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></algorithm></code> </dt> <dd>\n<p>Variant of <code>sort!</code> that returns a sorted copy of <code>v</code> leaving <code>v</code> itself unmodified.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>sort(A, dim, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></algorithm></code> </dt> <dd>\n<p>Sort a multidimensional array <code>A</code> along the given dimension.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sortperm\">\n<code>sortperm(v, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></algorithm></code> </dt> <dd>\n<p>Return a permutation vector of indices of <code>v</code> that puts it in sorted order. Specify <code>alg</code> to choose a particular sorting algorithm (see Sorting Algorithms). <code>MergeSort</code> is used by default, and since it is stable, the resulting permutation will be the lexicographically first one that puts the input array into sorted order – i.e. indices of equal elements appear in ascending order. If you choose a non-stable sorting algorithm such as <code>QuickSort</code>, a different permutation that puts the array into order may be returned. The order is specified using the same keywords as <code>sort!</code>.</p> <p>See also <a class=\"reference internal\" href=\"#Base.sortperm!\" title=\"Base.sortperm!\"><code>sortperm!()</code></a></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sortperm!\">\n<code>sortperm!(ix, v, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false,] [initialized=false])</comparison></transform></algorithm></code> </dt> <dd>\n<p>Like <code>sortperm</code>, but accepts a preallocated index vector <code>ix</code>. If <code>initialized</code> is <code>false</code> (the default), ix is initialized to contain the values <code>1:length(v)</code>.</p> <p>See also <a class=\"reference internal\" href=\"#Base.sortperm\" title=\"Base.sortperm\"><code>sortperm()</code></a></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sortrows\">\n<code>sortrows(A, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></algorithm></code> </dt> <dd>\n<p>Sort the rows of matrix <code>A</code> lexicographically.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sortcols\">\n<code>sortcols(A, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></algorithm></code> </dt> <dd>\n<p>Sort the columns of matrix <code>A</code> lexicographically.</p> </dd>\n</dl>   <h2 id=\"order-related-functions\">Order-Related Functions</h2> <dl class=\"function\"> <dt id=\"Base.issorted\">\n<code>issorted(v, [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></code> </dt> <dd>\n<p>Test whether a vector is in sorted order. The <code>by</code>, <code>lt</code> and <code>rev</code> keywords modify what order is considered to be sorted just as they do for <code>sort</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.searchsorted\">\n<code>searchsorted(a, x, [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></code> </dt> <dd>\n<p>Returns the range of indices of <code>a</code> which compare as equal to <code>x</code> according to the order specified by the <code>by</code>, <code>lt</code> and <code>rev</code> keywords, assuming that <code>a</code> is already sorted in that order. Returns an empty range located at the insertion point if <code>a</code> does not contain values equal to <code>x</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.searchsortedfirst\">\n<code>searchsortedfirst(a, x, [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></code> </dt> <dd>\n<p>Returns the index of the first value in <code>a</code> greater than or equal to <code>x</code>, according to the specified order. Returns <code>length(a)+1</code> if <code>x</code> is greater than all values in <code>a</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.searchsortedlast\">\n<code>searchsortedlast(a, x, [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></code> </dt> <dd>\n<p>Returns the index of the last value in <code>a</code> less than or equal to <code>x</code>, according to the specified order. Returns <code>0</code> if <code>x</code> is less than all values in <code>a</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.select!\">\n<code>select!(v, k, [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></code> </dt> <dd>\n<p>Partially sort the vector <code>v</code> in place, according to the order specified by <code>by</code>, <code>lt</code> and <code>rev</code> so that the value at index <code>k</code> (or range of adjacent values if <code>k</code> is a range) occurs at the position where it would appear if the array were fully sorted via a non-stable algorithm. If <code>k</code> is a single index, that value is returned; if <code>k</code> is a range, an array of values at those indices is returned. Note that <code>select!</code> does not fully sort the input array.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.select\">\n<code>select(v, k, [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></code> </dt> <dd>\n<p>Variant of <code>select!</code> which copies <code>v</code> before partially sorting it, thereby returning the same thing as <code>select!</code> but leaving <code>v</code> unmodified.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.selectperm\">\n<code>selectperm(v, k, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])</comparison></transform></algorithm></code> </dt> <dd>\n<p>Return a partial permutation of the vector <code>v</code>, according to the order specified by <code>by</code>, <code>lt</code> and <code>rev</code>, so that <code>v[output]</code> returns the first <code>k</code> (or range of adjacent values if <code>k</code> is a range) values of a fully sorted version of <code>v</code>. If <code>k</code> is a single index (Integer), an array of the first <code>k</code> indices is returned; if <code>k</code> is a range, an array of those indices is returned. Note that the handling of integer values for <code>k</code> is different from <code>select</code> in that it returns a vector of <code>k</code> elements instead of just the <code>k</code> th element. Also note that this is equivalent to, but more efficient than, calling <code>sortperm(...)[k]</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.selectperm!\">\n<code>selectperm!(ix, v, k, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false,] [initialized=false])</comparison></transform></algorithm></code> </dt> <dd>\n<p>Like <code>selectperm</code>, but accepts a preallocated index vector <code>ix</code>. If <code>initialized</code> is <code>false</code> (the default), ix is initialized to contain the values <code>1:length(ix)</code>.</p> </dd>\n</dl>   <h2 id=\"sorting-algorithms\">Sorting Algorithms</h2> <p>There are currently four sorting algorithms available in base Julia:</p> <ul class=\"simple\"> <li><code>InsertionSort</code></li> <li><code>QuickSort</code></li> <li><code>PartialQuickSort(k)</code></li> <li><code>MergeSort</code></li> </ul> <p><code>InsertionSort</code> is an O(n^2) stable sorting algorithm. It is efficient for very small <code>n</code>, and is used internally by <code>QuickSort</code>.</p> <p><code>QuickSort</code> is an O(n log n) sorting algorithm which is in-place, very fast, but not stable – i.e. elements which are considered equal will not remain in the same order in which they originally appeared in the array to be sorted. <code>QuickSort</code> is the default algorithm for numeric values, including integers and floats.</p> <p><code>PartialQuickSort(k)</code> is similar to <code>QuickSort</code>, but the output array is only sorted up to index <code>k</code> if <code>k</code> is an integer, or in the range of <code>k</code> if <code>k</code> is an <code>OrdinalRange</code>. For example:</p> <pre data-language=\"julia\">x = rand(1:500, 100)\nk = 50\nk2 = 50:100\ns = sort(x; alg=QuickSort)\nps = sort(x; alg=PartialQuickSort(k))\nqs = sort(x; alg=PartialQuickSort(k2))\nmap(issorted, (s, ps, qs))             # =&gt; (true, false, false)\nmap(x-&gt;issorted(x[1:k]), (s, ps, qs))  # =&gt; (true, true, false)\nmap(x-&gt;issorted(x[k2]), (s, ps, qs))   # =&gt; (true, false, true)\ns[1:k] == ps[1:k]                      # =&gt; true\ns[k2] == qs[k2]                        # =&gt; true\n</pre> <p><code>MergeSort</code> is an O(n log n) stable sorting algorithm but is not in-place – it requires a temporary array of half the size of the input array – and is typically not quite as fast as <code>QuickSort</code>. It is the default algorithm for non-numeric data.</p> <p>The default sorting algorithms are chosen on the basis that they are fast and stable, or <em>appear</em> to be so. For numeric types indeed, <code>QuickSort</code> is selected as it is faster and indistinguishable in this case from a stable sort (unless the array records its mutations in some way). The stability property comes at a non-negligible cost, so if you don’t need it, you may want to explicitly specify your preferred algorithm, e.g. <code>sort!(v, alg=QuickSort)</code>.</p> <p>The mechanism by which Julia picks default sorting algorithms is implemented via the <code>Base.Sort.defalg</code> function. It allows a particular algorithm to be registered as the default in all sorting functions for specific arrays. For example, here are the two default methods from <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/base/sort.jl\">sort.jl</a>:</p> <pre data-language=\"julia\">defalg(v::AbstractArray) = MergeSort\ndefalg{T&lt;:Number}(v::AbstractArray{T}) = QuickSort\n</pre> <p>As for numeric arrays, choosing a non-stable default algorithm for array types for which the notion of a stable sort is meaningless (i.e. when two values comparing equal can not be distinguished) may make sense.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/sort/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/sort/</a>\n  </p>\n</div>\n","stdlib/test/index":"<h1>Unit and Functional Testing</h1>  <h2 id=\"testing-base-julia\">Testing Base Julia</h2> <p>Julia is under rapid development and has an extensive test suite to verify functionality across multiple platforms. If you build Julia from source, you can run this test suite with <code>make test</code>. In a binary install, you can run the test suite using <code>Base.runtests()</code>.</p> <dl class=\"function\" id=\"module-Base.Test\"> <dt id=\"Base.runtests\">\n<code>runtests([tests=[\"all\"][, numcores=iceil(CPU_CORES/2)]])</code> </dt> <dd>\n<p>Run the Julia unit tests listed in <code>tests</code>, which can be either a string or an array of strings, using <code>numcores</code> processors. (not exported)</p> </dd>\n</dl>   <h2 id=\"test-framework\">Test Framework</h2> <p>The <code>Test</code> module contains macros and functions related to testing. A default handler is provided to run the tests, and a custom one can be provided by the user by using the <code>registerhandler()</code> function.</p> <p>To use the default handler, the macro <a class=\"reference internal\" href=\"#Base.Test.@test\" title=\"Base.Test.@test\"><code>@test()</code></a> can be used directly:</p> <pre data-language=\"julia\">julia&gt; using Base.Test\n\njulia&gt; @test 1 == 1\n\njulia&gt; @test 1 == 0\nERROR: test failed: 1 == 0\n in error at error.jl:21\n in default_handler at test.jl:19\n in do_test at test.jl:39\n\njulia&gt; @test error(\"This is what happens when a test fails\")\nERROR: test error during error(\"This is what happens when a test fails\")\nThis is what happens when a test fails\n in error at error.jl:21\n in anonymous at test.jl:62\n in do_test at test.jl:37\n</pre> <p>As seen in the examples above, failures or errors will print the abstract syntax tree of the expression in question.</p> <p>Another macro is provided to check if the given expression throws an exception of type <code>extype</code>, <a class=\"reference internal\" href=\"#Base.Test.@test_throws\" title=\"Base.Test.@test_throws\"><code>@test_throws()</code></a>:</p> <pre data-language=\"julia\">julia&gt; @test_throws ErrorException error(\"An error\")\nErrorException(\"An error\")\n\njulia&gt; @test_throws BoundsError error(\"An error\")\nERROR: test failed: error(\"An error\")\n in error at error.jl:21\n in default_handler at test.jl:19\n in do_test_throws at test.jl:55\n\njulia&gt; @test_throws DomainError throw(DomainError())\nDomainError()\n\njulia&gt; @test_throws DomainError throw(EOFError())\nERROR: test failed: throw(EOFError())\n in error at error.jl:21\n in default_handler at test.jl:19\n in do_test_throws at test.jl:55\n</pre> <p>As floating-point values can be imprecise, you can perform approximate equality checks using either <code>@test a ≈ b</code> (where <code>≈</code>, typed via tab completion of <code>\\approx</code>, is the <code>isapprox</code> function) or use the macros <code>@test_approx_eq</code> macro (which differs from <code>isapprox</code> in that it treats NaN values as equal and has a smaller default tolerance) or <code>@test_approx_eq_eps</code> (which takes an extra argument indicating the relative tolerance):</p> <pre data-language=\"julia\">julia&gt; @test 1 ≈ 0.999999999\n\njulia&gt; @test 1 ≈ 0.999999\nERROR: test failed: 1 isapprox 0.999999\n in expression: 1 ≈ 0.999999\n in error at error.jl:21\n in default_handler at test.jl:30\n in do_test at test.jl:53\n\njulia&gt; @test_approx_eq 1. 0.999999999\nERROR: assertion failed: |1.0 - 0.999999999| &lt; 2.220446049250313e-12\n  1.0 = 1.0\n  0.999999999 = 0.999999999\n in test_approx_eq at test.jl:75\n in test_approx_eq at test.jl:80\n\njulia&gt; @test_approx_eq 1. 0.9999999999999\n\njulia&gt; @test_approx_eq_eps 1. 0.999 1e-2\n\njulia&gt; @test_approx_eq_eps 1. 0.999 1e-3\nERROR: assertion failed: |1.0 - 0.999| &lt;= 0.001\n  1.0 = 1.0\n  0.999 = 0.999\n  difference = 0.0010000000000000009 &gt; 0.001\n in error at error.jl:22\n in test_approx_eq at test.jl:68\n</pre>   <h2 id=\"handlers\">Handlers</h2> <p>A handler is a function defined for three kinds of arguments: <code>Success</code>, <code>Failure</code>, <code>Error</code>:</p> <pre data-language=\"julia\"># An example definition of a test handler\ntest_handler(r::Success) = nothing\ntest_handler(r::Failure) = error(\"test failed: $(r.expr)\")\ntest_handler(r::Error)   = rethrow(r)\n</pre> <p>A different handler can be used for a block (with <a class=\"reference internal\" href=\"#Base.Test.with_handler\" title=\"Base.Test.with_handler\"><code>with_handler()</code></a>):</p> <pre data-language=\"julia\">julia&gt; using Base.Test\n\njulia&gt; custom_handler(r::Test.Success) = println(\"Success on $(r.expr)\")\ncustom_handler (generic function with 1 method)\n\njulia&gt; custom_handler(r::Test.Failure) = error(\"Error on custom handler: $(r.expr)\")\ncustom_handler (generic function with 2 methods)\n\njulia&gt; custom_handler(r::Test.Error) = rethrow(r)\ncustom_handler (generic function with 3 methods)\n\njulia&gt; Test.with_handler(custom_handler) do\n         @test 1 == 1\n         @test 1 != 1\n       end\nSuccess on :((1==1))\nERROR: Error on custom handler: :((1!=1))\n in error at error.jl:21\n in custom_handler at none:1\n in do_test at test.jl:39\n in anonymous at no file:3\n in task_local_storage at task.jl:28\n in with_handler at test.jl:24\n</pre> <p>The <code>Success</code> and <code>Failure</code> types include an additonal field, <code>resultexpr</code>, which is a partially evaluated expression. For example, in a comparison it will contain an expression with the left and right sides evaluated.</p>   <h2 id=\"macros\">Macros</h2> <dl class=\"function\"> <dt id=\"Base.Test.@test\">\n<code>@test(ex)</code> </dt> <dd>\n<p>Test the expression <code>ex</code> and calls the current handler to handle the result.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Test.@test_throws\">\n<code>@test_throws(extype, ex)</code> </dt> <dd>\n<p>Test that the expression <code>ex</code> throws an exception of type <code>extype</code> and calls the current handler to handle the result.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Test.@test_approx_eq\">\n<code>@test_approx_eq(a, b)</code> </dt> <dd>\n<p>Test two floating point numbers <code>a</code> and <code>b</code> for equality taking in account small numerical errors.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Test.@test_approx_eq_eps\">\n<code>@test_approx_eq_eps(a, b, tol)</code> </dt> <dd>\n<p>Test two floating point numbers <code>a</code> and <code>b</code> for equality taking in account a margin of tolerance given by <code>tol</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>@inferred f(x)</code> </dt> <dd>\n<p>Tests that the call expression <code>f(x)</code> returns a value of the same type inferred by the compiler. It’s useful to check for type stability.</p> <p><code>f(x)</code> can be any call expression. Returns the result of <code>f(x)</code> if the types match, and an <code>Error</code> <code>Result</code> if it finds different types.</p> <pre data-language=\"julia\">julia&gt; using Base.Test\n\njulia&gt; f(a,b,c) = b &gt; 1 ? 1 : 1.0\nf (generic function with 1 method)\n\njulia&gt; typeof(f(1,2,3))\nInt64\n\njulia&gt; @code_warntype f(1,2,3)\nVariables:\n  a::Int64\n  b::Int64\n  c::Int64\n\nBody:\n  begin  # none, line 1:\n      unless (Base.slt_int)(1,b::Int64)::Bool goto 0\n      return 1\n      0:\n      return 1.0\n  end::UNION{FLOAT64,INT64}\n\njulia&gt; @inferred f(1,2,3)\nERROR: return type Int64 does not match inferred return type Union{Float64,Int64}\n in error at ./error.jl:21\n\njulia&gt; @inferred max(1,2)\n2\n</pre> </dd>\n</dl>   <h2 id=\"functions\">Functions</h2> <dl class=\"function\"> <dt id=\"Base.Test.with_handler\">\n<code>with_handler(f, handler)</code> </dt> <dd>\n<p>Run the function <code>f</code> using the <code>handler</code> as the handler.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/test/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/test/</a>\n  </p>\n</div>\n","stdlib/collections/index":"<h1>Collections and Data Structures</h1>  <h2 id=\"stdlib-collections-iteration\">Iteration</h2> <p id=\"iteration\">Sequential iteration is implemented by the methods <a class=\"reference internal\" href=\"#Base.start\" title=\"Base.start\"><code>start()</code></a>, <a class=\"reference internal\" href=\"#Base.done\" title=\"Base.done\"><code>done()</code></a>, and <a class=\"reference internal\" href=\"#Base.next\" title=\"Base.next\"><code>next()</code></a>. The general <code>for</code> loop:</p> <pre data-language=\"julia\">for i = I   # or  \"for i in I\"\n    # body\nend\n</pre> <p>is translated into:</p> <pre data-language=\"julia\">state = start(I)\nwhile !done(I, state)\n    (i, state) = next(I, state)\n    # body\nend\n</pre> <p>The <code>state</code> object may be anything, and should be chosen appropriately for each iterable type. See the <a class=\"reference internal\" href=\"../../manual/interfaces/index#man-interfaces-iteration\"><span>manual section on the iteration interface</span></a> for more details about defining a custom iterable type.</p> <dl class=\"function\"> <dt id=\"Base.start\">\n<code>start(iter) → state</code> </dt> <dd>\n<p>Get initial iteration state for an iterable object</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.done\">\n<code>done(iter, state) → Bool</code> </dt> <dd>\n<p>Test whether we are done iterating</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.next\">\n<code>next(iter, state) → item, state</code> </dt> <dd>\n<p>For a given iterable object and iteration state, return the current item and the next iteration state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.zip\">\n<code>zip(iters...)</code> </dt> <dd>\n<p>For a set of iterable objects, returns an iterable of tuples, where the <code>i</code>th tuple contains the <code>i</code>th component of each input iterable.</p> <p>Note that <a class=\"reference internal\" href=\"#Base.zip\" title=\"Base.zip\"><code>zip()</code></a> is its own inverse: <code>collect(zip(zip(a...)...)) == collect(a)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.enumerate\">\n<code>enumerate(iter)</code> </dt> <dd>\n<p>An iterator that yields <code>(i, x)</code> where <code>i</code> is an index starting at 1, and <code>x</code> is the <code>i</code>th value from the given iterator. It’s useful when you need not only the values <code>x</code> over which you are iterating, but also the index <code>i</code> of the iterations.</p> <pre data-language=\"julia\">julia&gt; a = [\"a\", \"b\", \"c\"];\n\njulia&gt; for (index, value) in enumerate(a)\n           println(\"$index $value\")\n       end\n1 a\n2 b\n3 c\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rest\">\n<code>rest(iter, state)</code> </dt> <dd>\n<p>An iterator that yields the same elements as <code>iter</code>, but starting at the given <code>state</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.countfrom\">\n<code>countfrom(start=1, step=1)</code> </dt> <dd>\n<p>An iterator that counts forever, starting at <code>start</code> and incrementing by <code>step</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.take\">\n<code>take(iter, n)</code> </dt> <dd>\n<p>An iterator that generates at most the first <code>n</code> elements of <code>iter</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.drop\">\n<code>drop(iter, n)</code> </dt> <dd>\n<p>An iterator that generates all but the first <code>n</code> elements of <code>iter</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cycle\">\n<code>cycle(iter)</code> </dt> <dd>\n<p>An iterator that cycles through <code>iter</code> forever.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.repeated\">\n<code>repeated(x[, n::Int])</code> </dt> <dd>\n<p>An iterator that generates the value <code>x</code> forever. If <code>n</code> is specified, generates <code>x</code> that many times (equivalent to <code>take(repeated(x), n)</code>).</p> </dd>\n</dl> <p>Fully implemented by:</p> <ul class=\"simple\"> <li><code>Range</code></li> <li><code>UnitRange</code></li> <li><code>NDRange</code></li> <li><code>Tuple</code></li> <li><code>Number</code></li> <li><code>AbstractArray</code></li> <li><a class=\"reference internal\" href=\"#Base.IntSet\" title=\"Base.IntSet\"><code>IntSet</code></a></li> <li><code>ObjectIdDict</code></li> <li><a class=\"reference internal\" href=\"#Base.Dict\" title=\"Base.Dict\"><code>Dict</code></a></li> <li><code>WeakKeyDict</code></li> <li><code>EachLine</code></li> <li><code>AbstractString</code></li> <li><a class=\"reference internal\" href=\"#Base.Set\" title=\"Base.Set\"><code>Set</code></a></li> <li><a class=\"reference internal\" href=\"../parallel/index#Base.Task\" title=\"Base.Task\"><code>Task</code></a></li> </ul>   <h2 id=\"general-collections\">General Collections</h2> <dl class=\"function\"> <dt id=\"Base.isempty\">\n<code>isempty(collection) → Bool</code> </dt> <dd>\n<p>Determine whether a collection is empty (has no elements).</p> <pre data-language=\"julia\">julia&gt; isempty([])\ntrue\n\njulia&gt; isempty([1 2 3])\nfalse\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.empty!\">\n<code>empty!(collection) → collection</code> </dt> <dd>\n<p>Remove all elements from a <code>collection</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.length\">\n<code>length(collection) → Integer</code> </dt> <dd>\n<p>For ordered, indexable collections, the maximum index <code>i</code> for which <code>getindex(collection, i)</code> is valid. For unordered collections, the number of elements.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.endof\">\n<code>endof(collection) → Integer</code> </dt> <dd>\n<p>Returns the last index of the collection.</p> <pre data-language=\"julia\">julia&gt; endof([1,2,4])\n3\n</pre> </dd>\n</dl> <p>Fully implemented by:</p> <ul class=\"simple\"> <li><code>Range</code></li> <li><code>UnitRange</code></li> <li><code>Tuple</code></li> <li><code>Number</code></li> <li><code>AbstractArray</code></li> <li><a class=\"reference internal\" href=\"#Base.IntSet\" title=\"Base.IntSet\"><code>IntSet</code></a></li> <li><a class=\"reference internal\" href=\"#Base.Dict\" title=\"Base.Dict\"><code>Dict</code></a></li> <li><code>WeakKeyDict</code></li> <li><code>AbstractString</code></li> <li><a class=\"reference internal\" href=\"#Base.Set\" title=\"Base.Set\"><code>Set</code></a></li> </ul>   <h2 id=\"iterable-collections\">Iterable Collections</h2> <dl class=\"function\"> <dt id=\"Base.in\">\n<code>in(item, collection) → Bool</code> </dt> <dt id=\"Base.∈\">\n<code>∈(item, collection) → Bool</code> </dt> <dt id=\"Base.∋\">\n<code>∋(collection, item) → Bool</code> </dt> <dt id=\"Base.∉\">\n<code>∉(item, collection) → Bool</code> </dt> <dt id=\"Base.∌\">\n<code>∌(collection, item) → Bool</code> </dt> <dd>\n<p>Determine whether an item is in the given collection, in the sense that it is <code>==</code> to one of the values generated by iterating over the collection. Some collections need a slightly different definition; for example <a class=\"reference internal\" href=\"#Base.Set\" title=\"Base.Set\"><code>Set</code></a>s check whether the item <a class=\"reference internal\" href=\"../base/index#Base.isequal\" title=\"Base.isequal\"><code>isequal()</code></a> to one of the elements. <a class=\"reference internal\" href=\"#Base.Dict\" title=\"Base.Dict\"><code>Dict</code></a>s look for <code>(key,value)</code> pairs, and the key is compared using <a class=\"reference internal\" href=\"../base/index#Base.isequal\" title=\"Base.isequal\"><code>isequal()</code></a>. To test for the presence of a key in a dictionary, use <a class=\"reference internal\" href=\"#Base.haskey\" title=\"Base.haskey\"><code>haskey()</code></a> or <code>k in keys(dict)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eltype\">\n<code>eltype(type)</code> </dt> <dd>\n<p>Determine the type of the elements generated by iterating a collection of the given <code>type</code>. For associative collection types, this will be a <code>Pair{KeyType,ValType}</code>. The definition <code>eltype(x) = eltype(typeof(x))</code> is provided for convenience so that instances can be passed instead of types. However the form that accepts a type argument should be defined for new types.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.indexin\">\n<code>indexin(a, b)</code> </dt> <dd>\n<p>Returns a vector containing the highest index in <code>b</code> for each value in <code>a</code> that is a member of <code>b</code> . The output vector contains 0 wherever <code>a</code> is not a member of <code>b</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.findin\">\n<code>findin(a, b)</code> </dt> <dd>\n<p>Returns the indices of elements in collection <code>a</code> that appear in collection <code>b</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.unique\">\n<code>unique(itr[, dim])</code> </dt> <dd>\n<p>Returns an array containing only the unique elements of the iterable <code>itr</code>, in the order that the first of each set of equivalent elements originally appears. If <code>dim</code> is specified, returns unique regions of the array <code>itr</code> along <code>dim</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reduce\">\n<code>reduce(op, v0, itr)</code> </dt> <dd>\n<p>Reduce the given collection <code>ìtr</code> with the given binary operator <code>op</code>. <code>v0</code> must be a neutral element for <code>op</code> that will be returned for empty collections. It is unspecified whether <code>v0</code> is used for non-empty collections.</p> <p>Reductions for certain commonly-used operators have special implementations which should be used instead: <code>maximum(itr)</code>, <code>minimum(itr)</code>, <code>sum(itr)</code>, <code>prod(itr)</code>, <code>any(itr)</code>, <code>all(itr)</code>.</p> <p>The associativity of the reduction is implementation dependent. This means that you can’t use non-associative operations like <code>-</code> because it is undefined whether <code>reduce(-,[1,2,3])</code> should be evaluated as <code>(1-2)-3</code> or <code>1-(2-3)</code>. Use <code>foldl</code> or <code>foldr</code> instead for guaranteed left or right associativity.</p> <p>Some operations accumulate error, and parallelism will also be easier if the reduction can be executed in groups. Future versions of Julia might change the algorithm. Note that the elements are not reordered if you use an ordered collection.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>reduce(op, itr)</code> </dt> <dd>\n<p>Like <code>reduce(op, v0, itr)</code>. This cannot be used with empty collections, except for some special cases (e.g. when <code>op</code> is one of <code>+</code>, <code>*</code>, <code>max</code>, <code>min</code>, <code>&amp;</code>, <code>|</code>) when Julia can determine the neutral element of <code>op</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.foldl\">\n<code>foldl(op, v0, itr)</code> </dt> <dd>\n<p>Like <a class=\"reference internal\" href=\"#Base.reduce\" title=\"Base.reduce\"><code>reduce()</code></a>, but with guaranteed left associativity. <code>v0</code> will be used exactly once.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>foldl(op, itr)</code> </dt> <dd>\n<p>Like <code>foldl(op, v0, itr)</code>, but using the first element of <code>itr</code> as <code>v0</code>. In general, this cannot be used with empty collections (see <code>reduce(op, itr)</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.foldr\">\n<code>foldr(op, v0, itr)</code> </dt> <dd>\n<p>Like <a class=\"reference internal\" href=\"#Base.reduce\" title=\"Base.reduce\"><code>reduce()</code></a>, but with guaranteed right associativity. <code>v0</code> will be used exactly once.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>foldr(op, itr)</code> </dt> <dd>\n<p>Like <code>foldr(op, v0, itr)</code>, but using the last element of <code>itr</code> as <code>v0</code>. In general, this cannot be used with empty collections (see <code>reduce(op, itr)</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.maximum\">\n<code>maximum(itr)</code> </dt> <dd>\n<p>Returns the largest element in a collection.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>maximum(A, dims)</code> </dt> <dd>\n<p>Compute the maximum value of an array over the given dimensions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.maximum!\">\n<code>maximum!(r, A)</code> </dt> <dd>\n<p>Compute the maximum value of <code>A</code> over the singleton dimensions of <code>r</code>, and write results to <code>r</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.minimum\">\n<code>minimum(itr)</code> </dt> <dd>\n<p>Returns the smallest element in a collection.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>minimum(A, dims)</code> </dt> <dd>\n<p>Compute the minimum value of an array over the given dimensions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.minimum!\">\n<code>minimum!(r, A)</code> </dt> <dd>\n<p>Compute the minimum value of <code>A</code> over the singleton dimensions of <code>r</code>, and write results to <code>r</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.extrema\">\n<code>extrema(itr)</code> </dt> <dd>\n<p>Compute both the minimum and maximum element in a single pass, and return them as a 2-tuple.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.indmax\">\n<code>indmax(itr) → Integer</code> </dt> <dd>\n<p>Returns the index of the maximum element in a collection.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.indmin\">\n<code>indmin(itr) → Integer</code> </dt> <dd>\n<p>Returns the index of the minimum element in a collection.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.findmax\">\n<code>findmax(itr) -&gt; (x, index)</code> </dt> <dd>\n<p>Returns the maximum element and its index.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>findmax(A, dims) -&gt; (maxval, index)</code> </dt> <dd>\n<p>For an array input, returns the value and index of the maximum over the given dimensions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.findmin\">\n<code>findmin(itr) -&gt; (x, index)</code> </dt> <dd>\n<p>Returns the minimum element and its index.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>findmin(A, dims) -&gt; (minval, index)</code> </dt> <dd>\n<p>For an array input, returns the value and index of the minimum over the given dimensions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.findmax!\">\n<code>findmax!(rval, rind, A, [init=true]) -&gt; (maxval, index)</code> </dt> <dd>\n<p>Find the maximum of <code>A</code> and the corresponding linear index along singleton dimensions of <code>rval</code> and <code>rind</code>, and store the results in <code>rval</code> and <code>rind</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.findmin!\">\n<code>findmin!(rval, rind, A, [init=true]) -&gt; (minval, index)</code> </dt> <dd>\n<p>Find the minimum of <code>A</code> and the corresponding linear index along singleton dimensions of <code>rval</code> and <code>rind</code>, and store the results in <code>rval</code> and <code>rind</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.maxabs\">\n<code>maxabs(itr)</code> </dt> <dd>\n<p>Compute the maximum absolute value of a collection of values.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>maxabs(A, dims)</code> </dt> <dd>\n<p>Compute the maximum absolute values over given dimensions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.maxabs!\">\n<code>maxabs!(r, A)</code> </dt> <dd>\n<p>Compute the maximum absolute values over the singleton dimensions of <code>r</code>, and write values to <code>r</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.minabs\">\n<code>minabs(itr)</code> </dt> <dd>\n<p>Compute the minimum absolute value of a collection of values.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>minabs(A, dims)</code> </dt> <dd>\n<p>Compute the minimum absolute values over given dimensions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.minabs!\">\n<code>minabs!(r, A)</code> </dt> <dd>\n<p>Compute the minimum absolute values over the singleton dimensions of <code>r</code>, and write values to <code>r</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sum\">\n<code>sum(itr)</code> </dt> <dd>\n<p>Returns the sum of all elements in a collection.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>sum(A, dims)</code> </dt> <dd>\n<p>Sum elements of an array over the given dimensions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sum!\">\n<code>sum!(r, A)</code> </dt> <dd>\n<p>Sum elements of <code>A</code> over the singleton dimensions of <code>r</code>, and write results to <code>r</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>sum(f, itr)</code> </dt> <dd>\n<p>Sum the results of calling function <code>f</code> on each element of <code>itr</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sumabs\">\n<code>sumabs(itr)</code> </dt> <dd>\n<p>Sum absolute values of all elements in a collection. This is equivalent to <code>sum(abs(itr))</code> but faster.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>sumabs(A, dims)</code> </dt> <dd>\n<p>Sum absolute values of elements of an array over the given dimensions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sumabs!\">\n<code>sumabs!(r, A)</code> </dt> <dd>\n<p>Sum absolute values of elements of <code>A</code> over the singleton dimensions of <code>r</code>, and write results to <code>r</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sumabs2\">\n<code>sumabs2(itr)</code> </dt> <dd>\n<p>Sum squared absolute values of all elements in a collection. This is equivalent to <code>sum(abs2(itr))</code> but faster.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>sumabs2(A, dims)</code> </dt> <dd>\n<p>Sum squared absolute values of elements of an array over the given dimensions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sumabs2!\">\n<code>sumabs2!(r, A)</code> </dt> <dd>\n<p>Sum squared absolute values of elements of <code>A</code> over the singleton dimensions of <code>r</code>, and write results to <code>r</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.prod\">\n<code>prod(itr)</code> </dt> <dd>\n<p>Returns the product of all elements of a collection.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>prod(A, dims)</code> </dt> <dd>\n<p>Multiply elements of an array over the given dimensions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.prod!\">\n<code>prod!(r, A)</code> </dt> <dd>\n<p>Multiply elements of <code>A</code> over the singleton dimensions of <code>r</code>, and write results to <code>r</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.any\">\n<code>any(itr) → Bool</code> </dt> <dd>\n<p>Test whether any elements of a boolean collection are <code>true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>any(A, dims)</code> </dt> <dd>\n<p>Test whether any values along the given dimensions of an array are <code>true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.any!\">\n<code>any!(r, A)</code> </dt> <dd>\n<p>Test whether any values in <code>A</code> along the singleton dimensions of <code>r</code> are <code>true</code>, and write results to <code>r</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.all\">\n<code>all(itr) → Bool</code> </dt> <dd>\n<p>Test whether all elements of a boolean collection are <code>true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>all(A, dims)</code> </dt> <dd>\n<p>Test whether all values along the given dimensions of an array are <code>true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.all!\">\n<code>all!(r, A)</code> </dt> <dd>\n<p>Test whether all values in <code>A</code> along the singleton dimensions of <code>r</code> are <code>true</code>, and write results to <code>r</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.count\">\n<code>count(p, itr) → Integer</code> </dt> <dd>\n<p>Count the number of elements in <code>itr</code> for which predicate <code>p</code> returns <code>true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>any(p, itr) → Bool</code> </dt> <dd>\n<p>Determine whether predicate <code>p</code> returns <code>true</code> for any elements of <code>itr</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>all(p, itr) → Bool</code> </dt> <dd>\n<p>Determine whether predicate <code>p</code> returns <code>true</code> for all elements of <code>itr</code>.</p> <pre data-language=\"julia\">julia&gt; all(i-&gt;(4&lt;=i&lt;=6), [4,5,6])\ntrue\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.map\">\n<code>map(f, c...) → collection</code> </dt> <dd>\n<p>Transform collection <code>c</code> by applying <code>f</code> to each element. For multiple collection arguments, apply <code>f</code> elementwise.</p> <pre data-language=\"julia\">julia&gt; map((x) -&gt; x * 2, [1, 2, 3])\n3-element Array{Int64,1}:\n 2\n 4\n 6\n\njulia&gt; map(+, [1, 2, 3], [10, 20, 30])\n3-element Array{Int64,1}:\n 11\n 22\n 33\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.map!\">\n<code>map!(function, collection)</code> </dt> <dd>\n<p>In-place version of <a class=\"reference internal\" href=\"#Base.map\" title=\"Base.map\"><code>map()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>map!(function, destination, collection...)</code> </dt> <dd>\n<p>Like <a class=\"reference internal\" href=\"#Base.map\" title=\"Base.map\"><code>map()</code></a>, but stores the result in <code>destination</code> rather than a new collection. <code>destination</code> must be at least as large as the first collection.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mapreduce\">\n<code>mapreduce(f, op, v0, itr)</code> </dt> <dd>\n<p>Apply function <code>f</code> to each element in <code>itr</code>, and then reduce the result using the binary function <code>op</code>. <code>v0</code> must be a neutral element for <code>op</code> that will be returned for empty collections. It is unspecified whether <code>v0</code> is used for non-empty collections.</p> <p><a class=\"reference internal\" href=\"#Base.mapreduce\" title=\"Base.mapreduce\"><code>mapreduce()</code></a> is functionally equivalent to calling <code>reduce(op,\nv0, map(f, itr))</code>, but will in general execute faster since no intermediate collection needs to be created. See documentation for <a class=\"reference internal\" href=\"#Base.reduce\" title=\"Base.reduce\"><code>reduce()</code></a> and <a class=\"reference internal\" href=\"#Base.map\" title=\"Base.map\"><code>map()</code></a>.</p> <pre data-language=\"julia\">julia&gt; mapreduce(x-&gt;x^2, +, [1:3;]) # == 1 + 4 + 9\n14\n</pre> <p>The associativity of the reduction is implementation-dependent. Additionally, some implementations may reuse the return value of <code>f</code> for elements that appear multiple times in <code>itr</code>. Use <a class=\"reference internal\" href=\"#Base.mapfoldl\" title=\"Base.mapfoldl\"><code>mapfoldl()</code></a> or <a class=\"reference internal\" href=\"#Base.mapfoldr\" title=\"Base.mapfoldr\"><code>mapfoldr()</code></a> instead for guaranteed left or right associativity and invocation of <code>f</code> for every value.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>mapreduce(f, op, itr)</code> </dt> <dd>\n<p>Like <code>mapreduce(f, op, v0, itr)</code>. In general, this cannot be used with empty collections (see <code>reduce(op, itr)</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mapfoldl\">\n<code>mapfoldl(f, op, v0, itr)</code> </dt> <dd>\n<p>Like <a class=\"reference internal\" href=\"#Base.mapreduce\" title=\"Base.mapreduce\"><code>mapreduce()</code></a>, but with guaranteed left associativity. <code>v0</code> will be used exactly once.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>mapfoldl(f, op, itr)</code> </dt> <dd>\n<p>Like <code>mapfoldl(f, op, v0, itr)</code>, but using the first element of <code>itr</code> as <code>v0</code>. In general, this cannot be used with empty collections (see <code>reduce(op, itr)</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mapfoldr\">\n<code>mapfoldr(f, op, v0, itr)</code> </dt> <dd>\n<p>Like <a class=\"reference internal\" href=\"#Base.mapreduce\" title=\"Base.mapreduce\"><code>mapreduce()</code></a>, but with guaranteed right associativity. <code>v0</code> will be used exactly once.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>mapfoldr(f, op, itr)</code> </dt> <dd>\n<p>Like <code>mapfoldr(f, op, v0, itr)</code>, but using the first element of <code>itr</code> as <code>v0</code>. In general, this cannot be used with empty collections (see <code>reduce(op, itr)</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.first\">\n<code>first(coll)</code> </dt> <dd>\n<p>Get the first element of an iterable collection. Returns the start point of a <code>Range</code> even if it is empty.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.last\">\n<code>last(coll)</code> </dt> <dd>\n<p>Get the last element of an ordered collection, if it can be computed in O(1) time. This is accomplished by calling <a class=\"reference internal\" href=\"#Base.endof\" title=\"Base.endof\"><code>endof()</code></a> to get the last index. Returns the end point of a <code>Range</code> even if it is empty.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.step\">\n<code>step(r)</code> </dt> <dd>\n<p>Get the step size of a <code>Range</code> object.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.collect\">\n<code>collect(collection)</code> </dt> <dd>\n<p>Return an array of all items in a collection. For associative collections, returns Pair{KeyType, ValType}.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>collect(element_type, collection)</code> </dt> <dd>\n<p>Return an array of type <code>Array{element_type,1}</code> of all items in a collection.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.issubset\">\n<code>issubset(a, b)</code> </dt> <dt id=\"Base.⊆\">\n<code>⊆(a, b) → Bool</code> </dt> <dt id=\"Base.⊈\">\n<code>⊈(a, b) → Bool</code> </dt> <dt id=\"Base.⊊\">\n<code>⊊(a, b) → Bool</code> </dt> <dd>\n<p>Determine whether every element of <code>a</code> is also in <code>b</code>, using <a class=\"reference internal\" href=\"#Base.in\" title=\"Base.in\"><code>in()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.filter\">\n<code>filter(function, collection)</code> </dt> <dd>\n<p>Return a copy of <code>collection</code>, removing elements for which <code>function</code> is <code>false</code>. For associative collections, the function is passed two arguments (key and value).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.filter!\">\n<code>filter!(function, collection)</code> </dt> <dd>\n<p>Update <code>collection</code>, removing elements for which <code>function</code> is <code>false</code>. For associative collections, the function is passed two arguments (key and value).</p> </dd>\n</dl>   <h2 id=\"indexable-collections\">Indexable Collections</h2> <dl class=\"function\"> <dt id=\"Base.getindex\">\n<code>getindex(collection, key...)</code> </dt> <dd>\n<p>Retrieve the value(s) stored at the given key or index within a collection. The syntax <code>a[i,j,...]</code> is converted by the compiler to <code>getindex(a, i, j, ...)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.setindex!\">\n<code>setindex!(collection, value, key...)</code> </dt> <dd>\n<p>Store the given value at the given key or index within a collection. The syntax <code>a[i,j,...] = x</code> is converted by the compiler to <code>(setindex!(a, x, i, j, ...); x)</code>.</p> </dd>\n</dl> <p>Fully implemented by:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"../arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a></li> <li><code>BitArray</code></li> <li><code>AbstractArray</code></li> <li><code>SubArray</code></li> <li><code>ObjectIdDict</code></li> <li><a class=\"reference internal\" href=\"#Base.Dict\" title=\"Base.Dict\"><code>Dict</code></a></li> <li><code>WeakKeyDict</code></li> <li><code>AbstractString</code></li> </ul> <p>Partially implemented by:</p> <ul class=\"simple\"> <li><code>Range</code></li> <li><code>UnitRange</code></li> <li><code>Tuple</code></li> </ul>   <h2 id=\"associative-collections\">Associative Collections</h2> <p><a class=\"reference internal\" href=\"#Base.Dict\" title=\"Base.Dict\"><code>Dict</code></a> is the standard associative collection. Its implementation uses <a class=\"reference internal\" href=\"../base/index#Base.hash\" title=\"Base.hash\"><code>hash()</code></a> as the hashing function for the key, and <a class=\"reference internal\" href=\"../base/index#Base.isequal\" title=\"Base.isequal\"><code>isequal()</code></a> to determine equality. Define these two functions for custom types to override how they are stored in a hash table.</p> <p><code>ObjectIdDict</code> is a special hash table where the keys are always object identities.</p> <p><code>WeakKeyDict</code> is a hash table implementation where the keys are weak references to objects, and thus may be garbage collected even when referenced in a hash table.</p> <p><a class=\"reference internal\" href=\"#Base.Dict\" title=\"Base.Dict\"><code>Dict</code></a>s can be created by passing pair objects constructed with <code>=&gt;()</code> to a <a class=\"reference internal\" href=\"#Base.Dict\" title=\"Base.Dict\"><code>Dict</code></a> constructor: <code>Dict(\"A\"=&gt;1, \"B\"=&gt;2)</code>. This call will attempt to infer type information from the keys and values (i.e. this example creates a <code>Dict{ASCIIString, Int64}</code>). To explicitly specify types use the syntax <code>Dict{KeyType,ValueType}(...)</code>. For example, <code>Dict{ASCIIString,Int32}(\"A\"=&gt;1, \"B\"=&gt;2)</code>.</p> <p>As with <a class=\"reference internal\" href=\"../arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a>s, <a class=\"reference internal\" href=\"#Base.Dict\" title=\"Base.Dict\"><code>Dict</code></a>s may be created with comprehensions. For example, <code>[i =&gt; f(i) for i = 1:10]</code>.</p> <p>Given a dictionary <code>D</code>, the syntax <code>D[x]</code> returns the value of key <code>x</code> (if it exists) or throws an error, and <code>D[x] = y</code> stores the key-value pair <code>x =&gt; y</code> in <code>D</code> (replacing any existing value for the key <code>x</code>). Multiple arguments to <code>D[...]</code> are converted to tuples; for example, the syntax <code>D[x,y]</code> is equivalent to <code>D[(x,y)]</code>, i.e. it refers to the value keyed by the tuple <code>(x,y)</code>.</p> <dl class=\"function\"> <dt id=\"Base.Dict\">\n<code>Dict([itr])</code> </dt> <dd>\n<p><code>Dict{K,V}()</code> constructs a hash table with keys of type <code>K</code> and values of type <code>V</code>.</p> <p>Given a single iterable argument, constructs a <a class=\"reference internal\" href=\"#Base.Dict\" title=\"Base.Dict\"><code>Dict</code></a> whose key-value pairs are taken from 2-tuples <code>(key,value)</code> generated by the argument.</p> <pre data-language=\"julia\">julia&gt; Dict([(\"A\", 1), (\"B\", 2)])\nDict{ASCIIString,Int64} with 2 entries:\n  \"B\" =&gt; 2\n  \"A\" =&gt; 1\n</pre> <p>Alternatively, a sequence of pair arguments may be passed.</p> <pre data-language=\"julia\">julia&gt; Dict(\"A\"=&gt;1, \"B\"=&gt;2)\nDict{ASCIIString,Int64} with 2 entries:\n  \"B\" =&gt; 2\n  \"A\" =&gt; 1\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.haskey\">\n<code>haskey(collection, key) → Bool</code> </dt> <dd>\n<p>Determine whether a collection has a mapping for a given key.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.get\">\n<code>get(collection, key, default)</code> </dt> <dd>\n<p>Return the value stored for the given key, or the given default value if no mapping for the key is present.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>get(f::Function, collection, key)</code> </dt> <dd>\n<p>Return the value stored for the given key, or if no mapping for the key is present, return <code>f()</code>. Use <a class=\"reference internal\" href=\"#Base.get!\" title=\"Base.get!\"><code>get!()</code></a> to also store the default value in the dictionary.</p> <p>This is intended to be called using <code>do</code> block syntax:</p> <pre data-language=\"julia\">get(dict, key) do\n    # default value calculated here\n    time()\nend\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.get!\">\n<code>get!(collection, key, default)</code> </dt> <dd>\n<p>Return the value stored for the given key, or if no mapping for the key is present, store <code>key =&gt; default</code>, and return <code>default</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>get!(f::Function, collection, key)</code> </dt> <dd>\n<p>Return the value stored for the given key, or if no mapping for the key is present, store <code>key =&gt; f()</code>, and return <code>f()</code>.</p> <p>This is intended to be called using <code>do</code> block syntax:</p> <pre data-language=\"julia\">get!(dict, key) do\n    # default value calculated here\n    time()\nend\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.getkey\">\n<code>getkey(collection, key, default)</code> </dt> <dd>\n<p>Return the key matching argument <code>key</code> if one exists in <code>collection</code>, otherwise return <code>default</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.delete!\">\n<code>delete!(collection, key)</code> </dt> <dd>\n<p>Delete the mapping for the given key in a collection, and return the collection.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.pop!\">\n<code>pop!(collection, key[, default])</code> </dt> <dd>\n<p>Delete and return the mapping for <code>key</code> if it exists in <code>collection</code>, otherwise return <code>default</code>, or throw an error if default is not specified.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.keys\">\n<code>keys(collection)</code> </dt> <dd>\n<p>Return an iterator over all keys in a collection. <code>collect(keys(d))</code> returns an array of keys.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.values\">\n<code>values(collection)</code> </dt> <dd>\n<p>Return an iterator over all values in a collection. <code>collect(values(d))</code> returns an array of values.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.merge\">\n<code>merge(collection, others...)</code> </dt> <dd>\n<p>Construct a merged collection from the given collections. If necessary, the types of the resulting collection will be promoted to accommodate the types of the merged collections. If the same key is present in another collection, the value for that key will be the value it has in the last collection listed.</p> <pre data-language=\"julia\">julia&gt; a = Dict(\"foo\" =&gt; 0.0, \"bar\" =&gt; 42.0)\nDict{ASCIIString,Float64} with 2 entries:\n  \"bar\" =&gt; 42.0\n  \"foo\" =&gt; 0.0\n\njulia&gt; b = Dict(utf8(\"baz\") =&gt; 17, utf8(\"bar\") =&gt; 4711)\nDict{UTF8String,Int64} with 2 entries:\n  \"bar\" =&gt; 4711\n  \"baz\" =&gt; 17\n\njulia&gt; merge(a, b)\nDict{UTF8String,Float64} with 3 entries:\n  \"bar\" =&gt; 4711.0\n  \"baz\" =&gt; 17.0\n  \"foo\" =&gt; 0.0\n\njulia&gt; merge(b, a)\nDict{UTF8String,Float64} with 3 entries:\n  \"bar\" =&gt; 42.0\n  \"baz\" =&gt; 17.0\n  \"foo\" =&gt; 0.0\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.merge!\">\n<code>merge!(collection, others...)</code> </dt> <dd>\n<p>Update collection with pairs from the other collections</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sizehint!\">\n<code>sizehint!(s, n)</code> </dt> <dd>\n<p>Suggest that collection <code>s</code> reserve capacity for at least <code>n</code> elements. This can improve performance.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.keytype\">\n<code>keytype(collection)</code> </dt> <dd>\n<p>For associative collection types, this will be the type of the Key, This is not defined for non-associative collections</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.valtype\">\n<code>valtype(collection)</code> </dt> <dd>\n<p>For associative collection types, this will be the type of the Value, This is not defined for non-associative collections</p> </dd>\n</dl> <p>Fully implemented by:</p> <ul class=\"simple\"> <li><code>ObjectIdDict</code></li> <li><a class=\"reference internal\" href=\"#Base.Dict\" title=\"Base.Dict\"><code>Dict</code></a></li> <li><code>WeakKeyDict</code></li> </ul> <p>Partially implemented by:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#Base.IntSet\" title=\"Base.IntSet\"><code>IntSet</code></a></li> <li><a class=\"reference internal\" href=\"#Base.Set\" title=\"Base.Set\"><code>Set</code></a></li> <li><a class=\"reference internal\" href=\"../base/index#Base.EnvHash\" title=\"Base.EnvHash\"><code>EnvHash</code></a></li> <li><a class=\"reference internal\" href=\"../arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a></li> <li><code>BitArray</code></li> </ul>   <h2 id=\"set-like-collections\">Set-Like Collections</h2> <dl class=\"function\"> <dt id=\"Base.Set\">\n<code>Set([itr])</code> </dt> <dd>\n<p>Construct a <a class=\"reference internal\" href=\"#Base.Set\" title=\"Base.Set\"><code>Set</code></a> of the values generated by the given iterable object, or an empty set. Should be used instead of <a class=\"reference internal\" href=\"#Base.IntSet\" title=\"Base.IntSet\"><code>IntSet</code></a> for sparse integer sets, or for sets of arbitrary objects.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.IntSet\">\n<code>IntSet([itr])</code> </dt> <dd>\n<p>Construct a sorted set of positive <code>Int</code>s generated by the given iterable object, or an empty set. Implemented as a bit string, and therefore designed for dense integer sets. Only <code>Int</code>s greater than 0 can be stored. If the set will be sparse (for example holding a few very large integers), use <a class=\"reference internal\" href=\"#Base.Set\" title=\"Base.Set\"><code>Set</code></a> instead.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.union\">\n<code>union(s1, s2...)</code> </dt> <dt id=\"Base.∪\">\n<code>∪(s1, s2...)</code> </dt> <dd>\n<p>Construct the union of two or more sets. Maintains order with arrays.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.union!\">\n<code>union!(s, iterable)</code> </dt> <dd>\n<p>Union each element of <code>iterable</code> into set <code>s</code> in-place.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.intersect\">\n<code>intersect(s1, s2...)</code> </dt> <dt id=\"Base.∩\">\n<code>∩(s1, s2)</code> </dt> <dd>\n<p>Construct the intersection of two or more sets. Maintains order and multiplicity of the first argument for arrays and ranges.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.setdiff\">\n<code>setdiff(s1, s2)</code> </dt> <dd>\n<p>Construct the set of elements in <code>s1</code> but not <code>s2</code>. Maintains order with arrays. Note that both arguments must be collections, and both will be iterated over. In particular, <code>setdiff(set,element)</code> where <code>element</code> is a potential member of <code>set</code>, will not work in general.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.setdiff!\">\n<code>setdiff!(s, iterable)</code> </dt> <dd>\n<p>Remove each element of <code>iterable</code> from set <code>s</code> in-place.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.symdiff\">\n<code>symdiff(s1, s2...)</code> </dt> <dd>\n<p>Construct the symmetric difference of elements in the passed in sets or arrays. Maintains order with arrays.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.symdiff!\">\n<code>symdiff!(s, n)</code> </dt> <dd>\n<p>The set <code>s</code> is destructively modified to toggle the inclusion of integer <code>n</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>symdiff!(s, itr)</code> </dt> <dd>\n<p>For each element in <code>itr</code>, destructively toggle its inclusion in set <code>s</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>symdiff!(s1, s2)</code> </dt> <dd>\n<p>Construct the symmetric difference of sets <code>s1</code> and <code>s2</code>, storing the result in <code>s1</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.complement\">\n<code>complement(s)</code> </dt> <dd>\n<p>Returns the set-complement of <a class=\"reference internal\" href=\"#Base.IntSet\" title=\"Base.IntSet\"><code>IntSet</code></a> <code>s</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.complement!\">\n<code>complement!(s)</code> </dt> <dd>\n<p>Mutates <a class=\"reference internal\" href=\"#Base.IntSet\" title=\"Base.IntSet\"><code>IntSet</code></a> <code>s</code> into its set-complement.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.intersect!\">\n<code>intersect!(s1, s2)</code> </dt> <dd>\n<p>Intersects sets <code>s1</code> and <code>s2</code> and overwrites the set <code>s1</code> with the result. If needed, <code>s1</code> will be expanded to the size of <code>s2</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>issubset(A, S) → Bool</code> </dt> <dt>\n<code>⊆(A, S) → Bool</code> </dt> <dd>\n<p>Return <code>true</code> if <code>A</code> is a subset of or equal to <code>S</code>.</p> </dd>\n</dl> <p>Fully implemented by:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#Base.IntSet\" title=\"Base.IntSet\"><code>IntSet</code></a></li> <li><a class=\"reference internal\" href=\"#Base.Set\" title=\"Base.Set\"><code>Set</code></a></li> </ul> <p>Partially implemented by:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"../arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a></li> </ul>   <h2 id=\"dequeues\">Dequeues</h2> <dl class=\"function\"> <dt id=\"Base.push!\">\n<code>push!(collection, items...) → collection</code> </dt> <dd>\n<p>Insert one or more <code>items</code> at the end of <code>collection</code>.</p> <pre data-language=\"julia\">julia&gt; push!([1, 2, 3], 4, 5, 6)\n6-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n</pre> <p>Use <a class=\"reference internal\" href=\"#Base.append!\" title=\"Base.append!\"><code>append!()</code></a> to add all the elements of another collection to <code>collection</code>. The result of the preceding example is equivalent to <code>append!([1, 2, 3], [4, 5, 6])</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>pop!(collection) → item</code> </dt> <dd>\n<p>Remove the last item in <code>collection</code> and return it.</p> <pre data-language=\"julia\">julia&gt; A=[1, 2, 3, 4, 5, 6]\n6-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n\njulia&gt; pop!(A)\n6\n\njulia&gt; A\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.unshift!\">\n<code>unshift!(collection, items...) → collection</code> </dt> <dd>\n<p>Insert one or more <code>items</code> at the beginning of <code>collection</code>.</p> <pre data-language=\"julia\">julia&gt; unshift!([1, 2, 3, 4], 5, 6)\n6-element Array{Int64,1}:\n 5\n 6\n 1\n 2\n 3\n 4\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.shift!\">\n<code>shift!(collection) → item</code> </dt> <dd>\n<p>Remove the first <code>item</code> from <code>collection</code>.</p> <pre data-language=\"julia\">julia&gt; A = [1, 2, 3, 4, 5, 6]\n6-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n\njulia&gt; shift!(A)\n1\n\njulia&gt; A\n5-element Array{Int64,1}:\n 2\n 3\n 4\n 5\n 6\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.insert!\">\n<code>insert!(collection, index, item)</code> </dt> <dd>\n<p>Insert an <code>item</code> into <code>collection</code> at the given <code>index</code>. <code>index</code> is the index of <code>item</code> in the resulting <code>collection</code>.</p> <pre data-language=\"julia\">julia&gt; insert!([6, 5, 4, 2, 1], 4, 3)\n6-element Array{Int64,1}:\n 6\n 5\n 4\n 3\n 2\n 1\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.deleteat!\">\n<code>deleteat!(collection, index)</code> </dt> <dd>\n<p>Remove the item at the given <code>index</code> and return the modified <code>collection</code>. Subsequent items are shifted to fill the resulting gap.</p> <pre data-language=\"julia\">julia&gt; deleteat!([6, 5, 4, 3, 2, 1], 2)\n5-element Array{Int64,1}:\n 6\n 4\n 3\n 2\n 1\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>deleteat!(collection, itr)</code> </dt> <dd>\n<p>Remove the items at the indices given by <code>itr</code>, and return the modified <code>collection</code>. Subsequent items are shifted to fill the resulting gap. <code>itr</code> must be sorted and unique.</p> <pre data-language=\"julia\">julia&gt; deleteat!([6, 5, 4, 3, 2, 1], 1:2:5)\n3-element Array{Int64,1}:\n 5\n 3\n 1\n\njulia&gt; deleteat!([6, 5, 4, 3, 2, 1], (2, 2))\nERROR: ArgumentError: indices must be unique and sorted\n in deleteat! at array.jl:547\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.splice!\">\n<code>splice!(collection, index[, replacement]) → item</code> </dt> <dd>\n<p>Remove the item at the given index, and return the removed item. Subsequent items are shifted down to fill the resulting gap. If specified, replacement values from an ordered collection will be spliced in place of the removed item.</p> <pre data-language=\"julia\">julia&gt; A = [6, 5, 4, 3, 2, 1]; splice!(A, 5)\n2\n\njulia&gt; A\n5-element Array{Int64,1}:\n 6\n 5\n 4\n 3\n 1\n\njulia&gt; splice!(A, 5, -1)\n1\n\njulia&gt; A\n5-element Array{Int64,1}:\n  6\n  5\n  4\n  3\n -1\n\njulia&gt; splice!(A, 1, [-1, -2, -3])\n6\n\njulia&gt; A\n7-element Array{Int64,1}:\n -1\n -2\n -3\n  5\n  4\n  3\n -1\n</pre> <p>To insert <code>replacement</code> before an index <code>n</code> without removing any items, use <code>splice!(collection, n:n-1, replacement)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>splice!(collection, range[, replacement]) → items</code> </dt> <dd>\n<p>Remove items in the specified index range, and return a collection containing the removed items. Subsequent items are shifted down to fill the resulting gap. If specified, replacement values from an ordered collection will be spliced in place of the removed items.</p> <p>To insert <code>replacement</code> before an index <code>n</code> without removing any items, use <code>splice!(collection, n:n-1, replacement)</code>.</p> <pre data-language=\"julia\">julia&gt; splice!(A, 4:3, 2)\n0-element Array{Int64,1}\n\njulia&gt; A\n8-element Array{Int64,1}:\n -1\n -2\n -3\n  2\n  5\n  4\n  3\n -1\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.resize!\">\n<code>resize!(collection, n) → collection</code> </dt> <dd>\n<p>Resize <code>collection</code> to contain <code>n</code> elements. If <code>n</code> is smaller than the current collection length, the first <code>n</code> elements will be retained. If <code>n</code> is larger, the new elements are not guaranteed to be initialized.</p> <pre data-language=\"julia\">julia&gt; resize!([6, 5, 4, 3, 2, 1], 3)\n3-element Array{Int64,1}:\n 6\n 5\n 4\n</pre> <pre data-language=\"julia\">julia&gt; resize!([6, 5, 4, 3, 2, 1], 8)\n8-element Array{Int64,1}:\n 6\n 5\n 4\n 3\n 2\n 1\n 0\n 0\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.append!\">\n<code>append!(collection, collection2) → collection.</code> </dt> <dd>\n<p>Add the elements of <code>collection2</code> to the end of <code>collection</code>.</p> <pre data-language=\"julia\">julia&gt; append!([1],[2,3])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</pre> <pre data-language=\"julia\">julia&gt; append!([1, 2, 3], [4, 5, 6])\n6-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n</pre> <p>Use <a class=\"reference internal\" href=\"#Base.push!\" title=\"Base.push!\"><code>push!()</code></a> to add individual items to <code>collection</code> which are not already themselves in another collection. The result is of the preceding example is equivalent to <code>push!([1, 2, 3], 4, 5, 6)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.prepend!\">\n<code>prepend!(collection, items) → collection</code> </dt> <dd>\n<p>Insert the elements of <code>items</code> to the beginning of <code>collection</code>.</p> <pre data-language=\"julia\">julia&gt; prepend!([3],[1,2])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</pre> </dd>\n</dl> <p>Fully implemented by:</p> <ul class=\"simple\" id=\"module-Base.Collections\"> <li>\n<code>Vector</code> (a.k.a. 1-dimensional <a class=\"reference internal\" href=\"../arrays/index#Base.Array\" title=\"Base.Array\"><code>Array</code></a>)</li> <li>\n<code>BitVector</code> (a.k.a. 1-dimensional <code>BitArray</code>)</li> </ul>   <h2 id=\"priorityqueue\">PriorityQueue</h2> <p>The <a class=\"reference internal\" href=\"#Base.Collections.PriorityQueue\" title=\"Base.Collections.PriorityQueue\"><code>PriorityQueue</code></a> type is available from the <code>Collections</code> module. It provides a basic priority queue implementation allowing for arbitrary key and priority types. Multiple identical keys are not permitted, but the priority of existing keys can be changed efficiently.</p> <dl class=\"function\"> <dt id=\"Base.Collections.PriorityQueue\">\n<code>PriorityQueue(K, V[, ord])</code> </dt> <dd>\n<p>Construct a new <a class=\"reference internal\" href=\"#Base.Collections.PriorityQueue\" title=\"Base.Collections.PriorityQueue\"><code>PriorityQueue</code></a>, with keys of type <code>K</code> and values/priorites of type <code>V</code>. If an order is not given, the priority queue is min-ordered using the default comparison for <code>V</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Collections.enqueue!\">\n<code>enqueue!(pq, k, v)</code> </dt> <dd>\n<p>Insert the a key <code>k</code> into a priority queue <code>pq</code> with priority <code>v</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Collections.dequeue!\">\n<code>dequeue!(pq)</code> </dt> <dd>\n<p>Remove and return the lowest priority key from a priority queue.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Collections.peek\">\n<code>peek(pq)</code> </dt> <dd>\n<p>Return the lowest priority key from a priority queue without removing that key from the queue.</p> </dd>\n</dl> <p><a class=\"reference internal\" href=\"#Base.Collections.PriorityQueue\" title=\"Base.Collections.PriorityQueue\"><code>PriorityQueue</code></a> also behaves similarly to a <code>Dict</code> in that keys can be inserted and priorities accessed or changed using indexing notation.</p> <pre data-language=\"julia\">julia&gt; # Julia code\n       pq = Collections.PriorityQueue();\n\njulia&gt; # Insert keys with associated priorities\n       pq[\"a\"] = 10; pq[\"b\"] = 5; pq[\"c\"] = 15; pq\nBase.Collections.PriorityQueue{Any,Any,Base.Order.ForwardOrdering} with 3 entries:\n  \"c\" =&gt; 15\n  \"b\" =&gt; 5\n  \"a\" =&gt; 10\n\njulia&gt; # Change the priority of an existing key\n       pq[\"a\"] = 0; pq\nBase.Collections.PriorityQueue{Any,Any,Base.Order.ForwardOrdering} with 3 entries:\n  \"c\" =&gt; 15\n  \"b\" =&gt; 5\n  \"a\" =&gt; 0\n</pre>   <h2 id=\"heap-functions\">Heap Functions</h2> <p>Along with the <a class=\"reference internal\" href=\"#Base.Collections.PriorityQueue\" title=\"Base.Collections.PriorityQueue\"><code>PriorityQueue</code></a> type, the <code>Collections</code> module provides lower level functions for performing binary heap operations on arrays. Each function takes an optional ordering argument. If not given, default ordering is used, so that elements popped from the heap are given in ascending order.</p> <dl class=\"function\"> <dt id=\"Base.Collections.heapify\">\n<code>heapify(v[, ord])</code> </dt> <dd>\n<p>Return a new vector in binary heap order, optionally using the given ordering.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Collections.heapify!\">\n<code>heapify!(v[, ord])</code> </dt> <dd>\n<p>In-place <a class=\"reference internal\" href=\"#Base.Collections.heapify\" title=\"Base.Collections.heapify\"><code>heapify()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Collections.isheap\">\n<code>isheap(v[, ord])</code> </dt> <dd>\n<p>Return <code>true</code> iff an array is heap-ordered according to the given order.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Collections.heappush!\">\n<code>heappush!(v, x[, ord])</code> </dt> <dd>\n<p>Given a binary heap-ordered array, push a new element <code>x</code>, preserving the heap property. For efficiency, this function does not check that the array is indeed heap-ordered.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Collections.heappop!\">\n<code>heappop!(v[, ord])</code> </dt> <dd>\n<p>Given a binary heap-ordered array, remove and return the lowest ordered element. For efficiency, this function does not check that the array is indeed heap-ordered.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/collections/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/collections/</a>\n  </p>\n</div>\n","stdlib/c/index":"<h1>C Interface</h1> <dl class=\"function\"> <dt id=\"Base.ccall\">\n<code>ccall((symbol, library) or function_pointer, ReturnType, (ArgumentType1, ...), ArgumentValue1, ...)</code> </dt> <dd>\n<p>Call function in C-exported shared library, specified by <code>(function name, library)</code> tuple, where each component is a string or symbol.</p> <p>Note that the argument type tuple must be a literal tuple, and not a tuple-valued variable or expression. Alternatively, <code>ccall</code> may also be used to call a function pointer, such as one returned by <code>dlsym</code>.</p> <p>Each <code>ArgumentValue</code> to the <code>ccall</code> will be converted to the corresponding <code>ArgumentType</code>, by automatic insertion of calls to <code>unsafe_convert(ArgumentType, cconvert(ArgumentType, ArgumentValue))</code>. (See also the documentation for each of these functions for further details.) In most cases, this simply results in a call to <code>convert(ArgumentType, ArgumentValue)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cglobal\">\n<code>cglobal((symbol, library)[, type=Void])</code> </dt> <dd>\n<p>Obtain a pointer to a global variable in a C-exported shared library, specified exactly as in <code>ccall</code>. Returns a <code>Ptr{Type}</code>, defaulting to <code>Ptr{Void}</code> if no Type argument is supplied. The values can be read or written by <code>unsafe_load</code> or <code>unsafe_store!</code>, respectively.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cfunction\">\n<code>cfunction(function::Function, ReturnType::Type, (ArgumentTypes...))</code> </dt> <dd>\n<p>Generate C-callable function pointer from Julia function. Type annotation of the return value in the callback function is a must for situations where Julia cannot infer the return type automatically.</p> <p>For example:</p> <pre data-language=\"julia\">function foo()\n    # body\n\n    retval::Float64\nend\n\nbar = cfunction(foo, Float64, ())\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.unsafe_convert\">\n<code>unsafe_convert(T, x)</code> </dt> <dd>\n<p>Convert <code>x</code> to a value of type <code>T</code></p> <p>In cases where <code>convert</code> would need to take a Julia object and turn it into a <code>Ptr</code>, this function should be used to define and perform that conversion.</p> <p>Be careful to ensure that a julia reference to <code>x</code> exists as long as the result of this function will be used. Accordingly, the argument <code>x</code> to this function should never be an expression, only a variable name or field reference. For example, <code>x=a.b.c</code> is acceptable, but <code>x=[a,b,c]</code> is not.</p> <p>The <code>unsafe</code> prefix on this function indicates that using the result of this function after the <code>x</code> argument to this function is no longer accessible to the program may cause undefined behavior, including program corruption or segfaults, at any later time.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cconvert\">\n<code>cconvert(T, x)</code> </dt> <dd>\n<p>Convert <code>x</code> to a value of type <code>T</code>, typically by calling <code>convert(T,x)</code></p> <p>In cases where <code>x</code> cannot be safely converted to <code>T</code>, unlike <code>convert</code>, <code>cconvert</code> may return an object of a type different from <code>T</code>, which however is suitable for <code>unsafe_convert</code> to handle.</p> <p>Neither <code>convert</code> nor <code>cconvert</code> should take a Julia object and turn it into a <code>Ptr</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.unsafe_load\">\n<code>unsafe_load(p::Ptr{T}, i::Integer)</code> </dt> <dd>\n<p>Load a value of type <code>T</code> from the address of the ith element (1-indexed) starting at <code>p</code>. This is equivalent to the C expression <code>p[i-1]</code>.</p> <p>The <code>unsafe</code> prefix on this function indicates that no validation is performed on the pointer <code>p</code> to ensure that it is valid. Incorrect usage may segfault your program or return garbage answers, in the same manner as C.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.unsafe_store!\">\n<code>unsafe_store!(p::Ptr{T}, x, i::Integer)</code> </dt> <dd>\n<p>Store a value of type <code>T</code> to the address of the ith element (1-indexed) starting at <code>p</code>. This is equivalent to the C expression <code>p[i-1] = x</code>.</p> <p>The <code>unsafe</code> prefix on this function indicates that no validation is performed on the pointer <code>p</code> to ensure that it is valid. Incorrect usage may corrupt or segfault your program, in the same manner as C.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.unsafe_copy!\">\n<code>unsafe_copy!(dest::Ptr{T}, src::Ptr{T}, N)</code> </dt> <dd>\n<p>Copy <code>N</code> elements from a source pointer to a destination, with no checking. The size of an element is determined by the type of the pointers.</p> <p>The <code>unsafe</code> prefix on this function indicates that no validation is performed on the pointers <code>dest</code> and <code>src</code> to ensure that they are valid. Incorrect usage may corrupt or segfault your program, in the same manner as C.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>unsafe_copy!(dest::Array, do, src::Array, so, N)</code> </dt> <dd>\n<p>Copy <code>N</code> elements from a source array to a destination, starting at offset <code>so</code> in the source and <code>do</code> in the destination (1-indexed).</p> <p>The <code>unsafe</code> prefix on this function indicates that no validation is performed to ensure that N is inbounds on either array. Incorrect usage may corrupt or segfault your program, in the same manner as C.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.copy!\">\n<code>copy!(dest, src)</code> </dt> <dd>\n<p>Copy all elements from collection <code>src</code> to array <code>dest</code>. Returns <code>dest</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>copy!(dest, do, src, so, N)</code> </dt> <dd>\n<p>Copy <code>N</code> elements from collection <code>src</code> starting at offset <code>so</code>, to array <code>dest</code> starting at offset <code>do</code>. Returns <code>dest</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.pointer\">\n<code>pointer(array[, index])</code> </dt> <dd>\n<p>Get the native address of an array or string element. Be careful to ensure that a julia reference to <code>a</code> exists as long as this pointer will be used. This function is “unsafe” like <code>unsafe_convert</code>.</p> <p>Calling <code>Ref(array[, index])</code> is generally preferable to this function.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.pointer_to_array\">\n<code>pointer_to_array(pointer, dims[, take_ownership::Bool])</code> </dt> <dd>\n<p>Wrap a native pointer as a Julia Array object. The pointer element type determines the array element type. <code>own</code> optionally specifies whether Julia should take ownership of the memory, calling <code>free</code> on the pointer when the array is no longer referenced.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.pointer_from_objref\">\n<code>pointer_from_objref(object_instance)</code> </dt> <dd>\n<p>Get the memory address of a Julia object as a <code>Ptr</code>. The existence of the resulting <code>Ptr</code> will not protect the object from garbage collection, so you must ensure that the object remains referenced for the whole time that the <code>Ptr</code> will be used.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.unsafe_pointer_to_objref\">\n<code>unsafe_pointer_to_objref(p::Ptr)</code> </dt> <dd>\n<p>Convert a <code>Ptr</code> to an object reference. Assumes the pointer refers to a valid heap-allocated Julia object. If this is not the case, undefined behavior results, hence this function is considered “unsafe” and should be used with care.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.disable_sigint\">\n<code>disable_sigint(f::Function)</code> </dt> <dd>\n<p>Disable Ctrl-C handler during execution of a function, for calling external code that is not interrupt safe. Intended to be called using <code>do</code> block syntax as follows:</p> <pre data-language=\"julia\">disable_sigint() do\n    # interrupt-unsafe code\n    ...\nend\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reenable_sigint\">\n<code>reenable_sigint(f::Function)</code> </dt> <dd>\n<p>Re-enable Ctrl-C handler during execution of a function. Temporarily reverses the effect of <code>disable_sigint</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.systemerror\">\n<code>systemerror(sysfunc, iftrue)</code> </dt> <dd>\n<p>Raises a <code>SystemError</code> for <code>errno</code> with the descriptive string <code>sysfunc</code> if <code>iftrue</code> is <code>true</code></p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Ptr{T}\">\n<code>Ptr{T}</code> </dt> <dd>\n<p>A memory address referring to data of type <code>T</code>. However, there is no guarantee that the memory is actually valid, or that it actually represents data of the specified type.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Ref{T}\">\n<code>Ref{T}</code> </dt> <dd>\n<p>An object that safely references data of type <code>T</code>. This type is guaranteed to point to valid, Julia-allocated memory of the correct type. The underlying data is protected from freeing by the garbage collector as long as the <code>Ref</code> itself is referenced.</p> <p>When passed as a <code>ccall</code> argument (either as a <code>Ptr</code> or <code>Ref</code> type), a <code>Ref</code> object will be converted to a native pointer to the data it references.</p> <p>There is no invalid (NULL) <code>Ref</code>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cchar\">\n<code>Cchar</code> </dt> <dd>\n<p>Equivalent to the native <code>char</code> c-type</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cuchar\">\n<code>Cuchar</code> </dt> <dd>\n<p>Equivalent to the native <code>unsigned char</code> c-type (UInt8)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cshort\">\n<code>Cshort</code> </dt> <dd>\n<p>Equivalent to the native <code>signed short</code> c-type (Int16)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cushort\">\n<code>Cushort</code> </dt> <dd>\n<p>Equivalent to the native <code>unsigned short</code> c-type (UInt16)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cint\">\n<code>Cint</code> </dt> <dd>\n<p>Equivalent to the native <code>signed int</code> c-type (Int32)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cuint\">\n<code>Cuint</code> </dt> <dd>\n<p>Equivalent to the native <code>unsigned int</code> c-type (UInt32)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Clong\">\n<code>Clong</code> </dt> <dd>\n<p>Equivalent to the native <code>signed long</code> c-type</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Culong\">\n<code>Culong</code> </dt> <dd>\n<p>Equivalent to the native <code>unsigned long</code> c-type</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Clonglong\">\n<code>Clonglong</code> </dt> <dd>\n<p>Equivalent to the native <code>signed long long</code> c-type (Int64)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Culonglong\">\n<code>Culonglong</code> </dt> <dd>\n<p>Equivalent to the native <code>unsigned long long</code> c-type (UInt64)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cintmax_t\">\n<code>Cintmax_t</code> </dt> <dd>\n<p>Equivalent to the native <code>intmax_t</code> c-type (Int64)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cuintmax_t\">\n<code>Cuintmax_t</code> </dt> <dd>\n<p>Equivalent to the native <code>uintmax_t</code> c-type (UInt64)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Csize_t\">\n<code>Csize_t</code> </dt> <dd>\n<p>Equivalent to the native <code>size_t</code> c-type (UInt)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cssize_t\">\n<code>Cssize_t</code> </dt> <dd>\n<p>Equivalent to the native <code>ssize_t</code> c-type</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cptrdiff_t\">\n<code>Cptrdiff_t</code> </dt> <dd>\n<p>Equivalent to the native <code>ptrdiff_t</code> c-type (Int)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Coff_t\">\n<code>Coff_t</code> </dt> <dd>\n<p>Equivalent to the native <code>off_t</code> c-type</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cwchar_t\">\n<code>Cwchar_t</code> </dt> <dd>\n<p>Equivalent to the native <code>wchar_t</code> c-type (Int32)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cfloat\">\n<code>Cfloat</code> </dt> <dd>\n<p>Equivalent to the native <code>float</code> c-type (Float32)</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.Cdouble\">\n<code>Cdouble</code> </dt> <dd>\n<p>Equivalent to the native <code>double</code> c-type (Float64)</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/c/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/c/</a>\n  </p>\n</div>\n","stdlib/libc/index":"<h1>C Standard Library</h1> <dl class=\"function\"> <dt id=\"Libc.malloc\">\n<code>malloc(size::Integer) → Ptr{Void}</code> </dt> <dd>\n<p>Call <code>malloc</code> from the C standard library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.calloc\">\n<code>calloc(num::Integer, size::Integer) → Ptr{Void}</code> </dt> <dd>\n<p>Call <code>calloc</code> from the C standard library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.realloc\">\n<code>realloc(addr::Ptr, size::Integer) → Ptr{Void}</code> </dt> <dd>\n<p>Call <code>realloc</code> from the C standard library.</p> <p>See warning in the documentation for <code>free</code> regarding only using this on memory originally obtained from <code>malloc</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.free\">\n<code>free(addr::Ptr)</code> </dt> <dd>\n<p>Call <code>free</code> from the C standard library. Only use this on memory obtained from <code>malloc</code>, not on pointers retrieved from other C libraries. <code>Ptr</code> objects obtained from C libraries should be freed by the free functions defined in that library, to avoid assertion failures if multiple <code>libc</code> libraries exist on the system.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.errno\">\n<code>errno([code])</code> </dt> <dd>\n<p>Get the value of the C library’s <code>errno</code>. If an argument is specified, it is used to set the value of <code>errno</code>.</p> <p>The value of <code>errno</code> is only valid immediately after a <code>ccall</code> to a C library routine that sets it. Specifically, you cannot call <code>errno</code> at the next prompt in a REPL, because lots of code is executed between prompts.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.strerror\">\n<code>strerror(n=errno())</code> </dt> <dd>\n<p>Convert a system call error code to a descriptive string</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.GetLastError\">\n<code>GetLastError()</code> </dt> <dd>\n<p>Call the Win32 <code>GetLastError</code> function [only available on Windows].</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.FormatMessage\">\n<code>FormatMessage(n=GetLastError())</code> </dt> <dd>\n<p>Convert a Win32 system call error code to a descriptive string [only available on Windows].</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.time\">\n<code>time(t::TmStruct)</code> </dt> <dd>\n<p>Converts a <code>TmStruct</code> struct to a number of seconds since the epoch.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.strftime\">\n<code>strftime([format, ]time)</code> </dt> <dd>\n<p>Convert time, given as a number of seconds since the epoch or a <code>TmStruct</code>, to a formatted string using the given format. Supported formats are the same as those in the standard C library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.strptime\">\n<code>strptime([format, ]timestr)</code> </dt> <dd>\n<p>Parse a formatted time string into a <code>TmStruct</code> giving the seconds, minute, hour, date, etc. Supported formats are the same as those in the standard C library. On some platforms, timezones will not be parsed correctly. If the result of this function will be passed to <code>time</code> to convert it to seconds since the epoch, the <code>isdst</code> field should be filled in manually. Setting it to <code>-1</code> will tell the C library to use the current system settings to determine the timezone.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.TmStruct\">\n<code>TmStruct([seconds])</code> </dt> <dd>\n<p>Convert a number of seconds since the epoch to broken-down format, with fields <code>sec</code>, <code>min</code>, <code>hour</code>, <code>mday</code>, <code>month</code>, <code>year</code>, <code>wday</code>, <code>yday</code>, and <code>isdst</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.flush_cstdio\">\n<code>flush_cstdio()</code> </dt> <dd>\n<p>Flushes the C <code>stdout</code> and <code>stderr</code> streams (which may have been written to by external C code).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libc.msync\">\n<code>msync(ptr, len[, flags])</code> </dt> <dd>\n<p>Forces synchronization of the <code>mmap()</code>ped memory region from <code>ptr</code> to <code>ptr+len</code>. Flags defaults to <code>MS_SYNC</code>, but can be a combination of <code>MS_ASYNC</code>, <code>MS_SYNC</code>, or <code>MS_INVALIDATE</code>. See your platform man page for specifics. The flags argument is not valid on Windows.</p> <p>You may not need to call <code>msync</code>, because synchronization is performed at intervals automatically by the operating system. However, you can call this directly if, for example, you are concerned about losing the result of a long-running calculation.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libc.MS_ASYNC\">\n<code>MS_ASYNC</code> </dt> <dd>\n<p>Enum constant for <a class=\"reference internal\" href=\"#Libc.msync\" title=\"Libc.msync\"><code>msync()</code></a>. See your platform man page for details. (not available on Windows).</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libc.MS_SYNC\">\n<code>MS_SYNC</code> </dt> <dd>\n<p>Enum constant for <a class=\"reference internal\" href=\"#Libc.msync\" title=\"Libc.msync\"><code>msync()</code></a>. See your platform man page for details. (not available on Windows).</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libc.MS_INVALIDATE\">\n<code>MS_INVALIDATE</code> </dt> <dd>\n<p>Enum constant for <a class=\"reference internal\" href=\"#Libc.msync\" title=\"Libc.msync\"><code>msync()</code></a>. See your platform man page for details. (not available on Windows).</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/libc/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/libc/</a>\n  </p>\n</div>\n","stdlib/libdl/index":"<h1>Dynamic Linker</h1> <dl class=\"function\"> <dt id=\"Libdl.dlopen\">\n<code>dlopen(libfile::AbstractString[, flags::Integer])</code> </dt> <dd>\n<p>Load a shared library, returning an opaque handle.</p> <p>The optional flags argument is a bitwise-or of zero or more of <code>RTLD_LOCAL</code>, <code>RTLD_GLOBAL</code>, <code>RTLD_LAZY</code>, <code>RTLD_NOW</code>, <code>RTLD_NODELETE</code>, <code>RTLD_NOLOAD</code>, <code>RTLD_DEEPBIND</code>, and <code>RTLD_FIRST</code>. These are converted to the corresponding flags of the POSIX (and/or GNU libc and/or MacOS) dlopen command, if possible, or are ignored if the specified functionality is not available on the current platform. The default flags are platform specific. On MacOS the default <code>dlopen</code> flags are <code>RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL</code> while on other platforms the defaults are <code>RTLD_LAZY|RTLD_DEEPBIND|RTLD_LOCAL</code>. An important usage of these flags is to specify non default behavior for when the dynamic library loader binds library references to exported symbols and if the bound references are put into process local or global scope. For instance <code>RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL</code> allows the library’s symbols to be available for usage in other shared libraries, addressing situations where there are dependencies between shared libraries.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libdl.dlopen_e\">\n<code>dlopen_e(libfile::AbstractString[, flags::Integer])</code> </dt> <dd>\n<p>Similar to <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code>dlopen()</code></a>, except returns a <code>NULL</code> pointer instead of raising errors.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libdl.RTLD_DEEPBIND\">\n<code>RTLD_DEEPBIND</code> </dt> <dd>\n<p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code>dlopen()</code></a>. See your platform man page for details, if applicable.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libdl.RTLD_FIRST\">\n<code>RTLD_FIRST</code> </dt> <dd>\n<p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code>dlopen()</code></a>. See your platform man page for details, if applicable.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libdl.RTLD_GLOBAL\">\n<code>RTLD_GLOBAL</code> </dt> <dd>\n<p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code>dlopen()</code></a>. See your platform man page for details, if applicable.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libdl.RTLD_LAZY\">\n<code>RTLD_LAZY</code> </dt> <dd>\n<p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code>dlopen()</code></a>. See your platform man page for details, if applicable.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libdl.RTLD_LOCAL\">\n<code>RTLD_LOCAL</code> </dt> <dd>\n<p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code>dlopen()</code></a>. See your platform man page for details, if applicable.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libdl.RTLD_NODELETE\">\n<code>RTLD_NODELETE</code> </dt> <dd>\n<p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code>dlopen()</code></a>. See your platform man page for details, if applicable.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libdl.RTLD_NOLOAD\">\n<code>RTLD_NOLOAD</code> </dt> <dd>\n<p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code>dlopen()</code></a>. See your platform man page for details, if applicable.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libdl.RTLD_NOW\">\n<code>RTLD_NOW</code> </dt> <dd>\n<p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code>dlopen()</code></a>. See your platform man page for details, if applicable.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libdl.dlsym\">\n<code>dlsym(handle, sym)</code> </dt> <dd>\n<p>Look up a symbol from a shared library handle, return callable function pointer on success.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libdl.dlsym_e\">\n<code>dlsym_e(handle, sym)</code> </dt> <dd>\n<p>Look up a symbol from a shared library handle, silently return <code>NULL</code> pointer on lookup failure.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libdl.dlclose\">\n<code>dlclose(handle)</code> </dt> <dd>\n<p>Close shared library referenced by handle.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libdl.dlext\">\n<code>dlext</code> </dt> <dd>\n<p>File extension for dynamic libraries (e.g. dll, dylib, so) on the current platform.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Libdl.find_library\">\n<code>find_library(names, locations)</code> </dt> <dd>\n<p>Searches for the first library in <code>names</code> in the paths in the <code>locations</code> list, <code>DL_LOAD_PATH</code>, or system library paths (in that order) which can successfully be dlopen’d. On success, the return value will be one of the names (potentially prefixed by one of the paths in locations). This string can be assigned to a <code>global const</code> and used as the library name in future <code>ccall</code>‘s. On failure, it returns the empty string.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Libdl.DL_LOAD_PATH\">\n<code>DL_LOAD_PATH</code> </dt> <dd>\n<p>When calling <code>dlopen</code>, the paths in this list will be searched first, in order, before searching the system locations for a valid library handle.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/libdl/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/libdl/</a>\n  </p>\n</div>\n","stdlib/profile/index":"<h1 id=\"stdlib-profiling\">Profiling</h1> <dl class=\"function\"> <dt id=\"Base.@profile\">\n<code>@profile()</code> </dt> <dd>\n<p><code>@profile &lt;expression&gt;</code> runs your expression while taking periodic backtraces. These are appended to an internal buffer of backtraces.</p> </dd>\n</dl> <p>The methods in <code>Base.Profile</code> are not exported and need to be called e.g. as <code>Profile.print()</code>.</p> <dl class=\"function\"> <dt id=\"Base.Profile.clear\">\n<code>clear()</code> </dt> <dd>\n<p>Clear any existing backtraces from the internal buffer.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Profile.print\">\n<code>print([io::IO = STDOUT, ][data::Vector]; format = :tree, C = false, combine = true, cols = tty_cols(), maxdepth = typemax(Int), sortedby = :filefuncline)</code> </dt> <dd>\n<p>Prints profiling results to <code>io</code> (by default, <code>STDOUT</code>). If you do not supply a <code>data</code> vector, the internal buffer of accumulated backtraces will be used. <code>format</code> can be <code>:tree</code> or <code>:flat</code>. If <code>C==true</code>, backtraces from C and Fortran code are shown. <code>combine==true</code> merges instruction pointers that correspond to the same line of code. <code>cols</code> controls the width of the display. <code>maxdepth</code> can be used to limit the depth of printing in <code>:tree</code> format, while <code>sortedby</code> can be used to control the order in <code>:flat</code> format (<code>:filefuncline</code> sorts by the source line, whereas <code>:count</code> sorts in order of number of collected samples).</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>print([io::IO = STDOUT, ]data::Vector, lidict::Dict; kwargs)</code> </dt> <dd>\n<p>Prints profiling results to <code>io</code>. This variant is used to examine results exported by a previous call to <a class=\"reference internal\" href=\"#Base.Profile.retrieve\" title=\"Base.Profile.retrieve\"><code>retrieve()</code></a>. Supply the vector <code>data</code> of backtraces and a dictionary <code>lidict</code> of line information.</p> <p>See <code>Profile.print([io], data)</code> for an explanation of the valid keyword arguments.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Profile.init\">\n<code>init(; n::Integer, delay::Float64)</code> </dt> <dd>\n<p>Configure the <code>delay</code> between backtraces (measured in seconds), and the number <code>n</code> of instruction pointers that may be stored. Each instruction pointer corresponds to a single line of code; backtraces generally consist of a long list of instruction pointers. Default settings can be obtained by calling this function with no arguments, and each can be set independently using keywords or in the order <code>(n, delay)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Profile.fetch\">\n<code>fetch() → data</code> </dt> <dd>\n<p>Returns a reference to the internal buffer of backtraces. Note that subsequent operations, like <a class=\"reference internal\" href=\"#Base.Profile.clear\" title=\"Base.Profile.clear\"><code>clear()</code></a>, can affect <code>data</code> unless you first make a copy. Note that the values in <code>data</code> have meaning only on this machine in the current session, because it depends on the exact memory addresses used in JIT-compiling. This function is primarily for internal use; <a class=\"reference internal\" href=\"#Base.Profile.retrieve\" title=\"Base.Profile.retrieve\"><code>retrieve()</code></a> may be a better choice for most users.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Profile.retrieve\">\n<code>retrieve() → data, lidict</code> </dt> <dd>\n<p>“Exports” profiling results in a portable format, returning the set of all backtraces (<code>data</code>) and a dictionary that maps the (session-specific) instruction pointers in <code>data</code> to <code>LineInfo</code> values that store the file name, function name, and line number. This function allows you to save profiling results for future analysis.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Profile.callers\">\n<code>callers(funcname[, data, lidict][, filename=<filename>][, linerange=<stop>]) → Vector{Tuple{count, linfo}}</stop></filename></code> </dt> <dd>\n<p>Given a previous profiling run, determine who called a particular function. Supplying the filename (and optionally, range of line numbers over which the function is defined) allows you to disambiguate an overloaded method. The returned value is a vector containing a count of the number of calls and line information about the caller. One can optionally supply backtrace data obtained from <a class=\"reference internal\" href=\"#Base.Profile.retrieve\" title=\"Base.Profile.retrieve\"><code>retrieve()</code></a>; otherwise, the current internal profile buffer is used.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Profile.clear_malloc_data\">\n<code>clear_malloc_data()</code> </dt> <dd>\n<p>Clears any stored memory allocation data when running julia with <code>--track-allocation</code>. Execute the command(s) you want to test (to force JIT-compilation), then call <a class=\"reference internal\" href=\"#Base.Profile.clear_malloc_data\" title=\"Base.Profile.clear_malloc_data\"><code>clear_malloc_data()</code></a>. Then execute your command(s) again, quit Julia, and examine the resulting <code>*.mem</code> files.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/profile/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/profile/</a>\n  </p>\n</div>\n","stdlib/io-network/index":"<h1>I/O and Network</h1>  <h2 id=\"general-i-o\">General I/O</h2> <dl class=\"data\"> <dt id=\"Base.STDOUT\">\n<code>STDOUT</code> </dt> <dd>\n<p>Global variable referring to the standard out stream.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.STDERR\">\n<code>STDERR</code> </dt> <dd>\n<p>Global variable referring to the standard error stream.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.STDIN\">\n<code>STDIN</code> </dt> <dd>\n<p>Global variable referring to the standard input stream.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.open\">\n<code>open(file_name[, read, write, create, truncate, append]) → IOStream</code> </dt> <dd>\n<p>Open a file in a mode specified by five boolean arguments. The default is to open files for reading only. Returns a stream for accessing the file.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>open(file_name[, mode]) → IOStream</code> </dt> <dd>\n<p>Alternate syntax for open, where a string-based mode specifier is used instead of the five booleans. The values of <code>mode</code> correspond to those from <code>fopen(3)</code> or Perl <code>open</code>, and are equivalent to setting the following boolean groups:</p> <table class=\"docutils\">   <tr class=\"row-odd\">\n<td>r</td> <td>read</td> </tr> <tr class=\"row-even\">\n<td>r+</td> <td>read, write</td> </tr> <tr class=\"row-odd\">\n<td>w</td> <td>write, create, truncate</td> </tr> <tr class=\"row-even\">\n<td>w+</td> <td>read, write, create, truncate</td> </tr> <tr class=\"row-odd\">\n<td>a</td> <td>write, create, append</td> </tr> <tr class=\"row-even\">\n<td>a+</td> <td>read, write, create, append</td> </tr>  </table> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>open(command, mode::AbstractString=\"r\", stdio=DevNull)</code> </dt> <dd>\n<p>Start running <code>command</code> asynchronously, and return a tuple <code>(stream,process)</code>. If <code>mode</code> is <code>\"r\"</code>, then <code>stream</code> reads from the process’s standard output and <code>stdio</code> optionally specifies the process’s standard input stream. If <code>mode</code> is <code>\"w\"</code>, then <code>stream</code> writes to the process’s standard input and <code>stdio</code> optionally specifies the process’s standard output stream.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>open(f::Function, command, mode::AbstractString=\"r\", stdio=DevNull)</code> </dt> <dd>\n<p>Similar to <code>open(command, mode, stdio)</code>, but calls <code>f(stream)</code> on the resulting read or write stream, then closes the stream and waits for the process to complete. Returns the value returned by <code>f</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>open(f::Function, args...)</code> </dt> <dd>\n<p>Apply the function <code>f</code> to the result of <code>open(args...)</code> and close the resulting file descriptor upon completion.</p> <p><strong>Example</strong>: <code>open(readall, \"file.txt\")</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.IOBuffer\">\n<code>IOBuffer() → IOBuffer</code> </dt> <dd>\n<p>Create an in-memory I/O stream.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>IOBuffer(size::Int)</code> </dt> <dd>\n<p>Create a fixed size IOBuffer. The buffer will not grow dynamically.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>IOBuffer(string)</code> </dt> <dd>\n<p>Create a read-only IOBuffer on the data underlying the given string</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>IOBuffer([data][, readable, writable[, maxsize]])</code> </dt> <dd>\n<p>Create an IOBuffer, which may optionally operate on a pre-existing array. If the readable/writable arguments are given, they restrict whether or not the buffer may be read from or written to respectively. By default the buffer is readable but not writable. The last argument optionally specifies a size beyond which the buffer may not be grown.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.takebuf_array\">\n<code>takebuf_array(b::IOBuffer)</code> </dt> <dd>\n<p>Obtain the contents of an <code>IOBuffer</code> as an array, without copying. Afterwards, the IOBuffer is reset to its initial state.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.takebuf_string\">\n<code>takebuf_string(b::IOBuffer)</code> </dt> <dd>\n<p>Obtain the contents of an <code>IOBuffer</code> as a string, without copying. Afterwards, the IOBuffer is reset to its initial state.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fdio\">\n<code>fdio([name::AbstractString, ]fd::Integer[, own::Bool]) → IOStream</code> </dt> <dd>\n<p>Create an <code>IOStream</code> object from an integer file descriptor. If <code>own</code> is <code>true</code>, closing this object will close the underlying descriptor. By default, an <code>IOStream</code> is closed when it is garbage collected. <code>name</code> allows you to associate the descriptor with a named file.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.flush\">\n<code>flush(stream)</code> </dt> <dd>\n<p>Commit all currently buffered writes to the given stream.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.close\">\n<code>close(stream)</code> </dt> <dd>\n<p>Close an I/O stream. Performs a <code>flush</code> first.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.write\">\n<code>write(stream, x)</code> </dt> <dd>\n<p>Write the canonical binary representation of a value to the given stream. Returns the number of bytes written into the stream.</p> <p>You can write multiple values with the same :func:<code>write</code> call. i.e. the following are equivalent:</p> <pre data-language=\"julia\">write(stream, x, y...)\nwrite(stream, x) + write(stream, y...)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.read\">\n<code>read(stream, type)</code> </dt> <dd>\n<p>Read a value of the given type from a stream, in canonical binary representation.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>read(stream, type, dims)</code> </dt> <dd>\n<p>Read a series of values of the given type from a stream, in canonical binary representation. <code>dims</code> is either a tuple or a series of integer arguments specifying the size of <code>Array</code> to return.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.read!\">\n<code>read!(stream, array::Array)</code> </dt> <dd>\n<p>Read binary data from a stream, filling in the argument <code>array</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readbytes!\">\n<code>readbytes!(stream, b::Vector{UInt8}, nb=length(b); all=true)</code> </dt> <dd>\n<p>Read at most <code>nb</code> bytes from the stream into <code>b</code>, returning the number of bytes read (increasing the size of <code>b</code> as needed).</p> <p>See <code>readbytes</code> for a description of the <code>all</code> option.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readbytes\">\n<code>readbytes(stream, nb=typemax(Int); all=true)</code> </dt> <dd>\n<p>Read at most <code>nb</code> bytes from the stream, returning a <code>Vector{UInt8}</code> of the bytes read.</p> <p>If <code>all</code> is <code>true</code> (the default), this function will block repeatedly trying to read all requested bytes, until an error or end-of-file occurs. If <code>all</code> is <code>false</code>, at most one <code>read</code> call is performed, and the amount of data returned is device-dependent. Note that not all stream types support the <code>all</code> option.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.position\">\n<code>position(s)</code> </dt> <dd>\n<p>Get the current position of a stream.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.seek\">\n<code>seek(s, pos)</code> </dt> <dd>\n<p>Seek a stream to the given position.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.seekstart\">\n<code>seekstart(s)</code> </dt> <dd>\n<p>Seek a stream to its beginning.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.seekend\">\n<code>seekend(s)</code> </dt> <dd>\n<p>Seek a stream to its end.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.skip\">\n<code>skip(s, offset)</code> </dt> <dd>\n<p>Seek a stream relative to the current position.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mark\">\n<code>mark(s)</code> </dt> <dd>\n<p>Add a mark at the current position of stream <code>s</code>. Returns the marked position.</p> <p>See also <a class=\"reference internal\" href=\"#Base.unmark\" title=\"Base.unmark\"><code>unmark()</code></a>, <a class=\"reference internal\" href=\"#Base.reset\" title=\"Base.reset\"><code>reset()</code></a>, <a class=\"reference internal\" href=\"#Base.ismarked\" title=\"Base.ismarked\"><code>ismarked()</code></a></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.unmark\">\n<code>unmark(s)</code> </dt> <dd>\n<p>Remove a mark from stream <code>s</code>. Returns <code>true</code> if the stream was marked, <code>false</code> otherwise.</p> <p>See also <a class=\"reference internal\" href=\"#Base.mark\" title=\"Base.mark\"><code>mark()</code></a>, <a class=\"reference internal\" href=\"#Base.reset\" title=\"Base.reset\"><code>reset()</code></a>, <a class=\"reference internal\" href=\"#Base.ismarked\" title=\"Base.ismarked\"><code>ismarked()</code></a></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reset\">\n<code>reset(s)</code> </dt> <dd>\n<p>Reset a stream <code>s</code> to a previously marked position, and remove the mark. Returns the previously marked position. Throws an error if the stream is not marked.</p> <p>See also <a class=\"reference internal\" href=\"#Base.mark\" title=\"Base.mark\"><code>mark()</code></a>, <a class=\"reference internal\" href=\"#Base.unmark\" title=\"Base.unmark\"><code>unmark()</code></a>, <a class=\"reference internal\" href=\"#Base.ismarked\" title=\"Base.ismarked\"><code>ismarked()</code></a></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ismarked\">\n<code>ismarked(s)</code> </dt> <dd>\n<p>Returns <code>true</code> if stream <code>s</code> is marked.</p> <p>See also <a class=\"reference internal\" href=\"#Base.mark\" title=\"Base.mark\"><code>mark()</code></a>, <a class=\"reference internal\" href=\"#Base.unmark\" title=\"Base.unmark\"><code>unmark()</code></a>, <a class=\"reference internal\" href=\"#Base.reset\" title=\"Base.reset\"><code>reset()</code></a></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eof\">\n<code>eof(stream) → Bool</code> </dt> <dd>\n<p>Tests whether an I/O stream is at end-of-file. If the stream is not yet exhausted, this function will block to wait for more data if necessary, and then return <code>false</code>. Therefore it is always safe to read one byte after seeing <code>eof</code> return <code>false</code>. <code>eof</code> will return <code>false</code> as long as buffered data is still available, even if the remote end of a connection is closed.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isreadonly\">\n<code>isreadonly(stream) → Bool</code> </dt> <dd>\n<p>Determine whether a stream is read-only.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isopen\">\n<code>isopen(object) → Bool</code> </dt> <dd>\n<p>Determine whether an object - such as a stream, timer, or mmap – is not yet closed. Once an object is closed, it will never produce a new event. However, a closed stream may still have data to read in its buffer, use <code>eof</code> to check for the ability to read data. Use <code>poll_fd</code> to be notified when a stream might be writable or readable.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.serialize\">\n<code>serialize(stream, value)</code> </dt> <dd>\n<p>Write an arbitrary value to a stream in an opaque format, such that it can be read back by <code>deserialize</code>. The read-back value will be as identical as possible to the original. In general, this process will not work if the reading and writing are done by different versions of Julia, or an instance of Julia with a different system image. <code>Ptr</code> values are serialized as all-zero bit patterns (<code>NULL</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.deserialize\">\n<code>deserialize(stream)</code> </dt> <dd>\n<p>Read a value written by <code>serialize</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.print_escaped\">\n<code>print_escaped(io, str::AbstractString, esc::AbstractString)</code> </dt> <dd>\n<p>General escaping of traditional C and Unicode escape sequences, plus any characters in esc are also escaped (with a backslash).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.print_unescaped\">\n<code>print_unescaped(io, s::AbstractString)</code> </dt> <dd>\n<p>General unescaping of traditional C and Unicode escape sequences. Reverse of <a class=\"reference internal\" href=\"#Base.print_escaped\" title=\"Base.print_escaped\"><code>print_escaped()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.print_joined\">\n<code>print_joined(io, items, delim[, last])</code> </dt> <dd>\n<p>Print elements of <code>items</code> to <code>io</code> with <code>delim</code> between them. If <code>last</code> is specified, it is used as the final delimiter instead of <code>delim</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.print_shortest\">\n<code>print_shortest(io, x)</code> </dt> <dd>\n<p>Print the shortest possible representation, with the minimum number of consecutive non-zero digits, of number <code>x</code>, ensuring that it would parse to the exact same number.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fd\">\n<code>fd(stream)</code> </dt> <dd>\n<p>Returns the file descriptor backing the stream or file. Note that this function only applies to synchronous <code>File</code>‘s and <code>IOStream</code>‘s not to any of the asynchronous streams.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.redirect_stdout\">\n<code>redirect_stdout()</code> </dt> <dd>\n<p>Create a pipe to which all C and Julia level <code>STDOUT</code> output will be redirected. Returns a tuple <code>(rd,wr)</code> representing the pipe ends. Data written to <code>STDOUT</code> may now be read from the rd end of the pipe. The wr end is given for convenience in case the old <code>STDOUT</code> object was cached by the user and needs to be replaced elsewhere.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>redirect_stdout(stream)</code> </dt> <dd>\n<p>Replace <code>STDOUT</code> by stream for all C and julia level output to <code>STDOUT</code>. Note that <code>stream</code> must be a TTY, a <code>Pipe</code> or a <code>TCPSocket</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.redirect_stderr\">\n<code>redirect_stderr([stream])</code> </dt> <dd>\n<p>Like redirect_stdout, but for STDERR</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.redirect_stdin\">\n<code>redirect_stdin([stream])</code> </dt> <dd>\n<p>Like redirect_stdout, but for STDIN. Note that the order of the return tuple is still (rd,wr), i.e. data to be read from STDIN, may be written to wr.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readchomp\">\n<code>readchomp(x)</code> </dt> <dd>\n<p>Read the entirety of <code>x</code> as a string but remove trailing newlines. Equivalent to <code>chomp(readall(x))</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.truncate\">\n<code>truncate(file, n)</code> </dt> <dd>\n<p>Resize the file or buffer given by the first argument to exactly <code>n</code> bytes, filling previously unallocated space with ‘\\0’ if the file or buffer is grown</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.skipchars\">\n<code>skipchars(stream, predicate; linecomment::Char)</code> </dt> <dd>\n<p>Advance the stream until before the first character for which <code>predicate</code> returns <code>false</code>. For example <code>skipchars(stream, isspace)</code> will skip all whitespace. If keyword argument <code>linecomment</code> is specified, characters from that character through the end of a line will also be skipped.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.countlines\">\n<code>countlines(io[, eol::Char])</code> </dt> <dd>\n<p>Read <code>io</code> until the end of the stream/file and count the number of lines. To specify a file pass the filename as the first argument. EOL markers other than ‘\\n’ are supported by passing them as the second argument.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.PipeBuffer\">\n<code>PipeBuffer()</code> </dt> <dd>\n<p>An IOBuffer that allows reading and performs writes by appending. Seeking and truncating are not supported. See IOBuffer for the available constructors.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>PipeBuffer(data::Vector{UInt8}[, maxsize])</code> </dt> <dd>\n<p>Create a PipeBuffer to operate on a data vector, optionally specifying a size beyond which the underlying Array may not be grown.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readavailable\">\n<code>readavailable(stream)</code> </dt> <dd>\n<p>Read all available data on the stream, blocking the task only if no data is available. The result is a <code>Vector{UInt8,1}</code>.</p> </dd>\n</dl>   <h2 id=\"text-i-o\">Text I/O</h2> <dl class=\"function\"> <dt id=\"Base.show\">\n<code>show(x)</code> </dt> <dd>\n<p>Write an informative text representation of a value to the current output stream. New types should overload <code>show(io, x)</code> where the first argument is a stream. The representation used by <code>show</code> generally includes Julia-specific formatting and type information.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.showcompact\">\n<code>showcompact(x)</code> </dt> <dd>\n<p>Show a more compact representation of a value. This is used for printing array elements. If a new type has a different compact representation, it should overload <code>showcompact(io, x)</code> where the first argument is a stream.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.showall\">\n<code>showall(x)</code> </dt> <dd>\n<p>Similar to <code>show</code>, except shows all elements of arrays.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.summary\">\n<code>summary(x)</code> </dt> <dd>\n<p>Return a string giving a brief description of a value. By default returns <code>string(typeof(x))</code>. For arrays, returns strings like “2x2 Float64 Array”.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.print\">\n<code>print(x)</code> </dt> <dd>\n<p>Write (to the default output stream) a canonical (un-decorated) text representation of a value if there is one, otherwise call <code>show</code>. The representation used by <code>print</code> includes minimal formatting and tries to avoid Julia-specific details.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.println\">\n<code>println(x)</code> </dt> <dd>\n<p>Print (using <a class=\"reference internal\" href=\"#Base.print\" title=\"Base.print\"><code>print()</code></a>) <code>x</code> followed by a newline.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.print_with_color\">\n<code>print_with_color(color::Symbol, [io, ]strings...)</code> </dt> <dd>\n<p>Print strings in a color specified as a symbol, for example <code>:red</code> or <code>:blue</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.info\">\n<code>info(msg)</code> </dt> <dd>\n<p>Display an informational message. Argument <code>msg</code> is a string describing the information to be displayed.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.warn\">\n<code>warn(msg)</code> </dt> <dd>\n<p>Display a warning. Argument <code>msg</code> is a string describing the warning to be displayed.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@printf\">\n<code>@printf([io::IOStream, ]\"%Fmt\", args...)</code> </dt> <dd>\n<p>Print <code>args</code> using C <code>printf()</code> style format specification string. Optionally, an <code>IOStream</code> may be passed as the first argument to redirect output.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@sprintf\">\n<code>@sprintf(\"%Fmt\", args...)</code> </dt> <dd>\n<p>Return <code>@printf</code> formatted output as string.</p> <pre data-language=\"julia\">julia&gt; s = @sprintf \"this is a %s %15.1f\" \"test\" 34.567;\n\njulia&gt; println(s)\nthis is a test            34.6\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sprint\">\n<code>sprint(f::Function, args...)</code> </dt> <dd>\n<p>Call the given function with an I/O stream and the supplied extra arguments. Everything written to this I/O stream is returned as a string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.showerror\">\n<code>showerror(io, e)</code> </dt> <dd>\n<p>Show a descriptive representation of an exception object.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.dump\">\n<code>dump(x)</code> </dt> <dd>\n<p>Show all user-visible structure of a value.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.xdump\">\n<code>xdump(x)</code> </dt> <dd>\n<p>Show all structure of a value, including all fields of objects.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readall\">\n<code>readall(stream::IO)</code> </dt> <dd>\n<p>Read the entire contents of an I/O stream as a string.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>readall(filename::AbstractString)</code> </dt> <dd>\n<p>Open <code>filename</code>, read the entire contents as a string, then close the file. Equivalent to <code>open(readall, filename)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readline\">\n<code>readline(stream=STDIN)</code> </dt> <dd>\n<p>Read a single line of text, including a trailing newline character (if one is reached before the end of the input), from the given <code>stream</code> (defaults to <code>STDIN</code>),</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readuntil\">\n<code>readuntil(stream, delim)</code> </dt> <dd>\n<p>Read a string, up to and including the given delimiter byte.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readlines\">\n<code>readlines(stream)</code> </dt> <dd>\n<p>Read all lines as an array.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eachline\">\n<code>eachline(stream)</code> </dt> <dd>\n<p>Create an iterable object that will yield each line from a stream.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readdlm\">\n<code>readdlm(source, delim::Char, T::Type, eol::Char; header=false, skipstart=0, skipblanks=true, use_mmap, ignore_invalid_chars=false, quotes=true, dims, comments=true, comment_char='#')</code> </dt> <dd>\n<p>Read a matrix from the source where each line (separated by <code>eol</code>) gives one row, with elements separated by the given delimeter. The source can be a text file, stream or byte array. Memory mapped files can be used by passing the byte array representation of the mapped segment as source.</p> <p>If <code>T</code> is a numeric type, the result is an array of that type, with any non-numeric elements as <code>NaN</code> for floating-point types, or zero. Other useful values of <code>T</code> include <code>ASCIIString</code>, <code>AbstractString</code>, and <code>Any</code>.</p> <p>If <code>header</code> is <code>true</code>, the first row of data will be read as header and the tuple <code>(data_cells, header_cells)</code> is returned instead of only <code>data_cells</code>.</p> <p>Specifying <code>skipstart</code> will ignore the corresponding number of initial lines from the input.</p> <p>If <code>skipblanks</code> is <code>true</code>, blank lines in the input will be ignored.</p> <p>If <code>use_mmap</code> is <code>true</code>, the file specified by <code>source</code> is memory mapped for potential speedups. Default is <code>true</code> except on Windows. On Windows, you may want to specify <code>true</code> if the file is large, and is only read once and not written to.</p> <p>If <code>ignore_invalid_chars</code> is <code>true</code>, bytes in <code>source</code> with invalid character encoding will be ignored. Otherwise an error is thrown indicating the offending character position.</p> <p>If <code>quotes</code> is <code>true</code>, column enclosed within double-quote (”) characters are allowed to contain new lines and column delimiters. Double-quote characters within a quoted field must be escaped with another double-quote. Specifying <code>dims</code> as a tuple of the expected rows and columns (including header, if any) may speed up reading of large files. If <code>comments</code> is <code>true</code>, lines beginning with <code>comment_char</code> and text following <code>comment_char</code> in any line are ignored.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>readdlm(source, delim::Char, eol::Char; options...)</code> </dt> <dd>\n<p>If all data is numeric, the result will be a numeric array. If some elements cannot be parsed as numbers, a cell array of numbers and strings is returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>readdlm(source, delim::Char, T::Type; options...)</code> </dt> <dd>\n<p>The end of line delimiter is taken as <code>n</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>readdlm(source, delim::Char; options...)</code> </dt> <dd>\n<p>The end of line delimiter is taken as <code>n</code>. If all data is numeric, the result will be a numeric array. If some elements cannot be parsed as numbers, a cell array of numbers and strings is returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>readdlm(source, T::Type; options...)</code> </dt> <dd>\n<p>The columns are assumed to be separated by one or more whitespaces. The end of line delimiter is taken as <code>n</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>readdlm(source; options...)</code> </dt> <dd>\n<p>The columns are assumed to be separated by one or more whitespaces. The end of line delimiter is taken as <code>n</code>. If all data is numeric, the result will be a numeric array. If some elements cannot be parsed as numbers, a cell array of numbers and strings is returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.writedlm\">\n<code>writedlm(f, A, delim='\\t')</code> </dt> <dd>\n<p>Write <code>A</code> (a vector, matrix or an iterable collection of iterable rows) as text to <code>f</code> (either a filename string or an <code>IO</code> stream) using the given delimeter <code>delim</code> (which defaults to tab, but can be any printable Julia object, typically a <code>Char</code> or <code>AbstractString</code>).</p> <p>For example, two vectors <code>x</code> and <code>y</code> of the same length can be written as two columns of tab-delimited text to <code>f</code> by either <code>writedlm(f, [x y])</code> or by <code>writedlm(f, zip(x, y))</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.readcsv\">\n<code>readcsv(source, [T::Type]; options...)</code> </dt> <dd>\n<p>Equivalent to <code>readdlm</code> with <code>delim</code> set to comma.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.writecsv\">\n<code>writecsv(filename, A)</code> </dt> <dd>\n<p>Equivalent to <code>writedlm</code> with <code>delim</code> set to comma.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Base64EncodePipe\">\n<code>Base64EncodePipe(ostream)</code> </dt> <dd>\n<p>Returns a new write-only I/O stream, which converts any bytes written to it into base64-encoded ASCII bytes written to <code>ostream</code>. Calling <code>close</code> on the <code>Base64Pipe</code> stream is necessary to complete the encoding (but does not close <code>ostream</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Base64DecodePipe\">\n<code>Base64DecodePipe(istream)</code> </dt> <dd>\n<p>Returns a new read-only I/O stream, which decodes base64-encoded data read from <code>istream</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.base64encode\">\n<code>base64encode(writefunc, args...)</code> </dt> <dt>\n<code>base64encode(args...)</code> </dt> <dd>\n<p>Given a <code>write</code>-like function <code>writefunc</code>, which takes an I/O stream as its first argument, <code>base64(writefunc, args...)</code> calls <code>writefunc</code> to write <code>args...</code> to a base64-encoded string, and returns the string. <code>base64(args...)</code> is equivalent to <code>base64(write, args...)</code>: it converts its arguments into bytes using the standard <code>write</code> functions and returns the base64-encoded string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.base64decode\">\n<code>base64decode(string)</code> </dt> <dd>\n<p>Decodes the base64-encoded <code>string</code> and returns a <code>Vector{UInt8}</code> of the decoded bytes.</p> </dd>\n</dl>   <h2 id=\"multimedia-i-o\">Multimedia I/O</h2> <p>Just as text output is performed by <code>print</code> and user-defined types can indicate their textual representation by overloading <code>show</code>, Julia provides a standardized mechanism for rich multimedia output (such as images, formatted text, or even audio and video), consisting of three parts:</p> <ul class=\"simple\"> <li>A function <code>display(x)</code> to request the richest available multimedia display of a Julia object <code>x</code> (with a plain-text fallback).</li> <li>Overloading <code>writemime</code> allows one to indicate arbitrary multimedia representations (keyed by standard MIME types) of user-defined types.</li> <li>Multimedia-capable display backends may be registered by subclassing a generic <code>Display</code> type and pushing them onto a stack of display backends via <code>pushdisplay</code>.</li> </ul> <p>The base Julia runtime provides only plain-text display, but richer displays may be enabled by loading external modules or by using graphical Julia environments (such as the IPython-based IJulia notebook).</p> <dl class=\"function\"> <dt id=\"Base.display\">\n<code>display(x)</code> </dt> <dt>\n<code>display(d::Display, x)</code> </dt> <dt>\n<code>display(mime, x)</code> </dt> <dt>\n<code>display(d::Display, mime, x)</code> </dt> <dd>\n<p>Display <code>x</code> using the topmost applicable display in the display stack, typically using the richest supported multimedia output for <code>x</code>, with plain-text <code>STDOUT</code> output as a fallback. The <code>display(d, x)</code> variant attempts to display <code>x</code> on the given display <code>d</code> only, throwing a <code>MethodError</code> if <code>d</code> cannot display objects of this type.</p> <p>There are also two variants with a <code>mime</code> argument (a MIME type string, such as <code>\"image/png\"</code>), which attempt to display <code>x</code> using the requested MIME type <em>only</em>, throwing a <code>MethodError</code> if this type is not supported by either the display(s) or by <code>x</code>. With these variants, one can also supply the “raw” data in the requested MIME type by passing <code>x::AbstractString</code> (for MIME types with text-based storage, such as text/html or application/postscript) or <code>x::Vector{UInt8}</code> (for binary MIME types).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.redisplay\">\n<code>redisplay(x)</code> </dt> <dt>\n<code>redisplay(d::Display, x)</code> </dt> <dt>\n<code>redisplay(mime, x)</code> </dt> <dt>\n<code>redisplay(d::Display, mime, x)</code> </dt> <dd>\n<p>By default, the <code>redisplay</code> functions simply call <code>display</code>. However, some display backends may override <code>redisplay</code> to modify an existing display of <code>x</code> (if any). Using <code>redisplay</code> is also a hint to the backend that <code>x</code> may be redisplayed several times, and the backend may choose to defer the display until (for example) the next interactive prompt.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.displayable\">\n<code>displayable(mime) → Bool</code> </dt> <dt>\n<code>displayable(d::Display, mime) → Bool</code> </dt> <dd>\n<p>Returns a boolean value indicating whether the given <code>mime</code> type (string) is displayable by any of the displays in the current display stack, or specifically by the display <code>d</code> in the second variant.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.writemime\">\n<code>writemime(stream, mime, x)</code> </dt> <dd>\n<p>The <code>display</code> functions ultimately call <code>writemime</code> in order to write an object <code>x</code> as a given <code>mime</code> type to a given I/O <code>stream</code> (usually a memory buffer), if possible. In order to provide a rich multimedia representation of a user-defined type <code>T</code>, it is only necessary to define a new <code>writemime</code> method for <code>T</code>, via: <code>writemime(stream, ::MIME\"mime\", x::T) = ...</code>, where <code>mime</code> is a MIME-type string and the function body calls <code>write</code> (or similar) to write that representation of <code>x</code> to <code>stream</code>. (Note that the <code>MIME\"\"</code> notation only supports literal strings; to construct <code>MIME</code> types in a more flexible manner use <code>MIME{symbol(\"\")}</code>.)</p> <p>For example, if you define a <code>MyImage</code> type and know how to write it to a PNG file, you could define a function <code>writemime(stream, ::MIME\"image/png\", x::MyImage) = ...</code> to allow your images to be displayed on any PNG-capable <code>Display</code> (such as IJulia). As usual, be sure to <code>import Base.writemime</code> in order to add new methods to the built-in Julia function <code>writemime</code>.</p> <p>Technically, the <code>MIME\"mime\"</code> macro defines a singleton type for the given <code>mime</code> string, which allows us to exploit Julia’s dispatch mechanisms in determining how to display objects of any given type.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mimewritable\">\n<code>mimewritable(mime, x)</code> </dt> <dd>\n<p>Returns a boolean value indicating whether or not the object <code>x</code> can be written as the given <code>mime</code> type. (By default, this is determined automatically by the existence of the corresponding <code>writemime</code> function for <code>typeof(x)</code>.)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reprmime\">\n<code>reprmime(mime, x)</code> </dt> <dd>\n<p>Returns an <code>AbstractString</code> or <code>Vector{UInt8}</code> containing the representation of <code>x</code> in the requested <code>mime</code> type, as written by <code>writemime</code> (throwing a <code>MethodError</code> if no appropriate <code>writemime</code> is available). An <code>AbstractString</code> is returned for MIME types with textual representations (such as <code>\"text/html\"</code> or <code>\"application/postscript\"</code>), whereas binary data is returned as <code>Vector{UInt8}</code>. (The function <code>istext(mime)</code> returns whether or not Julia treats a given <code>mime</code> type as text.)</p> <p>As a special case, if <code>x</code> is an <code>AbstractString</code> (for textual MIME types) or a <code>Vector{UInt8}</code> (for binary MIME types), the <code>reprmime</code> function assumes that <code>x</code> is already in the requested <code>mime</code> format and simply returns <code>x</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.stringmime\">\n<code>stringmime(mime, x)</code> </dt> <dd>\n<p>Returns an <code>AbstractString</code> containing the representation of <code>x</code> in the requested <code>mime</code> type. This is similar to <code>reprmime</code> except that binary data is base64-encoded as an ASCII string.</p> </dd>\n</dl> <p>As mentioned above, one can also define new display backends. For example, a module that can display PNG images in a window can register this capability with Julia, so that calling <code>display(x)</code> on types with PNG representations will automatically display the image using the module’s window.</p> <p>In order to define a new display backend, one should first create a subtype <code>D</code> of the abstract class <code>Display</code>. Then, for each MIME type (<code>mime</code> string) that can be displayed on <code>D</code>, one should define a function <code>display(d::D, ::MIME\"mime\", x) = ...</code> that displays <code>x</code> as that MIME type, usually by calling <code>reprmime(mime,\nx)</code>. A <code>MethodError</code> should be thrown if <code>x</code> cannot be displayed as that MIME type; this is automatic if one calls <code>reprmime</code>. Finally, one should define a function <code>display(d::D, x)</code> that queries <code>mimewritable(mime, x)</code> for the <code>mime</code> types supported by <code>D</code> and displays the “best” one; a <code>MethodError</code> should be thrown if no supported MIME types are found for <code>x</code>. Similarly, some subtypes may wish to override <code>redisplay(d::D, ...)</code>. (Again, one should <code>import Base.display</code> to add new methods to <code>display</code>.) The return values of these functions are up to the implementation (since in some cases it may be useful to return a display “handle” of some type). The display functions for <code>D</code> can then be called directly, but they can also be invoked automatically from <code>display(x)</code> simply by pushing a new display onto the display-backend stack with:</p> <dl class=\"function\"> <dt id=\"Base.pushdisplay\">\n<code>pushdisplay(d::Display)</code> </dt> <dd>\n<p>Pushes a new display <code>d</code> on top of the global display-backend stack. Calling <code>display(x)</code> or <code>display(mime, x)</code> will display <code>x</code> on the topmost compatible backend in the stack (i.e., the topmost backend that does not throw a <code>MethodError</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.popdisplay\">\n<code>popdisplay()</code> </dt> <dt>\n<code>popdisplay(d::Display)</code> </dt> <dd>\n<p>Pop the topmost backend off of the display-backend stack, or the topmost copy of <code>d</code> in the second variant.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.TextDisplay\">\n<code>TextDisplay(stream)</code> </dt> <dd>\n<p>Returns a <code>TextDisplay &lt;: Display</code>, which can display any object as the text/plain MIME type (only), writing the text representation to the given I/O stream. (The text representation is the same as the way an object is printed in the Julia REPL.)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.istext\">\n<code>istext(m::MIME)</code> </dt> <dd>\n<p>Determine whether a MIME type is text data.</p> </dd>\n</dl>   <h2 id=\"memory-mapped-i-o\">Memory-mapped I/O</h2> <dl class=\"function\"> <dt id=\"Base.Mmap.Anonymous\">\n<code>Mmap.Anonymous(name, readonly, create)</code> </dt> <dd>\n<p>Create an <code>IO</code>-like object for creating zeroed-out mmapped-memory that is not tied to a file for use in <code>Mmap.mmap</code>. Used by <code>SharedArray</code> for creating shared memory arrays.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Mmap.mmap\">\n<code>Mmap.mmap(io::Union{IOStream,AbstractString,Mmap.AnonymousMmap}[, type::Type{Array{T,N}}, dims, offset]; grow::Bool=true, shared::Bool=true)</code> </dt> <dt>\n<code>Mmap.mmap(type::Type{Array{T, N}}, dims)</code> </dt> <dd>\n<p>Create an <code>Array</code> whose values are linked to a file, using memory-mapping. This provides a convenient way of working with data too large to fit in the computer’s memory.</p> <p>The type is an <code>Array{T,N}</code> with a bits-type element of <code>T</code> and dimension <code>N</code> that determines how the bytes of the array are interpreted. Note that the file must be stored in binary format, and no format conversions are possible (this is a limitation of operating systems, not Julia).</p> <p><code>dims</code> is a tuple or single <code>Integer</code> specifying the size or length of the array.</p> <p>The file is passed via the stream argument, either as an open <code>IOStream</code> or filename string. When you initialize the stream, use <code>\"r\"</code> for a “read-only” array, and <code>\"w+\"</code> to create a new array used to write values to disk.</p> <p>If no <code>type</code> argument is specified, the default is <code>Vector{UInt8}</code>.</p> <p>Optionally, you can specify an offset (in bytes) if, for example, you want to skip over a header in the file. The default value for the offset is the current stream position for an <code>IOStream</code>.</p> <p>The <code>grow</code> keyword argument specifies whether the disk file should be grown to accommodate the requested size of array (if the total file size is &lt; requested array size). Write privileges are required to grow the file.</p> <p>The <code>shared</code> keyword argument specifies whether the resulting <code>Array</code> and changes made to it will be visible to other processes mapping the same file.</p> <p>For example, the following code:</p> <pre data-language=\"julia\"># Create a file for mmapping\n# (you could alternatively use mmap to do this step, too)\nA = rand(1:20, 5, 30)\ns = open(\"/tmp/mmap.bin\", \"w+\")\n# We'll write the dimensions of the array as the first two Ints in the file\nwrite(s, size(A,1))\nwrite(s, size(A,2))\n# Now write the data\nwrite(s, A)\nclose(s)\n\n# Test by reading it back in\ns = open(\"/tmp/mmap.bin\")   # default is read-only\nm = read(s, Int)\nn = read(s, Int)\nA2 = Mmap.mmap(s, Matrix{Int}, (m,n))\n</pre> <p>creates a <code>m</code>-by-<code>n</code> <code>Matrix{Int}</code>, linked to the file associated with stream <code>s</code>.</p> <p>A more portable file would need to encode the word size—32 bit or 64 bit—and endianness information in the header. In practice, consider encoding binary data using standard formats like HDF5 (which can be used with memory-mapping).</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Mmap.mmap(io, BitArray[, dims, offset])</code> </dt> <dd>\n<p>Create a <code>BitArray</code> whose values are linked to a file, using memory-mapping; it has the same purpose, works in the same way, and has the same arguments, as <code>mmap()</code>, but the byte representation is different.</p> <p><strong>Example</strong>: <code>B = Mmap.mmap(s, BitArray, (25,30000))</code></p> <p>This would create a 25-by-30000 <code>BitArray</code>, linked to the file associated with stream <code>s</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Mmap.sync!\">\n<code>Mmap.sync!(array)</code> </dt> <dd>\n<p>Forces synchronization between the in-memory version of a memory-mapped <code>Array</code> or <code>BitArray</code> and the on-disk version.</p> </dd>\n</dl>   <h2 id=\"network-i-o\">Network I/O</h2> <dl class=\"function\"> <dt id=\"Base.connect\">\n<code>connect([host, ]port) → TCPSocket</code> </dt> <dd>\n<p>Connect to the host <code>host</code> on port <code>port</code></p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>connect(path) → PipeEndpoint</code> </dt> <dd>\n<p>Connect to the Named Pipe / Domain Socket at <code>path</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.listen\">\n<code>listen([addr, ]port) → TCPServer</code> </dt> <dd>\n<p>Listen on port on the address specified by <code>addr</code>. By default this listens on localhost only. To listen on all interfaces pass <code>IPv4(0)</code> or <code>IPv6(0)</code> as appropriate.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>listen(path) → PipeServer</code> </dt> <dd>\n<p>Create and listen on a Named Pipe / Domain Socket</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.getaddrinfo\">\n<code>getaddrinfo(host)</code> </dt> <dd>\n<p>Gets the IP address of the <code>host</code> (may have to do a DNS lookup)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.parseip\">\n<code>parseip(addr)</code> </dt> <dd>\n<p>Parse a string specifying an IPv4 or IPv6 ip address.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.IPv4\">\n<code>IPv4(host::Integer) → IPv4</code> </dt> <dd>\n<p>Returns IPv4 object from ip address formatted as Integer</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.IPv6\">\n<code>IPv6(host::Integer) → IPv6</code> </dt> <dd>\n<p>Returns IPv6 object from ip address formatted as Integer</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nb_available\">\n<code>nb_available(stream)</code> </dt> <dd>\n<p>Returns the number of bytes available for reading before a read from this stream or buffer will block.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.accept\">\n<code>accept(server[, client])</code> </dt> <dd>\n<p>Accepts a connection on the given server and returns a connection to the client. An uninitialized client stream may be provided, in which case it will be used instead of creating a new stream.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.listenany\">\n<code>listenany(port_hint) -&gt; (UInt16, TCPServer)</code> </dt> <dd>\n<p>Create a <code>TCPServer</code> on any port, using hint as a starting point. Returns a tuple of the actual port that the server was created on and the server itself.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.poll_fd\">\n<code>poll_fd(fd, timeout_s::Real; readable=false, writable=false)</code> </dt> <dd>\n<p>Monitor a file descriptor <code>fd</code> for changes in the read or write availability, and with a timeout given by <code>timeout_s</code> seconds.</p> <p>The keyword arguments determine which of read and/or write status should be monitored; at least one of them must be set to <code>true</code>.</p> <p>The returned value is an object with boolean fields <code>readable</code>, <code>writable</code>, and <code>timedout</code>, giving the result of the polling.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.poll_file\">\n<code>poll_file(path, interval_s::Real, timeout_s::Real) -&gt; (previous::StatStruct, current::StatStruct)</code> </dt> <dd>\n<p>Monitor a file for changes by polling every <code>interval_s</code> seconds until a change occurs or <code>timeout_s</code> seconds have elapsed. The <code>interval_s</code> should be a long period; the default is 5.007 seconds.</p> <p>Returns a pair of <code>StatStruct</code> objects <code>(previous, current)</code> when a change is detected.</p> <p>To determine when a file was modified, compare <code>mtime(prev) != mtime(current)</code> to detect notification of changes. However, using <code>watch_file</code> for this operation is preferred, since it is more reliable and efficient, although in some situations it may not be available.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.watch_file\">\n<code>watch_file(path, timeout_s::Real)</code> </dt> <dd>\n<p>Watch file or directory <code>path</code> for changes until a change occurs or <code>timeout_s</code> seconds have elapsed.</p> <p>The returned value is an object with boolean fields <code>changed</code>, <code>renamed</code>, and <code>timedout</code>, giving the result of watching the file.</p> <p>This behavior of this function varies slightly across platforms. See &lt;<a class=\"reference external\" href=\"https://nodejs.org/api/fs.html#fs_caveats\">https://nodejs.org/api/fs.html#fs_caveats</a>&gt; for more detailed information.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bind\">\n<code>bind(socket::Union{UDPSocket, TCPSocket}, host::IPv4, port::Integer)</code> </dt> <dd>\n<p>Bind <code>socket</code> to the given <code>host:port</code>. Note that <code>0.0.0.0</code> will listen on all devices.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.send\">\n<code>send(socket::UDPSocket, host::IPv4, port::Integer, msg)</code> </dt> <dd>\n<p>Send <code>msg</code> over <code>socket</code> to <code>host:port</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.recv\">\n<code>recv(socket::UDPSocket)</code> </dt> <dd>\n<p>Read a UDP packet from the specified socket, and return the bytes received. This call blocks.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.recvfrom\">\n<code>recvfrom(socket::UDPSocket) -&gt; (address, data)</code> </dt> <dd>\n<p>Read a UDP packet from the specified socket, returning a tuple of (address, data), where address will be either IPv4 or IPv6 as appropriate.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.setopt\">\n<code>setopt(sock::UDPSocket; multicast_loop = nothing, multicast_ttl=nothing, enable_broadcast=nothing, ttl=nothing)</code> </dt> <dd>\n<p>Set UDP socket options. <code>multicast_loop</code>: loopback for multicast packets (default: <code>true</code>). <code>multicast_ttl</code>: TTL for multicast packets. <code>enable_broadcast</code>: flag must be set to <code>true</code> if socket will be used for broadcast messages, or else the UDP system will return an access error (default: <code>false</code>). <code>ttl</code>: Time-to-live of packets sent on the socket.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ntoh\">\n<code>ntoh(x)</code> </dt> <dd>\n<p>Converts the endianness of a value from Network byte order (big-endian) to that used by the Host.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hton\">\n<code>hton(x)</code> </dt> <dd>\n<p>Converts the endianness of a value from that used by the Host to Network byte order (big-endian).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ltoh\">\n<code>ltoh(x)</code> </dt> <dd>\n<p>Converts the endianness of a value from Little-endian to that used by the Host.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.htol\">\n<code>htol(x)</code> </dt> <dd>\n<p>Converts the endianness of a value from that used by the Host to Little-endian.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.ENDIAN_BOM\">\n<code>ENDIAN_BOM</code> </dt> <dd>\n<p>The 32-bit byte-order-mark indicates the native byte order of the host machine. Little-endian machines will contain the value 0x04030201. Big-endian machines will contain the value 0x01020304.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/io-network/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/io-network/</a>\n  </p>\n</div>\n","stdlib/dates/index":"<h1>Dates and Time</h1>  <h2 id=\"dates-and-time-types\">Dates and Time Types</h2> <dl class=\"data\"> <dt id=\"Dates.Period\">\n<code>Period</code> </dt> <dt id=\"Dates.Year\">\n<code>Year</code> </dt> <dt id=\"Dates.Month\">\n<code>Month</code> </dt> <dt id=\"Dates.Week\">\n<code>Week</code> </dt> <dt id=\"Dates.Day\">\n<code>Day</code> </dt> <dt id=\"Dates.Hour\">\n<code>Hour</code> </dt> <dt id=\"Dates.Minute\">\n<code>Minute</code> </dt> <dt id=\"Dates.Second\">\n<code>Second</code> </dt> <dt id=\"Dates.Millisecond\">\n<code>Millisecond</code> </dt> <dd>\n<p><code>Period</code> types represent discrete, human representations of time.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Dates.Instant\">\n<code>Instant</code> </dt> <dd>\n<p><code>Instant</code> types represent integer-based, machine representations of time as continuous timelines starting from an epoch.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Dates.UTInstant{T}\">\n<code>UTInstant{T}</code> </dt> <dd>\n<p>The <code>UTInstant</code> represents a machine timeline based on UT time (1 day = one revolution of the earth). The <code>T</code> is a <code>Period</code> parameter that indicates the resolution or precision of the instant.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Dates.TimeType\">\n<code>TimeType</code> </dt> <dd>\n<p><code>TimeType</code> types wrap <code>Instant</code> machine instances to provide human representations of the machine instant. Both <code>DateTime</code> and <code>Date</code> are subtypes of <code>TimeType</code>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Dates.DateTime\">\n<code>DateTime</code> </dt> <dd>\n<p><code>DateTime</code> wraps a <code>UTInstant{Millisecond}</code> and interprets it according to the proleptic Gregorian calendar.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Dates.Date\">\n<code>Date</code> </dt> <dd>\n<p><code>Date</code> wraps a <code>UTInstant{Day}</code> and interprets it according to the proleptic Gregorian calendar.</p> </dd>\n</dl>   <h2 id=\"dates-functions\">Dates Functions</h2> <p>All Dates functions are defined in the <code>Dates</code> module; note that only the <code>Date</code>, <code>DateTime</code>, and <code>now</code> functions are exported; to use all other <code>Dates</code> functions, you’ll need to prefix each function call with an explicit <code>Dates.</code>, e.g. <code>Dates.dayofweek(dt)</code>. Alternatively, you can write <code>using Base.Dates</code> to bring all exported functions into <code>Main</code> to be used without the <code>Dates.</code> prefix.</p> <dl class=\"function\"> <dt>\n<code>DateTime(y[, m, d, h, mi, s, ms]) → DateTime</code> </dt> <dd>\n<p>Construct a <code>DateTime</code> type by parts. Arguments must be convertible to <code>Int64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>DateTime(periods::Period...) → DateTime</code> </dt> <dd>\n<p>Constuct a <code>DateTime</code> type by <code>Period</code> type parts. Arguments may be in any order. DateTime parts not provided will default to the value of <code>Dates.default(period)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>DateTime(f::Function, y[, m, d, h, mi, s]; step=Day(1), negate=false, limit=10000) → DateTime</code> </dt> <dd>\n<p>Create a <code>DateTime</code> through the adjuster API. The starting point will be constructed from the provided <code>y, m, d...</code> arguments, and will be adjusted until <code>f::Function</code> returns <code>true</code>. The step size in adjusting can be provided manually through the <code>step</code> keyword. If <code>negate=true</code>, then the adjusting will stop when <code>f::Function</code> returns <code>false</code> instead of <code>true</code>. <code>limit</code> provides a limit to the max number of iterations the adjustment API will pursue before throwing an error (in the case that <code>f::Function</code> is never satisfied).</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>DateTime(dt::Date) → DateTime</code> </dt> <dd>\n<p>Converts a <code>Date</code> type to a <code>DateTime</code>. The hour, minute, second, and millisecond parts of the new <code>DateTime</code> are assumed to be zero.</p> </dd>\n</dl> <dl class=\"function\" id=\"man-date-parsing\"> <dt>\n<code>DateTime(dt::AbstractString, format::AbstractString; locale=\"english\") → DateTime</code> </dt> <dd>\n<p>Construct a <code>DateTime</code> by parsing the <code>dt</code> date string following the pattern given in the <code>format</code> string. The following character codes can be used to construct the <code>format</code> string:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Code</th> <th class=\"head\">Matches</th> <th class=\"head\">Comment</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>y</code></td> <td>1996, 96</td> <td>Returns year of 1996, 0096</td> </tr> <tr class=\"row-odd\">\n<td><code>m</code></td> <td>1, 01</td> <td>Matches 1 or 2-digit months</td> </tr> <tr class=\"row-even\">\n<td><code>u</code></td> <td>Jan</td> <td>Matches abbreviated months according to the <code>locale</code> keyword</td> </tr> <tr class=\"row-odd\">\n<td><code>U</code></td> <td>January</td> <td>Matches full month names according to the <code>locale</code> keyword</td> </tr> <tr class=\"row-even\">\n<td><code>d</code></td> <td>1, 01</td> <td>Matches 1 or 2-digit days</td> </tr> <tr class=\"row-odd\">\n<td><code>H</code></td> <td>00</td> <td>Matches hours</td> </tr> <tr class=\"row-even\">\n<td><code>M</code></td> <td>00</td> <td>Matches minutes</td> </tr> <tr class=\"row-odd\">\n<td><code>S</code></td> <td>00</td> <td>Matches seconds</td> </tr> <tr class=\"row-even\">\n<td><code>s</code></td> <td>.500</td> <td>Matches milliseconds</td> </tr> <tr class=\"row-odd\">\n<td><code>e</code></td> <td>Mon, Tues</td> <td>Matches abbreviated days of the week</td> </tr> <tr class=\"row-even\">\n<td><code>E</code></td> <td>Monday</td> <td>Matches full name days of the week</td> </tr> <tr class=\"row-odd\">\n<td><code>yyyymmdd</code></td> <td>19960101</td> <td>Matches fixed-width year, month, and day</td> </tr>  </table> <p>All characters not listed above are treated as delimiters between date and time slots. So a <code>dt</code> string of “1996-01-15T00:00:00.0” would have a <code>format</code> string like “y-m-dTH:M:S.s”.</p> </dd>\n</dl> <dl class=\"function\" id=\"man-date-formatting\"> <dt id=\"Dates.format\">\n<code>format(dt::TimeType, format::AbstractString; locale=\"english\") → AbstractString</code> </dt> <dd>\n<p>Construct a string by using a <code>TimeType</code> object and applying the provided <code>format</code>. The following character codes can be used to construct the <code>format</code> string:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Code</th> <th class=\"head\">Examples</th> <th class=\"head\">Comment</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>y</code></td> <td>6</td> <td>Numeric year with a fixed width</td> </tr> <tr class=\"row-odd\">\n<td><code>m</code></td> <td>1, 12</td> <td>Numeric month with a minimum width</td> </tr> <tr class=\"row-even\">\n<td><code>u</code></td> <td>Jan</td> <td>Month name shortened to 3-chars according to the <code>locale</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><code>U</code></td> <td>January</td> <td>Full month name according to the <code>locale</code> keyword</td> </tr> <tr class=\"row-even\">\n<td><code>d</code></td> <td>1, 31</td> <td>Day of the month with a minimum width</td> </tr> <tr class=\"row-odd\">\n<td><code>H</code></td> <td>0, 23</td> <td>Hour (24-hour clock) with a minimum width</td> </tr> <tr class=\"row-even\">\n<td><code>M</code></td> <td>0, 59</td> <td>Minute with a minimum width</td> </tr> <tr class=\"row-odd\">\n<td><code>S</code></td> <td>0, 59</td> <td>Second with a minimum width</td> </tr> <tr class=\"row-even\">\n<td><code>s</code></td> <td>000, 500</td> <td>Millisecond with a minimum width of 3</td> </tr> <tr class=\"row-odd\">\n<td><code>e</code></td> <td>Mon, Tue</td> <td>Abbreviated days of the week</td> </tr> <tr class=\"row-even\">\n<td><code>E</code></td> <td>Monday</td> <td>Full day of week name</td> </tr>  </table> <p>The number of sequential code characters indicate the width of the code. A format of <code>yyyy-mm</code> specifies that the code <code>y</code> should have a width of four while <code>m</code> a width of two. Codes that yield numeric digits have an associated mode: fixed-width or minimum-width. The fixed-width mode left-pads the value with zeros when it is shorter than the specified width and truncates the value when longer. Minimum-width mode works the same as fixed-width except that it does not truncate values longer than the width.</p> <p>When creating a <code>format</code> you can use any non-code characters as a separator. For example to generate the string “1996-01-15T00:00:00” you could use <code>format</code>: “yyyy-mm-ddTHH:MM:SS”.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.DateFormat\">\n<code>DateFormat(format::AbstractString, locale::AbstractString=\"english\") → DateFormat</code> </dt> <dd>\n<p>Construct a date formatting object that can be used for parsing date strings or formatting a date object as a string. For details on the syntax for <code>format</code> see <a class=\"reference internal\" href=\"#man-date-parsing\"><span>parsing</span></a> and <a class=\"reference internal\" href=\"#man-date-formatting\"><span>formatting</span></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>DateTime(dt::AbstractString, df::DateFormat) → DateTime</code> </dt> <dd>\n<p>Construct a <code>DateTime</code> by parsing the <code>dt</code> date string following the pattern given in the <a class=\"reference internal\" href=\"#Dates.DateFormat\" title=\"Dates.DateFormat\"><code>Dates.DateFormat()</code></a> object. Similar to <code>DateTime(::AbstractString, ::AbstractString)</code> but more efficient when repeatedly parsing similarly formatted date strings with a pre-created <code>DateFormat</code> object.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Date(y[, m, d]) → Date</code> </dt> <dd>\n<p>Construct a <code>Date</code> type by parts. Arguments must be convertible to <code>Int64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Date(period::Period...) → Date</code> </dt> <dd>\n<p>Constuct a <code>Date</code> type by <code>Period</code> type parts. Arguments may be in any order. <code>Date</code> parts not provided will default to the value of <code>Dates.default(period)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Date(f::Function, y[, m, d]; step=Day(1), negate=false, limit=10000) → Date</code> </dt> <dd>\n<p>Create a <code>Date</code> through the adjuster API. The starting point will be constructed from the provided <code>y, m, d</code> arguments, and will be adjusted until <code>f::Function</code> returns <code>true</code>. The step size in adjusting can be provided manually through the <code>step</code> keyword. If <code>negate=true</code>, then the adjusting will stop when <code>f::Function</code> returns <code>false</code> instead of <code>true</code>. <code>limit</code> provides a limit to the max number of iterations the adjustment API will pursue before throwing an error (given that <code>f::Function</code> is never satisfied).</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Date(dt::DateTime) → Date</code> </dt> <dd>\n<p>Converts a <code>DateTime</code> to a <code>Date</code>. The hour, minute, second, and millisecond parts of the <code>DateTime</code> are truncated, so only the year, month and day parts are used in construction.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Date(dt::AbstractString, format::AbstractString; locale=\"english\") → Date</code> </dt> <dd>\n<p>Construct a <code>Date</code> object by parsing a <code>dt</code> date string following the pattern given in the <code>format</code> string. Follows the same conventions as <code>DateTime(::AbstractString, ::AbstractString)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Date(dt::AbstractString, df::DateFormat) → Date</code> </dt> <dd>\n<p>Parse a date from a date string <code>dt</code> using a <code>DateFormat</code> object <code>df</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.now\">\n<code>now() → DateTime</code> </dt> <dd>\n<p>Returns a <code>DateTime</code> corresponding to the user’s system time including the system timezone locale.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>now(::Type{UTC}) → DateTime</code> </dt> <dd>\n<p>Returns a <code>DateTime</code> corresponding to the user’s system time as UTC/GMT.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.eps\">\n<code>eps(::DateTime) → Millisecond</code> </dt> <dt>\n<code>eps(::Date) → Day</code> </dt> <dd>\n<p>Returns <code>Millisecond(1)</code> for <code>DateTime</code> values and <code>Day(1)</code> for <code>Date</code> values.</p> </dd>\n</dl>  <h3 id=\"accessor-functions\">Accessor Functions</h3> <dl class=\"function\"> <dt id=\"Dates.year\">\n<code>year(dt::TimeType) → Int64</code> </dt> <dd>\n<p>The year of a <code>Date</code> or <code>DateTime</code> as an <code>Int64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.month\">\n<code>month(dt::TimeType) → Int64</code> </dt> <dd>\n<p>The month of a <code>Date</code> or <code>DateTime</code> as an <code>Int64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.week\">\n<code>week(dt::TimeType) → Int64</code> </dt> <dd>\n<p>Return the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/ISO_week_date\">ISO week date</a> of a <code>Date</code> or <code>DateTime</code> as an <code>Int64</code>. Note that the first week of a year is the week that contains the first Thursday of the year which can result in dates prior to January 4th being in the last week of the previous year. For example <code>week(Date(2005,1,1))</code> is the 53rd week of 2004.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.day\">\n<code>day(dt::TimeType) → Int64</code> </dt> <dd>\n<p>The day of month of a <code>Date</code> or <code>DateTime</code> as an <code>Int64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.hour\">\n<code>hour(dt::DateTime) → Int64</code> </dt> <dd>\n<p>The hour of day of a <code>DateTime</code> as an <code>Int64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.minute\">\n<code>minute(dt::DateTime) → Int64</code> </dt> <dd>\n<p>The minute of a <code>DateTime</code> as an <code>Int64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.second\">\n<code>second(dt::DateTime) → Int64</code> </dt> <dd>\n<p>The second of a <code>DateTime</code> as an <code>Int64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.millisecond\">\n<code>millisecond(dt::DateTime) → Int64</code> </dt> <dd>\n<p>The millisecond of a <code>DateTime</code> as an <code>Int64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Year(dt::TimeType) → Year</code> </dt> <dd>\n<p>The year part of a <code>Date</code> or <code>DateTime</code> as a <code>Year</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Month(dt::TimeType) → Month</code> </dt> <dd>\n<p>The month part of a <code>Date</code> or <code>DateTime</code> as a <code>Month</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Week(dt::TimeType) → Week</code> </dt> <dd>\n<p>The week part of a <code>Date</code> or <code>DateTime</code> as a <code>Week</code>. For details see <code>`week(::TimeType)</code> &lt;<a class=\"reference internal\" href=\"#Dates.week\" title=\"Dates.week\"><code>week()</code></a>&gt;`_.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Day(dt::TimeType) → Day</code> </dt> <dd>\n<p>The day part of a <code>Date</code> or <code>DateTime</code> as a <code>Day</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Hour(dt::DateTime) → Hour</code> </dt> <dd>\n<p>The hour part of a <code>DateTime</code> as a <code>Hour</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Minute(dt::DateTime) → Minute</code> </dt> <dd>\n<p>The minute part of a <code>DateTime</code> as a <code>Minute</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Second(dt::DateTime) → Second</code> </dt> <dd>\n<p>The second part of a <code>DateTime</code> as a <code>Second</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>Millisecond(dt::DateTime) → Millisecond</code> </dt> <dd>\n<p>The millisecond part of a <code>DateTime</code> as a <code>Millisecond</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.yearmonth\">\n<code>yearmonth(dt::TimeType) -&gt; (Int64, Int64)</code> </dt> <dd>\n<p>Simultaneously return the year and month parts of a <code>Date</code> or <code>DateTime</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.monthday\">\n<code>monthday(dt::TimeType) -&gt; (Int64, Int64)</code> </dt> <dd>\n<p>Simultaneously return the month and day parts of a <code>Date</code> or <code>DateTime</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.yearmonthday\">\n<code>yearmonthday(dt::TimeType) -&gt; (Int64, Int64, Int64)</code> </dt> <dd>\n<p>Simultaneously return the year, month and day parts of a <code>Date</code> or <code>DateTime</code>.</p> </dd>\n</dl>   <h3 id=\"query-functions\">Query Functions</h3> <dl class=\"function\"> <dt id=\"Dates.dayname\">\n<code>dayname(dt::TimeType; locale=\"english\") → AbstractString</code> </dt> <dd>\n<p>Return the full day name corresponding to the day of the week of the <code>Date</code> or <code>DateTime</code> in the given <code>locale</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.dayabbr\">\n<code>dayabbr(dt::TimeType; locale=\"english\") → AbstractString</code> </dt> <dd>\n<p>Return the abbreviated name corresponding to the day of the week of the <code>Date</code> or <code>DateTime</code> in the given <code>locale</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.dayofweek\">\n<code>dayofweek(dt::TimeType) → Int64</code> </dt> <dd>\n<p>Returns the day of the week as an <code>Int64</code> with <code>1 = Monday, 2 = Tuesday, etc.</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.dayofmonth\">\n<code>dayofmonth(dt::TimeType) → Int64</code> </dt> <dd>\n<p>The day of month of a <code>Date</code> or <code>DateTime</code> as an <code>Int64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.dayofweekofmonth\">\n<code>dayofweekofmonth(dt::TimeType) → Int</code> </dt> <dd>\n<p>For the day of week of <code>dt</code>, returns which number it is in <code>dt</code>‘s month. So if the day of the week of <code>dt</code> is Monday, then <code>1 = First Monday of the month, 2 = Second Monday of the month, etc.</code> In the range 1:5.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.daysofweekinmonth\">\n<code>daysofweekinmonth(dt::TimeType) → Int</code> </dt> <dd>\n<p>For the day of week of <code>dt</code>, returns the total number of that day of the week in <code>dt</code>‘s month. Returns 4 or 5. Useful in temporal expressions for specifying the last day of a week in a month by including <code>dayofweekofmonth(dt) == daysofweekinmonth(dt)</code> in the adjuster function.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.monthname\">\n<code>monthname(dt::TimeType; locale=\"english\") → AbstractString</code> </dt> <dd>\n<p>Return the full name of the month of the <code>Date</code> or <code>DateTime</code> in the given <code>locale</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.monthabbr\">\n<code>monthabbr(dt::TimeType; locale=\"english\") → AbstractString</code> </dt> <dd>\n<p>Return the abbreviated month name of the <code>Date</code> or <code>DateTime</code> in the given <code>locale</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.daysinmonth\">\n<code>daysinmonth(dt::TimeType) → Int</code> </dt> <dd>\n<p>Returns the number of days in the month of <code>dt</code>. Value will be 28, 29, 30, or 31.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.isleapyear\">\n<code>isleapyear(dt::TimeType) → Bool</code> </dt> <dd>\n<p>Returns <code>true</code> if the year of <code>dt</code> is a leap year.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.dayofyear\">\n<code>dayofyear(dt::TimeType) → Int</code> </dt> <dd>\n<p>Returns the day of the year for <code>dt</code> with January 1st being day 1.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.daysinyear\">\n<code>daysinyear(dt::TimeType) → Int</code> </dt> <dd>\n<p>Returns 366 if the year of <code>dt</code> is a leap year, otherwise returns 365.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.quarterofyear\">\n<code>quarterofyear(dt::TimeType) → Int</code> </dt> <dd>\n<p>Returns the quarter that <code>dt</code> resides in. Range of value is 1:4.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.dayofquarter\">\n<code>dayofquarter(dt::TimeType) → Int</code> </dt> <dd>\n<p>Returns the day of the current quarter of <code>dt</code>. Range of value is 1:92.</p> </dd>\n</dl>   <h3 id=\"adjuster-functions\">Adjuster Functions</h3> <dl class=\"function\"> <dt id=\"Dates.trunc\">\n<code>trunc(dt::TimeType, ::Type{Period}) → TimeType</code> </dt> <dd>\n<p>Truncates the value of <code>dt</code> according to the provided <code>Period</code> type. E.g. if <code>dt</code> is <code>1996-01-01T12:30:00</code>, then <code>trunc(dt,Day) == 1996-01-01T00:00:00</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.firstdayofweek\">\n<code>firstdayofweek(dt::TimeType) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> to the Monday of its week.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.lastdayofweek\">\n<code>lastdayofweek(dt::TimeType) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> to the Sunday of its week.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.firstdayofmonth\">\n<code>firstdayofmonth(dt::TimeType) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> to the first day of its month.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.lastdayofmonth\">\n<code>lastdayofmonth(dt::TimeType) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> to the last day of its month.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.firstdayofyear\">\n<code>firstdayofyear(dt::TimeType) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> to the first day of its year.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.lastdayofyear\">\n<code>lastdayofyear(dt::TimeType) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> to the last day of its year.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.firstdayofquarter\">\n<code>firstdayofquarter(dt::TimeType) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> to the first day of its quarter.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.lastdayofquarter\">\n<code>lastdayofquarter(dt::TimeType) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> to the last day of its quarter.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.tonext\">\n<code>tonext(dt::TimeType, dow::Int;same::Bool=false) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> to the next day of week corresponding to <code>dow</code> with <code>1 = Monday, 2 = Tuesday, etc</code>. Setting <code>same=true</code> allows the current <code>dt</code> to be considered as the next <code>dow</code>, allowing for no adjustment to occur.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.toprev\">\n<code>toprev(dt::TimeType, dow::Int;same::Bool=false) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> to the previous day of week corresponding to <code>dow</code> with <code>1 = Monday, 2 = Tuesday, etc</code>. Setting <code>same=true</code> allows the current <code>dt</code> to be considered as the previous <code>dow</code>, allowing for no adjustment to occur.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.tofirst\">\n<code>tofirst(dt::TimeType, dow::Int;of=Month) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> to the first <code>dow</code> of its month. Alternatively, <code>of=Year</code> will adjust to the first <code>dow</code> of the year.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.tolast\">\n<code>tolast(dt::TimeType, dow::Int;of=Month) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> to the last <code>dow</code> of its month. Alternatively, <code>of=Year</code> will adjust to the last <code>dow</code> of the year.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>tonext(func::Function, dt::TimeType;step=Day(1), negate=false, limit=10000, same=false) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> by iterating at most <code>limit</code> iterations by <code>step</code> increments until <code>func</code> returns <code>true</code>. <code>func</code> must take a single <code>TimeType</code> argument and return a <code>Bool</code>. <code>same</code> allows <code>dt</code> to be considered in satisfying <code>func</code>. <code>negate</code> will make the adjustment process terminate when <code>func</code> returns <code>false</code> instead of <code>true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>toprev(func::Function, dt::TimeType;step=Day(-1), negate=false, limit=10000, same=false) → TimeType</code> </dt> <dd>\n<p>Adjusts <code>dt</code> by iterating at most <code>limit</code> iterations by <code>step</code> increments until <code>func</code> returns <code>true</code>. <code>func</code> must take a single <code>TimeType</code> argument and return a <code>Bool</code>. <code>same</code> allows <code>dt</code> to be considered in satisfying <code>func</code>. <code>negate</code> will make the adjustment process terminate when <code>func</code> returns <code>false</code> instead of <code>true</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.recur{T&lt;:TimeType}\"><code>recur{T<:timetype dr::steprange limit=\"10000)\" vector> </:timetype></code></dt> <dd>\n<p><code>func</code> takes a single TimeType argument and returns a <code>Bool</code> indicating whether the input should be “included” in the final set. <code>recur</code> applies <code>func</code> over each element in the range of <code>dr</code>, including those elements for which <code>func</code> returns <code>true</code> in the resulting Array, unless <code>negate=true</code>, then only elements where <code>func</code> returns <code>false</code> are included.</p> </dd>\n</dl>   <h3 id=\"periods\">Periods</h3> <dl class=\"data\"> <dt>\n<code>Year(v)</code> </dt> <dt>\n<code>Month(v)</code> </dt> <dt>\n<code>Week(v)</code> </dt> <dt>\n<code>Day(v)</code> </dt> <dt>\n<code>Hour(v)</code> </dt> <dt>\n<code>Minute(v)</code> </dt> <dt>\n<code>Second(v)</code> </dt> <dt>\n<code>Millisecond(v)</code> </dt> <dd>\n<p>Construct a <code>Period</code> type with the given <code>v</code> value. Input must be losslessly convertible to an <code>Int64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.default\">\n<code>default(p::Period) → Period</code> </dt> <dd>\n<p>Returns a sensible “default” value for the input Period by returning <code>one(p)</code> for Year, Month, and Day, and <code>zero(p)</code> for Hour, Minute, Second, and Millisecond.</p> </dd>\n</dl>   <h3 id=\"conversion-functions\">Conversion Functions</h3> <dl class=\"function\"> <dt id=\"Dates.today\">\n<code>today() → Date</code> </dt> <dd>\n<p>Returns the date portion of <code>now()</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.unix2datetime\">\n<code>unix2datetime(x) → DateTime</code> </dt> <dd>\n<p>Takes the number of seconds since unix epoch <code>1970-01-01T00:00:00</code> and converts to the corresponding <code>DateTime</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.datetime2unix\">\n<code>datetime2unix(dt::DateTime) → Float64</code> </dt> <dd>\n<p>Takes the given <code>DateTime</code> and returns the number of seconds since the unix epoch as a <code>Float64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.julian2datetime\">\n<code>julian2datetime(julian_days) → DateTime</code> </dt> <dd>\n<p>Takes the number of Julian calendar days since epoch <code>-4713-11-24T12:00:00</code> and returns the corresponding <code>DateTime</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.datetime2julian\">\n<code>datetime2julian(dt::DateTime) → Float64</code> </dt> <dd>\n<p>Takes the given <code>DateTime</code> and returns the number of Julian calendar days since the julian epoch as a <code>Float64</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.rata2datetime\">\n<code>rata2datetime(days) → DateTime</code> </dt> <dd>\n<p>Takes the number of Rata Die days since epoch <code>0000-12-31T00:00:00</code> and returns the corresponding <code>DateTime</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Dates.datetime2rata\">\n<code>datetime2rata(dt::TimeType) → Int64</code> </dt> <dd>\n<p>Returns the number of Rata Die days since epoch from the given <code>Date</code> or <code>DateTime</code>.</p> </dd>\n</dl>   <h3 id=\"constants\">Constants</h3> <p>Days of the Week:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Variable</th> <th class=\"head\">Abbr.</th> <th class=\"head\">Value (Int)</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>Monday</code></td> <td><code>Mon</code></td> <td>1</td> </tr> <tr class=\"row-odd\">\n<td><code>Tuesday</code></td> <td><code>Tue</code></td> <td>2</td> </tr> <tr class=\"row-even\">\n<td><code>Wednesday</code></td> <td><code>Wed</code></td> <td>3</td> </tr> <tr class=\"row-odd\">\n<td><code>Thursday</code></td> <td><code>Thu</code></td> <td>4</td> </tr> <tr class=\"row-even\">\n<td><code>Friday</code></td> <td><code>Fri</code></td> <td>5</td> </tr> <tr class=\"row-odd\">\n<td><code>Saturday</code></td> <td><code>Sat</code></td> <td>6</td> </tr> <tr class=\"row-even\">\n<td><code>Sunday</code></td> <td><code>Sun</code></td> <td>7</td> </tr>  </table> <p>Months of the Year:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Variable</th> <th class=\"head\">Abbr.</th> <th class=\"head\">Value (Int)</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>January</code></td> <td><code>Jan</code></td> <td>1</td> </tr> <tr class=\"row-odd\">\n<td><code>February</code></td> <td><code>Feb</code></td> <td>2</td> </tr> <tr class=\"row-even\">\n<td><code>March</code></td> <td><code>Mar</code></td> <td>3</td> </tr> <tr class=\"row-odd\">\n<td><code>April</code></td> <td><code>Apr</code></td> <td>4</td> </tr> <tr class=\"row-even\">\n<td><code>May</code></td> <td><code>May</code></td> <td>5</td> </tr> <tr class=\"row-odd\">\n<td><code>June</code></td> <td><code>Jun</code></td> <td>6</td> </tr> <tr class=\"row-even\">\n<td><code>July</code></td> <td><code>Jul</code></td> <td>7</td> </tr> <tr class=\"row-odd\">\n<td><code>August</code></td> <td><code>Aug</code></td> <td>8</td> </tr> <tr class=\"row-even\">\n<td><code>September</code></td> <td><code>Sep</code></td> <td>9</td> </tr> <tr class=\"row-odd\">\n<td><code>October</code></td> <td><code>Oct</code></td> <td>10</td> </tr> <tr class=\"row-even\">\n<td><code>November</code></td> <td><code>Nov</code></td> <td>11</td> </tr> <tr class=\"row-odd\">\n<td><code>December</code></td> <td><code>Dec</code></td> <td>12</td> </tr>  </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/dates/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/dates/</a>\n  </p>\n</div>\n","stdlib/math/index":"<h1>Mathematics</h1>  <h2 id=\"id1\">Mathematical Operators</h2> <dl class=\"function\" id=\"mathematical-operators\"> <dt id=\"Base.-\">\n<code>-(x)</code> </dt> <dd>\n<p>Unary minus operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id2\"> <dt id=\"Base.+\">\n<code>+(x, y...)</code> </dt> <dd>\n<p>Addition operator. <code>x+y+z+...</code> calls this function with all arguments, i.e. <code>+(x, y, z, ...)</code>.</p> </dd>\n</dl> <dl class=\"function\" id=\"id3\"> <dt>\n<code>-(x, y)</code> </dt> <dd>\n<p>Subtraction operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id4\"> <dt id=\"Base.*\">\n<code>*(x, y...)</code> </dt> <dd>\n<p>Multiplication operator. <code>x*y*z*...</code> calls this function with all arguments, i.e. <code>*(x, y, z, ...)</code>.</p> </dd>\n</dl> <dl class=\"function\" id=\"id5\"> <dt id=\"Base./\">\n<code>/(x, y)</code> </dt> <dd>\n<p>Right division operator: multiplication of <code>x</code> by the inverse of <code>y</code> on the right. Gives floating-point results for integer arguments.</p> </dd>\n</dl> <dl class=\"function\" id=\"id6\"> <dt id=\"Base.\\\">\n<code>\\(x, y)</code> </dt> <dd>\n<p>Left division operator: multiplication of <code>y</code> by the inverse of <code>x</code> on the left. Gives floating-point results for integer arguments.</p> </dd>\n</dl> <dl class=\"function\" id=\"id7\"> <dt id=\"Base.^\">\n<code>^(x, y)</code> </dt> <dd>\n<p>Exponentiation operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id8\"> <dt id=\"Base..+\">\n<code>.+(x, y)</code> </dt> <dd>\n<p>Element-wise addition operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id9\"> <dt id=\"Base..-\">\n<code>.-(x, y)</code> </dt> <dd>\n<p>Element-wise subtraction operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id10\"> <dt id=\"Base..*\">\n<code>.*(x, y)</code> </dt> <dd>\n<p>Element-wise multiplication operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id11\"> <dt id=\"Base../\">\n<code>./(x, y)</code> </dt> <dd>\n<p>Element-wise right division operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id12\"> <dt id=\"Base..\\\">\n<code>.\\(x, y)</code> </dt> <dd>\n<p>Element-wise left division operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id13\"> <dt id=\"Base..^\">\n<code>.^(x, y)</code> </dt> <dd>\n<p>Element-wise exponentiation operator.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fma\">\n<code>fma(x, y, z)</code> </dt> <dd>\n<p>Computes <code>x*y+z</code> without rounding the intermediate result <code>x*y</code>. On some systems this is significantly more expensive than <code>x*y+z</code>. <code>fma</code> is used to improve accuracy in certain algorithms. See <code>muladd</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.muladd\">\n<code>muladd(x, y, z)</code> </dt> <dd>\n<p>Combined multiply-add, computes <code>x*y+z</code> in an efficient manner. This may on some systems be equivalent to <code>x*y+z</code>, or to <code>fma(x,y,z)</code>. <code>muladd</code> is used to improve performance. See <code>fma</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.div\">\n<code>div(x, y)</code> </dt> <dt id=\"Base.÷\">\n<code>÷(x, y)</code> </dt> <dd>\n<p>The quotient from Euclidean division. Computes <code>x/y</code>, truncated to an integer.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fld\">\n<code>fld(x, y)</code> </dt> <dd>\n<p>Largest integer less than or equal to <code>x/y</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cld\">\n<code>cld(x, y)</code> </dt> <dd>\n<p>Smallest integer larger than or equal to <code>x/y</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mod\">\n<code>mod(x, y)</code> </dt> <dd>\n<p>Modulus after division, returning in the range [0,``y``), if <code>y</code> is positive, or (<code>y</code>,0] if <code>y</code> is negative.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mod2pi\">\n<code>mod2pi(x)</code> </dt> <dd>\n<p>Modulus after division by 2pi, returning in the range [0,2pi).</p> <p>This function computes a floating point representation of the modulus after division by numerically exact 2pi, and is therefore not exactly the same as mod(x,2pi), which would compute the modulus of <code>x</code> relative to division by the floating-point number 2pi.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rem\">\n<code>rem(x, y)</code> </dt> <dt id=\"Base.%\">\n<code>%(x, y)</code> </dt> <dd>\n<p>Remainder from Euclidean division, returning a value of the same sign as <code>x</code>, and smaller in magnitude than <code>y</code>. This value is always exact.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.divrem\">\n<code>divrem(x, y)</code> </dt> <dd>\n<p>The quotient and remainder from Euclidean division. Equivalent to <code>(x÷y, x%y)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fldmod\">\n<code>fldmod(x, y)</code> </dt> <dd>\n<p>The floored quotient and modulus after division. Equivalent to <code>(fld(x,y), mod(x,y))</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mod1\">\n<code>mod1(x, m)</code> </dt> <dd>\n<p>Modulus after division, returning in the range (0,m]</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rem1\">\n<code>rem1(x, m)</code> </dt> <dd>\n<p>Remainder after division, returning in the range (0,m]</p> </dd>\n</dl> <dl class=\"function\" id=\"id14\"> <dt id=\"Base.//\">\n<code>//(num, den)</code> </dt> <dd>\n<p>Divide two integers or rational numbers, giving a <code>Rational</code> result.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rationalize\">\n<code>rationalize([Type=Int, ]x; tol=eps(x))</code> </dt> <dd>\n<p>Approximate floating point number <code>x</code> as a Rational number with components of the given integer type. The result will differ from <code>x</code> by no more than <code>tol</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.num\">\n<code>num(x)</code> </dt> <dd>\n<p>Numerator of the rational representation of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.den\">\n<code>den(x)</code> </dt> <dd>\n<p>Denominator of the rational representation of <code>x</code></p> </dd>\n</dl> <dl class=\"function\" id=\"id15\"> <dt id=\"Base.&lt;&lt;\"><code>&lt; </code></dt> <dd>\n<p>Left bit shift operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id16\"> <dt id=\"Base.&gt;&gt;\">\n<code>&gt;&gt;(x, n)</code> </dt> <dd>\n<p>Right bit shift operator, preserving the sign of <code>x</code>.</p> </dd>\n</dl> <dl class=\"function\" id=\"id17\"> <dt id=\"Base.&gt;&gt;&gt;\">\n<code>&gt;&gt;&gt;(x, n)</code> </dt> <dd>\n<p>Unsigned right bit shift operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id18\"> <dt id=\"Base.:\">\n<code>:(start, [step, ]stop)</code> </dt> <dd>\n<p>Range operator. <code>a:b</code> constructs a range from <code>a</code> to <code>b</code> with a step size of 1, and <code>a:s:b</code> is similar but uses a step size of <code>s</code>. These syntaxes call the function <code>colon</code>. The colon is also used in indexing to select whole dimensions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.colon\">\n<code>colon(start, [step, ]stop)</code> </dt> <dd>\n<p>Called by <code>:</code> syntax for constructing ranges.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.range\">\n<code>range(start, [step, ]length)</code> </dt> <dd>\n<p>Construct a range by length, given a starting value and optional step (defaults to 1).</p> </dd>\n</dl> <dl class=\"function\" id=\"id19\"> <dt id=\"Base.==\">\n<code>==(x, y)</code> </dt> <dd>\n<p>Generic equality operator, giving a single <code>Bool</code> result. Falls back to <code>===</code>. Should be implemented for all types with a notion of equality, based on the abstract value that an instance represents. For example, all numeric types are compared by numeric value, ignoring type. Strings are compared as sequences of characters, ignoring encoding.</p> <p>Follows IEEE semantics for floating-point numbers.</p> <p>Collections should generally implement <code>==</code> by calling <code>==</code> recursively on all contents.</p> <p>New numeric types should implement this function for two arguments of the new type, and handle comparison to other types via promotion rules where possible.</p> </dd>\n</dl> <dl class=\"function\" id=\"id20\"> <dt id=\"Base.!=\">\n<code>!=(x, y)</code> </dt> <dt id=\"Base.≠\">\n<code>≠(x, y)</code> </dt> <dd>\n<p>Not-equals comparison operator. Always gives the opposite answer as <code>==</code>. New types should generally not implement this, and rely on the fallback definition <code>!=(x,y) = !(x==y)</code> instead.</p> </dd>\n</dl> <dl class=\"function\" id=\"id21\"> <dt id=\"Base.===\">\n<code>===(x, y)</code> </dt> <dt id=\"Base.≡\">\n<code>≡(x, y)</code> </dt> <dd>\n<p>See the <a class=\"reference internal\" href=\"../base/index#Base.is\" title=\"Base.is\"><code>is()</code></a> operator</p> </dd>\n</dl> <dl class=\"function\" id=\"id22\"> <dt id=\"Base.!==\">\n<code>!==(x, y)</code> </dt> <dt id=\"Base.≢\">\n<code>≢(x, y)</code> </dt> <dd>\n<p>Equivalent to <code>!is(x, y)</code></p> </dd>\n</dl> <dl class=\"function\" id=\"id23\">  <dd>\n<p>Less-than comparison operator. New numeric types should implement this function for two arguments of the new type. Because of the behavior of floating-point NaN values, <code>&lt;</code> implements a partial order. Types with a canonical partial order should implement <code>&lt;</code>, and types with a canonical total order should implement <code>isless</code>.</p> </dd>\n</dl> <dl class=\"function\" id=\"id24\"> <dt id=\"Base.&lt;=\">\n<code>&lt;=(x, y)</code> </dt> <dt id=\"Base.≤\">\n<code>≤(x, y)</code> </dt> <dd>\n<p>Less-than-or-equals comparison operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id25\"> <dt id=\"Base.&gt;\">\n<code>&gt;(x, y)</code> </dt> <dd>\n<p>Greater-than comparison operator. Generally, new types should implement <code>&lt;</code> instead of this function, and rely on the fallback definition <code>&gt;(x,y) = y&lt;x</code>.</p> </dd>\n</dl> <dl class=\"function\" id=\"id26\"> <dt id=\"Base.&gt;=\">\n<code>&gt;=(x, y)</code> </dt> <dt id=\"Base.≥\">\n<code>≥(x, y)</code> </dt> <dd>\n<p>Greater-than-or-equals comparison operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id27\"> <dt id=\"Base..==\">\n<code>.==(x, y)</code> </dt> <dd>\n<p>Element-wise equality comparison operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id28\"> <dt id=\"Base..!=\">\n<code>.!=(x, y)</code> </dt> <dt id=\"Base..≠\">\n<code>.≠(x, y)</code> </dt> <dd>\n<p>Element-wise not-equals comparison operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id29\"> <dt id=\"Base..&lt;\"><code>. </code></dt> <dd>\n<p>Element-wise less-than comparison operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id30\"> <dt id=\"Base..&lt;=\">\n<code>.&lt;=(x, y)</code> </dt> <dt id=\"Base..≤\">\n<code>.≤(x, y)</code> </dt> <dd>\n<p>Element-wise less-than-or-equals comparison operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id31\"> <dt id=\"Base..&gt;\">\n<code>.&gt;(x, y)</code> </dt> <dd>\n<p>Element-wise greater-than comparison operator.</p> </dd>\n</dl> <dl class=\"function\" id=\"id32\"> <dt id=\"Base..&gt;=\">\n<code>.&gt;=(x, y)</code> </dt> <dt id=\"Base..≥\">\n<code>.≥(x, y)</code> </dt> <dd>\n<p>Element-wise greater-than-or-equals comparison operator.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cmp\">\n<code>cmp(x, y)</code> </dt> <dd>\n<p>Return -1, 0, or 1 depending on whether <code>x</code> is less than, equal to, or greater than <code>y</code>, respectively. Uses the total order implemented by <code>isless</code>. For floating-point numbers, uses <code>&lt;</code> but throws an error for unordered arguments.</p> </dd>\n</dl> <dl class=\"function\" id=\"id33\"> <dt id=\"Base.~\">\n<code>~(x)</code> </dt> <dd>\n<p>Bitwise not</p> </dd>\n</dl> <dl class=\"function\" id=\"id34\"> <dt id=\"Base.&amp;\">\n<code>&amp;(x, y)</code> </dt> <dd>\n<p>Bitwise and</p> </dd>\n</dl> <dl class=\"function\" id=\"id35\"> <dt id=\"Base.|\">\n<code>|(x, y)</code> </dt> <dd>\n<p>Bitwise or</p> </dd>\n</dl> <dl class=\"function\" id=\"id36\"> <dt id=\"Base.$\">\n<code>$(x, y)</code> </dt> <dd>\n<p>Bitwise exclusive or</p> </dd>\n</dl> <dl class=\"function\" id=\"id37\"> <dt id=\"Base.!\">\n<code>!(x)</code> </dt> <dd>\n<p>Boolean not</p> </dd>\n</dl> <dl class=\"function\" id=\"id38\"> <dt>\n<code>x &amp;&amp; y</code> </dt> <dd>\n<p>Short-circuiting boolean AND</p> </dd>\n</dl> <dl class=\"function\" id=\"id39\"> <dt>\n<code>x || y</code> </dt> <dd>\n<p>Short-circuiting boolean OR</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.A_ldiv_Bc\">\n<code>A_ldiv_Bc(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(A\\)</span> \\ <span class=\"math\">\\(Bᴴ\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.A_ldiv_Bt\">\n<code>A_ldiv_Bt(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(A\\)</span> \\ <span class=\"math\">\\(Bᵀ\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.A_mul_B!\">\n<code>A_mul_B!(Y, A, B) → Y</code> </dt> <dd>\n<p>Calculates the matrix-matrix or matrix-vector product <span class=\"math\">\\(A⋅B\\)</span> and stores the result in <code>Y</code>, overwriting the existing value of <code>Y</code>. Note that <code>Y</code> must not be aliased with either <code>A</code> or <code>B</code>.</p> <pre data-language=\"julia\">julia&gt; A=[1.0 2.0; 3.0 4.0]; B=[1.0 1.0; 1.0 1.0]; Y = similar(B); A_mul_B!(Y, A, B);\n\njulia&gt; Y\n2x2 Array{Float64,2}:\n 3.0  3.0\n 7.0  7.0\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.A_mul_Bc\">\n<code>A_mul_Bc(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(A⋅Bᴴ\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.A_mul_Bt\">\n<code>A_mul_Bt(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(A⋅Bᵀ\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.A_rdiv_Bc\">\n<code>A_rdiv_Bc(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(A / Bᴴ\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.A_rdiv_Bt\">\n<code>A_rdiv_Bt(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(A / Bᵀ\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Ac_ldiv_B\">\n<code>Ac_ldiv_B(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(Aᴴ\\)</span> \\ <span class=\"math\">\\(B\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Ac_ldiv_Bc\">\n<code>Ac_ldiv_Bc(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(Aᴴ\\)</span> \\ <span class=\"math\">\\(Bᴴ\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Ac_mul_B\">\n<code>Ac_mul_B(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(Aᴴ⋅B\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Ac_mul_Bc\">\n<code>Ac_mul_Bc(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(Aᴴ Bᴴ\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Ac_rdiv_B\">\n<code>Ac_rdiv_B(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(Aᴴ / B\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Ac_rdiv_Bc\">\n<code>Ac_rdiv_Bc(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(Aᴴ / Bᴴ\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.At_ldiv_B\">\n<code>At_ldiv_B(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(Aᵀ\\)</span> \\ <span class=\"math\">\\(B\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.At_ldiv_Bt\">\n<code>At_ldiv_Bt(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(Aᵀ\\)</span> \\ <span class=\"math\">\\(Bᵀ\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.At_mul_B\">\n<code>At_mul_B(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(Aᵀ⋅B\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.At_mul_Bt\">\n<code>At_mul_Bt(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(Aᵀ⋅Bᵀ\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.At_rdiv_B\">\n<code>At_rdiv_B(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(Aᵀ / B\\)</span></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.At_rdiv_Bt\">\n<code>At_rdiv_Bt(A, B)</code> </dt> <dd>\n<p>For matrices or vectors <span class=\"math\">\\(A\\)</span> and <span class=\"math\">\\(B\\)</span>, calculates <span class=\"math\">\\(Aᵀ / Bᵀ\\)</span></p> </dd>\n</dl>   <h2 id=\"mathematical-functions\">Mathematical Functions</h2> <dl class=\"function\"> <dt id=\"Base.isapprox\">\n<code>isapprox(x, y; rtol::Real=sqrt(eps), atol::Real=0)</code> </dt> <dd>\n<p>Inexact equality comparison: <code>true</code> if <code>norm(x-y) &lt;= atol + rtol*max(norm(x), norm(y))</code>. The default <code>atol</code> is zero and the default <code>rtol</code> depends on the types of <code>x</code> and <code>y</code>.</p> <p>For real or complex floating-point values, <code>rtol</code> defaults to <code>sqrt(eps(typeof(real(x-y))))</code>. This corresponds to requiring equality of about half of the significand digits. For other types, <code>rtol</code> defaults to zero.</p> <p><code>x</code> and <code>y</code> may also be arrays of numbers, in which case <code>norm</code> defaults to <code>vecnorm</code> but may be changed by passing a <code>norm::Function</code> keyword argument. (For numbers, <code>norm</code> is the same thing as <code>abs</code>.)</p> <p>The binary operator <code>≈</code> is equivalent to <code>isapprox</code> with the default arguments, and <code>x ≉ y</code> is equivalent to <code>!isapprox(x,y)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sin\">\n<code>sin(x)</code> </dt> <dd>\n<p>Compute sine of <code>x</code>, where <code>x</code> is in radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cos\">\n<code>cos(x)</code> </dt> <dd>\n<p>Compute cosine of <code>x</code>, where <code>x</code> is in radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.tan\">\n<code>tan(x)</code> </dt> <dd>\n<p>Compute tangent of <code>x</code>, where <code>x</code> is in radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sind\">\n<code>sind(x)</code> </dt> <dd>\n<p>Compute sine of <code>x</code>, where <code>x</code> is in degrees.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cosd\">\n<code>cosd(x)</code> </dt> <dd>\n<p>Compute cosine of <code>x</code>, where <code>x</code> is in degrees</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.tand\">\n<code>tand(x)</code> </dt> <dd>\n<p>Compute tangent of <code>x</code>, where <code>x</code> is in degrees</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sinpi\">\n<code>sinpi(x)</code> </dt> <dd>\n<p>Compute <span class=\"math\">\\(\\sin(\\pi x)\\)</span> more accurately than <code>sin(pi*x)</code>, especially for large <code>x</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cospi\">\n<code>cospi(x)</code> </dt> <dd>\n<p>Compute <span class=\"math\">\\(\\cos(\\pi x)\\)</span> more accurately than <code>cos(pi*x)</code>, especially for large <code>x</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sinh\">\n<code>sinh(x)</code> </dt> <dd>\n<p>Compute hyperbolic sine of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cosh\">\n<code>cosh(x)</code> </dt> <dd>\n<p>Compute hyperbolic cosine of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.tanh\">\n<code>tanh(x)</code> </dt> <dd>\n<p>Compute hyperbolic tangent of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.asin\">\n<code>asin(x)</code> </dt> <dd>\n<p>Compute the inverse sine of <code>x</code>, where the output is in radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.acos\">\n<code>acos(x)</code> </dt> <dd>\n<p>Compute the inverse cosine of <code>x</code>, where the output is in radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.atan\">\n<code>atan(x)</code> </dt> <dd>\n<p>Compute the inverse tangent of <code>x</code>, where the output is in radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.atan2\">\n<code>atan2(y, x)</code> </dt> <dd>\n<p>Compute the inverse tangent of <code>y/x</code>, using the signs of both <code>x</code> and <code>y</code> to determine the quadrant of the return value.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.asind\">\n<code>asind(x)</code> </dt> <dd>\n<p>Compute the inverse sine of <code>x</code>, where the output is in degrees</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.acosd\">\n<code>acosd(x)</code> </dt> <dd>\n<p>Compute the inverse cosine of <code>x</code>, where the output is in degrees</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.atand\">\n<code>atand(x)</code> </dt> <dd>\n<p>Compute the inverse tangent of <code>x</code>, where the output is in degrees</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sec\">\n<code>sec(x)</code> </dt> <dd>\n<p>Compute the secant of <code>x</code>, where <code>x</code> is in radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.csc\">\n<code>csc(x)</code> </dt> <dd>\n<p>Compute the cosecant of <code>x</code>, where <code>x</code> is in radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cot\">\n<code>cot(x)</code> </dt> <dd>\n<p>Compute the cotangent of <code>x</code>, where <code>x</code> is in radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.secd\">\n<code>secd(x)</code> </dt> <dd>\n<p>Compute the secant of <code>x</code>, where <code>x</code> is in degrees</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cscd\">\n<code>cscd(x)</code> </dt> <dd>\n<p>Compute the cosecant of <code>x</code>, where <code>x</code> is in degrees</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cotd\">\n<code>cotd(x)</code> </dt> <dd>\n<p>Compute the cotangent of <code>x</code>, where <code>x</code> is in degrees</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.asec\">\n<code>asec(x)</code> </dt> <dd>\n<p>Compute the inverse secant of <code>x</code>, where the output is in radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.acsc\">\n<code>acsc(x)</code> </dt> <dd>\n<p>Compute the inverse cosecant of <code>x</code>, where the output is in radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.acot\">\n<code>acot(x)</code> </dt> <dd>\n<p>Compute the inverse cotangent of <code>x</code>, where the output is in radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.asecd\">\n<code>asecd(x)</code> </dt> <dd>\n<p>Compute the inverse secant of <code>x</code>, where the output is in degrees</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.acscd\">\n<code>acscd(x)</code> </dt> <dd>\n<p>Compute the inverse cosecant of <code>x</code>, where the output is in degrees</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.acotd\">\n<code>acotd(x)</code> </dt> <dd>\n<p>Compute the inverse cotangent of <code>x</code>, where the output is in degrees</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sech\">\n<code>sech(x)</code> </dt> <dd>\n<p>Compute the hyperbolic secant of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.csch\">\n<code>csch(x)</code> </dt> <dd>\n<p>Compute the hyperbolic cosecant of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.coth\">\n<code>coth(x)</code> </dt> <dd>\n<p>Compute the hyperbolic cotangent of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.asinh\">\n<code>asinh(x)</code> </dt> <dd>\n<p>Compute the inverse hyperbolic sine of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.acosh\">\n<code>acosh(x)</code> </dt> <dd>\n<p>Compute the inverse hyperbolic cosine of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.atanh\">\n<code>atanh(x)</code> </dt> <dd>\n<p>Compute the inverse hyperbolic tangent of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.asech\">\n<code>asech(x)</code> </dt> <dd>\n<p>Compute the inverse hyperbolic secant of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.acsch\">\n<code>acsch(x)</code> </dt> <dd>\n<p>Compute the inverse hyperbolic cosecant of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.acoth\">\n<code>acoth(x)</code> </dt> <dd>\n<p>Compute the inverse hyperbolic cotangent of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sinc\">\n<code>sinc(x)</code> </dt> <dd>\n<p>Compute <span class=\"math\">\\(\\sin(\\pi x) / (\\pi x)\\)</span> if <span class=\"math\">\\(x \\neq 0\\)</span>, and <span class=\"math\">\\(1\\)</span> if <span class=\"math\">\\(x = 0\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cosc\">\n<code>cosc(x)</code> </dt> <dd>\n<p>Compute <span class=\"math\">\\(\\cos(\\pi x) / x - \\sin(\\pi x) / (\\pi x^2)\\)</span> if <span class=\"math\">\\(x \\neq 0\\)</span>, and <span class=\"math\">\\(0\\)</span> if <span class=\"math\">\\(x = 0\\)</span>. This is the derivative of <code>sinc(x)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.deg2rad\">\n<code>deg2rad(x)</code> </dt> <dd>\n<p>Convert <code>x</code> from degrees to radians</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rad2deg\">\n<code>rad2deg(x)</code> </dt> <dd>\n<p>Convert <code>x</code> from radians to degrees</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hypot\">\n<code>hypot(x, y)</code> </dt> <dd>\n<p>Compute the <span class=\"math\">\\(\\sqrt{x^2+y^2}\\)</span> avoiding overflow and underflow</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.log\">\n<code>log(x)</code> </dt> <dd>\n<p>Compute the natural logarithm of <code>x</code>. Throws <code>DomainError</code> for negative <code>Real</code> arguments. Use complex negative arguments to obtain complex results.</p> <p>There is an experimental variant in the <code>Base.Math.JuliaLibm</code> module, which is typically faster and more accurate.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>log(b, x)</code> </dt> <dd>\n<p>Compute the base <code>b</code> logarithm of <code>x</code>. Throws <code>DomainError</code> for negative <code>Real</code> arguments.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.log2\">\n<code>log2(x)</code> </dt> <dd>\n<p>Compute the logarithm of <code>x</code> to base 2. Throws <code>DomainError</code> for negative <code>Real</code> arguments.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.log10\">\n<code>log10(x)</code> </dt> <dd>\n<p>Compute the logarithm of <code>x</code> to base 10. Throws <code>DomainError</code> for negative <code>Real</code> arguments.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.log1p\">\n<code>log1p(x)</code> </dt> <dd>\n<p>Accurate natural logarithm of <code>1+x</code>. Throws <code>DomainError</code> for <code>Real</code> arguments less than -1.</p> <p>There is an experimental variant in the <code>Base.Math.JuliaLibm</code> module, which is typically faster and more accurate.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.frexp\">\n<code>frexp(val)</code> </dt> <dd>\n<p>Return <code>(x,exp)</code> such that <code>x</code> has a magnitude in the interval <span class=\"math\">\\([1/2, 1)\\)</span> or 0, and val = <span class=\"math\">\\(x \\times 2^{exp}\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.exp\">\n<code>exp(x)</code> </dt> <dd>\n<p>Compute <span class=\"math\">\\(e^x\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.exp2\">\n<code>exp2(x)</code> </dt> <dd>\n<p>Compute <span class=\"math\">\\(2^x\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.exp10\">\n<code>exp10(x)</code> </dt> <dd>\n<p>Compute <span class=\"math\">\\(10^x\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ldexp\">\n<code>ldexp(x, n)</code> </dt> <dd>\n<p>Compute <span class=\"math\">\\(x \\times 2^n\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.modf\">\n<code>modf(x)</code> </dt> <dd>\n<p>Return a tuple (fpart,ipart) of the fractional and integral parts of a number. Both parts have the same sign as the argument.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.expm1\">\n<code>expm1(x)</code> </dt> <dd>\n<p>Accurately compute <span class=\"math\">\\(e^x-1\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.round\">\n<code>round([T, ]x[, digits[, base]][, r::RoundingMode])</code> </dt> <dd>\n<p><code>round(x)</code> rounds <code>x</code> to an integer value according to the default rounding mode (see <a class=\"reference internal\" href=\"../numbers/index#Base.get_rounding\" title=\"Base.get_rounding\"><code>get_rounding()</code></a>), returning a value of the same type as <code>x</code>. By default (<a class=\"reference internal\" href=\"#Base.RoundNearest\" title=\"Base.RoundNearest\"><code>RoundNearest</code></a>), this will round to the nearest integer, with ties (fractional values of 0.5) being rounded to the even integer.</p> <pre data-language=\"julia\">julia&gt; round(1.7)\n2.0\n\njulia&gt; round(1.5)\n2.0\n\njulia&gt; round(2.5)\n2.0\n</pre> <p>The optional <a class=\"reference internal\" href=\"#Base.RoundingMode\" title=\"Base.RoundingMode\"><code>RoundingMode</code></a> argument will change how the number gets rounded.</p> <p><code>round(T, x, [r::RoundingMode])</code> converts the result to type <code>T</code>, throwing an <a class=\"reference internal\" href=\"../base/index#Base.InexactError\" title=\"Base.InexactError\"><code>InexactError</code></a> if the value is not representable.</p> <p><code>round(x, digits)</code> rounds to the specified number of digits after the decimal place (or before if negative). <code>round(x, digits, base)</code> rounds using a base other than 10.</p> <pre data-language=\"julia\">julia&gt; round(pi, 2)\n3.14\n\njulia&gt; round(pi, 3, 2)\n3.125\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>Rounding to specified digits in bases other than 2 can be inexact when operating on binary floating point numbers. For example, the <code>Float64</code> value represented by <code>1.15</code> is actually <em>less</em> than 1.15, yet will be rounded to 1.2.</p> <pre data-language=\"julia\">julia&gt; x = 1.15\n1.15\n\njulia&gt; @sprintf \"%.20f\" x\n\"1.14999999999999991118\"\n\njulia&gt; x &lt; 115//100\ntrue\n\njulia&gt; round(x, 1)\n1.2\n</pre> </div> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.RoundingMode\">\n<code>RoundingMode</code> </dt> <dd>\n<p>A type which controls rounding behavior. Currently supported rounding modes are:</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#Base.RoundNearest\" title=\"Base.RoundNearest\"><code>RoundNearest</code></a> (default)</li> <li><a class=\"reference internal\" href=\"#Base.RoundNearestTiesAway\" title=\"Base.RoundNearestTiesAway\"><code>RoundNearestTiesAway</code></a></li> <li><a class=\"reference internal\" href=\"#Base.RoundNearestTiesUp\" title=\"Base.RoundNearestTiesUp\"><code>RoundNearestTiesUp</code></a></li> <li><a class=\"reference internal\" href=\"#Base.RoundToZero\" title=\"Base.RoundToZero\"><code>RoundToZero</code></a></li> <li><a class=\"reference internal\" href=\"#Base.RoundUp\" title=\"Base.RoundUp\"><code>RoundUp</code></a></li> <li><a class=\"reference internal\" href=\"#Base.RoundDown\" title=\"Base.RoundDown\"><code>RoundDown</code></a></li> </ul> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.RoundNearest\">\n<code>RoundNearest</code> </dt> <dd>\n<p>The default rounding mode. Rounds to the nearest integer, with ties (fractional values of 0.5) being rounded to the nearest even integer.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.RoundNearestTiesAway\">\n<code>RoundNearestTiesAway</code> </dt> <dd>\n<p>Rounds to nearest integer, with ties rounded away from zero (C/C++ <a class=\"reference internal\" href=\"#Base.round\" title=\"Base.round\"><code>round()</code></a> behaviour).</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.RoundNearestTiesUp\">\n<code>RoundNearestTiesUp</code> </dt> <dd>\n<p>Rounds to nearest integer, with ties rounded toward positive infinity (Java/JavaScript <a class=\"reference internal\" href=\"#Base.round\" title=\"Base.round\"><code>round()</code></a> behaviour).</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.RoundToZero\">\n<code>RoundToZero</code> </dt> <dd>\n<p><a class=\"reference internal\" href=\"#Base.round\" title=\"Base.round\"><code>round()</code></a> using this rounding mode is an alias for <a class=\"reference internal\" href=\"#Base.trunc\" title=\"Base.trunc\"><code>trunc()</code></a>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.RoundUp\">\n<code>RoundUp</code> </dt> <dd>\n<p><a class=\"reference internal\" href=\"#Base.round\" title=\"Base.round\"><code>round()</code></a> using this rounding mode is an alias for <a class=\"reference internal\" href=\"#Base.ceil\" title=\"Base.ceil\"><code>ceil()</code></a>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.RoundDown\">\n<code>RoundDown</code> </dt> <dd>\n<p><a class=\"reference internal\" href=\"#Base.round\" title=\"Base.round\"><code>round()</code></a> using this rounding mode is an alias for <a class=\"reference internal\" href=\"#Base.floor\" title=\"Base.floor\"><code>floor()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>round(z, RoundingModeReal, RoundingModeImaginary)</code> </dt> <dd>\n<p>Returns the nearest integral value of the same type as the complex-valued <code>z</code> to <code>z</code>, breaking ties using the specified <a class=\"reference internal\" href=\"#Base.RoundingMode\" title=\"Base.RoundingMode\"><code>RoundingMode</code></a>s. The first <a class=\"reference internal\" href=\"#Base.RoundingMode\" title=\"Base.RoundingMode\"><code>RoundingMode</code></a> is used for rounding the real components while the second is used for rounding the imaginary components.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ceil\">\n<code>ceil([T, ]x[, digits[, base]])</code> </dt> <dd>\n<p><code>ceil(x)</code> returns the nearest integral value of the same type as <code>x</code> that is greater than or equal to <code>x</code>.</p> <p><code>ceil(T, x)</code> converts the result to type <code>T</code>, throwing an <code>InexactError</code> if the value is not representable.</p> <p><code>digits</code> and <code>base</code> work as for <a class=\"reference internal\" href=\"#Base.round\" title=\"Base.round\"><code>round()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.floor\">\n<code>floor([T, ]x[, digits[, base]])</code> </dt> <dd>\n<p><code>floor(x)</code> returns the nearest integral value of the same type as <code>x</code> that is less than or equal to <code>x</code>.</p> <p><code>floor(T, x)</code> converts the result to type <code>T</code>, throwing an <code>InexactError</code> if the value is not representable.</p> <p><code>digits</code> and <code>base</code> work as for <a class=\"reference internal\" href=\"#Base.round\" title=\"Base.round\"><code>round()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.trunc\">\n<code>trunc([T, ]x[, digits[, base]])</code> </dt> <dd>\n<p><code>trunc(x)</code> returns the nearest integral value of the same type as <code>x</code> whose absolute value is less than or equal to <code>x</code>.</p> <p><code>trunc(T, x)</code> converts the result to type <code>T</code>, throwing an <code>InexactError</code> if the value is not representable.</p> <p><code>digits</code> and <code>base</code> work as for <a class=\"reference internal\" href=\"#Base.round\" title=\"Base.round\"><code>round()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.unsafe_trunc\">\n<code>unsafe_trunc(T, x)</code> </dt> <dd>\n<p><code>unsafe_trunc(T, x)</code> returns the nearest integral value of type <code>T</code> whose absolute value is less than or equal to <code>x</code>. If the value is not representable by <code>T</code>, an arbitrary value will be returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.signif\">\n<code>signif(x, digits[, base])</code> </dt> <dd>\n<p>Rounds (in the sense of <code>round</code>) <code>x</code> so that there are <code>digits</code> significant digits, under a base <code>base</code> representation, default 10. E.g., <code>signif(123.456, 2)</code> is <code>120.0</code>, and <code>signif(357.913, 4, 2)</code> is <code>352.0</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.min\">\n<code>min(x, y, ...)</code> </dt> <dd>\n<p>Return the minimum of the arguments. Operates elementwise over arrays.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.max\">\n<code>max(x, y, ...)</code> </dt> <dd>\n<p>Return the maximum of the arguments. Operates elementwise over arrays.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.minmax\">\n<code>minmax(x, y)</code> </dt> <dd>\n<p>Return <code>(min(x,y), max(x,y))</code>. See also: <a class=\"reference internal\" href=\"../collections/index#Base.extrema\" title=\"Base.extrema\"><code>extrema()</code></a> that returns <code>(minimum(x), maximum(x))</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.clamp\">\n<code>clamp(x, lo, hi)</code> </dt> <dd>\n<p>Return <code>x</code> if <code>lo &lt;= x &lt;= hi</code>. If <code>x &lt; lo</code>, return <code>lo</code>. If <code>x &gt; hi</code>, return <code>hi</code>. Arguments are promoted to a common type. Operates elementwise over <code>x</code> if it is an array.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.abs\">\n<code>abs(x)</code> </dt> <dd>\n<p>Absolute value of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.abs2\">\n<code>abs2(x)</code> </dt> <dd>\n<p>Squared absolute value of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.copysign\">\n<code>copysign(x, y)</code> </dt> <dd>\n<p>Return <code>x</code> such that it has the same sign as <code>y</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sign\">\n<code>sign(x)</code> </dt> <dd>\n<p>Return zero if <code>x==0</code> and <span class=\"math\">\\(x/|x|\\)</span> otherwise (i.e., ±1 for real <code>x</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.signbit\">\n<code>signbit(x)</code> </dt> <dd>\n<p>Returns <code>true</code> if the value of the sign of <code>x</code> is negative, otherwise <code>false</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.flipsign\">\n<code>flipsign(x, y)</code> </dt> <dd>\n<p>Return <code>x</code> with its sign flipped if <code>y</code> is negative. For example <code>abs(x) = flipsign(x,x)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sqrt\">\n<code>sqrt(x)</code> </dt> <dd>\n<p>Return <span class=\"math\">\\(\\sqrt{x}\\)</span>. Throws <code>DomainError</code> for negative <code>Real</code> arguments. Use complex negative arguments instead. The prefix operator <code>√</code> is equivalent to <code>sqrt</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isqrt\">\n<code>isqrt(n)</code> </dt> <dd>\n<p>Integer square root: the largest integer <code>m</code> such that <code>m*m &lt;= n</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cbrt\">\n<code>cbrt(x)</code> </dt> <dd>\n<p>Return <span class=\"math\">\\(x^{1/3}\\)</span>. The prefix operator <code>∛</code> is equivalent to <code>cbrt</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.erf\">\n<code>erf(x)</code> </dt> <dd>\n<p>Compute the error function of <code>x</code>, defined by <span class=\"math\">\\(\\frac{2}{\\sqrt{\\pi}} \\int_0^x e^{-t^2} dt\\)</span> for arbitrary complex <code>x</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.erfc\">\n<code>erfc(x)</code> </dt> <dd>\n<p>Compute the complementary error function of <code>x</code>, defined by <span class=\"math\">\\(1 - \\operatorname{erf}(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.erfcx\">\n<code>erfcx(x)</code> </dt> <dd>\n<p>Compute the scaled complementary error function of <code>x</code>, defined by <span class=\"math\">\\(e^{x^2} \\operatorname{erfc}(x)\\)</span>. Note also that <span class=\"math\">\\(\\operatorname{erfcx}(-ix)\\)</span> computes the Faddeeva function <span class=\"math\">\\(w(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.erfi\">\n<code>erfi(x)</code> </dt> <dd>\n<p>Compute the imaginary error function of <code>x</code>, defined by <span class=\"math\">\\(-i \\operatorname{erf}(ix)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.dawson\">\n<code>dawson(x)</code> </dt> <dd>\n<p>Compute the Dawson function (scaled imaginary error function) of <code>x</code>, defined by <span class=\"math\">\\(\\frac{\\sqrt{\\pi}}{2} e^{-x^2} \\operatorname{erfi}(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.erfinv\">\n<code>erfinv(x)</code> </dt> <dd>\n<p>Compute the inverse error function of a real <code>x</code>, defined by <span class=\"math\">\\(\\operatorname{erf}(\\operatorname{erfinv}(x)) = x\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.erfcinv\">\n<code>erfcinv(x)</code> </dt> <dd>\n<p>Compute the inverse error complementary function of a real <code>x</code>, defined by <span class=\"math\">\\(\\operatorname{erfc}(\\operatorname{erfcinv}(x)) = x\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.real\">\n<code>real(z)</code> </dt> <dd>\n<p>Return the real part of the complex number <code>z</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.imag\">\n<code>imag(z)</code> </dt> <dd>\n<p>Return the imaginary part of the complex number <code>z</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.reim\">\n<code>reim(z)</code> </dt> <dd>\n<p>Return both the real and imaginary parts of the complex number <code>z</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.conj\">\n<code>conj(z)</code> </dt> <dd>\n<p>Compute the complex conjugate of a complex number <code>z</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.angle\">\n<code>angle(z)</code> </dt> <dd>\n<p>Compute the phase angle in radians of a complex number <code>z</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cis\">\n<code>cis(z)</code> </dt> <dd>\n<p>Return <span class=\"math\">\\(\\exp(iz)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.binomial\">\n<code>binomial(n, k)</code> </dt> <dd>\n<p>Number of ways to choose <code>k</code> out of <code>n</code> items</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.factorial\">\n<code>factorial(n)</code> </dt> <dd>\n<p>Factorial of <code>n</code>. If <code>n</code> is an <code>Integer</code>, the factorial is computed as an integer (promoted to at least 64 bits). Note that this may overflow if <code>n</code> is not small, but you can use <code>factorial(big(n))</code> to compute the result exactly in arbitrary precision. If <code>n</code> is not an <code>Integer</code>, <code>factorial(n)</code> is equivalent to <a class=\"reference internal\" href=\"#Base.gamma\" title=\"Base.gamma\"><code>gamma(n+1)</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>factorial(n, k)</code> </dt> <dd>\n<p>Compute <code>factorial(n)/factorial(k)</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.factor\">\n<code>factor(n) → Dict</code> </dt> <dd>\n<p>Compute the prime factorization of an integer <code>n</code>. Returns a dictionary. The keys of the dictionary correspond to the factors, and hence are of the same type as <code>n</code>. The value associated with each key indicates the number of times the factor appears in the factorization.</p> <pre data-language=\"julia\">julia&gt; factor(100) # == 2*2*5*5\nDict{Int64,Int64} with 2 entries:\n  2 =&gt; 2\n  5 =&gt; 2\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.gcd\">\n<code>gcd(x, y)</code> </dt> <dd>\n<p>Greatest common (positive) divisor (or zero if <code>x</code> and <code>y</code> are both zero).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lcm\">\n<code>lcm(x, y)</code> </dt> <dd>\n<p>Least common (non-negative) multiple.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.gcdx\">\n<code>gcdx(x, y)</code> </dt> <dd>\n<p>Computes the greatest common (positive) divisor of <code>x</code> and <code>y</code> and their Bézout coefficients, i.e. the integer coefficients <code>u</code> and <code>v</code> that satisfy <span class=\"math\">\\(ux+vy = d = gcd(x,y)\\)</span>.</p> <pre data-language=\"julia\">julia&gt; gcdx(12, 42)\n(6,-3,1)\n</pre> <pre data-language=\"julia\">julia&gt; gcdx(240, 46)\n(2,-9,47)\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Bézout coefficients are <em>not</em> uniquely defined. <code>gcdx</code> returns the minimal Bézout coefficients that are computed by the extended Euclid algorithm. (Ref: D. Knuth, TAoCP, 2/e, p. 325, Algorithm X.) These coefficients <code>u</code> and <code>v</code> are minimal in the sense that <span class=\"math\">\\(|u| &lt; |\\frac y d\\)</span> and <span class=\"math\">\\(|v| &lt; |\\frac x d\\)</span>. Furthermore, the signs of <code>u</code> and <code>v</code> are chosen so that <code>d</code> is positive.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ispow2\">\n<code>ispow2(n) → Bool</code> </dt> <dd>\n<p>Test whether <code>n</code> is a power of two</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nextpow2\">\n<code>nextpow2(n)</code> </dt> <dd>\n<p>The smallest power of two not less than <code>n</code>. Returns 0 for <code>n==0</code>, and returns <code>-nextpow2(-n)</code> for negative arguments.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.prevpow2\">\n<code>prevpow2(n)</code> </dt> <dd>\n<p>The largest power of two not greater than <code>n</code>. Returns 0 for <code>n==0</code>, and returns <code>-prevpow2(-n)</code> for negative arguments.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nextpow\">\n<code>nextpow(a, x)</code> </dt> <dd>\n<p>The smallest <code>a^n</code> not less than <code>x</code>, where <code>n</code> is a non-negative integer. <code>a</code> must be greater than 1, and <code>x</code> must be greater than 0.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.prevpow\">\n<code>prevpow(a, x)</code> </dt> <dd>\n<p>The largest <code>a^n</code> not greater than <code>x</code>, where <code>n</code> is a non-negative integer. <code>a</code> must be greater than 1, and <code>x</code> must not be less than 1.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nextprod\">\n<code>nextprod([k_1, k_2, ..., ]n)</code> </dt> <dd>\n<p>Next integer not less than <code>n</code> that can be written as <span class=\"math\">\\(\\prod k_i^{p_i}\\)</span> for integers <span class=\"math\">\\(p_1\\)</span>, <span class=\"math\">\\(p_2\\)</span>, etc.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.prevprod\">\n<code>prevprod([k_1, k_2, ..., ]n)</code> </dt> <dd>\n<p>Previous integer not greater than <code>n</code> that can be written as <span class=\"math\">\\(\\prod k_i^{p_i}\\)</span> for integers <span class=\"math\">\\(p_1\\)</span>, <span class=\"math\">\\(p_2\\)</span>, etc.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.invmod\">\n<code>invmod(x, m)</code> </dt> <dd>\n<p>Take the inverse of <code>x</code> modulo <code>m</code>: <code>y</code> such that <span class=\"math\">\\(xy = 1 \\pmod m\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.powermod\">\n<code>powermod(x, p, m)</code> </dt> <dd>\n<p>Compute <span class=\"math\">\\(x^p \\pmod m\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.gamma\">\n<code>gamma(x)</code> </dt> <dd>\n<p>Compute the gamma function of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lgamma\">\n<code>lgamma(x)</code> </dt> <dd>\n<p>Compute the logarithm of the absolute value of <a class=\"reference internal\" href=\"#Base.gamma\" title=\"Base.gamma\"><code>gamma()</code></a> for <code>Real</code> <code>x</code>, while for <code>Complex</code> <code>x</code> it computes the logarithm of <code>gamma(x)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lfact\">\n<code>lfact(x)</code> </dt> <dd>\n<p>Compute the logarithmic factorial of <code>x</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.digamma\">\n<code>digamma(x)</code> </dt> <dd>\n<p>Compute the digamma function of <code>x</code> (the logarithmic derivative of <code>gamma(x)</code>)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.invdigamma\">\n<code>invdigamma(x)</code> </dt> <dd>\n<p>Compute the inverse digamma function of <code>x</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.trigamma\">\n<code>trigamma(x)</code> </dt> <dd>\n<p>Compute the trigamma function of <code>x</code> (the logarithmic second derivative of <code>gamma(x)</code>)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.polygamma\">\n<code>polygamma(m, x)</code> </dt> <dd>\n<p>Compute the polygamma function of order <code>m</code> of argument <code>x</code> (the <code>(m+1)th</code> derivative of the logarithm of <code>gamma(x)</code>)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.airy\">\n<code>airy(k, x)</code> </dt> <dd>\n<p>The <code>k</code>th derivative of the Airy function <span class=\"math\">\\(\\operatorname{Ai}(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.airyai\">\n<code>airyai(x)</code> </dt> <dd>\n<p>Airy function <span class=\"math\">\\(\\operatorname{Ai}(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.airyprime\">\n<code>airyprime(x)</code> </dt> <dd>\n<p>Airy function derivative <span class=\"math\">\\(\\operatorname{Ai}'(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.airyaiprime\">\n<code>airyaiprime(x)</code> </dt> <dd>\n<p>Airy function derivative <span class=\"math\">\\(\\operatorname{Ai}'(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.airybi\">\n<code>airybi(x)</code> </dt> <dd>\n<p>Airy function <span class=\"math\">\\(\\operatorname{Bi}(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.airybiprime\">\n<code>airybiprime(x)</code> </dt> <dd>\n<p>Airy function derivative <span class=\"math\">\\(\\operatorname{Bi}'(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.airyx\">\n<code>airyx(k, x)</code> </dt> <dd>\n<p>scaled <code>k</code>th derivative of the Airy function, return <span class=\"math\">\\(\\operatorname{Ai}(x) e^{\\frac{2}{3} x \\sqrt{x}}\\)</span> for <code>k == 0 || k == 1</code>, and <span class=\"math\">\\(\\operatorname{Ai}(x) e^{- \\left| \\operatorname{Re} \\left( \\frac{2}{3} x \\sqrt{x} \\right) \\right|}\\)</span> for <code>k == 2 || k == 3</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.besselj0\">\n<code>besselj0(x)</code> </dt> <dd>\n<p>Bessel function of the first kind of order 0, <span class=\"math\">\\(J_0(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.besselj1\">\n<code>besselj1(x)</code> </dt> <dd>\n<p>Bessel function of the first kind of order 1, <span class=\"math\">\\(J_1(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.besselj\">\n<code>besselj(nu, x)</code> </dt> <dd>\n<p>Bessel function of the first kind of order <code>nu</code>, <span class=\"math\">\\(J_\\nu(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.besseljx\">\n<code>besseljx(nu, x)</code> </dt> <dd>\n<p>Scaled Bessel function of the first kind of order <code>nu</code>, <span class=\"math\">\\(J_\\nu(x) e^{- | \\operatorname{Im}(x) |}\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bessely0\">\n<code>bessely0(x)</code> </dt> <dd>\n<p>Bessel function of the second kind of order 0, <span class=\"math\">\\(Y_0(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bessely1\">\n<code>bessely1(x)</code> </dt> <dd>\n<p>Bessel function of the second kind of order 1, <span class=\"math\">\\(Y_1(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bessely\">\n<code>bessely(nu, x)</code> </dt> <dd>\n<p>Bessel function of the second kind of order <code>nu</code>, <span class=\"math\">\\(Y_\\nu(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.besselyx\">\n<code>besselyx(nu, x)</code> </dt> <dd>\n<p>Scaled Bessel function of the second kind of order <code>nu</code>, <span class=\"math\">\\(Y_\\nu(x) e^{- | \\operatorname{Im}(x) |}\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hankelh1\">\n<code>hankelh1(nu, x)</code> </dt> <dd>\n<p>Bessel function of the third kind of order <code>nu</code>, <span class=\"math\">\\(H^{(1)}_\\nu(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hankelh1x\">\n<code>hankelh1x(nu, x)</code> </dt> <dd>\n<p>Scaled Bessel function of the third kind of order <code>nu</code>, <span class=\"math\">\\(H^{(1)}_\\nu(x) e^{-x i}\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hankelh2\">\n<code>hankelh2(nu, x)</code> </dt> <dd>\n<p>Bessel function of the third kind of order <code>nu</code>, <span class=\"math\">\\(H^{(2)}_\\nu(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hankelh2x\">\n<code>hankelh2x(nu, x)</code> </dt> <dd>\n<p>Scaled Bessel function of the third kind of order <code>nu</code>, <span class=\"math\">\\(H^{(2)}_\\nu(x) e^{x i}\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.besselh\">\n<code>besselh(nu, k, x)</code> </dt> <dd>\n<p>Bessel function of the third kind of order <code>nu</code> (Hankel function). <code>k</code> is either 1 or 2, selecting <code>hankelh1</code> or <code>hankelh2</code>, respectively.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.besseli\">\n<code>besseli(nu, x)</code> </dt> <dd>\n<p>Modified Bessel function of the first kind of order <code>nu</code>, <span class=\"math\">\\(I_\\nu(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.besselix\">\n<code>besselix(nu, x)</code> </dt> <dd>\n<p>Scaled modified Bessel function of the first kind of order <code>nu</code>, <span class=\"math\">\\(I_\\nu(x) e^{- | \\operatorname{Re}(x) |}\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.besselk\">\n<code>besselk(nu, x)</code> </dt> <dd>\n<p>Modified Bessel function of the second kind of order <code>nu</code>, <span class=\"math\">\\(K_\\nu(x)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.besselkx\">\n<code>besselkx(nu, x)</code> </dt> <dd>\n<p>Scaled modified Bessel function of the second kind of order <code>nu</code>, <span class=\"math\">\\(K_\\nu(x) e^x\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.beta\">\n<code>beta(x, y)</code> </dt> <dd>\n<p>Euler integral of the first kind <span class=\"math\">\\(\\operatorname{B}(x,y) = \\Gamma(x)\\Gamma(y)/\\Gamma(x+y)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lbeta\">\n<code>lbeta(x, y)</code> </dt> <dd>\n<p>Natural logarithm of the absolute value of the beta function <span class=\"math\">\\(\\log(|\\operatorname{B}(x,y)|)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eta\">\n<code>eta(x)</code> </dt> <dd>\n<p>Dirichlet eta function <span class=\"math\">\\(\\eta(s) = \\sum^\\infty_{n=1}(-)^{n-1}/n^{s}\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.zeta\">\n<code>zeta(s)</code> </dt> <dd>\n<p>Riemann zeta function <span class=\"math\">\\(\\zeta(s)\\)</span>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>zeta(s, z)</code> </dt> <dd>\n<p>Hurwitz zeta function <span class=\"math\">\\(\\zeta(s, z)\\)</span>. (This is equivalent to the Riemann zeta function <span class=\"math\">\\(\\zeta(s)\\)</span> for the case of <code>z=1</code>.)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ndigits\">\n<code>ndigits(n, b)</code> </dt> <dd>\n<p>Compute the number of digits in number <code>n</code> written in base <code>b</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.widemul\">\n<code>widemul(x, y)</code> </dt> <dd>\n<p>Multiply <code>x</code> and <code>y</code>, giving the result as a larger type.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.@evalpoly\">\n<code>@evalpoly(z, c...)</code> </dt> <dd>\n<p>Evaluate the polynomial <span class=\"math\">\\(\\sum_k c[k] z^{k-1}\\)</span> for the coefficients <code>c[1]</code>, <code>c[2]</code>, ...; that is, the coefficients are given in ascending order by power of <code>z</code>. This macro expands to efficient inline code that uses either Horner’s method or, for complex <code>z</code>, a more efficient Goertzel-like algorithm.</p> </dd>\n</dl>   <h2 id=\"statistics\">Statistics</h2> <dl class=\"function\"> <dt id=\"Base.mean\">\n<code>mean(v[, region])</code> </dt> <dd>\n<p>Compute the mean of whole array <code>v</code>, or optionally along the dimensions in <code>region</code>. Note: Julia does not ignore <code>NaN</code> values in the computation. For applications requiring the handling of missing data, the <code>DataArray</code> package is recommended.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.mean!\">\n<code>mean!(r, v)</code> </dt> <dd>\n<p>Compute the mean of <code>v</code> over the singleton dimensions of <code>r</code>, and write results to <code>r</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.std\">\n<code>std(v[, region])</code> </dt> <dd>\n<p>Compute the sample standard deviation of a vector or array <code>v</code>, optionally along dimensions in <code>region</code>. The algorithm returns an estimator of the generative distribution’s standard deviation under the assumption that each entry of <code>v</code> is an IID drawn from that generative distribution. This computation is equivalent to calculating <code>sqrt(sum((v - mean(v)).^2) / (length(v) - 1))</code>. Note: Julia does not ignore <code>NaN</code> values in the computation. For applications requiring the handling of missing data, the <code>DataArray</code> package is recommended.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.stdm\">\n<code>stdm(v, m)</code> </dt> <dd>\n<p>Compute the sample standard deviation of a vector <code>v</code> with known mean <code>m</code>. Note: Julia does not ignore <code>NaN</code> values in the computation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.var\">\n<code>var(v[, region])</code> </dt> <dd>\n<p>Compute the sample variance of a vector or array <code>v</code>, optionally along dimensions in <code>region</code>. The algorithm will return an estimator of the generative distribution’s variance under the assumption that each entry of <code>v</code> is an IID drawn from that generative distribution. This computation is equivalent to calculating <code>sumabs2(v - mean(v)) / (length(v) - 1)</code>. Note: Julia does not ignore <code>NaN</code> values in the computation. For applications requiring the handling of missing data, the <code>DataArray</code> package is recommended.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.varm\">\n<code>varm(v, m)</code> </dt> <dd>\n<p>Compute the sample variance of a vector <code>v</code> with known mean <code>m</code>. Note: Julia does not ignore <code>NaN</code> values in the computation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.middle\">\n<code>middle(x)</code> </dt> <dd>\n<p>Compute the middle of a scalar value, which is equivalent to <code>x</code> itself, but of the type of <code>middle(x, x)</code> for consistency.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>middle(x, y)</code> </dt> <dd>\n<p>Compute the middle of two reals <code>x</code> and <code>y</code>, which is equivalent in both value and type to computing their mean (<code>(x + y) / 2</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>middle(range)</code> </dt> <dd>\n<p>Compute the middle of a range, which consists in computing the mean of its extrema. Since a range is sorted, the mean is performed with the first and last element.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>middle(array)</code> </dt> <dd>\n<p>Compute the middle of an array, which consists in finding its extrema and then computing their mean.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.median\">\n<code>median(v[, region])</code> </dt> <dd>\n<p>Compute the median of whole array <code>v</code>, or optionally along the dimensions in <code>region</code>. For even number of elements no exact median element exists, so the result is equivalent to calculating mean of two median elements. <code>NaN</code> is returned if the data contains any <code>NaN</code> values. For applications requiring the handling of missing data, the <code>DataArrays</code> package is recommended.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.median!\">\n<code>median!(v)</code> </dt> <dd>\n<p>Like <code>median</code>, but may overwrite the input vector.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hist\">\n<code>hist(v[, n]) → e, counts</code> </dt> <dd>\n<p>Compute the histogram of <code>v</code>, optionally using approximately <code>n</code> bins. The return values are a range <code>e</code>, which correspond to the edges of the bins, and <code>counts</code> containing the number of elements of <code>v</code> in each bin. Note: Julia does not ignore <code>NaN</code> values in the computation.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>hist(v, e) → e, counts</code> </dt> <dd>\n<p>Compute the histogram of <code>v</code> using a vector/range <code>e</code> as the edges for the bins. The result will be a vector of length <code>length(e) - 1</code>, such that the element at location <code>i</code> satisfies <code>sum(e[i] .&lt; v .&lt;= e[i+1])</code>. Note: Julia does not ignore <code>NaN</code> values in the computation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hist!\">\n<code>hist!(counts, v, e) → e, counts</code> </dt> <dd>\n<p>Compute the histogram of <code>v</code>, using a vector/range <code>e</code> as the edges for the bins. This function writes the resultant counts to a pre-allocated array <code>counts</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hist2d\">\n<code>hist2d(M, e1, e2) -&gt; (edge1, edge2, counts)</code> </dt> <dd>\n<p>Compute a “2d histogram” of a set of N points specified by N-by-2 matrix <code>M</code>. Arguments <code>e1</code> and <code>e2</code> are bins for each dimension, specified either as integer bin counts or vectors of bin edges. The result is a tuple of <code>edge1</code> (the bin edges used in the first dimension), <code>edge2</code> (the bin edges used in the second dimension), and <code>counts</code>, a histogram matrix of size <code>(length(edge1)-1, length(edge2)-1)</code>. Note: Julia does not ignore <code>NaN</code> values in the computation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hist2d!\">\n<code>hist2d!(counts, M, e1, e2) -&gt; (e1, e2, counts)</code> </dt> <dd>\n<p>Compute a “2d histogram” with respect to the bins delimited by the edges given in <code>e1</code> and <code>e2</code>. This function writes the results to a pre-allocated array <code>counts</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.histrange\">\n<code>histrange(v, n)</code> </dt> <dd>\n<p>Compute <em>nice</em> bin ranges for the edges of a histogram of <code>v</code>, using approximately <code>n</code> bins. The resulting step sizes will be 1, 2 or 5 multiplied by a power of 10. Note: Julia does not ignore <code>NaN</code> values in the computation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.midpoints\">\n<code>midpoints(e)</code> </dt> <dd>\n<p>Compute the midpoints of the bins with edges <code>e</code>. The result is a vector/range of length <code>length(e) - 1</code>. Note: Julia does not ignore <code>NaN</code> values in the computation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.quantile\">\n<code>quantile(v, p; sorted=false)</code> </dt> <dd>\n<p>Compute the quantile(s) of a vector <code>v</code> at a specified probability or vector <code>p</code>. The keyword argument <code>sorted</code> indicates whether <code>v</code> can be assumed to be sorted.</p> <p>The <code>p</code> should be on the interval [0,1], and <code>v</code> should not have any <code>NaN</code> values.</p> <p>Quantiles are computed via linear interpolation between the points <code>((k-1)/(n-1), v[k])</code>, for <code>k = 1:n</code> where <code>n = length(v)</code>. This corresponds to Definition 7 of Hyndman and Fan (1996), and is the same as the R default.</p> <ul class=\"simple\"> <li>Hyndman, R.J and Fan, Y. (1996) “Sample Quantiles in Statistical Packages”, <em>The American Statistician</em>, Vol. 50, No. 4, pp. 361-365</li> </ul> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.quantile!\">\n<code>quantile!([q, ]v, p; sorted=false)</code> </dt> <dd>\n<p>Compute the quantile(s) of a vector <code>v</code> at the probabilities <code>p</code>, with optional output into array <code>q</code> (if not provided, a new output array is created). The keyword argument <code>sorted</code> indicates whether <code>v</code> can be assumed to be sorted; if <code>false</code> (the default), then the elements of <code>v</code> may be partially sorted.</p> <p>The elements of <code>p</code> should be on the interval [0,1], and <code>v</code> should not have any <code>NaN</code> values.</p> <p>Quantiles are computed via linear interpolation between the points <code>((k-1)/(n-1), v[k])</code>, for <code>k = 1:n</code> where <code>n = length(v)</code>. This corresponds to Definition 7 of Hyndman and Fan (1996), and is the same as the R default.</p> <ul class=\"simple\"> <li>Hyndman, R.J and Fan, Y. (1996) “Sample Quantiles in Statistical Packages”, <em>The American Statistician</em>, Vol. 50, No. 4, pp. 361-365</li> </ul> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cov\">\n<code>cov(v1[, v2][, vardim=1, corrected=true, mean=nothing])</code> </dt> <dd>\n<p>Compute the Pearson covariance between the vector(s) in <code>v1</code> and <code>v2</code>. Here, <code>v1</code> and <code>v2</code> can be either vectors or matrices.</p> <p>This function accepts three keyword arguments:</p> <ul class=\"simple\"> <li>\n<code>vardim</code>: the dimension of variables. When <code>vardim = 1</code>, variables are considered in columns while observations in rows; when <code>vardim = 2</code>, variables are in rows while observations in columns. By default, it is set to <code>1</code>.</li> <li>\n<code>corrected</code>: whether to apply Bessel’s correction (divide by <code>n-1</code> instead of <code>n</code>). By default, it is set to <code>true</code>.</li> <li>\n<code>mean</code>: allow users to supply mean values that are known. By default, it is set to <code>nothing</code>, which indicates that the mean(s) are unknown, and the function will compute the mean. Users can use <code>mean=0</code> to indicate that the input data are centered, and hence there’s no need to subtract the mean.</li> </ul> <p>The size of the result depends on the size of <code>v1</code> and <code>v2</code>. When both <code>v1</code> and <code>v2</code> are vectors, it returns the covariance between them as a scalar. When either one is a matrix, it returns a covariance matrix of size <code>(n1, n2)</code>, where <code>n1</code> and <code>n2</code> are the numbers of slices in <code>v1</code> and <code>v2</code>, which depend on the setting of <code>vardim</code>.</p> <p>Note: <code>v2</code> can be omitted, which indicates <code>v2 = v1</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cor\">\n<code>cor(v1[, v2][, vardim=1, mean=nothing])</code> </dt> <dd>\n<p>Compute the Pearson correlation between the vector(s) in <code>v1</code> and <code>v2</code>.</p> <p>Users can use the keyword argument <code>vardim</code> to specify the variable dimension, and <code>mean</code> to supply pre-computed mean values.</p> </dd>\n</dl>   <h2 id=\"signal-processing\">Signal Processing</h2> <p>Fast Fourier transform (FFT) functions in Julia are implemented by calling functions from <a class=\"reference external\" href=\"http://www.fftw.org\">FFTW</a>. By default, Julia does not use multi-threaded FFTW. Higher performance may be obtained by experimenting with multi-threading. Use <code>FFTW.set_num_threads(np)</code> to use <code>np</code> threads.</p> <dl class=\"function\"> <dt id=\"Base.fft\">\n<code>fft(A[, dims])</code> </dt> <dd>\n<p>Performs a multidimensional FFT of the array <code>A</code>. The optional <code>dims</code> argument specifies an iterable subset of dimensions (e.g. an integer, range, tuple, or array) to transform along. Most efficient if the size of <code>A</code> along the transformed dimensions is a product of small primes; see <code>nextprod()</code>. See also <code>plan_fft()</code> for even greater efficiency.</p> <p>A one-dimensional FFT computes the one-dimensional discrete Fourier transform (DFT) as defined by</p> <div class=\"math\"> \\[\\operatorname{DFT}(A)[k] = \\sum_{n=1}^{\\operatorname{length}(A)} \\exp\\left(-i\\frac{2\\pi (n-1)(k-1)}{\\operatorname{length}(A)} \\right) A[n].\\]</div> <p>A multidimensional FFT simply performs this operation along each transformed dimension of <code>A</code>.</p> <p>Higher performance is usually possible with multi-threading. Use <code>FFTW.set_num_threads(np)</code> to use <code>np</code> threads, if you have <code>np</code> processors.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fft!\">\n<code>fft!(A[, dims])</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.fft\" title=\"Base.fft\"><code>fft()</code></a>, but operates in-place on <code>A</code>, which must be an array of complex floating-point numbers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ifft\">\n<code>ifft(A[, dims])</code> </dt> <dd>\n<p>Multidimensional inverse FFT.</p> <p>A one-dimensional inverse FFT computes</p> <div class=\"math\"> \\[\\operatorname{IDFT}(A)[k] = \\frac{1}{\\operatorname{length}(A)} \\sum_{n=1}^{\\operatorname{length}(A)} \\exp\\left(+i\\frac{2\\pi (n-1)(k-1)} {\\operatorname{length}(A)} \\right) A[n].\\]</div> <p>A multidimensional inverse FFT simply performs this operation along each transformed dimension of <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ifft!\">\n<code>ifft!(A[, dims])</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.ifft\" title=\"Base.ifft\"><code>ifft()</code></a>, but operates in-place on <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bfft\">\n<code>bfft(A[, dims])</code> </dt> <dd>\n<p>Similar to <a class=\"reference internal\" href=\"#Base.ifft\" title=\"Base.ifft\"><code>ifft()</code></a>, but computes an unnormalized inverse (backward) transform, which must be divided by the product of the sizes of the transformed dimensions in order to obtain the inverse. (This is slightly more efficient than <a class=\"reference internal\" href=\"#Base.ifft\" title=\"Base.ifft\"><code>ifft()</code></a> because it omits a scaling step, which in some applications can be combined with other computational steps elsewhere.)</p> <div class=\"math\"> \\[\\operatorname{BDFT}(A)[k] = \\operatorname{length}(A) \\operatorname{IDFT}(A)[k]\\]</div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bfft!\">\n<code>bfft!(A[, dims])</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.bfft\" title=\"Base.bfft\"><code>bfft()</code></a>, but operates in-place on <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_fft\">\n<code>plan_fft(A [, dims]; flags=FFTW.ESTIMATE; timelimit=Inf)</code> </dt> <dd>\n<p>Pre-plan an optimized FFT along given dimensions (<code>dims</code>) of arrays matching the shape and type of <code>A</code>. (The first two arguments have the same meaning as for <a class=\"reference internal\" href=\"#Base.fft\" title=\"Base.fft\"><code>fft()</code></a>.) Returns an object <code>P</code> which represents the linear operator computed by the FFT, and which contains all of the information needed to compute <code>fft(A, dims)</code> quickly.</p> <p>To apply <code>P</code> to an array <code>A</code>, use <code>P * A</code>; in general, the syntax for applying plans is much like that of matrices. (A plan can only be applied to arrays of the same size as the <code>A</code> for which the plan was created.) You can also apply a plan with a preallocated output array <code>Â</code> by calling <code>A_mul_B!(Â, plan,\nA)</code>. You can compute the inverse-transform plan by <code>inv(P)</code> and apply the inverse plan with <code>P \\ Â</code> (the inverse plan is cached and reused for subsequent calls to <code>inv</code> or <code>\\</code>), and apply the inverse plan to a pre-allocated output array <code>A</code> with <code>A_ldiv_B!(A, P, Â)</code>.</p> <p>The <code>flags</code> argument is a bitwise-or of FFTW planner flags, defaulting to <code>FFTW.ESTIMATE</code>. e.g. passing <code>FFTW.MEASURE</code> or <code>FFTW.PATIENT</code> will instead spend several seconds (or more) benchmarking different possible FFT algorithms and picking the fastest one; see the FFTW manual for more information on planner flags. The optional <code>timelimit</code> argument specifies a rough upper bound on the allowed planning time, in seconds. Passing <code>FFTW.MEASURE</code> or <code>FFTW.PATIENT</code> may cause the input array <code>A</code> to be overwritten with zeros during plan creation.</p> <p><a class=\"reference internal\" href=\"#Base.plan_fft!\" title=\"Base.plan_fft!\"><code>plan_fft!()</code></a> is the same as <a class=\"reference internal\" href=\"#Base.plan_fft\" title=\"Base.plan_fft\"><code>plan_fft()</code></a> but creates a plan that operates in-place on its argument (which must be an array of complex floating-point numbers). <a class=\"reference internal\" href=\"#Base.plan_ifft\" title=\"Base.plan_ifft\"><code>plan_ifft()</code></a> and so on are similar but produce plans that perform the equivalent of the inverse transforms <a class=\"reference internal\" href=\"#Base.ifft\" title=\"Base.ifft\"><code>ifft()</code></a> and so on.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_ifft\">\n<code>plan_ifft(A [, dims]; flags=FFTW.ESTIMATE; timelimit=Inf)</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.plan_fft\" title=\"Base.plan_fft\"><code>plan_fft()</code></a>, but produces a plan that performs inverse transforms <a class=\"reference internal\" href=\"#Base.ifft\" title=\"Base.ifft\"><code>ifft()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_bfft\">\n<code>plan_bfft(A [, dims]; flags=FFTW.ESTIMATE; timelimit=Inf)</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.plan_fft\" title=\"Base.plan_fft\"><code>plan_fft()</code></a>, but produces a plan that performs an unnormalized backwards transform <a class=\"reference internal\" href=\"#Base.bfft\" title=\"Base.bfft\"><code>bfft()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_fft!\">\n<code>plan_fft!(A [, dims]; flags=FFTW.ESTIMATE; timelimit=Inf)</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.plan_fft\" title=\"Base.plan_fft\"><code>plan_fft()</code></a>, but operates in-place on <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_ifft!\">\n<code>plan_ifft!(A [, dims]; flags=FFTW.ESTIMATE; timelimit=Inf)</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.plan_ifft\" title=\"Base.plan_ifft\"><code>plan_ifft()</code></a>, but operates in-place on <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_bfft!\">\n<code>plan_bfft!(A [, dims]; flags=FFTW.ESTIMATE; timelimit=Inf)</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.plan_bfft\" title=\"Base.plan_bfft\"><code>plan_bfft()</code></a>, but operates in-place on <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rfft\">\n<code>rfft(A[, dims])</code> </dt> <dd>\n<p>Multidimensional FFT of a real array <code>A</code>, exploiting the fact that the transform has conjugate symmetry in order to save roughly half the computational time and storage costs compared with <a class=\"reference internal\" href=\"#Base.fft\" title=\"Base.fft\"><code>fft()</code></a>. If <code>A</code> has size <code>(n_1, ..., n_d)</code>, the result has size <code>(div(n_1,2)+1, ..., n_d)</code>.</p> <p>The optional <code>dims</code> argument specifies an iterable subset of one or more dimensions of <code>A</code> to transform, similar to <a class=\"reference internal\" href=\"#Base.fft\" title=\"Base.fft\"><code>fft()</code></a>. Instead of (roughly) halving the first dimension of <code>A</code> in the result, the <code>dims[1]</code> dimension is (roughly) halved in the same way.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.irfft\">\n<code>irfft(A, d[, dims])</code> </dt> <dd>\n<p>Inverse of <a class=\"reference internal\" href=\"#Base.rfft\" title=\"Base.rfft\"><code>rfft()</code></a>: for a complex array <code>A</code>, gives the corresponding real array whose FFT yields <code>A</code> in the first half. As for <a class=\"reference internal\" href=\"#Base.rfft\" title=\"Base.rfft\"><code>rfft()</code></a>, <code>dims</code> is an optional subset of dimensions to transform, defaulting to <code>1:ndims(A)</code>.</p> <p><code>d</code> is the length of the transformed real array along the <code>dims[1]</code> dimension, which must satisfy <code>div(d,2)+1 == size(A,dims[1])</code>. (This parameter cannot be inferred from <code>size(A)</code> since both <code>2*size(A,dims[1])-2</code> as well as <code>2*size(A,dims[1])-1</code> are valid sizes for the transformed real array.)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.brfft\">\n<code>brfft(A, d[, dims])</code> </dt> <dd>\n<p>Similar to <a class=\"reference internal\" href=\"#Base.irfft\" title=\"Base.irfft\"><code>irfft()</code></a> but computes an unnormalized inverse transform (similar to <a class=\"reference internal\" href=\"#Base.bfft\" title=\"Base.bfft\"><code>bfft()</code></a>), which must be divided by the product of the sizes of the transformed dimensions (of the real output array) in order to obtain the inverse transform.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_rfft\">\n<code>plan_rfft(A [, dims]; flags=FFTW.ESTIMATE; timelimit=Inf)</code> </dt> <dd>\n<p>Pre-plan an optimized real-input FFT, similar to <a class=\"reference internal\" href=\"#Base.plan_fft\" title=\"Base.plan_fft\"><code>plan_fft()</code></a> except for <a class=\"reference internal\" href=\"#Base.rfft\" title=\"Base.rfft\"><code>rfft()</code></a> instead of <a class=\"reference internal\" href=\"#Base.fft\" title=\"Base.fft\"><code>fft()</code></a>. The first two arguments, and the size of the transformed result, are the same as for <a class=\"reference internal\" href=\"#Base.rfft\" title=\"Base.rfft\"><code>rfft()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_brfft\">\n<code>plan_brfft(A, d [, dims]; flags=FFTW.ESTIMATE; timelimit=Inf)</code> </dt> <dd>\n<p>Pre-plan an optimized real-input unnormalized transform, similar to <a class=\"reference internal\" href=\"#Base.plan_rfft\" title=\"Base.plan_rfft\"><code>plan_rfft()</code></a> except for <a class=\"reference internal\" href=\"#Base.brfft\" title=\"Base.brfft\"><code>brfft()</code></a> instead of <a class=\"reference internal\" href=\"#Base.rfft\" title=\"Base.rfft\"><code>rfft()</code></a>. The first two arguments and the size of the transformed result, are the same as for <a class=\"reference internal\" href=\"#Base.brfft\" title=\"Base.brfft\"><code>brfft()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_irfft\">\n<code>plan_irfft(A, d [, dims]; flags=FFTW.ESTIMATE; timelimit=Inf)</code> </dt> <dd>\n<p>Pre-plan an optimized inverse real-input FFT, similar to <a class=\"reference internal\" href=\"#Base.plan_rfft\" title=\"Base.plan_rfft\"><code>plan_rfft()</code></a> except for <a class=\"reference internal\" href=\"#Base.irfft\" title=\"Base.irfft\"><code>irfft()</code></a> and <a class=\"reference internal\" href=\"#Base.brfft\" title=\"Base.brfft\"><code>brfft()</code></a>, respectively. The first three arguments have the same meaning as for <a class=\"reference internal\" href=\"#Base.irfft\" title=\"Base.irfft\"><code>irfft()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.dct\">\n<code>dct(A[, dims])</code> </dt> <dd>\n<p>Performs a multidimensional type-II discrete cosine transform (DCT) of the array <code>A</code>, using the unitary normalization of the DCT. The optional <code>dims</code> argument specifies an iterable subset of dimensions (e.g. an integer, range, tuple, or array) to transform along. Most efficient if the size of <code>A</code> along the transformed dimensions is a product of small primes; see <a class=\"reference internal\" href=\"#Base.nextprod\" title=\"Base.nextprod\"><code>nextprod()</code></a>. See also <a class=\"reference internal\" href=\"#Base.plan_dct\" title=\"Base.plan_dct\"><code>plan_dct()</code></a> for even greater efficiency.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.dct!\">\n<code>dct!(A[, dims])</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.dct!\" title=\"Base.dct!\"><code>dct!()</code></a>, except that it operates in-place on <code>A</code>, which must be an array of real or complex floating-point values.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.idct\">\n<code>idct(A[, dims])</code> </dt> <dd>\n<p>Computes the multidimensional inverse discrete cosine transform (DCT) of the array <code>A</code> (technically, a type-III DCT with the unitary normalization). The optional <code>dims</code> argument specifies an iterable subset of dimensions (e.g. an integer, range, tuple, or array) to transform along. Most efficient if the size of <code>A</code> along the transformed dimensions is a product of small primes; see <a class=\"reference internal\" href=\"#Base.nextprod\" title=\"Base.nextprod\"><code>nextprod()</code></a>. See also <a class=\"reference internal\" href=\"#Base.plan_idct\" title=\"Base.plan_idct\"><code>plan_idct()</code></a> for even greater efficiency.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.idct!\">\n<code>idct!(A[, dims])</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.idct!\" title=\"Base.idct!\"><code>idct!()</code></a>, but operates in-place on <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_dct\">\n<code>plan_dct(A[, dims[, flags[, timelimit]]])</code> </dt> <dd>\n<p>Pre-plan an optimized discrete cosine transform (DCT), similar to <a class=\"reference internal\" href=\"#Base.plan_fft\" title=\"Base.plan_fft\"><code>plan_fft()</code></a> except producing a function that computes <a class=\"reference internal\" href=\"#Base.dct\" title=\"Base.dct\"><code>dct()</code></a>. The first two arguments have the same meaning as for <a class=\"reference internal\" href=\"#Base.dct\" title=\"Base.dct\"><code>dct()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_dct!\">\n<code>plan_dct!(A[, dims[, flags[, timelimit]]])</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.plan_dct\" title=\"Base.plan_dct\"><code>plan_dct()</code></a>, but operates in-place on <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_idct\">\n<code>plan_idct(A[, dims[, flags[, timelimit]]])</code> </dt> <dd>\n<p>Pre-plan an optimized inverse discrete cosine transform (DCT), similar to <a class=\"reference internal\" href=\"#Base.plan_fft\" title=\"Base.plan_fft\"><code>plan_fft()</code></a> except producing a function that computes <a class=\"reference internal\" href=\"#Base.idct\" title=\"Base.idct\"><code>idct()</code></a>. The first two arguments have the same meaning as for <a class=\"reference internal\" href=\"#Base.idct\" title=\"Base.idct\"><code>idct()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.plan_idct!\">\n<code>plan_idct!(A[, dims[, flags[, timelimit]]])</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.plan_idct\" title=\"Base.plan_idct\"><code>plan_idct()</code></a>, but operates in-place on <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.fftshift\">\n<code>fftshift(x)</code> </dt> <dd>\n<p>Swap the first and second halves of each dimension of <code>x</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>fftshift(x, dim)</code> </dt> <dd>\n<p>Swap the first and second halves of the given dimension of array <code>x</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ifftshift\">\n<code>ifftshift(x[, dim])</code> </dt> <dd>\n<p>Undoes the effect of <code>fftshift</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.filt\">\n<code>filt(b, a, x[, si])</code> </dt> <dd>\n<p>Apply filter described by vectors <code>a</code> and <code>b</code> to vector <code>x</code>, with an optional initial filter state vector <code>si</code> (defaults to zeros).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.filt!\">\n<code>filt!(out, b, a, x[, si])</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.filt\" title=\"Base.filt\"><code>filt()</code></a> but writes the result into the <code>out</code> argument, which may alias the input <code>x</code> to modify it in-place.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.deconv\">\n<code>deconv(b, a)</code> </dt> <dd>\n<p>Construct vector <code>c</code> such that <code>b = conv(a,c) + r</code>. Equivalent to polynomial division.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.conv\">\n<code>conv(u, v)</code> </dt> <dd>\n<p>Convolution of two vectors. Uses FFT algorithm.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.conv2\">\n<code>conv2(u, v, A)</code> </dt> <dd>\n<p>2-D convolution of the matrix <code>A</code> with the 2-D separable kernel generated by the vectors <code>u</code> and <code>v</code>. Uses 2-D FFT algorithm</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>conv2(B, A)</code> </dt> <dd>\n<p>2-D convolution of the matrix <code>B</code> with the matrix <code>A</code>. Uses 2-D FFT algorithm</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.xcorr\">\n<code>xcorr(u, v)</code> </dt> <dd>\n<p>Compute the cross-correlation of two vectors.</p> </dd>\n</dl> <p>The following functions are defined within the <code>Base.FFTW</code> module.</p> <dl class=\"function\"> <dt id=\"Base.FFTW.r2r\">\n<code>r2r(A, kind[, dims])</code> </dt> <dd>\n<p>Performs a multidimensional real-input/real-output (r2r) transform of type <code>kind</code> of the array <code>A</code>, as defined in the FFTW manual. <code>kind</code> specifies either a discrete cosine transform of various types (<code>FFTW.REDFT00</code>, <code>FFTW.REDFT01</code>, <code>FFTW.REDFT10</code>, or <code>FFTW.REDFT11</code>), a discrete sine transform of various types (<code>FFTW.RODFT00</code>, <code>FFTW.RODFT01</code>, <code>FFTW.RODFT10</code>, or <code>FFTW.RODFT11</code>), a real-input DFT with halfcomplex-format output (<code>FFTW.R2HC</code> and its inverse <code>FFTW.HC2R</code>), or a discrete Hartley transform (<code>FFTW.DHT</code>). The <code>kind</code> argument may be an array or tuple in order to specify different transform types along the different dimensions of <code>A</code>; <code>kind[end]</code> is used for any unspecified dimensions. See the FFTW manual for precise definitions of these transform types, at <a class=\"reference external\" href=\"http://www.fftw.org/doc\">http://www.fftw.org/doc</a>.</p> <p>The optional <code>dims</code> argument specifies an iterable subset of dimensions (e.g. an integer, range, tuple, or array) to transform along. <code>kind[i]</code> is then the transform type for <code>dims[i]</code>, with <code>kind[end]</code> being used for <code>i &gt; length(kind)</code>.</p> <p>See also <a class=\"reference internal\" href=\"#Base.FFTW.plan_r2r\" title=\"Base.FFTW.plan_r2r\"><code>plan_r2r()</code></a> to pre-plan optimized r2r transforms.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.FFTW.r2r!\">\n<code>r2r!(A, kind[, dims])</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.FFTW.r2r\" title=\"Base.FFTW.r2r\"><code>r2r()</code></a>, but operates in-place on <code>A</code>, which must be an array of real or complex floating-point numbers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.FFTW.plan_r2r\">\n<code>plan_r2r(A, kind[, dims[, flags[, timelimit]]])</code> </dt> <dd>\n<p>Pre-plan an optimized r2r transform, similar to <a class=\"reference internal\" href=\"#Base.plan_fft\" title=\"Base.plan_fft\"><code>Base.plan_fft()</code></a> except that the transforms (and the first three arguments) correspond to <a class=\"reference internal\" href=\"#Base.FFTW.r2r\" title=\"Base.FFTW.r2r\"><code>r2r()</code></a> and <a class=\"reference internal\" href=\"#Base.FFTW.r2r!\" title=\"Base.FFTW.r2r!\"><code>r2r!()</code></a>, respectively.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.FFTW.plan_r2r!\">\n<code>plan_r2r!(A, kind[, dims[, flags[, timelimit]]])</code> </dt> <dd>\n<p>Similar to <a class=\"reference internal\" href=\"#Base.plan_fft\" title=\"Base.plan_fft\"><code>Base.plan_fft()</code></a>, but corresponds to <a class=\"reference internal\" href=\"#Base.FFTW.r2r!\" title=\"Base.FFTW.r2r!\"><code>r2r!()</code></a>.</p> </dd>\n</dl>   <h2 id=\"numerical-integration\">Numerical Integration</h2> <p>Although several external packages are available for numeric integration and solution of ordinary differential equations, we also provide some built-in integration support in Julia.</p> <dl class=\"function\"> <dt id=\"Base.quadgk\">\n<code>quadgk(f, a, b, c...; reltol=sqrt(eps), abstol=0, maxevals=10^7, order=7, norm=vecnorm)</code> </dt> <dd>\n<p>Numerically integrate the function <code>f(x)</code> from <code>a</code> to <code>b</code>, and optionally over additional intervals <code>b</code> to <code>c</code> and so on. Keyword options include a relative error tolerance <code>reltol</code> (defaults to <code>sqrt(eps)</code> in the precision of the endpoints), an absolute error tolerance <code>abstol</code> (defaults to 0), a maximum number of function evaluations <code>maxevals</code> (defaults to <code>10^7</code>), and the <code>order</code> of the integration rule (defaults to 7).</p> <p>Returns a pair <code>(I,E)</code> of the estimated integral <code>I</code> and an estimated upper bound on the absolute error <code>E</code>. If <code>maxevals</code> is not exceeded then <code>E &lt;= max(abstol, reltol*norm(I))</code> will hold. (Note that it is useful to specify a positive <code>abstol</code> in cases where <code>norm(I)</code> may be zero.)</p> <p>The endpoints <code>a</code> etcetera can also be complex (in which case the integral is performed over straight-line segments in the complex plane). If the endpoints are <code>BigFloat</code>, then the integration will be performed in <code>BigFloat</code> precision as well (note: it is advisable to increase the integration <code>order</code> in rough proportion to the precision, for smooth integrands). More generally, the precision is set by the precision of the integration endpoints (promoted to floating-point types).</p> <p>The integrand <code>f(x)</code> can return any numeric scalar, vector, or matrix type, or in fact any type supporting <code>+</code>, <code>-</code>, multiplication by real values, and a <code>norm</code> (i.e., any normed vector space). Alternatively, a different norm can be specified by passing a <code>norm</code>-like function as the <code>norm</code> keyword argument (which defaults to <code>vecnorm</code>).</p> <p>[Only one-dimensional integrals are provided by this function. For multi-dimensional integration (cubature), there are many different algorithms (often much better than simple nested 1d integrals) and the optimal choice tends to be very problem-dependent. See the Julia external-package listing for available algorithms for multidimensional integration or other specialized tasks (such as integrals of highly oscillatory or singular functions).]</p> <p>The algorithm is an adaptive Gauss-Kronrod integration technique: the integral in each interval is estimated using a Kronrod rule (<code>2*order+1</code> points) and the error is estimated using an embedded Gauss rule (<code>order</code> points). The interval with the largest error is then subdivided into two intervals and the process is repeated until the desired error tolerance is achieved.</p> <p>These quadrature rules work best for smooth functions within each interval, so if your function has a known discontinuity or other singularity, it is best to subdivide your interval to put the singularity at an endpoint. For example, if <code>f</code> has a discontinuity at <code>x=0.7</code> and you want to integrate from 0 to 1, you should use <code>quadgk(f, 0,0.7,1)</code> to subdivide the interval at the point of discontinuity. The integrand is never evaluated exactly at the endpoints of the intervals, so it is possible to integrate functions that diverge at the endpoints as long as the singularity is integrable (for example, a <code>log(x)</code> or <code>1/sqrt(x)</code> singularity).</p> <p>For real-valued endpoints, the starting and/or ending points may be infinite. (A coordinate transformation is performed internally to map the infinite interval to a finite one.)</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/math/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/math/</a>\n  </p>\n</div>\n","stdlib/linalg/index":"<h1 id=\"stdlib-linalg\">Linear Algebra</h1>  <h2 id=\"standard-functions\">Standard Functions</h2> <p id=\"module-Base.LinAlg\">Linear algebra functions in Julia are largely implemented by calling functions from <a class=\"reference external\" href=\"http://www.netlib.org/lapack/\">LAPACK</a>. Sparse factorizations call functions from <a class=\"reference external\" href=\"http://faculty.cse.tamu.edu/davis/suitesparse.html\">SuiteSparse</a>.</p> <dl class=\"function\"> <dt id=\"Base.*\">\n<code>*(A, B)</code> </dt> <dd>\n<p>Matrix multiplication</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.\\\">\n<code>\\(A, B)</code> </dt> <dd>\n<p>Matrix division using a polyalgorithm. For input matrices <code>A</code> and <code>B</code>, the result <code>X</code> is such that <code>A*X == B</code> when <code>A</code> is square. The solver that is used depends upon the structure of <code>A</code>. A direct solver is used for upper or lower triangular <code>A</code>. For Hermitian <code>A</code> (equivalent to symmetric <code>A</code> for non-complex <code>A</code>) the <code>BunchKaufman</code> factorization is used. Otherwise an LU factorization is used. For rectangular <code>A</code> the result is the minimum-norm least squares solution computed by a pivoted QR factorization of <code>A</code> and a rank estimate of <code>A</code> based on the R factor.</p> <p>When <code>A</code> is sparse, a similar polyalgorithm is used. For indefinite matrices, the <code>LDLt</code> factorization does not use pivoting during the numerical factorization and therefore the procedure can fail even for invertible matrices.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.dot\">\n<code>dot(x, y)</code> </dt> <dt id=\"Base.⋅\">\n<code>⋅(x, y)</code> </dt> <dd>\n<p>Compute the dot product. For complex vectors, the first vector is conjugated.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.vecdot\">\n<code>vecdot(x, y)</code> </dt> <dd>\n<p>For any iterable containers <code>x</code> and <code>y</code> (including arrays of any dimension) of numbers (or any element type for which <code>dot</code> is defined), compute the Euclidean dot product (the sum of <code>dot(x[i],y[i])</code>) as if they were vectors.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cross\">\n<code>cross(x, y)</code> </dt> <dt id=\"Base.×\">\n<code>×(x, y)</code> </dt> <dd>\n<p>Compute the cross product of two 3-vectors.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.factorize\">\n<code>factorize(A)</code> </dt> <dd>\n<p>Compute a convenient factorization (including LU, Cholesky, Bunch-Kaufman, LowerTriangular, UpperTriangular) of <code>A</code>, based upon the type of the input matrix. The return value can then be reused for efficient solving of multiple systems. For example: <code>A=factorize(A); x=A\\b; y=A\\C</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.full\">\n<code>full(F)</code> </dt> <dd>\n<p>Reconstruct the matrix <code>A</code> from the factorization <code>F=factorize(A)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lu\">\n<code>lu(A) → L, U, p</code> </dt> <dd>\n<p>Compute the LU factorization of <code>A</code>, such that <code>A[p,:] = L*U</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lufact\">\n<code>lufact(A[, pivot=Val{true}]) → F</code> </dt> <dd>\n<p>Compute the LU factorization of <code>A</code>. The return type of <code>F</code> depends on the type of <code>A</code>. In most cases, if <code>A</code> is a subtype <code>S</code> of AbstractMatrix with an element type <code>T</code> supporting <code>+</code>, <code>-</code>, <code>*</code> and <code>/</code> the return type is <code>LU{T,S{T}}</code>. If pivoting is chosen (default) the element type should also support <code>abs</code> and <code>&lt;</code>. When <code>A</code> is sparse and have element of type <code>Float32</code>, <code>Float64</code>, <code>Complex{Float32}</code>, or <code>Complex{Float64}</code> the return type is <code>UmfpackLU</code>. Some examples are shown in the table below.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Type of input <code>A</code>\n</th> <th class=\"head\">Type of output <code>F</code>\n</th> <th class=\"head\">Relationship between <code>F</code> and <code>A</code>\n</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>Matrix()</code></td> <td><code>LU</code></td> <td><code>F[:L]*F[:U] == A[F[:p], :]</code></td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#Base.Tridiagonal\" title=\"Base.Tridiagonal\"><code>Tridiagonal()</code></a></td> <td><code>LU{T,Tridiagonal{T}}</code></td> <td><code>F[:L]*F[:U] == A[F[:p], :]</code></td> </tr> <tr class=\"row-even\">\n<td><code>SparseMatrixCSC()</code></td> <td><code>UmfpackLU</code></td> <td><code>F[:L]*F[:U] == (F[:Rs] .* A)[F[:p], F[:q]]</code></td> </tr>  </table> <p>The individual components of the factorization <code>F</code> can be accessed by indexing:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> <th class=\"head\"><code>LU</code></th> <th class=\"head\"><code>LU{T,Tridiagonal{T}}</code></th> <th class=\"head\"><code>UmfpackLU</code></th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>F[:L]</code></td> <td>\n<code>L</code> (lower triangular) part of <code>LU</code>\n</td> <td>✓</td> <td>✓</td> <td>✓</td> </tr> <tr class=\"row-odd\">\n<td><code>F[:U]</code></td> <td>\n<code>U</code> (upper triangular) part of <code>LU</code>\n</td> <td>✓</td> <td>✓</td> <td>✓</td> </tr> <tr class=\"row-even\">\n<td><code>F[:p]</code></td> <td>(right) permutation <code>Vector</code>\n</td> <td>✓</td> <td>✓</td> <td>✓</td> </tr> <tr class=\"row-odd\">\n<td><code>F[:P]</code></td> <td>(right) permutation <code>Matrix</code>\n</td> <td>✓</td> <td>✓</td> <td> </td> </tr> <tr class=\"row-even\">\n<td><code>F[:q]</code></td> <td>left permutation <code>Vector</code>\n</td> <td> </td> <td> </td> <td>✓</td> </tr> <tr class=\"row-odd\">\n<td><code>F[:Rs]</code></td> <td>\n<code>Vector</code> of scaling factors</td> <td> </td> <td> </td> <td>✓</td> </tr> <tr class=\"row-even\">\n<td><code>F[:(:)]</code></td> <td>\n<code>(L,U,p,q,Rs)</code> components</td> <td> </td> <td> </td> <td>✓</td> </tr>  </table> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Supported function</th> <th class=\"head\"><code>LU</code></th> <th class=\"head\"><code>LU{T,Tridiagonal{T}}</code></th> <th class=\"head\"><code>UmfpackLU</code></th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>/</code></td> <td>✓</td> <td> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><code>\\</code></td> <td>✓</td> <td>✓</td> <td>✓</td> </tr> <tr class=\"row-even\">\n<td><code>cond</code></td> <td>✓</td> <td> </td> <td>✓</td> </tr> <tr class=\"row-odd\">\n<td><code>det</code></td> <td>✓</td> <td>✓</td> <td>✓</td> </tr> <tr class=\"row-even\">\n<td><code>logdet</code></td> <td>✓</td> <td>✓</td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><code>logabsdet</code></td> <td>✓</td> <td>✓</td> <td> </td> </tr> <tr class=\"row-even\">\n<td><code>size</code></td> <td>✓</td> <td>✓</td> <td> </td> </tr>  </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lufact!\">\n<code>lufact!(A) → LU</code> </dt> <dd>\n<p><code>lufact!</code> is the same as <a class=\"reference internal\" href=\"#Base.lufact\" title=\"Base.lufact\"><code>lufact()</code></a>, but saves space by overwriting the input <code>A</code>, instead of creating a copy. For sparse <code>A</code> the <code>nzval</code> field is not overwritten but the index fields, <code>colptr</code> and <code>rowval</code> are decremented in place, converting from 1-based indices to 0-based indices.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.chol\">\n<code>chol(A[, LU]) → F</code> </dt> <dd>\n<p>Compute the Cholesky factorization of a symmetric positive definite matrix <code>A</code> and return the matrix <code>F</code>. If <code>LU</code> is <code>Val{:U}</code> (Upper), <code>F</code> is of type <code>UpperTriangular</code> and <code>A = F'*F</code>. If <code>LU</code> is <code>Val{:L}</code> (Lower), <code>F</code> is of type <code>LowerTriangular</code> and <code>A = F*F'</code>. <code>LU</code> defaults to <code>Val{:U}</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cholfact\">\n<code>cholfact(A, [LU=:U[,pivot=Val{false}]][;tol=-1.0]) → Cholesky</code> </dt> <dd>\n<p>Compute the Cholesky factorization of a dense symmetric positive (semi)definite matrix <code>A</code> and return either a <code>Cholesky</code> if <code>pivot==Val{false}</code> or <code>CholeskyPivoted</code> if <code>pivot==Val{true}</code>. <code>LU</code> may be <code>:L</code> for using the lower part or <code>:U</code> for the upper part. The default is to use <code>:U</code>. The triangular matrix can be obtained from the factorization <code>F</code> with: <code>F[:L]</code> and <code>F[:U]</code>. The following functions are available for <code>Cholesky</code> objects: <code>size</code>, <code>\\</code>, <code>inv</code>, <code>det</code>. For <code>CholeskyPivoted</code> there is also defined a <code>rank</code>. If <code>pivot==Val{false}</code> a <code>PosDefException</code> exception is thrown in case the matrix is not positive definite. The argument <code>tol</code> determines the tolerance for determining the rank. For negative values, the tolerance is the machine precision.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>cholfact(A; shift=0, perm=Int[]) → CHOLMOD.Factor</code> </dt> <dd>\n<p>Compute the Cholesky factorization of a sparse positive definite matrix <code>A</code>. A fill-reducing permutation is used. <code>F = cholfact(A)</code> is most frequently used to solve systems of equations with <code>F\\b</code>, but also the methods <code>diag</code>, <code>det</code>, <code>logdet</code> are defined for <code>F</code>. You can also extract individual factors from <code>F</code>, using <code>F[:L]</code>. However, since pivoting is on by default, the factorization is internally represented as <code>A == P'*L*L'*P</code> with a permutation matrix <code>P</code>; using just <code>L</code> without accounting for <code>P</code> will give incorrect answers. To include the effects of permutation, it’s typically preferable to extact “combined” factors like <code>PtL = F[:PtL]</code> (the equivalent of <code>P'*L</code>) and <code>LtP = F[:UP]</code> (the equivalent of <code>L'*P</code>).</p> <p>Setting optional <code>shift</code> keyword argument computes the factorization of <code>A+shift*I</code> instead of <code>A</code>. If the <code>perm</code> argument is nonempty, it should be a permutation of <code>1:size(A,1)</code> giving the ordering to use (instead of CHOLMOD’s default AMD ordering).</p> <p>The function calls the C library CHOLMOD and many other functions from the library are wrapped but not exported.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cholfact!\">\n<code>cholfact!(A [,LU=:U [,pivot=Val{false}]][;tol=-1.0]) → Cholesky</code> </dt> <dd>\n<p><code>cholfact!</code> is the same as <a class=\"reference internal\" href=\"#Base.cholfact\" title=\"Base.cholfact\"><code>cholfact()</code></a>, but saves space by overwriting the input <code>A</code>, instead of creating a copy. <code>cholfact!</code> can also reuse the symbolic factorization from a different matrix <code>F</code> with the same structure when used as: <code>cholfact!(F::CholmodFactor, A)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ldltfact\">\n<code>ldltfact(::SymTridiagonal) → LDLt</code> </dt> <dd>\n<p>Compute an <code>LDLt</code> factorization of a real symmetric tridiagonal matrix such that <code>A = L*Diagonal(d)*L'</code> where <code>L</code> is a unit lower triangular matrix and <code>d</code> is a vector. The main use of an <code>LDLt</code> factorization <code>F = ldltfact(A)</code> is to solve the linear system of equations <code>Ax = b</code> with <code>F\\b</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>ldltfact(::Union{SparseMatrixCSC, Symmetric{Float64, SparseMatrixCSC{Flaot64, SuiteSparse_long}}, Hermitian{Complex{Float64}, SparseMatrixCSC{Complex{Float64}, SuiteSparse_long}}}; shift=0, perm=Int[]) → CHOLMOD.Factor</code> </dt> <dd>\n<p>Compute the <code>LDLt</code> factorization of a sparse symmetric or Hermitian matrix. A fill-reducing permutation is used. <code>F = ldltfact(A)</code> is most frequently used to solve systems of equations <code>A*x = b</code> with <code>F\\b</code>, but also the methods <code>diag</code>, <code>det</code>, <code>logdet</code> are defined for <code>F</code>. You can also extract individual factors from <code>F</code>, using <code>F[:L]</code>. However, since pivoting is on by default, the factorization is internally represented as <code>A == P'*L*D*L'*P</code> with a permutation matrix <code>P</code>; using just <code>L</code> without accounting for <code>P</code> will give incorrect answers. To include the effects of permutation, it’s typically preferable to extact “combined” factors like <code>PtL = F[:PtL]</code> (the equivalent of <code>P'*L</code>) and <code>LtP = F[:UP]</code> (the equivalent of <code>L'*P</code>). The complete list of supported factors is <code>:L, :PtL, :D, :UP, :U, :LD, :DU, :PtLD, :DUP</code>.</p> <p>Setting optional <code>shift</code> keyword argument computes the factorization of <code>A+shift*I</code> instead of <code>A</code>. If the <code>perm</code> argument is nonempty, it should be a permutation of <code>1:size(A,1)</code> giving the ordering to use (instead of CHOLMOD’s default AMD ordering).</p> <p>The function calls the C library CHOLMOD and many other functions from the library are wrapped but not exported.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ldltfact!\">\n<code>ldltfact!(::SymTridiagonal) → LDLt</code> </dt> <dd>\n<p>Same as <code>ldltfact</code>, but saves space by overwriting the input <code>A</code>, instead of creating a copy.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.qr\">\n<code>qr(A[, pivot=Val{false}][;thin=true]) → Q, R, [p]</code> </dt> <dd>\n<p>Compute the (pivoted) QR factorization of <code>A</code> such that either <code>A = Q*R</code> or <code>A[:,p] = Q*R</code>. Also see <code>qrfact</code>. The default is to compute a thin factorization. Note that <code>R</code> is not extended with zeros when the full <code>Q</code> is requested.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.qrfact\">\n<code>qrfact(A[, pivot=Val{false}]) → F</code> </dt> <dd>\n<p>Computes the QR factorization of <code>A</code>. The return type of <code>F</code> depends on the element type of <code>A</code> and whether pivoting is specified (with <code>pivot==Val{true}</code>).</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Return type</th> <th class=\"head\"><code>eltype(A)</code></th> <th class=\"head\"><code>pivot</code></th> <th class=\"head\">Relationship between <code>F</code> and <code>A</code>\n</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>QR</code></td> <td>not <code>BlasFloat</code>\n</td> <td>either</td> <td><code>A==F[:Q]*F[:R]</code></td> </tr> <tr class=\"row-odd\">\n<td><code>QRCompactWY</code></td> <td><code>BlasFloat</code></td> <td><code>Val{false}</code></td> <td><code>A==F[:Q]*F[:R]</code></td> </tr> <tr class=\"row-even\">\n<td><code>QRPivoted</code></td> <td><code>BlasFloat</code></td> <td><code>Val{true}</code></td> <td><code>A[:,F[:p]]==F[:Q]*F[:R]</code></td> </tr>  </table> <p><code>BlasFloat</code> refers to any of: <code>Float32</code>, <code>Float64</code>, <code>Complex64</code> or <code>Complex128</code>.</p> <p>The individual components of the factorization <code>F</code> can be accessed by indexing:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> <th class=\"head\"><code>QR</code></th> <th class=\"head\"><code>QRCompactWY</code></th> <th class=\"head\"><code>QRPivoted</code></th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>F[:Q]</code></td> <td>\n<code>Q</code> (orthogonal/unitary) part of <code>QR</code>\n</td> <td>✓ (<code>QRPackedQ</code>)</td> <td>✓ (<code>QRCompactWYQ</code>)</td> <td>✓ (<code>QRPackedQ</code>)</td> </tr> <tr class=\"row-odd\">\n<td><code>F[:R]</code></td> <td>\n<code>R</code> (upper right triangular) part of <code>QR</code>\n</td> <td>✓</td> <td>✓</td> <td>✓</td> </tr> <tr class=\"row-even\">\n<td><code>F[:p]</code></td> <td>pivot <code>Vector</code>\n</td> <td> </td> <td> </td> <td>✓</td> </tr> <tr class=\"row-odd\">\n<td><code>F[:P]</code></td> <td>(pivot) permutation <code>Matrix</code>\n</td> <td> </td> <td> </td> <td>✓</td> </tr>  </table> <p>The following functions are available for the <code>QR</code> objects: <code>size</code>, <code>\\</code>. When <code>A</code> is rectangular, <code>\\</code> will return a least squares solution and if the solution is not unique, the one with smallest norm is returned.</p> <p>Multiplication with respect to either thin or full <code>Q</code> is allowed, i.e. both <code>F[:Q]*F[:R]</code> and <code>F[:Q]*A</code> are supported. A <code>Q</code> matrix can be converted into a regular matrix with <a class=\"reference internal\" href=\"#Base.full\" title=\"Base.full\"><code>full()</code></a> which has a named argument <code>thin</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p><code>qrfact</code> returns multiple types because LAPACK uses several representations that minimize the memory storage requirements of products of Householder elementary reflectors, so that the <code>Q</code> and <code>R</code> matrices can be stored compactly rather as two separate dense matrices.</p> <p>The data contained in <code>QR</code> or <code>QRPivoted</code> can be used to construct the <code>QRPackedQ</code> type, which is a compact representation of the rotation matrix:</p> <div class=\"math\"> \\[Q = \\prod_{i=1}^{\\min(m,n)} (I - \\tau_i v_i v_i^T)\\]</div> <p>where <span class=\"math\">\\(\\tau_i\\)</span> is the scale factor and <span class=\"math\">\\(v_i\\)</span> is the projection vector associated with the <span class=\"math\">\\(i^{th}\\)</span> Householder elementary reflector.</p> <p>The data contained in <code>QRCompactWY</code> can be used to construct the <code>QRCompactWYQ</code> type, which is a compact representation of the rotation matrix</p> <div class=\"math\"> \\[Q = I + Y T Y^T\\]</div> <p class=\"last\">where <code>Y</code> is <span class=\"math\">\\(m \\times r\\)</span> lower trapezoidal and <code>T</code> is <span class=\"math\">\\(r \\times r\\)</span> upper triangular. The <em>compact WY</em> representation <a class=\"reference internal\" href=\"#schreiber1989\" id=\"id1\">[Schreiber1989]</a> is not to be confused with the older, <em>WY</em> representation <a class=\"reference internal\" href=\"#bischof1987\" id=\"id2\">[Bischof1987]</a>. (The LAPACK documentation uses <code>V</code> in lieu of <code>Y</code>.)</p> </div> <table class=\"docutils citation\" frame=\"void\" id=\"bischof1987\" rules=\"none\">   <tr>\n<td class=\"label\">[Bischof1987]</td>\n<td>\n<em>(<a class=\"fn-backref\" href=\"#id2\">1</a>, <a class=\"fn-backref\" href=\"#id3\">2</a>)</em> C Bischof and C Van Loan, “The WY representation for products of Householder matrices”, SIAM J Sci Stat Comput 8 (1987), s2-s13. <a class=\"reference external\" href=\"http://dx.doi.org/10.1137/0908009\">doi:10.1137/0908009</a>\n</td>\n</tr>  </table> <table class=\"docutils citation\" frame=\"void\" id=\"schreiber1989\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[Schreiber1989]</a></td>\n<td>R Schreiber and C Van Loan, “A storage-efficient WY representation for products of Householder transformations”, SIAM J Sci Stat Comput 10 (1989), 53-57. <a class=\"reference external\" href=\"http://dx.doi.org/10.1137/0910005\">doi:10.1137/0910005</a>\n</td>\n</tr>  </table> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>qrfact(A) → SPQR.Factorization</code> </dt> <dd>\n<p>Compute the QR factorization of a sparse matrix <code>A</code>. A fill-reducing permutation is used. The main application of this type is to solve least squares problems with <code>\\</code>. The function calls the C library SPQR and a few additional functions from the library are wrapped but not exported.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.qrfact!\">\n<code>qrfact!(A[, pivot=Val{false}])</code> </dt> <dd>\n<p><code>qrfact!</code> is the same as <a class=\"reference internal\" href=\"#Base.qrfact\" title=\"Base.qrfact\"><code>qrfact()</code></a> when <code>A</code> is a subtype of <code>StridedMatrix</code>, but saves space by overwriting the input <code>A</code>, instead of creating a copy.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>full(QRCompactWYQ[, thin=true]) → Matrix</code> </dt> <dd>\n<p>Converts an orthogonal or unitary matrix stored as a <code>QRCompactWYQ</code> object, i.e. in the compact WY format <a class=\"reference internal\" href=\"#bischof1987\" id=\"id3\">[Bischof1987]</a>, to a dense matrix.</p> <p>Optionally takes a <code>thin</code> Boolean argument, which if <code>true</code> omits the columns that span the rows of <code>R</code> in the QR factorization that are zero. The resulting matrix is the <code>Q</code> in a thin QR factorization (sometimes called the reduced QR factorization). If <code>false</code>, returns a <code>Q</code> that spans all rows of <code>R</code> in its corresponding QR factorization.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bkfact\">\n<code>bkfact(A) → BunchKaufman</code> </dt> <dd>\n<p>Compute the Bunch-Kaufman <a class=\"reference internal\" href=\"#bunch1977\" id=\"id4\">[Bunch1977]</a> factorization of a real symmetric or complex Hermitian matrix <code>A</code> and return a <code>BunchKaufman</code> object. The following functions are available for <code>BunchKaufman</code> objects: <code>size</code>, <code>\\</code>, <code>inv</code>, <code>issym</code>, <code>ishermitian</code>.</p> <table class=\"docutils citation\" frame=\"void\" id=\"bunch1977\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id4\">[Bunch1977]</a></td>\n<td>J R Bunch and L Kaufman, Some stable methods for calculating inertia and solving symmetric linear systems, Mathematics of Computation 31:137 (1977), 163-179. <a class=\"reference external\" href=\"http://www.ams.org/journals/mcom/1977-31-137/S0025-5718-1977-0428694-0\">url</a>.</td>\n</tr>  </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.bkfact!\">\n<code>bkfact!(A) → BunchKaufman</code> </dt> <dd>\n<p><code>bkfact!</code> is the same as <a class=\"reference internal\" href=\"#Base.bkfact\" title=\"Base.bkfact\"><code>bkfact()</code></a>, but saves space by overwriting the input <code>A</code>, instead of creating a copy.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eig\">\n<code>eig(A,[irange,][vl,][vu,][permute=true,][scale=true]) → D, V</code> </dt> <dd>\n<p>Computes eigenvalues and eigenvectors of <code>A</code>. See <a class=\"reference internal\" href=\"#Base.eigfact\" title=\"Base.eigfact\"><code>eigfact()</code></a> for details on the <code>balance</code> keyword argument.</p> <pre data-language=\"julia\">julia&gt; eig([1.0 0.0 0.0; 0.0 3.0 0.0; 0.0 0.0 18.0])\n([1.0,3.0,18.0],\n3x3 Array{Float64,2}:\n 1.0  0.0  0.0\n 0.0  1.0  0.0\n 0.0  0.0  1.0)\n</pre> <p><code>eig</code> is a wrapper around <a class=\"reference internal\" href=\"#Base.eigfact\" title=\"Base.eigfact\"><code>eigfact()</code></a>, extracting all parts of the factorization to a tuple; where possible, using <a class=\"reference internal\" href=\"#Base.eigfact\" title=\"Base.eigfact\"><code>eigfact()</code></a> is recommended.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>eig(A, B) → D, V</code> </dt> <dd>\n<p>Computes generalized eigenvalues and vectors of <code>A</code> with respect to <code>B</code>.</p> <p><code>eig</code> is a wrapper around <a class=\"reference internal\" href=\"#Base.eigfact\" title=\"Base.eigfact\"><code>eigfact()</code></a>, extracting all parts of the factorization to a tuple; where possible, using <a class=\"reference internal\" href=\"#Base.eigfact\" title=\"Base.eigfact\"><code>eigfact()</code></a> is recommended.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eigvals\">\n<code>eigvals(A,[irange,][vl,][vu]) → values</code> </dt> <dd>\n<p>Returns the eigenvalues of <code>A</code>. If <code>A</code> is <code>Symmetric</code>, <code>Hermitian</code> or <code>SymTridiagonal</code>, it is possible to calculate only a subset of the eigenvalues by specifying either a <code>UnitRange</code> <code>irange</code> covering indices of the sorted eigenvalues, or a pair <code>vl</code> and <code>vu</code> for the lower and upper boundaries of the eigenvalues.</p> <p>For general non-symmetric matrices it is possible to specify how the matrix is balanced before the eigenvector calculation. The option <code>permute=true</code> permutes the matrix to become closer to upper triangular, and <code>scale=true</code> scales the matrix by its diagonal elements to make rows and columns moreequal in norm. The default is <code>true</code> for both options.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eigvals!\">\n<code>eigvals!(A,[irange,][vl,][vu]) → values</code> </dt> <dd>\n<p>Same as <code>eigvals</code>, but saves space by overwriting the input <code>A</code> (and <code>B</code>), instead of creating a copy.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eigmax\">\n<code>eigmax(A)</code> </dt> <dd>\n<p>Returns the largest eigenvalue of <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eigmin\">\n<code>eigmin(A)</code> </dt> <dd>\n<p>Returns the smallest eigenvalue of <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eigvecs\">\n<code>eigvecs(A, [eigvals,][permute=true,][scale=true]) → Matrix</code> </dt> <dd>\n<p>Returns a matrix <code>M</code> whose columns are the eigenvectors of <code>A</code>. (The <code>k</code>th eigenvector can be obtained from the slice <code>M[:, k]</code>.) The <code>permute</code> and <code>scale</code> keywords are the same as for <a class=\"reference internal\" href=\"#Base.eigfact\" title=\"Base.eigfact\"><code>eigfact()</code></a>.</p> <p>For <a class=\"reference internal\" href=\"#Base.SymTridiagonal\" title=\"Base.SymTridiagonal\"><code>SymTridiagonal</code></a> matrices, if the optional vector of eigenvalues <code>eigvals</code> is specified, returns the specific corresponding eigenvectors.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eigfact\">\n<code>eigfact(A,[irange,][vl,][vu,][permute=true,][scale=true]) → Eigen</code> </dt> <dd>\n<p>Computes the eigenvalue decomposition of <code>A</code>, returning an <code>Eigen</code> factorization object <code>F</code> which contains the eigenvalues in <code>F[:values]</code> and the eigenvectors in the columns of the matrix <code>F[:vectors]</code>. (The <code>k</code>th eigenvector can be obtained from the slice <code>F[:vectors][:, k]</code>.)</p> <p>The following functions are available for <code>Eigen</code> objects: <code>inv</code>, <code>det</code>.</p> <p>If <code>A</code> is <code>Symmetric</code>, <code>Hermitian</code> or <a class=\"reference internal\" href=\"#Base.SymTridiagonal\" title=\"Base.SymTridiagonal\"><code>SymTridiagonal</code></a>, it is possible to calculate only a subset of the eigenvalues by specifying either a <code>UnitRange</code> <code>irange</code> covering indices of the sorted eigenvalues or a pair <code>vl</code> and <code>vu</code> for the lower and upper boundaries of the eigenvalues.</p> <p>For general nonsymmetric matrices it is possible to specify how the matrix is balanced before the eigenvector calculation. The option <code>permute=true</code> permutes the matrix to become closer to upper triangular, and <code>scale=true</code> scales the matrix by its diagonal elements to make rows and columns more equal in norm. The default is <code>true</code> for both options.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>eigfact(A, B) → GeneralizedEigen</code> </dt> <dd>\n<p>Computes the generalized eigenvalue decomposition of <code>A</code> and <code>B</code>, returning a <code>GeneralizedEigen</code> factorization object <code>F</code> which contains the generalized eigenvalues in <code>F[:values]</code> and the generalized eigenvectors in the columns of the matrix <code>F[:vectors]</code>. (The <code>k</code>th generalized eigenvector can be obtained from the slice <code>F[:vectors][:,\nk]</code>.)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eigfact!\">\n<code>eigfact!(A[, B])</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#Base.eigfact\" title=\"Base.eigfact\"><code>eigfact()</code></a>, but saves space by overwriting the input <code>A</code> (and <code>B</code>), instead of creating a copy.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hessfact\">\n<code>hessfact(A)</code> </dt> <dd>\n<p>Compute the Hessenberg decomposition of <code>A</code> and return a <code>Hessenberg</code> object. If <code>F</code> is the factorization object, the unitary matrix can be accessed with <code>F[:Q]</code> and the Hessenberg matrix with <code>F[:H]</code>. When <code>Q</code> is extracted, the resulting type is the <code>HessenbergQ</code> object, and may be converted to a regular matrix with <a class=\"reference internal\" href=\"#Base.full\" title=\"Base.full\"><code>full()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.hessfact!\">\n<code>hessfact!(A)</code> </dt> <dd>\n<p><code>hessfact!</code> is the same as <a class=\"reference internal\" href=\"#Base.hessfact\" title=\"Base.hessfact\"><code>hessfact()</code></a>, but saves space by overwriting the input <code>A</code>, instead of creating a copy.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.schurfact\">\n<code>schurfact(A) → Schur</code> </dt> <dd>\n<p>Computes the Schur factorization of the matrix <code>A</code>. The (quasi) triangular Schur factor can be obtained from the <code>Schur</code> object <code>F</code> with either <code>F[:Schur]</code> or <code>F[:T]</code> and the unitary/orthogonal Schur vectors can be obtained with <code>F[:vectors]</code> or <code>F[:Z]</code> such that <code>A=F[:vectors]*F[:Schur]*F[:vectors]'</code>. The eigenvalues of <code>A</code> can be obtained with <code>F[:values]</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.schurfact!\">\n<code>schurfact!(A)</code> </dt> <dd>\n<p>Computes the Schur factorization of <code>A</code>, overwriting <code>A</code> in the process. See <a class=\"reference internal\" href=\"#Base.schurfact\" title=\"Base.schurfact\"><code>schurfact()</code></a></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.schur\">\n<code>schur(A) → Schur[:T], Schur[:Z], Schur[:values]</code> </dt> <dd>\n<p>See <a class=\"reference internal\" href=\"#Base.schurfact\" title=\"Base.schurfact\"><code>schurfact()</code></a></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ordschur\">\n<code>ordschur(Q, T, select) → Schur</code> </dt> <dd>\n<p>Reorders the Schur factorization of a real matrix <code>A=Q*T*Q'</code> according to the logical array <code>select</code> returning a Schur object <code>F</code>. The selected eigenvalues appear in the leading diagonal of <code>F[:Schur]</code> and the corresponding leading columns of <code>F[:vectors]</code> form an orthonormal basis of the corresponding right invariant subspace. A complex conjugate pair of eigenvalues must be either both included or excluded via <code>select</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ordschur!\">\n<code>ordschur!(Q, T, select) → Schur</code> </dt> <dd>\n<p>Reorders the Schur factorization of a real matrix <code>A=Q*T*Q'</code>, overwriting <code>Q</code> and <code>T</code> in the process. See <a class=\"reference internal\" href=\"#Base.ordschur\" title=\"Base.ordschur\"><code>ordschur()</code></a></p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>ordschur(S, select) → Schur</code> </dt> <dd>\n<p>Reorders the Schur factorization <code>S</code> of type <code>Schur</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>ordschur!(S, select) → Schur</code> </dt> <dd>\n<p>Reorders the Schur factorization <code>S</code> of type <code>Schur</code>, overwriting <code>S</code> in the process. See <a class=\"reference internal\" href=\"#Base.ordschur\" title=\"Base.ordschur\"><code>ordschur()</code></a></p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>schurfact(A, B) → GeneralizedSchur</code> </dt> <dd>\n<p>Computes the Generalized Schur (or QZ) factorization of the matrices <code>A</code> and <code>B</code>. The (quasi) triangular Schur factors can be obtained from the <code>Schur</code> object <code>F</code> with <code>F[:S]</code> and <code>F[:T]</code>, the left unitary/orthogonal Schur vectors can be obtained with <code>F[:left]</code> or <code>F[:Q]</code> and the right unitary/orthogonal Schur vectors can be obtained with <code>F[:right]</code> or <code>F[:Z]</code> such that <code>A=F[:left]*F[:S]*F[:right]'</code> and <code>B=F[:left]*F[:T]*F[:right]'</code>. The generalized eigenvalues of <code>A</code> and <code>B</code> can be obtained with <code>F[:alpha]./F[:beta]</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>schur(A, B) → GeneralizedSchur[:S], GeneralizedSchur[:T], GeneralizedSchur[:Q], GeneralizedSchur[:Z]</code> </dt> <dd>\n<p>See <a class=\"reference internal\" href=\"#Base.schurfact\" title=\"Base.schurfact\"><code>schurfact()</code></a></p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>ordschur(S, T, Q, Z, select) → GeneralizedSchur</code> </dt> <dd>\n<p>Reorders the Generalized Schur factorization of a matrix <code>(A, B) = (Q*S*Z^{H}, Q*T*Z^{H})</code> according to the logical array <code>select</code> and returns a GeneralizedSchur object <code>GS</code>. The selected eigenvalues appear in the leading diagonal of both <code>(GS[:S], GS[:T])</code> and the left and right unitary/orthogonal Schur vectors are also reordered such that <code>(A, B) = GS[:Q]*(GS[:S], GS[:T])*GS[:Z]^{H}</code> still holds and the generalized eigenvalues of <code>A</code> and <code>B</code> can still be obtained with <code>GS[:alpha]./GS[:beta]</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>ordschur!(S, T, Q, Z, select) → GeneralizedSchur</code> </dt> <dd>\n<p>Reorders the Generalized Schur factorization of a matrix by overwriting the matrices <code>(S, T, Q, Z)</code> in the process. See <a class=\"reference internal\" href=\"#Base.ordschur\" title=\"Base.ordschur\"><code>ordschur()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>ordschur(GS, select) → GeneralizedSchur</code> </dt> <dd>\n<p>Reorders the Generalized Schur factorization of a Generalized Schur object. See <a class=\"reference internal\" href=\"#Base.ordschur\" title=\"Base.ordschur\"><code>ordschur()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>ordschur!(GS, select) → GeneralizedSchur</code> </dt> <dd>\n<p>Reorders the Generalized Schur factorization of a Generalized Schur object by overwriting the object with the new factorization. See <a class=\"reference internal\" href=\"#Base.ordschur\" title=\"Base.ordschur\"><code>ordschur()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.svdfact\">\n<code>svdfact(A[, thin=true]) → SVD</code> </dt> <dd>\n<p>Compute the Singular Value Decomposition (SVD) of <code>A</code> and return an <code>SVD</code> object. <code>U</code>, <code>S</code>, <code>V</code> and <code>Vt</code> can be obtained from the factorization <code>F</code> with <code>F[:U]</code>, <code>F[:S]</code>, <code>F[:V]</code> and <code>F[:Vt]</code>, such that <code>A = U*diagm(S)*Vt</code>. If <code>thin</code> is <code>true</code>, an economy mode decomposition is returned. The algorithm produces <code>Vt</code> and hence <code>Vt</code> is more efficient to extract than <code>V</code>. The default is to produce a thin decomposition.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.svdfact!\">\n<code>svdfact!(A[, thin=true]) → SVD</code> </dt> <dd>\n<p><code>svdfact!</code> is the same as <a class=\"reference internal\" href=\"#Base.svdfact\" title=\"Base.svdfact\"><code>svdfact()</code></a>, but saves space by overwriting the input <code>A</code>, instead of creating a copy. If <code>thin</code> is <code>true</code>, an economy mode decomposition is returned. The default is to produce a thin decomposition.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.svd\">\n<code>svd(A[, thin=true]) → U, S, V</code> </dt> <dd>\n<p>Wrapper around <code>svdfact</code> extracting all parts the factorization to a tuple. Direct use of <code>svdfact</code> is therefore generally more efficient. Computes the SVD of <code>A</code>, returning <code>U</code>, vector <code>S</code>, and <code>V</code> such that <code>A == U*diagm(S)*V'</code>. If <code>thin</code> is <code>true</code>, an economy mode decomposition is returned. The default is to produce a thin decomposition.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.svdvals\">\n<code>svdvals(A)</code> </dt> <dd>\n<p>Returns the singular values of <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.svdvals!\">\n<code>svdvals!(A)</code> </dt> <dd>\n<p>Returns the singular values of <code>A</code>, while saving space by overwriting the input.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>svdfact(A, B) → GeneralizedSVD</code> </dt> <dd>\n<p>Compute the generalized SVD of <code>A</code> and <code>B</code>, returning a <code>GeneralizedSVD</code> Factorization object <code>F</code>, such that <code>A = F[:U]*F[:D1]*F[:R0]*F[:Q]'</code> and <code>B = F[:V]*F[:D2]*F[:R0]*F[:Q]'</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>svd(A, B) → U, V, Q, D1, D2, R0</code> </dt> <dd>\n<p>Wrapper around <code>svdfact</code> extracting all parts the factorization to a tuple. Direct use of <code>svdfact</code> is therefore generally more efficient. The function returns the generalized SVD of <code>A</code> and <code>B</code>, returning <code>U</code>, <code>V</code>, <code>Q</code>, <code>D1</code>, <code>D2</code>, and <code>R0</code> such that <code>A = U*D1*R0*Q'</code> and <code>B = V*D2*R0*Q'</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>svdvals(A, B)</code> </dt> <dd>\n<p>Return only the singular values from the generalized singular value decomposition of <code>A</code> and <code>B</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.givens{T}\">\n<code>givens{T}(::T, ::T, ::Integer, ::Integer) → {Givens, T}</code> </dt> <dd>\n<p>Computes the tuple <code>(G, r) = givens(f, g, i1, i2)</code> where <code>G</code> is a Givens rotation and <code>r</code> is a scalar such that <code>G*x=y</code> with <code>x[i1]=f</code>, <code>x[i2]=g</code>, <code>y[i1]=r</code>, and <code>y[i2]=0</code>. The cosine and sine of the rotation angle can be extracted from the <code>Givens</code> type with <code>G.c</code> and <code>G.s</code> respectively. The arguments <code>f</code> and <code>g</code> can be either <code>Float32</code>, <code>Float64</code>, <code>Complex{Float32}</code>, or <code>Complex{Float64}</code>. The <code>Givens</code> type supports left multiplication <code>G*A</code> and conjugated transpose right multiplication <code>A*G'</code>. The type doesn’t have a <code>size</code> and can therefore be multiplied with matrices of arbitrary size as long as <code>i2&lt;=size(A,2)</code> for <code>G*A</code> or <code>i2&lt;=size(A,1)</code> for <code>A*G'</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>givens{T}(::AbstractArray{T}, ::Integer, ::Integer, ::Integer) → {Givens, T}</code> </dt> <dd>\n<p>Computes the tuple <code>(G, r) = givens(A, i1, i2, col)</code> where <code>G</code> is Givens rotation and <code>r</code> is a scalar such that <code>G*A[:,col]=y</code> with <code>y[i1]=r</code>, and <code>y[i2]=0</code>. The cosine and sine of the rotation angle can be extracted from the <code>Givens</code> type with <code>G.c</code> and <code>G.s</code> respectively. The element type of <code>A</code> can be either <code>Float32</code>, <code>Float64</code>, <code>Complex{Float32}</code>, or <code>Complex{Float64}</code>. The <code>Givens</code> type supports left multiplication <code>G*A</code> and conjugated transpose right multiplication <code>A*G'</code>. The type doesn’t have a <code>size</code> and can therefore be multiplied with matrices of arbitrary size as long as <code>i2&lt;=size(A,2)</code> for <code>G*A</code> or <code>i2&lt;=size(A,1)</code> for <code>A*G'</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.triu\">\n<code>triu(M)</code> </dt> <dd>\n<p>Upper triangle of a matrix.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>triu(M, k)</code> </dt> <dd>\n<p>Returns the upper triangle of <code>M</code> starting from the <code>k</code>th superdiagonal.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.triu!\">\n<code>triu!(M)</code> </dt> <dd>\n<p>Upper triangle of a matrix, overwriting <code>M</code> in the process.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>triu!(M, k)</code> </dt> <dd>\n<p>Returns the upper triangle of <code>M</code> starting from the <code>k</code>th superdiagonal, overwriting <code>M</code> in the process.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.tril\">\n<code>tril(M)</code> </dt> <dd>\n<p>Lower triangle of a matrix.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>tril(M, k)</code> </dt> <dd>\n<p>Returns the lower triangle of <code>M</code> starting from the <code>k</code>th superdiagonal.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.tril!\">\n<code>tril!(M)</code> </dt> <dd>\n<p>Lower triangle of a matrix, overwriting <code>M</code> in the process.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>tril!(M, k)</code> </dt> <dd>\n<p>Returns the lower triangle of <code>M</code> starting from the <code>k</code>th superdiagonal, overwriting <code>M</code> in the process.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.diagind\">\n<code>diagind(M[, k])</code> </dt> <dd>\n<p>A <code>Range</code> giving the indices of the <code>k</code>th diagonal of the matrix <code>M</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.diag\">\n<code>diag(M[, k])</code> </dt> <dd>\n<p>The <code>k</code>th diagonal of a matrix, as a vector. Use <code>diagm</code> to construct a diagonal matrix.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.diagm\">\n<code>diagm(v[, k])</code> </dt> <dd>\n<p>Construct a diagonal matrix and place <code>v</code> on the <code>k</code>th diagonal.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.scale\">\n<code>scale(A, b)</code> </dt> <dt>\n<code>scale(b, A)</code> </dt> <dd>\n<p>Scale an array <code>A</code> by a scalar <code>b</code>, returning a new array.</p> <p>If <code>A</code> is a matrix and <code>b</code> is a vector, then <code>scale(A,b)</code> scales each column <code>i</code> of <code>A</code> by <code>b[i]</code> (similar to <code>A*diagm(b)</code>), while <code>scale(b,A)</code> scales each row <code>i</code> of <code>A</code> by <code>b[i]</code> (similar to <code>diagm(b)*A</code>), returning a new array.</p> <p>Note: for large <code>A</code>, <code>scale</code> can be much faster than <code>A .* b</code> or <code>b .* A</code>, due to the use of BLAS.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.scale!\">\n<code>scale!(A, b)</code> </dt> <dt>\n<code>scale!(b, A)</code> </dt> <dd>\n<p>Scale an array <code>A</code> by a scalar <code>b</code>, similar to <a class=\"reference internal\" href=\"#Base.scale\" title=\"Base.scale\"><code>scale()</code></a> but overwriting <code>A</code> in-place.</p> <p>If <code>A</code> is a matrix and <code>b</code> is a vector, then <code>scale!(A,b)</code> scales each column <code>i</code> of <code>A</code> by <code>b[i]</code> (similar to <code>A*diagm(b)</code>), while <code>scale!(b,A)</code> scales each row <code>i</code> of <code>A</code> by <code>b[i]</code> (similar to <code>diagm(b)*A</code>), again operating in-place on <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Tridiagonal\">\n<code>Tridiagonal(dl, d, du)</code> </dt> <dd>\n<p>Construct a tridiagonal matrix from the lower diagonal, diagonal, and upper diagonal, respectively. The result is of type <code>Tridiagonal</code> and provides efficient specialized linear solvers, but may be converted into a regular matrix with <a class=\"reference internal\" href=\"#Base.full\" title=\"Base.full\"><code>full()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.Bidiagonal\">\n<code>Bidiagonal(dv, ev, isupper)</code> </dt> <dd>\n<p>Constructs an upper (<code>isupper=true</code>) or lower (<code>isupper=false</code>) bidiagonal matrix using the given diagonal (<code>dv</code>) and off-diagonal (<code>ev</code>) vectors. The result is of type <code>Bidiagonal</code> and provides efficient specialized linear solvers, but may be converted into a regular matrix with <a class=\"reference internal\" href=\"#Base.full\" title=\"Base.full\"><code>full()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.SymTridiagonal\">\n<code>SymTridiagonal(d, du)</code> </dt> <dd>\n<p>Construct a real symmetric tridiagonal matrix from the diagonal and upper diagonal, respectively. The result is of type <code>SymTridiagonal</code> and provides efficient specialized eigensolvers, but may be converted into a regular matrix with <a class=\"reference internal\" href=\"#Base.full\" title=\"Base.full\"><code>full()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.rank\">\n<code>rank(M)</code> </dt> <dd>\n<p>Compute the rank of a matrix.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.norm\">\n<code>norm(A[, p])</code> </dt> <dd>\n<p>Compute the <code>p</code>-norm of a vector or the operator norm of a matrix <code>A</code>, defaulting to the <code>p=2</code>-norm.</p> <p>For vectors, <code>p</code> can assume any numeric value (even though not all values produce a mathematically valid vector norm). In particular, <code>norm(A, Inf)</code> returns the largest value in <code>abs(A)</code>, whereas <code>norm(A, -Inf)</code> returns the smallest.</p> <p>For matrices, the matrix norm induced by the vector <code>p</code>-norm is used, where valid values of <code>p</code> are <code>1</code>, <code>2</code>, or <code>Inf</code>. (Note that for sparse matrices, <code>p=2</code> is currently not implemented.) Use <a class=\"reference internal\" href=\"#Base.vecnorm\" title=\"Base.vecnorm\"><code>vecnorm()</code></a> to compute the Frobenius norm.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.vecnorm\">\n<code>vecnorm(A[, p])</code> </dt> <dd>\n<p>For any iterable container <code>A</code> (including arrays of any dimension) of numbers (or any element type for which <code>norm</code> is defined), compute the <code>p</code>-norm (defaulting to <code>p=2</code>) as if <code>A</code> were a vector of the corresponding length.</p> <p>For example, if <code>A</code> is a matrix and <code>p=2</code>, then this is equivalent to the Frobenius norm.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.cond\">\n<code>cond(M[, p])</code> </dt> <dd>\n<p>Condition number of the matrix <code>M</code>, computed using the operator <code>p</code>-norm. Valid values for <code>p</code> are <code>1</code>, <code>2</code> (default), or <code>Inf</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.condskeel\">\n<code>condskeel(M[, x, p])</code> </dt> <dd>\n<div class=\"math\"> \\[\\begin{split}\\kappa_S(M, p) &amp; = \\left\\Vert \\left\\vert M \\right\\vert \\left\\vert M^{-1} \\right\\vert \\right\\Vert_p \\\\ \\kappa_S(M, x, p) &amp; = \\left\\Vert \\left\\vert M \\right\\vert \\left\\vert M^{-1} \\right\\vert \\left\\vert x \\right\\vert \\right\\Vert_p\\end{split}\\]</div> <p>Skeel condition number <span class=\"math\">\\(\\kappa_S\\)</span> of the matrix <code>M</code>, optionally with respect to the vector <code>x</code>, as computed using the operator <code>p</code>-norm. <code>p</code> is <code>Inf</code> by default, if not provided. Valid values for <code>p</code> are <code>1</code>, <code>2</code>, or <code>Inf</code>.</p> <p>This quantity is also known in the literature as the Bauer condition number, relative condition number, or componentwise relative condition number.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.trace\">\n<code>trace(M)</code> </dt> <dd>\n<p>Matrix trace</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.det\">\n<code>det(M)</code> </dt> <dd>\n<p>Matrix determinant</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.logdet\">\n<code>logdet(M)</code> </dt> <dd>\n<p>Log of matrix determinant. Equivalent to <code>log(det(M))</code>, but may provide increased accuracy and/or speed.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.logabsdet\">\n<code>logabsdet(M)</code> </dt> <dd>\n<p>Log of absolute value of determinant of real matrix. Equivalent to <code>(log(abs(det(M))), sign(det(M)))</code>, but may provide increased accuracy and/or speed.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.inv\">\n<code>inv(M)</code> </dt> <dd>\n<p>Matrix inverse</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.pinv\">\n<code>pinv(M[, tol])</code> </dt> <dd>\n<p>Computes the Moore-Penrose pseudoinverse.</p> <p>For matrices <code>M</code> with floating point elements, it is convenient to compute the pseudoinverse by inverting only singular values above a given threshold, <code>tol</code>.</p> <p>The optimal choice of <code>tol</code> varies both with the value of <code>M</code> and the intended application of the pseudoinverse. The default value of <code>tol</code> is <code>eps(real(float(one(eltype(M)))))*maximum(size(A))</code>, which is essentially machine epsilon for the real part of a matrix element multiplied by the larger matrix dimension. For inverting dense ill-conditioned matrices in a least-squares sense, <code>tol = sqrt(eps(real(float(one(eltype(M))))))</code> is recommended.</p> <p>For more information, see <a class=\"reference internal\" href=\"#issue8859\" id=\"id5\">[issue8859]</a>, <a class=\"reference internal\" href=\"#b96\" id=\"id6\">[B96]</a>, <a class=\"reference internal\" href=\"#s84\" id=\"id7\">[S84]</a>, <a class=\"reference internal\" href=\"#ky88\" id=\"id8\">[KY88]</a>.</p> <table class=\"docutils citation\" frame=\"void\" id=\"issue8859\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id5\">[issue8859]</a></td>\n<td>Issue 8859, “Fix least squares”, <a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/pull/8859\">https://github.com/JuliaLang/julia/pull/8859</a>\n</td>\n</tr>  </table> <table class=\"docutils citation\" frame=\"void\" id=\"b96\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id6\">[B96]</a></td>\n<td>Åke Björck, “Numerical Methods for Least Squares Problems”, SIAM Press, Philadelphia, 1996, “Other Titles in Applied Mathematics”, Vol. 51. <a class=\"reference external\" href=\"http://epubs.siam.org/doi/book/10.1137/1.9781611971484\">doi:10.1137/1.9781611971484</a>\n</td>\n</tr>  </table> <table class=\"docutils citation\" frame=\"void\" id=\"s84\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id7\">[S84]</a></td>\n<td>G. W. Stewart, “Rank Degeneracy”, SIAM Journal on Scientific and Statistical Computing, 5(2), 1984, 403-413. <a class=\"reference external\" href=\"http://epubs.siam.org/doi/abs/10.1137/0905030\">doi:10.1137/0905030</a>\n</td>\n</tr>  </table> <table class=\"docutils citation\" frame=\"void\" id=\"ky88\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id8\">[KY88]</a></td>\n<td>Konstantinos Konstantinides and Kung Yao, “Statistical analysis of effective singular values in matrix rank determination”, IEEE Transactions on Acoustics, Speech and Signal Processing, 36(5), 1988, 757-763. <a class=\"reference external\" href=\"http://dx.doi.org/10.1109/29.1585\">doi:10.1109/29.1585</a>\n</td>\n</tr>  </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.nullspace\">\n<code>nullspace(M)</code> </dt> <dd>\n<p>Basis for nullspace of <code>M</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.repmat\">\n<code>repmat(A, n, m)</code> </dt> <dd>\n<p>Construct a matrix by repeating the given matrix <code>n</code> times in dimension 1 and <code>m</code> times in dimension 2.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.repeat\">\n<code>repeat(A, inner = Int[], outer = Int[])</code> </dt> <dd>\n<p>Construct an array by repeating the entries of <code>A</code>. The i-th element of <code>inner</code> specifies the number of times that the individual entries of the i-th dimension of <code>A</code> should be repeated. The i-th element of <code>outer</code> specifies the number of times that a slice along the i-th dimension of <code>A</code> should be repeated.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.kron\">\n<code>kron(A, B)</code> </dt> <dd>\n<p>Kronecker tensor product of two vectors or two matrices.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.blkdiag\">\n<code>blkdiag(A...)</code> </dt> <dd>\n<p>Concatenate matrices block-diagonally. Currently only implemented for sparse matrices.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.linreg\">\n<code>linreg(x, y) → a, b</code> </dt> <dd>\n<p>Perform linear regression. Returns <code>a</code> and <code>b</code> such that <code>a + b*x</code> is the closest straight line to the given points <code>(x, y)</code>, i.e., such that the squared error between <code>y</code> and <code>a + b*x</code> is minimized.</p> <p><strong>Example</strong>:</p> <pre data-language=\"julia\">using PyPlot\nx = [1.0:12.0;]\ny = [5.5, 6.3, 7.6, 8.8, 10.9, 11.79, 13.48, 15.02, 17.77, 20.81, 22.0, 22.99]\na, b = linreg(x, y)          # Linear regression\nplot(x, y, \"o\")              # Plot (x, y) points\nplot(x, [a+b*i for i in x])  # Plot line determined by linear regression\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>linreg(x, y, w)</code> </dt> <dd>\n<p>Weighted least-squares linear regression.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.expm\">\n<code>expm(A)</code> </dt> <dd>\n<p>Compute the matrix exponential of <code>A</code>, defined by</p> <div class=\"math\"> \\[e^A = \\sum_{n=0}^{\\infty} \\frac{A^n}{n!}.\\]</div> <p>For symmetric or Hermitian <code>A</code>, an eigendecomposition (<a class=\"reference internal\" href=\"#Base.eigfact\" title=\"Base.eigfact\"><code>eigfact()</code></a>) is used, otherwise the scaling and squaring algorithm (see <a class=\"reference internal\" href=\"#h05\" id=\"id9\">[H05]</a>) is chosen.</p> <table class=\"docutils citation\" frame=\"void\" id=\"h05\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id9\">[H05]</a></td>\n<td>Nicholas J. Higham, “The squaring and scaling method for the matrix exponential revisited”, SIAM Journal on Matrix Analysis and Applications, 26(4), 2005, 1179-1193. <a class=\"reference external\" href=\"http://dx.doi.org/10.1137/090768539\">doi:10.1137/090768539</a>\n</td>\n</tr>  </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.logm\">\n<code>logm(A)</code> </dt> <dd>\n<p>If <code>A</code> has no negative real eigenvalue, compute the principal matrix logarithm of <code>A</code>, i.e. the unique matrix <span class=\"math\">\\(X\\)</span> such that <span class=\"math\">\\(e^X = A\\)</span> and <span class=\"math\">\\(-\\pi &lt; Im(\\lambda) &lt; \\pi\\)</span> for all the eigenvalues <span class=\"math\">\\(\\lambda\\)</span> of <span class=\"math\">\\(X\\)</span>. If <code>A</code> has nonpositive eigenvalues, a warning is printed and whenever possible a nonprincipal matrix function is returned.</p> <p>If <code>A</code> is symmetric or Hermitian, its eigendecomposition (<a class=\"reference internal\" href=\"#Base.eigfact\" title=\"Base.eigfact\"><code>eigfact()</code></a>) is used, if <code>A</code> is triangular an improved version of the inverse scaling and squaring method is employed (see <a class=\"reference internal\" href=\"#ah12\" id=\"id10\">[AH12]</a> and <a class=\"reference internal\" href=\"#ahr13\" id=\"id11\">[AHR13]</a>). For general matrices, the complex Schur form (<a class=\"reference internal\" href=\"#Base.schur\" title=\"Base.schur\"><code>schur()</code></a>) is computed and the triangular algorithm is used on the triangular factor.</p> <table class=\"docutils citation\" frame=\"void\" id=\"ah12\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id10\">[AH12]</a></td>\n<td>Awad H. Al-Mohy and Nicholas J. Higham, “Improved inverse scaling and squaring algorithms for the matrix logarithm”, SIAM Journal on Scientific Computing, 34(4), 2012, C153-C169. <a class=\"reference external\" href=\"http://dx.doi.org/10.1137/110852553\">doi:10.1137/110852553</a>\n</td>\n</tr>  </table> <table class=\"docutils citation\" frame=\"void\" id=\"ahr13\" rules=\"none\">   <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id11\">[AHR13]</a></td>\n<td>Awad H. Al-Mohy, Nicholas J. Higham and Samuel D. Relton, “Computing the Fréchet derivative of the matrix logarithm and estimating the condition number”, SIAM Journal on Scientific Computing, 35(4), 2013, C394-C410. <a class=\"reference external\" href=\"http://dx.doi.org/10.1137/120885991\">doi:10.1137/120885991</a>\n</td>\n</tr>  </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sqrtm\">\n<code>sqrtm(A)</code> </dt> <dd>\n<p>If <code>A</code> has no negative real eigenvalues, compute the principal matrix square root of <code>A</code>, that is the unique matrix <span class=\"math\">\\(X\\)</span> with eigenvalues having positive real part such that <span class=\"math\">\\(X^2 = A\\)</span>. Otherwise, a nonprincipal square root is returned.</p> <p>If <code>A</code> is symmetric or Hermitian, its eigendecomposition (<a class=\"reference internal\" href=\"#Base.eigfact\" title=\"Base.eigfact\"><code>eigfact()</code></a>) is used to compute the square root. Otherwise, the square root is determined by means of the Björck-Hammarling method, which computes the complex Schur form (<a class=\"reference internal\" href=\"#Base.schur\" title=\"Base.schur\"><code>schur()</code></a>) and then the complex square root of the triangular factor.</p> <table class=\"docutils citation\" frame=\"void\" id=\"bh83\" rules=\"none\">   <tr>\n<td class=\"label\">[BH83]</td>\n<td>Åke Björck and Sven Hammarling, “A Schur method for the square root of a matrix”, Linear Algebra and its Applications, 52-53, 1983, 127-140. <a class=\"reference external\" href=\"http://dx.doi.org/10.1016/0024-3795(83)80010-X\">doi:10.1016/0024-3795(83)80010-X</a>\n</td>\n</tr>  </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.lyap\">\n<code>lyap(A, C)</code> </dt> <dd>\n<p>Computes the solution <code>X</code> to the continuous Lyapunov equation <code>AX + XA' + C = 0</code>, where no eigenvalue of <code>A</code> has a zero real part and no two eigenvalues are negative complex conjugates of each other.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.sylvester\">\n<code>sylvester(A, B, C)</code> </dt> <dd>\n<p>Computes the solution <code>X</code> to the Sylvester equation <code>AX + XB + C = 0</code>, where <code>A</code>, <code>B</code> and <code>C</code> have compatible dimensions and <code>A</code> and <code>-B</code> have no eigenvalues with equal real part.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.issym\">\n<code>issym(A) → Bool</code> </dt> <dd>\n<p>Test whether a matrix is symmetric.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isposdef\">\n<code>isposdef(A) → Bool</code> </dt> <dd>\n<p>Test whether a matrix is positive definite.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isposdef!\">\n<code>isposdef!(A) → Bool</code> </dt> <dd>\n<p>Test whether a matrix is positive definite, overwriting <code>A</code> in the processes.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.istril\">\n<code>istril(A) → Bool</code> </dt> <dd>\n<p>Test whether a matrix is lower triangular.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.istriu\">\n<code>istriu(A) → Bool</code> </dt> <dd>\n<p>Test whether a matrix is upper triangular.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.isdiag\">\n<code>isdiag(A) → Bool</code> </dt> <dd>\n<p>Test whether a matrix is diagonal.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ishermitian\">\n<code>ishermitian(A) → Bool</code> </dt> <dd>\n<p>Test whether a matrix is Hermitian.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.transpose\">\n<code>transpose(A)</code> </dt> <dd>\n<p>The transposition operator (<code>.'</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.transpose!\">\n<code>transpose!(dest, src)</code> </dt> <dd>\n<p>Transpose array <code>src</code> and store the result in the preallocated array <code>dest</code>, which should have a size corresponding to <code>(size(src,2),size(src,1))</code>. No in-place transposition is supported and unexpected results will happen if <code>src</code> and <code>dest</code> have overlapping memory regions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ctranspose\">\n<code>ctranspose(A)</code> </dt> <dd>\n<p>The conjugate transposition operator (<code>'</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.ctranspose!\">\n<code>ctranspose!(dest, src)</code> </dt> <dd>\n<p>Conjugate transpose array <code>src</code> and store the result in the preallocated array <code>dest</code>, which should have a size corresponding to <code>(size(src,2),size(src,1))</code>. No in-place transposition is supported and unexpected results will happen if <code>src</code> and <code>dest</code> have overlapping memory regions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.eigs\">\n<code>eigs(A; nev=6, ncv=max(20, 2*nev+1), which=\"LM\", tol=0.0, maxiter=300, sigma=nothing, ritzvec=true, v0=zeros((0, ))) -&gt; (d, [v, ]nconv, niter, nmult, resid)</code> </dt> <dd>\n<p>Computes eigenvalues <code>d</code> of <code>A</code> using Lanczos or Arnoldi iterations for real symmetric or general nonsymmetric matrices respectively.</p> <p>The following keyword arguments are supported:</p> <ul> <li>\n<code>nev</code>: Number of eigenvalues </li> <li>\n<code>ncv</code>: Number of Krylov vectors used in the computation; should satisfy <code>nev+1 &lt;= ncv &lt;= n</code> for real symmetric problems and <code>nev+2 &lt;= ncv &lt;= n</code> for other problems, where <code>n</code> is the size of the input matrix <code>A</code>. The default is <code>ncv = max(20,2*nev+1)</code>. Note that these restrictions limit the input matrix <code>A</code> to be of dimension at least 2. </li> <li>\n<p class=\"first\"><code>which</code>: type of eigenvalues to compute. See the note below.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\"><code>which</code></th> <th class=\"head\">type of eigenvalues</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>:LM</code></td> <td>eigenvalues of largest magnitude (default)</td> </tr> <tr class=\"row-odd\">\n<td><code>:SM</code></td> <td>eigenvalues of smallest magnitude</td> </tr> <tr class=\"row-even\">\n<td><code>:LR</code></td> <td>eigenvalues of largest real part</td> </tr> <tr class=\"row-odd\">\n<td><code>:SR</code></td> <td>eigenvalues of smallest real part</td> </tr> <tr class=\"row-even\">\n<td><code>:LI</code></td> <td>eigenvalues of largest imaginary part (nonsymmetric or complex <code>A</code> only)</td> </tr> <tr class=\"row-odd\">\n<td><code>:SI</code></td> <td>eigenvalues of smallest imaginary part (nonsymmetric or complex <code>A</code> only)</td> </tr> <tr class=\"row-even\">\n<td><code>:BE</code></td> <td>compute half of the eigenvalues from each end of the spectrum, biased in favor of the high end. (real symmetric <code>A</code> only)</td> </tr>  </table> </li> <li>\n<code>tol</code>: tolerance (<span class=\"math\">\\(tol \\le 0.0\\)</span> defaults to <code>DLAMCH('EPS')</code>) </li> <li>\n<code>maxiter</code>: Maximum number of iterations (default = 300) </li> <li>\n<code>sigma</code>: Specifies the level shift used in inverse iteration. If <code>nothing</code> (default), defaults to ordinary (forward) iterations. Otherwise, find eigenvalues close to <code>sigma</code> using shift and invert iterations. </li> <li>\n<code>ritzvec</code>: Returns the Ritz vectors <code>v</code> (eigenvectors) if <code>true</code> </li> <li>\n<code>v0</code>: starting vector from which to start the iterations </li> </ul> <p><code>eigs</code> returns the <code>nev</code> requested eigenvalues in <code>d</code>, the corresponding Ritz vectors <code>v</code> (only if <code>ritzvec=true</code>), the number of converged eigenvalues <code>nconv</code>, the number of iterations <code>niter</code> and the number of matrix vector multiplications <code>nmult</code>, as well as the final residual vector <code>resid</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>The <code>sigma</code> and <code>which</code> keywords interact: the description of eigenvalues searched for by <code>which</code> do _not_ necessarily refer to the eigenvalues of <code>A</code>, but rather the linear operator constructed by the specification of the iteration mode implied by <code>sigma</code>.</p> <table class=\"last docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\"><code>sigma</code></th> <th class=\"head\">iteration mode</th> <th class=\"head\">\n<code>which</code> refers to eigenvalues of</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>nothing</code></td> <td>ordinary (forward)</td> <td><span class=\"math\">\\(A\\)</span></td> </tr> <tr class=\"row-odd\">\n<td>real or complex</td> <td>inverse with level shift <code>sigma</code>\n</td> <td><span class=\"math\">\\((A - \\sigma I )^{-1}\\)</span></td> </tr>  </table> </div> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>eigs(A, B; nev=6, ncv=max(20, 2*nev+1), which=\"LM\", tol=0.0, maxiter=300, sigma=nothing, ritzvec=true, v0=zeros((0, ))) -&gt; (d, [v, ]nconv, niter, nmult, resid)</code> </dt> <dd>\n<p>Computes generalized eigenvalues <code>d</code> of <code>A</code> and <code>B</code> using Lanczos or Arnoldi iterations for real symmetric or general nonsymmetric matrices respectively.</p> <p>The following keyword arguments are supported:</p> <ul> <li>\n<code>nev</code>: Number of eigenvalues </li> <li>\n<code>ncv</code>: Number of Krylov vectors used in the computation; should satisfy <code>nev+1 &lt;= ncv &lt;= n</code> for real symmetric problems and <code>nev+2 &lt;= ncv &lt;= n</code> for other problems, where <code>n</code> is the size of the input matrices <code>A</code> and <code>B</code>. The default is <code>ncv = max(20,2*nev+1)</code>. Note that these restrictions limit the input matrix <code>A</code> to be of dimension at least 2. </li> <li>\n<p class=\"first\"><code>which</code>: type of eigenvalues to compute. See the note below.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\"><code>which</code></th> <th class=\"head\">type of eigenvalues</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>:LM</code></td> <td>eigenvalues of largest magnitude (default)</td> </tr> <tr class=\"row-odd\">\n<td><code>:SM</code></td> <td>eigenvalues of smallest magnitude</td> </tr> <tr class=\"row-even\">\n<td><code>:LR</code></td> <td>eigenvalues of largest real part</td> </tr> <tr class=\"row-odd\">\n<td><code>:SR</code></td> <td>eigenvalues of smallest real part</td> </tr> <tr class=\"row-even\">\n<td><code>:LI</code></td> <td>eigenvalues of largest imaginary part (nonsymmetric or complex <code>A</code> only)</td> </tr> <tr class=\"row-odd\">\n<td><code>:SI</code></td> <td>eigenvalues of smallest imaginary part (nonsymmetric or complex <code>A</code> only)</td> </tr> <tr class=\"row-even\">\n<td><code>:BE</code></td> <td>compute half of the eigenvalues from each end of the spectrum, biased in favor of the high end. (real symmetric <code>A</code> only)</td> </tr>  </table> </li> <li>\n<code>tol</code>: tolerance (<span class=\"math\">\\(tol \\le 0.0\\)</span> defaults to <code>DLAMCH('EPS')</code>) </li> <li>\n<code>maxiter</code>: Maximum number of iterations (default = 300) </li> <li>\n<code>sigma</code>: Specifies the level shift used in inverse iteration. If <code>nothing</code> (default), defaults to ordinary (forward) iterations. Otherwise, find eigenvalues close to <code>sigma</code> using shift and invert iterations. </li> <li>\n<code>ritzvec</code>: Returns the Ritz vectors <code>v</code> (eigenvectors) if <code>true</code> </li> <li>\n<code>v0</code>: starting vector from which to start the iterations </li> </ul> <p><code>eigs</code> returns the <code>nev</code> requested eigenvalues in <code>d</code>, the corresponding Ritz vectors <code>v</code> (only if <code>ritzvec=true</code>), the number of converged eigenvalues <code>nconv</code>, the number of iterations <code>niter</code> and the number of matrix vector multiplications <code>nmult</code>, as well as the final residual vector <code>resid</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>The <code>sigma</code> and <code>which</code> keywords interact: the description of eigenvalues searched for by <code>which</code> do _not_ necessarily refer to the eigenvalue problem <span class=\"math\">\\(Av = Bv\\lambda\\)</span>, but rather the linear operator constructed by the specification of the iteration mode implied by <code>sigma</code>.</p> <table class=\"last docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\"><code>sigma</code></th> <th class=\"head\">iteration mode</th> <th class=\"head\">\n<code>which</code> refers to the problem</th> </tr> </thead>  <tr class=\"row-even\">\n<td><code>nothing</code></td> <td>ordinary (forward)</td> <td><span class=\"math\">\\(Av = Bv\\lambda\\)</span></td> </tr> <tr class=\"row-odd\">\n<td>real or complex</td> <td>inverse with level shift <code>sigma</code>\n</td> <td><span class=\"math\">\\((A - \\sigma B )^{-1}B = v\\nu\\)</span></td> </tr>  </table> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.svds\">\n<code>svds(A; nsv=6, ritzvec=true, tol=0.0, maxiter=1000) -&gt; (left_sv, s, right_sv, nconv, niter, nmult, resid)</code> </dt> <dd>\n<p><code>svds</code> computes largest singular values <code>s</code> of <code>A</code> using Lanczos or Arnoldi iterations. Uses <a class=\"reference internal\" href=\"#Base.eigs\" title=\"Base.eigs\"><code>eigs()</code></a> underneath.</p> <p>Inputs are:</p> <ul class=\"simple\"> <li>\n<code>A</code>: Linear operator. It can either subtype of <code>AbstractArray</code> (e.g., sparse matrix) or duck typed. For duck typing <code>A</code> has to support <code>size(A)</code>, <code>eltype(A)</code>, <code>A * vector</code> and <code>A' * vector</code>.</li> <li>\n<code>nsv</code>: Number of singular values.</li> <li>\n<code>ritzvec</code>: Whether to return the left and right singular vectors <code>left_sv</code> and <code>right_sv</code>, default is <code>true</code>. If <code>false</code> the singular vectors are omitted from the output.</li> <li>\n<code>tol</code>: tolerance, see <a class=\"reference internal\" href=\"#Base.eigs\" title=\"Base.eigs\"><code>eigs()</code></a>.</li> <li>\n<code>maxiter</code>: Maximum number of iterations, see <a class=\"reference internal\" href=\"#Base.eigs\" title=\"Base.eigs\"><code>eigs()</code></a>.</li> </ul> <p><strong>Example</strong>:</p> <pre data-language=\"julia\">X = sprand(10, 5, 0.2)\nsvds(X, nsv = 2)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.peakflops\">\n<code>peakflops(n; parallel=false)</code> </dt> <dd>\n<p><code>peakflops</code> computes the peak flop rate of the computer by using double precision <a class=\"reference internal\" href=\"#Base.LinAlg.BLAS.gemm!\" title=\"Base.LinAlg.BLAS.gemm!\"><code>Base.LinAlg.BLAS.gemm!()</code></a>. By default, if no arguments are specified, it multiplies a matrix of size <code>n x n</code>, where <code>n = 2000</code>. If the underlying BLAS is using multiple threads, higher flop rates are realized. The number of BLAS threads can be set with <code>blas_set_num_threads(n)</code>.</p> <p>If the keyword argument <code>parallel</code> is set to <code>true</code>, <code>peakflops</code> is run in parallel on all the worker processors. The flop rate of the entire parallel computer is returned. When running in parallel, only 1 BLAS thread is used. The argument <code>n</code> still refers to the size of the problem that is solved on each processor.</p> </dd>\n</dl>   <h2 id=\"blas-functions\">BLAS Functions</h2> <p id=\"module-Base.LinAlg.BLAS\"><a class=\"reference internal\" href=\"#module-Base.LinAlg.BLAS\" title=\"Base.LinAlg.BLAS\"><code>Base.LinAlg.BLAS</code></a> provides wrappers for some of the BLAS functions for linear algebra. Those BLAS functions that overwrite one of the input arrays have names ending in <code>'!'</code>.</p> <p>Usually a function has 4 methods defined, one each for <code>Float64</code>, <code>Float32</code>, <code>Complex128</code> and <code>Complex64</code> arrays.</p> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.dot\">\n<code>dot(n, X, incx, Y, incy)</code> </dt> <dd>\n<p>Dot product of two vectors consisting of <code>n</code> elements of array <code>X</code> with stride <code>incx</code> and <code>n</code> elements of array <code>Y</code> with stride <code>incy</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.dotu\">\n<code>dotu(n, X, incx, Y, incy)</code> </dt> <dd>\n<p>Dot function for two complex vectors.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.dotc\">\n<code>dotc(n, X, incx, U, incy)</code> </dt> <dd>\n<p>Dot function for two complex vectors conjugating the first vector.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.blascopy!\">\n<code>blascopy!(n, X, incx, Y, incy)</code> </dt> <dd>\n<p>Copy <code>n</code> elements of array <code>X</code> with stride <code>incx</code> to array <code>Y</code> with stride <code>incy</code>. Returns <code>Y</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.nrm2\">\n<code>nrm2(n, X, incx)</code> </dt> <dd>\n<p>2-norm of a vector consisting of <code>n</code> elements of array <code>X</code> with stride <code>incx</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.asum\">\n<code>asum(n, X, incx)</code> </dt> <dd>\n<p>sum of the absolute values of the first <code>n</code> elements of array <code>X</code> with stride <code>incx</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.axpy!\">\n<code>axpy!(a, X, Y)</code> </dt> <dd>\n<p>Overwrite <code>Y</code> with <code>a*X + Y</code>. Returns <code>Y</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.scal!\">\n<code>scal!(n, a, X, incx)</code> </dt> <dd>\n<p>Overwrite <code>X</code> with <code>a*X</code>. Returns <code>X</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.scal\">\n<code>scal(n, a, X, incx)</code> </dt> <dd>\n<p>Returns <code>a*X</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.ger!\">\n<code>ger!(alpha, x, y, A)</code> </dt> <dd>\n<p>Rank-1 update of the matrix <code>A</code> with vectors <code>x</code> and <code>y</code> as <code>alpha*x*y' + A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.syr!\">\n<code>syr!(uplo, alpha, x, A)</code> </dt> <dd>\n<p>Rank-1 update of the symmetric matrix <code>A</code> with vector <code>x</code> as <code>alpha*x*x.' + A</code>. When <code>uplo</code> is ‘U’ the upper triangle of <code>A</code> is updated (‘L’ for lower triangle). Returns <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.syrk!\">\n<code>syrk!(uplo, trans, alpha, A, beta, C)</code> </dt> <dd>\n<p>Rank-k update of the symmetric matrix <code>C</code> as <code>alpha*A*A.' + beta*C</code> or <code>alpha*A.'*A + beta*C</code> according to whether <code>trans</code> is ‘N’ or ‘T’. When <code>uplo</code> is ‘U’ the upper triangle of <code>C</code> is updated (‘L’ for lower triangle). Returns <code>C</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.syrk\">\n<code>syrk(uplo, trans, alpha, A)</code> </dt> <dd>\n<p>Returns either the upper triangle or the lower triangle, according to <code>uplo</code> (‘U’ or ‘L’), of <code>alpha*A*A.'</code> or <code>alpha*A.'*A</code>, according to <code>trans</code> (‘N’ or ‘T’).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.her!\">\n<code>her!(uplo, alpha, x, A)</code> </dt> <dd>\n<p>Methods for complex arrays only. Rank-1 update of the Hermitian matrix <code>A</code> with vector <code>x</code> as <code>alpha*x*x' + A</code>. When <code>uplo</code> is ‘U’ the upper triangle of <code>A</code> is updated (‘L’ for lower triangle). Returns <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.herk!\">\n<code>herk!(uplo, trans, alpha, A, beta, C)</code> </dt> <dd>\n<p>Methods for complex arrays only. Rank-k update of the Hermitian matrix <code>C</code> as <code>alpha*A*A' + beta*C</code> or <code>alpha*A'*A + beta*C</code> according to whether <code>trans</code> is ‘N’ or ‘T’. When <code>uplo</code> is ‘U’ the upper triangle of <code>C</code> is updated (‘L’ for lower triangle). Returns <code>C</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.herk\">\n<code>herk(uplo, trans, alpha, A)</code> </dt> <dd>\n<p>Methods for complex arrays only. Returns either the upper triangle or the lower triangle, according to <code>uplo</code> (‘U’ or ‘L’), of <code>alpha*A*A'</code> or <code>alpha*A'*A</code>, according to <code>trans</code> (‘N’ or ‘T’).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.gbmv!\">\n<code>gbmv!(trans, m, kl, ku, alpha, A, x, beta, y)</code> </dt> <dd>\n<p>Update vector <code>y</code> as <code>alpha*A*x + beta*y</code> or <code>alpha*A'*x + beta*y</code> according to <code>trans</code> (‘N’ or ‘T’). The matrix <code>A</code> is a general band matrix of dimension <code>m</code> by <code>size(A,2)</code> with <code>kl</code> sub-diagonals and <code>ku</code> super-diagonals. Returns the updated <code>y</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.gbmv\">\n<code>gbmv(trans, m, kl, ku, alpha, A, x, beta, y)</code> </dt> <dd>\n<p>Returns <code>alpha*A*x</code> or <code>alpha*A'*x</code> according to <code>trans</code> (‘N’ or ‘T’). The matrix <code>A</code> is a general band matrix of dimension <code>m</code> by <code>size(A,2)</code> with <code>kl</code> sub-diagonals and <code>ku</code> super-diagonals.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.sbmv!\">\n<code>sbmv!(uplo, k, alpha, A, x, beta, y)</code> </dt> <dd>\n<p>Update vector <code>y</code> as <code>alpha*A*x + beta*y</code> where <code>A</code> is a a symmetric band matrix of order <code>size(A,2)</code> with <code>k</code> super-diagonals stored in the argument <code>A</code>. The storage layout for <code>A</code> is described the reference BLAS module, level-2 BLAS at &lt;<a class=\"reference external\" href=\"http://www.netlib.org/lapack/explore-html/\">http://www.netlib.org/lapack/explore-html/</a>&gt;.</p> <p>Returns the updated <code>y</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.sbmv\">\n<code>sbmv(uplo, k, alpha, A, x)</code> </dt> <dd>\n<p>Returns <code>alpha*A*x</code> where <code>A</code> is a symmetric band matrix of order <code>size(A,2)</code> with <code>k</code> super-diagonals stored in the argument <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>sbmv(uplo, k, A, x)</code> </dt> <dd>\n<p>Returns <code>A*x</code> where <code>A</code> is a symmetric band matrix of order <code>size(A,2)</code> with <code>k</code> super-diagonals stored in the argument <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.gemm!\">\n<code>gemm!(tA, tB, alpha, A, B, beta, C)</code> </dt> <dd>\n<p>Update <code>C</code> as <code>alpha*A*B + beta*C</code> or the other three variants according to <code>tA</code> (transpose <code>A</code>) and <code>tB</code>. Returns the updated <code>C</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.gemm\">\n<code>gemm(tA, tB, alpha, A, B)</code> </dt> <dd>\n<p>Returns <code>alpha*A*B</code> or the other three variants according to <code>tA</code> (transpose <code>A</code>) and <code>tB</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>gemm(tA, tB, A, B)</code> </dt> <dd>\n<p>Returns <code>A*B</code> or the other three variants according to <code>tA</code> (transpose <code>A</code>) and <code>tB</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.gemv!\">\n<code>gemv!(tA, alpha, A, x, beta, y)</code> </dt> <dd>\n<p>Update the vector <code>y</code> as <code>alpha*A*x + beta*y</code> or <code>alpha*A'x + beta*y</code> according to <code>tA</code> (transpose <code>A</code>). Returns the updated <code>y</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.gemv\">\n<code>gemv(tA, alpha, A, x)</code> </dt> <dd>\n<p>Returns <code>alpha*A*x</code> or <code>alpha*A'x</code> according to <code>tA</code> (transpose <code>A</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>gemv(tA, A, x)</code> </dt> <dd>\n<p>Returns <code>A*x</code> or <code>A'x</code> according to <code>tA</code> (transpose <code>A</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.symm!\">\n<code>symm!(side, ul, alpha, A, B, beta, C)</code> </dt> <dd>\n<p>Update <code>C</code> as <code>alpha*A*B + beta*C</code> or <code>alpha*B*A + beta*C</code> according to <code>side</code>. <code>A</code> is assumed to be symmetric. Only the <code>ul</code> triangle of <code>A</code> is used. Returns the updated <code>C</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.symm\">\n<code>symm(side, ul, alpha, A, B)</code> </dt> <dd>\n<p>Returns <code>alpha*A*B</code> or <code>alpha*B*A</code> according to <code>side</code>. <code>A</code> is assumed to be symmetric. Only the <code>ul</code> triangle of <code>A</code> is used.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>symm(side, ul, A, B)</code> </dt> <dd>\n<p>Returns <code>A*B</code> or <code>B*A</code> according to <code>side</code>. <code>A</code> is assumed to be symmetric. Only the <code>ul</code> triangle of <code>A</code> is used.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>symm(tA, tB, alpha, A, B)</code> </dt> <dd>\n<p>Returns <code>alpha*A*B</code> or the other three variants according to <code>tA</code> (transpose <code>A</code>) and <code>tB</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.symv!\">\n<code>symv!(ul, alpha, A, x, beta, y)</code> </dt> <dd>\n<p>Update the vector <code>y</code> as <code>alpha*A*x + beta*y</code>. <code>A</code> is assumed to be symmetric. Only the <code>ul</code> triangle of <code>A</code> is used. Returns the updated <code>y</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.symv\">\n<code>symv(ul, alpha, A, x)</code> </dt> <dd>\n<p>Returns <code>alpha*A*x</code>. <code>A</code> is assumed to be symmetric. Only the <code>ul</code> triangle of <code>A</code> is used.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>symv(ul, A, x)</code> </dt> <dd>\n<p>Returns <code>A*x</code>. <code>A</code> is assumed to be symmetric. Only the <code>ul</code> triangle of <code>A</code> is used.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.trmm!\">\n<code>trmm!(side, ul, tA, dA, alpha, A, B)</code> </dt> <dd>\n<p>Update <code>B</code> as <code>alpha*A*B</code> or one of the other three variants determined by <code>side</code> (<code>A</code> on left or right) and <code>tA</code> (transpose <code>A</code>). Only the <code>ul</code> triangle of <code>A</code> is used. <code>dA</code> indicates if <code>A</code> is unit-triangular (the diagonal is assumed to be all ones). Returns the updated <code>B</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.trmm\">\n<code>trmm(side, ul, tA, dA, alpha, A, B)</code> </dt> <dd>\n<p>Returns <code>alpha*A*B</code> or one of the other three variants determined by <code>side</code> (<code>A</code> on left or right) and <code>tA</code> (transpose <code>A</code>). Only the <code>ul</code> triangle of <code>A</code> is used. <code>dA</code> indicates if <code>A</code> is unit-triangular (the diagonal is assumed to be all ones).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.trsm!\">\n<code>trsm!(side, ul, tA, dA, alpha, A, B)</code> </dt> <dd>\n<p>Overwrite <code>B</code> with the solution to <code>A*X = alpha*B</code> or one of the other three variants determined by <code>side</code> (<code>A</code> on left or right of <code>X</code>) and <code>tA</code> (transpose <code>A</code>). Only the <code>ul</code> triangle of <code>A</code> is used. <code>dA</code> indicates if <code>A</code> is unit-triangular (the diagonal is assumed to be all ones). Returns the updated <code>B</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.trsm\">\n<code>trsm(side, ul, tA, dA, alpha, A, B)</code> </dt> <dd>\n<p>Returns the solution to <code>A*X = alpha*B</code> or one of the other three variants determined by <code>side</code> (<code>A</code> on left or right of <code>X</code>) and <code>tA</code> (transpose <code>A</code>). Only the <code>ul</code> triangle of <code>A</code> is used. <code>dA</code> indicates if <code>A</code> is unit-triangular (the diagonal is assumed to be all ones).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.trmv!\">\n<code>trmv!(side, ul, tA, dA, alpha, A, b)</code> </dt> <dd>\n<p>Update <code>b</code> as <code>alpha*A*b</code> or one of the other three variants determined by <code>side</code> (<code>A</code> on left or right) and <code>tA</code> (transpose <code>A</code>). Only the <code>ul</code> triangle of <code>A</code> is used. <code>dA</code> indicates if <code>A</code> is unit-triangular (the diagonal is assumed to be all ones). Returns the updated <code>b</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.trmv\">\n<code>trmv(side, ul, tA, dA, alpha, A, b)</code> </dt> <dd>\n<p>Returns <code>alpha*A*b</code> or one of the other three variants determined by <code>side</code> (<code>A</code> on left or right) and <code>tA</code> (transpose <code>A</code>). Only the <code>ul</code> triangle of <code>A</code> is used. <code>dA</code> indicates if <code>A</code> is unit-triangular (the diagonal is assumed to be all ones).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.trsv!\">\n<code>trsv!(ul, tA, dA, A, b)</code> </dt> <dd>\n<p>Overwrite <code>b</code> with the solution to <code>A*x = b</code> or one of the other two variants determined by <code>tA</code> (transpose <code>A</code>) and <code>ul</code> (triangle of <code>A</code> used). <code>dA</code> indicates if <code>A</code> is unit-triangular (the diagonal is assumed to be all ones). Returns the updated <code>b</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.trsv\">\n<code>trsv(ul, tA, dA, A, b)</code> </dt> <dd>\n<p>Returns the solution to <code>A*x = b</code> or one of the other two variants determined by <code>tA</code> (transpose <code>A</code>) and <code>ul</code> (triangle of <code>A</code> is used.) <code>dA</code> indicates if <code>A</code> is unit-triangular (the diagonal is assumed to be all ones).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.BLAS.blas_set_num_threads\">\n<code>blas_set_num_threads(n)</code> </dt> <dd>\n<p>Set the number of threads the BLAS library should use.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Base.LinAlg.BLAS.I\">\n<code>I</code> </dt> <dd>\n<p>An object of type <code>UniformScaling</code>, representing an identity matrix of any size.</p> </dd>\n</dl>   <h2 id=\"lapack-functions\">LAPACK Functions</h2> <p id=\"module-Base.LinAlg.LAPACK\"><a class=\"reference internal\" href=\"#module-Base.LinAlg.LAPACK\" title=\"Base.LinAlg.LAPACK\"><code>Base.LinAlg.LAPACK</code></a> provides wrappers for some of the LAPACK functions for linear algebra. Those functions that overwrite one of the input arrays have names ending in <code>'!'</code>.</p> <p>Usually a function has 4 methods defined, one each for <code>Float64</code>, <code>Float32</code>, <code>Complex128</code> and <code>Complex64</code> arrays.</p> <p>Note that the LAPACK API provided by Julia can and will change in the future. Since this API is not user-facing, there is no commitment to support/deprecate this specific set of functions in future releases.</p> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gbtrf!\">\n<code>gbtrf!(kl, ku, m, AB) -&gt; (AB, ipiv)</code> </dt> <dd>\n<p>Compute the LU factorization of a banded matrix <code>AB</code>. <code>kl</code> is the first subdiagonal containing a nonzero band, <code>ku</code> is the last superdiagonal containing one, and <code>m</code> is the first dimension of the matrix <code>AB</code>. Returns the LU factorization in-place and <code>ipiv</code>, the vector of pivots used.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gbtrs!\">\n<code>gbtrs!(trans, kl, ku, m, AB, ipiv, B)</code> </dt> <dd>\n<p>Solve the equation <code>AB * X = B</code>. <code>trans</code> determines the orientation of <code>AB</code>. It may be <code>N</code> (no transpose), <code>T</code> (transpose), or <code>C</code> (conjugate transpose). <code>kl</code> is the first subdiagonal containing a nonzero band, <code>ku</code> is the last superdiagonal containing one, and <code>m</code> is the first dimension of the matrix <code>AB</code>. <code>ipiv</code> is the vector of pivots returned from <code>gbtrf!</code>. Returns the vector or matrix <code>X</code>, overwriting <code>B</code> in-place.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gebal!\">\n<code>gebal!(job, A) -&gt; (ilo, ihi, scale)</code> </dt> <dd>\n<p>Balance the matrix <code>A</code> before computing its eigensystem or Schur factorization. <code>job</code> can be one of <code>N</code> (<code>A</code> will not be permuted or scaled), <code>P</code> (<code>A</code> will only be permuted), <code>S</code> (<code>A</code> will only be scaled), or <code>B</code> (<code>A</code> will be both permuted and scaled). Modifies <code>A</code> in-place and returns <code>ilo</code>, <code>ihi</code>, and <code>scale</code>. If permuting was turned on, <code>A[i,j] = 0</code> if <code>j &gt; i</code> and <code>1 &lt; j &lt; ilo</code> or <code>j &gt; ihi</code>. <code>scale</code> contains information about the scaling/permutations performed.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gebak!\">\n<code>gebak!(job, side, ilo, ihi, scale, V)</code> </dt> <dd>\n<p>Transform the eigenvectors <code>V</code> of a matrix balanced using <code>gebal!</code> to the unscaled/unpermuted eigenvectors of the original matrix. Modifies <code>V</code> in-place. <code>side</code> can be <code>L</code> (left eigenvectors are transformed) or <code>R</code> (right eigenvectors are transformed).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gebrd!\">\n<code>gebrd!(A) -&gt; (A, d, e, tauq, taup)</code> </dt> <dd>\n<p>Reduce <code>A</code> in-place to bidiagonal form <code>A = QBP'</code>. Returns <code>A</code>, containing the bidiagonal matrix <code>B</code>; <code>d</code>, containing the diagonal elements of <code>B</code>; <code>e</code>, containing the off-diagonal elements of <code>B</code>; <code>tauq</code>, containing the elementary reflectors representing <code>Q</code>; and <code>taup</code>, containing the elementary reflectors representing <code>P</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gelqf!\">\n<code>gelqf!(A, tau)</code> </dt> <dd>\n<p>Compute the <code>LQ</code> factorization of <code>A</code>, <code>A = LQ</code>. <code>tau</code> contains scalars which parameterize the elementary reflectors of the factorization. <code>tau</code> must have length greater than or equal to the smallest dimension of <code>A</code>.</p> <p>Returns <code>A</code> and <code>tau</code> modified in-place.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>gelqf!(A) -&gt; (A, tau)</code> </dt> <dd>\n<p>Compute the <code>LQ</code> factorization of <code>A</code>, <code>A = LQ</code>.</p> <p>Returns <code>A</code>, modified in-place, and <code>tau</code>, which contains scalars which parameterize the elementary reflectors of the factorization.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.geqlf!\">\n<code>geqlf!(A, tau)</code> </dt> <dd>\n<p>Compute the <code>QL</code> factorization of <code>A</code>, <code>A = QL</code>. <code>tau</code> contains scalars which parameterize the elementary reflectors of the factorization. <code>tau</code> must have length greater than or equal to the smallest dimension of <code>A</code>.</p> <p>Returns <code>A</code> and <code>tau</code> modified in-place.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>geqlf!(A) -&gt; (A, tau)</code> </dt> <dd>\n<p>Compute the <code>QL</code> factorization of <code>A</code>, <code>A = QL</code>.</p> <p>Returns <code>A</code>, modified in-place, and <code>tau</code>, which contains scalars which parameterize the elementary reflectors of the factorization.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.geqrf!\">\n<code>geqrf!(A, tau)</code> </dt> <dd>\n<p>Compute the <code>QR</code> factorization of <code>A</code>, <code>A = QR</code>. <code>tau</code> contains scalars which parameterize the elementary reflectors of the factorization. <code>tau</code> must have length greater than or equal to the smallest dimension of <code>A</code>.</p> <p>Returns <code>A</code> and <code>tau</code> modified in-place.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>geqrf!(A) -&gt; (A, tau)</code> </dt> <dd>\n<p>Compute the <code>QR</code> factorization of <code>A</code>, <code>A = QR</code>.</p> <p>Returns <code>A</code>, modified in-place, and <code>tau</code>, which contains scalars which parameterize the elementary reflectors of the factorization.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.geqp3!\">\n<code>geqp3!(A, jpvt, tau)</code> </dt> <dd>\n<p>Compute the pivoted <code>QR</code> factorization of <code>A</code>, <code>AP = QR</code> using BLAS level 3. <code>P</code> is a pivoting matrix, represented by <code>jpvt</code>. <code>tau</code> stores the elementary reflectors. <code>jpvt</code> must have length length greater than or equal to <code>n</code> if <code>A</code> is an <code>(m x n)</code> matrix. <code>tau</code> must have length greater than or equal to the smallest dimension of <code>A</code>.</p> <p><code>A</code>, <code>jpvt</code>, and <code>tau</code> are modified in-place.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>geqp3!(A, jpvt) -&gt; (A, jpvt, tau)</code> </dt> <dd>\n<p>Compute the pivoted <code>QR</code> factorization of <code>A</code>, <code>AP = QR</code> using BLAS level 3. <code>P</code> is a pivoting matrix, represented by <code>jpvt</code>. <code>jpvt</code> must have length greater than or equal to <code>n</code> if <code>A</code> is an <code>(m x n)</code> matrix.</p> <p>Returns <code>A</code> and <code>jpvt</code>, modified in-place, and <code>tau</code>, which stores the elementary reflectors.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>geqp3!(A) -&gt; (A, jpvt, tau)</code> </dt> <dd>\n<p>Compute the pivoted <code>QR</code> factorization of <code>A</code>, <code>AP = QR</code> using BLAS level 3.</p> <p>Returns <code>A</code>, modified in-place, <code>jpvt</code>, which represents the pivoting matrix <code>P</code>, and <code>tau</code>, which stores the elementary reflectors.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gerqf!\">\n<code>gerqf!(A, tau)</code> </dt> <dd>\n<p>Compute the <code>RQ</code> factorization of <code>A</code>, <code>A = RQ</code>. <code>tau</code> contains scalars which parameterize the elementary reflectors of the factorization. <code>tau</code> must have length greater than or equal to the smallest dimension of <code>A</code>.</p> <p>Returns <code>A</code> and <code>tau</code> modified in-place.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>gerqf!(A) -&gt; (A, tau)</code> </dt> <dd>\n<p>Compute the <code>RQ</code> factorization of <code>A</code>, <code>A = RQ</code>.</p> <p>Returns <code>A</code>, modified in-place, and <code>tau</code>, which contains scalars which parameterize the elementary reflectors of the factorization.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.geqrt!\">\n<code>geqrt!(A, T)</code> </dt> <dd>\n<p>Compute the blocked <code>QR</code> factorization of <code>A</code>, <code>A = QR</code>. <code>T</code> contains upper triangular block reflectors which parameterize the elementary reflectors of the factorization. The first dimension of <code>T</code> sets the block size and it must be between 1 and <code>n</code>. The second dimension of <code>T</code> must equal the smallest dimension of <code>A</code>.</p> <p>Returns <code>A</code> and <code>T</code> modified in-place.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>geqrt!(A, nb) -&gt; (A, T)</code> </dt> <dd>\n<p>Compute the blocked <code>QR</code> factorization of <code>A</code>, <code>A = QR</code>. <code>nb</code> sets the block size and it must be between 1 and <code>n</code>, the second dimension of <code>A</code>.</p> <p>Returns <code>A</code>, modified in-place, and <code>T</code>, which contains upper triangular block reflectors which parameterize the elementary reflectors of the factorization.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.geqrt3!\">\n<code>geqrt3!(A, T)</code> </dt> <dd>\n<p>Recursively computes the blocked <code>QR</code> factorization of <code>A</code>, <code>A = QR</code>. <code>T</code> contains upper triangular block reflectors which parameterize the elementary reflectors of the factorization. The first dimension of <code>T</code> sets the block size and it must be between 1 and <code>n</code>. The second dimension of <code>T</code> must equal the smallest dimension of <code>A</code>.</p> <p>Returns <code>A</code> and <code>T</code> modified in-place.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>geqrt3!(A) -&gt; (A, T)</code> </dt> <dd>\n<p>Recursively computes the blocked <code>QR</code> factorization of <code>A</code>, <code>A = QR</code>.</p> <p>Returns <code>A</code>, modified in-place, and <code>T</code>, which contains upper triangular block reflectors which parameterize the elementary reflectors of the factorization.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.getrf!\">\n<code>getrf!(A) -&gt; (A, ipiv, info)</code> </dt> <dd>\n<p>Compute the pivoted <code>LU</code> factorization of <code>A</code>, <code>A = LU</code>.</p> <p>Returns <code>A</code>, modified in-place, <code>ipiv</code>, the pivoting information, and an <code>info</code> code which indicates success (<code>info = 0</code>), a singular value in <code>U</code> (<code>info = i</code>, in which case <code>U[i,i]</code> is singular), or an error code (<code>info &lt; 0</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.tzrzf!\">\n<code>tzrzf!(A) -&gt; (A, tau)</code> </dt> <dd>\n<p>Transforms the upper trapezoidal matrix <code>A</code> to upper triangular form in-place. Returns <code>A</code> and <code>tau</code>, the scalar parameters for the elementary reflectors of the transformation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.ormrz!\">\n<code>ormrz!(side, trans, A, tau, C)</code> </dt> <dd>\n<p>Multiplies the matrix <code>C</code> by <code>Q</code> from the transformation supplied by <code>tzrzf!</code>. Depending on <code>side</code> or <code>trans</code> the multiplication can be left-sided (<code>side = L, Q*C</code>) or right-sided (<code>side = R, C*Q</code>) and <code>Q</code> can be unmodified (<code>trans = N</code>), transposed (<code>trans = T</code>), or conjugate transposed (<code>trans = C</code>). Returns matrix <code>C</code> which is modified in-place with the result of the multiplication.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gels!\">\n<code>gels!(trans, A, B) -&gt; (F, B, ssr)</code> </dt> <dd>\n<p>Solves the linear equation <code>A * X = B</code>, <code>A.' * X =B</code>, or <code>A' * X = B</code> using a QR or LQ factorization. Modifies the matrix/vector <code>B</code> in place with the solution. <code>A</code> is overwritten with its <code>QR</code> or <code>LQ</code> factorization. <code>trans</code> may be one of <code>N</code> (no modification), <code>T</code> (transpose), or <code>C</code> (conjugate transpose). <code>gels!</code> searches for the minimum norm/least squares solution. <code>A</code> may be under or over determined. The solution is returned in <code>B</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gesv!\">\n<code>gesv!(A, B) -&gt; (B, A, ipiv)</code> </dt> <dd>\n<p>Solves the linear equation <code>A * X = B</code> where <code>A</code> is a square matrix using the <code>LU</code> factorization of <code>A</code>. <code>A</code> is overwritten with its <code>LU</code> factorization and <code>B</code> is overwritten with the solution <code>X</code>. <code>ipiv</code> contains the pivoting information for the <code>LU</code> factorization of <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.getrs!\">\n<code>getrs!(trans, A, ipiv, B)</code> </dt> <dd>\n<p>Solves the linear equation <code>A * X = B</code>, <code>A.' * X =B</code>, or <code>A' * X = B</code> for square <code>A</code>. Modifies the matrix/vector <code>B</code> in place with the solution. <code>A</code> is the <code>LU</code> factorization from <code>getrf!</code>, with <code>ipiv</code> the pivoting information. <code>trans</code> may be one of <code>N</code> (no modification), <code>T</code> (transpose), or <code>C</code> (conjugate transpose).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.getri!\">\n<code>getri!(A, ipiv)</code> </dt> <dd>\n<p>Computes the inverse of <code>A</code>, using its <code>LU</code> factorization found by <code>getrf!</code>. <code>ipiv</code> is the pivot information output and <code>A</code> contains the <code>LU</code> factorization of <code>getrf!</code>. <code>A</code> is overwritten with its inverse.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gesvx!\">\n<code>gesvx!(fact, trans, A, AF, ipiv, equed, R, C, B) -&gt; (X, equed, R, C, B, rcond, ferr, berr, work)</code> </dt> <dd>\n<p>Solves the linear equation <code>A * X = B</code> (<code>trans = N</code>), <code>A.' * X =B</code> (<code>trans = T</code>), or <code>A' * X = B</code> (<code>trans = C</code>) using the <code>LU</code> factorization of <code>A</code>. <code>fact</code> may be <code>E</code>, in which case <code>A</code> will be equilibrated and copied to <code>AF</code>; <code>F</code>, in which case <code>AF</code> and <code>ipiv</code> from a previous <code>LU</code> factorization are inputs; or <code>N</code>, in which case <code>A</code> will be copied to <code>AF</code> and then factored. If <code>fact = F</code>, <code>equed</code> may be <code>N</code>, meaning <code>A</code> has not been equilibrated; <code>R</code>, meaning <code>A</code> was multiplied by <code>diagm(R)</code> from the left; <code>C</code>, meaning <code>A</code> was multiplied by <code>diagm(C)</code> from the right; or <code>B</code>, meaning <code>A</code> was multiplied by <code>diagm(R)</code> from the left and <code>diagm(C)</code> from the right. If <code>fact = F</code> and <code>equed = R</code> or <code>B</code> the elements of <code>R</code> must all be positive. If <code>fact = F</code> and <code>equed = C</code> or <code>B</code> the elements of <code>C</code> must all be positive.</p> <p>Returns the solution <code>X</code>; <code>equed</code>, which is an output if <code>fact</code> is not <code>N</code>, and describes the equilibration that was performed; <code>R</code>, the row equilibration diagonal; <code>C</code>, the column equilibration diagonal; <code>B</code>, which may be overwritten with its equilibrated form <code>diagm(R)*B</code> (if <code>trans = N</code> and <code>equed = R,B</code>) or <code>diagm(C)*B</code> (if <code>trans = T,C</code> and <code>equed = C,B</code>); <code>rcond</code>, the reciprocal condition number of <code>A</code> after equilbrating; <code>ferr</code>, the forward error bound for each solution vector in <code>X</code>; <code>berr</code>, the forward error bound for each solution vector in <code>X</code>; and <code>work</code>, the reciprocal pivot growth factor.</p> </dd>\n</dl> <dl class=\"function\"> <dt>\n<code>gesvx!(A, B)</code> </dt> <dd>\n<p>The no-equilibration, no-transpose simplification of <code>gesvx!</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gelsd!\">\n<code>gelsd!(A, B, rcond) -&gt; (B, rnk)</code> </dt> <dd>\n<p>Computes the least norm solution of <code>A * X = B</code> by finding the <code>SVD</code> factorization of <code>A</code>, then dividing-and-conquering the problem. <code>B</code> is overwritten with the solution <code>X</code>. Singular values below <code>rcond</code> will be treated as zero. Returns the solution in <code>B</code> and the effective rank of <code>A</code> in <code>rnk</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gelsy!\">\n<code>gelsy!(A, B, rcond) -&gt; (B, rnk)</code> </dt> <dd>\n<p>Computes the least norm solution of <code>A * X = B</code> by finding the full <code>QR</code> factorization of <code>A</code>, then dividing-and-conquering the problem. <code>B</code> is overwritten with the solution <code>X</code>. Singular values below <code>rcond</code> will be treated as zero. Returns the solution in <code>B</code> and the effective rank of <code>A</code> in <code>rnk</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gglse!\">\n<code>gglse!(A, c, B, d) -&gt; (X, res)</code> </dt> <dd>\n<p>Solves the equation <code>A * x = c</code> where <code>x</code> is subject to the equality constraint <code>B * x = d</code>. Uses the formula <code>||c - A*x||^2 = 0</code> to solve. Returns <code>X</code> and the residual sum-of-squares.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.geev!\">\n<code>geev!(jobvl, jobvr, A) -&gt; (W, VL, VR)</code> </dt> <dd>\n<p>Finds the eigensystem of <code>A</code>. If <code>jobvl = N</code>, the left eigenvectors of <code>A</code> aren’t computed. If <code>jobvr = N</code>, the right eigenvectors of <code>A</code> aren’t computed. If <code>jobvl = V</code> or <code>jobvr = V</code>, the corresponding eigenvectors are computed. Returns the eigenvalues in <code>W</code>, the right eigenvectors in <code>VR</code>, and the left eigenvectors in <code>VL</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gesdd!\">\n<code>gesdd!(job, A) -&gt; (U, S, VT)</code> </dt> <dd>\n<p>Finds the singular value decomposition of <code>A</code>, <code>A = U * S * V'</code>, using a divide and conquer approach. If <code>job = A</code>, all the columns of <code>U</code> and the rows of <code>V'</code> are computed. If <code>job = N</code>, no columns of <code>U</code> or rows of <code>V'</code> are computed. If <code>job = O</code>, <code>A</code> is overwritten with the columns of (thin) <code>U</code> and the rows of (thin) <code>V'</code>. If <code>job = S</code>, the columns of (thin) <code>U</code> and the rows of (thin) <code>V'</code> are computed and returned separately.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gesvd!\">\n<code>gesvd!(jobu, jobvt, A) -&gt; (U, S, VT)</code> </dt> <dd>\n<p>Finds the singular value decomposition of <code>A</code>, <code>A = U * S * V'</code>. If <code>jobu = A</code>, all the columns of <code>U</code> are computed. If <code>jobvt = A</code> all the rows of <code>V'</code> are computed. If <code>jobu = N</code>, no columns of <code>U</code> are computed. If <code>jobvt = N</code> no rows of <code>V'</code> are computed. If <code>jobu = O</code>, <code>A</code> is overwritten with the columns of (thin) <code>U</code>. If <code>jobvt = O</code>, <code>A</code> is overwritten with the rows of (thin) <code>V'</code>. If <code>jobu = S</code>, the columns of (thin) <code>U</code> are computed and returned separately. If <code>jobvt = S</code> the rows of (thin) <code>V'</code> are computed and returned separately. <code>jobu</code> and <code>jobvt</code> can’t both be <code>O</code>.</p> <p>Returns <code>U</code>, <code>S</code>, and <code>Vt</code>, where <code>S</code> are the singular values of <code>A</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.ggsvd!\">\n<code>ggsvd!(jobu, jobv, jobq, A, B) -&gt; (U, V, Q, alpha, beta, k, l, R)</code> </dt> <dd>\n<p>Finds the generalized singular value decomposition of <code>A</code> and <code>B</code>, <code>U'*A*Q = D1*R</code> and <code>V'*B*Q = D2*R</code>. <code>D1</code> has <code>alpha</code> on its diagonal and <code>D2</code> has <code>beta</code> on its diagonal. If <code>jobu = U</code>, the orthogonal/unitary matrix <code>U</code> is computed. If <code>jobv = V</code> the orthogonal/unitary matrix <code>V</code> is computed. If <code>jobq = Q</code>, the orthogonal/unitary matrix <code>Q</code> is computed. If <code>jobu</code>, <code>jobv</code> or <code>jobq</code> is <code>N</code>, that matrix is not computed. This function is only available in LAPACK versions prior to 3.6.0.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.ggsvd3!\">\n<code>ggsvd3!(jobu, jobv, jobq, A, B) -&gt; (U, V, Q, alpha, beta, k, l, R)</code> </dt> <dd>\n<p>Finds the generalized singular value decomposition of <code>A</code> and <code>B</code>, <code>U'*A*Q = D1*R</code> and <code>V'*B*Q = D2*R</code>. <code>D1</code> has <code>alpha</code> on its diagonal and <code>D2</code> has <code>beta</code> on its diagonal. If <code>jobu = U</code>, the orthogonal/unitary matrix <code>U</code> is computed. If <code>jobv = V</code> the orthogonal/unitary matrix <code>V</code> is computed. If <code>jobq = Q</code>, the orthogonal/unitary matrix <code>Q</code> is computed. If <code>jobu</code>, <code>jobv</code>, or <code>jobq</code> is <code>N</code>, that matrix is not computed. This function requires LAPACK 3.6.0.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.geevx!\">\n<code>geevx!(balanc, jobvl, jobvr, sense, A) -&gt; (A, w, VL, VR, ilo, ihi, scale, abnrm, rconde, rcondv)</code> </dt> <dd>\n<p>Finds the eigensystem of <code>A</code> with matrix balancing. If <code>jobvl = N</code>, the left eigenvectors of <code>A</code> aren’t computed. If <code>jobvr = N</code>, the right eigenvectors of <code>A</code> aren’t computed. If <code>jobvl = V</code> or <code>jobvr = V</code>, the corresponding eigenvectors are computed. If <code>balanc = N</code>, no balancing is performed. If <code>balanc = P</code>, <code>A</code> is permuted but not scaled. If <code>balanc = S</code>, <code>A</code> is scaled but not permuted. If <code>balanc = B</code>, <code>A</code> is permuted and scaled. If <code>sense = N</code>, no reciprocal condition numbers are computed. If <code>sense = E</code>, reciprocal condition numbers are computed for the eigenvalues only. If <code>sense = V</code>, reciprocal condition numbers are computed for the right eigenvectors only. If <code>sense = B</code>, reciprocal condition numbers are computed for the right eigenvectors and the eigenvectors. If <code>sense = E,B</code>, the right and left eigenvectors must be computed.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.ggev!\">\n<code>ggev!(jobvl, jobvr, A, B) -&gt; (alpha, beta, vl, vr)</code> </dt> <dd>\n<p>Finds the generalized eigendecomposition of <code>A</code> and <code>B</code>. If <code>jobvl = N</code>, the left eigenvectors aren’t computed. If <code>jobvr = N</code>, the right eigenvectors aren’t computed. If <code>jobvl = V</code> or <code>jobvr = V</code>, the corresponding eigenvectors are computed.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gtsv!\">\n<code>gtsv!(dl, d, du, B)</code> </dt> <dd>\n<p>Solves the equation <code>A * X = B</code> where <code>A</code> is a tridiagonal matrix with <code>dl</code> on the subdiagonal, <code>d</code> on the diagonal, and <code>du</code> on the superdiagonal.</p> <p>Overwrites <code>B</code> with the solution <code>X</code> and returns it.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gttrf!\">\n<code>gttrf!(dl, d, du) -&gt; (dl, d, du, du2, ipiv)</code> </dt> <dd>\n<p>Finds the <code>LU</code> factorization of a tridiagonal matrix with <code>dl</code> on the subdiagonal, <code>d</code> on the diagonal, and <code>du</code> on the superdiagonal.</p> <p>Modifies <code>dl</code>, <code>d</code>, and <code>du</code> in-place and returns them and the second superdiagonal <code>du2</code> and the pivoting vector <code>ipiv</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gttrs!\">\n<code>gttrs!(trans, dl, d, du, du2, ipiv, B)</code> </dt> <dd>\n<p>Solves the equation <code>A * X = B</code> (<code>trans = N</code>), <code>A.' * X = B</code> (<code>trans = T</code>), or <code>A' * X = B</code> (<code>trans = C</code>) using the <code>LU</code> factorization computed by <code>gttrf!</code>. <code>B</code> is overwritten with the solution <code>X</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.orglq!\">\n<code>orglq!(A, tau, k = length(tau))</code> </dt> <dd>\n<p>Explicitly finds the matrix <code>Q</code> of a <code>LQ</code> factorization after calling <code>gelqf!</code> on <code>A</code>. Uses the output of <code>gelqf!</code>. <code>A</code> is overwritten by <code>Q</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.orgqr!\">\n<code>orgqr!(A, tau, k = length(tau))</code> </dt> <dd>\n<p>Explicitly finds the matrix <code>Q</code> of a <code>QR</code> factorization after calling <code>geqrf!</code> on <code>A</code>. Uses the output of <code>geqrf!</code>. <code>A</code> is overwritten by <code>Q</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.ormlq!\">\n<code>ormlq!(side, trans, A, tau, C)</code> </dt> <dd>\n<p>Computes <code>Q * C</code> (<code>trans = N</code>), <code>Q.' * C</code> (<code>trans = T</code>), <code>Q' * C</code> (<code>trans = C</code>) for <code>side = L</code> or the equivalent right-sided multiplication for <code>side = R</code> using <code>Q</code> from a <code>LQ</code> factorization of <code>A</code> computed using <code>gelqf!</code>. <code>C</code> is overwritten.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.ormqr!\">\n<code>ormqr!(side, trans, A, tau, C)</code> </dt> <dd>\n<p>Computes <code>Q * C</code> (<code>trans = N</code>), <code>Q.' * C</code> (<code>trans = T</code>), <code>Q' * C</code> (<code>trans = C</code>) for <code>side = L</code> or the equivalent right-sided multiplication for <code>side = R</code> using <code>Q</code> from a <code>QR</code> factorization of <code>A</code> computed using <code>geqrf!</code>. <code>C</code> is overwritten.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gemqrt!\">\n<code>gemqrt!(side, trans, V, T, C)</code> </dt> <dd>\n<p>Computes <code>Q * C</code> (<code>trans = N</code>), <code>Q.' * C</code> (<code>trans = T</code>), <code>Q' * C</code> (<code>trans = C</code>) for <code>side = L</code> or the equivalent right-sided multiplication for <code>side = R</code> using <code>Q</code> from a <code>QR</code> factorization of <code>A</code> computed using <code>geqrt!</code>. <code>C</code> is overwritten.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.posv!\">\n<code>posv!(uplo, A, B) -&gt; (A, B)</code> </dt> <dd>\n<p>Finds the solution to <code>A * X = B</code> where <code>A</code> is a symmetric or Hermitian positive definite matrix. If <code>uplo = U</code> the upper Cholesky decomposition of <code>A</code> is computed. If <code>uplo = L</code> the lower Cholesky decomposition of <code>A</code> is computed. <code>A</code> is overwritten by its Cholesky decomposition. <code>B</code> is overwritten with the solution <code>X</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.potrf!\">\n<code>potrf!(uplo, A)</code> </dt> <dd>\n<p>Computes the Cholesky (upper if <code>uplo = U</code>, lower if <code>uplo = L</code>) decomposition of positive-definite matrix <code>A</code>. <code>A</code> is overwritten and returned with an info code.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.potri!\">\n<code>potri!(uplo, A)</code> </dt> <dd>\n<p>Computes the inverse of positive-definite matrix <code>A</code> after calling <code>potrf!</code> to find its (upper if <code>uplo = U</code>, lower if <code>uplo = L</code>) Cholesky decomposition.</p> <p><code>A</code> is overwritten by its inverse and returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.potrs!\">\n<code>potrs!(uplo, A, B)</code> </dt> <dd>\n<p>Finds the solution to <code>A * X = B</code> where <code>A</code> is a symmetric or Hermitian positive definite matrix whose Cholesky decomposition was computed by <code>potrf!</code>. If <code>uplo = U</code> the upper Cholesky decomposition of <code>A</code> was computed. If <code>uplo = L</code> the lower Cholesky decomposition of <code>A</code> was computed. <code>B</code> is overwritten with the solution <code>X</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.pstrf!\">\n<code>pstrf!(uplo, A, tol) -&gt; (A, piv, rank, info)</code> </dt> <dd>\n<p>Computes the (upper if <code>uplo = U</code>, lower if <code>uplo = L</code>) pivoted Cholesky decomposition of positive-definite matrix <code>A</code> with a user-set tolerance <code>tol</code>. <code>A</code> is overwritten by its Cholesky decomposition.</p> <p>Returns <code>A</code>, the pivots <code>piv</code>, the rank of <code>A</code>, and an <code>info</code> code. If <code>info = 0</code>, the factorization succeeded. If <code>info = i &gt; 0 `, then `A</code> is indefinite or rank-deficient.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.ptsv!\">\n<code>ptsv!(D, E, B)</code> </dt> <dd>\n<p>Solves <code>A * X = B</code> for positive-definite tridiagonal <code>A</code>. <code>D</code> is the diagonal of <code>A</code> and <code>E</code> is the off-diagonal. <code>B</code> is overwritten with the solution <code>X</code> and returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.pttrf!\">\n<code>pttrf!(D, E)</code> </dt> <dd>\n<p>Computes the LDLt factorization of a positive-definite tridiagonal matrix with <code>D</code> as diagonal and <code>E</code> as off-diagonal. <code>D</code> and <code>E</code> are overwritten and returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.pttrs!\">\n<code>pttrs!(D, E, B)</code> </dt> <dd>\n<p>Solves <code>A * X = B</code> for positive-definite tridiagonal <code>A</code> with diagonal <code>D</code> and off-diagonal <code>E</code> after computing <code>A</code>‘s LDLt factorization using <code>pttrf!</code>. <code>B</code> is overwritten with the solution <code>X</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.trtri!\">\n<code>trtri!(uplo, diag, A)</code> </dt> <dd>\n<p>Finds the inverse of (upper if <code>uplo = U</code>, lower if <code>uplo = L</code>) triangular matrix <code>A</code>. If <code>diag = N</code>, <code>A</code> has non-unit diagonal elements. If <code>diag = U</code>, all diagonal elements of <code>A</code> are one. <code>A</code> is overwritten with its inverse.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.trtrs!\">\n<code>trtrs!(uplo, trans, diag, A, B)</code> </dt> <dd>\n<p>Solves <code>A * X = B</code> (<code>trans = N</code>), <code>A.' * X = B</code> (<code>trans = T</code>), or <code>A' * X = B</code> (<code>trans = C</code>) for (upper if <code>uplo = U</code>, lower if <code>uplo = L</code>) triangular matrix <code>A</code>. If <code>diag = N</code>, <code>A</code> has non-unit diagonal elements. If <code>diag = U</code>, all diagonal elements of <code>A</code> are one. <code>B</code> is overwritten with the solution <code>X</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.trcon!\">\n<code>trcon!(norm, uplo, diag, A)</code> </dt> <dd>\n<p>Finds the reciprocal condition number of (upper if <code>uplo = U</code>, lower if <code>uplo = L</code>) triangular matrix <code>A</code>. If <code>diag = N</code>, <code>A</code> has non-unit diagonal elements. If <code>diag = U</code>, all diagonal elements of <code>A</code> are one. If <code>norm = I</code>, the condition number is found in the infinity norm. If <code>norm = O</code> or <code>1</code>, the condition number is found in the one norm.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.trevc!\">\n<code>trevc!(side, howmny, select, T, VL = similar(T), VR = similar(T))</code> </dt> <dd>\n<p>Finds the eigensystem of an upper triangular matrix <code>T</code>. If <code>side = R</code>, the right eigenvectors are computed. If <code>side = L</code>, the left eigenvectors are computed. If <code>side = B</code>, both sets are computed. If <code>howmny = A</code>, all eigenvectors are found. If <code>howmny = B</code>, all eigenvectors are found and backtransformed using <code>VL</code> and <code>VR</code>. If <code>howmny = S</code>, only the eigenvectors corresponding to the values in <code>select</code> are computed.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.trrfs!\">\n<code>trrfs!(uplo, trans, diag, A, B, X, Ferr, Berr) -&gt; (Ferr, Berr)</code> </dt> <dd>\n<p>Estimates the error in the solution to <code>A * X = B</code> (<code>trans = N</code>), <code>A.' * X = B</code> (<code>trans = T</code>), <code>A' * X = B</code> (<code>trans = C</code>) for <code>side = L</code>, or the equivalent equations a right-handed <code>side = R</code> <code>X * A</code> after computing <code>X</code> using <code>trtrs!</code>. If <code>uplo = U</code>, <code>A</code> is upper triangular. If <code>uplo = L</code>, <code>A</code> is lower triangular. If <code>diag = N</code>, <code>A</code> has non-unit diagonal elements. If <code>diag = U</code>, all diagonal elements of <code>A</code> are one. <code>Ferr</code> and <code>Berr</code> are optional inputs. <code>Ferr</code> is the forward error and <code>Berr</code> is the backward error, each component-wise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.stev!\">\n<code>stev!(job, dv, ev) -&gt; (dv, Zmat)</code> </dt> <dd>\n<p>Computes the eigensystem for a symmetric tridiagonal matrix with <code>dv</code> as diagonal and <code>ev</code> as off-diagonal. If <code>job = N</code> only the eigenvalues are found and returned in <code>dv</code>. If <code>job = V</code> then the eigenvectors are also found and returned in <code>Zmat</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.stebz!\">\n<code>stebz!(range, order, vl, vu, il, iu, abstol, dv, ev) -&gt; (dv, iblock, isplit)</code> </dt> <dd>\n<p>Computes the eigenvalues for a symmetric tridiagonal matrix with <code>dv</code> as diagonal and <code>ev</code> as off-diagonal. If <code>range = A</code>, all the eigenvalues are found. If <code>range = V</code>, the eigenvalues in the half-open interval <code>(vl, vu]</code> are found. If <code>range = I</code>, the eigenvalues with indices between <code>il</code> and <code>iu</code> are found. If <code>order = B</code>, eigvalues are ordered within a block. If <code>order = E</code>, they are ordered across all the blocks. <code>abstol</code> can be set as a tolerance for convergence.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.stegr!\">\n<code>stegr!(jobz, range, dv, ev, vl, vu, il, iu) -&gt; (w, Z)</code> </dt> <dd>\n<p>Computes the eigenvalues (<code>jobz = N</code>) or eigenvalues and eigenvectors (<code>jobz = V</code>) for a symmetric tridiagonal matrix with <code>dv</code> as diagonal and <code>ev</code> as off-diagonal. If <code>range = A</code>, all the eigenvalues are found. If <code>range = V</code>, the eigenvalues in the half-open interval <code>(vl, vu]</code> are found. If <code>range = I</code>, the eigenvalues with indices between <code>il</code> and <code>iu</code> are found. The eigenvalues are returned in <code>w</code> and the eigenvectors in <code>Z</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.stein!\">\n<code>stein!(dv, ev_in, w_in, iblock_in, isplit_in)</code> </dt> <dd>\n<p>Computes the eigenvectors for a symmetric tridiagonal matrix with <code>dv</code> as diagonal and <code>ev_in</code> as off-diagonal. <code>w_in</code> specifies the input eigenvalues for which to find corresponding eigenvectors. <code>iblock_in</code> specifies the submatrices corresponding to the eigenvalues in <code>w_in</code>. <code>isplit_in</code> specifies the splitting points between the submatrix blocks.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.syconv!\">\n<code>syconv!(uplo, A, ipiv) -&gt; (A, work)</code> </dt> <dd>\n<p>Converts a symmetric matrix <code>A</code> (which has been factorized into a triangular matrix) into two matrices <code>L</code> and <code>D</code>. If <code>uplo = U</code>, <code>A</code> is upper triangular. If <code>uplo = L</code>, it is lower triangular. <code>ipiv</code> is the pivot vector from the triangular factorization. <code>A</code> is overwritten by <code>L</code> and <code>D</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.sysv!\">\n<code>sysv!(uplo, A, B) -&gt; (B, A, ipiv)</code> </dt> <dd>\n<p>Finds the solution to <code>A * X = B</code> for symmetric matrix <code>A</code>. If <code>uplo = U</code>, the upper half of <code>A</code> is stored. If <code>uplo = L</code>, the lower half is stored. <code>B</code> is overwritten by the solution <code>X</code>. <code>A</code> is overwritten by its Bunch-Kaufman factorization. <code>ipiv</code> contains pivoting information about the factorization.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.sytrf!\">\n<code>sytrf!(uplo, A) -&gt; (A, ipiv)</code> </dt> <dd>\n<p>Computes the Bunch-Kaufman factorization of a symmetric matrix <code>A</code>. If <code>uplo = U</code>, the upper half of <code>A</code> is stored. If <code>uplo = L</code>, the lower half is stored.</p> <p>Returns <code>A</code>, overwritten by the factorization, and a pivot vector <code>ipiv</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.sytri!\">\n<code>sytri!(uplo, A, ipiv)</code> </dt> <dd>\n<p>Computes the inverse of a symmetric matrix <code>A</code> using the results of <code>sytrf!</code>. If <code>uplo = U</code>, the upper half of <code>A</code> is stored. If <code>uplo = L</code>, the lower half is stored. <code>A</code> is overwritten by its inverse.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.sytrs!\">\n<code>sytrs!(uplo, A, ipiv, B)</code> </dt> <dd>\n<p>Solves the equation <code>A * X = B</code> for a symmetric matrix <code>A</code> using the results of <code>sytrf!</code>. If <code>uplo = U</code>, the upper half of <code>A</code> is stored. If <code>uplo = L</code>, the lower half is stored. <code>B</code> is overwritten by the solution <code>X</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.hesv!\">\n<code>hesv!(uplo, A, B) -&gt; (B, A, ipiv)</code> </dt> <dd>\n<p>Finds the solution to <code>A * X = B</code> for Hermitian matrix <code>A</code>. If <code>uplo = U</code>, the upper half of <code>A</code> is stored. If <code>uplo = L</code>, the lower half is stored. <code>B</code> is overwritten by the solution <code>X</code>. <code>A</code> is overwritten by its Bunch-Kaufman factorization. <code>ipiv</code> contains pivoting information about the factorization.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.hetrf!\">\n<code>hetrf!(uplo, A) -&gt; (A, ipiv)</code> </dt> <dd>\n<p>Computes the Bunch-Kaufman factorization of a Hermitian matrix <code>A</code>. If <code>uplo = U</code>, the upper half of <code>A</code> is stored. If <code>uplo = L</code>, the lower half is stored.</p> <p>Returns <code>A</code>, overwritten by the factorization, and a pivot vector.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.hetri!\">\n<code>hetri!(uplo, A, ipiv)</code> </dt> <dd>\n<p>Computes the inverse of a Hermitian matrix <code>A</code> using the results of <code>sytrf!</code>. If <code>uplo = U</code>, the upper half of <code>A</code> is stored. If <code>uplo = L</code>, the lower half is stored. <code>A</code> is overwritten by its inverse.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.hetrs!\">\n<code>hetrs!(uplo, A, ipiv, B)</code> </dt> <dd>\n<p>Solves the equation <code>A * X = B</code> for a Hermitian matrix <code>A</code> using the results of <code>sytrf!</code>. If <code>uplo = U</code>, the upper half of <code>A</code> is stored. If <code>uplo = L</code>, the lower half is stored. <code>B</code> is overwritten by the solution <code>X</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.syev!\">\n<code>syev!(jobz, uplo, A)</code> </dt> <dd>\n<p>Finds the eigenvalues (<code>jobz = N</code>) or eigenvalues and eigenvectors (<code>jobz = V</code>) of a symmetric matrix <code>A</code>. If <code>uplo = U</code>, the upper triangle of <code>A</code> is used. If <code>uplo = L</code>, the lower triangle of <code>A</code> is used.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.syevr!\">\n<code>syevr!(jobz, range, uplo, A, vl, vu, il, iu, abstol) -&gt; (W, Z)</code> </dt> <dd>\n<p>Finds the eigenvalues (<code>jobz = N</code>) or eigenvalues and eigenvectors (<code>jobz = V</code>) of a symmetric matrix <code>A</code>. If <code>uplo = U</code>, the upper triangle of <code>A</code> is used. If <code>uplo = L</code>, the lower triangle of <code>A</code> is used. If <code>range = A</code>, all the eigenvalues are found. If <code>range = V</code>, the eigenvalues in the half-open interval <code>(vl, vu]</code> are found. If <code>range = I</code>, the eigenvalues with indices between <code>il</code> and <code>iu</code> are found. <code>abstol</code> can be set as a tolerance for convergence.</p> <p>The eigenvalues are returned in <code>W</code> and the eigenvectors in <code>Z</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.sygvd!\">\n<code>sygvd!(jobz, range, uplo, A, vl, vu, il, iu, abstol) -&gt; (w, A, B)</code> </dt> <dd>\n<p>Finds the generalized eigenvalues (<code>jobz = N</code>) or eigenvalues and eigenvectors (<code>jobz = V</code>) of a symmetric matrix <code>A</code> and symmetric positive-definite matrix <code>B</code>. If <code>uplo = U</code>, the upper triangles of <code>A</code> and <code>B</code> are used. If <code>uplo = L</code>, the lower triangles of <code>A</code> and <code>B</code> are used. If <code>itype = 1</code>, the problem to solve is <code>A * x = lambda * B * x</code>. If <code>itype = 2</code>, the problem to solve is <code>A * B * x = lambda * x</code>. If <code>itype = 3</code>, the problem to solve is <code>B * A * x = lambda * x</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.bdsqr!\">\n<code>bdsqr!(uplo, d, e_, Vt, U, C) -&gt; (d, Vt, U, C)</code> </dt> <dd>\n<p>Computes the singular value decomposition of a bidiagonal matrix with <code>d</code> on the diagonal and <code>e_</code> on the off-diagonal. If <code>uplo = U</code>, <code>e_</code> is the superdiagonal. If <code>uplo = L</code>, <code>e_</code> is the subdiagonal. Can optionally also compute the product <code>Q' * C</code>.</p> <p>Returns the singular values in <code>d</code>, and the matrix <code>C</code> overwritten with <code>Q' * C</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.bdsdc!\">\n<code>bdsdc!(uplo, compq, d, e_) -&gt; (d, e, u, vt, q, iq)</code> </dt> <dd>\n<p>Computes the singular value decomposition of a bidiagonal matrix with <code>d</code> on the diagonal and <code>e_</code> on the off-diagonal using a divide and conqueq method. If <code>uplo = U</code>, <code>e_</code> is the superdiagonal. If <code>uplo = L</code>, <code>e_</code> is the subdiagonal. If <code>compq = N</code>, only the singular values are found. If <code>compq = I</code>, the singular values and vectors are found. If <code>compq = P</code>, the singular values and vectors are found in compact form. Only works for real types.</p> <p>Returns the singular values in <code>d</code>, and if <code>compq = P</code>, the compact singular vectors in <code>iq</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gecon!\">\n<code>gecon!(normtype, A, anorm)</code> </dt> <dd>\n<p>Finds the reciprocal condition number of matrix <code>A</code>. If <code>normtype = I</code>, the condition number is found in the infinity norm. If <code>normtype = O</code> or <code>1</code>, the condition number is found in the one norm. <code>A</code> must be the result of <code>getrf!</code> and <code>anorm</code> is the norm of <code>A</code> in the relevant norm.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gehrd!\">\n<code>gehrd!(ilo, ihi, A) -&gt; (A, tau)</code> </dt> <dd>\n<p>Converts a matrix <code>A</code> to Hessenberg form. If <code>A</code> is balanced with <code>gebal!</code> then <code>ilo</code> and <code>ihi</code> are the outputs of <code>gebal!</code>. Otherwise they should be <code>ilo = 1</code> and <code>ihi = size(A,2)</code>. <code>tau</code> contains the elementary reflectors of the factorization.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.orghr!\">\n<code>orghr!(ilo, ihi, A, tau)</code> </dt> <dd>\n<p>Explicitly finds <code>Q</code>, the orthogonal/unitary matrix from <code>gehrd!</code>. <code>ilo</code>, <code>ihi</code>, <code>A</code>, and <code>tau</code> must correspond to the input/output to <code>gehrd!</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gees!\">\n<code>gees!(jobvs, A) -&gt; (A, vs, w)</code> </dt> <dd>\n<p>Computes the eigenvalues (<code>jobvs = N</code>) or the eigenvalues and Schur vectors (<code>jobvs = V</code>) of matrix <code>A</code>. <code>A</code> is overwritten by its Schur form.</p> <p>Returns <code>A</code>, <code>vs</code> containing the Schur vectors, and <code>w</code>, containing the eigenvalues.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.gges!\">\n<code>gges!(jobvsl, jobvsr, A, B) -&gt; (A, B, alpha, beta, vsl, vsr)</code> </dt> <dd>\n<p>Computes the generalized eigenvalues, generalized Schur form, left Schur vectors (<code>jobsvl = V</code>), or right Schur vectors (<code>jobvsr = V</code>) of <code>A</code> and <code>B</code>.</p> <p>The generalized eigenvalues are returned in <code>alpha</code> and <code>beta</code>. The left Schur vectors are returned in <code>vsl</code> and the right Schur vectors are returned in <code>vsr</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.trsen!\">\n<code>trsen!(compq, job, select, T, Q) -&gt; (T, Q, w)</code> </dt> <dd>\n<p>Reorder the Schur factorization of a matrix and optionally finds reciprocal condition numbers. If <code>job = N</code>, no condition numbers are found. If <code>job = E</code>, only the condition number for this cluster of eigenvalues is found. If <code>job = V</code>, only the condition number for the invariant subspace is found. If <code>job = B</code> then the condition numbers for the cluster and subspace are found. If <code>compq = V</code> the Schur vectors <code>Q</code> are updated. If <code>compq = N</code> the Schur vectors are not modified. <code>select</code> determines which eigenvalues are in the cluster.</p> <p>Returns <code>T</code>, <code>Q</code>, and reordered eigenvalues in <code>w</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.tgsen!\">\n<code>tgsen!(select, S, T, Q, Z) -&gt; (S, T, alpha, beta, Q, Z)</code> </dt> <dd>\n<p>Reorders the vectors of a generalized Schur decomposition. <code>select</code> specifices the eigenvalues in each cluster.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"Base.LinAlg.LAPACK.trsyl!\">\n<code>trsyl!(transa, transb, A, B, C, isgn=1) -&gt; (C, scale)</code> </dt> <dd>\n<p>Solves the Sylvester matrix equation <code>A * X +/- X * B = scale*C</code> where <code>A</code> and <code>B</code> are both quasi-upper triangular. If <code>transa = N</code>, <code>A</code> is not modified. If <code>transa = T</code>, <code>A</code> is transposed. If <code>transa = C</code>, <code>A</code> is conjugate transposed. Similarly for <code>transb</code> and <code>B</code>. If <code>isgn = 1</code>, the equation <code>A * X + X * B = scale * C</code> is solved. If <code>isgn = -1</code>, the equation <code>A * X - X * B = scale * C</code> is solved.</p> <p>Returns <code>X</code> (overwriting <code>C</code>) and <code>scale</code>.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/stdlib/linalg/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/stdlib/linalg/</a>\n  </p>\n</div>\n","manual/unicode-input/index":"<h1 id=\"man-unicode-input\">Unicode Input</h1> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This table may appear to contain missing characters in the second column, or even show characters that are inconsistent with the characters as they are rendered in the Julia REPL. In these cases, users are strongly advised to check their choice of fonts in their browser and REPL environment, as there are known issues with glyphs in many fonts.</p> </div> <table class=\"docutils\">   <tr class=\"row-odd\">\n<td>Code point(s)</td> <td>Character(s)</td> <td>Tab completion sequence(s)</td> <td>Unicode name(s)</td> </tr> <tr class=\"row-even\">\n<td>U+000A1</td> <td>¡</td> <td>\\textexclamdown</td> <td>INVERTED EXCLAMATION MARK</td> </tr> <tr class=\"row-odd\">\n<td>U+000A3</td> <td>£</td> <td>\\sterling</td> <td>POUND SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+000A5</td> <td>¥</td> <td>\\yen</td> <td>YEN SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+000A6</td> <td>¦</td> <td>\\textbrokenbar</td> <td>BROKEN BAR / BROKEN VERTICAL BAR</td> </tr> <tr class=\"row-even\">\n<td>U+000A7</td> <td>§</td> <td>\\S</td> <td>SECTION SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+000A8</td> <td>¨</td> <td>\\textasciidieresis</td> <td>DIAERESIS / SPACING DIAERESIS</td> </tr> <tr class=\"row-even\">\n<td>U+000A9</td> <td>©</td> <td>\\copyright, \\:copyright:</td> <td>COPYRIGHT SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+000AA</td> <td>ª</td> <td>\\textordfeminine</td> <td>FEMININE ORDINAL INDICATOR</td> </tr> <tr class=\"row-even\">\n<td>U+000AC</td> <td>¬</td> <td>\\neg</td> <td>NOT SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+000AE</td> <td>®</td> <td>\\circledR, \\:registered:</td> <td>REGISTERED SIGN / REGISTERED TRADE MARK SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+000AF</td> <td>¯</td> <td>\\textasciimacron</td> <td>MACRON / SPACING MACRON</td> </tr> <tr class=\"row-odd\">\n<td>U+000B0</td> <td>°</td> <td>\\degree</td> <td>DEGREE SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+000B1</td> <td>±</td> <td>\\pm</td> <td>PLUS-MINUS SIGN / PLUS-OR-MINUS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+000B2</td> <td>²</td> <td>\\^2</td> <td>SUPERSCRIPT TWO / SUPERSCRIPT DIGIT TWO</td> </tr> <tr class=\"row-even\">\n<td>U+000B3</td> <td>³</td> <td>\\^3</td> <td>SUPERSCRIPT THREE / SUPERSCRIPT DIGIT THREE</td> </tr> <tr class=\"row-odd\">\n<td>U+000B4</td> <td>´</td> <td>\\textasciiacute</td> <td>ACUTE ACCENT / SPACING ACUTE</td> </tr> <tr class=\"row-even\">\n<td>U+000B6</td> <td>¶</td> <td>\\P</td> <td>PILCROW SIGN / PARAGRAPH SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+000B7</td> <td>·</td> <td>\\cdotp</td> <td>MIDDLE DOT</td> </tr> <tr class=\"row-even\">\n<td>U+000B9</td> <td>¹</td> <td>\\^1</td> <td>SUPERSCRIPT ONE / SUPERSCRIPT DIGIT ONE</td> </tr> <tr class=\"row-odd\">\n<td>U+000BA</td> <td>º</td> <td>\\textordmasculine</td> <td>MASCULINE ORDINAL INDICATOR</td> </tr> <tr class=\"row-even\">\n<td>U+000BC</td> <td>¼</td> <td>\\textonequarter</td> <td>VULGAR FRACTION ONE QUARTER / FRACTION ONE QUARTER</td> </tr> <tr class=\"row-odd\">\n<td>U+000BD</td> <td>½</td> <td>\\textonehalf</td> <td>VULGAR FRACTION ONE HALF / FRACTION ONE HALF</td> </tr> <tr class=\"row-even\">\n<td>U+000BE</td> <td>¾</td> <td>\\textthreequarters</td> <td>VULGAR FRACTION THREE QUARTERS / FRACTION THREE QUARTERS</td> </tr> <tr class=\"row-odd\">\n<td>U+000BF</td> <td>¿</td> <td>\\textquestiondown</td> <td>INVERTED QUESTION MARK</td> </tr> <tr class=\"row-even\">\n<td>U+000C5</td> <td>Å</td> <td>\\AA</td> <td>LATIN CAPITAL LETTER A WITH RING ABOVE / LATIN CAPITAL LETTER A RING</td> </tr> <tr class=\"row-odd\">\n<td>U+000C6</td> <td>Æ</td> <td>\\AE</td> <td>LATIN CAPITAL LETTER AE / LATIN CAPITAL LETTER A E</td> </tr> <tr class=\"row-even\">\n<td>U+000D0</td> <td>Ð</td> <td>\\DH</td> <td>LATIN CAPITAL LETTER ETH</td> </tr> <tr class=\"row-odd\">\n<td>U+000D7</td> <td>×</td> <td>\\times</td> <td>MULTIPLICATION SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+000D8</td> <td>Ø</td> <td>\\O</td> <td>LATIN CAPITAL LETTER O WITH STROKE / LATIN CAPITAL LETTER O SLASH</td> </tr> <tr class=\"row-odd\">\n<td>U+000DE</td> <td>Þ</td> <td>\\TH</td> <td>LATIN CAPITAL LETTER THORN</td> </tr> <tr class=\"row-even\">\n<td>U+000DF</td> <td>ß</td> <td>\\ss</td> <td>LATIN SMALL LETTER SHARP S</td> </tr> <tr class=\"row-odd\">\n<td>U+000E5</td> <td>å</td> <td>\\aa</td> <td>LATIN SMALL LETTER A WITH RING ABOVE / LATIN SMALL LETTER A RING</td> </tr> <tr class=\"row-even\">\n<td>U+000E6</td> <td>æ</td> <td>\\ae</td> <td>LATIN SMALL LETTER AE / LATIN SMALL LETTER A E</td> </tr> <tr class=\"row-odd\">\n<td>U+000F0</td> <td>ð</td> <td>\\eth</td> <td>LATIN SMALL LETTER ETH</td> </tr> <tr class=\"row-even\">\n<td>U+000F7</td> <td>÷</td> <td>\\div</td> <td>DIVISION SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+000F8</td> <td>ø</td> <td>\\o</td> <td>LATIN SMALL LETTER O WITH STROKE / LATIN SMALL LETTER O SLASH</td> </tr> <tr class=\"row-even\">\n<td>U+000FE</td> <td>þ</td> <td>\\th</td> <td>LATIN SMALL LETTER THORN</td> </tr> <tr class=\"row-odd\">\n<td>U+00110</td> <td>Đ</td> <td>\\DJ</td> <td>LATIN CAPITAL LETTER D WITH STROKE / LATIN CAPITAL LETTER D BAR</td> </tr> <tr class=\"row-even\">\n<td>U+00111</td> <td>đ</td> <td>\\dj</td> <td>LATIN SMALL LETTER D WITH STROKE / LATIN SMALL LETTER D BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+00127</td> <td>ħ</td> <td>\\Elzxh, \\hbar</td> <td>LATIN SMALL LETTER H WITH STROKE / LATIN SMALL LETTER H BAR</td> </tr> <tr class=\"row-even\">\n<td>U+00141</td> <td>Ł</td> <td>\\L</td> <td>LATIN CAPITAL LETTER L WITH STROKE / LATIN CAPITAL LETTER L SLASH</td> </tr> <tr class=\"row-odd\">\n<td>U+00142</td> <td>ł</td> <td>\\l</td> <td>LATIN SMALL LETTER L WITH STROKE / LATIN SMALL LETTER L SLASH</td> </tr> <tr class=\"row-even\">\n<td>U+0014A</td> <td>Ŋ</td> <td>\\NG</td> <td>LATIN CAPITAL LETTER ENG</td> </tr> <tr class=\"row-odd\">\n<td>U+0014B</td> <td>ŋ</td> <td>\\ng</td> <td>LATIN SMALL LETTER ENG</td> </tr> <tr class=\"row-even\">\n<td>U+00152</td> <td>Œ</td> <td>\\OE</td> <td>LATIN CAPITAL LIGATURE OE / LATIN CAPITAL LETTER O E</td> </tr> <tr class=\"row-odd\">\n<td>U+00153</td> <td>œ</td> <td>\\oe</td> <td>LATIN SMALL LIGATURE OE / LATIN SMALL LETTER O E</td> </tr> <tr class=\"row-even\">\n<td>U+00195</td> <td>ƕ</td> <td>\\texthvlig</td> <td>LATIN SMALL LETTER HV / LATIN SMALL LETTER H V</td> </tr> <tr class=\"row-odd\">\n<td>U+0019E</td> <td>ƞ</td> <td>\\textnrleg</td> <td>LATIN SMALL LETTER N WITH LONG RIGHT LEG</td> </tr> <tr class=\"row-even\">\n<td>U+001B5</td> <td>Ƶ</td> <td>\\Zbar</td> <td>LATIN CAPITAL LETTER Z WITH STROKE / LATIN CAPITAL LETTER Z BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+001C2</td> <td>ǂ</td> <td>\\textdoublepipe</td> <td>LATIN LETTER ALVEOLAR CLICK / LATIN LETTER PIPE DOUBLE BAR</td> </tr> <tr class=\"row-even\">\n<td>U+00250</td> <td>ɐ</td> <td>\\Elztrna</td> <td>LATIN SMALL LETTER TURNED A</td> </tr> <tr class=\"row-odd\">\n<td>U+00252</td> <td>ɒ</td> <td>\\Elztrnsa</td> <td>LATIN SMALL LETTER TURNED ALPHA / LATIN SMALL LETTER TURNED SCRIPT A</td> </tr> <tr class=\"row-even\">\n<td>U+00254</td> <td>ɔ</td> <td>\\Elzopeno</td> <td>LATIN SMALL LETTER OPEN O</td> </tr> <tr class=\"row-odd\">\n<td>U+00256</td> <td>ɖ</td> <td>\\Elzrtld</td> <td>LATIN SMALL LETTER D WITH TAIL / LATIN SMALL LETTER D RETROFLEX HOOK</td> </tr> <tr class=\"row-even\">\n<td>U+00259</td> <td>ə</td> <td>\\Elzschwa</td> <td>LATIN SMALL LETTER SCHWA</td> </tr> <tr class=\"row-odd\">\n<td>U+0025B</td> <td>ɛ</td> <td>\\varepsilon</td> <td>LATIN SMALL LETTER OPEN E / LATIN SMALL LETTER EPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+00263</td> <td>ɣ</td> <td>\\Elzpgamma</td> <td>LATIN SMALL LETTER GAMMA</td> </tr> <tr class=\"row-odd\">\n<td>U+00264</td> <td>ɤ</td> <td>\\Elzpbgam</td> <td>LATIN SMALL LETTER RAMS HORN / LATIN SMALL LETTER BABY GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+00265</td> <td>ɥ</td> <td>\\Elztrnh</td> <td>LATIN SMALL LETTER TURNED H</td> </tr> <tr class=\"row-odd\">\n<td>U+0026C</td> <td>ɬ</td> <td>\\Elzbtdl</td> <td>LATIN SMALL LETTER L WITH BELT / LATIN SMALL LETTER L BELT</td> </tr> <tr class=\"row-even\">\n<td>U+0026D</td> <td>ɭ</td> <td>\\Elzrtll</td> <td>LATIN SMALL LETTER L WITH RETROFLEX HOOK / LATIN SMALL LETTER L RETROFLEX HOOK</td> </tr> <tr class=\"row-odd\">\n<td>U+0026F</td> <td>ɯ</td> <td>\\Elztrnm</td> <td>LATIN SMALL LETTER TURNED M</td> </tr> <tr class=\"row-even\">\n<td>U+00270</td> <td>ɰ</td> <td>\\Elztrnmlr</td> <td>LATIN SMALL LETTER TURNED M WITH LONG LEG</td> </tr> <tr class=\"row-odd\">\n<td>U+00271</td> <td>ɱ</td> <td>\\Elzltlmr</td> <td>LATIN SMALL LETTER M WITH HOOK / LATIN SMALL LETTER M HOOK</td> </tr> <tr class=\"row-even\">\n<td>U+00272</td> <td>ɲ</td> <td>\\Elzltln</td> <td>LATIN SMALL LETTER N WITH LEFT HOOK / LATIN SMALL LETTER N HOOK</td> </tr> <tr class=\"row-odd\">\n<td>U+00273</td> <td>ɳ</td> <td>\\Elzrtln</td> <td>LATIN SMALL LETTER N WITH RETROFLEX HOOK / LATIN SMALL LETTER N RETROFLEX HOOK</td> </tr> <tr class=\"row-even\">\n<td>U+00277</td> <td>ɷ</td> <td>\\Elzclomeg</td> <td>LATIN SMALL LETTER CLOSED OMEGA</td> </tr> <tr class=\"row-odd\">\n<td>U+00278</td> <td>ɸ</td> <td>\\textphi</td> <td>LATIN SMALL LETTER PHI</td> </tr> <tr class=\"row-even\">\n<td>U+00279</td> <td>ɹ</td> <td>\\Elztrnr</td> <td>LATIN SMALL LETTER TURNED R</td> </tr> <tr class=\"row-odd\">\n<td>U+0027A</td> <td>ɺ</td> <td>\\Elztrnrl</td> <td>LATIN SMALL LETTER TURNED R WITH LONG LEG</td> </tr> <tr class=\"row-even\">\n<td>U+0027B</td> <td>ɻ</td> <td>\\Elzrttrnr</td> <td>LATIN SMALL LETTER TURNED R WITH HOOK / LATIN SMALL LETTER TURNED R HOOK</td> </tr> <tr class=\"row-odd\">\n<td>U+0027C</td> <td>ɼ</td> <td>\\Elzrl</td> <td>LATIN SMALL LETTER R WITH LONG LEG</td> </tr> <tr class=\"row-even\">\n<td>U+0027D</td> <td>ɽ</td> <td>\\Elzrtlr</td> <td>LATIN SMALL LETTER R WITH TAIL / LATIN SMALL LETTER R HOOK</td> </tr> <tr class=\"row-odd\">\n<td>U+0027E</td> <td>ɾ</td> <td>\\Elzfhr</td> <td>LATIN SMALL LETTER R WITH FISHHOOK / LATIN SMALL LETTER FISHHOOK R</td> </tr> <tr class=\"row-even\">\n<td>U+00282</td> <td>ʂ</td> <td>\\Elzrtls</td> <td>LATIN SMALL LETTER S WITH HOOK / LATIN SMALL LETTER S HOOK</td> </tr> <tr class=\"row-odd\">\n<td>U+00283</td> <td>ʃ</td> <td>\\Elzesh</td> <td>LATIN SMALL LETTER ESH</td> </tr> <tr class=\"row-even\">\n<td>U+00287</td> <td>ʇ</td> <td>\\Elztrnt</td> <td>LATIN SMALL LETTER TURNED T</td> </tr> <tr class=\"row-odd\">\n<td>U+00288</td> <td>ʈ</td> <td>\\Elzrtlt</td> <td>LATIN SMALL LETTER T WITH RETROFLEX HOOK / LATIN SMALL LETTER T RETROFLEX HOOK</td> </tr> <tr class=\"row-even\">\n<td>U+0028A</td> <td>ʊ</td> <td>\\Elzpupsil</td> <td>LATIN SMALL LETTER UPSILON</td> </tr> <tr class=\"row-odd\">\n<td>U+0028B</td> <td>ʋ</td> <td>\\Elzpscrv</td> <td>LATIN SMALL LETTER V WITH HOOK / LATIN SMALL LETTER SCRIPT V</td> </tr> <tr class=\"row-even\">\n<td>U+0028C</td> <td>ʌ</td> <td>\\Elzinvv</td> <td>LATIN SMALL LETTER TURNED V</td> </tr> <tr class=\"row-odd\">\n<td>U+0028D</td> <td>ʍ</td> <td>\\Elzinvw</td> <td>LATIN SMALL LETTER TURNED W</td> </tr> <tr class=\"row-even\">\n<td>U+0028E</td> <td>ʎ</td> <td>\\Elztrny</td> <td>LATIN SMALL LETTER TURNED Y</td> </tr> <tr class=\"row-odd\">\n<td>U+00290</td> <td>ʐ</td> <td>\\Elzrtlz</td> <td>LATIN SMALL LETTER Z WITH RETROFLEX HOOK / LATIN SMALL LETTER Z RETROFLEX HOOK</td> </tr> <tr class=\"row-even\">\n<td>U+00292</td> <td>ʒ</td> <td>\\Elzyogh</td> <td>LATIN SMALL LETTER EZH / LATIN SMALL LETTER YOGH</td> </tr> <tr class=\"row-odd\">\n<td>U+00294</td> <td>ʔ</td> <td>\\Elzglst</td> <td>LATIN LETTER GLOTTAL STOP</td> </tr> <tr class=\"row-even\">\n<td>U+00295</td> <td>ʕ</td> <td>\\Elzreglst</td> <td>LATIN LETTER PHARYNGEAL VOICED FRICATIVE / LATIN LETTER REVERSED GLOTTAL STOP</td> </tr> <tr class=\"row-odd\">\n<td>U+00296</td> <td>ʖ</td> <td>\\Elzinglst</td> <td>LATIN LETTER INVERTED GLOTTAL STOP</td> </tr> <tr class=\"row-even\">\n<td>U+0029E</td> <td>ʞ</td> <td>\\textturnk</td> <td>LATIN SMALL LETTER TURNED K</td> </tr> <tr class=\"row-odd\">\n<td>U+002A4</td> <td>ʤ</td> <td>\\Elzdyogh</td> <td>LATIN SMALL LETTER DEZH DIGRAPH / LATIN SMALL LETTER D YOGH</td> </tr> <tr class=\"row-even\">\n<td>U+002A7</td> <td>ʧ</td> <td>\\Elztesh</td> <td>LATIN SMALL LETTER TESH DIGRAPH / LATIN SMALL LETTER T ESH</td> </tr> <tr class=\"row-odd\">\n<td>U+002B0</td> <td>ʰ</td> <td>\\^h</td> <td>MODIFIER LETTER SMALL H</td> </tr> <tr class=\"row-even\">\n<td>U+002B2</td> <td>ʲ</td> <td>\\^j</td> <td>MODIFIER LETTER SMALL J</td> </tr> <tr class=\"row-odd\">\n<td>U+002B3</td> <td>ʳ</td> <td>\\^r</td> <td>MODIFIER LETTER SMALL R</td> </tr> <tr class=\"row-even\">\n<td>U+002B7</td> <td>ʷ</td> <td>\\^w</td> <td>MODIFIER LETTER SMALL W</td> </tr> <tr class=\"row-odd\">\n<td>U+002B8</td> <td>ʸ</td> <td>\\^y</td> <td>MODIFIER LETTER SMALL Y</td> </tr> <tr class=\"row-even\">\n<td>U+002BC</td> <td>ʼ</td> <td>\\rasp</td> <td>MODIFIER LETTER APOSTROPHE</td> </tr> <tr class=\"row-odd\">\n<td>U+002C7</td> <td>ˇ</td> <td>\\textasciicaron</td> <td>CARON / MODIFIER LETTER HACEK</td> </tr> <tr class=\"row-even\">\n<td>U+002C8</td> <td>ˈ</td> <td>\\Elzverts</td> <td>MODIFIER LETTER VERTICAL LINE</td> </tr> <tr class=\"row-odd\">\n<td>U+002CC</td> <td>ˌ</td> <td>\\Elzverti</td> <td>MODIFIER LETTER LOW VERTICAL LINE</td> </tr> <tr class=\"row-even\">\n<td>U+002D0</td> <td>ː</td> <td>\\Elzlmrk</td> <td>MODIFIER LETTER TRIANGULAR COLON</td> </tr> <tr class=\"row-odd\">\n<td>U+002D1</td> <td>ˑ</td> <td>\\Elzhlmrk</td> <td>MODIFIER LETTER HALF TRIANGULAR COLON</td> </tr> <tr class=\"row-even\">\n<td>U+002D2</td> <td>˒</td> <td>\\Elzsbrhr</td> <td>MODIFIER LETTER CENTRED RIGHT HALF RING / MODIFIER LETTER CENTERED RIGHT HALF RING</td> </tr> <tr class=\"row-odd\">\n<td>U+002D3</td> <td>˓</td> <td>\\Elzsblhr</td> <td>MODIFIER LETTER CENTRED LEFT HALF RING / MODIFIER LETTER CENTERED LEFT HALF RING</td> </tr> <tr class=\"row-even\">\n<td>U+002D4</td> <td>˔</td> <td>\\Elzrais</td> <td>MODIFIER LETTER UP TACK</td> </tr> <tr class=\"row-odd\">\n<td>U+002D5</td> <td>˕</td> <td>\\Elzlow</td> <td>MODIFIER LETTER DOWN TACK</td> </tr> <tr class=\"row-even\">\n<td>U+002D8</td> <td>˘</td> <td>\\u</td> <td>BREVE / SPACING BREVE</td> </tr> <tr class=\"row-odd\">\n<td>U+002DC</td> <td>˜</td> <td>\\texttildelow</td> <td>SMALL TILDE / SPACING TILDE</td> </tr> <tr class=\"row-even\">\n<td>U+002E1</td> <td>ˡ</td> <td>\\^l</td> <td>MODIFIER LETTER SMALL L</td> </tr> <tr class=\"row-odd\">\n<td>U+002E2</td> <td>ˢ</td> <td>\\^s</td> <td>MODIFIER LETTER SMALL S</td> </tr> <tr class=\"row-even\">\n<td>U+002E3</td> <td>ˣ</td> <td>\\^x</td> <td>MODIFIER LETTER SMALL X</td> </tr> <tr class=\"row-odd\">\n<td>U+00300</td> <td> </td> <td>\\grave</td> <td>COMBINING GRAVE ACCENT / NON-SPACING GRAVE</td> </tr> <tr class=\"row-even\">\n<td>U+00301</td> <td> </td> <td>\\acute</td> <td>COMBINING ACUTE ACCENT / NON-SPACING ACUTE</td> </tr> <tr class=\"row-odd\">\n<td>U+00302</td> <td> </td> <td>\\hat</td> <td>COMBINING CIRCUMFLEX ACCENT / NON-SPACING CIRCUMFLEX</td> </tr> <tr class=\"row-even\">\n<td>U+00303</td> <td> </td> <td>\\tilde</td> <td>COMBINING TILDE / NON-SPACING TILDE</td> </tr> <tr class=\"row-odd\">\n<td>U+00304</td> <td> </td> <td>\\bar</td> <td>COMBINING MACRON / NON-SPACING MACRON</td> </tr> <tr class=\"row-even\">\n<td>U+00305</td> <td> </td> <td>\\overbar</td> <td>COMBINING OVERLINE / NON-SPACING OVERSCORE</td> </tr> <tr class=\"row-odd\">\n<td>U+00306</td> <td> </td> <td>\\breve</td> <td>COMBINING BREVE / NON-SPACING BREVE</td> </tr> <tr class=\"row-even\">\n<td>U+00307</td> <td> </td> <td>\\dot</td> <td>COMBINING DOT ABOVE / NON-SPACING DOT ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+00308</td> <td> </td> <td>\\ddot</td> <td>COMBINING DIAERESIS / NON-SPACING DIAERESIS</td> </tr> <tr class=\"row-even\">\n<td>U+00309</td> <td> </td> <td>\\ovhook</td> <td>COMBINING HOOK ABOVE / NON-SPACING HOOK ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+0030A</td> <td> </td> <td>\\ocirc</td> <td>COMBINING RING ABOVE / NON-SPACING RING ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+0030B</td> <td> </td> <td>\\H</td> <td>COMBINING DOUBLE ACUTE ACCENT / NON-SPACING DOUBLE ACUTE</td> </tr> <tr class=\"row-odd\">\n<td>U+0030C</td> <td> </td> <td>\\check</td> <td>COMBINING CARON / NON-SPACING HACEK</td> </tr> <tr class=\"row-even\">\n<td>U+00310</td> <td> </td> <td>\\candra</td> <td>COMBINING CANDRABINDU / NON-SPACING CANDRABINDU</td> </tr> <tr class=\"row-odd\">\n<td>U+00312</td> <td> </td> <td>\\oturnedcomma</td> <td>COMBINING TURNED COMMA ABOVE / NON-SPACING TURNED COMMA ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+00315</td> <td> </td> <td>\\ocommatopright</td> <td>COMBINING COMMA ABOVE RIGHT / NON-SPACING COMMA ABOVE RIGHT</td> </tr> <tr class=\"row-odd\">\n<td>U+0031A</td> <td> </td> <td>\\droang</td> <td>COMBINING LEFT ANGLE ABOVE / NON-SPACING LEFT ANGLE ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+00321</td> <td> </td> <td>\\Elzpalh</td> <td>COMBINING PALATALIZED HOOK BELOW / NON-SPACING PALATALIZED HOOK BELOW</td> </tr> <tr class=\"row-odd\">\n<td>U+00322</td> <td> </td> <td>\\Elzrh</td> <td>COMBINING RETROFLEX HOOK BELOW / NON-SPACING RETROFLEX HOOK BELOW</td> </tr> <tr class=\"row-even\">\n<td>U+00327</td> <td> </td> <td>\\c</td> <td>COMBINING CEDILLA / NON-SPACING CEDILLA</td> </tr> <tr class=\"row-odd\">\n<td>U+00328</td> <td> </td> <td>\\k</td> <td>COMBINING OGONEK / NON-SPACING OGONEK</td> </tr> <tr class=\"row-even\">\n<td>U+0032A</td> <td> </td> <td>\\Elzsbbrg</td> <td>COMBINING BRIDGE BELOW / NON-SPACING BRIDGE BELOW</td> </tr> <tr class=\"row-odd\">\n<td>U+00330</td> <td> </td> <td>\\wideutilde</td> <td>COMBINING TILDE BELOW / NON-SPACING TILDE BELOW</td> </tr> <tr class=\"row-even\">\n<td>U+00331</td> <td> </td> <td>\\underbar</td> <td>COMBINING MACRON BELOW / NON-SPACING MACRON BELOW</td> </tr> <tr class=\"row-odd\">\n<td>U+00335</td> <td> </td> <td>\\Elzxl</td> <td>COMBINING SHORT STROKE OVERLAY / NON-SPACING SHORT BAR OVERLAY</td> </tr> <tr class=\"row-even\">\n<td>U+00336</td> <td> </td> <td>\\Elzbar, \\sout</td> <td>COMBINING LONG STROKE OVERLAY / NON-SPACING LONG BAR OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+00338</td> <td> </td> <td>\\not</td> <td>COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-even\">\n<td>U+00391</td> <td>Α</td> <td>\\Alpha</td> <td>GREEK CAPITAL LETTER ALPHA</td> </tr> <tr class=\"row-odd\">\n<td>U+00392</td> <td>Β</td> <td>\\Beta</td> <td>GREEK CAPITAL LETTER BETA</td> </tr> <tr class=\"row-even\">\n<td>U+00393</td> <td>Γ</td> <td>\\Gamma</td> <td>GREEK CAPITAL LETTER GAMMA</td> </tr> <tr class=\"row-odd\">\n<td>U+00394</td> <td>Δ</td> <td>\\Delta</td> <td>GREEK CAPITAL LETTER DELTA</td> </tr> <tr class=\"row-even\">\n<td>U+00395</td> <td>Ε</td> <td>\\Epsilon</td> <td>GREEK CAPITAL LETTER EPSILON</td> </tr> <tr class=\"row-odd\">\n<td>U+00396</td> <td>Ζ</td> <td>\\Zeta</td> <td>GREEK CAPITAL LETTER ZETA</td> </tr> <tr class=\"row-even\">\n<td>U+00397</td> <td>Η</td> <td>\\Eta</td> <td>GREEK CAPITAL LETTER ETA</td> </tr> <tr class=\"row-odd\">\n<td>U+00398</td> <td>Θ</td> <td>\\Theta</td> <td>GREEK CAPITAL LETTER THETA</td> </tr> <tr class=\"row-even\">\n<td>U+00399</td> <td>Ι</td> <td>\\Iota</td> <td>GREEK CAPITAL LETTER IOTA</td> </tr> <tr class=\"row-odd\">\n<td>U+0039A</td> <td>Κ</td> <td>\\Kappa</td> <td>GREEK CAPITAL LETTER KAPPA</td> </tr> <tr class=\"row-even\">\n<td>U+0039B</td> <td>Λ</td> <td>\\Lambda</td> <td>GREEK CAPITAL LETTER LAMDA / GREEK CAPITAL LETTER LAMBDA</td> </tr> <tr class=\"row-odd\">\n<td>U+0039C</td> <td>Μ</td> <td>\\upMu</td> <td>GREEK CAPITAL LETTER MU</td> </tr> <tr class=\"row-even\">\n<td>U+0039D</td> <td>Ν</td> <td>\\upNu</td> <td>GREEK CAPITAL LETTER NU</td> </tr> <tr class=\"row-odd\">\n<td>U+0039E</td> <td>Ξ</td> <td>\\Xi</td> <td>GREEK CAPITAL LETTER XI</td> </tr> <tr class=\"row-even\">\n<td>U+0039F</td> <td>Ο</td> <td>\\upOmicron</td> <td>GREEK CAPITAL LETTER OMICRON</td> </tr> <tr class=\"row-odd\">\n<td>U+003A0</td> <td>Π</td> <td>\\Pi</td> <td>GREEK CAPITAL LETTER PI</td> </tr> <tr class=\"row-even\">\n<td>U+003A1</td> <td>Ρ</td> <td>\\Rho</td> <td>GREEK CAPITAL LETTER RHO</td> </tr> <tr class=\"row-odd\">\n<td>U+003A3</td> <td>Σ</td> <td>\\Sigma</td> <td>GREEK CAPITAL LETTER SIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+003A4</td> <td>Τ</td> <td>\\Tau</td> <td>GREEK CAPITAL LETTER TAU</td> </tr> <tr class=\"row-odd\">\n<td>U+003A5</td> <td>Υ</td> <td>\\Upsilon</td> <td>GREEK CAPITAL LETTER UPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+003A6</td> <td>Φ</td> <td>\\Phi</td> <td>GREEK CAPITAL LETTER PHI</td> </tr> <tr class=\"row-odd\">\n<td>U+003A7</td> <td>Χ</td> <td>\\Chi</td> <td>GREEK CAPITAL LETTER CHI</td> </tr> <tr class=\"row-even\">\n<td>U+003A8</td> <td>Ψ</td> <td>\\Psi</td> <td>GREEK CAPITAL LETTER PSI</td> </tr> <tr class=\"row-odd\">\n<td>U+003A9</td> <td>Ω</td> <td>\\Omega</td> <td>GREEK CAPITAL LETTER OMEGA</td> </tr> <tr class=\"row-even\">\n<td>U+003B1</td> <td>α</td> <td>\\alpha</td> <td>GREEK SMALL LETTER ALPHA</td> </tr> <tr class=\"row-odd\">\n<td>U+003B2</td> <td>β</td> <td>\\beta</td> <td>GREEK SMALL LETTER BETA</td> </tr> <tr class=\"row-even\">\n<td>U+003B3</td> <td>γ</td> <td>\\gamma</td> <td>GREEK SMALL LETTER GAMMA</td> </tr> <tr class=\"row-odd\">\n<td>U+003B4</td> <td>δ</td> <td>\\delta</td> <td>GREEK SMALL LETTER DELTA</td> </tr> <tr class=\"row-even\">\n<td>U+003B5</td> <td>ε</td> <td>\\upepsilon</td> <td>GREEK SMALL LETTER EPSILON</td> </tr> <tr class=\"row-odd\">\n<td>U+003B6</td> <td>ζ</td> <td>\\zeta</td> <td>GREEK SMALL LETTER ZETA</td> </tr> <tr class=\"row-even\">\n<td>U+003B7</td> <td>η</td> <td>\\eta</td> <td>GREEK SMALL LETTER ETA</td> </tr> <tr class=\"row-odd\">\n<td>U+003B8</td> <td>θ</td> <td>\\theta</td> <td>GREEK SMALL LETTER THETA</td> </tr> <tr class=\"row-even\">\n<td>U+003B9</td> <td>ι</td> <td>\\iota</td> <td>GREEK SMALL LETTER IOTA</td> </tr> <tr class=\"row-odd\">\n<td>U+003BA</td> <td>κ</td> <td>\\kappa</td> <td>GREEK SMALL LETTER KAPPA</td> </tr> <tr class=\"row-even\">\n<td>U+003BB</td> <td>λ</td> <td>\\lambda</td> <td>GREEK SMALL LETTER LAMDA / GREEK SMALL LETTER LAMBDA</td> </tr> <tr class=\"row-odd\">\n<td>U+003BC</td> <td>μ</td> <td>\\mu</td> <td>GREEK SMALL LETTER MU</td> </tr> <tr class=\"row-even\">\n<td>U+003BD</td> <td>ν</td> <td>\\nu</td> <td>GREEK SMALL LETTER NU</td> </tr> <tr class=\"row-odd\">\n<td>U+003BE</td> <td>ξ</td> <td>\\xi</td> <td>GREEK SMALL LETTER XI</td> </tr> <tr class=\"row-even\">\n<td>U+003BF</td> <td>ο</td> <td>\\upomicron</td> <td>GREEK SMALL LETTER OMICRON</td> </tr> <tr class=\"row-odd\">\n<td>U+003C0</td> <td>π</td> <td>\\pi</td> <td>GREEK SMALL LETTER PI</td> </tr> <tr class=\"row-even\">\n<td>U+003C1</td> <td>ρ</td> <td>\\rho</td> <td>GREEK SMALL LETTER RHO</td> </tr> <tr class=\"row-odd\">\n<td>U+003C2</td> <td>ς</td> <td>\\varsigma</td> <td>GREEK SMALL LETTER FINAL SIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+003C3</td> <td>σ</td> <td>\\sigma</td> <td>GREEK SMALL LETTER SIGMA</td> </tr> <tr class=\"row-odd\">\n<td>U+003C4</td> <td>τ</td> <td>\\tau</td> <td>GREEK SMALL LETTER TAU</td> </tr> <tr class=\"row-even\">\n<td>U+003C5</td> <td>υ</td> <td>\\upsilon</td> <td>GREEK SMALL LETTER UPSILON</td> </tr> <tr class=\"row-odd\">\n<td>U+003C6</td> <td>φ</td> <td>\\varphi</td> <td>GREEK SMALL LETTER PHI</td> </tr> <tr class=\"row-even\">\n<td>U+003C7</td> <td>χ</td> <td>\\chi</td> <td>GREEK SMALL LETTER CHI</td> </tr> <tr class=\"row-odd\">\n<td>U+003C8</td> <td>ψ</td> <td>\\psi</td> <td>GREEK SMALL LETTER PSI</td> </tr> <tr class=\"row-even\">\n<td>U+003C9</td> <td>ω</td> <td>\\omega</td> <td>GREEK SMALL LETTER OMEGA</td> </tr> <tr class=\"row-odd\">\n<td>U+003D0</td> <td>ϐ</td> <td>\\upvarbeta</td> <td>GREEK BETA SYMBOL / GREEK SMALL LETTER CURLED BETA</td> </tr> <tr class=\"row-even\">\n<td>U+003D1</td> <td>ϑ</td> <td>\\vartheta</td> <td>GREEK THETA SYMBOL / GREEK SMALL LETTER SCRIPT THETA</td> </tr> <tr class=\"row-odd\">\n<td>U+003D5</td> <td>ϕ</td> <td>\\phi</td> <td>GREEK PHI SYMBOL / GREEK SMALL LETTER SCRIPT PHI</td> </tr> <tr class=\"row-even\">\n<td>U+003D6</td> <td>ϖ</td> <td>\\varpi</td> <td>GREEK PI SYMBOL / GREEK SMALL LETTER OMEGA PI</td> </tr> <tr class=\"row-odd\">\n<td>U+003D8</td> <td>Ϙ</td> <td>\\upoldKoppa</td> <td>GREEK LETTER ARCHAIC KOPPA</td> </tr> <tr class=\"row-even\">\n<td>U+003D9</td> <td>ϙ</td> <td>\\upoldkoppa</td> <td>GREEK SMALL LETTER ARCHAIC KOPPA</td> </tr> <tr class=\"row-odd\">\n<td>U+003DA</td> <td>Ϛ</td> <td>\\Stigma</td> <td>GREEK LETTER STIGMA / GREEK CAPITAL LETTER STIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+003DB</td> <td>ϛ</td> <td>\\upstigma</td> <td>GREEK SMALL LETTER STIGMA</td> </tr> <tr class=\"row-odd\">\n<td>U+003DC</td> <td>Ϝ</td> <td>\\Digamma</td> <td>GREEK LETTER DIGAMMA / GREEK CAPITAL LETTER DIGAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+003DD</td> <td>ϝ</td> <td>\\digamma</td> <td>GREEK SMALL LETTER DIGAMMA</td> </tr> <tr class=\"row-odd\">\n<td>U+003DE</td> <td>Ϟ</td> <td>\\Koppa</td> <td>GREEK LETTER KOPPA / GREEK CAPITAL LETTER KOPPA</td> </tr> <tr class=\"row-even\">\n<td>U+003DF</td> <td>ϟ</td> <td>\\upkoppa</td> <td>GREEK SMALL LETTER KOPPA</td> </tr> <tr class=\"row-odd\">\n<td>U+003E0</td> <td>Ϡ</td> <td>\\Sampi</td> <td>GREEK LETTER SAMPI / GREEK CAPITAL LETTER SAMPI</td> </tr> <tr class=\"row-even\">\n<td>U+003E1</td> <td>ϡ</td> <td>\\upsampi</td> <td>GREEK SMALL LETTER SAMPI</td> </tr> <tr class=\"row-odd\">\n<td>U+003F0</td> <td>ϰ</td> <td>\\varkappa</td> <td>GREEK KAPPA SYMBOL / GREEK SMALL LETTER SCRIPT KAPPA</td> </tr> <tr class=\"row-even\">\n<td>U+003F1</td> <td>ϱ</td> <td>\\varrho</td> <td>GREEK RHO SYMBOL / GREEK SMALL LETTER TAILED RHO</td> </tr> <tr class=\"row-odd\">\n<td>U+003F4</td> <td>ϴ</td> <td>\\textTheta</td> <td>GREEK CAPITAL THETA SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+003F5</td> <td>ϵ</td> <td>\\epsilon</td> <td>GREEK LUNATE EPSILON SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+003F6</td> <td>϶</td> <td>\\backepsilon</td> <td>GREEK REVERSED LUNATE EPSILON SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+01D2C</td> <td>ᴬ</td> <td>\\^A</td> <td>MODIFIER LETTER CAPITAL A</td> </tr> <tr class=\"row-odd\">\n<td>U+01D2E</td> <td>ᴮ</td> <td>\\^B</td> <td>MODIFIER LETTER CAPITAL B</td> </tr> <tr class=\"row-even\">\n<td>U+01D30</td> <td>ᴰ</td> <td>\\^D</td> <td>MODIFIER LETTER CAPITAL D</td> </tr> <tr class=\"row-odd\">\n<td>U+01D31</td> <td>ᴱ</td> <td>\\^E</td> <td>MODIFIER LETTER CAPITAL E</td> </tr> <tr class=\"row-even\">\n<td>U+01D33</td> <td>ᴳ</td> <td>\\^G</td> <td>MODIFIER LETTER CAPITAL G</td> </tr> <tr class=\"row-odd\">\n<td>U+01D34</td> <td>ᴴ</td> <td>\\^H</td> <td>MODIFIER LETTER CAPITAL H</td> </tr> <tr class=\"row-even\">\n<td>U+01D35</td> <td>ᴵ</td> <td>\\^I</td> <td>MODIFIER LETTER CAPITAL I</td> </tr> <tr class=\"row-odd\">\n<td>U+01D36</td> <td>ᴶ</td> <td>\\^J</td> <td>MODIFIER LETTER CAPITAL J</td> </tr> <tr class=\"row-even\">\n<td>U+01D37</td> <td>ᴷ</td> <td>\\^K</td> <td>MODIFIER LETTER CAPITAL K</td> </tr> <tr class=\"row-odd\">\n<td>U+01D38</td> <td>ᴸ</td> <td>\\^L</td> <td>MODIFIER LETTER CAPITAL L</td> </tr> <tr class=\"row-even\">\n<td>U+01D39</td> <td>ᴹ</td> <td>\\^M</td> <td>MODIFIER LETTER CAPITAL M</td> </tr> <tr class=\"row-odd\">\n<td>U+01D3A</td> <td>ᴺ</td> <td>\\^N</td> <td>MODIFIER LETTER CAPITAL N</td> </tr> <tr class=\"row-even\">\n<td>U+01D3C</td> <td>ᴼ</td> <td>\\^O</td> <td>MODIFIER LETTER CAPITAL O</td> </tr> <tr class=\"row-odd\">\n<td>U+01D3E</td> <td>ᴾ</td> <td>\\^P</td> <td>MODIFIER LETTER CAPITAL P</td> </tr> <tr class=\"row-even\">\n<td>U+01D3F</td> <td>ᴿ</td> <td>\\^R</td> <td>MODIFIER LETTER CAPITAL R</td> </tr> <tr class=\"row-odd\">\n<td>U+01D40</td> <td>ᵀ</td> <td>\\^T</td> <td>MODIFIER LETTER CAPITAL T</td> </tr> <tr class=\"row-even\">\n<td>U+01D41</td> <td>ᵁ</td> <td>\\^U</td> <td>MODIFIER LETTER CAPITAL U</td> </tr> <tr class=\"row-odd\">\n<td>U+01D42</td> <td>ᵂ</td> <td>\\^W</td> <td>MODIFIER LETTER CAPITAL W</td> </tr> <tr class=\"row-even\">\n<td>U+01D43</td> <td>ᵃ</td> <td>\\^a</td> <td>MODIFIER LETTER SMALL A</td> </tr> <tr class=\"row-odd\">\n<td>U+01D45</td> <td>ᵅ</td> <td>\\^alpha</td> <td>MODIFIER LETTER SMALL ALPHA</td> </tr> <tr class=\"row-even\">\n<td>U+01D47</td> <td>ᵇ</td> <td>\\^b</td> <td>MODIFIER LETTER SMALL B</td> </tr> <tr class=\"row-odd\">\n<td>U+01D48</td> <td>ᵈ</td> <td>\\^d</td> <td>MODIFIER LETTER SMALL D</td> </tr> <tr class=\"row-even\">\n<td>U+01D49</td> <td>ᵉ</td> <td>\\^e</td> <td>MODIFIER LETTER SMALL E</td> </tr> <tr class=\"row-odd\">\n<td>U+01D4B</td> <td>ᵋ</td> <td>\\^epsilon</td> <td>MODIFIER LETTER SMALL OPEN E</td> </tr> <tr class=\"row-even\">\n<td>U+01D4D</td> <td>ᵍ</td> <td>\\^g</td> <td>MODIFIER LETTER SMALL G</td> </tr> <tr class=\"row-odd\">\n<td>U+01D4F</td> <td>ᵏ</td> <td>\\^k</td> <td>MODIFIER LETTER SMALL K</td> </tr> <tr class=\"row-even\">\n<td>U+01D50</td> <td>ᵐ</td> <td>\\^m</td> <td>MODIFIER LETTER SMALL M</td> </tr> <tr class=\"row-odd\">\n<td>U+01D52</td> <td>ᵒ</td> <td>\\^o</td> <td>MODIFIER LETTER SMALL O</td> </tr> <tr class=\"row-even\">\n<td>U+01D56</td> <td>ᵖ</td> <td>\\^p</td> <td>MODIFIER LETTER SMALL P</td> </tr> <tr class=\"row-odd\">\n<td>U+01D57</td> <td>ᵗ</td> <td>\\^t</td> <td>MODIFIER LETTER SMALL T</td> </tr> <tr class=\"row-even\">\n<td>U+01D58</td> <td>ᵘ</td> <td>\\^u</td> <td>MODIFIER LETTER SMALL U</td> </tr> <tr class=\"row-odd\">\n<td>U+01D5B</td> <td>ᵛ</td> <td>\\^v</td> <td>MODIFIER LETTER SMALL V</td> </tr> <tr class=\"row-even\">\n<td>U+01D5D</td> <td>ᵝ</td> <td>\\^beta</td> <td>MODIFIER LETTER SMALL BETA</td> </tr> <tr class=\"row-odd\">\n<td>U+01D5E</td> <td>ᵞ</td> <td>\\^gamma</td> <td>MODIFIER LETTER SMALL GREEK GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+01D5F</td> <td>ᵟ</td> <td>\\^delta</td> <td>MODIFIER LETTER SMALL DELTA</td> </tr> <tr class=\"row-odd\">\n<td>U+01D60</td> <td>ᵠ</td> <td>\\^phi</td> <td>MODIFIER LETTER SMALL GREEK PHI</td> </tr> <tr class=\"row-even\">\n<td>U+01D61</td> <td>ᵡ</td> <td>\\^chi</td> <td>MODIFIER LETTER SMALL CHI</td> </tr> <tr class=\"row-odd\">\n<td>U+01D62</td> <td>ᵢ</td> <td>\\_i</td> <td>LATIN SUBSCRIPT SMALL LETTER I</td> </tr> <tr class=\"row-even\">\n<td>U+01D63</td> <td>ᵣ</td> <td>\\_r</td> <td>LATIN SUBSCRIPT SMALL LETTER R</td> </tr> <tr class=\"row-odd\">\n<td>U+01D64</td> <td>ᵤ</td> <td>\\_u</td> <td>LATIN SUBSCRIPT SMALL LETTER U</td> </tr> <tr class=\"row-even\">\n<td>U+01D65</td> <td>ᵥ</td> <td>\\_v</td> <td>LATIN SUBSCRIPT SMALL LETTER V</td> </tr> <tr class=\"row-odd\">\n<td>U+01D66</td> <td>ᵦ</td> <td>\\_beta</td> <td>GREEK SUBSCRIPT SMALL LETTER BETA</td> </tr> <tr class=\"row-even\">\n<td>U+01D67</td> <td>ᵧ</td> <td>\\_gamma</td> <td>GREEK SUBSCRIPT SMALL LETTER GAMMA</td> </tr> <tr class=\"row-odd\">\n<td>U+01D68</td> <td>ᵨ</td> <td>\\_rho</td> <td>GREEK SUBSCRIPT SMALL LETTER RHO</td> </tr> <tr class=\"row-even\">\n<td>U+01D69</td> <td>ᵩ</td> <td>\\_phi</td> <td>GREEK SUBSCRIPT SMALL LETTER PHI</td> </tr> <tr class=\"row-odd\">\n<td>U+01D6A</td> <td>ᵪ</td> <td>\\_chi</td> <td>GREEK SUBSCRIPT SMALL LETTER CHI</td> </tr> <tr class=\"row-even\">\n<td>U+01D9C</td> <td>ᶜ</td> <td>\\^c</td> <td>MODIFIER LETTER SMALL C</td> </tr> <tr class=\"row-odd\">\n<td>U+01DA0</td> <td>ᶠ</td> <td>\\^f</td> <td>MODIFIER LETTER SMALL F</td> </tr> <tr class=\"row-even\">\n<td>U+01DA5</td> <td>ᶥ</td> <td>\\^iota</td> <td>MODIFIER LETTER SMALL IOTA</td> </tr> <tr class=\"row-odd\">\n<td>U+01DB2</td> <td>ᶲ</td> <td>\\^Phi</td> <td>MODIFIER LETTER SMALL PHI</td> </tr> <tr class=\"row-even\">\n<td>U+01DBB</td> <td>ᶻ</td> <td>\\^z</td> <td>MODIFIER LETTER SMALL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+01DBF</td> <td>ᶿ</td> <td>\\^theta</td> <td>MODIFIER LETTER SMALL THETA</td> </tr> <tr class=\"row-even\">\n<td>U+02002</td> <td> </td> <td>\\enspace</td> <td>EN SPACE</td> </tr> <tr class=\"row-odd\">\n<td>U+02003</td> <td> </td> <td>\\quad</td> <td>EM SPACE</td> </tr> <tr class=\"row-even\">\n<td>U+02005</td> <td> </td> <td>\\thickspace</td> <td>FOUR-PER-EM SPACE</td> </tr> <tr class=\"row-odd\">\n<td>U+02009</td> <td> </td> <td>\\thinspace</td> <td>THIN SPACE</td> </tr> <tr class=\"row-even\">\n<td>U+0200A</td> <td> </td> <td>\\hspace</td> <td>HAIR SPACE</td> </tr> <tr class=\"row-odd\">\n<td>U+02013</td> <td>–</td> <td>\\endash</td> <td>EN DASH</td> </tr> <tr class=\"row-even\">\n<td>U+02014</td> <td>—</td> <td>\\emdash</td> <td>EM DASH</td> </tr> <tr class=\"row-odd\">\n<td>U+02016</td> <td>‖</td> <td>\\Vert</td> <td>DOUBLE VERTICAL LINE / DOUBLE VERTICAL BAR</td> </tr> <tr class=\"row-even\">\n<td>U+02018</td> <td>‘</td> <td>\\lq</td> <td>LEFT SINGLE QUOTATION MARK / SINGLE TURNED COMMA QUOTATION MARK</td> </tr> <tr class=\"row-odd\">\n<td>U+02019</td> <td>’</td> <td>\\rq</td> <td>RIGHT SINGLE QUOTATION MARK / SINGLE COMMA QUOTATION MARK</td> </tr> <tr class=\"row-even\">\n<td>U+0201B</td> <td>‛</td> <td>\\Elzreapos</td> <td>SINGLE HIGH-REVERSED-9 QUOTATION MARK / SINGLE REVERSED COMMA QUOTATION MARK</td> </tr> <tr class=\"row-odd\">\n<td>U+0201C</td> <td>“</td> <td>\\textquotedblleft</td> <td>LEFT DOUBLE QUOTATION MARK / DOUBLE TURNED COMMA QUOTATION MARK</td> </tr> <tr class=\"row-even\">\n<td>U+0201D</td> <td>”</td> <td>\\textquotedblright</td> <td>RIGHT DOUBLE QUOTATION MARK / DOUBLE COMMA QUOTATION MARK</td> </tr> <tr class=\"row-odd\">\n<td>U+02020</td> <td>†</td> <td>\\dagger</td> <td>DAGGER</td> </tr> <tr class=\"row-even\">\n<td>U+02021</td> <td>‡</td> <td>\\ddagger</td> <td>DOUBLE DAGGER</td> </tr> <tr class=\"row-odd\">\n<td>U+02022</td> <td>\n<ul class=\"first last simple\"> <li> </ul> </td> <td>\\bullet</td> <td>BULLET</td> </tr> <tr class=\"row-even\">\n<td>U+02026</td> <td>…</td> <td>\\dots</td> <td>HORIZONTAL ELLIPSIS</td> </tr> <tr class=\"row-odd\">\n<td>U+02030</td> <td>‰</td> <td>\\textperthousand</td> <td>PER MILLE SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+02031</td> <td>‱</td> <td>\\textpertenthousand</td> <td>PER TEN THOUSAND SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02032</td> <td>′</td> <td>\\prime</td> <td>PRIME</td> </tr> <tr class=\"row-even\">\n<td>U+02033</td> <td>″</td> <td>\\pprime</td> <td>DOUBLE PRIME</td> </tr> <tr class=\"row-odd\">\n<td>U+02034</td> <td>‴</td> <td>\\ppprime</td> <td>TRIPLE PRIME</td> </tr> <tr class=\"row-even\">\n<td>U+02035</td> <td>‵</td> <td>\\backprime</td> <td>REVERSED PRIME</td> </tr> <tr class=\"row-odd\">\n<td>U+02036</td> <td>‶</td> <td>\\backpprime</td> <td>REVERSED DOUBLE PRIME</td> </tr> <tr class=\"row-even\">\n<td>U+02037</td> <td>‷</td> <td>\\backppprime</td> <td>REVERSED TRIPLE PRIME</td> </tr> <tr class=\"row-odd\">\n<td>U+02039</td> <td>‹</td> <td>\\guilsinglleft</td> <td>SINGLE LEFT-POINTING ANGLE QUOTATION MARK / LEFT POINTING SINGLE GUILLEMET</td> </tr> <tr class=\"row-even\">\n<td>U+0203A</td> <td>›</td> <td>\\guilsinglright</td> <td>SINGLE RIGHT-POINTING ANGLE QUOTATION MARK / RIGHT POINTING SINGLE GUILLEMET</td> </tr> <tr class=\"row-odd\">\n<td>U+0203C</td> <td>‼</td> <td>\\:bangbang:</td> <td>DOUBLE EXCLAMATION MARK</td> </tr> <tr class=\"row-even\">\n<td>U+02040</td> <td>⁀</td> <td>\\tieconcat</td> <td>CHARACTER TIE</td> </tr> <tr class=\"row-odd\">\n<td>U+02049</td> <td>⁉</td> <td>\\:interrobang:</td> <td>EXCLAMATION QUESTION MARK</td> </tr> <tr class=\"row-even\">\n<td>U+02057</td> <td>⁗</td> <td>\\pppprime</td> <td>QUADRUPLE PRIME</td> </tr> <tr class=\"row-odd\">\n<td>U+02060</td> <td>⁠</td> <td>\\nolinebreak</td> <td>WORD JOINER</td> </tr> <tr class=\"row-even\">\n<td>U+02070</td> <td>⁰</td> <td>\\^0</td> <td>SUPERSCRIPT ZERO / SUPERSCRIPT DIGIT ZERO</td> </tr> <tr class=\"row-odd\">\n<td>U+02071</td> <td>ⁱ</td> <td>\\^i</td> <td>SUPERSCRIPT LATIN SMALL LETTER I</td> </tr> <tr class=\"row-even\">\n<td>U+02074</td> <td>⁴</td> <td>\\^4</td> <td>SUPERSCRIPT FOUR / SUPERSCRIPT DIGIT FOUR</td> </tr> <tr class=\"row-odd\">\n<td>U+02075</td> <td>⁵</td> <td>\\^5</td> <td>SUPERSCRIPT FIVE / SUPERSCRIPT DIGIT FIVE</td> </tr> <tr class=\"row-even\">\n<td>U+02076</td> <td>⁶</td> <td>\\^6</td> <td>SUPERSCRIPT SIX / SUPERSCRIPT DIGIT SIX</td> </tr> <tr class=\"row-odd\">\n<td>U+02077</td> <td>⁷</td> <td>\\^7</td> <td>SUPERSCRIPT SEVEN / SUPERSCRIPT DIGIT SEVEN</td> </tr> <tr class=\"row-even\">\n<td>U+02078</td> <td>⁸</td> <td>\\^8</td> <td>SUPERSCRIPT EIGHT / SUPERSCRIPT DIGIT EIGHT</td> </tr> <tr class=\"row-odd\">\n<td>U+02079</td> <td>⁹</td> <td>\\^9</td> <td>SUPERSCRIPT NINE / SUPERSCRIPT DIGIT NINE</td> </tr> <tr class=\"row-even\">\n<td>U+0207A</td> <td>⁺</td> <td>\\^+</td> <td>SUPERSCRIPT PLUS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+0207B</td> <td>⁻</td> <td>\\^-</td> <td>SUPERSCRIPT MINUS / SUPERSCRIPT HYPHEN-MINUS</td> </tr> <tr class=\"row-even\">\n<td>U+0207C</td> <td>⁼</td> <td>\\^=</td> <td>SUPERSCRIPT EQUALS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+0207D</td> <td>⁽</td> <td>\\^(</td> <td>SUPERSCRIPT LEFT PARENTHESIS / SUPERSCRIPT OPENING PARENTHESIS</td> </tr> <tr class=\"row-even\">\n<td>U+0207E</td> <td>⁾</td> <td>\\^)</td> <td>SUPERSCRIPT RIGHT PARENTHESIS / SUPERSCRIPT CLOSING PARENTHESIS</td> </tr> <tr class=\"row-odd\">\n<td>U+0207F</td> <td>ⁿ</td> <td>\\^n</td> <td>SUPERSCRIPT LATIN SMALL LETTER N</td> </tr> <tr class=\"row-even\">\n<td>U+02080</td> <td>₀</td> <td>\\_0</td> <td>SUBSCRIPT ZERO / SUBSCRIPT DIGIT ZERO</td> </tr> <tr class=\"row-odd\">\n<td>U+02081</td> <td>₁</td> <td>\\_1</td> <td>SUBSCRIPT ONE / SUBSCRIPT DIGIT ONE</td> </tr> <tr class=\"row-even\">\n<td>U+02082</td> <td>₂</td> <td>\\_2</td> <td>SUBSCRIPT TWO / SUBSCRIPT DIGIT TWO</td> </tr> <tr class=\"row-odd\">\n<td>U+02083</td> <td>₃</td> <td>\\_3</td> <td>SUBSCRIPT THREE / SUBSCRIPT DIGIT THREE</td> </tr> <tr class=\"row-even\">\n<td>U+02084</td> <td>₄</td> <td>\\_4</td> <td>SUBSCRIPT FOUR / SUBSCRIPT DIGIT FOUR</td> </tr> <tr class=\"row-odd\">\n<td>U+02085</td> <td>₅</td> <td>\\_5</td> <td>SUBSCRIPT FIVE / SUBSCRIPT DIGIT FIVE</td> </tr> <tr class=\"row-even\">\n<td>U+02086</td> <td>₆</td> <td>\\_6</td> <td>SUBSCRIPT SIX / SUBSCRIPT DIGIT SIX</td> </tr> <tr class=\"row-odd\">\n<td>U+02087</td> <td>₇</td> <td>\\_7</td> <td>SUBSCRIPT SEVEN / SUBSCRIPT DIGIT SEVEN</td> </tr> <tr class=\"row-even\">\n<td>U+02088</td> <td>₈</td> <td>\\_8</td> <td>SUBSCRIPT EIGHT / SUBSCRIPT DIGIT EIGHT</td> </tr> <tr class=\"row-odd\">\n<td>U+02089</td> <td>₉</td> <td>\\_9</td> <td>SUBSCRIPT NINE / SUBSCRIPT DIGIT NINE</td> </tr> <tr class=\"row-even\">\n<td>U+0208A</td> <td>₊</td> <td>\\_+</td> <td>SUBSCRIPT PLUS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+0208B</td> <td>₋</td> <td>\\_-</td> <td>SUBSCRIPT MINUS / SUBSCRIPT HYPHEN-MINUS</td> </tr> <tr class=\"row-even\">\n<td>U+0208C</td> <td>₌</td> <td>\\_=</td> <td>SUBSCRIPT EQUALS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+0208D</td> <td>₍</td> <td>\\_(</td> <td>SUBSCRIPT LEFT PARENTHESIS / SUBSCRIPT OPENING PARENTHESIS</td> </tr> <tr class=\"row-even\">\n<td>U+0208E</td> <td>₎</td> <td>\\_)</td> <td>SUBSCRIPT RIGHT PARENTHESIS / SUBSCRIPT CLOSING PARENTHESIS</td> </tr> <tr class=\"row-odd\">\n<td>U+02090</td> <td>ₐ</td> <td>\\_a</td> <td>LATIN SUBSCRIPT SMALL LETTER A</td> </tr> <tr class=\"row-even\">\n<td>U+02091</td> <td>ₑ</td> <td>\\_e</td> <td>LATIN SUBSCRIPT SMALL LETTER E</td> </tr> <tr class=\"row-odd\">\n<td>U+02092</td> <td>ₒ</td> <td>\\_o</td> <td>LATIN SUBSCRIPT SMALL LETTER O</td> </tr> <tr class=\"row-even\">\n<td>U+02093</td> <td>ₓ</td> <td>\\_x</td> <td>LATIN SUBSCRIPT SMALL LETTER X</td> </tr> <tr class=\"row-odd\">\n<td>U+02094</td> <td>ₔ</td> <td>\\_schwa</td> <td>LATIN SUBSCRIPT SMALL LETTER SCHWA</td> </tr> <tr class=\"row-even\">\n<td>U+02095</td> <td>ₕ</td> <td>\\_h</td> <td>LATIN SUBSCRIPT SMALL LETTER H</td> </tr> <tr class=\"row-odd\">\n<td>U+02096</td> <td>ₖ</td> <td>\\_k</td> <td>LATIN SUBSCRIPT SMALL LETTER K</td> </tr> <tr class=\"row-even\">\n<td>U+02097</td> <td>ₗ</td> <td>\\_l</td> <td>LATIN SUBSCRIPT SMALL LETTER L</td> </tr> <tr class=\"row-odd\">\n<td>U+02098</td> <td>ₘ</td> <td>\\_m</td> <td>LATIN SUBSCRIPT SMALL LETTER M</td> </tr> <tr class=\"row-even\">\n<td>U+02099</td> <td>ₙ</td> <td>\\_n</td> <td>LATIN SUBSCRIPT SMALL LETTER N</td> </tr> <tr class=\"row-odd\">\n<td>U+0209A</td> <td>ₚ</td> <td>\\_p</td> <td>LATIN SUBSCRIPT SMALL LETTER P</td> </tr> <tr class=\"row-even\">\n<td>U+0209B</td> <td>ₛ</td> <td>\\_s</td> <td>LATIN SUBSCRIPT SMALL LETTER S</td> </tr> <tr class=\"row-odd\">\n<td>U+0209C</td> <td>ₜ</td> <td>\\_t</td> <td>LATIN SUBSCRIPT SMALL LETTER T</td> </tr> <tr class=\"row-even\">\n<td>U+020A7</td> <td>₧</td> <td>\\Elzpes</td> <td>PESETA SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+020AC</td> <td>€</td> <td>\\euro</td> <td>EURO SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+020D0</td> <td> </td> <td>\\leftharpoonaccent</td> <td>COMBINING LEFT HARPOON ABOVE / NON-SPACING LEFT HARPOON ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+020D1</td> <td> </td> <td>\\rightharpoonaccent</td> <td>COMBINING RIGHT HARPOON ABOVE / NON-SPACING RIGHT HARPOON ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+020D2</td> <td> </td> <td>\\vertoverlay</td> <td>COMBINING LONG VERTICAL LINE OVERLAY / NON-SPACING LONG VERTICAL BAR OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+020D6</td> <td> </td> <td>\\overleftarrow</td> <td>COMBINING LEFT ARROW ABOVE / NON-SPACING LEFT ARROW ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+020D7</td> <td> </td> <td>\\vec</td> <td>COMBINING RIGHT ARROW ABOVE / NON-SPACING RIGHT ARROW ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+020DB</td> <td> </td> <td>\\dddot</td> <td>COMBINING THREE DOTS ABOVE / NON-SPACING THREE DOTS ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+020DC</td> <td> </td> <td>\\ddddot</td> <td>COMBINING FOUR DOTS ABOVE / NON-SPACING FOUR DOTS ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+020DD</td> <td>⃝</td> <td>\\enclosecircle</td> <td>COMBINING ENCLOSING CIRCLE / ENCLOSING CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+020DE</td> <td>⃞</td> <td>\\enclosesquare</td> <td>COMBINING ENCLOSING SQUARE / ENCLOSING SQUARE</td> </tr> <tr class=\"row-odd\">\n<td>U+020DF</td> <td>⃟</td> <td>\\enclosediamond</td> <td>COMBINING ENCLOSING DIAMOND / ENCLOSING DIAMOND</td> </tr> <tr class=\"row-even\">\n<td>U+020E1</td> <td> </td> <td>\\overleftrightarrow</td> <td>COMBINING LEFT RIGHT ARROW ABOVE / NON-SPACING LEFT RIGHT ARROW ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+020E4</td> <td>⃤</td> <td>\\enclosetriangle</td> <td>COMBINING ENCLOSING UPWARD POINTING TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+020E7</td> <td> </td> <td>\\annuity</td> <td>COMBINING ANNUITY SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+020E8</td> <td> </td> <td>\\threeunderdot</td> <td>COMBINING TRIPLE UNDERDOT</td> </tr> <tr class=\"row-even\">\n<td>U+020E9</td> <td> </td> <td>\\widebridgeabove</td> <td>COMBINING WIDE BRIDGE ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+020EC</td> <td> </td> <td>\\underrightharpoondown</td> <td>COMBINING RIGHTWARDS HARPOON WITH BARB DOWNWARDS</td> </tr> <tr class=\"row-even\">\n<td>U+020ED</td> <td> </td> <td>\\underleftharpoondown</td> <td>COMBINING LEFTWARDS HARPOON WITH BARB DOWNWARDS</td> </tr> <tr class=\"row-odd\">\n<td>U+020EE</td> <td> </td> <td>\\underleftarrow</td> <td>COMBINING LEFT ARROW BELOW</td> </tr> <tr class=\"row-even\">\n<td>U+020EF</td> <td> </td> <td>\\underrightarrow</td> <td>COMBINING RIGHT ARROW BELOW</td> </tr> <tr class=\"row-odd\">\n<td>U+020F0</td> <td> </td> <td>\\asteraccent</td> <td>COMBINING ASTERISK ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+02102</td> <td>ℂ</td> <td>\\BbbC</td> <td>DOUBLE-STRUCK CAPITAL C / DOUBLE-STRUCK C</td> </tr> <tr class=\"row-odd\">\n<td>U+02107</td> <td>ℇ</td> <td>\\Eulerconst</td> <td>EULER CONSTANT / EULERS</td> </tr> <tr class=\"row-even\">\n<td>U+0210A</td> <td>ℊ</td> <td>\\mscrg</td> <td>SCRIPT SMALL G</td> </tr> <tr class=\"row-odd\">\n<td>U+0210B</td> <td>ℋ</td> <td>\\mscrH</td> <td>SCRIPT CAPITAL H / SCRIPT H</td> </tr> <tr class=\"row-even\">\n<td>U+0210C</td> <td>ℌ</td> <td>\\mfrakH</td> <td>BLACK-LETTER CAPITAL H / BLACK-LETTER H</td> </tr> <tr class=\"row-odd\">\n<td>U+0210D</td> <td>ℍ</td> <td>\\BbbH</td> <td>DOUBLE-STRUCK CAPITAL H / DOUBLE-STRUCK H</td> </tr> <tr class=\"row-even\">\n<td>U+0210E</td> <td>ℎ</td> <td>\\Planckconst</td> <td>PLANCK CONSTANT</td> </tr> <tr class=\"row-odd\">\n<td>U+0210F</td> <td>ℏ</td> <td>\\hslash</td> <td>PLANCK CONSTANT OVER TWO PI / PLANCK CONSTANT OVER 2 PI</td> </tr> <tr class=\"row-even\">\n<td>U+02110</td> <td>ℐ</td> <td>\\mscrI</td> <td>SCRIPT CAPITAL I / SCRIPT I</td> </tr> <tr class=\"row-odd\">\n<td>U+02111</td> <td>ℑ</td> <td>\\Im</td> <td>BLACK-LETTER CAPITAL I / BLACK-LETTER I</td> </tr> <tr class=\"row-even\">\n<td>U+02112</td> <td>ℒ</td> <td>\\mscrL</td> <td>SCRIPT CAPITAL L / SCRIPT L</td> </tr> <tr class=\"row-odd\">\n<td>U+02113</td> <td>ℓ</td> <td>\\ell</td> <td>SCRIPT SMALL L</td> </tr> <tr class=\"row-even\">\n<td>U+02115</td> <td>ℕ</td> <td>\\BbbN</td> <td>DOUBLE-STRUCK CAPITAL N / DOUBLE-STRUCK N</td> </tr> <tr class=\"row-odd\">\n<td>U+02116</td> <td>№</td> <td>\\textnumero</td> <td>NUMERO SIGN / NUMERO</td> </tr> <tr class=\"row-even\">\n<td>U+02118</td> <td>℘</td> <td>\\wp</td> <td>SCRIPT CAPITAL P / SCRIPT P</td> </tr> <tr class=\"row-odd\">\n<td>U+02119</td> <td>ℙ</td> <td>\\BbbP</td> <td>DOUBLE-STRUCK CAPITAL P / DOUBLE-STRUCK P</td> </tr> <tr class=\"row-even\">\n<td>U+0211A</td> <td>ℚ</td> <td>\\BbbQ</td> <td>DOUBLE-STRUCK CAPITAL Q / DOUBLE-STRUCK Q</td> </tr> <tr class=\"row-odd\">\n<td>U+0211B</td> <td>ℛ</td> <td>\\mscrR</td> <td>SCRIPT CAPITAL R / SCRIPT R</td> </tr> <tr class=\"row-even\">\n<td>U+0211C</td> <td>ℜ</td> <td>\\Re</td> <td>BLACK-LETTER CAPITAL R / BLACK-LETTER R</td> </tr> <tr class=\"row-odd\">\n<td>U+0211D</td> <td>ℝ</td> <td>\\BbbR</td> <td>DOUBLE-STRUCK CAPITAL R / DOUBLE-STRUCK R</td> </tr> <tr class=\"row-even\">\n<td>U+0211E</td> <td>℞</td> <td>\\Elzxrat</td> <td>PRESCRIPTION TAKE</td> </tr> <tr class=\"row-odd\">\n<td>U+02122</td> <td>™</td> <td>\\texttrademark, \\:tm:</td> <td>TRADE MARK SIGN / TRADEMARK</td> </tr> <tr class=\"row-even\">\n<td>U+02124</td> <td>ℤ</td> <td>\\BbbZ</td> <td>DOUBLE-STRUCK CAPITAL Z / DOUBLE-STRUCK Z</td> </tr> <tr class=\"row-odd\">\n<td>U+02127</td> <td>℧</td> <td>\\mho</td> <td>INVERTED OHM SIGN / MHO</td> </tr> <tr class=\"row-even\">\n<td>U+02128</td> <td>ℨ</td> <td>\\mfrakZ</td> <td>BLACK-LETTER CAPITAL Z / BLACK-LETTER Z</td> </tr> <tr class=\"row-odd\">\n<td>U+02129</td> <td>℩</td> <td>\\turnediota</td> <td>TURNED GREEK SMALL LETTER IOTA</td> </tr> <tr class=\"row-even\">\n<td>U+0212B</td> <td>Å</td> <td>\\Angstrom</td> <td>ANGSTROM SIGN / ANGSTROM UNIT</td> </tr> <tr class=\"row-odd\">\n<td>U+0212C</td> <td>ℬ</td> <td>\\mscrB</td> <td>SCRIPT CAPITAL B / SCRIPT B</td> </tr> <tr class=\"row-even\">\n<td>U+0212D</td> <td>ℭ</td> <td>\\mfrakC</td> <td>BLACK-LETTER CAPITAL C / BLACK-LETTER C</td> </tr> <tr class=\"row-odd\">\n<td>U+0212F</td> <td>ℯ</td> <td>\\mscre</td> <td>SCRIPT SMALL E</td> </tr> <tr class=\"row-even\">\n<td>U+02130</td> <td>ℰ</td> <td>\\mscrE</td> <td>SCRIPT CAPITAL E / SCRIPT E</td> </tr> <tr class=\"row-odd\">\n<td>U+02131</td> <td>ℱ</td> <td>\\mscrF</td> <td>SCRIPT CAPITAL F / SCRIPT F</td> </tr> <tr class=\"row-even\">\n<td>U+02132</td> <td>Ⅎ</td> <td>\\Finv</td> <td>TURNED CAPITAL F / TURNED F</td> </tr> <tr class=\"row-odd\">\n<td>U+02133</td> <td>ℳ</td> <td>\\mscrM</td> <td>SCRIPT CAPITAL M / SCRIPT M</td> </tr> <tr class=\"row-even\">\n<td>U+02134</td> <td>ℴ</td> <td>\\mscro</td> <td>SCRIPT SMALL O</td> </tr> <tr class=\"row-odd\">\n<td>U+02135</td> <td>ℵ</td> <td>\\aleph</td> <td>ALEF SYMBOL / FIRST TRANSFINITE CARDINAL</td> </tr> <tr class=\"row-even\">\n<td>U+02136</td> <td>ℶ</td> <td>\\beth</td> <td>BET SYMBOL / SECOND TRANSFINITE CARDINAL</td> </tr> <tr class=\"row-odd\">\n<td>U+02137</td> <td>ℷ</td> <td>\\gimel</td> <td>GIMEL SYMBOL / THIRD TRANSFINITE CARDINAL</td> </tr> <tr class=\"row-even\">\n<td>U+02138</td> <td>ℸ</td> <td>\\daleth</td> <td>DALET SYMBOL / FOURTH TRANSFINITE CARDINAL</td> </tr> <tr class=\"row-odd\">\n<td>U+02139</td> <td>ℹ</td> <td>\\:information_source:</td> <td>INFORMATION SOURCE</td> </tr> <tr class=\"row-even\">\n<td>U+0213C</td> <td>ℼ</td> <td>\\Bbbpi</td> <td>DOUBLE-STRUCK SMALL PI</td> </tr> <tr class=\"row-odd\">\n<td>U+0213D</td> <td>ℽ</td> <td>\\Bbbgamma</td> <td>DOUBLE-STRUCK SMALL GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+0213E</td> <td>ℾ</td> <td>\\BbbGamma</td> <td>DOUBLE-STRUCK CAPITAL GAMMA</td> </tr> <tr class=\"row-odd\">\n<td>U+0213F</td> <td>ℿ</td> <td>\\BbbPi</td> <td>DOUBLE-STRUCK CAPITAL PI</td> </tr> <tr class=\"row-even\">\n<td>U+02140</td> <td>⅀</td> <td>\\bbsum</td> <td>DOUBLE-STRUCK N-ARY SUMMATION</td> </tr> <tr class=\"row-odd\">\n<td>U+02141</td> <td>⅁</td> <td>\\Game</td> <td>TURNED SANS-SERIF CAPITAL G</td> </tr> <tr class=\"row-even\">\n<td>U+02142</td> <td>⅂</td> <td>\\sansLturned</td> <td>TURNED SANS-SERIF CAPITAL L</td> </tr> <tr class=\"row-odd\">\n<td>U+02143</td> <td>⅃</td> <td>\\sansLmirrored</td> <td>REVERSED SANS-SERIF CAPITAL L</td> </tr> <tr class=\"row-even\">\n<td>U+02144</td> <td>⅄</td> <td>\\Yup</td> <td>TURNED SANS-SERIF CAPITAL Y</td> </tr> <tr class=\"row-odd\">\n<td>U+02145</td> <td>ⅅ</td> <td>\\mitBbbD</td> <td>DOUBLE-STRUCK ITALIC CAPITAL D</td> </tr> <tr class=\"row-even\">\n<td>U+02146</td> <td>ⅆ</td> <td>\\mitBbbd</td> <td>DOUBLE-STRUCK ITALIC SMALL D</td> </tr> <tr class=\"row-odd\">\n<td>U+02147</td> <td>ⅇ</td> <td>\\mitBbbe</td> <td>DOUBLE-STRUCK ITALIC SMALL E</td> </tr> <tr class=\"row-even\">\n<td>U+02148</td> <td>ⅈ</td> <td>\\mitBbbi</td> <td>DOUBLE-STRUCK ITALIC SMALL I</td> </tr> <tr class=\"row-odd\">\n<td>U+02149</td> <td>ⅉ</td> <td>\\mitBbbj</td> <td>DOUBLE-STRUCK ITALIC SMALL J</td> </tr> <tr class=\"row-even\">\n<td>U+0214A</td> <td>⅊</td> <td>\\PropertyLine</td> <td>PROPERTY LINE</td> </tr> <tr class=\"row-odd\">\n<td>U+0214B</td> <td>⅋</td> <td>\\upand</td> <td>TURNED AMPERSAND</td> </tr> <tr class=\"row-even\">\n<td>U+02190</td> <td>←</td> <td>\\leftarrow</td> <td>LEFTWARDS ARROW / LEFT ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02191</td> <td>↑</td> <td>\\uparrow</td> <td>UPWARDS ARROW / UP ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02192</td> <td>→</td> <td>\\rightarrow</td> <td>RIGHTWARDS ARROW / RIGHT ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02193</td> <td>↓</td> <td>\\downarrow</td> <td>DOWNWARDS ARROW / DOWN ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02194</td> <td>↔</td> <td>\\leftrightarrow, \\:left_right_arrow:</td> <td>LEFT RIGHT ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02195</td> <td>↕</td> <td>\\updownarrow, \\:arrow_up_down:</td> <td>UP DOWN ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02196</td> <td>↖</td> <td>\\nwarrow, \\:arrow_upper_left:</td> <td>NORTH WEST ARROW / UPPER LEFT ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02197</td> <td>↗</td> <td>\\nearrow, \\:arrow_upper_right:</td> <td>NORTH EAST ARROW / UPPER RIGHT ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02198</td> <td>↘</td> <td>\\searrow, \\:arrow_lower_right:</td> <td>SOUTH EAST ARROW / LOWER RIGHT ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02199</td> <td>↙</td> <td>\\swarrow, \\:arrow_lower_left:</td> <td>SOUTH WEST ARROW / LOWER LEFT ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+0219A</td> <td>↚</td> <td>\\nleftarrow</td> <td>LEFTWARDS ARROW WITH STROKE / LEFT ARROW WITH STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+0219B</td> <td>↛</td> <td>\\nrightarrow</td> <td>RIGHTWARDS ARROW WITH STROKE / RIGHT ARROW WITH STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+0219E</td> <td>↞</td> <td>\\twoheadleftarrow</td> <td>LEFTWARDS TWO HEADED ARROW / LEFT TWO HEADED ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+0219F</td> <td>↟</td> <td>\\twoheaduparrow</td> <td>UPWARDS TWO HEADED ARROW / UP TWO HEADED ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021A0</td> <td>↠</td> <td>\\twoheadrightarrow</td> <td>RIGHTWARDS TWO HEADED ARROW / RIGHT TWO HEADED ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021A1</td> <td>↡</td> <td>\\twoheaddownarrow</td> <td>DOWNWARDS TWO HEADED ARROW / DOWN TWO HEADED ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021A2</td> <td>↢</td> <td>\\leftarrowtail</td> <td>LEFTWARDS ARROW WITH TAIL / LEFT ARROW WITH TAIL</td> </tr> <tr class=\"row-odd\">\n<td>U+021A3</td> <td>↣</td> <td>\\rightarrowtail</td> <td>RIGHTWARDS ARROW WITH TAIL / RIGHT ARROW WITH TAIL</td> </tr> <tr class=\"row-even\">\n<td>U+021A4</td> <td>↤</td> <td>\\mapsfrom</td> <td>LEFTWARDS ARROW FROM BAR / LEFT ARROW FROM BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+021A5</td> <td>↥</td> <td>\\mapsup</td> <td>UPWARDS ARROW FROM BAR / UP ARROW FROM BAR</td> </tr> <tr class=\"row-even\">\n<td>U+021A6</td> <td>↦</td> <td>\\mapsto</td> <td>RIGHTWARDS ARROW FROM BAR / RIGHT ARROW FROM BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+021A7</td> <td>↧</td> <td>\\mapsdown</td> <td>DOWNWARDS ARROW FROM BAR / DOWN ARROW FROM BAR</td> </tr> <tr class=\"row-even\">\n<td>U+021A8</td> <td>↨</td> <td>\\updownarrowbar</td> <td>UP DOWN ARROW WITH BASE</td> </tr> <tr class=\"row-odd\">\n<td>U+021A9</td> <td>↩</td> <td>\\hookleftarrow, \\:leftwards_arrow_with_hook:</td> <td>LEFTWARDS ARROW WITH HOOK / LEFT ARROW WITH HOOK</td> </tr> <tr class=\"row-even\">\n<td>U+021AA</td> <td>↪</td> <td>\\hookrightarrow, \\:arrow_right_hook:</td> <td>RIGHTWARDS ARROW WITH HOOK / RIGHT ARROW WITH HOOK</td> </tr> <tr class=\"row-odd\">\n<td>U+021AB</td> <td>↫</td> <td>\\looparrowleft</td> <td>LEFTWARDS ARROW WITH LOOP / LEFT ARROW WITH LOOP</td> </tr> <tr class=\"row-even\">\n<td>U+021AC</td> <td>↬</td> <td>\\looparrowright</td> <td>RIGHTWARDS ARROW WITH LOOP / RIGHT ARROW WITH LOOP</td> </tr> <tr class=\"row-odd\">\n<td>U+021AD</td> <td>↭</td> <td>\\leftrightsquigarrow</td> <td>LEFT RIGHT WAVE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021AE</td> <td>↮</td> <td>\\nleftrightarrow</td> <td>LEFT RIGHT ARROW WITH STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+021AF</td> <td>↯</td> <td>\\downzigzagarrow</td> <td>DOWNWARDS ZIGZAG ARROW / DOWN ZIGZAG ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021B0</td> <td>↰</td> <td>\\Lsh</td> <td>UPWARDS ARROW WITH TIP LEFTWARDS / UP ARROW WITH TIP LEFT</td> </tr> <tr class=\"row-odd\">\n<td>U+021B1</td> <td>↱</td> <td>\\Rsh</td> <td>UPWARDS ARROW WITH TIP RIGHTWARDS / UP ARROW WITH TIP RIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+021B2</td> <td>↲</td> <td>\\Ldsh</td> <td>DOWNWARDS ARROW WITH TIP LEFTWARDS / DOWN ARROW WITH TIP LEFT</td> </tr> <tr class=\"row-odd\">\n<td>U+021B3</td> <td>↳</td> <td>\\Rdsh</td> <td>DOWNWARDS ARROW WITH TIP RIGHTWARDS / DOWN ARROW WITH TIP RIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+021B4</td> <td>↴</td> <td>\\linefeed</td> <td>RIGHTWARDS ARROW WITH CORNER DOWNWARDS / RIGHT ARROW WITH CORNER DOWN</td> </tr> <tr class=\"row-odd\">\n<td>U+021B5</td> <td>↵</td> <td>\\carriagereturn</td> <td>DOWNWARDS ARROW WITH CORNER LEFTWARDS / DOWN ARROW WITH CORNER LEFT</td> </tr> <tr class=\"row-even\">\n<td>U+021B6</td> <td>↶</td> <td>\\curvearrowleft</td> <td>ANTICLOCKWISE TOP SEMICIRCLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021B7</td> <td>↷</td> <td>\\curvearrowright</td> <td>CLOCKWISE TOP SEMICIRCLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021B8</td> <td>↸</td> <td>\\barovernorthwestarrow</td> <td>NORTH WEST ARROW TO LONG BAR / UPPER LEFT ARROW TO LONG BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+021B9</td> <td>↹</td> <td>\\barleftarrowrightarrowbar</td> <td>LEFTWARDS ARROW TO BAR OVER RIGHTWARDS ARROW TO BAR / LEFT ARROW TO BAR OVER RIGHT ARROW TO BAR</td> </tr> <tr class=\"row-even\">\n<td>U+021BA</td> <td>↺</td> <td>\\circlearrowleft</td> <td>ANTICLOCKWISE OPEN CIRCLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021BB</td> <td>↻</td> <td>\\circlearrowright</td> <td>CLOCKWISE OPEN CIRCLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021BC</td> <td>↼</td> <td>\\leftharpoonup</td> <td>LEFTWARDS HARPOON WITH BARB UPWARDS / LEFT HARPOON WITH BARB UP</td> </tr> <tr class=\"row-odd\">\n<td>U+021BD</td> <td>↽</td> <td>\\leftharpoondown</td> <td>LEFTWARDS HARPOON WITH BARB DOWNWARDS / LEFT HARPOON WITH BARB DOWN</td> </tr> <tr class=\"row-even\">\n<td>U+021BE</td> <td>↾</td> <td>\\upharpoonleft</td> <td>UPWARDS HARPOON WITH BARB RIGHTWARDS / UP HARPOON WITH BARB RIGHT</td> </tr> <tr class=\"row-odd\">\n<td>U+021BF</td> <td>↿</td> <td>\\upharpoonright</td> <td>UPWARDS HARPOON WITH BARB LEFTWARDS / UP HARPOON WITH BARB LEFT</td> </tr> <tr class=\"row-even\">\n<td>U+021C0</td> <td>⇀</td> <td>\\rightharpoonup</td> <td>RIGHTWARDS HARPOON WITH BARB UPWARDS / RIGHT HARPOON WITH BARB UP</td> </tr> <tr class=\"row-odd\">\n<td>U+021C1</td> <td>⇁</td> <td>\\rightharpoondown</td> <td>RIGHTWARDS HARPOON WITH BARB DOWNWARDS / RIGHT HARPOON WITH BARB DOWN</td> </tr> <tr class=\"row-even\">\n<td>U+021C2</td> <td>⇂</td> <td>\\downharpoonright</td> <td>DOWNWARDS HARPOON WITH BARB RIGHTWARDS / DOWN HARPOON WITH BARB RIGHT</td> </tr> <tr class=\"row-odd\">\n<td>U+021C3</td> <td>⇃</td> <td>\\downharpoonleft</td> <td>DOWNWARDS HARPOON WITH BARB LEFTWARDS / DOWN HARPOON WITH BARB LEFT</td> </tr> <tr class=\"row-even\">\n<td>U+021C4</td> <td>⇄</td> <td>\\rightleftarrows</td> <td>RIGHTWARDS ARROW OVER LEFTWARDS ARROW / RIGHT ARROW OVER LEFT ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021C5</td> <td>⇅</td> <td>\\dblarrowupdown</td> <td>UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW / UP ARROW LEFT OF DOWN ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021C6</td> <td>⇆</td> <td>\\leftrightarrows</td> <td>LEFTWARDS ARROW OVER RIGHTWARDS ARROW / LEFT ARROW OVER RIGHT ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021C7</td> <td>⇇</td> <td>\\leftleftarrows</td> <td>LEFTWARDS PAIRED ARROWS / LEFT PAIRED ARROWS</td> </tr> <tr class=\"row-even\">\n<td>U+021C8</td> <td>⇈</td> <td>\\upuparrows</td> <td>UPWARDS PAIRED ARROWS / UP PAIRED ARROWS</td> </tr> <tr class=\"row-odd\">\n<td>U+021C9</td> <td>⇉</td> <td>\\rightrightarrows</td> <td>RIGHTWARDS PAIRED ARROWS / RIGHT PAIRED ARROWS</td> </tr> <tr class=\"row-even\">\n<td>U+021CA</td> <td>⇊</td> <td>\\downdownarrows</td> <td>DOWNWARDS PAIRED ARROWS / DOWN PAIRED ARROWS</td> </tr> <tr class=\"row-odd\">\n<td>U+021CB</td> <td>⇋</td> <td>\\leftrightharpoons</td> <td>LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON / LEFT HARPOON OVER RIGHT HARPOON</td> </tr> <tr class=\"row-even\">\n<td>U+021CC</td> <td>⇌</td> <td>\\rightleftharpoons</td> <td>RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON / RIGHT HARPOON OVER LEFT HARPOON</td> </tr> <tr class=\"row-odd\">\n<td>U+021CD</td> <td>⇍</td> <td>\\nLeftarrow</td> <td>LEFTWARDS DOUBLE ARROW WITH STROKE / LEFT DOUBLE ARROW WITH STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+021CE</td> <td>⇎</td> <td>\\nLeftrightarrow</td> <td>LEFT RIGHT DOUBLE ARROW WITH STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+021CF</td> <td>⇏</td> <td>\\nRightarrow</td> <td>RIGHTWARDS DOUBLE ARROW WITH STROKE / RIGHT DOUBLE ARROW WITH STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+021D0</td> <td>⇐</td> <td>\\Leftarrow</td> <td>LEFTWARDS DOUBLE ARROW / LEFT DOUBLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021D1</td> <td>⇑</td> <td>\\Uparrow</td> <td>UPWARDS DOUBLE ARROW / UP DOUBLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021D2</td> <td>⇒</td> <td>\\Rightarrow</td> <td>RIGHTWARDS DOUBLE ARROW / RIGHT DOUBLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021D3</td> <td>⇓</td> <td>\\Downarrow</td> <td>DOWNWARDS DOUBLE ARROW / DOWN DOUBLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021D4</td> <td>⇔</td> <td>\\Leftrightarrow</td> <td>LEFT RIGHT DOUBLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021D5</td> <td>⇕</td> <td>\\Updownarrow</td> <td>UP DOWN DOUBLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021D6</td> <td>⇖</td> <td>\\Nwarrow</td> <td>NORTH WEST DOUBLE ARROW / UPPER LEFT DOUBLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021D7</td> <td>⇗</td> <td>\\Nearrow</td> <td>NORTH EAST DOUBLE ARROW / UPPER RIGHT DOUBLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021D8</td> <td>⇘</td> <td>\\Searrow</td> <td>SOUTH EAST DOUBLE ARROW / LOWER RIGHT DOUBLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021D9</td> <td>⇙</td> <td>\\Swarrow</td> <td>SOUTH WEST DOUBLE ARROW / LOWER LEFT DOUBLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021DA</td> <td>⇚</td> <td>\\Lleftarrow</td> <td>LEFTWARDS TRIPLE ARROW / LEFT TRIPLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021DB</td> <td>⇛</td> <td>\\Rrightarrow</td> <td>RIGHTWARDS TRIPLE ARROW / RIGHT TRIPLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021DC</td> <td>⇜</td> <td>\\leftsquigarrow</td> <td>LEFTWARDS SQUIGGLE ARROW / LEFT SQUIGGLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021DD</td> <td>⇝</td> <td>\\rightsquigarrow</td> <td>RIGHTWARDS SQUIGGLE ARROW / RIGHT SQUIGGLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021DE</td> <td>⇞</td> <td>\\nHuparrow</td> <td>UPWARDS ARROW WITH DOUBLE STROKE / UP ARROW WITH DOUBLE STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+021DF</td> <td>⇟</td> <td>\\nHdownarrow</td> <td>DOWNWARDS ARROW WITH DOUBLE STROKE / DOWN ARROW WITH DOUBLE STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+021E0</td> <td>⇠</td> <td>\\leftdasharrow</td> <td>LEFTWARDS DASHED ARROW / LEFT DASHED ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021E1</td> <td>⇡</td> <td>\\updasharrow</td> <td>UPWARDS DASHED ARROW / UP DASHED ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021E2</td> <td>⇢</td> <td>\\rightdasharrow</td> <td>RIGHTWARDS DASHED ARROW / RIGHT DASHED ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021E3</td> <td>⇣</td> <td>\\downdasharrow</td> <td>DOWNWARDS DASHED ARROW / DOWN DASHED ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021E4</td> <td>⇤</td> <td>\\barleftarrow</td> <td>LEFTWARDS ARROW TO BAR / LEFT ARROW TO BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+021E5</td> <td>⇥</td> <td>\\rightarrowbar</td> <td>RIGHTWARDS ARROW TO BAR / RIGHT ARROW TO BAR</td> </tr> <tr class=\"row-even\">\n<td>U+021E6</td> <td>⇦</td> <td>\\leftwhitearrow</td> <td>LEFTWARDS WHITE ARROW / WHITE LEFT ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021E7</td> <td>⇧</td> <td>\\upwhitearrow</td> <td>UPWARDS WHITE ARROW / WHITE UP ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021E8</td> <td>⇨</td> <td>\\rightwhitearrow</td> <td>RIGHTWARDS WHITE ARROW / WHITE RIGHT ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021E9</td> <td>⇩</td> <td>\\downwhitearrow</td> <td>DOWNWARDS WHITE ARROW / WHITE DOWN ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021EA</td> <td>⇪</td> <td>\\whitearrowupfrombar</td> <td>UPWARDS WHITE ARROW FROM BAR / WHITE UP ARROW FROM BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+021F4</td> <td>⇴</td> <td>\\circleonrightarrow</td> <td>RIGHT ARROW WITH SMALL CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+021F5</td> <td>⇵</td> <td>\\DownArrowUpArrow</td> <td>DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021F6</td> <td>⇶</td> <td>\\rightthreearrows</td> <td>THREE RIGHTWARDS ARROWS</td> </tr> <tr class=\"row-even\">\n<td>U+021F7</td> <td>⇷</td> <td>\\nvleftarrow</td> <td>LEFTWARDS ARROW WITH VERTICAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+021F8</td> <td>⇸</td> <td>\\nvrightarrow</td> <td>RIGHTWARDS ARROW WITH VERTICAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+021F9</td> <td>⇹</td> <td>\\nvleftrightarrow</td> <td>LEFT RIGHT ARROW WITH VERTICAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+021FA</td> <td>⇺</td> <td>\\nVleftarrow</td> <td>LEFTWARDS ARROW WITH DOUBLE VERTICAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+021FB</td> <td>⇻</td> <td>\\nVrightarrow</td> <td>RIGHTWARDS ARROW WITH DOUBLE VERTICAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+021FC</td> <td>⇼</td> <td>\\nVleftrightarrow</td> <td>LEFT RIGHT ARROW WITH DOUBLE VERTICAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+021FD</td> <td>⇽</td> <td>\\leftarrowtriangle</td> <td>LEFTWARDS OPEN-HEADED ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+021FE</td> <td>⇾</td> <td>\\rightarrowtriangle</td> <td>RIGHTWARDS OPEN-HEADED ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+021FF</td> <td>⇿</td> <td>\\leftrightarrowtriangle</td> <td>LEFT RIGHT OPEN-HEADED ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02200</td> <td>∀</td> <td>\\forall</td> <td>FOR ALL</td> </tr> <tr class=\"row-even\">\n<td>U+02201</td> <td>∁</td> <td>\\complement</td> <td>COMPLEMENT</td> </tr> <tr class=\"row-odd\">\n<td>U+02202</td> <td>∂</td> <td>\\partial</td> <td>PARTIAL DIFFERENTIAL</td> </tr> <tr class=\"row-even\">\n<td>U+02203</td> <td>∃</td> <td>\\exists</td> <td>THERE EXISTS</td> </tr> <tr class=\"row-odd\">\n<td>U+02204</td> <td>∄</td> <td>\\nexists</td> <td>THERE DOES NOT EXIST</td> </tr> <tr class=\"row-even\">\n<td>U+02205</td> <td>∅</td> <td>\\varnothing, \\emptyset</td> <td>EMPTY SET</td> </tr> <tr class=\"row-odd\">\n<td>U+02206</td> <td>∆</td> <td>\\increment</td> <td>INCREMENT</td> </tr> <tr class=\"row-even\">\n<td>U+02207</td> <td>∇</td> <td>\\del, \\nabla</td> <td>NABLA</td> </tr> <tr class=\"row-odd\">\n<td>U+02208</td> <td>∈</td> <td>\\in</td> <td>ELEMENT OF</td> </tr> <tr class=\"row-even\">\n<td>U+02209</td> <td>∉</td> <td>\\notin</td> <td>NOT AN ELEMENT OF</td> </tr> <tr class=\"row-odd\">\n<td>U+0220A</td> <td>∊</td> <td>\\smallin</td> <td>SMALL ELEMENT OF</td> </tr> <tr class=\"row-even\">\n<td>U+0220B</td> <td>∋</td> <td>\\ni</td> <td>CONTAINS AS MEMBER</td> </tr> <tr class=\"row-odd\">\n<td>U+0220C</td> <td>∌</td> <td>\\nni</td> <td>DOES NOT CONTAIN AS MEMBER</td> </tr> <tr class=\"row-even\">\n<td>U+0220D</td> <td>∍</td> <td>\\smallni</td> <td>SMALL CONTAINS AS MEMBER</td> </tr> <tr class=\"row-odd\">\n<td>U+0220E</td> <td>∎</td> <td>\\QED</td> <td>END OF PROOF</td> </tr> <tr class=\"row-even\">\n<td>U+0220F</td> <td>∏</td> <td>\\prod</td> <td>N-ARY PRODUCT</td> </tr> <tr class=\"row-odd\">\n<td>U+02210</td> <td>∐</td> <td>\\coprod</td> <td>N-ARY COPRODUCT</td> </tr> <tr class=\"row-even\">\n<td>U+02211</td> <td>∑</td> <td>\\sum</td> <td>N-ARY SUMMATION</td> </tr> <tr class=\"row-odd\">\n<td>U+02212</td> <td>−</td> <td>\\minus</td> <td>MINUS SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+02213</td> <td>∓</td> <td>\\mp</td> <td>MINUS-OR-PLUS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02214</td> <td>∔</td> <td>\\dotplus</td> <td>DOT PLUS</td> </tr> <tr class=\"row-even\">\n<td>U+02216</td> <td>∖</td> <td>\\setminus</td> <td>SET MINUS</td> </tr> <tr class=\"row-odd\">\n<td>U+02217</td> <td>∗</td> <td>\\ast</td> <td>ASTERISK OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+02218</td> <td>∘</td> <td>\\circ</td> <td>RING OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+02219</td> <td>∙</td> <td>\\vysmblkcircle</td> <td>BULLET OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+0221A</td> <td>√</td> <td>\\surd, \\sqrt</td> <td>SQUARE ROOT</td> </tr> <tr class=\"row-odd\">\n<td>U+0221B</td> <td>∛</td> <td>\\cbrt</td> <td>CUBE ROOT</td> </tr> <tr class=\"row-even\">\n<td>U+0221C</td> <td>∜</td> <td>\\fourthroot</td> <td>FOURTH ROOT</td> </tr> <tr class=\"row-odd\">\n<td>U+0221D</td> <td>∝</td> <td>\\propto</td> <td>PROPORTIONAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+0221E</td> <td>∞</td> <td>\\infty</td> <td>INFINITY</td> </tr> <tr class=\"row-odd\">\n<td>U+0221F</td> <td>∟</td> <td>\\rightangle</td> <td>RIGHT ANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+02220</td> <td>∠</td> <td>\\angle</td> <td>ANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+02221</td> <td>∡</td> <td>\\measuredangle</td> <td>MEASURED ANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+02222</td> <td>∢</td> <td>\\sphericalangle</td> <td>SPHERICAL ANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+02223</td> <td>∣</td> <td>\\mid</td> <td>DIVIDES</td> </tr> <tr class=\"row-even\">\n<td>U+02224</td> <td>∤</td> <td>\\nmid</td> <td>DOES NOT DIVIDE</td> </tr> <tr class=\"row-odd\">\n<td>U+02225</td> <td>∥</td> <td>\\parallel</td> <td>PARALLEL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02226</td> <td>∦</td> <td>\\nparallel</td> <td>NOT PARALLEL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02227</td> <td>∧</td> <td>\\wedge</td> <td>LOGICAL AND</td> </tr> <tr class=\"row-even\">\n<td>U+02228</td> <td>∨</td> <td>\\vee</td> <td>LOGICAL OR</td> </tr> <tr class=\"row-odd\">\n<td>U+02229</td> <td>∩</td> <td>\\cap</td> <td>INTERSECTION</td> </tr> <tr class=\"row-even\">\n<td>U+0222A</td> <td>∪</td> <td>\\cup</td> <td>UNION</td> </tr> <tr class=\"row-odd\">\n<td>U+0222B</td> <td>∫</td> <td>\\int</td> <td>INTEGRAL</td> </tr> <tr class=\"row-even\">\n<td>U+0222C</td> <td>∬</td> <td>\\iint</td> <td>DOUBLE INTEGRAL</td> </tr> <tr class=\"row-odd\">\n<td>U+0222D</td> <td>∭</td> <td>\\iiint</td> <td>TRIPLE INTEGRAL</td> </tr> <tr class=\"row-even\">\n<td>U+0222E</td> <td>∮</td> <td>\\oint</td> <td>CONTOUR INTEGRAL</td> </tr> <tr class=\"row-odd\">\n<td>U+0222F</td> <td>∯</td> <td>\\oiint</td> <td>SURFACE INTEGRAL</td> </tr> <tr class=\"row-even\">\n<td>U+02230</td> <td>∰</td> <td>\\oiiint</td> <td>VOLUME INTEGRAL</td> </tr> <tr class=\"row-odd\">\n<td>U+02231</td> <td>∱</td> <td>\\clwintegral</td> <td>CLOCKWISE INTEGRAL</td> </tr> <tr class=\"row-even\">\n<td>U+02232</td> <td>∲</td> <td>\\varointclockwise</td> <td>CLOCKWISE CONTOUR INTEGRAL</td> </tr> <tr class=\"row-odd\">\n<td>U+02233</td> <td>∳</td> <td>\\ointctrclockwise</td> <td>ANTICLOCKWISE CONTOUR INTEGRAL</td> </tr> <tr class=\"row-even\">\n<td>U+02234</td> <td>∴</td> <td>\\therefore</td> <td>THEREFORE</td> </tr> <tr class=\"row-odd\">\n<td>U+02235</td> <td>∵</td> <td>\\because</td> <td>BECAUSE</td> </tr> <tr class=\"row-even\">\n<td>U+02237</td> <td>∷</td> <td>\\Colon</td> <td>PROPORTION</td> </tr> <tr class=\"row-odd\">\n<td>U+02238</td> <td>∸</td> <td>\\dotminus</td> <td>DOT MINUS</td> </tr> <tr class=\"row-even\">\n<td>U+0223A</td> <td>∺</td> <td>\\dotsminusdots</td> <td>GEOMETRIC PROPORTION</td> </tr> <tr class=\"row-odd\">\n<td>U+0223B</td> <td>∻</td> <td>\\kernelcontraction</td> <td>HOMOTHETIC</td> </tr> <tr class=\"row-even\">\n<td>U+0223C</td> <td>∼</td> <td>\\sim</td> <td>TILDE OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+0223D</td> <td>∽</td> <td>\\backsim</td> <td>REVERSED TILDE</td> </tr> <tr class=\"row-even\">\n<td>U+0223E</td> <td>∾</td> <td>\\lazysinv</td> <td>INVERTED LAZY S</td> </tr> <tr class=\"row-odd\">\n<td>U+0223F</td> <td>∿</td> <td>\\sinewave</td> <td>SINE WAVE</td> </tr> <tr class=\"row-even\">\n<td>U+02240</td> <td>≀</td> <td>\\wr</td> <td>WREATH PRODUCT</td> </tr> <tr class=\"row-odd\">\n<td>U+02241</td> <td>≁</td> <td>\\nsim</td> <td>NOT TILDE</td> </tr> <tr class=\"row-even\">\n<td>U+02242</td> <td>≂</td> <td>\\eqsim</td> <td>MINUS TILDE</td> </tr> <tr class=\"row-odd\">\n<td>U+02242 + U+00338</td> <td>≂̸</td> <td>\\neqsim</td> <td>MINUS TILDE + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-even\">\n<td>U+02243</td> <td>≃</td> <td>\\simeq</td> <td>ASYMPTOTICALLY EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02244</td> <td>≄</td> <td>\\nsime</td> <td>NOT ASYMPTOTICALLY EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02245</td> <td>≅</td> <td>\\cong</td> <td>APPROXIMATELY EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02246</td> <td>≆</td> <td>\\approxnotequal</td> <td>APPROXIMATELY BUT NOT ACTUALLY EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02247</td> <td>≇</td> <td>\\ncong</td> <td>NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02248</td> <td>≈</td> <td>\\approx</td> <td>ALMOST EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02249</td> <td>≉</td> <td>\\napprox</td> <td>NOT ALMOST EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+0224A</td> <td>≊</td> <td>\\approxeq</td> <td>ALMOST EQUAL OR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+0224B</td> <td>≋</td> <td>\\tildetrpl</td> <td>TRIPLE TILDE</td> </tr> <tr class=\"row-odd\">\n<td>U+0224C</td> <td>≌</td> <td>\\allequal</td> <td>ALL EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+0224D</td> <td>≍</td> <td>\\asymp</td> <td>EQUIVALENT TO</td> </tr> <tr class=\"row-odd\">\n<td>U+0224E</td> <td>≎</td> <td>\\Bumpeq</td> <td>GEOMETRICALLY EQUIVALENT TO</td> </tr> <tr class=\"row-even\">\n<td>U+0224E + U+00338</td> <td>≎̸</td> <td>\\nBumpeq</td> <td>GEOMETRICALLY EQUIVALENT TO + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+0224F</td> <td>≏</td> <td>\\bumpeq</td> <td>DIFFERENCE BETWEEN</td> </tr> <tr class=\"row-even\">\n<td>U+0224F + U+00338</td> <td>≏̸</td> <td>\\nbumpeq</td> <td>DIFFERENCE BETWEEN + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+02250</td> <td>≐</td> <td>\\doteq</td> <td>APPROACHES THE LIMIT</td> </tr> <tr class=\"row-even\">\n<td>U+02251</td> <td>≑</td> <td>\\Doteq</td> <td>GEOMETRICALLY EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02252</td> <td>≒</td> <td>\\fallingdotseq</td> <td>APPROXIMATELY EQUAL TO OR THE IMAGE OF</td> </tr> <tr class=\"row-even\">\n<td>U+02253</td> <td>≓</td> <td>\\risingdotseq</td> <td>IMAGE OF OR APPROXIMATELY EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02254</td> <td>≔</td> <td>\\coloneq</td> <td>COLON EQUALS / COLON EQUAL</td> </tr> <tr class=\"row-even\">\n<td>U+02255</td> <td>≕</td> <td>\\eqcolon</td> <td>EQUALS COLON / EQUAL COLON</td> </tr> <tr class=\"row-odd\">\n<td>U+02256</td> <td>≖</td> <td>\\eqcirc</td> <td>RING IN EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02257</td> <td>≗</td> <td>\\circeq</td> <td>RING EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02258</td> <td>≘</td> <td>\\arceq</td> <td>CORRESPONDS TO</td> </tr> <tr class=\"row-even\">\n<td>U+02259</td> <td>≙</td> <td>\\wedgeq</td> <td>ESTIMATES</td> </tr> <tr class=\"row-odd\">\n<td>U+0225A</td> <td>≚</td> <td>\\veeeq</td> <td>EQUIANGULAR TO</td> </tr> <tr class=\"row-even\">\n<td>U+0225B</td> <td>≛</td> <td>\\starequal</td> <td>STAR EQUALS</td> </tr> <tr class=\"row-odd\">\n<td>U+0225C</td> <td>≜</td> <td>\\triangleq</td> <td>DELTA EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+0225D</td> <td>≝</td> <td>\\eqdef</td> <td>EQUAL TO BY DEFINITION</td> </tr> <tr class=\"row-odd\">\n<td>U+0225E</td> <td>≞</td> <td>\\measeq</td> <td>MEASURED BY</td> </tr> <tr class=\"row-even\">\n<td>U+0225F</td> <td>≟</td> <td>\\questeq</td> <td>QUESTIONED EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02260</td> <td>≠</td> <td>\\ne</td> <td>NOT EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02261</td> <td>≡</td> <td>\\equiv</td> <td>IDENTICAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02262</td> <td>≢</td> <td>\\nequiv</td> <td>NOT IDENTICAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02263</td> <td>≣</td> <td>\\Equiv</td> <td>STRICTLY EQUIVALENT TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02264</td> <td>≤</td> <td>\\le</td> <td>LESS-THAN OR EQUAL TO / LESS THAN OR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02265</td> <td>≥</td> <td>\\ge</td> <td>GREATER-THAN OR EQUAL TO / GREATER THAN OR EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02266</td> <td>≦</td> <td>\\leqq</td> <td>LESS-THAN OVER EQUAL TO / LESS THAN OVER EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02267</td> <td>≧</td> <td>\\geqq</td> <td>GREATER-THAN OVER EQUAL TO / GREATER THAN OVER EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02268</td> <td>≨</td> <td>\\lneqq</td> <td>LESS-THAN BUT NOT EQUAL TO / LESS THAN BUT NOT EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02268 + U+0FE00</td> <td>≨︀</td> <td>\\lvertneqq</td> <td>LESS-THAN BUT NOT EQUAL TO / LESS THAN BUT NOT EQUAL TO + VARIATION SELECTOR-1</td> </tr> <tr class=\"row-odd\">\n<td>U+02269</td> <td>≩</td> <td>\\gneqq</td> <td>GREATER-THAN BUT NOT EQUAL TO / GREATER THAN BUT NOT EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02269 + U+0FE00</td> <td>≩︀</td> <td>\\gvertneqq</td> <td>GREATER-THAN BUT NOT EQUAL TO / GREATER THAN BUT NOT EQUAL TO + VARIATION SELECTOR-1</td> </tr> <tr class=\"row-odd\">\n<td>U+0226A</td> <td>≪</td> <td>\\ll</td> <td>MUCH LESS-THAN / MUCH LESS THAN</td> </tr> <tr class=\"row-even\">\n<td>U+0226A + U+00338</td> <td>≪̸</td> <td>\\NotLessLess</td> <td>MUCH LESS-THAN / MUCH LESS THAN + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+0226B</td> <td>≫</td> <td>\\gg</td> <td>MUCH GREATER-THAN / MUCH GREATER THAN</td> </tr> <tr class=\"row-even\">\n<td>U+0226B + U+00338</td> <td>≫̸</td> <td>\\NotGreaterGreater</td> <td>MUCH GREATER-THAN / MUCH GREATER THAN + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+0226C</td> <td>≬</td> <td>\\between</td> <td>BETWEEN</td> </tr> <tr class=\"row-even\">\n<td>U+0226D</td> <td>≭</td> <td>\\nasymp</td> <td>NOT EQUIVALENT TO</td> </tr> <tr class=\"row-odd\">\n<td>U+0226E</td> <td>≮</td> <td>\\nless</td> <td>NOT LESS-THAN / NOT LESS THAN</td> </tr> <tr class=\"row-even\">\n<td>U+0226F</td> <td>≯</td> <td>\\ngtr</td> <td>NOT GREATER-THAN / NOT GREATER THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02270</td> <td>≰</td> <td>\\nleq</td> <td>NEITHER LESS-THAN NOR EQUAL TO / NEITHER LESS THAN NOR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02271</td> <td>≱</td> <td>\\ngeq</td> <td>NEITHER GREATER-THAN NOR EQUAL TO / NEITHER GREATER THAN NOR EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02272</td> <td>≲</td> <td>\\lesssim</td> <td>LESS-THAN OR EQUIVALENT TO / LESS THAN OR EQUIVALENT TO</td> </tr> <tr class=\"row-even\">\n<td>U+02273</td> <td>≳</td> <td>\\gtrsim</td> <td>GREATER-THAN OR EQUIVALENT TO / GREATER THAN OR EQUIVALENT TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02274</td> <td>≴</td> <td>\\nlesssim</td> <td>NEITHER LESS-THAN NOR EQUIVALENT TO / NEITHER LESS THAN NOR EQUIVALENT TO</td> </tr> <tr class=\"row-even\">\n<td>U+02275</td> <td>≵</td> <td>\\ngtrsim</td> <td>NEITHER GREATER-THAN NOR EQUIVALENT TO / NEITHER GREATER THAN NOR EQUIVALENT TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02276</td> <td>≶</td> <td>\\lessgtr</td> <td>LESS-THAN OR GREATER-THAN / LESS THAN OR GREATER THAN</td> </tr> <tr class=\"row-even\">\n<td>U+02277</td> <td>≷</td> <td>\\gtrless</td> <td>GREATER-THAN OR LESS-THAN / GREATER THAN OR LESS THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02278</td> <td>≸</td> <td>\\notlessgreater</td> <td>NEITHER LESS-THAN NOR GREATER-THAN / NEITHER LESS THAN NOR GREATER THAN</td> </tr> <tr class=\"row-even\">\n<td>U+02279</td> <td>≹</td> <td>\\notgreaterless</td> <td>NEITHER GREATER-THAN NOR LESS-THAN / NEITHER GREATER THAN NOR LESS THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+0227A</td> <td>≺</td> <td>\\prec</td> <td>PRECEDES</td> </tr> <tr class=\"row-even\">\n<td>U+0227B</td> <td>≻</td> <td>\\succ</td> <td>SUCCEEDS</td> </tr> <tr class=\"row-odd\">\n<td>U+0227C</td> <td>≼</td> <td>\\preccurlyeq</td> <td>PRECEDES OR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+0227D</td> <td>≽</td> <td>\\succcurlyeq</td> <td>SUCCEEDS OR EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+0227E</td> <td>≾</td> <td>\\precsim</td> <td>PRECEDES OR EQUIVALENT TO</td> </tr> <tr class=\"row-even\">\n<td>U+0227E + U+00338</td> <td>≾̸</td> <td>\\nprecsim</td> <td>PRECEDES OR EQUIVALENT TO + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+0227F</td> <td>≿</td> <td>\\succsim</td> <td>SUCCEEDS OR EQUIVALENT TO</td> </tr> <tr class=\"row-even\">\n<td>U+0227F + U+00338</td> <td>≿̸</td> <td>\\nsuccsim</td> <td>SUCCEEDS OR EQUIVALENT TO + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+02280</td> <td>⊀</td> <td>\\nprec</td> <td>DOES NOT PRECEDE</td> </tr> <tr class=\"row-even\">\n<td>U+02281</td> <td>⊁</td> <td>\\nsucc</td> <td>DOES NOT SUCCEED</td> </tr> <tr class=\"row-odd\">\n<td>U+02282</td> <td>⊂</td> <td>\\subset</td> <td>SUBSET OF</td> </tr> <tr class=\"row-even\">\n<td>U+02283</td> <td>⊃</td> <td>\\supset</td> <td>SUPERSET OF</td> </tr> <tr class=\"row-odd\">\n<td>U+02284</td> <td>⊄</td> <td>\\nsubset</td> <td>NOT A SUBSET OF</td> </tr> <tr class=\"row-even\">\n<td>U+02285</td> <td>⊅</td> <td>\\nsupset</td> <td>NOT A SUPERSET OF</td> </tr> <tr class=\"row-odd\">\n<td>U+02286</td> <td>⊆</td> <td>\\subseteq</td> <td>SUBSET OF OR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02287</td> <td>⊇</td> <td>\\supseteq</td> <td>SUPERSET OF OR EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02288</td> <td>⊈</td> <td>\\nsubseteq</td> <td>NEITHER A SUBSET OF NOR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02289</td> <td>⊉</td> <td>\\nsupseteq</td> <td>NEITHER A SUPERSET OF NOR EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+0228A</td> <td>⊊</td> <td>\\subsetneq</td> <td>SUBSET OF WITH NOT EQUAL TO / SUBSET OF OR NOT EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+0228A + U+0FE00</td> <td>⊊︀</td> <td>\\varsubsetneqq</td> <td>SUBSET OF WITH NOT EQUAL TO / SUBSET OF OR NOT EQUAL TO + VARIATION SELECTOR-1</td> </tr> <tr class=\"row-odd\">\n<td>U+0228B</td> <td>⊋</td> <td>\\supsetneq</td> <td>SUPERSET OF WITH NOT EQUAL TO / SUPERSET OF OR NOT EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+0228B + U+0FE00</td> <td>⊋︀</td> <td>\\varsupsetneq</td> <td>SUPERSET OF WITH NOT EQUAL TO / SUPERSET OF OR NOT EQUAL TO + VARIATION SELECTOR-1</td> </tr> <tr class=\"row-odd\">\n<td>U+0228D</td> <td>⊍</td> <td>\\cupdot</td> <td>MULTISET MULTIPLICATION</td> </tr> <tr class=\"row-even\">\n<td>U+0228E</td> <td>⊎</td> <td>\\uplus</td> <td>MULTISET UNION</td> </tr> <tr class=\"row-odd\">\n<td>U+0228F</td> <td>⊏</td> <td>\\sqsubset</td> <td>SQUARE IMAGE OF</td> </tr> <tr class=\"row-even\">\n<td>U+0228F + U+00338</td> <td>⊏̸</td> <td>\\NotSquareSubset</td> <td>SQUARE IMAGE OF + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+02290</td> <td>⊐</td> <td>\\sqsupset</td> <td>SQUARE ORIGINAL OF</td> </tr> <tr class=\"row-even\">\n<td>U+02290 + U+00338</td> <td>⊐̸</td> <td>\\NotSquareSuperset</td> <td>SQUARE ORIGINAL OF + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+02291</td> <td>⊑</td> <td>\\sqsubseteq</td> <td>SQUARE IMAGE OF OR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02292</td> <td>⊒</td> <td>\\sqsupseteq</td> <td>SQUARE ORIGINAL OF OR EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02293</td> <td>⊓</td> <td>\\sqcap</td> <td>SQUARE CAP</td> </tr> <tr class=\"row-even\">\n<td>U+02294</td> <td>⊔</td> <td>\\sqcup</td> <td>SQUARE CUP</td> </tr> <tr class=\"row-odd\">\n<td>U+02295</td> <td>⊕</td> <td>\\oplus</td> <td>CIRCLED PLUS</td> </tr> <tr class=\"row-even\">\n<td>U+02296</td> <td>⊖</td> <td>\\ominus</td> <td>CIRCLED MINUS</td> </tr> <tr class=\"row-odd\">\n<td>U+02297</td> <td>⊗</td> <td>\\otimes</td> <td>CIRCLED TIMES</td> </tr> <tr class=\"row-even\">\n<td>U+02298</td> <td>⊘</td> <td>\\oslash</td> <td>CIRCLED DIVISION SLASH</td> </tr> <tr class=\"row-odd\">\n<td>U+02299</td> <td>⊙</td> <td>\\odot</td> <td>CIRCLED DOT OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+0229A</td> <td>⊚</td> <td>\\circledcirc</td> <td>CIRCLED RING OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+0229B</td> <td>⊛</td> <td>\\circledast</td> <td>CIRCLED ASTERISK OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+0229C</td> <td>⊜</td> <td>\\circledequal</td> <td>CIRCLED EQUALS</td> </tr> <tr class=\"row-odd\">\n<td>U+0229D</td> <td>⊝</td> <td>\\circleddash</td> <td>CIRCLED DASH</td> </tr> <tr class=\"row-even\">\n<td>U+0229E</td> <td>⊞</td> <td>\\boxplus</td> <td>SQUARED PLUS</td> </tr> <tr class=\"row-odd\">\n<td>U+0229F</td> <td>⊟</td> <td>\\boxminus</td> <td>SQUARED MINUS</td> </tr> <tr class=\"row-even\">\n<td>U+022A0</td> <td>⊠</td> <td>\\boxtimes</td> <td>SQUARED TIMES</td> </tr> <tr class=\"row-odd\">\n<td>U+022A1</td> <td>⊡</td> <td>\\boxdot</td> <td>SQUARED DOT OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+022A2</td> <td>⊢</td> <td>\\vdash</td> <td>RIGHT TACK</td> </tr> <tr class=\"row-odd\">\n<td>U+022A3</td> <td>⊣</td> <td>\\dashv</td> <td>LEFT TACK</td> </tr> <tr class=\"row-even\">\n<td>U+022A4</td> <td>⊤</td> <td>\\top</td> <td>DOWN TACK</td> </tr> <tr class=\"row-odd\">\n<td>U+022A5</td> <td>⊥</td> <td>\\bot</td> <td>UP TACK</td> </tr> <tr class=\"row-even\">\n<td>U+022A7</td> <td>⊧</td> <td>\\models</td> <td>MODELS</td> </tr> <tr class=\"row-odd\">\n<td>U+022A8</td> <td>⊨</td> <td>\\vDash</td> <td>TRUE</td> </tr> <tr class=\"row-even\">\n<td>U+022A9</td> <td>⊩</td> <td>\\Vdash</td> <td>FORCES</td> </tr> <tr class=\"row-odd\">\n<td>U+022AA</td> <td>⊪</td> <td>\\Vvdash</td> <td>TRIPLE VERTICAL BAR RIGHT TURNSTILE</td> </tr> <tr class=\"row-even\">\n<td>U+022AB</td> <td>⊫</td> <td>\\VDash</td> <td>DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE</td> </tr> <tr class=\"row-odd\">\n<td>U+022AC</td> <td>⊬</td> <td>\\nvdash</td> <td>DOES NOT PROVE</td> </tr> <tr class=\"row-even\">\n<td>U+022AD</td> <td>⊭</td> <td>\\nvDash</td> <td>NOT TRUE</td> </tr> <tr class=\"row-odd\">\n<td>U+022AE</td> <td>⊮</td> <td>\\nVdash</td> <td>DOES NOT FORCE</td> </tr> <tr class=\"row-even\">\n<td>U+022AF</td> <td>⊯</td> <td>\\nVDash</td> <td>NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE</td> </tr> <tr class=\"row-odd\">\n<td>U+022B0</td> <td>⊰</td> <td>\\prurel</td> <td>PRECEDES UNDER RELATION</td> </tr> <tr class=\"row-even\">\n<td>U+022B1</td> <td>⊱</td> <td>\\scurel</td> <td>SUCCEEDS UNDER RELATION</td> </tr> <tr class=\"row-odd\">\n<td>U+022B2</td> <td>⊲</td> <td>\\vartriangleleft</td> <td>NORMAL SUBGROUP OF</td> </tr> <tr class=\"row-even\">\n<td>U+022B3</td> <td>⊳</td> <td>\\vartriangleright</td> <td>CONTAINS AS NORMAL SUBGROUP</td> </tr> <tr class=\"row-odd\">\n<td>U+022B4</td> <td>⊴</td> <td>\\trianglelefteq</td> <td>NORMAL SUBGROUP OF OR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+022B5</td> <td>⊵</td> <td>\\trianglerighteq</td> <td>CONTAINS AS NORMAL SUBGROUP OR EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+022B6</td> <td>⊶</td> <td>\\original</td> <td>ORIGINAL OF</td> </tr> <tr class=\"row-even\">\n<td>U+022B7</td> <td>⊷</td> <td>\\image</td> <td>IMAGE OF</td> </tr> <tr class=\"row-odd\">\n<td>U+022B8</td> <td>⊸</td> <td>\\multimap</td> <td>MULTIMAP</td> </tr> <tr class=\"row-even\">\n<td>U+022B9</td> <td>⊹</td> <td>\\hermitconjmatrix</td> <td>HERMITIAN CONJUGATE MATRIX</td> </tr> <tr class=\"row-odd\">\n<td>U+022BA</td> <td>⊺</td> <td>\\intercal</td> <td>INTERCALATE</td> </tr> <tr class=\"row-even\">\n<td>U+022BB</td> <td>⊻</td> <td>\\veebar</td> <td>XOR</td> </tr> <tr class=\"row-odd\">\n<td>U+022BC</td> <td>⊼</td> <td>\\barwedge</td> <td>NAND</td> </tr> <tr class=\"row-even\">\n<td>U+022BD</td> <td>⊽</td> <td>\\barvee</td> <td>NOR</td> </tr> <tr class=\"row-odd\">\n<td>U+022BE</td> <td>⊾</td> <td>\\rightanglearc</td> <td>RIGHT ANGLE WITH ARC</td> </tr> <tr class=\"row-even\">\n<td>U+022BF</td> <td>⊿</td> <td>\\varlrtriangle</td> <td>RIGHT TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+022C0</td> <td>⋀</td> <td>\\bigwedge</td> <td>N-ARY LOGICAL AND</td> </tr> <tr class=\"row-even\">\n<td>U+022C1</td> <td>⋁</td> <td>\\bigvee</td> <td>N-ARY LOGICAL OR</td> </tr> <tr class=\"row-odd\">\n<td>U+022C2</td> <td>⋂</td> <td>\\bigcap</td> <td>N-ARY INTERSECTION</td> </tr> <tr class=\"row-even\">\n<td>U+022C3</td> <td>⋃</td> <td>\\bigcup</td> <td>N-ARY UNION</td> </tr> <tr class=\"row-odd\">\n<td>U+022C4</td> <td>⋄</td> <td>\\diamond</td> <td>DIAMOND OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+022C5</td> <td>⋅</td> <td>\\cdot</td> <td>DOT OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+022C6</td> <td>⋆</td> <td>\\star</td> <td>STAR OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+022C7</td> <td>⋇</td> <td>\\divideontimes</td> <td>DIVISION TIMES</td> </tr> <tr class=\"row-odd\">\n<td>U+022C8</td> <td>⋈</td> <td>\\bowtie</td> <td>BOWTIE</td> </tr> <tr class=\"row-even\">\n<td>U+022C9</td> <td>⋉</td> <td>\\ltimes</td> <td>LEFT NORMAL FACTOR SEMIDIRECT PRODUCT</td> </tr> <tr class=\"row-odd\">\n<td>U+022CA</td> <td>⋊</td> <td>\\rtimes</td> <td>RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT</td> </tr> <tr class=\"row-even\">\n<td>U+022CB</td> <td>⋋</td> <td>\\leftthreetimes</td> <td>LEFT SEMIDIRECT PRODUCT</td> </tr> <tr class=\"row-odd\">\n<td>U+022CC</td> <td>⋌</td> <td>\\rightthreetimes</td> <td>RIGHT SEMIDIRECT PRODUCT</td> </tr> <tr class=\"row-even\">\n<td>U+022CD</td> <td>⋍</td> <td>\\backsimeq</td> <td>REVERSED TILDE EQUALS</td> </tr> <tr class=\"row-odd\">\n<td>U+022CE</td> <td>⋎</td> <td>\\curlyvee</td> <td>CURLY LOGICAL OR</td> </tr> <tr class=\"row-even\">\n<td>U+022CF</td> <td>⋏</td> <td>\\curlywedge</td> <td>CURLY LOGICAL AND</td> </tr> <tr class=\"row-odd\">\n<td>U+022D0</td> <td>⋐</td> <td>\\Subset</td> <td>DOUBLE SUBSET</td> </tr> <tr class=\"row-even\">\n<td>U+022D1</td> <td>⋑</td> <td>\\Supset</td> <td>DOUBLE SUPERSET</td> </tr> <tr class=\"row-odd\">\n<td>U+022D2</td> <td>⋒</td> <td>\\Cap</td> <td>DOUBLE INTERSECTION</td> </tr> <tr class=\"row-even\">\n<td>U+022D3</td> <td>⋓</td> <td>\\Cup</td> <td>DOUBLE UNION</td> </tr> <tr class=\"row-odd\">\n<td>U+022D4</td> <td>⋔</td> <td>\\pitchfork</td> <td>PITCHFORK</td> </tr> <tr class=\"row-even\">\n<td>U+022D5</td> <td>⋕</td> <td>\\equalparallel</td> <td>EQUAL AND PARALLEL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+022D6</td> <td>⋖</td> <td>\\lessdot</td> <td>LESS-THAN WITH DOT / LESS THAN WITH DOT</td> </tr> <tr class=\"row-even\">\n<td>U+022D7</td> <td>⋗</td> <td>\\gtrdot</td> <td>GREATER-THAN WITH DOT / GREATER THAN WITH DOT</td> </tr> <tr class=\"row-odd\">\n<td>U+022D8</td> <td>⋘</td> <td>\\verymuchless</td> <td>VERY MUCH LESS-THAN / VERY MUCH LESS THAN</td> </tr> <tr class=\"row-even\">\n<td>U+022D9</td> <td>⋙</td> <td>\\ggg</td> <td>VERY MUCH GREATER-THAN / VERY MUCH GREATER THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+022DA</td> <td>⋚</td> <td>\\lesseqgtr</td> <td>LESS-THAN EQUAL TO OR GREATER-THAN / LESS THAN EQUAL TO OR GREATER THAN</td> </tr> <tr class=\"row-even\">\n<td>U+022DB</td> <td>⋛</td> <td>\\gtreqless</td> <td>GREATER-THAN EQUAL TO OR LESS-THAN / GREATER THAN EQUAL TO OR LESS THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+022DC</td> <td>⋜</td> <td>\\eqless</td> <td>EQUAL TO OR LESS-THAN / EQUAL TO OR LESS THAN</td> </tr> <tr class=\"row-even\">\n<td>U+022DD</td> <td>⋝</td> <td>\\eqgtr</td> <td>EQUAL TO OR GREATER-THAN / EQUAL TO OR GREATER THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+022DE</td> <td>⋞</td> <td>\\curlyeqprec</td> <td>EQUAL TO OR PRECEDES</td> </tr> <tr class=\"row-even\">\n<td>U+022DF</td> <td>⋟</td> <td>\\curlyeqsucc</td> <td>EQUAL TO OR SUCCEEDS</td> </tr> <tr class=\"row-odd\">\n<td>U+022E0</td> <td>⋠</td> <td>\\npreccurlyeq</td> <td>DOES NOT PRECEDE OR EQUAL</td> </tr> <tr class=\"row-even\">\n<td>U+022E1</td> <td>⋡</td> <td>\\nsucccurlyeq</td> <td>DOES NOT SUCCEED OR EQUAL</td> </tr> <tr class=\"row-odd\">\n<td>U+022E2</td> <td>⋢</td> <td>\\nsqsubseteq</td> <td>NOT SQUARE IMAGE OF OR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+022E3</td> <td>⋣</td> <td>\\nsqsupseteq</td> <td>NOT SQUARE ORIGINAL OF OR EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+022E4</td> <td>⋤</td> <td>\\sqsubsetneq</td> <td>SQUARE IMAGE OF OR NOT EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+022E5</td> <td>⋥</td> <td>\\Elzsqspne</td> <td>SQUARE ORIGINAL OF OR NOT EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+022E6</td> <td>⋦</td> <td>\\lnsim</td> <td>LESS-THAN BUT NOT EQUIVALENT TO / LESS THAN BUT NOT EQUIVALENT TO</td> </tr> <tr class=\"row-even\">\n<td>U+022E7</td> <td>⋧</td> <td>\\gnsim</td> <td>GREATER-THAN BUT NOT EQUIVALENT TO / GREATER THAN BUT NOT EQUIVALENT TO</td> </tr> <tr class=\"row-odd\">\n<td>U+022E8</td> <td>⋨</td> <td>\\precnsim</td> <td>PRECEDES BUT NOT EQUIVALENT TO</td> </tr> <tr class=\"row-even\">\n<td>U+022E9</td> <td>⋩</td> <td>\\succnsim</td> <td>SUCCEEDS BUT NOT EQUIVALENT TO</td> </tr> <tr class=\"row-odd\">\n<td>U+022EA</td> <td>⋪</td> <td>\\ntriangleleft</td> <td>NOT NORMAL SUBGROUP OF</td> </tr> <tr class=\"row-even\">\n<td>U+022EB</td> <td>⋫</td> <td>\\ntriangleright</td> <td>DOES NOT CONTAIN AS NORMAL SUBGROUP</td> </tr> <tr class=\"row-odd\">\n<td>U+022EC</td> <td>⋬</td> <td>\\ntrianglelefteq</td> <td>NOT NORMAL SUBGROUP OF OR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+022ED</td> <td>⋭</td> <td>\\ntrianglerighteq</td> <td>DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL</td> </tr> <tr class=\"row-odd\">\n<td>U+022EE</td> <td>⋮</td> <td>\\vdots</td> <td>VERTICAL ELLIPSIS</td> </tr> <tr class=\"row-even\">\n<td>U+022EF</td> <td>⋯</td> <td>\\cdots</td> <td>MIDLINE HORIZONTAL ELLIPSIS</td> </tr> <tr class=\"row-odd\">\n<td>U+022F0</td> <td>⋰</td> <td>\\adots</td> <td>UP RIGHT DIAGONAL ELLIPSIS</td> </tr> <tr class=\"row-even\">\n<td>U+022F1</td> <td>⋱</td> <td>\\ddots</td> <td>DOWN RIGHT DIAGONAL ELLIPSIS</td> </tr> <tr class=\"row-odd\">\n<td>U+022F2</td> <td>⋲</td> <td>\\disin</td> <td>ELEMENT OF WITH LONG HORIZONTAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+022F3</td> <td>⋳</td> <td>\\varisins</td> <td>ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+022F4</td> <td>⋴</td> <td>\\isins</td> <td>SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+022F5</td> <td>⋵</td> <td>\\isindot</td> <td>ELEMENT OF WITH DOT ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+022F6</td> <td>⋶</td> <td>\\varisinobar</td> <td>ELEMENT OF WITH OVERBAR</td> </tr> <tr class=\"row-even\">\n<td>U+022F7</td> <td>⋷</td> <td>\\isinobar</td> <td>SMALL ELEMENT OF WITH OVERBAR</td> </tr> <tr class=\"row-odd\">\n<td>U+022F8</td> <td>⋸</td> <td>\\isinvb</td> <td>ELEMENT OF WITH UNDERBAR</td> </tr> <tr class=\"row-even\">\n<td>U+022F9</td> <td>⋹</td> <td>\\isinE</td> <td>ELEMENT OF WITH TWO HORIZONTAL STROKES</td> </tr> <tr class=\"row-odd\">\n<td>U+022FA</td> <td>⋺</td> <td>\\nisd</td> <td>CONTAINS WITH LONG HORIZONTAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+022FB</td> <td>⋻</td> <td>\\varnis</td> <td>CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+022FC</td> <td>⋼</td> <td>\\nis</td> <td>SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+022FD</td> <td>⋽</td> <td>\\varniobar</td> <td>CONTAINS WITH OVERBAR</td> </tr> <tr class=\"row-odd\">\n<td>U+022FE</td> <td>⋾</td> <td>\\niobar</td> <td>SMALL CONTAINS WITH OVERBAR</td> </tr> <tr class=\"row-even\">\n<td>U+022FF</td> <td>⋿</td> <td>\\bagmember</td> <td>Z NOTATION BAG MEMBERSHIP</td> </tr> <tr class=\"row-odd\">\n<td>U+02300</td> <td>⌀</td> <td>\\diameter</td> <td>DIAMETER SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+02302</td> <td>⌂</td> <td>\\house</td> <td>HOUSE</td> </tr> <tr class=\"row-odd\">\n<td>U+02306</td> <td>⌆</td> <td>\\vardoublebarwedge</td> <td>PERSPECTIVE</td> </tr> <tr class=\"row-even\">\n<td>U+02308</td> <td>⌈</td> <td>\\lceil</td> <td>LEFT CEILING</td> </tr> <tr class=\"row-odd\">\n<td>U+02309</td> <td>⌉</td> <td>\\rceil</td> <td>RIGHT CEILING</td> </tr> <tr class=\"row-even\">\n<td>U+0230A</td> <td>⌊</td> <td>\\lfloor</td> <td>LEFT FLOOR</td> </tr> <tr class=\"row-odd\">\n<td>U+0230B</td> <td>⌋</td> <td>\\rfloor</td> <td>RIGHT FLOOR</td> </tr> <tr class=\"row-even\">\n<td>U+02310</td> <td>⌐</td> <td>\\invnot</td> <td>REVERSED NOT SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02311</td> <td>⌑</td> <td>\\sqlozenge</td> <td>SQUARE LOZENGE</td> </tr> <tr class=\"row-even\">\n<td>U+02312</td> <td>⌒</td> <td>\\profline</td> <td>ARC</td> </tr> <tr class=\"row-odd\">\n<td>U+02313</td> <td>⌓</td> <td>\\profsurf</td> <td>SEGMENT</td> </tr> <tr class=\"row-even\">\n<td>U+02315</td> <td>⌕</td> <td>\\recorder</td> <td>TELEPHONE RECORDER</td> </tr> <tr class=\"row-odd\">\n<td>U+02317</td> <td>⌗</td> <td>\\viewdata</td> <td>VIEWDATA SQUARE</td> </tr> <tr class=\"row-even\">\n<td>U+02319</td> <td>⌙</td> <td>\\turnednot</td> <td>TURNED NOT SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+0231A</td> <td>⌚</td> <td>\\:watch:</td> <td>WATCH</td> </tr> <tr class=\"row-even\">\n<td>U+0231B</td> <td>⌛</td> <td>\\:hourglass:</td> <td>HOURGLASS</td> </tr> <tr class=\"row-odd\">\n<td>U+0231C</td> <td>⌜</td> <td>\\ulcorner</td> <td>TOP LEFT CORNER</td> </tr> <tr class=\"row-even\">\n<td>U+0231D</td> <td>⌝</td> <td>\\urcorner</td> <td>TOP RIGHT CORNER</td> </tr> <tr class=\"row-odd\">\n<td>U+0231E</td> <td>⌞</td> <td>\\llcorner</td> <td>BOTTOM LEFT CORNER</td> </tr> <tr class=\"row-even\">\n<td>U+0231F</td> <td>⌟</td> <td>\\lrcorner</td> <td>BOTTOM RIGHT CORNER</td> </tr> <tr class=\"row-odd\">\n<td>U+02322</td> <td>⌢</td> <td>\\frown</td> <td>FROWN</td> </tr> <tr class=\"row-even\">\n<td>U+02323</td> <td>⌣</td> <td>\\smile</td> <td>SMILE</td> </tr> <tr class=\"row-odd\">\n<td>U+0232C</td> <td>⌬</td> <td>\\varhexagonlrbonds</td> <td>BENZENE RING</td> </tr> <tr class=\"row-even\">\n<td>U+02332</td> <td>⌲</td> <td>\\conictaper</td> <td>CONICAL TAPER</td> </tr> <tr class=\"row-odd\">\n<td>U+02336</td> <td>⌶</td> <td>\\topbot</td> <td>APL FUNCTIONAL SYMBOL I-BEAM</td> </tr> <tr class=\"row-even\">\n<td>U+0233D</td> <td>⌽</td> <td>\\obar</td> <td>APL FUNCTIONAL SYMBOL CIRCLE STILE</td> </tr> <tr class=\"row-odd\">\n<td>U+0233F</td> <td>⌿</td> <td>\\APLnotslash</td> <td>APL FUNCTIONAL SYMBOL SLASH BAR</td> </tr> <tr class=\"row-even\">\n<td>U+02340</td> <td>⍀</td> <td>\\APLnotbackslash</td> <td>APL FUNCTIONAL SYMBOL BACKSLASH BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02353</td> <td>⍓</td> <td>\\APLboxupcaret</td> <td>APL FUNCTIONAL SYMBOL QUAD UP CARET</td> </tr> <tr class=\"row-even\">\n<td>U+02370</td> <td>⍰</td> <td>\\APLboxquestion</td> <td>APL FUNCTIONAL SYMBOL QUAD QUESTION</td> </tr> <tr class=\"row-odd\">\n<td>U+02394</td> <td>⎔</td> <td>\\hexagon</td> <td>SOFTWARE-FUNCTION SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+023A3</td> <td>⎣</td> <td>\\Elzdlcorn</td> <td>LEFT SQUARE BRACKET LOWER CORNER</td> </tr> <tr class=\"row-odd\">\n<td>U+023B0</td> <td>⎰</td> <td>\\lmoustache</td> <td>UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION</td> </tr> <tr class=\"row-even\">\n<td>U+023B1</td> <td>⎱</td> <td>\\rmoustache</td> <td>UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION</td> </tr> <tr class=\"row-odd\">\n<td>U+023B4</td> <td>⎴</td> <td>\\overbracket</td> <td>TOP SQUARE BRACKET</td> </tr> <tr class=\"row-even\">\n<td>U+023B5</td> <td>⎵</td> <td>\\underbracket</td> <td>BOTTOM SQUARE BRACKET</td> </tr> <tr class=\"row-odd\">\n<td>U+023B6</td> <td>⎶</td> <td>\\bbrktbrk</td> <td>BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET</td> </tr> <tr class=\"row-even\">\n<td>U+023B7</td> <td>⎷</td> <td>\\sqrtbottom</td> <td>RADICAL SYMBOL BOTTOM</td> </tr> <tr class=\"row-odd\">\n<td>U+023B8</td> <td>⎸</td> <td>\\lvboxline</td> <td>LEFT VERTICAL BOX LINE</td> </tr> <tr class=\"row-even\">\n<td>U+023B9</td> <td>⎹</td> <td>\\rvboxline</td> <td>RIGHT VERTICAL BOX LINE</td> </tr> <tr class=\"row-odd\">\n<td>U+023CE</td> <td>⏎</td> <td>\\varcarriagereturn</td> <td>RETURN SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+023DE</td> <td>⏞</td> <td>\\overbrace</td> <td>TOP CURLY BRACKET</td> </tr> <tr class=\"row-odd\">\n<td>U+023DF</td> <td>⏟</td> <td>\\underbrace</td> <td>BOTTOM CURLY BRACKET</td> </tr> <tr class=\"row-even\">\n<td>U+023E2</td> <td>⏢</td> <td>\\trapezium</td> <td>WHITE TRAPEZIUM</td> </tr> <tr class=\"row-odd\">\n<td>U+023E3</td> <td>⏣</td> <td>\\benzenr</td> <td>BENZENE RING WITH CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+023E4</td> <td>⏤</td> <td>\\strns</td> <td>STRAIGHTNESS</td> </tr> <tr class=\"row-odd\">\n<td>U+023E5</td> <td>⏥</td> <td>\\fltns</td> <td>FLATNESS</td> </tr> <tr class=\"row-even\">\n<td>U+023E6</td> <td>⏦</td> <td>\\accurrent</td> <td>AC CURRENT</td> </tr> <tr class=\"row-odd\">\n<td>U+023E7</td> <td>⏧</td> <td>\\elinters</td> <td>ELECTRICAL INTERSECTION</td> </tr> <tr class=\"row-even\">\n<td>U+023E9</td> <td>⏩</td> <td>\\:fast_forward:</td> <td>BLACK RIGHT-POINTING DOUBLE TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+023EA</td> <td>⏪</td> <td>\\:rewind:</td> <td>BLACK LEFT-POINTING DOUBLE TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+023EB</td> <td>⏫</td> <td>\\:arrow_double_up:</td> <td>BLACK UP-POINTING DOUBLE TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+023EC</td> <td>⏬</td> <td>\\:arrow_double_down:</td> <td>BLACK DOWN-POINTING DOUBLE TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+023F0</td> <td>⏰</td> <td>\\:alarm_clock:</td> <td>ALARM CLOCK</td> </tr> <tr class=\"row-odd\">\n<td>U+023F3</td> <td>⏳</td> <td>\\:hourglass_flowing_sand:</td> <td>HOURGLASS WITH FLOWING SAND</td> </tr> <tr class=\"row-even\">\n<td>U+02422</td> <td>␢</td> <td>\\blanksymbol</td> <td>BLANK SYMBOL / BLANK</td> </tr> <tr class=\"row-odd\">\n<td>U+02423</td> <td>␣</td> <td>\\textvisiblespace</td> <td>OPEN BOX</td> </tr> <tr class=\"row-even\">\n<td>U+024C2</td> <td>Ⓜ</td> <td>\\:m:</td> <td>CIRCLED LATIN CAPITAL LETTER M</td> </tr> <tr class=\"row-odd\">\n<td>U+024C8</td> <td>Ⓢ</td> <td>\\circledS</td> <td>CIRCLED LATIN CAPITAL LETTER S</td> </tr> <tr class=\"row-even\">\n<td>U+02506</td> <td>┆</td> <td>\\Elzdshfnc</td> <td>BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL / FORMS LIGHT TRIPLE DASH VERTICAL</td> </tr> <tr class=\"row-odd\">\n<td>U+02519</td> <td>┙</td> <td>\\Elzsqfnw</td> <td>BOX DRAWINGS UP LIGHT AND LEFT HEAVY / FORMS UP LIGHT AND LEFT HEAVY</td> </tr> <tr class=\"row-even\">\n<td>U+02571</td> <td>╱</td> <td>\\diagup</td> <td>BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT / FORMS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT</td> </tr> <tr class=\"row-odd\">\n<td>U+02572</td> <td>╲</td> <td>\\diagdown</td> <td>BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT / FORMS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+02580</td> <td>▀</td> <td>\\blockuphalf</td> <td>UPPER HALF BLOCK</td> </tr> <tr class=\"row-odd\">\n<td>U+02584</td> <td>▄</td> <td>\\blocklowhalf</td> <td>LOWER HALF BLOCK</td> </tr> <tr class=\"row-even\">\n<td>U+02588</td> <td>█</td> <td>\\blockfull</td> <td>FULL BLOCK</td> </tr> <tr class=\"row-odd\">\n<td>U+0258C</td> <td>▌</td> <td>\\blocklefthalf</td> <td>LEFT HALF BLOCK</td> </tr> <tr class=\"row-even\">\n<td>U+02590</td> <td>▐</td> <td>\\blockrighthalf</td> <td>RIGHT HALF BLOCK</td> </tr> <tr class=\"row-odd\">\n<td>U+02591</td> <td>░</td> <td>\\blockqtrshaded</td> <td>LIGHT SHADE</td> </tr> <tr class=\"row-even\">\n<td>U+02592</td> <td>▒</td> <td>\\blockhalfshaded</td> <td>MEDIUM SHADE</td> </tr> <tr class=\"row-odd\">\n<td>U+02593</td> <td>▓</td> <td>\\blockthreeqtrshaded</td> <td>DARK SHADE</td> </tr> <tr class=\"row-even\">\n<td>U+025A0</td> <td>■</td> <td>\\blacksquare</td> <td>BLACK SQUARE</td> </tr> <tr class=\"row-odd\">\n<td>U+025A1</td> <td>□</td> <td>\\square</td> <td>WHITE SQUARE</td> </tr> <tr class=\"row-even\">\n<td>U+025A2</td> <td>▢</td> <td>\\squoval</td> <td>WHITE SQUARE WITH ROUNDED CORNERS</td> </tr> <tr class=\"row-odd\">\n<td>U+025A3</td> <td>▣</td> <td>\\blackinwhitesquare</td> <td>WHITE SQUARE CONTAINING BLACK SMALL SQUARE</td> </tr> <tr class=\"row-even\">\n<td>U+025A4</td> <td>▤</td> <td>\\squarehfill</td> <td>SQUARE WITH HORIZONTAL FILL</td> </tr> <tr class=\"row-odd\">\n<td>U+025A5</td> <td>▥</td> <td>\\squarevfill</td> <td>SQUARE WITH VERTICAL FILL</td> </tr> <tr class=\"row-even\">\n<td>U+025A6</td> <td>▦</td> <td>\\squarehvfill</td> <td>SQUARE WITH ORTHOGONAL CROSSHATCH FILL</td> </tr> <tr class=\"row-odd\">\n<td>U+025A7</td> <td>▧</td> <td>\\squarenwsefill</td> <td>SQUARE WITH UPPER LEFT TO LOWER RIGHT FILL</td> </tr> <tr class=\"row-even\">\n<td>U+025A8</td> <td>▨</td> <td>\\squareneswfill</td> <td>SQUARE WITH UPPER RIGHT TO LOWER LEFT FILL</td> </tr> <tr class=\"row-odd\">\n<td>U+025A9</td> <td>▩</td> <td>\\squarecrossfill</td> <td>SQUARE WITH DIAGONAL CROSSHATCH FILL</td> </tr> <tr class=\"row-even\">\n<td>U+025AA</td> <td>▪</td> <td>\\smblksquare, \\:black_small_square:</td> <td>BLACK SMALL SQUARE</td> </tr> <tr class=\"row-odd\">\n<td>U+025AB</td> <td>▫</td> <td>\\smwhtsquare, \\:white_small_square:</td> <td>WHITE SMALL SQUARE</td> </tr> <tr class=\"row-even\">\n<td>U+025AC</td> <td>▬</td> <td>\\hrectangleblack</td> <td>BLACK RECTANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025AD</td> <td>▭</td> <td>\\hrectangle</td> <td>WHITE RECTANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+025AE</td> <td>▮</td> <td>\\vrectangleblack</td> <td>BLACK VERTICAL RECTANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025AF</td> <td>▯</td> <td>\\Elzvrecto</td> <td>WHITE VERTICAL RECTANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+025B0</td> <td>▰</td> <td>\\parallelogramblack</td> <td>BLACK PARALLELOGRAM</td> </tr> <tr class=\"row-odd\">\n<td>U+025B1</td> <td>▱</td> <td>\\parallelogram</td> <td>WHITE PARALLELOGRAM</td> </tr> <tr class=\"row-even\">\n<td>U+025B2</td> <td>▲</td> <td>\\bigblacktriangleup</td> <td>BLACK UP-POINTING TRIANGLE / BLACK UP POINTING TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025B3</td> <td>△</td> <td>\\bigtriangleup</td> <td>WHITE UP-POINTING TRIANGLE / WHITE UP POINTING TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+025B4</td> <td>▴</td> <td>\\blacktriangle</td> <td>BLACK UP-POINTING SMALL TRIANGLE / BLACK UP POINTING SMALL TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025B5</td> <td>▵</td> <td>\\vartriangle</td> <td>WHITE UP-POINTING SMALL TRIANGLE / WHITE UP POINTING SMALL TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+025B6</td> <td>▶</td> <td>\\blacktriangleright, \\:arrow_forward:</td> <td>BLACK RIGHT-POINTING TRIANGLE / BLACK RIGHT POINTING TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025B9</td> <td>▹</td> <td>\\triangleright</td> <td>WHITE RIGHT-POINTING SMALL TRIANGLE / WHITE RIGHT POINTING SMALL TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+025BA</td> <td>►</td> <td>\\blackpointerright</td> <td>BLACK RIGHT-POINTING POINTER / BLACK RIGHT POINTING POINTER</td> </tr> <tr class=\"row-odd\">\n<td>U+025BB</td> <td>▻</td> <td>\\whitepointerright</td> <td>WHITE RIGHT-POINTING POINTER / WHITE RIGHT POINTING POINTER</td> </tr> <tr class=\"row-even\">\n<td>U+025BC</td> <td>▼</td> <td>\\bigblacktriangledown</td> <td>BLACK DOWN-POINTING TRIANGLE / BLACK DOWN POINTING TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025BD</td> <td>▽</td> <td>\\bigtriangledown</td> <td>WHITE DOWN-POINTING TRIANGLE / WHITE DOWN POINTING TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+025BE</td> <td>▾</td> <td>\\blacktriangledown</td> <td>BLACK DOWN-POINTING SMALL TRIANGLE / BLACK DOWN POINTING SMALL TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025BF</td> <td>▿</td> <td>\\triangledown</td> <td>WHITE DOWN-POINTING SMALL TRIANGLE / WHITE DOWN POINTING SMALL TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+025C0</td> <td>◀</td> <td>\\blacktriangleleft, \\:arrow_backward:</td> <td>BLACK LEFT-POINTING TRIANGLE / BLACK LEFT POINTING TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025C3</td> <td>◃</td> <td>\\triangleleft</td> <td>WHITE LEFT-POINTING SMALL TRIANGLE / WHITE LEFT POINTING SMALL TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+025C4</td> <td>◄</td> <td>\\blackpointerleft</td> <td>BLACK LEFT-POINTING POINTER / BLACK LEFT POINTING POINTER</td> </tr> <tr class=\"row-odd\">\n<td>U+025C5</td> <td>◅</td> <td>\\whitepointerleft</td> <td>WHITE LEFT-POINTING POINTER / WHITE LEFT POINTING POINTER</td> </tr> <tr class=\"row-even\">\n<td>U+025C6</td> <td>◆</td> <td>\\mdlgblkdiamond</td> <td>BLACK DIAMOND</td> </tr> <tr class=\"row-odd\">\n<td>U+025C7</td> <td>◇</td> <td>\\mdlgwhtdiamond</td> <td>WHITE DIAMOND</td> </tr> <tr class=\"row-even\">\n<td>U+025C8</td> <td>◈</td> <td>\\blackinwhitediamond</td> <td>WHITE DIAMOND CONTAINING BLACK SMALL DIAMOND</td> </tr> <tr class=\"row-odd\">\n<td>U+025C9</td> <td>◉</td> <td>\\fisheye</td> <td>FISHEYE</td> </tr> <tr class=\"row-even\">\n<td>U+025CA</td> <td>◊</td> <td>\\lozenge</td> <td>LOZENGE</td> </tr> <tr class=\"row-odd\">\n<td>U+025CB</td> <td>○</td> <td>\\bigcirc</td> <td>WHITE CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+025CC</td> <td>◌</td> <td>\\dottedcircle</td> <td>DOTTED CIRCLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025CD</td> <td>◍</td> <td>\\circlevertfill</td> <td>CIRCLE WITH VERTICAL FILL</td> </tr> <tr class=\"row-even\">\n<td>U+025CE</td> <td>◎</td> <td>\\bullseye</td> <td>BULLSEYE</td> </tr> <tr class=\"row-odd\">\n<td>U+025CF</td> <td>●</td> <td>\\mdlgblkcircle</td> <td>BLACK CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+025D0</td> <td>◐</td> <td>\\Elzcirfl</td> <td>CIRCLE WITH LEFT HALF BLACK</td> </tr> <tr class=\"row-odd\">\n<td>U+025D1</td> <td>◑</td> <td>\\Elzcirfr</td> <td>CIRCLE WITH RIGHT HALF BLACK</td> </tr> <tr class=\"row-even\">\n<td>U+025D2</td> <td>◒</td> <td>\\Elzcirfb</td> <td>CIRCLE WITH LOWER HALF BLACK</td> </tr> <tr class=\"row-odd\">\n<td>U+025D3</td> <td>◓</td> <td>\\circletophalfblack</td> <td>CIRCLE WITH UPPER HALF BLACK</td> </tr> <tr class=\"row-even\">\n<td>U+025D4</td> <td>◔</td> <td>\\circleurquadblack</td> <td>CIRCLE WITH UPPER RIGHT QUADRANT BLACK</td> </tr> <tr class=\"row-odd\">\n<td>U+025D5</td> <td>◕</td> <td>\\blackcircleulquadwhite</td> <td>CIRCLE WITH ALL BUT UPPER LEFT QUADRANT BLACK</td> </tr> <tr class=\"row-even\">\n<td>U+025D6</td> <td>◖</td> <td>\\blacklefthalfcircle</td> <td>LEFT HALF BLACK CIRCLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025D7</td> <td>◗</td> <td>\\blackrighthalfcircle</td> <td>RIGHT HALF BLACK CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+025D8</td> <td>◘</td> <td>\\Elzrvbull</td> <td>INVERSE BULLET</td> </tr> <tr class=\"row-odd\">\n<td>U+025D9</td> <td>◙</td> <td>\\inversewhitecircle</td> <td>INVERSE WHITE CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+025DA</td> <td>◚</td> <td>\\invwhiteupperhalfcircle</td> <td>UPPER HALF INVERSE WHITE CIRCLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025DB</td> <td>◛</td> <td>\\invwhitelowerhalfcircle</td> <td>LOWER HALF INVERSE WHITE CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+025DC</td> <td>◜</td> <td>\\ularc</td> <td>UPPER LEFT QUADRANT CIRCULAR ARC</td> </tr> <tr class=\"row-odd\">\n<td>U+025DD</td> <td>◝</td> <td>\\urarc</td> <td>UPPER RIGHT QUADRANT CIRCULAR ARC</td> </tr> <tr class=\"row-even\">\n<td>U+025DE</td> <td>◞</td> <td>\\lrarc</td> <td>LOWER RIGHT QUADRANT CIRCULAR ARC</td> </tr> <tr class=\"row-odd\">\n<td>U+025DF</td> <td>◟</td> <td>\\llarc</td> <td>LOWER LEFT QUADRANT CIRCULAR ARC</td> </tr> <tr class=\"row-even\">\n<td>U+025E0</td> <td>◠</td> <td>\\topsemicircle</td> <td>UPPER HALF CIRCLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025E1</td> <td>◡</td> <td>\\botsemicircle</td> <td>LOWER HALF CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+025E2</td> <td>◢</td> <td>\\lrblacktriangle</td> <td>BLACK LOWER RIGHT TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025E3</td> <td>◣</td> <td>\\llblacktriangle</td> <td>BLACK LOWER LEFT TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+025E4</td> <td>◤</td> <td>\\ulblacktriangle</td> <td>BLACK UPPER LEFT TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025E5</td> <td>◥</td> <td>\\urblacktriangle</td> <td>BLACK UPPER RIGHT TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+025E6</td> <td>◦</td> <td>\\smwhtcircle</td> <td>WHITE BULLET</td> </tr> <tr class=\"row-odd\">\n<td>U+025E7</td> <td>◧</td> <td>\\Elzsqfl</td> <td>SQUARE WITH LEFT HALF BLACK</td> </tr> <tr class=\"row-even\">\n<td>U+025E8</td> <td>◨</td> <td>\\Elzsqfr</td> <td>SQUARE WITH RIGHT HALF BLACK</td> </tr> <tr class=\"row-odd\">\n<td>U+025E9</td> <td>◩</td> <td>\\squareulblack</td> <td>SQUARE WITH UPPER LEFT DIAGONAL HALF BLACK</td> </tr> <tr class=\"row-even\">\n<td>U+025EA</td> <td>◪</td> <td>\\Elzsqfse</td> <td>SQUARE WITH LOWER RIGHT DIAGONAL HALF BLACK</td> </tr> <tr class=\"row-odd\">\n<td>U+025EB</td> <td>◫</td> <td>\\boxbar</td> <td>WHITE SQUARE WITH VERTICAL BISECTING LINE</td> </tr> <tr class=\"row-even\">\n<td>U+025EC</td> <td>◬</td> <td>\\trianglecdot</td> <td>WHITE UP-POINTING TRIANGLE WITH DOT / WHITE UP POINTING TRIANGLE WITH DOT</td> </tr> <tr class=\"row-odd\">\n<td>U+025ED</td> <td>◭</td> <td>\\triangleleftblack</td> <td>UP-POINTING TRIANGLE WITH LEFT HALF BLACK / UP POINTING TRIANGLE WITH LEFT HALF BLACK</td> </tr> <tr class=\"row-even\">\n<td>U+025EE</td> <td>◮</td> <td>\\trianglerightblack</td> <td>UP-POINTING TRIANGLE WITH RIGHT HALF BLACK / UP POINTING TRIANGLE WITH RIGHT HALF BLACK</td> </tr> <tr class=\"row-odd\">\n<td>U+025EF</td> <td>◯</td> <td>\\lgwhtcircle</td> <td>LARGE CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+025F0</td> <td>◰</td> <td>\\squareulquad</td> <td>WHITE SQUARE WITH UPPER LEFT QUADRANT</td> </tr> <tr class=\"row-odd\">\n<td>U+025F1</td> <td>◱</td> <td>\\squarellquad</td> <td>WHITE SQUARE WITH LOWER LEFT QUADRANT</td> </tr> <tr class=\"row-even\">\n<td>U+025F2</td> <td>◲</td> <td>\\squarelrquad</td> <td>WHITE SQUARE WITH LOWER RIGHT QUADRANT</td> </tr> <tr class=\"row-odd\">\n<td>U+025F3</td> <td>◳</td> <td>\\squareurquad</td> <td>WHITE SQUARE WITH UPPER RIGHT QUADRANT</td> </tr> <tr class=\"row-even\">\n<td>U+025F4</td> <td>◴</td> <td>\\circleulquad</td> <td>WHITE CIRCLE WITH UPPER LEFT QUADRANT</td> </tr> <tr class=\"row-odd\">\n<td>U+025F5</td> <td>◵</td> <td>\\circlellquad</td> <td>WHITE CIRCLE WITH LOWER LEFT QUADRANT</td> </tr> <tr class=\"row-even\">\n<td>U+025F6</td> <td>◶</td> <td>\\circlelrquad</td> <td>WHITE CIRCLE WITH LOWER RIGHT QUADRANT</td> </tr> <tr class=\"row-odd\">\n<td>U+025F7</td> <td>◷</td> <td>\\circleurquad</td> <td>WHITE CIRCLE WITH UPPER RIGHT QUADRANT</td> </tr> <tr class=\"row-even\">\n<td>U+025F8</td> <td>◸</td> <td>\\ultriangle</td> <td>UPPER LEFT TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025F9</td> <td>◹</td> <td>\\urtriangle</td> <td>UPPER RIGHT TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+025FA</td> <td>◺</td> <td>\\lltriangle</td> <td>LOWER LEFT TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+025FB</td> <td>◻</td> <td>\\mdwhtsquare, \\:white_medium_square:</td> <td>WHITE MEDIUM SQUARE</td> </tr> <tr class=\"row-even\">\n<td>U+025FC</td> <td>◼</td> <td>\\mdblksquare, \\:black_medium_square:</td> <td>BLACK MEDIUM SQUARE</td> </tr> <tr class=\"row-odd\">\n<td>U+025FD</td> <td>◽</td> <td>\\mdsmwhtsquare, \\:white_medium_small_square:</td> <td>WHITE MEDIUM SMALL SQUARE</td> </tr> <tr class=\"row-even\">\n<td>U+025FE</td> <td>◾</td> <td>\\mdsmblksquare, \\:black_medium_small_square:</td> <td>BLACK MEDIUM SMALL SQUARE</td> </tr> <tr class=\"row-odd\">\n<td>U+025FF</td> <td>◿</td> <td>\\lrtriangle</td> <td>LOWER RIGHT TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+02600</td> <td>☀</td> <td>\\:sunny:</td> <td>BLACK SUN WITH RAYS</td> </tr> <tr class=\"row-odd\">\n<td>U+02601</td> <td>☁</td> <td>\\:cloud:</td> <td>CLOUD</td> </tr> <tr class=\"row-even\">\n<td>U+02605</td> <td>★</td> <td>\\bigstar</td> <td>BLACK STAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02606</td> <td>☆</td> <td>\\bigwhitestar</td> <td>WHITE STAR</td> </tr> <tr class=\"row-even\">\n<td>U+02609</td> <td>☉</td> <td>\\astrosun</td> <td>SUN</td> </tr> <tr class=\"row-odd\">\n<td>U+0260E</td> <td>☎</td> <td>\\:phone:</td> <td>BLACK TELEPHONE</td> </tr> <tr class=\"row-even\">\n<td>U+02611</td> <td>☑</td> <td>\\:ballot_box_with_check:</td> <td>BALLOT BOX WITH CHECK</td> </tr> <tr class=\"row-odd\">\n<td>U+02614</td> <td>☔</td> <td>\\:umbrella:</td> <td>UMBRELLA WITH RAIN DROPS</td> </tr> <tr class=\"row-even\">\n<td>U+02615</td> <td>☕</td> <td>\\:coffee:</td> <td>HOT BEVERAGE</td> </tr> <tr class=\"row-odd\">\n<td>U+0261D</td> <td>☝</td> <td>\\:point_up:</td> <td>WHITE UP POINTING INDEX</td> </tr> <tr class=\"row-even\">\n<td>U+02621</td> <td>☡</td> <td>\\danger</td> <td>CAUTION SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+0263A</td> <td>☺</td> <td>\\:relaxed:</td> <td>WHITE SMILING FACE</td> </tr> <tr class=\"row-even\">\n<td>U+0263B</td> <td>☻</td> <td>\\blacksmiley</td> <td>BLACK SMILING FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+0263C</td> <td>☼</td> <td>\\sun</td> <td>WHITE SUN WITH RAYS</td> </tr> <tr class=\"row-even\">\n<td>U+0263D</td> <td>☽</td> <td>\\rightmoon</td> <td>FIRST QUARTER MOON</td> </tr> <tr class=\"row-odd\">\n<td>U+0263F</td> <td>☿</td> <td>\\mercury</td> <td>MERCURY</td> </tr> <tr class=\"row-even\">\n<td>U+02640</td> <td>♀</td> <td>\\venus, \\female</td> <td>FEMALE SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02642</td> <td>♂</td> <td>\\male, \\mars</td> <td>MALE SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+02643</td> <td>♃</td> <td>\\jupiter</td> <td>JUPITER</td> </tr> <tr class=\"row-odd\">\n<td>U+02644</td> <td>♄</td> <td>\\saturn</td> <td>SATURN</td> </tr> <tr class=\"row-even\">\n<td>U+02645</td> <td>♅</td> <td>\\uranus</td> <td>URANUS</td> </tr> <tr class=\"row-odd\">\n<td>U+02646</td> <td>♆</td> <td>\\neptune</td> <td>NEPTUNE</td> </tr> <tr class=\"row-even\">\n<td>U+02647</td> <td>♇</td> <td>\\pluto</td> <td>PLUTO</td> </tr> <tr class=\"row-odd\">\n<td>U+02648</td> <td>♈</td> <td>\\aries, \\:aries:</td> <td>ARIES</td> </tr> <tr class=\"row-even\">\n<td>U+02649</td> <td>♉</td> <td>\\taurus, \\:taurus:</td> <td>TAURUS</td> </tr> <tr class=\"row-odd\">\n<td>U+0264A</td> <td>♊</td> <td>\\gemini, \\:gemini:</td> <td>GEMINI</td> </tr> <tr class=\"row-even\">\n<td>U+0264B</td> <td>♋</td> <td>\\cancer, \\:cancer:</td> <td>CANCER</td> </tr> <tr class=\"row-odd\">\n<td>U+0264C</td> <td>♌</td> <td>\\leo, \\:leo:</td> <td>LEO</td> </tr> <tr class=\"row-even\">\n<td>U+0264D</td> <td>♍</td> <td>\\virgo, \\:virgo:</td> <td>VIRGO</td> </tr> <tr class=\"row-odd\">\n<td>U+0264E</td> <td>♎</td> <td>\\libra, \\:libra:</td> <td>LIBRA</td> </tr> <tr class=\"row-even\">\n<td>U+0264F</td> <td>♏</td> <td>\\scorpio, \\:scorpius:</td> <td>SCORPIUS</td> </tr> <tr class=\"row-odd\">\n<td>U+02650</td> <td>♐</td> <td>\\sagittarius, \\:sagittarius:</td> <td>SAGITTARIUS</td> </tr> <tr class=\"row-even\">\n<td>U+02651</td> <td>♑</td> <td>\\capricornus, \\:capricorn:</td> <td>CAPRICORN</td> </tr> <tr class=\"row-odd\">\n<td>U+02652</td> <td>♒</td> <td>\\aquarius, \\:aquarius:</td> <td>AQUARIUS</td> </tr> <tr class=\"row-even\">\n<td>U+02653</td> <td>♓</td> <td>\\pisces, \\:pisces:</td> <td>PISCES</td> </tr> <tr class=\"row-odd\">\n<td>U+02660</td> <td>♠</td> <td>\\spadesuit, \\:spades:</td> <td>BLACK SPADE SUIT</td> </tr> <tr class=\"row-even\">\n<td>U+02661</td> <td>♡</td> <td>\\heartsuit</td> <td>WHITE HEART SUIT</td> </tr> <tr class=\"row-odd\">\n<td>U+02662</td> <td>♢</td> <td>\\diamondsuit</td> <td>WHITE DIAMOND SUIT</td> </tr> <tr class=\"row-even\">\n<td>U+02663</td> <td>♣</td> <td>\\clubsuit, \\:clubs:</td> <td>BLACK CLUB SUIT</td> </tr> <tr class=\"row-odd\">\n<td>U+02664</td> <td>♤</td> <td>\\varspadesuit</td> <td>WHITE SPADE SUIT</td> </tr> <tr class=\"row-even\">\n<td>U+02665</td> <td>♥</td> <td>\\varheartsuit, \\:hearts:</td> <td>BLACK HEART SUIT</td> </tr> <tr class=\"row-odd\">\n<td>U+02666</td> <td>♦</td> <td>\\vardiamondsuit, \\:diamonds:</td> <td>BLACK DIAMOND SUIT</td> </tr> <tr class=\"row-even\">\n<td>U+02667</td> <td>♧</td> <td>\\varclubsuit</td> <td>WHITE CLUB SUIT</td> </tr> <tr class=\"row-odd\">\n<td>U+02668</td> <td>♨</td> <td>\\:hotsprings:</td> <td>HOT SPRINGS</td> </tr> <tr class=\"row-even\">\n<td>U+02669</td> <td>♩</td> <td>\\quarternote</td> <td>QUARTER NOTE</td> </tr> <tr class=\"row-odd\">\n<td>U+0266A</td> <td>♪</td> <td>\\eighthnote</td> <td>EIGHTH NOTE</td> </tr> <tr class=\"row-even\">\n<td>U+0266B</td> <td>♫</td> <td>\\twonotes</td> <td>BEAMED EIGHTH NOTES / BARRED EIGHTH NOTES</td> </tr> <tr class=\"row-odd\">\n<td>U+0266D</td> <td>♭</td> <td>\\flat</td> <td>MUSIC FLAT SIGN / FLAT</td> </tr> <tr class=\"row-even\">\n<td>U+0266E</td> <td>♮</td> <td>\\natural</td> <td>MUSIC NATURAL SIGN / NATURAL</td> </tr> <tr class=\"row-odd\">\n<td>U+0266F</td> <td>♯</td> <td>\\sharp</td> <td>MUSIC SHARP SIGN / SHARP</td> </tr> <tr class=\"row-even\">\n<td>U+0267B</td> <td>♻</td> <td>\\:recycle:</td> <td>BLACK UNIVERSAL RECYCLING SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+0267E</td> <td>♾</td> <td>\\acidfree</td> <td>PERMANENT PAPER SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+0267F</td> <td>♿</td> <td>\\:wheelchair:</td> <td>WHEELCHAIR SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+02680</td> <td>⚀</td> <td>\\dicei</td> <td>DIE FACE-1</td> </tr> <tr class=\"row-even\">\n<td>U+02681</td> <td>⚁</td> <td>\\diceii</td> <td>DIE FACE-2</td> </tr> <tr class=\"row-odd\">\n<td>U+02682</td> <td>⚂</td> <td>\\diceiii</td> <td>DIE FACE-3</td> </tr> <tr class=\"row-even\">\n<td>U+02683</td> <td>⚃</td> <td>\\diceiv</td> <td>DIE FACE-4</td> </tr> <tr class=\"row-odd\">\n<td>U+02684</td> <td>⚄</td> <td>\\dicev</td> <td>DIE FACE-5</td> </tr> <tr class=\"row-even\">\n<td>U+02685</td> <td>⚅</td> <td>\\dicevi</td> <td>DIE FACE-6</td> </tr> <tr class=\"row-odd\">\n<td>U+02686</td> <td>⚆</td> <td>\\circledrightdot</td> <td>WHITE CIRCLE WITH DOT RIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+02687</td> <td>⚇</td> <td>\\circledtwodots</td> <td>WHITE CIRCLE WITH TWO DOTS</td> </tr> <tr class=\"row-odd\">\n<td>U+02688</td> <td>⚈</td> <td>\\blackcircledrightdot</td> <td>BLACK CIRCLE WITH WHITE DOT RIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+02689</td> <td>⚉</td> <td>\\blackcircledtwodots</td> <td>BLACK CIRCLE WITH TWO WHITE DOTS</td> </tr> <tr class=\"row-odd\">\n<td>U+02693</td> <td>⚓</td> <td>\\:anchor:</td> <td>ANCHOR</td> </tr> <tr class=\"row-even\">\n<td>U+026A0</td> <td>⚠</td> <td>\\:warning:</td> <td>WARNING SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+026A1</td> <td>⚡</td> <td>\\:zap:</td> <td>HIGH VOLTAGE SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+026A5</td> <td>⚥</td> <td>\\Hermaphrodite</td> <td>MALE AND FEMALE SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+026AA</td> <td>⚪</td> <td>\\mdwhtcircle, \\:white_circle:</td> <td>MEDIUM WHITE CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+026AB</td> <td>⚫</td> <td>\\mdblkcircle, \\:black_circle:</td> <td>MEDIUM BLACK CIRCLE</td> </tr> <tr class=\"row-odd\">\n<td>U+026AC</td> <td>⚬</td> <td>\\mdsmwhtcircle</td> <td>MEDIUM SMALL WHITE CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+026B2</td> <td>⚲</td> <td>\\neuter</td> <td>NEUTER</td> </tr> <tr class=\"row-odd\">\n<td>U+026BD</td> <td>⚽</td> <td>\\:soccer:</td> <td>SOCCER BALL</td> </tr> <tr class=\"row-even\">\n<td>U+026BE</td> <td>⚾</td> <td>\\:baseball:</td> <td>BASEBALL</td> </tr> <tr class=\"row-odd\">\n<td>U+026C4</td> <td>⛄</td> <td>\\:snowman:</td> <td>SNOWMAN WITHOUT SNOW</td> </tr> <tr class=\"row-even\">\n<td>U+026C5</td> <td>⛅</td> <td>\\:partly_sunny:</td> <td>SUN BEHIND CLOUD</td> </tr> <tr class=\"row-odd\">\n<td>U+026CE</td> <td>⛎</td> <td>\\:ophiuchus:</td> <td>OPHIUCHUS</td> </tr> <tr class=\"row-even\">\n<td>U+026D4</td> <td>⛔</td> <td>\\:no_entry:</td> <td>NO ENTRY</td> </tr> <tr class=\"row-odd\">\n<td>U+026EA</td> <td>⛪</td> <td>\\:church:</td> <td>CHURCH</td> </tr> <tr class=\"row-even\">\n<td>U+026F2</td> <td>⛲</td> <td>\\:fountain:</td> <td>FOUNTAIN</td> </tr> <tr class=\"row-odd\">\n<td>U+026F3</td> <td>⛳</td> <td>\\:golf:</td> <td>FLAG IN HOLE</td> </tr> <tr class=\"row-even\">\n<td>U+026F5</td> <td>⛵</td> <td>\\:boat:</td> <td>SAILBOAT</td> </tr> <tr class=\"row-odd\">\n<td>U+026FA</td> <td>⛺</td> <td>\\:tent:</td> <td>TENT</td> </tr> <tr class=\"row-even\">\n<td>U+026FD</td> <td>⛽</td> <td>\\:fuelpump:</td> <td>FUEL PUMP</td> </tr> <tr class=\"row-odd\">\n<td>U+02702</td> <td>✂</td> <td>\\:scissors:</td> <td>BLACK SCISSORS</td> </tr> <tr class=\"row-even\">\n<td>U+02705</td> <td>✅</td> <td>\\:white_check_mark:</td> <td>WHITE HEAVY CHECK MARK</td> </tr> <tr class=\"row-odd\">\n<td>U+02708</td> <td>✈</td> <td>\\:airplane:</td> <td>AIRPLANE</td> </tr> <tr class=\"row-even\">\n<td>U+02709</td> <td>✉</td> <td>\\:email:</td> <td>ENVELOPE</td> </tr> <tr class=\"row-odd\">\n<td>U+0270A</td> <td>✊</td> <td>\\:fist:</td> <td>RAISED FIST</td> </tr> <tr class=\"row-even\">\n<td>U+0270B</td> <td>✋</td> <td>\\:hand:</td> <td>RAISED HAND</td> </tr> <tr class=\"row-odd\">\n<td>U+0270C</td> <td>✌</td> <td>\\:v:</td> <td>VICTORY HAND</td> </tr> <tr class=\"row-even\">\n<td>U+0270F</td> <td>✏</td> <td>\\:pencil2:</td> <td>PENCIL</td> </tr> <tr class=\"row-odd\">\n<td>U+02712</td> <td>✒</td> <td>\\:black_nib:</td> <td>BLACK NIB</td> </tr> <tr class=\"row-even\">\n<td>U+02713</td> <td>✓</td> <td>\\checkmark</td> <td>CHECK MARK</td> </tr> <tr class=\"row-odd\">\n<td>U+02714</td> <td>✔</td> <td>\\:heavy_check_mark:</td> <td>HEAVY CHECK MARK</td> </tr> <tr class=\"row-even\">\n<td>U+02716</td> <td>✖</td> <td>\\:heavy_multiplication_x:</td> <td>HEAVY MULTIPLICATION X</td> </tr> <tr class=\"row-odd\">\n<td>U+02720</td> <td>✠</td> <td>\\maltese</td> <td>MALTESE CROSS</td> </tr> <tr class=\"row-even\">\n<td>U+02728</td> <td>✨</td> <td>\\:sparkles:</td> <td>SPARKLES</td> </tr> <tr class=\"row-odd\">\n<td>U+0272A</td> <td>✪</td> <td>\\circledstar</td> <td>CIRCLED WHITE STAR</td> </tr> <tr class=\"row-even\">\n<td>U+02733</td> <td>✳</td> <td>\\:eight_spoked_asterisk:</td> <td>EIGHT SPOKED ASTERISK</td> </tr> <tr class=\"row-odd\">\n<td>U+02734</td> <td>✴</td> <td>\\:eight_pointed_black_star:</td> <td>EIGHT POINTED BLACK STAR</td> </tr> <tr class=\"row-even\">\n<td>U+02736</td> <td>✶</td> <td>\\varstar</td> <td>SIX POINTED BLACK STAR</td> </tr> <tr class=\"row-odd\">\n<td>U+0273D</td> <td>✽</td> <td>\\dingasterisk</td> <td>HEAVY TEARDROP-SPOKED ASTERISK</td> </tr> <tr class=\"row-even\">\n<td>U+02744</td> <td>❄</td> <td>\\:snowflake:</td> <td>SNOWFLAKE</td> </tr> <tr class=\"row-odd\">\n<td>U+02747</td> <td>❇</td> <td>\\:sparkle:</td> <td>SPARKLE</td> </tr> <tr class=\"row-even\">\n<td>U+0274C</td> <td>❌</td> <td>\\:x:</td> <td>CROSS MARK</td> </tr> <tr class=\"row-odd\">\n<td>U+0274E</td> <td>❎</td> <td>\\:negative_squared_cross_mark:</td> <td>NEGATIVE SQUARED CROSS MARK</td> </tr> <tr class=\"row-even\">\n<td>U+02753</td> <td>❓</td> <td>\\:question:</td> <td>BLACK QUESTION MARK ORNAMENT</td> </tr> <tr class=\"row-odd\">\n<td>U+02754</td> <td>❔</td> <td>\\:grey_question:</td> <td>WHITE QUESTION MARK ORNAMENT</td> </tr> <tr class=\"row-even\">\n<td>U+02755</td> <td>❕</td> <td>\\:grey_exclamation:</td> <td>WHITE EXCLAMATION MARK ORNAMENT</td> </tr> <tr class=\"row-odd\">\n<td>U+02757</td> <td>❗</td> <td>\\:exclamation:</td> <td>HEAVY EXCLAMATION MARK SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+02764</td> <td>❤</td> <td>\\:heart:</td> <td>HEAVY BLACK HEART</td> </tr> <tr class=\"row-odd\">\n<td>U+02795</td> <td>➕</td> <td>\\:heavy_plus_sign:</td> <td>HEAVY PLUS SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+02796</td> <td>➖</td> <td>\\:heavy_minus_sign:</td> <td>HEAVY MINUS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02797</td> <td>➗</td> <td>\\:heavy_division_sign:</td> <td>HEAVY DIVISION SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+0279B</td> <td>➛</td> <td>\\draftingarrow</td> <td>DRAFTING POINT RIGHTWARDS ARROW / DRAFTING POINT RIGHT ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+027A1</td> <td>➡</td> <td>\\:arrow_right:</td> <td>BLACK RIGHTWARDS ARROW / BLACK RIGHT ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+027B0</td> <td>➰</td> <td>\\:curly_loop:</td> <td>CURLY LOOP</td> </tr> <tr class=\"row-odd\">\n<td>U+027BF</td> <td>➿</td> <td>\\:loop:</td> <td>DOUBLE CURLY LOOP</td> </tr> <tr class=\"row-even\">\n<td>U+027C0</td> <td>⟀</td> <td>\\threedangle</td> <td>THREE DIMENSIONAL ANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+027C1</td> <td>⟁</td> <td>\\whiteinwhitetriangle</td> <td>WHITE TRIANGLE CONTAINING SMALL WHITE TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+027C2</td> <td>⟂</td> <td>\\perp</td> <td>PERPENDICULAR</td> </tr> <tr class=\"row-odd\">\n<td>U+027C8</td> <td>⟈</td> <td>\\bsolhsub</td> <td>REVERSE SOLIDUS PRECEDING SUBSET</td> </tr> <tr class=\"row-even\">\n<td>U+027C9</td> <td>⟉</td> <td>\\suphsol</td> <td>SUPERSET PRECEDING SOLIDUS</td> </tr> <tr class=\"row-odd\">\n<td>U+027D1</td> <td>⟑</td> <td>\\wedgedot</td> <td>AND WITH DOT</td> </tr> <tr class=\"row-even\">\n<td>U+027D2</td> <td>⟒</td> <td>\\upin</td> <td>ELEMENT OF OPENING UPWARDS</td> </tr> <tr class=\"row-odd\">\n<td>U+027D8</td> <td>⟘</td> <td>\\bigbot</td> <td>LARGE UP TACK</td> </tr> <tr class=\"row-even\">\n<td>U+027D9</td> <td>⟙</td> <td>\\bigtop</td> <td>LARGE DOWN TACK</td> </tr> <tr class=\"row-odd\">\n<td>U+027E6</td> <td>⟦</td> <td>\\llbracket, \\openbracketleft</td> <td>MATHEMATICAL LEFT WHITE SQUARE BRACKET</td> </tr> <tr class=\"row-even\">\n<td>U+027E7</td> <td>⟧</td> <td>\\openbracketright, \\rrbracket</td> <td>MATHEMATICAL RIGHT WHITE SQUARE BRACKET</td> </tr> <tr class=\"row-odd\">\n<td>U+027E8</td> <td>⟨</td> <td>\\langle</td> <td>MATHEMATICAL LEFT ANGLE BRACKET</td> </tr> <tr class=\"row-even\">\n<td>U+027E9</td> <td>⟩</td> <td>\\rangle</td> <td>MATHEMATICAL RIGHT ANGLE BRACKET</td> </tr> <tr class=\"row-odd\">\n<td>U+027F0</td> <td>⟰</td> <td>\\UUparrow</td> <td>UPWARDS QUADRUPLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+027F1</td> <td>⟱</td> <td>\\DDownarrow</td> <td>DOWNWARDS QUADRUPLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+027F5</td> <td>⟵</td> <td>\\longleftarrow</td> <td>LONG LEFTWARDS ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+027F6</td> <td>⟶</td> <td>\\longrightarrow</td> <td>LONG RIGHTWARDS ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+027F7</td> <td>⟷</td> <td>\\longleftrightarrow</td> <td>LONG LEFT RIGHT ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+027F8</td> <td>⟸</td> <td>\\Longleftarrow</td> <td>LONG LEFTWARDS DOUBLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+027F9</td> <td>⟹</td> <td>\\Longrightarrow</td> <td>LONG RIGHTWARDS DOUBLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+027FA</td> <td>⟺</td> <td>\\Longleftrightarrow</td> <td>LONG LEFT RIGHT DOUBLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+027FB</td> <td>⟻</td> <td>\\longmapsfrom</td> <td>LONG LEFTWARDS ARROW FROM BAR</td> </tr> <tr class=\"row-even\">\n<td>U+027FC</td> <td>⟼</td> <td>\\longmapsto</td> <td>LONG RIGHTWARDS ARROW FROM BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+027FD</td> <td>⟽</td> <td>\\Longmapsfrom</td> <td>LONG LEFTWARDS DOUBLE ARROW FROM BAR</td> </tr> <tr class=\"row-even\">\n<td>U+027FE</td> <td>⟾</td> <td>\\Longmapsto</td> <td>LONG RIGHTWARDS DOUBLE ARROW FROM BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+027FF</td> <td>⟿</td> <td>\\longrightsquigarrow</td> <td>LONG RIGHTWARDS SQUIGGLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02900</td> <td>⤀</td> <td>\\nvtwoheadrightarrow</td> <td>RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+02901</td> <td>⤁</td> <td>\\nVtwoheadrightarrow</td> <td>RIGHTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+02902</td> <td>⤂</td> <td>\\nvLeftarrow</td> <td>LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+02903</td> <td>⤃</td> <td>\\nvRightarrow</td> <td>RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+02904</td> <td>⤄</td> <td>\\nvLeftrightarrow</td> <td>LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+02905</td> <td>⤅</td> <td>\\twoheadmapsto</td> <td>RIGHTWARDS TWO-HEADED ARROW FROM BAR</td> </tr> <tr class=\"row-even\">\n<td>U+02906</td> <td>⤆</td> <td>\\Mapsfrom</td> <td>LEFTWARDS DOUBLE ARROW FROM BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02907</td> <td>⤇</td> <td>\\Mapsto</td> <td>RIGHTWARDS DOUBLE ARROW FROM BAR</td> </tr> <tr class=\"row-even\">\n<td>U+02908</td> <td>⤈</td> <td>\\downarrowbarred</td> <td>DOWNWARDS ARROW WITH HORIZONTAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+02909</td> <td>⤉</td> <td>\\uparrowbarred</td> <td>UPWARDS ARROW WITH HORIZONTAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+0290A</td> <td>⤊</td> <td>\\Uuparrow</td> <td>UPWARDS TRIPLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+0290B</td> <td>⤋</td> <td>\\Ddownarrow</td> <td>DOWNWARDS TRIPLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+0290C</td> <td>⤌</td> <td>\\leftbkarrow</td> <td>LEFTWARDS DOUBLE DASH ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+0290D</td> <td>⤍</td> <td>\\bkarow</td> <td>RIGHTWARDS DOUBLE DASH ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+0290E</td> <td>⤎</td> <td>\\leftdbkarrow</td> <td>LEFTWARDS TRIPLE DASH ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+0290F</td> <td>⤏</td> <td>\\dbkarow</td> <td>RIGHTWARDS TRIPLE DASH ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02910</td> <td>⤐</td> <td>\\drbkarrow</td> <td>RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02911</td> <td>⤑</td> <td>\\rightdotarrow</td> <td>RIGHTWARDS ARROW WITH DOTTED STEM</td> </tr> <tr class=\"row-even\">\n<td>U+02912</td> <td>⤒</td> <td>\\UpArrowBar</td> <td>UPWARDS ARROW TO BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02913</td> <td>⤓</td> <td>\\DownArrowBar</td> <td>DOWNWARDS ARROW TO BAR</td> </tr> <tr class=\"row-even\">\n<td>U+02914</td> <td>⤔</td> <td>\\nvrightarrowtail</td> <td>RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+02915</td> <td>⤕</td> <td>\\nVrightarrowtail</td> <td>RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+02916</td> <td>⤖</td> <td>\\twoheadrightarrowtail</td> <td>RIGHTWARDS TWO-HEADED ARROW WITH TAIL</td> </tr> <tr class=\"row-odd\">\n<td>U+02917</td> <td>⤗</td> <td>\\nvtwoheadrightarrowtail</td> <td>RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+02918</td> <td>⤘</td> <td>\\nVtwoheadrightarrowtail</td> <td>RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+0291D</td> <td>⤝</td> <td>\\diamondleftarrow</td> <td>LEFTWARDS ARROW TO BLACK DIAMOND</td> </tr> <tr class=\"row-even\">\n<td>U+0291E</td> <td>⤞</td> <td>\\rightarrowdiamond</td> <td>RIGHTWARDS ARROW TO BLACK DIAMOND</td> </tr> <tr class=\"row-odd\">\n<td>U+0291F</td> <td>⤟</td> <td>\\diamondleftarrowbar</td> <td>LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND</td> </tr> <tr class=\"row-even\">\n<td>U+02920</td> <td>⤠</td> <td>\\barrightarrowdiamond</td> <td>RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND</td> </tr> <tr class=\"row-odd\">\n<td>U+02925</td> <td>⤥</td> <td>\\hksearow</td> <td>SOUTH EAST ARROW WITH HOOK</td> </tr> <tr class=\"row-even\">\n<td>U+02926</td> <td>⤦</td> <td>\\hkswarow</td> <td>SOUTH WEST ARROW WITH HOOK</td> </tr> <tr class=\"row-odd\">\n<td>U+02927</td> <td>⤧</td> <td>\\tona</td> <td>NORTH WEST ARROW AND NORTH EAST ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02928</td> <td>⤨</td> <td>\\toea</td> <td>NORTH EAST ARROW AND SOUTH EAST ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02929</td> <td>⤩</td> <td>\\tosa</td> <td>SOUTH EAST ARROW AND SOUTH WEST ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+0292A</td> <td>⤪</td> <td>\\towa</td> <td>SOUTH WEST ARROW AND NORTH WEST ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+0292B</td> <td>⤫</td> <td>\\rdiagovfdiag</td> <td>RISING DIAGONAL CROSSING FALLING DIAGONAL</td> </tr> <tr class=\"row-even\">\n<td>U+0292C</td> <td>⤬</td> <td>\\fdiagovrdiag</td> <td>FALLING DIAGONAL CROSSING RISING DIAGONAL</td> </tr> <tr class=\"row-odd\">\n<td>U+0292D</td> <td>⤭</td> <td>\\seovnearrow</td> <td>SOUTH EAST ARROW CROSSING NORTH EAST ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+0292E</td> <td>⤮</td> <td>\\neovsearrow</td> <td>NORTH EAST ARROW CROSSING SOUTH EAST ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+0292F</td> <td>⤯</td> <td>\\fdiagovnearrow</td> <td>FALLING DIAGONAL CROSSING NORTH EAST ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02930</td> <td>⤰</td> <td>\\rdiagovsearrow</td> <td>RISING DIAGONAL CROSSING SOUTH EAST ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02931</td> <td>⤱</td> <td>\\neovnwarrow</td> <td>NORTH EAST ARROW CROSSING NORTH WEST ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02932</td> <td>⤲</td> <td>\\nwovnearrow</td> <td>NORTH WEST ARROW CROSSING NORTH EAST ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02934</td> <td>⤴</td> <td>\\:arrow_heading_up:</td> <td>ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS</td> </tr> <tr class=\"row-even\">\n<td>U+02935</td> <td>⤵</td> <td>\\:arrow_heading_down:</td> <td>ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS</td> </tr> <tr class=\"row-odd\">\n<td>U+02942</td> <td>⥂</td> <td>\\ElzRlarr</td> <td>RIGHTWARDS ARROW ABOVE SHORT LEFTWARDS ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02944</td> <td>⥄</td> <td>\\ElzrLarr</td> <td>SHORT RIGHTWARDS ARROW ABOVE LEFTWARDS ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02945</td> <td>⥅</td> <td>\\rightarrowplus</td> <td>RIGHTWARDS ARROW WITH PLUS BELOW</td> </tr> <tr class=\"row-even\">\n<td>U+02946</td> <td>⥆</td> <td>\\leftarrowplus</td> <td>LEFTWARDS ARROW WITH PLUS BELOW</td> </tr> <tr class=\"row-odd\">\n<td>U+02947</td> <td>⥇</td> <td>\\Elzrarrx</td> <td>RIGHTWARDS ARROW THROUGH X</td> </tr> <tr class=\"row-even\">\n<td>U+02948</td> <td>⥈</td> <td>\\leftrightarrowcircle</td> <td>LEFT RIGHT ARROW THROUGH SMALL CIRCLE</td> </tr> <tr class=\"row-odd\">\n<td>U+02949</td> <td>⥉</td> <td>\\twoheaduparrowcircle</td> <td>UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+0294A</td> <td>⥊</td> <td>\\leftrightharpoonupdown</td> <td>LEFT BARB UP RIGHT BARB DOWN HARPOON</td> </tr> <tr class=\"row-odd\">\n<td>U+0294B</td> <td>⥋</td> <td>\\leftrightharpoondownup</td> <td>LEFT BARB DOWN RIGHT BARB UP HARPOON</td> </tr> <tr class=\"row-even\">\n<td>U+0294C</td> <td>⥌</td> <td>\\updownharpoonrightleft</td> <td>UP BARB RIGHT DOWN BARB LEFT HARPOON</td> </tr> <tr class=\"row-odd\">\n<td>U+0294D</td> <td>⥍</td> <td>\\updownharpoonleftright</td> <td>UP BARB LEFT DOWN BARB RIGHT HARPOON</td> </tr> <tr class=\"row-even\">\n<td>U+0294E</td> <td>⥎</td> <td>\\LeftRightVector</td> <td>LEFT BARB UP RIGHT BARB UP HARPOON</td> </tr> <tr class=\"row-odd\">\n<td>U+0294F</td> <td>⥏</td> <td>\\RightUpDownVector</td> <td>UP BARB RIGHT DOWN BARB RIGHT HARPOON</td> </tr> <tr class=\"row-even\">\n<td>U+02950</td> <td>⥐</td> <td>\\DownLeftRightVector</td> <td>LEFT BARB DOWN RIGHT BARB DOWN HARPOON</td> </tr> <tr class=\"row-odd\">\n<td>U+02951</td> <td>⥑</td> <td>\\LeftUpDownVector</td> <td>UP BARB LEFT DOWN BARB LEFT HARPOON</td> </tr> <tr class=\"row-even\">\n<td>U+02952</td> <td>⥒</td> <td>\\LeftVectorBar</td> <td>LEFTWARDS HARPOON WITH BARB UP TO BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02953</td> <td>⥓</td> <td>\\RightVectorBar</td> <td>RIGHTWARDS HARPOON WITH BARB UP TO BAR</td> </tr> <tr class=\"row-even\">\n<td>U+02954</td> <td>⥔</td> <td>\\RightUpVectorBar</td> <td>UPWARDS HARPOON WITH BARB RIGHT TO BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02955</td> <td>⥕</td> <td>\\RightDownVectorBar</td> <td>DOWNWARDS HARPOON WITH BARB RIGHT TO BAR</td> </tr> <tr class=\"row-even\">\n<td>U+02956</td> <td>⥖</td> <td>\\DownLeftVectorBar</td> <td>LEFTWARDS HARPOON WITH BARB DOWN TO BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02957</td> <td>⥗</td> <td>\\DownRightVectorBar</td> <td>RIGHTWARDS HARPOON WITH BARB DOWN TO BAR</td> </tr> <tr class=\"row-even\">\n<td>U+02958</td> <td>⥘</td> <td>\\LeftUpVectorBar</td> <td>UPWARDS HARPOON WITH BARB LEFT TO BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02959</td> <td>⥙</td> <td>\\LeftDownVectorBar</td> <td>DOWNWARDS HARPOON WITH BARB LEFT TO BAR</td> </tr> <tr class=\"row-even\">\n<td>U+0295A</td> <td>⥚</td> <td>\\LeftTeeVector</td> <td>LEFTWARDS HARPOON WITH BARB UP FROM BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+0295B</td> <td>⥛</td> <td>\\RightTeeVector</td> <td>RIGHTWARDS HARPOON WITH BARB UP FROM BAR</td> </tr> <tr class=\"row-even\">\n<td>U+0295C</td> <td>⥜</td> <td>\\RightUpTeeVector</td> <td>UPWARDS HARPOON WITH BARB RIGHT FROM BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+0295D</td> <td>⥝</td> <td>\\RightDownTeeVector</td> <td>DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR</td> </tr> <tr class=\"row-even\">\n<td>U+0295E</td> <td>⥞</td> <td>\\DownLeftTeeVector</td> <td>LEFTWARDS HARPOON WITH BARB DOWN FROM BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+0295F</td> <td>⥟</td> <td>\\DownRightTeeVector</td> <td>RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR</td> </tr> <tr class=\"row-even\">\n<td>U+02960</td> <td>⥠</td> <td>\\LeftUpTeeVector</td> <td>UPWARDS HARPOON WITH BARB LEFT FROM BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02961</td> <td>⥡</td> <td>\\LeftDownTeeVector</td> <td>DOWNWARDS HARPOON WITH BARB LEFT FROM BAR</td> </tr> <tr class=\"row-even\">\n<td>U+02962</td> <td>⥢</td> <td>\\leftharpoonsupdown</td> <td>LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN</td> </tr> <tr class=\"row-odd\">\n<td>U+02963</td> <td>⥣</td> <td>\\upharpoonsleftright</td> <td>UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+02964</td> <td>⥤</td> <td>\\rightharpoonsupdown</td> <td>RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN</td> </tr> <tr class=\"row-odd\">\n<td>U+02965</td> <td>⥥</td> <td>\\downharpoonsleftright</td> <td>DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+02966</td> <td>⥦</td> <td>\\leftrightharpoonsup</td> <td>LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP</td> </tr> <tr class=\"row-odd\">\n<td>U+02967</td> <td>⥧</td> <td>\\leftrightharpoonsdown</td> <td>LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN</td> </tr> <tr class=\"row-even\">\n<td>U+02968</td> <td>⥨</td> <td>\\rightleftharpoonsup</td> <td>RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP</td> </tr> <tr class=\"row-odd\">\n<td>U+02969</td> <td>⥩</td> <td>\\rightleftharpoonsdown</td> <td>RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN</td> </tr> <tr class=\"row-even\">\n<td>U+0296A</td> <td>⥪</td> <td>\\leftharpoonupdash</td> <td>LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH</td> </tr> <tr class=\"row-odd\">\n<td>U+0296B</td> <td>⥫</td> <td>\\dashleftharpoondown</td> <td>LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH</td> </tr> <tr class=\"row-even\">\n<td>U+0296C</td> <td>⥬</td> <td>\\rightharpoonupdash</td> <td>RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH</td> </tr> <tr class=\"row-odd\">\n<td>U+0296D</td> <td>⥭</td> <td>\\dashrightharpoondown</td> <td>RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH</td> </tr> <tr class=\"row-even\">\n<td>U+0296E</td> <td>⥮</td> <td>\\UpEquilibrium</td> <td>UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT</td> </tr> <tr class=\"row-odd\">\n<td>U+0296F</td> <td>⥯</td> <td>\\ReverseUpEquilibrium</td> <td>DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+02970</td> <td>⥰</td> <td>\\RoundImplies</td> <td>RIGHT DOUBLE ARROW WITH ROUNDED HEAD</td> </tr> <tr class=\"row-odd\">\n<td>U+02980</td> <td>⦀</td> <td>\\Vvert</td> <td>TRIPLE VERTICAL BAR DELIMITER</td> </tr> <tr class=\"row-even\">\n<td>U+02986</td> <td>⦆</td> <td>\\Elroang</td> <td>RIGHT WHITE PARENTHESIS</td> </tr> <tr class=\"row-odd\">\n<td>U+02999</td> <td>⦙</td> <td>\\Elzddfnc</td> <td>DOTTED FENCE</td> </tr> <tr class=\"row-even\">\n<td>U+0299B</td> <td>⦛</td> <td>\\measuredangleleft</td> <td>MEASURED ANGLE OPENING LEFT</td> </tr> <tr class=\"row-odd\">\n<td>U+0299C</td> <td>⦜</td> <td>\\Angle</td> <td>RIGHT ANGLE VARIANT WITH SQUARE</td> </tr> <tr class=\"row-even\">\n<td>U+0299D</td> <td>⦝</td> <td>\\rightanglemdot</td> <td>MEASURED RIGHT ANGLE WITH DOT</td> </tr> <tr class=\"row-odd\">\n<td>U+0299E</td> <td>⦞</td> <td>\\angles</td> <td>ANGLE WITH S INSIDE</td> </tr> <tr class=\"row-even\">\n<td>U+0299F</td> <td>⦟</td> <td>\\angdnr</td> <td>ACUTE ANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+029A0</td> <td>⦠</td> <td>\\Elzlpargt</td> <td>SPHERICAL ANGLE OPENING LEFT</td> </tr> <tr class=\"row-even\">\n<td>U+029A1</td> <td>⦡</td> <td>\\sphericalangleup</td> <td>SPHERICAL ANGLE OPENING UP</td> </tr> <tr class=\"row-odd\">\n<td>U+029A2</td> <td>⦢</td> <td>\\turnangle</td> <td>TURNED ANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+029A3</td> <td>⦣</td> <td>\\revangle</td> <td>REVERSED ANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+029A4</td> <td>⦤</td> <td>\\angleubar</td> <td>ANGLE WITH UNDERBAR</td> </tr> <tr class=\"row-even\">\n<td>U+029A5</td> <td>⦥</td> <td>\\revangleubar</td> <td>REVERSED ANGLE WITH UNDERBAR</td> </tr> <tr class=\"row-odd\">\n<td>U+029A6</td> <td>⦦</td> <td>\\wideangledown</td> <td>OBLIQUE ANGLE OPENING UP</td> </tr> <tr class=\"row-even\">\n<td>U+029A7</td> <td>⦧</td> <td>\\wideangleup</td> <td>OBLIQUE ANGLE OPENING DOWN</td> </tr> <tr class=\"row-odd\">\n<td>U+029A8</td> <td>⦨</td> <td>\\measanglerutone</td> <td>MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+029A9</td> <td>⦩</td> <td>\\measanglelutonw</td> <td>MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT</td> </tr> <tr class=\"row-odd\">\n<td>U+029AA</td> <td>⦪</td> <td>\\measanglerdtose</td> <td>MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+029AB</td> <td>⦫</td> <td>\\measangleldtosw</td> <td>MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT</td> </tr> <tr class=\"row-odd\">\n<td>U+029AC</td> <td>⦬</td> <td>\\measangleurtone</td> <td>MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP</td> </tr> <tr class=\"row-even\">\n<td>U+029AD</td> <td>⦭</td> <td>\\measangleultonw</td> <td>MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP</td> </tr> <tr class=\"row-odd\">\n<td>U+029AE</td> <td>⦮</td> <td>\\measangledrtose</td> <td>MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN</td> </tr> <tr class=\"row-even\">\n<td>U+029AF</td> <td>⦯</td> <td>\\measangledltosw</td> <td>MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN</td> </tr> <tr class=\"row-odd\">\n<td>U+029B0</td> <td>⦰</td> <td>\\revemptyset</td> <td>REVERSED EMPTY SET</td> </tr> <tr class=\"row-even\">\n<td>U+029B1</td> <td>⦱</td> <td>\\emptysetobar</td> <td>EMPTY SET WITH OVERBAR</td> </tr> <tr class=\"row-odd\">\n<td>U+029B2</td> <td>⦲</td> <td>\\emptysetocirc</td> <td>EMPTY SET WITH SMALL CIRCLE ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+029B3</td> <td>⦳</td> <td>\\emptysetoarr</td> <td>EMPTY SET WITH RIGHT ARROW ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+029B4</td> <td>⦴</td> <td>\\emptysetoarrl</td> <td>EMPTY SET WITH LEFT ARROW ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+029B7</td> <td>⦷</td> <td>\\circledparallel</td> <td>CIRCLED PARALLEL</td> </tr> <tr class=\"row-odd\">\n<td>U+029B8</td> <td>⦸</td> <td>\\obslash</td> <td>CIRCLED REVERSE SOLIDUS</td> </tr> <tr class=\"row-even\">\n<td>U+029BC</td> <td>⦼</td> <td>\\odotslashdot</td> <td>CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+029BE</td> <td>⦾</td> <td>\\circledwhitebullet</td> <td>CIRCLED WHITE BULLET</td> </tr> <tr class=\"row-even\">\n<td>U+029BF</td> <td>⦿</td> <td>\\circledbullet</td> <td>CIRCLED BULLET</td> </tr> <tr class=\"row-odd\">\n<td>U+029C0</td> <td>⧀</td> <td>\\olessthan</td> <td>CIRCLED LESS-THAN</td> </tr> <tr class=\"row-even\">\n<td>U+029C1</td> <td>⧁</td> <td>\\ogreaterthan</td> <td>CIRCLED GREATER-THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+029C4</td> <td>⧄</td> <td>\\boxdiag</td> <td>SQUARED RISING DIAGONAL SLASH</td> </tr> <tr class=\"row-even\">\n<td>U+029C5</td> <td>⧅</td> <td>\\boxbslash</td> <td>SQUARED FALLING DIAGONAL SLASH</td> </tr> <tr class=\"row-odd\">\n<td>U+029C6</td> <td>⧆</td> <td>\\boxast</td> <td>SQUARED ASTERISK</td> </tr> <tr class=\"row-even\">\n<td>U+029C7</td> <td>⧇</td> <td>\\boxcircle</td> <td>SQUARED SMALL CIRCLE</td> </tr> <tr class=\"row-odd\">\n<td>U+029CA</td> <td>⧊</td> <td>\\ElzLap</td> <td>TRIANGLE WITH DOT ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+029CB</td> <td>⧋</td> <td>\\Elzdefas</td> <td>TRIANGLE WITH UNDERBAR</td> </tr> <tr class=\"row-odd\">\n<td>U+029CF</td> <td>⧏</td> <td>\\LeftTriangleBar</td> <td>LEFT TRIANGLE BESIDE VERTICAL BAR</td> </tr> <tr class=\"row-even\">\n<td>U+029CF + U+00338</td> <td>⧏̸</td> <td>\\NotLeftTriangleBar</td> <td>LEFT TRIANGLE BESIDE VERTICAL BAR + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+029D0</td> <td>⧐</td> <td>\\RightTriangleBar</td> <td>VERTICAL BAR BESIDE RIGHT TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+029D0 + U+00338</td> <td>⧐̸</td> <td>\\NotRightTriangleBar</td> <td>VERTICAL BAR BESIDE RIGHT TRIANGLE + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+029DF</td> <td>⧟</td> <td>\\dualmap</td> <td>DOUBLE-ENDED MULTIMAP</td> </tr> <tr class=\"row-even\">\n<td>U+029E1</td> <td>⧡</td> <td>\\lrtriangleeq</td> <td>INCREASES AS</td> </tr> <tr class=\"row-odd\">\n<td>U+029E2</td> <td>⧢</td> <td>\\shuffle</td> <td>SHUFFLE PRODUCT</td> </tr> <tr class=\"row-even\">\n<td>U+029E3</td> <td>⧣</td> <td>\\eparsl</td> <td>EQUALS SIGN AND SLANTED PARALLEL</td> </tr> <tr class=\"row-odd\">\n<td>U+029E4</td> <td>⧤</td> <td>\\smeparsl</td> <td>EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+029E5</td> <td>⧥</td> <td>\\eqvparsl</td> <td>IDENTICAL TO AND SLANTED PARALLEL</td> </tr> <tr class=\"row-odd\">\n<td>U+029EB</td> <td>⧫</td> <td>\\blacklozenge</td> <td>BLACK LOZENGE</td> </tr> <tr class=\"row-even\">\n<td>U+029F4</td> <td>⧴</td> <td>\\RuleDelayed</td> <td>RULE-DELAYED</td> </tr> <tr class=\"row-odd\">\n<td>U+029F6</td> <td>⧶</td> <td>\\dsol</td> <td>SOLIDUS WITH OVERBAR</td> </tr> <tr class=\"row-even\">\n<td>U+029F7</td> <td>⧷</td> <td>\\rsolbar</td> <td>REVERSE SOLIDUS WITH HORIZONTAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+029FA</td> <td>⧺</td> <td>\\doubleplus</td> <td>DOUBLE PLUS</td> </tr> <tr class=\"row-even\">\n<td>U+029FB</td> <td>⧻</td> <td>\\tripleplus</td> <td>TRIPLE PLUS</td> </tr> <tr class=\"row-odd\">\n<td>U+02A00</td> <td>⨀</td> <td>\\bigodot</td> <td>N-ARY CIRCLED DOT OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+02A01</td> <td>⨁</td> <td>\\bigoplus</td> <td>N-ARY CIRCLED PLUS OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A02</td> <td>⨂</td> <td>\\bigotimes</td> <td>N-ARY CIRCLED TIMES OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+02A03</td> <td>⨃</td> <td>\\bigcupdot</td> <td>N-ARY UNION OPERATOR WITH DOT</td> </tr> <tr class=\"row-odd\">\n<td>U+02A04</td> <td>⨄</td> <td>\\biguplus</td> <td>N-ARY UNION OPERATOR WITH PLUS</td> </tr> <tr class=\"row-even\">\n<td>U+02A05</td> <td>⨅</td> <td>\\bigsqcap</td> <td>N-ARY SQUARE INTERSECTION OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A06</td> <td>⨆</td> <td>\\bigsqcup</td> <td>N-ARY SQUARE UNION OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+02A07</td> <td>⨇</td> <td>\\conjquant</td> <td>TWO LOGICAL AND OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A08</td> <td>⨈</td> <td>\\disjquant</td> <td>TWO LOGICAL OR OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+02A09</td> <td>⨉</td> <td>\\bigtimes</td> <td>N-ARY TIMES OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A0A</td> <td>⨊</td> <td>\\modtwosum</td> <td>MODULO TWO SUM</td> </tr> <tr class=\"row-even\">\n<td>U+02A0B</td> <td>⨋</td> <td>\\sumint</td> <td>SUMMATION WITH INTEGRAL</td> </tr> <tr class=\"row-odd\">\n<td>U+02A0C</td> <td>⨌</td> <td>\\iiiint</td> <td>QUADRUPLE INTEGRAL OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+02A0D</td> <td>⨍</td> <td>\\intbar</td> <td>FINITE PART INTEGRAL</td> </tr> <tr class=\"row-odd\">\n<td>U+02A0E</td> <td>⨎</td> <td>\\intBar</td> <td>INTEGRAL WITH DOUBLE STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+02A0F</td> <td>⨏</td> <td>\\clockoint</td> <td>INTEGRAL AVERAGE WITH SLASH</td> </tr> <tr class=\"row-odd\">\n<td>U+02A10</td> <td>⨐</td> <td>\\cirfnint</td> <td>CIRCULATION FUNCTION</td> </tr> <tr class=\"row-even\">\n<td>U+02A11</td> <td>⨑</td> <td>\\awint</td> <td>ANTICLOCKWISE INTEGRATION</td> </tr> <tr class=\"row-odd\">\n<td>U+02A12</td> <td>⨒</td> <td>\\rppolint</td> <td>LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE</td> </tr> <tr class=\"row-even\">\n<td>U+02A13</td> <td>⨓</td> <td>\\scpolint</td> <td>LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A14</td> <td>⨔</td> <td>\\npolint</td> <td>LINE INTEGRATION NOT INCLUDING THE POLE</td> </tr> <tr class=\"row-even\">\n<td>U+02A15</td> <td>⨕</td> <td>\\pointint</td> <td>INTEGRAL AROUND A POINT OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A16</td> <td>⨖</td> <td>\\sqrint</td> <td>QUATERNION INTEGRAL OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+02A18</td> <td>⨘</td> <td>\\intx</td> <td>INTEGRAL WITH TIMES SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02A19</td> <td>⨙</td> <td>\\intcap</td> <td>INTEGRAL WITH INTERSECTION</td> </tr> <tr class=\"row-even\">\n<td>U+02A1A</td> <td>⨚</td> <td>\\intcup</td> <td>INTEGRAL WITH UNION</td> </tr> <tr class=\"row-odd\">\n<td>U+02A1B</td> <td>⨛</td> <td>\\upint</td> <td>INTEGRAL WITH OVERBAR</td> </tr> <tr class=\"row-even\">\n<td>U+02A1C</td> <td>⨜</td> <td>\\lowint</td> <td>INTEGRAL WITH UNDERBAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A22</td> <td>⨢</td> <td>\\ringplus</td> <td>PLUS SIGN WITH SMALL CIRCLE ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+02A23</td> <td>⨣</td> <td>\\plushat</td> <td>PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A24</td> <td>⨤</td> <td>\\simplus</td> <td>PLUS SIGN WITH TILDE ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+02A25</td> <td>⨥</td> <td>\\plusdot</td> <td>PLUS SIGN WITH DOT BELOW</td> </tr> <tr class=\"row-odd\">\n<td>U+02A26</td> <td>⨦</td> <td>\\plussim</td> <td>PLUS SIGN WITH TILDE BELOW</td> </tr> <tr class=\"row-even\">\n<td>U+02A27</td> <td>⨧</td> <td>\\plussubtwo</td> <td>PLUS SIGN WITH SUBSCRIPT TWO</td> </tr> <tr class=\"row-odd\">\n<td>U+02A28</td> <td>⨨</td> <td>\\plustrif</td> <td>PLUS SIGN WITH BLACK TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+02A29</td> <td>⨩</td> <td>\\commaminus</td> <td>MINUS SIGN WITH COMMA ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A2A</td> <td>⨪</td> <td>\\minusdot</td> <td>MINUS SIGN WITH DOT BELOW</td> </tr> <tr class=\"row-even\">\n<td>U+02A2B</td> <td>⨫</td> <td>\\minusfdots</td> <td>MINUS SIGN WITH FALLING DOTS</td> </tr> <tr class=\"row-odd\">\n<td>U+02A2C</td> <td>⨬</td> <td>\\minusrdots</td> <td>MINUS SIGN WITH RISING DOTS</td> </tr> <tr class=\"row-even\">\n<td>U+02A2D</td> <td>⨭</td> <td>\\opluslhrim</td> <td>PLUS SIGN IN LEFT HALF CIRCLE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A2E</td> <td>⨮</td> <td>\\oplusrhrim</td> <td>PLUS SIGN IN RIGHT HALF CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+02A2F</td> <td>⨯</td> <td>\\ElzTimes</td> <td>VECTOR OR CROSS PRODUCT</td> </tr> <tr class=\"row-odd\">\n<td>U+02A30</td> <td>⨰</td> <td>\\dottimes</td> <td>MULTIPLICATION SIGN WITH DOT ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+02A31</td> <td>⨱</td> <td>\\timesbar</td> <td>MULTIPLICATION SIGN WITH UNDERBAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A32</td> <td>⨲</td> <td>\\btimes</td> <td>SEMIDIRECT PRODUCT WITH BOTTOM CLOSED</td> </tr> <tr class=\"row-even\">\n<td>U+02A33</td> <td>⨳</td> <td>\\smashtimes</td> <td>SMASH PRODUCT</td> </tr> <tr class=\"row-odd\">\n<td>U+02A34</td> <td>⨴</td> <td>\\otimeslhrim</td> <td>MULTIPLICATION SIGN IN LEFT HALF CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+02A35</td> <td>⨵</td> <td>\\otimesrhrim</td> <td>MULTIPLICATION SIGN IN RIGHT HALF CIRCLE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A36</td> <td>⨶</td> <td>\\otimeshat</td> <td>CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT</td> </tr> <tr class=\"row-even\">\n<td>U+02A37</td> <td>⨷</td> <td>\\Otimes</td> <td>MULTIPLICATION SIGN IN DOUBLE CIRCLE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A38</td> <td>⨸</td> <td>\\odiv</td> <td>CIRCLED DIVISION SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+02A39</td> <td>⨹</td> <td>\\triangleplus</td> <td>PLUS SIGN IN TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A3A</td> <td>⨺</td> <td>\\triangleminus</td> <td>MINUS SIGN IN TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+02A3B</td> <td>⨻</td> <td>\\triangletimes</td> <td>MULTIPLICATION SIGN IN TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A3C</td> <td>⨼</td> <td>\\intprod</td> <td>INTERIOR PRODUCT</td> </tr> <tr class=\"row-even\">\n<td>U+02A3D</td> <td>⨽</td> <td>\\intprodr</td> <td>RIGHTHAND INTERIOR PRODUCT</td> </tr> <tr class=\"row-odd\">\n<td>U+02A3F</td> <td>⨿</td> <td>\\amalg</td> <td>AMALGAMATION OR COPRODUCT</td> </tr> <tr class=\"row-even\">\n<td>U+02A40</td> <td>⩀</td> <td>\\capdot</td> <td>INTERSECTION WITH DOT</td> </tr> <tr class=\"row-odd\">\n<td>U+02A41</td> <td>⩁</td> <td>\\uminus</td> <td>UNION WITH MINUS SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+02A42</td> <td>⩂</td> <td>\\barcup</td> <td>UNION WITH OVERBAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A43</td> <td>⩃</td> <td>\\barcap</td> <td>INTERSECTION WITH OVERBAR</td> </tr> <tr class=\"row-even\">\n<td>U+02A44</td> <td>⩄</td> <td>\\capwedge</td> <td>INTERSECTION WITH LOGICAL AND</td> </tr> <tr class=\"row-odd\">\n<td>U+02A45</td> <td>⩅</td> <td>\\cupvee</td> <td>UNION WITH LOGICAL OR</td> </tr> <tr class=\"row-even\">\n<td>U+02A4A</td> <td>⩊</td> <td>\\twocups</td> <td>UNION BESIDE AND JOINED WITH UNION</td> </tr> <tr class=\"row-odd\">\n<td>U+02A4B</td> <td>⩋</td> <td>\\twocaps</td> <td>INTERSECTION BESIDE AND JOINED WITH INTERSECTION</td> </tr> <tr class=\"row-even\">\n<td>U+02A4C</td> <td>⩌</td> <td>\\closedvarcup</td> <td>CLOSED UNION WITH SERIFS</td> </tr> <tr class=\"row-odd\">\n<td>U+02A4D</td> <td>⩍</td> <td>\\closedvarcap</td> <td>CLOSED INTERSECTION WITH SERIFS</td> </tr> <tr class=\"row-even\">\n<td>U+02A4E</td> <td>⩎</td> <td>\\Sqcap</td> <td>DOUBLE SQUARE INTERSECTION</td> </tr> <tr class=\"row-odd\">\n<td>U+02A4F</td> <td>⩏</td> <td>\\Sqcup</td> <td>DOUBLE SQUARE UNION</td> </tr> <tr class=\"row-even\">\n<td>U+02A50</td> <td>⩐</td> <td>\\closedvarcupsmashprod</td> <td>CLOSED UNION WITH SERIFS AND SMASH PRODUCT</td> </tr> <tr class=\"row-odd\">\n<td>U+02A51</td> <td>⩑</td> <td>\\wedgeodot</td> <td>LOGICAL AND WITH DOT ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+02A52</td> <td>⩒</td> <td>\\veeodot</td> <td>LOGICAL OR WITH DOT ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A53</td> <td>⩓</td> <td>\\ElzAnd</td> <td>DOUBLE LOGICAL AND</td> </tr> <tr class=\"row-even\">\n<td>U+02A54</td> <td>⩔</td> <td>\\ElzOr</td> <td>DOUBLE LOGICAL OR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A55</td> <td>⩕</td> <td>\\wedgeonwedge</td> <td>TWO INTERSECTING LOGICAL AND</td> </tr> <tr class=\"row-even\">\n<td>U+02A56</td> <td>⩖</td> <td>\\ElOr</td> <td>TWO INTERSECTING LOGICAL OR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A57</td> <td>⩗</td> <td>\\bigslopedvee</td> <td>SLOPING LARGE OR</td> </tr> <tr class=\"row-even\">\n<td>U+02A58</td> <td>⩘</td> <td>\\bigslopedwedge</td> <td>SLOPING LARGE AND</td> </tr> <tr class=\"row-odd\">\n<td>U+02A5A</td> <td>⩚</td> <td>\\wedgemidvert</td> <td>LOGICAL AND WITH MIDDLE STEM</td> </tr> <tr class=\"row-even\">\n<td>U+02A5B</td> <td>⩛</td> <td>\\veemidvert</td> <td>LOGICAL OR WITH MIDDLE STEM</td> </tr> <tr class=\"row-odd\">\n<td>U+02A5C</td> <td>⩜</td> <td>\\midbarwedge</td> <td>LOGICAL AND WITH HORIZONTAL DASH</td> </tr> <tr class=\"row-even\">\n<td>U+02A5D</td> <td>⩝</td> <td>\\midbarvee</td> <td>LOGICAL OR WITH HORIZONTAL DASH</td> </tr> <tr class=\"row-odd\">\n<td>U+02A5E</td> <td>⩞</td> <td>\\perspcorrespond</td> <td>LOGICAL AND WITH DOUBLE OVERBAR</td> </tr> <tr class=\"row-even\">\n<td>U+02A5F</td> <td>⩟</td> <td>\\Elzminhat</td> <td>LOGICAL AND WITH UNDERBAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A60</td> <td>⩠</td> <td>\\wedgedoublebar</td> <td>LOGICAL AND WITH DOUBLE UNDERBAR</td> </tr> <tr class=\"row-even\">\n<td>U+02A61</td> <td>⩡</td> <td>\\varveebar</td> <td>SMALL VEE WITH UNDERBAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A62</td> <td>⩢</td> <td>\\doublebarvee</td> <td>LOGICAL OR WITH DOUBLE OVERBAR</td> </tr> <tr class=\"row-even\">\n<td>U+02A63</td> <td>⩣</td> <td>\\veedoublebar</td> <td>LOGICAL OR WITH DOUBLE UNDERBAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A66</td> <td>⩦</td> <td>\\eqdot</td> <td>EQUALS SIGN WITH DOT BELOW</td> </tr> <tr class=\"row-even\">\n<td>U+02A67</td> <td>⩧</td> <td>\\dotequiv</td> <td>IDENTICAL WITH DOT ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A6A</td> <td>⩪</td> <td>\\dotsim</td> <td>TILDE OPERATOR WITH DOT ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+02A6B</td> <td>⩫</td> <td>\\simrdots</td> <td>TILDE OPERATOR WITH RISING DOTS</td> </tr> <tr class=\"row-odd\">\n<td>U+02A6C</td> <td>⩬</td> <td>\\simminussim</td> <td>SIMILAR MINUS SIMILAR</td> </tr> <tr class=\"row-even\">\n<td>U+02A6D</td> <td>⩭</td> <td>\\congdot</td> <td>CONGRUENT WITH DOT ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A6E</td> <td>⩮</td> <td>\\asteq</td> <td>EQUALS WITH ASTERISK</td> </tr> <tr class=\"row-even\">\n<td>U+02A6F</td> <td>⩯</td> <td>\\hatapprox</td> <td>ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT</td> </tr> <tr class=\"row-odd\">\n<td>U+02A70</td> <td>⩰</td> <td>\\approxeqq</td> <td>APPROXIMATELY EQUAL OR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02A71</td> <td>⩱</td> <td>\\eqqplus</td> <td>EQUALS SIGN ABOVE PLUS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02A72</td> <td>⩲</td> <td>\\pluseqq</td> <td>PLUS SIGN ABOVE EQUALS SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+02A73</td> <td>⩳</td> <td>\\eqqsim</td> <td>EQUALS SIGN ABOVE TILDE OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+02A74</td> <td>⩴</td> <td>\\Coloneq</td> <td>DOUBLE COLON EQUAL</td> </tr> <tr class=\"row-even\">\n<td>U+02A75</td> <td>⩵</td> <td>\\Equal</td> <td>TWO CONSECUTIVE EQUALS SIGNS</td> </tr> <tr class=\"row-odd\">\n<td>U+02A76</td> <td>⩶</td> <td>\\eqeqeq</td> <td>THREE CONSECUTIVE EQUALS SIGNS</td> </tr> <tr class=\"row-even\">\n<td>U+02A77</td> <td>⩷</td> <td>\\ddotseq</td> <td>EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW</td> </tr> <tr class=\"row-odd\">\n<td>U+02A78</td> <td>⩸</td> <td>\\equivDD</td> <td>EQUIVALENT WITH FOUR DOTS ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+02A79</td> <td>⩹</td> <td>\\ltcir</td> <td>LESS-THAN WITH CIRCLE INSIDE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A7A</td> <td>⩺</td> <td>\\gtcir</td> <td>GREATER-THAN WITH CIRCLE INSIDE</td> </tr> <tr class=\"row-even\">\n<td>U+02A7B</td> <td>⩻</td> <td>\\ltquest</td> <td>LESS-THAN WITH QUESTION MARK ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A7C</td> <td>⩼</td> <td>\\gtquest</td> <td>GREATER-THAN WITH QUESTION MARK ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+02A7D</td> <td>⩽</td> <td>\\leqslant</td> <td>LESS-THAN OR SLANTED EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02A7D + U+00338</td> <td>⩽̸</td> <td>\\nleqslant</td> <td>LESS-THAN OR SLANTED EQUAL TO + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-even\">\n<td>U+02A7E</td> <td>⩾</td> <td>\\geqslant</td> <td>GREATER-THAN OR SLANTED EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02A7E + U+00338</td> <td>⩾̸</td> <td>\\ngeqslant</td> <td>GREATER-THAN OR SLANTED EQUAL TO + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-even\">\n<td>U+02A7F</td> <td>⩿</td> <td>\\lesdot</td> <td>LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A80</td> <td>⪀</td> <td>\\gesdot</td> <td>GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE</td> </tr> <tr class=\"row-even\">\n<td>U+02A81</td> <td>⪁</td> <td>\\lesdoto</td> <td>LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A82</td> <td>⪂</td> <td>\\gesdoto</td> <td>GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+02A83</td> <td>⪃</td> <td>\\lesdotor</td> <td>LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT</td> </tr> <tr class=\"row-odd\">\n<td>U+02A84</td> <td>⪄</td> <td>\\gesdotol</td> <td>GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT</td> </tr> <tr class=\"row-even\">\n<td>U+02A85</td> <td>⪅</td> <td>\\lessapprox</td> <td>LESS-THAN OR APPROXIMATE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A86</td> <td>⪆</td> <td>\\gtrapprox</td> <td>GREATER-THAN OR APPROXIMATE</td> </tr> <tr class=\"row-even\">\n<td>U+02A87</td> <td>⪇</td> <td>\\lneq</td> <td>LESS-THAN AND SINGLE-LINE NOT EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02A88</td> <td>⪈</td> <td>\\gneq</td> <td>GREATER-THAN AND SINGLE-LINE NOT EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02A89</td> <td>⪉</td> <td>\\lnapprox</td> <td>LESS-THAN AND NOT APPROXIMATE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A8A</td> <td>⪊</td> <td>\\gnapprox</td> <td>GREATER-THAN AND NOT APPROXIMATE</td> </tr> <tr class=\"row-even\">\n<td>U+02A8B</td> <td>⪋</td> <td>\\lesseqqgtr</td> <td>LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02A8C</td> <td>⪌</td> <td>\\gtreqqless</td> <td>GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN</td> </tr> <tr class=\"row-even\">\n<td>U+02A8D</td> <td>⪍</td> <td>\\lsime</td> <td>LESS-THAN ABOVE SIMILAR OR EQUAL</td> </tr> <tr class=\"row-odd\">\n<td>U+02A8E</td> <td>⪎</td> <td>\\gsime</td> <td>GREATER-THAN ABOVE SIMILAR OR EQUAL</td> </tr> <tr class=\"row-even\">\n<td>U+02A8F</td> <td>⪏</td> <td>\\lsimg</td> <td>LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02A90</td> <td>⪐</td> <td>\\gsiml</td> <td>GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN</td> </tr> <tr class=\"row-even\">\n<td>U+02A91</td> <td>⪑</td> <td>\\lgE</td> <td>LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL</td> </tr> <tr class=\"row-odd\">\n<td>U+02A92</td> <td>⪒</td> <td>\\glE</td> <td>GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL</td> </tr> <tr class=\"row-even\">\n<td>U+02A93</td> <td>⪓</td> <td>\\lesges</td> <td>LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL</td> </tr> <tr class=\"row-odd\">\n<td>U+02A94</td> <td>⪔</td> <td>\\gesles</td> <td>GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL</td> </tr> <tr class=\"row-even\">\n<td>U+02A95</td> <td>⪕</td> <td>\\eqslantless</td> <td>SLANTED EQUAL TO OR LESS-THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02A96</td> <td>⪖</td> <td>\\eqslantgtr</td> <td>SLANTED EQUAL TO OR GREATER-THAN</td> </tr> <tr class=\"row-even\">\n<td>U+02A97</td> <td>⪗</td> <td>\\elsdot</td> <td>SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE</td> </tr> <tr class=\"row-odd\">\n<td>U+02A98</td> <td>⪘</td> <td>\\egsdot</td> <td>SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE</td> </tr> <tr class=\"row-even\">\n<td>U+02A99</td> <td>⪙</td> <td>\\eqqless</td> <td>DOUBLE-LINE EQUAL TO OR LESS-THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02A9A</td> <td>⪚</td> <td>\\eqqgtr</td> <td>DOUBLE-LINE EQUAL TO OR GREATER-THAN</td> </tr> <tr class=\"row-even\">\n<td>U+02A9B</td> <td>⪛</td> <td>\\eqqslantless</td> <td>DOUBLE-LINE SLANTED EQUAL TO OR LESS-THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02A9C</td> <td>⪜</td> <td>\\eqqslantgtr</td> <td>DOUBLE-LINE SLANTED EQUAL TO OR GREATER-THAN</td> </tr> <tr class=\"row-even\">\n<td>U+02A9D</td> <td>⪝</td> <td>\\simless</td> <td>SIMILAR OR LESS-THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02A9E</td> <td>⪞</td> <td>\\simgtr</td> <td>SIMILAR OR GREATER-THAN</td> </tr> <tr class=\"row-even\">\n<td>U+02A9F</td> <td>⪟</td> <td>\\simlE</td> <td>SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02AA0</td> <td>⪠</td> <td>\\simgE</td> <td>SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+02AA1</td> <td>⪡</td> <td>\\NestedLessLess</td> <td>DOUBLE NESTED LESS-THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02AA1 + U+00338</td> <td>⪡̸</td> <td>\\NotNestedLessLess</td> <td>DOUBLE NESTED LESS-THAN + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-even\">\n<td>U+02AA2</td> <td>⪢</td> <td>\\NestedGreaterGreater</td> <td>DOUBLE NESTED GREATER-THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02AA2 + U+00338</td> <td>⪢̸</td> <td>\\NotNestedGreaterGreater</td> <td>DOUBLE NESTED GREATER-THAN + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-even\">\n<td>U+02AA3</td> <td>⪣</td> <td>\\partialmeetcontraction</td> <td>DOUBLE NESTED LESS-THAN WITH UNDERBAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02AA4</td> <td>⪤</td> <td>\\glj</td> <td>GREATER-THAN OVERLAPPING LESS-THAN</td> </tr> <tr class=\"row-even\">\n<td>U+02AA5</td> <td>⪥</td> <td>\\gla</td> <td>GREATER-THAN BESIDE LESS-THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02AA6</td> <td>⪦</td> <td>\\ltcc</td> <td>LESS-THAN CLOSED BY CURVE</td> </tr> <tr class=\"row-even\">\n<td>U+02AA7</td> <td>⪧</td> <td>\\gtcc</td> <td>GREATER-THAN CLOSED BY CURVE</td> </tr> <tr class=\"row-odd\">\n<td>U+02AA8</td> <td>⪨</td> <td>\\lescc</td> <td>LESS-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL</td> </tr> <tr class=\"row-even\">\n<td>U+02AA9</td> <td>⪩</td> <td>\\gescc</td> <td>GREATER-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL</td> </tr> <tr class=\"row-odd\">\n<td>U+02AAA</td> <td>⪪</td> <td>\\smt</td> <td>SMALLER THAN</td> </tr> <tr class=\"row-even\">\n<td>U+02AAB</td> <td>⪫</td> <td>\\lat</td> <td>LARGER THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02AAC</td> <td>⪬</td> <td>\\smte</td> <td>SMALLER THAN OR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02AAD</td> <td>⪭</td> <td>\\late</td> <td>LARGER THAN OR EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02AAE</td> <td>⪮</td> <td>\\bumpeqq</td> <td>EQUALS SIGN WITH BUMPY ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+02AAF</td> <td>⪯</td> <td>\\preceq</td> <td>PRECEDES ABOVE SINGLE-LINE EQUALS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02AAF + U+00338</td> <td>⪯̸</td> <td>\\npreceq</td> <td>PRECEDES ABOVE SINGLE-LINE EQUALS SIGN + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-even\">\n<td>U+02AB0</td> <td>⪰</td> <td>\\succeq</td> <td>SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02AB0 + U+00338</td> <td>⪰̸</td> <td>\\nsucceq</td> <td>SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-even\">\n<td>U+02AB1</td> <td>⪱</td> <td>\\precneq</td> <td>PRECEDES ABOVE SINGLE-LINE NOT EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02AB2</td> <td>⪲</td> <td>\\succneq</td> <td>SUCCEEDS ABOVE SINGLE-LINE NOT EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02AB3</td> <td>⪳</td> <td>\\preceqq</td> <td>PRECEDES ABOVE EQUALS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02AB4</td> <td>⪴</td> <td>\\succeqq</td> <td>SUCCEEDS ABOVE EQUALS SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+02AB5</td> <td>⪵</td> <td>\\precneqq</td> <td>PRECEDES ABOVE NOT EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02AB6</td> <td>⪶</td> <td>\\succneqq</td> <td>SUCCEEDS ABOVE NOT EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02AB7</td> <td>⪷</td> <td>\\precapprox</td> <td>PRECEDES ABOVE ALMOST EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02AB8</td> <td>⪸</td> <td>\\succapprox</td> <td>SUCCEEDS ABOVE ALMOST EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02AB9</td> <td>⪹</td> <td>\\precnapprox</td> <td>PRECEDES ABOVE NOT ALMOST EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02ABA</td> <td>⪺</td> <td>\\succnapprox</td> <td>SUCCEEDS ABOVE NOT ALMOST EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02ABB</td> <td>⪻</td> <td>\\Prec</td> <td>DOUBLE PRECEDES</td> </tr> <tr class=\"row-odd\">\n<td>U+02ABC</td> <td>⪼</td> <td>\\Succ</td> <td>DOUBLE SUCCEEDS</td> </tr> <tr class=\"row-even\">\n<td>U+02ABD</td> <td>⪽</td> <td>\\subsetdot</td> <td>SUBSET WITH DOT</td> </tr> <tr class=\"row-odd\">\n<td>U+02ABE</td> <td>⪾</td> <td>\\supsetdot</td> <td>SUPERSET WITH DOT</td> </tr> <tr class=\"row-even\">\n<td>U+02ABF</td> <td>⪿</td> <td>\\subsetplus</td> <td>SUBSET WITH PLUS SIGN BELOW</td> </tr> <tr class=\"row-odd\">\n<td>U+02AC0</td> <td>⫀</td> <td>\\supsetplus</td> <td>SUPERSET WITH PLUS SIGN BELOW</td> </tr> <tr class=\"row-even\">\n<td>U+02AC1</td> <td>⫁</td> <td>\\submult</td> <td>SUBSET WITH MULTIPLICATION SIGN BELOW</td> </tr> <tr class=\"row-odd\">\n<td>U+02AC2</td> <td>⫂</td> <td>\\supmult</td> <td>SUPERSET WITH MULTIPLICATION SIGN BELOW</td> </tr> <tr class=\"row-even\">\n<td>U+02AC3</td> <td>⫃</td> <td>\\subedot</td> <td>SUBSET OF OR EQUAL TO WITH DOT ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+02AC4</td> <td>⫄</td> <td>\\supedot</td> <td>SUPERSET OF OR EQUAL TO WITH DOT ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+02AC5</td> <td>⫅</td> <td>\\subseteqq</td> <td>SUBSET OF ABOVE EQUALS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02AC5 + U+00338</td> <td>⫅̸</td> <td>\\nsubseteqq</td> <td>SUBSET OF ABOVE EQUALS SIGN + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-even\">\n<td>U+02AC6</td> <td>⫆</td> <td>\\supseteqq</td> <td>SUPERSET OF ABOVE EQUALS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+02AC6 + U+00338</td> <td>⫆̸</td> <td>\\nsupseteqq</td> <td>SUPERSET OF ABOVE EQUALS SIGN + COMBINING LONG SOLIDUS OVERLAY / NON-SPACING LONG SLASH OVERLAY</td> </tr> <tr class=\"row-even\">\n<td>U+02AC7</td> <td>⫇</td> <td>\\subsim</td> <td>SUBSET OF ABOVE TILDE OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+02AC8</td> <td>⫈</td> <td>\\supsim</td> <td>SUPERSET OF ABOVE TILDE OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+02AC9</td> <td>⫉</td> <td>\\subsetapprox</td> <td>SUBSET OF ABOVE ALMOST EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02ACA</td> <td>⫊</td> <td>\\supsetapprox</td> <td>SUPERSET OF ABOVE ALMOST EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02ACB</td> <td>⫋</td> <td>\\subsetneqq</td> <td>SUBSET OF ABOVE NOT EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02ACC</td> <td>⫌</td> <td>\\supsetneqq</td> <td>SUPERSET OF ABOVE NOT EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02ACD</td> <td>⫍</td> <td>\\lsqhook</td> <td>SQUARE LEFT OPEN BOX OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+02ACE</td> <td>⫎</td> <td>\\rsqhook</td> <td>SQUARE RIGHT OPEN BOX OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+02ACF</td> <td>⫏</td> <td>\\csub</td> <td>CLOSED SUBSET</td> </tr> <tr class=\"row-odd\">\n<td>U+02AD0</td> <td>⫐</td> <td>\\csup</td> <td>CLOSED SUPERSET</td> </tr> <tr class=\"row-even\">\n<td>U+02AD1</td> <td>⫑</td> <td>\\csube</td> <td>CLOSED SUBSET OR EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02AD2</td> <td>⫒</td> <td>\\csupe</td> <td>CLOSED SUPERSET OR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02AD3</td> <td>⫓</td> <td>\\subsup</td> <td>SUBSET ABOVE SUPERSET</td> </tr> <tr class=\"row-odd\">\n<td>U+02AD4</td> <td>⫔</td> <td>\\supsub</td> <td>SUPERSET ABOVE SUBSET</td> </tr> <tr class=\"row-even\">\n<td>U+02AD5</td> <td>⫕</td> <td>\\subsub</td> <td>SUBSET ABOVE SUBSET</td> </tr> <tr class=\"row-odd\">\n<td>U+02AD6</td> <td>⫖</td> <td>\\supsup</td> <td>SUPERSET ABOVE SUPERSET</td> </tr> <tr class=\"row-even\">\n<td>U+02AD7</td> <td>⫗</td> <td>\\suphsub</td> <td>SUPERSET BESIDE SUBSET</td> </tr> <tr class=\"row-odd\">\n<td>U+02AD8</td> <td>⫘</td> <td>\\supdsub</td> <td>SUPERSET BESIDE AND JOINED BY DASH WITH SUBSET</td> </tr> <tr class=\"row-even\">\n<td>U+02AD9</td> <td>⫙</td> <td>\\forkv</td> <td>ELEMENT OF OPENING DOWNWARDS</td> </tr> <tr class=\"row-odd\">\n<td>U+02ADB</td> <td>⫛</td> <td>\\mlcp</td> <td>TRANSVERSAL INTERSECTION</td> </tr> <tr class=\"row-even\">\n<td>U+02ADC</td> <td>⫝̸</td> <td>\\forks</td> <td>FORKING</td> </tr> <tr class=\"row-odd\">\n<td>U+02ADD</td> <td>⫝</td> <td>\\forksnot</td> <td>NONFORKING</td> </tr> <tr class=\"row-even\">\n<td>U+02AE3</td> <td>⫣</td> <td>\\dashV</td> <td>DOUBLE VERTICAL BAR LEFT TURNSTILE</td> </tr> <tr class=\"row-odd\">\n<td>U+02AE4</td> <td>⫤</td> <td>\\Dashv</td> <td>VERTICAL BAR DOUBLE LEFT TURNSTILE</td> </tr> <tr class=\"row-even\">\n<td>U+02AF4</td> <td>⫴</td> <td>\\interleave</td> <td>TRIPLE VERTICAL BAR BINARY RELATION</td> </tr> <tr class=\"row-odd\">\n<td>U+02AF6</td> <td>⫶</td> <td>\\Elztdcol</td> <td>TRIPLE COLON OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+02AF7</td> <td>⫷</td> <td>\\lllnest</td> <td>TRIPLE NESTED LESS-THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02AF8</td> <td>⫸</td> <td>\\gggnest</td> <td>TRIPLE NESTED GREATER-THAN</td> </tr> <tr class=\"row-even\">\n<td>U+02AF9</td> <td>⫹</td> <td>\\leqqslant</td> <td>DOUBLE-LINE SLANTED LESS-THAN OR EQUAL TO</td> </tr> <tr class=\"row-odd\">\n<td>U+02AFA</td> <td>⫺</td> <td>\\geqqslant</td> <td>DOUBLE-LINE SLANTED GREATER-THAN OR EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02B05</td> <td>⬅</td> <td>\\:arrow_left:</td> <td>LEFTWARDS BLACK ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02B06</td> <td>⬆</td> <td>\\:arrow_up:</td> <td>UPWARDS BLACK ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02B07</td> <td>⬇</td> <td>\\:arrow_down:</td> <td>DOWNWARDS BLACK ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02B12</td> <td>⬒</td> <td>\\squaretopblack</td> <td>SQUARE WITH TOP HALF BLACK</td> </tr> <tr class=\"row-even\">\n<td>U+02B13</td> <td>⬓</td> <td>\\squarebotblack</td> <td>SQUARE WITH BOTTOM HALF BLACK</td> </tr> <tr class=\"row-odd\">\n<td>U+02B14</td> <td>⬔</td> <td>\\squareurblack</td> <td>SQUARE WITH UPPER RIGHT DIAGONAL HALF BLACK</td> </tr> <tr class=\"row-even\">\n<td>U+02B15</td> <td>⬕</td> <td>\\squarellblack</td> <td>SQUARE WITH LOWER LEFT DIAGONAL HALF BLACK</td> </tr> <tr class=\"row-odd\">\n<td>U+02B16</td> <td>⬖</td> <td>\\diamondleftblack</td> <td>DIAMOND WITH LEFT HALF BLACK</td> </tr> <tr class=\"row-even\">\n<td>U+02B17</td> <td>⬗</td> <td>\\diamondrightblack</td> <td>DIAMOND WITH RIGHT HALF BLACK</td> </tr> <tr class=\"row-odd\">\n<td>U+02B18</td> <td>⬘</td> <td>\\diamondtopblack</td> <td>DIAMOND WITH TOP HALF BLACK</td> </tr> <tr class=\"row-even\">\n<td>U+02B19</td> <td>⬙</td> <td>\\diamondbotblack</td> <td>DIAMOND WITH BOTTOM HALF BLACK</td> </tr> <tr class=\"row-odd\">\n<td>U+02B1A</td> <td>⬚</td> <td>\\dottedsquare</td> <td>DOTTED SQUARE</td> </tr> <tr class=\"row-even\">\n<td>U+02B1B</td> <td>⬛</td> <td>\\lgblksquare, \\:black_large_square:</td> <td>BLACK LARGE SQUARE</td> </tr> <tr class=\"row-odd\">\n<td>U+02B1C</td> <td>⬜</td> <td>\\lgwhtsquare, \\:white_large_square:</td> <td>WHITE LARGE SQUARE</td> </tr> <tr class=\"row-even\">\n<td>U+02B1D</td> <td>⬝</td> <td>\\vysmblksquare</td> <td>BLACK VERY SMALL SQUARE</td> </tr> <tr class=\"row-odd\">\n<td>U+02B1E</td> <td>⬞</td> <td>\\vysmwhtsquare</td> <td>WHITE VERY SMALL SQUARE</td> </tr> <tr class=\"row-even\">\n<td>U+02B1F</td> <td>⬟</td> <td>\\pentagonblack</td> <td>BLACK PENTAGON</td> </tr> <tr class=\"row-odd\">\n<td>U+02B20</td> <td>⬠</td> <td>\\pentagon</td> <td>WHITE PENTAGON</td> </tr> <tr class=\"row-even\">\n<td>U+02B21</td> <td>⬡</td> <td>\\varhexagon</td> <td>WHITE HEXAGON</td> </tr> <tr class=\"row-odd\">\n<td>U+02B22</td> <td>⬢</td> <td>\\varhexagonblack</td> <td>BLACK HEXAGON</td> </tr> <tr class=\"row-even\">\n<td>U+02B23</td> <td>⬣</td> <td>\\hexagonblack</td> <td>HORIZONTAL BLACK HEXAGON</td> </tr> <tr class=\"row-odd\">\n<td>U+02B24</td> <td>⬤</td> <td>\\lgblkcircle</td> <td>BLACK LARGE CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+02B25</td> <td>⬥</td> <td>\\mdblkdiamond</td> <td>BLACK MEDIUM DIAMOND</td> </tr> <tr class=\"row-odd\">\n<td>U+02B26</td> <td>⬦</td> <td>\\mdwhtdiamond</td> <td>WHITE MEDIUM DIAMOND</td> </tr> <tr class=\"row-even\">\n<td>U+02B27</td> <td>⬧</td> <td>\\mdblklozenge</td> <td>BLACK MEDIUM LOZENGE</td> </tr> <tr class=\"row-odd\">\n<td>U+02B28</td> <td>⬨</td> <td>\\mdwhtlozenge</td> <td>WHITE MEDIUM LOZENGE</td> </tr> <tr class=\"row-even\">\n<td>U+02B29</td> <td>⬩</td> <td>\\smblkdiamond</td> <td>BLACK SMALL DIAMOND</td> </tr> <tr class=\"row-odd\">\n<td>U+02B2A</td> <td>⬪</td> <td>\\smblklozenge</td> <td>BLACK SMALL LOZENGE</td> </tr> <tr class=\"row-even\">\n<td>U+02B2B</td> <td>⬫</td> <td>\\smwhtlozenge</td> <td>WHITE SMALL LOZENGE</td> </tr> <tr class=\"row-odd\">\n<td>U+02B2C</td> <td>⬬</td> <td>\\blkhorzoval</td> <td>BLACK HORIZONTAL ELLIPSE</td> </tr> <tr class=\"row-even\">\n<td>U+02B2D</td> <td>⬭</td> <td>\\whthorzoval</td> <td>WHITE HORIZONTAL ELLIPSE</td> </tr> <tr class=\"row-odd\">\n<td>U+02B2E</td> <td>⬮</td> <td>\\blkvertoval</td> <td>BLACK VERTICAL ELLIPSE</td> </tr> <tr class=\"row-even\">\n<td>U+02B2F</td> <td>⬯</td> <td>\\whtvertoval</td> <td>WHITE VERTICAL ELLIPSE</td> </tr> <tr class=\"row-odd\">\n<td>U+02B30</td> <td>⬰</td> <td>\\circleonleftarrow</td> <td>LEFT ARROW WITH SMALL CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+02B31</td> <td>⬱</td> <td>\\leftthreearrows</td> <td>THREE LEFTWARDS ARROWS</td> </tr> <tr class=\"row-odd\">\n<td>U+02B32</td> <td>⬲</td> <td>\\leftarrowonoplus</td> <td>LEFT ARROW WITH CIRCLED PLUS</td> </tr> <tr class=\"row-even\">\n<td>U+02B33</td> <td>⬳</td> <td>\\longleftsquigarrow</td> <td>LONG LEFTWARDS SQUIGGLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02B34</td> <td>⬴</td> <td>\\nvtwoheadleftarrow</td> <td>LEFTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+02B35</td> <td>⬵</td> <td>\\nVtwoheadleftarrow</td> <td>LEFTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+02B36</td> <td>⬶</td> <td>\\twoheadmapsfrom</td> <td>LEFTWARDS TWO-HEADED ARROW FROM BAR</td> </tr> <tr class=\"row-even\">\n<td>U+02B37</td> <td>⬷</td> <td>\\twoheadleftdbkarrow</td> <td>LEFTWARDS TWO-HEADED TRIPLE DASH ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02B38</td> <td>⬸</td> <td>\\leftdotarrow</td> <td>LEFTWARDS ARROW WITH DOTTED STEM</td> </tr> <tr class=\"row-even\">\n<td>U+02B39</td> <td>⬹</td> <td>\\nvleftarrowtail</td> <td>LEFTWARDS ARROW WITH TAIL WITH VERTICAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+02B3A</td> <td>⬺</td> <td>\\nVleftarrowtail</td> <td>LEFTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+02B3B</td> <td>⬻</td> <td>\\twoheadleftarrowtail</td> <td>LEFTWARDS TWO-HEADED ARROW WITH TAIL</td> </tr> <tr class=\"row-odd\">\n<td>U+02B3C</td> <td>⬼</td> <td>\\nvtwoheadleftarrowtail</td> <td>LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+02B3D</td> <td>⬽</td> <td>\\nVtwoheadleftarrowtail</td> <td>LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE</td> </tr> <tr class=\"row-odd\">\n<td>U+02B3E</td> <td>⬾</td> <td>\\leftarrowx</td> <td>LEFTWARDS ARROW THROUGH X</td> </tr> <tr class=\"row-even\">\n<td>U+02B3F</td> <td>⬿</td> <td>\\leftcurvedarrow</td> <td>WAVE ARROW POINTING DIRECTLY LEFT</td> </tr> <tr class=\"row-odd\">\n<td>U+02B40</td> <td>⭀</td> <td>\\equalleftarrow</td> <td>EQUALS SIGN ABOVE LEFTWARDS ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02B41</td> <td>⭁</td> <td>\\bsimilarleftarrow</td> <td>REVERSE TILDE OPERATOR ABOVE LEFTWARDS ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02B42</td> <td>⭂</td> <td>\\leftarrowbackapprox</td> <td>LEFTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02B43</td> <td>⭃</td> <td>\\rightarrowgtr</td> <td>RIGHTWARDS ARROW THROUGH GREATER-THAN</td> </tr> <tr class=\"row-odd\">\n<td>U+02B44</td> <td>⭄</td> <td>\\rightarrowsupset</td> <td>RIGHTWARDS ARROW THROUGH SUPERSET</td> </tr> <tr class=\"row-even\">\n<td>U+02B45</td> <td>⭅</td> <td>\\LLeftarrow</td> <td>LEFTWARDS QUADRUPLE ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02B46</td> <td>⭆</td> <td>\\RRightarrow</td> <td>RIGHTWARDS QUADRUPLE ARROW</td> </tr> <tr class=\"row-even\">\n<td>U+02B47</td> <td>⭇</td> <td>\\bsimilarrightarrow</td> <td>REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02B48</td> <td>⭈</td> <td>\\rightarrowbackapprox</td> <td>RIGHTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02B49</td> <td>⭉</td> <td>\\similarleftarrow</td> <td>TILDE OPERATOR ABOVE LEFTWARDS ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+02B4A</td> <td>⭊</td> <td>\\leftarrowapprox</td> <td>LEFTWARDS ARROW ABOVE ALMOST EQUAL TO</td> </tr> <tr class=\"row-even\">\n<td>U+02B4B</td> <td>⭋</td> <td>\\leftarrowbsimilar</td> <td>LEFTWARDS ARROW ABOVE REVERSE TILDE OPERATOR</td> </tr> <tr class=\"row-odd\">\n<td>U+02B4C</td> <td>⭌</td> <td>\\rightarrowbsimilar</td> <td>RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR</td> </tr> <tr class=\"row-even\">\n<td>U+02B50</td> <td>⭐</td> <td>\\medwhitestar, \\:star:</td> <td>WHITE MEDIUM STAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02B51</td> <td>⭑</td> <td>\\medblackstar</td> <td>BLACK SMALL STAR</td> </tr> <tr class=\"row-even\">\n<td>U+02B52</td> <td>⭒</td> <td>\\smwhitestar</td> <td>WHITE SMALL STAR</td> </tr> <tr class=\"row-odd\">\n<td>U+02B53</td> <td>⭓</td> <td>\\rightpentagonblack</td> <td>BLACK RIGHT-POINTING PENTAGON</td> </tr> <tr class=\"row-even\">\n<td>U+02B54</td> <td>⭔</td> <td>\\rightpentagon</td> <td>WHITE RIGHT-POINTING PENTAGON</td> </tr> <tr class=\"row-odd\">\n<td>U+02B55</td> <td>⭕</td> <td>\\:o:</td> <td>HEAVY LARGE CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+02C7C</td> <td>ⱼ</td> <td>\\_j</td> <td>LATIN SUBSCRIPT SMALL LETTER J</td> </tr> <tr class=\"row-odd\">\n<td>U+02C7D</td> <td>ⱽ</td> <td>\\^V</td> <td>MODIFIER LETTER CAPITAL V</td> </tr> <tr class=\"row-even\">\n<td>U+03012</td> <td>〒</td> <td>\\postalmark</td> <td>POSTAL MARK</td> </tr> <tr class=\"row-odd\">\n<td>U+03030</td> <td>〰</td> <td>\\:wavy_dash:</td> <td>WAVY DASH</td> </tr> <tr class=\"row-even\">\n<td>U+0303D</td> <td>〽</td> <td>\\:part_alternation_mark:</td> <td>PART ALTERNATION MARK</td> </tr> <tr class=\"row-odd\">\n<td>U+03297</td> <td>㊗</td> <td>\\:congratulations:</td> <td>CIRCLED IDEOGRAPH CONGRATULATION</td> </tr> <tr class=\"row-even\">\n<td>U+03299</td> <td>㊙</td> <td>\\:secret:</td> <td>CIRCLED IDEOGRAPH SECRET</td> </tr> <tr class=\"row-odd\">\n<td>U+1D400</td> <td>𝐀</td> <td>\\mbfA</td> <td>MATHEMATICAL BOLD CAPITAL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D401</td> <td>𝐁</td> <td>\\mbfB</td> <td>MATHEMATICAL BOLD CAPITAL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D402</td> <td>𝐂</td> <td>\\mbfC</td> <td>MATHEMATICAL BOLD CAPITAL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D403</td> <td>𝐃</td> <td>\\mbfD</td> <td>MATHEMATICAL BOLD CAPITAL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D404</td> <td>𝐄</td> <td>\\mbfE</td> <td>MATHEMATICAL BOLD CAPITAL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D405</td> <td>𝐅</td> <td>\\mbfF</td> <td>MATHEMATICAL BOLD CAPITAL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D406</td> <td>𝐆</td> <td>\\mbfG</td> <td>MATHEMATICAL BOLD CAPITAL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D407</td> <td>𝐇</td> <td>\\mbfH</td> <td>MATHEMATICAL BOLD CAPITAL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D408</td> <td>𝐈</td> <td>\\mbfI</td> <td>MATHEMATICAL BOLD CAPITAL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D409</td> <td>𝐉</td> <td>\\mbfJ</td> <td>MATHEMATICAL BOLD CAPITAL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D40A</td> <td>𝐊</td> <td>\\mbfK</td> <td>MATHEMATICAL BOLD CAPITAL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D40B</td> <td>𝐋</td> <td>\\mbfL</td> <td>MATHEMATICAL BOLD CAPITAL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D40C</td> <td>𝐌</td> <td>\\mbfM</td> <td>MATHEMATICAL BOLD CAPITAL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D40D</td> <td>𝐍</td> <td>\\mbfN</td> <td>MATHEMATICAL BOLD CAPITAL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D40E</td> <td>𝐎</td> <td>\\mbfO</td> <td>MATHEMATICAL BOLD CAPITAL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D40F</td> <td>𝐏</td> <td>\\mbfP</td> <td>MATHEMATICAL BOLD CAPITAL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D410</td> <td>𝐐</td> <td>\\mbfQ</td> <td>MATHEMATICAL BOLD CAPITAL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D411</td> <td>𝐑</td> <td>\\mbfR</td> <td>MATHEMATICAL BOLD CAPITAL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D412</td> <td>𝐒</td> <td>\\mbfS</td> <td>MATHEMATICAL BOLD CAPITAL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D413</td> <td>𝐓</td> <td>\\mbfT</td> <td>MATHEMATICAL BOLD CAPITAL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D414</td> <td>𝐔</td> <td>\\mbfU</td> <td>MATHEMATICAL BOLD CAPITAL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D415</td> <td>𝐕</td> <td>\\mbfV</td> <td>MATHEMATICAL BOLD CAPITAL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D416</td> <td>𝐖</td> <td>\\mbfW</td> <td>MATHEMATICAL BOLD CAPITAL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D417</td> <td>𝐗</td> <td>\\mbfX</td> <td>MATHEMATICAL BOLD CAPITAL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D418</td> <td>𝐘</td> <td>\\mbfY</td> <td>MATHEMATICAL BOLD CAPITAL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D419</td> <td>𝐙</td> <td>\\mbfZ</td> <td>MATHEMATICAL BOLD CAPITAL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D41A</td> <td>𝐚</td> <td>\\mbfa</td> <td>MATHEMATICAL BOLD SMALL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D41B</td> <td>𝐛</td> <td>\\mbfb</td> <td>MATHEMATICAL BOLD SMALL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D41C</td> <td>𝐜</td> <td>\\mbfc</td> <td>MATHEMATICAL BOLD SMALL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D41D</td> <td>𝐝</td> <td>\\mbfd</td> <td>MATHEMATICAL BOLD SMALL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D41E</td> <td>𝐞</td> <td>\\mbfe</td> <td>MATHEMATICAL BOLD SMALL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D41F</td> <td>𝐟</td> <td>\\mbff</td> <td>MATHEMATICAL BOLD SMALL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D420</td> <td>𝐠</td> <td>\\mbfg</td> <td>MATHEMATICAL BOLD SMALL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D421</td> <td>𝐡</td> <td>\\mbfh</td> <td>MATHEMATICAL BOLD SMALL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D422</td> <td>𝐢</td> <td>\\mbfi</td> <td>MATHEMATICAL BOLD SMALL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D423</td> <td>𝐣</td> <td>\\mbfj</td> <td>MATHEMATICAL BOLD SMALL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D424</td> <td>𝐤</td> <td>\\mbfk</td> <td>MATHEMATICAL BOLD SMALL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D425</td> <td>𝐥</td> <td>\\mbfl</td> <td>MATHEMATICAL BOLD SMALL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D426</td> <td>𝐦</td> <td>\\mbfm</td> <td>MATHEMATICAL BOLD SMALL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D427</td> <td>𝐧</td> <td>\\mbfn</td> <td>MATHEMATICAL BOLD SMALL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D428</td> <td>𝐨</td> <td>\\mbfo</td> <td>MATHEMATICAL BOLD SMALL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D429</td> <td>𝐩</td> <td>\\mbfp</td> <td>MATHEMATICAL BOLD SMALL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D42A</td> <td>𝐪</td> <td>\\mbfq</td> <td>MATHEMATICAL BOLD SMALL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D42B</td> <td>𝐫</td> <td>\\mbfr</td> <td>MATHEMATICAL BOLD SMALL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D42C</td> <td>𝐬</td> <td>\\mbfs</td> <td>MATHEMATICAL BOLD SMALL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D42D</td> <td>𝐭</td> <td>\\mbft</td> <td>MATHEMATICAL BOLD SMALL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D42E</td> <td>𝐮</td> <td>\\mbfu</td> <td>MATHEMATICAL BOLD SMALL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D42F</td> <td>𝐯</td> <td>\\mbfv</td> <td>MATHEMATICAL BOLD SMALL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D430</td> <td>𝐰</td> <td>\\mbfw</td> <td>MATHEMATICAL BOLD SMALL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D431</td> <td>𝐱</td> <td>\\mbfx</td> <td>MATHEMATICAL BOLD SMALL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D432</td> <td>𝐲</td> <td>\\mbfy</td> <td>MATHEMATICAL BOLD SMALL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D433</td> <td>𝐳</td> <td>\\mbfz</td> <td>MATHEMATICAL BOLD SMALL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D434</td> <td>𝐴</td> <td>\\mitA</td> <td>MATHEMATICAL ITALIC CAPITAL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D435</td> <td>𝐵</td> <td>\\mitB</td> <td>MATHEMATICAL ITALIC CAPITAL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D436</td> <td>𝐶</td> <td>\\mitC</td> <td>MATHEMATICAL ITALIC CAPITAL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D437</td> <td>𝐷</td> <td>\\mitD</td> <td>MATHEMATICAL ITALIC CAPITAL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D438</td> <td>𝐸</td> <td>\\mitE</td> <td>MATHEMATICAL ITALIC CAPITAL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D439</td> <td>𝐹</td> <td>\\mitF</td> <td>MATHEMATICAL ITALIC CAPITAL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D43A</td> <td>𝐺</td> <td>\\mitG</td> <td>MATHEMATICAL ITALIC CAPITAL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D43B</td> <td>𝐻</td> <td>\\mitH</td> <td>MATHEMATICAL ITALIC CAPITAL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D43C</td> <td>𝐼</td> <td>\\mitI</td> <td>MATHEMATICAL ITALIC CAPITAL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D43D</td> <td>𝐽</td> <td>\\mitJ</td> <td>MATHEMATICAL ITALIC CAPITAL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D43E</td> <td>𝐾</td> <td>\\mitK</td> <td>MATHEMATICAL ITALIC CAPITAL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D43F</td> <td>𝐿</td> <td>\\mitL</td> <td>MATHEMATICAL ITALIC CAPITAL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D440</td> <td>𝑀</td> <td>\\mitM</td> <td>MATHEMATICAL ITALIC CAPITAL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D441</td> <td>𝑁</td> <td>\\mitN</td> <td>MATHEMATICAL ITALIC CAPITAL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D442</td> <td>𝑂</td> <td>\\mitO</td> <td>MATHEMATICAL ITALIC CAPITAL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D443</td> <td>𝑃</td> <td>\\mitP</td> <td>MATHEMATICAL ITALIC CAPITAL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D444</td> <td>𝑄</td> <td>\\mitQ</td> <td>MATHEMATICAL ITALIC CAPITAL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D445</td> <td>𝑅</td> <td>\\mitR</td> <td>MATHEMATICAL ITALIC CAPITAL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D446</td> <td>𝑆</td> <td>\\mitS</td> <td>MATHEMATICAL ITALIC CAPITAL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D447</td> <td>𝑇</td> <td>\\mitT</td> <td>MATHEMATICAL ITALIC CAPITAL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D448</td> <td>𝑈</td> <td>\\mitU</td> <td>MATHEMATICAL ITALIC CAPITAL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D449</td> <td>𝑉</td> <td>\\mitV</td> <td>MATHEMATICAL ITALIC CAPITAL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D44A</td> <td>𝑊</td> <td>\\mitW</td> <td>MATHEMATICAL ITALIC CAPITAL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D44B</td> <td>𝑋</td> <td>\\mitX</td> <td>MATHEMATICAL ITALIC CAPITAL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D44C</td> <td>𝑌</td> <td>\\mitY</td> <td>MATHEMATICAL ITALIC CAPITAL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D44D</td> <td>𝑍</td> <td>\\mitZ</td> <td>MATHEMATICAL ITALIC CAPITAL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D44E</td> <td>𝑎</td> <td>\\mita</td> <td>MATHEMATICAL ITALIC SMALL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D44F</td> <td>𝑏</td> <td>\\mitb</td> <td>MATHEMATICAL ITALIC SMALL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D450</td> <td>𝑐</td> <td>\\mitc</td> <td>MATHEMATICAL ITALIC SMALL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D451</td> <td>𝑑</td> <td>\\mitd</td> <td>MATHEMATICAL ITALIC SMALL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D452</td> <td>𝑒</td> <td>\\mite</td> <td>MATHEMATICAL ITALIC SMALL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D453</td> <td>𝑓</td> <td>\\mitf</td> <td>MATHEMATICAL ITALIC SMALL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D454</td> <td>𝑔</td> <td>\\mitg</td> <td>MATHEMATICAL ITALIC SMALL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D456</td> <td>𝑖</td> <td>\\miti</td> <td>MATHEMATICAL ITALIC SMALL I</td> </tr> <tr class=\"row-odd\">\n<td>U+1D457</td> <td>𝑗</td> <td>\\mitj</td> <td>MATHEMATICAL ITALIC SMALL J</td> </tr> <tr class=\"row-even\">\n<td>U+1D458</td> <td>𝑘</td> <td>\\mitk</td> <td>MATHEMATICAL ITALIC SMALL K</td> </tr> <tr class=\"row-odd\">\n<td>U+1D459</td> <td>𝑙</td> <td>\\mitl</td> <td>MATHEMATICAL ITALIC SMALL L</td> </tr> <tr class=\"row-even\">\n<td>U+1D45A</td> <td>𝑚</td> <td>\\mitm</td> <td>MATHEMATICAL ITALIC SMALL M</td> </tr> <tr class=\"row-odd\">\n<td>U+1D45B</td> <td>𝑛</td> <td>\\mitn</td> <td>MATHEMATICAL ITALIC SMALL N</td> </tr> <tr class=\"row-even\">\n<td>U+1D45C</td> <td>𝑜</td> <td>\\mito</td> <td>MATHEMATICAL ITALIC SMALL O</td> </tr> <tr class=\"row-odd\">\n<td>U+1D45D</td> <td>𝑝</td> <td>\\mitp</td> <td>MATHEMATICAL ITALIC SMALL P</td> </tr> <tr class=\"row-even\">\n<td>U+1D45E</td> <td>𝑞</td> <td>\\mitq</td> <td>MATHEMATICAL ITALIC SMALL Q</td> </tr> <tr class=\"row-odd\">\n<td>U+1D45F</td> <td>𝑟</td> <td>\\mitr</td> <td>MATHEMATICAL ITALIC SMALL R</td> </tr> <tr class=\"row-even\">\n<td>U+1D460</td> <td>𝑠</td> <td>\\mits</td> <td>MATHEMATICAL ITALIC SMALL S</td> </tr> <tr class=\"row-odd\">\n<td>U+1D461</td> <td>𝑡</td> <td>\\mitt</td> <td>MATHEMATICAL ITALIC SMALL T</td> </tr> <tr class=\"row-even\">\n<td>U+1D462</td> <td>𝑢</td> <td>\\mitu</td> <td>MATHEMATICAL ITALIC SMALL U</td> </tr> <tr class=\"row-odd\">\n<td>U+1D463</td> <td>𝑣</td> <td>\\mitv</td> <td>MATHEMATICAL ITALIC SMALL V</td> </tr> <tr class=\"row-even\">\n<td>U+1D464</td> <td>𝑤</td> <td>\\mitw</td> <td>MATHEMATICAL ITALIC SMALL W</td> </tr> <tr class=\"row-odd\">\n<td>U+1D465</td> <td>𝑥</td> <td>\\mitx</td> <td>MATHEMATICAL ITALIC SMALL X</td> </tr> <tr class=\"row-even\">\n<td>U+1D466</td> <td>𝑦</td> <td>\\mity</td> <td>MATHEMATICAL ITALIC SMALL Y</td> </tr> <tr class=\"row-odd\">\n<td>U+1D467</td> <td>𝑧</td> <td>\\mitz</td> <td>MATHEMATICAL ITALIC SMALL Z</td> </tr> <tr class=\"row-even\">\n<td>U+1D468</td> <td>𝑨</td> <td>\\mbfitA</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL A</td> </tr> <tr class=\"row-odd\">\n<td>U+1D469</td> <td>𝑩</td> <td>\\mbfitB</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL B</td> </tr> <tr class=\"row-even\">\n<td>U+1D46A</td> <td>𝑪</td> <td>\\mbfitC</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL C</td> </tr> <tr class=\"row-odd\">\n<td>U+1D46B</td> <td>𝑫</td> <td>\\mbfitD</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL D</td> </tr> <tr class=\"row-even\">\n<td>U+1D46C</td> <td>𝑬</td> <td>\\mbfitE</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL E</td> </tr> <tr class=\"row-odd\">\n<td>U+1D46D</td> <td>𝑭</td> <td>\\mbfitF</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL F</td> </tr> <tr class=\"row-even\">\n<td>U+1D46E</td> <td>𝑮</td> <td>\\mbfitG</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL G</td> </tr> <tr class=\"row-odd\">\n<td>U+1D46F</td> <td>𝑯</td> <td>\\mbfitH</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL H</td> </tr> <tr class=\"row-even\">\n<td>U+1D470</td> <td>𝑰</td> <td>\\mbfitI</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL I</td> </tr> <tr class=\"row-odd\">\n<td>U+1D471</td> <td>𝑱</td> <td>\\mbfitJ</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL J</td> </tr> <tr class=\"row-even\">\n<td>U+1D472</td> <td>𝑲</td> <td>\\mbfitK</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL K</td> </tr> <tr class=\"row-odd\">\n<td>U+1D473</td> <td>𝑳</td> <td>\\mbfitL</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL L</td> </tr> <tr class=\"row-even\">\n<td>U+1D474</td> <td>𝑴</td> <td>\\mbfitM</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL M</td> </tr> <tr class=\"row-odd\">\n<td>U+1D475</td> <td>𝑵</td> <td>\\mbfitN</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL N</td> </tr> <tr class=\"row-even\">\n<td>U+1D476</td> <td>𝑶</td> <td>\\mbfitO</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL O</td> </tr> <tr class=\"row-odd\">\n<td>U+1D477</td> <td>𝑷</td> <td>\\mbfitP</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL P</td> </tr> <tr class=\"row-even\">\n<td>U+1D478</td> <td>𝑸</td> <td>\\mbfitQ</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL Q</td> </tr> <tr class=\"row-odd\">\n<td>U+1D479</td> <td>𝑹</td> <td>\\mbfitR</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL R</td> </tr> <tr class=\"row-even\">\n<td>U+1D47A</td> <td>𝑺</td> <td>\\mbfitS</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL S</td> </tr> <tr class=\"row-odd\">\n<td>U+1D47B</td> <td>𝑻</td> <td>\\mbfitT</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL T</td> </tr> <tr class=\"row-even\">\n<td>U+1D47C</td> <td>𝑼</td> <td>\\mbfitU</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL U</td> </tr> <tr class=\"row-odd\">\n<td>U+1D47D</td> <td>𝑽</td> <td>\\mbfitV</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL V</td> </tr> <tr class=\"row-even\">\n<td>U+1D47E</td> <td>𝑾</td> <td>\\mbfitW</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL W</td> </tr> <tr class=\"row-odd\">\n<td>U+1D47F</td> <td>𝑿</td> <td>\\mbfitX</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL X</td> </tr> <tr class=\"row-even\">\n<td>U+1D480</td> <td>𝒀</td> <td>\\mbfitY</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL Y</td> </tr> <tr class=\"row-odd\">\n<td>U+1D481</td> <td>𝒁</td> <td>\\mbfitZ</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL Z</td> </tr> <tr class=\"row-even\">\n<td>U+1D482</td> <td>𝒂</td> <td>\\mbfita</td> <td>MATHEMATICAL BOLD ITALIC SMALL A</td> </tr> <tr class=\"row-odd\">\n<td>U+1D483</td> <td>𝒃</td> <td>\\mbfitb</td> <td>MATHEMATICAL BOLD ITALIC SMALL B</td> </tr> <tr class=\"row-even\">\n<td>U+1D484</td> <td>𝒄</td> <td>\\mbfitc</td> <td>MATHEMATICAL BOLD ITALIC SMALL C</td> </tr> <tr class=\"row-odd\">\n<td>U+1D485</td> <td>𝒅</td> <td>\\mbfitd</td> <td>MATHEMATICAL BOLD ITALIC SMALL D</td> </tr> <tr class=\"row-even\">\n<td>U+1D486</td> <td>𝒆</td> <td>\\mbfite</td> <td>MATHEMATICAL BOLD ITALIC SMALL E</td> </tr> <tr class=\"row-odd\">\n<td>U+1D487</td> <td>𝒇</td> <td>\\mbfitf</td> <td>MATHEMATICAL BOLD ITALIC SMALL F</td> </tr> <tr class=\"row-even\">\n<td>U+1D488</td> <td>𝒈</td> <td>\\mbfitg</td> <td>MATHEMATICAL BOLD ITALIC SMALL G</td> </tr> <tr class=\"row-odd\">\n<td>U+1D489</td> <td>𝒉</td> <td>\\mbfith</td> <td>MATHEMATICAL BOLD ITALIC SMALL H</td> </tr> <tr class=\"row-even\">\n<td>U+1D48A</td> <td>𝒊</td> <td>\\mbfiti</td> <td>MATHEMATICAL BOLD ITALIC SMALL I</td> </tr> <tr class=\"row-odd\">\n<td>U+1D48B</td> <td>𝒋</td> <td>\\mbfitj</td> <td>MATHEMATICAL BOLD ITALIC SMALL J</td> </tr> <tr class=\"row-even\">\n<td>U+1D48C</td> <td>𝒌</td> <td>\\mbfitk</td> <td>MATHEMATICAL BOLD ITALIC SMALL K</td> </tr> <tr class=\"row-odd\">\n<td>U+1D48D</td> <td>𝒍</td> <td>\\mbfitl</td> <td>MATHEMATICAL BOLD ITALIC SMALL L</td> </tr> <tr class=\"row-even\">\n<td>U+1D48E</td> <td>𝒎</td> <td>\\mbfitm</td> <td>MATHEMATICAL BOLD ITALIC SMALL M</td> </tr> <tr class=\"row-odd\">\n<td>U+1D48F</td> <td>𝒏</td> <td>\\mbfitn</td> <td>MATHEMATICAL BOLD ITALIC SMALL N</td> </tr> <tr class=\"row-even\">\n<td>U+1D490</td> <td>𝒐</td> <td>\\mbfito</td> <td>MATHEMATICAL BOLD ITALIC SMALL O</td> </tr> <tr class=\"row-odd\">\n<td>U+1D491</td> <td>𝒑</td> <td>\\mbfitp</td> <td>MATHEMATICAL BOLD ITALIC SMALL P</td> </tr> <tr class=\"row-even\">\n<td>U+1D492</td> <td>𝒒</td> <td>\\mbfitq</td> <td>MATHEMATICAL BOLD ITALIC SMALL Q</td> </tr> <tr class=\"row-odd\">\n<td>U+1D493</td> <td>𝒓</td> <td>\\mbfitr</td> <td>MATHEMATICAL BOLD ITALIC SMALL R</td> </tr> <tr class=\"row-even\">\n<td>U+1D494</td> <td>𝒔</td> <td>\\mbfits</td> <td>MATHEMATICAL BOLD ITALIC SMALL S</td> </tr> <tr class=\"row-odd\">\n<td>U+1D495</td> <td>𝒕</td> <td>\\mbfitt</td> <td>MATHEMATICAL BOLD ITALIC SMALL T</td> </tr> <tr class=\"row-even\">\n<td>U+1D496</td> <td>𝒖</td> <td>\\mbfitu</td> <td>MATHEMATICAL BOLD ITALIC SMALL U</td> </tr> <tr class=\"row-odd\">\n<td>U+1D497</td> <td>𝒗</td> <td>\\mbfitv</td> <td>MATHEMATICAL BOLD ITALIC SMALL V</td> </tr> <tr class=\"row-even\">\n<td>U+1D498</td> <td>𝒘</td> <td>\\mbfitw</td> <td>MATHEMATICAL BOLD ITALIC SMALL W</td> </tr> <tr class=\"row-odd\">\n<td>U+1D499</td> <td>𝒙</td> <td>\\mbfitx</td> <td>MATHEMATICAL BOLD ITALIC SMALL X</td> </tr> <tr class=\"row-even\">\n<td>U+1D49A</td> <td>𝒚</td> <td>\\mbfity</td> <td>MATHEMATICAL BOLD ITALIC SMALL Y</td> </tr> <tr class=\"row-odd\">\n<td>U+1D49B</td> <td>𝒛</td> <td>\\mbfitz</td> <td>MATHEMATICAL BOLD ITALIC SMALL Z</td> </tr> <tr class=\"row-even\">\n<td>U+1D49C</td> <td>𝒜</td> <td>\\mscrA</td> <td>MATHEMATICAL SCRIPT CAPITAL A</td> </tr> <tr class=\"row-odd\">\n<td>U+1D49E</td> <td>𝒞</td> <td>\\mscrC</td> <td>MATHEMATICAL SCRIPT CAPITAL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D49F</td> <td>𝒟</td> <td>\\mscrD</td> <td>MATHEMATICAL SCRIPT CAPITAL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4A2</td> <td>𝒢</td> <td>\\mscrG</td> <td>MATHEMATICAL SCRIPT CAPITAL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D4A5</td> <td>𝒥</td> <td>\\mscrJ</td> <td>MATHEMATICAL SCRIPT CAPITAL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4A6</td> <td>𝒦</td> <td>\\mscrK</td> <td>MATHEMATICAL SCRIPT CAPITAL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D4A9</td> <td>𝒩</td> <td>\\mscrN</td> <td>MATHEMATICAL SCRIPT CAPITAL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4AA</td> <td>𝒪</td> <td>\\mscrO</td> <td>MATHEMATICAL SCRIPT CAPITAL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D4AB</td> <td>𝒫</td> <td>\\mscrP</td> <td>MATHEMATICAL SCRIPT CAPITAL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4AC</td> <td>𝒬</td> <td>\\mscrQ</td> <td>MATHEMATICAL SCRIPT CAPITAL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D4AE</td> <td>𝒮</td> <td>\\mscrS</td> <td>MATHEMATICAL SCRIPT CAPITAL S</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4AF</td> <td>𝒯</td> <td>\\mscrT</td> <td>MATHEMATICAL SCRIPT CAPITAL T</td> </tr> <tr class=\"row-even\">\n<td>U+1D4B0</td> <td>𝒰</td> <td>\\mscrU</td> <td>MATHEMATICAL SCRIPT CAPITAL U</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4B1</td> <td>𝒱</td> <td>\\mscrV</td> <td>MATHEMATICAL SCRIPT CAPITAL V</td> </tr> <tr class=\"row-even\">\n<td>U+1D4B2</td> <td>𝒲</td> <td>\\mscrW</td> <td>MATHEMATICAL SCRIPT CAPITAL W</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4B3</td> <td>𝒳</td> <td>\\mscrX</td> <td>MATHEMATICAL SCRIPT CAPITAL X</td> </tr> <tr class=\"row-even\">\n<td>U+1D4B4</td> <td>𝒴</td> <td>\\mscrY</td> <td>MATHEMATICAL SCRIPT CAPITAL Y</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4B5</td> <td>𝒵</td> <td>\\mscrZ</td> <td>MATHEMATICAL SCRIPT CAPITAL Z</td> </tr> <tr class=\"row-even\">\n<td>U+1D4B6</td> <td>𝒶</td> <td>\\mscra</td> <td>MATHEMATICAL SCRIPT SMALL A</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4B7</td> <td>𝒷</td> <td>\\mscrb</td> <td>MATHEMATICAL SCRIPT SMALL B</td> </tr> <tr class=\"row-even\">\n<td>U+1D4B8</td> <td>𝒸</td> <td>\\mscrc</td> <td>MATHEMATICAL SCRIPT SMALL C</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4B9</td> <td>𝒹</td> <td>\\mscrd</td> <td>MATHEMATICAL SCRIPT SMALL D</td> </tr> <tr class=\"row-even\">\n<td>U+1D4BB</td> <td>𝒻</td> <td>\\mscrf</td> <td>MATHEMATICAL SCRIPT SMALL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4BD</td> <td>𝒽</td> <td>\\mscrh</td> <td>MATHEMATICAL SCRIPT SMALL H</td> </tr> <tr class=\"row-even\">\n<td>U+1D4BE</td> <td>𝒾</td> <td>\\mscri</td> <td>MATHEMATICAL SCRIPT SMALL I</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4BF</td> <td>𝒿</td> <td>\\mscrj</td> <td>MATHEMATICAL SCRIPT SMALL J</td> </tr> <tr class=\"row-even\">\n<td>U+1D4C0</td> <td>𝓀</td> <td>\\mscrk</td> <td>MATHEMATICAL SCRIPT SMALL K</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4C1</td> <td>𝓁</td> <td>\\mscrl</td> <td>MATHEMATICAL SCRIPT SMALL L</td> </tr> <tr class=\"row-even\">\n<td>U+1D4C2</td> <td>𝓂</td> <td>\\mscrm</td> <td>MATHEMATICAL SCRIPT SMALL M</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4C3</td> <td>𝓃</td> <td>\\mscrn</td> <td>MATHEMATICAL SCRIPT SMALL N</td> </tr> <tr class=\"row-even\">\n<td>U+1D4C5</td> <td>𝓅</td> <td>\\mscrp</td> <td>MATHEMATICAL SCRIPT SMALL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4C6</td> <td>𝓆</td> <td>\\mscrq</td> <td>MATHEMATICAL SCRIPT SMALL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D4C7</td> <td>𝓇</td> <td>\\mscrr</td> <td>MATHEMATICAL SCRIPT SMALL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4C8</td> <td>𝓈</td> <td>\\mscrs</td> <td>MATHEMATICAL SCRIPT SMALL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D4C9</td> <td>𝓉</td> <td>\\mscrt</td> <td>MATHEMATICAL SCRIPT SMALL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4CA</td> <td>𝓊</td> <td>\\mscru</td> <td>MATHEMATICAL SCRIPT SMALL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D4CB</td> <td>𝓋</td> <td>\\mscrv</td> <td>MATHEMATICAL SCRIPT SMALL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4CC</td> <td>𝓌</td> <td>\\mscrw</td> <td>MATHEMATICAL SCRIPT SMALL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D4CD</td> <td>𝓍</td> <td>\\mscrx</td> <td>MATHEMATICAL SCRIPT SMALL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4CE</td> <td>𝓎</td> <td>\\mscry</td> <td>MATHEMATICAL SCRIPT SMALL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D4CF</td> <td>𝓏</td> <td>\\mscrz</td> <td>MATHEMATICAL SCRIPT SMALL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4D0</td> <td>𝓐</td> <td>\\mbfscrA</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D4D1</td> <td>𝓑</td> <td>\\mbfscrB</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4D2</td> <td>𝓒</td> <td>\\mbfscrC</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D4D3</td> <td>𝓓</td> <td>\\mbfscrD</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4D4</td> <td>𝓔</td> <td>\\mbfscrE</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D4D5</td> <td>𝓕</td> <td>\\mbfscrF</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4D6</td> <td>𝓖</td> <td>\\mbfscrG</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D4D7</td> <td>𝓗</td> <td>\\mbfscrH</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4D8</td> <td>𝓘</td> <td>\\mbfscrI</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D4D9</td> <td>𝓙</td> <td>\\mbfscrJ</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4DA</td> <td>𝓚</td> <td>\\mbfscrK</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D4DB</td> <td>𝓛</td> <td>\\mbfscrL</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4DC</td> <td>𝓜</td> <td>\\mbfscrM</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D4DD</td> <td>𝓝</td> <td>\\mbfscrN</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4DE</td> <td>𝓞</td> <td>\\mbfscrO</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D4DF</td> <td>𝓟</td> <td>\\mbfscrP</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4E0</td> <td>𝓠</td> <td>\\mbfscrQ</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D4E1</td> <td>𝓡</td> <td>\\mbfscrR</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4E2</td> <td>𝓢</td> <td>\\mbfscrS</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D4E3</td> <td>𝓣</td> <td>\\mbfscrT</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4E4</td> <td>𝓤</td> <td>\\mbfscrU</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D4E5</td> <td>𝓥</td> <td>\\mbfscrV</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4E6</td> <td>𝓦</td> <td>\\mbfscrW</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D4E7</td> <td>𝓧</td> <td>\\mbfscrX</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4E8</td> <td>𝓨</td> <td>\\mbfscrY</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D4E9</td> <td>𝓩</td> <td>\\mbfscrZ</td> <td>MATHEMATICAL BOLD SCRIPT CAPITAL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4EA</td> <td>𝓪</td> <td>\\mbfscra</td> <td>MATHEMATICAL BOLD SCRIPT SMALL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D4EB</td> <td>𝓫</td> <td>\\mbfscrb</td> <td>MATHEMATICAL BOLD SCRIPT SMALL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4EC</td> <td>𝓬</td> <td>\\mbfscrc</td> <td>MATHEMATICAL BOLD SCRIPT SMALL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D4ED</td> <td>𝓭</td> <td>\\mbfscrd</td> <td>MATHEMATICAL BOLD SCRIPT SMALL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4EE</td> <td>𝓮</td> <td>\\mbfscre</td> <td>MATHEMATICAL BOLD SCRIPT SMALL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D4EF</td> <td>𝓯</td> <td>\\mbfscrf</td> <td>MATHEMATICAL BOLD SCRIPT SMALL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4F0</td> <td>𝓰</td> <td>\\mbfscrg</td> <td>MATHEMATICAL BOLD SCRIPT SMALL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D4F1</td> <td>𝓱</td> <td>\\mbfscrh</td> <td>MATHEMATICAL BOLD SCRIPT SMALL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4F2</td> <td>𝓲</td> <td>\\mbfscri</td> <td>MATHEMATICAL BOLD SCRIPT SMALL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D4F3</td> <td>𝓳</td> <td>\\mbfscrj</td> <td>MATHEMATICAL BOLD SCRIPT SMALL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4F4</td> <td>𝓴</td> <td>\\mbfscrk</td> <td>MATHEMATICAL BOLD SCRIPT SMALL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D4F5</td> <td>𝓵</td> <td>\\mbfscrl</td> <td>MATHEMATICAL BOLD SCRIPT SMALL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4F6</td> <td>𝓶</td> <td>\\mbfscrm</td> <td>MATHEMATICAL BOLD SCRIPT SMALL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D4F7</td> <td>𝓷</td> <td>\\mbfscrn</td> <td>MATHEMATICAL BOLD SCRIPT SMALL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4F8</td> <td>𝓸</td> <td>\\mbfscro</td> <td>MATHEMATICAL BOLD SCRIPT SMALL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D4F9</td> <td>𝓹</td> <td>\\mbfscrp</td> <td>MATHEMATICAL BOLD SCRIPT SMALL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4FA</td> <td>𝓺</td> <td>\\mbfscrq</td> <td>MATHEMATICAL BOLD SCRIPT SMALL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D4FB</td> <td>𝓻</td> <td>\\mbfscrr</td> <td>MATHEMATICAL BOLD SCRIPT SMALL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4FC</td> <td>𝓼</td> <td>\\mbfscrs</td> <td>MATHEMATICAL BOLD SCRIPT SMALL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D4FD</td> <td>𝓽</td> <td>\\mbfscrt</td> <td>MATHEMATICAL BOLD SCRIPT SMALL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D4FE</td> <td>𝓾</td> <td>\\mbfscru</td> <td>MATHEMATICAL BOLD SCRIPT SMALL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D4FF</td> <td>𝓿</td> <td>\\mbfscrv</td> <td>MATHEMATICAL BOLD SCRIPT SMALL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D500</td> <td>𝔀</td> <td>\\mbfscrw</td> <td>MATHEMATICAL BOLD SCRIPT SMALL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D501</td> <td>𝔁</td> <td>\\mbfscrx</td> <td>MATHEMATICAL BOLD SCRIPT SMALL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D502</td> <td>𝔂</td> <td>\\mbfscry</td> <td>MATHEMATICAL BOLD SCRIPT SMALL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D503</td> <td>𝔃</td> <td>\\mbfscrz</td> <td>MATHEMATICAL BOLD SCRIPT SMALL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D504</td> <td>𝔄</td> <td>\\mfrakA</td> <td>MATHEMATICAL FRAKTUR CAPITAL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D505</td> <td>𝔅</td> <td>\\mfrakB</td> <td>MATHEMATICAL FRAKTUR CAPITAL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D507</td> <td>𝔇</td> <td>\\mfrakD</td> <td>MATHEMATICAL FRAKTUR CAPITAL D</td> </tr> <tr class=\"row-even\">\n<td>U+1D508</td> <td>𝔈</td> <td>\\mfrakE</td> <td>MATHEMATICAL FRAKTUR CAPITAL E</td> </tr> <tr class=\"row-odd\">\n<td>U+1D509</td> <td>𝔉</td> <td>\\mfrakF</td> <td>MATHEMATICAL FRAKTUR CAPITAL F</td> </tr> <tr class=\"row-even\">\n<td>U+1D50A</td> <td>𝔊</td> <td>\\mfrakG</td> <td>MATHEMATICAL FRAKTUR CAPITAL G</td> </tr> <tr class=\"row-odd\">\n<td>U+1D50D</td> <td>𝔍</td> <td>\\mfrakJ</td> <td>MATHEMATICAL FRAKTUR CAPITAL J</td> </tr> <tr class=\"row-even\">\n<td>U+1D50E</td> <td>𝔎</td> <td>\\mfrakK</td> <td>MATHEMATICAL FRAKTUR CAPITAL K</td> </tr> <tr class=\"row-odd\">\n<td>U+1D50F</td> <td>𝔏</td> <td>\\mfrakL</td> <td>MATHEMATICAL FRAKTUR CAPITAL L</td> </tr> <tr class=\"row-even\">\n<td>U+1D510</td> <td>𝔐</td> <td>\\mfrakM</td> <td>MATHEMATICAL FRAKTUR CAPITAL M</td> </tr> <tr class=\"row-odd\">\n<td>U+1D511</td> <td>𝔑</td> <td>\\mfrakN</td> <td>MATHEMATICAL FRAKTUR CAPITAL N</td> </tr> <tr class=\"row-even\">\n<td>U+1D512</td> <td>𝔒</td> <td>\\mfrakO</td> <td>MATHEMATICAL FRAKTUR CAPITAL O</td> </tr> <tr class=\"row-odd\">\n<td>U+1D513</td> <td>𝔓</td> <td>\\mfrakP</td> <td>MATHEMATICAL FRAKTUR CAPITAL P</td> </tr> <tr class=\"row-even\">\n<td>U+1D514</td> <td>𝔔</td> <td>\\mfrakQ</td> <td>MATHEMATICAL FRAKTUR CAPITAL Q</td> </tr> <tr class=\"row-odd\">\n<td>U+1D516</td> <td>𝔖</td> <td>\\mfrakS</td> <td>MATHEMATICAL FRAKTUR CAPITAL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D517</td> <td>𝔗</td> <td>\\mfrakT</td> <td>MATHEMATICAL FRAKTUR CAPITAL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D518</td> <td>𝔘</td> <td>\\mfrakU</td> <td>MATHEMATICAL FRAKTUR CAPITAL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D519</td> <td>𝔙</td> <td>\\mfrakV</td> <td>MATHEMATICAL FRAKTUR CAPITAL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D51A</td> <td>𝔚</td> <td>\\mfrakW</td> <td>MATHEMATICAL FRAKTUR CAPITAL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D51B</td> <td>𝔛</td> <td>\\mfrakX</td> <td>MATHEMATICAL FRAKTUR CAPITAL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D51C</td> <td>𝔜</td> <td>\\mfrakY</td> <td>MATHEMATICAL FRAKTUR CAPITAL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D51E</td> <td>𝔞</td> <td>\\mfraka</td> <td>MATHEMATICAL FRAKTUR SMALL A</td> </tr> <tr class=\"row-odd\">\n<td>U+1D51F</td> <td>𝔟</td> <td>\\mfrakb</td> <td>MATHEMATICAL FRAKTUR SMALL B</td> </tr> <tr class=\"row-even\">\n<td>U+1D520</td> <td>𝔠</td> <td>\\mfrakc</td> <td>MATHEMATICAL FRAKTUR SMALL C</td> </tr> <tr class=\"row-odd\">\n<td>U+1D521</td> <td>𝔡</td> <td>\\mfrakd</td> <td>MATHEMATICAL FRAKTUR SMALL D</td> </tr> <tr class=\"row-even\">\n<td>U+1D522</td> <td>𝔢</td> <td>\\mfrake</td> <td>MATHEMATICAL FRAKTUR SMALL E</td> </tr> <tr class=\"row-odd\">\n<td>U+1D523</td> <td>𝔣</td> <td>\\mfrakf</td> <td>MATHEMATICAL FRAKTUR SMALL F</td> </tr> <tr class=\"row-even\">\n<td>U+1D524</td> <td>𝔤</td> <td>\\mfrakg</td> <td>MATHEMATICAL FRAKTUR SMALL G</td> </tr> <tr class=\"row-odd\">\n<td>U+1D525</td> <td>𝔥</td> <td>\\mfrakh</td> <td>MATHEMATICAL FRAKTUR SMALL H</td> </tr> <tr class=\"row-even\">\n<td>U+1D526</td> <td>𝔦</td> <td>\\mfraki</td> <td>MATHEMATICAL FRAKTUR SMALL I</td> </tr> <tr class=\"row-odd\">\n<td>U+1D527</td> <td>𝔧</td> <td>\\mfrakj</td> <td>MATHEMATICAL FRAKTUR SMALL J</td> </tr> <tr class=\"row-even\">\n<td>U+1D528</td> <td>𝔨</td> <td>\\mfrakk</td> <td>MATHEMATICAL FRAKTUR SMALL K</td> </tr> <tr class=\"row-odd\">\n<td>U+1D529</td> <td>𝔩</td> <td>\\mfrakl</td> <td>MATHEMATICAL FRAKTUR SMALL L</td> </tr> <tr class=\"row-even\">\n<td>U+1D52A</td> <td>𝔪</td> <td>\\mfrakm</td> <td>MATHEMATICAL FRAKTUR SMALL M</td> </tr> <tr class=\"row-odd\">\n<td>U+1D52B</td> <td>𝔫</td> <td>\\mfrakn</td> <td>MATHEMATICAL FRAKTUR SMALL N</td> </tr> <tr class=\"row-even\">\n<td>U+1D52C</td> <td>𝔬</td> <td>\\mfrako</td> <td>MATHEMATICAL FRAKTUR SMALL O</td> </tr> <tr class=\"row-odd\">\n<td>U+1D52D</td> <td>𝔭</td> <td>\\mfrakp</td> <td>MATHEMATICAL FRAKTUR SMALL P</td> </tr> <tr class=\"row-even\">\n<td>U+1D52E</td> <td>𝔮</td> <td>\\mfrakq</td> <td>MATHEMATICAL FRAKTUR SMALL Q</td> </tr> <tr class=\"row-odd\">\n<td>U+1D52F</td> <td>𝔯</td> <td>\\mfrakr</td> <td>MATHEMATICAL FRAKTUR SMALL R</td> </tr> <tr class=\"row-even\">\n<td>U+1D530</td> <td>𝔰</td> <td>\\mfraks</td> <td>MATHEMATICAL FRAKTUR SMALL S</td> </tr> <tr class=\"row-odd\">\n<td>U+1D531</td> <td>𝔱</td> <td>\\mfrakt</td> <td>MATHEMATICAL FRAKTUR SMALL T</td> </tr> <tr class=\"row-even\">\n<td>U+1D532</td> <td>𝔲</td> <td>\\mfraku</td> <td>MATHEMATICAL FRAKTUR SMALL U</td> </tr> <tr class=\"row-odd\">\n<td>U+1D533</td> <td>𝔳</td> <td>\\mfrakv</td> <td>MATHEMATICAL FRAKTUR SMALL V</td> </tr> <tr class=\"row-even\">\n<td>U+1D534</td> <td>𝔴</td> <td>\\mfrakw</td> <td>MATHEMATICAL FRAKTUR SMALL W</td> </tr> <tr class=\"row-odd\">\n<td>U+1D535</td> <td>𝔵</td> <td>\\mfrakx</td> <td>MATHEMATICAL FRAKTUR SMALL X</td> </tr> <tr class=\"row-even\">\n<td>U+1D536</td> <td>𝔶</td> <td>\\mfraky</td> <td>MATHEMATICAL FRAKTUR SMALL Y</td> </tr> <tr class=\"row-odd\">\n<td>U+1D537</td> <td>𝔷</td> <td>\\mfrakz</td> <td>MATHEMATICAL FRAKTUR SMALL Z</td> </tr> <tr class=\"row-even\">\n<td>U+1D538</td> <td>𝔸</td> <td>\\BbbA</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL A</td> </tr> <tr class=\"row-odd\">\n<td>U+1D539</td> <td>𝔹</td> <td>\\BbbB</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL B</td> </tr> <tr class=\"row-even\">\n<td>U+1D53B</td> <td>𝔻</td> <td>\\BbbD</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D53C</td> <td>𝔼</td> <td>\\BbbE</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D53D</td> <td>𝔽</td> <td>\\BbbF</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D53E</td> <td>𝔾</td> <td>\\BbbG</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D540</td> <td>𝕀</td> <td>\\BbbI</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL I</td> </tr> <tr class=\"row-odd\">\n<td>U+1D541</td> <td>𝕁</td> <td>\\BbbJ</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL J</td> </tr> <tr class=\"row-even\">\n<td>U+1D542</td> <td>𝕂</td> <td>\\BbbK</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL K</td> </tr> <tr class=\"row-odd\">\n<td>U+1D543</td> <td>𝕃</td> <td>\\BbbL</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL L</td> </tr> <tr class=\"row-even\">\n<td>U+1D544</td> <td>𝕄</td> <td>\\BbbM</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL M</td> </tr> <tr class=\"row-odd\">\n<td>U+1D546</td> <td>𝕆</td> <td>\\BbbO</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D54A</td> <td>𝕊</td> <td>\\BbbS</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL S</td> </tr> <tr class=\"row-odd\">\n<td>U+1D54B</td> <td>𝕋</td> <td>\\BbbT</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL T</td> </tr> <tr class=\"row-even\">\n<td>U+1D54C</td> <td>𝕌</td> <td>\\BbbU</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL U</td> </tr> <tr class=\"row-odd\">\n<td>U+1D54D</td> <td>𝕍</td> <td>\\BbbV</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL V</td> </tr> <tr class=\"row-even\">\n<td>U+1D54E</td> <td>𝕎</td> <td>\\BbbW</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL W</td> </tr> <tr class=\"row-odd\">\n<td>U+1D54F</td> <td>𝕏</td> <td>\\BbbX</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL X</td> </tr> <tr class=\"row-even\">\n<td>U+1D550</td> <td>𝕐</td> <td>\\BbbY</td> <td>MATHEMATICAL DOUBLE-STRUCK CAPITAL Y</td> </tr> <tr class=\"row-odd\">\n<td>U+1D552</td> <td>𝕒</td> <td>\\Bbba</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D553</td> <td>𝕓</td> <td>\\Bbbb</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D554</td> <td>𝕔</td> <td>\\Bbbc</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D555</td> <td>𝕕</td> <td>\\Bbbd</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D556</td> <td>𝕖</td> <td>\\Bbbe</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D557</td> <td>𝕗</td> <td>\\Bbbf</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D558</td> <td>𝕘</td> <td>\\Bbbg</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D559</td> <td>𝕙</td> <td>\\Bbbh</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D55A</td> <td>𝕚</td> <td>\\Bbbi</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D55B</td> <td>𝕛</td> <td>\\Bbbj</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D55C</td> <td>𝕜</td> <td>\\Bbbk</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D55D</td> <td>𝕝</td> <td>\\Bbbl</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D55E</td> <td>𝕞</td> <td>\\Bbbm</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D55F</td> <td>𝕟</td> <td>\\Bbbn</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D560</td> <td>𝕠</td> <td>\\Bbbo</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D561</td> <td>𝕡</td> <td>\\Bbbp</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D562</td> <td>𝕢</td> <td>\\Bbbq</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D563</td> <td>𝕣</td> <td>\\Bbbr</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D564</td> <td>𝕤</td> <td>\\Bbbs</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D565</td> <td>𝕥</td> <td>\\Bbbt</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D566</td> <td>𝕦</td> <td>\\Bbbu</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D567</td> <td>𝕧</td> <td>\\Bbbv</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D568</td> <td>𝕨</td> <td>\\Bbbw</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D569</td> <td>𝕩</td> <td>\\Bbbx</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D56A</td> <td>𝕪</td> <td>\\Bbby</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D56B</td> <td>𝕫</td> <td>\\Bbbz</td> <td>MATHEMATICAL DOUBLE-STRUCK SMALL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D56C</td> <td>𝕬</td> <td>\\mbffrakA</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D56D</td> <td>𝕭</td> <td>\\mbffrakB</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D56E</td> <td>𝕮</td> <td>\\mbffrakC</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D56F</td> <td>𝕯</td> <td>\\mbffrakD</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D570</td> <td>𝕰</td> <td>\\mbffrakE</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D571</td> <td>𝕱</td> <td>\\mbffrakF</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D572</td> <td>𝕲</td> <td>\\mbffrakG</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D573</td> <td>𝕳</td> <td>\\mbffrakH</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D574</td> <td>𝕴</td> <td>\\mbffrakI</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D575</td> <td>𝕵</td> <td>\\mbffrakJ</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D576</td> <td>𝕶</td> <td>\\mbffrakK</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D577</td> <td>𝕷</td> <td>\\mbffrakL</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D578</td> <td>𝕸</td> <td>\\mbffrakM</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D579</td> <td>𝕹</td> <td>\\mbffrakN</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D57A</td> <td>𝕺</td> <td>\\mbffrakO</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D57B</td> <td>𝕻</td> <td>\\mbffrakP</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D57C</td> <td>𝕼</td> <td>\\mbffrakQ</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D57D</td> <td>𝕽</td> <td>\\mbffrakR</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D57E</td> <td>𝕾</td> <td>\\mbffrakS</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D57F</td> <td>𝕿</td> <td>\\mbffrakT</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D580</td> <td>𝖀</td> <td>\\mbffrakU</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D581</td> <td>𝖁</td> <td>\\mbffrakV</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D582</td> <td>𝖂</td> <td>\\mbffrakW</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D583</td> <td>𝖃</td> <td>\\mbffrakX</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D584</td> <td>𝖄</td> <td>\\mbffrakY</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D585</td> <td>𝖅</td> <td>\\mbffrakZ</td> <td>MATHEMATICAL BOLD FRAKTUR CAPITAL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D586</td> <td>𝖆</td> <td>\\mbffraka</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D587</td> <td>𝖇</td> <td>\\mbffrakb</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D588</td> <td>𝖈</td> <td>\\mbffrakc</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D589</td> <td>𝖉</td> <td>\\mbffrakd</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D58A</td> <td>𝖊</td> <td>\\mbffrake</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D58B</td> <td>𝖋</td> <td>\\mbffrakf</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D58C</td> <td>𝖌</td> <td>\\mbffrakg</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D58D</td> <td>𝖍</td> <td>\\mbffrakh</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D58E</td> <td>𝖎</td> <td>\\mbffraki</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D58F</td> <td>𝖏</td> <td>\\mbffrakj</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D590</td> <td>𝖐</td> <td>\\mbffrakk</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D591</td> <td>𝖑</td> <td>\\mbffrakl</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D592</td> <td>𝖒</td> <td>\\mbffrakm</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D593</td> <td>𝖓</td> <td>\\mbffrakn</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D594</td> <td>𝖔</td> <td>\\mbffrako</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D595</td> <td>𝖕</td> <td>\\mbffrakp</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D596</td> <td>𝖖</td> <td>\\mbffrakq</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D597</td> <td>𝖗</td> <td>\\mbffrakr</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D598</td> <td>𝖘</td> <td>\\mbffraks</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D599</td> <td>𝖙</td> <td>\\mbffrakt</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D59A</td> <td>𝖚</td> <td>\\mbffraku</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D59B</td> <td>𝖛</td> <td>\\mbffrakv</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D59C</td> <td>𝖜</td> <td>\\mbffrakw</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D59D</td> <td>𝖝</td> <td>\\mbffrakx</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D59E</td> <td>𝖞</td> <td>\\mbffraky</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D59F</td> <td>𝖟</td> <td>\\mbffrakz</td> <td>MATHEMATICAL BOLD FRAKTUR SMALL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5A0</td> <td>𝖠</td> <td>\\msansA</td> <td>MATHEMATICAL SANS-SERIF CAPITAL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D5A1</td> <td>𝖡</td> <td>\\msansB</td> <td>MATHEMATICAL SANS-SERIF CAPITAL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5A2</td> <td>𝖢</td> <td>\\msansC</td> <td>MATHEMATICAL SANS-SERIF CAPITAL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D5A3</td> <td>𝖣</td> <td>\\msansD</td> <td>MATHEMATICAL SANS-SERIF CAPITAL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5A4</td> <td>𝖤</td> <td>\\msansE</td> <td>MATHEMATICAL SANS-SERIF CAPITAL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D5A5</td> <td>𝖥</td> <td>\\msansF</td> <td>MATHEMATICAL SANS-SERIF CAPITAL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5A6</td> <td>𝖦</td> <td>\\msansG</td> <td>MATHEMATICAL SANS-SERIF CAPITAL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D5A7</td> <td>𝖧</td> <td>\\msansH</td> <td>MATHEMATICAL SANS-SERIF CAPITAL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5A8</td> <td>𝖨</td> <td>\\msansI</td> <td>MATHEMATICAL SANS-SERIF CAPITAL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D5A9</td> <td>𝖩</td> <td>\\msansJ</td> <td>MATHEMATICAL SANS-SERIF CAPITAL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5AA</td> <td>𝖪</td> <td>\\msansK</td> <td>MATHEMATICAL SANS-SERIF CAPITAL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D5AB</td> <td>𝖫</td> <td>\\msansL</td> <td>MATHEMATICAL SANS-SERIF CAPITAL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5AC</td> <td>𝖬</td> <td>\\msansM</td> <td>MATHEMATICAL SANS-SERIF CAPITAL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D5AD</td> <td>𝖭</td> <td>\\msansN</td> <td>MATHEMATICAL SANS-SERIF CAPITAL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5AE</td> <td>𝖮</td> <td>\\msansO</td> <td>MATHEMATICAL SANS-SERIF CAPITAL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D5AF</td> <td>𝖯</td> <td>\\msansP</td> <td>MATHEMATICAL SANS-SERIF CAPITAL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5B0</td> <td>𝖰</td> <td>\\msansQ</td> <td>MATHEMATICAL SANS-SERIF CAPITAL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D5B1</td> <td>𝖱</td> <td>\\msansR</td> <td>MATHEMATICAL SANS-SERIF CAPITAL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5B2</td> <td>𝖲</td> <td>\\msansS</td> <td>MATHEMATICAL SANS-SERIF CAPITAL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D5B3</td> <td>𝖳</td> <td>\\msansT</td> <td>MATHEMATICAL SANS-SERIF CAPITAL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5B4</td> <td>𝖴</td> <td>\\msansU</td> <td>MATHEMATICAL SANS-SERIF CAPITAL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D5B5</td> <td>𝖵</td> <td>\\msansV</td> <td>MATHEMATICAL SANS-SERIF CAPITAL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5B6</td> <td>𝖶</td> <td>\\msansW</td> <td>MATHEMATICAL SANS-SERIF CAPITAL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D5B7</td> <td>𝖷</td> <td>\\msansX</td> <td>MATHEMATICAL SANS-SERIF CAPITAL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5B8</td> <td>𝖸</td> <td>\\msansY</td> <td>MATHEMATICAL SANS-SERIF CAPITAL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D5B9</td> <td>𝖹</td> <td>\\msansZ</td> <td>MATHEMATICAL SANS-SERIF CAPITAL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5BA</td> <td>𝖺</td> <td>\\msansa</td> <td>MATHEMATICAL SANS-SERIF SMALL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D5BB</td> <td>𝖻</td> <td>\\msansb</td> <td>MATHEMATICAL SANS-SERIF SMALL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5BC</td> <td>𝖼</td> <td>\\msansc</td> <td>MATHEMATICAL SANS-SERIF SMALL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D5BD</td> <td>𝖽</td> <td>\\msansd</td> <td>MATHEMATICAL SANS-SERIF SMALL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5BE</td> <td>𝖾</td> <td>\\msanse</td> <td>MATHEMATICAL SANS-SERIF SMALL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D5BF</td> <td>𝖿</td> <td>\\msansf</td> <td>MATHEMATICAL SANS-SERIF SMALL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5C0</td> <td>𝗀</td> <td>\\msansg</td> <td>MATHEMATICAL SANS-SERIF SMALL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D5C1</td> <td>𝗁</td> <td>\\msansh</td> <td>MATHEMATICAL SANS-SERIF SMALL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5C2</td> <td>𝗂</td> <td>\\msansi</td> <td>MATHEMATICAL SANS-SERIF SMALL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D5C3</td> <td>𝗃</td> <td>\\msansj</td> <td>MATHEMATICAL SANS-SERIF SMALL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5C4</td> <td>𝗄</td> <td>\\msansk</td> <td>MATHEMATICAL SANS-SERIF SMALL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D5C5</td> <td>𝗅</td> <td>\\msansl</td> <td>MATHEMATICAL SANS-SERIF SMALL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5C6</td> <td>𝗆</td> <td>\\msansm</td> <td>MATHEMATICAL SANS-SERIF SMALL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D5C7</td> <td>𝗇</td> <td>\\msansn</td> <td>MATHEMATICAL SANS-SERIF SMALL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5C8</td> <td>𝗈</td> <td>\\msanso</td> <td>MATHEMATICAL SANS-SERIF SMALL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D5C9</td> <td>𝗉</td> <td>\\msansp</td> <td>MATHEMATICAL SANS-SERIF SMALL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5CA</td> <td>𝗊</td> <td>\\msansq</td> <td>MATHEMATICAL SANS-SERIF SMALL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D5CB</td> <td>𝗋</td> <td>\\msansr</td> <td>MATHEMATICAL SANS-SERIF SMALL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5CC</td> <td>𝗌</td> <td>\\msanss</td> <td>MATHEMATICAL SANS-SERIF SMALL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D5CD</td> <td>𝗍</td> <td>\\msanst</td> <td>MATHEMATICAL SANS-SERIF SMALL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5CE</td> <td>𝗎</td> <td>\\msansu</td> <td>MATHEMATICAL SANS-SERIF SMALL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D5CF</td> <td>𝗏</td> <td>\\msansv</td> <td>MATHEMATICAL SANS-SERIF SMALL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5D0</td> <td>𝗐</td> <td>\\msansw</td> <td>MATHEMATICAL SANS-SERIF SMALL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D5D1</td> <td>𝗑</td> <td>\\msansx</td> <td>MATHEMATICAL SANS-SERIF SMALL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5D2</td> <td>𝗒</td> <td>\\msansy</td> <td>MATHEMATICAL SANS-SERIF SMALL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D5D3</td> <td>𝗓</td> <td>\\msansz</td> <td>MATHEMATICAL SANS-SERIF SMALL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5D4</td> <td>𝗔</td> <td>\\mbfsansA</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D5D5</td> <td>𝗕</td> <td>\\mbfsansB</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5D6</td> <td>𝗖</td> <td>\\mbfsansC</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D5D7</td> <td>𝗗</td> <td>\\mbfsansD</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5D8</td> <td>𝗘</td> <td>\\mbfsansE</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D5D9</td> <td>𝗙</td> <td>\\mbfsansF</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5DA</td> <td>𝗚</td> <td>\\mbfsansG</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D5DB</td> <td>𝗛</td> <td>\\mbfsansH</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5DC</td> <td>𝗜</td> <td>\\mbfsansI</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D5DD</td> <td>𝗝</td> <td>\\mbfsansJ</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5DE</td> <td>𝗞</td> <td>\\mbfsansK</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D5DF</td> <td>𝗟</td> <td>\\mbfsansL</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5E0</td> <td>𝗠</td> <td>\\mbfsansM</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D5E1</td> <td>𝗡</td> <td>\\mbfsansN</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5E2</td> <td>𝗢</td> <td>\\mbfsansO</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D5E3</td> <td>𝗣</td> <td>\\mbfsansP</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5E4</td> <td>𝗤</td> <td>\\mbfsansQ</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D5E5</td> <td>𝗥</td> <td>\\mbfsansR</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5E6</td> <td>𝗦</td> <td>\\mbfsansS</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D5E7</td> <td>𝗧</td> <td>\\mbfsansT</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5E8</td> <td>𝗨</td> <td>\\mbfsansU</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D5E9</td> <td>𝗩</td> <td>\\mbfsansV</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5EA</td> <td>𝗪</td> <td>\\mbfsansW</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D5EB</td> <td>𝗫</td> <td>\\mbfsansX</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5EC</td> <td>𝗬</td> <td>\\mbfsansY</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D5ED</td> <td>𝗭</td> <td>\\mbfsansZ</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5EE</td> <td>𝗮</td> <td>\\mbfsansa</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D5EF</td> <td>𝗯</td> <td>\\mbfsansb</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5F0</td> <td>𝗰</td> <td>\\mbfsansc</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D5F1</td> <td>𝗱</td> <td>\\mbfsansd</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5F2</td> <td>𝗲</td> <td>\\mbfsanse</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D5F3</td> <td>𝗳</td> <td>\\mbfsansf</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5F4</td> <td>𝗴</td> <td>\\mbfsansg</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D5F5</td> <td>𝗵</td> <td>\\mbfsansh</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5F6</td> <td>𝗶</td> <td>\\mbfsansi</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D5F7</td> <td>𝗷</td> <td>\\mbfsansj</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5F8</td> <td>𝗸</td> <td>\\mbfsansk</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D5F9</td> <td>𝗹</td> <td>\\mbfsansl</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5FA</td> <td>𝗺</td> <td>\\mbfsansm</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D5FB</td> <td>𝗻</td> <td>\\mbfsansn</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5FC</td> <td>𝗼</td> <td>\\mbfsanso</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D5FD</td> <td>𝗽</td> <td>\\mbfsansp</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D5FE</td> <td>𝗾</td> <td>\\mbfsansq</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D5FF</td> <td>𝗿</td> <td>\\mbfsansr</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D600</td> <td>𝘀</td> <td>\\mbfsanss</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D601</td> <td>𝘁</td> <td>\\mbfsanst</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D602</td> <td>𝘂</td> <td>\\mbfsansu</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D603</td> <td>𝘃</td> <td>\\mbfsansv</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D604</td> <td>𝘄</td> <td>\\mbfsansw</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D605</td> <td>𝘅</td> <td>\\mbfsansx</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D606</td> <td>𝘆</td> <td>\\mbfsansy</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D607</td> <td>𝘇</td> <td>\\mbfsansz</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D608</td> <td>𝘈</td> <td>\\mitsansA</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D609</td> <td>𝘉</td> <td>\\mitsansB</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D60A</td> <td>𝘊</td> <td>\\mitsansC</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D60B</td> <td>𝘋</td> <td>\\mitsansD</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D60C</td> <td>𝘌</td> <td>\\mitsansE</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D60D</td> <td>𝘍</td> <td>\\mitsansF</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D60E</td> <td>𝘎</td> <td>\\mitsansG</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D60F</td> <td>𝘏</td> <td>\\mitsansH</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D610</td> <td>𝘐</td> <td>\\mitsansI</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D611</td> <td>𝘑</td> <td>\\mitsansJ</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D612</td> <td>𝘒</td> <td>\\mitsansK</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D613</td> <td>𝘓</td> <td>\\mitsansL</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D614</td> <td>𝘔</td> <td>\\mitsansM</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D615</td> <td>𝘕</td> <td>\\mitsansN</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D616</td> <td>𝘖</td> <td>\\mitsansO</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D617</td> <td>𝘗</td> <td>\\mitsansP</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D618</td> <td>𝘘</td> <td>\\mitsansQ</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D619</td> <td>𝘙</td> <td>\\mitsansR</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D61A</td> <td>𝘚</td> <td>\\mitsansS</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D61B</td> <td>𝘛</td> <td>\\mitsansT</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D61C</td> <td>𝘜</td> <td>\\mitsansU</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D61D</td> <td>𝘝</td> <td>\\mitsansV</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D61E</td> <td>𝘞</td> <td>\\mitsansW</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D61F</td> <td>𝘟</td> <td>\\mitsansX</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D620</td> <td>𝘠</td> <td>\\mitsansY</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D621</td> <td>𝘡</td> <td>\\mitsansZ</td> <td>MATHEMATICAL SANS-SERIF ITALIC CAPITAL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D622</td> <td>𝘢</td> <td>\\mitsansa</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D623</td> <td>𝘣</td> <td>\\mitsansb</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D624</td> <td>𝘤</td> <td>\\mitsansc</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D625</td> <td>𝘥</td> <td>\\mitsansd</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D626</td> <td>𝘦</td> <td>\\mitsanse</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D627</td> <td>𝘧</td> <td>\\mitsansf</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D628</td> <td>𝘨</td> <td>\\mitsansg</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D629</td> <td>𝘩</td> <td>\\mitsansh</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D62A</td> <td>𝘪</td> <td>\\mitsansi</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D62B</td> <td>𝘫</td> <td>\\mitsansj</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D62C</td> <td>𝘬</td> <td>\\mitsansk</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D62D</td> <td>𝘭</td> <td>\\mitsansl</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D62E</td> <td>𝘮</td> <td>\\mitsansm</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D62F</td> <td>𝘯</td> <td>\\mitsansn</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D630</td> <td>𝘰</td> <td>\\mitsanso</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D631</td> <td>𝘱</td> <td>\\mitsansp</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D632</td> <td>𝘲</td> <td>\\mitsansq</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D633</td> <td>𝘳</td> <td>\\mitsansr</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D634</td> <td>𝘴</td> <td>\\mitsanss</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D635</td> <td>𝘵</td> <td>\\mitsanst</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D636</td> <td>𝘶</td> <td>\\mitsansu</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D637</td> <td>𝘷</td> <td>\\mitsansv</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D638</td> <td>𝘸</td> <td>\\mitsansw</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D639</td> <td>𝘹</td> <td>\\mitsansx</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D63A</td> <td>𝘺</td> <td>\\mitsansy</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D63B</td> <td>𝘻</td> <td>\\mitsansz</td> <td>MATHEMATICAL SANS-SERIF ITALIC SMALL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D63C</td> <td>𝘼</td> <td>\\mbfitsansA</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D63D</td> <td>𝘽</td> <td>\\mbfitsansB</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D63E</td> <td>𝘾</td> <td>\\mbfitsansC</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D63F</td> <td>𝘿</td> <td>\\mbfitsansD</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D640</td> <td>𝙀</td> <td>\\mbfitsansE</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D641</td> <td>𝙁</td> <td>\\mbfitsansF</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D642</td> <td>𝙂</td> <td>\\mbfitsansG</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D643</td> <td>𝙃</td> <td>\\mbfitsansH</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D644</td> <td>𝙄</td> <td>\\mbfitsansI</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D645</td> <td>𝙅</td> <td>\\mbfitsansJ</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D646</td> <td>𝙆</td> <td>\\mbfitsansK</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D647</td> <td>𝙇</td> <td>\\mbfitsansL</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D648</td> <td>𝙈</td> <td>\\mbfitsansM</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D649</td> <td>𝙉</td> <td>\\mbfitsansN</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D64A</td> <td>𝙊</td> <td>\\mbfitsansO</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D64B</td> <td>𝙋</td> <td>\\mbfitsansP</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D64C</td> <td>𝙌</td> <td>\\mbfitsansQ</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D64D</td> <td>𝙍</td> <td>\\mbfitsansR</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D64E</td> <td>𝙎</td> <td>\\mbfitsansS</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D64F</td> <td>𝙏</td> <td>\\mbfitsansT</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D650</td> <td>𝙐</td> <td>\\mbfitsansU</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D651</td> <td>𝙑</td> <td>\\mbfitsansV</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D652</td> <td>𝙒</td> <td>\\mbfitsansW</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D653</td> <td>𝙓</td> <td>\\mbfitsansX</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D654</td> <td>𝙔</td> <td>\\mbfitsansY</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D655</td> <td>𝙕</td> <td>\\mbfitsansZ</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D656</td> <td>𝙖</td> <td>\\mbfitsansa</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D657</td> <td>𝙗</td> <td>\\mbfitsansb</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D658</td> <td>𝙘</td> <td>\\mbfitsansc</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D659</td> <td>𝙙</td> <td>\\mbfitsansd</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D65A</td> <td>𝙚</td> <td>\\mbfitsanse</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D65B</td> <td>𝙛</td> <td>\\mbfitsansf</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D65C</td> <td>𝙜</td> <td>\\mbfitsansg</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D65D</td> <td>𝙝</td> <td>\\mbfitsansh</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D65E</td> <td>𝙞</td> <td>\\mbfitsansi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D65F</td> <td>𝙟</td> <td>\\mbfitsansj</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D660</td> <td>𝙠</td> <td>\\mbfitsansk</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D661</td> <td>𝙡</td> <td>\\mbfitsansl</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D662</td> <td>𝙢</td> <td>\\mbfitsansm</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D663</td> <td>𝙣</td> <td>\\mbfitsansn</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D664</td> <td>𝙤</td> <td>\\mbfitsanso</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D665</td> <td>𝙥</td> <td>\\mbfitsansp</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D666</td> <td>𝙦</td> <td>\\mbfitsansq</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D667</td> <td>𝙧</td> <td>\\mbfitsansr</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D668</td> <td>𝙨</td> <td>\\mbfitsanss</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D669</td> <td>𝙩</td> <td>\\mbfitsanst</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D66A</td> <td>𝙪</td> <td>\\mbfitsansu</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D66B</td> <td>𝙫</td> <td>\\mbfitsansv</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D66C</td> <td>𝙬</td> <td>\\mbfitsansw</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D66D</td> <td>𝙭</td> <td>\\mbfitsansx</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D66E</td> <td>𝙮</td> <td>\\mbfitsansy</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D66F</td> <td>𝙯</td> <td>\\mbfitsansz</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D670</td> <td>𝙰</td> <td>\\mttA</td> <td>MATHEMATICAL MONOSPACE CAPITAL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D671</td> <td>𝙱</td> <td>\\mttB</td> <td>MATHEMATICAL MONOSPACE CAPITAL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D672</td> <td>𝙲</td> <td>\\mttC</td> <td>MATHEMATICAL MONOSPACE CAPITAL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D673</td> <td>𝙳</td> <td>\\mttD</td> <td>MATHEMATICAL MONOSPACE CAPITAL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D674</td> <td>𝙴</td> <td>\\mttE</td> <td>MATHEMATICAL MONOSPACE CAPITAL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D675</td> <td>𝙵</td> <td>\\mttF</td> <td>MATHEMATICAL MONOSPACE CAPITAL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D676</td> <td>𝙶</td> <td>\\mttG</td> <td>MATHEMATICAL MONOSPACE CAPITAL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D677</td> <td>𝙷</td> <td>\\mttH</td> <td>MATHEMATICAL MONOSPACE CAPITAL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D678</td> <td>𝙸</td> <td>\\mttI</td> <td>MATHEMATICAL MONOSPACE CAPITAL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D679</td> <td>𝙹</td> <td>\\mttJ</td> <td>MATHEMATICAL MONOSPACE CAPITAL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D67A</td> <td>𝙺</td> <td>\\mttK</td> <td>MATHEMATICAL MONOSPACE CAPITAL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D67B</td> <td>𝙻</td> <td>\\mttL</td> <td>MATHEMATICAL MONOSPACE CAPITAL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D67C</td> <td>𝙼</td> <td>\\mttM</td> <td>MATHEMATICAL MONOSPACE CAPITAL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D67D</td> <td>𝙽</td> <td>\\mttN</td> <td>MATHEMATICAL MONOSPACE CAPITAL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D67E</td> <td>𝙾</td> <td>\\mttO</td> <td>MATHEMATICAL MONOSPACE CAPITAL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D67F</td> <td>𝙿</td> <td>\\mttP</td> <td>MATHEMATICAL MONOSPACE CAPITAL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D680</td> <td>𝚀</td> <td>\\mttQ</td> <td>MATHEMATICAL MONOSPACE CAPITAL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D681</td> <td>𝚁</td> <td>\\mttR</td> <td>MATHEMATICAL MONOSPACE CAPITAL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D682</td> <td>𝚂</td> <td>\\mttS</td> <td>MATHEMATICAL MONOSPACE CAPITAL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D683</td> <td>𝚃</td> <td>\\mttT</td> <td>MATHEMATICAL MONOSPACE CAPITAL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D684</td> <td>𝚄</td> <td>\\mttU</td> <td>MATHEMATICAL MONOSPACE CAPITAL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D685</td> <td>𝚅</td> <td>\\mttV</td> <td>MATHEMATICAL MONOSPACE CAPITAL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D686</td> <td>𝚆</td> <td>\\mttW</td> <td>MATHEMATICAL MONOSPACE CAPITAL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D687</td> <td>𝚇</td> <td>\\mttX</td> <td>MATHEMATICAL MONOSPACE CAPITAL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D688</td> <td>𝚈</td> <td>\\mttY</td> <td>MATHEMATICAL MONOSPACE CAPITAL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D689</td> <td>𝚉</td> <td>\\mttZ</td> <td>MATHEMATICAL MONOSPACE CAPITAL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D68A</td> <td>𝚊</td> <td>\\mtta</td> <td>MATHEMATICAL MONOSPACE SMALL A</td> </tr> <tr class=\"row-even\">\n<td>U+1D68B</td> <td>𝚋</td> <td>\\mttb</td> <td>MATHEMATICAL MONOSPACE SMALL B</td> </tr> <tr class=\"row-odd\">\n<td>U+1D68C</td> <td>𝚌</td> <td>\\mttc</td> <td>MATHEMATICAL MONOSPACE SMALL C</td> </tr> <tr class=\"row-even\">\n<td>U+1D68D</td> <td>𝚍</td> <td>\\mttd</td> <td>MATHEMATICAL MONOSPACE SMALL D</td> </tr> <tr class=\"row-odd\">\n<td>U+1D68E</td> <td>𝚎</td> <td>\\mtte</td> <td>MATHEMATICAL MONOSPACE SMALL E</td> </tr> <tr class=\"row-even\">\n<td>U+1D68F</td> <td>𝚏</td> <td>\\mttf</td> <td>MATHEMATICAL MONOSPACE SMALL F</td> </tr> <tr class=\"row-odd\">\n<td>U+1D690</td> <td>𝚐</td> <td>\\mttg</td> <td>MATHEMATICAL MONOSPACE SMALL G</td> </tr> <tr class=\"row-even\">\n<td>U+1D691</td> <td>𝚑</td> <td>\\mtth</td> <td>MATHEMATICAL MONOSPACE SMALL H</td> </tr> <tr class=\"row-odd\">\n<td>U+1D692</td> <td>𝚒</td> <td>\\mtti</td> <td>MATHEMATICAL MONOSPACE SMALL I</td> </tr> <tr class=\"row-even\">\n<td>U+1D693</td> <td>𝚓</td> <td>\\mttj</td> <td>MATHEMATICAL MONOSPACE SMALL J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D694</td> <td>𝚔</td> <td>\\mttk</td> <td>MATHEMATICAL MONOSPACE SMALL K</td> </tr> <tr class=\"row-even\">\n<td>U+1D695</td> <td>𝚕</td> <td>\\mttl</td> <td>MATHEMATICAL MONOSPACE SMALL L</td> </tr> <tr class=\"row-odd\">\n<td>U+1D696</td> <td>𝚖</td> <td>\\mttm</td> <td>MATHEMATICAL MONOSPACE SMALL M</td> </tr> <tr class=\"row-even\">\n<td>U+1D697</td> <td>𝚗</td> <td>\\mttn</td> <td>MATHEMATICAL MONOSPACE SMALL N</td> </tr> <tr class=\"row-odd\">\n<td>U+1D698</td> <td>𝚘</td> <td>\\mtto</td> <td>MATHEMATICAL MONOSPACE SMALL O</td> </tr> <tr class=\"row-even\">\n<td>U+1D699</td> <td>𝚙</td> <td>\\mttp</td> <td>MATHEMATICAL MONOSPACE SMALL P</td> </tr> <tr class=\"row-odd\">\n<td>U+1D69A</td> <td>𝚚</td> <td>\\mttq</td> <td>MATHEMATICAL MONOSPACE SMALL Q</td> </tr> <tr class=\"row-even\">\n<td>U+1D69B</td> <td>𝚛</td> <td>\\mttr</td> <td>MATHEMATICAL MONOSPACE SMALL R</td> </tr> <tr class=\"row-odd\">\n<td>U+1D69C</td> <td>𝚜</td> <td>\\mtts</td> <td>MATHEMATICAL MONOSPACE SMALL S</td> </tr> <tr class=\"row-even\">\n<td>U+1D69D</td> <td>𝚝</td> <td>\\mttt</td> <td>MATHEMATICAL MONOSPACE SMALL T</td> </tr> <tr class=\"row-odd\">\n<td>U+1D69E</td> <td>𝚞</td> <td>\\mttu</td> <td>MATHEMATICAL MONOSPACE SMALL U</td> </tr> <tr class=\"row-even\">\n<td>U+1D69F</td> <td>𝚟</td> <td>\\mttv</td> <td>MATHEMATICAL MONOSPACE SMALL V</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6A0</td> <td>𝚠</td> <td>\\mttw</td> <td>MATHEMATICAL MONOSPACE SMALL W</td> </tr> <tr class=\"row-even\">\n<td>U+1D6A1</td> <td>𝚡</td> <td>\\mttx</td> <td>MATHEMATICAL MONOSPACE SMALL X</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6A2</td> <td>𝚢</td> <td>\\mtty</td> <td>MATHEMATICAL MONOSPACE SMALL Y</td> </tr> <tr class=\"row-even\">\n<td>U+1D6A3</td> <td>𝚣</td> <td>\\mttz</td> <td>MATHEMATICAL MONOSPACE SMALL Z</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6A4</td> <td>𝚤</td> <td>\\imath</td> <td>MATHEMATICAL ITALIC SMALL DOTLESS I</td> </tr> <tr class=\"row-even\">\n<td>U+1D6A5</td> <td>𝚥</td> <td>\\jmath</td> <td>MATHEMATICAL ITALIC SMALL DOTLESS J</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6A8</td> <td>𝚨</td> <td>\\mbfAlpha</td> <td>MATHEMATICAL BOLD CAPITAL ALPHA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6A9</td> <td>𝚩</td> <td>\\mbfBeta</td> <td>MATHEMATICAL BOLD CAPITAL BETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6AA</td> <td>𝚪</td> <td>\\mbfGamma</td> <td>MATHEMATICAL BOLD CAPITAL GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6AB</td> <td>𝚫</td> <td>\\mbfDelta</td> <td>MATHEMATICAL BOLD CAPITAL DELTA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6AC</td> <td>𝚬</td> <td>\\mbfEpsilon</td> <td>MATHEMATICAL BOLD CAPITAL EPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D6AD</td> <td>𝚭</td> <td>\\mbfZeta</td> <td>MATHEMATICAL BOLD CAPITAL ZETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6AE</td> <td>𝚮</td> <td>\\mbfEta</td> <td>MATHEMATICAL BOLD CAPITAL ETA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6AF</td> <td>𝚯</td> <td>\\mbfTheta</td> <td>MATHEMATICAL BOLD CAPITAL THETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6B0</td> <td>𝚰</td> <td>\\mbfIota</td> <td>MATHEMATICAL BOLD CAPITAL IOTA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6B1</td> <td>𝚱</td> <td>\\mbfKappa</td> <td>MATHEMATICAL BOLD CAPITAL KAPPA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6B2</td> <td>𝚲</td> <td>\\mbfLambda</td> <td>MATHEMATICAL BOLD CAPITAL LAMDA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6B3</td> <td>𝚳</td> <td>\\mbfMu</td> <td>MATHEMATICAL BOLD CAPITAL MU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6B4</td> <td>𝚴</td> <td>\\mbfNu</td> <td>MATHEMATICAL BOLD CAPITAL NU</td> </tr> <tr class=\"row-even\">\n<td>U+1D6B5</td> <td>𝚵</td> <td>\\mbfXi</td> <td>MATHEMATICAL BOLD CAPITAL XI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6B6</td> <td>𝚶</td> <td>\\mbfOmicron</td> <td>MATHEMATICAL BOLD CAPITAL OMICRON</td> </tr> <tr class=\"row-even\">\n<td>U+1D6B7</td> <td>𝚷</td> <td>\\mbfPi</td> <td>MATHEMATICAL BOLD CAPITAL PI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6B8</td> <td>𝚸</td> <td>\\mbfRho</td> <td>MATHEMATICAL BOLD CAPITAL RHO</td> </tr> <tr class=\"row-even\">\n<td>U+1D6B9</td> <td>𝚹</td> <td>\\mbfvarTheta</td> <td>MATHEMATICAL BOLD CAPITAL THETA SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6BA</td> <td>𝚺</td> <td>\\mbfSigma</td> <td>MATHEMATICAL BOLD CAPITAL SIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6BB</td> <td>𝚻</td> <td>\\mbfTau</td> <td>MATHEMATICAL BOLD CAPITAL TAU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6BC</td> <td>𝚼</td> <td>\\mbfUpsilon</td> <td>MATHEMATICAL BOLD CAPITAL UPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D6BD</td> <td>𝚽</td> <td>\\mbfPhi</td> <td>MATHEMATICAL BOLD CAPITAL PHI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6BE</td> <td>𝚾</td> <td>\\mbfChi</td> <td>MATHEMATICAL BOLD CAPITAL CHI</td> </tr> <tr class=\"row-even\">\n<td>U+1D6BF</td> <td>𝚿</td> <td>\\mbfPsi</td> <td>MATHEMATICAL BOLD CAPITAL PSI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6C0</td> <td>𝛀</td> <td>\\mbfOmega</td> <td>MATHEMATICAL BOLD CAPITAL OMEGA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6C1</td> <td>𝛁</td> <td>\\mbfnabla</td> <td>MATHEMATICAL BOLD NABLA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6C2</td> <td>𝛂</td> <td>\\mbfalpha</td> <td>MATHEMATICAL BOLD SMALL ALPHA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6C3</td> <td>𝛃</td> <td>\\mbfbeta</td> <td>MATHEMATICAL BOLD SMALL BETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6C4</td> <td>𝛄</td> <td>\\mbfgamma</td> <td>MATHEMATICAL BOLD SMALL GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6C5</td> <td>𝛅</td> <td>\\mbfdelta</td> <td>MATHEMATICAL BOLD SMALL DELTA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6C6</td> <td>𝛆</td> <td>\\mbfepsilon</td> <td>MATHEMATICAL BOLD SMALL EPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D6C7</td> <td>𝛇</td> <td>\\mbfzeta</td> <td>MATHEMATICAL BOLD SMALL ZETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6C8</td> <td>𝛈</td> <td>\\mbfeta</td> <td>MATHEMATICAL BOLD SMALL ETA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6C9</td> <td>𝛉</td> <td>\\mbftheta</td> <td>MATHEMATICAL BOLD SMALL THETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6CA</td> <td>𝛊</td> <td>\\mbfiota</td> <td>MATHEMATICAL BOLD SMALL IOTA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6CB</td> <td>𝛋</td> <td>\\mbfkappa</td> <td>MATHEMATICAL BOLD SMALL KAPPA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6CC</td> <td>𝛌</td> <td>\\mbflambda</td> <td>MATHEMATICAL BOLD SMALL LAMDA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6CD</td> <td>𝛍</td> <td>\\mbfmu</td> <td>MATHEMATICAL BOLD SMALL MU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6CE</td> <td>𝛎</td> <td>\\mbfnu</td> <td>MATHEMATICAL BOLD SMALL NU</td> </tr> <tr class=\"row-even\">\n<td>U+1D6CF</td> <td>𝛏</td> <td>\\mbfxi</td> <td>MATHEMATICAL BOLD SMALL XI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6D0</td> <td>𝛐</td> <td>\\mbfomicron</td> <td>MATHEMATICAL BOLD SMALL OMICRON</td> </tr> <tr class=\"row-even\">\n<td>U+1D6D1</td> <td>𝛑</td> <td>\\mbfpi</td> <td>MATHEMATICAL BOLD SMALL PI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6D2</td> <td>𝛒</td> <td>\\mbfrho</td> <td>MATHEMATICAL BOLD SMALL RHO</td> </tr> <tr class=\"row-even\">\n<td>U+1D6D3</td> <td>𝛓</td> <td>\\mbfvarsigma</td> <td>MATHEMATICAL BOLD SMALL FINAL SIGMA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6D4</td> <td>𝛔</td> <td>\\mbfsigma</td> <td>MATHEMATICAL BOLD SMALL SIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6D5</td> <td>𝛕</td> <td>\\mbftau</td> <td>MATHEMATICAL BOLD SMALL TAU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6D6</td> <td>𝛖</td> <td>\\mbfupsilon</td> <td>MATHEMATICAL BOLD SMALL UPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D6D7</td> <td>𝛗</td> <td>\\mbfvarphi</td> <td>MATHEMATICAL BOLD SMALL PHI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6D8</td> <td>𝛘</td> <td>\\mbfchi</td> <td>MATHEMATICAL BOLD SMALL CHI</td> </tr> <tr class=\"row-even\">\n<td>U+1D6D9</td> <td>𝛙</td> <td>\\mbfpsi</td> <td>MATHEMATICAL BOLD SMALL PSI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6DA</td> <td>𝛚</td> <td>\\mbfomega</td> <td>MATHEMATICAL BOLD SMALL OMEGA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6DB</td> <td>𝛛</td> <td>\\mbfpartial</td> <td>MATHEMATICAL BOLD PARTIAL DIFFERENTIAL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6DC</td> <td>𝛜</td> <td>\\mbfvarepsilon</td> <td>MATHEMATICAL BOLD EPSILON SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D6DD</td> <td>𝛝</td> <td>\\mbfvartheta</td> <td>MATHEMATICAL BOLD THETA SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6DE</td> <td>𝛞</td> <td>\\mbfvarkappa</td> <td>MATHEMATICAL BOLD KAPPA SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D6DF</td> <td>𝛟</td> <td>\\mbfphi</td> <td>MATHEMATICAL BOLD PHI SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6E0</td> <td>𝛠</td> <td>\\mbfvarrho</td> <td>MATHEMATICAL BOLD RHO SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D6E1</td> <td>𝛡</td> <td>\\mbfvarpi</td> <td>MATHEMATICAL BOLD PI SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6E2</td> <td>𝛢</td> <td>\\mitAlpha</td> <td>MATHEMATICAL ITALIC CAPITAL ALPHA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6E3</td> <td>𝛣</td> <td>\\mitBeta</td> <td>MATHEMATICAL ITALIC CAPITAL BETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6E4</td> <td>𝛤</td> <td>\\mitGamma</td> <td>MATHEMATICAL ITALIC CAPITAL GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6E5</td> <td>𝛥</td> <td>\\mitDelta</td> <td>MATHEMATICAL ITALIC CAPITAL DELTA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6E6</td> <td>𝛦</td> <td>\\mitEpsilon</td> <td>MATHEMATICAL ITALIC CAPITAL EPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D6E7</td> <td>𝛧</td> <td>\\mitZeta</td> <td>MATHEMATICAL ITALIC CAPITAL ZETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6E8</td> <td>𝛨</td> <td>\\mitEta</td> <td>MATHEMATICAL ITALIC CAPITAL ETA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6E9</td> <td>𝛩</td> <td>\\mitTheta</td> <td>MATHEMATICAL ITALIC CAPITAL THETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6EA</td> <td>𝛪</td> <td>\\mitIota</td> <td>MATHEMATICAL ITALIC CAPITAL IOTA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6EB</td> <td>𝛫</td> <td>\\mitKappa</td> <td>MATHEMATICAL ITALIC CAPITAL KAPPA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6EC</td> <td>𝛬</td> <td>\\mitLambda</td> <td>MATHEMATICAL ITALIC CAPITAL LAMDA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6ED</td> <td>𝛭</td> <td>\\mitMu</td> <td>MATHEMATICAL ITALIC CAPITAL MU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6EE</td> <td>𝛮</td> <td>\\mitNu</td> <td>MATHEMATICAL ITALIC CAPITAL NU</td> </tr> <tr class=\"row-even\">\n<td>U+1D6EF</td> <td>𝛯</td> <td>\\mitXi</td> <td>MATHEMATICAL ITALIC CAPITAL XI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6F0</td> <td>𝛰</td> <td>\\mitOmicron</td> <td>MATHEMATICAL ITALIC CAPITAL OMICRON</td> </tr> <tr class=\"row-even\">\n<td>U+1D6F1</td> <td>𝛱</td> <td>\\mitPi</td> <td>MATHEMATICAL ITALIC CAPITAL PI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6F2</td> <td>𝛲</td> <td>\\mitRho</td> <td>MATHEMATICAL ITALIC CAPITAL RHO</td> </tr> <tr class=\"row-even\">\n<td>U+1D6F3</td> <td>𝛳</td> <td>\\mitvarTheta</td> <td>MATHEMATICAL ITALIC CAPITAL THETA SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6F4</td> <td>𝛴</td> <td>\\mitSigma</td> <td>MATHEMATICAL ITALIC CAPITAL SIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6F5</td> <td>𝛵</td> <td>\\mitTau</td> <td>MATHEMATICAL ITALIC CAPITAL TAU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6F6</td> <td>𝛶</td> <td>\\mitUpsilon</td> <td>MATHEMATICAL ITALIC CAPITAL UPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D6F7</td> <td>𝛷</td> <td>\\mitPhi</td> <td>MATHEMATICAL ITALIC CAPITAL PHI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6F8</td> <td>𝛸</td> <td>\\mitChi</td> <td>MATHEMATICAL ITALIC CAPITAL CHI</td> </tr> <tr class=\"row-even\">\n<td>U+1D6F9</td> <td>𝛹</td> <td>\\mitPsi</td> <td>MATHEMATICAL ITALIC CAPITAL PSI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6FA</td> <td>𝛺</td> <td>\\mitOmega</td> <td>MATHEMATICAL ITALIC CAPITAL OMEGA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6FB</td> <td>𝛻</td> <td>\\mitnabla</td> <td>MATHEMATICAL ITALIC NABLA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6FC</td> <td>𝛼</td> <td>\\mitalpha</td> <td>MATHEMATICAL ITALIC SMALL ALPHA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6FD</td> <td>𝛽</td> <td>\\mitbeta</td> <td>MATHEMATICAL ITALIC SMALL BETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D6FE</td> <td>𝛾</td> <td>\\mitgamma</td> <td>MATHEMATICAL ITALIC SMALL GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D6FF</td> <td>𝛿</td> <td>\\mitdelta</td> <td>MATHEMATICAL ITALIC SMALL DELTA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D700</td> <td>𝜀</td> <td>\\mitepsilon</td> <td>MATHEMATICAL ITALIC SMALL EPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D701</td> <td>𝜁</td> <td>\\mitzeta</td> <td>MATHEMATICAL ITALIC SMALL ZETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D702</td> <td>𝜂</td> <td>\\miteta</td> <td>MATHEMATICAL ITALIC SMALL ETA</td> </tr> <tr class=\"row-even\">\n<td>U+1D703</td> <td>𝜃</td> <td>\\mittheta</td> <td>MATHEMATICAL ITALIC SMALL THETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D704</td> <td>𝜄</td> <td>\\mitiota</td> <td>MATHEMATICAL ITALIC SMALL IOTA</td> </tr> <tr class=\"row-even\">\n<td>U+1D705</td> <td>𝜅</td> <td>\\mitkappa</td> <td>MATHEMATICAL ITALIC SMALL KAPPA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D706</td> <td>𝜆</td> <td>\\mitlambda</td> <td>MATHEMATICAL ITALIC SMALL LAMDA</td> </tr> <tr class=\"row-even\">\n<td>U+1D707</td> <td>𝜇</td> <td>\\mitmu</td> <td>MATHEMATICAL ITALIC SMALL MU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D708</td> <td>𝜈</td> <td>\\mitnu</td> <td>MATHEMATICAL ITALIC SMALL NU</td> </tr> <tr class=\"row-even\">\n<td>U+1D709</td> <td>𝜉</td> <td>\\mitxi</td> <td>MATHEMATICAL ITALIC SMALL XI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D70A</td> <td>𝜊</td> <td>\\mitomicron</td> <td>MATHEMATICAL ITALIC SMALL OMICRON</td> </tr> <tr class=\"row-even\">\n<td>U+1D70B</td> <td>𝜋</td> <td>\\mitpi</td> <td>MATHEMATICAL ITALIC SMALL PI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D70C</td> <td>𝜌</td> <td>\\mitrho</td> <td>MATHEMATICAL ITALIC SMALL RHO</td> </tr> <tr class=\"row-even\">\n<td>U+1D70D</td> <td>𝜍</td> <td>\\mitvarsigma</td> <td>MATHEMATICAL ITALIC SMALL FINAL SIGMA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D70E</td> <td>𝜎</td> <td>\\mitsigma</td> <td>MATHEMATICAL ITALIC SMALL SIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D70F</td> <td>𝜏</td> <td>\\mittau</td> <td>MATHEMATICAL ITALIC SMALL TAU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D710</td> <td>𝜐</td> <td>\\mitupsilon</td> <td>MATHEMATICAL ITALIC SMALL UPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D711</td> <td>𝜑</td> <td>\\mitphi</td> <td>MATHEMATICAL ITALIC SMALL PHI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D712</td> <td>𝜒</td> <td>\\mitchi</td> <td>MATHEMATICAL ITALIC SMALL CHI</td> </tr> <tr class=\"row-even\">\n<td>U+1D713</td> <td>𝜓</td> <td>\\mitpsi</td> <td>MATHEMATICAL ITALIC SMALL PSI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D714</td> <td>𝜔</td> <td>\\mitomega</td> <td>MATHEMATICAL ITALIC SMALL OMEGA</td> </tr> <tr class=\"row-even\">\n<td>U+1D715</td> <td>𝜕</td> <td>\\mitpartial</td> <td>MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D716</td> <td>𝜖</td> <td>\\mitvarepsilon</td> <td>MATHEMATICAL ITALIC EPSILON SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D717</td> <td>𝜗</td> <td>\\mitvartheta</td> <td>MATHEMATICAL ITALIC THETA SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D718</td> <td>𝜘</td> <td>\\mitvarkappa</td> <td>MATHEMATICAL ITALIC KAPPA SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D719</td> <td>𝜙</td> <td>\\mitvarphi</td> <td>MATHEMATICAL ITALIC PHI SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D71A</td> <td>𝜚</td> <td>\\mitvarrho</td> <td>MATHEMATICAL ITALIC RHO SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D71B</td> <td>𝜛</td> <td>\\mitvarpi</td> <td>MATHEMATICAL ITALIC PI SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D71C</td> <td>𝜜</td> <td>\\mbfitAlpha</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL ALPHA</td> </tr> <tr class=\"row-even\">\n<td>U+1D71D</td> <td>𝜝</td> <td>\\mbfitBeta</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL BETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D71E</td> <td>𝜞</td> <td>\\mbfitGamma</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D71F</td> <td>𝜟</td> <td>\\mbfitDelta</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL DELTA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D720</td> <td>𝜠</td> <td>\\mbfitEpsilon</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL EPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D721</td> <td>𝜡</td> <td>\\mbfitZeta</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL ZETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D722</td> <td>𝜢</td> <td>\\mbfitEta</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL ETA</td> </tr> <tr class=\"row-even\">\n<td>U+1D723</td> <td>𝜣</td> <td>\\mbfitTheta</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL THETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D724</td> <td>𝜤</td> <td>\\mbfitIota</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL IOTA</td> </tr> <tr class=\"row-even\">\n<td>U+1D725</td> <td>𝜥</td> <td>\\mbfitKappa</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL KAPPA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D726</td> <td>𝜦</td> <td>\\mbfitLambda</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL LAMDA</td> </tr> <tr class=\"row-even\">\n<td>U+1D727</td> <td>𝜧</td> <td>\\mbfitMu</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL MU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D728</td> <td>𝜨</td> <td>\\mbfitNu</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL NU</td> </tr> <tr class=\"row-even\">\n<td>U+1D729</td> <td>𝜩</td> <td>\\mbfitXi</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL XI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D72A</td> <td>𝜪</td> <td>\\mbfitOmicron</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL OMICRON</td> </tr> <tr class=\"row-even\">\n<td>U+1D72B</td> <td>𝜫</td> <td>\\mbfitPi</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL PI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D72C</td> <td>𝜬</td> <td>\\mbfitRho</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL RHO</td> </tr> <tr class=\"row-even\">\n<td>U+1D72D</td> <td>𝜭</td> <td>\\mbfitvarTheta</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL THETA SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D72E</td> <td>𝜮</td> <td>\\mbfitSigma</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL SIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D72F</td> <td>𝜯</td> <td>\\mbfitTau</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL TAU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D730</td> <td>𝜰</td> <td>\\mbfitUpsilon</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL UPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D731</td> <td>𝜱</td> <td>\\mbfitPhi</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL PHI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D732</td> <td>𝜲</td> <td>\\mbfitChi</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL CHI</td> </tr> <tr class=\"row-even\">\n<td>U+1D733</td> <td>𝜳</td> <td>\\mbfitPsi</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL PSI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D734</td> <td>𝜴</td> <td>\\mbfitOmega</td> <td>MATHEMATICAL BOLD ITALIC CAPITAL OMEGA</td> </tr> <tr class=\"row-even\">\n<td>U+1D735</td> <td>𝜵</td> <td>\\mbfitnabla</td> <td>MATHEMATICAL BOLD ITALIC NABLA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D736</td> <td>𝜶</td> <td>\\mbfitalpha</td> <td>MATHEMATICAL BOLD ITALIC SMALL ALPHA</td> </tr> <tr class=\"row-even\">\n<td>U+1D737</td> <td>𝜷</td> <td>\\mbfitbeta</td> <td>MATHEMATICAL BOLD ITALIC SMALL BETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D738</td> <td>𝜸</td> <td>\\mbfitgamma</td> <td>MATHEMATICAL BOLD ITALIC SMALL GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D739</td> <td>𝜹</td> <td>\\mbfitdelta</td> <td>MATHEMATICAL BOLD ITALIC SMALL DELTA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D73A</td> <td>𝜺</td> <td>\\mbfitepsilon</td> <td>MATHEMATICAL BOLD ITALIC SMALL EPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D73B</td> <td>𝜻</td> <td>\\mbfitzeta</td> <td>MATHEMATICAL BOLD ITALIC SMALL ZETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D73C</td> <td>𝜼</td> <td>\\mbfiteta</td> <td>MATHEMATICAL BOLD ITALIC SMALL ETA</td> </tr> <tr class=\"row-even\">\n<td>U+1D73D</td> <td>𝜽</td> <td>\\mbfittheta</td> <td>MATHEMATICAL BOLD ITALIC SMALL THETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D73E</td> <td>𝜾</td> <td>\\mbfitiota</td> <td>MATHEMATICAL BOLD ITALIC SMALL IOTA</td> </tr> <tr class=\"row-even\">\n<td>U+1D73F</td> <td>𝜿</td> <td>\\mbfitkappa</td> <td>MATHEMATICAL BOLD ITALIC SMALL KAPPA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D740</td> <td>𝝀</td> <td>\\mbfitlambda</td> <td>MATHEMATICAL BOLD ITALIC SMALL LAMDA</td> </tr> <tr class=\"row-even\">\n<td>U+1D741</td> <td>𝝁</td> <td>\\mbfitmu</td> <td>MATHEMATICAL BOLD ITALIC SMALL MU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D742</td> <td>𝝂</td> <td>\\mbfitnu</td> <td>MATHEMATICAL BOLD ITALIC SMALL NU</td> </tr> <tr class=\"row-even\">\n<td>U+1D743</td> <td>𝝃</td> <td>\\mbfitxi</td> <td>MATHEMATICAL BOLD ITALIC SMALL XI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D744</td> <td>𝝄</td> <td>\\mbfitomicron</td> <td>MATHEMATICAL BOLD ITALIC SMALL OMICRON</td> </tr> <tr class=\"row-even\">\n<td>U+1D745</td> <td>𝝅</td> <td>\\mbfitpi</td> <td>MATHEMATICAL BOLD ITALIC SMALL PI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D746</td> <td>𝝆</td> <td>\\mbfitrho</td> <td>MATHEMATICAL BOLD ITALIC SMALL RHO</td> </tr> <tr class=\"row-even\">\n<td>U+1D747</td> <td>𝝇</td> <td>\\mbfitvarsigma</td> <td>MATHEMATICAL BOLD ITALIC SMALL FINAL SIGMA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D748</td> <td>𝝈</td> <td>\\mbfitsigma</td> <td>MATHEMATICAL BOLD ITALIC SMALL SIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D749</td> <td>𝝉</td> <td>\\mbfittau</td> <td>MATHEMATICAL BOLD ITALIC SMALL TAU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D74A</td> <td>𝝊</td> <td>\\mbfitupsilon</td> <td>MATHEMATICAL BOLD ITALIC SMALL UPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D74B</td> <td>𝝋</td> <td>\\mbfitphi</td> <td>MATHEMATICAL BOLD ITALIC SMALL PHI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D74C</td> <td>𝝌</td> <td>\\mbfitchi</td> <td>MATHEMATICAL BOLD ITALIC SMALL CHI</td> </tr> <tr class=\"row-even\">\n<td>U+1D74D</td> <td>𝝍</td> <td>\\mbfitpsi</td> <td>MATHEMATICAL BOLD ITALIC SMALL PSI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D74E</td> <td>𝝎</td> <td>\\mbfitomega</td> <td>MATHEMATICAL BOLD ITALIC SMALL OMEGA</td> </tr> <tr class=\"row-even\">\n<td>U+1D74F</td> <td>𝝏</td> <td>\\mbfitpartial</td> <td>MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D750</td> <td>𝝐</td> <td>\\mbfitvarepsilon</td> <td>MATHEMATICAL BOLD ITALIC EPSILON SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D751</td> <td>𝝑</td> <td>\\mbfitvartheta</td> <td>MATHEMATICAL BOLD ITALIC THETA SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D752</td> <td>𝝒</td> <td>\\mbfitvarkappa</td> <td>MATHEMATICAL BOLD ITALIC KAPPA SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D753</td> <td>𝝓</td> <td>\\mbfitvarphi</td> <td>MATHEMATICAL BOLD ITALIC PHI SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D754</td> <td>𝝔</td> <td>\\mbfitvarrho</td> <td>MATHEMATICAL BOLD ITALIC RHO SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D755</td> <td>𝝕</td> <td>\\mbfitvarpi</td> <td>MATHEMATICAL BOLD ITALIC PI SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D756</td> <td>𝝖</td> <td>\\mbfsansAlpha</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL ALPHA</td> </tr> <tr class=\"row-even\">\n<td>U+1D757</td> <td>𝝗</td> <td>\\mbfsansBeta</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL BETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D758</td> <td>𝝘</td> <td>\\mbfsansGamma</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D759</td> <td>𝝙</td> <td>\\mbfsansDelta</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL DELTA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D75A</td> <td>𝝚</td> <td>\\mbfsansEpsilon</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL EPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D75B</td> <td>𝝛</td> <td>\\mbfsansZeta</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL ZETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D75C</td> <td>𝝜</td> <td>\\mbfsansEta</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL ETA</td> </tr> <tr class=\"row-even\">\n<td>U+1D75D</td> <td>𝝝</td> <td>\\mbfsansTheta</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL THETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D75E</td> <td>𝝞</td> <td>\\mbfsansIota</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL IOTA</td> </tr> <tr class=\"row-even\">\n<td>U+1D75F</td> <td>𝝟</td> <td>\\mbfsansKappa</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL KAPPA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D760</td> <td>𝝠</td> <td>\\mbfsansLambda</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL LAMDA</td> </tr> <tr class=\"row-even\">\n<td>U+1D761</td> <td>𝝡</td> <td>\\mbfsansMu</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL MU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D762</td> <td>𝝢</td> <td>\\mbfsansNu</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL NU</td> </tr> <tr class=\"row-even\">\n<td>U+1D763</td> <td>𝝣</td> <td>\\mbfsansXi</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL XI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D764</td> <td>𝝤</td> <td>\\mbfsansOmicron</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL OMICRON</td> </tr> <tr class=\"row-even\">\n<td>U+1D765</td> <td>𝝥</td> <td>\\mbfsansPi</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL PI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D766</td> <td>𝝦</td> <td>\\mbfsansRho</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL RHO</td> </tr> <tr class=\"row-even\">\n<td>U+1D767</td> <td>𝝧</td> <td>\\mbfsansvarTheta</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL THETA SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D768</td> <td>𝝨</td> <td>\\mbfsansSigma</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL SIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D769</td> <td>𝝩</td> <td>\\mbfsansTau</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL TAU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D76A</td> <td>𝝪</td> <td>\\mbfsansUpsilon</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL UPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D76B</td> <td>𝝫</td> <td>\\mbfsansPhi</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL PHI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D76C</td> <td>𝝬</td> <td>\\mbfsansChi</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL CHI</td> </tr> <tr class=\"row-even\">\n<td>U+1D76D</td> <td>𝝭</td> <td>\\mbfsansPsi</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL PSI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D76E</td> <td>𝝮</td> <td>\\mbfsansOmega</td> <td>MATHEMATICAL SANS-SERIF BOLD CAPITAL OMEGA</td> </tr> <tr class=\"row-even\">\n<td>U+1D76F</td> <td>𝝯</td> <td>\\mbfsansnabla</td> <td>MATHEMATICAL SANS-SERIF BOLD NABLA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D770</td> <td>𝝰</td> <td>\\mbfsansalpha</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL ALPHA</td> </tr> <tr class=\"row-even\">\n<td>U+1D771</td> <td>𝝱</td> <td>\\mbfsansbeta</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL BETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D772</td> <td>𝝲</td> <td>\\mbfsansgamma</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D773</td> <td>𝝳</td> <td>\\mbfsansdelta</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL DELTA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D774</td> <td>𝝴</td> <td>\\mbfsansepsilon</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL EPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D775</td> <td>𝝵</td> <td>\\mbfsanszeta</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL ZETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D776</td> <td>𝝶</td> <td>\\mbfsanseta</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL ETA</td> </tr> <tr class=\"row-even\">\n<td>U+1D777</td> <td>𝝷</td> <td>\\mbfsanstheta</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL THETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D778</td> <td>𝝸</td> <td>\\mbfsansiota</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL IOTA</td> </tr> <tr class=\"row-even\">\n<td>U+1D779</td> <td>𝝹</td> <td>\\mbfsanskappa</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL KAPPA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D77A</td> <td>𝝺</td> <td>\\mbfsanslambda</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL LAMDA</td> </tr> <tr class=\"row-even\">\n<td>U+1D77B</td> <td>𝝻</td> <td>\\mbfsansmu</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL MU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D77C</td> <td>𝝼</td> <td>\\mbfsansnu</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL NU</td> </tr> <tr class=\"row-even\">\n<td>U+1D77D</td> <td>𝝽</td> <td>\\mbfsansxi</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL XI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D77E</td> <td>𝝾</td> <td>\\mbfsansomicron</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL OMICRON</td> </tr> <tr class=\"row-even\">\n<td>U+1D77F</td> <td>𝝿</td> <td>\\mbfsanspi</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL PI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D780</td> <td>𝞀</td> <td>\\mbfsansrho</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL RHO</td> </tr> <tr class=\"row-even\">\n<td>U+1D781</td> <td>𝞁</td> <td>\\mbfsansvarsigma</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL FINAL SIGMA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D782</td> <td>𝞂</td> <td>\\mbfsanssigma</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL SIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D783</td> <td>𝞃</td> <td>\\mbfsanstau</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL TAU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D784</td> <td>𝞄</td> <td>\\mbfsansupsilon</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL UPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D785</td> <td>𝞅</td> <td>\\mbfsansphi</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL PHI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D786</td> <td>𝞆</td> <td>\\mbfsanschi</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL CHI</td> </tr> <tr class=\"row-even\">\n<td>U+1D787</td> <td>𝞇</td> <td>\\mbfsanspsi</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL PSI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D788</td> <td>𝞈</td> <td>\\mbfsansomega</td> <td>MATHEMATICAL SANS-SERIF BOLD SMALL OMEGA</td> </tr> <tr class=\"row-even\">\n<td>U+1D789</td> <td>𝞉</td> <td>\\mbfsanspartial</td> <td>MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D78A</td> <td>𝞊</td> <td>\\mbfsansvarepsilon</td> <td>MATHEMATICAL SANS-SERIF BOLD EPSILON SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D78B</td> <td>𝞋</td> <td>\\mbfsansvartheta</td> <td>MATHEMATICAL SANS-SERIF BOLD THETA SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D78C</td> <td>𝞌</td> <td>\\mbfsansvarkappa</td> <td>MATHEMATICAL SANS-SERIF BOLD KAPPA SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D78D</td> <td>𝞍</td> <td>\\mbfsansvarphi</td> <td>MATHEMATICAL SANS-SERIF BOLD PHI SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D78E</td> <td>𝞎</td> <td>\\mbfsansvarrho</td> <td>MATHEMATICAL SANS-SERIF BOLD RHO SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D78F</td> <td>𝞏</td> <td>\\mbfsansvarpi</td> <td>MATHEMATICAL SANS-SERIF BOLD PI SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D790</td> <td>𝞐</td> <td>\\mbfitsansAlpha</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ALPHA</td> </tr> <tr class=\"row-even\">\n<td>U+1D791</td> <td>𝞑</td> <td>\\mbfitsansBeta</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL BETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D792</td> <td>𝞒</td> <td>\\mbfitsansGamma</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D793</td> <td>𝞓</td> <td>\\mbfitsansDelta</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL DELTA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D794</td> <td>𝞔</td> <td>\\mbfitsansEpsilon</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL EPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D795</td> <td>𝞕</td> <td>\\mbfitsansZeta</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ZETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D796</td> <td>𝞖</td> <td>\\mbfitsansEta</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ETA</td> </tr> <tr class=\"row-even\">\n<td>U+1D797</td> <td>𝞗</td> <td>\\mbfitsansTheta</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL THETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D798</td> <td>𝞘</td> <td>\\mbfitsansIota</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL IOTA</td> </tr> <tr class=\"row-even\">\n<td>U+1D799</td> <td>𝞙</td> <td>\\mbfitsansKappa</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL KAPPA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D79A</td> <td>𝞚</td> <td>\\mbfitsansLambda</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL LAMDA</td> </tr> <tr class=\"row-even\">\n<td>U+1D79B</td> <td>𝞛</td> <td>\\mbfitsansMu</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL MU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D79C</td> <td>𝞜</td> <td>\\mbfitsansNu</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL NU</td> </tr> <tr class=\"row-even\">\n<td>U+1D79D</td> <td>𝞝</td> <td>\\mbfitsansXi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL XI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D79E</td> <td>𝞞</td> <td>\\mbfitsansOmicron</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMICRON</td> </tr> <tr class=\"row-even\">\n<td>U+1D79F</td> <td>𝞟</td> <td>\\mbfitsansPi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7A0</td> <td>𝞠</td> <td>\\mbfitsansRho</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL RHO</td> </tr> <tr class=\"row-even\">\n<td>U+1D7A1</td> <td>𝞡</td> <td>\\mbfitsansvarTheta</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL THETA SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7A2</td> <td>𝞢</td> <td>\\mbfitsansSigma</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL SIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D7A3</td> <td>𝞣</td> <td>\\mbfitsansTau</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL TAU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7A4</td> <td>𝞤</td> <td>\\mbfitsansUpsilon</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL UPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D7A5</td> <td>𝞥</td> <td>\\mbfitsansPhi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PHI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7A6</td> <td>𝞦</td> <td>\\mbfitsansChi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL CHI</td> </tr> <tr class=\"row-even\">\n<td>U+1D7A7</td> <td>𝞧</td> <td>\\mbfitsansPsi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PSI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7A8</td> <td>𝞨</td> <td>\\mbfitsansOmega</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMEGA</td> </tr> <tr class=\"row-even\">\n<td>U+1D7A9</td> <td>𝞩</td> <td>\\mbfitsansnabla</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7AA</td> <td>𝞪</td> <td>\\mbfitsansalpha</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ALPHA</td> </tr> <tr class=\"row-even\">\n<td>U+1D7AB</td> <td>𝞫</td> <td>\\mbfitsansbeta</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL BETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7AC</td> <td>𝞬</td> <td>\\mbfitsansgamma</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL GAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D7AD</td> <td>𝞭</td> <td>\\mbfitsansdelta</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL DELTA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7AE</td> <td>𝞮</td> <td>\\mbfitsansepsilon</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL EPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D7AF</td> <td>𝞯</td> <td>\\mbfitsanszeta</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ZETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7B0</td> <td>𝞰</td> <td>\\mbfitsanseta</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ETA</td> </tr> <tr class=\"row-even\">\n<td>U+1D7B1</td> <td>𝞱</td> <td>\\mbfitsanstheta</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL THETA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7B2</td> <td>𝞲</td> <td>\\mbfitsansiota</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL IOTA</td> </tr> <tr class=\"row-even\">\n<td>U+1D7B3</td> <td>𝞳</td> <td>\\mbfitsanskappa</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL KAPPA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7B4</td> <td>𝞴</td> <td>\\mbfitsanslambda</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL LAMDA</td> </tr> <tr class=\"row-even\">\n<td>U+1D7B5</td> <td>𝞵</td> <td>\\mbfitsansmu</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL MU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7B6</td> <td>𝞶</td> <td>\\mbfitsansnu</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL NU</td> </tr> <tr class=\"row-even\">\n<td>U+1D7B7</td> <td>𝞷</td> <td>\\mbfitsansxi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL XI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7B8</td> <td>𝞸</td> <td>\\mbfitsansomicron</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMICRON</td> </tr> <tr class=\"row-even\">\n<td>U+1D7B9</td> <td>𝞹</td> <td>\\mbfitsanspi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7BA</td> <td>𝞺</td> <td>\\mbfitsansrho</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL RHO</td> </tr> <tr class=\"row-even\">\n<td>U+1D7BB</td> <td>𝞻</td> <td>\\mbfitsansvarsigma</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL FINAL SIGMA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7BC</td> <td>𝞼</td> <td>\\mbfitsanssigma</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL SIGMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D7BD</td> <td>𝞽</td> <td>\\mbfitsanstau</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL TAU</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7BE</td> <td>𝞾</td> <td>\\mbfitsansupsilon</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL UPSILON</td> </tr> <tr class=\"row-even\">\n<td>U+1D7BF</td> <td>𝞿</td> <td>\\mbfitsansphi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PHI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7C0</td> <td>𝟀</td> <td>\\mbfitsanschi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL CHI</td> </tr> <tr class=\"row-even\">\n<td>U+1D7C1</td> <td>𝟁</td> <td>\\mbfitsanspsi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PSI</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7C2</td> <td>𝟂</td> <td>\\mbfitsansomega</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA</td> </tr> <tr class=\"row-even\">\n<td>U+1D7C3</td> <td>𝟃</td> <td>\\mbfitsanspartial</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7C4</td> <td>𝟄</td> <td>\\mbfitsansvarepsilon</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC EPSILON SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D7C5</td> <td>𝟅</td> <td>\\mbfitsansvartheta</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC THETA SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7C6</td> <td>𝟆</td> <td>\\mbfitsansvarkappa</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC KAPPA SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D7C7</td> <td>𝟇</td> <td>\\mbfitsansvarphi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC PHI SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7C8</td> <td>𝟈</td> <td>\\mbfitsansvarrho</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC RHO SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1D7C9</td> <td>𝟉</td> <td>\\mbfitsansvarpi</td> <td>MATHEMATICAL SANS-SERIF BOLD ITALIC PI SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7CA</td> <td>𝟊</td> <td>\\mbfDigamma</td> <td>MATHEMATICAL BOLD CAPITAL DIGAMMA</td> </tr> <tr class=\"row-even\">\n<td>U+1D7CB</td> <td>𝟋</td> <td>\\mbfdigamma</td> <td>MATHEMATICAL BOLD SMALL DIGAMMA</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7CE</td> <td>𝟎</td> <td>\\mbfzero</td> <td>MATHEMATICAL BOLD DIGIT ZERO</td> </tr> <tr class=\"row-even\">\n<td>U+1D7CF</td> <td>𝟏</td> <td>\\mbfone</td> <td>MATHEMATICAL BOLD DIGIT ONE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7D0</td> <td>𝟐</td> <td>\\mbftwo</td> <td>MATHEMATICAL BOLD DIGIT TWO</td> </tr> <tr class=\"row-even\">\n<td>U+1D7D1</td> <td>𝟑</td> <td>\\mbfthree</td> <td>MATHEMATICAL BOLD DIGIT THREE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7D2</td> <td>𝟒</td> <td>\\mbffour</td> <td>MATHEMATICAL BOLD DIGIT FOUR</td> </tr> <tr class=\"row-even\">\n<td>U+1D7D3</td> <td>𝟓</td> <td>\\mbffive</td> <td>MATHEMATICAL BOLD DIGIT FIVE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7D4</td> <td>𝟔</td> <td>\\mbfsix</td> <td>MATHEMATICAL BOLD DIGIT SIX</td> </tr> <tr class=\"row-even\">\n<td>U+1D7D5</td> <td>𝟕</td> <td>\\mbfseven</td> <td>MATHEMATICAL BOLD DIGIT SEVEN</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7D6</td> <td>𝟖</td> <td>\\mbfeight</td> <td>MATHEMATICAL BOLD DIGIT EIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+1D7D7</td> <td>𝟗</td> <td>\\mbfnine</td> <td>MATHEMATICAL BOLD DIGIT NINE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7D8</td> <td>𝟘</td> <td>\\Bbbzero</td> <td>MATHEMATICAL DOUBLE-STRUCK DIGIT ZERO</td> </tr> <tr class=\"row-even\">\n<td>U+1D7D9</td> <td>𝟙</td> <td>\\Bbbone</td> <td>MATHEMATICAL DOUBLE-STRUCK DIGIT ONE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7DA</td> <td>𝟚</td> <td>\\Bbbtwo</td> <td>MATHEMATICAL DOUBLE-STRUCK DIGIT TWO</td> </tr> <tr class=\"row-even\">\n<td>U+1D7DB</td> <td>𝟛</td> <td>\\Bbbthree</td> <td>MATHEMATICAL DOUBLE-STRUCK DIGIT THREE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7DC</td> <td>𝟜</td> <td>\\Bbbfour</td> <td>MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR</td> </tr> <tr class=\"row-even\">\n<td>U+1D7DD</td> <td>𝟝</td> <td>\\Bbbfive</td> <td>MATHEMATICAL DOUBLE-STRUCK DIGIT FIVE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7DE</td> <td>𝟞</td> <td>\\Bbbsix</td> <td>MATHEMATICAL DOUBLE-STRUCK DIGIT SIX</td> </tr> <tr class=\"row-even\">\n<td>U+1D7DF</td> <td>𝟟</td> <td>\\Bbbseven</td> <td>MATHEMATICAL DOUBLE-STRUCK DIGIT SEVEN</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7E0</td> <td>𝟠</td> <td>\\Bbbeight</td> <td>MATHEMATICAL DOUBLE-STRUCK DIGIT EIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+1D7E1</td> <td>𝟡</td> <td>\\Bbbnine</td> <td>MATHEMATICAL DOUBLE-STRUCK DIGIT NINE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7E2</td> <td>𝟢</td> <td>\\msanszero</td> <td>MATHEMATICAL SANS-SERIF DIGIT ZERO</td> </tr> <tr class=\"row-even\">\n<td>U+1D7E3</td> <td>𝟣</td> <td>\\msansone</td> <td>MATHEMATICAL SANS-SERIF DIGIT ONE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7E4</td> <td>𝟤</td> <td>\\msanstwo</td> <td>MATHEMATICAL SANS-SERIF DIGIT TWO</td> </tr> <tr class=\"row-even\">\n<td>U+1D7E5</td> <td>𝟥</td> <td>\\msansthree</td> <td>MATHEMATICAL SANS-SERIF DIGIT THREE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7E6</td> <td>𝟦</td> <td>\\msansfour</td> <td>MATHEMATICAL SANS-SERIF DIGIT FOUR</td> </tr> <tr class=\"row-even\">\n<td>U+1D7E7</td> <td>𝟧</td> <td>\\msansfive</td> <td>MATHEMATICAL SANS-SERIF DIGIT FIVE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7E8</td> <td>𝟨</td> <td>\\msanssix</td> <td>MATHEMATICAL SANS-SERIF DIGIT SIX</td> </tr> <tr class=\"row-even\">\n<td>U+1D7E9</td> <td>𝟩</td> <td>\\msansseven</td> <td>MATHEMATICAL SANS-SERIF DIGIT SEVEN</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7EA</td> <td>𝟪</td> <td>\\msanseight</td> <td>MATHEMATICAL SANS-SERIF DIGIT EIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+1D7EB</td> <td>𝟫</td> <td>\\msansnine</td> <td>MATHEMATICAL SANS-SERIF DIGIT NINE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7EC</td> <td>𝟬</td> <td>\\mbfsanszero</td> <td>MATHEMATICAL SANS-SERIF BOLD DIGIT ZERO</td> </tr> <tr class=\"row-even\">\n<td>U+1D7ED</td> <td>𝟭</td> <td>\\mbfsansone</td> <td>MATHEMATICAL SANS-SERIF BOLD DIGIT ONE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7EE</td> <td>𝟮</td> <td>\\mbfsanstwo</td> <td>MATHEMATICAL SANS-SERIF BOLD DIGIT TWO</td> </tr> <tr class=\"row-even\">\n<td>U+1D7EF</td> <td>𝟯</td> <td>\\mbfsansthree</td> <td>MATHEMATICAL SANS-SERIF BOLD DIGIT THREE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7F0</td> <td>𝟰</td> <td>\\mbfsansfour</td> <td>MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR</td> </tr> <tr class=\"row-even\">\n<td>U+1D7F1</td> <td>𝟱</td> <td>\\mbfsansfive</td> <td>MATHEMATICAL SANS-SERIF BOLD DIGIT FIVE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7F2</td> <td>𝟲</td> <td>\\mbfsanssix</td> <td>MATHEMATICAL SANS-SERIF BOLD DIGIT SIX</td> </tr> <tr class=\"row-even\">\n<td>U+1D7F3</td> <td>𝟳</td> <td>\\mbfsansseven</td> <td>MATHEMATICAL SANS-SERIF BOLD DIGIT SEVEN</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7F4</td> <td>𝟴</td> <td>\\mbfsanseight</td> <td>MATHEMATICAL SANS-SERIF BOLD DIGIT EIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+1D7F5</td> <td>𝟵</td> <td>\\mbfsansnine</td> <td>MATHEMATICAL SANS-SERIF BOLD DIGIT NINE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7F6</td> <td>𝟶</td> <td>\\mttzero</td> <td>MATHEMATICAL MONOSPACE DIGIT ZERO</td> </tr> <tr class=\"row-even\">\n<td>U+1D7F7</td> <td>𝟷</td> <td>\\mttone</td> <td>MATHEMATICAL MONOSPACE DIGIT ONE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7F8</td> <td>𝟸</td> <td>\\mtttwo</td> <td>MATHEMATICAL MONOSPACE DIGIT TWO</td> </tr> <tr class=\"row-even\">\n<td>U+1D7F9</td> <td>𝟹</td> <td>\\mttthree</td> <td>MATHEMATICAL MONOSPACE DIGIT THREE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7FA</td> <td>𝟺</td> <td>\\mttfour</td> <td>MATHEMATICAL MONOSPACE DIGIT FOUR</td> </tr> <tr class=\"row-even\">\n<td>U+1D7FB</td> <td>𝟻</td> <td>\\mttfive</td> <td>MATHEMATICAL MONOSPACE DIGIT FIVE</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7FC</td> <td>𝟼</td> <td>\\mttsix</td> <td>MATHEMATICAL MONOSPACE DIGIT SIX</td> </tr> <tr class=\"row-even\">\n<td>U+1D7FD</td> <td>𝟽</td> <td>\\mttseven</td> <td>MATHEMATICAL MONOSPACE DIGIT SEVEN</td> </tr> <tr class=\"row-odd\">\n<td>U+1D7FE</td> <td>𝟾</td> <td>\\mtteight</td> <td>MATHEMATICAL MONOSPACE DIGIT EIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+1D7FF</td> <td>𝟿</td> <td>\\mttnine</td> <td>MATHEMATICAL MONOSPACE DIGIT NINE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F004</td> <td>🀄</td> <td>\\:mahjong:</td> <td>MAHJONG TILE RED DRAGON</td> </tr> <tr class=\"row-even\">\n<td>U+1F0CF</td> <td>🃏</td> <td>\\:black_joker:</td> <td>PLAYING CARD BLACK JOKER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F170</td> <td>🅰</td> <td>\\:a:</td> <td>NEGATIVE SQUARED LATIN CAPITAL LETTER A</td> </tr> <tr class=\"row-even\">\n<td>U+1F171</td> <td>🅱</td> <td>\\:b:</td> <td>NEGATIVE SQUARED LATIN CAPITAL LETTER B</td> </tr> <tr class=\"row-odd\">\n<td>U+1F17E</td> <td>🅾</td> <td>\\:o2:</td> <td>NEGATIVE SQUARED LATIN CAPITAL LETTER O</td> </tr> <tr class=\"row-even\">\n<td>U+1F17F</td> <td>🅿</td> <td>\\:parking:</td> <td>NEGATIVE SQUARED LATIN CAPITAL LETTER P</td> </tr> <tr class=\"row-odd\">\n<td>U+1F18E</td> <td>🆎</td> <td>\\:ab:</td> <td>NEGATIVE SQUARED AB</td> </tr> <tr class=\"row-even\">\n<td>U+1F191</td> <td>🆑</td> <td>\\:cl:</td> <td>SQUARED CL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F192</td> <td>🆒</td> <td>\\:cool:</td> <td>SQUARED COOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F193</td> <td>🆓</td> <td>\\:free:</td> <td>SQUARED FREE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F194</td> <td>🆔</td> <td>\\:id:</td> <td>SQUARED ID</td> </tr> <tr class=\"row-even\">\n<td>U+1F195</td> <td>🆕</td> <td>\\:new:</td> <td>SQUARED NEW</td> </tr> <tr class=\"row-odd\">\n<td>U+1F196</td> <td>🆖</td> <td>\\:ng:</td> <td>SQUARED NG</td> </tr> <tr class=\"row-even\">\n<td>U+1F197</td> <td>🆗</td> <td>\\:ok:</td> <td>SQUARED OK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F198</td> <td>🆘</td> <td>\\:sos:</td> <td>SQUARED SOS</td> </tr> <tr class=\"row-even\">\n<td>U+1F199</td> <td>🆙</td> <td>\\:up:</td> <td>SQUARED UP WITH EXCLAMATION MARK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F19A</td> <td>🆚</td> <td>\\:vs:</td> <td>SQUARED VS</td> </tr> <tr class=\"row-even\">\n<td>U+1F201</td> <td>🈁</td> <td>\\:koko:</td> <td>SQUARED KATAKANA KOKO</td> </tr> <tr class=\"row-odd\">\n<td>U+1F202</td> <td>🈂</td> <td>\\:sa:</td> <td>SQUARED KATAKANA SA</td> </tr> <tr class=\"row-even\">\n<td>U+1F21A</td> <td>🈚</td> <td>\\:u7121:</td> <td>SQUARED CJK UNIFIED IDEOGRAPH-7121</td> </tr> <tr class=\"row-odd\">\n<td>U+1F22F</td> <td>🈯</td> <td>\\:u6307:</td> <td>SQUARED CJK UNIFIED IDEOGRAPH-6307</td> </tr> <tr class=\"row-even\">\n<td>U+1F232</td> <td>🈲</td> <td>\\:u7981:</td> <td>SQUARED CJK UNIFIED IDEOGRAPH-7981</td> </tr> <tr class=\"row-odd\">\n<td>U+1F233</td> <td>🈳</td> <td>\\:u7a7a:</td> <td>SQUARED CJK UNIFIED IDEOGRAPH-7A7A</td> </tr> <tr class=\"row-even\">\n<td>U+1F234</td> <td>🈴</td> <td>\\:u5408:</td> <td>SQUARED CJK UNIFIED IDEOGRAPH-5408</td> </tr> <tr class=\"row-odd\">\n<td>U+1F235</td> <td>🈵</td> <td>\\:u6e80:</td> <td>SQUARED CJK UNIFIED IDEOGRAPH-6E80</td> </tr> <tr class=\"row-even\">\n<td>U+1F236</td> <td>🈶</td> <td>\\:u6709:</td> <td>SQUARED CJK UNIFIED IDEOGRAPH-6709</td> </tr> <tr class=\"row-odd\">\n<td>U+1F237</td> <td>🈷</td> <td>\\:u6708:</td> <td>SQUARED CJK UNIFIED IDEOGRAPH-6708</td> </tr> <tr class=\"row-even\">\n<td>U+1F238</td> <td>🈸</td> <td>\\:u7533:</td> <td>SQUARED CJK UNIFIED IDEOGRAPH-7533</td> </tr> <tr class=\"row-odd\">\n<td>U+1F239</td> <td>🈹</td> <td>\\:u5272:</td> <td>SQUARED CJK UNIFIED IDEOGRAPH-5272</td> </tr> <tr class=\"row-even\">\n<td>U+1F23A</td> <td>🈺</td> <td>\\:u55b6:</td> <td>SQUARED CJK UNIFIED IDEOGRAPH-55B6</td> </tr> <tr class=\"row-odd\">\n<td>U+1F250</td> <td>🉐</td> <td>\\:ideograph_advantage:</td> <td>CIRCLED IDEOGRAPH ADVANTAGE</td> </tr> <tr class=\"row-even\">\n<td>U+1F251</td> <td>🉑</td> <td>\\:accept:</td> <td>CIRCLED IDEOGRAPH ACCEPT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F300</td> <td>🌀</td> <td>\\:cyclone:</td> <td>CYCLONE</td> </tr> <tr class=\"row-even\">\n<td>U+1F301</td> <td>🌁</td> <td>\\:foggy:</td> <td>FOGGY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F302</td> <td>🌂</td> <td>\\:closed_umbrella:</td> <td>CLOSED UMBRELLA</td> </tr> <tr class=\"row-even\">\n<td>U+1F303</td> <td>🌃</td> <td>\\:night_with_stars:</td> <td>NIGHT WITH STARS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F304</td> <td>🌄</td> <td>\\:sunrise_over_mountains:</td> <td>SUNRISE OVER MOUNTAINS</td> </tr> <tr class=\"row-even\">\n<td>U+1F305</td> <td>🌅</td> <td>\\:sunrise:</td> <td>SUNRISE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F306</td> <td>🌆</td> <td>\\:city_sunset:</td> <td>CITYSCAPE AT DUSK</td> </tr> <tr class=\"row-even\">\n<td>U+1F307</td> <td>🌇</td> <td>\\:city_sunrise:</td> <td>SUNSET OVER BUILDINGS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F308</td> <td>🌈</td> <td>\\:rainbow:</td> <td>RAINBOW</td> </tr> <tr class=\"row-even\">\n<td>U+1F309</td> <td>🌉</td> <td>\\:bridge_at_night:</td> <td>BRIDGE AT NIGHT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F30A</td> <td>🌊</td> <td>\\:ocean:</td> <td>WATER WAVE</td> </tr> <tr class=\"row-even\">\n<td>U+1F30B</td> <td>🌋</td> <td>\\:volcano:</td> <td>VOLCANO</td> </tr> <tr class=\"row-odd\">\n<td>U+1F30C</td> <td>🌌</td> <td>\\:milky_way:</td> <td>MILKY WAY</td> </tr> <tr class=\"row-even\">\n<td>U+1F30D</td> <td>🌍</td> <td>\\:earth_africa:</td> <td>EARTH GLOBE EUROPE-AFRICA</td> </tr> <tr class=\"row-odd\">\n<td>U+1F30E</td> <td>🌎</td> <td>\\:earth_americas:</td> <td>EARTH GLOBE AMERICAS</td> </tr> <tr class=\"row-even\">\n<td>U+1F30F</td> <td>🌏</td> <td>\\:earth_asia:</td> <td>EARTH GLOBE ASIA-AUSTRALIA</td> </tr> <tr class=\"row-odd\">\n<td>U+1F310</td> <td>🌐</td> <td>\\:globe_with_meridians:</td> <td>GLOBE WITH MERIDIANS</td> </tr> <tr class=\"row-even\">\n<td>U+1F311</td> <td>🌑</td> <td>\\:new_moon:</td> <td>NEW MOON SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F312</td> <td>🌒</td> <td>\\:waxing_crescent_moon:</td> <td>WAXING CRESCENT MOON SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F313</td> <td>🌓</td> <td>\\:first_quarter_moon:</td> <td>FIRST QUARTER MOON SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F314</td> <td>🌔</td> <td>\\:moon:</td> <td>WAXING GIBBOUS MOON SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F315</td> <td>🌕</td> <td>\\:full_moon:</td> <td>FULL MOON SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F316</td> <td>🌖</td> <td>\\:waning_gibbous_moon:</td> <td>WANING GIBBOUS MOON SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F317</td> <td>🌗</td> <td>\\:last_quarter_moon:</td> <td>LAST QUARTER MOON SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F318</td> <td>🌘</td> <td>\\:waning_crescent_moon:</td> <td>WANING CRESCENT MOON SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F319</td> <td>🌙</td> <td>\\:crescent_moon:</td> <td>CRESCENT MOON</td> </tr> <tr class=\"row-odd\">\n<td>U+1F31A</td> <td>🌚</td> <td>\\:new_moon_with_face:</td> <td>NEW MOON WITH FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F31B</td> <td>🌛</td> <td>\\:first_quarter_moon_with_face:</td> <td>FIRST QUARTER MOON WITH FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F31C</td> <td>🌜</td> <td>\\:last_quarter_moon_with_face:</td> <td>LAST QUARTER MOON WITH FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F31D</td> <td>🌝</td> <td>\\:full_moon_with_face:</td> <td>FULL MOON WITH FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F31E</td> <td>🌞</td> <td>\\:sun_with_face:</td> <td>SUN WITH FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F31F</td> <td>🌟</td> <td>\\:star2:</td> <td>GLOWING STAR</td> </tr> <tr class=\"row-odd\">\n<td>U+1F320</td> <td>🌠</td> <td>\\:stars:</td> <td>SHOOTING STAR</td> </tr> <tr class=\"row-even\">\n<td>U+1F330</td> <td>🌰</td> <td>\\:chestnut:</td> <td>CHESTNUT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F331</td> <td>🌱</td> <td>\\:seedling:</td> <td>SEEDLING</td> </tr> <tr class=\"row-even\">\n<td>U+1F332</td> <td>🌲</td> <td>\\:evergreen_tree:</td> <td>EVERGREEN TREE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F333</td> <td>🌳</td> <td>\\:deciduous_tree:</td> <td>DECIDUOUS TREE</td> </tr> <tr class=\"row-even\">\n<td>U+1F334</td> <td>🌴</td> <td>\\:palm_tree:</td> <td>PALM TREE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F335</td> <td>🌵</td> <td>\\:cactus:</td> <td>CACTUS</td> </tr> <tr class=\"row-even\">\n<td>U+1F337</td> <td>🌷</td> <td>\\:tulip:</td> <td>TULIP</td> </tr> <tr class=\"row-odd\">\n<td>U+1F338</td> <td>🌸</td> <td>\\:cherry_blossom:</td> <td>CHERRY BLOSSOM</td> </tr> <tr class=\"row-even\">\n<td>U+1F339</td> <td>🌹</td> <td>\\:rose:</td> <td>ROSE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F33A</td> <td>🌺</td> <td>\\:hibiscus:</td> <td>HIBISCUS</td> </tr> <tr class=\"row-even\">\n<td>U+1F33B</td> <td>🌻</td> <td>\\:sunflower:</td> <td>SUNFLOWER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F33C</td> <td>🌼</td> <td>\\:blossom:</td> <td>BLOSSOM</td> </tr> <tr class=\"row-even\">\n<td>U+1F33D</td> <td>🌽</td> <td>\\:corn:</td> <td>EAR OF MAIZE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F33E</td> <td>🌾</td> <td>\\:ear_of_rice:</td> <td>EAR OF RICE</td> </tr> <tr class=\"row-even\">\n<td>U+1F33F</td> <td>🌿</td> <td>\\:herb:</td> <td>HERB</td> </tr> <tr class=\"row-odd\">\n<td>U+1F340</td> <td>🍀</td> <td>\\:four_leaf_clover:</td> <td>FOUR LEAF CLOVER</td> </tr> <tr class=\"row-even\">\n<td>U+1F341</td> <td>🍁</td> <td>\\:maple_leaf:</td> <td>MAPLE LEAF</td> </tr> <tr class=\"row-odd\">\n<td>U+1F342</td> <td>🍂</td> <td>\\:fallen_leaf:</td> <td>FALLEN LEAF</td> </tr> <tr class=\"row-even\">\n<td>U+1F343</td> <td>🍃</td> <td>\\:leaves:</td> <td>LEAF FLUTTERING IN WIND</td> </tr> <tr class=\"row-odd\">\n<td>U+1F344</td> <td>🍄</td> <td>\\:mushroom:</td> <td>MUSHROOM</td> </tr> <tr class=\"row-even\">\n<td>U+1F345</td> <td>🍅</td> <td>\\:tomato:</td> <td>TOMATO</td> </tr> <tr class=\"row-odd\">\n<td>U+1F346</td> <td>🍆</td> <td>\\:eggplant:</td> <td>AUBERGINE</td> </tr> <tr class=\"row-even\">\n<td>U+1F347</td> <td>🍇</td> <td>\\:grapes:</td> <td>GRAPES</td> </tr> <tr class=\"row-odd\">\n<td>U+1F348</td> <td>🍈</td> <td>\\:melon:</td> <td>MELON</td> </tr> <tr class=\"row-even\">\n<td>U+1F349</td> <td>🍉</td> <td>\\:watermelon:</td> <td>WATERMELON</td> </tr> <tr class=\"row-odd\">\n<td>U+1F34A</td> <td>🍊</td> <td>\\:tangerine:</td> <td>TANGERINE</td> </tr> <tr class=\"row-even\">\n<td>U+1F34B</td> <td>🍋</td> <td>\\:lemon:</td> <td>LEMON</td> </tr> <tr class=\"row-odd\">\n<td>U+1F34C</td> <td>🍌</td> <td>\\:banana:</td> <td>BANANA</td> </tr> <tr class=\"row-even\">\n<td>U+1F34D</td> <td>🍍</td> <td>\\:pineapple:</td> <td>PINEAPPLE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F34E</td> <td>🍎</td> <td>\\:apple:</td> <td>RED APPLE</td> </tr> <tr class=\"row-even\">\n<td>U+1F34F</td> <td>🍏</td> <td>\\:green_apple:</td> <td>GREEN APPLE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F350</td> <td>🍐</td> <td>\\:pear:</td> <td>PEAR</td> </tr> <tr class=\"row-even\">\n<td>U+1F351</td> <td>🍑</td> <td>\\:peach:</td> <td>PEACH</td> </tr> <tr class=\"row-odd\">\n<td>U+1F352</td> <td>🍒</td> <td>\\:cherries:</td> <td>CHERRIES</td> </tr> <tr class=\"row-even\">\n<td>U+1F353</td> <td>🍓</td> <td>\\:strawberry:</td> <td>STRAWBERRY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F354</td> <td>🍔</td> <td>\\:hamburger:</td> <td>HAMBURGER</td> </tr> <tr class=\"row-even\">\n<td>U+1F355</td> <td>🍕</td> <td>\\:pizza:</td> <td>SLICE OF PIZZA</td> </tr> <tr class=\"row-odd\">\n<td>U+1F356</td> <td>🍖</td> <td>\\:meat_on_bone:</td> <td>MEAT ON BONE</td> </tr> <tr class=\"row-even\">\n<td>U+1F357</td> <td>🍗</td> <td>\\:poultry_leg:</td> <td>POULTRY LEG</td> </tr> <tr class=\"row-odd\">\n<td>U+1F358</td> <td>🍘</td> <td>\\:rice_cracker:</td> <td>RICE CRACKER</td> </tr> <tr class=\"row-even\">\n<td>U+1F359</td> <td>🍙</td> <td>\\:rice_ball:</td> <td>RICE BALL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F35A</td> <td>🍚</td> <td>\\:rice:</td> <td>COOKED RICE</td> </tr> <tr class=\"row-even\">\n<td>U+1F35B</td> <td>🍛</td> <td>\\:curry:</td> <td>CURRY AND RICE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F35C</td> <td>🍜</td> <td>\\:ramen:</td> <td>STEAMING BOWL</td> </tr> <tr class=\"row-even\">\n<td>U+1F35D</td> <td>🍝</td> <td>\\:spaghetti:</td> <td>SPAGHETTI</td> </tr> <tr class=\"row-odd\">\n<td>U+1F35E</td> <td>🍞</td> <td>\\:bread:</td> <td>BREAD</td> </tr> <tr class=\"row-even\">\n<td>U+1F35F</td> <td>🍟</td> <td>\\:fries:</td> <td>FRENCH FRIES</td> </tr> <tr class=\"row-odd\">\n<td>U+1F360</td> <td>🍠</td> <td>\\:sweet_potato:</td> <td>ROASTED SWEET POTATO</td> </tr> <tr class=\"row-even\">\n<td>U+1F361</td> <td>🍡</td> <td>\\:dango:</td> <td>DANGO</td> </tr> <tr class=\"row-odd\">\n<td>U+1F362</td> <td>🍢</td> <td>\\:oden:</td> <td>ODEN</td> </tr> <tr class=\"row-even\">\n<td>U+1F363</td> <td>🍣</td> <td>\\:sushi:</td> <td>SUSHI</td> </tr> <tr class=\"row-odd\">\n<td>U+1F364</td> <td>🍤</td> <td>\\:fried_shrimp:</td> <td>FRIED SHRIMP</td> </tr> <tr class=\"row-even\">\n<td>U+1F365</td> <td>🍥</td> <td>\\:fish_cake:</td> <td>FISH CAKE WITH SWIRL DESIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F366</td> <td>🍦</td> <td>\\:icecream:</td> <td>SOFT ICE CREAM</td> </tr> <tr class=\"row-even\">\n<td>U+1F367</td> <td>🍧</td> <td>\\:shaved_ice:</td> <td>SHAVED ICE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F368</td> <td>🍨</td> <td>\\:ice_cream:</td> <td>ICE CREAM</td> </tr> <tr class=\"row-even\">\n<td>U+1F369</td> <td>🍩</td> <td>\\:doughnut:</td> <td>DOUGHNUT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F36A</td> <td>🍪</td> <td>\\:cookie:</td> <td>COOKIE</td> </tr> <tr class=\"row-even\">\n<td>U+1F36B</td> <td>🍫</td> <td>\\:chocolate_bar:</td> <td>CHOCOLATE BAR</td> </tr> <tr class=\"row-odd\">\n<td>U+1F36C</td> <td>🍬</td> <td>\\:candy:</td> <td>CANDY</td> </tr> <tr class=\"row-even\">\n<td>U+1F36D</td> <td>🍭</td> <td>\\:lollipop:</td> <td>LOLLIPOP</td> </tr> <tr class=\"row-odd\">\n<td>U+1F36E</td> <td>🍮</td> <td>\\:custard:</td> <td>CUSTARD</td> </tr> <tr class=\"row-even\">\n<td>U+1F36F</td> <td>🍯</td> <td>\\:honey_pot:</td> <td>HONEY POT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F370</td> <td>🍰</td> <td>\\:cake:</td> <td>SHORTCAKE</td> </tr> <tr class=\"row-even\">\n<td>U+1F371</td> <td>🍱</td> <td>\\:bento:</td> <td>BENTO BOX</td> </tr> <tr class=\"row-odd\">\n<td>U+1F372</td> <td>🍲</td> <td>\\:stew:</td> <td>POT OF FOOD</td> </tr> <tr class=\"row-even\">\n<td>U+1F373</td> <td>🍳</td> <td>\\:egg:</td> <td>COOKING</td> </tr> <tr class=\"row-odd\">\n<td>U+1F374</td> <td>🍴</td> <td>\\:fork_and_knife:</td> <td>FORK AND KNIFE</td> </tr> <tr class=\"row-even\">\n<td>U+1F375</td> <td>🍵</td> <td>\\:tea:</td> <td>TEACUP WITHOUT HANDLE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F376</td> <td>🍶</td> <td>\\:sake:</td> <td>SAKE BOTTLE AND CUP</td> </tr> <tr class=\"row-even\">\n<td>U+1F377</td> <td>🍷</td> <td>\\:wine_glass:</td> <td>WINE GLASS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F378</td> <td>🍸</td> <td>\\:cocktail:</td> <td>COCKTAIL GLASS</td> </tr> <tr class=\"row-even\">\n<td>U+1F379</td> <td>🍹</td> <td>\\:tropical_drink:</td> <td>TROPICAL DRINK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F37A</td> <td>🍺</td> <td>\\:beer:</td> <td>BEER MUG</td> </tr> <tr class=\"row-even\">\n<td>U+1F37B</td> <td>🍻</td> <td>\\:beers:</td> <td>CLINKING BEER MUGS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F37C</td> <td>🍼</td> <td>\\:baby_bottle:</td> <td>BABY BOTTLE</td> </tr> <tr class=\"row-even\">\n<td>U+1F380</td> <td>🎀</td> <td>\\:ribbon:</td> <td>RIBBON</td> </tr> <tr class=\"row-odd\">\n<td>U+1F381</td> <td>🎁</td> <td>\\:gift:</td> <td>WRAPPED PRESENT</td> </tr> <tr class=\"row-even\">\n<td>U+1F382</td> <td>🎂</td> <td>\\:birthday:</td> <td>BIRTHDAY CAKE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F383</td> <td>🎃</td> <td>\\:jack_o_lantern:</td> <td>JACK-O-LANTERN</td> </tr> <tr class=\"row-even\">\n<td>U+1F384</td> <td>🎄</td> <td>\\:christmas_tree:</td> <td>CHRISTMAS TREE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F385</td> <td>🎅</td> <td>\\:santa:</td> <td>FATHER CHRISTMAS</td> </tr> <tr class=\"row-even\">\n<td>U+1F386</td> <td>🎆</td> <td>\\:fireworks:</td> <td>FIREWORKS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F387</td> <td>🎇</td> <td>\\:sparkler:</td> <td>FIREWORK SPARKLER</td> </tr> <tr class=\"row-even\">\n<td>U+1F388</td> <td>🎈</td> <td>\\:balloon:</td> <td>BALLOON</td> </tr> <tr class=\"row-odd\">\n<td>U+1F389</td> <td>🎉</td> <td>\\:tada:</td> <td>PARTY POPPER</td> </tr> <tr class=\"row-even\">\n<td>U+1F38A</td> <td>🎊</td> <td>\\:confetti_ball:</td> <td>CONFETTI BALL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F38B</td> <td>🎋</td> <td>\\:tanabata_tree:</td> <td>TANABATA TREE</td> </tr> <tr class=\"row-even\">\n<td>U+1F38C</td> <td>🎌</td> <td>\\:crossed_flags:</td> <td>CROSSED FLAGS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F38D</td> <td>🎍</td> <td>\\:bamboo:</td> <td>PINE DECORATION</td> </tr> <tr class=\"row-even\">\n<td>U+1F38E</td> <td>🎎</td> <td>\\:dolls:</td> <td>JAPANESE DOLLS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F38F</td> <td>🎏</td> <td>\\:flags:</td> <td>CARP STREAMER</td> </tr> <tr class=\"row-even\">\n<td>U+1F390</td> <td>🎐</td> <td>\\:wind_chime:</td> <td>WIND CHIME</td> </tr> <tr class=\"row-odd\">\n<td>U+1F391</td> <td>🎑</td> <td>\\:rice_scene:</td> <td>MOON VIEWING CEREMONY</td> </tr> <tr class=\"row-even\">\n<td>U+1F392</td> <td>🎒</td> <td>\\:school_satchel:</td> <td>SCHOOL SATCHEL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F393</td> <td>🎓</td> <td>\\:mortar_board:</td> <td>GRADUATION CAP</td> </tr> <tr class=\"row-even\">\n<td>U+1F3A0</td> <td>🎠</td> <td>\\:carousel_horse:</td> <td>CAROUSEL HORSE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3A1</td> <td>🎡</td> <td>\\:ferris_wheel:</td> <td>FERRIS WHEEL</td> </tr> <tr class=\"row-even\">\n<td>U+1F3A2</td> <td>🎢</td> <td>\\:roller_coaster:</td> <td>ROLLER COASTER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3A3</td> <td>🎣</td> <td>\\:fishing_pole_and_fish:</td> <td>FISHING POLE AND FISH</td> </tr> <tr class=\"row-even\">\n<td>U+1F3A4</td> <td>🎤</td> <td>\\:microphone:</td> <td>MICROPHONE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3A5</td> <td>🎥</td> <td>\\:movie_camera:</td> <td>MOVIE CAMERA</td> </tr> <tr class=\"row-even\">\n<td>U+1F3A6</td> <td>🎦</td> <td>\\:cinema:</td> <td>CINEMA</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3A7</td> <td>🎧</td> <td>\\:headphones:</td> <td>HEADPHONE</td> </tr> <tr class=\"row-even\">\n<td>U+1F3A8</td> <td>🎨</td> <td>\\:art:</td> <td>ARTIST PALETTE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3A9</td> <td>🎩</td> <td>\\:tophat:</td> <td>TOP HAT</td> </tr> <tr class=\"row-even\">\n<td>U+1F3AA</td> <td>🎪</td> <td>\\:circus_tent:</td> <td>CIRCUS TENT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3AB</td> <td>🎫</td> <td>\\:ticket:</td> <td>TICKET</td> </tr> <tr class=\"row-even\">\n<td>U+1F3AC</td> <td>🎬</td> <td>\\:clapper:</td> <td>CLAPPER BOARD</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3AD</td> <td>🎭</td> <td>\\:performing_arts:</td> <td>PERFORMING ARTS</td> </tr> <tr class=\"row-even\">\n<td>U+1F3AE</td> <td>🎮</td> <td>\\:video_game:</td> <td>VIDEO GAME</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3AF</td> <td>🎯</td> <td>\\:dart:</td> <td>DIRECT HIT</td> </tr> <tr class=\"row-even\">\n<td>U+1F3B0</td> <td>🎰</td> <td>\\:slot_machine:</td> <td>SLOT MACHINE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3B1</td> <td>🎱</td> <td>\\:8ball:</td> <td>BILLIARDS</td> </tr> <tr class=\"row-even\">\n<td>U+1F3B2</td> <td>🎲</td> <td>\\:game_die:</td> <td>GAME DIE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3B3</td> <td>🎳</td> <td>\\:bowling:</td> <td>BOWLING</td> </tr> <tr class=\"row-even\">\n<td>U+1F3B4</td> <td>🎴</td> <td>\\:flower_playing_cards:</td> <td>FLOWER PLAYING CARDS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3B5</td> <td>🎵</td> <td>\\:musical_note:</td> <td>MUSICAL NOTE</td> </tr> <tr class=\"row-even\">\n<td>U+1F3B6</td> <td>🎶</td> <td>\\:notes:</td> <td>MULTIPLE MUSICAL NOTES</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3B7</td> <td>🎷</td> <td>\\:saxophone:</td> <td>SAXOPHONE</td> </tr> <tr class=\"row-even\">\n<td>U+1F3B8</td> <td>🎸</td> <td>\\:guitar:</td> <td>GUITAR</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3B9</td> <td>🎹</td> <td>\\:musical_keyboard:</td> <td>MUSICAL KEYBOARD</td> </tr> <tr class=\"row-even\">\n<td>U+1F3BA</td> <td>🎺</td> <td>\\:trumpet:</td> <td>TRUMPET</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3BB</td> <td>🎻</td> <td>\\:violin:</td> <td>VIOLIN</td> </tr> <tr class=\"row-even\">\n<td>U+1F3BC</td> <td>🎼</td> <td>\\:musical_score:</td> <td>MUSICAL SCORE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3BD</td> <td>🎽</td> <td>\\:running_shirt_with_sash:</td> <td>RUNNING SHIRT WITH SASH</td> </tr> <tr class=\"row-even\">\n<td>U+1F3BE</td> <td>🎾</td> <td>\\:tennis:</td> <td>TENNIS RACQUET AND BALL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3BF</td> <td>🎿</td> <td>\\:ski:</td> <td>SKI AND SKI BOOT</td> </tr> <tr class=\"row-even\">\n<td>U+1F3C0</td> <td>🏀</td> <td>\\:basketball:</td> <td>BASKETBALL AND HOOP</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3C1</td> <td>🏁</td> <td>\\:checkered_flag:</td> <td>CHEQUERED FLAG</td> </tr> <tr class=\"row-even\">\n<td>U+1F3C2</td> <td>🏂</td> <td>\\:snowboarder:</td> <td>SNOWBOARDER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3C3</td> <td>🏃</td> <td>\\:runner:</td> <td>RUNNER</td> </tr> <tr class=\"row-even\">\n<td>U+1F3C4</td> <td>🏄</td> <td>\\:surfer:</td> <td>SURFER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3C6</td> <td>🏆</td> <td>\\:trophy:</td> <td>TROPHY</td> </tr> <tr class=\"row-even\">\n<td>U+1F3C7</td> <td>🏇</td> <td>\\:horse_racing:</td> <td>HORSE RACING</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3C8</td> <td>🏈</td> <td>\\:football:</td> <td>AMERICAN FOOTBALL</td> </tr> <tr class=\"row-even\">\n<td>U+1F3C9</td> <td>🏉</td> <td>\\:rugby_football:</td> <td>RUGBY FOOTBALL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3CA</td> <td>🏊</td> <td>\\:swimmer:</td> <td>SWIMMER</td> </tr> <tr class=\"row-even\">\n<td>U+1F3E0</td> <td>🏠</td> <td>\\:house:</td> <td>HOUSE BUILDING</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3E1</td> <td>🏡</td> <td>\\:house_with_garden:</td> <td>HOUSE WITH GARDEN</td> </tr> <tr class=\"row-even\">\n<td>U+1F3E2</td> <td>🏢</td> <td>\\:office:</td> <td>OFFICE BUILDING</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3E3</td> <td>🏣</td> <td>\\:post_office:</td> <td>JAPANESE POST OFFICE</td> </tr> <tr class=\"row-even\">\n<td>U+1F3E4</td> <td>🏤</td> <td>\\:european_post_office:</td> <td>EUROPEAN POST OFFICE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3E5</td> <td>🏥</td> <td>\\:hospital:</td> <td>HOSPITAL</td> </tr> <tr class=\"row-even\">\n<td>U+1F3E6</td> <td>🏦</td> <td>\\:bank:</td> <td>BANK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3E7</td> <td>🏧</td> <td>\\:atm:</td> <td>AUTOMATED TELLER MACHINE</td> </tr> <tr class=\"row-even\">\n<td>U+1F3E8</td> <td>🏨</td> <td>\\:hotel:</td> <td>HOTEL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3E9</td> <td>🏩</td> <td>\\:love_hotel:</td> <td>LOVE HOTEL</td> </tr> <tr class=\"row-even\">\n<td>U+1F3EA</td> <td>🏪</td> <td>\\:convenience_store:</td> <td>CONVENIENCE STORE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3EB</td> <td>🏫</td> <td>\\:school:</td> <td>SCHOOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F3EC</td> <td>🏬</td> <td>\\:department_store:</td> <td>DEPARTMENT STORE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3ED</td> <td>🏭</td> <td>\\:factory:</td> <td>FACTORY</td> </tr> <tr class=\"row-even\">\n<td>U+1F3EE</td> <td>🏮</td> <td>\\:izakaya_lantern:</td> <td>IZAKAYA LANTERN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3EF</td> <td>🏯</td> <td>\\:japanese_castle:</td> <td>JAPANESE CASTLE</td> </tr> <tr class=\"row-even\">\n<td>U+1F3F0</td> <td>🏰</td> <td>\\:european_castle:</td> <td>EUROPEAN CASTLE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3FB</td> <td>🏻</td> <td>\\:skin-tone-2:</td> <td>EMOJI MODIFIER FITZPATRICK TYPE-1-2</td> </tr> <tr class=\"row-even\">\n<td>U+1F3FC</td> <td>🏼</td> <td>\\:skin-tone-3:</td> <td>EMOJI MODIFIER FITZPATRICK TYPE-3</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3FD</td> <td>🏽</td> <td>\\:skin-tone-4:</td> <td>EMOJI MODIFIER FITZPATRICK TYPE-4</td> </tr> <tr class=\"row-even\">\n<td>U+1F3FE</td> <td>🏾</td> <td>\\:skin-tone-5:</td> <td>EMOJI MODIFIER FITZPATRICK TYPE-5</td> </tr> <tr class=\"row-odd\">\n<td>U+1F3FF</td> <td>🏿</td> <td>\\:skin-tone-6:</td> <td>EMOJI MODIFIER FITZPATRICK TYPE-6</td> </tr> <tr class=\"row-even\">\n<td>U+1F400</td> <td>🐀</td> <td>\\:rat:</td> <td>RAT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F401</td> <td>🐁</td> <td>\\:mouse2:</td> <td>MOUSE</td> </tr> <tr class=\"row-even\">\n<td>U+1F402</td> <td>🐂</td> <td>\\:ox:</td> <td>OX</td> </tr> <tr class=\"row-odd\">\n<td>U+1F403</td> <td>🐃</td> <td>\\:water_buffalo:</td> <td>WATER BUFFALO</td> </tr> <tr class=\"row-even\">\n<td>U+1F404</td> <td>🐄</td> <td>\\:cow2:</td> <td>COW</td> </tr> <tr class=\"row-odd\">\n<td>U+1F405</td> <td>🐅</td> <td>\\:tiger2:</td> <td>TIGER</td> </tr> <tr class=\"row-even\">\n<td>U+1F406</td> <td>🐆</td> <td>\\:leopard:</td> <td>LEOPARD</td> </tr> <tr class=\"row-odd\">\n<td>U+1F407</td> <td>🐇</td> <td>\\:rabbit2:</td> <td>RABBIT</td> </tr> <tr class=\"row-even\">\n<td>U+1F408</td> <td>🐈</td> <td>\\:cat2:</td> <td>CAT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F409</td> <td>🐉</td> <td>\\:dragon:</td> <td>DRAGON</td> </tr> <tr class=\"row-even\">\n<td>U+1F40A</td> <td>🐊</td> <td>\\:crocodile:</td> <td>CROCODILE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F40B</td> <td>🐋</td> <td>\\:whale2:</td> <td>WHALE</td> </tr> <tr class=\"row-even\">\n<td>U+1F40C</td> <td>🐌</td> <td>\\:snail:</td> <td>SNAIL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F40D</td> <td>🐍</td> <td>\\:snake:</td> <td>SNAKE</td> </tr> <tr class=\"row-even\">\n<td>U+1F40E</td> <td>🐎</td> <td>\\:racehorse:</td> <td>HORSE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F40F</td> <td>🐏</td> <td>\\:ram:</td> <td>RAM</td> </tr> <tr class=\"row-even\">\n<td>U+1F410</td> <td>🐐</td> <td>\\:goat:</td> <td>GOAT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F411</td> <td>🐑</td> <td>\\:sheep:</td> <td>SHEEP</td> </tr> <tr class=\"row-even\">\n<td>U+1F412</td> <td>🐒</td> <td>\\:monkey:</td> <td>MONKEY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F413</td> <td>🐓</td> <td>\\:rooster:</td> <td>ROOSTER</td> </tr> <tr class=\"row-even\">\n<td>U+1F414</td> <td>🐔</td> <td>\\:chicken:</td> <td>CHICKEN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F415</td> <td>🐕</td> <td>\\:dog2:</td> <td>DOG</td> </tr> <tr class=\"row-even\">\n<td>U+1F416</td> <td>🐖</td> <td>\\:pig2:</td> <td>PIG</td> </tr> <tr class=\"row-odd\">\n<td>U+1F417</td> <td>🐗</td> <td>\\:boar:</td> <td>BOAR</td> </tr> <tr class=\"row-even\">\n<td>U+1F418</td> <td>🐘</td> <td>\\:elephant:</td> <td>ELEPHANT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F419</td> <td>🐙</td> <td>\\:octopus:</td> <td>OCTOPUS</td> </tr> <tr class=\"row-even\">\n<td>U+1F41A</td> <td>🐚</td> <td>\\:shell:</td> <td>SPIRAL SHELL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F41B</td> <td>🐛</td> <td>\\:bug:</td> <td>BUG</td> </tr> <tr class=\"row-even\">\n<td>U+1F41C</td> <td>🐜</td> <td>\\:ant:</td> <td>ANT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F41D</td> <td>🐝</td> <td>\\:bee:</td> <td>HONEYBEE</td> </tr> <tr class=\"row-even\">\n<td>U+1F41E</td> <td>🐞</td> <td>\\:beetle:</td> <td>LADY BEETLE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F41F</td> <td>🐟</td> <td>\\:fish:</td> <td>FISH</td> </tr> <tr class=\"row-even\">\n<td>U+1F420</td> <td>🐠</td> <td>\\:tropical_fish:</td> <td>TROPICAL FISH</td> </tr> <tr class=\"row-odd\">\n<td>U+1F421</td> <td>🐡</td> <td>\\:blowfish:</td> <td>BLOWFISH</td> </tr> <tr class=\"row-even\">\n<td>U+1F422</td> <td>🐢</td> <td>\\:turtle:</td> <td>TURTLE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F423</td> <td>🐣</td> <td>\\:hatching_chick:</td> <td>HATCHING CHICK</td> </tr> <tr class=\"row-even\">\n<td>U+1F424</td> <td>🐤</td> <td>\\:baby_chick:</td> <td>BABY CHICK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F425</td> <td>🐥</td> <td>\\:hatched_chick:</td> <td>FRONT-FACING BABY CHICK</td> </tr> <tr class=\"row-even\">\n<td>U+1F426</td> <td>🐦</td> <td>\\:bird:</td> <td>BIRD</td> </tr> <tr class=\"row-odd\">\n<td>U+1F427</td> <td>🐧</td> <td>\\:penguin:</td> <td>PENGUIN</td> </tr> <tr class=\"row-even\">\n<td>U+1F428</td> <td>🐨</td> <td>\\:koala:</td> <td>KOALA</td> </tr> <tr class=\"row-odd\">\n<td>U+1F429</td> <td>🐩</td> <td>\\:poodle:</td> <td>POODLE</td> </tr> <tr class=\"row-even\">\n<td>U+1F42A</td> <td>🐪</td> <td>\\:dromedary_camel:</td> <td>DROMEDARY CAMEL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F42B</td> <td>🐫</td> <td>\\:camel:</td> <td>BACTRIAN CAMEL</td> </tr> <tr class=\"row-even\">\n<td>U+1F42C</td> <td>🐬</td> <td>\\:dolphin:</td> <td>DOLPHIN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F42D</td> <td>🐭</td> <td>\\:mouse:</td> <td>MOUSE FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F42E</td> <td>🐮</td> <td>\\:cow:</td> <td>COW FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F42F</td> <td>🐯</td> <td>\\:tiger:</td> <td>TIGER FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F430</td> <td>🐰</td> <td>\\:rabbit:</td> <td>RABBIT FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F431</td> <td>🐱</td> <td>\\:cat:</td> <td>CAT FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F432</td> <td>🐲</td> <td>\\:dragon_face:</td> <td>DRAGON FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F433</td> <td>🐳</td> <td>\\:whale:</td> <td>SPOUTING WHALE</td> </tr> <tr class=\"row-even\">\n<td>U+1F434</td> <td>🐴</td> <td>\\:horse:</td> <td>HORSE FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F435</td> <td>🐵</td> <td>\\:monkey_face:</td> <td>MONKEY FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F436</td> <td>🐶</td> <td>\\:dog:</td> <td>DOG FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F437</td> <td>🐷</td> <td>\\:pig:</td> <td>PIG FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F438</td> <td>🐸</td> <td>\\:frog:</td> <td>FROG FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F439</td> <td>🐹</td> <td>\\:hamster:</td> <td>HAMSTER FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F43A</td> <td>🐺</td> <td>\\:wolf:</td> <td>WOLF FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F43B</td> <td>🐻</td> <td>\\:bear:</td> <td>BEAR FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F43C</td> <td>🐼</td> <td>\\:panda_face:</td> <td>PANDA FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F43D</td> <td>🐽</td> <td>\\:pig_nose:</td> <td>PIG NOSE</td> </tr> <tr class=\"row-even\">\n<td>U+1F43E</td> <td>🐾</td> <td>\\:feet:</td> <td>PAW PRINTS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F440</td> <td>👀</td> <td>\\:eyes:</td> <td>EYES</td> </tr> <tr class=\"row-even\">\n<td>U+1F442</td> <td>👂</td> <td>\\:ear:</td> <td>EAR</td> </tr> <tr class=\"row-odd\">\n<td>U+1F443</td> <td>👃</td> <td>\\:nose:</td> <td>NOSE</td> </tr> <tr class=\"row-even\">\n<td>U+1F444</td> <td>👄</td> <td>\\:lips:</td> <td>MOUTH</td> </tr> <tr class=\"row-odd\">\n<td>U+1F445</td> <td>👅</td> <td>\\:tongue:</td> <td>TONGUE</td> </tr> <tr class=\"row-even\">\n<td>U+1F446</td> <td>👆</td> <td>\\:point_up_2:</td> <td>WHITE UP POINTING BACKHAND INDEX</td> </tr> <tr class=\"row-odd\">\n<td>U+1F447</td> <td>👇</td> <td>\\:point_down:</td> <td>WHITE DOWN POINTING BACKHAND INDEX</td> </tr> <tr class=\"row-even\">\n<td>U+1F448</td> <td>👈</td> <td>\\:point_left:</td> <td>WHITE LEFT POINTING BACKHAND INDEX</td> </tr> <tr class=\"row-odd\">\n<td>U+1F449</td> <td>👉</td> <td>\\:point_right:</td> <td>WHITE RIGHT POINTING BACKHAND INDEX</td> </tr> <tr class=\"row-even\">\n<td>U+1F44A</td> <td>👊</td> <td>\\:facepunch:</td> <td>FISTED HAND SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F44B</td> <td>👋</td> <td>\\:wave:</td> <td>WAVING HAND SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+1F44C</td> <td>👌</td> <td>\\:ok_hand:</td> <td>OK HAND SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F44D</td> <td>👍</td> <td>\\:+1:</td> <td>THUMBS UP SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+1F44E</td> <td>👎</td> <td>\\:-1:</td> <td>THUMBS DOWN SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F44F</td> <td>👏</td> <td>\\:clap:</td> <td>CLAPPING HANDS SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+1F450</td> <td>👐</td> <td>\\:open_hands:</td> <td>OPEN HANDS SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F451</td> <td>👑</td> <td>\\:crown:</td> <td>CROWN</td> </tr> <tr class=\"row-even\">\n<td>U+1F452</td> <td>👒</td> <td>\\:womans_hat:</td> <td>WOMANS HAT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F453</td> <td>👓</td> <td>\\:eyeglasses:</td> <td>EYEGLASSES</td> </tr> <tr class=\"row-even\">\n<td>U+1F454</td> <td>👔</td> <td>\\:necktie:</td> <td>NECKTIE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F455</td> <td>👕</td> <td>\\:shirt:</td> <td>T-SHIRT</td> </tr> <tr class=\"row-even\">\n<td>U+1F456</td> <td>👖</td> <td>\\:jeans:</td> <td>JEANS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F457</td> <td>👗</td> <td>\\:dress:</td> <td>DRESS</td> </tr> <tr class=\"row-even\">\n<td>U+1F458</td> <td>👘</td> <td>\\:kimono:</td> <td>KIMONO</td> </tr> <tr class=\"row-odd\">\n<td>U+1F459</td> <td>👙</td> <td>\\:bikini:</td> <td>BIKINI</td> </tr> <tr class=\"row-even\">\n<td>U+1F45A</td> <td>👚</td> <td>\\:womans_clothes:</td> <td>WOMANS CLOTHES</td> </tr> <tr class=\"row-odd\">\n<td>U+1F45B</td> <td>👛</td> <td>\\:purse:</td> <td>PURSE</td> </tr> <tr class=\"row-even\">\n<td>U+1F45C</td> <td>👜</td> <td>\\:handbag:</td> <td>HANDBAG</td> </tr> <tr class=\"row-odd\">\n<td>U+1F45D</td> <td>👝</td> <td>\\:pouch:</td> <td>POUCH</td> </tr> <tr class=\"row-even\">\n<td>U+1F45E</td> <td>👞</td> <td>\\:mans_shoe:</td> <td>MANS SHOE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F45F</td> <td>👟</td> <td>\\:athletic_shoe:</td> <td>ATHLETIC SHOE</td> </tr> <tr class=\"row-even\">\n<td>U+1F460</td> <td>👠</td> <td>\\:high_heel:</td> <td>HIGH-HEELED SHOE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F461</td> <td>👡</td> <td>\\:sandal:</td> <td>WOMANS SANDAL</td> </tr> <tr class=\"row-even\">\n<td>U+1F462</td> <td>👢</td> <td>\\:boot:</td> <td>WOMANS BOOTS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F463</td> <td>👣</td> <td>\\:footprints:</td> <td>FOOTPRINTS</td> </tr> <tr class=\"row-even\">\n<td>U+1F464</td> <td>👤</td> <td>\\:bust_in_silhouette:</td> <td>BUST IN SILHOUETTE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F465</td> <td>👥</td> <td>\\:busts_in_silhouette:</td> <td>BUSTS IN SILHOUETTE</td> </tr> <tr class=\"row-even\">\n<td>U+1F466</td> <td>👦</td> <td>\\:boy:</td> <td>BOY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F467</td> <td>👧</td> <td>\\:girl:</td> <td>GIRL</td> </tr> <tr class=\"row-even\">\n<td>U+1F468</td> <td>👨</td> <td>\\:man:</td> <td>MAN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F469</td> <td>👩</td> <td>\\:woman:</td> <td>WOMAN</td> </tr> <tr class=\"row-even\">\n<td>U+1F46A</td> <td>👪</td> <td>\\:family:</td> <td>FAMILY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F46B</td> <td>👫</td> <td>\\:couple:</td> <td>MAN AND WOMAN HOLDING HANDS</td> </tr> <tr class=\"row-even\">\n<td>U+1F46C</td> <td>👬</td> <td>\\:two_men_holding_hands:</td> <td>TWO MEN HOLDING HANDS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F46D</td> <td>👭</td> <td>\\:two_women_holding_hands:</td> <td>TWO WOMEN HOLDING HANDS</td> </tr> <tr class=\"row-even\">\n<td>U+1F46E</td> <td>👮</td> <td>\\:cop:</td> <td>POLICE OFFICER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F46F</td> <td>👯</td> <td>\\:dancers:</td> <td>WOMAN WITH BUNNY EARS</td> </tr> <tr class=\"row-even\">\n<td>U+1F470</td> <td>👰</td> <td>\\:bride_with_veil:</td> <td>BRIDE WITH VEIL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F471</td> <td>👱</td> <td>\\:person_with_blond_hair:</td> <td>PERSON WITH BLOND HAIR</td> </tr> <tr class=\"row-even\">\n<td>U+1F472</td> <td>👲</td> <td>\\:man_with_gua_pi_mao:</td> <td>MAN WITH GUA PI MAO</td> </tr> <tr class=\"row-odd\">\n<td>U+1F473</td> <td>👳</td> <td>\\:man_with_turban:</td> <td>MAN WITH TURBAN</td> </tr> <tr class=\"row-even\">\n<td>U+1F474</td> <td>👴</td> <td>\\:older_man:</td> <td>OLDER MAN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F475</td> <td>👵</td> <td>\\:older_woman:</td> <td>OLDER WOMAN</td> </tr> <tr class=\"row-even\">\n<td>U+1F476</td> <td>👶</td> <td>\\:baby:</td> <td>BABY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F477</td> <td>👷</td> <td>\\:construction_worker:</td> <td>CONSTRUCTION WORKER</td> </tr> <tr class=\"row-even\">\n<td>U+1F478</td> <td>👸</td> <td>\\:princess:</td> <td>PRINCESS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F479</td> <td>👹</td> <td>\\:japanese_ogre:</td> <td>JAPANESE OGRE</td> </tr> <tr class=\"row-even\">\n<td>U+1F47A</td> <td>👺</td> <td>\\:japanese_goblin:</td> <td>JAPANESE GOBLIN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F47B</td> <td>👻</td> <td>\\:ghost:</td> <td>GHOST</td> </tr> <tr class=\"row-even\">\n<td>U+1F47C</td> <td>👼</td> <td>\\:angel:</td> <td>BABY ANGEL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F47D</td> <td>👽</td> <td>\\:alien:</td> <td>EXTRATERRESTRIAL ALIEN</td> </tr> <tr class=\"row-even\">\n<td>U+1F47E</td> <td>👾</td> <td>\\:space_invader:</td> <td>ALIEN MONSTER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F47F</td> <td>👿</td> <td>\\:imp:</td> <td>IMP</td> </tr> <tr class=\"row-even\">\n<td>U+1F480</td> <td>💀</td> <td>\\:skull:</td> <td>SKULL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F481</td> <td>💁</td> <td>\\:information_desk_person:</td> <td>INFORMATION DESK PERSON</td> </tr> <tr class=\"row-even\">\n<td>U+1F482</td> <td>💂</td> <td>\\:guardsman:</td> <td>GUARDSMAN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F483</td> <td>💃</td> <td>\\:dancer:</td> <td>DANCER</td> </tr> <tr class=\"row-even\">\n<td>U+1F484</td> <td>💄</td> <td>\\:lipstick:</td> <td>LIPSTICK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F485</td> <td>💅</td> <td>\\:nail_care:</td> <td>NAIL POLISH</td> </tr> <tr class=\"row-even\">\n<td>U+1F486</td> <td>💆</td> <td>\\:massage:</td> <td>FACE MASSAGE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F487</td> <td>💇</td> <td>\\:haircut:</td> <td>HAIRCUT</td> </tr> <tr class=\"row-even\">\n<td>U+1F488</td> <td>💈</td> <td>\\:barber:</td> <td>BARBER POLE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F489</td> <td>💉</td> <td>\\:syringe:</td> <td>SYRINGE</td> </tr> <tr class=\"row-even\">\n<td>U+1F48A</td> <td>💊</td> <td>\\:pill:</td> <td>PILL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F48B</td> <td>💋</td> <td>\\:kiss:</td> <td>KISS MARK</td> </tr> <tr class=\"row-even\">\n<td>U+1F48C</td> <td>💌</td> <td>\\:love_letter:</td> <td>LOVE LETTER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F48D</td> <td>💍</td> <td>\\:ring:</td> <td>RING</td> </tr> <tr class=\"row-even\">\n<td>U+1F48E</td> <td>💎</td> <td>\\:gem:</td> <td>GEM STONE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F48F</td> <td>💏</td> <td>\\:couplekiss:</td> <td>KISS</td> </tr> <tr class=\"row-even\">\n<td>U+1F490</td> <td>💐</td> <td>\\:bouquet:</td> <td>BOUQUET</td> </tr> <tr class=\"row-odd\">\n<td>U+1F491</td> <td>💑</td> <td>\\:couple_with_heart:</td> <td>COUPLE WITH HEART</td> </tr> <tr class=\"row-even\">\n<td>U+1F492</td> <td>💒</td> <td>\\:wedding:</td> <td>WEDDING</td> </tr> <tr class=\"row-odd\">\n<td>U+1F493</td> <td>💓</td> <td>\\:heartbeat:</td> <td>BEATING HEART</td> </tr> <tr class=\"row-even\">\n<td>U+1F494</td> <td>💔</td> <td>\\:broken_heart:</td> <td>BROKEN HEART</td> </tr> <tr class=\"row-odd\">\n<td>U+1F495</td> <td>💕</td> <td>\\:two_hearts:</td> <td>TWO HEARTS</td> </tr> <tr class=\"row-even\">\n<td>U+1F496</td> <td>💖</td> <td>\\:sparkling_heart:</td> <td>SPARKLING HEART</td> </tr> <tr class=\"row-odd\">\n<td>U+1F497</td> <td>💗</td> <td>\\:heartpulse:</td> <td>GROWING HEART</td> </tr> <tr class=\"row-even\">\n<td>U+1F498</td> <td>💘</td> <td>\\:cupid:</td> <td>HEART WITH ARROW</td> </tr> <tr class=\"row-odd\">\n<td>U+1F499</td> <td>💙</td> <td>\\:blue_heart:</td> <td>BLUE HEART</td> </tr> <tr class=\"row-even\">\n<td>U+1F49A</td> <td>💚</td> <td>\\:green_heart:</td> <td>GREEN HEART</td> </tr> <tr class=\"row-odd\">\n<td>U+1F49B</td> <td>💛</td> <td>\\:yellow_heart:</td> <td>YELLOW HEART</td> </tr> <tr class=\"row-even\">\n<td>U+1F49C</td> <td>💜</td> <td>\\:purple_heart:</td> <td>PURPLE HEART</td> </tr> <tr class=\"row-odd\">\n<td>U+1F49D</td> <td>💝</td> <td>\\:gift_heart:</td> <td>HEART WITH RIBBON</td> </tr> <tr class=\"row-even\">\n<td>U+1F49E</td> <td>💞</td> <td>\\:revolving_hearts:</td> <td>REVOLVING HEARTS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F49F</td> <td>💟</td> <td>\\:heart_decoration:</td> <td>HEART DECORATION</td> </tr> <tr class=\"row-even\">\n<td>U+1F4A0</td> <td>💠</td> <td>\\:diamond_shape_with_a_dot_inside:</td> <td>DIAMOND SHAPE WITH A DOT INSIDE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4A1</td> <td>💡</td> <td>\\:bulb:</td> <td>ELECTRIC LIGHT BULB</td> </tr> <tr class=\"row-even\">\n<td>U+1F4A2</td> <td>💢</td> <td>\\:anger:</td> <td>ANGER SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4A3</td> <td>💣</td> <td>\\:bomb:</td> <td>BOMB</td> </tr> <tr class=\"row-even\">\n<td>U+1F4A4</td> <td>💤</td> <td>\\:zzz:</td> <td>SLEEPING SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4A5</td> <td>💥</td> <td>\\:boom:</td> <td>COLLISION SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F4A6</td> <td>💦</td> <td>\\:sweat_drops:</td> <td>SPLASHING SWEAT SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4A7</td> <td>💧</td> <td>\\:droplet:</td> <td>DROPLET</td> </tr> <tr class=\"row-even\">\n<td>U+1F4A8</td> <td>💨</td> <td>\\:dash:</td> <td>DASH SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4A9</td> <td>💩</td> <td>\\:hankey:</td> <td>PILE OF POO</td> </tr> <tr class=\"row-even\">\n<td>U+1F4AA</td> <td>💪</td> <td>\\:muscle:</td> <td>FLEXED BICEPS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4AB</td> <td>💫</td> <td>\\:dizzy:</td> <td>DIZZY SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F4AC</td> <td>💬</td> <td>\\:speech_balloon:</td> <td>SPEECH BALLOON</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4AD</td> <td>💭</td> <td>\\:thought_balloon:</td> <td>THOUGHT BALLOON</td> </tr> <tr class=\"row-even\">\n<td>U+1F4AE</td> <td>💮</td> <td>\\:white_flower:</td> <td>WHITE FLOWER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4AF</td> <td>💯</td> <td>\\:100:</td> <td>HUNDRED POINTS SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F4B0</td> <td>💰</td> <td>\\:moneybag:</td> <td>MONEY BAG</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4B1</td> <td>💱</td> <td>\\:currency_exchange:</td> <td>CURRENCY EXCHANGE</td> </tr> <tr class=\"row-even\">\n<td>U+1F4B2</td> <td>💲</td> <td>\\:heavy_dollar_sign:</td> <td>HEAVY DOLLAR SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4B3</td> <td>💳</td> <td>\\:credit_card:</td> <td>CREDIT CARD</td> </tr> <tr class=\"row-even\">\n<td>U+1F4B4</td> <td>💴</td> <td>\\:yen:</td> <td>BANKNOTE WITH YEN SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4B5</td> <td>💵</td> <td>\\:dollar:</td> <td>BANKNOTE WITH DOLLAR SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+1F4B6</td> <td>💶</td> <td>\\:euro:</td> <td>BANKNOTE WITH EURO SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4B7</td> <td>💷</td> <td>\\:pound:</td> <td>BANKNOTE WITH POUND SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+1F4B8</td> <td>💸</td> <td>\\:money_with_wings:</td> <td>MONEY WITH WINGS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4B9</td> <td>💹</td> <td>\\:chart:</td> <td>CHART WITH UPWARDS TREND AND YEN SIGN</td> </tr> <tr class=\"row-even\">\n<td>U+1F4BA</td> <td>💺</td> <td>\\:seat:</td> <td>SEAT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4BB</td> <td>💻</td> <td>\\:computer:</td> <td>PERSONAL COMPUTER</td> </tr> <tr class=\"row-even\">\n<td>U+1F4BC</td> <td>💼</td> <td>\\:briefcase:</td> <td>BRIEFCASE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4BD</td> <td>💽</td> <td>\\:minidisc:</td> <td>MINIDISC</td> </tr> <tr class=\"row-even\">\n<td>U+1F4BE</td> <td>💾</td> <td>\\:floppy_disk:</td> <td>FLOPPY DISK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4BF</td> <td>💿</td> <td>\\:cd:</td> <td>OPTICAL DISC</td> </tr> <tr class=\"row-even\">\n<td>U+1F4C0</td> <td>📀</td> <td>\\:dvd:</td> <td>DVD</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4C1</td> <td>📁</td> <td>\\:file_folder:</td> <td>FILE FOLDER</td> </tr> <tr class=\"row-even\">\n<td>U+1F4C2</td> <td>📂</td> <td>\\:open_file_folder:</td> <td>OPEN FILE FOLDER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4C3</td> <td>📃</td> <td>\\:page_with_curl:</td> <td>PAGE WITH CURL</td> </tr> <tr class=\"row-even\">\n<td>U+1F4C4</td> <td>📄</td> <td>\\:page_facing_up:</td> <td>PAGE FACING UP</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4C5</td> <td>📅</td> <td>\\:date:</td> <td>CALENDAR</td> </tr> <tr class=\"row-even\">\n<td>U+1F4C6</td> <td>📆</td> <td>\\:calendar:</td> <td>TEAR-OFF CALENDAR</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4C7</td> <td>📇</td> <td>\\:card_index:</td> <td>CARD INDEX</td> </tr> <tr class=\"row-even\">\n<td>U+1F4C8</td> <td>📈</td> <td>\\:chart_with_upwards_trend:</td> <td>CHART WITH UPWARDS TREND</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4C9</td> <td>📉</td> <td>\\:chart_with_downwards_trend:</td> <td>CHART WITH DOWNWARDS TREND</td> </tr> <tr class=\"row-even\">\n<td>U+1F4CA</td> <td>📊</td> <td>\\:bar_chart:</td> <td>BAR CHART</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4CB</td> <td>📋</td> <td>\\:clipboard:</td> <td>CLIPBOARD</td> </tr> <tr class=\"row-even\">\n<td>U+1F4CC</td> <td>📌</td> <td>\\:pushpin:</td> <td>PUSHPIN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4CD</td> <td>📍</td> <td>\\:round_pushpin:</td> <td>ROUND PUSHPIN</td> </tr> <tr class=\"row-even\">\n<td>U+1F4CE</td> <td>📎</td> <td>\\:paperclip:</td> <td>PAPERCLIP</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4CF</td> <td>📏</td> <td>\\:straight_ruler:</td> <td>STRAIGHT RULER</td> </tr> <tr class=\"row-even\">\n<td>U+1F4D0</td> <td>📐</td> <td>\\:triangular_ruler:</td> <td>TRIANGULAR RULER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4D1</td> <td>📑</td> <td>\\:bookmark_tabs:</td> <td>BOOKMARK TABS</td> </tr> <tr class=\"row-even\">\n<td>U+1F4D2</td> <td>📒</td> <td>\\:ledger:</td> <td>LEDGER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4D3</td> <td>📓</td> <td>\\:notebook:</td> <td>NOTEBOOK</td> </tr> <tr class=\"row-even\">\n<td>U+1F4D4</td> <td>📔</td> <td>\\:notebook_with_decorative_cover:</td> <td>NOTEBOOK WITH DECORATIVE COVER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4D5</td> <td>📕</td> <td>\\:closed_book:</td> <td>CLOSED BOOK</td> </tr> <tr class=\"row-even\">\n<td>U+1F4D6</td> <td>📖</td> <td>\\:book:</td> <td>OPEN BOOK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4D7</td> <td>📗</td> <td>\\:green_book:</td> <td>GREEN BOOK</td> </tr> <tr class=\"row-even\">\n<td>U+1F4D8</td> <td>📘</td> <td>\\:blue_book:</td> <td>BLUE BOOK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4D9</td> <td>📙</td> <td>\\:orange_book:</td> <td>ORANGE BOOK</td> </tr> <tr class=\"row-even\">\n<td>U+1F4DA</td> <td>📚</td> <td>\\:books:</td> <td>BOOKS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4DB</td> <td>📛</td> <td>\\:name_badge:</td> <td>NAME BADGE</td> </tr> <tr class=\"row-even\">\n<td>U+1F4DC</td> <td>📜</td> <td>\\:scroll:</td> <td>SCROLL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4DD</td> <td>📝</td> <td>\\:memo:</td> <td>MEMO</td> </tr> <tr class=\"row-even\">\n<td>U+1F4DE</td> <td>📞</td> <td>\\:telephone_receiver:</td> <td>TELEPHONE RECEIVER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4DF</td> <td>📟</td> <td>\\:pager:</td> <td>PAGER</td> </tr> <tr class=\"row-even\">\n<td>U+1F4E0</td> <td>📠</td> <td>\\:fax:</td> <td>FAX MACHINE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4E1</td> <td>📡</td> <td>\\:satellite:</td> <td>SATELLITE ANTENNA</td> </tr> <tr class=\"row-even\">\n<td>U+1F4E2</td> <td>📢</td> <td>\\:loudspeaker:</td> <td>PUBLIC ADDRESS LOUDSPEAKER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4E3</td> <td>📣</td> <td>\\:mega:</td> <td>CHEERING MEGAPHONE</td> </tr> <tr class=\"row-even\">\n<td>U+1F4E4</td> <td>📤</td> <td>\\:outbox_tray:</td> <td>OUTBOX TRAY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4E5</td> <td>📥</td> <td>\\:inbox_tray:</td> <td>INBOX TRAY</td> </tr> <tr class=\"row-even\">\n<td>U+1F4E6</td> <td>📦</td> <td>\\:package:</td> <td>PACKAGE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4E7</td> <td>📧</td> <td>\\:e-mail:</td> <td>E-MAIL SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F4E8</td> <td>📨</td> <td>\\:incoming_envelope:</td> <td>INCOMING ENVELOPE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4E9</td> <td>📩</td> <td>\\:envelope_with_arrow:</td> <td>ENVELOPE WITH DOWNWARDS ARROW ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+1F4EA</td> <td>📪</td> <td>\\:mailbox_closed:</td> <td>CLOSED MAILBOX WITH LOWERED FLAG</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4EB</td> <td>📫</td> <td>\\:mailbox:</td> <td>CLOSED MAILBOX WITH RAISED FLAG</td> </tr> <tr class=\"row-even\">\n<td>U+1F4EC</td> <td>📬</td> <td>\\:mailbox_with_mail:</td> <td>OPEN MAILBOX WITH RAISED FLAG</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4ED</td> <td>📭</td> <td>\\:mailbox_with_no_mail:</td> <td>OPEN MAILBOX WITH LOWERED FLAG</td> </tr> <tr class=\"row-even\">\n<td>U+1F4EE</td> <td>📮</td> <td>\\:postbox:</td> <td>POSTBOX</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4EF</td> <td>📯</td> <td>\\:postal_horn:</td> <td>POSTAL HORN</td> </tr> <tr class=\"row-even\">\n<td>U+1F4F0</td> <td>📰</td> <td>\\:newspaper:</td> <td>NEWSPAPER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4F1</td> <td>📱</td> <td>\\:iphone:</td> <td>MOBILE PHONE</td> </tr> <tr class=\"row-even\">\n<td>U+1F4F2</td> <td>📲</td> <td>\\:calling:</td> <td>MOBILE PHONE WITH RIGHTWARDS ARROW AT LEFT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4F3</td> <td>📳</td> <td>\\:vibration_mode:</td> <td>VIBRATION MODE</td> </tr> <tr class=\"row-even\">\n<td>U+1F4F4</td> <td>📴</td> <td>\\:mobile_phone_off:</td> <td>MOBILE PHONE OFF</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4F5</td> <td>📵</td> <td>\\:no_mobile_phones:</td> <td>NO MOBILE PHONES</td> </tr> <tr class=\"row-even\">\n<td>U+1F4F6</td> <td>📶</td> <td>\\:signal_strength:</td> <td>ANTENNA WITH BARS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4F7</td> <td>📷</td> <td>\\:camera:</td> <td>CAMERA</td> </tr> <tr class=\"row-even\">\n<td>U+1F4F9</td> <td>📹</td> <td>\\:video_camera:</td> <td>VIDEO CAMERA</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4FA</td> <td>📺</td> <td>\\:tv:</td> <td>TELEVISION</td> </tr> <tr class=\"row-even\">\n<td>U+1F4FB</td> <td>📻</td> <td>\\:radio:</td> <td>RADIO</td> </tr> <tr class=\"row-odd\">\n<td>U+1F4FC</td> <td>📼</td> <td>\\:vhs:</td> <td>VIDEOCASSETTE</td> </tr> <tr class=\"row-even\">\n<td>U+1F500</td> <td>🔀</td> <td>\\:twisted_rightwards_arrows:</td> <td>TWISTED RIGHTWARDS ARROWS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F501</td> <td>🔁</td> <td>\\:repeat:</td> <td>CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS</td> </tr> <tr class=\"row-even\">\n<td>U+1F502</td> <td>🔂</td> <td>\\:repeat_one:</td> <td>CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS WITH CIRCLED ONE OVERLAY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F503</td> <td>🔃</td> <td>\\:arrows_clockwise:</td> <td>CLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS</td> </tr> <tr class=\"row-even\">\n<td>U+1F504</td> <td>🔄</td> <td>\\:arrows_counterclockwise:</td> <td>ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F505</td> <td>🔅</td> <td>\\:low_brightness:</td> <td>LOW BRIGHTNESS SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F506</td> <td>🔆</td> <td>\\:high_brightness:</td> <td>HIGH BRIGHTNESS SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F507</td> <td>🔇</td> <td>\\:mute:</td> <td>SPEAKER WITH CANCELLATION STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+1F508</td> <td>🔈</td> <td>\\:speaker:</td> <td>SPEAKER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F509</td> <td>🔉</td> <td>\\:sound:</td> <td>SPEAKER WITH ONE SOUND WAVE</td> </tr> <tr class=\"row-even\">\n<td>U+1F50A</td> <td>🔊</td> <td>\\:loud_sound:</td> <td>SPEAKER WITH THREE SOUND WAVES</td> </tr> <tr class=\"row-odd\">\n<td>U+1F50B</td> <td>🔋</td> <td>\\:battery:</td> <td>BATTERY</td> </tr> <tr class=\"row-even\">\n<td>U+1F50C</td> <td>🔌</td> <td>\\:electric_plug:</td> <td>ELECTRIC PLUG</td> </tr> <tr class=\"row-odd\">\n<td>U+1F50D</td> <td>🔍</td> <td>\\:mag:</td> <td>LEFT-POINTING MAGNIFYING GLASS</td> </tr> <tr class=\"row-even\">\n<td>U+1F50E</td> <td>🔎</td> <td>\\:mag_right:</td> <td>RIGHT-POINTING MAGNIFYING GLASS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F50F</td> <td>🔏</td> <td>\\:lock_with_ink_pen:</td> <td>LOCK WITH INK PEN</td> </tr> <tr class=\"row-even\">\n<td>U+1F510</td> <td>🔐</td> <td>\\:closed_lock_with_key:</td> <td>CLOSED LOCK WITH KEY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F511</td> <td>🔑</td> <td>\\:key:</td> <td>KEY</td> </tr> <tr class=\"row-even\">\n<td>U+1F512</td> <td>🔒</td> <td>\\:lock:</td> <td>LOCK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F513</td> <td>🔓</td> <td>\\:unlock:</td> <td>OPEN LOCK</td> </tr> <tr class=\"row-even\">\n<td>U+1F514</td> <td>🔔</td> <td>\\:bell:</td> <td>BELL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F515</td> <td>🔕</td> <td>\\:no_bell:</td> <td>BELL WITH CANCELLATION STROKE</td> </tr> <tr class=\"row-even\">\n<td>U+1F516</td> <td>🔖</td> <td>\\:bookmark:</td> <td>BOOKMARK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F517</td> <td>🔗</td> <td>\\:link:</td> <td>LINK SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F518</td> <td>🔘</td> <td>\\:radio_button:</td> <td>RADIO BUTTON</td> </tr> <tr class=\"row-odd\">\n<td>U+1F519</td> <td>🔙</td> <td>\\:back:</td> <td>BACK WITH LEFTWARDS ARROW ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+1F51A</td> <td>🔚</td> <td>\\:end:</td> <td>END WITH LEFTWARDS ARROW ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F51B</td> <td>🔛</td> <td>\\:on:</td> <td>ON WITH EXCLAMATION MARK WITH LEFT RIGHT ARROW ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+1F51C</td> <td>🔜</td> <td>\\:soon:</td> <td>SOON WITH RIGHTWARDS ARROW ABOVE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F51D</td> <td>🔝</td> <td>\\:top:</td> <td>TOP WITH UPWARDS ARROW ABOVE</td> </tr> <tr class=\"row-even\">\n<td>U+1F51E</td> <td>🔞</td> <td>\\:underage:</td> <td>NO ONE UNDER EIGHTEEN SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F51F</td> <td>🔟</td> <td>\\:keycap_ten:</td> <td>KEYCAP TEN</td> </tr> <tr class=\"row-even\">\n<td>U+1F520</td> <td>🔠</td> <td>\\:capital_abcd:</td> <td>INPUT SYMBOL FOR LATIN CAPITAL LETTERS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F521</td> <td>🔡</td> <td>\\:abcd:</td> <td>INPUT SYMBOL FOR LATIN SMALL LETTERS</td> </tr> <tr class=\"row-even\">\n<td>U+1F522</td> <td>🔢</td> <td>\\:1234:</td> <td>INPUT SYMBOL FOR NUMBERS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F523</td> <td>🔣</td> <td>\\:symbols:</td> <td>INPUT SYMBOL FOR SYMBOLS</td> </tr> <tr class=\"row-even\">\n<td>U+1F524</td> <td>🔤</td> <td>\\:abc:</td> <td>INPUT SYMBOL FOR LATIN LETTERS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F525</td> <td>🔥</td> <td>\\:fire:</td> <td>FIRE</td> </tr> <tr class=\"row-even\">\n<td>U+1F526</td> <td>🔦</td> <td>\\:flashlight:</td> <td>ELECTRIC TORCH</td> </tr> <tr class=\"row-odd\">\n<td>U+1F527</td> <td>🔧</td> <td>\\:wrench:</td> <td>WRENCH</td> </tr> <tr class=\"row-even\">\n<td>U+1F528</td> <td>🔨</td> <td>\\:hammer:</td> <td>HAMMER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F529</td> <td>🔩</td> <td>\\:nut_and_bolt:</td> <td>NUT AND BOLT</td> </tr> <tr class=\"row-even\">\n<td>U+1F52A</td> <td>🔪</td> <td>\\:hocho:</td> <td>HOCHO</td> </tr> <tr class=\"row-odd\">\n<td>U+1F52B</td> <td>🔫</td> <td>\\:gun:</td> <td>PISTOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F52C</td> <td>🔬</td> <td>\\:microscope:</td> <td>MICROSCOPE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F52D</td> <td>🔭</td> <td>\\:telescope:</td> <td>TELESCOPE</td> </tr> <tr class=\"row-even\">\n<td>U+1F52E</td> <td>🔮</td> <td>\\:crystal_ball:</td> <td>CRYSTAL BALL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F52F</td> <td>🔯</td> <td>\\:six_pointed_star:</td> <td>SIX POINTED STAR WITH MIDDLE DOT</td> </tr> <tr class=\"row-even\">\n<td>U+1F530</td> <td>🔰</td> <td>\\:beginner:</td> <td>JAPANESE SYMBOL FOR BEGINNER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F531</td> <td>🔱</td> <td>\\:trident:</td> <td>TRIDENT EMBLEM</td> </tr> <tr class=\"row-even\">\n<td>U+1F532</td> <td>🔲</td> <td>\\:black_square_button:</td> <td>BLACK SQUARE BUTTON</td> </tr> <tr class=\"row-odd\">\n<td>U+1F533</td> <td>🔳</td> <td>\\:white_square_button:</td> <td>WHITE SQUARE BUTTON</td> </tr> <tr class=\"row-even\">\n<td>U+1F534</td> <td>🔴</td> <td>\\:red_circle:</td> <td>LARGE RED CIRCLE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F535</td> <td>🔵</td> <td>\\:large_blue_circle:</td> <td>LARGE BLUE CIRCLE</td> </tr> <tr class=\"row-even\">\n<td>U+1F536</td> <td>🔶</td> <td>\\:large_orange_diamond:</td> <td>LARGE ORANGE DIAMOND</td> </tr> <tr class=\"row-odd\">\n<td>U+1F537</td> <td>🔷</td> <td>\\:large_blue_diamond:</td> <td>LARGE BLUE DIAMOND</td> </tr> <tr class=\"row-even\">\n<td>U+1F538</td> <td>🔸</td> <td>\\:small_orange_diamond:</td> <td>SMALL ORANGE DIAMOND</td> </tr> <tr class=\"row-odd\">\n<td>U+1F539</td> <td>🔹</td> <td>\\:small_blue_diamond:</td> <td>SMALL BLUE DIAMOND</td> </tr> <tr class=\"row-even\">\n<td>U+1F53A</td> <td>🔺</td> <td>\\:small_red_triangle:</td> <td>UP-POINTING RED TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F53B</td> <td>🔻</td> <td>\\:small_red_triangle_down:</td> <td>DOWN-POINTING RED TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+1F53C</td> <td>🔼</td> <td>\\:arrow_up_small:</td> <td>UP-POINTING SMALL RED TRIANGLE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F53D</td> <td>🔽</td> <td>\\:arrow_down_small:</td> <td>DOWN-POINTING SMALL RED TRIANGLE</td> </tr> <tr class=\"row-even\">\n<td>U+1F550</td> <td>🕐</td> <td>\\:clock1:</td> <td>CLOCK FACE ONE OCLOCK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F551</td> <td>🕑</td> <td>\\:clock2:</td> <td>CLOCK FACE TWO OCLOCK</td> </tr> <tr class=\"row-even\">\n<td>U+1F552</td> <td>🕒</td> <td>\\:clock3:</td> <td>CLOCK FACE THREE OCLOCK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F553</td> <td>🕓</td> <td>\\:clock4:</td> <td>CLOCK FACE FOUR OCLOCK</td> </tr> <tr class=\"row-even\">\n<td>U+1F554</td> <td>🕔</td> <td>\\:clock5:</td> <td>CLOCK FACE FIVE OCLOCK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F555</td> <td>🕕</td> <td>\\:clock6:</td> <td>CLOCK FACE SIX OCLOCK</td> </tr> <tr class=\"row-even\">\n<td>U+1F556</td> <td>🕖</td> <td>\\:clock7:</td> <td>CLOCK FACE SEVEN OCLOCK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F557</td> <td>🕗</td> <td>\\:clock8:</td> <td>CLOCK FACE EIGHT OCLOCK</td> </tr> <tr class=\"row-even\">\n<td>U+1F558</td> <td>🕘</td> <td>\\:clock9:</td> <td>CLOCK FACE NINE OCLOCK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F559</td> <td>🕙</td> <td>\\:clock10:</td> <td>CLOCK FACE TEN OCLOCK</td> </tr> <tr class=\"row-even\">\n<td>U+1F55A</td> <td>🕚</td> <td>\\:clock11:</td> <td>CLOCK FACE ELEVEN OCLOCK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F55B</td> <td>🕛</td> <td>\\:clock12:</td> <td>CLOCK FACE TWELVE OCLOCK</td> </tr> <tr class=\"row-even\">\n<td>U+1F55C</td> <td>🕜</td> <td>\\:clock130:</td> <td>CLOCK FACE ONE-THIRTY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F55D</td> <td>🕝</td> <td>\\:clock230:</td> <td>CLOCK FACE TWO-THIRTY</td> </tr> <tr class=\"row-even\">\n<td>U+1F55E</td> <td>🕞</td> <td>\\:clock330:</td> <td>CLOCK FACE THREE-THIRTY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F55F</td> <td>🕟</td> <td>\\:clock430:</td> <td>CLOCK FACE FOUR-THIRTY</td> </tr> <tr class=\"row-even\">\n<td>U+1F560</td> <td>🕠</td> <td>\\:clock530:</td> <td>CLOCK FACE FIVE-THIRTY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F561</td> <td>🕡</td> <td>\\:clock630:</td> <td>CLOCK FACE SIX-THIRTY</td> </tr> <tr class=\"row-even\">\n<td>U+1F562</td> <td>🕢</td> <td>\\:clock730:</td> <td>CLOCK FACE SEVEN-THIRTY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F563</td> <td>🕣</td> <td>\\:clock830:</td> <td>CLOCK FACE EIGHT-THIRTY</td> </tr> <tr class=\"row-even\">\n<td>U+1F564</td> <td>🕤</td> <td>\\:clock930:</td> <td>CLOCK FACE NINE-THIRTY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F565</td> <td>🕥</td> <td>\\:clock1030:</td> <td>CLOCK FACE TEN-THIRTY</td> </tr> <tr class=\"row-even\">\n<td>U+1F566</td> <td>🕦</td> <td>\\:clock1130:</td> <td>CLOCK FACE ELEVEN-THIRTY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F567</td> <td>🕧</td> <td>\\:clock1230:</td> <td>CLOCK FACE TWELVE-THIRTY</td> </tr> <tr class=\"row-even\">\n<td>U+1F5FB</td> <td>🗻</td> <td>\\:mount_fuji:</td> <td>MOUNT FUJI</td> </tr> <tr class=\"row-odd\">\n<td>U+1F5FC</td> <td>🗼</td> <td>\\:tokyo_tower:</td> <td>TOKYO TOWER</td> </tr> <tr class=\"row-even\">\n<td>U+1F5FD</td> <td>🗽</td> <td>\\:statue_of_liberty:</td> <td>STATUE OF LIBERTY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F5FE</td> <td>🗾</td> <td>\\:japan:</td> <td>SILHOUETTE OF JAPAN</td> </tr> <tr class=\"row-even\">\n<td>U+1F5FF</td> <td>🗿</td> <td>\\:moyai:</td> <td>MOYAI</td> </tr> <tr class=\"row-odd\">\n<td>U+1F600</td> <td>😀</td> <td>\\:grinning:</td> <td>GRINNING FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F601</td> <td>😁</td> <td>\\:grin:</td> <td>GRINNING FACE WITH SMILING EYES</td> </tr> <tr class=\"row-odd\">\n<td>U+1F602</td> <td>😂</td> <td>\\:joy:</td> <td>FACE WITH TEARS OF JOY</td> </tr> <tr class=\"row-even\">\n<td>U+1F603</td> <td>😃</td> <td>\\:smiley:</td> <td>SMILING FACE WITH OPEN MOUTH</td> </tr> <tr class=\"row-odd\">\n<td>U+1F604</td> <td>😄</td> <td>\\:smile:</td> <td>SMILING FACE WITH OPEN MOUTH AND SMILING EYES</td> </tr> <tr class=\"row-even\">\n<td>U+1F605</td> <td>😅</td> <td>\\:sweat_smile:</td> <td>SMILING FACE WITH OPEN MOUTH AND COLD SWEAT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F606</td> <td>😆</td> <td>\\:laughing:</td> <td>SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES</td> </tr> <tr class=\"row-even\">\n<td>U+1F607</td> <td>😇</td> <td>\\:innocent:</td> <td>SMILING FACE WITH HALO</td> </tr> <tr class=\"row-odd\">\n<td>U+1F608</td> <td>😈</td> <td>\\:smiling_imp:</td> <td>SMILING FACE WITH HORNS</td> </tr> <tr class=\"row-even\">\n<td>U+1F609</td> <td>😉</td> <td>\\:wink:</td> <td>WINKING FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F60A</td> <td>😊</td> <td>\\:blush:</td> <td>SMILING FACE WITH SMILING EYES</td> </tr> <tr class=\"row-even\">\n<td>U+1F60B</td> <td>😋</td> <td>\\:yum:</td> <td>FACE SAVOURING DELICIOUS FOOD</td> </tr> <tr class=\"row-odd\">\n<td>U+1F60C</td> <td>😌</td> <td>\\:relieved:</td> <td>RELIEVED FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F60D</td> <td>😍</td> <td>\\:heart_eyes:</td> <td>SMILING FACE WITH HEART-SHAPED EYES</td> </tr> <tr class=\"row-odd\">\n<td>U+1F60E</td> <td>😎</td> <td>\\:sunglasses:</td> <td>SMILING FACE WITH SUNGLASSES</td> </tr> <tr class=\"row-even\">\n<td>U+1F60F</td> <td>😏</td> <td>\\:smirk:</td> <td>SMIRKING FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F610</td> <td>😐</td> <td>\\:neutral_face:</td> <td>NEUTRAL FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F611</td> <td>😑</td> <td>\\:expressionless:</td> <td>EXPRESSIONLESS FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F612</td> <td>😒</td> <td>\\:unamused:</td> <td>UNAMUSED FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F613</td> <td>😓</td> <td>\\:sweat:</td> <td>FACE WITH COLD SWEAT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F614</td> <td>😔</td> <td>\\:pensive:</td> <td>PENSIVE FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F615</td> <td>😕</td> <td>\\:confused:</td> <td>CONFUSED FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F616</td> <td>😖</td> <td>\\:confounded:</td> <td>CONFOUNDED FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F617</td> <td>😗</td> <td>\\:kissing:</td> <td>KISSING FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F618</td> <td>😘</td> <td>\\:kissing_heart:</td> <td>FACE THROWING A KISS</td> </tr> <tr class=\"row-even\">\n<td>U+1F619</td> <td>😙</td> <td>\\:kissing_smiling_eyes:</td> <td>KISSING FACE WITH SMILING EYES</td> </tr> <tr class=\"row-odd\">\n<td>U+1F61A</td> <td>😚</td> <td>\\:kissing_closed_eyes:</td> <td>KISSING FACE WITH CLOSED EYES</td> </tr> <tr class=\"row-even\">\n<td>U+1F61B</td> <td>😛</td> <td>\\:stuck_out_tongue:</td> <td>FACE WITH STUCK-OUT TONGUE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F61C</td> <td>😜</td> <td>\\:stuck_out_tongue_winking_eye:</td> <td>FACE WITH STUCK-OUT TONGUE AND WINKING EYE</td> </tr> <tr class=\"row-even\">\n<td>U+1F61D</td> <td>😝</td> <td>\\:stuck_out_tongue_closed_eyes:</td> <td>FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES</td> </tr> <tr class=\"row-odd\">\n<td>U+1F61E</td> <td>😞</td> <td>\\:disappointed:</td> <td>DISAPPOINTED FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F61F</td> <td>😟</td> <td>\\:worried:</td> <td>WORRIED FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F620</td> <td>😠</td> <td>\\:angry:</td> <td>ANGRY FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F621</td> <td>😡</td> <td>\\:rage:</td> <td>POUTING FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F622</td> <td>😢</td> <td>\\:cry:</td> <td>CRYING FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F623</td> <td>😣</td> <td>\\:persevere:</td> <td>PERSEVERING FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F624</td> <td>😤</td> <td>\\:triumph:</td> <td>FACE WITH LOOK OF TRIUMPH</td> </tr> <tr class=\"row-even\">\n<td>U+1F625</td> <td>😥</td> <td>\\:disappointed_relieved:</td> <td>DISAPPOINTED BUT RELIEVED FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F626</td> <td>😦</td> <td>\\:frowning:</td> <td>FROWNING FACE WITH OPEN MOUTH</td> </tr> <tr class=\"row-even\">\n<td>U+1F627</td> <td>😧</td> <td>\\:anguished:</td> <td>ANGUISHED FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F628</td> <td>😨</td> <td>\\:fearful:</td> <td>FEARFUL FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F629</td> <td>😩</td> <td>\\:weary:</td> <td>WEARY FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F62A</td> <td>😪</td> <td>\\:sleepy:</td> <td>SLEEPY FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F62B</td> <td>😫</td> <td>\\:tired_face:</td> <td>TIRED FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F62C</td> <td>😬</td> <td>\\:grimacing:</td> <td>GRIMACING FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F62D</td> <td>😭</td> <td>\\:sob:</td> <td>LOUDLY CRYING FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F62E</td> <td>😮</td> <td>\\:open_mouth:</td> <td>FACE WITH OPEN MOUTH</td> </tr> <tr class=\"row-even\">\n<td>U+1F62F</td> <td>😯</td> <td>\\:hushed:</td> <td>HUSHED FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F630</td> <td>😰</td> <td>\\:cold_sweat:</td> <td>FACE WITH OPEN MOUTH AND COLD SWEAT</td> </tr> <tr class=\"row-even\">\n<td>U+1F631</td> <td>😱</td> <td>\\:scream:</td> <td>FACE SCREAMING IN FEAR</td> </tr> <tr class=\"row-odd\">\n<td>U+1F632</td> <td>😲</td> <td>\\:astonished:</td> <td>ASTONISHED FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F633</td> <td>😳</td> <td>\\:flushed:</td> <td>FLUSHED FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F634</td> <td>😴</td> <td>\\:sleeping:</td> <td>SLEEPING FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F635</td> <td>😵</td> <td>\\:dizzy_face:</td> <td>DIZZY FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F636</td> <td>😶</td> <td>\\:no_mouth:</td> <td>FACE WITHOUT MOUTH</td> </tr> <tr class=\"row-even\">\n<td>U+1F637</td> <td>😷</td> <td>\\:mask:</td> <td>FACE WITH MEDICAL MASK</td> </tr> <tr class=\"row-odd\">\n<td>U+1F638</td> <td>😸</td> <td>\\:smile_cat:</td> <td>GRINNING CAT FACE WITH SMILING EYES</td> </tr> <tr class=\"row-even\">\n<td>U+1F639</td> <td>😹</td> <td>\\:joy_cat:</td> <td>CAT FACE WITH TEARS OF JOY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F63A</td> <td>😺</td> <td>\\:smiley_cat:</td> <td>SMILING CAT FACE WITH OPEN MOUTH</td> </tr> <tr class=\"row-even\">\n<td>U+1F63B</td> <td>😻</td> <td>\\:heart_eyes_cat:</td> <td>SMILING CAT FACE WITH HEART-SHAPED EYES</td> </tr> <tr class=\"row-odd\">\n<td>U+1F63C</td> <td>😼</td> <td>\\:smirk_cat:</td> <td>CAT FACE WITH WRY SMILE</td> </tr> <tr class=\"row-even\">\n<td>U+1F63D</td> <td>😽</td> <td>\\:kissing_cat:</td> <td>KISSING CAT FACE WITH CLOSED EYES</td> </tr> <tr class=\"row-odd\">\n<td>U+1F63E</td> <td>😾</td> <td>\\:pouting_cat:</td> <td>POUTING CAT FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F63F</td> <td>😿</td> <td>\\:crying_cat_face:</td> <td>CRYING CAT FACE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F640</td> <td>🙀</td> <td>\\:scream_cat:</td> <td>WEARY CAT FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F645</td> <td>🙅</td> <td>\\:no_good:</td> <td>FACE WITH NO GOOD GESTURE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F646</td> <td>🙆</td> <td>\\:ok_woman:</td> <td>FACE WITH OK GESTURE</td> </tr> <tr class=\"row-even\">\n<td>U+1F647</td> <td>🙇</td> <td>\\:bow:</td> <td>PERSON BOWING DEEPLY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F648</td> <td>🙈</td> <td>\\:see_no_evil:</td> <td>SEE-NO-EVIL MONKEY</td> </tr> <tr class=\"row-even\">\n<td>U+1F649</td> <td>🙉</td> <td>\\:hear_no_evil:</td> <td>HEAR-NO-EVIL MONKEY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F64A</td> <td>🙊</td> <td>\\:speak_no_evil:</td> <td>SPEAK-NO-EVIL MONKEY</td> </tr> <tr class=\"row-even\">\n<td>U+1F64B</td> <td>🙋</td> <td>\\:raising_hand:</td> <td>HAPPY PERSON RAISING ONE HAND</td> </tr> <tr class=\"row-odd\">\n<td>U+1F64C</td> <td>🙌</td> <td>\\:raised_hands:</td> <td>PERSON RAISING BOTH HANDS IN CELEBRATION</td> </tr> <tr class=\"row-even\">\n<td>U+1F64D</td> <td>🙍</td> <td>\\:person_frowning:</td> <td>PERSON FROWNING</td> </tr> <tr class=\"row-odd\">\n<td>U+1F64E</td> <td>🙎</td> <td>\\:person_with_pouting_face:</td> <td>PERSON WITH POUTING FACE</td> </tr> <tr class=\"row-even\">\n<td>U+1F64F</td> <td>🙏</td> <td>\\:pray:</td> <td>PERSON WITH FOLDED HANDS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F680</td> <td>🚀</td> <td>\\:rocket:</td> <td>ROCKET</td> </tr> <tr class=\"row-even\">\n<td>U+1F681</td> <td>🚁</td> <td>\\:helicopter:</td> <td>HELICOPTER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F682</td> <td>🚂</td> <td>\\:steam_locomotive:</td> <td>STEAM LOCOMOTIVE</td> </tr> <tr class=\"row-even\">\n<td>U+1F683</td> <td>🚃</td> <td>\\:railway_car:</td> <td>RAILWAY CAR</td> </tr> <tr class=\"row-odd\">\n<td>U+1F684</td> <td>🚄</td> <td>\\:bullettrain_side:</td> <td>HIGH-SPEED TRAIN</td> </tr> <tr class=\"row-even\">\n<td>U+1F685</td> <td>🚅</td> <td>\\:bullettrain_front:</td> <td>HIGH-SPEED TRAIN WITH BULLET NOSE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F686</td> <td>🚆</td> <td>\\:train2:</td> <td>TRAIN</td> </tr> <tr class=\"row-even\">\n<td>U+1F687</td> <td>🚇</td> <td>\\:metro:</td> <td>METRO</td> </tr> <tr class=\"row-odd\">\n<td>U+1F688</td> <td>🚈</td> <td>\\:light_rail:</td> <td>LIGHT RAIL</td> </tr> <tr class=\"row-even\">\n<td>U+1F689</td> <td>🚉</td> <td>\\:station:</td> <td>STATION</td> </tr> <tr class=\"row-odd\">\n<td>U+1F68A</td> <td>🚊</td> <td>\\:tram:</td> <td>TRAM</td> </tr> <tr class=\"row-even\">\n<td>U+1F68B</td> <td>🚋</td> <td>\\:train:</td> <td>TRAM CAR</td> </tr> <tr class=\"row-odd\">\n<td>U+1F68C</td> <td>🚌</td> <td>\\:bus:</td> <td>BUS</td> </tr> <tr class=\"row-even\">\n<td>U+1F68D</td> <td>🚍</td> <td>\\:oncoming_bus:</td> <td>ONCOMING BUS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F68E</td> <td>🚎</td> <td>\\:trolleybus:</td> <td>TROLLEYBUS</td> </tr> <tr class=\"row-even\">\n<td>U+1F68F</td> <td>🚏</td> <td>\\:busstop:</td> <td>BUS STOP</td> </tr> <tr class=\"row-odd\">\n<td>U+1F690</td> <td>🚐</td> <td>\\:minibus:</td> <td>MINIBUS</td> </tr> <tr class=\"row-even\">\n<td>U+1F691</td> <td>🚑</td> <td>\\:ambulance:</td> <td>AMBULANCE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F692</td> <td>🚒</td> <td>\\:fire_engine:</td> <td>FIRE ENGINE</td> </tr> <tr class=\"row-even\">\n<td>U+1F693</td> <td>🚓</td> <td>\\:police_car:</td> <td>POLICE CAR</td> </tr> <tr class=\"row-odd\">\n<td>U+1F694</td> <td>🚔</td> <td>\\:oncoming_police_car:</td> <td>ONCOMING POLICE CAR</td> </tr> <tr class=\"row-even\">\n<td>U+1F695</td> <td>🚕</td> <td>\\:taxi:</td> <td>TAXI</td> </tr> <tr class=\"row-odd\">\n<td>U+1F696</td> <td>🚖</td> <td>\\:oncoming_taxi:</td> <td>ONCOMING TAXI</td> </tr> <tr class=\"row-even\">\n<td>U+1F697</td> <td>🚗</td> <td>\\:car:</td> <td>AUTOMOBILE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F698</td> <td>🚘</td> <td>\\:oncoming_automobile:</td> <td>ONCOMING AUTOMOBILE</td> </tr> <tr class=\"row-even\">\n<td>U+1F699</td> <td>🚙</td> <td>\\:blue_car:</td> <td>RECREATIONAL VEHICLE</td> </tr> <tr class=\"row-odd\">\n<td>U+1F69A</td> <td>🚚</td> <td>\\:truck:</td> <td>DELIVERY TRUCK</td> </tr> <tr class=\"row-even\">\n<td>U+1F69B</td> <td>🚛</td> <td>\\:articulated_lorry:</td> <td>ARTICULATED LORRY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F69C</td> <td>🚜</td> <td>\\:tractor:</td> <td>TRACTOR</td> </tr> <tr class=\"row-even\">\n<td>U+1F69D</td> <td>🚝</td> <td>\\:monorail:</td> <td>MONORAIL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F69E</td> <td>🚞</td> <td>\\:mountain_railway:</td> <td>MOUNTAIN RAILWAY</td> </tr> <tr class=\"row-even\">\n<td>U+1F69F</td> <td>🚟</td> <td>\\:suspension_railway:</td> <td>SUSPENSION RAILWAY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6A0</td> <td>🚠</td> <td>\\:mountain_cableway:</td> <td>MOUNTAIN CABLEWAY</td> </tr> <tr class=\"row-even\">\n<td>U+1F6A1</td> <td>🚡</td> <td>\\:aerial_tramway:</td> <td>AERIAL TRAMWAY</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6A2</td> <td>🚢</td> <td>\\:ship:</td> <td>SHIP</td> </tr> <tr class=\"row-even\">\n<td>U+1F6A3</td> <td>🚣</td> <td>\\:rowboat:</td> <td>ROWBOAT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6A4</td> <td>🚤</td> <td>\\:speedboat:</td> <td>SPEEDBOAT</td> </tr> <tr class=\"row-even\">\n<td>U+1F6A5</td> <td>🚥</td> <td>\\:traffic_light:</td> <td>HORIZONTAL TRAFFIC LIGHT</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6A6</td> <td>🚦</td> <td>\\:vertical_traffic_light:</td> <td>VERTICAL TRAFFIC LIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+1F6A7</td> <td>🚧</td> <td>\\:construction:</td> <td>CONSTRUCTION SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6A8</td> <td>🚨</td> <td>\\:rotating_light:</td> <td>POLICE CARS REVOLVING LIGHT</td> </tr> <tr class=\"row-even\">\n<td>U+1F6A9</td> <td>🚩</td> <td>\\:triangular_flag_on_post:</td> <td>TRIANGULAR FLAG ON POST</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6AA</td> <td>🚪</td> <td>\\:door:</td> <td>DOOR</td> </tr> <tr class=\"row-even\">\n<td>U+1F6AB</td> <td>🚫</td> <td>\\:no_entry_sign:</td> <td>NO ENTRY SIGN</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6AC</td> <td>🚬</td> <td>\\:smoking:</td> <td>SMOKING SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F6AD</td> <td>🚭</td> <td>\\:no_smoking:</td> <td>NO SMOKING SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6AE</td> <td>🚮</td> <td>\\:put_litter_in_its_place:</td> <td>PUT LITTER IN ITS PLACE SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F6AF</td> <td>🚯</td> <td>\\:do_not_litter:</td> <td>DO NOT LITTER SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6B0</td> <td>🚰</td> <td>\\:potable_water:</td> <td>POTABLE WATER SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F6B1</td> <td>🚱</td> <td>\\:non-potable_water:</td> <td>NON-POTABLE WATER SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6B2</td> <td>🚲</td> <td>\\:bike:</td> <td>BICYCLE</td> </tr> <tr class=\"row-even\">\n<td>U+1F6B3</td> <td>🚳</td> <td>\\:no_bicycles:</td> <td>NO BICYCLES</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6B4</td> <td>🚴</td> <td>\\:bicyclist:</td> <td>BICYCLIST</td> </tr> <tr class=\"row-even\">\n<td>U+1F6B5</td> <td>🚵</td> <td>\\:mountain_bicyclist:</td> <td>MOUNTAIN BICYCLIST</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6B6</td> <td>🚶</td> <td>\\:walking:</td> <td>PEDESTRIAN</td> </tr> <tr class=\"row-even\">\n<td>U+1F6B7</td> <td>🚷</td> <td>\\:no_pedestrians:</td> <td>NO PEDESTRIANS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6B8</td> <td>🚸</td> <td>\\:children_crossing:</td> <td>CHILDREN CROSSING</td> </tr> <tr class=\"row-even\">\n<td>U+1F6B9</td> <td>🚹</td> <td>\\:mens:</td> <td>MENS SYMBOL</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6BA</td> <td>🚺</td> <td>\\:womens:</td> <td>WOMENS SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F6BB</td> <td>🚻</td> <td>\\:restroom:</td> <td>RESTROOM</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6BC</td> <td>🚼</td> <td>\\:baby_symbol:</td> <td>BABY SYMBOL</td> </tr> <tr class=\"row-even\">\n<td>U+1F6BD</td> <td>🚽</td> <td>\\:toilet:</td> <td>TOILET</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6BE</td> <td>🚾</td> <td>\\:wc:</td> <td>WATER CLOSET</td> </tr> <tr class=\"row-even\">\n<td>U+1F6BF</td> <td>🚿</td> <td>\\:shower:</td> <td>SHOWER</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6C0</td> <td>🛀</td> <td>\\:bath:</td> <td>BATH</td> </tr> <tr class=\"row-even\">\n<td>U+1F6C1</td> <td>🛁</td> <td>\\:bathtub:</td> <td>BATHTUB</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6C2</td> <td>🛂</td> <td>\\:passport_control:</td> <td>PASSPORT CONTROL</td> </tr> <tr class=\"row-even\">\n<td>U+1F6C3</td> <td>🛃</td> <td>\\:customs:</td> <td>CUSTOMS</td> </tr> <tr class=\"row-odd\">\n<td>U+1F6C4</td> <td>🛄</td> <td>\\:baggage_claim:</td> <td>BAGGAGE CLAIM</td> </tr> <tr class=\"row-even\">\n<td>U+1F6C5</td> <td>🛅</td> <td>\\:left_luggage:</td> <td>LEFT LUGGAGE</td> </tr>  </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2015 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://docs.julialang.org/en/release-0.4/manual/unicode-input/\" class=\"_attribution-link\">http://docs.julialang.org/en/release-0.4/manual/unicode-input/</a>\n  </p>\n</div>\n"}