{"index":"<h1>Apache Cordova</h1> <h2>Guides</h2> <ul> <li> <div><a href=\"guide/overview/index\">Overview</a></div> <span>Start here if you are new to Cordova. Includes installation and next steps.</span> </li> <li> <div><a href=\"guide/support/index\">Platform Support</a></div> <span>Compatibility table for all major features.</span> </li> <li> <div><a href=\"guide/cli/index\">The Command-Line Interface</a></div> <span>Create, build, and deploy from the command-line.</span> </li> <li> <div><a href=\"guide/platforms/index\">Platform Guides</a></div> <span>Set up each platform SDK and update projects.</span> </li> <li> <div><a href=\"plugin_ref/plugman\">Using Plugman to Manage Plugins</a></div> <span>Manage plugins without the CLI when using the platform-centered workflow.</span> </li> <li> <div><a href=\"config_ref/index\">The config.xml File</a></div> <span>Customize your app's features.</span> </li> <li> <div><a href=\"config_ref/images\">Icons and Splash Screens</a></div> <span>Customize your app's displaying images.</span> </li> <li> <div><a href=\"guide/hybrid/webviews/index\">Embedding WebViews</a></div> <span>Implement the Cordova WebView in your native project.</span> </li> <li> <div><a href=\"guide/hybrid/plugins/index\">Plugin Development Guide</a></div> <span>Develop your own plugin.</span> </li> <li> <div><a href=\"guide/appdev/privacy/index\">Privacy Guide</a></div> <span>Learn about important mobile privacy issues.</span> </li> <li> <div><a href=\"guide/appdev/security/index\">Security Guide</a></div> <span>Information and tips for building a secure application.</span> </li> <li> <div><a href=\"platform_plugin_versioning_ref/index\">Platforms and Plugins Version Management</a></div> <span>Save and Restore your CLI projects to a known state without hassle.</span> </li> <li> <div><a href=\"guide/appdev/whitelist/index\">Whitelist Guide</a></div> <span>Grant an application access to external resources.</span> </li> <li> <div><a href=\"cordova/storage/storage\">Storage</a></div> <span>An overview of native storage options.</span> </li> <li> <div><a href=\"guide/appdev/hooks/index\">Hooks Guide</a></div> <span>Extend default Cordova functionality by adding custom scripts.</span> </li> <li> <div><a href=\"guide/next/index\">Next Steps</a></div> <span>A look at topics that new Cordova developers will encounter.</span> </li> </ul> <h2>API Reference</h2> <ul> <li> <div><a href=\"cordova/events/events\">Events</a></div> <span>Hook into native events through JavaScript.</span> </li> <li> <div><a href=\"cordova/plugins/pluginapis\">Plugin APIs</a></div> <span>Discover what Cordova plugins are available to use in your project.</span> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/index.html</a>\n  </p>\n</div>\n","guide/overview/index":"<h1>Overview</h1> <p>Apache Cordova is an open-source mobile development framework. It allows you to use standard web technologies such as HTML5, CSS3, and JavaScript for cross-platform development, avoiding each mobile platforms' native development language. Applications execute within wrappers targeted to each platform, and rely on standards-compliant API bindings to access each device's sensors, data, and network status. </p> <p>Apache Cordova graduated in October 2012 as a top level project within the Apache Software Foundation (ASF). Through the ASF, future Cordova development will ensure open stewardship of the project. It will always remain free and open source under the Apache License, Version 2.0. Visit <a href=\"http://cordova.apache.org\">cordova.apache.org</a> for more information.</p> <p>Use Apache Cordova if you are:</p> <ul> <li><p>a mobile developer and want to extend an application across more than one platform, without having to re-implement it with each platform's language and tool set.</p></li> <li><p>a web developer and want to deploy a web app that's packaged for distribution in various app store portals.</p></li> <li><p>a mobile developer interested in mixing native application components with a <em>WebView</em> (special browser window) that can access device-level APIs, or if you want to develop a plugin interface between native and WebView components.</p></li> </ul> <h2>Basic Components</h2> <p>Apache Cordova applications rely on a common <code class=\"prettyprint\">config.xml</code> file that provides information about the app and specifies parameters affecting how it works, such as whether it responds to orientation shifts. This file adheres to the W3C's <a href=\"http://www.w3.org/TR/widgets/\">Packaged Web App</a>, or <em>widget</em>, specification.</p> <p>The application itself is implemented as a web page, by default a local file named <em>index.html</em>, that references whatever CSS, JavaScript, images, media files, or other resources are necessary for it to run. The app executes as a <em>WebView</em> within the native application wrapper, which you distribute to app stores.</p> <p>The Cordova-enabled WebView may provide the application with its entire user interface. On some platforms, it can also be a component within a larger, hybrid application that mixes the WebView with native application components. (See <a href=\"../hybrid/webviews/index\">Embedding WebViews</a> for details.)</p> <p>A <em>plugin</em> interface is available for Cordova and native components to communicate with each other. This enables you to invoke native code from JavaScript. Ideally, the JavaScript APIs to that native code are consistent across multiple device platforms. As of version 3.0, plugins provide bindings to standard device APIs. Third-party plugins provide additional bindings to features not necessarily available on all platforms. You can find these third-party plugins in the <a href=\"http://plugins.cordova.io\">plugin registry</a> and use them in your application. You can also develop your own plugins, as described in the <a href=\"../hybrid/plugins/index\">Plugin Development Guide</a>. Plugins may be necessary, for example, to communicate between Cordova and custom native components.</p> <p><strong>NOTE</strong>: As of version 3.0, when you create a Cordova project it does not have any plugins present. This is the new default behavior. Any plugins you desire, even the core plugins, must be explicitly added.</p> <p>Cordova does not provide any UI widgets or MV* frameworks. Cordova provides only the runtime in which those can execute. If you wish to use UI widgets and/or an MV* framework, you will need to select those and include them in your application yourself as third-party material.</p> <h2>Development Paths</h2> <p>As of version 3.0, you can use two basic workflows to create a mobile app. While you can often use either workflow to accomplish the same task, they each offer advantages:</p> <ul> <li><p><strong>Cross-platform (CLI) workflow</strong>: Use this workflow if you want your app to run on as many different mobile operating systems as possible, with little need for platform-specific development. This workflow centers around the <code class=\"prettyprint\">cordova</code> utility, otherwise known as the Cordova <em>CLI</em>, that was introduced with Cordova 3.0. The CLI is a high-level tool that allows you to build projects for many platforms at once, abstracting away much of the functionality of lower-level shell scripts. The CLI copies a common set of web assets into subdirectories for each mobile platform, makes any necessary configuration changes for each, runs build scripts to generate application binaries. The CLI also provides a common interface to apply plugins to your app. For more details on the CLI, see The Command-Line Interface. Unless you have a need for the platform-centered workflow, the cross-platform workflow is recommended.</p></li> <li><p><strong>Platform-centered workflow</strong>: Use this workflow if you want to focus on building an app for a single platform and need to be able to modify it at a lower level. You need to use this approach, for example, if you want your app to mix custom native components with web-based Cordova components, as discussed in <a href=\"../hybrid/webviews/index\">Embedding WebViews</a>. As a rule of thumb, use this workflow if you need to modify the project within the SDK. This workflow relies on a set of lower-level shell scripts that are tailored for each supported platform, and a separate Plugman utility that allows you to apply plugins. While you can use this workflow to build cross-platform apps, it is generally more difficult because the lack of a higher-level tool means separate build cycles and plugin modifications for each platform. Still, this workflow allows you greater access to development options provided by each SDK, and is essential for complex hybrid apps. See the various <a href=\"../platforms/index\">Platform Guides</a> for details on each platform's available shell utilities.</p></li> </ul> <p>When first starting out, it may be easiest to use the cross-platform workflow to create an app, as described in <a href=\"../cli/index\">The Command-Line Interface</a>. You then have the option to switch to a platform-centered workflow if you need the greater control the SDK provides. Lower-level shell utilities are available at <a href=\"http://cordova.apache.org\">cordova.apache.org</a> in a separate distribution than the CLI. For projects initially generated by the CLI, these shell tools are also available in the project's various <code class=\"prettyprint\">platforms/*/cordova</code> directories.</p> <p><strong>NOTE</strong>: Once you switch from the CLI-based workflow to one centered around the platform-specific SDKs and shell tools, you can't go back. The CLI maintains a common set of cross-platform source code, which on each build it uses to write over platform-specific source code. To preserve any modifications you make to the platform-specific assets, you need to switch to the platform-centered shell tools, which ignore the cross-platform source code, and instead relies on the platform-specific source code.</p> <h2>Installing Cordova</h2> <p>The installation of Cordova will differ depending on the workflow above you choose:</p> <ul> <li><p>Cross-platform workflow: see <a href=\"../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Platform-centered workflow: see the <a href=\"../platforms/index\">Platform Guides</a>.</p></li> </ul> <p>After installing Cordova, it is recommended that you review the <a href=\"../platforms/index\">Platform Guides</a> for the mobile platforms that you will be developing for. It is also recommended that you also review the <a href=\"../appdev/privacy/index\">Privacy Guide</a>, <a href=\"../appdev/security/index\">Security Guide</a>, and <a href=\"../next/index\">Next Steps</a>. For configuring Cordova, see <a href=\"../../config_ref/index\">The config.xml File</a>. For accessing native function on a device from JavaScript, refer to the <a href=\"../../cordova/plugins/pluginapis\">Plugin APIs</a>. And refer to the other included guides as necessary.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/overview/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/overview/index.html</a>\n  </p>\n</div>\n","guide/platforms/index":"<h1>Platform Guides</h1> <p>Before developing for any of the platforms listed below, install cordova's command-line interface (CLI). (For details, see <a href=\"../cli/index\">The Command-Line Interface</a>.)</p> <p>To develop Cordova applications, you must install SDKs for each mobile platform you are targeting. This installation is necessary regardless of whether you do the majority of your work in the SDK or use the CLI for your build cycle.</p> <p>Each <em>Platform Guide</em> listed below tells you what you need to know to set up each platform's development environment: where to obtain the SDK, how to set up device emulators, how to connect devices for direct testing, and how to manage signing key requirements. Additional guides provide information on each platform's unique set of configuration options, instructions to add plugins, how to upgrade each platform, and platform-specific command-line tools that serve as a lower-level alternative to the <code class=\"prettyprint\">cordova</code> command-line utility.</p> <h2>Amazon Fire OS</h2> <ul> <li><a href=\"amazonfireos/index\">Amazon Fire OS Platform Guide</a></li> <li><a href=\"amazonfireos/config\">Amazon Fire OS Configuration</a></li> <li><a href=\"amazonfireos/webview\">Amazon Fire OS WebViews</a></li> <li><a href=\"amazonfireos/plugin\">Amazon Fire OS Plugins</a></li> </ul> <h2>Android</h2> <ul> <li><a href=\"android/index\">Android Platform Guide</a></li> <li><a href=\"android/tools\">Android Shell Tool Guide</a></li> <li><a href=\"android/config\">Android Configuration</a></li> <li><a href=\"android/plugin\">Android Plugins</a></li> <li><a href=\"android/webview\">Android WebViews</a></li> <li><a href=\"android/upgrade\">Upgrading Android</a></li> </ul> <h2>BlackBerry 10</h2> <ul> <li><a href=\"blackberry10/index\">BlackBerry 10 Platform Guide</a></li> <li><a href=\"blackberry10/tools\">BlackBerry 10 Shell Tool Guide</a></li> <li><a href=\"blackberry10/config\">BlackBerry 10 Configuration</a></li> <li><a href=\"blackberry10/plugin\">BlackBerry 10 Plugins</a></li> <li>\n<a href=\"blackberry/upgrade\">Upgrading BlackBerry</a> 10</li> </ul> <h2>Firefox OS</h2> <ul> <li><a href=\"firefoxos/index\">Firefox OS Platform Guide</a></li> </ul> <h2>iOS</h2> <ul> <li><a href=\"ios/index\">iOS Platform Guide</a></li> <li><a href=\"ios/tools\">iOS Shell Tool Guide</a></li> <li><a href=\"ios/config\">iOS Configuration</a></li> <li><a href=\"ios/plugin\">iOS Plugins</a></li> <li><a href=\"ios/webview\">iOS WebViews</a></li> <li><a href=\"ios/upgrade\">Upgrading iOS</a></li> </ul> <h2>Ubuntu</h2> <ul> <li><a href=\"ubuntu/index\">Ubuntu Platform Guide</a></li> </ul> <h2>Windows Phone 8</h2> <ul> <li><a href=\"wp8/index\">Windows Phone 8 Platform Guide</a></li> <li><a href=\"wp8/plugin\">Windows Phone 8 Plugins</a></li> <li><a href=\"wp8/upgrade\">Upgrading Windows Phone 8</a></li> </ul> <h2>Windows</h2> <ul> <li><a href=\"win8/index\">Windows Platform Guide</a></li> <li><a href=\"win8/plugin\">Windows Plugins</a></li> <li><a href=\"win8/packaging\">Windows Packaging</a></li> <li><a href=\"win8/upgrade\">Upgrading Windows 8</a></li> </ul> <h2>Tizen</h2> <ul> <li><a href=\"tizen/index\">Tizen Platform Guide</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/index.html</a>\n  </p>\n</div>\n","plugin_ref/plugman":"<h1>Using Plugman to Manage Plugins</h1> <p>From version 3.0 onward, Cordova implements all device APIs as plugins, and leaves them disabled by default. It also supports two different ways to add and remove plugins, depending on your choice of workflow discussed in the <a href=\"../guide/overview/index\">Overview</a>:</p> <ul> <li><p>If you use a cross-platform workflow, you use the <code class=\"prettyprint\">cordova</code> CLI utility to add plugins, as described in <a href=\"../guide/cli/index\">The Command-Line Interface</a>. The CLI modifies plugins for all specified platforms at once.</p></li> <li><p>If you use a platform-centered workflow, you use a lower-level <a href=\"https://github.com/apache/cordova-plugman/\">Plugman</a> command-line interface, separately for each targeted platform.</p></li> </ul> <p>This section details the Plugman utility. For more information on consuming Plugman as a node module or modifying the source code, see <a href=\"https://github.com/apache/cordova-plugman/blob/master/README.md\">the README file in its repository</a>.</p> <h2>Installing Plugman</h2> <p>To install plugman, you must have <a href=\"http://nodejs.org/\">node</a> installed on your machine. Then you can run the following command from anywhere in your environment to install plugman globally, so that it is available from any directory:</p> <div class=\"highlight\"><pre>$ npm install -g plugman\n</pre></div> <p>You must have also have <code class=\"prettyprint\">git</code> on your <code class=\"prettyprint\">PATH</code> to be able to install plugins directly from remote git URLs.</p> <p><strong>TIP</strong>: If you find that after installing plugman with <code class=\"prettyprint\">npm</code> you are still unable to run any <code class=\"prettyprint\">plugman</code> commands, make sure that you have added the <code class=\"prettyprint\">/npm/</code> directory into your <code class=\"prettyprint\">PATH</code>.</p> <p><strong>NOTE</strong>: You can skip this step if you don't want to pollute your global <code class=\"prettyprint\">npm</code> namespace by installing Plugman globally. If this is the case, then when you create a Cordova project with the shell tools, there will be a <code class=\"prettyprint\">node_modules</code> directory inside your project which contains Plugman. Since you did not install globally, you need to invoke <code class=\"prettyprint\">node</code> for each Plugman command, for example <code class=\"prettyprint\">node\n./node_modules/plugman/main.js -version</code>. The rest of this guide assumes you have installed Plugman globally, meaning you can invoke it with just <code class=\"prettyprint\">plugman</code>.</p> <h2>Create a Cordova Project</h2> <p>Before you can use Plugman, you must create a Cordova project. You can do this with either the Command-line Interface or with the lower level shell scripts. Instructions for using the shell scripts to create your project are located in the various \"Command-line Tools\" guides listed on the <a href=\"../guide/platforms/index\">Platform Guides</a> page. </p> <h2>Adding a Plugin</h2> <p>Once you have installed Plugman and have created a Cordova project, you can start adding plugins to the platform with:</p> <div class=\"highlight\"><pre>$ plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin &lt;name|url|path&gt; [--plugins_dir &lt;directory&gt;] [--www &lt;directory&gt;] [--variable &lt;name&gt;=&lt;value&gt; [--variable &lt;name&gt;=&lt;value&gt; ...]]\n</pre></div> <p>Using minimum parameters, this command installs a plugin into a cordova project. You must specify a platform and cordova project location for that platform. You also must specify a plugin, with the different <code class=\"prettyprint\">--plugin</code> parameter forms being:</p> <ul> <li>\n<code class=\"prettyprint\">name</code>: The directory name where the plugin contents exist. This must be an existing directory under the <code class=\"prettyprint\">--plugins_dir</code> path (see below for more info) or a plugin in the Cordova registry.</li> <li>\n<code class=\"prettyprint\">url</code>: A URL starting with https:// or git://, pointing to a valid git repository that is clonable and contains a <code class=\"prettyprint\">plugin.xml</code> file. The contents of this repository would be copied into the <code class=\"prettyprint\">--plugins_dir</code>.</li> <li>\n<code class=\"prettyprint\">path</code>: A path to a directory containing a valid plugin which includes a <code class=\"prettyprint\">plugin.xml</code> file. This path's contents will be copied into the <code class=\"prettyprint\">--plugins_dir</code>.</li> </ul> <p>Other parameters: </p> <ul> <li>\n<code class=\"prettyprint\">--plugins_dir</code> defaults to <code class=\"prettyprint\">&lt;project&gt;/cordova/plugins</code>, but can be any directory containing a subdirectory for each fetched plugin.</li> <li>\n<code class=\"prettyprint\">--www</code> defaults to the project's <code class=\"prettyprint\">www</code> folder location, but can be any directory that is to be used as cordova project application web assets.</li> <li>\n<code class=\"prettyprint\">--variable</code> allows to specify certain variables at install time, necessary for certain plugins requiring API keys or other custom, user-defined parameters. Please see the <a href=\"plugin_ref_spec.md#Plugin%20Specification\">plugin specification</a> for more information.</li> </ul> <h2>Remove a Plugin</h2> <p>To uninstall a plugin, you simply pass the <code class=\"prettyprint\">--uninstall</code> flag and provide the plugin ID.</p> <div class=\"highlight\"><pre>$ plugman --uninstall --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin &lt;id&gt; [--www &lt;directory&gt;] [--plugins_dir &lt;directory&gt;]\n</pre></div> <h2>Help Commands</h2> <p>Plugman features a global help command which may help you if you get stuck or are experiencing problems. It will display a list of all available Plugman commands and their syntax:</p> <div class=\"highlight\"><pre>plugman -help\nplugman  # same as above\n</pre></div> <p><strong>NOTE</strong>: <code class=\"prettyprint\">plugman -help</code> may show some additional registry-related commands. These commands are for plugin developers and may not be implemented on third-party plugin registries.</p> <p>You can also append the <code class=\"prettyprint\">--debug|-d</code> flag to any Plugman command to run that command in verbose mode, which will display any internal debugging messages as they are emitted and may help you track down problems like missing files. </p> <div class=\"highlight\"><pre># Adding Android battery-status plugin to \"myProject\":\nplugman -d --platform android --project myProject --plugin cordova-plugin-battery-status\n</pre></div> <p>Finally, you can use the <code class=\"prettyprint\">--version|-v</code> flag to see which version of Plugman you are using.</p> <div class=\"highlight\"><pre>plugman -v\n</pre></div> <h2>Registry Actions</h2> <p>There are a number of plugman commands that can be used for interacting with the <a href=\"http://plugins.cordova.io\">Plugin registry</a>. Please note that these registry commands are specific to the <em>plugins.cordova.io</em> plugin registry and may not be implemented by third-party plugin registries.</p> <h3>Searching for a Plugin</h3> <p>You can use Plugman to search the <a href=\"http://plugins.cordova.io\">Plugin registry</a> for plugin id's that match the given space separated list of keywords.</p> <div class=\"highlight\"><pre>plugman search &lt;plugin keywords&gt;\n</pre></div> <h3>Changing the Plugin Registry</h3> <p>You can get or set the URL of the current plugin registry that plugman is using. Generally you should leave this set at http://registry.cordova.io unless you want to use a third party plugin registry.</p> <div class=\"highlight\"><pre>plugman config set registry &lt;url-to-registry&gt;\nplugman config get registry\n</pre></div> <h3>Get Plugin Information</h3> <p>You can get information about any specific plugin stored in the plugin repository with:</p> <div class=\"highlight\"><pre>plugman info &lt;id&gt;\n</pre></div> <p>This will contact the plugin registry and fetch information such as the plugin's version number. </p> <h2>Installing Core Plugins</h2> <p>The examples below show how to add plugins as needed so that any Cordova APIs you use in your project still work after you upgrade to version 3.0. For each command, you need to select the target platform, and reference the platform's project directory.</p> <ul> <li>\n<p>cordova-plugin-battery-status</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-battery-status</code></p>\n</li> <li>\n<p>cordova-plugin-camera</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-camera</code></p>\n</li> <li>\n<p>cordova-plugin-console</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-console</code></p>\n</li> <li>\n<p>cordova-plugin-contacts</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-contacts</code></p>\n</li> <li>\n<p>cordova-plugin-device</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-device</code></p>\n</li> <li>\n<p>cordova-plugin-device-motion (accelerometer)</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-device-motion</code></p>\n</li> <li>\n<p>cordova-plugin-device-orientation (compass)</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-device-orientation</code></p>\n</li> <li>\n<p>cordova-plugin-dialogs</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-dialogs</code></p>\n</li> <li>\n<p>cordova-plugin-file</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-file</code></p>\n</li> <li>\n<p>cordova-plugin-file-transfer</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-file-transfer</code></p>\n</li> <li>\n<p>cordova-plugin-geolocation</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-geolocation</code></p>\n</li> <li>\n<p>cordova-plugin-globalization</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-globalization</code></p>\n</li> <li>\n<p>cordova-plugin-inappbrowser</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-inappbrowser</code></p>\n</li> <li>\n<p>cordova-plugin-media</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-media</code></p>\n</li> <li>\n<p>cordova-plugin-media-capture</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-media-capture</code></p>\n</li> <li>\n<p>cordova-plugin-network-information</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-network-information</code></p>\n</li> <li>\n<p>cordova-plugin-splashscreen</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-splashscreen</code></p>\n</li> <li>\n<p>cordova-plugin-vibration</p> <p><code class=\"prettyprint\">plugman --platform &lt;ios|amazon-fireos|android|blackberry10|wp8&gt; --project &lt;directory&gt; --plugin cordova-plugin-vibration</code></p>\n</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/plugin_ref/plugman.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/plugin_ref/plugman.html</a>\n  </p>\n</div>\n","config_ref/index":"<h1>The config.xml File</h1> <p>Many aspects of an app's behavior can be controlled with a global configuration file, <code class=\"prettyprint\">config.xml</code>. This platform-agnostic XML file is arranged based on the W3C's <a href=\"http://www.w3.org/TR/widgets/\">Packaged Web Apps (Widgets)</a> specification, and extended to specify core Cordova API features, plugins, and platform-specific settings.</p> <p>For projects created with the Cordova CLI (described in The Command-Line Interface), this file can be found in the top-level directory:</p> <div class=\"highlight\"><pre>app/config.xml\n</pre></div> <p>Note that before version 3.3.1-0.2.0, the file existed at <code class=\"prettyprint\">app/www/config.xml</code>, and that having it here is still supported.</p> <p>When using the CLI to build a project, versions of this file are passively copied into various <code class=\"prettyprint\">platforms/</code> subdirectories, for example:</p> <div class=\"highlight\"><pre>app/platforms/ios/AppName/config.xml\napp/platforms/blackberry10/www/config.xml\napp/platforms/android/res/xml/config.xml\n</pre></div> <p>This section details global and cross-platform configuration options. See the following sections for platform-specific options:</p> <ul> <li><a href=\"../guide/platforms/ios/config\">iOS Configuration</a></li> <li><a href=\"../guide/platforms/android/config\">Android Configuration</a></li> <li><a href=\"../guide/platforms/blackberry10/config\">BlackBerry 10 Configuration</a></li> </ul> <p>In addition to the various configuration options detailed below, you can also configure an application's core set of images for each target platform. See <a href=\"images\">Icons and Splash Screens</a> for more information.</p> <h2>Core Configuration Elements</h2> <p>This example shows the default <code class=\"prettyprint\">config.xml</code> generated by the CLI's <code class=\"prettyprint\">create</code> command, described in <a href=\"../guide/cli/index\">The Command-Line Interface</a>:</p> <div class=\"highlight\"><pre>&lt;widget id=\"com.example.hello\" version=\"0.0.1\"&gt;\n   &lt;name&gt;HelloWorld&lt;/name&gt;\n   &lt;description&gt;\n       A sample Apache Cordova application that responds to the deviceready event.\n   &lt;/description&gt;\n   &lt;author email=\"dev@callback.apache.org\" href=\"http://cordova.io\"&gt;\n       Apache Cordova Team\n   &lt;/author&gt;\n   &lt;content src=\"index.html\" /&gt;\n   &lt;access origin=\"*\" /&gt;\n&lt;/widget&gt;\n</pre></div> <p>The following configuration elements appear in the top-level <code class=\"prettyprint\">config.xml</code> file, and are supported across all supported Cordova platforms:</p> <ul> <li>The <code class=\"prettyprint\">&lt;widget&gt;</code> element's <code class=\"prettyprint\">id</code> attribute provides the app's reverse-domain identifier, and the <code class=\"prettyprint\">version</code> its full version number expressed in major/minor/patch notation.</li> </ul> <p>The widget tag can also have attributes that specify alternative versions, namely <code class=\"prettyprint\">versionCode</code> for Android, <code class=\"prettyprint\">CFBundleVersion</code> for iOS, and <code class=\"prettyprint\">packageVersion</code> for Windows. See the Additional Versioning section below for details.</p> <ul> <li><p>The <code class=\"prettyprint\">&lt;name&gt;</code> element specifies the app's formal name, as it appears on the device's home screen and within app-store interfaces.</p></li> <li><p>The <code class=\"prettyprint\">&lt;description&gt;</code> and <code class=\"prettyprint\">&lt;author&gt;</code> elements specify metadata and contact information that may appear within app-store listings.</p></li> <li><p>The optional <code class=\"prettyprint\">&lt;content&gt;</code> element defines the app's starting page in the top-level web assets directory. The default value is <code class=\"prettyprint\">index.html</code>, which customarily appears in a project's top-level <code class=\"prettyprint\">www</code> directory.</p></li> <li><p><code class=\"prettyprint\">&lt;access&gt;</code> elements define the set of external domains the app is allowed to communicate with. The default value shown above allows it to access any server. See the Domain <a href=\"../guide/appdev/whitelist/index\">Whitelist Guide</a> for details.</p></li> <li><p>The <code class=\"prettyprint\">&lt;preference&gt;</code> tag sets various options as pairs of <code class=\"prettyprint\">name</code>/<code class=\"prettyprint\">value</code> attributes. Each preference's <code class=\"prettyprint\">name</code> is case-insensitive. Many preferences are unique to specific platforms, as listed at the top of this page. The following sections detail preferences that apply to more than one platform.</p></li> </ul> <h3>Additional Versioning</h3> <p>Android, iOS, and Windows support a second version string (or number) in addition to the one visible in app stores:</p> <ul> <li>\n<a href=\"http://developer.android.com/tools/publishing/versioning.html\">versionCode</a> for Android</li> <li>\n<a href=\"http://stackoverflow.com/questions/4933093/cfbundleversion-in-the-info-plist-upload-error\">CFBundleVersion</a> for iOS</li> <li>\n<a href=\"https://msdn.microsoft.com/en-us/library/windows/apps/br211441.aspx\">packageVersion</a> for Windows</li> </ul> <p>Below is an example that explicitly sets these properties:</p> <div class=\"highlight\"><pre>&lt;widget id=\"io.cordova.hellocordova\"\n version=\"0.0.1\"\n android-versionCode=\"7\"\n ios-CFBundleVersion=\"3.3.3\"\n windows-packageVersion=\"1.0.1.2\"&gt;\n</pre></div> <p>If alternative version is not specified, the following defaults will be used:</p> <div class=\"highlight\"><pre>// assuming version = MAJOR.MINOR.PATCH-whatever\nversionCode = PATCH + MINOR * 100 + MAJOR * 10000\nCFBundleVersion = \"MAJOR.MINOR.PATCH\"\npackageVersion = \"MAJOR.MINOR.PATCH.0\"\n</pre></div> <h2>Global Preferences</h2> <p>The following global preferences apply to all platforms:</p> <ul> <li>\n<p><code class=\"prettyprint\">Fullscreen</code> allows you to hide the status bar at the top of the screen. The default value is <code class=\"prettyprint\">false</code>. Example:</p> <div class=\"highlight\"><pre>&lt;preference name=\"Fullscreen\" value=\"true\" /&gt;\n</pre></div>\n</li> </ul> <h2>Multi-Platform Preferences</h2> <p>The following preferences apply to more than one platform, but not to all of them:</p> <ul> <li>\n<p><code class=\"prettyprint\">DisallowOverscroll</code> (boolean, defaults to <code class=\"prettyprint\">false</code>): set to <code class=\"prettyprint\">true</code> if you don't want the interface to display any feedback when users scroll past the beginning or end of content.</p> <div class=\"highlight\"><pre>&lt;preference name=\"DisallowOverscroll\" value=\"true\"/&gt;\n</pre></div>\n</li> </ul> <p>Applies to Android and iOS. On iOS, overscroll gestures cause content to bounce back to its original position. On Android, they produce a more subtle glowing effect along the top or bottom edge of the content.</p> <ul> <li>\n<p><code class=\"prettyprint\">BackgroundColor</code>: Set the app's background color. Supports a four-byte hex value, with the first byte representing the alpha channel, and standard RGB values for the following three bytes. This example specifies blue:</p> <div class=\"highlight\"><pre>&lt;preference name=\"BackgroundColor\" value=\"0xff0000ff\"/&gt;\n</pre></div>\n</li> </ul> <p>Applies to Android and BlackBerry. Overrides CSS otherwise available across <em>all</em> platforms, for example: <code class=\"prettyprint\">body{background-color:blue}</code>.</p> <ul> <li>\n<p><code class=\"prettyprint\">HideKeyboardFormAccessoryBar</code> (boolean, defaults to <code class=\"prettyprint\">false</code>): set to <code class=\"prettyprint\">true</code> to hide the additional toolbar that appears above the keyboard, helping users navigate from one form input to another.</p> <div class=\"highlight\"><pre>&lt;preference name=\"HideKeyboardFormAccessoryBar\" value=\"true\"/&gt;\n</pre></div>\n</li> </ul> <p>Applies to BlackBerry.</p> <ul> <li>\n<p><code class=\"prettyprint\">Orientation</code> (string, defaults to <code class=\"prettyprint\">default</code>): allows you to lock orientation and prevent the interface from rotating in response to changes in orientation. Possible values are <code class=\"prettyprint\">default</code>, <code class=\"prettyprint\">landscape</code> or <code class=\"prettyprint\">portrait</code>. Example:</p> <div class=\"highlight\"><pre>&lt;preference name=\"Orientation\" value=\"landscape\" /&gt;\n</pre></div>\n</li> </ul> <p>Additionally, you can specify any platform-specific orientation value if you place the <code class=\"prettyprint\">&lt;preference&gt;</code> element within a <code class=\"prettyprint\">&lt;platform&gt;</code> element:</p> <div class=\"highlight\"><pre>&lt;platform name=\"android\"&gt;\n   &lt;preference name=\"Orientation\" value=\"sensorLandscape\" /&gt;\n&lt;/platform&gt;\n</pre></div> <p>Applies to Android, iOS, WP8, Amazon Fire OS and Firefox OS.</p> <p><strong>NOTE</strong>: The <code class=\"prettyprint\">default</code> value means Cordova will strip the orientation preference entry from the platform's manifest/configuration file allowing the platform to fallback to its default behavior.</p> <p>For iOS, to specify both portrait &amp; landscape mode you would use the platform specific value <code class=\"prettyprint\">all</code>:</p> <div class=\"highlight\"><pre>&lt;platform name=\"ios\"&gt;\n   &lt;preference name=\"Orientation\" value=\"all\" /&gt;\n&lt;/platform&gt;\n</pre></div> <h2>The <em>feature</em> Element</h2> <p>If you use the CLI to build applications, you use the <code class=\"prettyprint\">plugin</code> command to enable device APIs. This does not modify the top-level <code class=\"prettyprint\">config.xml</code> file, so the <code class=\"prettyprint\">&lt;feature&gt;</code> element does not apply to your workflow. If you work directly in an SDK and using the platform-specific <code class=\"prettyprint\">config.xml</code> file as source, you use the <code class=\"prettyprint\">&lt;feature&gt;</code> tag to enable device-level APIs and external plugins. They often appear with custom values in platform-specific <code class=\"prettyprint\">config.xml</code> files. For example, here is how to specify the Device API for Android projects:</p> <div class=\"highlight\"><pre>&lt;feature name=\"Device\"&gt;\n   &lt;param name=\"android-package\" value=\"org.apache.cordova.device.Device\" /&gt;\n&lt;/feature&gt;\n</pre></div> <p>Here is how the element appears for iOS projects:</p> <div class=\"highlight\"><pre>&lt;feature name=\"Device\"&gt;\n   &lt;param name=\"ios-package\" value=\"CDVDevice\" /&gt;\n&lt;/feature&gt;\n</pre></div> <p>See the API Reference for details on how to specify each feature. See the <a href=\"../guide/hybrid/plugins/index\">Plugin Development Guide</a> for more information on plugins.</p> <h2>The <em>platform</em> Element</h2> <p>When using the CLI to build applications, it is sometimes necessary to specify preferences or other elements specific to a particular platform. Use the <code class=\"prettyprint\">&lt;platform&gt;</code> element to specify configuration that should only appear in a single platform-specific <code class=\"prettyprint\">config.xml</code> file. For example, here is how to specify that only android should use the Fullscreen preference:</p> <div class=\"highlight\"><pre>&lt;platform name=\"android\"&gt;\n   &lt;preference name=\"Fullscreen\" value=\"true\" /&gt;\n&lt;/platform&gt;\n</pre></div> <h2>The <em>hook</em> Element</h2> <p>Represents your custom script which will be called by Cordova when certain action occurs (for example, after plugin is added or platform prepare logic is invoked). This is useful when you need to extend default Cordova functionality. See <a href=\"../guide/appdev/hooks/index\">Hooks Guide</a> for more information.</p> <div class=\"highlight\"><pre>&lt;hook type=\"after_plugin_install\" src=\"scripts/afterPluginInstall.js\" /&gt;\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/config_ref/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/config_ref/index.html</a>\n  </p>\n</div>\n","config_ref/images":"<h1>Icons and Splash Screens</h1> <p>This section shows how to configure an app's icon and optional splash screen for various platforms, both when working in the Cordova CLI (described in The Command-Line Interface) or using platform-specific SDK tools (detailed in the Platform Guides).</p> <h2>Configuring Icons in the CLI</h2> <p>When working in the CLI you can define app icon(s) via <code class=\"prettyprint\">&lt;icon&gt;</code> element (<code class=\"prettyprint\">config.xml</code>). If you do not specify an icon then the Apache Cordova logo is used.</p> <div class=\"highlight\"><pre>&lt;icon src=\"res/ios/icon.png\" platform=\"ios\" width=\"57\" height=\"57\" density=\"mdpi\" /&gt;\n</pre></div> <p>src: (required) specifies the location of the image file, relative to your project directory</p> <p>platform: (optional) target platform</p> <p>width: (optional) icon width in pixels</p> <p>height: (optional) icon height in pixels </p> <p>density: (optional) android specific, specifies icon density</p> <p>The following configuration can be used to define single default icon which will be used for all platforms.</p> <div class=\"highlight\"><pre>&lt;icon src=\"res/icon.png\" /&gt;\n</pre></div> <p>For each platform you can also define a pixel-perfect icons set to fit different screen resolutions.</p> <p>Amazon Fire OS</p> <div class=\"highlight\"><pre>&lt;platform name=\"amazon-fireos\"&gt;\n         &lt;icon src=\"res/android/ldpi.png\" density=\"ldpi\" /&gt;\n         &lt;icon src=\"res/android/mdpi.png\" density=\"mdpi\" /&gt;\n         &lt;icon src=\"res/android/hdpi.png\" density=\"hdpi\" /&gt;\n         &lt;icon src=\"res/android/xhdpi.png\" density=\"xhdpi\" /&gt;\n&lt;/platform&gt;\n</pre></div> <p>Android</p> <div class=\"highlight\"><pre>&lt;platform name=\"android\"&gt;\n         &lt;icon src=\"res/android/ldpi.png\" density=\"ldpi\" /&gt;\n         &lt;icon src=\"res/android/mdpi.png\" density=\"mdpi\" /&gt;\n         &lt;icon src=\"res/android/hdpi.png\" density=\"hdpi\" /&gt;\n         &lt;icon src=\"res/android/xhdpi.png\" density=\"xhdpi\" /&gt;\n&lt;/platform&gt;\n</pre></div> <p>BlackBerry10</p> <div class=\"highlight\"><pre>&lt;platform name=\"blackberry10\"&gt;\n         &lt;icon src=\"res/bb10/icon-86.png\" /&gt;\n         &lt;icon src=\"res/bb10/icon-150.png\" /&gt;\n&lt;/platform&gt;\n</pre></div> <p>See BlackBerry's documentation for targeting multiple sizes and locales. [http://developer.blackberry.com/html5/documentation/icon_element.html]</p> <p>Firefox OS</p> <div class=\"highlight\"><pre>&lt;platform name=\"firefoxos\"&gt;\n         &lt;icon src=\"res/ff/logo.png\" width=\"60\" height=\"60\" /&gt;\n&lt;/platform&gt;\n</pre></div> <p>iOS</p> <div class=\"highlight\"><pre>&lt;platform name=\"ios\"&gt;\n         &lt;!-- iOS 8.0+ --&gt;\n         &lt;!-- iPhone 6 Plus  --&gt;\n         &lt;icon src=\"res/ios/icon-60@3x.png\" width=\"180\" height=\"180\" /&gt;\n         &lt;!-- iOS 7.0+ --&gt;\n         &lt;!-- iPhone / iPod Touch  --&gt;\n         &lt;icon src=\"res/ios/icon-60.png\" width=\"60\" height=\"60\" /&gt;\n         &lt;icon src=\"res/ios/icon-60@2x.png\" width=\"120\" height=\"120\" /&gt;\n         &lt;!-- iPad --&gt;\n         &lt;icon src=\"res/ios/icon-76.png\" width=\"76\" height=\"76\" /&gt;\n         &lt;icon src=\"res/ios/icon-76@2x.png\" width=\"152\" height=\"152\" /&gt;\n         &lt;!-- iOS 6.1 --&gt;\n         &lt;!-- Spotlight Icon --&gt;\n         &lt;icon src=\"res/ios/icon-40.png\" width=\"40\" height=\"40\" /&gt;\n         &lt;icon src=\"res/ios/icon-40@2x.png\" width=\"80\" height=\"80\" /&gt;\n         &lt;!-- iPhone / iPod Touch --&gt;\n         &lt;icon src=\"res/ios/icon.png\" width=\"57\" height=\"57\" /&gt;\n         &lt;icon src=\"res/ios/icon@2x.png\" width=\"114\" height=\"114\" /&gt;\n         &lt;!-- iPad --&gt;\n         &lt;icon src=\"res/ios/icon-72.png\" width=\"72\" height=\"72\" /&gt;\n         &lt;icon src=\"res/ios/icon-72@2x.png\" width=\"144\" height=\"144\" /&gt;\n         &lt;!-- iPhone Spotlight and Settings Icon --&gt;\n         &lt;icon src=\"res/ios/icon-small.png\" width=\"29\" height=\"29\" /&gt;\n         &lt;icon src=\"res/ios/icon-small@2x.png\" width=\"58\" height=\"58\" /&gt;\n         &lt;!-- iPad Spotlight and Settings Icon --&gt;\n         &lt;icon src=\"res/ios/icon-50.png\" width=\"50\" height=\"50\" /&gt;\n         &lt;icon src=\"res/ios/icon-50@2x.png\" width=\"100\" height=\"100\" /&gt;\n&lt;/platform&gt;\n</pre></div> <p>Tizen</p> <div class=\"highlight\"><pre>&lt;platform name=\"tizen\"&gt;\n         &lt;icon src=\"res/tizen/icon-128.png\" width=\"128\" height=\"128\" /&gt;\n&lt;/platform&gt;\n</pre></div> <p>Windows Phone8</p> <div class=\"highlight\"><pre>&lt;platform name=\"wp8\"&gt;\n         &lt;icon src=\"res/wp/ApplicationIcon.png\" width=\"99\" height=\"99\" /&gt;\n         &lt;!-- tile image --&gt;\n         &lt;icon src=\"res/wp/Background.png\" width=\"159\" height=\"159\" /&gt;\n&lt;/platform&gt;\n</pre></div> <p>Windows8</p> <div class=\"highlight\"><pre>&lt;platform name=\"windows8\"&gt;\n         &lt;icon src=\"res/windows8/logo.png\" width=\"150\" height=\"150\" /&gt;\n         &lt;icon src=\"res/windows8/smalllogo.png\" width=\"30\" height=\"30\" /&gt;\n         &lt;icon src=\"res/windows8/storelogo.png\" width=\"50\" height=\"50\" /&gt;\n&lt;/platform&gt;\n</pre></div> <h2>Configuring Splash Screens in the CLI</h2> <p>In the top-level <code class=\"prettyprint\">config.xml</code> file (not the one in <code class=\"prettyprint\">platforms</code>), add configuration elements like those specified here.</p> <h1>Example configuration</h1> <p>Please notice that the value of the \"src\" attribute is relative to the project directory and not to the www directory. You can name the source image whatever you like. The internal name in the app are determined by Cordova.</p> <div class=\"highlight\"><pre>&lt;platform name=\"android\"&gt;\n&lt;!-- you can use any density that exists in the Android project --&gt;\n&lt;splash src=\"res/screen/android/splash-land-hdpi.png\" density=\"land-hdpi\"/&gt;\n&lt;splash src=\"res/screen/android/splash-land-ldpi.png\" density=\"land-ldpi\"/&gt;\n&lt;splash src=\"res/screen/android/splash-land-mdpi.png\" density=\"land-mdpi\"/&gt;\n&lt;splash src=\"res/screen/android/splash-land-xhdpi.png\" density=\"land-xhdpi\"/&gt;\n\n&lt;splash src=\"res/screen/android/splash-port-hdpi.png\" density=\"port-hdpi\"/&gt;\n&lt;splash src=\"res/screen/android/splash-port-ldpi.png\" density=\"port-ldpi\"/&gt;\n&lt;splash src=\"res/screen/android/splash-port-mdpi.png\" density=\"port-mdpi\"/&gt;\n&lt;splash src=\"res/screen/android/splash-port-xhdpi.png\" density=\"port-xhdpi\"/&gt;\n&lt;/platform&gt;\n\n&lt;platform name=\"ios\"&gt;\n&lt;!-- images are determined by width and height. The following are supported --&gt;\n&lt;splash src=\"res/screen/ios/Default~iphone.png\" width=\"320\" height=\"480\"/&gt;\n&lt;splash src=\"res/screen/ios/Default@2x~iphone.png\" width=\"640\" height=\"960\"/&gt;\n&lt;splash src=\"res/screen/ios/Default-Portrait~ipad.png\" width=\"768\" height=\"1024\"/&gt;\n&lt;splash src=\"res/screen/ios/Default-Portrait@2x~ipad.png\" width=\"1536\" height=\"2048\"/&gt;\n&lt;splash src=\"res/screen/ios/Default-Landscape~ipad.png\" width=\"1024\" height=\"768\"/&gt;\n&lt;splash src=\"res/screen/ios/Default-Landscape@2x~ipad.png\" width=\"2048\" height=\"1536\"/&gt;\n&lt;splash src=\"res/screen/ios/Default-568h@2x~iphone.png\" width=\"640\" height=\"1136\"/&gt;\n&lt;splash src=\"res/screen/ios/Default-667h.png\" width=\"750\" height=\"1334\"/&gt;\n&lt;splash src=\"res/screen/ios/Default-736h.png\" width=\"1242\" height=\"2208\"/&gt;\n&lt;splash src=\"res/screen/ios/Default-Landscape-736h.png\" width=\"2208\" height=\"1242\"/&gt;\n&lt;/platform&gt;\n\n&lt;platform name=\"wp8\"&gt;\n&lt;!-- images are determined by width and height. The following are supported --&gt;\n&lt;splash src=\"res/screen/wp8/SplashScreenImage.jpg\" width=\"768\" height=\"1280\"/&gt;\n&lt;/platform&gt;\n\n&lt;platform name=\"windows8\"&gt;\n&lt;!-- images are determined by width and height. The following are supported --&gt;\n&lt;splash src=\"res/screen/windows8/splashscreen.png\" width=\"620\" height=\"300\"/&gt;\n&lt;/platform&gt;\n\n&lt;platform name=\"blackberry10\"&gt;\n&lt;!-- Add a rim:splash element for each resolution and locale you wish --&gt;\n&lt;!-- http://developer.blackberry.com/html5/documentation/rim_splash_element.html --&gt;\n&lt;rim:splash src=\"res/screen/windows8/splashscreen.png\"/&gt;\n&lt;/platform&gt;\n\n\n&lt;preference name=\"SplashScreenDelay\" value=\"10000\" /&gt;\n</pre></div> <h1>Supported platforms</h1> <p>As of now (Cordova 3.5.0 July 2014) the following platforms support splash screens.</p> <div class=\"highlight\"><pre>android\nios\nwp8\nwindows8\nblackberry10\n</pre></div> <h1>Splashscreen Plugin</h1> <p>Apache Cordova also offers special splash screen plugin which could be used to programmatically display and hide a splash screen during application launch https://github.com/apache/cordova-plugin-splashscreen</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/config_ref/images.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/config_ref/images.html</a>\n  </p>\n</div>\n","guide/hybrid/plugins/index":"<h1>Plugin Development Guide</h1> <p>A <em>plugin</em> is a package of injected code that allows the Cordova webview within which the app renders to communicate with the native platform on which it runs. Plugins provide access to device and platform functionality that is ordinarily unavailable to web-based apps. All the main Cordova API features are implemented as plugins, and many others are available that enable features such as bar code scanners, NFC communication, or to tailor calendar interfaces. There is a <a href=\"http://plugins.cordova.io\">registry</a> of available plugins.</p> <p>Plugins comprise a single JavaScript interface along with corresponding native code libraries for each supported platform. In essence this hides the various native code implementations behind a common JavaScript interface.</p> <p>This section steps through a simple <em>echo</em> plugin that passes a string from JavaScript to the native platform and back, one that you can use as a model to build far more complex features. This section discusses the basic plugin structure and the outward-facing JavaScript interface. For each corresponding native interface, see the list at the end of this section.</p> <p>In addition to these instructions, when preparing to write a plugin it is best to look over <a href=\"http://cordova.apache.org/#contribute\">existing plugins</a> for guidance.</p> <h2>Building a Plugin</h2> <p>Application developers use the CLI's <code class=\"prettyprint\">plugin add</code> command (discussed in The Command-Line Interface) to apply a plugin to a project. The argument to that command is the URL for a <em>git</em> repository containing the plugin code. This example implements Cordova's Device API:</p> <div class=\"highlight\"><pre>$ cordova plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-device.git\n</pre></div> <p>The plugin repository must feature a top-level <code class=\"prettyprint\">plugin.xml</code> manifest file. There are many ways to configure this file, details for which are available in the <a href=\"../../../plugin_ref/spec\">Plugin Specification</a>. This abbreviated version of the <code class=\"prettyprint\">Device</code> plugin provides a simple example to use as a model:</p> <div class=\"highlight\"><pre>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;plugin xmlns=\"http://apache.org/cordova/ns/plugins/1.0\"\n       id=\"cordova-plugin-device\" version=\"0.2.3\"&gt;\n   &lt;name&gt;Device&lt;/name&gt;\n   &lt;description&gt;Cordova Device Plugin&lt;/description&gt;\n   &lt;license&gt;Apache 2.0&lt;/license&gt;\n   &lt;keywords&gt;cordova,device&lt;/keywords&gt;\n   &lt;js-module src=\"www/device.js\" name=\"device\"&gt;\n       &lt;clobbers target=\"device\" /&gt;\n   &lt;/js-module&gt;\n   &lt;platform name=\"ios\"&gt;\n       &lt;config-file target=\"config.xml\" parent=\"/*\"&gt;\n           &lt;feature name=\"Device\"&gt;\n               &lt;param name=\"ios-package\" value=\"CDVDevice\"/&gt;\n           &lt;/feature&gt;\n       &lt;/config-file&gt;\n       &lt;header-file src=\"src/ios/CDVDevice.h\" /&gt;\n       &lt;source-file src=\"src/ios/CDVDevice.m\" /&gt;\n   &lt;/platform&gt;\n&lt;/plugin&gt;\n</pre></div> <p>The top-level <code class=\"prettyprint\">plugin</code> tag's <code class=\"prettyprint\">id</code> attribute uses the same reverse-domain format to identify the plugin package as the apps to they're added. The <code class=\"prettyprint\">js-module</code> tag specifies the path to the common JavaScript interface. The <code class=\"prettyprint\">platform</code> tag specifies a corresponding set of native code, for the <code class=\"prettyprint\">ios</code> platform in this case. The <code class=\"prettyprint\">config-file</code> tag encapsulates a <code class=\"prettyprint\">feature</code> tag that is injected into the platform-specific <code class=\"prettyprint\">config.xml</code> file to make the platform aware of the additional code library. The <code class=\"prettyprint\">header-file</code> and <code class=\"prettyprint\">source-file</code> tags specify the path to the library's component files.</p> <h2>Validating a Plugin</h2> <p>You can use the <code class=\"prettyprint\">plugman</code> utility to check whether the plugin installs correctly for each platform. Install <code class=\"prettyprint\">plugman</code> with the following <a href=\"http://nodejs.org/\">node</a> command:</p> <div class=\"highlight\"><pre>$ npm install -g plugman\n</pre></div> <p>You need an valid app source directory, such as the top-level <code class=\"prettyprint\">www</code> directory included in a default CLI-generated project as described in <a href=\"../../cli/index\">The Command-Line Interface</a>. Make sure the app's <code class=\"prettyprint\">index.html</code> home page reference the name of the plugin's JavaScript interface, as if it were in the same source directory:</p> <div class=\"highlight\"><pre>&lt;script src=\"myplugin.js\"&gt;&lt;/script&gt;\n</pre></div> <p>Then run a command such as the following to test whether iOS dependencies load properly:</p> <div class=\"highlight\"><pre>$ plugman install --platform ios --project /path/to/my/project/www --plugin /path/to/my/plugin\n</pre></div> <p>For details on <code class=\"prettyprint\">plugman</code> options, see <a href=\"../../../plugin_ref/plugman\">Using Plugman to Manage Plugins</a>. For information on how to actually <em>debug</em> plugins, see each platform's native interface listed at the bottom of this page.</p> <h2>The JavaScript Interface</h2> <p>The JavaScript provides the front-facing interface, making it perhaps the most important part of the plugin. You can structure your plugin's JavaScript however you like, but you need to call <code class=\"prettyprint\">cordova.exec</code> to communicate with the native platform, using the following syntax:</p> <div class=\"highlight\"><pre>cordova.exec(function(winParam) {},\n            function(error) {},\n            \"service\",\n            \"action\",\n            [\"firstArgument\", \"secondArgument\", 42, false]);\n</pre></div> <p>Here is how each parameter works:</p> <ul> <li><p><code class=\"prettyprint\">function(winParam) {}</code>: A success callback function. Assuming your <code class=\"prettyprint\">exec</code> call completes successfully, this function executes along with any parameters you pass to it.</p></li> <li><p><code class=\"prettyprint\">function(error) {}</code>: An error callback function. If the operation does not complete successfully, this function executes with an optional error parameter.</p></li> <li><p><code class=\"prettyprint\">\"service\"</code>: The service name to call on the native side. This corresponds to a native class, for which more information is available in the native guides listed below.</p></li> <li><p><code class=\"prettyprint\">\"action\"</code>: The action name to call on the native side. This generally corresponds to the native class method. See the native guides listed below.</p></li> <li><p><code class=\"prettyprint\">[/* arguments */]</code>: An array of arguments to pass into the native environment.</p></li> </ul> <h2>Sample JavaScript</h2> <p>This example shows one way to implement the plugin's JavaScript interface:</p> <div class=\"highlight\"><pre>window.echo = function(str, callback) {\n   cordova.exec(callback, function(err) {\n       callback('Nothing to echo.');\n   }, \"Echo\", \"echo\", [str]);\n};\n</pre></div> <p>In this example, the plugin attaches itself to the <code class=\"prettyprint\">window</code> object as the <code class=\"prettyprint\">echo</code> function, which plugin users would call as follows:</p> <div class=\"highlight\"><pre>window.echo(\"echome\", function(echoValue) {\n   alert(echoValue == \"echome\"); // should alert true.\n});\n</pre></div> <p>Look at the last three arguments to the <code class=\"prettyprint\">cordova.exec</code> function. The first calls the <code class=\"prettyprint\">Echo</code> <em>service</em>, a class name. The second requests the <code class=\"prettyprint\">echo</code> <em>action</em>, a method within that class. The third is an array of arguments containing the echo string, which is the <code class=\"prettyprint\">window.echo</code> function's the first parameter.</p> <p>The success callback passed into <code class=\"prettyprint\">exec</code> is simply a reference to the callback function <code class=\"prettyprint\">window.echo</code> takes. If the native platform fires the error callback, it simply calls the success callback and passes it a default string.</p> <h2>Native Interfaces</h2> <p>Once you define JavaScript for your plugin, you need to complement it with at least one native implementation. Details for each platform are listed below, and each builds on the simple Echo Plugin example above:</p> <ul> <li><a href=\"../../platforms/amazonfireos/plugin\">Amazon Fire OS Plugins</a></li> <li><a href=\"../../platforms/android/plugin\">Android Plugins</a></li> <li><a href=\"../../platforms/ios/plugin\">iOS Plugins</a></li> <li><a href=\"../../platforms/blackberry10/plugin\">BlackBerry 10 Plugins</a></li> <li><a href=\"../../platforms/wp8/plugin\">Windows Phone 8 Plugins</a></li> <li><a href=\"../../platforms/win8/plugin\">Windows Plugins</a></li> </ul> <p>The Tizen platform does not support plugins.</p> <h2>Publishing Plugins</h2> <p>Once you develop your plugin, you may want to publish and share it with the community. You can publish your plugin to any <code class=\"prettyprint\">npmjs</code>-based registry, but the recommended one is the <a href=\"https://www.npmjs.com\">NPM registry</a>. Please read our <a href=\"http://plugins.cordova.io/npm/developers.html\">publishing plugins to npm guide</a>.</p> <p><strong>NOTE</strong>: <a href=\"https://plugins.cordova.io\">Cordova plugin registry</a> is moving to a read-only state. <code class=\"prettyprint\">publish</code>/ <code class=\"prettyprint\">unpublish</code> commands have been removed from <code class=\"prettyprint\">plugman</code>, so you'll need to use corresponding <code class=\"prettyprint\">npm</code> commands.</p> <p>Other developers can install your plugin automatically using either <code class=\"prettyprint\">plugman</code> or the Cordova CLI. (For details on each development path, see <a href=\"../../../plugin_ref/plugman\">Using Plugman to Manage Plugins</a> and <a href=\"../../cli/index\">The Command-Line Interface</a>.)</p> <p>To publish a plugin to NPM registry you need to follow steps below:</p> <ul> <li>\n<p>create <code class=\"prettyprint\">package.json</code> file for your plugin:</p> <div class=\"highlight\"><pre>$ plugman createpackagejson /path/to/your/plugin\n</pre></div>\n</li> <li>\n<p>publish it:</p> <div class=\"highlight\"><pre>$ npm adduser # that is if you don't have an account yet\n$ npm publish /path/to/your/plugin\n</pre></div>\n</li> </ul> <p>That is it!</p> <p>Running <code class=\"prettyprint\">plugman --help</code> lists other available registry-based commands.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/hybrid/plugins/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/hybrid/plugins/index.html</a>\n  </p>\n</div>\n","platform_plugin_versioning_ref/index":"<h1>Platforms and Plugins Version Management</h1> <p>From version 4.3.0 onwards, Cordova provides the ability to save and restore platforms and plugins. </p> <p>This feature allows developers to save and restore their app to a known state without having to check in all of the platform and plugin source code.</p> <p>The 'save' command stores details about the app's platform and plugin versions in config.xml. The 'restore' step happens automatically when a <strong>'cordova prepare'</strong> is issued, making use of information previously saved in the config.xml file.</p> <p>One scenario where save/restore capabilities come in handy is in large teams that work on an app, with each team member focusing on a platform or plugin. This feature makes it easier to share the project and reduce the amount of redundant code that is checked in the repository.</p> <h2>Platform Versioning</h2> <h3>Saving platforms</h3> <p>To save a platform, you issue the following command :</p> <div class=\"highlight\"><pre>$ cordova platform add &lt;platform[@&lt;version&gt;] | directory | git_url&gt; --save\n</pre></div> <p>After running the above command, the resulting config.xml looks like :</p> <div class=\"highlight\"><pre>&lt;?xml version='1.0' encoding='utf-8'?&gt;\n...\n&lt;engine name=\"android\" spec=\"~4.0.0\" /&gt;\n...\n&lt;/xml&gt;\n</pre></div> <p>Some examples :</p> <ul> <li>\n<strong>'cordova platform add android --save'</strong> =&gt; retrieves the pinned version of the android platform, adds it to the project and then updates config.xml.</li> <li>\n<strong>'cordova platform add android@3.7.0 --save'</strong> =&gt; retrieves the android platform, version 3.7.0 from npm, adds it to the project and then updates config.xml.</li> <li>\n<strong>'cordova platform add android@https://github.com/apache/cordova-android.git​ --save'</strong> =&gt; clones the specified cordova-android git repository, adds the android platform to the project, then updates config.xml and point its version to the specified git-url.</li> <li>\n<strong>'cordova platform add C:/path/to/android/platform --save'</strong> =&gt; retrieves the android platform from the specified directory, adds it to the project, then updates config.xml and point to the directory.</li> </ul> <h3>Mass saving platforms on an existing project</h3> <p>The '--save' flag described above is only useful when you remember to use it during the platform addition. If you have a pre-existing project and you want to save all the currently added platforms in your project, you can use :</p> <div class=\"highlight\"><pre>$ cordova platform save\n</pre></div> <h3>Updating / Removing platforms</h3> <p>It is also possible to update/delete from config.xml during the commands 'cordova platform update' and 'cordova platform remove' :</p> <div class=\"highlight\"><pre>$ cordova platform update &lt;platform[@&lt;version&gt;] | directory | git_url&gt; --save\n$ cordova platform remove &lt;platform&gt; --save\n</pre></div> <p>Some examples :</p> <ul> <li>\n<strong>'cordova platform update android --save'</strong> =&gt; In addition to updating the android platform to the pinned version, update config.xml entry</li> <li>\n<strong>'cordova platform update android@3.8.0 --save'</strong> =&gt; In addition to updating the android platform to version 3.8.0, update config.xml entry</li> <li>\n<strong>'cordova platform update /path/to/android/platform --save'</strong> =&gt; In addition to updating the android platform to version in the folder, update config.xml entry</li> <li>\n<strong>'cordova platform remove android --save'</strong> =&gt; Removes the android platform from the project and deletes its entry from config.xml.</li> </ul> <h3>Restoring platforms</h3> <p>Platforms are automatically restored from config.xml when the <strong>'cordova prepare'</strong> command is run.</p> <p>If you add a platform without specifying a version/folder/git_url, the version to install is taken from config.xml, <strong>if found</strong>.</p> <p>Example:</p> <p>Suppose your config.xml file contains the following entry:</p> <div class=\"highlight\"><pre>&lt;?xml version='1.0' encoding='utf-8'?&gt;\n...\n&lt;engine name=\"android\" spec=\"3.7.0\" /&gt;\n...\n&lt;/xml&gt;\n</pre></div> <p>If you run the command <strong>'cordova platform add android'</strong> (no version/folder/git_url specified), the platform 'android@3.7.0' (as retrieved from config.xml) will be installed.</p>  <h2>Plugin Versioning</h2> <p><em>(The plugin commands are a mirror of the platform commands)</em></p> <h3>Saving plugins</h3> <p>To save a plugin, you issue the following command :</p> <div class=\"highlight\"><pre>$ cordova plugin add &lt;plugin[@&lt;version&gt;] | directory | git_url&gt; --save\n</pre></div> <p>After running the above command, the resulting config.xml looks like :</p> <div class=\"highlight\"><pre>&lt;?xml version='1.0' encoding='utf-8'?&gt;\n...\n&lt;plugin name=\"cordova-plugin-console\" spec=\"~1.0.0\" /&gt;\n...\n&lt;/xml&gt;\n</pre></div> <p>Some examples :</p> <ul> <li>\n<strong>'cordova plugin add cordova-plugin-console --save'</strong> =&gt; retrieves the pinned version of the console plugin, adds it to the project and then updates config.xml.</li> <li>\n<strong>'cordova plugin add cordova-plugin-console@0.2.13 --save'</strong> =&gt; retrieves the android plugin, version 0.2.13 from npm, adds it to the project and then updates config.xml.</li> <li>\n<strong>'cordova plugin add https://github.com/apache/cordova-plugin-console.git --save'</strong> =&gt; clones the specified console plugin git repository, adds the console plugin to the project, then updates config.xml and point its version to the specified git-url.</li> <li>\n<strong>'cordova plugin add C:/path/to/console/plugin --save'</strong> =&gt; retrieves the console plugin from the specified directory, adds it to the project, then updates config.xml and point to the directory.</li> </ul> <h3>Mass saving plugins on an existing project</h3> <p>The '--save' flag described above is only useful when you remember to use it during the plugin addition. If you have a pre-existing project and you want to save all currently added plugins in the project, you can use :</p> <div class=\"highlight\"><pre>$ cordova plugin save\n</pre></div> <h3>Updating / Removing plugins</h3> <p>It is also possible to update/delete from config.xml during the commands 'cordova plugin update' and 'cordova plugin remove' :</p> <div class=\"highlight\"><pre>$ cordova plugin update &lt;plugin[@&lt;version&gt;] | directory | git_url&gt; --save\n$ cordova plugin remove &lt;plugin&gt; --save\n</pre></div> <p>Some examples :</p> <ul> <li>\n<strong>'cordova plugin update cordova-plugin-console --save'</strong> =&gt; In addition to updating the console plugin to the pinned version, update config.xml entry</li> <li>\n<strong>'cordova plugin update cordova-plugin-console@0.2.13 --save'</strong> =&gt; In addition to updating the android plugin to version 3.8.0, update config.xml entry</li> <li>\n<strong>'cordova plugin update /path/to/console/plugin --save'</strong> =&gt; In addition to updating the console plugin to version in the folder, update config.xml entry</li> <li>\n<strong>'cordova plugin remove cordova-plugin-console --save'</strong> =&gt; Removes the console plugin from the project and deletes its entry from config.xml.</li> </ul> <h3>Restoring plugins</h3> <p>Plugins are automatically restored from config.xml when the <strong>'cordova prepare'</strong> command is run.</p> <p>If you add a plugin without specifying a version/folder/git_url, the version to be installed is taken from config.xml, <strong>if found</strong>.</p> <p>Example:</p> <p>Suppose your config.xml file contains the following entry:</p> <div class=\"highlight\"><pre>&lt;?xml version='1.0' encoding='utf-8'?&gt;\n...\n&lt;plugin name=\"cordova-plugin-console\" spec=\"0.2.11\" /&gt;\n...\n&lt;/ xml&gt;\n</pre></div> <p>If you run the command <strong>'cordova plugin add cordova-plugin-console'</strong> (no version/folder/git_url specified), the plugin 'cordova-plugin-console@0.2.11' (as retrieved from config.xml) will be installed.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/platform_plugin_versioning_ref/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/platform_plugin_versioning_ref/index.html</a>\n  </p>\n</div>\n","cordova/storage/storage":"<h1>Storage</h1> <blockquote> <p>An overview of storage options for Cordova.</p> </blockquote> <p>Several storage APIs are available for Cordova applications. See <a href=\"http://www.html5rocks.com/en/features/storage\">html5rocks</a>. for a more complete overview and examples.</p> <h2>LocalStorage</h2> <p>Also known as <em>web storage</em>, <em>simple storage</em>, or by its alternate <em>session storage</em> interface, this API provides synchronous key/value pair storage, and is available in underlying WebView implementations. Refer to <a href=\"http://www.w3.org/TR/webstorage/\">the W3C spec</a> for details.</p> <h2>WebSQL</h2> <p>This API is available in the underlying WebView. The <a href=\"http://dev.w3.org/html5/webdatabase/\">Web SQL Database Specification</a> offers more full-featured database tables accessed via SQL queries.</p> <p>The following platforms support WebSQL:</p> <ul> <li>Android</li> <li>BlackBerry 10</li> <li>iOS</li> <li>Tizen</li> </ul> <h2>IndexedDB</h2> <p>This API is available in the underlying WebView. <a href=\"http://www.w3.org/TR/IndexedDB/\">Indexed DB</a> offers more features than LocalStorage but fewer than WebSQL.</p> <p>The following platforms support IndexedDB:</p> <ul> <li>BlackBerry 10</li> <li>Firefox OS</li> <li>Windows Phone 8</li> <li>Windows 8</li> </ul> <h2>Plugin-Based Options</h2> <p>In addition to the storage APIs listed above, the <a href=\"https://github.com/apache/cordova-plugin-file/blob/master/doc/index.md\">File API</a> allows you to cache data on the local file system. Other <a href=\"http://plugins.cordova.io/\">Cordova plugins</a> provide similar storage options.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/storage/storage.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/storage/storage.html</a>\n  </p>\n</div>\n","guide/cli/index":"<h1>The Command-Line Interface</h1> <p>This guide shows you how to create applications and deploy them to various native mobile platforms using the <code class=\"prettyprint\">cordova</code> command-line interface (CLI). This tool allows you to create new projects, build them on different platforms, and run on real devices or within emulators. The CLI is the main tool to use for the cross-platform workflow described in the <a href=\"../overview/index\">Overview</a>. Otherwise you can also use the CLI to initialize project code, then switch to various platforms' SDKs and shell tools for continued development.</p> <h2>Prerequisites</h2> <p>Before running any command-line tools, you need to install SDKs for each platform you wish to target. (See the <a href=\"../platforms/index\">Platform Guides</a> for more details.)</p> <p>To add support or rebuild a project for any platform, you need to run the command-line interface from the same machine that supports the platform's SDK. The CLI supports the following combinations:</p> <ul> <li>iOS (Mac)</li> <li>Amazon Fire OS (Mac, Linux, Windows)</li> <li>Android (Mac, Linux, Windows)</li> <li>BlackBerry 10 (Mac, Linux, Windows)</li> <li>Windows Phone 8 (Windows)</li> <li>Windows (Windows)</li> <li>Firefox OS (Mac, Linux, Windows)</li> </ul> <p>On the Mac, the command-line is available via the <em>Terminal</em> application. On the PC, it's available as <em>Command Prompt</em> under <em>Accessories</em>.</p> <p><strong>NOTE</strong>: For Windows-only platforms, you can still do your development on Mac hardware by running Windows in a virtual machine environment or in dual-boot mode. For available options, see the <a href=\"../platforms/wp8/index\">Windows Phone 8 Platform Guide</a> or the <a href=\"../platforms/win8/index\">Windows Platform Guide</a>.</p> <p>The more likely it is that you run the CLI from different machines, the more it makes sense to maintain a remote source code repository, whose assets you pull down to local working directories.</p> <h2>Installing the Cordova CLI</h2> <p>The Cordova command-line tool is distributed as an npm package in a ready-to-use format. It is not necessary to compile it from source.</p> <p>To install the <code class=\"prettyprint\">cordova</code> command-line tool, follow these steps:</p> <ol> <li><p>Download and install <a href=\"http://nodejs.org/\">Node.js</a>. Following installation, you should be able to invoke <code class=\"prettyprint\">node</code> and <code class=\"prettyprint\">npm</code> on your command line. If desired, you may optionally use a tool such as <code class=\"prettyprint\">nvm</code> or <code class=\"prettyprint\">nave</code> to manage your Node.js installation.</p></li> <li><p>Download and install a <a href=\"http://git-scm.com/\">git client</a>, if you don't already have one. Following installation, you should be able to invoke <code class=\"prettyprint\">git</code> on your command line. Even though you won't be using <code class=\"prettyprint\">git</code> manually, the CLI does use it behind-the-scenes to download some assets when creating a new project.</p></li> <li><p>Install the <code class=\"prettyprint\">cordova</code> module using <code class=\"prettyprint\">npm</code> utility of Node.js. The <code class=\"prettyprint\">cordova</code> module will automatically be downloaded by the <code class=\"prettyprint\">npm</code> utility.</p></li> </ol> <ul> <li>\n<p>on OS X and Linux:</p> <div class=\"highlight\"><pre>$ sudo npm install -g cordova\n</pre></div> <p>On OS X and Linux, prefixing the <code class=\"prettyprint\">npm</code> command with <code class=\"prettyprint\">sudo</code> may be necessary to install this development utility in otherwise restricted directories such as <code class=\"prettyprint\">/usr/local/share</code>. If you are using the optional nvm/nave tool or have write access to the install directory, you may be able to omit the <code class=\"prettyprint\">sudo</code> prefix. There are <a href=\"http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears\">more tips</a> available on using <code class=\"prettyprint\">npm</code> without <code class=\"prettyprint\">sudo</code>, if you desire to do that.</p>\n</li> <li>\n<p>on Windows:</p> <div class=\"highlight\"><pre>C:\\&gt;npm install -g cordova\n</pre></div>\n</li> </ul> <p>The <code class=\"prettyprint\">-g</code> flag above tells <code class=\"prettyprint\">npm</code> to install <code class=\"prettyprint\">cordova</code> globally. Otherwise it will be installed in the <code class=\"prettyprint\">node_modules</code> subdirectory of the current working directory.</p> <p>You may need to add the <code class=\"prettyprint\">npm</code> directory to your <code class=\"prettyprint\">PATH</code> in order to invoke globally installed <code class=\"prettyprint\">npm</code> modules. On Windows, <code class=\"prettyprint\">npm</code> can usually be found at <code class=\"prettyprint\">C:\\Users\\username\\AppData\\Roaming\\npm</code>. On OS X and Linux it can usually be found at <code class=\"prettyprint\">/usr/local/share/npm</code>.</p> <p>The installation log may produce errors for any uninstalled platform SDKs.</p> <p>Following installation, you should be able to run <code class=\"prettyprint\">cordova</code> on the command line with no arguments and it should print help text.</p> <h2>Create the App</h2> <p>Go to the directory where you maintain your source code, and run a command such as the following:</p> <div class=\"highlight\"><pre>$ cordova create hello com.example.hello HelloWorld\n</pre></div> <p>It may take some time for the command to complete, so be patient. Running the command with the <code class=\"prettyprint\">-d</code> option displays information about its progress.</p> <p>The first argument <em>hello</em> specifies a directory to be generated for your project. This directory should not already exist, Cordova will create it for you. Its <code class=\"prettyprint\">www</code> subdirectory houses your application's home page, along with various resources under <code class=\"prettyprint\">css</code>, <code class=\"prettyprint\">js</code>, and <code class=\"prettyprint\">img</code>, which follow common web development file-naming conventions. These assets will be stored on the device's local filesystem, not served remotely. The <code class=\"prettyprint\">config.xml</code> file contains important metadata needed to generate and distribute the application.</p> <p>The second argument <code class=\"prettyprint\">com.example.hello</code> provides your project with a reverse domain-style identifier. This argument is optional, but only if you also omit the third argument, since the arguments are positional. You can edit this value later in the <code class=\"prettyprint\">config.xml</code> file, but do be aware that there may be code generated outside of <code class=\"prettyprint\">config.xml</code> using this value, such as Java package names. The default value is <code class=\"prettyprint\">io.cordova.hellocordova</code>, but it is recommended that you select an appropriate value.</p> <p>The third argument <code class=\"prettyprint\">HelloWorld</code> provides the application's display title. This argument is optional. You can edit this value later in the <code class=\"prettyprint\">config.xml</code> file, but do be aware that there may be code generated outside of <code class=\"prettyprint\">config.xml</code> using this value, such as Java class names. The default value is <code class=\"prettyprint\">HelloCordova</code>, but it is recommended that you select an appropriate value.</p> <h2>Add Platforms</h2> <p>All subsequent commands need to be run within the project's directory, or any subdirectories within its scope:</p> <div class=\"highlight\"><pre>$ cd hello\n</pre></div> <p>Before you can build the project, you need to specify a set of target platforms. Your ability to run these commands depends on whether your machine supports each SDK, and whether you have already installed each SDK. Run any of these from a Mac:</p> <div class=\"highlight\"><pre>$ cordova platform add ios\n$ cordova platform add amazon-fireos\n$ cordova platform add android\n$ cordova platform add blackberry10\n$ cordova platform add firefoxos\n</pre></div> <p>Run any of these from a Windows machine, where <em>wp</em> refers to different versions of the Windows Phone operating system:</p> <div class=\"highlight\"><pre>$ cordova platform add wp8\n$ cordova platform add windows\n$ cordova platform add amazon-fireos\n$ cordova platform add android\n$ cordova platform add blackberry10\n$ cordova platform add firefoxos\n</pre></div> <p>Run this to check your current set of platforms:</p> <div class=\"highlight\"><pre>$ cordova platforms ls\n</pre></div> <p>(Note the <code class=\"prettyprint\">platform</code> and <code class=\"prettyprint\">platforms</code> commands are synonymous.)</p> <p>Run either of the following synonymous commands to remove a platform:</p> <div class=\"highlight\"><pre>$ cordova platform remove blackberry10\n$ cordova platform rm amazon-fireos\n$ cordova platform rm android\n</pre></div> <p>Running commands to add or remove platforms affects the contents of the project's <em>platforms</em> directory, where each specified platform appears as a subdirectory. The <em>www</em> source directory is reproduced within each platform's subdirectory, appearing for example in <code class=\"prettyprint\">platforms/ios/www</code> or <code class=\"prettyprint\">platforms/android/assets/www</code>. Because the CLI constantly copies over files from the source <em>www</em> folder, you should only edit these files and not the ones located under the <em>platforms</em> subdirectories. If you use version control software, you should add this source <em>www</em> folder, along with the <em>merges</em> folder, to your version control system. (More information about the <em>merges</em> folder can be found in the Customize Each Platform section below.)</p> <p><strong>WARNING</strong>: When using the CLI to build your application, you should <em>not</em> edit any files in the <code class=\"prettyprint\">/platforms/</code> directory unless you know what you are doing, or if documentation specifies otherwise. The files in this directory are routinely overwritten when preparing applications for building, or when plugins are reinstalled.</p> <p>If you wish at this point, you can use an SDK such as Eclipse or Xcode to open the project you created. You will need to open the derivative set of assets from the <code class=\"prettyprint\">/platforms/</code> directory to develop with an SDK. This is because the SDK specific metadata files are stored within the appropriate <code class=\"prettyprint\">/platform/</code> subdirectory. (See the <a href=\"../platforms/index\">Platform Guides</a> for information on how to develop applications within each IDE.) Use this approach if you simply want to initialize a project using the CLI and then switch to an SDK for native work.</p> <p>Read on if you wish to use the cross-platform workflow approach (the CLI) for the entire development cycle.</p> <h2>Build the App</h2> <p>By default, the <code class=\"prettyprint\">cordova create</code> script generates a skeletal web-based application whose home page is the project's <code class=\"prettyprint\">www/index.html</code> file. Edit this application however you want, but any initialization should be specified as part of the <code class=\"prettyprint\">[deviceready](../../cordova/events/events.deviceready.html)</code> event handler, referenced by default from <code class=\"prettyprint\">www/js/index.js</code>.</p> <p>Run the following command to iteratively build the project:</p> <div class=\"highlight\"><pre>$ cordova build\n</pre></div> <p>This generates platform-specific code within the project's <code class=\"prettyprint\">platforms</code> subdirectory. You can optionally limit the scope of each build to specific platforms:</p> <div class=\"highlight\"><pre>$ cordova build ios\n</pre></div> <p>The <code class=\"prettyprint\">cordova build</code> command is a shorthand for the following, which in this example is also targeted to a single platform:</p> <div class=\"highlight\"><pre>$ cordova prepare ios\n$ cordova compile ios\n</pre></div> <p>In this case, once you run <code class=\"prettyprint\">prepare</code>, you can use Apple's Xcode SDK as an alternative to modify and compile the platform-specific code that Cordova generates within <code class=\"prettyprint\">platforms/ios</code>. You can use the same approach with other platforms' SDKs.</p> <h2>Test the App on an Emulator or Device</h2> <p>SDKs for mobile platforms often come bundled with emulators that execute a device image, so that you can launch the app from the home screen and see how it interacts with many platform features. Run a command such as the following to rebuild the app and view it within a specific platform's emulator:</p> <div class=\"highlight\"><pre>$ cordova emulate android\n</pre></div> <p>Some mobile platforms emulate a particular device by default, such as the iPhone for iOS projects. For other platforms, you may need to first associate a device with an emulator.</p> <p><strong>NOTE</strong>: Emulator support is currently not available for Amazon Fire OS.</p> <p>(See the <a href=\"../platforms/index\">Platform Guides</a> for details.) For example, you may first run the <code class=\"prettyprint\">android</code> command to launch the Android SDK, then run a particular device image, which launches it according to its default behavior:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/cli/android_emulate_init.png\" alt=\"\"></p> <p>Following up with the <code class=\"prettyprint\">cordova emulate</code> command refreshes the emulator image to display the latest application, which is now available for launch from the home screen:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/cli/android_emulate_install.png\" alt=\"\"></p> <p>Alternately, you can plug the handset into your computer and test the app directly:</p> <div class=\"highlight\"><pre>$ cordova run android\n</pre></div> <p>Before running this command, you need to set up the device for testing, following procedures that vary for each platform. In Android and Amazon Fire OS devices, you would have to enable a <strong>USB debugging</strong> option on the device, and perhaps add a USB driver depending on your development environmnent. See <a href=\"../platforms/index\">Platform Guides</a> for details on each platform's requirements.</p> <h2>Add Plugin Features</h2> <p>When you build and view a new project, the default application that appears doesn't do very much. You can modify the app in many ways to take advantage of standard web technologies, but for the app to communicate closely with various device-level features, you need to add plugins that provide access to core Cordova APIs.</p> <p>A <em>plugin</em> is a bit of add-on code that provides an interface to native components. You can design your own plugin interface, for example when designing a hybrid app that mixes a Cordova WebView with native components. (See <a href=\"../hybrid/webviews/index\">Embedding WebViews</a> and <a href=\"guide_hybrid_plugins_index.md#Plugin%20Development%20Guide\">Plugin Development Guide</a> for details.) More commonly, you would add a plugin to enable one of Cordova's basic device-level features detailed in the API Reference. </p> <p>As of version 3.0, when you create a Cordova project it does not have any plugins present. This is the new default behavior. Any plugins you desire, even the core plugins, must be explicitly added.</p> <p>A list of these plugins, including additional third-party plugins provided by the community, can be found in the registry at <a href=\"http://plugins.cordova.io/\">plugins.cordova.io</a>. You can use the CLI to search for plugins from this registry. For example, searching for <code class=\"prettyprint\">bar</code> and <code class=\"prettyprint\">code</code> produces a single result that matches both terms as case-insensitive substrings:</p> <div class=\"highlight\"><pre>$ cordova plugin search bar code\n\ncom.phonegap.plugins.barcodescanner - Scans Barcodes\n</pre></div> <p>Searching for only the <code class=\"prettyprint\">bar</code> term yields and additional result:</p> <div class=\"highlight\"><pre>cordova-plugin-statusbar - Cordova StatusBar Plugin\n</pre></div> <p>The <code class=\"prettyprint\">cordova plugin add</code> command requires you to specify the repository for the plugin code. Here are examples of how you might use the CLI to add features to the app:</p> <ul> <li>\n<p>Basic device information (Device API):</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-device\n</pre></div>\n</li> <li>\n<p>Network Connection and Battery <a href=\"../../cordova/events/events\">Events</a>:</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-network-information\n$ cordova plugin add cordova-plugin-battery-status\n</pre></div>\n</li> <li>\n<p>Accelerometer, Compass, and Geolocation:</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-device-motion\n$ cordova plugin add cordova-plugin-device-orientation\n$ cordova plugin add cordova-plugin-geolocation\n</pre></div>\n</li> <li>\n<p>Camera, Media playback and Capture:</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-camera\n$ cordova plugin add cordova-plugin-media-capture\n$ cordova plugin add cordova-plugin-media\n</pre></div>\n</li> <li>\n<p>Access files on device or network (File API):</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-file\n$ cordova plugin add cordova-plugin-file-transfer\n</pre></div>\n</li> <li>\n<p>Notification via dialog box or vibration:</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-dialogs\n$ cordova plugin add cordova-plugin-vibration\n</pre></div>\n</li> <li>\n<p>Contacts:</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-contacts\n</pre></div>\n</li> <li>\n<p>Globalization:</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-globalization\n</pre></div>\n</li> <li>\n<p>Splashscreen:</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-splashscreen\n</pre></div>\n</li> <li>\n<p>Open new browser windows (InAppBrowser):</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-inappbrowser\n</pre></div>\n</li> <li>\n<p>Debug console:</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-console\n</pre></div>\n</li> </ul> <p><strong>NOTE</strong>: The CLI adds plugin code as appropriate for each platform. If you want to develop with lower-level shell tools or platform SDKs as discussed in the <a href=\"../overview/index\">Overview</a>, you need to run the Plugman utility to add plugins separately for each platform. (For more information, see <a href=\"../../plugin_ref/plugman\">Using Plugman to Manage Plugins</a>.)</p> <p>Use <code class=\"prettyprint\">plugin ls</code> (or <code class=\"prettyprint\">plugin list</code>, or <code class=\"prettyprint\">plugin</code> by itself) to view currently installed plugins. Each displays by its identifier:</p> <div class=\"highlight\"><pre>$ cordova plugin ls    # or 'plugin list'\n[ 'cordova-plugin-console' ]\n</pre></div> <p>To remove a plugin, refer to it by the same identifier that appears in the listing. For example, here is how you would remove support for a debug console from a release version:</p> <div class=\"highlight\"><pre>$ cordova plugin rm cordova-plugin-console\n$ cordova plugin remove cordova-plugin-console    # same\n</pre></div> <p>You can batch-remove or add plugins by specifying more than one argument for each command:</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-console cordova-plugin-device\n</pre></div> <h2>Advanced Plugin Options</h2> <p>When adding a plugin, several options allow you to specify from where to fetch the plugin. The examples above use a well-known <code class=\"prettyprint\">registry.cordova.io</code> registry, and the plugin is specified by the <code class=\"prettyprint\">id</code>:</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-console\n</pre></div> <p>The <code class=\"prettyprint\">id</code> may also include the plugin's version number, appended after an <code class=\"prettyprint\">@</code> character. The <code class=\"prettyprint\">latest</code> version is an alias for the most recent version. For example:</p> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-console@latest\n$ cordova plugin add cordova-plugin-console@0.2.1\n</pre></div> <p>If the plugin is not registered at <code class=\"prettyprint\">registry.cordova.io</code> but is located in another git repository, you can specify an alternate URL:</p> <div class=\"highlight\"><pre>$ cordova plugin add https://github.com/apache/cordova-plugin-console.git\n</pre></div> <p>The git example above fetches the plugin from the end of the master branch, but an alternate git-ref such as a tag or branch can be appended after a <code class=\"prettyprint\">#</code> character:</p> <p>Install from a tag:</p> <div class=\"highlight\"><pre>$ cordova plugin add https://github.com/apache/cordova-plugin-console.git#r0.2.0\n</pre></div> <p>or a branch:</p> <div class=\"highlight\"><pre>$ cordova plugin add https://github.com/apache/cordova-plugin-console.git#CB-8438cordova-plugin-console\n</pre></div> <p>or git-ref could also be a particular commit:</p> <div class=\"highlight\"><pre>$ cordova plugin add https://github.com/apache/cordova-plugin-console.git#f055daec45575bf08538f885e09c85a0eba363ff\n</pre></div> <p>If the plugin (and its <code class=\"prettyprint\">plugin.xml</code> file) is in a subdirectory within the git repo, you can specify it with a <code class=\"prettyprint\">:</code> character. Note that the <code class=\"prettyprint\">#</code> character is still needed:</p> <div class=\"highlight\"><pre>$ cordova plugin add https://github.com/someone/aplugin.git#:/my/sub/dir\n</pre></div> <p>You can also combine both the git-ref and the subdirectory:</p> <div class=\"highlight\"><pre>$ cordova plugin add https://github.com/someone/aplugin.git#r0.0.1:/my/sub/dir\n</pre></div> <p>Alternately, specify a local path to the plugin directory that contains the <code class=\"prettyprint\">plugin.xml</code> file:</p> <div class=\"highlight\"><pre>$ cordova plugin add ../my_plugin_dir\n</pre></div> <h2>Using <em>merges</em> to Customize Each Platform</h2> <p>While Cordova allows you to easily deploy an app for many different platforms, sometimes you need to add customizations. In that case, you don't want to modify the source files in various <code class=\"prettyprint\">www</code> directories within the top-level <code class=\"prettyprint\">platforms</code> directory, because they're regularly replaced with the top-level <code class=\"prettyprint\">www</code> directory's cross-platform source.</p> <p>Instead, the top-level <code class=\"prettyprint\">merges</code> directory offers a place to specify assets to deploy on specific platforms. Each platform-specific subdirectory within <code class=\"prettyprint\">merges</code> mirrors the directory structure of the <code class=\"prettyprint\">www</code> source tree, allowing you to override or add files as needed. For example, here is how you might uses <code class=\"prettyprint\">merges</code> to boost the default font size for Android and Amazon Fire OS devices:</p> <ul> <li>\n<p>Edit the <code class=\"prettyprint\">www/index.html</code> file, adding a link to an additional CSS file, <code class=\"prettyprint\">overrides.css</code> in this case:</p> <div class=\"highlight\"><pre>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/overrides.css\" /&gt;\n</pre></div>\n</li> <li><p>Optionally create an empty <code class=\"prettyprint\">www/css/overrides.css</code> file, which would apply for all non-Android builds, preventing a missing-file error.</p></li> <li>\n<p>Create a <code class=\"prettyprint\">css</code> subdirectory within <code class=\"prettyprint\">merges/android</code>, then add a corresponding <code class=\"prettyprint\">overrides.css</code> file. Specify CSS that overrides the 12-point default font size specified within <code class=\"prettyprint\">www/css/index.css</code>, for example:</p> <div class=\"highlight\"><pre>body { font-size:14px; }\n</pre></div>\n</li> </ul> <p>When you rebuild the project, the Android version features the custom font size, while others remain unchanged.</p> <p>You can also use <code class=\"prettyprint\">merges</code> to add files not present in the original <code class=\"prettyprint\">www</code> directory. For example, an app can incorporate a <em>back button</em> graphic into the iOS interface, stored in <code class=\"prettyprint\">merges/ios/img/back_button.png</code>, while the Android version can instead capture <code class=\"prettyprint\">[backbutton](../../cordova/events/events.backbutton.html)</code> events from the corresponding hardware button.</p> <h2>Help Commands</h2> <p>Cordova features a couple of global commands, which may help you if you get stuck or experience a problem. The <code class=\"prettyprint\">help</code> command displays all available Cordova commands and their syntax:</p> <div class=\"highlight\"><pre>$ cordova help\n$ cordova        # same\n</pre></div> <p>Additionally, you can get more detailed help on a specific command. For example:</p> <div class=\"highlight\"><pre>$ cordova run --help\n</pre></div> <p>The <code class=\"prettyprint\">info</code> command produces a listing of potentially useful details, such as currently installed platforms and plugins, SDK versions for each platform, and versions of the CLI and <code class=\"prettyprint\">node.js</code>:</p> <div class=\"highlight\"><pre>$ cordova info\n</pre></div> <p>It both presents the information to screen and captures the output in a local <code class=\"prettyprint\">info.txt</code> file.</p> <p><strong>NOTE</strong>: Currently, only details on iOS and Android platforms are available.</p> <h2>Updating Cordova and Your Project</h2> <p>After installing the <code class=\"prettyprint\">cordova</code> utility, you can always update it to the latest version by running the following command:</p> <div class=\"highlight\"><pre>$ sudo npm update -g cordova\n</pre></div> <p>Use this syntax to install a specific version:</p> <div class=\"highlight\"><pre>$ sudo npm install -g cordova@3.1.0-0.2.0\n</pre></div> <p>Run <code class=\"prettyprint\">cordova -v</code> to see which version is currently running. Run the <code class=\"prettyprint\">npm\ninfo</code> command for a longer listing that includes the current version along with other available version numbers:</p> <div class=\"highlight\"><pre>$ npm info cordova\n</pre></div> <p>Cordova 3.0 is the first version to support the command-line interface described in this section. If you are updating from a version prior to 3.0, you need to create a new project as described above, then copy the older application's assets into the top-level <code class=\"prettyprint\">www</code> directory. Where applicable, further details about upgrading to 3.0 are available in the <a href=\"../platforms/index\">Platform Guides</a>. Once you upgrade to the <code class=\"prettyprint\">cordova</code> command-line interface and use <code class=\"prettyprint\">npm update</code> to stay current, the more time-consuming procedures described there are no longer relevant.</p> <p>Cordova 3.0+ may still require various changes to project-level directory structures and other dependencies. After you run the <code class=\"prettyprint\">npm</code> command above to update Cordova itself, you may need to ensure your project's resources conform to the latest version's requirements. Run a command such as the following for each platform you're building:</p> <div class=\"highlight\"><pre>$ cordova platform update android\n$ cordova platform update ios\n...etc.\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/cli/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/cli/index.html</a>\n  </p>\n</div>\n","guide/hybrid/webviews/index":"<h1>Embedding WebViews</h1> <p>Cordova applications are ordinarily implemented as a browser-based <em>WebView</em> within the native mobile platform. This section shows how, for supporting platforms, to create your own WebView components that make full use of Cordova APIs. You can then deploy these Cordova application components along with native components in a hybrid application.</p> <p>To deploy a WebView, you need to be familiar with each native programming environment. The following provides instructions for supported platforms:</p> <ul> <li><a href=\"../../platforms/amazonfireos/webview\">Amazon Fire OS WebViews</a></li> <li><a href=\"../../platforms/android/webview\">Android WebViews</a></li> <li><a href=\"../../platforms/ios/webview\">iOS WebViews</a></li> <li><a href=\"../../platforms/wp8/webview\">Windows Phone 8.0 WebViews</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/hybrid/webviews/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/hybrid/webviews/index.html</a>\n  </p>\n</div>\n","guide/appdev/privacy/index":"<h1>Privacy Guide</h1> <p>Mobile privacy is a critical issue that every app developer must address. Your users expect that their private information will be collected and treated appropriately by your app. Also, there are an increasing number of jurisdictions that now have legal requirements regarding mobile privacy practices.</p> <p>This guide on mobile app privacy should be considered a <em>primer</em> addressing some the most significant issues. It outlines some broadly accepted best practices and provides references to other more detailed guides and references.</p> <ul> <li><p><strong>Privacy Policy</strong>: You app should include a privacy policy that addresses topics such as what kind of information the app collects from or about your users, how that information is used, with whom it is shared, and how users can make privacy-related choices within the app. To aid understanding, you should use plain language and avoid technical jargon. You should make your privacy policy available for users to review prior to download, such as in the app description in the app marketplace. In addition, you should make your privacy policy available within the app itself. The limited size of mobile device displays creates challenges for displaying privacy policies to users. Consider developing a <em>short form</em> of the policy that includes the most important information, and then provide a link to the \"long form\" policy for those interested in more details. Several groups are attempting to develop icon-based standards for communicating privacy practices, which you may want to consider once these standards mature.</p></li> <li><p><strong>Collection of sensitive information</strong>: An app's collection of sensitive personal information raises important privacy concerns. Examples of sensitive personal information include financial information, health information, and information from or about children. It also includes information gathered from certain sensors and databases typically found on mobile devices and tablets, such as geolocation information, contacts/phonebook, microphone/camera, and stored pictures/videos. See the following documentation pages for more information: <a href=\"cordova_camera_camera.md\">camera</a>, <a href=\"cordova_media_capture_capture.md\">capture</a>, <a href=\"cordova_contacts_contacts.md\">contacts</a>, and <a href=\"cordova_geolocation_geolocation.md\">geolocation</a>. Generally, you should obtain a user's express permission before collecting sensitive information and, if possible, provide a control mechanism that allows a user to easily change permissions. App operating systems can help in some instances by presenting just-in-time dialog boxes that ask for the user's permission before collection. In these cases, be sure to take advantage of any opportunity to customize the dialog box text to clarify how the app uses and, if applicable, shares such information.</p></li> <li><p><strong>Avoiding user surprise</strong>: If the app collects or uses information in a way that may be surprising to users in light of the primary purpose of your app (for example, a music player that accesses stored pictures), you should take similar steps as with the collection of sensitive personal information. That is, you should strongly consider the use of just-in-time dialog boxes to inform the user about the collection or use of that information and, if appropriate, provide a corresponding privacy control.</p></li> <li><p><strong>Third party data collection or sharing</strong>: If you app collects information that is provided to another company--such as a social networking platform or an ad network (for example, if your app displays advertising)--you should inform your users of that collection and sharing. At a minimum, your privacy policy should describe the information collection and sharing and, if appropriate, offer your users the ability to control or opt-out of such collection or sharing.</p></li> <li><p><strong>Collection limitation and security</strong>: Your users entrust your app with their information and they expect that you will take appropriate security precautions to protect it. One of the best ways to avoid security compromises of personal information is not to collect the information in the first place unless your app has a specific and legitimate business reason for the collection. For information that does need to be collected, ensure that you provide appropriate security controls to protect that information, whether it is stored on the device or on your backend servers. You should also develop an appropriate data retention policy that is implemented within the app and on your backend servers.</p></li> </ul> <p>Following are some additional helpful mobile privacy guides for developers:</p> <ul> <li><p>California Attorney General, <a href=\"http://oag.ca.gov/sites/all/files/pdfs/privacy/privacy_on_the_go.pdf\">Privacy on the Go: Recommendations for the Mobile Ecosystem</a></p></li> <li><p>Center for Democracy &amp; Technology, Future of Privacy Forum, <a href=\"http://www.futureofprivacy.org/wp-content/uploads/Best-Practices-for-Mobile-App-Developers_Final.pdf\">Best Practices for Mobile App Developers</a></p></li> <li><p>CTIA-The Wireless Association, <a href=\"http://www.ctia.org/business_resources/wic/index.cfm/AID/11300\">Best Practices and Guidelines for Location Based Services</a></p></li> <li><p>Federal Trade Commission, <a href=\"http://www.ftc.gov/os/2013/02/130201mobileprivacyreport.pdf\">Mobile Privacy Disclosures: Building Trust Through Transparency</a></p></li> <li><p>Future of Privacy Forum, <a href=\"http://www.applicationprivacy.org\">Application Privacy</a> Website</p></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/appdev/privacy/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/appdev/privacy/index.html</a>\n  </p>\n</div>\n","cordova/events/events":"<h1>Events</h1> <blockquote> <p>Cordova lifecycle events.</p> </blockquote> <h2>Event Types</h2> <ul> <li><a href=\"events.deviceready\">deviceready</a></li> <li><a href=\"events.pause\">pause</a></li> <li><a href=\"events.resume\">resume</a></li> <li><a href=\"events.backbutton\">backbutton</a></li> <li><a href=\"events.menubutton\">menubutton</a></li> <li><a href=\"events.searchbutton\">searchbutton</a></li> <li><a href=\"events.startcallbutton\">startcallbutton</a></li> <li><a href=\"events.endcallbutton\">endcallbutton</a></li> <li><a href=\"events.volumedownbutton\">volumedownbutton</a></li> <li><a href=\"events.volumeupbutton\">volumeupbutton</a></li> </ul> <h2>Events added by <a href=\"https://github.com/apache/cordova-plugin-battery-status/blob/master/README.md\">cordova-plugin-battery-status</a>\n</h2> <ul> <li>batterycritical</li> <li>batterylow</li> <li>batterystatus</li> </ul> <h2>Events added by <a href=\"https://github.com/apache/cordova-plugin-network-information/blob/master/README.md\">cordova-plugin-network-information</a>\n</h2> <ul> <li>online</li> <li>offline</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.html</a>\n  </p>\n</div>\n","guide/support/index":"<h1>Platform Support</h1> <p>The following shows the set of development tools and device APIs available for each mobile platform. The device APIs listed here are provided by the core plugins, additional APIs are available via <a href=\"http://plugins.cordova.io\">third-party plugins</a>. Column headers display the CLI's shorthand names.</p>  <table class=\"compat\" width=\"100%\"> <thead> <tr> <th> </th>\n<th><tt>amazon-fireos</tt></th> <th><tt>android</tt></th> <th><tt>blackberry10</tt></th> <th><tt>Firefox OS</tt></th> <th><tt>ios</tt></th> <th><tt>Ubuntu</tt></th> <th>\n<tt>wp8</tt><br>(Windows Phone 8)</th> <th>\n<tt>windows</tt><br>(8.0, 8.1, 10,<br>Phone 8.1)</th> <th><tt>tizen</tt></th> </tr> </thead> <tbody> <tr> <th><a href=\"../cli/index\">cordova<br>CLI</a></th> <td data-col=\"amazon-fireos\" class=\"y\">Mac, Windows, Linux</td> <td data-col=\"android\" class=\"y\">Mac, Windows, Linux</td> <td data-col=\"blackberry10\" class=\"y\">Mac, Windows</td> <td data-col=\"firefoxos\" class=\"y\">Mac, Windows, Linux</td> <td data-col=\"ios\" class=\"y\">Mac</td> <td data-col=\"ubuntu\" class=\"y\">Ubuntu</td> <td data-col=\"winphone8\" class=\"y\">Windows</td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"n\"></td> </tr> <tr> <th><a href=\"../hybrid/webviews/index\">Embedded<br>WebView</a></th> <td data-col=\"amazon-fireos\" class=\"y\"><a href=\"../platforms/amazonfireos/webview\">(see details)</a></td> <td data-col=\"android\" class=\"y\"><a href=\"../platforms/android/webview\">(see details)</a></td> <td data-col=\"blackberry10\" class=\"n\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"><a href=\"../platforms/ios/webview\">(see details)</a></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"n\"></td> <td data-col=\"win8\" class=\"n\"></td> <td data-col=\"tizen\" class=\"n\"></td> </tr> <tr> <th><a href=\"../hybrid/plugins/index\">Plug-in<br>Interface</a></th> <td data-col=\"amazon-fireos\" class=\"y\"><a href=\"../platforms/amazonfireos/plugin\">(see details)</a></td> <td data-col=\"android\" class=\"y\"><a href=\"../platforms/android/plugin\">(see details)</a></td> <td data-col=\"blackberry10\" class=\"y\"><a href=\"../platforms/blackberry10/plugin\">(see details)</a></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"><a href=\"../platforms/ios/plugin\">(see details)</a></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"><a href=\"../platforms/wp8/plugin\">(see details)</a></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"n\"></td> </tr> <tr> <th></th> <th colspan=\"20\">Platform APIs</th> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-device-motion\">Accelerometer</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"y\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"y\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-battery-status\">BatteryStatus</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"y\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"n\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\">* Windows Phone 8.1 only</td> <td data-col=\"tizen\" class=\"y\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-camera\">Camera</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"y\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"y\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-media-capture\">Capture</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"n\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-device-orientation\">Compass</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\">(3GS+)</td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"y\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-network-information\">Connection</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"y\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-contacts\">Contacts</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"y\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"p\">partially</td> <td data-col=\"tizen\" class=\"n\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-device\">Device</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"y\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"y\"></td> </tr> <tr> <th><a href=\"../../cordova/events/events\">Events</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"y\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-file\">File</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"n\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-file-transfer\">File Transfer</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\">* Do not support onprogress nor abort</td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"n\"></td> <td data-col=\"winphone8\" class=\"y\">* Do not support onprogress nor abort</td> <td data-col=\"win8\" class=\"y\">* Do not support onprogress nor abort</td> <td data-col=\"tizen\" class=\"n\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-geolocation\">Geolocation</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"y\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"y\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-globalization\">Globalization</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"n\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-inappbrowser\">InAppBrowser</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"p\">uses iframe</td> <td data-col=\"tizen\" class=\"n\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-media\">Media</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"y\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-dialogs\">Notification</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"y\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-splashscreen\">Splashscreen</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\"></td> <td data-col=\"tizen\" class=\"n\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-statusbar\">Status Bar</a></th> <td data-col=\"amazon-fireos\" class=\"n\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"n\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"n\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\">Windows Phone 8.1 only</td> <td data-col=\"tizen\" class=\"n\"></td> </tr> <tr> <th><a href=\"../../cordova/storage/storage\">Storage</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"n\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"y\"></td> <td data-col=\"winphone8\" class=\"y\">localStorage &amp; indexedDB</td> <td data-col=\"win8\" class=\"y\">localStorage &amp; indexedDB</td> <td data-col=\"tizen\" class=\"y\"></td> </tr> <tr> <th><a href=\"https://www.npmjs.com/package/cordova-plugin-vibration\">Vibration</a></th> <td data-col=\"amazon-fireos\" class=\"y\"></td> <td data-col=\"android\" class=\"y\"></td> <td data-col=\"blackberry10\" class=\"y\"></td> <td data-col=\"firefoxos\" class=\"y\"></td> <td data-col=\"ios\" class=\"y\"></td> <td data-col=\"ubuntu\" class=\"n\"></td> <td data-col=\"winphone8\" class=\"y\"></td> <td data-col=\"win8\" class=\"y\">* Windows Phone 8.1 only</td> <td data-col=\"tizen\" class=\"n\"></td> </tr> </tbody> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/support/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/support/index.html</a>\n  </p>\n</div>\n","guide/appdev/security/index":"<h1>Security Guide</h1> <p>The following guide includes some security best practices that you should consider when developing a Cordova application. Please be aware that security is a very complicated topic and therefore this guide is not exhaustive. If you believe you can contribute to this guide, please feel free to file an issue in Cordova's bug tracker under <a href=\"https://issues.apache.org/jira/browse/CB/component/12316407\">\"Documentation\"</a>. This guide is designed to be applicable to general Cordova development (all platforms) but special platform-specific considerations will be noted. </p> <h2>This guide discusses the following topics:</h2> <ul> <li>Whitelist</li> <li>Iframes and the Callback Id Mechanism</li> <li>Certificate Pinning</li> <li>Self-signed Certificates</li> <li>Encrypted storage</li> <li>General Tips</li> <li>Recommended Articles and Other Resources</li> </ul> <h2>Whitelist</h2> <ul> <li><p>Read and understand the <a href=\"../whitelist/index\">Whitelist Guide</a></p></li> <li><p>Domain whitelisting does not work on Android API 10 and below, and WP8 for iframes and XMLHttpRequest. This means an attacker can load any domain in an iframe and any script on that page within the iframe can directly access Cordova JavaScript objects and the corresponding native Java objects. You should take this into consideration when building applications for these platforms. In practice this means making sure you target an Android API higher than 10, and that if possible you do not use an iframe to load external content - use the inAppBrowser plugin or other third-party plugins. </p></li> </ul> <h2>Iframes and the Callback Id Mechanism</h2> <p>If content is served in an iframe from a whitelisted domain, that domain will have access to the native Cordova bridge. This means that if you whitelist a third-party advertising network and serve those ads through an iframe, it is possible that a malicious ad will be able to break out of the iframe and perform malicious actions. Because of this, you should generally not use iframes unless you control the server that hosts the iframe content. Also note that there are third party plugins available to support advertising networks. Note that this statement is not true for iOS, which intercepts everything including iframe connections. </p> <h2>Certificate Pinning</h2> <p>Cordova does not support true certificate pinning. The main barrier to this is a lack of native APIs in Android for intercepting SSL connections to perform the check of the server's certificate. (Although it is possible to do certificate pinning on Android in Java using JSSE, the webview on Android is written in C++, and server connections are handled for you by the webview, so it is not possible to use Java and JSSE there.) Since Apache Cordova is meant to offer consistent APIs across multiple platforms, not having a capability in a major platform breaks that consistency.</p> <p>There are ways to approximate certificate pinning, such as checking the server's public key (fingerprint) is the expected value when your application starts or at other various times during your application's lifetime. There are third-party plugins available for Cordova that can do that. However, this is not the same as true certificate pinning which automatically verifies the expected value on every connection to the server.</p> <h2>Self-signed Certificates</h2> <p>Using self-signed certificates on your server is not recommended. If you desire SSL, then it is highly recommended that your server have a certificate that has been properly signed by a well-known CA (certificate authority). The inability to do true certificate pinning makes this important.</p> <p>The reason is that accepting self-signed certificates bypasses the certificate chain validation, which allows any server certificate to be considered valid by the device. This opens up the communication to man-in-the-middle attacks. It becomes very easy for a hacker to not only intercept and read all communication between the device and the server, but also to modify the communication. The device will never know this is happening because it doesn't verify that the server's certificate is signed by a trusted CA. The device has no proof that the server is who it expects. Because of the ease of doing a man-in-the-middle attack, accepting self-signed certificates is only marginally better than just running http instead of https on an untrusted network. Yes, the traffic would be encrypted, but it could be encrypted with the key from a man-in-the-middle, so the man-in-the-middle can access everything, so encryption is useless except to passive observers. Users trust SSL to be secure, and this would be deliberately making it insecure, so the SSL use becomes misleading. If this will be used on a trusted network (i.e., you are entirely inside a controlled enterprise), then self-signed certs are still not recommended. The two recommendations in a trusted network are to just use http because the network itself is trusted, or to get a certificate signed by a trusted CA (not self-signed). Either the network is trusted or it is not.</p> <p>The principles described here are not specific to Apache Cordova, they apply to all client-server communication.</p> <p>When running Cordova on Android, using <code class=\"prettyprint\">android:debuggable=\"true\"</code> in the application manifest will permit SSL errors such as certificate chain validation errors on self-signed certs. So you can use self-signed certs in this configuration, but this is not a configuration that should be used when your application is in production. It is meant to be used only during application development.</p> <h2>Encrypted storage</h2> <p>(TBD)</p> <h2>General Tips</h2> <h3>Do not use Android Gingerbread!</h3> <ul> <li>Set your min-target-sdk level higher than 10. API 10 is Gingerbread, and Gingerbread is no longer supported by Google or device manufacturers, and is therefore not recommend by the Cordova team. </li> <li>Gingerbread has been shown to be insecure and one of the most targeted mobile OSs <a href=\"http://bgr.com/2012/11/06/android-security-gingerbread-malware/\">http://www.mobilemag.com/2012/11/06/andriod-2-3-gingerbread-security/</a>. </li> <li>The Whitelist on Android does not work with Gingerbread or lower. This means an attacker can load malicious code in an iframe that would then have access to all of the Cordova APIs and could use that access to steal personal data, send SMS messages to premium-rate numbers, and perform other malicious acts. </li> </ul> <h3>Use InAppBrowser for outside links</h3> <ul> <li>Use the InAppBrowser when opening links to any outside website. This is much safer than whitelisting a domain name and including the content directly in your application because the InAppBrowser will use the native browser's security features and will not give the website access to your Cordova environment. Even if you trust the third party website and include it directly in your application, that third party website could link to malicious web content. </li> </ul> <h3>Validate all user input</h3> <ul> <li>Always validate any and all input that your application accepts. This includes usernames, passwords, dates, uploaded media, etc. Because an attacker could manipulate your HTML and JS assets (either by decompiling your application or using debugging tools like chrome://inspect), this validation should also be performed on your server, especially before handing the data off to any backend service. </li> <li>Other sources where data should be validated: user documents, contacts, push notifications</li> </ul> <h3>Do not cache sensitive data</h3> <ul> <li>If usernames, password, geolocation information, and other sensitive data is cached, then it could potentially be retrieved later by an unauthorized user or application.</li> </ul> <h3>Don't use eval() unless you know what you're doing</h3> <ul> <li>The JavaScript function eval() has a long history of being abused. Using it incorrectly can open your code up for injection attacks, debugging difficulties, and slower code execution. </li> </ul> <h3>Do not assume that your source code is secure</h3> <ul> <li>Since a Cordova application is built from HTML and JavaScript assets that get packaged in a native container, you should not consider your code to be secure. It is possible to reverse engineer a Cordova application. </li> </ul> <h2>Recommended Articles and Other Resources</h2> <ul> <li><a href=\"https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet\">HTML5 Security cheat sheet, detailing how to secure your HTML5 application</a></li> <li><a href=\"https://github.com/phonegap/phonegap/wiki/Platform-Security\">Phonegap's article on device security, such as using encrypted data</a></li> <li><a href=\"http://www.cis.syr.edu/%7Ewedu/Research/paper/webview_acsac2011.pdf\">Whitepaper about well known security flaws in Webview based hybrid applications</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/appdev/security/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/appdev/security/index.html</a>\n  </p>\n</div>\n","guide/appdev/whitelist/index":"<h1>Whitelist Guide</h1> <p>Domain whitelisting is a security model that controls access to external domains over which your application has no control. Cordova provides a configurable security policy to define which external sites may be accessed. By default, new apps are configured to allow access to any site. Before moving your application to production, you should formulate a whitelist and allow access to specific network domains and subdomains.</p> <p>For Android and iOS (as of their 4.0 releases), Cordova's security policy is extensible via a plugin interface. Your app should use the <a href=\"https://github.com/apache/cordova-plugin-whitelist\">cordova-plugin-whitelist</a>, as it provides better security and configurability than earlier versions of Cordova. While it is possible to implement your own whitelist plugin, it is not recommended unless your app has very specific security policy needs. See the <a href=\"https://github.com/apache/cordova-plugin-whitelist\">cordova-plugin-whitelist</a> for details on usage and configuration.</p> <p>For other platforms, Cordova adheres to the <a href=\"http://www.w3.org/TR/widgets-access/\">W3C Widget Access</a> specification, which relies on the <code class=\"prettyprint\">&lt;access&gt;</code> element within the app's <code class=\"prettyprint\">config.xml</code> file to enable network access to specific domains. For projects that rely on the CLI workflow described in <a href=\"../../cli/index\">The Command-Line Interface</a>, this file is located in the project's top-level directory. Otherwise for platform-specific development paths, locations are listed in the sections below. (See the various <a href=\"../../platforms/index\">Platform Guides</a> for more information on each platform.)</p> <p>The following examples demonstrate <code class=\"prettyprint\">&lt;access&gt;</code> whitelist syntax:</p> <ul> <li>\n<p>Access to <a href=\"http://google.com\">google.com</a>:</p> <div class=\"highlight\"><pre>&lt;access origin=\"http://google.com\" /&gt;\n</pre></div>\n</li> <li>\n<p>Access to the secure <a href=\"https://google.com\">google.com</a> (<code class=\"prettyprint\">https://</code>):</p> <div class=\"highlight\"><pre>&lt;access origin=\"https://google.com\" /&gt;\n</pre></div>\n</li> <li>\n<p>Access to the subdomain <a href=\"http://maps.google.com\">maps.google.com</a>:</p> <div class=\"highlight\"><pre>&lt;access origin=\"http://maps.google.com\" /&gt;\n</pre></div>\n</li> <li>\n<p>Access to all the subdomains on <a href=\"http://google.com\">google.com</a>, for example <a href=\"http://mail.google.com\">mail.google.com</a> and <a href=\"http://docs.google.com\">docs.google.com</a>:</p> <div class=\"highlight\"><pre>&lt;access origin=\"http://*.google.com\" /&gt;\n</pre></div>\n</li> <li>\n<p>Access to <em>all</em> domains, for example, <a href=\"http://google.com\">google.com</a> and <a href=\"http://developer.mozilla.org\">developer.mozilla.org</a>:</p> <div class=\"highlight\"><pre>&lt;access origin=\"*\" /&gt;\n</pre></div>\n</li> </ul> <p>This is the default value for newly created CLI projects.</p> <p>Be aware that some websites may automatically redirect from their home page to a different url, such as using https protocol or to a country-specific domain. For example http://www.google.com will redirect to use SSL/TLS at https://www.google.com, and then may further redirect to a geography such as https://www.google.co.uk. Such scenarios may require modified or additional whitelist entries beyond your initial requirement. Please consider this as you are building your whitelist.</p> <p>Note that the whitelist applies only to the main Cordova webview, and does not apply to an InAppBrowser webview or opening links in the system web browser.</p> <h2>Amazon Fire OS Whitelisting</h2> <p>Platform-specific whitelisting rules are found in <code class=\"prettyprint\">res/xml/config.xml</code>.</p> <h2>Android Whitelisting</h2> <p>As above, see <a href=\"https://github.com/apache/cordova-plugin-whitelist\">cordova-plugin-whitelist</a> for details. For cordova-android prior to 4.0.0, see older versions of this documentation.</p> <h2>iOS Whitelisting</h2> <p>As above, see <a href=\"https://github.com/apache/cordova-plugin-whitelist\">cordova-plugin-whitelist</a> for details. For cordova-ios prior to 4.0.0, see older versions of this documentation.</p> <p><a href=\"https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/\">Application Transport Security (ATS)</a> is new in iOS 9 (Xcode 7). This new feature acts as a whitelist for your app. The cli will automatically convert &lt;access&gt; and &lt;allow-navigation&gt; tags to the appropriate ATS directives.</p> <p>The two tags mentioned above support these two new attributes below, which have their equivalents in ATS:</p> <div class=\"highlight\"><pre>1. minimum-tls-version (String, defaults to 'TLSv1.2')\n2. requires-forward-secrecy (Boolean, defaults to 'true')\n</pre></div> <p>See the <a href=\"https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/\">ATS Technote</a> for details.</p> <h2>BlackBerry 10 Whitelisting</h2> <p>The whitelisting rules are found in <code class=\"prettyprint\">www/config.xml</code>.</p> <p>BlackBerry 10's use of wildcards differs from other platforms in two ways:</p> <ul> <li>\n<p>Any content accessed by <code class=\"prettyprint\">XMLHttpRequest</code> must be declared explicitly. Setting <code class=\"prettyprint\">origin=\"*\"</code> does not work in this case. Alternatively, all web security may be disabled using the <code class=\"prettyprint\">WebSecurity</code> preference described in BlackBerry Configuration:</p> <div class=\"highlight\"><pre>&lt;preference name=\"websecurity\" value=\"disable\" /&gt;\n</pre></div>\n</li> <li>\n<p>As an alternative to setting <code class=\"prettyprint\">*.domain</code>, set an additional <code class=\"prettyprint\">subdomains</code> attribute to <code class=\"prettyprint\">true</code>. It should be set to <code class=\"prettyprint\">false</code> by default. For example, the following allows access to <code class=\"prettyprint\">google.com</code>, <code class=\"prettyprint\">maps.google.com</code>, and <code class=\"prettyprint\">docs.google.com</code>:</p> <div class=\"highlight\"><pre>&lt;access origin=\"http://google.com\" subdomains=\"true\" /&gt;\n</pre></div>\n</li> </ul> <p>The following narrows access to <code class=\"prettyprint\">google.com</code>:</p> <div class=\"highlight\"><pre>&lt;access origin=\"http://google.com\" subdomains=\"false\" /&gt;\n</pre></div> <p>Specify access to all domains, including the local <code class=\"prettyprint\">file://</code> protocol:</p> <div class=\"highlight\"><pre>&lt;access origin=\"*\" subdomains=\"true\" /&gt;\n</pre></div> <p>(For more information on support, see BlackBerry's documentation on the <a href=\"https://developer.blackberry.com/html5/documentation/ww_developing/Access_element_834677_11.html\">access element</a>.)</p> <h2>Firefox OS</h2> <p>In Firefox OS there is no concept of whitelisting a specific domain. Instead there is a special permission called <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Permissions\">SystemXHR</a>. There is a need to add this permission to <code class=\"prettyprint\">config.xml</code>:</p> <div class=\"highlight\"><pre>&lt;platform name=\"firefoxos\"&gt;\n&lt;permission name=\"systemXHR\" privileged=\"true\" description=\"load data from server\" /&gt;\n&lt;/platform&gt;\n</pre></div> <p>The <code class=\"prettyprint\">XMLHttpRequest</code> object needs to be instantiated with two parameters <code class=\"prettyprint\">mozAnon</code> and <code class=\"prettyprint\">mozSystem</code>:</p> <div class=\"highlight\"><pre>var request = new XMLHttpRequest({\nmozAnon: true,\nmozSystem: true});\n</pre></div> <p>This solution is transparent so there is no difference for other platforms.</p> <h2>Windows Phone Whitelisting</h2> <p>The whitelisting rules for Windows Phone 8 are found in the app's <code class=\"prettyprint\">config.xml</code> file.</p> <h2>Tizen Whitelisting</h2> <p>Whitelisting rules are found in the app's <code class=\"prettyprint\">config.xml</code> file. The platform relies on the same <code class=\"prettyprint\">subdomains</code> attribute as the BlackBerry platform. (For more information on support, see Tizen's documentation on the <a href=\"https://developer.tizen.org/help/index.jsp?topic=%2Forg.tizen.web.appprogramming%2Fhtml%2Fide_sdk_tools%2Fconfig_editor_w3celements.htm\">access element</a>.)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/appdev/whitelist/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/appdev/whitelist/index.html</a>\n  </p>\n</div>\n","guide/appdev/hooks/index":"<h1>Hooks Guide</h1> <p>Cordova Hooks represent special scripts which could be added by application and plugin developers or even by your own build system to customize cordova commands. Hook scripts could be defined by adding them to the special predefined folder (<code class=\"prettyprint\">/hooks</code>) or via configuration files (<code class=\"prettyprint\">config.xml</code> and <code class=\"prettyprint\">plugin.xml</code>) and run serially in the following order:</p> <ul> <li>Application hooks from <code class=\"prettyprint\">/hooks</code>;</li> <li>Application hooks from <code class=\"prettyprint\">config.xml</code>;</li> <li>Plugin hooks from <code class=\"prettyprint\">plugins/.../plugin.xml</code>.</li> </ul> <p><strong>Note</strong>: <code class=\"prettyprint\">/hooks</code> directory is considered deprecated in favor of the hook elements in config.xml and plugin.xml.</p> <h2>Supported hook types</h2> <p>The following hook types are supported:</p> <div class=\"highlight\"><pre>after_build\nafter_compile\nafter_clean\nafter_docs\nafter_emulate\nafter_platform_add\nafter_platform_rm\nafter_platform_ls\nafter_plugin_add\nafter_plugin_ls\nafter_plugin_rm\nafter_plugin_search\nafter_plugin_install // Plugin hooks in plugin.xml are executed for a plugin being installed only\nafter_prepare\nafter_run\nafter_serve\nbefore_build\nbefore_clean\nbefore_compile\nbefore_docs\nbefore_emulate\nbefore_platform_add\nbefore_platform_rm/\nbefore_platform_ls\nbefore_plugin_add\nbefore_plugin_ls\nbefore_plugin_rm\nbefore_plugin_search/\nbefore_plugin_install // Plugin hooks in plugin.xml are executed for a plugin being installed only\nbefore_plugin_uninstall // Plugin hooks in plugin.xml are executed for a plugin being uninstalled only\nbefore_prepare\nbefore_run\nbefore_serve\npre_package // Windows and Windows Phone only\n</pre></div> <h2>Ways to define hooks</h2> <h3>Via <code class=\"prettyprint\">/hooks</code> directory</h3> <p><strong>Note</strong>: this method is considered deprecated in favor of the hook elements in config.xml and plugin.xml.</p> <p>To execute custom action when corresponding hook type is fired, use hook type as a name for a subfolder inside 'hooks' directory and place you script file here, for example:</p> <div class=\"highlight\"><pre># script file will be automatically executed after each build\nhooks/after_build/after_build_custom_action.js\n</pre></div> <p>When using these hooks, they will always be run as executable files, not as loadable JavaScript modules. <strong>Remember</strong>: Make your scripts executable in this case.</p> <h3>Config.xml</h3> <p>Hooks can be defined in project's <code class=\"prettyprint\">config.xml</code> using <code class=\"prettyprint\">&lt;hook&gt;</code> elements, for example:</p> <div class=\"highlight\"><pre>&lt;hook type=\"before_build\" src=\"scripts/appBeforeBuild.bat\" /&gt;\n&lt;hook type=\"before_build\" src=\"scripts/appBeforeBuild.js\" /&gt;\n&lt;hook type=\"before_plugin_install\" src=\"scripts/appBeforePluginInstall.js\" /&gt;\n\n&lt;platform name=\"wp8\"&gt;\n&lt;hook type=\"before_build\" src=\"scripts/wp8/appWP8BeforeBuild.bat\" /&gt;\n&lt;hook type=\"before_build\" src=\"scripts/wp8/appWP8BeforeBuild.js\" /&gt;\n&lt;hook type=\"before_plugin_install\" src=\"scripts/wp8/appWP8BeforePluginInstall.js\" /&gt;\n...\n&lt;/platform&gt;\n\n&lt;platform name=\"windows8\"&gt;\n&lt;hook type=\"before_build\" src=\"scripts/windows8/appWin8BeforeBuild.bat\" /&gt;\n&lt;hook type=\"before_build\" src=\"scripts/windows8/appWin8BeforeBuild.js\" /&gt;\n&lt;hook type=\"before_plugin_install\" src=\"scripts/windows8/appWin8BeforePluginInstall.js\" /&gt;\n...\n&lt;/platform&gt;\n</pre></div> <h3>Plugin hooks (plugin.xml)</h3> <p>As a plugin developer you can define hook scripts using <code class=\"prettyprint\">&lt;hook&gt;</code> elements in a <code class=\"prettyprint\">plugin.xml</code> like that:</p> <div class=\"highlight\"><pre>&lt;hook type=\"before_plugin_install\" src=\"scripts/beforeInstall.js\" /&gt;\n&lt;hook type=\"after_build\" src=\"scripts/afterBuild.js\" /&gt;\n\n&lt;platform name=\"wp8\"&gt;\n&lt;hook type=\"before_plugin_install\" src=\"scripts/wp8BeforeInstall.js\" /&gt;\n&lt;hook type=\"before_build\" src=\"scripts/wp8BeforeBuild.js\" /&gt;\n...\n&lt;/platform&gt;\n</pre></div> <p><code class=\"prettyprint\">before_plugin_install</code>, <code class=\"prettyprint\">after_plugin_install</code>, <code class=\"prettyprint\">before_plugin_uninstall</code> plugin hooks will be fired exclusively for the plugin being installed/uninstalled.</p> <h2>Script Interface</h2> <h3>Javascript</h3> <p>If you are writing hooks using Node.js you should use the following module definition:</p> <div class=\"highlight\"><pre>module.exports = function(context) {\n...\n}\n</pre></div> <p>You can make your scipts async using Q:</p> <div class=\"highlight\"><pre>module.exports = function(context) {\nvar Q = context.requireCordovaModule('q');\nvar deferral = new Q.defer();\n\nsetTimeout(function(){\n console.log('hook.js&gt;&gt; end');\ndeferral.resolve();\n}, 1000);\n\nreturn deferral.promise;\n}\n</pre></div> <p><code class=\"prettyprint\">context</code> object contains hook type, executed script full path, hook options, command-line arguments passed to Cordova and top-level \"cordova\" object:</p> <div class=\"highlight\"><pre>{\n  \"hook\": \"before_plugin_install\",\n  \"scriptLocation\": \"c:\\\\script\\\\full\\\\path\\\\appBeforePluginInstall.js\",\n  \"cmdLine\": \"The\\\\exact\\\\command\\\\cordova\\\\run\\\\with arguments\",\n  \"opts\": {\n\"projectRoot\":\"C:\\\\path\\\\to\\\\the\\\\project\",\n\"cordova\": {\n \"platforms\": [\"wp8\"],\n \"plugins\": [\"com.plugin.withhooks\"],\n \"version\": \"0.21.7-dev\"\n},\n\"plugin\": {\n \"id\": \"com.plugin.withhooks\",\n \"pluginInfo\": {\n   ...\n },\n \"platform\": \"wp8\",\n \"dir\": \"C:\\\\path\\\\to\\\\the\\\\project\\\\plugins\\\\com.plugin.withhooks\"\n}\n  },\n  \"cordova\": {...}\n}\n</pre></div> <p><code class=\"prettyprint\">context.opts.plugin</code> object will only be passed to plugin hooks scripts.</p> <p>You can also require additional Cordova modules in your script using <code class=\"prettyprint\">context.requireCordovaModule</code> in the following way:</p> <div class=\"highlight\"><pre>var Q = context.requireCordovaModule('q');\n</pre></div> <p><strong>Note</strong>: new module loader script interface is used for the <code class=\"prettyprint\">.js</code> files defined via <code class=\"prettyprint\">config.xml</code> or <code class=\"prettyprint\">plugin.xml</code> only. For compatibility reasons hook files specified via <code class=\"prettyprint\">/hooks</code> folders are run via Node child_process spawn, see 'Non-javascript' section below.</p> <h3>Non-javascript</h3> <p><strong>Note</strong>: we highly recommend writing your hooks using Node.js so that they are cross-platform, see 'Javascript' section above.</p> <p>Non-javascript scripts are run via Node child_process spawn from the project's root directory and have the root directory passes as the first argument. All other options are passed to the script using environment variables:</p> <ul> <li>CORDOVA_VERSION - The version of the Cordova-CLI.</li> <li>CORDOVA_PLATFORMS - Comma separated list of platforms that the command applies to (e.g.: android, ios).</li> <li>CORDOVA_PLUGINS - Comma separated list of plugin IDs that the command applies to (e.g.: org.apache.cordova.file, org.apache.cordova.file-transfer)</li> <li>CORDOVA_HOOK - Path to the hook that is being executed.</li> <li>CORDOVA_CMDLINE - The exact command-line arguments passed to cordova (e.g.: cordova run ios --emulate)</li> </ul> <p>If a script returns a non-zero exit code, then the parent cordova command will be aborted.</p> <p>Also, note that even if you are working on Windows, and in case your hook scripts aren't bat files (which is recommended, if you want your scripts to work in non-Windows operating systems) Cordova CLI will expect a shebang line as the first line for it to know the interpreter it needs to use to launch the script. The shebang line should match the following example:</p> <div class=\"highlight\"><pre>#!/usr/bin/env [name_of_interpreter_executable]\n</pre></div> <h2>Sample Usage</h2> <p>This sample demonstrates Cordova hooks usage to trace to the console output the size of generated .apk file for Android platform.</p> <p>Create blank Cordova app and add the following definition to <code class=\"prettyprint\">config.xml</code> to tell Cordova to run <code class=\"prettyprint\">afterBuild.js</code> script after each platform build.</p> <div class=\"highlight\"><pre>&lt;hook type=\"after_build\" src=\"scripts/afterBuild.js\" /&gt;\n</pre></div> <p>Create <code class=\"prettyprint\">scripts/afterBuild.js</code> file and add the following implementation. We use async version of <code class=\"prettyprint\">fs.stat</code> method to demonstrate how async functionality could be done via hooks.</p> <div class=\"highlight\"><pre>module.exports = function(ctx) {\n// make sure android platform is part of build \nif (ctx.opts.platforms.indexOf('android') &lt; 0) {\n   return;\n}\nvar fs = ctx.requireCordovaModule('fs'),\n   path = ctx.requireCordovaModule('path'),\n   deferral = ctx.requireCordovaModule('q').defer();\n\nvar platformRoot = path.join(ctx.opts.projectRoot, 'platforms/android');\nvar apkFileLocation = path.join(platformRoot, 'build/outputs/apk/android-debug.apk');\n\nfs.stat(apkFileLocation, function(err,stats) {\n   if (err) {\n        deferral.reject('Operation failed');\n   } else {\n       console.log('Size of ' + apkFileLocation + ' is ' + stats.size +' bytes');\n       deferral.resolve();\n   }\n});\n\nreturn deferral.promise;\n};\n</pre></div> <p>Parameter <code class=\"prettyprint\">ctx</code> in example above is passed by Cordova and represents execution context such as script full path, target platform, command-line arguments, etc and also exposes additional helper functionality. See <code class=\"prettyprint\">Script Interface</code> section above for more details.</p> <p>You can now add android platform and execute build.</p> <div class=\"highlight\"><pre>cordova platform add android\n..\ncordova build\n..\nSize of path\\to\\app\\platforms\\android\\build\\outputs\\apk\\android-debug.apk is 1821193 bytes\n</pre></div> <p>More good usage examples could be found here:</p> <p><a href=\"http://devgirl.org/2013/11/12/three-hooks-your-cordovaphonegap-project-needs/\">http://devgirl.org/2013/11/12/three-hooks-your-cordovaphonegap-project-needs/</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/appdev/hooks/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/appdev/hooks/index.html</a>\n  </p>\n</div>\n","cordova/plugins/pluginapis":"<h1>Plugin APIs</h1> <p>Cordova ships with a minimal set of APIs, and projects add what extra APIs they require through plugins.</p> <p>You can search through all existing plugins (including third-party plugins) on <a href=\"https://www.npmjs.com/search?q=ecosystem%3Acordova\">npm</a>.</p> <p>The traditional set of core Cordova plugins are as follows:</p> <ul> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-battery-status\">Battery Status</a></p> <blockquote> <p>Monitor the status of the device's battery.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-camera\">Camera</a></p> <blockquote> <p>Capture a photo using the device's camera.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-console\">Console</a></p> <blockquote> <p>Add additional capability to console.log().</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-contacts\">Contacts</a></p> <blockquote> <p>Work with the devices contact database.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-device\">Device</a></p> <blockquote> <p>Gather device specific information.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-device-motion\">Device Motion (Accelerometer)</a></p> <blockquote> <p>Tap into the device's motion sensor.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-device-orientation\">Device Orientation (Compass)</a></p> <blockquote> <p>Obtain the direction that the device is pointing.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-dialogs\">Dialogs</a></p> <blockquote> <p>Visual device notifications.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-file\">FileSystem</a></p> <blockquote> <p>Hook into native file system through JavaScript.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-file-transfer\">File Transfer</a></p> <blockquote> <p>Hook into native file system through JavaScript.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-geolocation\">Geolocation</a></p> <blockquote> <p>Make your application location aware.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-globalization\">Globalization</a></p> <blockquote> <p>Enable representation of objects specific to a locale.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-inappbrowser\">InAppBrowser</a></p> <blockquote> <p>Launch URLs in another in-app browser instance.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-media\">Media</a></p> <blockquote> <p>Record and play back audio files.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-media-capture\">Media Capture</a></p> <blockquote> <p>Capture media files using device's media capture applications.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-network-information\">Network Information (Connection)</a></p> <blockquote> <p>Quickly check the network state, and cellular network information.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-splashscreen\">Splashscreen</a></p> <blockquote> <p>Show and hide the applications splash screen.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-vibration\">Vibration</a></p> <blockquote> <p>An API to vibrate the device.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-statusbar\">StatusBar</a></p> <blockquote> <p>An API for showing, hiding and configuring status bar background.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-whitelist\">Whitelist</a></p> <blockquote> <p>A plugin to whitelist network requests. Must install to have any network requests in your applications.</p> </blockquote>\n</li> <li>\n<p><a href=\"https://www.npmjs.com/package/cordova-plugin-legacy-whitelist\">Legacy Whitelist</a></p> <blockquote> <p>A plugin to use the old style of whitelist before it was ripped out and changed in the whitelist plugin. </p> </blockquote>\n</li> </ul> <p>Non-English translations of these plugin docs can be found by going to the plugin github repos and looking in the docs folder</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/plugins/pluginapis.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/plugins/pluginapis.html</a>\n  </p>\n</div>\n","guide/next/index":"<h1>Next Steps</h1> <p>For developers who have an understanding of how to use the Cordova CLI and make use of plugins, there are a few things you may want to consider researching next to build better, more performant Cordova applications. The following document offers advice on various topics relating to best practices, testing, upgrades, and other topics, but is not meant to be prescriptive. Consider this your launching point for your growth as a Cordova developer. Also, if you see something that can be improved, please <a href=\"http://cordova.apache.org/#contribute\">contribute</a>!</p> <p>This guide contains the following topics:</p> <ul> <li>Best Practices</li> <li>Handling Upgrades</li> <li>Testing Cordova apps</li> <li>Debugging Cordova apps</li> <li>User Interface</li> <li>Special Considerations</li> <li>Keeping Up</li> <li>Getting Help </li> </ul> <h1>Best Practices Cordova app development</h1> <h2>1) SPA Is Your Friend</h2> <p>First and foremost - your Cordova applications should adopt the SPA (Single Page Application) design. Loosely defined, a SPA is a client-side application that is run from one request of a web page. The user loads an initial set of resources (HTML, CSS, and JavaScript) and further updates (showing a new view, loading data) is done via AJAX. SPAs are commonly used for more complex client-side applications. GMail is a great example of this. After you load GMail, mail views, editing, and organization are all done by updating the DOM instead of actually leaving the current page to load a completely new one. </p> <p>Using a SPA can help you organize your application in a more efficient manner, but it also has specific benefits for Cordova applications. A Cordova application must wait for the <a href=\"../../cordova/events/events.deviceready\">deviceready</a> event to fire before any plugins may be used. If you do not use a SPA, and your user clicks to go from one page to another, you will have to wait for <a href=\"../../cordova/events/events.deviceready\">deviceready</a> to fire again before you make use of a plugin. This is easy to forget as your application gets larger. </p> <p>Even if you choose not to use Cordova, creating a mobile application without using a single page architecture will have serious performance implications. This is because navigating between pages will require scripts, assets, etc., to be reloaded. Even if these assets are cached, there will still be performance issues. </p> <p>Examples of SPA libraries you can use in your Cordova applications are:</p> <ul> <li><a href=\"http://angularjs.org\">AngularJS</a></li> <li><a href=\"http://emberjs.com\">EmberJS</a></li> <li><a href=\"http://backbonejs.org\">Backbone</a></li> <li><a href=\"http://www.telerik.com/kendo-ui\">Kendo UI</a></li> <li><a href=\"http://monaca.mobi/en/\">Monaca</a></li> <li><a href=\"http://facebook.github.io/react/\">ReactJS</a></li> <li><a href=\"http://www.sencha.com/products/touch/\">Sencha Touch</a></li> <li><a href=\"http://jquerymobile.com\">jQuery Mobile</a></li> </ul> <p>And many, many, more.</p> <h2>2) Performance Considerations</h2> <p>One of the biggest mistakes a new Cordova developer can make is to assume that the performance they get on a desktop machine is the same they will get on a mobile device. While our mobile devices have gotten more powerful every year, they still lack the power and performance of a desktop. Mobile devices typically have much less RAM and a GPU that is a far cry from their desktop (or even laptop) brethren. A full list of tips here would be too much, but here are a few things to keep in mind (with a list of longer resources at the end for further research).</p> <p><strong>Click versus Touch</strong> - The biggest and simplest mistake you can make is to use click events. While these \"work\" just fine on mobile, most devices impose a 300ms delay on them in order to distinguish between a touch and a touch \"hold\" event. Using <code class=\"prettyprint\">touchstart</code>, or <code class=\"prettyprint\">touchend</code>, will result in a dramatic improvement - 300ms doesn't sound like much, but it can result in jerky UI updates and behavior. You should also consider the fact that “touch” events are not supported on non-webkit browsers, see <a href=\"http://caniuse.com/#search=touch\">CanIUse</a>. In order to deal with these limitations, you can checkout various libraries like HandJS and Fastouch.</p> <p><strong>CSS Transitions versus DOM Manipulation</strong> - Using hardware accelerated CSS transitions will be dramatically better than using JavaScript to create animations. See the list of resources at the end of this section for examples.</p> <p><strong>Networks Suck</strong> - Ok, networks don't always suck, but the latency of mobile networks, even good mobile networks, is far worse than you probably think. A desktop app that slurps down 500 rows of JSON data, every 30 seconds, will be both slower on a mobile device as well as a battery hog. Keep in mind that Cordova apps have multiple ways to persist data in the app (LocalStorage and the file system for example). Cache that data locally and be cognizant of the amount of data you are sending back and forth. This is an especially important consideration when your application is connected over a cellular network.</p> <p><strong>Additional Performance Articles and Resources</strong></p> <ul> <li><a href=\"http://sintaxi.com/you-half-assed-it\">\"You half assed it\"</a></li> <li><a href=\"http://coenraets.org/blog/2013/10/top-10-performance-techniques-for-phonegap-and-hybrid-apps-slides-available/\">\"Top Ten Performance Tips for PhoneGap and Hybrid Apps\"</a></li> <li><a href=\"https://channel9.msdn.com/Events/Build/2013/4-313\">\"Fast Apps and Sites with JavaScript\"</a></li> </ul> <h2>3) Recognize and Handle Offline Status</h2> <p>See the previous tip about networks. Not only can you be on a slow network, it is entirely possible for your application to be completely offline. Your application should handle this in an intelligent manner. If your application does not, people will think your application is broken. Given how easy it is to handle (Cordova supports listening for both an offline and online event), there is absolutely no reason for your application to not respond well when run offline. Be sure to test (see the Testing section below) your application and be sure to test how your application handles when you start in one state and then switch to another.</p> <p>Note that the online and offline events, as well as the Network Connection API is not perfect. You may need to rely on using an XHR request to see if the device is truly offline or online. At the end of the day, be sure add some form of support for network issues - in fact, the Apple store (and probably other stores) will reject apps that don’t properly handle offline/online states. For more discussion on this topic, see <a href=\"http://blogs.telerik.com/appbuilder/posts/13-04-23/is-this-thing-on-%28part-1%29\">\"Is This Thing On?\"</a></p> <h1>Handling Upgrades</h1> <h2>Upgrading Cordova Projects</h2> <p>If your existing project was created using Cordova 3.x, you can upgrade the project by issuing the following:</p> <div class=\"highlight\"><pre>cordova platform update platform-name ios, android, etc.\n</pre></div> <p>If your existing project was created under a version prior to Cordova 3.x, it would probably be best to create a new Cordova 3.x project, and then copy your existing project’s code and assets to the new project. Typical steps:</p> <ul> <li>Create a new Cordova 3.x project (cordova create ...)</li> <li>Copy the www folder from your old project to the new project</li> <li>Copy any configuration settings from the old project to the new project</li> <li>Add any plugins used in the old project to the new project</li> <li>Build your project</li> <li>Test, test, test!</li> </ul> <p>Regardless of the project's prior version, it is absolutely critical that you read up on what was changed in the updated version, as the update may break your code. The best place to find this information will be in the release notes published both in the repositories and on the Cordova blog. You will want to test your app thoroughly in order to verify that it is working correctly after you perform the update.</p> <p>Note: some plugins may not be compatible with the new version of Cordova. If a plugin is not compatible, you may be able to find a replacement plugin that does what you need, or you may need to delay upgrading your project. Alternatively, alter the plugin so that it does work under the new version and contribute back to the community.</p> <h2>Plugin Upgrades</h2> <p>As of Cordova 3.4, there is no mechanism for upgrading changed plugins using a single command. Instead, remove the plugin and add it back to your project, and the new version will be installed:</p> <div class=\"highlight\"><pre>cordova plugin rm com.some.plugin\ncordova plugin add com.some.plugin\n</pre></div> <p>Be sure to check the updated plugin's documentation, as you may need to adjust your code to work with the new version. Also, double check that the new version of the plugin works with your project’s version of Cordova.</p> <p>Always test your apps to ensure that installing the new plugin has not broken something that you did not anticipate.</p> <p>If your project has a lot of plugins that you need updated, it might save time to create a shell or batch script that removes and adds the plugins with one command. </p> <h1>Testing Cordova apps</h1> <p>Testing your applications is super important. The Cordova team uses Jasmine but any web friendly unit testing solution will do. </p> <h2>Testing on a simulator vs. on a real device</h2> <p>It’s not uncommon to use desktop browsers and device simulators/emulators when developing a Cordova application. However, it is incredibly important that you test your app on as many physical devices as you possibly can:</p> <ul> <li>Simulators are just that: simulators. For example, your app may work in the iOS simulator without a problem, but it may fail on a real device (especially in certain circumstances, such as a low memory state). Or, your app may actually fail on the simulator while it works just fine on a real device. </li> <li>Emulators are just that: emulators. They do not represent how well your app will run on a physical device. For example, some emulators may render your app with a garbled display, while a real device has no problem. (If you do encounter this problem, disable the host GPU in the emulator.)</li> <li>Simulators are generally faster than your physical device. Emulators, on the other hand, are generally slower. Do not judge the performance of your app by how it performs in a simulator or an emulator. Do judge the performance of your app by how it runs on a spectrum of real devices.</li> <li>It's impossible to get a good feel for how your app responds to your touch by using a simulator or an emulator. Instead, running the app on a real device can point out problems with the sizes of user interface elements, responsiveness, etc.</li> <li>Although it would be nice to be able to test only on one device per platform, it is best to test on many devices sporting many different OS versions. For example, what works on your particular Android smartphone may fail on another Android device. What works on an iOS 7 device may fail on an iOS 6 device.</li> </ul> <p>It is, of course, impossible to test on every possible device on the market. For this reason, it’s wise to recruit many testers who have different devices. Although they won’t catch every problem, chances are good that they will discover quirks and issues that you would never find alone.</p> <p>Tip: It is possible on Android Nexus devices to easily flash different versions of Android onto the device. This simple process will allow you to easily test your application on different levels of Android with a single device, without voiding your warranty or requiring you to “jailbreak” or “root” your device. The Google Android factory images and instructions are located at: https://developers.google.com/android/nexus/images#instructions</p> <h1>Debugging Cordova apps</h1> <p>Debugging Cordova requires some setup. Unlike a desktop application, you can't simply open dev tools on your mobile device and start debugging, luckily there are some great alternatives.</p> <h2>iOS Debugging</h2> <h3>Xcode</h3> <p>With Xcode you can debug the iOS native side of your Cordova application. Make sure the Debug Area is showing (View -&gt; Debug Area). Once your app is running on the device (or simulator), you can view log output in the debug area. This is where any errors or warnings will print. You can also set breakpoints within the source files. This will allow you to step through the code one line at a time and view the state of the variables at that time. The state of the variables is shown in the debug area when a breakpoint is hit. Once your app is up and running on the device, you can bring up Safari's web inspector (as described below) to debug the webview and js side of your application. For more details and help, see the Xcode guide: <a href=\"https://developer.apple.com/library/mac/documentation/ToolsLanguages/Conceptual/Xcode_Overview/DebugYourApp/DebugYourApp.html#//apple_ref/doc/uid/TP40010215-CH18-SW1\">Xcode Debugging Guide</a></p> <h3>Safari Remote Debugging with Web Inspector</h3> <p>With Safari's web inspector you can debug the webview and js code in your Cordova application. This works only on OSX and only with iOS 6 (and higher). It uses Safari to connect to your device (or the simulator) and will connect the browser's dev tools to the Cordova application. You get what you expect from dev tools - DOM inspection/manipulation, a JavaScript debugger, network inspection, the console, and more. Like Xcode, with Safari's web inspector you can set breakpoints in the JavaScript code and view the state of the variables at that time. You can view any errors, warnings or messages that are printed to the console. You can also run JavaScript commands directly from the console as your app is running. For more details on how to set it up and what you can do, see this excellent blog post: <a href=\"http://moduscreate.com/enable-remote-web-inspector-in-ios-6/\">http://moduscreate.com/enable-remote-web-inspector-in-ios-6/</a> and this guide: <a href=\"https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Introduction/Introduction.html\">Safari Web Inspector Guide</a></p> <h2>Chrome Remote Debugging</h2> <p>Virtually the same as the Safari version, this works with Android only but can be used from any desktop operating system. It requires a minimum of Android 4.4 (KitKat), minimum API level of 19, and Chrome 30+ (on the desktop). Once connected, you get the same Chrome Dev Tools experience for your mobile applications as you do with your desktop applications. Even better, the Chrome Dev Tools have a mirror option that shows your app running on the mobile device. This is more than just a view - you can scroll and click from dev tools and it updates on the mobile device. More details on Chrome Remote Debugging may be found here: <a href=\"https://developers.google.com/chrome/mobile/docs/debugging\">https://developers.google.com/chrome/mobile/docs/debugging</a></p> <p>It is possible to use Chrome Dev Tools to inspect iOS apps, through a WebKit proxy: <a href=\"https://github.com/google/ios-webkit-debug-proxy/\">https://github.com/google/ios-webkit-debug-proxy/</a></p> <h2>Ripple</h2> <p>Ripple is a desktop based emulator for Cordova projects. Essentially it lets you run a Cordova application in your desktop application and fake various Cordova features. For example, it lets you simulate the accelerometer to test shake events. It fakes the camera API by letting you select a picture from your hard drive. Ripple lets you focus more on your custom code rather than worrying about Cordova plugins. You can find out more about Ripple here: <a href=\"http://ripple.incubator.apache.org/\">http://ripple.incubator.apache.org/</a></p> <h2>Weinre</h2> <p>Weinre creates a local server that can host a remote debug client for your Cordova applications. After you've installed and started it up, you copy a line of code into your Cordova application and then restart it. You can then open a dev tool panel on your desktop to work with the application. Weinre is not quite as fancy as Chrome and Safari Remote debugging but has the benefit of working with a much greater range of operating systems and platforms. More information may be found here: <a href=\"http://people.apache.org/%7Epmuellr/weinre/docs/latest/\">http://people.apache.org/~pmuellr/weinre/docs/latest/</a></p> <h2>Other Options</h2> <ul> <li>BlackBerry 10 supports debugging as well: <a href=\"https://developer.blackberry.com/html5/documentation/v2_0/debugging_using_web_inspector.html\">Documentation</a>\n</li> <li>You can debug using Firefox App Manager as well, see <a href=\"https://hacks.mozilla.org/2014/02/building-cordova-apps-for-firefox-os/\">this blog post</a> and this <a href=\"https://developer.mozilla.org/en-US/Apps/Tools_and_frameworks/Cordova_support_for_Firefox_OS#Testing_and_debugging\">MDN article</a>.</li> <li>For more examples and explanation of the above debugging tips, see: <a href=\"http://developer.telerik.com/featured/a-concise-guide-to-remote-debugging-on-ios-android-and-windows-phone/\">http://developer.telerik.com/featured/a-concise-guide-to-remote-debugging-on-ios-android-and-windows-phone/</a>\n</li> </ul> <h1>User Interface</h1> <p>Building a Cordova application that looks nice on mobile can be a challenge, especially for developers. Many people chose to use a UI framework to make this easier. Here is a short list of options you may want to consider.</p> <ul> <li>\n<a href=\"http://jquerymobile.com\">jQuery Mobile</a> - jQuery Mobile automatically enhances your layout for mobile optimization. It also handles creating a SPA for you automatically.</li> <li>\n<a href=\"http://ionicframework.com/\">ionic</a> - This powerful UI framework actually has its own CLI to handle project creation. </li> <li>\n<a href=\"http://goratchet.com/\">Ratchet</a> - Brought to you by the people who created Bootstrap. </li> <li>\n<a href=\"http://www.telerik.com/kendo-ui\">Kendo UI</a> - Open source UI and application framework from Telerik.</li> <li><a href=\"http://topcoat.io\">Topcoat</a></li> <li><a href=\"http://facebook.github.io/react/\">ReactJS</a></li> </ul> <p>When building your user interface, it is important to think about all platforms that you are targeting and the differences between the user’s expectations. For example, an Android application that has an iOS-style UI will probably not go over well with users. This sometimes is even enforced by the various application stores. Because of this, it is important that you respect the conventions of each platform and therefore are familiar with the various Human Interface Guidelines: </p> <ul> <li><a href=\"https://developer.apple.com/library/ios/documentation/userexperience/conceptual/MobileHIG/index.html\">iOS</a></li> <li><a href=\"https://developer.android.com/designWP8\">Android</a></li> <li><a href=\"http://dev.windowsphone.com/en-us/design/library\">Windows Phone</a></li> </ul> <h2>Additional UI Articles and Resources</h2> <p>Although browser engines become more and more standards complaint, we still live in a prefixed world (-webkit and -ms.) The following article is valuable when developing UI’s in for cross browser apps: <a href=\"http://blogs.windows.com/windows_phone/b/wpdev/archive/2012/11/15/adapting-your-webkit-optimized-site-for-internet-explorer-10.aspx\">http://blogs.windows.com/windows_phone/b/wpdev/archive/2012/11/15/adapting-your-webkit-optimized-site-for-internet-explorer-10.aspx</a></p> <h1>Special Considerations</h1> <p>Although Cordova makes cross-platform development easier, it's just not possible to provide 100% isolation from the underlying native platform. So do be aware of restrictions.</p> <h2>Platform Quirks</h2> <p>While reading the documentation, look for sections which outline different behaviors or requirements on multiple platforms. If present, these would be in a section titled \"Android Quirks\", \"iOS Quirks\", etc. Read through these quirks and be aware of them as you work with Cordova.</p> <h2>Loading Remote Content</h2> <p>Invoking Cordova JavaScript functions from a remotely-loaded HTML page (an HTML page not stored locally on the device) is an unsupported configuration. This is because Cordova was not designed for this, and the Apache Cordova community does no testing of this configuration. While it can work in some circumstances, it is not recommended nor supported. There are challenges with the same origin policy, keeping the JavaScript and native portions of Cordova synchronized at the same version (since they are coupled via private APIs which may change), the trustworthiness of remote content calling native local functions, and potential app store rejection.</p> <p>The display of remotely-loaded HTML content in a webview should be done using Cordova's InAppBrowser. The InAppBrowser is designed so that JavaScript running there does not have access to the Cordova JavaScript APIs for the reasons listed above. Please refer to the <a href=\"../appdev/security/index\">Security Guide</a>.</p> <h1>Keeping Up</h1> <p>Here are a few ways to keep up to date with Cordova.</p> <ul> <li>Subscribe to the <a href=\"http://cordova.apache.org/#news\">Cordova blog</a>.</li> <li>Subscribe to the <a href=\"http://cordova.apache.org/#mailing-list\">developer list</a>. Note - this is not a support group! Rather this is a place where development of Cordova is discussed.</li> </ul> <h1>Getting Help</h1> <p>The following links are the best places to get help for Cordova:</p> <ul> <li>StackOverflow: <a href=\"http://stackoverflow.com/questions/tagged/cordova\">http://stackoverflow.com/questions/tagged/cordova</a> By using the Cordova tag, you can view and browse all Cordova questions. Note that StackOverflow automatically converts the \"Phonegap\" tag to \"Cordova\", so this way you will be able to access historical questions as well</li> <li>PhoneGap Google Group: <a href=\"https://groups.google.com/forum/#!forum/phonegap\">https://groups.google.com/forum/#!forum/phonegap</a> This Google Group was the old support forum when Cordova was still called PhoneGap. While there are still a lot of Cordova users that frequently visit this group, the Cordova community has expressed an interest in focusing less on this group and instead using StackOverflow for support</li> <li>Meetup: <a href=\"http://phonegap.meetup.com\">http://phonegap.meetup.com</a> - Consider finding a local Cordova/PhoneGap meetup group</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/next/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/next/index.html</a>\n  </p>\n</div>\n","guide/platforms/amazonfireos/config":"<h1>Amazon Fire OS Configuration</h1> <p>The <code class=\"prettyprint\">config.xml</code> file controls an app's basic settings that apply across each application and CordovaWebView instance. This section details preferences that only apply to Amazon Fire OS builds. See <a href=\"config_ref_index.md#The%20config.xml%20File\">The config.xml File</a> for information on global configuration options.</p> <ul> <li>\n<p><code class=\"prettyprint\">KeepRunning</code> (boolean, defaults to <code class=\"prettyprint\">true</code>): Determines whether the application stays running in the background even after a <code class=\"prettyprint\">[pause](../../../cordova/events/events.pause.html)</code> event fires. Setting this to <code class=\"prettyprint\">false</code> does not kill the app after a <code class=\"prettyprint\">[pause](../../../cordova/events/events.pause.html)</code> event, but simply halts execution of code within the cordova webview while the app is in the background.</p> <div class=\"highlight\"><pre>&lt;preference name=\"KeepRunning\" value=\"false\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">ErrorUrl</code> (URL, defaults to <code class=\"prettyprint\">null</code>): If set, will display the referenced page upon an error in the application instead of a dialog with the title \"Application Error\".</p> <div class=\"highlight\"><pre>&lt;preference name=\"ErrorUrl\" value=\"error.html\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">LoadingDialog</code> (string, defaults to <code class=\"prettyprint\">null</code>): If set, displays a dialog with the specified title and message, and a spinner, when loading the first page of an application. The title and message are separated by a comma in this value string, and that comma is removed before the dialog is displayed.</p> <div class=\"highlight\"><pre>&lt;preference name=\"LoadingDialog\" value=\"Please wait, the app is loading\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">LoadingPageDialog</code> (string, defaults to <code class=\"prettyprint\">null</code>): The same as <code class=\"prettyprint\">LoadingDialog</code>, but for loading every page after the first page in the application.</p> <div class=\"highlight\"><pre>&lt;preference name=\"LoadingPageDialog\" value=\"Please wait, the data is loading\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">LoadUrlTimeoutValue</code> (number, default is <code class=\"prettyprint\">20000</code>): When loading a page, the amount of time to wait before throwing a timeout error. This example specifies 10 seconds rather than 20:</p> <div class=\"highlight\"><pre>&lt;preference name=\"LoadUrlTimeoutValue\" value=\"10000\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">SplashScreen</code>: The name of the file minus its extension in the <code class=\"prettyprint\">res/drawable</code> directory. Various assets must share this common name in various subdirectories.</p> <div class=\"highlight\"><pre>&lt;preference name=\"SplashScreen\" value=\"splash\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">SplashScreenDelay</code> (number, defaults to <code class=\"prettyprint\">5000</code>): The amount of time the splash screen image displays.</p> <div class=\"highlight\"><pre>&lt;preference name=\"SplashScreenDelay\" value=\"10000\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">ShowTitle</code> (boolean, defaults to <code class=\"prettyprint\">false</code>): Show the title at the top of the screen.</p> <div class=\"highlight\"><pre>&lt;preference name=\"ShowTitle\" value=\"true\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">LogLevel</code> (string, defaults to <code class=\"prettyprint\">ERROR</code>): Sets the minimum log level through which log messages from your application will be filtered. Valid values are <code class=\"prettyprint\">ERROR</code>, <code class=\"prettyprint\">WARN</code>, <code class=\"prettyprint\">INFO</code>, <code class=\"prettyprint\">DEBUG</code>, and <code class=\"prettyprint\">VERBOSE</code>.</p> <div class=\"highlight\"><pre>&lt;preference name=\"LogLevel\" value=\"VERBOSE\"/&gt;\n</pre></div>\n</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/amazonfireos/config.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/amazonfireos/config.html</a>\n  </p>\n</div>\n","guide/platforms/amazonfireos/index":"<h1>Amazon Fire OS Platform Guide</h1> <p>This guide shows how to set up your SDK development environment to deploy Cordova apps for Amazon Fire OS devices, such as the Kindle Fire HDX.</p> <p>See the following for more detailed platform-specific information:</p> <ul> <li><a href=\"config\">Amazon Fire OS Configuration</a></li> <li><a href=\"webview\">Amazon Fire OS WebViews</a></li> <li><a href=\"plugin\">Amazon Fire OS Plugins</a></li> </ul> <h2>Introduction</h2> <p>By targeting the Amazon Fire OS platform, Cordova developers can create hybrid web apps that take advantage of the advanced web engine integrated into Kindle Fire devices. Amazon WebView API (AWV) is a Chromium-derived web runtime exclusive to Fire OS. A drop-in replacement for the WebView that comes with Android devices, AWV makes it possible to create better performing and more powerful hybrid web apps by providing support for a faster JavaScript engine (V8), remote debugging, and hardware optimizations for Kindle Fire devices including an accelerated 2D Canvas, and access to HTML5 features not supported by Android’s built in WebView such as: CSS Calc, Form Validation, getUserMedia, IndexedDB, Web Workers, WebSockets and WebGL. </p> <p>For more information about the Amazon WebView API, please see the Amazon Developer Portal's <a href=\"https://developer.amazon.com/public/solutions/platforms/android-fireos/docs/building-and-testing-your-hybrid-app\">HTML5 Hybrid Apps page</a>. For questions about getting started and other support issues, please see the Amazon Developer Portal <a href=\"http://forums.developer.amazon.com/forums/category.jspa?categoryID=41\">Forums - HTML5 Hybrid Apps</a>.</p> <h2>Requirements and Support</h2> <p>Developing Cordova apps for Amazon Fire OS requires installation of a variety of support files, including everything needed for Android development, as well as the Amazon WebView SDK. Check the list below for the required installs: </p> <ul> <li><a href=\"../../cli/index\">The Command-Line Interface</a></li> <li><a href=\"http://developer.android.com/sdk/\">Android SDK</a></li> <li><a href=\"http://ant.apache.org\">Apache Ant</a></li> <li><a href=\"https://developer.amazon.com/public/solutions/platforms/android-fireos/docs/building-and-testing-your-hybrid-app\">Amazon WebView SDK</a></li> </ul> <h2>Installation</h2> <h3>Android SDK and Apache Ant</h3> <p>Install the Android SDK from <a href=\"http://developer.android.com/sdk/\">developer.android.com/sdk</a>. You may be presented with a choice of where to install the SDK, otherwise move the downloaded <code class=\"prettyprint\">adt-bundle</code> tree to wherever you store development tools.</p> <p>You'll need to run the Android SDK Manager (<code class=\"prettyprint\">android</code> from a command line) at least once before starting your Cordova project. Make sure to install the most recent version of the Android SDK Tools and SDK Platform <strong>specifically API level 19</strong>. Please see <a href=\"https://developer.amazon.com/public/resources/development-tools/ide-tools/tech-docs/01-setting-up-your-development-environment\">Setting up your Development Environment</a> on the Amazon Developer Portal for more information about setting up your development environment for Kindle Fire OS devices. </p> <p>Install the Apache Ant build tool by <a href=\"http://ant.apache.org/bindownload.cgi\">downloading an Ant binary distribution</a>, unzipping into a directory you can refer to later. See the <a href=\"http://ant.apache.org/manual/index.html\">Ant manual</a> for more info.</p> <p>For Cordova command-line tools to work, you need to include the Android SDK's <code class=\"prettyprint\">tools</code>, <code class=\"prettyprint\">platform-tools</code> and <code class=\"prettyprint\">apache-ant/bin</code> directories in your PATH environment.</p> <h4>Mac/Linux Path</h4> <p>On Mac, Linux or other Unix-like platforms, you can use a text editor to create or modify the <code class=\"prettyprint\">~/.bash_profile</code> file, adding a line such as the following, depending on where the SDK and Ant are installed:</p> <div class=\"highlight\"><pre>export PATH=${PATH}:/Development/adt-bundle/sdk/platform-tools:/Development/adt-bundle/sdk/tools:/Development/apache-ant/bin\n</pre></div> <p>This exposes SDK tools in newly opened terminal windows. Otherwise run this to make them available in the current session:</p> <div class=\"highlight\"><pre>$ source ~/.bash_profile\n</pre></div> <h4>Windows Path</h4> <p>To modify the PATH environment on Windows:</p> <ul> <li><p>Click on the <strong>Start</strong> menu in the lower-left corner of the desktop, right-click on <strong>Computer</strong>, then click <strong>Properties</strong>.</p></li> <li><p>Click <strong>Advanced System Settings</strong> in the column on the left.</p></li> <li><p>In the resulting dialog box, press <strong>Environment Variables</strong>.</p></li> <li><p>Select the <strong>PATH</strong> variable and press <strong>Edit</strong>.</p></li> <li>\n<p>Append the following to the PATH based on where you installed the SDK and Ant, for example:</p> <div class=\"highlight\"><pre>;C:\\Development\\adt-bundle\\sdk\\platform-tools;C:\\Development\\adt-bundle\\sdk\\tools;C:\\Development\\apache-ant\\bin\n</pre></div>\n</li> <li><p>Save the value and close both dialog boxes.</p></li> <li>\n<p>You will also need to enable Java. Open a command prompt and type <code class=\"prettyprint\">java</code>, if it does not run, append the location of the Java binaries to your PATH as well. Make sure %JAVA<em>HOME% is pointing to installed JDK directory. You might have to add JAVA</em>HOME environment variable seperately.</p> <div class=\"highlight\"><pre>;%JAVA_HOME%\\bin\n</pre></div>\n</li> </ul> <h3>Amazon WebView SDK</h3> <p>In order to create Cordova apps using the Amazon Fire OS platform target, you'll need to download, unpack and install the Amazon WebView SDK support files. This step will only need to be done for your first Amazon Fire OS project.</p> <ul> <li><p>Download the Amazon WebView SDK from the <a href=\"https://developer.amazon.com/public/solutions/platforms/android-fireos/docs/building-and-testing-your-hybrid-app\">Amazon Developer Portal</a>.</p></li> <li>\n<p>Copy <code class=\"prettyprint\">awv_interface.jar</code> from the downloaded SDK to Cordova's working directory. Create commonlibs(shown below) folder if it doesn't exist: </p> <p><strong>Mac/Linux:</strong> <code class=\"prettyprint\">~/.cordova/lib/commonlibs/</code></p> <p><strong>Windows:</strong> <code class=\"prettyprint\">%USERPROFILE%\\.cordova\\lib\\commonlibs</code></p>\n</li> </ul> <h2>Create New Project for Amazon Fire OS</h2> <p>Use the <code class=\"prettyprint\">cordova</code> utility to set up a new project, as described in The Cordova <a href=\"../../cli/index\">The Command-Line Interface</a>. For example, in a source-code directory:</p> <div class=\"highlight\"><pre>$ cordova create hello com.example.hello \"HelloWorld\"\n$ cd hello\n$ cordova platform add amazon-fireos\n$ cordova build\n</pre></div> <p><strong><em>Note:</em></strong> The first time the amazon-fireos platform is installed on your system, it will download the appropriate files to the Cordova working directory, but will then fail as it is missing the AWV SDK support files (see above). Follow the instructions above to install the <code class=\"prettyprint\">awv_interface.jar</code>, then remove and re-add the amazon-fireos platform to your project. This step will only need to be done for first Amazon Fire OS project.</p> <h2>Deploy to Device</h2> <p>To push an app directly to the device, make sure USB debugging is enabled on your device as described on the <a href=\"http://developer.android.com/tools/device.html\">Android Developer Site</a>, and use a mini USB cable to plug it into your system.</p> <p>You can push the app to the device from the command line:</p> <div class=\"highlight\"><pre>$ cordova run amazon-fireos\n</pre></div> <p>Alternately within Eclipse, right-click the project and choose <strong>Run As → Android Application</strong>.</p> <p><strong>Note</strong>: Currently, testing via an emulator is not supported for Amazon WebView based apps, additionally the Amazon WebView API is only available on Fire OS devices. For more information, please see the <a href=\"https://developer.amazon.com/public/solutions/platforms/android-fireos/docs/building-and-testing-your-hybrid-app\">Amazon WebView API SDK</a> documentation.</p> <h3>Run Flags</h3> <p>The run command accepts optional parameters as specified in the Cordova Command Line Interface document, Fire OS also accepts an additional <code class=\"prettyprint\">--debug</code> flag which will enable Chromium's Developer Tools for remote web debugging. </p> <p>To use Developer Tools, enter:</p> <div class=\"highlight\"><pre>$ cordova run --debug amazon-fireos\n</pre></div> <p>This will enable the tools on the running client. You can then connect to the client by port forwarding using the Android Debug Bridge (adb) referring to the app's package name. </p> <p>For example:</p> <div class=\"highlight\"><pre>adb forward tcp:9222 localabstract:com.example.helloworld.devtools\n</pre></div> <p>You can then use the DevTools via a Chromium-based browser by navigating to: <code class=\"prettyprint\">http://localhost:9222</code>.</p> <h3>Optional Eclipse support</h3> <p>Once created, you can use the Eclipse that comes along with the Android SDK to modify the project. Beware that modifications made through Eclipse will be overwritten if you continue to use Cordova command line tools.</p> <ul> <li><p>Launch the <strong>Eclipse</strong> application.</p></li> <li><p>Select the <strong>New Project</strong> menu item.</p></li> <li><p>Choose <strong>Android Project from Existing Code</strong> from the resulting dialog box, and press <strong>Next</strong>: <img src=\"http://cordova.apache.org/static/img/guide/platforms/android/eclipse_new_project.png\" alt=\"\"></p></li> <li><p>Navigate to <code class=\"prettyprint\">hello</code>, or whichever directory you created for the project, then to the <code class=\"prettyprint\">platforms/amazon-fireos</code> subdirectory.</p></li> <li><p>Eclipse will show you hello and hello-CorddovaLib - 2 projects to be added. Add both.</p></li> <li><p>Press <strong>Finish</strong>.</p></li> </ul> <p>Once the Eclipse window opens, a red <strong>X</strong> may appear to indicate unresolved problems. If so, follow these additional steps:</p> <ul> <li><p>Right-click on the project directory.</p></li> <li><p>In the resulting <strong>Properties</strong> dialog, select <strong>Android</strong> from the navigation pane.</p></li> <li><p>For the project build target, select the highest Android API level (currently API Level 19) you have installed.</p></li> <li><p>Click <strong>OK</strong>.</p></li> <li><p>Select <strong>Clean</strong> from the <strong>Project</strong> menu. This should correct all the errors in the project.</p></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/amazonfireos/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/amazonfireos/index.html</a>\n  </p>\n</div>\n","guide/platforms/android/tools":"<h1>Android Shell Tool Guide</h1> <p>This guide shows how to use Cordova's set of platform-centered shell tools to develop Android apps. This development path, discussed in the <a href=\"../../overview/index\">Overview</a>, may offer you a greater range of development options than the cross-platform CLI tool described in <a href=\"../../cli/index\">The Command-Line Interface</a>. For example, you need to use shell tools when deploying a custom Cordova WebView alongside native components. Before using either development path, you must first configure the Android SDK environment as described in the <a href=\"index\">Android Platform Guide</a>.</p> <p>To enable shell tools for Android, download Cordova from <a href=\"http://cordova.apache.org\">cordova.apache.org</a>. The download contains separate archives for each platform. Expand each you wish to target, <code class=\"prettyprint\">android</code> in this case. The relevant tools are typically available in the top-level <code class=\"prettyprint\">bin</code> directory, otherwise consult the <strong>README</strong> file for more detailed directions.</p> <p>These tools allow you to create, build, and run Android apps. For information on the additional command-line interface that enables plugin features across all platforms, see Using Plugman to Manage Plugins. See Application Plugins for details on how to develop plugins.</p> <h2>Create a Project</h2> <p>Run the <code class=\"prettyprint\">create</code> command, specifying the existing path to the project, the reverse-domain-style package identifier, and the app's display name. Here is the syntax for both Mac/Linux and Windows:</p> <div class=\"highlight\"><pre>$ /path/to/cordova-android/bin/create /path/to/project com.example.project_name ProjectName\n\nC:\\&gt;\\path\\to\\cordova-android\\bin\\create.bat \\path\\to\\project com.example.project_name ProjectName\n</pre></div> <h2>Build</h2> <p>This cleans then builds a project.</p> <p>Debug, on Mac/Linux or Windows:</p> <div class=\"highlight\"><pre>$ /path/to/project/cordova/build --debug\n\nC:\\&gt;\\path\\to\\project\\cordova\\build.bat --debug\n</pre></div> <p>Release, on Mac/Linux or Windows:</p> <div class=\"highlight\"><pre>$ /path/to/project/cordova/build --release\n\nC:\\&gt;\\path\\to\\project\\cordova\\build.bat --release\n</pre></div> <h2>Run the App</h2> <p>The <code class=\"prettyprint\">run</code> command accepts the following <em>optional</em> parameters:</p> <ul> <li><p>Target specification. This includes <code class=\"prettyprint\">--emulator</code>, <code class=\"prettyprint\">--device</code>, or <code class=\"prettyprint\">--target=&lt;targetID&gt;</code>.</p></li> <li>\n<p>Build specification. This includes <code class=\"prettyprint\">--debug</code>, <code class=\"prettyprint\">--release</code>, or <code class=\"prettyprint\">--nobuild</code>.</p> <div class=\"highlight\"><pre>$ /path/to/project/cordova/run [Target] [Build]\n\nC:\\&gt;\\path\\to\\project\\cordova\\run.bat [Target] [Build]\n</pre></div>\n</li> </ul> <p>Make sure you create at least one Android Virtual Device, otherwise you're prompted to do so with the <code class=\"prettyprint\">android</code> command. If more than one AVD is available as a target, you're prompted to select one. By default the <code class=\"prettyprint\">run</code> command detects a connected device, or a currently running emulator if no device is found.</p> <h2>Signing the App</h2> <p>You can review Android app signing requirements here: http://developer.android.com/tools/publishing/app-signing.html</p> <p>To sign an app, you need the following parameters:</p> <ul> <li><p>Keystore (<code class=\"prettyprint\">--keystore</code>): Path to a binary file which can hold a set of keys.</p></li> <li><p>Keystore password (<code class=\"prettyprint\">--storePassword</code>): Password to the keystore</p></li> <li><p>Alias (<code class=\"prettyprint\">--alias</code>): The id specifying the private key used for singing.</p></li> <li><p>Password (<code class=\"prettyprint\">--password</code>): Password for the private key specified.</p></li> <li><p>Type of the keystore (<code class=\"prettyprint\">--keystoreType</code>): pkcs12, jks (Default: auto-detect based on file extension)</p></li> </ul> <p>These parameters can be specified using the command line arguments above to <code class=\"prettyprint\">build</code> or <code class=\"prettyprint\">run</code> scripts.</p> <p>Alternatively, you could specify them in a build configuration file (build.json) using (<code class=\"prettyprint\">--buildConfig</code>) argument. Here's a sample of a build configuration file:</p> <div class=\"highlight\"><pre>{\n\"android\": {\n    \"debug\": {\n        \"keystore\": \"..\\android.keystore\",\n        \"storePassword\": \"android\",\n        \"alias\": \"mykey1\",\n        \"password\" : \"password\",\n        \"keystoreType\": \"\"\n    },\n    \"release\": {\n        \"keystore\": \"..\\android.keystore\",\n        \"storePassword\": \"\",\n        \"alias\": \"mykey2\",\n        \"password\" : \"password\",\n        \"keystoreType\": \"\"\n    }\n}\n }\n</pre></div> <p>For release signing, passwords can be excluded and the build system will issue a prompt asking for the password.</p> <p>There is also support to mix and match command line arguments and parameters in build.json file. Values from the command line arguments will get precedence. This can be useful for specifying passwords on the command line. </p> <h2>Logging</h2> <div class=\"highlight\"><pre>$ /path/to/project/cordova/log\n\nC:\\&gt;\\path\\to\\project\\cordova\\log.bat\n</pre></div> <h2>Cleaning</h2> <div class=\"highlight\"><pre>$ /path/to/project/cordova/clean\n\nC:\\&gt;\\path\\to\\project\\cordova\\clean.bat\n</pre></div> <h2>Building with Gradle</h2> <p>As of cordova-android@4.0.0, project build using <a href=\"http://www.gradle.org/\">Gradle</a>. For instructions on building with ANT, refer to older versions of documentation.</p> <h3>Gradle Properties</h3> <p>These <a href=\"http://www.gradle.org/docs/current/userguide/tutorial_this_and_that.html\">properties</a> can be set to customize the build:</p> <ul> <li>\n<strong>cdvBuildMultipleApks</strong> (default: false)</li> </ul> <p>If this is set, then multiple APK files will be generated: One per native platform supported by library projects (x86, ARM, etc). This can be important if your project uses large native libraries, which can drastically increase the size of the generated APK.</p> <p>If not set, then a single APK will be generated which can be used on all devices.</p> <ul> <li><strong>cdvVersionCode</strong></li> </ul> <p>Overrides the versionCode set in <code class=\"prettyprint\">AndroidManifest.xml</code></p> <ul> <li>\n<strong>cdvReleaseSigningPropertiesFile</strong> (default: release-signing.properties)</li> </ul> <p>Path to a .properties file that contains signing information for release builds. The file should look like:</p> <div class=\"highlight\"><pre>  storeFile=relative/path/to/keystore.p12\n  storePassword=SECRET1\n  storeType=pkcs12\n  keyAlias=DebugSigningKey\n  keyPassword=SECRET2\n</pre></div> <p><code class=\"prettyprint\">storePassword</code> and <code class=\"prettyprint\">keyPassword</code> are optional, and will be prompted for if omitted.</p> <ul> <li>\n<strong>cdvDebugSigningPropertiesFile</strong> (default: debug-signing.properties)</li> </ul> <p>Same as cdvReleaseSigningPropertiesFile, but for debug builds. Useful when you need to share a signing key with other developers.</p> <ul> <li><strong>cdvMinSdkVersion</strong></li> </ul> <p>Overrides the value of <code class=\"prettyprint\">minSdkVersion</code> set in <code class=\"prettyprint\">AndroidManifest.xml</code>. Useful when creating multiple APKs based on SDK version.</p> <ul> <li><strong>cdvBuildToolsVersion</strong></li> </ul> <p>Override the automatically detected <code class=\"prettyprint\">android.buildToolsVersion</code> value.</p> <ul> <li><strong>cdvCompileSdkVersion</strong></li> </ul> <p>Override the automatically detected <code class=\"prettyprint\">android.compileSdkVersion</code> value.</p> <h3>Extending build.gradle</h3> <p>If you need to customize <code class=\"prettyprint\">build.gradle</code>, rather than edit directly, you should create a sibling file named <code class=\"prettyprint\">build-extras.gradle</code>. This file will be included by the main <code class=\"prettyprint\">build.gradle</code> when present. Here's an example:</p> <div class=\"highlight\"><pre># Example build-extras.gradle\n# This file is included at the beginning of `build.gradle`\next.cdvDebugSigningPropertiesFile = '../../android-debug-keys.properties'\n# When set, this function allows code to run at the end of `build.gradle`\next.postBuildExtras = {\nandroid.buildTypes.debug.applicationIdSuffix = '.debug'\n}\n</pre></div> <p>Note that plugins can also include <code class=\"prettyprint\">build-extras.gradle</code> files via:</p> <div class=\"highlight\"><pre>&lt;framework src=\"some.gradle\" custom=\"true\" type=\"gradleReference\" /&gt;\n</pre></div> <h3>Example Build</h3> <div class=\"highlight\"><pre>export ORG_GRADLE_PROJECT_cdvMinSdkVersion=14\ncordova build android -- --gradleArg=-PcdvBuildMultipleApks=true\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/android/tools.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/android/tools.html</a>\n  </p>\n</div>\n","guide/platforms/android/index":"<h1>Android Platform Guide</h1> <p>This guide shows how to set up your SDK environment to deploy Cordova apps for Android devices, and how to optionally use Android-centered command-line tools in your development workflow. You need to install the Android SDK regardless of whether you want to use these platform-centered shell tools or cross-platform Cordova CLI for development. For a comparison of the two development paths, see the <a href=\"../../overview/index\">Overview</a>. For details on the CLI, see <a href=\"../../cli/index\">The Command-Line Interface</a>.</p> <h2>Requirements and Support</h2> <p>Cordova for Android requires the Android SDK which could be installed on OS X, Linux or Windows operation system. See the Android SDK's <a href=\"http://developer.android.com/sdk/index.html#Requirements\">System Requirements</a>.</p> <p>Cordova supports Android 4.0.x (starting with Android API level 14) and higher. As a general rule, Android versions become unsupported by Cordova as they dip below 5% on Google's <a href=\"http://developer.android.com/about/dashboards/index.html\">distribution dashboard</a>. Android versions earlier than API level 10, and the 3.x versions (Honeycomb, API levels 11-13) fall significantly below that 5% threshold.</p> <h2>Install Cordova Shell Tools</h2> <p>If you want to use Cordova's Android-centered shell tools in conjunction with the SDK, download Cordova from <a href=\"http://cordova.apache.org\">cordova.apache.org</a>. Otherwise ignore this section if you plan to use the cross-platform CLI tool described in <a href=\"../../cli/index\">The Command-Line Interface</a>.</p> <p>The Cordova download contains separate archives for each platform. Be sure to expand the appropriate archive, <code class=\"prettyprint\">android</code> in this case, within an empty directory. The relevant executible utilities are available in the top-level <code class=\"prettyprint\">bin</code> directory. (Consult the <strong>README</strong> file if necessary for more detailed directions.)</p> <p>These shell tools allow you to create, build, and run Android apps. For information on the additional command-line interface that enables plugin features across all platforms, see Using Plugman to Manage Plugins. See Application Plugins for details on how to develop plugins.</p> <h2>Install the Java Development Kit (JDK)</h2> <p>Install <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\">Java Development Kit (JDK) 7</a> or later. </p> <p>When installing on Windows you also need to set <code class=\"prettyprint\">JAVA_HOME</code> Environment Variable according to JDK installation path (for example, C:\\Program Files\\Java\\jdk1.7.0_75).</p> <h2>Install the Android SDK</h2> <p>Install the <a href=\"http://developer.android.com/sdk/installing/index.html?pkg=tools\">Android Stand-alone SDK Tools</a> or <a href=\"http://developer.android.com/sdk/installing/index.html?pkg=studio\">Android Studio</a>. Procceed with <code class=\"prettyprint\">Android Studio</code> if you plan developing new Cordova for Android plugins or using native tools to run and debug Android platform. Otherwise, <code class=\"prettyprint\">Android Stand-alone SDK Tools</code> are enough to build and deploy Android application.</p> <p>Detailed installation instructions are available as part of installation links above.</p> <p>For Cordova command-line tools to work, or the CLI that is based upon them, you need to include the SDK's <code class=\"prettyprint\">tools</code> and <code class=\"prettyprint\">platform-tools</code> directories in your <code class=\"prettyprint\">PATH</code>. On a Mac or Linux, you can use a text editor to create or modify the <code class=\"prettyprint\">~/.bash_profile</code> file, adding a line such as the following, depending on where the SDK installs:</p> <div class=\"highlight\"><pre>export PATH=${PATH}:/Development/android-sdk/platform-tools:/Development/android-sdk/tools\n</pre></div> <p>This line in <code class=\"prettyprint\">~/.bash_profile</code> exposes these tools in newly opened terminal windows. If your terminal window is already open in OSX, or to avoid a logout/login on Linux, run this to make them available in the current terminal window:</p> <div class=\"highlight\"><pre>$ source ~/.bash_profile\n</pre></div> <p>To modify the <code class=\"prettyprint\">PATH</code> environment on Windows:</p> <ol> <li><p>Click on the <strong>Start</strong> menu in the lower-left corner of the desktop, right-click on <strong>Computer</strong>, then select <strong>Properties</strong>.</p></li> <li><p>Select <strong>Advanced System Settings</strong> in the column on the left.</p></li> <li><p>In the resulting dialog box, press <strong>Environment Variables</strong>.</p></li> <li><p>Select the <strong>PATH</strong> variable and press <strong>Edit</strong>.</p></li> <li>\n<p>Append the following to the <code class=\"prettyprint\">PATH</code> based on where you installed the SDK, for example:</p> <div class=\"highlight\"><pre>;C:\\Development\\android-sdk\\platform-tools;C:\\Development\\android-sdk\\tools\n</pre></div>\n</li> <li><p>Save the value and close both dialog boxes.</p></li> </ol> <h2>Install SDK Packages</h2> <p>Open Android SDK Manager (for example, via terminal: <code class=\"prettyprint\">android</code>) and install:</p> <ol> <li>Android 5.1.1 (API 22) platform SDK</li> <li>Android SDK Build-tools version 19.1.0 or higher</li> <li>Android Support Repository (Extras)</li> </ol> <p>See <a href=\"http://developer.android.com/sdk/installing/adding-packages.html\">Installing SDK Packages</a> for more details.</p> <h2>Configure an Emulator</h2> <p>Android sdk doesn't provide any default emulator instance by default. You can create a new one by running <code class=\"prettyprint\">android</code> on the command line. The press <strong>Tools → Manage AVDs</strong> (Android Virtual Devices), then choose any item from <strong>Device Definitions</strong> in the resulting dialog box:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/android/asdk_device.png\" alt=\"\"></p> <p>Press <strong>Create AVD</strong>, optionally modifying the name, then press <strong>OK</strong> to accept the changes:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/android/asdk_newAVD.png\" alt=\"\"></p> <p>The AVD then appears in the <strong>Android Virtual Devices</strong> list:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/android/asdk_avds.png\" alt=\"\"></p> <p>To open the emulator as a separate application, select the AVD and press <strong>Start</strong>. It launches much as it would on the device, with additional controls available for hardware buttons:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/android/asdk_emulator.png\" alt=\"\"></p> <p>For a faster experience, you can use the <code class=\"prettyprint\">Virtual Machine Acceleration</code> to improve the execution speed. Many modern CPUs provide extensions to execute Virtual Machines more efficiently. Before attempting to use this type of acceleration, you need to determine if your current development system's CPU, supports one the following virtualization technologies:</p> <ul> <li>\n<strong>Intel Virtualization Technology</strong> (VT-x, vmx) → <a href=\"http://ark.intel.com/products/virtualizationtechnology\">Intel VT-x supported processor list</a>\n</li> <li>\n<strong>AMD Virtualization</strong> (AMD-V, SVM), only supported for Linux (Since May 2006, all CPUs AMD include AMD-V, except Sempron).</li> </ul> <p>Another way to find out if your Intel processor supports VT-x Technology, it's by executing the <code class=\"prettyprint\">Intel Processor Identification Utility</code>, for <code class=\"prettyprint\">Windows</code>you can download it from the Intel <a href=\"https://downloadcenter.intel.com/Detail_Desc.aspx?ProductID=1881&amp;DwnldID=7838\">Download Center</a>, or you can use the <a href=\"https://downloadcenter.intel.com/Detail_Desc.aspx?ProductID=1881&amp;DwnldID=7840&amp;lang=eng\">booteable utility</a>, which is <code class=\"prettyprint\">OS Independent</code>.</p> <p>After install and execute the <code class=\"prettyprint\">Intel Processor Identification Utility</code> over Windows, you will get the following window, in order to check if your CPU supports the Virtualization Technologies:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/android/intel_pid_util_620px.png\" alt=\"\"></p> <p>In order to speed up the emulator, you need to download and install one or more <code class=\"prettyprint\">Intel x86 Atom</code> System Images, as well as the <code class=\"prettyprint\">Intel Hardware Accelerated Execution Manager (HAXM)</code>.</p> <p>Open your Android SDK Manager, and select the <code class=\"prettyprint\">Intel x86 Atom</code> System Image, for whichever version that you want to test. Then go to <code class=\"prettyprint\">Extras</code> and select <code class=\"prettyprint\">Intel x86 Emulator Accelerator (HAXM)</code>, and install those packages:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/android/asdk_man_intel_image_haxm.png\" alt=\"\"></p> <p>After download, run the Intel installer, which is available within your Android SDK at <code class=\"prettyprint\">extras/intel/Hardware_Accelerated_Execution_Manager</code>. <strong>Note</strong>:<code class=\"prettyprint\">If you have any problems installing the package, you can find more information and step by step guidance check this</code> <a href=\"http://software.intel.com/en-us/android/articles/speeding-up-the-android-emulator-on-intel-architecture\">Intel Article</a>.</p> <ol> <li><p>Install one or more <code class=\"prettyprint\">Intel x86 Atom</code> System Images as well as the <code class=\"prettyprint\">Intel Hardware Accelerated Execution Manager</code>, available under <strong>Extras</strong>.</p></li> <li><p>Run the Intel installer, which is available within your Android SDK at <code class=\"prettyprint\">extras/intel/Hardware_Accelerated_Execution_Manager</code>.</p></li> <li><p>Create a new AVD with the target set to an Intel image.</p></li> <li><p>When starting the emulator, ensure there are no error messages indicating a failure to load HAX modules.</p></li> </ol> <h2>Create a New Project</h2> <p>At this point, to create a new project you can choose between the cross-platform CLI tool described in <a href=\"../../cli/index\">The Command-Line Interface</a>, or the set of Android-specific shell tools. From within a source-code directory, here's the CLI approach:</p> <div class=\"highlight\"><pre>$ cordova create hello com.example.hello HelloWorld\n$ cd hello\n$ cordova platform add android\n$ ccordova prepare              # or \"cordova build\"\n</pre></div> <p>Here's the corresponding lower-level shell-tool approach for both Unix and Windows:</p> <div class=\"highlight\"><pre>$ /path/to/cordova-android/bin/create /path/to/new/hello com.example.hello HelloWorld\nC:\\path\\to\\cordova-android\\bin\\create.bat C:\\path\\to\\new\\hello com.example.hello HelloWorld\n</pre></div> <h2>Build the Project</h2> <p>If you are using the CLI in development, the project directory's top-level <code class=\"prettyprint\">www</code> directory contains the source files. Run any of these within the project directory to rebuild the app:</p> <div class=\"highlight\"><pre>$ cordova build                   # build all platforms that were added\n$ cordova build android           # build debug for only Android\n$ cordova build android --debug   # build debug for only Android\n$ cordova build android --release # build release for only Android\n</pre></div> <p>If you are using the Android-specific shell tools in development, there is a different approach. Once you generate the project, the default app's source is available in the <code class=\"prettyprint\">assets/www</code> subdirectory. Subsequent commands are available in its <code class=\"prettyprint\">cordova</code> subdirectory.</p> <p>The <code class=\"prettyprint\">build</code> command cleans project files and rebuilds the app. Here is the syntax for both Mac and Windows. The first pair of examples generate debugging information, and the second builds the apps for release:</p> <div class=\"highlight\"><pre>$ /path/to/project/cordova/build --debug\nC:\\path\\to\\project\\cordova\\build.bat --debug\n\n$ /path/to/project/cordova/build --release\nC:\\path\\to\\project\\cordova\\build.bat --release\n</pre></div> <h2>Deploy the app</h2> <p>You can use the <code class=\"prettyprint\">cordova</code> CLI utility to deploy the application to the emulator or the device from the command line:</p> <div class=\"highlight\"><pre>$ cordova emulate android       #to deploy the app on a default android emulator\n$ cordova run android --device  #to deploy the app on a connected device\n</pre></div> <p>Otherwise, use the alternate shell interface:</p> <div class=\"highlight\"><pre>$ /path/to/project/cordova/run --emulator\n$ /path/to/project/cordova/run --device\n</pre></div> <p>You can use <strong>cordova run android --list</strong> to see all available targets and <strong>cordova run android --target=target_name</strong> to run application on a specific device or emulator (for example, <code class=\"prettyprint\">cordova run android --target=\"Nexus4_emulator\"</code>).</p> <p>You can also use <strong>cordova run --help</strong> to see additional build and run options.</p> <p>This pushes the app to the home screen and launches it:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/android/emulator2x.png\" alt=\"\"></p> <p>When you <code class=\"prettyprint\">run</code> the app, you also <code class=\"prettyprint\">build</code> it. You can append additional <code class=\"prettyprint\">--debug</code>, <code class=\"prettyprint\">--release</code>, and <code class=\"prettyprint\">--nobuild</code> flags to control how it is built, or even whether a rebuild is necessary:</p> <div class=\"highlight\"><pre>$ /path/to/project/cordova/run --emulator --nobuild\n</pre></div> <h2>Other Commands</h2> <p>The following generates a detailed log of the app as it runs:</p> <div class=\"highlight\"><pre>$ /path/to/project/cordova/log\nC:\\path\\to\\project\\cordova\\log.bat\n</pre></div> <p>The following cleans the project files:</p> <div class=\"highlight\"><pre>$ /path/to/project/cordova/clean\nC:\\path\\to\\project\\cordova\\clean.bat\n</pre></div> <h2>Open a New Project in the SDK</h2> <p>Once android platform is added to your project, you can open it from within <a href=\"http://developer.android.com/sdk/installing/index.html?pkg=studio\">Android Studio</a>:</p> <ol> <li><p>Launch the <strong>Android Studio</strong> application.</p></li> <li><p>Select <strong>Import Project (Eclipse ADT, Gradle, etc)</strong>.</p></li> </ol> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/android/asdk_import_project.png\" alt=\"\"></p> <ol> <li>Select location where android platform is stored (<code class=\"prettyprint\">your/project/platforms/android</code>).</li> </ol> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/android/asdk_import_select_location.png\" alt=\"\"></p> <ol> <li>For the <code class=\"prettyprint\">Gradle Sync</code> question you can simply answer <strong>Yes</strong>.</li> </ol> <p>You are all set now and can build and run the app directly from <code class=\"prettyprint\">Android Studio</code>.</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/android/asdk_import_done.png\" alt=\"\"></p> <p>See <a href=\"http://developer.android.com/tools/studio/index.html\">Android Studio Overview</a> and And <a href=\"http://developer.android.com/tools/building/building-studio.html\">Building and Running from Android Studio</a> for more details.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/android/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/android/index.html</a>\n  </p>\n</div>\n","guide/platforms/android/webview":"<h1>Android WebViews</h1> <p>This guide shows how to embed a Cordova-enabled WebView component within a larger Android application. For details on how these components can communicate with each other, see Application Plugins.</p> <p>If you're unfamiliar with Android, you should first familiarize yourself with the <a href=\"index\">Android Platform Guide</a> and have the latest Android SDK installed before you attempt the more unusual development option of embedding a WebView. Starting with Cordova 1.9, the Android platform relies on a <code class=\"prettyprint\">CordovaWebView</code> component, which builds on a legacy <code class=\"prettyprint\">CordovaActivity</code> component that pre-dates the 1.9 release.</p> <ol> <li><p>To follow these instructions, make sure you have the latest Cordova distribution. Download it from <a href=\"http://cordova.apache.org\">cordova.apache.org</a> and unzip its Android package.</p></li> <li><p>Navigate to the Android package's <code class=\"prettyprint\">/framework</code> directory and run <code class=\"prettyprint\">ant jar</code>. It creates the Cordova <code class=\"prettyprint\">.jar</code> file, formed as <code class=\"prettyprint\">/framework/cordova-x.x.x.jar</code>.</p></li> <li><p>Copy the <code class=\"prettyprint\">.jar</code> file into the Android project's <code class=\"prettyprint\">/libs</code> directory.</p></li> <li>\n<p>Add the following to the application's <code class=\"prettyprint\">/res/xml/main.xml</code> file, with the <code class=\"prettyprint\">layout_height</code>, <code class=\"prettyprint\">layout_width</code> and <code class=\"prettyprint\">id</code> modified to suit the application:</p> <div class=\"highlight\"><pre>&lt;org.apache.cordova.CordovaWebView\nandroid:id=\"@+id/tutorialView\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\" /&gt;\n</pre></div>\n</li> <li>\n<p>Modify the activity so that it implements the <code class=\"prettyprint\">CordovaInterface</code>. It should implement the included methods. You may wish to copy them from <code class=\"prettyprint\">/framework/src/org/apache/cordova/CordovaActivity.java</code>, or else implement them on your own. The following code fragment shows a basic application that relies on the interface. Note how the referenced view id matches the <code class=\"prettyprint\">id</code> attribute specified in the XML fragment shown above:</p> <div class=\"highlight\"><pre>public class CordovaViewTestActivity extends Activity implements CordovaInterface {\nCordovaWebView cwv;\n/* Called when the activity is first created. */\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n   super.onCreate(savedInstanceState);\n   setContentView(R.layout.main);\n   cwv = (CordovaWebView) findViewById(R.id.tutorialView);\n   Config.init(this);\n   cwv.loadUrl(Config.getStartUrl());\n}\n</pre></div>\n</li> <li>\n<p>If the application needs to use the camera, implement the following:</p> <div class=\"highlight\"><pre>@Override\npublic void setActivityResultCallback(CordovaPlugin plugin) {\nthis.activityResultCallback = plugin;\n}\n/**\n * Launch an activity for which you would like a result when it finished. When this activity exits,\n * your onActivityResult() method is called.\n *\n * @param command           The command object\n * @param intent            The intent to start\n * @param requestCode       The request code that is passed to callback to identify the activity\n */\npublic void startActivityForResult(CordovaPlugin command, Intent intent, int requestCode) {\nthis.activityResultCallback = command;\nthis.activityResultKeepRunning = this.keepRunning;\n\n// If multitasking turned on, then disable it for activities that return results\nif (command != null) {\n   this.keepRunning = false;\n}\n\n// Start activity\nsuper.startActivityForResult(intent, requestCode);\n}   \n\n@Override\n/**\n * Called when an activity you launched exits, giving you the requestCode you started it with,\n * the resultCode it returned, and any additional data from it.\n *\n * @param requestCode       The request code originally supplied to startActivityForResult(),\n *                          allowing you to identify who this result came from.\n * @param resultCode        The integer result code returned by the child activity through its setResult().\n * @param data              An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\").\n */\nprotected void onActivityResult(int requestCode, int resultCode, Intent intent) {\nsuper.onActivityResult(requestCode, resultCode, intent);\nCordovaPlugin callback = this.activityResultCallback;\nif (callback != null) {\n   callback.onActivityResult(requestCode, resultCode, intent);\n}\n}\n</pre></div>\n</li> <li>\n<p>Finally, remember to add the thread pool, otherwise plugins have no threads on which to run:</p> <div class=\"highlight\"><pre>@Override\npublic ExecutorService getThreadPool() {\nreturn threadPool;\n}\n</pre></div>\n</li> <li><p>Copy the application's HTML and JavaScript files to the Android project's <code class=\"prettyprint\">/assets/www</code> directory.</p></li> <li><p>Copy the <code class=\"prettyprint\">config.xml</code> file from <code class=\"prettyprint\">/framework/res/xml</code> to the project's <code class=\"prettyprint\">/res/xml</code> directory.</p></li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/android/webview.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/android/webview.html</a>\n  </p>\n</div>\n","guide/platforms/android/config":"<h1>Android Configuration</h1> <p>The <code class=\"prettyprint\">config.xml</code> file controls an app's basic settings that apply across each application and CordovaWebView instance. This section details preferences that only apply to Android builds. See <a href=\"config_ref_index.md#The%20config.xml%20File\">The config.xml File</a> for information on global configuration options.</p> <ul> <li>\n<p><code class=\"prettyprint\">KeepRunning</code> (boolean, defaults to <code class=\"prettyprint\">true</code>): Determines whether the application stays running in the background even after a <code class=\"prettyprint\">[pause](../../../cordova/events/events.pause.html)</code> event fires. Setting this to <code class=\"prettyprint\">false</code> does not kill the app after a <code class=\"prettyprint\">[pause](../../../cordova/events/events.pause.html)</code> event, but simply halts execution of code within the cordova webview while the app is in the background.</p> <div class=\"highlight\"><pre>&lt;preference name=\"KeepRunning\" value=\"false\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">LoadUrlTimeoutValue</code> (number in milliseconds, default to <code class=\"prettyprint\">20000</code>, 20 seconds): When loading a page, the amount of time to wait before throwing a timeout error. This example specifies 10 seconds rather than 20:</p> <div class=\"highlight\"><pre>&lt;preference name=\"LoadUrlTimeoutValue\" value=\"10000\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">SplashScreen</code> (string, defaults to <code class=\"prettyprint\">splash</code>): The name of the file minus its extension in the <code class=\"prettyprint\">res/drawable</code> directory. Various assets must share this common name in various subdirectories.</p> <div class=\"highlight\"><pre>&lt;preference name=\"SplashScreen\" value=\"mySplash\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">SplashScreenDelay</code> (number in milliseconds, defaults to <code class=\"prettyprint\">3000</code>): The amount of time the splash screen image displays.</p> <div class=\"highlight\"><pre>&lt;preference name=\"SplashScreenDelay\" value=\"10000\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">InAppBrowserStorageEnabled</code> (boolean, defaults to <code class=\"prettyprint\">true</code>): Controls whether pages opened within an InAppBrowser can access the same localStorage and WebSQL storage as pages opened with the default browser.</p> <div class=\"highlight\"><pre>&lt;preference name=\"InAppBrowserStorageEnabled\" value=\"true\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">LoadingDialog</code> (string, defaults to <code class=\"prettyprint\">null</code>): If set, displays a dialog with the specified title and message, and a spinner, when loading the first page of an application. The title and message are separated by a comma in this value string, and that comma is removed before the dialog is displayed.</p> <div class=\"highlight\"><pre>&lt;preference name=\"LoadingDialog\" value=\"My Title,My Message\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">LoadingPageDialog</code> (string, defaults to <code class=\"prettyprint\">null</code>): The same as <code class=\"prettyprint\">LoadingDialog</code>, but for loading every page after the first page in the application.</p> <div class=\"highlight\"><pre>&lt;preference name=\"LoadingPageDialog\" value=\"My Title,My Message\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">ErrorUrl</code> (URL, defaults to <code class=\"prettyprint\">null</code>): If set, will display the referenced page upon an error in the application instead of a dialog with the title \"Application Error\".</p> <div class=\"highlight\"><pre>&lt;preference name=\"ErrorUrl\" value=\"myErrorPage.html\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">ShowTitle</code> (boolean, defaults to <code class=\"prettyprint\">false</code>): Show the title at the top of the screen.</p> <div class=\"highlight\"><pre>&lt;preference name=\"ShowTitle\" value=\"true\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">LogLevel</code> (string, defaults to <code class=\"prettyprint\">ERROR</code>): Sets the minimum log level through which log messages from your application will be filtered. Valid values are <code class=\"prettyprint\">ERROR</code>, <code class=\"prettyprint\">WARN</code>, <code class=\"prettyprint\">INFO</code>, <code class=\"prettyprint\">DEBUG</code>, and <code class=\"prettyprint\">VERBOSE</code>.</p> <div class=\"highlight\"><pre>&lt;preference name=\"LogLevel\" value=\"VERBOSE\"/&gt;\n</pre></div>\n</li> <li><p><code class=\"prettyprint\">SetFullscreen</code> (boolean, defaults to <code class=\"prettyprint\">false</code>): Same as the <code class=\"prettyprint\">Fullscreen</code> parameter in the global configuration of this xml file. This Android-specific element is deprecated in favor of the global <code class=\"prettyprint\">Fullscreen</code> element, and will be removed in a future version.</p></li> <li>\n<p><code class=\"prettyprint\">AndroidLaunchMode</code> (string, defaults to <code class=\"prettyprint\">singleTop</code>): Sets the Activity <code class=\"prettyprint\">android:launchMode</code> attribute. This changes what happens when the app is launched from app icon or intent and is already running. Valid values are <code class=\"prettyprint\">standard</code>, <code class=\"prettyprint\">singleTop</code>, <code class=\"prettyprint\">singleTask</code>, <code class=\"prettyprint\">singleInstance</code>.</p> <div class=\"highlight\"><pre>&lt;preference name=\"AndroidLaunchMode\" value=\"singleTop\"/&gt;\n</pre></div>\n</li> <li><p><code class=\"prettyprint\">DefaultVolumeStream</code> (string, defaults to <code class=\"prettyprint\">default</code>, added in cordova-android 3.7.0): Sets which volume the hardware volume buttons link to. By default this is \"call\" for phones and \"media\" for tablets. Set this to \"media\" to have your app's volume buttons always change the media volume. Note that when using Cordova's media plugin, the volume buttons will dynamically change to controlling the media volume when any Media objects are active.</p></li> <li>\n<p><code class=\"prettyprint\">OverrideUserAgent</code> (string, not set by default): If set, the value will replace the old UserAgent of webview. It is helpful to identify the request from app/browser when requesting remote pages. Use with caution, this may causes compitiable issue with web servers. For most cases, use AppendUserAgent instead.</p> <div class=\"highlight\"><pre>&lt;preference name=\"OverrideUserAgent\" value=\"Mozilla/5.0 My Browser\" /&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">AppendUserAgent</code> (string, not set by default): If set, the value will append to the end of old UserAgent of webview. When using with OverrideUserAgent, this value will be ignored.</p> <div class=\"highlight\"><pre>&lt;preference name=\"AppendUserAgent\" value=\"My Browser\" /&gt;\n</pre></div>\n</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/android/config.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/android/config.html</a>\n  </p>\n</div>\n","guide/platforms/android/plugin":"<h1>Android Plugins</h1> <p>This section provides details for how to implement native plugin code on the Android platform. Before reading this, see Application Plugins for an overview of the plugin's structure and its common JavaScript interface. This section continues to demonstrate the sample <em>echo</em> plugin that communicates from the Cordova webview to the native platform and back. For another sample, see also the comments in <a href=\"https://github.com/apache/cordova-android/blob/master/framework/src/org/apache/cordova/CordovaPlugin.java\">CordovaPlugin.java</a>.</p> <p>Android plugins are based on Cordova-Android, which consists of an Android WebView with hooks attached to it. Plugins are represented as class mappings in the <code class=\"prettyprint\">config.xml</code> file. A plugin consists of at least one Java class that extends the <code class=\"prettyprint\">CordovaPlugin</code> class, overriding one of its <code class=\"prettyprint\">execute</code> methods. As best practice, the plugin should also handle <code class=\"prettyprint\">[pause](../../../cordova/events/events.pause.html)</code> and <code class=\"prettyprint\">[resume](../../../cordova/events/events.resume.html)</code> events, along with any message passing between plugins. Plugins with long-running requests, background activity such as media playback, listeners, or internal state should implement the <code class=\"prettyprint\">onReset()</code> method as well. It executes when the <code class=\"prettyprint\">WebView</code> navigates to a new page or refreshes, which reloads the JavaScript.</p> <h2>Plugin Class Mapping</h2> <p>The plugin's JavaScript interface uses the <code class=\"prettyprint\">cordova.exec</code> method as follows:</p> <div class=\"highlight\"><pre>exec(&lt;successFunction&gt;, &lt;failFunction&gt;, &lt;service&gt;, &lt;action&gt;, [&lt;args&gt;]);\n</pre></div> <p>This marshals a request from the WebView to the Android native side, effectively calling the <code class=\"prettyprint\">action</code> method on the <code class=\"prettyprint\">service</code> class, with additional arguments passed in the <code class=\"prettyprint\">args</code> array.</p> <p>Whether you distribute a plugin as Java file or as a <em>jar</em> file of its own, the plugin must be specified in your Cordova-Android application's <code class=\"prettyprint\">res/xml/config.xml</code> file. See Application Plugins for more information on how to use the <code class=\"prettyprint\">plugin.xml</code> file to inject this <code class=\"prettyprint\">feature</code> element:</p> <div class=\"highlight\"><pre>&lt;feature name=\"&lt;service_name&gt;\"&gt;\n   &lt;param name=\"android-package\" value=\"&lt;full_name_including_namespace&gt;\" /&gt;\n&lt;/feature&gt;\n</pre></div> <p>The service name matches the one used in the JavaScript <code class=\"prettyprint\">exec</code> call. The value is the Java class's fully qualified namespace identifier. Otherwise, the plugin may compile but still be unavailable to Cordova.</p> <h2>Plugin Initialization and Lifetime</h2> <p>One instance of a plugin object is created for the life of each <code class=\"prettyprint\">WebView</code>. Plugins are not instantiated until they are first referenced by a call from JavaScript, unless <code class=\"prettyprint\">&lt;param&gt;</code> with an <code class=\"prettyprint\">onload</code> <code class=\"prettyprint\">name</code> attribute is set to <code class=\"prettyprint\">\"true\"</code> in <code class=\"prettyprint\">config.xml</code>. E.g.:</p> <div class=\"highlight\"><pre>&lt;feature name=\"Echo\"&gt;\n&lt;param name=\"android-package\" value=\"&lt;full_name_including_namespace&gt;\" /&gt;\n&lt;param name=\"onload\" value=\"true\" /&gt;\n&lt;/feature&gt;\n</pre></div> <p>Plugins should use the <code class=\"prettyprint\">initialize</code> method for their start-up logic.</p> <div class=\"highlight\"><pre>@Override\npublic void initialize(CordovaInterface cordova, CordovaWebView webView) {\nsuper.initialize(cordova, webView);\n// your init code here\n}\n</pre></div> <h2>Writing an Android Java Plugin</h2> <p>A JavaScript call fires off a plugin request to the native side, and the corresponding Java plugin is mapped properly in the <code class=\"prettyprint\">config.xml</code> file, but what does the final Android Java Plugin class look like? Whatever is dispatched to the plugin with JavaScript's <code class=\"prettyprint\">exec</code> function is passed into the plugin class's <code class=\"prettyprint\">execute</code> method. Most <code class=\"prettyprint\">execute</code> implementations look like this:</p> <div class=\"highlight\"><pre>@Override\npublic boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {\n   if (\"beep\".equals(action)) {\n       this.beep(args.getLong(0));\n       callbackContext.success();\n       return true;\n   }\n   return false;  // Returning false results in a \"MethodNotFound\" error.\n}\n</pre></div> <p>The JavaScript <code class=\"prettyprint\">exec</code> function's <code class=\"prettyprint\">action</code> parameter corresponds to a private class method to dispatch with optional parameters.</p> <p>When catching exceptions and returning errors, it's important for the sake of clarity that errors returned to JavaScript match Java's exception names as much as possible.</p> <h2>Threading</h2> <p>The plugin's JavaScript does <em>not</em> run in the main thread of the <code class=\"prettyprint\">WebView</code> interface; instead, it runs on the <code class=\"prettyprint\">WebCore</code> thread, as does the <code class=\"prettyprint\">execute</code> method. If you need to interact with the user interface, you should use the following variation:</p> <div class=\"highlight\"><pre>@Override\npublic boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException {\n   if (\"beep\".equals(action)) {\n       final long duration = args.getLong(0);\n       cordova.getActivity().runOnUiThread(new Runnable() {\n           public void run() {\n               ...\n               callbackContext.success(); // Thread-safe.\n           }\n       });\n       return true;\n   }\n   return false;\n}\n</pre></div> <p>Use the following if you do not need to run on the main interface's thread, but do not want to block the <code class=\"prettyprint\">WebCore</code> thread either:</p> <div class=\"highlight\"><pre>@Override\npublic boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException {\n   if (\"beep\".equals(action)) {\n       final long duration = args.getLong(0);\n       cordova.getThreadPool().execute(new Runnable() {\n           public void run() {\n               ...\n               callbackContext.success(); // Thread-safe.\n           }\n       });\n       return true;\n   }\n   return false;\n}\n</pre></div> <h2>Adding Dependency Libraries</h2> <p>If a plugin requires additional libraries to work, you can use one of the following approaches to add them via <code class=\"prettyprint\">config.xml</code>.</p> <p>Option A. Via <em>Gradle</em> reference, for example:</p> <div class=\"highlight\"><pre>&lt;framework src=\"com.android.support:support-v4:+\" /&gt;\n</pre></div> <p>This is a recommended approach as it allows multiple plugins to refer to the same dependency library such as <em>gson</em>, <em>android-support-v4</em>, <em>google-play-services</em>, etc and <em>Gradle</em> will resolve duplicate dependencies using its <a href=\"https://docs.gradle.org/current/userguide/dependency_management.html\">Dependency Management logic</a>.</p> <p>Option B. As <em>JAR</em> files placed to some plugin's folder and linked using <code class=\"prettyprint\">lib-file</code>, for example:</p> <div class=\"highlight\"><pre>&lt;lib-file src=\"src/android/libs/gcm.jar\"/&gt;\n</pre></div> <p>We recommend using this approach only if you are sure that dependency jar is plugin specific and won't be used by other plugins. Otherwise, there will be platform build issue.</p> <h2>Echo Android Plugin Example</h2> <p>To match the JavaScript interface's <em>echo</em> feature described in Application Plugins, use the <code class=\"prettyprint\">plugin.xml</code> to inject a <code class=\"prettyprint\">feature</code> specification to the local platform's <code class=\"prettyprint\">config.xml</code> file:</p> <div class=\"highlight\"><pre>&lt;platform name=\"android\"&gt;\n   &lt;config-file target=\"config.xml\" parent=\"/*\"&gt;\n       &lt;feature name=\"Echo\"&gt;\n           &lt;param name=\"android-package\" value=\"org.apache.cordova.plugin.Echo\"/&gt;\n       &lt;/feature&gt;\n   &lt;/config-file&gt;\n&lt;/platform&gt;\n</pre></div> <p>Then add the following to the <code class=\"prettyprint\">src/org/apache/cordova/plugin/Echo.java</code> file:</p> <div class=\"highlight\"><pre>package org.apache.cordova.plugin;\n\nimport org.apache.cordova.CordovaPlugin;\nimport org.apache.cordova.CallbackContext;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\n/**\n* This class echoes a string called from JavaScript.\n*/\npublic class Echo extends CordovaPlugin {\n\n   @Override\n   public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {\n       if (action.equals(\"echo\")) {\n           String message = args.getString(0);\n           this.echo(message, callbackContext);\n           return true;\n       }\n       return false;\n   }\n\n   private void echo(String message, CallbackContext callbackContext) {\n       if (message != null &amp;&amp; message.length() &gt; 0) {\n           callbackContext.success(message);\n       } else {\n           callbackContext.error(\"Expected one non-empty string argument.\");\n       }\n   }\n}\n</pre></div> <p>The necessary imports at the top of the file extends the class from <code class=\"prettyprint\">CordovaPlugin</code>, whose <code class=\"prettyprint\">execute()</code> method it overrides to receive messages from <code class=\"prettyprint\">exec()</code>. The <code class=\"prettyprint\">execute()</code> method first tests the value of <code class=\"prettyprint\">action</code>, for which in this case there is only one valid <code class=\"prettyprint\">echo</code> value. Any other action returns <code class=\"prettyprint\">false</code> and results in an <code class=\"prettyprint\">INVALID_ACTION</code> error, which translates to an error callback invoked on the JavaScript side.</p> <p>Next, the method retrieves the echo string using the <code class=\"prettyprint\">args</code> object's <code class=\"prettyprint\">getString</code> method, specifying the first parameter passed to the method. After the value is passed to a private <code class=\"prettyprint\">echo</code> method, it is parameter-checked to make sure it is not <code class=\"prettyprint\">null</code> or an empty string, in which case <code class=\"prettyprint\">callbackContext.error()</code> invokes JavaScript's error callback. If the various checks pass, the <code class=\"prettyprint\">callbackContext.success()</code> passes the original <code class=\"prettyprint\">message</code> string back to JavaScript's success callback as a parameter.</p> <h2>Android Integration</h2> <p>Android features an <code class=\"prettyprint\">Intent</code> system that allows processes to communicate with each other. Plugins have access to a <code class=\"prettyprint\">CordovaInterface</code> object, which can access the Android <code class=\"prettyprint\">Activity</code> that runs the application. This is the <code class=\"prettyprint\">Context</code> required to launch a new Android <code class=\"prettyprint\">Intent</code>. The <code class=\"prettyprint\">CordovaInterface</code> allows plugins to start an <code class=\"prettyprint\">Activity</code> for a result, and to set the callback plugin for when the <code class=\"prettyprint\">Intent</code> returns to the application.</p> <p>As of Cordova 2.0, Plugins can no longer directly access the <code class=\"prettyprint\">Context</code>, and the legacy <code class=\"prettyprint\">ctx</code> member is deprecated. All <code class=\"prettyprint\">ctx</code> methods exist on the <code class=\"prettyprint\">Context</code>, so both <code class=\"prettyprint\">getContext()</code> and <code class=\"prettyprint\">getActivity()</code> can return the required object.</p> <h2>Android Permissions</h2> <p>Android permissions until recently have been handled at install-time instead of runtime. These permissions are required to be declared on an application that uses the permissions, and these permissions need to be added to the Android Manifest. This can be accomplished by using the config.xml to inject these permissions in the AndroidManifest.xml file. The example below uses the Contacts permission.</p> <div class=\"highlight\"><pre>&lt;config-file target=\"AndroidManifest.xml\" parent=\"/*\"&gt;\n   &lt;uses-permission android:name=\"android.permission.READ_CONTACTS\" /&gt;\n&lt;/config-file&gt;\n</pre></div> <h2>Android Permissions (Cordova-Android 5.0.x and greater)</h2> <p>Android 6.0 \"Marshmallow\" introduced a new permissions model where the user can turn on and off permissions as necessary. This means that applications must handle these permission changes to be future-proof, which was the focus of the Cordova-Android 5.0 release.</p> <p>The permissions that need to be handled at runtime can be found in the Android Developer documentation <a href=\"http://developer.android.com/guide/topics/security/permissions.html#perm-groups\">here</a>.</p> <p>As far as a plugin is concerned, the permission can be requested by calling the permission method, which signature is as follows:</p> <div class=\"highlight\"><pre>cordova.reqquestPermission(CordovaPlugin plugin, int requestCode, String permission);\n</pre></div> <p>To cut down on verbosity, it's standard practice to assign this to a local static variable:</p> <div class=\"highlight\"><pre>public static final String READ = Manifest.permission.READ_CONTACTS;\n</pre></div> <p>It is also standard practice to define the requestCode as follows:</p> <div class=\"highlight\"><pre>public static final int SEARCH_REQ_CODE = 0;\n</pre></div> <p>Then, in the exec method, the permission should be checked:</p> <div class=\"highlight\"><pre>   if(cordova.hasPermission(READ)) {\n       search(executeArgs);\n   }\n   else\n   {\n       getReadPermission(SEARCH_REQ_CODE);\n   }\n</pre></div> <p>In this case, we just call requestPermission:</p> <div class=\"highlight\"><pre>protected void getReadPermission(int requestCode)\n{\ncordova.requestPermission(this, requestCode, READ);\n}\n</pre></div> <p>This will call the activity and cause a prompt to appear asking for the permission. Once the user has the permission, the result must be handled with the onRequestPermissionResult method, which every plugin should override. An example of this can be found below:</p> <div class=\"highlight\"><pre>public void onRequestPermissionResult(int requestCode, String[] permissions,\n                                    int[] grantResults) throws JSONException\n{\nfor(int r:grantResults)\n{\n   if(r == PackageManager.PERMISSION_DENIED)\n   {\n       this.callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.ERROR, PERMISSION_DENIED_ERROR));\n       return;\n   }\n}\nswitch(requestCode)\n{\n   case SEARCH_REQ_CODE:\n       search(executeArgs);\n       break;\n   case SAVE_REQ_CODE:\n       save(executeArgs);\n       break;\n   case REMOVE_REQ_CODE:\n       remove(executeArgs);\n       break;\n}\n}\n</pre></div> <p>The switch statement above would return from the prompt and depending on the requestCode that was passed in, it would call the method. It should be noted that permission prompts may stack if the execution is not handled correctly, and that this should be avoided.</p> <p>In addition to asking for permission for a single permission, it is also possible to request permissions for an entire group by defining the permissions array, as what is done with the Geolocation plugin:</p> <div class=\"highlight\"><pre>String [] permissions = { Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION };\n</pre></div> <p>Then when requesting the permission, all that needs to be done is the following:</p> <div class=\"highlight\"><pre>cordova.requestPermissions(this, 0, permissions);\n</pre></div> <p>This requests the permissions specified in the array. It's a good idea to provide a publicly accessible permissions array since this can be used by plugins that use your plugin as a dependency, although this is not required.</p> <h2>Debugging Android Plugins</h2> <p>Android debugging can be done with either Eclipse or Android Studio, although Android studio is recommended. Since Cordova-Android is currently used as a library project, and plugins are supported as source code, it is possible to debug the Java code inside a Cordova application just like a native Android application.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/android/plugin.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/android/plugin.html</a>\n  </p>\n</div>\n","guide/platforms/blackberry10/tools":"<h1>BlackBerry 10 Shell Tool Guide</h1> <p>The <code class=\"prettyprint\">cordova</code> command-line utility is a high-level tool that allows you to build applications across several platforms at once. An older version of the Cordova framework provides sets of command-line tools specific to each platform. To use them as an alternative to the CLI, you need to download this version of Cordova from <a href=\"http://cordova.apache.org\">cordova.apache.org</a>. The download contains separate archives for each platform. Expand the platform you wish to target. The tools described here are typically available in the top-level <code class=\"prettyprint\">bin</code> directory, otherwise consult the <strong>README</strong> file for more detailed directions.</p> <p>For information on the low-level command-line interface that enables plugins, see <a href=\"../../../plugin_ref/plugman\">Using Plugman to Manage Plugins</a>. See Application Plugins for details on how to develop plugins.</p> <p>If you need help with any command listed below, type the command along with the <code class=\"prettyprint\">-h</code> or <code class=\"prettyprint\">-help</code> arguments, which are supported by all commands and which provide descriptions for each of the available arguments.</p> <h2>Create an App</h2> <p>The <code class=\"prettyprint\">create</code> command creates a new project:</p> <div class=\"highlight\"><pre>bin/create &lt;path-to-project&gt; &lt;project-package&gt; &lt;project-name&gt;\n</pre></div> <p>where</p> <ul> <li><p><code class=\"prettyprint\">&lt;path-to-project&gt;</code> specifies the directory you want the project created in</p></li> <li><p><code class=\"prettyprint\">&lt;project-package&gt;</code> specifies a reverse domain style identifier</p></li> <li><p><code class=\"prettyprint\">&lt;project-name&gt;</code> specifies the apps display name</p></li> </ul> <p><strong>NOTE</strong>: the <code class=\"prettyprint\">create</code> command bootstraps dependency installation through the <code class=\"prettyprint\">npm install</code> command. Depending on the installation directory and system permissions, this may require administrator privileges. If there's problem on OSX/Linux, run <code class=\"prettyprint\">sudo npm install</code> before using the <code class=\"prettyprint\">create</code> command. On Windows, run <code class=\"prettyprint\">npm install</code> in a command-line utility opened with administrator privileges.</p> <h2>Create a Target</h2> <p>The <code class=\"prettyprint\">target</code> command allows you to manage the emulator or BlackBerry devices that you use to test the app. You can add or remove a target, or set a target as the default target.</p> <h3>Add a Target</h3> <div class=\"highlight\"><pre>&lt;path-to-project&gt;/cordova/target add &lt;name&gt; &lt;ip-address&gt; [-t | --type &lt;device | simulator&gt;] [-p | --password &lt;password&gt;] [--pin &lt;device-pin&gt;]\n</pre></div> <p>where</p> <ul> <li><p><code class=\"prettyprint\">&lt;name&gt;</code> specifies a unique name for the target.</p></li> <li><p><code class=\"prettyprint\">&lt;ip-address&gt;</code> specifies the ip address of the BlackBerry device or simulator.</p></li> <li><p><code class=\"prettyprint\">-p | --password &lt;password&gt;</code> specifies the password for the device or emulator. This is required only if the device or emulator is password protected.</p></li> <li><p><code class=\"prettyprint\">--pin &lt;device-pin&gt;</code> specifies the PIN of the BlackBerry device, which identifies that device as a valid host for the debug token. This argument is required only when creating a debug token.</p></li> </ul> <h3>Remove a Target</h3> <div class=\"highlight\"><pre>&lt;path-to-project&gt;/cordova/target remove &lt;name&gt;\n</pre></div> <h3>Set a Target as the Default</h3> <div class=\"highlight\"><pre>&lt;path-to-project&gt;/cordova/target default &lt;name&gt;\n</pre></div> <h2>Build the App</h2> <p>The <code class=\"prettyprint\">build</code> command builds the project as a .bar file. You can build the app in either release mode (which produces a signed .bar file) or in debug mode (which produces an unsigned .bar file).</p> <h3>Build the App in Release Mode</h3> <div class=\"highlight\"><pre>&lt;path-to-project&gt;/cordova/build release [-k | --keystorepass &lt;password&gt;] [-b | --buildId &lt;number&gt;] [-p | --params &lt;params-JSON-file&gt;]\n</pre></div> <p>where</p> <ul> <li><p><code class=\"prettyprint\">-k | --keystorepass &lt;password&gt;</code> specifies the password you defined when you configured your computer to sign applications.</p></li> <li><p><code class=\"prettyprint\">-b | --buildId &lt;number&gt;</code> specifies the build version number of your application. Typically, this number should be incremented from the previous signed version. This argument is optional.</p></li> <li><p><code class=\"prettyprint\">-p | --params &lt;params-JSON-file&gt;</code> specifies a JSON file containing additional parameters to pass to downstream tools. This argument is optional.</p></li> </ul> <h3>Build the Project in Debug Mode</h3> <div class=\"highlight\"><pre>&lt;path-to-project&gt;/cordova/build debug [&lt;target&gt;] [-k | --keystorepass &lt;password&gt;] [-p | --params &lt;params-JSON-file&gt;]  [-ll | --loglevel &lt;error|warn|verbose&gt;]\n</pre></div> <p>where</p> <ul> <li><p><code class=\"prettyprint\">&lt;target&gt;</code> specifies the name of a previously added target. If <code class=\"prettyprint\">&lt;target&gt;</code> is not specified, the default target is used, if one has been created. This argument is only required if you want the script to deploy the app to a BlackBerry device or emulator and you have not created a default target. Additionally, if <code class=\"prettyprint\">&lt;target&gt;</code> is a device, then that device must be connected to your computer by USB connection or be connected to the same Wi-Fi network as your computer.</p></li> <li><p><code class=\"prettyprint\">-k | --keystorepass &lt;password&gt;</code> specifies the password you defined when you configured your computer to sign applications. This password is also used to create your debug token. This argument is only required if you want the script to create and install the debug token for you.</p></li> <li><p><code class=\"prettyprint\">-p | --params &lt;params-JSON-file&gt;</code> specifies a JSON file containing additional parameters to pass to downstream tools.</p></li> <li><p><code class=\"prettyprint\">-ll | --loglevel &lt;level&gt;</code> specifies the log level. The log level may be one of <code class=\"prettyprint\">error</code>, <code class=\"prettyprint\">warn</code>, or <code class=\"prettyprint\">verbose</code>.</p></li> </ul> <p>If you have previously defined a default target (and previously installed a debug token, if that target is a BlackBerry device), you can run the script with no arguments, and the script packages your app and deploys it to the default target. For example:</p> <div class=\"highlight\"><pre>&lt;path-to-project&gt;/cordova/build debug\n</pre></div> <h2>Run the App</h2> <p>The <code class=\"prettyprint\">run</code> command deploys the app's most recent build on the specified BlackBerry device or an emulator. To deploy your app, you need to specify a target for the device or emulator:</p> <div class=\"highlight\"><pre>&lt;path-to-project&gt;/cordova/run &lt;target&gt;\n</pre></div> <p>...where <code class=\"prettyprint\">&lt;target&gt;</code>specifies the name of a previously added target. If <code class=\"prettyprint\">&lt;target&gt;</code> is a device, then it must be connected to your computer via USB cable, or else over the same Wi-Fi network as your computer.</p> <h2>Handle Plugins</h2> <p>The <code class=\"prettyprint\">target</code> command allows you to add and remove plugins. To fetch a locally hosted plugin:</p> <div class=\"highlight\"><pre>&lt;path-to-project&gt;/cordova/plugin fetch &lt;path-to-plugin&gt;\n</pre></div> <p>View a list of installed plugins:</p> <div class=\"highlight\"><pre>&lt;path-to-project&gt;/cordova/plugin ls\n</pre></div> <p>Add a plugin:</p> <div class=\"highlight\"><pre>&lt;path-to-project&gt;/cordova/plugin add &lt;name&gt;\n</pre></div> <p>Remove a plugin:</p> <div class=\"highlight\"><pre>&lt;path-to-project&gt;/cordova/plugin rm &lt;name&gt;\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/blackberry10/tools.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/blackberry10/tools.html</a>\n  </p>\n</div>\n","guide/platforms/blackberry10/config":"<h1>BlackBerry 10 Configuration</h1> <p>The <code class=\"prettyprint\">config.xml</code> file controls an app's basic settings that apply across each application and CordovaWebView instance. This section details preferences that only apply to BlackBerry 10 builds. See <a href=\"config_ref_index.md#The%20config.xml%20File\">The config.xml File</a> for information on global configuration options.</p> <ul> <li>\n<p><code class=\"prettyprint\">ChildBrowser</code> (<code class=\"prettyprint\">disable</code> or the default <code class=\"prettyprint\">enable</code>): Disables child browser windows. By default, apps launch a secondary browser window to display resources accessed via <code class=\"prettyprint\">window.open()</code> or by specifying a <code class=\"prettyprint\">_blank</code> anchor target. Specify <code class=\"prettyprint\">disable</code> to override this default behavior.</p> <div class=\"highlight\"><pre>&lt;preference name=\"ChildBrowser\" value=\"disable\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">PopupBlocker</code> (<code class=\"prettyprint\">enable</code> or the default <code class=\"prettyprint\">disable</code>): Enables the popup blocker, which prevents calls to <code class=\"prettyprint\">window.open()</code>. By default, popups display in a child browser window. Setting the preference to <code class=\"prettyprint\">enable</code> prevents it from displaying at all.</p> <div class=\"highlight\"><pre>&lt;preference name=\"PopupBlocker\" value=\"enable\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">WebSecurity</code> (<code class=\"prettyprint\">disable</code> or the default <code class=\"prettyprint\">enable</code>): Set to <code class=\"prettyprint\">disable</code> to override web security settings, allowing access to remote content from unknown sources. This preference is intended as a development convenience only, so remove it before packaging the app for distribution. For the released app, all URIs should be known and whitelisted using the <code class=\"prettyprint\">&lt;access&gt;</code> element, described in the Domain <a href=\"../../appdev/whitelist/index\">Whitelist Guide</a>.</p> <div class=\"highlight\"><pre>&lt;preference name=\"WebSecurity\" value=\"disable\"/&gt;\n</pre></div>\n</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/blackberry10/config.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/blackberry10/config.html</a>\n  </p>\n</div>\n","guide/platforms/android/upgrade":"<h1>Upgrading Android</h1> <p>This guide shows how to modify Android projects to upgrade from older versions of Cordova. Most of these instructions apply to projects created with an older set of command-line tools that precede the <code class=\"prettyprint\">cordova</code> CLI utility. See <a href=\"../../cli/index\">The Command-Line Interface</a> for information how to update the version of the CLI.</p> <h2>Upgrading to 4.0.0</h2> <p>There are specific upgrade steps required to take advantage of the significant changes in 4.0.0. First, the common upgrade steps are needed as below.</p> <p>For non-CLI projects, run:</p> <div class=\"highlight\"><pre>bin/update path/to/project\n</pre></div> <p>For CLI projects:</p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update android</code> in your existing projects.</p></li> </ol> <h3>Upgrading the Whitelist</h3> <p>All whitelist functionality is now implemented via plugin. Without a plugin, your app is no longer protected by a whitelist after upgrading to 4.0.0. Cordova has two whitelist plugins, which provide different levels of protection.</p> <ol> <li>\n<p>The <code class=\"prettyprint\">cordova-plugin-whitelist</code> plugin <em>(RECOMMENDED)</em></p> <ul> <li>This plugin is highly recommended, as it is more secure and configurable than the whitelist in previous versions</li> <li>See <a href=\"https://github.com/apache/cordova-plugin-whitelist\">cordova-plugin-whitelist</a> for details on the configuration changes required</li> <li>Run: <code class=\"prettyprint\">cordova plugin add cordova-plugin-crosswalk-webview</code>\n</li> </ul>\n</li> <li>\n<p>The <code class=\"prettyprint\">cordova-plugin-legacy-whitelist</code> plugin</p> <ul> <li>This plugin provides the same whitelist behaviour as previous versions. See <a href=\"https://github.com/apache/cordova-plugin-legacy-whitelist\">cordova-plugin-legacy-whitelist</a>\n</li> <li>No configuration changes are required, but it provides less protection than the recommended plugin</li> <li>Run: <code class=\"prettyprint\">cordova plugin add cordova-plugin-legacy-whitelist</code>\n</li> </ul>\n</li> </ol> <h3>Using the Crosswalk WebView</h3> <p>By default, your app will continue to use the system WebView provided by the device. If you wish to use the Crosswalk WebView instead, simply add the Crosswalk plugin:</p> <div class=\"highlight\"><pre>cordova plugin add cordova-plugin-crosswalk-webview\n</pre></div> <p>Upon adding the plugin, your app will get the Crosswalk WebView installed and configured correctly.</p> <h3>Upgrading to the Splashscreen Plugin</h3> <p>If your app makes use of a splash screen, that functionality has been moved to a plugin. The configuration options for splash screens are unchanged. The only upgrade step required is to add the plugin:</p> <div class=\"highlight\"><pre>cordova plugin add cordova-plugin-splashscreen\n</pre></div> <h2>Upgrading to 3.7.1 from 3.6.0</h2> <p>For non-CLI projects, run:</p> <div class=\"highlight\"><pre>bin/update path/to/project\n</pre></div> <p>For CLI projects:</p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update android</code> in your existing projects.</p></li> </ol> <h2>Upgrading to 3.3.0 from 3.2.0</h2> <p>Follow the same instructions as for <code class=\"prettyprint\">3.2.0</code>.</p> <p>Starting with 3.3.0, the Cordova runtime is now compiled as an Android Library instead of a Jar. This should have no effect for command-line usage, but IDE users will need to import the newly added <code class=\"prettyprint\">MyProject-CordovaLib</code> project into their workspace.</p> <h2>Upgrading to 3.2.0 from 3.1.0</h2> <p>For projects that were created with the cordova CLI: </p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update android</code></p></li> </ol> <p>For projects not created with the cordova CLI, run:</p> <div class=\"highlight\"><pre>bin/update &lt;project_path&gt;\n</pre></div> <p><strong>WARNING:</strong> On Android 4.4 - Android 4.4.3, creating a file input element with type=\"file\" will not open the file picker dialog. This is a regression with Chromium on Android and the problem can be reproduced in the standalone Chrome browser on Android (see http://code.google.com/p/android/issues/detail?id=62220) The suggested workaround is to use the FileTransfer and File plugins for Android 4.4. You can listen for an onClick event from the input type=\"file\" and then pop up a file picker UI. In order to tie the form data with the upload, you can use JavaScript to attach form values to the multi-part POST request that FileTransfer makes.</p> <h2>Upgrading to 3.1.0 from 3.0.0</h2> <p>For projects that were created with the cordova CLI: </p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update android</code></p></li> </ol> <p>For projects not created with the cordova CLI, run:</p> <div class=\"highlight\"><pre>bin/update &lt;project_path&gt;\n</pre></div> <h2>Upgrade to the CLI (3.0.0) from 2.9.0</h2> <ol> <li><p>Create a new Apache Cordova 3.0.0 project using the cordova CLI, as described in <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Add your platforms the cordova project, for example: <code class=\"prettyprint\">cordova\nplatform add android</code>.</p></li> <li><p>Copy the contents of your project's <code class=\"prettyprint\">www</code> directory to the <code class=\"prettyprint\">www</code> directory at the root of the cordova project you just created.</p></li> <li><p>Copy any native assets from your old project into the appropriate directories under <code class=\"prettyprint\">platforms/android</code>: this directory is where your native cordova-android project exists.</p></li> <li><p>Use the cordova CLI tool to install any plugins you need. Note that the CLI handles all core APIs as plugins, so they may need to be added. Only 3.0.0 plugins are compatible with the CLI.</p></li> </ol> <h2>Upgrade to 3.0.0 from 2.9.0</h2> <ol> <li><p>Create a new Apache Cordova Android project.</p></li> <li><p>Copy the contents of the <code class=\"prettyprint\">www</code> directory to the new project.</p></li> <li><p>Copy any native Android assets from the <code class=\"prettyprint\">res</code> directory to the new project.</p></li> <li><p>Copy over any plugins you installed from the <code class=\"prettyprint\">src</code> subdirectories into the new project.</p></li> <li><p>Make sure to upgrade any deprecated <code class=\"prettyprint\">&lt;plugin&gt;</code> references from your old <code class=\"prettyprint\">config.xml</code> file to the new <code class=\"prettyprint\">&lt;feature&gt;</code> specification.</p></li> <li><p>Update any references to the <code class=\"prettyprint\">org.apache.cordova.api</code> package to be <code class=\"prettyprint\">org.apache.cordova</code>.</p></li> </ol> <p><strong>NOTE</strong>: all core APIs have been removed and must be installed as plugins. Please see the <a href=\"../../../plugin_ref/plugman\">Using Plugman to Manage Plugins</a> Guide for details.</p> <h2>Upgrade to 2.9.0 from 2.8.0</h2> <ol> <li>Run <code class=\"prettyprint\">bin/update &lt;project_path&gt;</code>.</li> </ol> <h2>Upgrade to 2.8.0 from 2.7.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-2.7.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-2.8.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> </ol>  <ol> <li><p>Copy the new <code class=\"prettyprint\">cordova.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">res/xml/config.xml</code> file to match <code class=\"prettyprint\">framework/res/xml/config.xml</code>.</p></li> <li><p>Update <code class=\"prettyprint\">framework/res/xml/config.xml</code> to have similar settings as it did previously.</p></li> <li><p>Copy files from <code class=\"prettyprint\">bin/templates/cordova</code> to the project's <code class=\"prettyprint\">cordova</code> directory.</p></li> </ol> <h2>Upgrade to 2.7.0 from 2.6.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-2.6.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-2.7.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-2.7.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.7.0.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">res/xml/config.xml</code> to match <code class=\"prettyprint\">framework/res/xml/config.xml</code>.</p></li> <li><p>Update <code class=\"prettyprint\">framework/res/xml/config.xml</code> to have similar settings as it did previously.</p></li> <li><p>Copy files from <code class=\"prettyprint\">bin/templates/cordova</code> to the project's <code class=\"prettyprint\">cordova</code> directory.</p></li> </ol> <h2>Upgrade to 2.6.0 from 2.5.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-2.5.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-2.6.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-2.6.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.6.0.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">res/xml/config.xml</code> to match <code class=\"prettyprint\">framework/res/xml/config.xml</code>.</p></li> <li><p>Update <code class=\"prettyprint\">framework/res/xml/config.xml</code> to have similar settings as it did previously.</p></li> <li><p>Copy files from <code class=\"prettyprint\">bin/templates/cordova</code> to the project's <code class=\"prettyprint\">cordova</code> directory.</p></li> </ol> <p>Run <code class=\"prettyprint\">bin/update &lt;project&gt;</code> with the project path listed in the Cordova Source directory.</p> <h2>Upgrade to 2.5.0 from 2.4.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-2.4.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-2.5.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-2.5.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.5.0.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">res/xml/config.xml</code> to match <code class=\"prettyprint\">framework/res/xml/config.xml</code>.</p></li> <li><p>Update <code class=\"prettyprint\">framework/res/xml/config.xml</code> to have similar settings as it did previously.</p></li> <li><p>Copy files from <code class=\"prettyprint\">bin/templates/cordova</code> to the project's <code class=\"prettyprint\">cordova</code> directory.</p></li> </ol> <h2>Upgrade to 2.4.0 from 2.3.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-2.3.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-2.4.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-2.4.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.4.0.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">res/xml/config.xml</code> to match <code class=\"prettyprint\">framework/res/xml/config.xml</code>.</p></li> <li><p>Copy files from <code class=\"prettyprint\">bin/templates/cordova</code> to the project's <code class=\"prettyprint\">cordova</code> directory.</p></li> </ol> <h2>Upgrade to 2.3.0 from 2.2.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-2.2.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-2.3.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-2.3.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.3.0.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">res/xml/config.xml</code> to match <code class=\"prettyprint\">framework/res/xml/config.xml</code>.</p></li> <li><p>Copy files from <code class=\"prettyprint\">bin/templates/cordova</code> to the project's <code class=\"prettyprint\">cordova</code> directory.</p></li> </ol> <h2>Upgrade to 2.2.0 from 2.1.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-2.1.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-2.2.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-2.2.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.2.0.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">res/xml/config.xml</code> to match <code class=\"prettyprint\">framework/res/xml/config.xml</code>.</p></li> <li><p>Copy files from <code class=\"prettyprint\">bin/templates/cordova</code> to the project's <code class=\"prettyprint\">cordova</code> directory.</p></li> </ol> <h2>Upgrade to 2.1.0 from 2.0.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-2.0.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-2.1.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-2.1.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.1.0.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">res/xml/config.xml</code> to match <code class=\"prettyprint\">framework/res/xml/config.xml</code>.</p></li> <li><p>Copy files from <code class=\"prettyprint\">bin/templates/cordova</code> to the project's <code class=\"prettyprint\">cordova</code> directory.</p></li> </ol> <h2>Upgrade to 2.0.0 from 1.9.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-1.9.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-2.0.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-2.0.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.0.0.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">res/xml/config.xml</code> to match <code class=\"prettyprint\">framework/res/xml/config.xml</code>.</p></li> </ol> <p>In the 2.0.0 release, the <code class=\"prettyprint\">config.xml</code> file combines and replaces <code class=\"prettyprint\">cordova.xml</code> and <code class=\"prettyprint\">plugins.xml</code>. The old files are deprecated, and while they still work in 2.0.0, will stop working in a future release.</p> <h2>Upgrade to 1.9.0 from 1.8.1</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-1.8.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-1.9.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-1.9.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-1.9.0.js</code> file.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> </ol> <p>Due to the introduction of the <code class=\"prettyprint\">CordovaWebView</code> in the 1.9.0 release, third-party plugins may not work. These plugins need to get a context from the <code class=\"prettyprint\">CordovaInterface</code> using <code class=\"prettyprint\">getContext()</code> or <code class=\"prettyprint\">getActivity()</code>. If you are not an experienced Android developer, please contact the plugin maintainer and add this task to their bug tracker.</p> <h2>Upgrade to 1.8.0 from 1.8.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-1.8.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-1.8.1.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-1.8.1.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-1.8.1.js</code> file.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> </ol> <h2>Upgrade to 1.8.0 from 1.7.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-1.7.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-1.8.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-1.8.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-1.8.0.js</code> file.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> </ol> <h2>Upgrade to 1.8.0 from 1.7.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-1.7.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-1.8.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-1.8.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-1.8.0.js</code> file.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> </ol> <h2>Upgrade to 1.7.0 from 1.6.1</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-1.6.1.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-1.7.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-1.7.0.js</code> into your project.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> </ol> <h2>Upgrade to 1.6.1 from 1.6.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-1.6.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-1.6.1.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-1.6.1.js</code> into your project.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> </ol> <h2>Upgrade to 1.6.0 from 1.5.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-1.5.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-1.6.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-1.6.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-1.6.0.js</code> file.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> <li><p>Replace <code class=\"prettyprint\">res/xml/phonegap.xml</code> with <code class=\"prettyprint\">res/xml/cordova.xml</code> to match <code class=\"prettyprint\">framework/res/xml/cordova.xml</code>.</p></li> </ol> <h2>Upgrade to 1.5.0 from 1.4.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">phonegap-1.4.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova-1.5.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-1.5.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-1.5.0.js</code> file.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> <li><p>Replace <code class=\"prettyprint\">res/xml/phonegap.xml</code> with <code class=\"prettyprint\">res/xml/cordova.xml</code> to match <code class=\"prettyprint\">framework/res/xml/cordova.xml</code>.</p></li> </ol> <h2>Upgrade to 1.4.0 from 1.3.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">phonegap-1.3.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">phonegap-1.4.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">phonegap-1.4.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">phonegap-1.4.0.js</code> file.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/phonegap.xml</code> to match <code class=\"prettyprint\">framework/res/xml/phonegap.xml</code>.</p></li> </ol> <h2>Upgrade to 1.3.0 from 1.2.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">phonegap-1.2.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">phonegap-1.3.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">phonegap-1.3.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">phonegap-1.2.0.js</code> file.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/phonegap.xml</code> to match <code class=\"prettyprint\">framework/res/xml/phonegap.xml</code>.</p></li> </ol> <h2>Upgrade to 1.2.0 from 1.1.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">phonegap-1.1.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">phonegap-1.2.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">phonegap-1.2.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">phonegap-1.2.0.js</code> file.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/phonegap.xml</code> to match <code class=\"prettyprint\">framework/res/xml/phonegap.xml</code>.</p></li> </ol> <h2>Upgrade to 1.1.0 from 1.0.0</h2> <ol> <li><p>Remove <code class=\"prettyprint\">phonegap-1.0.0.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">phonegap-1.1.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">phonegap-1.1.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">phonegap-1.1.0.js</code> file.</p></li> <li><p>Update <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> </ol> <h2>Upgrade to 1.0.0 from 0.9.6</h2> <ol> <li><p>Remove <code class=\"prettyprint\">phonegap-0.9.6.jar</code> from the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">phonegap-1.0.0.jar</code> to the project's <code class=\"prettyprint\">libs</code> directory.</p></li> <li><p>If you use Eclipse, please refresh your Eclipse project and do a clean.</p></li> <li><p>Copy the new <code class=\"prettyprint\">phonegap-1.0.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">phonegap-1.0.0.js</code> file.</p></li> <li><p>Add the <code class=\"prettyprint\">res/xml/plugins.xml</code> to match <code class=\"prettyprint\">framework/res/xml/plugins.xml</code>.</p></li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/android/upgrade.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/android/upgrade.html</a>\n  </p>\n</div>\n","guide/platforms/blackberry10/index":"<h1>BlackBerry 10 Platform Guide</h1> <p>This guide shows how to set up your SDK environment to deploy Cordova apps for BlackBerry 10 devices. For previous versions of BlackBerry, you need to use a different SDK environment and set of command-line tools, described in the BlackBerry Platform Guide. For BlackBerry 10, you need to install the SDK regardless of whether you want to use the cross-platform Cordova CLI for development, or a narrower set of platform-centered command-line tools. For a comparison of the two development paths, see the <a href=\"../../overview/index\">Overview</a>. For details on each, see <a href=\"../../cli/index\">The Command-Line Interface</a> and the BlackBerry 10 Shell Tool Guide.</p> <h2>Requirements</h2> <p>The development environment is available on Windows, Mac and Linux.</p> <p>Developers should use the <code class=\"prettyprint\">cordova</code> utility in conjunction with the BlackBerry WebWorks SDK or BlackBerry Native SDK. See The Command-Line Interface for information how to install <code class=\"prettyprint\">cordova</code>, add projects, then build and deploy for each platform.</p> <p>BlackBerry 10 Device Simulator:</p> <ul> <li>Processor: Intel dual core 2.0 GHz/AMD Athlon 4200+ or higher</li> <li>Disk space: 10 GB </li> <li>RAM Memory: 4 GB </li> <li>Virtualization: one of the following: <ul> <li>\n<strong>Intel Virtualization Technology</strong> (VT, VT-x, vmx) → <a href=\"http://ark.intel.com/products/virtualizationtechnology\">Intel VT-x supported processor list</a>\n</li> <li>\n<strong>AMD Virtualization</strong> (AMD-V, SVM) (Since May 2006 all AMD CPUs include AMD-V except Sempron).</li> </ul>\n</li> </ul> <p>More information about requirements: <a href=\"http://developer.blackberry.com/devzone/develop/simulator/simulator_systemrequirements.html\">BB10 Simulator requeriments</a>.</p> <h2>Install the BlackBerry WebWorks SDK</h2> <p>Download and install the BlackBerry WebWorks SDK from <a href=\"https://developer.blackberry.com/html5/download/\">developer.blackberry.com</a></p> <p>The installer will add command-line tools to your path. Depending on your OS, you may need to open a new terminal window or re-log in.</p> <h2>Install the BlackBerry Native SDK</h2> <p>If you need to compile native code, for example when developing a native plugin, you will need to install the BlackBerry Native SDK.</p> <p>In order to get the BlackBerry Native SDK, download and install the IDE for BlackBerry available from <a href=\"http://developer.blackberry.com/native/download/\">developer.blackberry.com</a>, then using the IDE, install the BlackBerry Native SDK. Following installation, you need to add its command-line tools to your system path.</p> <p>On Windows:</p> <ul> <li><p>Go to <strong>My Computer → Properties → Advanced → Environment Variables</strong>.</p></li> <li>\n<p>Append the Native SDK's install directory to the PATH, for example:</p> <div class=\"highlight\"><pre>;C:\\bbndk\\host_10_1_0_132\\win32\\x86\\usr\\bin\\\n</pre></div>\n</li> </ul> <p>On Mac and Linux:</p> <ul> <li>\n<p>Edit the <code class=\"prettyprint\">~/.bash_profile</code> file, adding a line such as the following, depending on where the Native SDK was installed:</p> <div class=\"highlight\"><pre>$ export PATH=${PATH}:/Applications/bbndk/host_10_1_0_132/darwin/x86/usr/bin/\n</pre></div>\n</li> </ul> <p>or for the 10.2 Native SDK:</p> <div class=\"highlight\"><pre>$ export PATH=${PATH}:/Applications/Momentics.app/host_10_2_0_15/darwin/x86/usr/bin/\n</pre></div> <ul> <li>\n<p>Run the following to apply the change in the current session:</p> <div class=\"highlight\"><pre>$ source ~/.bash_profile\n</pre></div>\n</li> </ul> <p>If you got any environmental problem, using the Native SDK from the command line, execute the appropriate file for your platform, located within the installation path:</p> <ul> <li>\n<p>On Windows → MS-DOS shell:</p> <div class=\"highlight\"><pre>C:\\&gt; \\bbndk\\bbndk-env_xx_xx_xx_xxxx.bat\n</pre></div>\n</li> <li>\n<p>On Windows → git bash shell:</p> <div class=\"highlight\"><pre>$ `\\bbndk\\bbndk-env_xx_xx_xx_xxxx.bat`\n</pre></div>\n</li> <li>\n<p>On Linux → Installed as root user:</p> <div class=\"highlight\"><pre>$ `./opt/bbndk/bbndk-env_xx_xx_xx_xxxx.sh`\n</pre></div>\n</li> <li>\n<p>On Linux → Installed as non-root user:</p> <div class=\"highlight\"><pre>$ `./home/username/bbndk/bbndk-env_xx_xx_xx_xxxx.sh`\n</pre></div>\n</li> <li>\n<p>On Mac:</p> <div class=\"highlight\"><pre>$ `/Developer/SDKs/bbndk/bbndk-env_xx_xx_xx_xxxx.sh`\n</pre></div>\n</li> </ul> <h2>Set up for Signing</h2> <p>If you wish to test on a device or distribute apps through BlackBerry World, your system must be setup for code signing.</p> <p>To obtain a signing key, go to the <a href=\"https://www.blackberry.com/SignedKeys/codesigning.html\">BlackBerry Keys Order Form</a>.</p> <p>Select the first checkbox: \"for BlackBerry10 apps developed using BlackBerry NDK\" and then sign in or create a BBID.</p> <p>Enter a password and click \"Get Token\" to download bbidtoken.csk. Save this file to the default location for your OS which will be displayed on the download page.</p> <p>The final step is to generate a signing certificate:</p> <div class=\"highlight\"><pre>$ blackberry-keytool -genkeypair -storepass &lt;password&gt; -author 'Your Name’\n</pre></div> <h2>Create a Project</h2> <p>Use the <code class=\"prettyprint\">cordova</code> utility to set up a new project, as described in <a href=\"../../cli/index\">The Command-Line Interface</a>. For example, in a source-code directory:</p> <div class=\"highlight\"><pre>$ cordova create hello com.example.hello\n$ cd hello\n$ cordova platform add blackberry10\n$ cordova build\n</pre></div> <h2>Deploy to Emulator</h2> <p>If you wish to run a device emulator, download and install the BlackBerry 10 Simulator.</p> <ul> <li><a href=\"http://developer.blackberry.com/native/download/\">Download</a></li> <li><a href=\"http://developer.blackberry.com/devzone/develop/simulator/blackberry_10_simulator_start.html\">Getting Started</a></li> </ul> <p>Before testing an app on either an emulator or a device, you need to enable development mode.</p> <p>Launch the emulator image, then choose <strong>Settings</strong> from the home screen:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/blackberry10/bb_home.png\" alt=\"\"></p> <p>Navigate to the <strong>Security and Privacy → Development Mode</strong> section and enable the option:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/blackberry10/bb_devel.png\" alt=\"\"></p> <p>An additional set of command-line utilities are included when you set up the BlackBerry 10 platform for your project. The following command, in this case invoked from the project top-level directory, associates a target named <em>emu</em> with the IP address displayed above.</p> <ul> <li>\n<p>On Windows:</p> <div class=\"highlight\"><pre>$ platforms\\blackberry10\\cordova\\target.bat add emu 169.254.0.1 -t simulator\n</pre></div>\n</li> <li>\n<p>On Mac/Linux:</p> <div class=\"highlight\"><pre>$ platforms/blackberry10/cordova/target add emu 169.254.0.1 -t simulator\n</pre></div>\n</li> </ul> <p>Then, run the <code class=\"prettyprint\">emulate</code> command to view the app:</p> <div class=\"highlight\"><pre>$ cordova emulate blackberry10\n</pre></div> <h2>Deploy to Device</h2> <p>To deploy to a device, make sure it is plugged into your computer. Enable development mode and obtain the IP address as desribed in the emulator section above. You will also need to obtain the PIN from the the <strong>Settings</strong> application under <strong>About → Hardware</strong>:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/blackberry10/bb_pin.png\" alt=\"\"></p> <p>Run the target command-line utility to associate a name with an IP address, device password and PIN.</p> <ul> <li>\n<p>On Windows:</p> <div class=\"highlight\"><pre>$ platforms\\blackberry10\\cordova\\target.bat add mydevice 169.254.0.1 -t device --password 123456 --pin FFFF972E\n</pre></div>\n</li> <li>\n<p>On Mac/Linux:</p> <div class=\"highlight\"><pre>$ platforms/blackberry10/cordova/target add mydevice 169.254.0.1 -t device --password 123456 --pin FFFF972E\n</pre></div>\n</li> </ul> <p>where:</p> <ul> <li><p><code class=\"prettyprint\">--password</code> refers to the password to unlock the device.</p></li> <li><p><code class=\"prettyprint\">--pin</code> refers to the device PIN obtained from the <strong>Settings</strong> application.</p></li> </ul> <p>Then, run the <code class=\"prettyprint\">run</code> command to view the app:</p> <div class=\"highlight\"><pre>$ cordova run blackberry10\n</pre></div> <p>If a debug token is not yet set up for the device, an error message prompts you to use the platform run script with the password you provided when registering for signing keys.</p> <ul> <li>\n<p>On Windows:</p> <div class=\"highlight\"><pre>$ platforms\\blackberry10\\cordova\\run.bat --device --keystorepass mysecret\n</pre></div>\n</li> <li>\n<p>On Mac/Linux:</p> <div class=\"highlight\"><pre>$ platforms/blackberry10/cordova/run --device --keystorepass mysecret\n</pre></div>\n</li> </ul> <h2>Debugging with WebInspector</h2> <p>When debugging on the device or an emulator, you may run WebInspector remotely to view the application's internal state. A prompt displays the URL that allows you to connect to the app with a standard web browser. For more information, see <a href=\"http://developer.blackberry.com/html5/documentation/web_inspector_overview_1553586_11.html\">Debugging using WebInspector</a>.</p> <h2>Building a Release Version</h2> <p>By default, running the <code class=\"prettyprint\">cordova build</code> command creates an unsigned <em>.bar</em> package file suitable for testing on a device or simulator.</p> <p>Use <code class=\"prettyprint\">--release</code> to create a release version suitable for distribution through BlackBerry World.</p> <div class=\"highlight\"><pre>$ cordova build --release --keystorepass &lt;signing password&gt;\n</pre></div> <p>The <code class=\"prettyprint\">--keystorepass</code> option specifies the password you defined when configuring your computer to sign applications.</p> <h2>Deploy to Other Locations</h2> <p>The instructions above assume a device is plugged in via USB or a simulator is running on the local machine. It is also possible to deploy to other locations.</p> <p>An additional set of command-line utilities are included when you set up the BlackBerry 10 platform for your project. The following command, in this case invoked from the project top-level directory, associates a target named <em>emu</em> with an IP address.</p> <ul> <li>\n<p>On Windows:</p> <div class=\"highlight\"><pre>$ platforms\\blackberry10\\cordova\\build.bat --release --keystorepass mysecret\n</pre></div>\n</li> <li>\n<p>On Mac/Linux:</p> <div class=\"highlight\"><pre>$ platforms/blackberry10/cordova/build --release --keystorepass mysecret\n</pre></div>\n</li> </ul> <p>Once the target is defined, you can provide it to the run command using <code class=\"prettyprint\">--target</code>:</p> <div class=\"highlight\"><pre>$ cordova run blackberry10 --target=emu\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/blackberry10/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/blackberry10/index.html</a>\n  </p>\n</div>\n","guide/platforms/ios/tools":"<h1>iOS Shell Tool Guide</h1> <p>This guide shows how to use Cordova's set of platform-centered shell tools to develop iOS apps. This development path, discussed in the <a href=\"../../overview/index\">Overview</a>, may offer you a greater range of development options for iOS than the cross-platform CLI tool described in The Command-Line Interface. For example, you need to use shell tools when deploying a custom Cordova WebView alongside native components. Before using either development path, you must first configure the SDK environment as described in the <a href=\"index\">iOS Platform Guide</a>. These tools rely upon Xcode's command-line tools such as <code class=\"prettyprint\">xcode-select</code> and <code class=\"prettyprint\">xcodebuild</code>.</p> <p>To enable shell tools for iOS, download Cordova from <a href=\"http://cordova.apache.org\">cordova.apache.org</a>. The download contains separate archives for each platform. Expand each you wish to target, <code class=\"prettyprint\">ios</code> in this case. The relevant tools are typically available in the top-level <code class=\"prettyprint\">bin</code> directory, otherwise consult the <strong>README</strong> file for more detailed directions.</p> <p>These tools allow you to create, build, and run iOS apps. For information on the additional command-line interface that enables plugin features across all platforms, see Using Plugman to Manage Plugins. See Application Plugins for details on how to develop plugins.</p> <h2>Create a Project</h2> <p>Run the <code class=\"prettyprint\">create</code> command, specifying the existing path to the project, the reverse-domain-style package identifier, and the app's display name.</p> <div class=\"highlight\"><pre>$ ./path/to/cordova-ios/bin/create /path/to/my_new_project com.example.project_name ProjectName\n</pre></div> <h2>Build a Project</h2> <div class=\"highlight\"><pre>$ /path/to/my_new_project/cordova/build\n</pre></div> <h2>Run App on an Emulator</h2> <div class=\"highlight\"><pre>$ /path/to/my_new_project/cordova/run --emulator\n</pre></div> <h2>Run App on a Device</h2> <div class=\"highlight\"><pre>$ /path/to/my_new_project/cordova/run --device\n</pre></div> <h2>Signing the App</h2> <p>You can learn more about signing, distributing iOS apps, creating a certificate and provisioning profile on the <a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html\">iOS Developer Library</a>.</p> <p>To sign the app in Cordova you need the following:</p> <ul> <li><p>Code signing identity (<code class=\"prettyprint\">--codeSignIdentity</code>): <a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingCertificates/MaintainingCertificates.html#//apple_ref/doc/uid/TP40012582-CH31-SW6\">Using XCode</a> you can create a new iOS signing identity and add it to your keychain. The type of of the code signing identity - typically distribution or development, needs to be specified here.</p></li> <li><p>Provisioning profile (<code class=\"prettyprint\">--provisioningProfile</code>): <a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingProfiles/MaintainingProfiles.html#//apple_ref/doc/uid/TP40012582-CH30-SW61\">Using the Apple Member Center</a> you can create a provisioning profile. Download the provisioning profile onto your machine and launch it in XCode to register it. It is copied here on your Mac: ~/Library/MobileDevice/Provisioning\\ Profiles/. Opening it in a text editor, you can find the UUID which needs to be specified here.</p></li> <li><p>Code signing resource rules(<code class=\"prettyprint\">--codeSignResourceRules</code>) (Optional): Allows you to specify custom signing resource rules.</p></li> </ul> <p>These parameters can be specified using the command line arguments above to <code class=\"prettyprint\">build</code> or <code class=\"prettyprint\">run</code> scripts:</p> <div class=\"highlight\"><pre>$ /path/to/my_new_project/cordova/build --codeSignIdentitiy=\"iPhone Distribtion\" --provisioningProfile=\"926c2bd6-8de9-4c2f-8407-1016d2d12954\" \n</pre></div> <p>Alternatively, you could specify them in a build configuration file (build.json) using (<code class=\"prettyprint\">--buildConfig</code>) argument. Here's a sample of a build configuration file:</p> <div class=\"highlight\"><pre>{\n\"ios\": {\n    \"debug\": {\n        \"codeSignIdentitiy\": \"iPhone Development\",\n        \"provisioningProfile\": \"926c2bd6-8de9-4c2f-8407-1016d2d12954\",\n    },\n    \"release\": {\n        \"codeSignIdentitiy\": \"iPhone Distribution\"\n        \"provisioningProfile\": \"70f699ad-faf1-4adE-8fea-9d84738fb306\",\n    }\n}\n }\n</pre></div> <p>There is also support to mix and match command line arguments and parameters in build.json file. Values from the command line arguments will get precedence. </p> <h2>Logging</h2> <div class=\"highlight\"><pre>$ /path/to/my_new_project/cordova/log\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ios/tools.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ios/tools.html</a>\n  </p>\n</div>\n","guide/platforms/blackberry10/plugin":"<h1>BlackBerry 10 Plugins</h1> <p>This section provides details for how to implement native plugin code on the BlackBerry 10 platform. Before reading this, see Application Plugins for an overview of the plugin's structure and its common JavaScript interface. This section continues to demonstrate the sample <em>echo</em> plugin that communicates from the Cordova webview to the native platform and back.</p> <p>The Echo plugin basically returns whatever string the <code class=\"prettyprint\">window.echo</code> function sends from JavaScript:</p> <div class=\"highlight\"><pre>window.echo = function(str, callback) {\n   cordova.exec(callback, function(err) {\n       callback('Nothing to echo.');\n   }, \"Echo\", \"echo\", [str]);\n};\n</pre></div> <p>A Cordova plugin for BlackBerry 10 contains both JavaScript and native code, which communicate with each other through a framework provided by JNEXT. Every plugin must also include a <code class=\"prettyprint\">plugin.xml</code> file.</p> <h2>Creating the Native Class</h2> <p>To create the native portion of your plugin, open the BlackBerry 10 NDK IDE and select <strong>File → New → BlackBerry Project → Native Extension → BlackBerry 10</strong>. Enter the desired project name and location, then press <strong>Finish</strong>.</p> <p>The project created by the IDE contains sample code for a memory plugin. You may replace or modify these files to implement your own functionality:</p> <ul> <li><p><code class=\"prettyprint\">*name*_js.hpp</code>: C++ header for the JNEXT code.</p></li> <li><p><code class=\"prettyprint\">*name*_js.cpp</code>: C++ code for JNEXT.</p></li> </ul> <p>The native interface for the JNEXT extension can be viewed in the plugin header file located in the project's public directory. It also features constants and utility functions available from within native code. The plugin must be derived from <code class=\"prettyprint\">JSExt</code>, which is defined in <code class=\"prettyprint\">plugin.h</code>. That is, you must implement the following class:</p> <div class=\"highlight\"><pre>class JSExt\n{\npublic:\n   virtual ~JSExt() {};\n   virtual string InvokeMethod( const string&amp; strCommand ) = 0;\n   virtual bool CanDelete( void ) = 0;\nprivate:\n   std::string m_id;\n};\n</pre></div> <p>The extension should include the <code class=\"prettyprint\">plugin.h</code> header file. In the <code class=\"prettyprint\">Echo</code> example, you use <code class=\"prettyprint\">JSExt</code> as follows in the <code class=\"prettyprint\">echo_js.hpp</code> file:</p> <div class=\"highlight\"><pre>#include \"../public/plugin.h\"\n#include &lt;string&gt;\n\n#ifndef ECHO_JS_H_\n#define ECHO_JS_H_\n\nclass Echo : public JSExt\n{\npublic:\n   explicit Echo(const std::string&amp; id);\n   virtual ~Echo();\n   virtual std::string InvokeMethod(const std::string&amp; command);\n   virtual bool CanDelete();\nprivate:\n   std::string m_id;\n};\n\n#endif // ECHO_JS_H_\n</pre></div> <p>The <code class=\"prettyprint\">m_id</code> attribute contains the <code class=\"prettyprint\">JNEXT</code> id for the object, which is passed to the class as an argument to the constructor. It is needed for the native side to trigger events on the JavaScript side. The <code class=\"prettyprint\">CanDelete</code> method determines whether the native object can be deleted. The <code class=\"prettyprint\">InvokeMethod</code> function is called as a result from a request from JavaScript to invoke a method of this particular object. The only argument to this function is a string passed from JavaScript that this method parses to determine which of the native object's methods should execute. These methods are implemented in <code class=\"prettyprint\">echo_js.cpp</code>. Here is the <code class=\"prettyprint\">InvokeMethod</code> function for the <code class=\"prettyprint\">Echo</code> example:</p> <div class=\"highlight\"><pre>string Echo::InvokeMethod(const string&amp; command) {\n\n   //parse command and args from string\n   int index = command.find_first_of(\" \");\n   string strCommand = command.substr(0, index);\n   string strValue = command.substr(index + 1, command.length());\n\n   // Determine which function should be executed\n   if (strCommand == \"echo\") {\n       return strValue;\n   } else {\n       return \"Unsupported Method\";\n   }\n}\n</pre></div> <p>The native plugin must also implement the following callback functions:</p> <ul> <li><p><code class=\"prettyprint\">extern char* onGetObjList( void );</code></p></li> <li><p><code class=\"prettyprint\">extern JSExt* onCreateObject( const string&amp; strClassName, const string&amp; strObjId );</code></p></li> </ul> <p>The <code class=\"prettyprint\">onGetObjList</code> function returns a comma-separated list of classes supported by JNEXT. JNEXT uses this function to determine the set of classes that JNEXT can instantiate. The <code class=\"prettyprint\">Echo</code> plugin implements the following in <code class=\"prettyprint\">echo_js.cpp</code>:</p> <div class=\"highlight\"><pre>char* onGetObjList() {\n   static char name[] = \"Echo\";\n   return name;\n}\n</pre></div> <p>The <code class=\"prettyprint\">onCreateObject</code> function takes two parameters. The first is the name of the requested class to be created from the JavaScript side, with valid names as those returned in <code class=\"prettyprint\">onGetObjList</code>. The second parameter is the class's unique object id. This method returns a pointer to the created plugin object. The <code class=\"prettyprint\">Echo</code> plugin implements the following in <code class=\"prettyprint\">echo_js.cpp</code>:</p> <div class=\"highlight\"><pre>JSExt* onCreateObject(const string&amp; className, const string&amp; id) {\n   if (className == \"Echo\") {\n       return new Echo(id);\n   }\n   return NULL;\n}\n</pre></div> <h2>Creating the Plugin's JavaScript</h2> <p>The plugin must contain the following JavaScript files:</p> <ul> <li><p><code class=\"prettyprint\">client.js</code>: This is considered the client side and contains the API available to a Cordova application. The API in <code class=\"prettyprint\">client.js</code> calls makes calls to <code class=\"prettyprint\">index.js</code>. The API in <code class=\"prettyprint\">client.js</code> also connects callback functions to the events that fire the callbacks.</p></li> <li><p><code class=\"prettyprint\">index.js</code>: Cordova loads <code class=\"prettyprint\">index.js</code> and makes it accessible through the cordova.exec bridge. The <code class=\"prettyprint\">client.js</code> file makes calls to the API in the <code class=\"prettyprint\">index.js</code> file, which in turn makes call to JNEXT to communicate with the native side.</p></li> </ul> <p>The client and server side (<code class=\"prettyprint\">client.js</code> and <code class=\"prettyprint\">index.js</code>) interacts through the <code class=\"prettyprint\">Cordova.exec</code> function. The <code class=\"prettyprint\">client.js</code> needs to invoke the <code class=\"prettyprint\">exec</code> function and provide the necessary arguments. The <code class=\"prettyprint\">Echo</code> plugin implements the following in the <code class=\"prettyprint\">client.js</code> file:</p> <div class=\"highlight\"><pre>var service = \"org.apache.cordova.blackberry.echo\",\n   exec = cordova.require(\"cordova/exec\");\n\nmodule.exports = {\n   echo: function (data, success, fail) {\n       exec(success, fail, service, \"echo\", { data: data });\n   }\n};\n</pre></div> <p>The <code class=\"prettyprint\">index.js</code> component uses JNEXT to interact with the native side. Attaching a constructor function named <code class=\"prettyprint\">Echo</code> to JNEXT allows you to perform the following key operations using the <code class=\"prettyprint\">init</code> function:</p> <ul> <li>\n<p>Specify the required module exported by the native side. The name of the required module must match the name of a shared library file (<code class=\"prettyprint\">.so</code> file):</p> <div class=\"highlight\"><pre>JNEXT.require(\"libecho\")\n</pre></div>\n</li> <li>\n<p>Create an object by using an acquired module and save the ID that's returned by the call:</p> <div class=\"highlight\"><pre>self.m_id = JNEXT.createObject(\"libecho.Echo\");\n</pre></div>\n</li> </ul> <p>When the application calls the <code class=\"prettyprint\">echo</code> function in <code class=\"prettyprint\">client.js</code>, that call in turn calls the <code class=\"prettyprint\">echo</code> function in <code class=\"prettyprint\">index.js</code>, where the <code class=\"prettyprint\">PluginResult</code> object sends data as a response back to <code class=\"prettyprint\">client.js</code>. Since the <code class=\"prettyprint\">args</code> argument passed into the functions was converted by <code class=\"prettyprint\">JSON.stringfy()</code> and encoded as a <code class=\"prettyprint\">URIcomponent</code>, you must call the following:</p> <div class=\"highlight\"><pre>data = JSON.parse(decodeURIComponent(args.data));\n</pre></div> <p>You can now send the data back, as in the following:</p> <div class=\"highlight\"><pre>module.exports = {\n   echo: function (success, fail, args, env) {\n       var result = new PluginResult(args, env),\n       data = JSON.parse(decodeURIComponent(args.data)),\n       response = echo.getInstance().echo(data);\n       result.ok(response, false);\n   }\n};\n</pre></div> <h2>Plugin Architecture</h2> <p>You can place the plugin's artifacts, including the <code class=\"prettyprint\">plugin.xml</code> file, the JavaScript and C++ source files, and the <code class=\"prettyprint\">.so</code> binary files within any directory structure, as long as you correctly specify the file locations in the <code class=\"prettyprint\">plugin.xml</code> file. Here is a typical structure:</p> <p><strong><em>project_directory</em></strong> (&gt;plugin.xml)</p> <ul> <li>\n<strong>www</strong> (&gt;client.js)</li> <li>\n<strong>src</strong> <ul> <li>\n<strong>blackberry10</strong> (&gt;index.js, <strong>native</strong> &gt;*.cpp, *.hpp)</li> <li>\n<strong>device</strong> (&gt;<em>binary file</em> *.so)</li> <li>\n<strong>simulator</strong> (&gt;<em>binary file</em> *.so)</li> </ul>\n</li> </ul> <p>The list shows the hierarchical relationship among the top-level folders. The parenthesis shows the contents of a given directory. All directory names appear in bold text. File names are preceded by the <code class=\"prettyprint\">&gt;</code> sign.</p> <h2>The <em>plugin.xml</em> file</h2> <p>The <code class=\"prettyprint\">plugin.xml</code> file contains the extension's namespace and other metadata. Set up the <code class=\"prettyprint\">Echo</code> plugin as follows:</p> <div class=\"highlight\"><pre>&lt;plugin xmlns=\"http://www.phonegap.com/ns/plugins/1.0\"\n   id=\"org.apache.cordova.blackberry.echo\"\n   version=\"1.0.0\"&gt;\n   &lt;js-module src=\"www/client.js\"&gt;\n       &lt;merges target=\"navigator\" /&gt;\n   &lt;/js-module&gt;\n   &lt;platform name=\"blackberry10\"&gt;\n       &lt;source-file src=\"src/blackberry10/index.js\" /&gt;\n       &lt;lib-file src=\"src/blackberry10/native/device/libecho.so\" arch=\"device\" /&gt;\n       &lt;lib-file src=\"src/blackberry10/native/simulator/libecho.so\" arch=\"simulator\" /&gt;\n       &lt;config-file target=\"www/config.xml\" parent=\"/widget\"&gt;\n           &lt;feature name=\"org.apache.cordova.blackberry.echo\" value=\"org.apache.cordova.blackberry.echo\" /&gt;\n       &lt;/config-file&gt;\n   &lt;/platform&gt;\n&lt;/plugin&gt;\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/blackberry10/plugin.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/blackberry10/plugin.html</a>\n  </p>\n</div>\n","guide/platforms/amazonfireos/webview":"<h1>Amazon Fire OS WebViews</h1> <p>Beginning with 3.3.0, you can use Cordova as a component in Amazon Fire OS applications. Amazon Fire OS refers to this component as <code class=\"prettyprint\">CordovaWebView</code>. <code class=\"prettyprint\">CordovaWebView</code> extends Amazon WebView that is built on the open source Chromium Project. By leveraging this feature, your web apps can utilize the latest HTML5 web standards running in a modern web runtime engine.</p> <p>If you're unfamiliar with Amazon Fire OS, you should first familiarize yourself with the <a href=\"index\">Amazon Fire OS Platform Guide</a> and have the latest SDKs installed before you attempt the more unusual development option of embedding a WebView.</p> <h2>Prerequisites</h2> <ul> <li><p>Cordova 3.3.0 or greater</p></li> <li><p>Android SDK updated to the latest SDK</p></li> <li><p>Amazon WebView SDK</p></li> </ul> <h2>Guide to using CordovaWebView in a Amazon Fire OS Project</h2> <ol> <li><p>To follow these instructions, make sure you have the latest Cordova distribution. Download it from <a href=\"http://cordova.apache.org\">cordova.apache.org</a> and unzip its Amazon Fire OS package.</p></li> <li><p>Download and expand the <a href=\"https://developer.amazon.com/sdk/fire/IntegratingAWV.html#installawv\">Amazon WebView SDK</a> , then copy the awv_interface.jar into <code class=\"prettyprint\">/framework/libs</code> directory. Create a libs/ folder if it doesn't exist.</p></li> <li><p>Navigate to the package's <code class=\"prettyprint\">/framework</code> directory and run <code class=\"prettyprint\">ant jar</code>. It creates the Cordova <code class=\"prettyprint\">.jar</code> file, formed as <code class=\"prettyprint\">/framework/cordova-x.x.x.jar</code>.</p></li> <li><p>Copy the <code class=\"prettyprint\">.jar</code> file into the Android project's <code class=\"prettyprint\">/libs</code> directory.</p></li> <li>\n<p>Add the following to the application's <code class=\"prettyprint\">/res/xml/main.xml</code> file, with the <code class=\"prettyprint\">layout_height</code>, <code class=\"prettyprint\">layout_width</code> and <code class=\"prettyprint\">id</code> modified to suit the application:</p> <div class=\"highlight\"><pre>&lt;org.apache.cordova.CordovaWebView\nandroid:id=\"@+id/tutorialView\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\" /&gt;\n</pre></div>\n</li> <li>\n<p>Modify your activity so that it implements the <code class=\"prettyprint\">CordovaInterface</code>. You should implement the included methods. You may wish to copy them from <code class=\"prettyprint\">/framework/src/org/apache/cordova/CordovaActivity.java</code>, or implement them on your own. The code fragment below shows a basic application that uses the interface. Note how the referenced view id matches the <code class=\"prettyprint\">id</code> attribute specified in the XML fragment shown above:</p> <div class=\"highlight\"><pre>public class CordovaViewTestActivity extends Activity implements CordovaInterface {\nCordovaWebView cwv;\n/* Called when the activity is first created. */\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n   super.onCreate(savedInstanceState);\n   setContentView(R.layout.main);\n   cwv = (CordovaWebView) findViewById(R.id.tutorialView);\n   Config.init(this);\n   cwv.loadUrl(Config.getStartUrl());\n}\n</pre></div>\n</li> </ol> <p>If you use the camera, you should also implement this:</p> <div class=\"highlight\"><pre>@Override\npublic void setActivityResultCallback(CordovaPlugin plugin) {\n   this.activityResultCallback = plugin;\n}\n/**\n* Launch an activity for which you would like a result when it finished. When this activity exits,\n* your onActivityResult() method is called.\n*\n* @param command           The command object\n* @param intent            The intent to start\n* @param requestCode       The request code that is passed to callback to identify the activity\n*/\npublic void startActivityForResult(CordovaPlugin command, Intent intent, int requestCode) {\n   this.activityResultCallback = command;\n   this.activityResultKeepRunning = this.keepRunning;\n\n   // If multitasking turned on, then disable it for activities that return results\n   if (command != null) {\n       this.keepRunning = false;\n   }\n\n   // Start activity\n   super.startActivityForResult(intent, requestCode);\n}\n\n@Override\n/**\n* Called when an activity you launched exits, giving you the requestCode you started it with,\n* the resultCode it returned, and any additional data from it.\n*\n* @param requestCode       The request code originally supplied to startActivityForResult(),\n*                          allowing you to identify who this result came from.\n* @param resultCode        The integer result code returned by the child activity through its setResult().\n* @param data              An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\").\n*/\nprotected void onActivityResult(int requestCode, int resultCode, Intent intent) {\n   super.onActivityResult(requestCode, resultCode, intent);\n   CordovaPlugin callback = this.activityResultCallback;\n   if (callback != null) {\n       callback.onActivityResult(requestCode, resultCode, intent);\n   }\n}\n</pre></div> <p>Finally, remember to add the thread pool, otherwise the plugins have no threads to run on:</p> <div class=\"highlight\"><pre>@Override\npublic ExecutorService getThreadPool() {\n   return threadPool;\n}\n</pre></div> <ol> <li><p>Copy your application's HTML and JavaScript files to your Amazon Fire OS project's <code class=\"prettyprint\">/assets/www</code> directory.</p></li> <li><p>Copy <code class=\"prettyprint\">config.xml</code> from <code class=\"prettyprint\">/framework/res/xml</code> to your project's <code class=\"prettyprint\">/res/xml</code> directory.</p></li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/amazonfireos/webview.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/amazonfireos/webview.html</a>\n  </p>\n</div>\n","guide/platforms/amazonfireos/plugin":"<h1>Amazon Fire OS Plugins</h1> <p>Follow the instructions provided in the <a href=\"../android/plugin\">Android Plugins</a> Guide for an overview of developing custom plugins.</p> <h2>Echo Amazon Fire OS Plugin Example</h2> <p>To match the JavaScript interface's <em>echo</em> feature described in Application Plugins, use the <code class=\"prettyprint\">plugin.xml</code> to inject a <code class=\"prettyprint\">feature</code> specification to the local platform's <code class=\"prettyprint\">config.xml</code> file:</p> <div class=\"highlight\"><pre>&lt;platform name=\"amazon-fireos\"&gt;\n&lt;config-file target=\"config.xml\" parent=\"/*\"&gt;\n   &lt;feature name=\"Echo\"&gt;\n       &lt;param name=\"android-package\" value=\"org.apache.cordova.plugin.Echo\"/&gt;\n   &lt;/feature&gt;\n&lt;/config-file&gt;\n&lt;/platform&gt;\n</pre></div> <p>Then add the following to the <code class=\"prettyprint\">src/org/apache/cordova/plugin/Echo.java</code> file:</p> <div class=\"highlight\"><pre>package org.apache.cordova.plugin;\n\nimport org.apache.cordova.CordovaPlugin;\nimport org.apache.cordova.CallbackContext;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\n/**\n * This class echoes a string called from JavaScript.\n */\npublic class Echo extends CordovaPlugin {\n\n@Override\npublic boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {\n   if (action.equals(\"echo\")) {\n       String message = args.getString(0);\n       this.echo(message, callbackContext);\n       return true;\n   }\n   return false;\n}\n\nprivate void echo(String message, CallbackContext callbackContext) {\n   if (message != null &amp;&amp; message.length() &gt; 0) {\n       callbackContext.success(message);\n   } else {\n       callbackContext.error(\"Expected one non-empty string argument.\");\n   }\n}\n}\n</pre></div> <p>If you want to reuse Android Plugin code for the Amazon Fire OS platform then modify the plugin.xml to point to the <code class=\"prettyprint\">android</code> specific source file. For example,</p> <div class=\"highlight\"><pre>&lt;platform name=\"amazon-fireos\"&gt;\n&lt;config-file target=\"config.xml\" parent=\"/*\"&gt;\n   &lt;feature name=\"Echo\"&gt;\n       &lt;param name=\"android-package\" value=\"org.apache.cordova.plugin.Echo\"/&gt;\n   &lt;/feature&gt;\n&lt;/config-file&gt;\n&lt;source-file src=\"src/android/Echo.java\" target-dir=\"src/org/apache/cordova/plugin\" /&gt;\n&lt;/platform&gt;\n</pre></div> <p>If you want to write a customized plugin for the Amazon Fire OS platform then create a folder named <code class=\"prettyprint\">amazon</code> under your plugin src/ folder and modify the plugin.xml to point to the <code class=\"prettyprint\">amazon</code> specific source file. For example,</p> <div class=\"highlight\"><pre>&lt;platform name=\"amazon-fireos\"&gt;\n&lt;config-file target=\"config.xml\" parent=\"/*\"&gt;\n   &lt;feature name=\"Echo\"&gt;\n       &lt;param name=\"android-package\" value=\"org.apache.cordova.plugin.Echo\"/&gt;\n   &lt;/feature&gt;\n&lt;/config-file&gt;\n&lt;source-file src=\"src/amazon/Echo.java\" target-dir=\"src/org/apache/cordova/plugin\" /&gt;\n&lt;/platform&gt;\n</pre></div> <h2>Using Amazon WebView in your plugin</h2> <p>Cordova for Amazon Fire OS makes use of custom Amazon WebView that is built on the open-source Chromium project. It is GPU accelerated and optimized for fluid performance on Kindle Fire.</p> <p>To understand how to best use Amazon WebView in your project, check out the <a href=\"https://developer.amazon.com/sdk/fire/IntegratingAWV.html\">Amazon Developer Portal</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/amazonfireos/plugin.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/amazonfireos/plugin.html</a>\n  </p>\n</div>\n","guide/platforms/firefoxos/index":"<h1>Firefox OS Platform Guide</h1> <p>This guide describes how to set up your development environment to create Cordova apps for Firefox OS devices, then test and publish those apps.</p> <h2>Requirements and Support</h2> <p>Firefox OS apps are basically just web apps, with the addition of a manifest.webapp file that defines metadata about the app and allows it to be installed on Firefox OS devices. Any platform that Cordova supports can be used.To find out more about building web apps, consult the <a href=\"https://developer.mozilla.org/en-US/Apps\">App Center</a> on <a href=\"https://developer.mozilla.org/en-US/\">MDN</a>.</p> <h2>Installation and Environment Setup</h2> <p>First install <a href=\"http://nodejs.org/\">Node.js</a>, then install the Cordova package like so:</p> <div class=\"highlight\"><pre>$ npm install -g cordova\n</pre></div> <p>Next, create a sample Cordova app then navigate into the newly created directory:</p> <div class=\"highlight\"><pre>$ cordova create test-app\n$ cd test-app\n</pre></div> <p>Add Firefox OS as a supported platform to the app with the following:</p> <div class=\"highlight\"><pre>$ cordova platform add firefoxos\n</pre></div> <p>This creates a Firefox OS app in platforms/firefoxos/www directory, which currently looks the same except that it has a Firefox manifest file (manifest.webapp) inside the www directory.</p> <h2>Developing your app</h2> <p>At this point you are ready to go — change the code inside test-app/www to whatever you want your app to be. You can add <a href=\"index\">supported plugins</a> to the app using \"cordova plugin add\", for example:</p> <div class=\"highlight\"><pre>cordova plugin add cordova-plugin-device\ncordova plugin add cordova-plugin-vibration\n</pre></div> <p>When your app code is written, deploy your changes to the Firefox OS app you've added to your project with</p> <div class=\"highlight\"><pre>$ cordova prepare firefoxos\n</pre></div> <p>To create a packaged app one can zip the platforms/firefoxos/www directory. You can also simply build it using </p> <div class=\"highlight\"><pre>$ cordova build firefoxos\n</pre></div> <p>The Firefox OS packaged app will be built in platforms/firefoxos/build/package.zip</p> <h2>Testing and Debugging</h2> <p>The app can be tested using the Firefox OS <a href=\"https://developer.mozilla.org/en-US/docs/Tools/WebIDE\">Web IDE</a>.</p> <p>When you have connected the Web IDE to your test device/simulator, select the \"Open Packaged App\" option, then make sure you point to the test-app/platforms/firefoxos/www/ directory to include the App in the Manager interface.</p> <p>For here you can install the app on your test device/simulator (with the \"Play\" button). Using the \"Pause\" button you can then debug the app and edit its code live. </p> <p>Note: Before attempting to publish your app you should consider validating it using the <a href=\"https://marketplace.firefox.com/developers/validator\">App validator</a>.</p> <h2>Publishing your app on the Firefox Marketplace</h2> <p>You can submit your app to the Firefox Marketplace, or publish it yourself. Visit the <a href=\"https://developer.mozilla.org/en-US/Marketplace\">Firefox Marketplace Zone</a> on MDN to find out more about how to do this; <a href=\"https://developer.mozilla.org/en-US/Marketplace/Publishing/Publish_options\">App publishing options</a> is the best place to start.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/firefoxos/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/firefoxos/index.html</a>\n  </p>\n</div>\n","guide/platforms/ios/index":"<h1>iOS Platform Guide</h1> <p>This guide shows how to set up your SDK development environment to deploy Cordova apps for iOS devices such as iPhone and iPad. See the following for more detailed platform-specific information:</p> <ul> <li><a href=\"config\">iOS Configuration</a></li> <li><a href=\"upgrade\">Upgrading iOS</a></li> <li><a href=\"webview\">iOS WebViews</a></li> <li><a href=\"plugin\">iOS Plugins</a></li> <li><a href=\"tools\">iOS Shell Tool Guide</a></li> </ul> <p>The command-line tools above refer to versions prior to Cordova 3.0. See <a href=\"../../cli/index\">The Command-Line Interface</a> for information about the current interface.</p> <h2>Requirements and Support</h2> <p>Apple® tools required to build iOS applications run only on the OS X operating system on Intel-based Macs. Xcode® 6.0 (the minimum required version) runs only on OS X version 10.9 (Mavericks) or greater, and includes the iOS 8 SDK (Software Development Kit). To submit apps to the Apple App Store℠ requires the latest versions of the Apple tools.</p> <p>You can test many of the Cordova features using the iOS emulator installed with the iOS SDK and Xcode, but you need an actual device to fully test all of the app's device features before submitting to the App Store. The device must have at least iOS 6.x installed, the minimum iOS version supported as of Cordova 3.0. Supporting devices include all iPad® models, iPhone® 3GS and above, and iPod® Touch 3rd Generation or later. To install apps onto a device, you must also be a member of Apple's <a href=\"https://developer.apple.com/programs/ios/\">iOS Developer Program</a>, which costs $99 per year. This guide shows how to deploy apps to the iOS emulator, for which you don't need to register with the developer program.</p> <p>The <a href=\"https://www.npmjs.org/package/ios-sim\">ios-sim</a> and <a href=\"https://www.npmjs.org/package/ios-deploy\">ios-deploy</a> tools - allows you to launch iOS apps into the iOS Simulator and iOS Device from the command-line.</p> <h2>Install the SDK</h2> <p>There are two ways to download Xcode:</p> <ul> <li><p>from the <a href=\"https://itunes.apple.com/us/app/xcode/id497799835?mt=12\">App Store</a>, available by searching for \"Xcode\" in the <strong>App Store</strong> application.</p></li> <li><p>from <a href=\"https://developer.apple.com/downloads/index.action\">Apple Developer Downloads</a>, which requires registration as an Apple Developer.</p></li> </ul> <p>Once Xcode is installed, several command-line tools need to be enabled for Cordova to run. From the <strong>Xcode</strong> menu, select <strong>Preferences</strong>, then the <strong>Downloads</strong> tab. From the <strong>Components</strong> panel, press the <strong>Install</strong> button next to the <strong>Command Line Tools</strong> listing.</p> <h2>Install Deploy Tools</h2> <p>Run from comman-line terminal:</p> <div class=\"highlight\"><pre>$ npm install -g ios-sim\n$ npm install -g ios-deploy\n</pre></div> <h2>Create a New Project</h2> <p>Use the <code class=\"prettyprint\">cordova</code> utility to set up a new project, as described in The Cordova <a href=\"../../cli/index\">The Command-Line Interface</a>. For example, in a source-code directory:</p> <div class=\"highlight\"><pre>$ cordova create hello com.example.hello \"HelloWorld\"\n$ cd hello\n$ cordova platform add ios\n$ cordova prepare              # or \"cordova build\"\n</pre></div> <h2>Deploy the app</h2> <p>To deploy the app on a connected iOS device:</p> <div class=\"highlight\"><pre>$ cordova run ios --device\n</pre></div> <p>To deploy the app on a default iOS emulator:</p> <div class=\"highlight\"><pre>$ cordova emulate ios\n</pre></div> <p>You can use <strong>cordova run ios --list</strong> to see all available targets and <strong>cordova run ios --target=target_name</strong> to run application on a specific device or emulator (for example, <code class=\"prettyprint\">cordova run ios --target=\"iPhone-6\"</code>).</p> <p>You can also use <strong>cordova run --help</strong> to see additional build and run options.</p> <h2>Open a Project in the SDK</h2> <p>Once ios platform is added to your project, you can open it from within Xcode. Double-click to open the <code class=\"prettyprint\">hello/platforms/ios/hello.xcodeproj</code> file. The screen should look like this:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/ios/helloworld_project.png\" alt=\"\"></p> <h2>Deploy to Emulator</h2> <p>To preview the app in the iOS emulator:</p> <ol> <li><p>Make sure the <em>.xcodeproj</em> file is selected in the left panel.</p></li> <li><p>Select the <strong>hello</strong> app in the panel immediately to the right.</p></li> <li><p>Select the intended device from the toolbar's <strong>Scheme</strong> menu, such as the iPhone 6.0 Simulator as highlighted here:</p></li> </ol> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/ios/select_xcode_scheme.png\" alt=\"\"></p> <ol> <li>Press the <strong>Run</strong> button that appears in the same toolbar to the left of the <strong>Scheme</strong>. That builds, deploys and runs the application in the emulator. A separate emulator application opens to display the app:</li> </ol> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/ios/HelloWorldStandard.png\" alt=\"\"></p> <p>Only one emulator may run at a time, so if you want to test the app in a different emulator, you need to quit the emulator application and run a different target within Xcode.</p> <p>Xcode comes bundled with emulators for the latest versions of iPhone and iPad. Older versions may be available from the <strong>Xcode → Preferences → Downloads → Components</strong> panel.</p> <h2>Deploy to Device</h2> <p>For details about various requirements to deploy to a device, refer to the <em>Launch Your App On Devices</em> section of Apple's <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html\">About App Distribution Workflows</a>. Briefly, you need to do the following before deploying:</p> <ol> <li><p>Join the Apple iOS Developer Program.</p></li> <li><p>Create a <em>Provisioning Profile</em> within the <a href=\"https://developer.apple.com/ios/manage/overview/index.action\">iOS Provisioning Portal</a>. You can use its <em>Development Provisioning Assistant</em> to create and install the profile and certificate Xcode requires.</p></li> <li><p>Verify that the <em>Code Signing</em> section's <em>Code Signing Identity</em> within the project settings is set to your provisioning profile name.</p></li> </ol> <p>To deploy to the device:</p> <ol> <li><p>Use the USB cable to plug the device into your Mac.</p></li> <li><p>Select the name of the project in the Xcode window's <strong>Scheme</strong> drop-down list.</p></li> <li><p>Select your device from the <strong>Device</strong> drop-down list. If it is plugged in via USB but still does not appear, press the <strong>Organizer</strong> button to resolve any errors.</p></li> <li><p>Press the <strong>Run</strong> button to build, deploy and run the application on your device.</p></li> </ol> <h2>Common Problems</h2> <p><strong>Deprecation Warnings</strong>: When an application programming interface (API) is changed or replaced by another API, it is marked as <em>deprecated</em>. The API still works in the near term, but is eventually removed. Some of these deprecated interfaces are reflected in Apache Cordova, and Xcode issues warnings about them when you build and deploy an application.</p> <p>Xcode's warning about the <code class=\"prettyprint\">invokeString</code> method concerns functionality that launches an app from a custom URL. While the mechanism to load from a custom URL has changed, this code is still present to provide backwards functionality for apps created with older versions of Cordova. The sample app does not use this functionality, so these warnings can be ignored. To prevent these warnings from appearing, remove the code that references the deprecated invokeString API:</p> <ul> <li>\n<p>Edit the <em>Classes/MainViewController.m</em> file, surround the following block of code with <code class=\"prettyprint\">/*</code> and <code class=\"prettyprint\">*/</code> comments as shown below, then type <strong>Command-s</strong> to save the file:</p> <div class=\"highlight\"><pre>(void)webViewDidFinishLoad:(UIWebView*)theWebView\n{\n// only valid if ___PROJECTNAME__-Info.plist specifies a protocol to handle\n/*\nif (self.invokeString) {\n  // this is passed before the deviceready event is fired, so you can access it in js when you receive deviceready\n  NSLog(@\"DEPRECATED: window.invokeString - use the window.handleOpenURL(url) function instead, which is always called when the app is launched through a custom scheme url.\");\n  NSString* jsString = [NSString stringWithFormat:@\"var invokeString = \\\"%@\\\";\", self.invokeString];\n  [theWebView stringByEvaluatingJavaScriptFromString:jsString];\n}\n*/\n// Black base color for background matches the native apps\ntheWebView.backgroundColor = [UIColor blackColor];\n\nreturn [super webViewDidFinishLoad:theWebView];\n}\n</pre></div>\n</li> <li>\n<p>Edit the <em>Classes/AppViewDelegate.m</em> file, comment out the following line by inserting a double slash as shown below, then type <strong>Command-s</strong> to save the file:</p> <div class=\"highlight\"><pre>//self.viewController.invokeString = invokeString;\n</pre></div>\n</li> <li><p>Press <strong>Command-b</strong> to rebuild the project and eliminate the warnings.</p></li> </ul>  <p><strong>Missing Headers</strong>: Compilation errors relating to missing headers result from problems with the build location, and can be fixed via Xcode preferences:</p> <ol> <li><p>Select <strong>Xcode → Preferences → Locations</strong>.</p></li> <li><p>In the <strong>Derived Data</strong> section, press the <strong>Advanced</strong> button and select <strong>Unique</strong> as the <strong>Build Location</strong> as shown here:</p></li> </ol> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/ios/xcode_build_location.png\" alt=\"\"></p> <p>This is the default setting for a new Xcode install, but it may be set differently following an upgrade from an older version of Xcode.</p> <p>For further information, consult Apple's documentation:</p> <ul> <li><p><a href=\"#\">Start Developing iOS Apps Today</a> provides a quick overview of steps for developing iOS Apps.</p></li> <li><p><a href=\"https://developer.apple.com/membercenter/index.action\">Member Center home page</a> provides links to several iOS technical resources including technical resources, the provisioning portal, distribution guides and community forums.</p></li> <li><p><a href=\"#\">Tools Workflow Guide for iOS</a></p></li> <li><p><a href=\"#\">Xcode User Guide</a></p></li> <li><p><a href=\"https://developer.apple.com/videos/wwdc/2012/\">Session Videos</a> from the Apple World Wide Developer Conference 2012 (WWDC2012)</p></li> <li><p>The <a href=\"http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/xcode-select.1.html\">xcode-select command</a>, which helps specify the correct version of Xcode if more than one is installed.</p></li> </ul> <p>(Mac®, OS X®, Apple®, Xcode®, App Store℠, iPad®, iPhone®, iPod® and Finder® are Trademarks of Apple Inc.)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ios/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ios/index.html</a>\n  </p>\n</div>\n","guide/platforms/ios/config":"<h1>iOS Configuration</h1> <p>The <code class=\"prettyprint\">config.xml</code> file controls an app's basic settings that apply across each application and CordovaWebView instance. This section details preferences that only apply to iOS builds. See <a href=\"config_ref_index.md#The%20config.xml%20File\">The config.xml File</a> for information on global configuration options.</p> <ul> <li>\n<p><code class=\"prettyprint\">EnableViewportScale</code> (boolean, defaults to <code class=\"prettyprint\">false</code>): Set to <code class=\"prettyprint\">true</code> to allow a viewport meta tag to either disable or restrict the range of user scaling, which is enabled by default.</p> <div class=\"highlight\"><pre>&lt;preference name=\"EnableViewportScale\" value=\"true\"/&gt;\n</pre></div>\n</li> </ul> <p>Place a viewport such as the following in the HTML to disable scaling and fit content flexibly within the rendering WebView:</p> <div class=\"highlight\"><pre>&lt;meta name='viewport' content='width=device-width, initial-scale=1, user-scalable=no' /&gt;\n</pre></div> <ul> <li>\n<p><code class=\"prettyprint\">MediaPlaybackAllowsAirPlay</code> (boolean, defaults to <code class=\"prettyprint\">true</code>): Set to <code class=\"prettyprint\">false</code> to prevent Air Play from being used in this view. Available in default UIWebView and WKWebView.</p> <div class=\"highlight\"><pre>&lt;preference name=\"MediaPlaybackAllowsAirPlay\" value=\"false\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">MediaPlaybackRequiresUserAction</code> (boolean, defaults to <code class=\"prettyprint\">false</code>): Set to <code class=\"prettyprint\">true</code> to prevent HTML5 videos or audios from playing automatically with the <code class=\"prettyprint\">autoplay</code> attribute or via JavaScript.</p> <div class=\"highlight\"><pre>&lt;preference name=\"MediaPlaybackRequiresUserAction\" value=\"true\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">AllowInlineMediaPlayback</code> (boolean, defaults to <code class=\"prettyprint\">false</code>): Set to <code class=\"prettyprint\">true</code> to allow HTML5 media playback to appear <em>inline</em> within the screen layout, using browser-supplied controls rather than native controls. For this to work, add the <code class=\"prettyprint\">webkit-playsinline</code> attribute to any <code class=\"prettyprint\">&lt;video&gt;</code> elements.</p> <div class=\"highlight\"><pre>&lt;preference name=\"AllowInlineMediaPlayback\" value=\"true\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">BackupWebStorage</code> (string, either <code class=\"prettyprint\">none</code>, <code class=\"prettyprint\">local</code>, or the default <code class=\"prettyprint\">cloud</code>): Set to <code class=\"prettyprint\">cloud</code> to allow web storage data to backup via iCloud. Set to <code class=\"prettyprint\">local</code> to allow only local backups via iTunes sync. Set to <code class=\"prettyprint\">none</code> prevent web storage backups.</p> <div class=\"highlight\"><pre>&lt;preference name=\"BackupWebStorage\" value=\"local\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">TopActivityIndicator</code> (string, defaults to <code class=\"prettyprint\">gray</code>): Controls the appearance of the small spinning icon in the status bar that indicates significant processor activity. Valid values are <code class=\"prettyprint\">whiteLarge</code>, <code class=\"prettyprint\">white</code>, and <code class=\"prettyprint\">gray</code>.</p> <div class=\"highlight\"><pre>&lt;preference name=\"TopActivityIndicator\" value=\"white\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">KeyboardDisplayRequiresUserAction</code> (boolean, defaults to <code class=\"prettyprint\">true</code>): Set to <code class=\"prettyprint\">false</code> to allow the keyboard to appear when calling <code class=\"prettyprint\">focus()</code> on form inputs.</p> <div class=\"highlight\"><pre>&lt;preference name=\"KeyboardDisplayRequiresUserAction\" value=\"false\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">SuppressesIncrementalRendering</code> (boolean, defaults to <code class=\"prettyprint\">false</code>): Set to <code class=\"prettyprint\">true</code> to wait until all content has been received before it renders to the screen.</p> <div class=\"highlight\"><pre>&lt;preference name=\"SuppressesIncrementalRendering\" value=\"true\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">GapBetweenPages</code> (float, defaults to <code class=\"prettyprint\">0</code>): The size of the gap, in points, between pages.</p> <div class=\"highlight\"><pre>&lt;preference name=\"GapBetweenPages\" value=\"0\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">PageLength</code> (float, defaults to <code class=\"prettyprint\">0</code>): The size of each page, in points, in the direction that the pages flow. When PaginationMode is right to left or left to right, this property represents the width of each page. When PaginationMode is topToBottom or bottomToTop, this property represents the height of each page. The default value is 0, which means the layout uses the size of the viewport to determine the dimensions of the page.</p> <div class=\"highlight\"><pre>&lt;preference name=\"PageLength\" value=\"0\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">PaginationBreakingMode</code> (string, defaults to <code class=\"prettyprint\">page</code>): Valid values are <code class=\"prettyprint\">page</code> and <code class=\"prettyprint\">column</code>.The manner in which column- or page-breaking occurs. This property determines whether certain CSS properties regarding column- and page-breaking are honored or ignored. When this property is set to <code class=\"prettyprint\">column</code>, the content respects the CSS properties related to column-breaking in place of page-breaking.</p> <div class=\"highlight\"><pre>&lt;preference name=\"PaginationBreakingMode\" value=\"page\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">PaginationMode</code> (string, defaults to <code class=\"prettyprint\">unpaginated</code>): Valid values are <code class=\"prettyprint\">unpaginated</code>, <code class=\"prettyprint\">leftToRight</code>, <code class=\"prettyprint\">topToBottom</code>, <code class=\"prettyprint\">bottomToTop</code>, and <code class=\"prettyprint\">rightToLeft</code>. This property determines whether content in the web view is broken up into pages that fill the view one screen at a time, or shown as one long scrolling view. If set to a paginated form, this property toggles a paginated layout on the content, causing the web view to use the values of PageLength and GapBetweenPages to relayout its content.</p> <div class=\"highlight\"><pre>&lt;preference name=\"PaginationMode\" value=\"unpaginated\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">UIWebViewDecelerationSpeed</code> (string, defaults to <code class=\"prettyprint\">normal</code>): Valid values are <code class=\"prettyprint\">normal</code>, <code class=\"prettyprint\">fast</code>. This property controls the deceleration speed of momentum scrolling. <code class=\"prettyprint\">normal</code> is the default speed for most native apps, and <code class=\"prettyprint\">fast</code> is the default for Mobile Safari.</p> <div class=\"highlight\"><pre>&lt;preference name=\"UIWebViewDecelerationSpeed\" value=\"fast\" /&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">ErrorUrl</code> (string, not set by default): If set, will display the referenced local page upon an error in the application.</p> <div class=\"highlight\"><pre>&lt;preference name=\"ErrorUrl\" value=\"myErrorPage.html\"/&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">OverrideUserAgent</code> (string, not set by default): If set, the value will replace the old UserAgent of webview. It is helpful to identify the request from app/browser when requesting remote pages. Use with caution, this may causes compitiable issue with web servers. For most cases, use AppendUserAgent instead.</p> <div class=\"highlight\"><pre>&lt;preference name=\"OverrideUserAgent\" value=\"Mozilla/5.0 My Browser\" /&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">AppendUserAgent</code> (string, not set by default): If set, the value will append to the end of old UserAgent of webview. When using with OverrideUserAgent, this value will be ignored.</p> <div class=\"highlight\"><pre>&lt;preference name=\"AppendUserAgent\" value=\"My Browser\" /&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">target-device</code> (string, defaults to <code class=\"prettyprint\">universal</code>): Valid values are <code class=\"prettyprint\">handset</code>, <code class=\"prettyprint\">tablet</code>, <code class=\"prettyprint\">universal</code> For targeting a specific device family. This property maps directly to <code class=\"prettyprint\">TARGETED_DEVICE_FAMILY</code> in the xcode project. Note that if you target <code class=\"prettyprint\">universal</code> (which is the default) you will need to supply screen shots for both iPhone and iPad or your app may be rejected.</p> <div class=\"highlight\"><pre>&lt;preference name=\"target-device\" value=\"universal\" /&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">deployment-target</code> (string, not set by default): This sets the <code class=\"prettyprint\">IPHONEOS_DEPLOYMENT_TARGET</code> in the build, which ultimately tranlsates to the <code class=\"prettyprint\">MinimumOSVersion</code> in the ipa. For more details please refer to Apple's documentation on <a href=\"https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/cross_development/Configuring/configuring.html\"><code class=\"prettyprint\">Deployment Target Settings</code></a></p> <div class=\"highlight\"><pre>&lt;preference name=\"deployment-target\" value=\"7.0\" /&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">CordovaWebViewEngine</code> (string, defaults to 'CDVUIWebViewEngine'): This sets the WebView engine plugin to be used to render the host app. The plugin must conform to the CDVWebViewEngineProtocol protocol. The 'value' here should match the 'feature' name of the WebView engine plugin that is installed. This preference usually would be set by the WebView engine plugin that is installed, automatically.</p> <div class=\"highlight\"><pre>&lt;preference name=\"CordovaWebViewEngine\" value=\"CDVUIWebViewEngine\" /&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">SuppressesLongPressGesture</code> (boolean, defaults to <code class=\"prettyprint\">false</code>): Set to <code class=\"prettyprint\">true</code> to avoid iOS9+ rendering a magnifying glass widget when the user longpresses the webview. Test your app thoroughly since this may interfere with text selection capabilities.</p> <div class=\"highlight\"><pre>&lt;preference name=\"SuppressesLongPressGesture\" value=\"true\" /&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">Suppresses3DTouchGesture</code> (boolean, defaults to <code class=\"prettyprint\">false</code>): Set to <code class=\"prettyprint\">true</code> to avoid 3D Touch capable iOS devices rendering a magnifying glass widget when the user applies force while longpressing the webview. Test your app thoroughly since this disables <code class=\"prettyprint\">onclick</code> handlers, but plays nice with <code class=\"prettyprint\">ontouchend</code>. If this setting is <code class=\"prettyprint\">true</code>, <code class=\"prettyprint\">SuppressesLongPressGesture</code> will effectively be <code class=\"prettyprint\">true</code> as well.</p> <div class=\"highlight\"><pre>&lt;preference name=\"Suppresses3DTouchGesture\" value=\"true\" /&gt;\n</pre></div>\n</li> <li>\n<p><code class=\"prettyprint\">CDVSystemSchemesOverride</code> (string, defaults to <code class=\"prettyprint\">maps,tel,telprompt</code>): A comma separated list of URL schemes for URLs that are to be passed on to the system, instead of being handled by the Cordova WebView itself.</p> <div class=\"highlight\"><pre>&lt;preference name=\"CDVSystemSchemesOverride\" value=\"maps,tel,telprompt\" /&gt;\n</pre></div>\n</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ios/config.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ios/config.html</a>\n  </p>\n</div>\n","guide/platforms/ios/plugin":"<h1>iOS Plugins</h1> <p>This section provides details for how to implement native plugin code on the iOS platform. Before reading this, see Application Plugins for an overview of the plugin's structure and its common JavaScript interface. This section continues to demonstrate the sample <em>echo</em> plugin that communicates from the Cordova webview to the native platform and back.</p> <p>An iOS plugin is implemented as an Objective-C class that extends the <code class=\"prettyprint\">CDVPlugin</code> class. For JavaScript's <code class=\"prettyprint\">exec</code> method's <code class=\"prettyprint\">service</code> parameter to map to an Objective-C class, each plugin class must be registered as a <code class=\"prettyprint\">&lt;feature&gt;</code> tag in the named application directory's <code class=\"prettyprint\">config.xml</code> file.</p> <h2>Plugin Class Mapping</h2> <p>The JavaScript portion of a plugin uses the <code class=\"prettyprint\">cordova.exec</code> method as follows:</p> <div class=\"highlight\"><pre>exec(&lt;successFunction&gt;, &lt;failFunction&gt;, &lt;service&gt;, &lt;action&gt;, [&lt;args&gt;]);\n</pre></div> <p>This marshals a request from the <code class=\"prettyprint\">UIWebView</code> to the iOS native side, effectively calling the <code class=\"prettyprint\">action</code> method on the <code class=\"prettyprint\">service</code> class, with the arguments passed in the <code class=\"prettyprint\">args</code> array.</p> <p>Specify the plugin as a <code class=\"prettyprint\">&lt;feature&gt;</code> tag in your Cordova-iOS application's project's <code class=\"prettyprint\">config.xml</code> file, using the <code class=\"prettyprint\">plugin.xml</code> file to inject this markup automatically, as described in Application Plugins:</p> <div class=\"highlight\"><pre>&lt;feature name=\"LocalStorage\"&gt;\n   &lt;param name=\"ios-package\" value=\"CDVLocalStorage\" /&gt;\n&lt;/feature&gt;\n</pre></div> <p>The feature's <code class=\"prettyprint\">name</code> attribute should match what you specify as the JavaScript <code class=\"prettyprint\">exec</code> call's <code class=\"prettyprint\">service</code> parameter. The <code class=\"prettyprint\">value</code> attribute should match the name of the plugin's Objective-C class. The <code class=\"prettyprint\">&lt;param&gt;</code> element's <code class=\"prettyprint\">name</code> should always be <code class=\"prettyprint\">ios-package</code>. If you do not follow these guidelines, the plugin may compile, but Cordova may still not be able to access it.</p> <h2>Plugin Initialization and Lifetime</h2> <p>One instance of a plugin object is created for the life of each <code class=\"prettyprint\">UIWebView</code>. Plugins are ordinarily instantiated when first referenced by a call from JavaScript. Otherwise they can be instantiated by setting a <code class=\"prettyprint\">param</code> named <code class=\"prettyprint\">onload</code> to <code class=\"prettyprint\">true</code> in the <code class=\"prettyprint\">config.xml</code> file:</p> <div class=\"highlight\"><pre>&lt;feature name=\"Echo\"&gt;\n   &lt;param name=\"ios-package\" value=\"Echo\" /&gt;\n   &lt;param name=\"onload\" value=\"true\" /&gt;\n&lt;/feature&gt;\n</pre></div> <p>There is <em>no</em> designated initializer for plugins. Instead, plugins should use the <code class=\"prettyprint\">pluginInitialize</code> method for their startup logic.</p> <p>Plugins with long-running requests, background activity such as media playback, listeners, or that maintain internal state should implement the <code class=\"prettyprint\">onReset</code> method to clean up those activities. The method runs when the <code class=\"prettyprint\">UIWebView</code> navigates to a new page or refreshes, which reloads the JavaScript.</p> <h2>Writing an iOS Cordova Plugin</h2> <p>A JavaScript call fires off a plugin request to the native side, and the corresponding iOS Objective-C plugin is mapped properly in the <code class=\"prettyprint\">config.xml</code> file, but what does the final iOS Objective-C plugin class look like? Whatever is dispatched to the plugin with JavaScript's <code class=\"prettyprint\">exec</code> function is passed into the corresponding plugin class's <code class=\"prettyprint\">action</code> method. A plugin method has this signature:</p> <div class=\"highlight\"><pre>- (void)myMethod:(CDVInvokedUrlCommand*)command\n{\n   CDVPluginResult* pluginResult = nil;\n   NSString* myarg = [command.arguments objectAtIndex:0];\n\n   if (myarg != nil) {\n       pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];\n   } else {\n       pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsString:@\"Arg was null\"];\n   }\n   [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];\n}\n</pre></div> <p>For more details, see <code class=\"prettyprint\">[CDVInvokedUrlCommand.h](https://github.com/apache/cordova-ios/blob/master/CordovaLib/Classes/CDVInvokedUrlCommand.h)</code>, <code class=\"prettyprint\">[CDVPluginResult.h](https://github.com/apache/cordova-ios/blob/master/CordovaLib/Classes/CDVPluginResult.h)</code>, and <code class=\"prettyprint\">[CDVCommandDelegate.h](https://github.com/apache/cordova-ios/blob/master/CordovaLib/Classes/CDVCommandDelegate.h)</code>.</p> <h2>iOS CDVPluginResult Message Types</h2> <p>You can use <code class=\"prettyprint\">CDVPluginResult</code> to return a variety of result types back to the JavaScript callbacks, using class methods that follow this pattern:</p> <div class=\"highlight\"><pre>+ (CDVPluginResult*)resultWithStatus:(CDVCommandStatus)statusOrdinal messageAs...\n</pre></div> <p>You can create <code class=\"prettyprint\">String</code>, <code class=\"prettyprint\">Int</code>, <code class=\"prettyprint\">Double</code>, <code class=\"prettyprint\">Bool</code>, <code class=\"prettyprint\">Array</code>, <code class=\"prettyprint\">Dictionary</code>, <code class=\"prettyprint\">ArrayBuffer</code>, and <code class=\"prettyprint\">Multipart</code> types. You can also leave out any arguments to send a status, or return an error, or even choose not to send any plugin result, in which case neither callback fires.</p> <p>Note the following for complex return values:</p> <ul> <li><p><code class=\"prettyprint\">messageAsArrayBuffer</code> expects <code class=\"prettyprint\">NSData*</code> and converts to an <code class=\"prettyprint\">ArrayBuffer</code> in the JavaScript callback. Likewise, any <code class=\"prettyprint\">ArrayBuffer</code> the JavaScript sends to a plugin are converted to <code class=\"prettyprint\">NSData*</code>.</p></li> <li><p><code class=\"prettyprint\">messageAsMultipart</code> expects an <code class=\"prettyprint\">NSArray*</code> containing any of the other supported types, and sends the entire array as the <code class=\"prettyprint\">arguments</code> to your JavaScript callback. This way, all of the arguments are serialized or deserialized as necessary, so it is safe to return <code class=\"prettyprint\">NSData*</code> as multipart, but not as <code class=\"prettyprint\">Array</code>/<code class=\"prettyprint\">Dictionary</code>.</p></li> </ul> <h2>Echo iOS Plugin Example</h2> <p>To match the JavaScript interface's <em>echo</em> feature described in Application Plugins, use the <code class=\"prettyprint\">plugin.xml</code> to inject a <code class=\"prettyprint\">feature</code> specification to the local platform's <code class=\"prettyprint\">config.xml</code> file:</p> <div class=\"highlight\"><pre>&lt;platform name=\"ios\"&gt;\n   &lt;config-file target=\"config.xml\" parent=\"/*\"&gt;\n       &lt;feature name=\"Echo\"&gt;\n           &lt;param name=\"ios-package\" value=\"Echo\" /&gt;\n       &lt;/feature&gt;\n   &lt;/config-file&gt;\n&lt;/platform&gt;\n</pre></div> <p>Then we would add the following <code class=\"prettyprint\">Echo.h</code> and <code class=\"prettyprint\">Echo.m</code> files to the <code class=\"prettyprint\">Plugins</code> folder within the Cordova-iOS application directory:</p> <div class=\"highlight\"><pre>/********* Echo.h Cordova Plugin Header *******/\n\n#import &lt;Cordova/CDV.h&gt;\n\n@interface Echo : CDVPlugin\n\n- (void)echo:(CDVInvokedUrlCommand*)command;\n\n@end\n\n/********* Echo.m Cordova Plugin Implementation *******/\n\n#import \"Echo.h\"\n#import &lt;Cordova/CDV.h&gt;\n\n@implementation Echo\n\n- (void)echo:(CDVInvokedUrlCommand*)command\n{\n   CDVPluginResult* pluginResult = nil;\n   NSString* echo = [command.arguments objectAtIndex:0];\n\n   if (echo != nil &amp;&amp; [echo length] &gt; 0) {\n       pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsString:echo];\n   } else {\n       pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR];\n   }\n\n   [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];\n}\n\n@end\n</pre></div> <p>The necessary imports at the top of the file extends the class from <code class=\"prettyprint\">CDVPlugin</code>. In this case, the plugin only supports a single <code class=\"prettyprint\">echo</code> action. It obtains the echo string by calling the <code class=\"prettyprint\">objectAtIndex</code> method get the first parameter of the <code class=\"prettyprint\">arguments</code> array, which corresponds to the arguments passed in by the JavaScript <code class=\"prettyprint\">exec()</code> function.</p> <p>It checks the parameter to make sure it is not <code class=\"prettyprint\">nil</code> or an empty string, returning a <code class=\"prettyprint\">PluginResult</code> with an <code class=\"prettyprint\">ERROR</code> status if so. If the parameter passes the check, it returns a <code class=\"prettyprint\">PluginResult</code> with an <code class=\"prettyprint\">OK</code> status, passing in the original <code class=\"prettyprint\">echo</code> string. Finally, it sends the result to <code class=\"prettyprint\">self.commandDelegate</code>, which executes the <code class=\"prettyprint\">exec</code> method's success or failure callbacks on the JavaScript side. If the success callback is called, it passes in the <code class=\"prettyprint\">echo</code> parameter.</p> <h2>iOS Integration</h2> <p>The <code class=\"prettyprint\">CDVPlugin</code> class features other methods that your plugin can override. For example, you can capture the <code class=\"prettyprint\">[pause](../../../cordova/events/events.pause.html)</code>, <code class=\"prettyprint\">[resume](../../../cordova/events/events.resume.html)</code>, app terminate and <code class=\"prettyprint\">handleOpenURL</code> events. See the <a href=\"https://github.com/apache/cordova-ios/blob/master/CordovaLib/Classes/CDVPlugin.h\">CDVPlugin.h</a> and <a href=\"https://github.com/apache/cordova-ios/blob/master/CordovaLib/Classes/CDVPlugin.m\">CDVPlugin.m</a> class for guidance.</p> <h2>Threading</h2> <p>Plugin methods ordinarily execute in the same thread as the main interface. If your plugin requires a great deal of processing or requires a blocking call, you should use a background thread. For example:</p> <div class=\"highlight\"><pre>- (void)myPluginMethod:(CDVInvokedUrlCommand*)command\n{\n   // Check command.arguments here.\n   [self.commandDelegate runInBackground:^{\n       NSString* payload = nil;\n       // Some blocking logic...\n       CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsString:payload];\n       // The sendPluginResult method is thread-safe.\n       [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];\n   }];\n}\n</pre></div> <h2>Debugging iOS Plugins</h2> <p>To debug on the Objective-C side, you need Xcode's built-in debugger. For JavaScript, on iOS 5.0 or greater you can use <a href=\"https://github.com/apache/cordova-weinre\">Weinre, an Apache Cordova Project</a> or <a href=\"http://www.iwebinspector.com/\">iWebInspector, a third-party utility</a>. For iOS 8, you can attach Safari 8.0 to the app running within the iOS 8 Simulator.</p> <h2>Common Pitfalls</h2> <ul> <li><p>Don't forget to add your plugin's mapping to <code class=\"prettyprint\">config.xml</code>. If you forget, an error is logged in the Xcode console.</p></li> <li><p>Don't forget to add any hosts you connect to in the whitelist, as described in Domain <a href=\"../../appdev/whitelist/index\">Whitelist Guide</a>. If you forget, an error is logged in the Xcode console.</p></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ios/plugin.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ios/plugin.html</a>\n  </p>\n</div>\n","guide/platforms/ios/webview":"<h1>iOS WebViews</h1> <p>This guide shows how to embed a Cordova-enabled WebView component within a larger iOS application. For details on how these components can communicate with each other, see Application Plugins.</p> <p>Support for WebViews for iOS started with Cordova version 1.4, using a <code class=\"prettyprint\">Cleaver</code> component for which the Xcode template serves as a reference implementation. Cordova 2.0 and later versions only support the subproject-based Cleaver implementation.</p> <p>These instructions require at least Cordova 3.x and Xcode 6.0, along with a <code class=\"prettyprint\">config.xml</code> file from a newly created iOS project. You can use the procedure in <a href=\"../../cli/index\">The Command-Line Interface</a> to create a new project, then obtain the <code class=\"prettyprint\">config.xml</code> file from within the named application's subdirectory within <code class=\"prettyprint\">platforms/ios</code>.</p> <p>To follow these instructions, make sure you have the latest Cordova distribution. Download it from <a href=\"http://cordova.apache.org\">cordova.apache.org</a> and unzip its iOS package.</p> <h2>Adding Cleaver to the Xcode Project (CordovaLib Sub-Project)</h2> <ol> <li><p>Quit Xcode if it is running.</p></li> <li><p>Open a terminal and navigate to the source directory for Cordova iOS.</p></li> <li><p>Copy the <code class=\"prettyprint\">config.xml</code> file described above into the project directory.</p></li> <li><p>Open Xcode and use the Finder to copy the <code class=\"prettyprint\">config.xml</code> file into its <strong>Project Navigator</strong> window.</p></li> <li><p>Choose <strong>Create groups for any added folders</strong> and press <strong>Finish</strong>.</p></li> <li><p>Use the Finder to copy the <code class=\"prettyprint\">CordovaLib/CordovaLib.xcodeproj</code> file into Xcode's <strong>Project Navigator</strong></p></li> <li><p>Select <code class=\"prettyprint\">CordovaLib.xcodeproj</code> within the <strong>Project Navigator</strong>.</p></li> <li><p>Type the <strong>Option-Command-1</strong> key combination to show the <strong>File Inspector</strong>.</p></li> <li><p>Choose <strong>Relative to Group</strong> in the <strong>File Inspector</strong> for the drop-down menu for <strong>Location</strong>.</p></li> <li><p>Select the <strong>project icon</strong> in the <strong>Project Navigator</strong>, select the <strong>Target</strong>, then select the <strong>Build Settings</strong> tab.</p></li> <li><p>Add <code class=\"prettyprint\">-force_load</code> and <code class=\"prettyprint\">-Obj-C</code> for the <strong>Other Linker Flags</strong> value.</p></li> <li><p>Click on the <strong>project icon</strong> in the Project Navigator, select the <strong>Target</strong>, then select the <strong>Build Phases</strong> tab.</p></li> <li><p>Expand <strong>Link Binaries with Libraries</strong>.</p></li> <li>\n<p>Select the <strong>+</strong> button, and add the following <strong>frameworks</strong>. Optionally within the <strong>Project Navigator</strong>, move them under the <strong>Frameworks</strong> group:</p> <div class=\"highlight\"><pre>AssetsLibrary.framework\nCoreLocation.framework\nCoreGraphics.framework\nMobileCoreServices.framework\n</pre></div>\n</li> <li><p>Expand <strong>Target Dependencies</strong>, the top box with that label if there's more than one box.</p></li> <li><p>Select the <strong>+</strong> button, and add the <code class=\"prettyprint\">CordovaLib</code> build product.</p></li> <li><p>Expand <strong>Link Binaries with Libraries</strong>, the top box with that label if there's more than one box.</p></li> <li><p>Select the <strong>+</strong> button, and add <code class=\"prettyprint\">libCordova.a</code>.</p></li> <li><p>Set the <strong>Xcode Preferences → Locations → Derived Data → Advanced...</strong> to <strong>Unique</strong>.</p></li> <li><p>Select the <strong>project icon</strong> in the Project Navigator, select your <strong>Target</strong>, then select the <strong>Build Settings</strong> tab.</p></li> <li>\n<p>Search for <strong>Header Search Paths</strong>. For that setting, add these three values below, including the quotes:</p> <div class=\"highlight\"><pre>\"$(TARGET_BUILD_DIR)/usr/local/lib/include\"        \n\"$(OBJROOT)/UninstalledProducts/include\"\n\"$(OBJROOT)/UninstalledProducts/$(PLATFORM_NAME)/include\"\n\"$(BUILT_PRODUCTS_DIR)\"\n</pre></div> <p>As of Cordova 2.1.0, <code class=\"prettyprint\">CordovaLib</code> has been upgraded to use <strong>Automatic Reference Counting (ARC)</strong>. You don't need to upgrade to <strong>ARC</strong> to use <code class=\"prettyprint\">CordovaLib</code>, but if you want to upgrade your project to use <strong>ARC</strong>, you should use the Xcode migration wizard from the <strong>Edit → Refactor → Convert to Objective-C ARC...</strong> menu, <strong>de-select libCordova.a</strong>, then run the wizard to completion.</p>\n</li> </ol> <h2>Using CDVViewController</h2> <ol> <li>\n<p>Add the following header:</p> <div class=\"highlight\"><pre>#import &lt;Cordova/CDVViewController.h&gt;\n</pre></div>\n</li> <li>\n<p>Instantiate a new <code class=\"prettyprint\">CDVViewController</code> and retain it somewhere, e.g., to a class property:</p> <div class=\"highlight\"><pre>CDVViewController* viewController = [CDVViewController new];\n</pre></div>\n</li> <li>\n<p>Optionally, set the <code class=\"prettyprint\">wwwFolderName</code> property, which defaults to <code class=\"prettyprint\">www</code>:</p> <div class=\"highlight\"><pre>viewController.wwwFolderName = @\"myfolder\";\n</pre></div>\n</li> <li>\n<p>Optionally, set the start page in the <code class=\"prettyprint\">config.xml</code> file's <code class=\"prettyprint\">&lt;content&gt;</code> tag, either a local file:</p> <div class=\"highlight\"><pre>&lt;content src=\"index.html\" /&gt;\n</pre></div> <p>...or a remote site:</p> <div class=\"highlight\"><pre>&lt;content src=\"http://apache.org\" /&gt;\n</pre></div>\n</li> <li>\n<p>Optionally, set the <code class=\"prettyprint\">useSplashScreen</code> property, which defaults to <code class=\"prettyprint\">NO</code>:</p> <div class=\"highlight\"><pre>viewController.useSplashScreen = YES;\n</pre></div>\n</li> <li>\n<p>Set the <strong>view frame</strong>. Always set this as the last property:</p> <div class=\"highlight\"><pre>viewController.view.frame = CGRectMake(0, 0, 320, 480);\n</pre></div>\n</li> <li>\n<p>Add Cleaver to the view:</p> <div class=\"highlight\"><pre>[myView addSubview:viewController.view];\n</pre></div>\n</li> </ol> <h2>Adding HTML, CSS and JavaScript Assets</h2> <ol> <li><p>Create a new directory within the project, <code class=\"prettyprint\">www</code> for example.</p></li> <li><p>Place HTML, CSS and JavaScript assets into this directory.</p></li> <li><p>Use the Finder to copy the directory into Xcode's <strong>Project Navigator</strong> window.</p></li> <li><p>Select <strong>Create folder references for any added folders</strong>.</p></li> <li>\n<p>Set the appropriate <code class=\"prettyprint\">wwwFolderName</code> and <code class=\"prettyprint\">startPage</code> properties for the directory you initially created, or use the defaults (specified in the previous section) when instantiating the <code class=\"prettyprint\">CDVViewController</code>.</p> <div class=\"highlight\"><pre>/*\n if you created a folder called 'myfolder' and\n you want the file 'mypage.html' in it to be\n the startPage\n*/\nviewController.wwwFolderName = @\"myfolder\";\nviewController.startPage = @\"mypage.html\"\n</pre></div>\n</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ios/webview.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ios/webview.html</a>\n  </p>\n</div>\n","guide/platforms/ubuntu/index":"<h1>Ubuntu Platform Guide</h1> <h2>Initial Release</h2> <p>Welcome to the initial release of Ubuntu platform support in Cordova. With this release, the focus is developing on an Ubuntu system and using the cross-platform workflow discussed in the <a href=\"../../overview/index\">Overview</a>. This includes adding the Ubuntu platform to your project, adding standard Cordova plugins, and building and running apps for the Ubuntu platform.</p> <h3>Ubuntu SDK</h3> <p>You may also want to install the Ubuntu QtCreator development environment. See <a href=\"http://developer.ubuntu.com\">developer.ubuntu.com</a> for more info. (The QtCreator SDK is not required to add Ubuntu platform support to your Cordova app.)</p> <h3>Ubuntu Runtime Platforms</h3> <p>Ubuntu is well known for its Desktop environment (for laptops, PCs and such). Ubuntu Touch extends the Ubuntu OS onto phones and tablets. Ubuntu runtime platforms have varying CPU architectures (x86, armhf, etc.). App and plugin code must be compiled appropriately. Support for this broad area is rapidly evolving in Ubuntu.</p> <h3>Latest Information</h3> <p>For the latest information on Cordova app support for Ubuntu runtime platforms, see <a href=\"http://wiki.ubuntu.com/Cordova\">wiki.ubuntu.com/Cordova</a>.</p> <h2>Development Platform Requirements</h2> <p>For this initial release, the development platform should be an Ubuntu Desktop. Ubuntu 13.10 (codename ‘saucy’) or later is required to enjoy the full set of supported capabilities.</p> <p>You can install Cordova on non-Ubuntu systems (using npm), but important capabilities are only provided through Ubuntu debian packages at this time.</p> <h2>Cordova Installation</h2> <p>Add the Ubuntu Cordova <a href=\"https://launchpad.net/%7Ecordova-ubuntu/+archive/ppa\">Personal Package Archive</a> to your Ubuntu system:</p> <div class=\"highlight\"><pre>$ sudo add-apt-repository ppa:cordova-ubuntu/ppa\n$ sudo apt-get update\n</pre></div> <p>Install cordova-cli package (and its dependencies):</p> <div class=\"highlight\"><pre>$ sudo apt-get install cordova-cli\n</pre></div> <h2>Project Workflow</h2> <h3>Create a project</h3> <p>Creates an app in a <code class=\"prettyprint\">hello</code> directory whose display name is <code class=\"prettyprint\">HelloWorld</code>:</p> <div class=\"highlight\"><pre>$ cordova create hello com.example.hello HelloWorld\n</pre></div> <h3>Move into the Project Directory</h3> <div class=\"highlight\"><pre>$ cd hello\n</pre></div> <h3>Add the Ubuntu Platform</h3> <div class=\"highlight\"><pre>$ cordova platform add ubuntu\n</pre></div> <h3>Build for Ubuntu</h3> <div class=\"highlight\"><pre>$ cordova build ubuntu\n</pre></div> <h3>Run the App</h3> <div class=\"highlight\"><pre>$ cordova run ubuntu\n</pre></div> <h3>Add the Camera Plugin</h3> <div class=\"highlight\"><pre>$ cordova plugin add cordova-plugin-camera\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ubuntu/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ubuntu/index.html</a>\n  </p>\n</div>\n","guide/platforms/wp8/upgrade":"<h1>Upgrading Windows Phone 8</h1> <p>This guide shows how to modify Windows Phone 8 projects, to upgrade from older versions of Cordova. Some of these instructions apply to projects created with an older set of command-line tools that precede the <code class=\"prettyprint\">cordova</code> CLI utility. See The Command-Line Interface for information how to update the version of the CLI. The following section shows how to upgrade from non-CLI and CLI projects.</p> <h2>Upgrading 3.6.0 Projects to 4.0.0</h2> <p>For non-CLI projects, run:</p> <div class=\"highlight\"><pre>bin/update path/to/project\n</pre></div> <p>For CLI projects:</p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update wp8</code> in your existing projects.</p></li> </ol> <h2>Upgrade to 3.2.0 from 3.1.0</h2> <p>For projects that were created with the cordova CLI: </p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>. </p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update wp8</code></p></li> </ol> <p>For projects not created with the cordova CLI, run:</p> <div class=\"highlight\"><pre>bin\\update &lt;project_path&gt;\n</pre></div> <h2>Upgrade to 3.1.0 from 3.0.0</h2> <p>For projects that were created with the cordova CLI: </p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>. </p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update wp8</code></p></li> </ol> <p>For projects not created with the cordova CLI, run:</p> <div class=\"highlight\"><pre>bin\\update &lt;project_path&gt;\n</pre></div> <h2>Upgrade to the CLI (3.0.0) from 2.9.0</h2> <ol> <li><p>Create a new Apache Cordova 3.0.0 project using the cordova CLI, as described in <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Add your platforms to the cordova project, for example: <code class=\"prettyprint\">cordova\nplatform add wp8</code>.</p></li> <li><p>Copy the contents of the project's <code class=\"prettyprint\">www</code> directory to the <code class=\"prettyprint\">www</code> directory at the root of the cordova project you just created.</p></li> <li><p>Copy or overwrite any native assets from your original project (<code class=\"prettyprint\">SplashScreen</code>, <code class=\"prettyprint\">ApplicationIcon</code>, etc.), making sure to add any new files to the <code class=\"prettyprint\">.csproj</code> file. The windows phone project builds inside the <code class=\"prettyprint\">platforms\\wp8</code> directory.</p></li> <li><p>Use the cordova CLI tool to install any plugins you need. Note that the CLI handles all core APIs as plugins, so they may need to be added. Only 3.0.0 plugins are compatible with the CLI.</p></li> <li><p>Build and test.</p></li> </ol> <h2>Upgrade to 3.0.0 (non-CLI) from 2.x</h2> <p>In Visual Studio's Solution Explorer window:</p> <ol> <li><p>Create a new Apache Cordova WP8 3.0.0 Project.</p></li> <li><p>Copy the contents of the <code class=\"prettyprint\">www</code> directory to the new project, and be sure these items are added to the VS project.</p></li> <li><p>Copy and overwrite any splash screen, or icon images.</p></li> <li><p>Copy over any plugins from the <code class=\"prettyprint\">plugins</code> directory to the new project and ensure that they are also added to the VS project. </p></li> <li><p>Build and test.</p></li> </ol> <p><strong>NOTE</strong>: all core APIs are removed from Cordova version 3.0, and must be installed separately as plugins. For more information on how to re-enable these features in a non-CLI workflow, see Using Plugman to Manage Plugins.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/wp8/upgrade.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/wp8/upgrade.html</a>\n  </p>\n</div>\n","guide/platforms/wp8/index":"<h1>Windows Phone 8 Platform Guide</h1> <p>This guide shows how to set up your SDK development environment to deploy Cordova apps for Windows Phone devices. It focuses on Windows Phone 8, but provides additional details on how to support Windows Phone 7.</p> <p>It shows how to use either Windows Phone-specific shell tools to generate and build apps, or the cross-platform Cordova CLI discussed in <a href=\"../../cli/index\">The Command-Line Interface</a>. (See the <a href=\"../../overview/index\">Overview</a> for a comparison of these development workflows.) This section also shows how to open Cordova apps so that you can modify them within Visual Studio. Regardless of which approach you take, you need to install the Windows Phone SDK, as described below.</p> <p>See the following for details specific to the Windows Phone platform:</p> <ul> <li><a href=\"plugin\">Windows Phone 8 Plugins</a></li> <li><a href=\"upgrade\">Upgrading Windows Phone 8</a></li> </ul> <p>For the Windows Phone 8 platform, the Cordova WebView relies on Internet Explorer 10 as its rendering engine, so as a practical matter you can use IE10's powerful debugger to test any web content that doesn't invoke Cordova APIs. The Windows Phone Developer Blog provides <a href=\"http://blogs.windows.com/windows_phone/b/wpdev/archive/2012/11/15/adapting-your-webkit-optimized-site-for-internet-explorer-10.aspx\">helpful guidance</a> on how to support IE10 along with comparable WebKit browsers.</p> <h2>Requirements and Support</h2> <p>You need the following:</p> <ul> <li><p>A 64-bit version of Windows 8 Pro, either an installation disk or an <em>ISO</em> disk image file. An evaluation version is available on the <a href=\"http://msdn.microsoft.com/en-US/evalcenter/jj554510\">Microsoft Developer Network</a>. The Pro version is necessary to run the device emulator.</p></li> <li><p>The <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=35471\">Windows Phone SDK</a>.</p></li> <li><p>In order to deploy via the command-line with the Windows Phone 8.0 SDK, <a href=\"https://support.microsoft.com/en-us/kb/2797912\">Visual Studio 2012 Update 2</a> must be installed.</p></li> </ul> <p>To develop Cordova apps for Windows Phone devices, you may use a PC running Windows, but you may also develop on a Mac, either by running a virtual machine environment or by using Boot Camp to dual-boot a Windows partition. Consult these resources to set up the required Windows development environment on a Mac:</p> <ul> <li><p><strong>VMWare Fusion</strong>: To set up the Windows 8 virtual machine, follow the instructions provided by the <a href=\"http://msdn.microsoft.com/en-US/library/windows/apps/jj945426\">Microsoft Developer Network</a>, then see <a href=\"vmware\">Configuring VMWare Fusion</a> for information on preparing the virtual environment to run the emulator bundled with the SDK.</p></li> <li><p><strong>Parallels Desktop</strong>: To set up the Windows 8 virtual machine, follow the instructions provided by the <a href=\"http://msdn.microsoft.com/en-US/library/windows/apps/jj945424\">Microsoft Developer Network</a>, then see <a href=\"parallels\">Configuring Parallels Desktop</a> for information on preparing the virtual environment to run the emulator bundled with the SDK.</p></li> </ul>  <ul> <li>\n<strong>Boot Camp</strong>: To set up the Windows 8 partition, follow the installation instructions provided by the <a href=\"http://msdn.microsoft.com/en-US/library/windows/apps/jj945423\">Microsoft Developer Network</a>.</li> </ul> <p>If you are developing on a PC, its processor must support virtualization (<em>VT-x</em> on Intel) and <a href=\"http://en.wikipedia.org/wiki/Second_Level_Address_Translation\">Second Level Address Translation (SLAT)</a>. Consult <a href=\"http://ark.intel.com/Products/VirtualizationTechnology\">Intel's list of supporting processors</a>. Virtualization is typically disabled by default, so you need to enable it in your BIOS settings. The PC should have at least 6.5GB of free hard disk space, and 4GB of RAM.</p> <h2>Using Cordova Shell Tools</h2> <p>If you want to use Cordova's Windows Phone-centered shell tools in conjunction with the SDK, you have two basic options:</p> <ul> <li><p>Access them locally from project code generated by the CLI. They are available in the <code class=\"prettyprint\">platforms/wp8/cordova</code> directory after you add the <code class=\"prettyprint\">wp8</code> platform as described below.</p></li> <li><p>Download them from a separate distribution at <a href=\"http://cordova.apache.org\">cordova.apache.org</a>. The Cordova distribution contains separate archives for each platform. Be sure to expand the appropriate archive, <code class=\"prettyprint\">cordova-wp8\\wp8</code> in this case, within an empty directory. The relevant batch utilities are available in the top-level <code class=\"prettyprint\">bin</code> directory. (Consult the <strong>README</strong> file if necessary for more detailed directions.)</p></li> </ul> <p>These shell tools allow you to create, build, and run Windows Phone apps. For information on the additional command-line interface that enables plugin features across all platforms, see Using Plugman to Manage Plugins. See Application Plugins for guidance on how to develop plugins, and <a href=\"plugin\">Windows Phone 8 Plugins</a> for details specific to the Windows Phone platform.</p> <h2>Install the SDK</h2> <p>Install the latest version of the Windows Phone SDK from the <strong>Downloads</strong> area of <a href=\"https://dev.windowsphone.com/en-us/downloadsdk\">dev.windowsphone.com</a>. You may also install more recent emulator update packages.</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/wp8/wp8_downloadSDK.png\" alt=\"\"></p> <h2>Create a New Project</h2> <p>At this point, to create a new project you can choose between the cross-platform CLI tool described in <a href=\"../../cli/index\">The Command-Line Interface</a>, or the set of Windows Phone-specific shell tools. From within a source-code directory, here's the CLI approach:</p> <div class=\"highlight\"><pre>&gt; cordova create hello com.example.hello HelloWorld\n&gt; cd hello\n&gt; cordova platform add wp8\n</pre></div> <p>Here's the corresponding lower-level shell-tool approach:</p> <div class=\"highlight\"><pre>C:\\path\\to\\cordova-wp8\\bin\\create.bat C:\\path\\to\\new\\hello com.example.hello HelloWorld\n</pre></div> <h2>Build the Project</h2> <p>If you are using the CLI in development, the project directory's top-level <code class=\"prettyprint\">www</code> directory contains the source files. Run either of these within the project directory to rebuild the app:</p> <div class=\"highlight\"><pre>&gt; cordova build\n&gt; cordova build wp8   # do not rebuild other platforms\n</pre></div> <p>If you are using the Windows Phone-specific shell tools in development, there is a different approach. Once you generate the project, the default app's source is available in the <code class=\"prettyprint\">projects\\wp8\\www</code> subdirectory. Subsequent commands are available in the <code class=\"prettyprint\">cordova</code> subdirectory at the same level.</p> <p>The <code class=\"prettyprint\">build</code> command cleans project files and rebuilds the app. The first example generates debugging information, and the second signs the apps for release:</p> <div class=\"highlight\"><pre>C:\\path\\to\\project\\cordova\\build.bat --debug        \nC:\\path\\to\\project\\cordova\\build.bat --release\n</pre></div> <p>The <code class=\"prettyprint\">clean</code> command helps flush out directories in preparation for the next <code class=\"prettyprint\">build</code>:</p> <div class=\"highlight\"><pre>C:\\path\\to\\project\\cordova\\clean.bat\n</pre></div> <h2>Deploy to Emulator</h2> <p>At this point you can use the <code class=\"prettyprint\">cordova</code> CLI utility to deploy the application to the emulator from the command line:</p> <div class=\"highlight\"><pre>&gt; cordova emulate wp8\n</pre></div> <p>Otherwise use the alternate shell interface:</p> <div class=\"highlight\"><pre>C:\\path\\to\\project\\cordova\\run\n</pre></div> <p>By default, the <code class=\"prettyprint\">run</code> script invokes the emulator flag, and accepts additional build flags, for which <code class=\"prettyprint\">--debug</code> provides the default:</p> <div class=\"highlight\"><pre>C:\\path\\to\\project\\cordova\\run --emulator --debug\nC:\\path\\to\\project\\cordova\\run --emulator --release\nC:\\path\\to\\project\\cordova\\run --emulator --nobuild\n</pre></div> <p>The emulator launches a device image with the app installed. From the home screen, navigate to the apps panel to launch the <strong>HelloWorld</strong> app. This shows the app launching with its splash screen followed by its main interface:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/wp8/wp8_emulator.png\" alt=\"\"></p> <p>The emulator's basic controls on the top-right of the device screen allow you to toggle between portrait and landscape orientation. The <strong>&gt;&gt;</strong> button opens more controls that allow you to test more complex orientations and gestures:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/wp8/wp8_emulator_orient.png\" alt=\"\"></p> <p>These advanced controls also allow you to modify the device's location or to simulate sequences of movements:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/wp8/wp8_emulator_loc.png\" alt=\"\"></p> <h2>Deploy to Device</h2> <p>Before testing your application on a device, the device must be registered. Consult <a href=\"http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff402565.aspx\">Microsoft's documentation</a> for details on how to deploy and test on Windows Phone 8. Also, make sure the phone is connected to the computer, and the screen is unlocked.</p> <p>Then run the following CLI command to run the app on the device:</p> <div class=\"highlight\"><pre>&gt; cordova run wp8\n</pre></div> <p>It corresponds to this lower-level shell command:</p> <div class=\"highlight\"><pre>C:\\path\\to\\project\\cordova\\run --device\n</pre></div> <p>Alternately, if you are working in Visual Studio, select <strong>Windows Phone Device</strong> from the drop-down menu at the top, then press the green <strong>Play</strong> button nearby or else type <strong>F5</strong>.</p> <h2>Modify the Project in the SDK</h2> <p>Once you build a Cordova app as described above, you can open it with the SDK. The various <code class=\"prettyprint\">build</code> commands generates a Visual Studio Solution (<em>.sln</em>) file. Open the file to modify the project within Visual Studio. The web-based source code is available within the project's <code class=\"prettyprint\">www</code> directory. Along with other tools the SDK provides, the control below the menu allows you to launch the app in a Windows Phone emulator:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/wp8/wp8_vs.png\" alt=\"\"></p> <p>Consult the <a href=\"../../overview/index\">Overview</a> for advice on how to use Cordova's command-line tools or the SDK in your workflow. The Cordova CLI relies on cross-platform source code that routinely overwrites the platform-specific files used by the SDK. If you want to work within the SDK, use the lower-level shell tools as an alternative to the CLI.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/wp8/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/wp8/index.html</a>\n  </p>\n</div>\n","guide/platforms/wp8/plugin":"<h1>Windows Phone 8 Plugins</h1> <p>This section provides details for how to implement native plugin code on the Windows Phone platform. Before reading this, see <a href=\"../../hybrid/plugins/index\">Plugin Development Guide</a> for an overview of the plugin's structure and its common JavaScript interface. This section continues to demonstrate the sample <em>echo</em> plugin that communicates from the Cordova webview to the native platform and back.</p> <p>Writing a plugin for Cordova on Windows Phone requires a basic understanding of Cordova's architecture. Cordova-WP8 consists of a <code class=\"prettyprint\">WebBrowser</code> that hosts the application's JavaScript code and manages native API calls. You can extend a C# <code class=\"prettyprint\">BaseCommand</code> class (<code class=\"prettyprint\">WPCordovaClassLib.Cordova.Commands.BaseCommand</code>), which comes with most of the functionality you need:</p> <ol> <li><p>Select your project, and right-click to choose <strong>Add → New Item...</strong> If you wish, you can add it to the <code class=\"prettyprint\">Plugins</code> folder.</p></li> <li><p>Select <strong>Class</strong> and name it <code class=\"prettyprint\">Echo.cs</code>. This class name must <em>exactly</em> match what you call specify as the service in the <code class=\"prettyprint\">cordova.exec()</code> call on the JavaScript side.</p></li> <li>\n<p>Include the base classes implementation:</p> <div class=\"highlight\"><pre>using WPCordovaClassLib.Cordova;\nusing WPCordovaClassLib.Cordova.Commands;\nusing WPCordovaClassLib.Cordova.JSON;\n</pre></div>\n</li> <li>\n<p>Extend your class from <code class=\"prettyprint\">BaseCommand</code>:</p> <div class=\"highlight\"><pre>public class Echo : BaseCommand\n{\n// ...\n}\n</pre></div>\n</li> <li>\n<p>Add an <code class=\"prettyprint\">echo</code> method that is callable from JavaScript:</p> <div class=\"highlight\"><pre>public class Echo : BaseCommand\n{\npublic void echo(string options)\n{\n   // all JS callable plugin methods MUST have this signature!\n   // public, returning void, 1 argument that is a string\n}\n}\n</pre></div>\n</li> </ol> <p>See the <a href=\"https://github.com/apache/cordova-wp8/blob/master/wp8/template/cordovalib/Commands/BaseCommand.cs\">BaseCommand.cs</a> class for methods available for the plugin to override. For example, the plugin can capture '<a href=\"../../../cordova/events/events.pause\">pause</a>' and '<a href=\"../../../cordova/events/events.resume\">resume</a>' events.</p> <h2>Namespaces</h2> <p>The default namespace for unqualified commands is:</p> <div class=\"highlight\"><pre>namespace Cordova.Extension.Commands\n{\n   // ...\n}\n</pre></div> <p>If you want to specify your own namespace, you need to make a fully qualified call to <code class=\"prettyprint\">cordova.exec</code>. For example, if you want to define your C# class like this:</p> <div class=\"highlight\"><pre>namespace com.mydomain.cordovaExtensions\n{\n   public class Echo : BaseCommand\n   {\n       // ...\n   }\n}\n</pre></div> <p>The JavaScript would need to call <code class=\"prettyprint\">exec</code> like this:</p> <div class=\"highlight\"><pre>cordova.exec(win, fail, \"com.mydomain.cordovaExtensions.Echo\", ...);\n</pre></div> <h2>Interpreting Arguments in C</h2> <p>In the example discussed in Application Plugins, the data your plugin receives is a string, but what if you want to pass an array of strings? Suppose the JavaScript <code class=\"prettyprint\">cordova.exec</code> call is specified like this:</p> <div class=\"highlight\"><pre>cordova.exec(win, fail, \"Echo\", \"echo\", [\"input string\"]);\n</pre></div> <p>The value of <code class=\"prettyprint\">options</code> string passed to the <code class=\"prettyprint\">Echo.echo</code> method is JSON:</p> <div class=\"highlight\"><pre>\"[\\\"input string\\\"]\"\n</pre></div> <p>All JavaScript <code class=\"prettyprint\">exec</code> arguments are JSON-encoded before being passed into C#, and so need to be decoded:</p> <div class=\"highlight\"><pre>string optVal = JsonHelper.Deserialize&lt;string[]&gt;(options)[0];\n// optVal now has the value of \"input string\"\n</pre></div> <h2>Passing Results from C# to JavaScript</h2> <p>The <code class=\"prettyprint\">BaseCommand</code> class provides methods to pass data to JavaScript callback handlers. If you simply want to signal success with no accompanying result, you can simply call:</p> <div class=\"highlight\"><pre>DispatchCommandResult();\n// calls back with an empty plugin result, considered a success callback\n</pre></div> <p>To pass data back, you need to call <code class=\"prettyprint\">DispatchCommandResult</code> differently:</p> <div class=\"highlight\"><pre>DispatchCommandResult(new PluginResult(PluginResult.Status.OK, \"Everything went as planned, this is a result that is passed to the success handler.\"));\n</pre></div> <p>Use an encoded JSON string to pass structured object data back to JavaScript:</p> <div class=\"highlight\"><pre>DispatchCommandResult(new PluginResult(PluginResult.Status.OK, \"{result:\\\"super awesome!\\\"}\"));\n</pre></div> <p>To signal an error, call <code class=\"prettyprint\">DispatchCommandResult</code> with a <code class=\"prettyprint\">PluginResult</code> object whose status is <code class=\"prettyprint\">ERROR</code>:</p> <div class=\"highlight\"><pre>DispatchCommandResult(new PluginResult(PluginResult.Status.ERROR, \"Echo signaled an error\"));\n</pre></div> <h2>Handling Serialization Errors</h2> <p>When interpreting your arguments, <code class=\"prettyprint\">try</code>/<code class=\"prettyprint\">catch</code> blocks help screen out bad input. This pattern appears throughout the Cordova C# code:</p> <div class=\"highlight\"><pre>string optVal = null;\n\ntry\n{\n   optVal = JsonHelper.Deserialize&lt;string[]&gt;(options)[0];\n}\ncatch(Exception)\n{\n   // simply catch the exception, we handle null values and exceptions together\n}\n\nif (optVal == null)\n{\n   DispatchCommandResult(new PluginResult(PluginResult.Status.JSON_EXCEPTION));\n}\nelse\n{\n   // ... continue on to do our work\n}\n</pre></div> <h2>Plugin Lifetime</h2> <p>Plugins with long-running requests, background activity such as media playback, listeners, or that maintain internal state should implement the <code class=\"prettyprint\">onReset</code> method to clean up those activities. The method runs when the CordovaView WebBrowser navigates to a new page or refreshes, which reloads the JavaScript.</p> <div class=\"highlight\"><pre>// defined in WPCordovaClassLib.Cordova.Commands.BaseCommand\npublic virtual void OnReset() { }\n</pre></div> <h2>Plugin XML</h2> <p>The following shows how to use the <code class=\"prettyprint\">plugin.xml</code> file to specify a plugin's source files on the Windows Phone platform. See Application Plugins for an overview, and <a href=\"../../../plugin_ref/spec\">Plugin Specification</a> for details on available options.</p> <ul> <li><p>The <code class=\"prettyprint\">&lt;source-file&gt;</code> element defines all plugin resources, such as <em>.cs</em>, <em>.xaml</em>, <em>.xaml.cs</em>, and <em>.dll</em> files, and image assets.</p></li> <li>\n<p>The <code class=\"prettyprint\">&lt;config-file&gt;</code> element defines elements to inject into a configuration file. This example adds a plugin to the platform's <code class=\"prettyprint\">config.xml</code> file:</p> <div class=\"highlight\"><pre>&lt;config-file target=\"config.xml\" parent=\"/*\"&gt;\n&lt;feature name=\"PluginName\"&gt;\n   &lt;param name=\"wp-package\" value=\"PluginName\"/&gt;\n&lt;/feature&gt;\n&lt;/config-file&gt;\n</pre></div>\n</li> </ul> <p>This example adds the contacts capability to the <code class=\"prettyprint\">WMAppManifest.xml</code> file:</p> <div class=\"highlight\"><pre>&lt;config-file target=\"Properties/WMAppManifest.xml\" parent=\"/Deployment/App/Capabilities\"&gt;\n   &lt;Capability Name=\"ID_CAP_CONTACTS\" /&gt;\n&lt;/config-file&gt;\n</pre></div> <h2>Debugging Plugins</h2> <p>Use Visual Studio's debugger to debug a plugin's C# component. You can set a break point at any of the methods exposed by your class.</p> <p>JavaScript is more difficult to debug on Windows Phone. You need to use <code class=\"prettyprint\">console.log</code> to output the plugin's state, or to inform yourself of errors.</p> <h2>Common Pitfalls</h2> <ul> <li>\n<p>Be careful not to pass arguments from JavaScript to the native side that are difficult to deserialize as JSON. Most device platforms expect the argument passed to <code class=\"prettyprint\">cordova.exec()</code> to be an array, such as the following:</p> <div class=\"highlight\"><pre>cordova.exec(win, fail, \"ServiceName\", \"MethodName\", [\"this is a string\", 54, {literal:'trouble'}]);\n</pre></div>\n</li> </ul> <p>This may result in an overly complex string value for C# to decode:</p> <div class=\"highlight\"><pre>\"[\\\"this is a string\\\", 54, { literal:'trouble' }]\"\n</pre></div> <p>Instead, consider converting <em>all</em> parameters to strings before calling <code class=\"prettyprint\">exec()</code>, and decoding each separately:</p> <div class=\"highlight\"><pre>cordova.exec(win, fail, \"ServiceName\", \"MethodName\", [\"this is a string\", \"54\", \"{literal:'trouble'}\"]);\nstring[] optValues = JsonHelper.Deserialize&lt;string[]&gt;(options);\n</pre></div> <ul> <li>It is usually better to check parameters in JavaScript before calling <code class=\"prettyprint\">exec()</code>. Doing so allows you to re-use more code and pull unnecessary functionality from the plugin's various native implementations.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/wp8/plugin.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/wp8/plugin.html</a>\n  </p>\n</div>\n","guide/platforms/blackberry/upgrade":"<h1>Upgrading BlackBerry</h1> <p>This guide shows how to modify BlackBerry projects to upgrade from older versions of Cordova. These instructions apply to projects created with an older set of command-line tools that precede the <code class=\"prettyprint\">cordova</code> CLI utility. See <a href=\"../../cli/index\">The Command-Line Interface</a> for information how to update the version of the CLI.</p> <h2>Upgrading 2.8.0 projects to 2.9.0</h2> <p>BlackBerry 10:</p> <ol> <li><p>Download and extract the Cordova 2.9.0 source to a permanent location on your hard drive, for example to <code class=\"prettyprint\">~/Cordova-2.9.0</code>.</p></li> <li><p>Quit any running SDK tools: Eclipse, Momentics and the like.</p></li> <li><p>Navigate to the directory where you put the downloaded source above, using a unix like terminal: Terminal.app, Bash, Cygwin, etc.</p></li> <li><p>Create a new project, as described in BlackBerry Shell Tool Guide. This becomes the home of your updated project.</p></li> <li><p>Copy your project's source from the old project's <code class=\"prettyprint\">/www</code> directory to the new project's <code class=\"prettyprint\">/www</code> directory.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova.js</code> file.</p></li> </ol> <h3>BlackBerryOS/Playbook</h3> <ol> <li><p>Download and extract the Cordova 2.9.0 source to a permanent location on your hard drive, for example to <code class=\"prettyprint\">~/Cordova-2.9.0</code>.</p></li> <li><p>Quit any running SDK tools: Eclipse, Momentics and the like.</p></li> <li><p>Navigate to the directory where you put the downloaded source above, using a unix like terminal: Terminal.app, Bash, Cygwin, etc.</p></li> <li><p>Create a new project, as described in BlackBerry Shell Tool Guide. You need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">native</code> directory from the new project into the existing project, overwriting the old <code class=\"prettyprint\">native</code> directory.</p></li> <li><p>Copy the <code class=\"prettyprint\">lib</code> directory from the new project into the existing project, overwriting the old <code class=\"prettyprint\">lib</code> directory.</p></li> <li><p>Copy the <code class=\"prettyprint\">cordova</code> directory from the new project into the existing project, overwriting the old <code class=\"prettyprint\">cordova</code> directory.</p></li> </ol> <h2>Upgrading 2.7.0 projects to 2.8.0</h2> <p>BlackBerry 10:</p> <p>BlackBerry 10 uses the new CLI tooling and manages core APIs as plugins. The instructions migrate your project to a new project, rather than updating an existing project, due to the complexity of updating an old project. Also note that the cordova js script file is now called 'cordova.js' and no longer contains a version string.</p> <ol> <li><p>Download and extract the Cordova 2.8.0 source to a permanent location on your hard drive, for example to <code class=\"prettyprint\">~/Cordova-2.8.0</code>.</p></li> <li><p>Quit any running SDK tools: Eclipse, Momentics and the like.</p></li> <li><p>Navigate to the directory where you put the downloaded source above, using a unix like terminal: Terminal.app, Bash, Cygwin, etc.</p></li> <li><p>Create a new project, as described in BlackBerry Shell Tool Guide. This becomes the home of your updated project.</p></li> <li><p>Copy your project's source from the old project's <code class=\"prettyprint\">/www</code> directory to the new project's <code class=\"prettyprint\">/www</code> directory.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova.js</code> file.</p></li> </ol> <p>BlackBerryOS/Playbook:</p> <ol> <li><p>Download and extract the Cordova 2.8.0 source to a permanent location on your hard drive, for example to <code class=\"prettyprint\">~/Cordova-2.8.0</code>.</p></li> <li><p>Quit any running SDK tools: Eclipse, Momentics and the like.</p></li> <li><p>Navigate to the directory where you put the downloaded source above, using a unix like terminal: Terminal.app, Bash, Cygwin, etc.</p></li> <li><p>Create a new project, as described in BlackBerry Shell Tool Guide. You need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">native</code> directory from the new project into the existing project, overwriting the old <code class=\"prettyprint\">native</code> directory.</p></li> <li><p>Copy the <code class=\"prettyprint\">lib</code> directory from the new project into the existing project, overwriting the old <code class=\"prettyprint\">lib</code> directory.</p></li> <li><p>Copy the <code class=\"prettyprint\">cordova</code> directory from the new project into the existing project, overwriting the old <code class=\"prettyprint\">cordova</code> directory.</p></li> </ol> <h2>Upgrading 2.6.0 projects to 2.7.0</h2> <ol> <li><p>Download and extract the Cordova 2.7.0 source to a permanent location on your hard drive, for example to <code class=\"prettyprint\">~/Cordova-2.7.0</code>.</p></li> <li><p>Quit any running SDK tools: Eclipse, Momentics and the like.</p></li> <li><p>Navigate to the directory where you put the downloaded source above, using a unix like terminal: Terminal.app, Bash, Cygwin, etc.</p></li> <li><p>Create a new project, as described in BlackBerry Shell Tool Guide. You need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-2.7.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-2.6.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova-2.7.0.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">native</code> directory from the new project into the existing project, overwriting the old <code class=\"prettyprint\">native</code> directory.</p></li> <li><p>Copy the <code class=\"prettyprint\">lib</code> directory from the new project into the existing project, overwriting the old <code class=\"prettyprint\">lib</code> directory.</p></li> <li><p>Copy the <code class=\"prettyprint\">cordova</code> directory from the new project into the existing project, overwriting the old <code class=\"prettyprint\">cordova</code> directory.</p></li> </ol> <h2>Upgrade to 2.6.0 from 2.5.0</h2> <p>Updating the PhoneGap download directory:</p> <p>It is recommended that you download a fresh copy of the entire directory.</p> <p>However, here are the new parts needed for the piecemeal update:</p> <ol> <li><p>Update the cordova.blackberry.js file in the <code class=\"prettyprint\">Phonegap-2.6.0/lib/blackberry/javascript</code> directory.</p></li> <li><p>Update the <code class=\"prettyprint\">ext</code>, <code class=\"prettyprint\">ext-air</code>, and <code class=\"prettyprint\">ext-qnx</code> in the <code class=\"prettyprint\">Phonegap-2.6.0/lib/blackberry/framework</code> directory.</p></li> <li><p>Update the <code class=\"prettyprint\">build.xml</code> file in the <code class=\"prettyprint\">Phonegap-2.6.0/lib/blackberry</code> directory.</p></li> <li><p>Update the <code class=\"prettyprint\">Phonegap-2.6.0/lib/blackberry/bin</code> directory.</p></li> <li><p>Update the <code class=\"prettyprint\">VERSION</code> file in the <code class=\"prettyprint\">Phonegap-2.6.0/lib/blackberry</code> directory.</p></li> </ol> <p>Updating the <code class=\"prettyprint\">example/</code> directory or migrating an existing project:</p> <ol> <li><p>Open the <code class=\"prettyprint\">www</code> directory, which contains the app.</p></li> <li><p>Remove and update the .jar file in the <code class=\"prettyprint\">ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">ext-air/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">ext-qnx/</code> directory.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-2.6.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.6.0.js</code> file.</p></li> </ol> <h2>Upgrade to 2.5.0 from 2.4.0</h2> <p>Updating the PhoneGap download directory:</p> <p>It is recommended that you download a fresh copy of the entire directory.</p> <p>However, here are the new parts needed for the piecemeal update:</p> <ol> <li><p>Update the cordova.blackberry.js file in the <code class=\"prettyprint\">Phonegap-2.5.0/lib/blackberry/javascript</code> directory.</p></li> <li><p>Update the <code class=\"prettyprint\">ext</code>, <code class=\"prettyprint\">ext-air</code>, and <code class=\"prettyprint\">ext-qnx</code> in the <code class=\"prettyprint\">Phonegap-2.5.0/lib/blackberry/framework</code> directory.</p></li> <li><p>Update the <code class=\"prettyprint\">build.xml</code> file in the <code class=\"prettyprint\">Phonegap-2.5.0/lib/blackberry</code> directory.</p></li> <li><p>Update the <code class=\"prettyprint\">Phonegap-2.5.0/lib/blackberry/bin</code> directory.</p></li> <li><p>Update the <code class=\"prettyprint\">VERSION</code> file in the <code class=\"prettyprint\">Phonegap-2.5.0/lib/blackberry</code> directory.</p></li> </ol> <p>Updating the example/ directory or migrating an existing project:</p> <ol> <li><p>Open the <code class=\"prettyprint\">www</code> directory, which contains the app.</p></li> <li><p>Remove and update the .jar file in the <code class=\"prettyprint\">ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">ext-air/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">ext-qnx/</code> directory.</p></li> <li><p>Copy the new <code class=\"prettyprint\">cordova-2.5.0.js</code> into your project.</p></li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.5.0.js</code> file.</p></li> </ol> <h2>Upgrade to 2.4.0 from 2.3.0</h2> <p>Updating just the <code class=\"prettyprint\">www</code> directory:</p> <ol> <li><p>Open the <code class=\"prettyprint\">www</code> directory, which contains the app.</p></li> <li><p>Remove and update the .jar file in the <code class=\"prettyprint\">ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">ext-air/</code> directory.</p></li> <li>\n<p>Copy the new <code class=\"prettyprint\">cordova-2.4.0.js</code> into your project.</p> <ul> <li>If playbook, then update the .js file in the <code class=\"prettyprint\">playbook/</code> directory.</li> <li>If BlackBerry 10, then update the .js file in the <code class=\"prettyprint\">qnx/</code> directory.</li> </ul>\n</li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.4.0.js</code> file.</p></li> </ol> <p>Updating the sample directory (ie, updating using the ant tools):</p> <ol> <li><p>Open the <code class=\"prettyprint\">sample/lib/</code> directory.</p></li> <li><p>Update the .jar file in the <code class=\"prettyprint\">cordova.2.3.0/ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">cordova.2.3.0/ext-air/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">cordova.2.3.0/ext-qnx/</code> directory.</p></li> <li><p>Update the .js file in the <code class=\"prettyprint\">cordova.2.3.0/javascript/</code> directory.</p></li> <li><p>Open the <code class=\"prettyprint\">sample/lib/</code> directory and rename the <code class=\"prettyprint\">cordova.2.3.0/</code> directory to <code class=\"prettyprint\">cordova.2.4.0/</code>.</p></li> <li><p>Type <code class=\"prettyprint\">ant blackberry build</code> or <code class=\"prettyprint\">ant playbook build</code> to update the <code class=\"prettyprint\">www</code> directory with updated Cordova.</p></li> <li><p>Open the <code class=\"prettyprint\">www</code> directory and update your HTML to use the new <code class=\"prettyprint\">cordova-2.4.0.js</code> file.</p></li> </ol> <h2>Upgrade to 2.3.0 from 2.2.0</h2> <p>Updating just the <code class=\"prettyprint\">www</code> directory:</p> <ol> <li><p>Open the <code class=\"prettyprint\">www</code> directory, which contains the app.</p></li> <li><p>Remove and update the .jar file in the <code class=\"prettyprint\">ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">ext-air/</code> directory.</p></li> <li>\n<p>Copy the new <code class=\"prettyprint\">cordova-2.3.0.js</code> into your project.</p> <ul> <li>If playbook, then update the .js file in the <code class=\"prettyprint\">playbook/</code> directory.</li> <li>If BlackBerry 10, then update the .js file in the <code class=\"prettyprint\">qnx/</code> directory.</li> </ul>\n</li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.3.0.js</code> file.</p></li> </ol> <p>Updating the sample directory (ie, updating using the ant tools):</p> <ol> <li><p>Open the <code class=\"prettyprint\">sample/lib/</code> directory.</p></li> <li><p>Update the .jar file in the <code class=\"prettyprint\">cordova.2.2.0/ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">cordova.2.2.0/ext-air/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">cordova.2.2.0/ext-qnx/</code> directory.</p></li> <li><p>Update the .js file in the <code class=\"prettyprint\">cordova.2.2.0/javascript/</code> directory.</p></li> <li><p>Open the <code class=\"prettyprint\">sample/lib/</code> directory and rename the <code class=\"prettyprint\">cordova.2.2.0/</code> directory to <code class=\"prettyprint\">cordova.2.3.0/</code>.</p></li> <li><p>Type <code class=\"prettyprint\">ant blackberry build</code> or <code class=\"prettyprint\">ant playbook build</code> to update the <code class=\"prettyprint\">www</code> directory with updated Cordova.</p></li> <li><p>Open the <code class=\"prettyprint\">www</code> directory and update your HTML to use the new <code class=\"prettyprint\">cordova-2.3.0.js</code> file.</p></li> </ol> <h2>Upgrade to 2.2.0 from 2.1.0</h2> <p>Updating just the www directory:</p> <ol> <li><p>Open the <code class=\"prettyprint\">www</code> directory, which contains the app.</p></li> <li><p>Remove and update the .jar file in the <code class=\"prettyprint\">ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">ext-air/</code> directory.</p></li> <li>\n<p>Copy the new <code class=\"prettyprint\">cordova-2.2.0.js</code> into your project.</p> <ul> <li>If playbook, then update the .js file in the <code class=\"prettyprint\">playbook/</code> directory.</li> <li>If BlackBerry 10, then update the .js file in the <code class=\"prettyprint\">qnx/</code> directory.</li> </ul>\n</li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.2.0.js</code> file.</p></li> </ol> <p>Updating the sample directory (ie, updating using the ant tools):</p> <ol> <li><p>Open the <code class=\"prettyprint\">sample/lib/</code> directory.</p></li> <li><p>Update the .jar file in the <code class=\"prettyprint\">cordova.2.1.0/ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">cordova.2.1.0/ext-air/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">cordova.2.1.0/ext-qnx/</code> directory.</p></li> <li><p>Update the .js file in the <code class=\"prettyprint\">cordova.2.1.0/javascript/</code> directory.</p></li> <li><p>Open the <code class=\"prettyprint\">sample/lib/</code> directory and rename the <code class=\"prettyprint\">cordova.2.1.0/</code> directory to <code class=\"prettyprint\">cordova.2.2.0/</code>.</p></li> <li><p>Type <code class=\"prettyprint\">ant blackberry build</code> or <code class=\"prettyprint\">ant playbook build</code> to update the <code class=\"prettyprint\">www</code> directory with updated Cordova.</p></li> <li><p>Open the <code class=\"prettyprint\">www</code> directory and update your HTML to use the new <code class=\"prettyprint\">cordova-2.2.0.js</code> file.</p></li> </ol> <h2>Upgrade to 2.1.0 from 2.0.0</h2> <p>Updating just the <code class=\"prettyprint\">www</code> directory:</p> <ol> <li><p>Open the <code class=\"prettyprint\">www</code> directory, which contains the app.</p></li> <li><p>Remove and update the .jar file in the <code class=\"prettyprint\">ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">ext-air/</code> directory.</p></li> <li>\n<p>Copy the new <code class=\"prettyprint\">cordova-2.1.0.js</code> into your project.</p> <ul> <li>If playbook, then update the .js file in the <code class=\"prettyprint\">playbook/</code> directory.</li> </ul>\n</li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.1.0.js</code> file.</p></li> </ol> <p>Updating the sample directory (ie, updating using the ant tools):</p> <ol> <li><p>Open the <code class=\"prettyprint\">sample/lib/</code> directory.</p></li> <li><p>Update the .jar file in the <code class=\"prettyprint\">cordova.2.0.0/ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">cordova.2.0.0/ext-air/</code> directory.</p></li> <li><p>Update the .js file in the <code class=\"prettyprint\">cordova.2.0.0/javascript/</code> directory.</p></li> <li><p>Open the <code class=\"prettyprint\">sample/lib/</code> directory and rename the <code class=\"prettyprint\">cordova.2.0.0/</code> directory to <code class=\"prettyprint\">cordova.2.1.0/</code>.</p></li> <li><p>Type <code class=\"prettyprint\">ant blackberry build</code> or <code class=\"prettyprint\">ant playbook build</code> to update the <code class=\"prettyprint\">www</code> directory with updated Cordova.</p></li> <li><p>Open the <code class=\"prettyprint\">www</code> directory and update your HTML to use the new <code class=\"prettyprint\">cordova-2.1.0.js</code> file.</p></li> </ol> <h2>Upgrade to 2.0.0 from 1.9.0</h2> <p>Updating just the <code class=\"prettyprint\">www</code> directory:</p> <ol> <li><p>Open the <code class=\"prettyprint\">www</code> directory, which contains the app.</p></li> <li><p>Remove and update the .jar file in the <code class=\"prettyprint\">ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">ext-air/</code> directory.</p></li> <li>\n<p>Copy the new <code class=\"prettyprint\">cordova-2.0.0.js</code> into your project.</p> <ul> <li>If playbook, then update the .js file in the <code class=\"prettyprint\">playbook/</code> directory.</li> </ul>\n</li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-2.0.0.js</code> file.</p></li> <li>\n<p>Update the <code class=\"prettyprint\">www/plugins.xml</code> file. Two plugins changed their namespace/service label. Change the old entries for the Capture and Contact plugins from:</p> <div class=\"highlight\"><pre>&lt;plugin name=\"Capture\" value=\"org.apache.cordova.media.MediaCapture\"/&gt;\n&lt;plugin name=\"Contact\" value=\"org.apache.cordova.pim.Contact\"/&gt;\n</pre></div>\n</li> </ol> <p>To:</p> <div class=\"highlight\"><pre>&lt;plugin name=\"Capture\" value=\"org.apache.cordova.capture.MediaCapture\"/&gt;\n&lt;plugin name=\"Contacts\" value=\"org.apache.cordova.pim.Contact\"/&gt;\n</pre></div> <p>Updating the sample directory (ie, updating using the ant tools):</p> <ol> <li><p>Open the <code class=\"prettyprint\">sample/lib/</code> directory.</p></li> <li><p>Update the .jar file in the <code class=\"prettyprint\">cordova.1.9.0/ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">cordova.1.9.0/ext-air/</code> directory.</p></li> <li><p>Update the .js file in the <code class=\"prettyprint\">cordova.1.9.0/javascript/</code> directory.</p></li> <li><p>Open the <code class=\"prettyprint\">sample/lib/</code> directory and rename the <code class=\"prettyprint\">cordova.1.9.0/</code> directory to <code class=\"prettyprint\">cordova.2.0.0/</code>.</p></li> <li><p>Type <code class=\"prettyprint\">ant blackberry build</code> or <code class=\"prettyprint\">ant playbook build</code> to update the <code class=\"prettyprint\">www</code> directory with updated Cordova.</p></li> <li><p>Open the <code class=\"prettyprint\">www</code> directory and update your HTML to use the new <code class=\"prettyprint\">cordova-2.0.0.js</code> file.</p></li> <li>\n<p>Open the <code class=\"prettyprint\">www</code> directory and update the <code class=\"prettyprint\">plugins.xml</code> file. Two plugins changed their namespace/service label. Change the old entries for the Capture and Contact plugins from:</p> <div class=\"highlight\"><pre> &lt;plugin name=\"Capture\" value=\"org.apache.cordova.media.MediaCapture\"/&gt;\n &lt;plugin name=\"Contact\" value=\"org.apache.cordova.pim.Contact\"/&gt;\n</pre></div>\n</li> </ol> <p>To:</p> <div class=\"highlight\"><pre>&lt;plugin name=\"Capture\" value=\"org.apache.cordova.capture.MediaCapture\"/&gt;\n&lt;plugin name=\"Contacts\" value=\"org.apache.cordova.pim.Contact\"/&gt;\n</pre></div> <ul> <li>To upgrade to 1.8.0, please go from 1.7.0</li> </ul> <h2>Upgrade to 1.8.0 from 1.7.0</h2> <p>Updating just the <code class=\"prettyprint\">www</code> directory:</p> <ol> <li><p>Open the <code class=\"prettyprint\">www</code> directory, which contains the app.</p></li> <li><p>Remove and update the .jar file in the <code class=\"prettyprint\">ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">ext-air/</code> directory.</p></li> <li>\n<p>Copy the new <code class=\"prettyprint\">cordova-1.8.0.js</code> into your project.</p> <ul> <li>If playbook, then update the .js file in the <code class=\"prettyprint\">playbook/</code> directory.</li> </ul>\n</li> <li><p>Update your HTML to use the new <code class=\"prettyprint\">cordova-1.8.0.js</code> file.</p></li> <li>\n<p>Update the <code class=\"prettyprint\">www/plugins.xml</code> file. Two plugins changed their namespace/service label. Change the old entries for the Capture and Contact plugins from:</p> <div class=\"highlight\"><pre>&lt;plugin name=\"Capture\" value=\"org.apache.cordova.media.MediaCapture\"/&gt;\n&lt;plugin name=\"Contact\" value=\"org.apache.cordova.pim.Contact\"/&gt;\n</pre></div>\n</li> </ol> <p>To:</p> <div class=\"highlight\"><pre>&lt;plugin name=\"Capture\" value=\"org.apache.cordova.capture.MediaCapture\"/&gt;\n&lt;plugin name=\"Contacts\" value=\"org.apache.cordova.pim.Contact\"/&gt;\n</pre></div> <p>Updating the sample directory (ie, updating using the ant tools):</p> <ol> <li><p>Open the <code class=\"prettyprint\">sample/lib/</code> directory.</p></li> <li><p>Update the .jar file in the <code class=\"prettyprint\">cordova.1.7.0/ext/</code> directory.</p></li> <li><p>Update the contents of the <code class=\"prettyprint\">cordova.1.7.0/ext-air/</code> directory.</p></li> <li><p>Update the .js file in the <code class=\"prettyprint\">cordova.1.7.0/javascript/</code> directory.</p></li> <li><p>Open the <code class=\"prettyprint\">sample/lib/</code> directory and rename the <code class=\"prettyprint\">cordova.1.7.0/</code> directory to <code class=\"prettyprint\">cordova.1.8.0/</code>.</p></li> <li><p>Type <code class=\"prettyprint\">ant blackberry build</code> or <code class=\"prettyprint\">ant playbook build</code> to update the <code class=\"prettyprint\">www</code> directory with updated Cordova.</p></li> <li><p>Open the <code class=\"prettyprint\">www</code> directory and update your HTML to use the new <code class=\"prettyprint\">cordova-1.8.0.js</code> file.</p></li> <li>\n<p>Open the <code class=\"prettyprint\">www</code> directory and update the <code class=\"prettyprint\">plugins.xml</code> file. Two plugins changed their namespace/service label. Change the old entries for the Capture and Contact plugins from:</p> <div class=\"highlight\"><pre> &lt;plugin name=\"Capture\" value=\"org.apache.cordova.media.MediaCapture\"/&gt;\n &lt;plugin name=\"Contact\" value=\"org.apache.cordova.pim.Contact\"/&gt;\n</pre></div>\n</li> </ol> <p>To:</p> <div class=\"highlight\"><pre>&lt;plugin name=\"Capture\" value=\"org.apache.cordova.capture.MediaCapture\"/&gt;\n&lt;plugin name=\"Contacts\" value=\"org.apache.cordova.pim.Contact\"/&gt;\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/blackberry/upgrade.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/blackberry/upgrade.html</a>\n  </p>\n</div>\n","guide/platforms/win8/index":"<h1>Windows Platform Guide</h1> <p>This guide shows how to set up your SDK development environment to build and deploy Cordova apps for Windows 8, Windows 8.1, Windows Phone 8.1, and Windows 10 Universal App Platform. It shows how to use either shell tools to generate and build apps, or the cross-platform Cordova CLI discussed in <a href=\"../../cli/index\">The Command-Line Interface</a>. (See the <a href=\"../../overview/index\">Overview</a> for a comparison of these development options.) This section also shows how to modify Cordova apps within Visual Studio. Regardless of which approach you take, you need to install the Visual Studio SDK, as described below.</p> <p>See <a href=\"upgrade\">Upgrading Windows 8</a> for information on how to upgrade existing Windows 8 Cordova projects.</p> <p>Window Phone 8 (wp8) stays as a separate platform, see <a href=\"../wp8/index\">Windows Phone 8 Platform Guide</a> for details.</p> <p>Cordova WebViews running on Windows rely on Internet Explorer 10 (Windows 8.0) and Internet Explorer 11 (Windows 8.1 and Windows Phone 8.1) as their rendering engine, so as a practical matter you can use IE's powerful debugger to test any web content that doesn't invoke Cordova APIs. The Windows Phone Developer Blog provides <a href=\"http://blogs.windows.com/windows_phone/b/wpdev/archive/2012/11/15/adapting-your-webkit-optimized-site-for-internet-explorer-10.aspx\">helpful guidance</a> on how to support IE along with comparable WebKit browsers.</p> <h2>Requirements and Support</h2> <p>To develop apps for Windows platform you need:</p> <ul> <li><p>A Windows 8.1, 32 or 64-bit machine (<em>Home</em>, <em>Pro</em>, or <em>Enterprise</em> editions) with minimum 4 GB of RAM.</p></li> <li><p>Windows 8.0, 8.1 or 10, 32 or 64-bit <em>Home</em>, <em>Pro</em>, or <em>Enterprise</em> editions, along with <a href=\"http://www.visualstudio.com/downloads\">Visual Studio 2012 Express</a> or Visual Studio 2013. Visual Studio 2015 is not able to build Windows 8.0 apps.</p></li> </ul> <p>To develop apps for Windows 8.0 and 8.1 (including Windows Phone 8.1):</p> <ul> <li><p>Windows 8.1 or Windows 10, 32 or 64-bit <em>Home</em>, <em>Pro</em>, or <em>Enterprise</em> editions, along with <a href=\"http://www.visualstudio.com/downloads\">Visual Studio 2013 Express</a> or higher. An evaluation version of Windows 8.1 Enterprise is available from the <a href=\"http://msdn.microsoft.com/en-US/evalcenter/jj554510\">Microsoft Developer Network</a>.</p></li> <li><p>For the Windows Phone emulators, Windows 8.1 (x64) Professional edition or higher, and a processor that supports <a href=\"https://msdn.microsoft.com/en-us/library/windows/apps/ff626524(v=vs.105).aspx#hyperv\">Client Hyper-V and Second Level Address Translation (SLAT)</a>. An evaluation version of Windows 8.1 Enterprise is available from the <a href=\"http://msdn.microsoft.com/en-US/evalcenter/jj554510\">Microsoft Developer Network</a>.</p></li> <li><p><a href=\"http://www.visualstudio.com/downloads/download-visual-studio-vs#d-express-windows-8\">Visual Studio 2013 for Windows</a> (Express or higher).</p></li> </ul> <p>To develop apps for Windows 10:</p> <ul> <li>Windows 8.1 or Windows 10 Technical Preview 2, 32- or 64-bit, along with <a href=\"http://www.visualstudio.com/preview\">Visual Studio 2015 RC</a> or higher.</li> </ul> <p>App compatibility is determined by the OS that the app targeted. Apps are forwardly-compatible but not backwardly-compatible, so an app targeting Windows 8.1 cannot run on 8.0, but an app built for 8.0 can run on 8.1.</p> <p>Follow the instructions at <a href=\"http://www.windowsstore.com/\">windowsstore.com</a> to submit the app to Windows Store.</p> <p>To develop Cordova apps for Windows, you may use a PC running Windows, but you may also develop on a Mac, either by running a virtual machine environment or by using Boot Camp to dual-boot a Windows 8.1 partition. Consult these resources to set up the required Windows development environment on a Mac:</p> <ul> <li><p><a href=\"http://msdn.microsoft.com/en-US/library/windows/apps/jj945426\">VMWare Fusion</a></p></li> <li><p><a href=\"http://msdn.microsoft.com/en-US/library/windows/apps/jj945424\">Parallels Desktop</a></p></li> <li><p><a href=\"http://msdn.microsoft.com/en-US/library/windows/apps/jj945423\">Boot Camp</a></p></li> </ul> <h2>Using Cordova Shell Tools</h2> <p>If you want to use Cordova's Windows-centered shell tools in conjunction with the SDK, you have two basic options:</p> <ul> <li><p>Access them locally from project code generated by the CLI. They are available in the <code class=\"prettyprint\">platforms/windows/</code> directory after you add the <code class=\"prettyprint\">windows</code> platform as described below.</p></li> <li><p>Download them from a separate distribution at <a href=\"https://www.apache.org/dist/cordova/platforms/\">cordova.apache.org</a>. The Cordova distribution contains separate archives for each platform. Be sure to expand the appropriate archive, <code class=\"prettyprint\">cordova-windows</code> in this case, within an empty directory. The relevant batch utilities are available in <code class=\"prettyprint\">package/bin</code> directory. (Consult the <strong>README</strong> file if necessary for more detailed directions.)</p></li> </ul> <p>These shell tools allow you to create, build, and run Windows apps. For information on the additional command-line interface that enables plugin features across all platforms, see Using Plugman to Manage Plugins.</p> <h2>Install the SDK</h2> <p>Install any edition of <a href=\"http://www.visualstudio.com/downloads\">Visual Studio</a> matching the version requirements listed above. </p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/win8/win8_installSDK.png\" alt=\"\"></p> <p>For Windows 10, the Visual Studio installer has an option to install tools to build Universal Windows Apps. You must ensure that this option is selected when installing to install the required SDK.</p> <h2>Create a New Project</h2> <p>At this point, to create a new project you can choose between the cross-platform CLI tool described in <a href=\"../../cli/index\">The Command-Line Interface</a>, or the set of Windows-specific shell tools. The CLI approach below generates an app named <em>HelloWorld</em> within a new <code class=\"prettyprint\">hello</code> project directory:</p> <div class=\"highlight\"><pre>&gt; cordova create hello com.example.hello HelloWorld\n&gt; cd hello\n&gt; cordova platform add windows\n</pre></div> <p>Here's the corresponding lower-level shell-tool approach:</p> <div class=\"highlight\"><pre>C:\\path\\to\\cordova-windows\\package\\bin\\create.bat C:\\path\\to\\new\\hello com.example.hello HelloWorld\n</pre></div> <p>This project targets Windows 8.1 as the default target OS. You can choose to target 8.0 or 10.0 (see \"Configure target Windows version\" below) for all builds, or you target specific a particular version during each build.</p> <h2>Build the Project</h2> <p>If you are using the CLI in development, the project directory's top-level <code class=\"prettyprint\">www</code> directory contains the source files. Run either of these within the project directory to rebuild the app:</p> <div class=\"highlight\"><pre>&gt; cordova build\n&gt; cordova build windows              # do not rebuild other platforms\n&gt; cordova build windows   --debug    # generates debugging information\n&gt; cordova build windows   --release  # signs the apps for release\n</pre></div> <p>Here's the corresponding lower-level shell-tool approach:</p> <div class=\"highlight\"><pre>C:\\path\\to\\project\\cordova\\build.bat --debug        \nC:\\path\\to\\project\\cordova\\build.bat --release\n</pre></div> <p>The <code class=\"prettyprint\">clean</code> command helps flush out directories in preparation for the next <code class=\"prettyprint\">build</code>:</p> <div class=\"highlight\"><pre>C:\\path\\to\\project\\cordova\\clean.bat \n</pre></div> <h2>Configure target Windows version</h2> <p>By default <code class=\"prettyprint\">build</code> command produces two packages: Windows 8.0 and Windows Phone 8.1. To upgrade Windows package to version 8.1 the following configuration setting must be added to configuration file (<code class=\"prettyprint\">config.xml</code>).</p> <div class=\"highlight\"><pre>&lt;preference name=\"windows-target-version\" value=\"8.1\" /&gt;\n</pre></div> <p>Once you add this setting <code class=\"prettyprint\">build</code> command will start producing Windows 8.1 and Windows Phone 8.1 packages.</p> <h3>The --appx parameter</h3> <p>You may decide that you want to build a particular version of your application targeting a particular OS (for example, you might have set that you want to target Windows 10, but you want to build for Windows Phone 8.1). To do this, you can use the <code class=\"prettyprint\">--appx</code> parameter:</p> <div class=\"highlight\"><pre>&gt; cordova build windows -- --appx=8.1-phone\n</pre></div> <p>The build system will ignore the preference set in config.xml for the target Windows version and strictly build a package for Windows Phone 8.1.</p> <p>Valid values for the <code class=\"prettyprint\">--appx</code> flag are <code class=\"prettyprint\">8.1-win</code>, <code class=\"prettyprint\">8.1-phone</code>, and <code class=\"prettyprint\">uap</code> (for Windows 10 Universal Apps). These options also apply to the <code class=\"prettyprint\">cordova run</code> command.</p> <h3>Considerations for target Windows version</h3> <p>Windows 10 supports a new \"Remote\" mode for Cordova apps (and HTML apps in general). This mode enables apps much more freedom with respect to use of DOM manipulation and common web patterns such as the use of inline script, but does so by reducing the set of capabilities your app may use when submitted to the public Windows Store. For more information about Windows 10 and Remote Mode, look at the <a href=\"win10-support.md\">Cordova for Windows 10</a> documentation.</p> <p>When using Remote Mode, developers are encouraged to apply a Content Security Policy (CSP) to their application to prevent script injection attacks.</p> <h2>Deploy the app</h2> <p>To deploy Windows package:</p> <div class=\"highlight\"><pre>&gt; cordova run windows -- --win  # explicitly specify Windows as deployment target\n&gt; cordova run windows # `run` uses Windows package by default\n</pre></div> <p>To deploy Windows Phone package:</p> <div class=\"highlight\"><pre>&gt; cordova run windows -- --phone  # deploy app to Windows Phone 8.1 emulator\n&gt; cordova run windows --device -- --phone  # deploy app to connected device\n</pre></div> <p>You can use <strong>cordova run windows --list</strong> to see all available targets and <strong>cordova run windows --target=target_name -- --phone</strong> to run application on a specific device or emulator (for example, <code class=\"prettyprint\">cordova run windows --target=\"Emulator 8.1 720P 4.7 inch\" -- --phone</code>).</p> <p>You can also use <strong>cordova run --help</strong> to see additional build and run options.</p> <h2>Open the Project in the SDK and Deploy the App</h2> <p>Once you build a Cordova app as described above, you can open it with Visual Studio. The various <code class=\"prettyprint\">build</code> commands generate a Visual Studio Solution (<em>.sln</em>) file. Open the file in the File Explorer to modify the project within Visual Studio:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/win8/win8_sdk_openSLN.png\" alt=\"\"></p> <p>The <code class=\"prettyprint\">CordovaApp</code> component displays within the solution, and its <code class=\"prettyprint\">www</code> directory contains the web-based source code, including the <code class=\"prettyprint\">index.html</code> home page:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/win8/win8_sdk.png\" alt=\"\"></p> <p>The controls below Visual Studio's main menu allow you to test or deploy the app:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/win8/win8_sdk_deploy.png\" alt=\"\"></p> <p>With <strong>Local Machine</strong> selected, press the green arrow to install the app on the same machine running Visual Studio. Once you do so, the app appears in Windows 8's app listings:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/win8/win8_sdk_runApp.png\" alt=\"\"></p> <p>Each time you rebuild the app, the version available in the interface is refreshed.</p> <p>Once available in the app listings, holding down the <strong>CTRL</strong> key while selecting the app allows you to pin it to the main screen:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/win8/win8_sdk_runHome.png\" alt=\"\"></p> <p>Note that if you open the app within a virtual machine environment, you may need to click in the corners or along the sides of the windows to switch apps or access additional functionality:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/win8/win8_sdk_run.png\" alt=\"\"></p> <p>Alternately, choose the <strong>Simulator</strong> deployment option to view the app as if it were running on a tablet device:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/win8/win8_sdk_sim.png\" alt=\"\"></p> <p>Unlike desktop deployment, this option allows you to simulate the tablet's orientation, location, and vary its network settings.</p> <p><strong>NOTE</strong>: Consult the <a href=\"../../overview/index\">Overview</a> for advice on how to use Cordova's command-line tools or the SDK in your workflow. The Cordova CLI relies on cross-platform source code that routinely overwrites the platform-specific files used by the SDK. If you want to use the SDK to modify the project, use the lower-level shell tools as an alternative to the CLI.</p> <h2>Supporting Toasts</h2> <p>Windows requires an app manifest capability declaration in order to support toast notifications. When using the <code class=\"prettyprint\">cordova-plugin-local-notifications</code> plugin, or any other plugin that is attempting to use toast notifications, add the following preference to your config.xml to enable it to publish toast notifications:</p> <div class=\"highlight\"><pre>&lt;preference name=\"WindowsToastCapable\" value=\"true\" /&gt;\n</pre></div> <p>This preference sets the corresponding flag in your app manifest. Plugins should do the work necessary to configure the appearance of the displayed notifications.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/win8/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/win8/index.html</a>\n  </p>\n</div>\n","guide/platforms/ios/upgrade":"<h1>Upgrading iOS</h1> <p>This guide shows how to modify iOS projects to upgrade from older versions of Cordova. Most of these instructions apply to projects created with an older set of command-line tools that precede the <code class=\"prettyprint\">cordova</code> CLI utility. See <a href=\"../../cli/index\">The Command-Line Interface</a> for information how to update the version of the CLI.</p> <p><strong>NOTE</strong>: Xcode 6 is required. Currently, to submit to the Apple App Store, you should use the latest shipped version of the iOS SDK, which is iOS 8 and this is included only with Xcode 6.</p> <h2>Upgrading 3.6.0 Projects to 4.0.0</h2> <p>For non-CLI projects, run:</p> <div class=\"highlight\"><pre>bin/update path/to/project\n</pre></div> <p>For CLI projects:</p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update ios</code> in your existing projects.</p></li> </ol> <h2>Upgrading 3.3.0 Projects to 3.4.0</h2> <p>For non-CLI projects, run:</p> <div class=\"highlight\"><pre>bin/update path/to/project\n</pre></div> <p>For CLI projects:</p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update ios</code></p></li> </ol> <h2>Upgrading 3.2.0 Projects to 3.3.0</h2> <p>For non-CLI projects, run:</p> <div class=\"highlight\"><pre>bin/update path/to/project\n</pre></div> <p>For CLI projects:</p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update ios</code></p></li> </ol> <h2>Upgrading 3.1.0 Projects to 3.2.0</h2> <p>For non-CLI projects, run:</p> <div class=\"highlight\"><pre>bin/update path/to/project\n</pre></div> <p>For CLI projects:</p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update ios</code></p></li> </ol> <h2>Upgrading 3.0.0 Projects to 3.1.0</h2> <p>For non-CLI projects, run:</p> <div class=\"highlight\"><pre>bin/update path/to/project\n</pre></div> <p>For CLI projects:</p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update ios</code></p></li> </ol> <p>iOS 7 Issues:</p> <ol> <li><p>Remove <code class=\"prettyprint\">width=device-width, height=device-height</code> from the <code class=\"prettyprint\">index.html</code> file's <code class=\"prettyprint\">viewport</code> <code class=\"prettyprint\">meta</code> tag. (See <a href=\"https://issues.apache.org/jira/browse/CB-4323\">the relevant bug</a>.)</p></li> <li><p>Update your media, media-capture and splashscreen core plugins for iOS 7 support.</p></li> </ol> <p>Xcode 5 Issues:</p> <ol> <li><p>Update your Project Settings if Xcode 5 prompts you to do so (in the Issues Navigator).</p></li> <li><p>Update your <strong>Compiler for C/C++/Objective-C</strong> setting, under the <strong>Build Settings</strong> tab, <strong>Build Options</strong> section. Choose <strong>Default compiler (Apple LLVM 5.0)</strong>.</p></li> </ol> <h2>Upgrade to the CLI (3.0.0) from 2.9.0</h2> <ol> <li><p>Create a new Apache Cordova 3.0.0 project using the cordova CLI, as described in <a href=\"../../cli/index\">The Command-Line Interface</a>.</p></li> <li><p>Add your platforms to the cordova project, for example: <code class=\"prettyprint\">cordova\nplatform add ios</code>.</p></li> <li><p>Copy the contents of the project's <code class=\"prettyprint\">www</code> directory to the <code class=\"prettyprint\">www</code> directory at the root of the cordova project you just created.</p></li> <li><p>Copy or overwrite any native assets from your original project (<code class=\"prettyprint\">Resources</code>, etc.), making sure to add any new files to the <code class=\"prettyprint\">.xcodeproj</code> project. The iOS project builds inside the <code class=\"prettyprint\">platforms\\ios</code> directory.</p></li> <li><p>Copy the <code class=\"prettyprint\">config.xml</code> into the <code class=\"prettyprint\">www</code> directory, and remove any plugin definitions. Modify settings here instead of the platform directory.</p></li> <li><p>Use the cordova CLI tool to install any plugins you need. Note that the CLI handles all core APIs as plugins, so they may need to be added. Only 3.0.0 plugins are compatible with the CLI.</p></li> <li><p>Build and test.</p></li> </ol> <h2>Upgrading 2.9.0 Projects to 3.0.0</h2> <ol> <li><p>Download and extract the Cordova 3.0.0 source to a permanent directory location on your hard drive, for example to <code class=\"prettyprint\">~/Documents/Cordova-3.0.0</code>.</p></li> <li><p>Quit Xcode if it is running.</p></li> <li><p>Using Terminal.app, navigate to the directory where you put the downloaded source above.</p></li> <li><p>Create a new project, as described in <a href=\"tools\">iOS Shell Tool Guide</a>. You need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova.js</code> (note that it does not have a version suffix anymore, the version is in the file itself in the header) file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova.js</code> file.</p></li> <li><p>Delete the <code class=\"prettyprint\">CordovaLib</code> directory, and copy the <code class=\"prettyprint\">CordovaLib</code> directory from the new project into your project's root directory.</p></li> </ol> <p><strong>NOTE</strong>: Starting with Cordova 3.0.0, plugins are not pre-installed, and you need to use the <code class=\"prettyprint\">plugman</code> command-line utility to install them yourself. See <a href=\"../../../plugin_ref/plugman\">Using Plugman to Manage Plugins</a>.</p> <h2>Upgrading 2.8.0 Projects to 2.9.0</h2> <ol> <li><p>Download and extract the Cordova 2.9.0 source to a permanent directory location on your hard drive, for example to <code class=\"prettyprint\">~/Documents/Cordova-2.9.0</code>.</p></li> <li><p>Quit Xcode if it is running.</p></li> <li><p>Using Terminal.app, navigate to the directory where you put the downloaded source above.</p></li> <li><p>Create a new project, as described in <a href=\"tools\">iOS Shell Tool Guide</a>. You need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova.js</code> (note that it does not have a version suffix anymore, the version is in the file itself in the header) file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova.js</code> file.</p></li> <li><p>Delete the <code class=\"prettyprint\">CordovaLib</code> directory, and copy the <code class=\"prettyprint\">CordovaLib</code> directory from the new project into your project's root directory.</p></li> </ol> <h2>Upgrading 2.7.0 Projects to 2.8.0</h2> <ol> <li><p>Download and extract the Cordova 2.8.0 source to a permanent directory location on your hard drive, for example to <code class=\"prettyprint\">~/Documents/Cordova-2.8.0</code>.</p></li> <li><p>Quit Xcode if it is running.</p></li> <li><p>Using Terminal.app, navigate to the directory where you put the downloaded source above.</p></li> <li><p>Create a new project, as described in <a href=\"tools\">iOS Shell Tool Guide</a>. You need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova.js</code> (note that it does not have a version suffix anymore, the version is in the file itself in the header) file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-2.7.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova.js</code> file.</p></li> <li>\n<p>Update any <code class=\"prettyprint\">&lt;plugin&gt;</code> tags in the <code class=\"prettyprint\">config.xml</code> file to <code class=\"prettyprint\">&lt;feature&gt;</code> tags. Note that existing <code class=\"prettyprint\">&lt;plugin&gt;</code> tags still work, but are deprecated. You can copy this information in the <code class=\"prettyprint\">config.xml</code> file for a new project. For example:</p> <div class=\"highlight\"><pre>&lt;plugins&gt;\n&lt;plugin name=\"LocalStorage\" value=\"CDVLocalStorage\" /&gt;\n&lt;!-- other plugins --&gt;\n&lt;/plugins&gt;\n\n&lt;!-- change to: (note that a &lt;feature&gt; tag is on the same level as &lt;plugins&gt; --&gt;\n&lt;feature name=\"LocalStorage\"&gt;\n&lt;param name=\"ios-package\" value=\"CDVLocalStorage\" /&gt;\n&lt;/feature&gt;\n&lt;!-- other &lt;feature&gt; tags --&gt;\n</pre></div>\n</li> <li><p>Delete the <code class=\"prettyprint\">CordovaLib</code> directory, and copy the <code class=\"prettyprint\">CordovaLib</code> directory from the new project into your project's root directory.</p></li> <li>\n<p>Add these two frameworks to your project:</p> <div class=\"highlight\"><pre>OpenAL\nImageIO\n</pre></div>\n</li> <li><p>Update your project's target <strong>Build Settings</strong>. Under <strong>Linking → Other Linker Flags</strong>, edit <strong>\"-Obj-C\"</strong> to be <strong>\"-ObjC\"</strong>.</p></li> <li><p>Update your project's target <strong>Build Settings</strong>. Under <strong>Linking → Other Linker Flags</strong>, change <strong>\"-all_load\"</strong> to be <code class=\"prettyprint\">-force\\_load ${BUILT\\_PRODUCTS\\_DIR}/libCordova.a</code>. You would only need to do this if you have the problem defined in <a href=\"https://issues.apache.org/jira/browse/CB-3458\">this issue.</a>.</p></li> </ol> <h2>Upgrading 2.6.0 Projects to 2.7.0</h2> <ol> <li><p>Download and extract the Cordova 2.7.0 source to a permanent directory location on your hard drive, for example to <code class=\"prettyprint\">~/Documents/Cordova-2.7.0</code>.</p></li> <li><p>Quit Xcode if it is running.</p></li> <li><p>Using Terminal.app, navigate to the directory where you put the downloaded source above.</p></li> <li><p>Create a new project, as described in <a href=\"tools\">iOS Shell Tool Guide</a>. you need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-2.7.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-2.6.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova-2.7.0.js</code> file.</p></li> <li><p>Update (or replace, if you never changed the file) the <code class=\"prettyprint\">AppDelegate.m</code> file according to the one from the new project (see <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/Classes/AppDelegate.m;h=5c05ac80e056753c0e8736f887ba9f28d5b0774c;hp=623ad8ec3c46f656ea18c6c3a190d650dd64e479;hb=c6e71147386d4ad94b07428952d1aae0a9cbf3f5;hpb=c017fda8af00375a453cf27cfc488647972e9a23\">this diff</a>).</p></li> <li><p>In the <code class=\"prettyprint\">config.xml</code> file, <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/config.xml;h=537705d76a5ef6bc5e57a8ebfcab78c02bb4110b;hp=8889726d9a8f8c530fe1371c56d858c34552992a;hb=064239b7b5fa9a867144cf1ee8b2fb798ce1f988;hpb=c9f233250d4b800f3412eeded811daaafb17b2cc\">remove this line</a>.</p></li> <li><p>Delete the <code class=\"prettyprint\">CordovaLib</code> directory, and copy the <code class=\"prettyprint\">CordovaLib</code> directory from the new project into your project's root directory.</p></li> </ol> <h2>Upgrading 2.5.0 Projects to 2.6.0</h2> <ol> <li><p>Download and extract the Cordova 2.6.0 source to a permanent directory location on your hard drive, for example to <code class=\"prettyprint\">~/Documents/Cordova-2.6.0</code>.</p></li> <li><p>Quit Xcode if it is running.</p></li> <li><p>Using Terminal.app, navigate to the directory where you put the downloaded source above.</p></li> <li><p>Create a new project, as described in <a href=\"tools\">iOS Shell Tool Guide</a>. You need the assets from this new project.</p></li> <li><p>Copy the project's <code class=\"prettyprint\">www/cordova-2.6.0.js</code> file into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-2.5.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (along with any other files that reference the script) to refer to the new <code class=\"prettyprint\">cordova-2.6.0.js</code> file.</p></li> <li><p>Update (or replace, if you never changed the file) the <code class=\"prettyprint\">AppDelegate.m</code> file according to the one from the new project (see <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/Classes/AppDelegate.m;h=124a56bb4f361e95616f44d6d6f5a96ffa439b60;hp=318f79326176be8f16ebc93bad85dd745f4205b6;hb=a28c7712810a63396e9f32fa4eb94fe3f8b93985;hpb=36acdf55e4cab52802d73764c8a4b5b42cf18ef9\">this diff</a>).</p></li> <li><p>In the <code class=\"prettyprint\">config.xml</code> file, <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/config.xml;h=1555b5e81de326a07efe0bccaa5f5e2326b07a9a;hp=0652d60f8d35ac13c825c572dca6ed01fea4a540;hb=95f16a6dc252db0299b8e2bb53797995b1e39aa1;hpb=a2de90b8f5f5f68bd9520bcbbb9afa3ac409b96d\">add this new line</a>.</p></li> <li><p>In the <code class=\"prettyprint\">config.xml</code> file, <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/config.xml;h=d307827b7e67301171a913417fb10003d43ce39d;hp=04260aa9786d6d74ab20a07c86d7e8b34e31968c;hb=97b89edfae3527828c0ca6bb2f6d58d9ded95188;hpb=942d33c8e7174a5766029ea1232ba2e0df745c3f\">add this new line</a>.</p></li> <li><p>In the <code class=\"prettyprint\">config.xml</code> file, <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/config.xml;h=8889726d9a8f8c530fe1371c56d858c34552992a;hp=d307827b7e67301171a913417fb10003d43ce39d;hb=57982de638a4dce6ae130a26662591741b065f00;hpb=ec411f18309d577b4debefd9a2f085ba719701d5\">UIWebViewBounce has been changed to DisallowOverscroll, and default values are different</a>.</p></li> <li><p>In the <code class=\"prettyprint\">config.xml</code> file, the <code class=\"prettyprint\">EnableLocation</code> preference has been deprecated.</p></li> <li><p>Delete the <code class=\"prettyprint\">CordovaLib</code> directory, and copy the <code class=\"prettyprint\">CordovaLib</code> directory from the new project into your project's root directory.</p></li> </ol> <h2>Upgrading 2.4.0 Projects to 2.5.0</h2> <ol> <li><p>Download and extract the Cordova 2.5.0 source to a permanent directory location on your hard drive, for example to <code class=\"prettyprint\">~/Documents/Cordova-2.5.0</code>.</p></li> <li><p>Quit Xcode if it is running.</p></li> <li><p>Using Terminal.app, navigate to the directory where you put the downloaded source above.</p></li> <li><p>Create a new project, as described in <a href=\"tools\">iOS Shell Tool Guide</a>. You need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-2.5.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory and delete the <code class=\"prettyprint\">www/cordova-2.4.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova-2.5.0.js</code> file.</p></li> <li><p>Update (or replace, if you never changed the file) the <code class=\"prettyprint\">AppDelegate.m</code> file according to the one from the new project (see <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/Classes/AppDelegate.m;h=318f79326176be8f16ebc93bad85dd745f4205b6;hp=6dc7bfc84f0ecede4cc43d2a3256ef7c5383b9fe;hb=4001ae13fcb1fcbe73168327630fbc0ce44703d0;hpb=299a324e8c30065fc4511c1fe59c6515d4842f09\">this diff</a>).</p></li> <li><p>In the <code class=\"prettyprint\">config.xml</code> file, <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/config.xml;h=903944c4b1e58575295c820e154be2f5f09e6314;hp=721c734120b13004a4a543ee25f4287e541f34be;hb=ae467249b4a256bd31ee89aea7a06f4f2316b8ac;hpb=9e39f7ef8096fb15b38121ab0e245a3a958d9cbb\">add these new lines</a>.</p></li> <li><p>In the <code class=\"prettyprint\">config.xml</code> file, <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/config.xml;h=64e71636f5dd79fa0978a97b9ff5aa3860a493f5;hp=d8579352dfb21c14e5748e09b2cf3f4396450163;hb=0e711f8d09377a7ac10ff6be4ec17d22cdbee88d;hpb=57c3c082ed9be41c0588d0d63a1d2bfcd2ed878c\">edit the root element, change it from cordova to widget</a>.</p></li> <li><p>In the <code class=\"prettyprint\">config.xml</code> file, <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/config.xml;h=721c734120b13004a4a543ee25f4287e541f34be;hp=7d67508b70914aa921a16e79f79c00512502a8b6;hb=187bf21b308551bfb4b98b1a5e11edf04f699791;hpb=03b8854bdf039bcefbe0212db937abd81ac675e4\">remove the OpenAllWhitelistURLsInWebView preference</a>.</p></li> <li><p>Delete the <code class=\"prettyprint\">cordova</code> directory, and copy the <code class=\"prettyprint\">cordova</code> directory from the new project into your project's root directory. In 2.5.0, this has updated scripts.</p></li> <li><p>Delete the <code class=\"prettyprint\">CordovaLib</code> directory, and copy the <code class=\"prettyprint\">CordovaLib</code> directory from the new project into your project's root directory.</p></li> </ol> <h2>Upgrading 2.3.0 Projects to 2.4.0</h2> <ol> <li><p>Download and extract the Cordova 2.4.0 source to a permanent directory location on your hard drive, for example to <code class=\"prettyprint\">~/Documents/Cordova-2.4.0</code>.</p></li> <li><p>Quit Xcode if it is running.</p></li> <li><p>Using Terminal.app, navigate to the directory where you put the downloaded source above.</p></li> <li><p>Create a new project, as described in <a href=\"tools\">iOS Shell Tool Guide</a>. You need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-2.4.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-2.3.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova-2.4.0.js</code> file.</p></li> <li><p>Update (or replace, if you never changed the files) the <code class=\"prettyprint\">MainViewController.m</code> file according to the one from the new project (see <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/Classes/MainViewController.m;h=5f9eeac15c2437cd02a6eb5835b48374e9b94100;hp=89da1082d06ba5e5d0dffc5b2e75a3a06d5c2aa6;hb=b4a2e4ae0445ba7aec788090dce9b822d67edfd8;hpb=a484850f4610e73c7b20cd429a7794ba829ec997\">this diff</a>).</p></li> <li><p>Update (or replace, if you never changed the file) the <code class=\"prettyprint\">AppDelegate.m</code> file according to the one from the new project (see <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/Classes/AppDelegate.m;h=6dc7bfc84f0ecede4cc43d2a3256ef7c5383b9fe;hp=1ca3dafeb354c4442b7e149da4f281675aa6b740;hb=6749c17640c5fed8a7d3a0b9cca204b89a855baa;hpb=deabeeb6fcb35bac9360b053c8bf902b45e6de4d\">this diff</a>).</p></li> <li><p>In the <code class=\"prettyprint\">config.xml</code> file, <a href=\"https://git-wip-us.apache.org/repos/asf?p=cordova-ios.git;a=blobdiff;f=bin/templates/project/__TESTING__/config.xml;h=7d67508b70914aa921a16e79f79c00512502a8b6;hp=337d38da6f40c7432b0bce05aa3281d797eec40a;hb=6749c17640c5fed8a7d3a0b9cca204b89a855baa;hpb=deabeeb6fcb35bac9360b053c8bf902b45e6de4d\">add this new line</a>.</p></li> <li><p>Delete the <code class=\"prettyprint\">cordova</code> directory, and copy the <code class=\"prettyprint\">cordova</code> directory from the new project into your project's root directory. In 2.4.0, this has fixed scripts.</p></li> <li><p>Delete the <code class=\"prettyprint\">CordovaLib</code> directory, and copy the <code class=\"prettyprint\">CordovaLib</code> directory from the new project into your project's root directory.</p></li> <li><p>Add AssetsLibrary.framework as a resource to your project. (See <a href=\"https://developer.apple.com/library/ios/#recipes/xcode_help-project_editor/Articles/AddingaLibrarytoaTarget.html\">Apple's documentation</a> for instructions on how to do so.).</p></li> </ol> <h2>Upgrading 2.2.0 Projects to 2.3.0</h2> <ol> <li><p>Download and extract the Cordova 2.3.0 source to a permanent directory location on your hard drive, for example to <code class=\"prettyprint\">~/Documents/Cordova-2.3.0</code>.</p></li> <li><p>Quit Xcode if it is running.</p></li> <li><p>Using Terminal.app, navigate to the directory where you put the downloaded source above.</p></li> <li><p>Create a new project, as described in <a href=\"tools\">iOS Shell Tool Guide</a>. You need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-2.3.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-2.2.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova-2.3.0.js</code> file.</p></li> <li><p>Update (or replace, if you never changed the file) the <code class=\"prettyprint\">MainViewController.m</code> according to the one from the new project.</p></li> <li><p>Delete the <code class=\"prettyprint\">cordova</code> directory, and copy the <code class=\"prettyprint\">cordova</code> directory from the new project into your project's root directory. In 2.3.0, this has new scripts.</p></li> <li><p>Delete the <code class=\"prettyprint\">CordovaLib</code> directory, and copy the <code class=\"prettyprint\">CordovaLib</code> directory from the new project into your project's root directory.</p></li> <li><p>Convert the <code class=\"prettyprint\">Cordova.plist</code> file to <code class=\"prettyprint\">config.xml</code>, by running the script <code class=\"prettyprint\">bin/cordova\\_plist\\_to\\_config\\_xml</code> on your project file.</p></li> <li>\n<p>Add the InAppBrowser plugin to the <code class=\"prettyprint\">config.xml</code>, by adding this tag under <code class=\"prettyprint\">&lt;cordova&gt;&lt;plugins&gt;</code>:</p> <div class=\"highlight\"><pre>&lt;plugin name=\"InAppBrowser\" value=\"CDVInAppBrowser\" /&gt;\n</pre></div>\n</li> <li><p>Note that Objective-C plugins are <em>not</em> whitelisted anymore. To whitelist your connections with the app whitelist, you need to set the <code class=\"prettyprint\">User-Agent</code> header of the connection to the same user-agent as the main Cordova WebView. You can get this by accessing the <code class=\"prettyprint\">userAgent</code> property off the main view-controller. The main view-controller (<code class=\"prettyprint\">CDVViewController</code>) also has a <code class=\"prettyprint\">URLisAllowed</code> method for you to check whether a URL passes the whitelist.</p></li> <li>\n<p>Device API changes:</p> <ul> <li>For iOS, device.platform used to return <code class=\"prettyprint\">iPhone</code>, <code class=\"prettyprint\">iPad</code> or <code class=\"prettyprint\">iPod Touch</code>; now it returns (correctly) <code class=\"prettyprint\">iOS</code>.</li> <li>For iOS, device.name (now deprecated for all platforms) used to return the name of the user’s device (e.g. ‘Shazron’s iPhone 5′); now it returns what device.platform used to return: <code class=\"prettyprint\">iPhone</code>, <code class=\"prettyprint\">iPad</code> or <code class=\"prettyprint\">iPod Touch</code>.</li> <li>For all platforms, there is a new property called device.model; this returns the specific device model, e.g. <code class=\"prettyprint\">iPad2,5</code> (for other platforms, this returns what device.name used to return).</li> </ul>\n</li> </ol> <h2>Upgrading 2.1.0 Projects to 2.2.0</h2> <ol> <li><p>Download and extract the Cordova 2.2.0 source to a permanent directory location on your hard drive, for example to <code class=\"prettyprint\">~/Documents/Cordova-2.2.0</code>.</p></li> <li><p>Quit Xcode if it is running.</p></li> <li><p>Using Terminal.app, navigate to the directory where you put the downloaded source above.</p></li> <li><p>Create a new project, as described in <a href=\"tools\">iOS Shell Tool Guide</a>. You need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-2.2.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-2.1.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova-2.2.0.js</code> file.</p></li> <li>\n<p>Update (or replace, if you never changed the file) the <code class=\"prettyprint\">MainViewController.m</code> according to the one from the new project:</p> <ul> <li>Updated → viewWillAppear</li> </ul>\n</li> <li><p>Copy the <code class=\"prettyprint\">cordova</code> directory from the new project into your project's root directory. In 2.2.0, this has an updated 'emulate' script.</p></li> <li>\n<p>Next, update the <code class=\"prettyprint\">CordovaLib</code> sub-project reference. Beginning with Cordova 2.1.0, we are not using the CORDOVALIB Xcode variable anymore when referencing where <code class=\"prettyprint\">CordovaLib</code> resides, the reference is an absolute file reference now.</p> <ol> <li>Launch Terminal.app</li> <li>Go to the location where you installed Cordova (see Step 1), in the <code class=\"prettyprint\">bin</code> subdirectory</li> <li>\n<p>Run the script below where the first parameter is the path to your project's <code class=\"prettyprint\">.xcodeproj</code> file:</p> <p><code class=\"prettyprint\">update_cordova_subproject path/to/your/project/xcodeproj</code></p>\n</li> </ol>\n</li> </ol> <p><strong>NOTE</strong>: In 2.2.0, the <code class=\"prettyprint\">bin/create</code> script copy in the <code class=\"prettyprint\">CordovaLib</code> sub-project into your project. To have the same kind of setup, just copy in the right <code class=\"prettyprint\">CordovaLib</code> into your project directory, and update the <code class=\"prettyprint\">CordovaLib</code> sub-project location (relative to the project) in the Xcode File Inspector.</p> <h2>Upgrading 2.0.0 Projects to 2.1.0</h2> <p>With Cordova 2.1.0, <code class=\"prettyprint\">CordovaLib</code> has been upgraded to use <strong>Automatic Reference Counting (ARC)</strong>. You don't need to upgrade to <strong>ARC</strong> to use CordovaLib, but if you want to upgrade your project to use <strong>ARC</strong>, please use the Xcode migration wizard from the menu: <strong>Edit → Refactor → Convert to Objective-C ARC...</strong>, de-select libCordova.a, then run the wizard to completion.</p> <ol> <li><p>Download and extract the Cordova 2.1.0 source to a permanent directory location on your hard drive, for example to <code class=\"prettyprint\">~/Documents/Cordova-2.1.0</code>.</p></li> <li><p>Quit Xcode if it is running.</p></li> <li><p>Using Terminal.app, navigate to the directory where you put the downloaded source above.</p></li> <li><p>Create a new project, as described in <a href=\"tools\">iOS Shell Tool Guide</a>. You need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-2.1.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-2.0.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova-2.1.0.js</code> file.</p></li> <li>\n<p>Update (or replace, if you never changed the file) the <code class=\"prettyprint\">AppDelegate.m</code> according to the one from the new project:</p> <ul> <li>Edited → application:didFinishLaunchingWithOptions:</li> <li>Added → application:supportedInterfaceOrientationsForWindow:</li> </ul>\n</li> <li>\n<p>Update (or replace, if you never changed the file) the <code class=\"prettyprint\">MainViewController.m</code> according to the one from the new project:</p> <ul> <li>Added → viewWillAppear</li> </ul>\n</li> <li><p>Copy the <code class=\"prettyprint\">cordova</code> directory from the new project into your project's root directory. In 2.1.0, this has the updated scripts to support paths with spaces.</p></li> <li><p>Remove the <code class=\"prettyprint\">VERSION</code> file reference from your project (<em>not</em> the one in <code class=\"prettyprint\">CordovaLib</code>).</p></li> <li>\n<p>Next, update the <code class=\"prettyprint\">CordovaLib</code> sub-project reference. Beginning with Cordova 2.1.0, we are not using the CORDOVALIB Xcode variable anymore when referencing where <code class=\"prettyprint\">CordovaLib</code> resides, the reference is an absolute file reference now.</p> <ol> <li>Launch Terminal.app</li> <li>Go to the location where you installed Cordova (see Step 1), in the <code class=\"prettyprint\">bin</code> subdirectory</li> <li>\n<p>Run the script below where the first parameter is the path to your project's <code class=\"prettyprint\">.xcodeproj</code> file:</p> <p><code class=\"prettyprint\">update_cordova_subproject path/to/your/project/xcodeproj</code></p>\n</li> </ol>\n</li> </ol> <h2>Upgrading 1.9.0 Projects to 2.0.0</h2> <ol> <li><p>Install Cordova 2.0.0.</p></li> <li><p>Create a new project, as described in <a href=\"tools\">iOS Shell Tool Guide</a>. You need the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-2.0.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-1.9.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova-2.0.0.js</code> file.</p></li> <li><p>Copy the <code class=\"prettyprint\">cordova</code> directory from the new project into your project's root directory (if you want the project command-line tools).</p></li> <li><p>Add a new entry under <code class=\"prettyprint\">Plugins</code> in the <code class=\"prettyprint\">Cordova.plist</code> file, under the <strong>Supporting Files</strong> group. The key is <code class=\"prettyprint\">Device</code> and the value is <code class=\"prettyprint\">CDVDevice</code>.</p></li> <li><p>Remove <code class=\"prettyprint\">Cordova.framework</code>.</p></li> <li><p>Remove <code class=\"prettyprint\">verify.sh</code> from the <strong>Supporting Files</strong> group.</p></li> <li><p>Select the project icon in the Project Navigator, select your project <strong>Target</strong>, then select the <strong>Build Settings</strong> tab.</p></li> <li><p>Search for <strong>Preprocessor Macros</strong>, then remove all <strong>CORDOVA_FRAMEWORK=1</strong> values.</p></li> <li><p>Locate the <code class=\"prettyprint\">CordovaLib</code> directory that was installed in your hard-drive under your home folder's <code class=\"prettyprint\">Documents</code> subdirectory.</p></li> <li><p>Locate the <code class=\"prettyprint\">CordovaLib.xcodeproj</code> file in the <code class=\"prettyprint\">CordovaLib</code> directory, then drag and drop the file into your project. It should appear as a sub-project.</p></li> <li><p>Build your project, you should get some errors relating to <code class=\"prettyprint\">#import</code> directives.</p></li> <li>\n<p>For the <code class=\"prettyprint\">#import</code> errors, change any quote-based imports in this style:</p> <div class=\"highlight\"><pre>#import \"CDV.h\"\n</pre></div> <p>to this brackets-based style:</p> <div class=\"highlight\"><pre>#import &lt;Cordova/CDV.h&gt;\n</pre></div> <p>and remove any <code class=\"prettyprint\">#ifdef</code> wrappers around any Cordova imports, they are not needed anymore (the imports are now unified)</p>\n</li> <li><p>Build your project again, and it should not have any <code class=\"prettyprint\">#import</code> errors.</p></li> <li><p>Select the <strong>project icon</strong> in the Project Navigator, select your project <strong>Target</strong>, then select the <strong>Build Phases</strong> tab.</p></li> <li><p>Expand the <strong>Target Dependencies</strong> phase, then select the <strong>+</strong> button.</p></li> <li><p>Select the <code class=\"prettyprint\">CordovaLib</code> target, then select the <strong>Add</strong> button.</p></li> <li><p>Expand the first <strong>Link Binary with Libraries</strong> phase (it should already contain a bunch of frameworks), then select the <strong>+</strong> button.</p></li> <li><p>Select the <code class=\"prettyprint\">libCordova.a</code> static library, then select the <strong>Add</strong> button.</p></li> <li><p>Delete the <strong>Run Script</strong> phase.</p></li> <li><p>Select the <strong>project icon</strong> in the Project Navigator, select your project <strong>Target</strong>, then select the <strong>Build Settings</strong> tab.</p></li> <li><p>Search for <strong>Other Linker Flags</strong>, and add the values <strong>-force_load</strong> and <strong>-Obj-C</strong>.</p></li> <li><p>Expand the <code class=\"prettyprint\">CordovaLib</code> sub-project.</p></li> <li><p>Locate the <code class=\"prettyprint\">VERSION</code> file, drag it into your main project (we want to create a link to it, not a copy).</p></li> <li><p>Select the <strong>Create groups for any added folders</strong> radio button, then select the <strong>Finish</strong> button.</p></li> <li><p>Select the <code class=\"prettyprint\">VERSION</code> file that you just dragged in a previous step.</p></li> <li><p>Type the <strong>Option-Command-1</strong> key combination to show the <strong>File Inspector</strong> (or menuitem <strong>View → Utilities → Show File Inspector</strong>).</p></li> <li><p>Choose <strong>Relative to CORDOVALIB</strong> in the <strong>File Inspector</strong> for the drop-down menu for <strong>Location</strong>.</p></li> <li><p>Set the Xcode preference <strong>Xcode Preferences → Locations → Derived Data → Advanced...</strong> to <strong>Unique</strong>, so that the unified headers can be found.</p></li> <li><p>Select the <strong>project icon</strong> in the Project Navigator, select your <strong>Target</strong>, then select the <strong>Build Settings</strong> tab.</p></li> <li>\n<p>Search for <strong>Header Search Paths</strong>. For that setting, append these three values, including quotes:</p> <div class=\"highlight\"><pre>\"$(TARGET_BUILD_DIR)/usr/local/lib/include\"\n\n\"$(OBJROOT)/UninstalledProducts/include\"\n\n\"$(BUILT_PRODUCTS_DIR)\"\n</pre></div>\n</li> <li>\n<p>Search for <strong>Other Linker Flags</strong>. For that setting, append this value:</p> <div class=\"highlight\"><pre>-weak_framework CoreFoundation\n</pre></div>\n</li> <li><p>Build your project, it should compile and link with <strong>no issues</strong>.</p></li> <li><p>Select your project from the <strong>Scheme</strong> drop-down, and then select <strong>iPhone 5.1 Simulator</strong>.</p></li> <li><p>Select the <strong>Run</strong> button.</p></li> </ol> <p><strong>NOTE</strong>: If your project is not working as expected in the Simulator, please take a note of any errors in the console log in Xcode for clues.</p> <h2>Upgrading 1.8.x Projects to 1.9.0</h2> <ol> <li><p>Install Cordova 1.9.0.</p></li> <li><p>Create a new project. You will need some of the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-1.9.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-1.8.x.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova-1.9.0.js</code> file.</p></li> </ol> <p><strong>NOTE</strong>: 1.9.0 supports the new <code class=\"prettyprint\">BackupWebStorage</code> boolean <code class=\"prettyprint\">Cordova.plist</code> setting. It's enabled by default, so set it to <code class=\"prettyprint\">false</code> to disable it, especially on iOS 6. See <a href=\"https://developer.apple.com/library/prerelease/ios/#releasenotes/General/RN-iOSSDK-6_0/_index.html\">Release Notes: Safari and UIKit Section</a></p> <h2>Upgrading 1.7.0 Projects to 1.8.x</h2> <ol> <li><p>Install Cordova 1.8.0.</p></li> <li><p>Create a new project. You will need some of the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-1.8.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-1.7.x.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova-1.8.0.js</code> file.</p></li> </ol> <p>If you intend on using the Capture API, you will need the new <strong>iPad retina-display</strong> assets:</p> <ol> <li><p>Copy the <code class=\"prettyprint\">Resources/Capture.bundle</code> item from the new project into your project directory, over-writing your existing <code class=\"prettyprint\">Resources/Capture.bundle</code> item.</p></li> <li><p>In your project, select the <code class=\"prettyprint\">Capture.bundle</code> item into your Project Navigator in Xcode, type the <strong>Delete</strong> key, then select <strong>Remove Reference</strong> from the resulting dialog.</p></li> <li><p>Drag the new <code class=\"prettyprint\">Capture.bundle</code> from Step 1 above into your Project Navigator in Xcode, then select the <strong>Create groups for any added folders</strong> radio button.</p></li> </ol> <h2>Upgrading 1.6.x Projects to 1.7.0</h2> <ol> <li><p>Install Cordova 1.7.0.</p></li> <li><p>Create a new project. You will need some of the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-1.7.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-1.6.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova-1.7.0.js</code> file.</p></li> </ol> <h2>Upgrading 1.5.0 Projects to 1.6.x</h2> <ol> <li><p>Install Cordova 1.6.1.</p></li> <li><p>Make a backup of <code class=\"prettyprint\">AppDelegate.m</code>, <code class=\"prettyprint\">AppDelegate.h</code>, <code class=\"prettyprint\">MainViewController.m</code>, <code class=\"prettyprint\">MainViewController.h</code>, and <code class=\"prettyprint\">Cordova.plist</code> in your project.</p></li> <li><p>Create a new project. You will need some of the assets from this new project.</p></li> <li>\n<p>Copy these files from the new project into your 1.5.0-based project directory on disk, replacing any old files (backup your files first from step 2 above):</p> <div class=\"highlight\"><pre>AppDelegate.h\nAppDelegate.m\nMainViewController.h\nMainViewController.m\nCordova.plist\n</pre></div>\n</li> <li><p>Add all the new <code class=\"prettyprint\">MainViewController</code> and <code class=\"prettyprint\">AppDelegate</code> files into your Xcode project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-1.6.1.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/cordova-1.5.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">cordova-1.6.1.js</code> file.</p></li> <li><p>Add the new <code class=\"prettyprint\">Cordova.plist</code> file into your project. This is necessary because the core plugin service names must change to match the ones from Android and BlackBerry, for a unified Cordova JavaScript file (<code class=\"prettyprint\">cordova-js</code>).</p></li> <li><p>Integrate any settings, <strong>Plugins</strong> and <strong>ExternalHosts</strong> entries that you had in your <strong>backed-up Cordova.plist</strong> into the new <code class=\"prettyprint\">Cordova.plist</code>.</p></li> <li><p>Integrate any project-specific code that you have in your backed-up <code class=\"prettyprint\">AppDelegate.h</code> and <code class=\"prettyprint\">AppDelegate.m</code> into the new <code class=\"prettyprint\">AppDelegate</code> files. Any <code class=\"prettyprint\">UIWebViewDelegate</code> or <code class=\"prettyprint\">CDVCommandDelegate</code> code in <code class=\"prettyprint\">AppDelegate.m</code> needs to go into <code class=\"prettyprint\">MainViewController.m</code> now (see commented-out sections in that file).</p></li> <li><p>Integrate any project-specific code that you have in your backed-up <code class=\"prettyprint\">MainViewController.h</code> and <code class=\"prettyprint\">MainViewController.m</code> into the new MainViewController files.</p></li> <li><p>Click on the project icon in the Project Navigator, select your <strong>Project</strong>, then select the <strong>Build Settings</strong> tab.</p></li> <li><p>Enter <strong>Compiler for C/C++/Objective-C</strong> in the search field.</p></li> <li><p>Select the <strong>Apple LLVM Compiler 3.1</strong> value.</p></li> </ol> <h2>Upgrading 1.4.x Projects to 1.5.0</h2> <ol> <li><p>Install Cordova 1.5.0.</p></li> <li><p>Create a new project and run it once. You will need some of the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/cordova-1.5.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/phonegap-1.4.x.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new Cordova <code class=\"prettyprint\">cordova-1.5.0.js</code> file.</p></li> <li><p>Find <code class=\"prettyprint\">PhoneGap.framework</code> in your Project Navigator, select it.</p></li> <li><p>Type the <strong>Delete</strong> key and delete the <code class=\"prettyprint\">PhoneGap.framework</code> reference in the Project Navigator.</p></li> <li><p>Type the <strong>Option-Command-A</strong> key combination, which should drop down a sheet to add files to your project (the <strong>Add Files...</strong> sheet). Make sure the <strong>Created groups for any added folders</strong> radio button is selected.</p></li> <li><p>Type the <strong>Shift-Command-G</strong> key combination, which should drop down another sheet for you to go to a folder (the <strong>Go to the folder:</strong> sheet).</p></li> <li><p>Enter <code class=\"prettyprint\">/Users/Shared/Cordova/Frameworks/Cordova.framework</code> in the <strong>Go to the folder:</strong> sheet and then press the <strong>Go</strong> button.</p></li> <li><p>Press the <strong>Add</strong> button in the <strong>Add Files...</strong> sheet.</p></li> <li><p>Select <code class=\"prettyprint\">Cordova.framework</code> in the Project Navigator.</p></li> <li><p>Type the <strong>Option-Command-1</strong> key combination to show the <strong>File Inspector</strong>.</p></li> <li><p>Choose <strong>Absolute Path</strong> in the <strong>File Inspector</strong> for the drop-down menu for <strong>Location</strong>.</p></li> <li><p>Type the <strong>Option-Command-A</strong> key combination, which should drop down a sheet to add files to your project (the <strong>Add Files...</strong> sheet). Make sure the <strong>Created groups for any added folders</strong> radio button is selected.</p></li> <li><p>Type the <strong>Shift-Command-G</strong> key combination, which should drop down another sheet for you to go to a folder (the <strong>Go to the folder:</strong> sheet).</p></li> <li><p>Enter <code class=\"prettyprint\">~/Documents/CordovaLib/Classes/deprecated</code> in the <strong>Go to the folder:</strong> sheet and then press the <strong>Go</strong> button.</p></li> <li><p>Press the <strong>Add</strong> button in the <strong>Add Files...</strong> sheet.</p></li> <li>\n<p>In the <code class=\"prettyprint\">AppDelegate.h</code>, <code class=\"prettyprint\">AppDelegate.m</code>, and <code class=\"prettyprint\">MainViewController.h</code> files, replace the whole <code class=\"prettyprint\">#ifdef PHONEGAP_FRAMEWORK</code> block with:</p> <div class=\"highlight\"><pre>#import \"CDVDeprecated.h\"\n</pre></div>\n</li> <li><p>Click on the <strong>project icon</strong> in the Project Navigator, select your <strong>Target</strong>, then select the <strong>Build Settings</strong> tab.</p></li> <li><p>Search for <strong>Framework Search Paths</strong>.</p></li> <li><p>Replace the existing value with <code class=\"prettyprint\">/Users/Shared/Cordova/Frameworks</code>.</p></li> <li><p>Search for <strong>Preprocessor Macros</strong>.</p></li> <li><p>For the first (combined) value, replace the value with <strong>CORDOVA_FRAMEWORK=YES</strong>.</p></li> <li><p>Select the <strong>Build Phases</strong> tab.</p></li> <li><p>Expand <strong>Run Script</strong>.</p></li> <li><p>Replace any occurrences of <strong>PhoneGap</strong> with <strong>Cordova</strong>.</p></li> <li><p>Find the <code class=\"prettyprint\">PhoneGap.plist</code> file in the Project Navigator, and click on the filename once to enter name edit mode.</p></li> <li><p>Rename <code class=\"prettyprint\">PhoneGap.plist</code> to <code class=\"prettyprint\">Cordova.plist</code>.</p></li> <li><p>Right-click on <code class=\"prettyprint\">Cordova.plist</code> and choose <strong>Open As → Source Code</strong>.</p></li> <li><p>Press <strong>Option-Command-F</strong>, choose <strong>Replace</strong> from the drop-down on the top left of the Source window.</p></li> <li><p>Enter <code class=\"prettyprint\">com.phonegap</code> for the Find string, and <code class=\"prettyprint\">org.apache.cordova</code> for the Replace string, then press the <strong>Replace All</strong> button.</p></li> <li><p>Enter <strong>PG</strong> for the Find string, and <strong>CDV</strong> for the Replace string, then press the <strong>Replace All</strong> button.</p></li> <li><p>Press <strong>Command-B</strong> to build. You still have deprecations that you can get rid of in the future (see <code class=\"prettyprint\">CDVDeprecated.h</code>. For example, replace classes in your code that use PG* to CDV*).</p></li> </ol> <h2>Upgrading 1.4.0 Projects to 1.4.1</h2> <ol> <li><p>Install Cordova 1.4.1.</p></li> <li><p>Make a backup of <code class=\"prettyprint\">MainViewController.m</code>.</p></li> <li><p>Create a new project. You will need some of the assets from this new project.</p></li> <li><p>Copy the <code class=\"prettyprint\">MainViewController.m</code> file from the new project into your 1.4.0-based project directory on disk, replacing the old file (backup your files first from step 2 above).</p></li> <li><p>Add the <code class=\"prettyprint\">MainViewController.m</code> file into your Xcode project.</p></li> <li><p>Integrate any project-specific code that you have in your backed-up <code class=\"prettyprint\">MainViewController.m</code> into the new file.</p></li> <li><p>Updating the <code class=\"prettyprint\">phonegap-1.4.0.js</code> file is optional, nothing has changed in the JavaScript between 1.4.0 and 1.4.1.</p></li> </ol> <h2>Upgrading 1.3.0 Projects to 1.4.0</h2> <ol> <li><p>Install Cordova 1.4.0.</p></li> <li><p>Make a backup of <code class=\"prettyprint\">AppDelegate.m</code> and <code class=\"prettyprint\">AppDelegate.h</code> in your project.</p></li> <li><p>Create a new project. You will need some of the assets from this new project.</p></li> <li>\n<p>Copy these files from the new project into your 1.3.0-based project directory on disk, replacing any old files (backup your files first from step 2 above):</p> <div class=\"highlight\"><pre>AppDelegate.h\nAppDelegate.m\nMainViewController.h\nMainViewController.m\nMainViewController.xib\n</pre></div>\n</li> <li><p>Add all the <code class=\"prettyprint\">MainViewController</code> files into your Xcode project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/phonegap-1.4.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/phonegap-1.3.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">phonegap-1.4.0.js</code> file.</p></li> <li><p>Add a new entry under <code class=\"prettyprint\">Plugins</code> in the <code class=\"prettyprint\">PhoneGap.plist</code> file. The key is <code class=\"prettyprint\">com.phonegap.battery</code> and the value is <code class=\"prettyprint\">PGBattery</code>.</p></li> <li><p>Integrate any project-specific code that you have in your backed-up <code class=\"prettyprint\">AppDelegate.h</code> and <code class=\"prettyprint\">AppDelegate.m</code> into the new AppDelegate files.</p></li> </ol> <h2>Upgrading 1.2.0 Projects to 1.3.0</h2> <ol> <li><p>Install Cordova 1.3.0.</p></li> <li><p>Make a backup of <code class=\"prettyprint\">AppDelegate.m</code> and <code class=\"prettyprint\">AppDelegate.h</code> in your project.</p></li> <li><p>Create a new project. You will need some of the assets from this new project.</p></li> <li>\n<p>Copy these files from the new project into your 1.2.0-based project directory on disk, replacing any old files (backup your files first from step 2 above):</p> <div class=\"highlight\"><pre>AppDelegate.h\nAppDelegate.m\nMainViewController.h\nMainViewController.m\nMainViewController.xib\n</pre></div>\n</li> <li><p>Add all the <code class=\"prettyprint\">MainViewController</code> files into your Xcode project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/phonegap-1.3.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/phonegap-1.2.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">phonegap-1.3.0.js</code> file.</p></li> <li><p>Add a new entry under <code class=\"prettyprint\">Plugins</code> in the <code class=\"prettyprint\">PhoneGap.plist</code> file. The key is <code class=\"prettyprint\">com.phonegap.battery</code> and the value is <code class=\"prettyprint\">PGBattery</code>.</p></li> <li><p>Integrate any project-specific code that you have in your backed-up <code class=\"prettyprint\">AppDelegate.h</code> and <code class=\"prettyprint\">AppDelegate.m</code> into the new AppDelegate files.</p></li> </ol> <h2>Upgrading 1.1.0 Projects to 1.2.0</h2> <ol> <li><p>Install Cordova 1.2.0.</p></li> <li><p>Make a backup of <code class=\"prettyprint\">AppDelegate.m</code> and <code class=\"prettyprint\">AppDelegate.h</code> in your project.</p></li> <li><p>Create a new project. You will need some of the assets from this new project.</p></li> <li>\n<p>Copy these files from the new project into your 1.1.0-based project directory on disk, replacing any old files (backup your files first from step 2 above):</p> <div class=\"highlight\"><pre>AppDelegate.h\nAppDelegate.m\nMainViewController.h\nMainViewController.m\nMainViewController.xib\n</pre></div>\n</li> <li><p>Add all the <code class=\"prettyprint\">MainViewController</code> files into your Xcode project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/phonegap-1.2.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/phonegap-1.1.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">phonegap-1.2.0.js</code> file.</p></li> <li><p>Add a new entry under <code class=\"prettyprint\">Plugins</code> in the <code class=\"prettyprint\">PhoneGap.plist</code> file. The key is <code class=\"prettyprint\">com.phonegap.battery</code> and the value is <code class=\"prettyprint\">PGBattery</code>.</p></li> <li><p>Integrate any project-specific code that you have in your backed-up <code class=\"prettyprint\">AppDelegate.h</code> and <code class=\"prettyprint\">AppDelegate.m</code> into the new AppDelegate files.</p></li> </ol> <h2>Upgrading 1.0.0 Projects to 1.1.0</h2> <ol> <li><p>Install Cordova 1.1.0.</p></li> <li><p>Make a backup of <code class=\"prettyprint\">AppDelegate.m</code> and <code class=\"prettyprint\">AppDelegate.h</code> in your project.</p></li> <li><p>Create a new project. You will need some of the assets from this new project.</p></li> <li>\n<p>Copy these files from the new project into your 1.0.0-based project directory on disk, replacing any old files (backup your files first from step 2 above):</p> <div class=\"highlight\"><pre>AppDelegate.h\nAppDelegate.m\nMainViewController.h\nMainViewController.m\nMainViewController.xib\n</pre></div>\n</li> <li><p>Add all the <code class=\"prettyprint\">MainViewController</code> files into your Xcode project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/phonegap-1.1.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/phonegap-1.0.0.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">phonegap-1.1.0.js</code> file.</p></li> <li><p>Add a new entry under <code class=\"prettyprint\">Plugins</code> in the <code class=\"prettyprint\">PhoneGap.plist</code> file. The key is <code class=\"prettyprint\">com.phonegap.battery</code> and the value is <code class=\"prettyprint\">PGBattery</code>.</p></li> <li><p>Integrate any project-specific code that you have in your backed-up <code class=\"prettyprint\">AppDelegate.h</code> and <code class=\"prettyprint\">AppDelegate.m</code> into the new AppDelegate files.</p></li> </ol> <h2>Upgrading 0.9.6 Projects to 1.0.0</h2> <ol> <li><p>Install Cordova 1.0.0.</p></li> <li><p>Make a backup of <code class=\"prettyprint\">AppDelegate.m</code> and <code class=\"prettyprint\">AppDelegate.h</code> in your project.</p></li> <li><p>Create a new project. You will need some of the assets from this new project.</p></li> <li>\n<p>Copy these files from the new project into your 0.9.6-based project directory on disk, replacing any old files (backup your files first from step 2 above):</p> <div class=\"highlight\"><pre>AppDelegate.h\nAppDelegate.m\nMainViewController.h\nMainViewController.m\nMainViewController.xib\n</pre></div>\n</li> <li><p>Add all the <code class=\"prettyprint\">MainViewController</code> files into your Xcode project.</p></li> <li><p>Copy the <code class=\"prettyprint\">www/phonegap-1.0.0.js</code> file from the new project into the <code class=\"prettyprint\">www</code> directory, and delete the <code class=\"prettyprint\">www/phonegap-0.9.6.js</code> file.</p></li> <li><p>Update the Cordova script reference in the <code class=\"prettyprint\">www/index.html</code> file (and any other files that contain the script reference) to point to the new <code class=\"prettyprint\">phonegap-1.0.0.js</code> file.</p></li> <li><p>Add a new entry under <code class=\"prettyprint\">Plugins</code> in the <code class=\"prettyprint\">PhoneGap.plist</code> file. The key is <code class=\"prettyprint\">com.phonegap.battery</code> and the value is <code class=\"prettyprint\">PGBattery</code>.</p></li> <li><p>Integrate any project-specific code that you have in your backed-up <code class=\"prettyprint\">AppDelegate.h</code> and <code class=\"prettyprint\">AppDelegate.m</code> into the new AppDelegate files.</p></li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ios/upgrade.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/ios/upgrade.html</a>\n  </p>\n</div>\n","guide/platforms/win8/plugin":"<h1>Windows Plugins</h1> <p>This section provides details for how to implement a plugin for use in a Windows Store app. Before reading this, see Application Plugins for an overview of the plugin's structure and its common JavaScript interface. This section continues to demonstrate the sample <em>echo</em> plugin that communicates from the Cordova webview to the native platform and back.</p> <p>It is important to note that Windows supports developing directly in Javascript, which means developing the 'native' portions in only required in special cases.</p> <h2>Creating a Windows Plugin in JavaScript</h2> <p>These instructions are to create a pure JavaScript plugin. Understanding this is crucial to understanding how to add the native/managed bits.</p> <p>Windows Cordova plugins are essentially a thin wrapper around existing WinJS provided functions, but assuming you will want to define your JS common interface for multiple devices, you will typically have 1 JS file that provides the API.</p> <div class=\"highlight\"><pre>// inside file echoplugin.js\nvar EchoPlugin = {\n// the echo function calls successCallback with the provided text in strInput\n// if strInput is empty, it will call the errorCallback\necho:function(successCallback, errorCallback, strInput) {\n   cordova.exec(successCallback,errorCallback,\"EchoPlugin\",\"echo\",[strInput]);\n}\n}\n</pre></div> <h2>Inside Cordova exec on Windows</h2> <p>The cordova.exec function is defined differently on every platform, this is because each platform has it's own way of communicating between the application js code, and the native wrapper code. But in the case of Windows, there is no native wrapper, so the exec call is there for consistency. You could do your js only plugin work directly in EchoPlugin.echo, something like :</p> <div class=\"highlight\"><pre>// inside file echoplugin.js ( this is what NOT to do if you want to reuse the JS API cross platform )\nvar EchoPlugin = {\necho:function(successCallback,errorCallback,strInput) {\n   if(!strInput || !strInput.length) {\n       errorCallback(\"Error, something was wrong with the input string. =&gt;\" + strInput);\n   }\n   else {\n       successCallback(strInput + \"echo\");\n   }\n}\n}\n</pre></div> <p>This would/could work fine, however it means that you will need different versions of echoPlugin.js for different platforms, and possibly you could have issues with inconsistencies in your implementations. As a best practice, we decided to mimic a native API inside cordova.exec on Windows, so we could run the same JS code, and not have to rewrite it for the platform, and also take advantage of any parameter checking, or other common code provided by developers who were working on other platforms.</p> <h2>The Cordova exec proxy</h2> <p>On Windows, cordova provides a proxy that you can use to register an object that will handle all cordova.exec calls to an API.</p> <p>For example if you wanted to provide the implementation for the Accelerometer API, you would do this :</p> <p>cordova.commandProxy.add(\"Accelerometer\",{ start:function(){ // your code here ... } // , // ... and the rest of the API here });</p> <p>So in our case, we will assume that the code in echoplugin.js is handling cross platform relevant JavaScript, and we can simply write a proxy for Windows</p> <div class=\"highlight\"><pre>// in file echopluginProxy.js\ncordova.commandProxy.add(\"EchoPlugin\",{\necho:function(successCallback,errorCallback,strInput) {\n   if(!strInput || !strInput.length) {\n       errorCallback(\"Error, something was wrong with the input string. =&gt;\" + strInput);\n   }\n   else {\n       successCallback(strInput + \"echo\");\n   }\n}\n});\n</pre></div> <p>The plugin definition</p> <p>If we want users of our plugin to be able to easily install our plugin, we will need to define it according to how PlugMan defines plugins. More on this in the <a href=\"plugin_ref_spec.md#Plugin%20Specification\">Plugin Spec</a></p> <div class=\"highlight\"><pre>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;plugin xmlns=\"http://apache.org/cordova/ns/plugins/1.0\"\nid=\"com.risingj.echoplugin\"\nversion=\"0.1.0\"&gt;\n\n&lt;js-module src=\"www/echoplugin.js\" name=\"echoplugin\"&gt;\n   &lt;clobbers target=\"window.echoplugin\" /&gt;\n&lt;/js-module&gt;\n\n&lt;!-- windows --&gt;\n&lt;platform name=\"windows\"&gt;\n   &lt;js-module src=\"src/windows/echopluginProxy.js\" name=\"EchoProxy\"&gt;\n       &lt;merges target=\"\" /&gt;\n   &lt;/js-module&gt;\n&lt;/platform&gt;\n\n&lt;!-- other platforms --&gt;\n\n&lt;/plugin&gt;\n</pre></div> <p>This gives us a working Windows JavaScript plugin that uses a common file ( echoplugin.js ) and uses a proxy to provide the Windows only portion of implementation ( echopluginProxy.js ). So how do we add native/managed code to this? Well we are going to start the same, the only difference will be what we do inside in echopluginProxy methods.</p> <h1>How WinJS accesses native/managed code</h1> <p>In Windows, WinJS authored apps are able to interact with native code, this inter-op is available for Windows Runtime Components. The details are numerous, and this guide will only cover the basics. Microsoft provides much more info <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/hh441569.aspx\">here</a>.</p> <p>When you create your Windows Runtime Component, any class that is defined as 'public ref class sealed' is considered an 'activatable class' and will be callable from JavaScript.</p> <div class=\"highlight\"><pre>// in your header file .h\nnamespace EchoRuntimeComponent\n{\npublic ref class EchoPluginRT sealed \n{\n   public:\n   static Platform::String^ Echo(Platform::String^ input);\n}\n}\n\n// in the implementation file .cpp\nusing namespace EchoRuntimeComponent;\nusing namespace Platform;\n\nPlatform::String^ EchoPluginRT::Echo(Platform::String^ input)\n{\nif(input-&gt;IsEmpty()) \n{\n   return \"Error: input string is empty.\";\n}\nelse\n{\n   return input-&gt;ToString() + \"echo\";\n}\n}\n</pre></div> <p>Now in order for us to call the native code, we use the namespace, classname, and lowerCamelCase the method we are calling.</p> <p>var res = EchoRuntimeComponent.EchoPluginRT.echo(\"boom\"); Moving this to our echopluginProxy.js file, we get this :</p> <div class=\"highlight\"><pre>// in file echopluginProxy.js\ncordova.commandProxy.add(\"EchoPlugin\",{\necho:function(successCallback,errorCallback,strInput) {\n   var res = EchoRuntimeComponent.EchoPluginRT.echo(strInput);\n   if(res.indexOf(\"Error\") == 0) {\n       errorCallback(res);\n   }\n   else {\n       successCallback(res);\n   }\n}\n});\n</pre></div> <p>And that's it, we have an end to end C++ backed js callable plugin for use in Apache Cordova Windows!</p> <h1>Some technical notes:</h1> <ul> <li>the callback is typically async, so calling the callback right away is probably not expected by the caller. In practice, if the call is not async, you should at least use a javascript timeout to force the callback to be called async.</li> <li>Activatable classes can do all kinds of awesome, like event dispatching, async callbacks, passing your own object types, arrays, collections, overloaded methods and much more. I recommend you do your homework.</li> <li>If you stick to common Windows Phone 8.0 and Windows SDK API calls, you will be able to use the same runtime component ( native or managed bits ) in a Windows Phone 8.0 Apache Cordova plugin. ~stay tuned for that post.</li> </ul> <h1>Defining your plugin</h1> <p>Now that we have a working plugin, we need to revisit the plugin definition from earlier so we can publish it. We can now add the runtime component as a framework. Note that the output type of a WindowsRuntimeComponent can be either .winmd or .dll</p> <div class=\"highlight\"><pre>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;plugin xmlns=\"http://apache.org/cordova/ns/plugins/1.0\"\nid=\"com.risingj.echoplugin\"\nversion=\"0.2.0\"&gt;\n\n&lt;js-module src=\"www/echoplugin.js\" name=\"echoplugin\"&gt;\n   &lt;clobbers target=\"window.echoplugin\" /&gt;\n&lt;/js-module&gt;\n\n&lt;!-- windows --&gt;\n&lt;platform name=\"windows\"&gt;\n   &lt;js-module src=\"src/windows/echopluginProxy.js\" name=\"EchoProxy\"&gt;\n       &lt;merges target=\"\" /&gt;\n   &lt;/js-module&gt;\n   &lt;framework src=\"src/windows/EchoRuntimeComponent.winmd\" custom=\"true\"/&gt;\n&lt;/platform&gt;\n\n&lt;!-- other platforms --&gt;\n\n&lt;/plugin&gt;\n</pre></div> <p>That's it, you now have a distributable plugin that you can share with the world! One thing to note, support for adding frameworks to Windows Cordova project was only recently added so you will need to make sure your cordova tooling current. The cordova-cli and cordova-plugman both support adding removing native backed plugins.</p> <p>&gt; cordova plugin add com.risingj.echoplugin</p> <p>or</p> <p>&gt; plugman install --platform windows --plugin com.risingj.echoplugin --project .</p> <p>https://github.com/purplecabbage/cordova-runtimecomp-echoplug</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/win8/plugin.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/win8/plugin.html</a>\n  </p>\n</div>\n","guide/platforms/win8/packaging":"<h1>Windows Packaging</h1> <p>You can learn more about signing and packaging of Windows Store Apps on <a href=\"https://msdn.microsoft.com/en-us/library/hh446593(v=vs.85).aspx\">MSDN</a>.</p> <p>To be able to correctly package and sign Windows apps there are few things required:</p> <ul> <li>A signing certificate</li> <li>Identity details matching the provided signing certificate</li> </ul> <p>In Windows project, identity details are kept in a file named package.appxmanifest. This file is automatically populated every time a Cordova app is built. Identity holds 3 important fields.</p> <ul> <li>Name</li> <li>Publisher</li> <li>Version</li> </ul> <p><em>Name</em> and <em>Version</em> can be set from <strong>config.xml</strong>. <em>Publisher</em> can be provided as a build parameter or can be set on <strong>build.json</strong> file.</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/win8/packaging.png\" alt=\"\"></p> <p>A signing certificate can be provided from either CLI or through build.json file. The certificate related CLI flags are:</p> <ul> <li>\n<code class=\"prettyprint\">--packageCertificateKeyFile</code> : Once a package signing certificate is created, this parameter can be used to associate the certificate with the app. This flag takes a file path as an argument. Eg. <code class=\"prettyprint\">&gt; cordova build -- --packageCertificateKeyFile=\"platforms\\windows\\CordovaApp_TemporaryKey.pfx\"</code>\n</li> <li>\n<code class=\"prettyprint\">--packageThumbprint</code> : Package thumbprint is used to validate the authenticity of package certificate key file. When creating a certificate key file, this value will be provided to the end user. Eg. <code class=\"prettyprint\">&gt; cordova build -- --packageCertificateKeyFile=\"platforms\\windows\\CordovaApp_TemporaryKey.pfx\" --packageThumbprint=\"ABCABCABCABC123123123123\"</code>\n</li> </ul> <p>Alternatively, these values could be specified using a build configuration file (build.json) using CLI (--buildConfig). A sample build configuration file:</p> <div class=\"highlight\"><pre>{\n\"windows\": {\n   \"debug\": {\n       \"packageCertificateKeyFile\": \"platforms\\\\windows\\\\CordovaApp_TemporaryKey.pfx\"\n   },\n   \"release\": {\n       \"packageCertificateKeyFile\": \"c:\\\\path-to-key\\\\keycert.pfx\",\n       \"packageThumbprint\": \"ABCABCABCABC123123123123\",\n       \"publisherId\": \"CN=FakeCorp.com, L=Redmond, S=Washington, C=US\"\n   }\n}\n}\n</pre></div> <p>There is also support to mix and match command line arguments and parameters in build.json file. Values from the command line arguments will get precedence.</p> <h1>How to create a certificate key and sign Cordova windows Apps</h1> <p>Signing is required for distributing and installing Windows Store apps. This process is normally handled by Visual Studio when you deploy a package for release. To do tmhis without Visual Studio we need to create our own certificates.</p> <p>For creating certificates we need to use <a href=\"https://msdn.microsoft.com/en-us/library/ff548309(v=vs.85).aspx\">makecert.exe</a> util. This tool ships with Windows SDK and can be found under <code class=\"prettyprint\">%ProgramFiles(x86)%\\Windows Kits\\8.1\\bin\\x64</code> or <code class=\"prettyprint\">%ProgramFiles(x86)%\\Windows Kits\\8.1\\bin\\x86</code>.</p> <p>The first thing we need to do is to create a root key for signing our app.</p> <p><code class=\"prettyprint\">makecert.exe -n \"CN=FakeCorp.com\" -r -eku \"1.3.6.1.5.5.7.3.3,1.3.6.1.4.1.311.10.3.13\" -e \"01/01/2020\" –h 0 -sv FakeCorp.com.pvk FakeCorp.com.cer</code></p> <p>To understand what makecert does, here's a brief explanation of what parameters do:</p> <ul> <li>-n \"CN=FakeCorp.com\" : This is the certificate subject <a href=\"http://en.wikipedia.org/wiki/X.509\">X.509</a> name. In this example it's <strong>C</strong>ommon<strong>N</strong>ame=FakeCorp.com.</li> <li>-r : Creates a <a href=\"http://en.wikipedia.org/wiki/Self-signed_certificate\">self signed certificate</a>.</li> <li>-eku #EKU_VAL# : Comma separated enhanced key usage OIDs. <ul> <li>1.3.6.1.5.5.7.3.3 indicates that the certificate is valid for code signing. Always specify this value to limit the intended use for the certificate.</li> <li>1.3.6.1.4.1.311.10.3.13 indicates that the certificate respects lifetime signing. Typically, if a signature is time stamped, as long as the certificate was valid at the point when it was time stamped, the signature remains valid even if the certificate expires. This EKU forces the signature to expire regardless of whether the signature is time stamped.</li> </ul>\n</li> <li>-e \"01/01/2020\" : Sets the expiration date of the certificate. </li> <li>-h 0 : Sets max height of the tree below this cert to 0 to prevent the certificate from being used as a Certification Authority (CA) that can issue other certificates.</li> <li>-sv FakeCorp.com.pvk : Output PVK file. Windows uses PVK files to store private keys for code signing.</li> <li>FakeCorp.com.cer : Output certificate file. CER file is used to store X.509 certificate.</li> </ul> <p>After running makecert for the first time, enter the private password on the screen that pops up:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/win8/createprivatekeywindow.png\" alt=\"\"></p> <p>Once pvk and cer file is created, we need to create a pfx file from these certificates. A pfx (Personal Exchange Format) file contains a variety of cryptographic information, such as certificates, root authority certificates, certificate chains and private keys. To package the certs, we will use the a tool called <a href=\"https://msdn.microsoft.com/en-us/library/ff550672(v=vs.85).aspx\">pvk2pfx</a>. This tool ships with Windows SDK and can be found under <code class=\"prettyprint\">%ProgramFiles(x86)%\\Windows Kits\\8.1\\bin\\x64</code> or <code class=\"prettyprint\">%ProgramFiles(x86)%\\Windows Kits\\8.1\\bin\\x86</code>.</p> <p><code class=\"prettyprint\">pvk2pfx -pvk FakeCorp.com.pvk -pi pvkPassword -spc FakeCorp.com.cer -pfx FakeCorp.com.pfx -po pfxPassword</code></p> <p>Where:</p> <ul> <li>pvk : Input pvk file name</li> <li>pi : pvk password</li> <li>spc : Input cert file name</li> <li>pfx : Output pfx file name</li> <li>po : pfx password; same as pvk password if not provided</li> </ul> <p>If we provide this pfx file to build.json file, we will have the following error: \"The key file may be password protected. To correct this, try to import the certificate manually into the current user's personal certificate store.\". In order to import it we have to use <a href=\"https://technet.microsoft.com/en-us/library/ee624045(v=ws.10).aspx\">certutil</a> from an admin prompt:</p> <p><code class=\"prettyprint\">certutil -user -p PASSWORD -importPFX FakeCorp.com.pfx</code></p> <p>Where:</p> <ul> <li>user : Specifies \"current user\" personal store</li> <li>p : Password for pfx file</li> <li>importPfx : Name of pfx file</li> </ul> <p>Once installed, next step is to add packageThumbprint and packageCertificateKeyFile to build.json. In order to find the packageThumbprint, search for the CommonName we've associated with the certificate:</p> <p><code class=\"prettyprint\">powershell -Command \" &amp; {dir -path cert:\\LocalMachine\\My | where { $_.Subject -like \\\"*FakeCorp.com*\\\" }}\"</code></p> <p>Once these final values are provided. Cordova should successfully package and sign the app.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/win8/packaging.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/win8/packaging.html</a>\n  </p>\n</div>\n","guide/platforms/tizen/index":"<h1>Tizen Platform Guide</h1> <p>This guide describes how to set up your SDK development environment to deploy Cordova apps for devices running the Tizen operating system.</p> <h2>Requirements and Support</h2> <p>The Tizen SDK requires Linux Ubuntu 10.04/10.10/11.04/11.10 (32-bit), or Windows XP SP3/7 (32-bit).</p> <p>Developers should use the <code class=\"prettyprint\">cordova</code> utility in conjunction with the Tizen SDK. See <a href=\"../../cli/index\">The Command-Line Interface</a> for information how to install it, add projects, then build and deploy a project.</p> <h2>Install the SDK</h2> <p>Download the Tizen SDK from <a href=\"https://developer.tizen.org/sdk\">tizen.org</a>.</p>  <h2>Open a Project in the SDK</h2> <ol> <li><p>Launch the Tizen Eclipse IDE.</p></li> <li><p>Select <strong>File → Import → Tizen Web Project</strong>:</p></li> </ol> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/tizen/import_project.png\" alt=\"\"></p> <ol> <li><p>Press <strong>Next</strong>.</p></li> <li><p>Make sure <strong>Select root directory</strong> is checked.</p></li> <li><p>Make sure <strong>Copy projects into workspace</strong> is checked.</p></li> <li><p>Press <strong>Browse</strong> and select the Cordova Tizen <code class=\"prettyprint\">samples</code> project directory (such as <code class=\"prettyprint\">/cordova-basic</code>):</p></li> </ol> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/tizen/import_widget.png\" alt=\"\"></p> <ol> <li>Press <strong>Finish</strong>. Your project should now be imported and appear in the <strong>Project Explorer</strong> view:</li> </ol> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/tizen/project_explorer.png\" alt=\"\"></p> <p>To rebuild the project, right-click in the <strong>Project Explorer</strong> view and Select <strong>Build Project</strong>:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/tizen/build_project.png\" alt=\"\"></p> <p>A widget package file such as <em>hello.wgt</em> should generate in the project's root directory.</p> <h2>Deploy to Emulator</h2> <p>Right-click the project in the <strong>Project Explorer</strong> view and select <strong>Run As → Tizen Web Simulator Application</strong>:</p> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/tizen/runas_web_sim_app.png\" alt=\"\"></p> <h2>Deploy to Device</h2> <ul> <li><p>Make sure that the target device is properly launched, connected and configured. Its <strong>Date and Time</strong> settings must be set correctly.</p></li> <li><p>Use the <strong>Connection Explorer</strong> view to select the application deployment target: <strong>Window → Show View → Connection Explorer</strong>.</p></li> </ul> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/tizen/connection_explorer.png\" alt=\"\"></p> <ul> <li>Right-click the project in the <strong>Project Explorer</strong> view, then select <strong>Run As → Tizen Web Application</strong>:</li> </ul> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/tizen/runas_web_app.png\" alt=\"\"></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/tizen/index.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/tizen/index.html</a>\n  </p>\n</div>\n","guide/platforms/win8/upgrade":"<h1>Upgrading Windows 8</h1> <p>This guide shows how to modify Windows 8 projects to upgrade from older versions of Cordova. Most of these instructions apply to projects created with an older set of command-line tools that precede the <code class=\"prettyprint\">cordova</code> CLI utility. See <a href=\"../../cli/index\">The Command-Line Interface</a> for information how to update the version of the CLI.</p> <h2>Upgrade to 4.0.0 from 3.1.0 or later</h2> <p>For projects that were created with the cordova CLI: </p> <ol> <li><p>Update the <code class=\"prettyprint\">cordova</code> CLI version. See <a href=\"../../cli/index\">The Command-Line Interface</a>. </p></li> <li><p>Run <code class=\"prettyprint\">cordova platform update windows8</code>.</p></li> </ol> <p>For projects not created with the cordova CLI, run:</p> <div class=\"highlight\"><pre>bin\\update &lt;project_path&gt;\n</pre></div> <h2>Upgrade to 3.1.0</h2> <p>Cordova CLI support for Windows 8 was introduced in Cordova 3.1.0. To upgrade, we suggest creating a new Cordova CLI project and moving over all necessary assets. </p> <h2>Upgrade to 2.9.0 from 2.8.0</h2> <p>The following commands should be done from within Visual Studio to be sure that the any project references are updated/deleted.</p> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-2.8.0.js</code> from the project's <code class=\"prettyprint\">www</code> directory.</p></li> <li><p>Add <code class=\"prettyprint\">cordova.js</code> file from the source to the project's <code class=\"prettyprint\">www</code> directory. (Note that the file no longer contains a version number in the filename.)</p></li> <li><p>Build and test!</p></li> </ol> <h2>Upgrade to 2.8.0 from 2.7.0</h2> <p>The following commands should be done from within Visual Studio to be sure that the any project references are updated/deleted.</p> <ol> <li><p>Remove <code class=\"prettyprint\">cordova-2.7.0.js</code> from the project's <code class=\"prettyprint\">www</code> directory. </p></li> <li><p>Add <code class=\"prettyprint\">cordova.js</code> file from the source to the project's <code class=\"prettyprint\">www</code> directory. (Note that the file no longer contains a version number in the filename.)</p></li> <li><p>Build and test!</p></li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/win8/upgrade.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/win8/upgrade.html</a>\n  </p>\n</div>\n","guide/platforms/wp8/webview":"<h1>Windows Phone 8.0 WebViews</h1> <p>This guide shows how to embed a Cordova-enabled WebView component within a larger Windows Phone 8.0 application. </p> <p>To follow these instructions, make sure you have the latest Cordova distribution. Download it from <a href=\"http://cordova.apache.org\">cordova.apache.org</a> and unzip its Windows Phone 8.0 package (cordova-wp8-*.zip).</p> <ol> <li><p>Navigate to the package's <code class=\"prettyprint\">wp8/framework</code> directory and build <code class=\"prettyprint\">WPCordovaClassLib.sln</code>. It creates the <code class=\"prettyprint\">Bin\\Debug[Release]\\WPCordovaClassLib.dll</code>.</p></li> <li><p>Copy the <code class=\"prettyprint\">WPCordovaClassLib.dll</code> file into the Windows Phone 8 project's <code class=\"prettyprint\">/libs</code> directory and include <code class=\"prettyprint\">WPCordovaClassLib.dll</code> to your project via <code class=\"prettyprint\">Project-&gt;References-&gt;Add Reference</code>. Alternatively, you can directly reference the <code class=\"prettyprint\">wp8/framework/WPCordovaClassLib.csproj</code> file.</p></li> <li>\n<p>Add <code class=\"prettyprint\">CordovaView</code> component to your page (for example, <code class=\"prettyprint\">MainPage.xaml</code>).</p> <div class=\"highlight\"><pre>xmlns:my=\"clr-namespace:WPCordovaClassLib;assembly=WPCordovaClassLib\"&gt;\n...\n&lt;my:CordovaView HorizontalAlignment=\"Stretch\" Margin=\"0,0,0,0\" \nStartPageUri=\"html/index.html\" x:Name=\"CordovaView\" VerticalAlignment=\"Stretch\" /&gt;\n</pre></div>\n</li> <li><p>Copy <code class=\"prettyprint\">common/www/cordova.js</code> along with the application's HTML and JavaScript files to the Windows Phone 8 project's <code class=\"prettyprint\">html</code> directory and include new files to the project.</p></li> <li><p>Copy the <code class=\"prettyprint\">wp8/template/config.xml</code>to the project's root directory and </p></li> </ol> <p>Instructions above will link core Cordova components only, see <a href=\"../../../plugin_ref/plugman\">Using Plugman to Manage Plugins</a> in order to link Cordova plugins.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/wp8/webview.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/wp8/webview.html</a>\n  </p>\n</div>\n","cordova/events/events.deviceready":"<h1>deviceready</h1> <p>The event fires when Cordova is fully loaded.</p> <div class=\"highlight\"><pre>document.addEventListener(\"deviceready\", yourCallbackFunction, false);\n</pre></div> <h2>Details</h2> <p>This event is essential to any application. It signals that Cordova's device APIs have loaded and are ready to access.</p> <p>Cordova consists of two code bases: native and JavaScript. While the native code loads, a custom loading image displays. However, JavaScript only loads once the DOM loads. This means the web app may potentially call a Cordova JavaScript function before the corresponding native code becomes available.</p> <p>The <code class=\"prettyprint\">deviceready</code> event fires once Cordova has fully loaded. Once the event fires, you can safely make calls to Cordova APIs. Applications typically attach an event listener with <code class=\"prettyprint\">document.addEventListener</code> once the HTML document's DOM has loaded.</p> <p>The <code class=\"prettyprint\">deviceready</code> event behaves somewhat differently from others. Any event handler registered after the <code class=\"prettyprint\">deviceready</code> event fires has its callback function called immediately.</p> <h2>Supported Platforms</h2> <ul> <li>Amazon Fire OS</li> <li>Android</li> <li>BlackBerry 10</li> <li>iOS</li> <li>Tizen</li> <li>Windows Phone 8</li> <li>Windows 8</li> </ul> <h2>Quick Example</h2> <div class=\"highlight\"><pre>document.addEventListener(\"deviceready\", onDeviceReady, false);\n\nfunction onDeviceReady() {\n// Now safe to use device APIs\n}\n</pre></div> <h2>Full Example</h2> <div class=\"highlight\"><pre>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;Device Ready Example&lt;/title&gt;\n\n&lt;script type=\"text/javascript\" charset=\"utf-8\" src=\"cordova.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" charset=\"utf-8\"&gt;\n\n// Wait for device API libraries to load\n//\nfunction onLoad() {\n   document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\n\n// device APIs are available\n//\nfunction onDeviceReady() {\n   // Now safe to use device APIs\n}\n\n&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"onLoad()\"&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.deviceready.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.deviceready.html</a>\n  </p>\n</div>\n","cordova/events/events.pause":"<h1>pause</h1> <p>The event fires when an application is put into the background.</p> <div class=\"highlight\"><pre>document.addEventListener(\"pause\", yourCallbackFunction, false);\n</pre></div> <h2>Details</h2> <p>The <code class=\"prettyprint\">pause</code> event fires when the native platform puts the application into the background, typically when the user switches to a different application.</p> <p>Applications typically should use <code class=\"prettyprint\">document.addEventListener</code> to attach an event listener once the <code class=\"prettyprint\">[deviceready](events.deviceready.html)</code> event fires.</p> <h2>Supported Platforms</h2> <ul> <li>Amazon Fire OS</li> <li>Android</li> <li>BlackBerry 10</li> <li>iOS</li> <li>Windows Phone 8</li> <li>Windows 8</li> </ul> <h2>Quick Example</h2> <div class=\"highlight\"><pre>document.addEventListener(\"pause\", onPause, false);\n\nfunction onPause() {\n// Handle the pause event\n}\n</pre></div> <h2>Full Example</h2> <div class=\"highlight\"><pre>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;Pause Example&lt;/title&gt;\n\n&lt;script type=\"text/javascript\" charset=\"utf-8\" src=\"cordova.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" charset=\"utf-8\"&gt;\n\n// Wait for device API libraries to load\n//\nfunction onLoad() {\n   document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\n\n// device APIs are available\n//\nfunction onDeviceReady() {\n   document.addEventListener(\"pause\", onPause, false);\n}\n\n// Handle the pause event\n//\nfunction onPause() {\n}\n\n&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"onLoad()\"&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre></div> <h2>iOS Quirks</h2> <p>In the <code class=\"prettyprint\">pause</code> handler, any calls to the Cordova API or to native plugins that go through Objective-C do not work, along with any interactive calls, such as alerts or <code class=\"prettyprint\">console.log()</code>. They are only processed when the app resumes, on the next run loop.</p> <p>The iOS-specific <code class=\"prettyprint\">resign</code> event is available as an alternative to <code class=\"prettyprint\">pause</code>, and detects when users enable the <strong>Lock</strong> button to lock the device with the app running in the foreground. If the app (and device) is enabled for multi-tasking, this is paired with a subsequent <code class=\"prettyprint\">pause</code> event, but only under iOS 5. In effect, all locked apps in iOS 5 that have multi-tasking enabled are pushed to the background. For apps to remain running when locked under iOS 5, disable the app's multi-tasking by setting <a href=\"http://developer.apple.com/library/ios/#documentation/general/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html\">UIApplicationExitsOnSuspend</a> to <code class=\"prettyprint\">YES</code>. To run when locked on iOS 4, this setting does not matter.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.pause.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.pause.html</a>\n  </p>\n</div>\n","cordova/events/events.resume":"<h1>resume</h1> <p>The event fires when an application is retrieved from the background.</p> <div class=\"highlight\"><pre>document.addEventListener(\"resume\", yourCallbackFunction, false);\n</pre></div> <h2>Details</h2> <p>The <code class=\"prettyprint\">resume</code> event fires when the native platform pulls the application out from the background.</p> <p>Applications typically should use <code class=\"prettyprint\">document.addEventListener</code> to attach an event listener once the <code class=\"prettyprint\">[deviceready](events.deviceready.html)</code> event fires.</p> <h2>Supported Platforms</h2> <ul> <li>Amazon Fire OS</li> <li>Android</li> <li>BlackBerry 10</li> <li>iOS</li> <li>Windows Phone 8</li> <li>Windows 8</li> </ul> <h2>Quick Example</h2> <div class=\"highlight\"><pre>document.addEventListener(\"resume\", onResume, false);\n\nfunction onResume() {\n// Handle the resume event\n}\n</pre></div> <h2>Full Example</h2> <div class=\"highlight\"><pre>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;Resume Example&lt;/title&gt;\n\n&lt;script type=\"text/javascript\" charset=\"utf-8\" src=\"cordova.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" charset=\"utf-8\"&gt;\n\n// Wait for device API libraries to load\n//\nfunction onLoad() {\n   document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\n\n// device APIs are available\n//\nfunction onDeviceReady() {\n   document.addEventListener(\"resume\", onResume, false);\n}\n\n// Handle the resume event\n//\nfunction onResume() {\n}\n\n&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"onLoad()\"&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre></div> <h2>iOS Quirks</h2> <p>Any interactive functions called from a <code class=\"prettyprint\">[pause](events.pause.html)</code> event handler execute later when the app resumes, as signaled by the <code class=\"prettyprint\">resume</code> event. These include alerts, <code class=\"prettyprint\">console.log()</code>, and any calls from plugins or the Cordova API, which go through Objective-C.</p> <ul> <li>\n<p><strong>active</strong> event</p> <p>The iOS-specific <code class=\"prettyprint\">active</code> event is available as an alternative to <code class=\"prettyprint\">resume</code>, and detects when users disable the <strong>Lock</strong> button to unlock the device with the app running in the foreground. If the app (and device) is enabled for multi-tasking, this is paired with a subsequent <code class=\"prettyprint\">resume</code> event, but only under iOS 5. In effect, all locked apps in iOS 5 that have multi-tasking enabled are pushed to the background. For apps to remain running when locked under iOS 5, disable the app's multi-tasking by setting <a href=\"http://developer.apple.com/library/ios/#documentation/general/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html\">UIApplicationExitsOnSuspend</a> to <code class=\"prettyprint\">YES</code>. To run when locked on iOS 4, this setting does not matter.</p>\n</li> <li>\n<p><strong>resume</strong> event</p> <p>When called from a <code class=\"prettyprint\">resume</code> event handler, interactive functions such as <code class=\"prettyprint\">alert()</code> need to be wrapped in a <code class=\"prettyprint\">setTimeout()</code> call with a timeout value of zero, or else the app hangs. For example:</p> <div class=\"highlight\"><pre>document.addEventListener(\"resume\", onResume, false);\nfunction onResume() {\n   setTimeout(function() {\n     // TODO: do your thing!\n   }, 0);\n}\n</pre></div>\n</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.resume.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.resume.html</a>\n  </p>\n</div>\n","cordova/events/events.backbutton":"<h1>backbutton</h1> <p>The event fires when the user presses the back button.</p> <div class=\"highlight\"><pre>document.addEventListener(\"backbutton\", yourCallbackFunction, false);\n</pre></div> <h2>Details</h2> <p>To override the default back-button behavior, register an event listener for the <code class=\"prettyprint\">backbutton</code> event, typically by calling <code class=\"prettyprint\">document.addEventListener</code> once you receive the <code class=\"prettyprint\">[deviceready](events.deviceready.html)</code> event. It is no longer necessary to call any other method to override the back-button behavior.</p> <h2>Supported Platforms</h2> <ul> <li>Amazon Fire OS</li> <li>Android</li> <li>BlackBerry 10</li> <li>Windows Phone 8</li> </ul> <h2>Quick Example</h2> <div class=\"highlight\"><pre>document.addEventListener(\"backbutton\", onBackKeyDown, false);\n\nfunction onBackKeyDown() {\n// Handle the back button\n}\n</pre></div> <h2>Full Example</h2> <div class=\"highlight\"><pre>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;Back Button Example&lt;/title&gt;\n\n&lt;script type=\"text/javascript\" charset=\"utf-8\" src=\"cordova.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" charset=\"utf-8\"&gt;\n\n// Wait for device API libraries to load\n//\nfunction onLoad() {\n   document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\n\n// device APIs are available\n//\nfunction onDeviceReady() {\n   // Register the event listener\n   document.addEventListener(\"backbutton\", onBackKeyDown, false);\n}\n\n// Handle the back button\n//\nfunction onBackKeyDown() {\n}\n\n&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"onLoad()\"&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.backbutton.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.backbutton.html</a>\n  </p>\n</div>\n","cordova/events/events.menubutton":"<h1>menubutton</h1> <p>The event fires when the user presses the menu button.</p> <div class=\"highlight\"><pre>document.addEventListener(\"menubutton\", yourCallbackFunction, false);\n</pre></div> <h2>Details</h2> <p>Applying an event handler overrides the default menu button behavior.</p> <p>Applications typically should use <code class=\"prettyprint\">document.addEventListener</code> to attach an event listener once the <code class=\"prettyprint\">[deviceready](events.deviceready.html)</code> event fires.</p> <h2>Supported Platforms</h2> <ul> <li>Amazon Fire OS</li> <li>Android</li> <li>BlackBerry 10</li> </ul> <h2>Quick Example</h2> <div class=\"highlight\"><pre>document.addEventListener(\"menubutton\", onMenuKeyDown, false);\n\nfunction onMenuKeyDown() {\n// Handle the back button\n}\n</pre></div> <h2>Full Example</h2> <div class=\"highlight\"><pre>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n                 \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;Menu Button Example&lt;/title&gt;\n\n&lt;script type=\"text/javascript\" charset=\"utf-8\" src=\"cordova.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" charset=\"utf-8\"&gt;\n\n// Wait for device API libraries to load\n//\nfunction onLoad() {\n   document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\n\n// device APIs are available\n//\nfunction onDeviceReady() {\n   // Register the event listener\n   document.addEventListener(\"menubutton\", onMenuKeyDown, false);\n}\n\n// Handle the menu button\n//\nfunction onMenuKeyDown() {\n}\n\n&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"onLoad()\"&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.menubutton.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.menubutton.html</a>\n  </p>\n</div>\n","plugin_ref/spec":"<h1>Plugin Specification</h1> <p>The <code class=\"prettyprint\">plugin.xml</code> file is an XML document in the <code class=\"prettyprint\">plugins</code> namespace: <code class=\"prettyprint\">http://apache.org/cordova/ns/plugins/1.0</code>. It contains a top-level <code class=\"prettyprint\">plugin</code> element that defines the plugin, and children that define the structure of the plugin.</p> <p>A sample plugin element:</p> <div class=\"highlight\"><pre>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;plugin xmlns=\"http://apache.org/cordova/ns/plugins/1.0\"\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nid=\"com.alunny.foo\"\nversion=\"1.0.2\"&gt;\n</pre></div> <h2>\n<em>plugin</em> Element</h2> <p>The <code class=\"prettyprint\">plugin</code> element is the plugin manifest's top-level element. It features the following attributes:</p> <ul> <li><p><code class=\"prettyprint\">xmlns</code> (required): The plugin namespace, <code class=\"prettyprint\">http://apache.org/cordova/ns/plugins/1.0</code>. If the document contains XML from other namespaces, such as tags to be added to the <code class=\"prettyprint\">AndroidManifest.xml</code> file, those namespaces should also be included in the top-level element.</p></li> <li><p><code class=\"prettyprint\">id</code> (required): A reverse-domain style identifier for the plugin, such as <code class=\"prettyprint\">com.alunny.foo</code></p></li> <li>\n<p><code class=\"prettyprint\">version</code> (required): A version number for the plugin, that matches the following major-minor-patch style regular expression:</p> <div class=\"highlight\"><pre>^\\d+[.]\\d+[.]\\d+$\n</pre></div>\n</li> </ul> <h2>\n<em>engines</em> and <em>engine</em> Elements</h2> <p>The child elements of the <code class=\"prettyprint\">&lt;engines&gt;</code> element specify versions of Apache Cordova-based frameworks that this plugin supports. An example:</p> <div class=\"highlight\"><pre>&lt;engines&gt;\n&lt;engine name=\"cordova\" version=\"1.7.0\" /&gt;\n&lt;engine name=\"cordova\" version=\"1.8.1\" /&gt;\n&lt;engine name=\"worklight\" version=\"1.0.0\" platform=\"android\" scriptSrc=\"worklight_version\"/&gt;\n&lt;/engines&gt;\n</pre></div> <p>Similar to the <code class=\"prettyprint\">&lt;plugin&gt;</code> element's <code class=\"prettyprint\">version</code> attribute, the specified version string should match a major-minor-patch string conforming to the regular expression:</p> <div class=\"highlight\"><pre>^\\d+[.]\\d+[.]\\d+$\n</pre></div> <p>Engine elements may also specify fuzzy matches to avoid repetition, and to reduce maintenance when the underlying platform is updated. Tools should support a minimum of <code class=\"prettyprint\">&gt;</code>, <code class=\"prettyprint\">&gt;=</code>, <code class=\"prettyprint\">&lt;</code> and <code class=\"prettyprint\">&lt;=</code>, for example:</p> <div class=\"highlight\"><pre>&lt;engines&gt;\n&lt;engine name=\"cordova\" version=\"&gt;=1.7.0\" /&gt;\n&lt;engine name=\"cordova\" version=\"&lt;1.8.1\" /&gt;\n&lt;/engines&gt;\n</pre></div> <p>The <code class=\"prettyprint\">&lt;engine&gt;</code> tags also has default support for all of the main platforms Cordova exists on. Specifying the <code class=\"prettyprint\">cordova</code> engine tag means that all versions of Cordova on any platform must satisfy the engine version attribute. You may also list specific platforms and their versions in order to override the catch-all <code class=\"prettyprint\">cordova</code> engine:</p> <div class=\"highlight\"><pre>&lt;engines&gt;\n&lt;engine name=\"cordova\" version=\"&gt;=1.7.0\" /&gt;\n&lt;engine name=\"cordova-android\" version=\"&gt;=1.8.0\" /&gt;\n&lt;engine name=\"cordova-ios\" version=\"&gt;=1.7.1\" /&gt;\n&lt;/engines&gt;\n</pre></div> <p>Here's a list of the default engines that the <code class=\"prettyprint\">&lt;engine&gt;</code> tag supports:</p> <ul> <li><code class=\"prettyprint\">cordova</code></li> <li><code class=\"prettyprint\">cordova-plugman</code></li> <li><code class=\"prettyprint\">cordova-amazon-fireos</code></li> <li><code class=\"prettyprint\">cordova-android</code></li> <li><code class=\"prettyprint\">cordova-ios</code></li> <li><code class=\"prettyprint\">cordova-blackberry10</code></li> <li><code class=\"prettyprint\">cordova-wp8</code></li> <li><code class=\"prettyprint\">cordova-windows8</code></li> <li>\n<code class=\"prettyprint\">android-sdk</code> // returns the highest Android api level installed</li> <li>\n<code class=\"prettyprint\">apple-xcode</code> // returns the xcode version</li> <li>\n<code class=\"prettyprint\">apple-ios</code> // returns the highest iOS version installed</li> <li>\n<code class=\"prettyprint\">apple-osx</code> // returns the OSX version</li> <li>\n<code class=\"prettyprint\">blackberry-ndk</code> // returns the native blackberry SDK version</li> </ul> <p>Specifying custom Apache Cordova-based frameworks should be listed under the engine tag like so:</p> <div class=\"highlight\"><pre>&lt;engines&gt;\n&lt;engine name=\"my_custom_framework\" version=\"1.0.0\" platform=\"android\" scriptSrc=\"path_to_my_custom_framework_version\"/&gt;\n&lt;engine name=\"another_framework\" version=\"&gt;0.2.0\" platform=\"ios|android\" scriptSrc=\"path_to_another_framework_version\"/&gt;\n&lt;engine name=\"even_more_framework\" version=\"&gt;=2.2.0\" platform=\"*\" scriptSrc=\"path_to_even_more_framework_version\"/&gt;\n&lt;/engines&gt;\n</pre></div> <p>A custom Apache Cordova-based framework requires that an engine element includes the following attributes: <code class=\"prettyprint\">name</code>, <code class=\"prettyprint\">version</code>, <code class=\"prettyprint\">scriptSrc</code>, and <code class=\"prettyprint\">platform</code>.</p> <ul> <li><p><code class=\"prettyprint\">name</code> (required): A human-readable name for your custom framework.</p></li> <li><p><code class=\"prettyprint\">version</code> (required): The version that your framework must have in order to install.</p></li> <li><p><code class=\"prettyprint\">scriptSrc</code> (required): The script file that tells plugman what version of the custom framework is. Ideally, this file should be within the top level directory of your plugin directory.</p></li> <li><p><code class=\"prettyprint\">platform</code> (required): Which platforms that your framework supports. You may use the wildcard <code class=\"prettyprint\">*</code> to say supported for all platforms, specify multiple with a pipe character like <code class=\"prettyprint\">android|ios|blackberry10</code> or just a single platform like <code class=\"prettyprint\">android</code>.</p></li> </ul> <p>plugman aborts with a non-zero code for any plugin whose target project does not meet the engine's constraints.</p> <p>If no <code class=\"prettyprint\">&lt;engine&gt;</code> tags are specified, plugman attempts to install into the specified cordova project directory blindly.</p> <h2>\n<em>name</em> Element</h2> <p>A human-readable name for the plugin, whose text content contains the name of the plugin. For example:</p> <div class=\"highlight\"><pre>&lt;name&gt;Foo&lt;/name&gt;\n</pre></div> <p>This element does not (yet) handle localization.</p> <h2>\n<em>description</em> Element</h2> <p>A human-readable description for the plugin. The text content of the element contains the description of the plugin. An example:</p> <div class=\"highlight\"><pre>&lt;description&gt;Foo plugin description&lt;/description&gt;\n</pre></div> <p>This element does not (yet) handle localization.</p> <h2>\n<em>author</em> Element</h2> <p>Plugin author name. The text content of the element contains the name of the plugin author. An example:</p> <div class=\"highlight\"><pre>&lt;author&gt;Foo plugin description&lt;/author&gt;\n</pre></div> <h2>\n<em>keywords</em> Element</h2> <p>Plugin keywords. The text content of the element contains comma separated keywords to describe the plugin. An example:</p> <div class=\"highlight\"><pre>&lt;keywords&gt;foo,bar&lt;/keywords&gt;\n</pre></div> <h2>\n<em>license</em> Element</h2> <p>Plugin license. The text content of the element contains the plugin license. An example:</p> <div class=\"highlight\"><pre>&lt;license&gt;Apache 2.0 License&lt;/license&gt;\n</pre></div> <h2>\n<em>asset</em> Element</h2> <p>One or more elements listing the files or directories to be copied into a Cordova app's <code class=\"prettyprint\">www</code> directory. Examples:</p> <div class=\"highlight\"><pre>&lt;!-- a single file, to be copied in the root directory --&gt;\n&lt;asset src=\"www/foo.js\" target=\"foo.js\" /&gt;\n&lt;!-- a directory, also to be copied in the root directory --&gt;\n&lt;asset src=\"www/foo\" target=\"foo\" /&gt;\n</pre></div> <p>All <code class=\"prettyprint\">&lt;asset&gt;</code> tags require both <code class=\"prettyprint\">src</code> and <code class=\"prettyprint\">target</code> attributes. Web-only plugins contains mostly <code class=\"prettyprint\">&lt;asset&gt;</code> elements. Any <code class=\"prettyprint\">&lt;asset&gt;</code> elements that are nested within <code class=\"prettyprint\">&lt;platform&gt;</code> elements specify platform-specific web assets, as described below. Attributes include:</p> <ul> <li><p><code class=\"prettyprint\">src</code> (required): Where the file or directory is located in the plugin package, relative to the <code class=\"prettyprint\">plugin.xml</code> document. If a file does not exist at the specified <code class=\"prettyprint\">src</code> location, plugman stops and reverses the installation process, issues a notification about the conflict, and exits with a non-zero code.</p></li> <li><p><code class=\"prettyprint\">target</code> (required):</p></li> </ul> <p>Where the file or directory should be located in the Cordova app, relative to the <code class=\"prettyprint\">www</code> directory. Assets can be targeted to subdirectories, for example:</p> <div class=\"highlight\"><pre>&lt;asset src=\"www/new-foo.js\" target=\"js/experimental/foo.js\" /&gt;\n</pre></div> <p>creates the <code class=\"prettyprint\">js/experimental</code> directory within the <code class=\"prettyprint\">www</code> directory, unless already present, then copies the <code class=\"prettyprint\">new-foo.js</code> file and renames it <code class=\"prettyprint\">foo.js</code>. If a file already exists at the target location, plugman stops and reverses the installation process, issues a notification about the conflict, and exits with a non-zero code.</p> <h2>\n<em>js-module</em> Element</h2> <p>Most plugins include one or more JavaScript files. Each <code class=\"prettyprint\">&lt;js-module&gt;</code> tag corresponds to a JavaScript file, and prevents the plugin's users from having to add a <code class=\"prettyprint\">&lt;script&gt;</code> tag for each file. While <code class=\"prettyprint\">&lt;asset&gt;</code> tags simply copy a file from the plugin subdirectory into <code class=\"prettyprint\">www</code>, <code class=\"prettyprint\">&lt;js-module&gt;</code> tags are much more sophisticated. They look like this:</p> <div class=\"highlight\"><pre>&lt;js-module src=\"socket.js\" name=\"Socket\"&gt;\n&lt;clobbers target=\"chrome.socket\" /&gt;\n&lt;/js-module&gt;\n</pre></div> <p>When installing a plugin with the example above, <code class=\"prettyprint\">socket.js</code> is copied to <code class=\"prettyprint\">www/plugins/my.plugin.id/socket.js</code>, and added as an entry to <code class=\"prettyprint\">www/cordova_plugins.js</code>. At load time, code in <code class=\"prettyprint\">cordova.js</code> uses XHR to read each file and inject a <code class=\"prettyprint\">&lt;script&gt;</code> tag into HTML. It adds a mapping to clobber or merge as appropriate, as described below.</p> <p><em>Do not</em> wrap the file with <code class=\"prettyprint\">cordova.define</code>, as it is added automatically. The module is wrapped in a closure, with <code class=\"prettyprint\">module</code>, <code class=\"prettyprint\">exports</code>, and <code class=\"prettyprint\">require</code> in scope, as is normal for AMD modules.</p> <p>Details for the <code class=\"prettyprint\">&lt;js-module&gt;</code> tag:</p> <ul> <li><p>The <code class=\"prettyprint\">src</code> references a file in the plugin directory relative to the <code class=\"prettyprint\">plugin.xml</code> file.</p></li> <li><p>The <code class=\"prettyprint\">name</code> provides the last part of the module name. It can generally be whatever you like, and it only matters if you want to use <code class=\"prettyprint\">cordova.require</code> to import other parts of your plugins in your JavaScript code. The module name for a <code class=\"prettyprint\">&lt;js-module&gt;</code> is your plugin's <code class=\"prettyprint\">id</code> followed by the value of <code class=\"prettyprint\">name</code>. For the example above, with an <code class=\"prettyprint\">id</code> of <code class=\"prettyprint\">chrome.socket</code>, the module name is <code class=\"prettyprint\">chrome.socket.Socket</code>.</p></li> <li>\n<p>Three tags are allowed within <code class=\"prettyprint\">&lt;js-module&gt;</code>:</p> <ul> <li>\n<code class=\"prettyprint\">&lt;clobbers target=\"some.value\"/&gt;</code> indicates that the <code class=\"prettyprint\">module.exports</code> is inserted into the <code class=\"prettyprint\">window</code> object as <code class=\"prettyprint\">window.some.value</code>. You can have as many <code class=\"prettyprint\">&lt;clobbers&gt;</code> as you like. Any object not available on <code class=\"prettyprint\">window</code> is created.</li> <li>\n<code class=\"prettyprint\">&lt;merges target=\"some.value\"/&gt;</code> indicates that the module should be merged with any existing value at <code class=\"prettyprint\">window.some.value</code>. If any key already exists, the module's version overrides the original. You can have as many <code class=\"prettyprint\">&lt;merges&gt;</code> as you like. Any object not available on <code class=\"prettyprint\">window</code> is created.</li> <li>\n<code class=\"prettyprint\">&lt;runs/&gt;</code> means that your code should be specified with <code class=\"prettyprint\">cordova.require</code>, but not installed on the <code class=\"prettyprint\">window</code> object. This is useful when initializing the module, attaching event handlers or otherwise. You can only have up to one <code class=\"prettyprint\">&lt;runs/&gt;</code> tag. Note that including a <code class=\"prettyprint\">&lt;runs/&gt;</code> with <code class=\"prettyprint\">&lt;clobbers/&gt;</code> or <code class=\"prettyprint\">&lt;merges/&gt;</code> is redundant, since they also <code class=\"prettyprint\">cordova.require</code> your module.</li> <li>An empty <code class=\"prettyprint\">&lt;js-module&gt;</code> still loads and can be accessed in other modules via <code class=\"prettyprint\">cordova.require</code>.</li> </ul>\n</li> </ul> <p>If <code class=\"prettyprint\">src</code> does not resolve to an existing file, plugman stops and reverses the installation, issues a notification of the problem, and exits with a non-zero code.</p> <p>Nesting <code class=\"prettyprint\">&lt;js-module&gt;</code> elements within <code class=\"prettyprint\">&lt;platform&gt;</code> declares platform-specific JavaScript module bindings.</p> <h2>\n<em>dependency</em> Element</h2> <p>The <code class=\"prettyprint\">&lt;dependency&gt;</code> tag allows you to specify other plugins on which the current plugin depends. While future versions will access them from plugin repositories, in the short term plugins are directly referenced as URLs by <code class=\"prettyprint\">&lt;dependency&gt;</code> tags. They are formatted as follows:</p> <div class=\"highlight\"><pre>&lt;dependency id=\"com.plugin.id\" url=\"https://github.com/myuser/someplugin\" commit=\"428931ada3891801\" subdir=\"some/path/here\" /&gt;\n</pre></div> <ul> <li><p><code class=\"prettyprint\">id</code>: provides the ID of the plugin. It should be globally unique, and expressed in reverse-domain style. While neither of these restrictions is currently enforced, they may be in the future.</p></li> <li><p><code class=\"prettyprint\">url</code>: A URL for the plugin. This should reference a git repository, which plugman attempts to clone.</p></li> <li><p><code class=\"prettyprint\">commit</code>: This is any git reference understood by <code class=\"prettyprint\">git checkout</code>: a branch or tag name (e.g., <code class=\"prettyprint\">master</code>, <code class=\"prettyprint\">0.3.1</code>), or a commit hash (e.g., <code class=\"prettyprint\">975ddb228af811dd8bb37ed1dfd092a3d05295f9</code>).</p></li> <li><p><code class=\"prettyprint\">subdir</code>: Specifies that the targeted plugin dependency exists as a subdirectory of the git repository. This is helpful because it allows the repository to contain several related plugins, each specified individually.</p></li> </ul> <p>In the future, version constraints will be introduced, and a plugin repository will exist to support fetching by name instead of explicit URLs.</p> <h3>Relative Dependency Paths</h3> <p>If you set the <code class=\"prettyprint\">url</code> of a <code class=\"prettyprint\">&lt;dependency&gt;</code> tag to <code class=\"prettyprint\">\".\"</code> and provide a <code class=\"prettyprint\">subdir</code>, the dependent plugin is installed from the same local or remote git repository as the parent plugin that specifies the <code class=\"prettyprint\">&lt;dependency&gt;</code> tag.</p> <p>Note that the <code class=\"prettyprint\">subdir</code> always specifies a path relative to the <em>root</em> of the git repository, not the parent plugin. This is true even if you installed the plugin with a local path directly to it. Plugman finds the root of the git repository and then finds the other plugin from there.</p> <h2>\n<em>platform</em> Element</h2> <p>The <code class=\"prettyprint\">&lt;platform&gt;</code> tag identifies platforms that have associated native code or require modifications to their configuration files. Tools using this specification can identify supported platforms and install the code into Cordova projects.</p> <p>Plugins without <code class=\"prettyprint\">&lt;platform&gt;</code> tags are assumed to be JavaScript-only, and therefore installable on any and all platforms.</p> <p>A sample platform tag:</p> <div class=\"highlight\"><pre>&lt;platform name=\"android\"&gt;\n&lt;!-- android-specific elements --&gt;\n&lt;/platform&gt;\n&lt;platform name=\"ios\"&gt;\n&lt;!-- ios-specific elements --&gt;\n&lt;/platform&gt;\n</pre></div> <p>The required <code class=\"prettyprint\">name</code> attribute identifies a platform as supported, associating the element's children with that platform.</p> <p>Platform names should be lowercase. Platform names, as arbitrarily chosen, are listed:</p> <ul> <li>amazon-fireos</li> <li>android</li> <li>blackberry10</li> <li>ios</li> <li>wp8</li> <li>windows8</li> </ul> <h2>\n<em>source-file</em> Element</h2> <p>The <code class=\"prettyprint\">&lt;source-file&gt;</code> element identifies executable source code that should be installed into a project. Examples:</p> <div class=\"highlight\"><pre>&lt;!-- android --&gt;\n&lt;source-file src=\"src/android/Foo.java\"\n           target-dir=\"src/com/alunny/foo\" /&gt;\n&lt;!-- ios --&gt;\n&lt;source-file src=\"src/ios/CDVFoo.m\" /&gt;\n&lt;source-file src=\"src/ios/someLib.a\" framework=\"true\" /&gt;\n&lt;source-file src=\"src/ios/someLib.a\" compiler-flags=\"-fno-objc-arc\" /&gt;\n</pre></div> <p>It supports the following attributes:</p> <ul> <li><p><code class=\"prettyprint\">src</code> (required): Location of the file relative to <code class=\"prettyprint\">plugin.xml</code>. If the <code class=\"prettyprint\">src</code> file can't be found, plugman stops and reverses the installation, issues a notification about the problem, and exits with a non-zero code.</p></li> <li><p><code class=\"prettyprint\">target-dir</code>: A directory into which the files should be copied, relative to the root of the Cordova project. In practice, this is most important for Java-based platforms, where a file in the <code class=\"prettyprint\">com.alunny.foo</code> package must be located within the <code class=\"prettyprint\">com/alunny/foo</code> directory. For platforms where the source directory is not important, this attribute should be omitted.</p></li> </ul> <p>As with assets, if the <code class=\"prettyprint\">target</code> of a <code class=\"prettyprint\">source-file</code> would overwrite an existing file, plugman stops and reverses the installation, issues a notification about the problem, and exits with a non-zero code.</p> <ul> <li><p><code class=\"prettyprint\">framework</code> (iOS only): If set to <code class=\"prettyprint\">true</code>, also adds the specified file as a framework to the project.</p></li> <li><p><code class=\"prettyprint\">compiler-flags</code> (iOS only): If set, assigns the specified compiler flags for the particular source file.</p></li> </ul> <h2>\n<em>config-file</em> Element</h2> <p>Identifies an XML-based configuration file to be modified, where in that document the modification should take place, and what should be modified.</p> <p>Two file types that have been tested for modification with this element are <code class=\"prettyprint\">xml</code> and <code class=\"prettyprint\">plist</code> files.</p> <p>The <code class=\"prettyprint\">config-file</code> element only allows you to append new children to an XML document tree. The children are XML literals to be inserted in the target document.</p> <p>Example for XML:</p> <div class=\"highlight\"><pre>&lt;config-file target=\"AndroidManifest.xml\" parent=\"/manifest/application\"&gt;\n&lt;activity android:name=\"com.foo.Foo\" android:label=\"@string/app_name\"&gt;\n   &lt;intent-filter&gt;\n   &lt;/intent-filter&gt;\n&lt;/activity&gt;\n&lt;/config-file&gt;\n</pre></div> <p>Example for <code class=\"prettyprint\">plist</code>:</p> <div class=\"highlight\"><pre>&lt;config-file target=\"*-Info.plist\" parent=\"CFBundleURLTypes\"&gt;\n&lt;array&gt;\n   &lt;dict&gt;\n       &lt;key&gt;PackageName&lt;/key&gt;\n       &lt;string&gt;$PACKAGE_NAME&lt;/string&gt;\n   &lt;/dict&gt;\n&lt;/array&gt;\n&lt;/config-file&gt;\n</pre></div> <p>It supports the following attributes:</p> <ul> <li>\n<code class=\"prettyprint\">target</code>:</li> </ul> <p>The file to be modified, and the path relative to the root of the Cordova project.</p> <p>The target can include wildcard (<code class=\"prettyprint\">*</code>) elements. In this case, plugman recursively searches through the project directory structure and uses the first match.</p> <p>On iOS, the location of configuration files relative to the project directory root is not known, so specifying a target of <code class=\"prettyprint\">config.xml</code> resolves to <code class=\"prettyprint\">cordova-ios-project/MyAppName/config.xml</code>.</p> <p>If the specified file does not exist, the tool ignores the configuration change and continues installation.</p> <ul> <li>\n<code class=\"prettyprint\">parent</code>: An XPath selector referencing the parent of the elements to be added to the config file. If you use absolute selectors, you can use a wildcard (<code class=\"prettyprint\">*</code>) to specify the root element, e.g., <code class=\"prettyprint\">/*/plugins</code>.</li> </ul> <p>For <code class=\"prettyprint\">plist</code> files, the <code class=\"prettyprint\">parent</code> determines under what parent key the specified XML should be inserted.</p> <p>If the selector does not resolve to a child of the specified document, the tool stops and reverses the installation process, issues a warning, and exits with a non-zero code.</p> <ul> <li>\n<code class=\"prettyprint\">after</code>: A prioritized list of accepted siblings after which to add the XML snippet. Useful for specifying changes in files which require strict ordering of XML elements like <a href=\"http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff769509%28v=vs.105%29.aspx#BKMK_EXTENSIONSelement\">http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff769509%28v=vs.105%29.aspx#BKMK_EXTENSIONSelement</a>\n</li> </ul> <p>The Windows platform supports two additional attributes (both optional) when affecting the meta-name <code class=\"prettyprint\">package.appxmanifest</code>:</p> <p>The <code class=\"prettyprint\">device-target</code> attribute indicates that the should only be included when building for the specified target device type. Supported values are <code class=\"prettyprint\">win</code>, <code class=\"prettyprint\">phone</code>, or <code class=\"prettyprint\">all</code>.</p> <p>The <code class=\"prettyprint\">versions</code> attribute indicates that app manifests for specific Windows versions should only be altered for versions that match the specified version string. Value can be any valid node semantic version range string.</p> <p>Examples of using these Windows specific attributes:</p> <div class=\"highlight\"><pre>&lt;config-file target=\"package.appxmanifest\" parent=\"/Package/Capabilities\" versions=\"&lt;8.1.0\"&gt;\n&lt;Capability Name=\"picturesLibrary\" /&gt;\n&lt;DeviceCapability Name=\"webcam\" /&gt;\n&lt;/config-file&gt;\n&lt;config-file target=\"package.appxmanifest\" parent=\"/Package/Capabilities\" versions=\"&gt;=8.1.0\" device-target=\"phone\"&gt;\n&lt;DeviceCapability Name=\"webcam\" /&gt;\n&lt;/config-file&gt;\n</pre></div> <p>The above example will set pre-8.1 platforms (Windows 8, specifically) to require the <code class=\"prettyprint\">webcam</code> device capability and the <code class=\"prettyprint\">picturesLibrary</code> general capability, and apply the <code class=\"prettyprint\">webcam</code> device capability only to Windows 8.1 projects that build for Windows Phone. Windows desktop 8.1 systems are unmodified.</p> <h2>\n<em>plugins-plist</em> Element</h2> <p>This is <em>outdated</em> as it only applies to cordova-ios 2.2.0 and below. Use the <code class=\"prettyprint\">&lt;config-file&gt;</code> tag for newer versions of Cordova.</p> <p>Example:</p> <div class=\"highlight\"><pre>&lt;config-file target=\"config.xml\" parent=\"/widget/plugins\"&gt;\n&lt;feature name=\"ChildBrowser\"&gt;\n   &lt;param name=\"ios-package\" value=\"ChildBrowserCommand\"/&gt;\n&lt;/feature&gt;\n&lt;/config-file&gt;\n</pre></div> <p>Specifies a key and value to append to the correct <code class=\"prettyprint\">AppInfo.plist</code> file in an iOS Cordova project. For example:</p> <div class=\"highlight\"><pre>&lt;plugins-plist key=\"Foo\" string=\"CDVFoo\" /&gt;\n</pre></div> <h2>\n<em>resource-file</em> and <em>header-file</em> Elements</h2> <p>Like source files, but specifically for platforms such as iOS that distinguish between source files, headers, and resources. iOS Examples:</p> <div class=\"highlight\"><pre>&lt;resource-file src=\"CDVFoo.bundle\" /&gt;\n&lt;resource-file src=\"CDVFooViewController.xib\" /&gt;\n&lt;header-file src=\"CDVFoo.h\" /&gt;\n</pre></div> <p>Android example:</p> <div class=\"highlight\"><pre>&lt;resource-file src=\"FooPluginStrings.xml\" target=\"res/values/FooPluginStrings.xml\" /&gt;\n</pre></div> <h2>\n<em>lib-file</em> Element</h2> <p>Like source, resource, and header files, but specifically for platforms such as BlackBerry 10 that use user-generated libraries. Examples:</p> <div class=\"highlight\"><pre>&lt;lib-file src=\"src/BlackBerry10/native/device/libfoo.so\" arch=\"device\" /&gt;\n&lt;lib-file src=\"src/BlackBerry10/native/simulator/libfoo.so\" arch=\"simulator\" /&gt;\n</pre></div> <p>Supported attributes:</p> <ul> <li><p><code class=\"prettyprint\">src</code> (required): The location of the file relative to <code class=\"prettyprint\">plugin.xml</code>. If <code class=\"prettyprint\">src</code> can't be found, plugman stops and reverses the installation, issues a warning about the problem, and exits with a non-zero code.</p></li> <li><p><code class=\"prettyprint\">arch</code>: The architecture for which the <code class=\"prettyprint\">.so</code> file has been built, either <code class=\"prettyprint\">device</code> or <code class=\"prettyprint\">simulator</code>.</p></li> </ul> <p>For the Windows platform, the <code class=\"prettyprint\">&lt;lib-file&gt;</code> element allows the inclusion of an <code class=\"prettyprint\">&lt;SDKReference&gt;</code> in the generated Windows project files.</p> <p>Supported attributes:</p> <ul> <li><p><code class=\"prettyprint\">src</code> (required): The name of the SDK to include (which will be used as value of the <code class=\"prettyprint\">Include</code> attribute of the generated <code class=\"prettyprint\">&lt;SDKReference&gt;</code> element).</p></li> <li><p><code class=\"prettyprint\">arch</code>: Indicates that the <code class=\"prettyprint\">&lt;SDKReference&gt;</code> should only be included when building for the specified architecture. Supported values are <code class=\"prettyprint\">x86</code>, <code class=\"prettyprint\">x64</code> or <code class=\"prettyprint\">ARM</code>.</p></li> <li><p><code class=\"prettyprint\">device-target</code>: Indicates that the <code class=\"prettyprint\">&lt;SDKReference&gt;</code> should only be included when building for the specified target device type. Supported values are <code class=\"prettyprint\">win</code> (or <code class=\"prettyprint\">windows</code>), <code class=\"prettyprint\">phone</code> or <code class=\"prettyprint\">all</code>.</p></li> <li><p><code class=\"prettyprint\">versions</code>: Indicates that the <code class=\"prettyprint\">&lt;SDKReference&gt;</code> should only be included when building for versions that match the specified version string. Value can be any valid node semantic version range string.</p></li> </ul> <p>Examples:</p> <div class=\"highlight\"><pre>&lt;lib-file src=\"Microsoft.WinJS.2.0, Version=1.0\" arch=\"x86\" /&gt;\n&lt;lib-file src=\"Microsoft.WinJS.2.0, Version=1.0\" versions=\"&gt;=8.1\" /&gt;\n&lt;lib-file src=\"Microsoft.WinJS.2.0, Version=1.0\" target=\"phone\" /&gt;\n&lt;lib-file src=\"Microsoft.WinJS.2.0, Version=1.0\" target=\"win\" versions=\"8.0\" arch=\"x86\" /&gt;\n</pre></div> <h2>\n<em>framework</em> Element</h2> <p>Identifies a framework (usually part of the OS/platform) on which the plugin depends.</p> <p>The optional <code class=\"prettyprint\">custom</code> attribute is a boolean indicating whether the framework is one that is included as part of your plugin files (thus it is not a system framework).</p> <h3>\n<em>framework</em> for iOS</h3> <div class=\"highlight\"><pre>&lt;framework src=\"libsqlite3.dylib\" /&gt;\n&lt;framework src=\"social.framework\" weak=\"true\" /&gt;\n&lt;framework src=\"relative/path/to/my.framework\" custom=\"true\" /&gt;\n</pre></div> <p>The optional <code class=\"prettyprint\">weak</code> attribute is a boolean indicating whether the framework should be weakly linked. The default is <code class=\"prettyprint\">false</code>.</p> <h3>\n<em>framework</em> for Android</h3> <p>On Android (as of cordova-android@4.0.0), <em>framework</em> tags are used to include Maven dependencies, or to include bundled library projects.</p> <p>Examples:</p> <div class=\"highlight\"><pre>&lt;!-- Depend on latest version of GCM from play services --&gt;\n&lt;framework src=\"com.google.android.gms:play-services-gcm:+\" /&gt;\n&lt;!-- Depend on v21 of appcompat-v7 support library --&gt;\n&lt;framework src=\"com.android.support:appcompat-v7:21+\" /&gt;\n&lt;!-- Depend on library project included in plugin --&gt;\n&lt;framework src=\"relative/path/FeedbackLib\" custom=\"true\" /&gt;\n</pre></div> <p><em>framework</em> can also be used to have custom .gradle files sub-included into the main project's .gradle file:</p> <div class=\"highlight\"><pre>&lt;framework src=\"relative/path/rules.gradle\" custom=\"true\" type=\"gradleReference\" /&gt;\n</pre></div> <p>For pre-android@4.0.0 (ANT-based projects):</p> <p>The optional <code class=\"prettyprint\">type</code> attribute is a string indicating the type of framework to add. Currently only <code class=\"prettyprint\">projectReference</code> is supported and only for Windows. Using <code class=\"prettyprint\">custom='true'</code> and <code class=\"prettyprint\">type='projectReference'</code> will add a reference to the project which will be added to the compile+link steps of the cordova project. This essentially is the only way currently that a 'custom' framework can target multiple architectures as they are explicitly built as a dependency by the referencing cordova application.</p> <p>The optional <code class=\"prettyprint\">parent</code> sets the relative path to the directory containing the sub-project to which to add the reference. The default is <code class=\"prettyprint\">.</code>, i.e. the application project. It allows to add references between sub projects like in this example:</p> <div class=\"highlight\"><pre>&lt;framework src=\"extras/android/support/v7/appcompat\" custom=\"false\" parent=\"FeedbackLib\" /&gt;\n</pre></div> <h3>\n<em>framework</em> for Windows</h3> <p>The Windows platform supports three additional attributes (all optional) to refine when the framework should be included:</p> <div class=\"highlight\"><pre>&lt;framework src=\"path/to/project/LibProj.csproj\" custom=\"true\" type=\"projectReference\"/&gt;\n</pre></div> <p>The <code class=\"prettyprint\">arch</code> attribute indicates that the framework should only be included when building for the specified architecture. Supported values are <code class=\"prettyprint\">x86</code>, <code class=\"prettyprint\">x64</code> or <code class=\"prettyprint\">ARM</code>.</p> <p>The <code class=\"prettyprint\">device-target</code> attribute indicates that the framework should only be included when building for the specified target device type. Supported values are <code class=\"prettyprint\">win</code> (or <code class=\"prettyprint\">windows</code>), <code class=\"prettyprint\">phone</code> or <code class=\"prettyprint\">all</code>.</p> <p>The <code class=\"prettyprint\">versions</code> attribute indicates that the framework should only be included when building for versions that match the specified version string. Value can be any valid node semantic version range string.</p> <p>Examples of using these Windows specific attributes:</p> <div class=\"highlight\"><pre>&lt;framework src=\"src/windows/example.dll\" arch=\"x64\" /&gt;\n&lt;framework src=\"src/windows/example.dll\" versions=\"&gt;=8.0\" /&gt;\n&lt;framework src=\"src/windows/example.vcxproj\" type=\"projectReference\" target=\"win\" /&gt;\n&lt;framework src=\"src/windows/example.vcxproj\" type=\"projectReference\" target=\"all\" versions=\"8.1\" arch=\"x86\" /&gt;\n</pre></div> <h2>\n<em>info</em> Element</h2> <p>Additional information provided to users. This is useful when you require extra steps that can't be easily automated or are beyond plugman's scope. Examples:</p> <div class=\"highlight\"><pre>&lt;info&gt;\nYou need to install __Google Play Services__ from the `Android Extras` section using the Android SDK manager (run `android`).\n\nYou need to add the following line to the `local.properties`:\n\nandroid.library.reference.1=PATH_TO_ANDROID_SDK/sdk/extras/google/google_play_services/libproject/google-play-services_lib\n&lt;/info&gt;\n</pre></div> <h2>\n<em>hook</em> Element</h2> <p>Represents your custom script which will be called by Cordova when certain action occurs (for example, after plugin is added or platform prepare logic is invoked). This is useful when you need to extend default Cordova functionality. See <a href=\"../guide/appdev/hooks/index\">Hooks Guide</a> for more information.</p> <div class=\"highlight\"><pre>&lt;hook type=\"after_plugin_install\" src=\"scripts/afterPluginInstall.js\" /&gt;\n</pre></div> <h2>Variables</h2> <p>In certain cases, a plugin may need to make configuration changes dependent on the target application. For example, to register for C2DM on Android, an app whose package id is <code class=\"prettyprint\">com.alunny.message</code> would require a permission such as:</p> <div class=\"highlight\"><pre>&lt;uses-permission android:name=\"com.alunny.message.permission.C2D_MESSAGE\"/&gt;\n</pre></div> <p>In such cases where the content inserted from the <code class=\"prettyprint\">plugin.xml</code> file is not known ahead of time, variables can be indicated by a dollar-sign followed by a series of capital letters, digits, or underscores. For the above example, the <code class=\"prettyprint\">plugin.xml</code> file would include this tag:</p> <div class=\"highlight\"><pre>&lt;uses-permission android:name=\"$PACKAGE_NAME.permission.C2D_MESSAGE\"/&gt;\n</pre></div> <p>plugman replaces variable references with the specified value, or the empty string if not found. The value of the variable reference may be detected (in this case, from the <code class=\"prettyprint\">AndroidManifest.xml</code> file) or specified by the user of the tool; the exact process is dependent on the particular tool.</p> <p>plugman can request users to specify a plugin's required variables. For example, API keys for C2M and Google Maps can be specified as a command-line argument:</p> <div class=\"highlight\"><pre>plugman --platform android --project /path/to/project --plugin name|git-url|path --variable API_KEY=!@CFATGWE%^WGSFDGSDFW$%^#$%YTHGsdfhsfhyer56734\n</pre></div> <p>To make the variable mandatory, the <code class=\"prettyprint\">&lt;platform&gt;</code> tag needs to contain a <code class=\"prettyprint\">&lt;preference&gt;</code> tag. For example:</p> <div class=\"highlight\"><pre>&lt;preference name=\"API_KEY\" /&gt;\n</pre></div> <p>plugman checks that these required preferences are passed in. If not, it should warn the user how to pass the variable in and exit with a non-zero code.</p> <p>Certain variable names should be reserved, as listed below.</p> <h2>$PACKAGE_NAME</h2> <p>The reverse-domain style unique identifier for the package, corresponding to the <code class=\"prettyprint\">CFBundleIdentifier</code> on iOS or the <code class=\"prettyprint\">package</code> attribute of the top-level <code class=\"prettyprint\">manifest</code> element in an <code class=\"prettyprint\">AndroidManifest.xml</code> file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/plugin_ref/spec.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/plugin_ref/spec.html</a>\n  </p>\n</div>\n","cordova/events/events.searchbutton":"<h1>searchbutton</h1> <p>The event fires when the user presses the search button on Android.</p> <div class=\"highlight\"><pre>document.addEventListener(\"searchbutton\", yourCallbackFunction, false);\n</pre></div> <h2>Details</h2> <p>If you need to override the default search button behavior on Android you can register an event listener for the 'searchbutton' event.</p> <p>Applications typically should use <code class=\"prettyprint\">document.addEventListener</code> to attach an event listener once the <code class=\"prettyprint\">[deviceready](events.deviceready.html)</code> event fires.</p> <h2>Supported Platforms</h2> <ul> <li>Android</li> </ul> <h2>Quick Example</h2> <div class=\"highlight\"><pre>document.addEventListener(\"searchbutton\", onSearchKeyDown, false);\n\nfunction onSearchKeyDown() {\n// Handle the search button\n}\n</pre></div> <h2>Full Example</h2> <div class=\"highlight\"><pre>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n                 \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;Search Button Example&lt;/title&gt;\n\n&lt;script type=\"text/javascript\" charset=\"utf-8\" src=\"cordova.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" charset=\"utf-8\"&gt;\n\n// Wait for device API libraries to load\n//\nfunction onLoad() {\n   document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\n\n// device APIs are available\n//\nfunction onDeviceReady() {\n   // Register the event listener\n   document.addEventListener(\"searchbutton\", onSearchKeyDown, false);\n}\n\n// Handle the search button\n//\nfunction onSearchKeyDown() {\n}\n\n&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"onLoad()\"&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.searchbutton.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.searchbutton.html</a>\n  </p>\n</div>\n","cordova/events/events.startcallbutton":"<h1>startcallbutton</h1> <p>The event fires when the user presses the start call button.</p> <div class=\"highlight\"><pre>document.addEventListener(\"startcallbutton\", yourCallbackFunction, false);\n</pre></div> <h2>Details</h2> <p>If you need to override the default start call behavior you can register an event listener for the <code class=\"prettyprint\">startcallbutton</code> event.</p> <p>Applications typically should use <code class=\"prettyprint\">document.addEventListener</code> to attach an event listener once the <code class=\"prettyprint\">[deviceready](events.deviceready.html)</code> event fires.</p> <h2>Supported Platforms</h2> <ul> <li>BlackBerry 10</li> </ul> <h2>Quick Example</h2> <div class=\"highlight\"><pre>document.addEventListener(\"startcallbutton\", onStartCallKeyDown, false);\n\nfunction onStartCallKeyDown() {\n// Handle the start call button\n}\n</pre></div> <h2>Full Example</h2> <div class=\"highlight\"><pre>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n                 \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;Start Call Button Example&lt;/title&gt;\n\n&lt;script type=\"text/javascript\" charset=\"utf-8\" src=\"cordova.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" charset=\"utf-8\"&gt;\n\n// Wait for device API libraries to load\n//\nfunction onLoad() {\n   document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\n\n// device APIs are available\n//\nfunction onDeviceReady() {\n   // Register the event listener\n   document.addEventListener(\"startcallbutton\", onStartCallKeyDown, false);\n}\n\n// Handle the start call button\n//\nfunction onStartCallKeyDown() {\n}\n\n&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"onLoad()\"&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.startcallbutton.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.startcallbutton.html</a>\n  </p>\n</div>\n","cordova/events/events.endcallbutton":"<h1>endcallbutton</h1> <p>This event fires when the user presses the end call button.</p> <div class=\"highlight\"><pre>document.addEventListener(\"endcallbutton\", yourCallbackFunction, false);\n</pre></div> <h2>Details</h2> <p>The event overrides the default end call behavior.</p> <p>Applications typically should use <code class=\"prettyprint\">document.addEventListener</code> to attach an event listener once the <code class=\"prettyprint\">[deviceready](events.deviceready.html)</code> event fires.</p> <h2>Supported Platforms</h2> <ul> <li>BlackBerry 10</li> </ul> <h2>Quick Example</h2> <div class=\"highlight\"><pre>document.addEventListener(\"endcallbutton\", onEndCallKeyDown, false);\n\nfunction onEndCallKeyDown() {\n// Handle the end call button\n}\n</pre></div> <h2>Full Example</h2> <div class=\"highlight\"><pre>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n                 \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;End Call Button Example&lt;/title&gt;\n\n&lt;script type=\"text/javascript\" charset=\"utf-8\" src=\"cordova.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" charset=\"utf-8\"&gt;\n\n// Wait for device API libraries to load\n//\nfunction onLoad() {\n   document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\n\n// device APIs are available\n//\nfunction onDeviceReady() {\n   // Register the event listener\n   document.addEventListener(\"endcallbutton\", onEndCallKeyDown, false);\n}\n\n// Handle the end call button\n//\nfunction onEndCallKeyDown() {\n}\n\n&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"onLoad()\"&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.endcallbutton.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.endcallbutton.html</a>\n  </p>\n</div>\n","cordova/events/events.volumedownbutton":"<h1>volumedownbutton</h1> <p>The event fires when the user presses the volume down button.</p> <div class=\"highlight\"><pre>document.addEventListener(\"volumedownbutton\", yourCallbackFunction, false);\n</pre></div> <h2>Details</h2> <p>If you need to override the default volume down behavior you can register an event listener for the <code class=\"prettyprint\">volumedownbutton</code> event.</p> <p>Applications typically should use <code class=\"prettyprint\">document.addEventListener</code> to attach an event listener once the <code class=\"prettyprint\">[deviceready](events.deviceready.html)</code> event fires.</p> <h2>Supported Platforms</h2> <ul> <li>BlackBerry 10</li> <li>Android</li> </ul> <h2>Quick Example</h2> <div class=\"highlight\"><pre>document.addEventListener(\"volumedownbutton\", onVolumeDownKeyDown, false);\n\nfunction onVolumeDownKeyDown() {\n// Handle the volume down button\n}\n</pre></div> <h2>Full Example</h2> <div class=\"highlight\"><pre>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n                 \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;Volume Down Button Example&lt;/title&gt;\n\n&lt;script type=\"text/javascript\" charset=\"utf-8\" src=\"cordova.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" charset=\"utf-8\"&gt;\n\n// Wait for device API libraries to load\n//\nfunction onLoad() {\n   document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\n\n// device APIs are available\n//\nfunction onDeviceReady() {\n   // Register the event listener\n   document.addEventListener(\"volumedownbutton\", onVolumeDownKeyDown, false);\n}\n\n// Handle the volume down button\n//\nfunction onVolumeDownKeyDown() {\n}\n\n&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"onLoad()\"&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.volumedownbutton.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.volumedownbutton.html</a>\n  </p>\n</div>\n","cordova/events/events.volumeupbutton":"<h1>volumeupbutton</h1> <p>The event fires when the user presses the volume up button.</p> <div class=\"highlight\"><pre>document.addEventListener(\"volumeupbutton\", yourCallbackFunction, false);\n</pre></div> <h2>Details</h2> <p>If you need to override the default volume up behavior you can register an event listener for the <code class=\"prettyprint\">volumeupbutton</code> event.</p> <p>Applications typically should use <code class=\"prettyprint\">document.addEventListener</code> to attach an event listener once the <code class=\"prettyprint\">[deviceready](events.deviceready.html)</code> event fires.</p> <h2>Supported Platforms</h2> <ul> <li>BlackBerry 10</li> <li>Android</li> </ul> <h2>Quick Example</h2> <div class=\"highlight\"><pre>document.addEventListener(\"volumeupbutton\", onVolumeUpKeyDown, false);\n\nfunction onVolumeUpKeyDown() {\n// Handle the volume up button\n}\n</pre></div> <h2>Full Example</h2> <div class=\"highlight\"><pre>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n                 \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;Volume Up Button Example&lt;/title&gt;\n\n&lt;script type=\"text/javascript\" charset=\"utf-8\" src=\"cordova.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" charset=\"utf-8\"&gt;\n\n// Wait for device API libraries to load\n//\nfunction onLoad() {\n   document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\n\n// device APIs are available\n//\nfunction onDeviceReady() {\n   // Register the event listener\n   document.addEventListener(\"volumeupbutton\", onVolumeUpKeyDown, false);\n}\n\n// Handle the volume up button\n//\nfunction onVolumeUpKeyDown() {\n}\n\n&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"onLoad()\"&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.volumeupbutton.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/cordova/events/events.volumeupbutton.html</a>\n  </p>\n</div>\n","guide/platforms/wp8/vmware":"<h1>Configuring VMWare Fusion</h1> <p>This section shows how to configure VMWare Fusion on a Mac so that you can use Cordova to generate Windows Phone applications.</p> <p>The <a href=\"http://msdn.microsoft.com/en-US/library/windows/apps/jj945426\">Microsoft Developer Network</a> provides general instructions for how to run Windows under VMWare Fusion. After installing Windows, follow these steps:</p> <ol> <li><p>Within VMWare Fusion, select the Windows 8 disk image you have prepared and choose <strong>Settings</strong>.</p></li> <li><p>Choose the <strong>Processors &amp; Memory</strong> configuration options. Make sure to specify <em>two</em> processor cores, and to <strong>Enable hypervisor applications in this Virtual machine</strong>:</p></li> </ol> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/wp8/vmware_memory_opts.png\" alt=\"\"></p> <p>The Windows Phone Emulator alone uses half a gigabyte of memory, so overall you should reserve at least 2GB for VMWare.</p> <ol> <li>Choose the <strong>Advanced</strong> settings. Enable the <strong>Preferred virtualization engine: Intel VT-x with EPT</strong> option:</li> </ol> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/wp8/vmware_advanced_opts.png\" alt=\"\"></p> <ol> <li>\n<p>Modify the <em>.vmx</em> file to add or modify the following settings:</p> <div class=\"highlight\"><pre>hypervisor.cpuid.v0 = \"FALSE\"\nmce.enable = \"TRUE\"\nvhv.enable = \"TRUE\"\n</pre></div>\n</li> </ol> <p>Once you complete these steps, you are then ready to install the Windows Phone SDK. See the <a href=\"index\">Windows Phone 8 Platform Guide</a> for details.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/wp8/vmware.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/wp8/vmware.html</a>\n  </p>\n</div>\n","guide/platforms/wp8/parallels":"<h1>Configuring Parallels Desktop</h1> <p>This section shows how to configure Parallels Desktop on a Mac so that you can use Cordova to generate Windows Phone applications.</p> <p>The <a href=\"http://msdn.microsoft.com/en-US/library/windows/apps/jj945424\">Microsoft Developer Network</a> provides general instructions for how to run Windows under Parallels Desktop. After installing Windows, follow these steps:</p> <ol> <li><p>Within Parallels Desktop, select the Windows 8 disk image you have prepared, and choose <strong>Settings</strong>.</p></li> <li><p>Choose the <strong>General → CPUs</strong> options. Specify <em>two</em> CPUs. Specify at least 2GB of memory, even if it falls outside the recommended range:</p></li> </ol> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/wp8/parallel_cpu_opts.png\" alt=\"\"></p> <ol> <li>To be able to run the device emulator image within the Windows 8 virtual machine, choose the <strong>Optimizations</strong> options and enable <strong>Nested Virtualization</strong>.</li> </ol> <p><img src=\"http://cordova.apache.org/static/img/guide/platforms/wp8/parallel_optimize_opts.png\" alt=\"\"></p> <p>Once you complete these steps, you are ready to install the Windows Phone SDK. See the <a href=\"index\">Windows Phone 8 Platform Guide</a> for details.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012-2015 The Apache Software Foundation<br>Licensed under the Apache License 2.0.<br>\n    <a href=\"http://cordova.apache.org/docs/en/5.4.0/guide/platforms/wp8/parallels.html\" class=\"_attribution-link\">http://cordova.apache.org/docs/en/5.4.0/guide/platforms/wp8/parallels.html</a>\n  </p>\n</div>\n"}