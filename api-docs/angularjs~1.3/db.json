{"index":"<h1>Angular.js</h1>  <h2 href=\"https://code.angularjs.org/1.3.20/docs/api/ng\" class=\"nav-index-group-heading ng-binding active\">ng</h2> <ul class=\"aside-nav\"> <li class=\"nav-index-listing ng-scope active nav-index-section\">  function </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.bind\">angular.bind</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.bootstrap\">angular.bootstrap</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.copy\">angular.copy</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.element\">angular.element</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.equals\">angular.equals</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.extend\">angular.extend</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.foreach\">angular.forEach</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.fromjson\">angular.fromJson</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.identity\">angular.identity</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.injector\">angular.injector</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.isarray\">angular.isArray</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.isdate\">angular.isDate</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.isdefined\">angular.isDefined</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.iselement\">angular.isElement</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.isfunction\">angular.isFunction</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.isnumber\">angular.isNumber</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.isobject\">angular.isObject</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.isstring\">angular.isString</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.isundefined\">angular.isUndefined</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.lowercase\">angular.lowercase</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.module\">angular.module</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.noop\">angular.noop</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.reloadwithdebuginfo\">angular.reloadWithDebugInfo</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.tojson\">angular.toJson</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/function/angular.uppercase\">angular.uppercase</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  directive </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/a\">a</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/form\">form</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/input\">input</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/input/input%5Bcheckbox%5D\">input[checkbox]</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/input/input%5Bdate%5D\">input[date]</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/input/input%5Bdatetime-local%5D\">input[datetime-local]</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/input/input%5Bemail%5D\">input[email]</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/input/input%5Bmonth%5D\">input[month]</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/input/input%5Bnumber%5D\">input[number]</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/input/input%5Bradio%5D\">input[radio]</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/input/input%5Btext%5D\">input[text]</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/input/input%5Btime%5D\">input[time]</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/input/input%5Burl%5D\">input[url]</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/input/input%5Bweek%5D\">input[week]</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngapp\">ngApp</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngbind\">ngBind</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngbindhtml\">ngBindHtml</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngbindtemplate\">ngBindTemplate</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngblur\">ngBlur</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngchange\">ngChange</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngchecked\">ngChecked</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngclass\">ngClass</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngclasseven\">ngClassEven</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngclassodd\">ngClassOdd</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngclick\">ngClick</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngcloak\">ngCloak</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngcontroller\">ngController</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngcopy\">ngCopy</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngcsp\">ngCsp</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngcut\">ngCut</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngdblclick\">ngDblclick</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngdisabled\">ngDisabled</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngfocus\">ngFocus</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngform\">ngForm</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/nghide\">ngHide</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/nghref\">ngHref</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngif\">ngIf</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/nginclude\">ngInclude</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/nginit\">ngInit</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngkeydown\">ngKeydown</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngkeypress\">ngKeypress</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngkeyup\">ngKeyup</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/nglist\">ngList</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngmodel\">ngModel</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngmodeloptions\">ngModelOptions</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngmousedown\">ngMousedown</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngmouseenter\">ngMouseenter</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngmouseleave\">ngMouseleave</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngmousemove\">ngMousemove</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngmouseover\">ngMouseover</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngmouseup\">ngMouseup</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngnonbindable\">ngNonBindable</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngopen\">ngOpen</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngpaste\">ngPaste</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngpluralize\">ngPluralize</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngreadonly\">ngReadonly</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngrepeat\">ngRepeat</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngselected\">ngSelected</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngshow\">ngShow</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngsrc\">ngSrc</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngsrcset\">ngSrcset</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngstyle\">ngStyle</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngsubmit\">ngSubmit</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngswitch\">ngSwitch</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngtransclude\">ngTransclude</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/ngvalue\">ngValue</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/script\">script</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/select\">select</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/directive/textarea\">textarea</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  object </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/object/angular.version\">angular.version</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  type </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/type/%24cachefactory.cache\">$cacheFactory.Cache</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/type/%24compile.directive.attributes\">$compile.directive.Attributes</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/type/%24rootscope.scope\">$rootScope.Scope</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/type/angular.module\">angular.Module</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/type/form.formcontroller\">form.FormController</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/type/ngmodel.ngmodelcontroller\">ngModel.NgModelController</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  provider </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24anchorscrollprovider\">$anchorScrollProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24animateprovider\">$animateProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24compileprovider\">$compileProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24controllerprovider\">$controllerProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24filterprovider\">$filterProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24httpprovider\">$httpProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24interpolateprovider\">$interpolateProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24locationprovider\">$locationProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24logprovider\">$logProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24parseprovider\">$parseProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24rootscopeprovider\">$rootScopeProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24scedelegateprovider\">$sceDelegateProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/provider/%24sceprovider\">$sceProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  service </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24anchorscroll\">$anchorScroll</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24animate\">$animate</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24cachefactory\">$cacheFactory</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24compile\">$compile</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24controller\">$controller</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24document\">$document</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24exceptionhandler\">$exceptionHandler</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24filter\">$filter</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24http\">$http</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24httpbackend\">$httpBackend</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24interpolate\">$interpolate</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24interval\">$interval</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24locale\">$locale</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24location\">$location</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24log\">$log</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24parse\">$parse</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24q\">$q</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24rootelement\">$rootElement</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24rootscope\">$rootScope</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24sce\">$sce</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24scedelegate\">$sceDelegate</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24templatecache\">$templateCache</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24templaterequest\">$templateRequest</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24timeout\">$timeout</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/service/%24window\">$window</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  filter </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/filter/currency\">currency</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/filter/date\">date</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/filter/filter\">filter</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/filter/json\">json</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/filter/limitto\">limitTo</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/filter/lowercase\">lowercase</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/filter/number\">number</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/filter/orderby\">orderBy</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ng/filter/uppercase\">uppercase</a> </li> </ul>  <h2 href=\"api/auto\" class=\"nav-index-group-heading ng-binding active\">auto</h2> <ul class=\"aside-nav\"> <li class=\"nav-index-listing ng-scope active nav-index-section\">  service </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/auto/service/%24injector\">$injector</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/auto/service/%24provide\">$provide</a> </li> </ul>  <h2 href=\"api/nganimate\" class=\"nav-index-group-heading ng-binding active\">ngAnimate</h2> <ul class=\"aside-nav\"> <li class=\"nav-index-listing ng-scope active nav-index-section\">  provider </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/nganimate/provider/%24animateprovider\">$animateProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  service </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/nganimate/service/%24animate\">$animate</a> </li> </ul>  <h2 href=\"api/ngaria\" class=\"nav-index-group-heading ng-binding active\">ngAria</h2> <ul class=\"aside-nav\"> <li class=\"nav-index-listing ng-scope active nav-index-section\">  provider </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngaria/provider/%24ariaprovider\">$ariaProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  service </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngaria/service/%24aria\">$aria</a> </li> </ul>  <h2 href=\"api/ngcookies\" class=\"nav-index-group-heading ng-binding active\">ngCookies</h2> <ul class=\"aside-nav\"> <li class=\"nav-index-listing ng-scope active nav-index-section\">  service </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngcookies/service/%24cookiestore\">$cookieStore</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngcookies/service/%24cookies\">$cookies</a> </li> </ul>  <h2 href=\"api/ngmessages\" class=\"nav-index-group-heading ng-binding active\">ngMessages</h2> <ul class=\"aside-nav\"> <li class=\"nav-index-listing ng-scope active nav-index-section\">  directive </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmessages/directive/ngmessage\">ngMessage</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmessages/directive/ngmessages\">ngMessages</a> </li> </ul>  <h2 href=\"api/ngmock\" class=\"nav-index-group-heading ng-binding active\">ngMock</h2> <ul class=\"aside-nav\"> <li class=\"nav-index-listing ng-scope active nav-index-section\">  object </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/object/angular.mock\">angular.mock</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  provider </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/provider/%24exceptionhandlerprovider\">$exceptionHandlerProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  service </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/service/%24controller\">$controller</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/service/%24exceptionhandler\">$exceptionHandler</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/service/%24httpbackend\">$httpBackend</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/service/%24interval\">$interval</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/service/%24log\">$log</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/service/%24timeout\">$timeout</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  type </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/type/%24rootscope.scope\">$rootScope.Scope</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/type/angular.mock.tzdate\">angular.mock.TzDate</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  function </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/function/angular.mock.dump\">angular.mock.dump</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/function/angular.mock.inject\">angular.mock.inject</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmock/function/angular.mock.module\">angular.mock.module</a> </li> </ul>  <h2 href=\"api/ngmocke2e\" class=\"nav-index-group-heading ng-binding active\">ngMockE2E</h2> <ul class=\"aside-nav\"> <li class=\"nav-index-listing ng-scope active nav-index-section\">  service </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngmocke2e/service/%24httpbackend\">$httpBackend</a> </li> </ul>  <h2 href=\"api/ngresource\" class=\"nav-index-group-heading ng-binding active\">ngResource</h2> <ul class=\"aside-nav\"> <li class=\"nav-index-listing ng-scope active nav-index-section\">  service </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngresource/service/%24resource\">$resource</a> </li> </ul>  <h2 href=\"api/ngroute\" class=\"nav-index-group-heading ng-binding active\">ngRoute</h2> <ul class=\"aside-nav\"> <li class=\"nav-index-listing ng-scope active nav-index-section\">  directive </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngroute/directive/ngview\">ngView</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  provider </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngroute/provider/%24routeprovider\">$routeProvider</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  service </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngroute/service/%24route\">$route</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngroute/service/%24routeparams\">$routeParams</a> </li> </ul>  <h2 href=\"api/ngsanitize\" class=\"nav-index-group-heading ng-binding active\">ngSanitize</h2> <ul class=\"aside-nav\"> <li class=\"nav-index-listing ng-scope active nav-index-section\">  filter </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngsanitize/filter/linky\">linky</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  service </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngsanitize/service/%24sanitize\">$sanitize</a> </li> </ul>  <h2 href=\"api/ngtouch\" class=\"nav-index-group-heading ng-binding active\">ngTouch</h2> <ul class=\"aside-nav\"> <li class=\"nav-index-listing ng-scope active nav-index-section\">  directive </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngtouch/directive/ngclick\">ngClick</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngtouch/directive/ngswipeleft\">ngSwipeLeft</a> </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngtouch/directive/ngswiperight\">ngSwipeRight</a> </li>\n<li class=\"nav-index-listing ng-scope active nav-index-section\">  service </li>\n<li class=\"nav-index-listing ng-scope active\">  <a class=\"ng-binding\" tabindex=\"2\" href=\"api/ngtouch/service/%24swipe\">$swipe</a> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/partials/api\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/partials/api</a>\n  </p>\n</div>\n","api/ng/function":"<h1>Function components in ng</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"function/angular.lowercase\">angular.lowercase</a></td> <td>\n<p>Converts the specified string to lowercase.</p> </td> </tr> <tr> <td><a href=\"function/angular.uppercase\">angular.uppercase</a></td> <td>\n<p>Converts the specified string to uppercase.</p> </td> </tr> <tr> <td><a href=\"function/angular.foreach\">angular.forEach</a></td> <td>\n<p>Invokes the <code>iterator</code> function once for each item in <code>obj</code> collection, which can be either an object or an array. The <code>iterator</code> function is invoked with <code>iterator(value, key, obj)</code>, where <code>value</code> is the value of an object property or an array element, <code>key</code> is the object property key or array element index and obj is the <code>obj</code> itself. Specifying a <code>context</code> for the function is optional.</p> </td> </tr> <tr> <td><a href=\"function/angular.extend\">angular.extend</a></td> <td>\n<p>Extends the destination object <code>dst</code> by copying own enumerable properties from the <code>src</code> object(s) to <code>dst</code>. You can specify multiple <code>src</code> objects. If you want to preserve original objects, you can do so by passing an empty object as the target: <code>var object = angular.extend({}, object1, object2)</code>. Note: Keep in mind that <code>angular.extend</code> does not support recursive merge (deep copy).</p> </td> </tr> <tr> <td><a href=\"function/angular.noop\">angular.noop</a></td> <td>\n<p>A function that performs no operations. This function can be useful when writing code in the functional style.</p> <pre data-language=\"javascript\">function foo(callback) {\n  var result = calculateResult();\n  (callback || angular.noop)(result);\n}\n</pre> </td> </tr> <tr> <td><a href=\"function/angular.identity\">angular.identity</a></td> <td>\n<p>A function that returns its first argument. This function is useful when writing code in the functional style.</p> </td> </tr> <tr> <td><a href=\"function/angular.isundefined\">angular.isUndefined</a></td> <td>\n<p>Determines if a reference is undefined.</p> </td> </tr> <tr> <td><a href=\"function/angular.isdefined\">angular.isDefined</a></td> <td>\n<p>Determines if a reference is defined.</p> </td> </tr> <tr> <td><a href=\"function/angular.isobject\">angular.isObject</a></td> <td>\n<p>Determines if a reference is an <code>Object</code>. Unlike <code>typeof</code> in JavaScript, <code>null</code>s are not considered to be objects. Note that JavaScript arrays are objects.</p> </td> </tr> <tr> <td><a href=\"function/angular.isstring\">angular.isString</a></td> <td>\n<p>Determines if a reference is a <code>String</code>.</p> </td> </tr> <tr> <td><a href=\"function/angular.isnumber\">angular.isNumber</a></td> <td>\n<p>Determines if a reference is a <code>Number</code>.</p> </td> </tr> <tr> <td><a href=\"function/angular.isdate\">angular.isDate</a></td> <td>\n<p>Determines if a value is a date.</p> </td> </tr> <tr> <td><a href=\"function/angular.isarray\">angular.isArray</a></td> <td>\n<p>Determines if a reference is an <code>Array</code>.</p> </td> </tr> <tr> <td><a href=\"function/angular.isfunction\">angular.isFunction</a></td> <td>\n<p>Determines if a reference is a <code>Function</code>.</p> </td> </tr> <tr> <td><a href=\"function/angular.iselement\">angular.isElement</a></td> <td>\n<p>Determines if a reference is a DOM element (or wrapped jQuery element).</p> </td> </tr> <tr> <td><a href=\"function/angular.copy\">angular.copy</a></td> <td>\n<p>Creates a deep copy of <code>source</code>, which should be an object or an array.</p> </td> </tr> <tr> <td><a href=\"function/angular.equals\">angular.equals</a></td> <td>\n<p>Determines if two objects or two values are equivalent. Supports value types, regular expressions, arrays and objects.</p> </td> </tr> <tr> <td><a href=\"function/angular.bind\">angular.bind</a></td> <td>\n<p>Returns a function which calls function <code>fn</code> bound to <code>self</code> (<code>self</code> becomes the <code>this</code> for <code>fn</code>). You can supply optional <code>args</code> that are prebound to the function. This feature is also known as <a href=\"http://en.wikipedia.org/wiki/Partial_application\">partial application</a>, as distinguished from <a href=\"http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application\">function currying</a>.</p> </td> </tr> <tr> <td><a href=\"function/angular.tojson\">angular.toJson</a></td> <td>\n<p>Serializes input into a JSON-formatted string. Properties with leading $$ characters will be stripped since angular uses this notation internally.</p> </td> </tr> <tr> <td><a href=\"function/angular.fromjson\">angular.fromJson</a></td> <td>\n<p>Deserializes a JSON string.</p> </td> </tr> <tr> <td><a href=\"function/angular.bootstrap\">angular.bootstrap</a></td> <td>\n<p>Use this function to manually start up angular application.</p> </td> </tr> <tr> <td><a href=\"function/angular.reloadwithdebuginfo\">angular.reloadWithDebugInfo</a></td> <td>\n<p>Use this function to reload the current application with debug information turned on. This takes precedence over a call to <code>$compileProvider.debugInfoEnabled(false)</code>.</p> </td> </tr> <tr> <td><a href=\"function/angular.injector\">angular.injector</a></td> <td>\n<p>Creates an injector object that can be used for retrieving services as well as for dependency injection (see <a href=\"../../guide/di\">dependency injection</a>).</p> </td> </tr> <tr> <td><a href=\"function/angular.element\">angular.element</a></td> <td>\n<p>Wraps a raw DOM element or HTML string as a <a href=\"http://jquery.com\">jQuery</a> element.</p> </td> </tr> <tr> <td><a href=\"function/angular.module\">angular.module</a></td> <td>\n<p>The <code>angular.module</code> is a global place for creating, registering and retrieving Angular modules. All modules (angular core or 3rd party) that should be available to an application must be registered using this mechanism.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function</a>\n  </p>\n</div>\n","api/ng/function/angular.bootstrap":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.bootstrap)%3A%20describe%20your%20change...#L1310\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L1310\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.bootstrap</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Use this function to manually start up angular application.</p> <p>See: <a href=\"../../../guide/bootstrap\">Bootstrap</a></p> <p>Note that Protractor based end-to-end tests cannot use this function to bootstrap manually. They must use <a href=\"../directive/ngapp\">ngApp</a>.</p> <p>Angular will detect if it has been loaded into the browser more than once and only allow the first loaded script to be bootstrapped and will report a warning to the browser console for each of the subsequent scripts. This prevents strange results in applications, where otherwise multiple instances of Angular try to work on the DOM.</p> <pre data-language=\"html\">&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;div ng-controller=\"WelcomeController\"&gt;\n  {{greeting}}\n&lt;/div&gt;\n\n&lt;script src=\"angular.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  var app = angular.module('demo', [])\n  .controller('WelcomeController', function($scope) {\n      $scope.greeting = 'Welcome!';\n  });\n  angular.bootstrap(document, ['demo']);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.bootstrap(element, [modules], [config]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>DOM element which is the root of angular application.</p> </td> </tr> <tr> <td> modules <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-array\">Array&lt;String|Function|Array&gt;=</code> </td> <td> <p>an array of modules to load into the application. Each item in the array should be the name of a predefined module or a (DI annotated) function that will be invoked by the injector as a <code>config</code> block. See: <a href=\"angular.module\">modules</a></p> </td> </tr> <tr> <td> config <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>an object for defining configuration options for the application. The following keys are supported:</p> <ul> <li>\n<code>strictDi</code> - disable automatic function annotation for the application. This is meant to assist in finding bugs which break minified code. Defaults to <code>false</code>.</li> </ul> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-auto\">auto.$injector</code></td> <td>\n<p>Returns the newly created injector for this app.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.bootstrap\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.bootstrap</a>\n  </p>\n</div>\n","api/ng/function/angular.bind":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.bind)%3A%20describe%20your%20change...#L917\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L917\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.bind</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Returns a function which calls function <code>fn</code> bound to <code>self</code> (<code>self</code> becomes the <code>this</code> for <code>fn</code>). You can supply optional <code>args</code> that are prebound to the function. This feature is also known as <a href=\"http://en.wikipedia.org/wiki/Partial_application\">partial application</a>, as distinguished from <a href=\"http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application\">function currying</a>.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.bind(self, fn, args);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> self </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Context which <code>fn</code> should be evaluated in.</p> </td> </tr> <tr> <td> fn </td> <td> <code class=\"label type-hint type-hint-function\">function()</code> </td> <td> <p>Function to be bound.</p> </td> </tr> <tr> <td> args </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Optional arguments to be prebound to the <code>fn</code> function call.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function()</code></td> <td>\n<p>Function that wraps the <code>fn</code> with all the specified bindings.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.bind\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.bind</a>\n  </p>\n</div>\n","api/ng/function/angular.copy":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.copy)%3A%20describe%20your%20change...#L658\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L658\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.copy</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Creates a deep copy of <code>source</code>, which should be an object or an array.</p> <ul> <li>If no destination is supplied, a copy of the object or array is created.</li> <li>If a destination is provided, all of its elements (for arrays) or properties (for objects) are deleted and then all elements/properties from the source are copied to it.</li> <li>If <code>source</code> is not an object or array (inc. <code>null</code> and <code>undefined</code>), <code>source</code> is returned.</li> <li>If <code>source</code> is identical to 'destination' an exception will be thrown.</li> </ul> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.copy(source, [destination]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> source </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The source that will be used to make a copy. Can be any type, including primitives, <code>null</code>, and <code>undefined</code>.</p> </td> </tr> <tr> <td> destination <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-array\">Array</code> </td> <td> <p>Destination into which the source is copied. If provided, must be of the same type as <code>source</code>.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The copy or updated <code>destination</code>, if <code>destination</code> was specified.</p> </td> </tr> </table>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.copy\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.copy</a>\n  </p>\n</div>\n","api/ng/function/angular.element":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/jqLite.js?message=docs(angular.element)%3A%20describe%20your%20change...#L25\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/jqLite.js#L25\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.element</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Wraps a raw DOM element or HTML string as a <a href=\"http://jquery.com\">jQuery</a> element.</p> <p>If jQuery is available, <code>angular.element</code> is an alias for the <a href=\"http://api.jquery.com/jQuery/\">jQuery</a> function. If jQuery is not available, <code>angular.element</code> delegates to Angular's built-in subset of jQuery, called \"jQuery lite\" or \"jqLite.\"</p> <div class=\"alert alert-success\">jqLite is a tiny, API-compatible subset of jQuery that allows Angular to manipulate the DOM in a cross-browser compatible way. <strong>jqLite</strong> implements only the most commonly needed functionality with the goal of having a very small footprint.</div> <p>To use <code>jQuery</code>, simply ensure it is loaded before the <code>angular.js</code> file.</p> <div class=\"alert\">\n<strong>Note:</strong> all element references in Angular are always wrapped with jQuery or jqLite; they are never raw DOM references.</div> <h2 id=\"angular-s-jqlite\">Angular's jqLite</h2> <p>jqLite provides only the following jQuery methods:</p> <ul> <li><a href=\"http://api.jquery.com/addClass/\"><code>addClass()</code></a></li> <li><a href=\"http://api.jquery.com/after/\"><code>after()</code></a></li> <li><a href=\"http://api.jquery.com/append/\"><code>append()</code></a></li> <li>\n<a href=\"http://api.jquery.com/attr/\"><code>attr()</code></a> - Does not support functions as parameters</li> <li>\n<a href=\"http://api.jquery.com/bind/\"><code>bind()</code></a> - Does not support namespaces, selectors or eventData</li> <li>\n<a href=\"http://api.jquery.com/children/\"><code>children()</code></a> - Does not support selectors</li> <li><a href=\"http://api.jquery.com/clone/\"><code>clone()</code></a></li> <li><a href=\"http://api.jquery.com/contents/\"><code>contents()</code></a></li> <li>\n<a href=\"http://api.jquery.com/css/\"><code>css()</code></a> - Only retrieves inline-styles, does not call <code>getComputedStyle()</code>. As a setter, does not convert numbers to strings or append 'px'.</li> <li><a href=\"http://api.jquery.com/data/\"><code>data()</code></a></li> <li><a href=\"http://api.jquery.com/detach/\"><code>detach()</code></a></li> <li><a href=\"http://api.jquery.com/empty/\"><code>empty()</code></a></li> <li><a href=\"http://api.jquery.com/eq/\"><code>eq()</code></a></li> <li>\n<a href=\"http://api.jquery.com/find/\"><code>find()</code></a> - Limited to lookups by tag name</li> <li><a href=\"http://api.jquery.com/hasClass/\"><code>hasClass()</code></a></li> <li><a href=\"http://api.jquery.com/html/\"><code>html()</code></a></li> <li>\n<a href=\"http://api.jquery.com/next/\"><code>next()</code></a> - Does not support selectors</li> <li>\n<a href=\"http://api.jquery.com/on/\"><code>on()</code></a> - Does not support namespaces, selectors or eventData</li> <li>\n<a href=\"http://api.jquery.com/off/\"><code>off()</code></a> - Does not support namespaces or selectors</li> <li>\n<a href=\"http://api.jquery.com/one/\"><code>one()</code></a> - Does not support namespaces or selectors</li> <li>\n<a href=\"http://api.jquery.com/parent/\"><code>parent()</code></a> - Does not support selectors</li> <li><a href=\"http://api.jquery.com/prepend/\"><code>prepend()</code></a></li> <li><a href=\"http://api.jquery.com/prop/\"><code>prop()</code></a></li> <li><a href=\"http://api.jquery.com/ready/\"><code>ready()</code></a></li> <li><a href=\"http://api.jquery.com/remove/\"><code>remove()</code></a></li> <li><a href=\"http://api.jquery.com/removeAttr/\"><code>removeAttr()</code></a></li> <li><a href=\"http://api.jquery.com/removeClass/\"><code>removeClass()</code></a></li> <li><a href=\"http://api.jquery.com/removeData/\"><code>removeData()</code></a></li> <li><a href=\"http://api.jquery.com/replaceWith/\"><code>replaceWith()</code></a></li> <li><a href=\"http://api.jquery.com/text/\"><code>text()</code></a></li> <li><a href=\"http://api.jquery.com/toggleClass/\"><code>toggleClass()</code></a></li> <li>\n<a href=\"http://api.jquery.com/triggerHandler/\"><code>triggerHandler()</code></a> - Passes a dummy event object to handlers.</li> <li>\n<a href=\"http://api.jquery.com/unbind/\"><code>unbind()</code></a> - Does not support namespaces</li> <li><a href=\"http://api.jquery.com/val/\"><code>val()</code></a></li> <li><a href=\"http://api.jquery.com/wrap/\"><code>wrap()</code></a></li> </ul> <h2 id=\"jquery-jqlite-extras\">jQuery/jqLite Extras</h2> <p>Angular also provides the following additional methods and events to both jQuery and jqLite:</p> <h3 id=\"events\">Events</h3> <ul> <li>\n<code>$destroy</code> - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event on all DOM nodes being removed. This can be used to clean up any 3rd party bindings to the DOM element before it is removed.</li> </ul> <h3 id=\"methods\">Methods</h3> <ul> <li>\n<code>controller(name)</code> - retrieves the controller of the current element or its parent. By default retrieves controller associated with the <code>ngController</code> directive. If <code>name</code> is provided as camelCase directive name, then the controller for this directive will be retrieved (e.g. <code>'ngModel'</code>).</li> <li>\n<code>injector()</code> - retrieves the injector of the current element or its parent.</li> <li>\n<code>scope()</code> - retrieves the <a href=\"../type/%24rootscope.scope\">scope</a> of the current element or its parent. Requires <a href=\"../../../guide/production#disabling-debug-data.html\">Debug Data</a> to be enabled.</li> <li>\n<code>isolateScope()</code> - retrieves an isolate <a href=\"../type/%24rootscope.scope\">scope</a> if one is attached directly to the current element. This getter should be used only on elements that contain a directive which starts a new isolate scope. Calling <code>scope()</code> on this element always returns the original non-isolate scope. Requires <a href=\"../../../guide/production#disabling-debug-data.html\">Debug Data</a> to be enabled.</li> <li>\n<code>inheritedData()</code> - same as <code>data()</code>, but walks up the DOM until a value is found or the top parent element is reached.</li> </ul> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.element(element);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>HTML string or DOMElement to be wrapped into jQuery.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>jQuery object.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.element\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.element</a>\n  </p>\n</div>\n","api/ng/function/angular.equals":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.equals)%3A%20describe%20your%20change...#L815\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L815\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.equals</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Determines if two objects or two values are equivalent. Supports value types, regular expressions, arrays and objects.</p> <p>Two objects or values are considered equivalent if at least one of the following is true:</p> <ul> <li>Both objects or values pass <code>===</code> comparison.</li> <li>Both objects or values are of the same type and all of their properties are equal by comparing them with <code>angular.equals</code>.</li> <li>Both values are NaN. (In JavaScript, NaN == NaN =&gt; false. But we consider two NaN as equal)</li> <li>Both values represent the same regular expression (In JavaScript, /abc/ == /abc/ =&gt; false. But we consider two regular expressions as equal when their textual representation matches).</li> </ul> <p>During a property comparison, properties of <code>function</code> type and properties with names that begin with <code>$</code> are ignored.</p> <p>Scope and DOMWindow objects are being compared only by identify (<code>===</code>).</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.equals(o1, o2);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> o1 </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Object or value to compare.</p> </td> </tr> <tr> <td> o2 </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Object or value to compare.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if arguments are equal.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.equals\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.equals</a>\n  </p>\n</div>\n","api/ng/function/angular.identity":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.identity)%3A%20describe%20your%20change...#L391\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L391\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.identity</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>A function that returns its first argument. This function is useful when writing code in the functional style.</p> <pre data-language=\"javascript\">function transformer(transformationFn, value) {\n  return (transformationFn || angular.identity)(value);\n};\n</pre> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.identity(value);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>to be returned.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>the value passed in.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.identity\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.identity</a>\n  </p>\n</div>\n","api/ng/function/angular.isarray":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.isArray)%3A%20describe%20your%20change...#L517\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L517\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.isArray</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Determines if a reference is an <code>Array</code>.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.isArray(value);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Reference to check.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if <code>value</code> is an <code>Array</code>.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isArray\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isArray</a>\n  </p>\n</div>\n","api/ng/function/angular.iselement":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.isElement)%3A%20describe%20your%20change...#L613\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L613\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.isElement</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Determines if a reference is a DOM element (or wrapped jQuery element).</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.isElement(value);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Reference to check.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if <code>value</code> is a DOM element (or wrapped jQuery element).</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isElement\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isElement</a>\n  </p>\n</div>\n","api/ng/function/angular.isnumber":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.isNumber)%3A%20describe%20your%20change...#L479\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L479\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.isNumber</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Determines if a reference is a <code>Number</code>.</p> <p>This includes the \"special\" numbers <code>NaN</code>, <code>+Infinity</code> and <code>-Infinity</code>.</p> <p>If you wish to exclude these then you can use the native <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">`isFinite'</a> method.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.isNumber(value);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Reference to check.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if <code>value</code> is a <code>Number</code>.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isNumber\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isNumber</a>\n  </p>\n</div>\n","api/ng/function/angular.isobject":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.isObject)%3A%20describe%20your%20change...#L445\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L445\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.isObject</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Determines if a reference is an <code>Object</code>. Unlike <code>typeof</code> in JavaScript, <code>null</code>s are not considered to be objects. Note that JavaScript arrays are objects.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.isObject(value);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Reference to check.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if <code>value</code> is an <code>Object</code> but not <code>null</code>.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isObject\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isObject</a>\n  </p>\n</div>\n","guide":"<h1 id=\"guide-to-angularjs-documentation\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/index.ngdoc?message=docs(guide%2FDeveloper%20Guide)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Guide to AngularJS Documentation</h1> <p>Everything you need to know about AngularJS</p> <ul> <li><a href=\"guide/introduction\">What is AngularJS?</a></li> <li><a href=\"guide/concepts\">Conceptual Overview</a></li> </ul> <h2 id=\"tutorials\">Tutorials</h2> <ul> <li><a href=\"https://code.angularjs.org/1.3.20/docs/tutorial/index\">Official AngularJS Tutorial</a></li> <li><a href=\"http://www.sitepoint.com/10-reasons-use-angularjs/\">10 Reasons Why You Should Use AngularJS</a></li> <li><a href=\"http://wintellect.com/blogs/jlikness/10-reasons-web-developers-should-learn-angularjs\">10 Reasons Why Developers Should Learn AngularJS</a></li> <li><a href=\"https://www.youtube.com/watch?v=HCR7i5F5L8c\">Design Principles of AngularJS (video)</a></li> <li><a href=\"http://www.youtube.com/watch?v=i9MHigUZKEM\">Fundamentals in 60 Minutes (video)</a></li> <li><a href=\"http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background\">For folks with a jQuery background</a></li> </ul> <h2 id=\"core-concepts\">Core Concepts</h2> <h3 id=\"templates\">Templates</h3> <p>In Angular applications, you move the job of filling page templates with data from the server to the client. The result is a system better structured for dynamic page updates. Below are the core features you'll use.</p> <ul> <li><a href=\"guide/databinding\">Data binding</a></li> <li><a href=\"guide/expression\">Expressions</a></li> <li><a href=\"guide/directive\">Directives</a></li> <li><a href=\"api/ngroute/service/%24route\">Views and routes (see the example)</a></li> <li><a href=\"guide/filter\">Filters</a></li> <li>\n<a href=\"guide/forms\">Forms</a> and <a href=\"http://mrbool.com/the-concepts-of-angularjs-forms/29117\">Concepts of AngularJS Forms</a>\n</li> </ul> <h3 id=\"application-structure\">Application Structure</h3> <ul> <li>\n<strong>Blog post: </strong><a href=\"http://kirkbushell.me/when-to-use-directives-controllers-or-services-in-angular/\">When to use directives, controllers or services</a>\n</li> <li>\n<strong>App wiring:</strong> <a href=\"guide/di\">Dependency injection</a>\n</li> <li>\n<strong>Exposing model to templates:</strong> <a href=\"guide/scope\">Scopes</a>\n</li> <li>\n<strong>Communicating with servers:</strong> <a href=\"api/ng/service/%24http\">$http</a>, <a href=\"api/ngresource/service/%24resource\">$resource</a>\n</li> </ul> <h3 id=\"other-angularjs-features\">Other AngularJS Features</h3> <ul> <li>\n<strong>Animation:</strong> <a href=\"guide/animations\">Core concepts</a>, <a href=\"api/nganimate\">ngAnimate API</a>, and <a href=\"http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html\">Animation in AngularJS 1.2</a>\n</li> <li>\n<strong>Security:</strong> <a href=\"guide/security\">Security Docs</a>, <a href=\"api/ng/service/%24sce\">Strict Contextual Escaping</a>, <a href=\"api/ng/directive/ngcsp\">Content Security Policy</a>, <a href=\"api/ngsanitize/service/%24sanitize\">$sanitize</a>, <a href=\"https://www.youtube.com/watch?v=18ifoT-Id54\">video</a>\n</li> <li>\n<strong>Internationalization and Localization:</strong> <a href=\"guide/i18n\">Angular Guide to i18n and l10n</a>, <a href=\"api/ng/filter/date\">date filter</a>, <a href=\"api/ng/filter/currency\">currency filter</a>, <a href=\"http://www.novanet.no/blog/hallstein-brotan/dates/2013/10/creating-multilingual-support-using-angularjs/\">Creating multilingual support</a>\n</li> <li>\n<strong>Mobile:</strong> <a href=\"api/ngtouch\">Touch events</a>\n</li> <li>\n<strong>Accessibility:</strong> <a href=\"guide/accessibility\">ngAria</a>\n</li> </ul> <h3 id=\"testing\">Testing</h3> <ul> <li>\n<strong>Unit testing:</strong> <a href=\"http://www.youtube.com/watch?v=YG5DEzaQBIc\">Using Karma (video)</a>, <a href=\"guide/unit-testing\">Unit testing</a>, <a href=\"guide/services#unit-testing.html\">Testing services</a>, <a href=\"http://blog.jetbrains.com/webstorm/2013/10/running-javascript-tests-with-karma-in-webstorm-7/\">Karma in Webstorm</a>\n</li> <li>\n<strong>Scenario testing:</strong> <a href=\"https://github.com/angular/protractor\">Protractor</a>\n</li> </ul> <h2 id=\"specific-topics\">Specific Topics</h2> <ul> <li>\n<strong>Login: </strong><a href=\"https://developers.google.com/+/photohunt/python\">Google example</a>, <a href=\"https://github.com/pc035860/angular-easyfb\">AngularJS Facebook library</a>, <a href=\"http://blog.brunoscopelliti.com/facebook-authentication-in-your-angularjs-web-app\">Facebook example</a>, <a href=\"http://blog.brunoscopelliti.com/deal-with-users-authentication-in-an-angularjs-web-app\">authentication strategy</a>, <a href=\"http://frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/\">unix-style authorization</a>\n</li> <li>\n<strong>Mobile:</strong> <a href=\"http://www.ng-newsletter.com/posts/angular-on-mobile.html\">Angular on Mobile Guide</a>, <a href=\"http://devgirl.org/2013/06/10/quick-start-guide-phonegap-and-angularjs/\">PhoneGap</a>\n</li> <li>\n<strong>Other Languages:</strong> <a href=\"http://www.coffeescriptlove.com/2013/08/angularjs-and-coffeescript-tutorials.html\">CoffeeScript</a>, <a href=\"https://github.com/angular/angular.dart.tutorial/wiki\">Dart</a>\n</li> <li>\n<strong>Realtime: </strong><a href=\"http://www.creativebloq.com/javascript/angularjs-collaboration-board-socketio-2132885\">Socket.io</a>, <a href=\"https://github.com/jeffbcross/omnibinder\">OmniBinder</a>\n</li> <li>\n<strong>Visualization:</strong> <a href=\"http://gaslight.co/blog/angular-backed-svgs\">SVG</a>, <a href=\"http://www.ng-newsletter.com/posts/d3-on-angular.html\">D3.js</a>\n</li> <li>\n<strong>Local Storage and session:</strong> <a href=\"https://github.com/gsklee/ngStorage\">ngStorage</a>\n</li> </ul> <h2 id=\"tools\">Tools</h2> <ul> <li>\n<strong>Getting Started:</strong> <a href=\"http://www.dancancro.com/comparison-of-angularjs-application-starters/\">Comparison of the options for starting a new project</a>\n</li> <li>\n<strong>Debugging:</strong> <a href=\"https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en\">Batarang</a>\n</li> <li>\n<strong>Testing:</strong> <a href=\"http://karma-runner.github.io\">Karma</a>, <a href=\"https://github.com/angular/protractor\">Protractor</a>\n</li> <li>\n<strong>Editor support:</strong> <a href=\"http://plugins.jetbrains.com/plugin/6971\">Webstorm</a> (and <a href=\"http://www.youtube.com/watch?v=LJOyrSh1kDU\">video</a>), <a href=\"https://github.com/angular-ui/AngularJS-sublime-package\">Sublime Text</a>, <a href=\"http://madskristensen.net/post/angularjs-intellisense-in-visual-studio-2012\">Visual Studio</a>\n</li> <li>\n<strong>Workflow:</strong> <a href=\"https://github.com/yeoman/generator-angular\">Yeoman.io</a> and <a href=\"http://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/\">Angular Yeoman Tutorial</a>\n</li> </ul> <h2 id=\"complementary-libraries\">Complementary Libraries</h2> <p>This is a short list of libraries with specific support and documentation for working with Angular. You can find a full list of all known Angular external libraries at <a href=\"http://ngmodules.org/\">ngmodules.org</a>.</p> <ul> <li>\n<strong>Internationalization:</strong> <a href=\"http://angular-translate.github.io\">angular-translate</a>, <a href=\"http://angular-gettext.rocketeer.be/\">angular-gettext</a>, <a href=\"http://doshprompt.github.io/angular-localization/\">angular-localization</a>\n</li> <li>\n<strong>RESTful services:</strong> <a href=\"https://github.com/mgonto/restangular\">Restangular</a>\n</li> <li>\n<strong>SQL and NoSQL backends:</strong> <a href=\"http://www.breezejs.com/\">BreezeJS</a>, <a href=\"http://angularfire.com/\">AngularFire</a>\n</li> <li>\n<strong>UI Widgets: </strong><a href=\"http://kendo-labs.github.io/angular-kendo/#/\">KendoUI</a>, <a href=\"http://angular-ui.github.io/bootstrap/\">UI Bootstrap</a>, <a href=\"http://wijmo.com/tag/angularjs-2/\">Wijmo</a>, <a href=\"https://github.com/mbenford/ngTagsInput\">ngTagsInput</a>\n</li> <li>\n<strong>Advanced Routing:</strong> <a href=\"https://github.com/angular-ui/ui-router\">UI-Router</a>\n</li> <li>\n<strong>Maps:</strong> <a href=\"https://github.com/angular-ui/ui-map\">UI-Map (Google Maps)</a>\n</li> </ul> <h2 id=\"deployment\">Deployment</h2> <h3 id=\"general\">General</h3> <ul> <li>\n<strong>Docs Page:</strong> <a href=\"guide/production\">Running an AngularJS App in Production</a>\n</li> <li>\n<strong>Javascript minification: </strong><a href=\"http://thegreenpizza.github.io/2013/05/25/building-minification-safe-angular.js-applications/\">Background</a>, <a href=\"https://github.com/olov/ng-annotate\">ng-annotate automation tool</a>\n</li> <li>\n<strong>Analytics and Logging:</strong> <a href=\"http://ngmodules.org/modules/angularytics\">Angularyitcs (Google Analytics)</a>, <a href=\"https://github.com/luisfarzati/angulartics\">Angulartics (Analytics)</a>, <a href=\"http://www.bennadel.com/blog/2542-Logging-Client-Side-Errors-With-AngularJS-And-Stacktrace-js.htm\">Logging Client-Side Errors</a>\n</li> <li>\n<strong>SEO:</strong> <a href=\"http://www.yearofmoo.com/2012/11/angularjs-and-seo.html\">By hand</a>, <a href=\"http://prerender.io/\">prerender.io</a>, <a href=\"http://www.brombone.com/\">Brombone</a>, <a href=\"http://getseojs.com/\">SEO.js</a>, <a href=\"http://www.seo4ajax.com/\">SEO4Ajax</a>\n</li> </ul> <h3 id=\"server-specific\">Server-Specific</h3> <ul> <li>\n<strong>Django:</strong> <a href=\"http://blog.mourafiq.com/post/55034504632/end-to-end-web-app-with-django-rest-framework\">Tutorial</a>, <a href=\"http://django-angular.readthedocs.org/en/latest/integration.html\">Integrating AngularJS with Django</a>, <a href=\"http://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html\">Getting Started with Django Rest Framework and AngularJS</a>\n</li> <li>\n<strong>FireBase:</strong> <a href=\"http://angularfire.com/\">AngularFire</a>, <a href=\"http://www.youtube.com/watch?v=C7ZI7z7qnHU\">Realtime Apps with AngularJS and FireBase (video)</a>\n</li> <li>\n<strong>Google Cloud Platform: </strong><a href=\"https://cloud.google.com/developers/articles/angularjs-cloud-endpoints-recipe-for-building-modern-web-applications/\">with Cloud Endpoints</a>, <a href=\"https://github.com/GoogleCloudPlatform/appengine-angular-gotodos\">with Go</a>\n</li> <li>\n<strong>Hood.ie:</strong> <a href=\"http://www.roberthorvick.com/2013/06/30/todomvc-angularjs-hood-ie-60-minutes-to-awesome/\">60 Minutes to Awesome</a>\n</li> <li>\n<strong>MEAN Stack: </strong><a href=\"http://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and\">Blog post</a>, <a href=\"http://thecodebarbarian.wordpress.com/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/\">Setup</a>, <a href=\"https://developers.google.com/live/shows/913996610\">GDL Video</a>\n</li> <li>\n<strong>Rails: </strong><a href=\"http://coderberry.me/blog/2013/04/22/angularjs-on-rails-4-part-1/\">Tutorial</a>, <a href=\"https://shellycloud.com/blog/2013/10/how-to-integrate-angularjs-with-rails-4\">AngularJS with Rails4</a>, <a href=\"https://github.com/hiravgandhi/angularjs-rails\">angularjs-rails</a>\n</li> <li>\n<strong>PHP: </strong><a href=\"http://blog.brunoscopelliti.com/building-a-restful-web-service-with-angularjs-and-php-more-power-with-resource\">Building a RESTful web service</a>, <a href=\"http://www.youtube.com/watch?v=hqAyiqUs93c\">End to End with Laravel 4 (video)</a>\n</li> <li>\n<strong>Meteor: </strong><a href=\"https://github.com/Urigo/angular-meteor\">angular-meteor package</a>\n</li> </ul> <h2 id=\"learning-resources\">Learning Resources</h2> <h3 id=\"books\">Books</h3> <ul> <li>\n<a href=\"http://www.amazon.com/AngularJS-Running-Enhanced-Productivity-Structured/dp/1491901942\">AngularJS: Up and Running</a> by Brad Green and Shyam Seshadri</li> <li>\n<a href=\"http://www.amazon.com/Mastering-Web-Application-Development-AngularJS/dp/1782161821\">Mastering Web App Development</a> by Pawel Kozlowski and Pete Bacon Darwin</li> <li>\n<a href=\"http://www.amazon.com/AngularJS-Directives-Alex-Vanston/dp/1783280336\">AngularJS Directives</a> by Alex Vanston</li> <li>\n<a href=\"http://www.amazon.co.uk/Recipes-Angular-js-Frederik-Dietz-ebook/dp/B00DK95V48\">Recipes With AngularJS</a> by Frederik Dietz</li> <li>\n<a href=\"http://www.amazon.com/Developing-AngularJS-Edge-Christopher-Hiller-ebook/dp/B00CJLFF8K\">Developing an AngularJS Edge</a> by Christopher Hiller</li> <li>\n<a href=\"http://ng-book.com/\">ng-book: The Complete Book on AngularJS</a> by Ari Lerner</li> <li>\n<a href=\"http://www.amazon.in/AngularJS-Novice-Ninja-Sandeep-Panda/dp/0992279453\">AngularJS : Novice to Ninja</a> by Sandeep Panda</li> <li>\n<a href=\"http://www.amazon.com/AngularJS-UI-Development-Amit-Ghart-ebook/dp/B00OXVAK7A\">AngularJS UI Development</a> by Amit Gharat and Matthias Nehlsen</li> <li>\n<a href=\"http://www.amazon.com/Responsive-Design-AngularJS-Sandeep-Kumar/dp/178439842X\">Responsive Web Design with AngularJS</a> by Sandeep Kumar Patel</li> </ul> <h3 id=\"videos-\">Videos:</h3> <ul> <li><a href=\"http://egghead.io/\">egghead.io</a></li> <li><a href=\"http://youtube.com/angularjs\">Angular on YouTube</a></li> </ul> <h3 id=\"courses\">Courses</h3> <ul> <li>\n<strong>Free online:</strong> <a href=\"http://thinkster.io\">thinkster.io</a>, <a href=\"http://www.codecademy.com/courses/javascript-advanced-en-2hJ3J/0/1\">CodeAcademy</a>, <a href=\"https://www.codeschool.com/courses/shaping-up-with-angular-js\">CodeSchool</a>\n</li> <li>\n<strong>Paid online:</strong> <a href=\"http://www.pluralsight.com/training/Courses/Find?highlight=true&amp;searchTerm=angularjs\">Pluralsite (3 courses)</a>, <a href=\"https://tutsplus.com/course/easier-js-apps-with-angular/\">Tuts+</a>, <a href=\"http://www.lynda.com/AngularJS-tutorials/Up-Running-AngularJS/133318-2.html\">lynda.com</a>, <a href=\"http://www.wintellectnow.com/Course/Detail/mastering-angularjs\">WintellectNOW (4 lessons)</a>\n</li> <li>\n<strong>Paid onsite:</strong> <a href=\"http://angularbootcamp.com/\">angularbootcamp.com</a>\n</li> </ul> <h2 id=\"getting-help\">Getting Help</h2> <p>The recipe for getting help on your unique issue is to create an example that could work (even if it doesn't) in a shareable example on <a href=\"http://plnkr.co/\">Plunker</a>, <a href=\"http://jsfiddle.net/\">JSFiddle</a>, or similar site and then post to one of the following:</p> <ul> <li><a href=\"http://stackoverflow.com/search?q=angularjs\">Stackoverflow.com</a></li> <li><a href=\"https://groups.google.com/forum/#!forum/angular\">AngularJS mailing list</a></li> <li><a href=\"http://webchat.freenode.net/?channels=angularjs&amp;uio=d4\">AngularJS IRC channel</a></li> </ul> <h2 id=\"social-channels\">Social Channels</h2> <ul> <li>\n<strong>Daily updates:</strong> <a href=\"https://plus.google.com/u/0/+AngularJS\">Google+</a> or <a href=\"https://twitter.com/angularjs\">Twitter</a>\n</li> <li>\n<strong>Weekly newsletter:</strong> <a href=\"http://www.ng-newsletter.com/\">ng-newsletter</a>\n</li> <li>\n<strong>Meetups: </strong><a href=\"http://www.meetup.com/find/?keywords=angularJS&amp;radius=Infinity&amp;userFreeform=San+Francisco%2C+CA&amp;mcId=z94108&amp;mcName=San+Francisco%2C+CA&amp;sort=member_count&amp;eventFilter=mysugg\">meetup.com</a>\n</li> <li>\n<strong>Official news and releases: </strong><a href=\"http://blog.angularjs.org/\">AngularJS Blog</a>\n</li> </ul> <h2 id=\"contributing-to-angularjs\">Contributing to AngularJS</h2> <p>Though we have a core group of core contributors at Google, Angular is an open source project with hundreds of contributors. We'd love you to be one of them. When you're ready, please read the <a href=\"https://code.angularjs.org/1.3.20/docs/misc/contribute\">Guide for contributing to AngularJS</a>.</p> <h2 id=\"final-bits\">Final Bits</h2> <p>Didn't find what you're looking for here? Check out <a href=\"https://github.com/jmcunningham/AngularJS-Learning\">AngularJS-Learning</a> for an even more comprehensive list of links to videos, tutorials, and blog posts.</p> <p>If you have awesome AngularJS resources that belong on this page, please tell us about them on <a href=\"https://plus.google.com/u/0/+AngularJS\">Google+</a> or <a href=\"https://twitter.com/angularjs\">Twitter</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/partials/guide\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/partials/guide</a>\n  </p>\n</div>\n","api/ng/function/angular.extend":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.extend)%3A%20describe%20your%20change...#L328\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L328\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.extend</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Extends the destination object <code>dst</code> by copying own enumerable properties from the <code>src</code> object(s) to <code>dst</code>. You can specify multiple <code>src</code> objects. If you want to preserve original objects, you can do so by passing an empty object as the target: <code>var object = angular.extend({}, object1, object2)</code>. Note: Keep in mind that <code>angular.extend</code> does not support recursive merge (deep copy).</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.extend(dst, src);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> dst </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Destination object.</p> </td> </tr> <tr> <td> src </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Source object(s).</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>Reference to <code>dst</code>.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.extend\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.extend</a>\n  </p>\n</div>\n","api/ng/function/angular.foreach":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.forEach)%3A%20describe%20your%20change...#L212\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L212\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.forEach</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Invokes the <code>iterator</code> function once for each item in <code>obj</code> collection, which can be either an object or an array. The <code>iterator</code> function is invoked with <code>iterator(value, key, obj)</code>, where <code>value</code> is the value of an object property or an array element, <code>key</code> is the object property key or array element index and obj is the <code>obj</code> itself. Specifying a <code>context</code> for the function is optional.</p> <p>It is worth noting that <code>.forEach</code> does not iterate over inherited properties because it filters using the <code>hasOwnProperty</code> method.</p> <p>Unlike ES262's <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18\">Array.prototype.forEach</a>, Providing 'undefined' or 'null' values for <code>obj</code> will not throw a TypeError, but rather just return the value provided.</p> <pre data-language=\"javascript\">var values = {name: 'misko', gender: 'male'};\nvar log = [];\nangular.forEach(values, function(value, key) {\n  this.push(key + ': ' + value);\n}, log);\nexpect(log).toEqual(['name: misko', 'gender: male']);\n</pre> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.forEach(obj, iterator, [context]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> obj </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-array\">Array</code> </td> <td> <p>Object to iterate over.</p> </td> </tr> <tr> <td> iterator </td> <td> <code class=\"label type-hint type-hint-function\">Function</code> </td> <td> <p>Iterator function.</p> </td> </tr> <tr> <td> context <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Object to become context (<code>this</code>) for the iterator function.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td>\n<code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-array\">Array</code>\n</td> <td>\n<p>Reference to <code>obj</code>.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.forEach\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.forEach</a>\n  </p>\n</div>\n","api/ng/function/angular.fromjson":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.fromJson)%3A%20describe%20your%20change...#L997\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L997\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.fromJson</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Deserializes a JSON string.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.fromJson(json);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> json </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>JSON string to deserialize.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td>\n<code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-array\">Array</code><code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-number\">number</code>\n</td> <td>\n<p>Deserialized JSON string.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.fromJson\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.fromJson</a>\n  </p>\n</div>\n","api/ng/function/angular.injector":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/auto/injector.js?message=docs(angular.injector)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/auto/injector.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.injector</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Creates an injector object that can be used for retrieving services as well as for dependency injection (see <a href=\"../../../guide/di\">dependency injection</a>).</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.injector(modules, [strictDi]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> modules </td> <td> <code class=\"label type-hint type-hint-array\">Array.&lt;string|Function&gt;</code> </td> <td> <p>A list of module functions or their aliases. See <a href=\"angular.module\"><code>angular.module</code></a>. The <code>ng</code> module must be explicitly added.</p> </td> </tr> <tr> <td> strictDi <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>Whether the injector should be in strict mode, which disallows argument name annotation inference.</p> <p><em>(default: false)</em></p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-injector\">injector</code></td> <td>\n<p>Injector object. See <a href=\"../../auto/service/%24injector\">$injector</a>.</p> </td> </tr> </table> <p>Typical usage</p> <pre data-language=\"javascript\">// create an injector\nvar $injector = angular.injector(['ng']);\n\n// use the injector to kick off your application\n// use the type inference to auto inject arguments, or use implicit injection\n$injector.invoke(function($rootScope, $compile, $document) {\n  $compile($document)($rootScope);\n  $rootScope.$digest();\n});\n</pre> <p>Sometimes you want to get access to the injector of a currently running Angular app from outside Angular. Perhaps, you want to inject and compile some markup after the application has been bootstrapped. You can do this using the extra <code>injector()</code> added to JQuery/jqLite elements. See <a href=\"angular.element\"><code>angular.element</code></a>.</p> <p><em>This is fairly rare but could be the case if a third party library is injecting the markup.</em></p> <p>In the following example a new block of HTML containing a <code>ng-controller</code> directive is added to the end of the document body by JQuery. We then compile and link it into the current AngularJS scope.</p> <pre data-language=\"javascript\">var $div = $('&lt;div ng-controller=\"MyCtrl\"&gt;{{content.label}}&lt;/div&gt;');\n$(document.body).append($div);\n\nangular.element(document).injector().invoke(function($compile) {\n  var scope = angular.element($div).scope();\n  $compile($div)(scope);\n});\n</pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.injector\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.injector</a>\n  </p>\n</div>\n","api/ng/function/angular.isdate":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.isDate)%3A%20describe%20your%20change...#L500\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L500\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.isDate</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Determines if a value is a date.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.isDate(value);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Reference to check.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if <code>value</code> is a <code>Date</code>.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isDate\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isDate</a>\n  </p>\n</div>\n","api/ng/function/angular.isdefined":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.isDefined)%3A%20describe%20your%20change...#L430\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L430\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.isDefined</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Determines if a reference is defined.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.isDefined(value);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Reference to check.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if <code>value</code> is defined.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isDefined\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isDefined</a>\n  </p>\n</div>\n","api/ng/function/angular.isfunction":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.isFunction)%3A%20describe%20your%20change...#L531\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L531\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.isFunction</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Determines if a reference is a <code>Function</code>.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.isFunction(value);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Reference to check.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if <code>value</code> is a <code>Function</code>.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isFunction\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isFunction</a>\n  </p>\n</div>\n","api/ng/function/angular.isstring":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.isString)%3A%20describe%20your%20change...#L464\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L464\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.isString</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Determines if a reference is a <code>String</code>.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.isString(value);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Reference to check.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if <code>value</code> is a <code>String</code>.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isString\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isString</a>\n  </p>\n</div>\n","api/ng/function/angular.isundefined":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.isUndefined)%3A%20describe%20your%20change...#L415\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L415\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.isUndefined</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Determines if a reference is undefined.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.isUndefined(value);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Reference to check.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if <code>value</code> is undefined.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isUndefined\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.isUndefined</a>\n  </p>\n</div>\n","api/ng/function/angular.lowercase":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.lowercase)%3A%20describe%20your%20change...#L118\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L118\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.lowercase</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Converts the specified string to lowercase.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.lowercase(string);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> string </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>String to be converted to lowercase.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>Lowercased string.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.lowercase\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.lowercase</a>\n  </p>\n</div>\n","api/ng/function/angular.module":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/loader.js?message=docs(angular.module)%3A%20describe%20your%20change...#L30\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/loader.js#L30\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.module</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>angular.module</code> is a global place for creating, registering and retrieving Angular modules. All modules (angular core or 3rd party) that should be available to an application must be registered using this mechanism.</p> <p>When passed two or more arguments, a new module is created. If passed only one argument, an existing module (the name passed as the first argument to <code>module</code>) is retrieved.</p> <h2 id=\"module\">Module</h2> <p>A module is a collection of services, directives, controllers, filters, and configuration information. <code>angular.module</code> is used to configure the <a href=\"../../auto/service/%24injector\">$injector</a>.</p> <pre data-language=\"javascript\">// Create a new module\nvar myModule = angular.module('myModule', []);\n\n// register a new service\nmyModule.value('appName', 'MyCoolApp');\n\n// configure existing services inside initialization blocks.\nmyModule.config(['$locationProvider', function($locationProvider) {\n  // Configure existing providers\n  $locationProvider.hashPrefix('!');\n}]);\n</pre> <p>Then you can create an injector and load your modules like this:</p> <pre data-language=\"javascript\">var injector = angular.injector(['ng', 'myModule'])\n</pre> <p>However it's more likely that you'll just use <a href=\"../directive/ngapp\">ngApp</a> or <a href=\"angular.bootstrap\"><code>angular.bootstrap</code></a> to simplify this process for you.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.module(name, [requires], [configFn]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The name of the module to create or retrieve.</p> </td> </tr> <tr> <td> requires <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">!Array.&lt;string&gt;=</code> </td> <td> <p>If specified then new module is being created. If unspecified then the module is being retrieved for further configuration.</p> </td> </tr> <tr> <td> configFn <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-function\">Function=</code> </td> <td> <p>Optional configuration function for the module. Same as <a href=\"../type/angular.module#config.html\">Module#config()</a>.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-module\">module</code></td> <td>\n<p>new module with the <a href=\"../type/angular.module\"><code>angular.Module</code></a> api.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.module\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.module</a>\n  </p>\n</div>\n","api/ng/function/angular.noop":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.noop)%3A%20describe%20your%20change...#L371\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L371\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.noop</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>A function that performs no operations. This function can be useful when writing code in the functional style.</p> <pre data-language=\"javascript\">function foo(callback) {\n  var result = calculateResult();\n  (callback || angular.noop)(result);\n}\n</pre> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.noop();</code></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.noop\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.noop</a>\n  </p>\n</div>\n","api/ng/function/angular.reloadwithdebuginfo":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.reloadWithDebugInfo)%3A%20describe%20your%20change...#L1428\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L1428\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.reloadWithDebugInfo</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Use this function to reload the current application with debug information turned on. This takes precedence over a call to <code>$compileProvider.debugInfoEnabled(false)</code>.</p> <p>See <a href=\"../provider/%24compileprovider#debugInfoEnabled.html\"><code>$compileProvider</code></a> for more.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.reloadWithDebugInfo\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.reloadWithDebugInfo</a>\n  </p>\n</div>\n","api/ng/function/angular.tojson":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.toJson)%3A%20describe%20your%20change...#L973\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L973\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.toJson</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Serializes input into a JSON-formatted string. Properties with leading $$ characters will be stripped since angular uses this notation internally.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.toJson(obj, pretty);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> obj </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-array\">Array</code><code class=\"label type-hint type-hint-date\">Date</code><code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Input to be serialized into JSON.</p> </td> </tr> <tr> <td> pretty <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code><code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>If set to true, the JSON output will contain newlines and whitespace. If set to an integer, the JSON output will contain that many spaces per indentation.</p> <p><em>(default: 2)</em></p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td>\n<code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-undefined\">undefined</code>\n</td> <td>\n<p>JSON-ified string representing <code>obj</code>.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.toJson\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.toJson</a>\n  </p>\n</div>\n","api/ng/function/angular.uppercase":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(angular.uppercase)%3A%20describe%20your%20change...#L131\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L131\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.uppercase</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Converts the specified string to uppercase.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.uppercase(string);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> string </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>String to be converted to uppercase.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>Uppercased string.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.uppercase\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/function/angular.uppercase</a>\n  </p>\n</div>\n","api/ng/directive/a":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/a.js?message=docs(a)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/a.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>a</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Modifies the default behavior of the html A tag so that the default action is prevented when the href attribute is empty.</p> <p>This change permits the easy creation of action links with the <code>ngClick</code> directive without changing the location or causing page reloads, e.g.: <code>&lt;a href=\"\" ng-click=\"list.addItem()\"&gt;Add Item&lt;/a&gt;</code></p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as element: <pre data-language=\"html\">&lt;a&gt;\n...\n&lt;/a&gt;</pre> </li> </ul>\n</div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/a\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/a</a>\n  </p>\n</div>\n","api/ng/directive/form":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/form.js?message=docs(form)%3A%20describe%20your%20change...#L305\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/form.js#L305\" class=\"view-source pull-right btn btn-primary\"> View Source </a>form</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Directive that instantiates <a href=\"../type/form.formcontroller\">FormController</a>.</p> <p>If the <code>name</code> attribute is specified, the form controller is published onto the current scope under this name.</p> <h2 id=\"alias-link-ng-directive-ngform-ngform-\">Alias: <a href=\"ngform\"><code>ngForm</code></a>\n</h2> <p>In Angular, forms can be nested. This means that the outer form is valid when all of the child forms are valid as well. However, browsers do not allow nesting of <code>&lt;form&gt;</code> elements, so Angular provides the <a href=\"ngform\"><code>ngForm</code></a> directive which behaves identically to <code>&lt;form&gt;</code> but can be nested. This allows you to have nested forms, which is very useful when using Angular validation directives in forms that are dynamically generated using the <a href=\"ngrepeat\"><code>ngRepeat</code></a> directive. Since you cannot dynamically generate the <code>name</code> attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an <code>ngForm</code> directive and nest these in an outer <code>form</code> element.</p> <h2 id=\"css-classes\">CSS classes</h2> <ul> <li>\n<code>ng-valid</code> is set if the form is valid.</li> <li>\n<code>ng-invalid</code> is set if the form is invalid.</li> <li>\n<code>ng-pristine</code> is set if the form is pristine.</li> <li>\n<code>ng-dirty</code> is set if the form is dirty.</li> <li>\n<code>ng-submitted</code> is set if the form was submitted.</li> </ul> <p>Keep in mind that ngAnimate can detect each of these classes when added and removed.</p> <h2 id=\"submitting-a-form-and-preventing-the-default-action\">Submitting a form and preventing the default action</h2> <p>Since the role of forms in client-side Angular applications is different than in classical roundtrip apps, it is desirable for the browser not to translate the form submission into a full page reload that sends the data to the server. Instead some javascript logic should be triggered to handle the form submission in an application-specific way.</p> <p>For this reason, Angular prevents the default action (form submission to the server) unless the <code>&lt;form&gt;</code> element has an <code>action</code> attribute specified.</p> <p>You can use one of the following two ways to specify what javascript method should be called when a form is submitted:</p> <ul> <li>\n<a href=\"ngsubmit\">ngSubmit</a> directive on the form element</li> <li>\n<a href=\"ngclick\">ngClick</a> directive on the first button or input field of type submit (input[type=submit])</li> </ul> <p>To prevent double execution of the handler, use only one of the <a href=\"ngsubmit\">ngSubmit</a> or <a href=\"ngclick\">ngClick</a> directives. This is because of the following form submission rules in the HTML specification:</p> <ul> <li>If a form has only one input field then hitting enter in this field triggers form submit (<code>ngSubmit</code>)</li> <li>if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter doesn't trigger submit</li> <li>if a form has one or more input fields and one or more buttons or input[type=submit] then hitting enter in any of the input fields will trigger the click handler on the <em>first</em> button or input[type=submit] (<code>ngClick</code>) <em>and</em> a submit handler on the enclosing form (<code>ngSubmit</code>)</li> </ul> <p>Any pending <code>ngModelOptions</code> changes will take place immediately when an enclosing form is submitted. Note that <code>ngClick</code> events will occur before the model is updated. Use <code>ngSubmit</code> to have access to the updated model.</p> <h2 id=\"animation-hooks\">Animation Hooks</h2> <p>Animations in ngForm are triggered when any of the associated CSS classes are added and removed. These classes are: <code>.ng-pristine</code>, <code>.ng-dirty</code>, <code>.ng-invalid</code> and <code>.ng-valid</code> as well as any other validations that are performed within the form. Animations in ngForm are similar to how they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well as JS animations.</p> <p>The following example shows a simple way to utilize CSS transitions to style a form element that has been rendered as invalid after it has been validated:</p> <pre>\n//be sure to include ngAnimate as a module to hook into more\n//advanced animations\n.my-form {\n  transition:0.5s linear all;\n  background: white;\n}\n.my-form.ng-invalid {\n  background: red;\n  color:white;\n}\n</pre> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as element: <pre data-language=\"html\">&lt;form\n  [name=\"\"]&gt;\n...\n&lt;/form&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Name of the form. If specified, the form controller will be published into related scope, under this name.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/form\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/form</a>\n  </p>\n</div>\n","api/ng/directive/input":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(input)%3A%20describe%20your%20change...#L1412\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L1412\" class=\"view-source pull-right btn btn-primary\"> View Source </a>input</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>HTML input element control. When used together with <a href=\"ngmodel\"><code>ngModel</code></a>, it provides data-binding, input state control, and validation. Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> Not every feature offered is available for all input types. Specifically, data binding and event handling via <code>ng-model</code> is unsupported for <code>input[file]</code>. </div> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as element: <pre data-language=\"html\">&lt;input\n  ng-model=\"\"\n  [name=\"\"]\n  [required=\"\"]\n  [ng-required=\"\"]\n  [ng-minlength=\"\"]\n  [ng-maxlength=\"\"]\n  [ng-pattern=\"\"]\n  [ng-change=\"\"]\n  [ng-trim=\"\"]&gt;\n...\n&lt;/input&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> required <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>required</code> validation error key if the value is not entered.</p> </td> </tr> <tr> <td> ngRequired <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>Sets <code>required</code> attribute if set to true</p> </td> </tr> <tr> <td> ngMinlength <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Sets <code>minlength</code> validation error key if the value is shorter than minlength.</p> </td> </tr> <tr> <td> ngMaxlength <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Sets <code>maxlength</code> validation error key if the value is longer than maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any length.</p> </td> </tr> <tr> <td> ngPattern <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>pattern</code> validation error key if the value does not match the RegExp pattern expression. Expected value is <code>/regexp/</code> for inline patterns or <code>regexp</code> for patterns defined as scope expressions.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> <tr> <td> ngTrim <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>If set to false Angular will not automatically trim the input. This parameter is ignored for input[type=password] controls, which will never trim the input.</p> <p><em>(default: true)</em></p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/input\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/input</a>\n  </p>\n</div>\n","api/ng/directive":"<h1>Directive components in ng</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"directive/ngapp\">ngApp</a></td> <td>\n<p>Use this directive to <strong>auto-bootstrap</strong> an AngularJS application. The <code>ngApp</code> directive designates the <strong>root element</strong> of the application and is typically placed near the root element of the page - e.g. on the <code>&lt;body&gt;</code> or <code>&lt;html&gt;</code> tags.</p> </td> </tr> <tr> <td><a href=\"directive/a\">a</a></td> <td>\n<p>Modifies the default behavior of the html A tag so that the default action is prevented when the href attribute is empty.</p> </td> </tr> <tr> <td><a href=\"directive/nghref\">ngHref</a></td> <td>\n<p>Using Angular markup like <code>{{hash}}</code> in an href attribute will make the link go to the wrong URL if the user clicks it before Angular has a chance to replace the <code>{{hash}}</code> markup with its value. Until Angular replaces the markup the link will be broken and will most likely return a 404 error. The <code>ngHref</code> directive solves this problem.</p> </td> </tr> <tr> <td><a href=\"directive/ngsrc\">ngSrc</a></td> <td>\n<p>Using Angular markup like <code>{{hash}}</code> in a <code>src</code> attribute doesn't work right: The browser will fetch from the URL with the literal text <code>{{hash}}</code> until Angular replaces the expression inside <code>{{hash}}</code>. The <code>ngSrc</code> directive solves this problem.</p> </td> </tr> <tr> <td><a href=\"directive/ngsrcset\">ngSrcset</a></td> <td>\n<p>Using Angular markup like <code>{{hash}}</code> in a <code>srcset</code> attribute doesn't work right: The browser will fetch from the URL with the literal text <code>{{hash}}</code> until Angular replaces the expression inside <code>{{hash}}</code>. The <code>ngSrcset</code> directive solves this problem.</p> </td> </tr> <tr> <td><a href=\"directive/ngdisabled\">ngDisabled</a></td> <td>\n<p>This directive sets the <code>disabled</code> attribute on the element if the <a href=\"../../guide/expression\">expression</a> inside <code>ngDisabled</code> evaluates to truthy.</p> </td> </tr> <tr> <td><a href=\"directive/ngchecked\">ngChecked</a></td> <td>\n<p>The HTML specification does not require browsers to preserve the values of boolean attributes such as checked. (Their presence means true and their absence means false.) If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute. The <code>ngChecked</code> directive solves this problem for the <code>checked</code> attribute. This complementary directive is not removed by the browser and so provides a permanent reliable place to store the binding information.</p> </td> </tr> <tr> <td><a href=\"directive/ngreadonly\">ngReadonly</a></td> <td>\n<p>The HTML specification does not require browsers to preserve the values of boolean attributes such as readonly. (Their presence means true and their absence means false.) If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute. The <code>ngReadonly</code> directive solves this problem for the <code>readonly</code> attribute. This complementary directive is not removed by the browser and so provides a permanent reliable place to store the binding information.</p> </td> </tr> <tr> <td><a href=\"directive/ngselected\">ngSelected</a></td> <td>\n<p>The HTML specification does not require browsers to preserve the values of boolean attributes such as selected. (Their presence means true and their absence means false.) If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute. The <code>ngSelected</code> directive solves this problem for the <code>selected</code> attribute. This complementary directive is not removed by the browser and so provides a permanent reliable place to store the binding information.</p> </td> </tr> <tr> <td><a href=\"directive/ngopen\">ngOpen</a></td> <td>\n<p>The HTML specification does not require browsers to preserve the values of boolean attributes such as open. (Their presence means true and their absence means false.) If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute. The <code>ngOpen</code> directive solves this problem for the <code>open</code> attribute. This complementary directive is not removed by the browser and so provides a permanent reliable place to store the binding information.</p> </td> </tr> <tr> <td><a href=\"directive/ngform\">ngForm</a></td> <td>\n<p>Nestable alias of <a href=\"directive/form\"><code>form</code></a> directive. HTML does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a sub-group of controls needs to be determined.</p> </td> </tr> <tr> <td><a href=\"directive/form\">form</a></td> <td>\n<p>Directive that instantiates <a href=\"type/form.formcontroller\">FormController</a>.</p> </td> </tr> <tr> <td><a href=\"directive/textarea\">textarea</a></td> <td>\n<p>HTML textarea element control with angular data-binding. The data-binding and validation properties of this element are exactly the same as those of the <a href=\"directive/input\">input element</a>.</p> </td> </tr> <tr> <td><a href=\"directive/input\">input</a></td> <td>\n<p>HTML input element control. When used together with <a href=\"directive/ngmodel\"><code>ngModel</code></a>, it provides data-binding, input state control, and validation. Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.</p> </td> </tr> <tr> <td><a href=\"directive/ngvalue\">ngValue</a></td> <td>\n<p>Binds the given expression to the value of <code>&lt;option&gt;</code> or <a href=\"input/input%5Bradio%5D\"><code>input[radio]</code></a>, so that when the element is selected, the <a href=\"directive/ngmodel\"><code>ngModel</code></a> of that element is set to the bound value.</p> </td> </tr> <tr> <td><a href=\"directive/ngbind\">ngBind</a></td> <td>\n<p>The <code>ngBind</code> attribute tells Angular to replace the text content of the specified HTML element with the value of a given expression, and to update the text content when the value of that expression changes.</p> </td> </tr> <tr> <td><a href=\"directive/ngbindtemplate\">ngBindTemplate</a></td> <td>\n<p>The <code>ngBindTemplate</code> directive specifies that the element text content should be replaced with the interpolation of the template in the <code>ngBindTemplate</code> attribute. Unlike <code>ngBind</code>, the <code>ngBindTemplate</code> can contain multiple <code>{{</code> <code>}}</code> expressions. This directive is needed since some HTML elements (such as TITLE and OPTION) cannot contain SPAN elements.</p> </td> </tr> <tr> <td><a href=\"directive/ngbindhtml\">ngBindHtml</a></td> <td>\n<p>Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default, the resulting HTML content will be sanitized using the <a href=\"../ngsanitize/service/%24sanitize\">$sanitize</a> service. To utilize this functionality, ensure that <code>$sanitize</code> is available, for example, by including <a href=\"../ngsanitize\"><code>ngSanitize</code></a> in your module's dependencies (not in core Angular). In order to use <a href=\"../ngsanitize\"><code>ngSanitize</code></a> in your module's dependencies, you need to include \"angular-sanitize.js\" in your application.</p> </td> </tr> <tr> <td><a href=\"directive/ngchange\">ngChange</a></td> <td>\n<p>Evaluate the given expression when the user changes the input. The expression is evaluated immediately, unlike the JavaScript onchange event which only triggers at the end of a change (usually, when the user leaves the form element or presses the return key).</p> </td> </tr> <tr> <td><a href=\"directive/ngclass\">ngClass</a></td> <td>\n<p>The <code>ngClass</code> directive allows you to dynamically set CSS classes on an HTML element by databinding an expression that represents all classes to be added.</p> </td> </tr> <tr> <td><a href=\"directive/ngclassodd\">ngClassOdd</a></td> <td>\n<p>The <code>ngClassOdd</code> and <code>ngClassEven</code> directives work exactly as <a href=\"directive/ngclass\">ngClass</a>, except they work in conjunction with <code>ngRepeat</code> and take effect only on odd (even) rows.</p> </td> </tr> <tr> <td><a href=\"directive/ngclasseven\">ngClassEven</a></td> <td>\n<p>The <code>ngClassOdd</code> and <code>ngClassEven</code> directives work exactly as <a href=\"directive/ngclass\">ngClass</a>, except they work in conjunction with <code>ngRepeat</code> and take effect only on odd (even) rows.</p> </td> </tr> <tr> <td><a href=\"directive/ngcloak\">ngCloak</a></td> <td>\n<p>The <code>ngCloak</code> directive is used to prevent the Angular html template from being briefly displayed by the browser in its raw (uncompiled) form while your application is loading. Use this directive to avoid the undesirable flicker effect caused by the html template display.</p> </td> </tr> <tr> <td><a href=\"directive/ngcontroller\">ngController</a></td> <td>\n<p>The <code>ngController</code> directive attaches a controller class to the view. This is a key aspect of how angular supports the principles behind the Model-View-Controller design pattern.</p> </td> </tr> <tr> <td><a href=\"directive/ngcsp\">ngCsp</a></td> <td>\n<p>Enables <a href=\"https://developer.mozilla.org/en/Security/CSP\">CSP (Content Security Policy)</a> support.</p> </td> </tr> <tr> <td><a href=\"directive/ngclick\">ngClick</a></td> <td>\n<p>The ngClick directive allows you to specify custom behavior when an element is clicked.</p> </td> </tr> <tr> <td><a href=\"directive/ngdblclick\">ngDblclick</a></td> <td>\n<p>The <code>ngDblclick</code> directive allows you to specify custom behavior on a dblclick event.</p> </td> </tr> <tr> <td><a href=\"directive/ngmousedown\">ngMousedown</a></td> <td>\n<p>The ngMousedown directive allows you to specify custom behavior on mousedown event.</p> </td> </tr> <tr> <td><a href=\"directive/ngmouseup\">ngMouseup</a></td> <td>\n<p>Specify custom behavior on mouseup event.</p> </td> </tr> <tr> <td><a href=\"directive/ngmouseover\">ngMouseover</a></td> <td>\n<p>Specify custom behavior on mouseover event.</p> </td> </tr> <tr> <td><a href=\"directive/ngmouseenter\">ngMouseenter</a></td> <td>\n<p>Specify custom behavior on mouseenter event.</p> </td> </tr> <tr> <td><a href=\"directive/ngmouseleave\">ngMouseleave</a></td> <td>\n<p>Specify custom behavior on mouseleave event.</p> </td> </tr> <tr> <td><a href=\"directive/ngmousemove\">ngMousemove</a></td> <td>\n<p>Specify custom behavior on mousemove event.</p> </td> </tr> <tr> <td><a href=\"directive/ngkeydown\">ngKeydown</a></td> <td>\n<p>Specify custom behavior on keydown event.</p> </td> </tr> <tr> <td><a href=\"directive/ngkeyup\">ngKeyup</a></td> <td>\n<p>Specify custom behavior on keyup event.</p> </td> </tr> <tr> <td><a href=\"directive/ngkeypress\">ngKeypress</a></td> <td>\n<p>Specify custom behavior on keypress event.</p> </td> </tr> <tr> <td><a href=\"directive/ngsubmit\">ngSubmit</a></td> <td>\n<p>Enables binding angular expressions to onsubmit events.</p> </td> </tr> <tr> <td><a href=\"directive/ngfocus\">ngFocus</a></td> <td>\n<p>Specify custom behavior on focus event.</p> </td> </tr> <tr> <td><a href=\"directive/ngblur\">ngBlur</a></td> <td>\n<p>Specify custom behavior on blur event.</p> </td> </tr> <tr> <td><a href=\"directive/ngcopy\">ngCopy</a></td> <td>\n<p>Specify custom behavior on copy event.</p> </td> </tr> <tr> <td><a href=\"directive/ngcut\">ngCut</a></td> <td>\n<p>Specify custom behavior on cut event.</p> </td> </tr> <tr> <td><a href=\"directive/ngpaste\">ngPaste</a></td> <td>\n<p>Specify custom behavior on paste event.</p> </td> </tr> <tr> <td><a href=\"directive/ngif\">ngIf</a></td> <td>\n<p>The <code>ngIf</code> directive removes or recreates a portion of the DOM tree based on an {expression}. If the expression assigned to <code>ngIf</code> evaluates to a false value then the element is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.</p> </td> </tr> <tr> <td><a href=\"directive/nginclude\">ngInclude</a></td> <td>\n<p>Fetches, compiles and includes an external HTML fragment.</p> </td> </tr> <tr> <td><a href=\"directive/nginit\">ngInit</a></td> <td>\n<p>The <code>ngInit</code> directive allows you to evaluate an expression in the current scope.</p> </td> </tr> <tr> <td><a href=\"directive/nglist\">ngList</a></td> <td>\n<p>Text input that converts between a delimited string and an array of strings. The default delimiter is a comma followed by a space - equivalent to <code>ng-list=\", \"</code>. You can specify a custom delimiter as the value of the <code>ngList</code> attribute - for example, <code>ng-list=\" | \"</code>.</p> </td> </tr> <tr> <td><a href=\"directive/ngmodel\">ngModel</a></td> <td>\n<p>The <code>ngModel</code> directive binds an <code>input</code>,<code>select</code>, <code>textarea</code> (or custom form control) to a property on the scope using <a href=\"type/ngmodel.ngmodelcontroller\">NgModelController</a>, which is created and exposed by this directive.</p> </td> </tr> <tr> <td><a href=\"directive/ngmodeloptions\">ngModelOptions</a></td> <td>\n<p>Allows tuning how model updates are done. Using <code>ngModelOptions</code> you can specify a custom list of events that will trigger a model update and/or a debouncing delay so that the actual update only takes place when a timer expires; this timer will be reset after another change takes place.</p> </td> </tr> <tr> <td><a href=\"directive/ngnonbindable\">ngNonBindable</a></td> <td>\n<p>The <code>ngNonBindable</code> directive tells Angular not to compile or bind the contents of the current DOM element. This is useful if the element contains what appears to be Angular directives and bindings but which should be ignored by Angular. This could be the case if you have a site that displays snippets of code, for instance.</p> </td> </tr> <tr> <td><a href=\"directive/ngpluralize\">ngPluralize</a></td> <td>\n<p><code>ngPluralize</code> is a directive that displays messages according to en-US localization rules. These rules are bundled with angular.js, but can be overridden (see <a href=\"../../guide/i18n\">Angular i18n</a> dev guide). You configure ngPluralize directive by specifying the mappings between <a href=\"http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html\">plural categories</a> and the strings to be displayed.</p> </td> </tr> <tr> <td><a href=\"directive/ngrepeat\">ngRepeat</a></td> <td>\n<p>The <code>ngRepeat</code> directive instantiates a template once per item from a collection. Each template instance gets its own scope, where the given loop variable is set to the current collection item, and <code>$index</code> is set to the item index or key.</p> </td> </tr> <tr> <td><a href=\"directive/ngshow\">ngShow</a></td> <td>\n<p>The <code>ngShow</code> directive shows or hides the given HTML element based on the expression provided to the <code>ngShow</code> attribute. The element is shown or hidden by removing or adding the <code>.ng-hide</code> CSS class onto the element. The <code>.ng-hide</code> CSS class is predefined in AngularJS and sets the display style to none (using an !important flag). For CSP mode please add <code>angular-csp.css</code> to your html file (see <a href=\"directive/ngcsp\">ngCsp</a>).</p> </td> </tr> <tr> <td><a href=\"directive/nghide\">ngHide</a></td> <td>\n<p>The <code>ngHide</code> directive shows or hides the given HTML element based on the expression provided to the <code>ngHide</code> attribute. The element is shown or hidden by removing or adding the <code>ng-hide</code> CSS class onto the element. The <code>.ng-hide</code> CSS class is predefined in AngularJS and sets the display style to none (using an !important flag). For CSP mode please add <code>angular-csp.css</code> to your html file (see <a href=\"directive/ngcsp\">ngCsp</a>).</p> </td> </tr> <tr> <td><a href=\"directive/ngstyle\">ngStyle</a></td> <td>\n<p>The <code>ngStyle</code> directive allows you to set CSS style on an HTML element conditionally.</p> </td> </tr> <tr> <td><a href=\"directive/ngswitch\">ngSwitch</a></td> <td>\n<p>The <code>ngSwitch</code> directive is used to conditionally swap DOM structure on your template based on a scope expression. Elements within <code>ngSwitch</code> but without <code>ngSwitchWhen</code> or <code>ngSwitchDefault</code> directives will be preserved at the location as specified in the template.</p> </td> </tr> <tr> <td><a href=\"directive/ngtransclude\">ngTransclude</a></td> <td>\n<p>Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.</p> </td> </tr> <tr> <td><a href=\"directive/script\">script</a></td> <td>\n<p>Load the content of a <code>&lt;script&gt;</code> element into <a href=\"service/%24templatecache\"><code>$templateCache</code></a>, so that the template can be used by <a href=\"directive/nginclude\"><code>ngInclude</code></a>, <a href=\"../ngroute/directive/ngview\"><code>ngView</code></a>, or <a href=\"../../guide/directive\">directives</a>. The type of the <code>&lt;script&gt;</code> element must be specified as <code>text/ng-template</code>, and a cache name for the template must be assigned through the element's <code>id</code>, which can then be used as a directive's <code>templateUrl</code>.</p> </td> </tr> <tr> <td><a href=\"directive/select\">select</a></td> <td>\n<p>HTML <code>SELECT</code> element with angular data-binding.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive</a>\n  </p>\n</div>\n","api/ng/input/input[checkbox]":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(input%5Bcheckbox%5D)%3A%20describe%20your%20change...#L909\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L909\" class=\"view-source pull-right btn btn-primary\"> View Source </a>input[checkbox]</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> input in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>HTML checkbox.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2>Usage</h2> <pre data-language=\"html\">&lt;input type=\"checkbox\"\n       ng-model=\"\"\n       [name=\"\"]\n       [ng-true-value=\"\"]\n       [ng-false-value=\"\"]\n       [ng-change=\"\"]&gt;</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> ngTrueValue <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p>The value to which the expression should be set when selected.</p> </td> </tr> <tr> <td> ngFalseValue <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p>The value to which the expression should be set when not selected.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bcheckbox%5D\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bcheckbox%5D</a>\n  </p>\n</div>\n","api/ng/input/input[date]":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(input%5Bdate%5D)%3A%20describe%20your%20change...#L114\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L114\" class=\"view-source pull-right btn btn-primary\"> View Source </a>input[date]</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> input in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Input with date validation and transformation. In browsers that do not yet support the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601 date format (yyyy-MM-dd), for example: <code>2009-01-06</code>. Since many modern browsers do not yet support this input type, it is important to provide cues to users on the expected input format via a placeholder or label.</p> <p>The model must always be a Date object, otherwise Angular will throw an error. Invalid <code>Date</code> objects (dates whose <code>getTime()</code> is <code>NaN</code>) will be rendered as an empty string.</p> <p>The timezone to be used to read/write the <code>Date</code> instance in the model can be defined using <a href=\"../directive/ngmodeloptions\">ngModelOptions</a>. By default, this is the timezone of the browser.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2>Usage</h2> <pre data-language=\"html\">&lt;input type=\"date\"\n       ng-model=\"\"\n       [name=\"\"]\n       [min=\"\"]\n       [max=\"\"]\n       [required=\"\"]\n       [ng-required=\"\"]\n       [ng-change=\"\"]&gt;</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> min <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets the <code>min</code> validation error key if the value entered is less than <code>min</code>. This must be a valid ISO date string (yyyy-MM-dd).</p> </td> </tr> <tr> <td> max <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets the <code>max</code> validation error key if the value entered is greater than <code>max</code>. This must be a valid ISO date string (yyyy-MM-dd).</p> </td> </tr> <tr> <td> required <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>required</code> validation error key if the value is not entered.</p> </td> </tr> <tr> <td> ngRequired <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Adds <code>required</code> attribute and <code>required</code> validation constraint to the element when the ngRequired expression evaluates to true. Use <code>ngRequired</code> instead of <code>required</code> when you want to data-bind to the <code>required</code> attribute.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bdate%5D\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bdate%5D</a>\n  </p>\n</div>\n","api/ng/input/input[datetime-local]":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(input%5Bdatetime-local%5D)%3A%20describe%20your%20change...#L209\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L209\" class=\"view-source pull-right btn btn-primary\"> View Source </a>input[datetime-local]</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> input in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Input with datetime validation and transformation. In browsers that do not yet support the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601 local datetime format (yyyy-MM-ddTHH:mm:ss), for example: <code>2010-12-28T14:57:00</code>.</p> <p>The model must always be a Date object, otherwise Angular will throw an error. Invalid <code>Date</code> objects (dates whose <code>getTime()</code> is <code>NaN</code>) will be rendered as an empty string.</p> <p>The timezone to be used to read/write the <code>Date</code> instance in the model can be defined using <a href=\"../directive/ngmodeloptions\">ngModelOptions</a>. By default, this is the timezone of the browser.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2>Usage</h2> <pre data-language=\"html\">&lt;input type=\"datetime-local\"\n       ng-model=\"\"\n       [name=\"\"]\n       [min=\"\"]\n       [max=\"\"]\n       [required=\"\"]\n       [ng-required=\"\"]\n       [ng-change=\"\"]&gt;</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> min <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets the <code>min</code> validation error key if the value entered is less than <code>min</code>. This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).</p> </td> </tr> <tr> <td> max <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets the <code>max</code> validation error key if the value entered is greater than <code>max</code>. This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).</p> </td> </tr> <tr> <td> required <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>required</code> validation error key if the value is not entered.</p> </td> </tr> <tr> <td> ngRequired <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Adds <code>required</code> attribute and <code>required</code> validation constraint to the element when the ngRequired expression evaluates to true. Use <code>ngRequired</code> instead of <code>required</code> when you want to data-bind to the <code>required</code> attribute.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bdatetime-local%5D\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bdatetime-local%5D</a>\n  </p>\n</div>\n","api/ng/input/input[email]":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(input%5Bemail%5D)%3A%20describe%20your%20change...#L765\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L765\" class=\"view-source pull-right btn btn-primary\"> View Source </a>input[email]</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> input in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Text input with email validation. Sets the <code>email</code> validation error key if not a valid email address.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> <code>input[email]</code> uses a regex to validate email addresses that is derived from the regex used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can use <code>ng-pattern</code> or modify the built-in validators (see the <a href=\"../../../guide/forms\">Forms guide</a>) </div> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2>Usage</h2> <pre data-language=\"html\">&lt;input type=\"email\"\n       ng-model=\"\"\n       [name=\"\"]\n       [required=\"\"]\n       [ng-required=\"\"]\n       [ng-minlength=\"\"]\n       [ng-maxlength=\"\"]\n       [pattern=\"\"]\n       [ng-pattern=\"\"]\n       [ng-change=\"\"]&gt;</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> required <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>required</code> validation error key if the value is not entered.</p> </td> </tr> <tr> <td> ngRequired <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Adds <code>required</code> attribute and <code>required</code> validation constraint to the element when the ngRequired expression evaluates to true. Use <code>ngRequired</code> instead of <code>required</code> when you want to data-bind to the <code>required</code> attribute.</p> </td> </tr> <tr> <td> ngMinlength <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Sets <code>minlength</code> validation error key if the value is shorter than minlength.</p> </td> </tr> <tr> <td> ngMaxlength <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Sets <code>maxlength</code> validation error key if the value is longer than maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any length.</p> </td> </tr> <tr> <td> pattern <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Similar to <code>ngPattern</code> except that the attribute value is the actual string that contains the regular expression body that will be converted to a regular expression as in the ngPattern directive.</p> </td> </tr> <tr> <td> ngPattern <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>pattern</code> validation error key if the ngModel value does not match a RegExp found by evaluating the Angular expression given in the attribute value. If the expression evaluates to a RegExp object then this is used directly. If the expression is a string then it will be converted to a RegExp after wrapping it in <code>^</code> and <code>$</code> characters. For instance, <code>\"abc\"</code> will be converted to <code>new RegExp('^abc$')</code>.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bemail%5D\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bemail%5D</a>\n  </p>\n</div>\n","api/ng/input/input[month]":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(input%5Bmonth%5D)%3A%20describe%20your%20change...#L487\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L487\" class=\"view-source pull-right btn btn-primary\"> View Source </a>input[month]</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> input in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Input with month validation and transformation. In browsers that do not yet support the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601 month format (yyyy-MM), for example: <code>2009-01</code>.</p> <p>The model must always be a Date object, otherwise Angular will throw an error. Invalid <code>Date</code> objects (dates whose <code>getTime()</code> is <code>NaN</code>) will be rendered as an empty string. If the model is not set to the first of the month, the next view to model update will set it to the first of the month.</p> <p>The timezone to be used to read/write the <code>Date</code> instance in the model can be defined using <a href=\"../directive/ngmodeloptions\">ngModelOptions</a>. By default, this is the timezone of the browser.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2>Usage</h2> <pre data-language=\"html\">&lt;input type=\"month\"\n       ng-model=\"\"\n       [name=\"\"]\n       [min=\"\"]\n       [max=\"\"]\n       [required=\"\"]\n       [ng-required=\"\"]\n       [ng-change=\"\"]&gt;</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> min <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets the <code>min</code> validation error key if the value entered is less than <code>min</code>. This must be a valid ISO month format (yyyy-MM).</p> </td> </tr> <tr> <td> max <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets the <code>max</code> validation error key if the value entered is greater than <code>max</code>. This must be a valid ISO month format (yyyy-MM).</p> </td> </tr> <tr> <td> required <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>required</code> validation error key if the value is not entered.</p> </td> </tr> <tr> <td> ngRequired <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Adds <code>required</code> attribute and <code>required</code> validation constraint to the element when the ngRequired expression evaluates to true. Use <code>ngRequired</code> instead of <code>required</code> when you want to data-bind to the <code>required</code> attribute.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bmonth%5D\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bmonth%5D</a>\n  </p>\n</div>\n","api/ng/input/input[number]":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(input%5Bnumber%5D)%3A%20describe%20your%20change...#L582\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L582\" class=\"view-source pull-right btn btn-primary\"> View Source </a>input[number]</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> input in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Text input with number validation and transformation. Sets the <code>number</code> validation error if not a valid number.</p> <div class=\"alert alert-warning\"> The model must always be of type <code>number</code> otherwise Angular will throw an error. Be aware that a string containing a number is not enough. See the <a href=\"error/ngmodel/numfmt\"><code>numfmt</code></a> error docs for more information and an example of how to convert your model if necessary. </div> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2>Usage</h2> <pre data-language=\"html\">&lt;input type=\"number\"\n       ng-model=\"\"\n       [name=\"\"]\n       [min=\"\"]\n       [max=\"\"]\n       [required=\"\"]\n       [ng-required=\"\"]\n       [ng-minlength=\"\"]\n       [ng-maxlength=\"\"]\n       [pattern=\"\"]\n       [ng-pattern=\"\"]\n       [ng-change=\"\"]&gt;</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> min <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets the <code>min</code> validation error key if the value entered is less than <code>min</code>.</p> </td> </tr> <tr> <td> max <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets the <code>max</code> validation error key if the value entered is greater than <code>max</code>.</p> </td> </tr> <tr> <td> required <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>required</code> validation error key if the value is not entered.</p> </td> </tr> <tr> <td> ngRequired <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Adds <code>required</code> attribute and <code>required</code> validation constraint to the element when the ngRequired expression evaluates to true. Use <code>ngRequired</code> instead of <code>required</code> when you want to data-bind to the <code>required</code> attribute.</p> </td> </tr> <tr> <td> ngMinlength <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Sets <code>minlength</code> validation error key if the value is shorter than minlength.</p> </td> </tr> <tr> <td> ngMaxlength <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Sets <code>maxlength</code> validation error key if the value is longer than maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any length.</p> </td> </tr> <tr> <td> pattern <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Similar to <code>ngPattern</code> except that the attribute value is the actual string that contains the regular expression body that will be converted to a regular expression as in the ngPattern directive.</p> </td> </tr> <tr> <td> ngPattern <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>pattern</code> validation error key if the ngModel value does not match a RegExp found by evaluating the Angular expression given in the attribute value. If the expression evaluates to a RegExp object then this is used directly. If the expression is a string then it will be converted to a RegExp after wrapping it in <code>^</code> and <code>$</code> characters. For instance, <code>\"abc\"</code> will be converted to <code>new RegExp('^abc$')</code>.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bnumber%5D\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bnumber%5D</a>\n  </p>\n</div>\n","api/ng/input/input[radio]":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(input%5Bradio%5D)%3A%20describe%20your%20change...#L855\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L855\" class=\"view-source pull-right btn btn-primary\"> View Source </a>input[radio]</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> input in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>HTML radio button.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2>Usage</h2> <pre data-language=\"html\">&lt;input type=\"radio\"\n       ng-model=\"\"\n       value=\"\"\n       [name=\"\"]\n       [ng-change=\"\"]\n       ng-value=\"\"&gt;</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The value to which the expression should be set when selected.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> <tr> <td> ngValue </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression which sets the value to which the expression should be set when selected.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bradio%5D\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bradio%5D</a>\n  </p>\n</div>\n","api/ng/input/input[text]":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(input%5Btext%5D)%3A%20describe%20your%20change...#L25\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L25\" class=\"view-source pull-right btn btn-primary\"> View Source </a>input[text]</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> input in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Standard HTML text input with angular data binding, inherited by most of the <code>input</code> elements.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2>Usage</h2> <pre data-language=\"html\">&lt;input type=\"text\"\n       ng-model=\"\"\n       [name=\"\"]\n       [required=\"\"]\n       [ng-required=\"\"]\n       [ng-minlength=\"\"]\n       [ng-maxlength=\"\"]\n       [pattern=\"\"]\n       [ng-pattern=\"\"]\n       [ng-change=\"\"]\n       [ng-trim=\"\"]&gt;</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> required <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Adds <code>required</code> validation error key if the value is not entered.</p> </td> </tr> <tr> <td> ngRequired <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Adds <code>required</code> attribute and <code>required</code> validation constraint to the element when the ngRequired expression evaluates to true. Use <code>ngRequired</code> instead of <code>required</code> when you want to data-bind to the <code>required</code> attribute.</p> </td> </tr> <tr> <td> ngMinlength <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Sets <code>minlength</code> validation error key if the value is shorter than minlength.</p> </td> </tr> <tr> <td> ngMaxlength <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Sets <code>maxlength</code> validation error key if the value is longer than maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any length.</p> </td> </tr> <tr> <td> pattern <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Similar to <code>ngPattern</code> except that the attribute value is the actual string that contains the regular expression body that will be converted to a regular expression as in the ngPattern directive.</p> </td> </tr> <tr> <td> ngPattern <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>pattern</code> validation error key if the ngModel value does not match a RegExp found by evaluating the Angular expression given in the attribute value. If the expression evaluates to a RegExp object then this is used directly. If the expression is a string then it will be converted to a RegExp after wrapping it in <code>^</code> and <code>$</code> characters. For instance, <code>\"abc\"</code> will be converted to <code>new RegExp('^abc$')</code>.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> <tr> <td> ngTrim <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>If set to false Angular will not automatically trim the input. This parameter is ignored for input[type=password] controls, which will never trim the input.</p> <p><em>(default: true)</em></p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Btext%5D\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Btext%5D</a>\n  </p>\n</div>\n","api/ng/input/input[time]":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(input%5Btime%5D)%3A%20describe%20your%20change...#L302\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L302\" class=\"view-source pull-right btn btn-primary\"> View Source </a>input[time]</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> input in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Input with time validation and transformation. In browsers that do not yet support the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601 local time format (HH:mm:ss), for example: <code>14:57:00</code>. Model must be a Date object. This binding will always output a Date object to the model of January 1, 1970, or local date <code>new Date(1970, 0, 1, HH, mm, ss)</code>.</p> <p>The model must always be a Date object, otherwise Angular will throw an error. Invalid <code>Date</code> objects (dates whose <code>getTime()</code> is <code>NaN</code>) will be rendered as an empty string.</p> <p>The timezone to be used to read/write the <code>Date</code> instance in the model can be defined using <a href=\"../directive/ngmodeloptions\">ngModelOptions</a>. By default, this is the timezone of the browser.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2>Usage</h2> <pre data-language=\"html\">&lt;input type=\"time\"\n       ng-model=\"\"\n       [name=\"\"]\n       [min=\"\"]\n       [max=\"\"]\n       [required=\"\"]\n       [ng-required=\"\"]\n       [ng-change=\"\"]&gt;</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> min <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets the <code>min</code> validation error key if the value entered is less than <code>min</code>. This must be a valid ISO time format (HH:mm:ss).</p> </td> </tr> <tr> <td> max <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets the <code>max</code> validation error key if the value entered is greater than <code>max</code>. This must be a valid ISO time format (HH:mm:ss).</p> </td> </tr> <tr> <td> required <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>required</code> validation error key if the value is not entered.</p> </td> </tr> <tr> <td> ngRequired <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Adds <code>required</code> attribute and <code>required</code> validation constraint to the element when the ngRequired expression evaluates to true. Use <code>ngRequired</code> instead of <code>required</code> when you want to data-bind to the <code>required</code> attribute.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Btime%5D\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Btime%5D</a>\n  </p>\n</div>\n","api/ng/input/input[url]":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(input%5Burl%5D)%3A%20describe%20your%20change...#L674\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L674\" class=\"view-source pull-right btn btn-primary\"> View Source </a>input[url]</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> input in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Text input with URL validation. Sets the <code>url</code> validation error key if the content is not a valid URL.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> <code>input[url]</code> uses a regex to validate urls that is derived from the regex used in Chromium. If you need stricter validation, you can use <code>ng-pattern</code> or modify the built-in validators (see the <a href=\"../../../guide/forms\">Forms guide</a>) </div> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2>Usage</h2> <pre data-language=\"html\">&lt;input type=\"url\"\n       ng-model=\"\"\n       [name=\"\"]\n       [required=\"\"]\n       [ng-required=\"\"]\n       [ng-minlength=\"\"]\n       [ng-maxlength=\"\"]\n       [pattern=\"\"]\n       [ng-pattern=\"\"]\n       [ng-change=\"\"]&gt;</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> required <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>required</code> validation error key if the value is not entered.</p> </td> </tr> <tr> <td> ngRequired <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Adds <code>required</code> attribute and <code>required</code> validation constraint to the element when the ngRequired expression evaluates to true. Use <code>ngRequired</code> instead of <code>required</code> when you want to data-bind to the <code>required</code> attribute.</p> </td> </tr> <tr> <td> ngMinlength <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Sets <code>minlength</code> validation error key if the value is shorter than minlength.</p> </td> </tr> <tr> <td> ngMaxlength <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Sets <code>maxlength</code> validation error key if the value is longer than maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any length.</p> </td> </tr> <tr> <td> pattern <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Similar to <code>ngPattern</code> except that the attribute value is the actual string that contains the regular expression body that will be converted to a regular expression as in the ngPattern directive.</p> </td> </tr> <tr> <td> ngPattern <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>pattern</code> validation error key if the ngModel value does not match a RegExp found by evaluating the Angular expression given in the attribute value. If the expression evaluates to a RegExp object then this is used directly. If the expression is a string then it will be converted to a RegExp after wrapping it in <code>^</code> and <code>$</code> characters. For instance, <code>\"abc\"</code> will be converted to <code>new RegExp('^abc$')</code>.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Burl%5D\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Burl%5D</a>\n  </p>\n</div>\n","api/ng/input/input[week]":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(input%5Bweek%5D)%3A%20describe%20your%20change...#L396\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L396\" class=\"view-source pull-right btn btn-primary\"> View Source </a>input[week]</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> input in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601 week format (yyyy-W##), for example: <code>2013-W02</code>.</p> <p>The model must always be a Date object, otherwise Angular will throw an error. Invalid <code>Date</code> objects (dates whose <code>getTime()</code> is <code>NaN</code>) will be rendered as an empty string.</p> <p>The timezone to be used to read/write the <code>Date</code> instance in the model can be defined using <a href=\"../directive/ngmodeloptions\">ngModelOptions</a>. By default, this is the timezone of the browser.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2>Usage</h2> <pre data-language=\"html\">&lt;input type=\"week\"\n       ng-model=\"\"\n       [name=\"\"]\n       [min=\"\"]\n       [max=\"\"]\n       [required=\"\"]\n       [ng-required=\"\"]\n       [ng-change=\"\"]&gt;</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> min <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets the <code>min</code> validation error key if the value entered is less than <code>min</code>. This must be a valid ISO week format (yyyy-W##).</p> </td> </tr> <tr> <td> max <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets the <code>max</code> validation error key if the value entered is greater than <code>max</code>. This must be a valid ISO week format (yyyy-W##).</p> </td> </tr> <tr> <td> required <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>required</code> validation error key if the value is not entered.</p> </td> </tr> <tr> <td> ngRequired <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Adds <code>required</code> attribute and <code>required</code> validation constraint to the element when the ngRequired expression evaluates to true. Use <code>ngRequired</code> instead of <code>required</code> when you want to data-bind to the <code>required</code> attribute.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bweek%5D\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/input/input%5Bweek%5D</a>\n  </p>\n</div>\n","api/ng/directive/ngapp":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/Angular.js?message=docs(ngApp)%3A%20describe%20your%20change...#L1154\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/Angular.js#L1154\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngApp</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Use this directive to <strong>auto-bootstrap</strong> an AngularJS application. The <code>ngApp</code> directive designates the <strong>root element</strong> of the application and is typically placed near the root element of the page - e.g. on the <code>&lt;body&gt;</code> or <code>&lt;html&gt;</code> tags.</p> <p>Only one AngularJS application can be auto-bootstrapped per HTML document. The first <code>ngApp</code> found in the document will be used to define the root element to auto-bootstrap as an application. To run multiple applications in an HTML document you must manually bootstrap them using <a href=\"../function/angular.bootstrap\"><code>angular.bootstrap</code></a> instead. AngularJS applications cannot be nested within each other.</p> <p>You can specify an <strong>AngularJS module</strong> to be used as the root module for the application. This module will be loaded into the <a href=\"../../auto/service/%24injector\"><code>$injector</code></a> when the application is bootstrapped. It should contain the application code needed or have dependencies on other modules that will contain the code. See <a href=\"../function/angular.module\"><code>angular.module</code></a> for more information.</p> <p>In the example below if the <code>ngApp</code> directive were not placed on the <code>html</code> element then the document would not be compiled, the <code>AppController</code> would not be instantiated and the <code>{{ a+b }}</code> would not be resolved to <code>3</code>.</p> <p><code>ngApp</code> is the easiest, and most common way to bootstrap an application.</p>  <p>Using <code>ngStrictDi</code>, you would see something like this:</p>  </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-app=\"\"\n  [ng-strict-di=\"\"]&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngApp </td> <td> <code class=\"label type-hint type-hint-angular\">angular.Module</code> </td> <td> <p>an optional application <a href=\"../function/angular.module\">module</a> name to load.</p> </td> </tr> <tr> <td> ngStrictDi <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>if this attribute is present on the app element, the injector will be created in \"strict-di\" mode. This means that the application will fail to invoke functions which do not use explicit function annotation (and are thus unsuitable for minification), as described in <a href=\"../../../guide/di\">the Dependency Injection guide</a>, and useful debugging info will assist in tracking down the root of these bugs.</p> </td> </tr> </tbody> </table> </section> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngApp\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngApp</a>\n  </p>\n</div>\n","api/ng/directive/ngbind":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngBind.js?message=docs(ngBind)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngBind.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngBind</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngBind</code> attribute tells Angular to replace the text content of the specified HTML element with the value of a given expression, and to update the text content when the value of that expression changes.</p> <p>Typically, you don't use <code>ngBind</code> directly, but instead you use the double curly markup like <code>{{ expression }}</code> which is similar but less verbose.</p> <p>It is preferable to use <code>ngBind</code> instead of <code>{{ expression }}</code> if a template is momentarily displayed by the browser in its raw state before Angular compiles it. Since <code>ngBind</code> is an element attribute, it makes the bindings invisible to the user while the page is loading.</p> <p>An alternative solution to this problem would be using the <a href=\"ngcloak\">ngCloak</a> directive.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-bind=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> <li>as CSS class: <pre data-language=\"html\">&lt;ANY class=\"ng-bind: ;\"&gt; ... &lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngBind </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate.</p> </td> </tr> </tbody> </table> </section> <p>Enter a name in the Live Preview text box; the greeting below the text box changes instantly. </p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngBind\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngBind</a>\n  </p>\n</div>\n","api/ng/directive/ngbindhtml":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngBind.js?message=docs(ngBindHtml)%3A%20describe%20your%20change...#L139\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngBind.js#L139\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngBindHtml</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default, the resulting HTML content will be sanitized using the <a href=\"../../ngsanitize/service/%24sanitize\">$sanitize</a> service. To utilize this functionality, ensure that <code>$sanitize</code> is available, for example, by including <a href=\"../../ngsanitize\"><code>ngSanitize</code></a> in your module's dependencies (not in core Angular). In order to use <a href=\"../../ngsanitize\"><code>ngSanitize</code></a> in your module's dependencies, you need to include \"angular-sanitize.js\" in your application.</p> <p>You may also bypass sanitization for values you know are safe. To do so, bind to an explicitly trusted value via <a href=\"../service/%24sce#trustAsHtml.html\">$sce.trustAsHtml</a>. See the example under <a href=\"../service/%24sce#show-me-an-example-using-sce-.html\">Strict Contextual Escaping (SCE)</a>.</p> <p>Note: If a <code>$sanitize</code> service is unavailable and the bound value isn't explicitly trusted, you will have an exception (instead of an exploit.)</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-bind-html=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngBindHtml </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngBindHtml\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngBindHtml</a>\n  </p>\n</div>\n","api/ng/directive/ngbindtemplate":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngBind.js?message=docs(ngBindTemplate)%3A%20describe%20your%20change...#L71\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngBind.js#L71\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngBindTemplate</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngBindTemplate</code> directive specifies that the element text content should be replaced with the interpolation of the template in the <code>ngBindTemplate</code> attribute. Unlike <code>ngBind</code>, the <code>ngBindTemplate</code> can contain multiple <code>{{</code> <code>}}</code> expressions. This directive is needed since some HTML elements (such as TITLE and OPTION) cannot contain SPAN elements.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-bind-template=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngBindTemplate </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>template of form <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.</p> </td> </tr> </tbody> </table> </section> <p>Try it here: enter text in text box and watch the greeting change. </p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngBindTemplate\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngBindTemplate</a>\n  </p>\n</div>\n","api/ng/directive/ngblur":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngBlur)%3A%20describe%20your%20change...#L400\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L400\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngBlur</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on blur event.</p> <p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/blur\">blur event</a> fires when an element has lost focus.</p> <p>Note: As the <code>blur</code> event is executed synchronously also during DOM manipulations (e.g. removing a focussed input), AngularJS executes the expression using <code>scope.$evalAsync</code> if the event is fired during an <code>$apply</code> to ensure a consistent state.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;window, input, select, textarea, a\n  ng-blur=\"\"&gt;\n...\n&lt;/window, input, select, textarea, a&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngBlur </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon blur. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section> <p>See <a href=\"ngclick\">ngClick</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngBlur\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngBlur</a>\n  </p>\n</div>\n","api/ng/directive/ngchange":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngChange.js?message=docs(ngChange)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngChange.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngChange</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Evaluate the given expression when the user changes the input. The expression is evaluated immediately, unlike the JavaScript onchange event which only triggers at the end of a change (usually, when the user leaves the form element or presses the return key).</p> <p>The <code>ngChange</code> expression is only evaluated when a change in the input value causes a new value to be committed to the model.</p> <p>It will not be evaluated:</p> <ul> <li>if the value returned from the <code>$parsers</code> transformation pipeline has not changed</li> <li>if the input has continued to be invalid since the model will stay <code>null</code>\n</li> <li>if the model is changed programmatically and not by a change to the input value</li> </ul> <p>Note, this directive requires <code>ngModel</code> to be present.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;input\n  ng-change=\"\"&gt;\n...\n&lt;/input&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngChange </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon change in input value.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngChange\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngChange</a>\n  </p>\n</div>\n","api/ng/directive/ngchecked":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/attrs.js?message=docs(ngChecked)%3A%20describe%20your%20change...#L202\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/attrs.js#L202\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngChecked</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The HTML specification does not require browsers to preserve the values of boolean attributes such as checked. (Their presence means true and their absence means false.) If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute. The <code>ngChecked</code> directive solves this problem for the <code>checked</code> attribute. This complementary directive is not removed by the browser and so provides a permanent reliable place to store the binding information.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 100.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;INPUT\n  ng-checked=\"\"&gt;\n...\n&lt;/INPUT&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngChecked </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p>If the <a href=\"../../../guide/expression\">expression</a> is truthy, then special attribute \"checked\" will be set on the element</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngChecked\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngChecked</a>\n  </p>\n</div>\n","api/ng/directive/ngclass":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngClass.js?message=docs(ngClass)%3A%20describe%20your%20change...#L117\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngClass.js#L117\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngClass</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngClass</code> directive allows you to dynamically set CSS classes on an HTML element by databinding an expression that represents all classes to be added.</p> <p>The directive operates in three different ways, depending on which of three types the expression evaluates to:</p> <ol> <li>\n<p>If the expression evaluates to a string, the string should be one or more space-delimited class names.</p> </li> <li>\n<p>If the expression evaluates to an array, each element of the array should be a string that is one or more space-delimited class names.</p> </li> <li>\n<p>If the expression evaluates to an object, then for each key-value pair of the object with a truthy value the corresponding key is used as a class name.</p> </li> </ol> <p>The directive won't add duplicate classes if a particular class was already set.</p> <p>When the expression changes, the previously added classes are removed and only then the new classes are added.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-class=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> <li>as CSS class: <pre data-language=\"html\">&lt;ANY class=\"ng-class: ;\"&gt; ... &lt;/ANY&gt;</pre> </li> </ul>\n</div> <h2 id=\"animations\">Animations</h2> <p><strong>add</strong> - happens just before the class is applied to the elements</p> <p><strong>remove</strong> - happens just before the class is removed from the element</p> <a href=\"../../nganimate/service/%24animate\">Click here</a> to learn more about the steps involved in the animation. <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngClass </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to eval. The result of the evaluation can be a string representing space delimited class names, an array, or a map of class names to boolean values. In the case of a map, the names of the properties whose values are truthy will be added as css classes to the element.</p> </td> </tr> </tbody> </table> </section> <p>Example that demonstrates basic bindings via ngClass directive. </p> <h2 id=\"animations\">Animations</h2> <p> The example below demonstrates how to perform animations using ngClass.</p>  <h2 id=\"ngclass-and-pre-existing-css3-transitions-animations\">ngClass and pre-existing CSS3 Transitions/Animations</h2> <p> The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure. Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure to view the step by step details of <a href=\"../service/%24animate#addClass.html\">$animate.addClass</a> and <a href=\"../service/%24animate#removeClass.html\">$animate.removeClass</a>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngClass\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngClass</a>\n  </p>\n</div>\n","api/ng/directive/ngclasseven":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngClass.js?message=docs(ngClassEven)%3A%20describe%20your%20change...#L312\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngClass.js#L312\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngClassEven</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngClassOdd</code> and <code>ngClassEven</code> directives work exactly as <a href=\"ngclass\">ngClass</a>, except they work in conjunction with <code>ngRepeat</code> and take effect only on odd (even) rows.</p> <p>This directive can be applied only within the scope of an <a href=\"ngrepeat\">ngRepeat</a>.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-class-even=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> <li>as CSS class: <pre data-language=\"html\">&lt;ANY class=\"ng-class-even: ;\"&gt; ... &lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngClassEven </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to eval. The result of the evaluation can be a string representing space delimited class names or an array.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngClassEven\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngClassEven</a>\n  </p>\n</div>\n","api/ng/directive/ngclassodd":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngClass.js?message=docs(ngClassOdd)%3A%20describe%20your%20change...#L264\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngClass.js#L264\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngClassOdd</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngClassOdd</code> and <code>ngClassEven</code> directives work exactly as <a href=\"ngclass\">ngClass</a>, except they work in conjunction with <code>ngRepeat</code> and take effect only on odd (even) rows.</p> <p>This directive can be applied only within the scope of an <a href=\"ngrepeat\">ngRepeat</a>.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-class-odd=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> <li>as CSS class: <pre data-language=\"html\">&lt;ANY class=\"ng-class-odd: ;\"&gt; ... &lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngClassOdd </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to eval. The result of the evaluation can be a string representing space delimited class names or an array.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngClassOdd\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngClassOdd</a>\n  </p>\n</div>\n","api/ng/directive/ngclick":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngClick)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngClick</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The ngClick directive allows you to specify custom behavior when an element is clicked.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-click=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngClick </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon click. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngClick\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngClick</a>\n  </p>\n</div>\n","api/ng/directive/ngcloak":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngCloak.js?message=docs(ngCloak)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngCloak.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngCloak</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngCloak</code> directive is used to prevent the Angular html template from being briefly displayed by the browser in its raw (uncompiled) form while your application is loading. Use this directive to avoid the undesirable flicker effect caused by the html template display.</p> <p>The directive can be applied to the <code>&lt;body&gt;</code> element, but the preferred usage is to apply multiple <code>ngCloak</code> directives to small portions of the page to permit progressive rendering of the browser view.</p> <p><code>ngCloak</code> works in cooperation with the following css rule embedded within <code>angular.js</code> and <code>angular.min.js</code>. For CSP mode please add <code>angular-csp.css</code> to your html file (see <a href=\"ngcsp\">ngCsp</a>).</p> <pre data-language=\"css\">[ng\\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {\n  display: none !important;\n}\n</pre> <p>When this css rule is loaded by the browser, all html elements (including their children) that are tagged with the <code>ngCloak</code> directive are hidden. When Angular encounters this directive during the compilation of the template it deletes the <code>ngCloak</code> element attribute, making the compiled element visible.</p> <p>For the best result, the <code>angular.js</code> script must be loaded in the head section of the html document; alternatively, the css rule above must be included in the external stylesheet of the application.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY&gt;\n...\n&lt;/ANY&gt;</pre> </li> <li>as CSS class: <pre data-language=\"html\">&lt;ANY class=\"\"&gt; ... &lt;/ANY&gt;</pre> </li> </ul>\n</div>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngCloak\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngCloak</a>\n  </p>\n</div>\n","api/ng/directive/ngcontroller":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngController.js?message=docs(ngController)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngController.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngController</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngController</code> directive attaches a controller class to the view. This is a key aspect of how angular supports the principles behind the Model-View-Controller design pattern.</p> <p>MVC components in angular:</p> <ul> <li>Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties are accessed through bindings.</li> <li>View — The template (HTML with data bindings) that is rendered into the View.</li> <li>Controller — The <code>ngController</code> directive specifies a Controller class; the class contains business logic behind the application to decorate the scope with functions and values</li> </ul> <p>Note that you can also attach controllers to the DOM by declaring it in a route definition via the <a href=\"../../ngroute/service/%24route\">$route</a> service. A common mistake is to declare the controller again using <code>ng-controller</code> in the template itself. This will cause the controller to be attached and executed twice.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive creates new scope.</li> <li>This directive executes at priority level 500.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-controller=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngController </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p>Name of a constructor function registered with the current <a href=\"../provider/%24controllerprovider\">$controllerProvider</a> or an <a href=\"../../../guide/expression\">expression</a> that on the current scope evaluates to a constructor function.</p> <p>The controller instance can be published into a scope property by specifying <code>ng-controller=\"as propertyName\"</code>.</p> <p>If the current <code>$controllerProvider</code> is configured to use globals (via <a href=\"../provider/%24controllerprovider#allowGlobals.html\"><code>$controllerProvider.allowGlobals()</code></a>), this may also be the name of a globally accessible constructor function (not recommended).</p> </td> </tr> </tbody> </table> </section> <p>Here is a simple form for editing user contact information. Adding, removing, clearing, and greeting are methods declared on the controller (see source tab). These methods can easily be called from the angular markup. Any changes to the data are automatically reflected in the View without the need for a manual update.</p> <p>Two different declaration styles are included below:</p> <ul> <li>one binds methods and properties directly onto the controller using <code>this</code>: <code>ng-controller=\"SettingsController1 as settings\"</code>\n</li> <li>one injects <code>$scope</code> into the controller: <code>ng-controller=\"SettingsController2\"</code>\n</li> </ul> <p>The second option is more common in the Angular community, and is generally used in boilerplates and in this guide. However, there are advantages to binding properties directly to the controller and avoiding scope.</p> <ul> <li>Using <code>controller as</code> makes it obvious which controller you are accessing in the template when multiple controllers apply to an element.</li> <li>If you are writing your controllers as classes you have easier access to the properties and methods, which will appear on the scope, from inside the controller code.</li> <li>Since there is always a <code>.</code> in the bindings, you don't have to worry about prototypal inheritance masking primitives.</li> </ul> <p>This example demonstrates the <code>controller as</code> syntax.</p>  <p>This example demonstrates the \"attach to <code>$scope</code>\" style of controller.</p>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngController\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngController</a>\n  </p>\n</div>\n","api/ng/directive/ngcopy":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngCopy)%3A%20describe%20your%20change...#L424\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L424\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngCopy</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on copy event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;window, input, select, textarea, a\n  ng-copy=\"\"&gt;\n...\n&lt;/window, input, select, textarea, a&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngCopy </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon copy. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngCopy\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngCopy</a>\n  </p>\n</div>\n","api/ng/directive/ngcsp":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngCsp.js?message=docs(ngCsp)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngCsp.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngCsp</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Enables <a href=\"https://developer.mozilla.org/en/Security/CSP\">CSP (Content Security Policy)</a> support.</p> <p>This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.</p> <p>CSP forbids apps to use <code>eval</code> or <code>Function(string)</code> generated functions (among other things). For Angular to be CSP compatible there are only two things that we need to do differently:</p> <ul> <li>don't use <code>Function</code> constructor to generate optimized value getters</li> <li>don't inject custom stylesheet into the document</li> </ul> <p>AngularJS uses <code>Function(string)</code> generated functions as a speed optimization. Applying the <code>ngCsp</code> directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will be raised.</p> <p>CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically includes some CSS rules (e.g. <a href=\"ngcloak\">ngCloak</a>). To make those directives work in CSP mode, include the <code>angular-csp.css</code> manually.</p> <p>Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This autodetection however triggers a CSP error to be logged in the console:</p> <pre>Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of\nscript in the following Content Security Policy directive: \"default-src 'self'\". Note that\n'script-src' was not explicitly set, so 'default-src' is used as a fallback.\n</pre> <p>This error is harmless but annoying. To prevent the error from showing up, put the <code>ngCsp</code> directive on the root element of the application or on the <code>angular.js</code> script tag, whichever appears first in the html document.</p> <p><em>Note: This directive is only available in the <code>ng-csp</code> and <code>data-ng-csp</code> attribute form.</em></p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;html&gt;\n...\n&lt;/html&gt;</pre> </li> </ul>\n</div> <p>This example shows how to apply the <code>ngCsp</code> directive to the <code>html</code> tag.</p> <pre data-language=\"html\">&lt;!doctype html&gt;\n&lt;html ng-app ng-csp&gt;\n...\n...\n&lt;/html&gt;\n</pre> <p>// Note: the suffix <code>.csp</code> in the example name triggers // csp mode in our http server! </p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngCsp\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngCsp</a>\n  </p>\n</div>\n","api/ng/directive/ngcut":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngCut)%3A%20describe%20your%20change...#L445\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L445\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngCut</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on cut event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;window, input, select, textarea, a\n  ng-cut=\"\"&gt;\n...\n&lt;/window, input, select, textarea, a&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngCut </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon cut. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngCut\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngCut</a>\n  </p>\n</div>\n","api/ng/directive/ngdblclick":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngDblclick)%3A%20describe%20your%20change...#L79\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L79\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngDblclick</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngDblclick</code> directive allows you to specify custom behavior on a dblclick event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-dblclick=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngDblclick </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon a dblclick. (The Event object is available as <code>$event</code>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngDblclick\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngDblclick</a>\n  </p>\n</div>\n","api/ng/directive/ngdisabled":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/attrs.js?message=docs(ngDisabled)%3A%20describe%20your%20change...#L154\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/attrs.js#L154\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngDisabled</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>This directive sets the <code>disabled</code> attribute on the element if the <a href=\"../../../guide/expression\">expression</a> inside <code>ngDisabled</code> evaluates to truthy.</p> <p>A special directive is necessary because we cannot use interpolation inside the <code>disabled</code> attribute. The following example would make the button enabled on Chrome/Firefox but not on older IEs:</p> <pre data-language=\"html\">&lt;!-- See below for an example of ng-disabled being used correctly --&gt;\n&lt;div ng-init=\"isDisabled = false\"&gt;\n &lt;button disabled=\"{{isDisabled}}\"&gt;Disabled&lt;/button&gt;\n&lt;/div&gt;\n</pre> <p>This is because the HTML specification does not require browsers to preserve the values of boolean attributes such as <code>disabled</code> (Their presence means true and their absence means false.) If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 100.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;INPUT\n  ng-disabled=\"\"&gt;\n...\n&lt;/INPUT&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngDisabled </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p>If the <a href=\"../../../guide/expression\">expression</a> is truthy, then the <code>disabled</code> attribute will be set on the element</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngDisabled\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngDisabled</a>\n  </p>\n</div>\n","api/ng/directive/ngfocus":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngFocus)%3A%20describe%20your%20change...#L380\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L380\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngFocus</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on focus event.</p> <p>Note: As the <code>focus</code> event is executed synchronously when calling <code>input.focus()</code> AngularJS executes the expression using <code>scope.$evalAsync</code> if the event is fired during an <code>$apply</code> to ensure a consistent state.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;window, input, select, textarea, a\n  ng-focus=\"\"&gt;\n...\n&lt;/window, input, select, textarea, a&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngFocus </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon focus. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section> <p>See <a href=\"ngclick\">ngClick</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngFocus\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngFocus</a>\n  </p>\n</div>\n","api/ng/directive/ngform":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/form.js?message=docs(ngForm)%3A%20describe%20your%20change...#L286\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/form.js#L286\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngForm</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Nestable alias of <a href=\"form\"><code>form</code></a> directive. HTML does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a sub-group of controls needs to be determined.</p> <p>Note: the purpose of <code>ngForm</code> is to group controls, but not to be a replacement for the <code>&lt;form&gt;</code> tag with all of its capabilities (e.g. posting to the server, ...).</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as element: (This directive can be used as custom element, but be aware of <a href=\"../../../guide/ie\">IE restrictions</a>). <pre data-language=\"html\">&lt;ng-form\n  [name=\"\"]&gt;\n...\n&lt;/ng-form&gt;</pre> </li> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  [ng-form=\"\"]&gt;\n...\n&lt;/ANY&gt;</pre> </li> <li>as CSS class: <pre data-language=\"html\">&lt;ANY class=\"[ng-form: ;]\"&gt; ... &lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngForm | name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Name of the form. If specified, the form controller will be published into related scope, under this name.</p> </td> </tr> </tbody> </table> </section> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngForm\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngForm</a>\n  </p>\n</div>\n","api/ng/directive/nghide":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngShowHide.js?message=docs(ngHide)%3A%20describe%20your%20change...#L180\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngShowHide.js#L180\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngHide</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngHide</code> directive shows or hides the given HTML element based on the expression provided to the <code>ngHide</code> attribute. The element is shown or hidden by removing or adding the <code>ng-hide</code> CSS class onto the element. The <code>.ng-hide</code> CSS class is predefined in AngularJS and sets the display style to none (using an !important flag). For CSP mode please add <code>angular-csp.css</code> to your html file (see <a href=\"ngcsp\">ngCsp</a>).</p> <pre data-language=\"html\">&lt;!-- when $scope.myValue is truthy (element is hidden) --&gt;\n&lt;div ng-hide=\"myValue\" class=\"ng-hide\"&gt;&lt;/div&gt;\n\n&lt;!-- when $scope.myValue is falsy (element is visible) --&gt;\n&lt;div ng-hide=\"myValue\"&gt;&lt;/div&gt;\n</pre> <p>When the <code>ngHide</code> expression evaluates to a truthy value then the <code>.ng-hide</code> CSS class is added to the class attribute on the element causing it to become hidden. When falsy, the <code>.ng-hide</code> CSS class is removed from the element causing the element not to appear hidden.</p> <h2 id=\"why-is-important-used-\">Why is !important used?</h2> <p>You may be wondering why !important is used for the <code>.ng-hide</code> CSS class. This is because the <code>.ng-hide</code> selector can be easily overridden by heavier selectors. For example, something as simple as changing the display style on a HTML list item would make hidden elements appear visible. This also becomes a bigger issue when dealing with CSS frameworks.</p> <p>By using !important, the show and hide behavior will work as expected despite any clash between CSS selector specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the styling to change how to hide an element then it is just a matter of using !important in their own CSS code.</p> <h3 id=\"overriding-ng-hide-\">Overriding .ng-hide</h3> <p>By default, the <code>.ng-hide</code> class will style the element with <code>display: none!important</code>. If you wish to change the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the <code>.ng-hide</code> class in CSS:</p> <pre data-language=\"css\">.ng-hide {\n  /* this is just another form of hiding an element */\n  display: block!important;\n  position: absolute;\n  top: -9999px;\n  left: -9999px;\n}\n</pre> <p>By default you don't need to override in CSS anything and the animations will work around the display style.</p> <h2 id=\"a-note-about-animations-with-nghide-\">A note about animations with ngHide</h2> <p>Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression is true and false. This system works like the animation system present with ngClass, except that the <code>.ng-hide</code> CSS class is added and removed for you instead of your own CSS class.</p> <pre data-language=\"css\">//\n//a working example can be found at the bottom of this page\n//\n.my-element.ng-hide-add, .my-element.ng-hide-remove {\n  transition: 0.5s linear all;\n}\n\n.my-element.ng-hide-add { ... }\n.my-element.ng-hide-add.ng-hide-add-active { ... }\n.my-element.ng-hide-remove { ... }\n.my-element.ng-hide-remove.ng-hide-remove-active { ... }\n</pre> <p>Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display property to block during animation states--ngAnimate will handle the style toggling automatically for you.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-hide=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <h2 id=\"animations\">Animations</h2> <p>removeClass: <code>.ng-hide</code> - happens after the <code>ngHide</code> expression evaluates to a truthy value and just before the contents are set to hidden addClass: <code>.ng-hide</code> - happens after the <code>ngHide</code> expression evaluates to a non truthy value and just before the contents are set to visible</p> <a href=\"../../nganimate/service/%24animate\">Click here</a> to learn more about the steps involved in the animation. <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngHide </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p>If the <a href=\"../../../guide/expression\">expression</a> is truthy then the element is shown or hidden respectively.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngHide\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngHide</a>\n  </p>\n</div>\n","api/ng/directive/nghref":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/attrs.js?message=docs(ngHref)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/attrs.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngHref</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Using Angular markup like <code>{{hash}}</code> in an href attribute will make the link go to the wrong URL if the user clicks it before Angular has a chance to replace the <code>{{hash}}</code> markup with its value. Until Angular replaces the markup the link will be broken and will most likely return a 404 error. The <code>ngHref</code> directive solves this problem.</p> <p>The wrong way to write it:</p> <pre data-language=\"html\">&lt;a href=\"http://www.gravatar.com/avatar/{{hash}}\"&gt;link1&lt;/a&gt;\n</pre> <p>The correct way to write it:</p> <pre data-language=\"html\">&lt;a ng-href=\"http://www.gravatar.com/avatar/{{hash}}\"&gt;link1&lt;/a&gt;\n</pre> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 99.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;A\n  ng-href=\"\"&gt;\n...\n&lt;/A&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngHref </td> <td> <code class=\"label type-hint type-hint-template\">template</code> </td> <td> <p>any string which can contain <code>{{}}</code> markup.</p> </td> </tr> </tbody> </table> </section> <p>This example shows various combinations of <code>href</code>, <code>ng-href</code> and <code>ng-click</code> attributes in links and their different behaviors: </p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngHref\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngHref</a>\n  </p>\n</div>\n","api/ng/directive/ngif":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngIf.js?message=docs(ngIf)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngIf.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngIf</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngIf</code> directive removes or recreates a portion of the DOM tree based on an {expression}. If the expression assigned to <code>ngIf</code> evaluates to a false value then the element is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.</p> <p><code>ngIf</code> differs from <code>ngShow</code> and <code>ngHide</code> in that <code>ngIf</code> completely removes and recreates the element in the DOM rather than changing its visibility via the <code>display</code> css property. A common case when this difference is significant is when using css selectors that rely on an element's position within the DOM, such as the <code>:first-child</code> or <code>:last-child</code> pseudo-classes.</p> <p>Note that when an element is removed using <code>ngIf</code> its scope is destroyed and a new scope is created when the element is restored. The scope created within <code>ngIf</code> inherits from its parent scope using <a href=\"https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance\">prototypal inheritance</a>. An important implication of this is if <code>ngModel</code> is used within <code>ngIf</code> to bind to a javascript primitive defined in the parent scope. In this case any modifications made to the variable within the child scope will override (hide) the value in the parent scope.</p> <p>Also, <code>ngIf</code> recreates elements using their compiled state. An example of this behavior is if an element's class attribute is directly modified after it's compiled, using something like jQuery's <code>.addClass()</code> method, and the element is later removed. When <code>ngIf</code> recreates the element the added class will be lost because the original compiled state is used to regenerate the element.</p> <p>Additionally, you can provide animations via the <code>ngAnimate</code> module to animate the <code>enter</code> and <code>leave</code> effects.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive creates new scope.</li> <li>This directive executes at priority level 600.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-if=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <h2 id=\"animations\">Animations</h2> <p>enter - happens just after the <code>ngIf</code> contents change and a new DOM element is created and injected into the <code>ngIf</code> container leave - happens just before the <code>ngIf</code> contents are removed from the DOM</p> <a href=\"../../nganimate/service/%24animate\">Click here</a> to learn more about the steps involved in the animation. <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngIf </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p>If the <a href=\"../../../guide/expression\">expression</a> is falsy then the element is removed from the DOM tree. If it is truthy a copy of the compiled element is added to the DOM tree.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngIf\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngIf</a>\n  </p>\n</div>\n","api/ng/directive/nginclude":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngInclude.js?message=docs(ngInclude)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngInclude.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngInclude</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Fetches, compiles and includes an external HTML fragment.</p> <p>By default, the template URL is restricted to the same domain and protocol as the application document. This is done by calling <a href=\"../service/%24sce#getTrustedResourceUrl.html\">$sce.getTrustedResourceUrl</a> on it. To load templates from other domains or protocols you may either <a href=\"../provider/%24scedelegateprovider#resourceUrlWhitelist.html\">whitelist them</a> or <a href=\"../service/%24sce#trustAsResourceUrl.html\">wrap them</a> as trusted values. Refer to Angular's <a href=\"../service/%24sce\">Strict Contextual Escaping</a>.</p> <p>In addition, the browser's <a href=\"https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest\">Same Origin Policy</a> and <a href=\"http://www.w3.org/TR/cors/\">Cross-Origin Resource Sharing (CORS)</a> policy may further restrict whether the template is successfully loaded. For example, <code>ngInclude</code> won't work for cross-domain requests on all browsers and for <code>file://</code> access on some browsers.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive creates new scope.</li> <li>This directive executes at priority level 400.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as element: (This directive can be used as custom element, but be aware of <a href=\"../../../guide/ie\">IE restrictions</a>). <pre data-language=\"html\">&lt;ng-include\n  src=\"\"\n  [onload=\"\"]\n  [autoscroll=\"\"]&gt;\n...\n&lt;/ng-include&gt;</pre> </li> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-include=\"\"\n  [onload=\"\"]\n  [autoscroll=\"\"]&gt;\n...\n&lt;/ANY&gt;</pre> </li> <li>as CSS class: <pre data-language=\"html\">&lt;ANY class=\"ng-include: ; [onload: ;] [autoscroll: ;]\"&gt; ... &lt;/ANY&gt;</pre> </li> </ul>\n</div> <h2 id=\"animations\">Animations</h2> <p>enter - animation is used to bring new content into the browser. leave - animation is used to animate existing content away.</p> <p>The enter and leave animation occur concurrently.</p> <a href=\"../../nganimate/service/%24animate\">Click here</a> to learn more about the steps involved in the animation. <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngInclude | src </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>angular expression evaluating to URL. If the source is a string constant, make sure you wrap it in <strong>single</strong> quotes, e.g. <code>src=\"'myPartialTemplate.html'\"</code>.</p> </td> </tr> <tr> <td> onload <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Expression to evaluate when a new partial is loaded.</p> </td> </tr> <tr> <td> autoscroll <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Whether <code>ngInclude</code> should call <a href=\"../service/%24anchorscroll\">$anchorScroll</a> to scroll the viewport after the content is loaded.</p> <pre>- If the attribute is not set, disable scrolling.\n- If the attribute is set without value, enable scrolling.\n- Otherwise enable scrolling only if the expression evaluates to truthy value.\n</pre> </td> </tr> </tbody> </table> </section> <h2>Events</h2> <ul class=\"events defs\"> <li id=\"$includeContentRequested\"> <h3>$includeContentRequested</h3> <div>\n<p>Emitted every time the ngInclude content is requested.</p> </div> <div class=\"inline\"> <h4>Type:</h4> <div class=\"type\">emit</div> </div> <div class=\"inline\"> <h4>Target:</h4> <div class=\"target\">the scope ngInclude was declared in</div> </div> <section class=\"api-section\"> <h3>Parameters</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> angularEvent </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Synthetic event object.</p> </td> </tr> <tr> <td> src </td> <td> <code class=\"label type-hint type-hint-string\">String</code> </td> <td> <p>URL of content to load.</p> </td> </tr> </tbody> </table> </section>\n</li> <li id=\"$includeContentLoaded\"> <h3>$includeContentLoaded</h3> <div>\n<p>Emitted every time the ngInclude content is reloaded.</p> </div> <div class=\"inline\"> <h4>Type:</h4> <div class=\"type\">emit</div> </div> <div class=\"inline\"> <h4>Target:</h4> <div class=\"target\">the current ngInclude scope</div> </div> <section class=\"api-section\"> <h3>Parameters</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> angularEvent </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Synthetic event object.</p> </td> </tr> <tr> <td> src </td> <td> <code class=\"label type-hint type-hint-string\">String</code> </td> <td> <p>URL of content to load.</p> </td> </tr> </tbody> </table> </section>\n</li> <li id=\"$includeContentError\"> <h3>$includeContentError</h3> <div>\n<p>Emitted when a template HTTP request yields an erroneous response (status &lt; 200 || status &gt; 299)</p> </div> <div class=\"inline\"> <h4>Type:</h4> <div class=\"type\">emit</div> </div> <div class=\"inline\"> <h4>Target:</h4> <div class=\"target\">the scope ngInclude was declared in</div> </div> <section class=\"api-section\"> <h3>Parameters</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> angularEvent </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Synthetic event object.</p> </td> </tr> <tr> <td> src </td> <td> <code class=\"label type-hint type-hint-string\">String</code> </td> <td> <p>URL of content to load.</p> </td> </tr> </tbody> </table> </section>\n</li> </ul>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngInclude\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngInclude</a>\n  </p>\n</div>\n","api/ng/directive/nginit":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngInit.js?message=docs(ngInit)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngInit.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngInit</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngInit</code> directive allows you to evaluate an expression in the current scope.</p> <div class=\"alert alert-error\"> The only appropriate use of <code>ngInit</code> is for aliasing special properties of <a href=\"ngrepeat\"><code>ngRepeat</code></a>, as seen in the demo below. Besides this case, you should use <a href=\"../../../guide/controller\">controllers</a> rather than <code>ngInit</code> to initialize values on a scope. </div> <div class=\"alert alert-warning\"> <strong>Note</strong>: If you have assignment in <code>ngInit</code> along with <a href=\"../service/%24filter\"><code>$filter</code></a>, make sure you have parenthesis for correct precedence: <pre class=\"prettyprint\" data-language=\"html\">\n&lt;div ng-init=\"test1 = (data | orderBy:'name')\"&gt;&lt;/div&gt;\n</pre> </div> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 450.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-init=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> <li>as CSS class: <pre data-language=\"html\">&lt;ANY class=\"ng-init: ;\"&gt; ... &lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngInit </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to eval.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngInit\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngInit</a>\n  </p>\n</div>\n","api/ng/directive/ngkeydown":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngKeydown)%3A%20describe%20your%20change...#L246\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L246\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngKeydown</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on keydown event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-keydown=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngKeydown </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon keydown. (Event object is available as <code>$event</code> and can be interrogated for keyCode, altKey, etc.)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngKeydown\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngKeydown</a>\n  </p>\n</div>\n","api/ng/directive/ngkeypress":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngKeypress)%3A%20describe%20your%20change...#L295\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L295\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngKeypress</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on keypress event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-keypress=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngKeypress </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon keypress. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a> and can be interrogated for keyCode, altKey, etc.)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngKeypress\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngKeypress</a>\n  </p>\n</div>\n","api/ng/directive/ngkeyup":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngKeyup)%3A%20describe%20your%20change...#L268\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L268\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngKeyup</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on keyup event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-keyup=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngKeyup </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon keyup. (Event object is available as <code>$event</code> and can be interrogated for keyCode, altKey, etc.)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngKeyup\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngKeyup</a>\n  </p>\n</div>\n","api/ng/directive/nglist":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngList.js?message=docs(ngList)%3A%20describe%20your%20change...#L4\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngList.js#L4\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngList</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Text input that converts between a delimited string and an array of strings. The default delimiter is a comma followed by a space - equivalent to <code>ng-list=\", \"</code>. You can specify a custom delimiter as the value of the <code>ngList</code> attribute - for example, <code>ng-list=\" | \"</code>.</p> <p>The behaviour of the directive is affected by the use of the <code>ngTrim</code> attribute.</p> <ul> <li>If <code>ngTrim</code> is set to <code>\"false\"</code> then whitespace around both the separator and each list item is respected. This implies that the user of the directive is responsible for dealing with whitespace but also allows you to use whitespace as a delimiter, such as a tab or newline character.</li> <li>Otherwise whitespace around the delimiter is ignored when splitting (although it is respected when joining the list items back together) and whitespace around each list item is stripped before it is added to the model.</li> </ul> <h3 id=\"example-with-validation\">Example with Validation</h3>  <h3 id=\"example-splitting-on-whitespace\">Example - splitting on whitespace</h3>  </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;input\n  [ng-list=\"\"]&gt;\n...\n&lt;/input&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngList <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>optional delimiter that should be used to split the value.</p> </td> </tr> </tbody> </table> </section> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngList\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngList</a>\n  </p>\n</div>\n","api/ng/directive/ngmodel":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngModel.js?message=docs(ngModel)%3A%20describe%20your%20change...#L839\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngModel.js#L839\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngModel</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngModel</code> directive binds an <code>input</code>,<code>select</code>, <code>textarea</code> (or custom form control) to a property on the scope using <a href=\"../type/ngmodel.ngmodelcontroller\">NgModelController</a>, which is created and exposed by this directive.</p> <p><code>ngModel</code> is responsible for:</p> <ul> <li>Binding the view into the model, which other directives such as <code>input</code>, <code>textarea</code> or <code>select</code> require.</li> <li>Providing validation behavior (i.e. required, number, email, url).</li> <li>Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).</li> <li>Setting related css classes on the element (<code>ng-valid</code>, <code>ng-invalid</code>, <code>ng-dirty</code>, <code>ng-pristine</code>, <code>ng-touched</code>, <code>ng-untouched</code>) including animations.</li> <li>Registering the control with its parent <a href=\"form\">form</a>.</li> </ul> <p>Note: <code>ngModel</code> will try to bind to the property given by evaluating the expression on the current scope. If the property doesn't already exist on this scope, it will be created implicitly and added to the scope.</p> <p>For best practices on using <code>ngModel</code>, see:</p> <ul> <li><a href=\"https://github.com/angular/angular.js/wiki/Understanding-Scopes\">Understanding Scopes</a></li> </ul> <p>For basic examples, how to use <code>ngModel</code>, see:</p> <ul> <li>\n<a href=\"input\">input</a><ul> <li><a href=\"../input/input%5Btext%5D\">text</a></li> <li><a href=\"../input/input%5Bcheckbox%5D\">checkbox</a></li> <li><a href=\"../input/input%5Bradio%5D\">radio</a></li> <li><a href=\"../input/input%5Bnumber%5D\">number</a></li> <li><a href=\"../input/input%5Bemail%5D\">email</a></li> <li><a href=\"../input/input%5Burl%5D\">url</a></li> <li><a href=\"../input/input%5Bdate%5D\">date</a></li> <li><a href=\"../input/input%5Bdatetime-local%5D\">datetime-local</a></li> <li><a href=\"../input/input%5Btime%5D\">time</a></li> <li><a href=\"../input/input%5Bmonth%5D\">month</a></li> <li><a href=\"../input/input%5Bweek%5D\">week</a></li> </ul> </li> <li><a href=\"select\">select</a></li> <li><a href=\"textarea\">textarea</a></li> </ul> <h2 id=\"css-classes\">CSS classes</h2> <p>The following CSS classes are added and removed on the associated input/select/textarea element depending on the validity of the model.</p> <ul> <li>\n<code>ng-valid</code>: the model is valid</li> <li>\n<code>ng-invalid</code>: the model is invalid</li> <li>\n<code>ng-valid-[key]</code>: for each valid key added by <code>$setValidity</code>\n</li> <li>\n<code>ng-invalid-[key]</code>: for each invalid key added by <code>$setValidity</code>\n</li> <li>\n<code>ng-pristine</code>: the control hasn't been interacted with yet</li> <li>\n<code>ng-dirty</code>: the control has been interacted with</li> <li>\n<code>ng-touched</code>: the control has been blurred</li> <li>\n<code>ng-untouched</code>: the control hasn't been blurred</li> <li>\n<code>ng-pending</code>: any <code>$asyncValidators</code> are unfulfilled</li> </ul> <p>Keep in mind that ngAnimate can detect each of these classes when added and removed.</p> <h2 id=\"animation-hooks\">Animation Hooks</h2> <p>Animations within models are triggered when any of the associated CSS classes are added and removed on the input element which is attached to the model. These classes are: <code>.ng-pristine</code>, <code>.ng-dirty</code>, <code>.ng-invalid</code> and <code>.ng-valid</code> as well as any other validations that are performed on the model itself. The animations that are triggered within ngModel are similar to how they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well as JS animations.</p> <p>The following example shows a simple way to utilize CSS transitions to style an input element that has been rendered as invalid after it has been validated:</p> <pre>\n//be sure to include ngAnimate as a module to hook into more\n//advanced animations\n.my-input {\n  transition:0.5s linear all;\n  background: white;\n}\n.my-input.ng-invalid {\n  background: red;\n  color:white;\n}\n</pre> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 1.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;input&gt;\n...\n&lt;/input&gt;</pre> </li> </ul>\n</div>  <h2 id=\"binding-to-a-getter-setter\">Binding to a getter/setter</h2> <p>Sometimes it's helpful to bind <code>ngModel</code> to a getter/setter function. A getter/setter is a function that returns a representation of the model when called with zero arguments, and sets the internal state of a model when called with an argument. It's sometimes useful to use this for models that have an internal representation that's different than what the model exposes to the view.</p> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> It's best to keep getters fast because Angular is likely to call them more frequently than other parts of your code. </div> <p>You use this behavior by adding <code>ng-model-options=\"{ getterSetter: true }\"</code> to an element that has <code>ng-model</code> attached to it. You can also add <code>ng-model-options=\"{ getterSetter: true }\"</code> to a <code>&lt;form&gt;</code>, which will enable this behavior for all <code>&lt;input&gt;</code>s within it. See <a href=\"ngmodeloptions\"><code>ngModelOptions</code></a> for more.</p> <p>The following example shows how to use <code>ngModel</code> with a getter/setter:</p>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngModel\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngModel</a>\n  </p>\n</div>\n","api/ng/directive/ngmodeloptions":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngModel.js?message=docs(ngModelOptions)%3A%20describe%20your%20change...#L1065\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngModel.js#L1065\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngModelOptions</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Allows tuning how model updates are done. Using <code>ngModelOptions</code> you can specify a custom list of events that will trigger a model update and/or a debouncing delay so that the actual update only takes place when a timer expires; this timer will be reset after another change takes place.</p> <p>Given the nature of <code>ngModelOptions</code>, the value displayed inside input fields in the view might be different than the value in the actual model. This means that if you update the model you should also invoke <a href=\"../type/ngmodel.ngmodelcontroller\"><code>$rollbackViewValue</code></a> on the relevant input field in order to make sure it is synchronized with the model and that any debounced action is canceled.</p> <p>The easiest way to reference the control's <a href=\"../type/ngmodel.ngmodelcontroller\"><code>$rollbackViewValue</code></a> method is by making sure the input is placed inside a form that has a <code>name</code> attribute. This is important because <code>form</code> controllers are published to the related scope under the name in their <code>name</code> attribute.</p> <p>Any pending changes will take place immediately when an enclosing form is submitted via the <code>submit</code> event. Note that <code>ngClick</code> events will occur before the model is updated. Use <code>ngSubmit</code> to have access to the updated model.</p> <p><code>ngModelOptions</code> has an effect on the element it's declared on and its descendants.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-model-options=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModelOptions </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>options to apply to the current model. Valid keys are:</p> <ul> <li>\n<code>updateOn</code>: string specifying which event should the input be bound to. You can set several events using an space delimited list. There is a special event called <code>default</code> that matches the default events belonging of the control.</li> <li>\n<code>debounce</code>: integer value which contains the debounce model update value in milliseconds. A value of 0 triggers an immediate update. If an object is supplied instead, you can specify a custom value for each event. For example: <code>ng-model-options=\"{ updateOn: 'default blur', debounce: {'default': 500, 'blur': 0} }\"</code>\n</li> <li>\n<code>allowInvalid</code>: boolean value which indicates that the model can be set with values that did not validate correctly instead of the default behavior of setting the model to undefined.</li> <li>\n<code>getterSetter</code>: boolean value which determines whether or not to treat functions bound to <code>ngModel</code> as getters/setters.</li> <li>\n<code>timezone</code>: Defines the timezone to be used to read/write the <code>Date</code> instance in the model for <code>&lt;input type=\"date\"&gt;</code>, <code>&lt;input type=\"time\"&gt;</code>, ... . Right now, the only supported value is <code>'UTC'</code>, otherwise the default timezone of the browser will be used.</li> </ul> </td> </tr> </tbody> </table> </section> <p>The following example shows how to override immediate updates. Changes on the inputs within the form will update the model only when the control loses focus (blur event). If <code>escape</code> key is pressed while the input field is focused, the value is reset to the value in the current model.</p>  <p> This one shows how to debounce model changes. Model will be updated only 1 sec after last change. If the <code>Clear</code> button is pressed, any debounced action is canceled and the value becomes empty.</p>  <p> This one shows how to bind to getter/setters:</p>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngModelOptions\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngModelOptions</a>\n  </p>\n</div>\n","api/ng/directive/ngmousedown":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngMousedown)%3A%20describe%20your%20change...#L103\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L103\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngMousedown</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The ngMousedown directive allows you to specify custom behavior on mousedown event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-mousedown=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngMousedown </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon mousedown. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngMousedown\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngMousedown</a>\n  </p>\n</div>\n","api/ng/directive/ngmouseenter":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngMouseenter)%3A%20describe%20your%20change...#L174\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L174\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngMouseenter</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on mouseenter event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-mouseenter=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngMouseenter </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon mouseenter. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngMouseenter\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngMouseenter</a>\n  </p>\n</div>\n","api/ng/directive/ngmouseleave":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngMouseleave)%3A%20describe%20your%20change...#L198\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L198\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngMouseleave</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on mouseleave event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-mouseleave=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngMouseleave </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon mouseleave. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngMouseleave\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngMouseleave</a>\n  </p>\n</div>\n","api/ng/directive/ngmousemove":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngMousemove)%3A%20describe%20your%20change...#L222\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L222\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngMousemove</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on mousemove event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-mousemove=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngMousemove </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon mousemove. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngMousemove\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngMousemove</a>\n  </p>\n</div>\n","api/ng/directive/ngmouseover":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngMouseover)%3A%20describe%20your%20change...#L150\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L150\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngMouseover</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on mouseover event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-mouseover=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngMouseover </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon mouseover. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngMouseover\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngMouseover</a>\n  </p>\n</div>\n","api/ng/directive/ngmouseup":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngMouseup)%3A%20describe%20your%20change...#L127\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L127\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngMouseup</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on mouseup event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-mouseup=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngMouseup </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon mouseup. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngMouseup\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngMouseup</a>\n  </p>\n</div>\n","api/ng/directive/ngnonbindable":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngNonBindable.js?message=docs(ngNonBindable)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngNonBindable.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngNonBindable</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngNonBindable</code> directive tells Angular not to compile or bind the contents of the current DOM element. This is useful if the element contains what appears to be Angular directives and bindings but which should be ignored by Angular. This could be the case if you have a site that displays snippets of code, for instance.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 1000.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY&gt;\n...\n&lt;/ANY&gt;</pre> </li> <li>as CSS class: <pre data-language=\"html\">&lt;ANY class=\"\"&gt; ... &lt;/ANY&gt;</pre> </li> </ul>\n</div> <p>In this example there are two locations where a simple interpolation binding (<code>{{}}</code>) is present, but the one wrapped in <code>ngNonBindable</code> is left alone.</p>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngNonBindable\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngNonBindable</a>\n  </p>\n</div>\n","api/ng/directive/ngopen":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/attrs.js?message=docs(ngOpen)%3A%20describe%20your%20change...#L310\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/attrs.js#L310\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngOpen</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The HTML specification does not require browsers to preserve the values of boolean attributes such as open. (Their presence means true and their absence means false.) If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute. The <code>ngOpen</code> directive solves this problem for the <code>open</code> attribute. This complementary directive is not removed by the browser and so provides a permanent reliable place to store the binding information.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 100.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;DETAILS\n  ng-open=\"\"&gt;\n...\n&lt;/DETAILS&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngOpen </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p>If the <a href=\"../../../guide/expression\">expression</a> is truthy, then special attribute \"open\" will be set on the element</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngOpen\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngOpen</a>\n  </p>\n</div>\n","api/ng/directive/ngpaste":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngPaste)%3A%20describe%20your%20change...#L466\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L466\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngPaste</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior on paste event.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;window, input, select, textarea, a\n  ng-paste=\"\"&gt;\n...\n&lt;/window, input, select, textarea, a&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngPaste </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon paste. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngPaste\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngPaste</a>\n  </p>\n</div>\n","api/ng/directive/ngpluralize":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngPluralize.js?message=docs(ngPluralize)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngPluralize.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngPluralize</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p><code>ngPluralize</code> is a directive that displays messages according to en-US localization rules. These rules are bundled with angular.js, but can be overridden (see <a href=\"../../../guide/i18n\">Angular i18n</a> dev guide). You configure ngPluralize directive by specifying the mappings between <a href=\"http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html\">plural categories</a> and the strings to be displayed.</p> <h2 id=\"plural-categories-and-explicit-number-rules\">Plural categories and explicit number rules</h2> <p>There are two <a href=\"http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html\">plural categories</a> in Angular's default en-US locale: \"one\" and \"other\".</p> <p>While a plural category may match many numbers (for example, in en-US locale, \"other\" can match any number that is not 1), an explicit number rule can only match one number. For example, the explicit number rule for \"3\" matches the number 3. There are examples of plural categories and explicit number rules throughout the rest of this documentation.</p> <h2 id=\"configuring-ngpluralize\">Configuring ngPluralize</h2> <p>You configure ngPluralize by providing 2 attributes: <code>count</code> and <code>when</code>. You can also provide an optional attribute, <code>offset</code>.</p> <p>The value of the <code>count</code> attribute can be either a string or an <a href=\"../../../guide/expression\">Angular expression</a>; these are evaluated on the current scope for its bound value.</p> <p>The <code>when</code> attribute specifies the mappings between plural categories and the actual string to be displayed. The value of the attribute should be a JSON object.</p> <p>The following example shows how to configure ngPluralize:</p> <pre data-language=\"html\">&lt;ng-pluralize count=\"personCount\"\n                 when=\"{'0': 'Nobody is viewing.',\n                     'one': '1 person is viewing.',\n                     'other': '{} people are viewing.'}\"&gt;\n&lt;/ng-pluralize&gt;\n</pre> <p>In the example, <code>\"0: Nobody is viewing.\"</code> is an explicit number rule. If you did not specify this rule, 0 would be matched to the \"other\" category and \"0 people are viewing\" would be shown instead of \"Nobody is viewing\". You can specify an explicit number rule for other numbers, for example 12, so that instead of showing \"12 people are viewing\", you can show \"a dozen people are viewing\".</p> <p>You can use a set of closed braces (<code>{}</code>) as a placeholder for the number that you want substituted into pluralized strings. In the previous example, Angular will replace <code>{}</code> with <span><code>{{personCount}}</code></span>. The closed braces <code>{}</code> is a placeholder for <span>{{numberExpression}}</span>.</p> <h2 id=\"configuring-ngpluralize-with-offset\">Configuring ngPluralize with offset</h2> <p>The <code>offset</code> attribute allows further customization of pluralized text, which can result in a better user experience. For example, instead of the message \"4 people are viewing this document\", you might display \"John, Kate and 2 others are viewing this document\". The offset attribute allows you to offset a number by any desired value. Let's take a look at an example:</p> <pre data-language=\"html\">&lt;ng-pluralize count=\"personCount\" offset=2\n              when=\"{'0': 'Nobody is viewing.',\n                     '1': '{{person1}} is viewing.',\n                     '2': '{{person1}} and {{person2}} are viewing.',\n                     'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                     'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\"&gt;\n&lt;/ng-pluralize&gt;\n</pre> <p>Notice that we are still using two plural categories(one, other), but we added three explicit number rules 0, 1 and 2. When one person, perhaps John, views the document, \"John is viewing\" will be shown. When three people view the document, no explicit number rule is found, so an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category. In this case, plural category 'one' is matched and \"John, Mary and one other person are viewing\" is shown.</p> <p>Note that when you specify offsets, you must provide explicit number rules for numbers from 0 up to and including the offset. If you use an offset of 3, for example, you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for plural categories \"one\" and \"other\".</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as element: (This directive can be used as custom element, but be aware of <a href=\"../../../guide/ie\">IE restrictions</a>). <pre data-language=\"html\">&lt;ng-pluralize\n  count=\"\"\n  when=\"\"\n  [offset=\"\"]&gt;\n...\n&lt;/ng-pluralize&gt;</pre> </li> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  count=\"\"\n  when=\"\"\n  [offset=\"\"]&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> count </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p>The variable to be bound to.</p> </td> </tr> <tr> <td> when </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The mapping between plural category to its corresponding strings.</p> </td> </tr> <tr> <td> offset <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Offset to deduct from the total number.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngPluralize\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngPluralize</a>\n  </p>\n</div>\n","api/ng/directive/ngreadonly":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/attrs.js?message=docs(ngReadonly)%3A%20describe%20your%20change...#L237\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/attrs.js#L237\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngReadonly</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The HTML specification does not require browsers to preserve the values of boolean attributes such as readonly. (Their presence means true and their absence means false.) If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute. The <code>ngReadonly</code> directive solves this problem for the <code>readonly</code> attribute. This complementary directive is not removed by the browser and so provides a permanent reliable place to store the binding information.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 100.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;INPUT\n  ng-readonly=\"\"&gt;\n...\n&lt;/INPUT&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngReadonly </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p>If the <a href=\"../../../guide/expression\">expression</a> is truthy, then special attribute \"readonly\" will be set on the element</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngReadonly\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngReadonly</a>\n  </p>\n</div>\n","api/ng/directive/ngselected":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/attrs.js?message=docs(ngSelected)%3A%20describe%20your%20change...#L272\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/attrs.js#L272\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngSelected</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The HTML specification does not require browsers to preserve the values of boolean attributes such as selected. (Their presence means true and their absence means false.) If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute. The <code>ngSelected</code> directive solves this problem for the <code>selected</code> attribute. This complementary directive is not removed by the browser and so provides a permanent reliable place to store the binding information.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 100.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;OPTION\n  ng-selected=\"\"&gt;\n...\n&lt;/OPTION&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngSelected </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p>If the <a href=\"../../../guide/expression\">expression</a> is truthy, then special attribute \"selected\" will be set on the element</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngSelected\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngSelected</a>\n  </p>\n</div>\n","api/ng/directive/ngshow":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngShowHide.js?message=docs(ngShow)%3A%20describe%20your%20change...#L5\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngShowHide.js#L5\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngShow</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngShow</code> directive shows or hides the given HTML element based on the expression provided to the <code>ngShow</code> attribute. The element is shown or hidden by removing or adding the <code>.ng-hide</code> CSS class onto the element. The <code>.ng-hide</code> CSS class is predefined in AngularJS and sets the display style to none (using an !important flag). For CSP mode please add <code>angular-csp.css</code> to your html file (see <a href=\"ngcsp\">ngCsp</a>).</p> <pre data-language=\"html\">&lt;!-- when $scope.myValue is truthy (element is visible) --&gt;\n&lt;div ng-show=\"myValue\"&gt;&lt;/div&gt;\n\n&lt;!-- when $scope.myValue is falsy (element is hidden) --&gt;\n&lt;div ng-show=\"myValue\" class=\"ng-hide\"&gt;&lt;/div&gt;\n</pre> <p>When the <code>ngShow</code> expression evaluates to a falsy value then the <code>.ng-hide</code> CSS class is added to the class attribute on the element causing it to become hidden. When truthy, the <code>.ng-hide</code> CSS class is removed from the element causing the element not to appear hidden.</p> <h2 id=\"why-is-important-used-\">Why is !important used?</h2> <p>You may be wondering why !important is used for the <code>.ng-hide</code> CSS class. This is because the <code>.ng-hide</code> selector can be easily overridden by heavier selectors. For example, something as simple as changing the display style on a HTML list item would make hidden elements appear visible. This also becomes a bigger issue when dealing with CSS frameworks.</p> <p>By using !important, the show and hide behavior will work as expected despite any clash between CSS selector specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the styling to change how to hide an element then it is just a matter of using !important in their own CSS code.</p> <h3 id=\"overriding-ng-hide-\">Overriding .ng-hide</h3> <p>By default, the <code>.ng-hide</code> class will style the element with <code>display: none!important</code>. If you wish to change the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the <code>.ng-hide</code> class CSS. Note that the selector that needs to be used is actually <code>.ng-hide:not(.ng-hide-animate)</code> to cope with extra animation classes that can be added.</p> <pre data-language=\"css\">.ng-hide:not(.ng-hide-animate) {\n  /* this is just another form of hiding an element */\n  display: block!important;\n  position: absolute;\n  top: -9999px;\n  left: -9999px;\n}\n</pre> <p>By default you don't need to override in CSS anything and the animations will work around the display style.</p> <h2 id=\"a-note-about-animations-with-ngshow-\">A note about animations with ngShow</h2> <p>Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression is true and false. This system works like the animation system present with ngClass except that you must also include the !important flag to override the display property so that you can perform an animation when the element is hidden during the time of the animation.</p> <pre data-language=\"css\">//\n//a working example can be found at the bottom of this page\n//\n.my-element.ng-hide-add, .my-element.ng-hide-remove {\n  /* this is required as of 1.3x to properly\n     apply all styling in a show/hide animation */\n  transition: 0s linear all;\n}\n\n.my-element.ng-hide-add-active,\n.my-element.ng-hide-remove-active {\n  /* the transition is defined in the active class */\n  transition: 1s linear all;\n}\n\n.my-element.ng-hide-add { ... }\n.my-element.ng-hide-add.ng-hide-add-active { ... }\n.my-element.ng-hide-remove { ... }\n.my-element.ng-hide-remove.ng-hide-remove-active { ... }\n</pre> <p>Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display property to block during animation states--ngAnimate will handle the style toggling automatically for you.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-show=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <h2 id=\"animations\">Animations</h2> <p>addClass: <code>.ng-hide</code> - happens after the <code>ngShow</code> expression evaluates to a truthy value and the just before contents are set to visible removeClass: <code>.ng-hide</code> - happens after the <code>ngShow</code> expression evaluates to a non truthy value and just before the contents are set to hidden</p> <a href=\"../../nganimate/service/%24animate\">Click here</a> to learn more about the steps involved in the animation. <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngShow </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p>If the <a href=\"../../../guide/expression\">expression</a> is truthy then the element is shown or hidden respectively.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngShow\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngShow</a>\n  </p>\n</div>\n","api/ng/directive/ngsrc":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/attrs.js?message=docs(ngSrc)%3A%20describe%20your%20change...#L102\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/attrs.js#L102\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngSrc</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Using Angular markup like <code>{{hash}}</code> in a <code>src</code> attribute doesn't work right: The browser will fetch from the URL with the literal text <code>{{hash}}</code> until Angular replaces the expression inside <code>{{hash}}</code>. The <code>ngSrc</code> directive solves this problem.</p> <p>The buggy way to write it:</p> <pre data-language=\"html\">&lt;img src=\"http://www.gravatar.com/avatar/{{hash}}\"/&gt;\n</pre> <p>The correct way to write it:</p> <pre data-language=\"html\">&lt;img ng-src=\"http://www.gravatar.com/avatar/{{hash}}\"/&gt;\n</pre> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 99.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;IMG\n  ng-src=\"\"&gt;\n...\n&lt;/IMG&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngSrc </td> <td> <code class=\"label type-hint type-hint-template\">template</code> </td> <td> <p>any string which can contain <code>{{}}</code> markup.</p> </td> </tr> </tbody> </table> </section> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngSrc\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngSrc</a>\n  </p>\n</div>\n","api/ng/directive/ngsrcset":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/attrs.js?message=docs(ngSrcset)%3A%20describe%20your%20change...#L128\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/attrs.js#L128\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngSrcset</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Using Angular markup like <code>{{hash}}</code> in a <code>srcset</code> attribute doesn't work right: The browser will fetch from the URL with the literal text <code>{{hash}}</code> until Angular replaces the expression inside <code>{{hash}}</code>. The <code>ngSrcset</code> directive solves this problem.</p> <p>The buggy way to write it:</p> <pre data-language=\"html\">&lt;img srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\"/&gt;\n</pre> <p>The correct way to write it:</p> <pre data-language=\"html\">&lt;img ng-srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\"/&gt;\n</pre> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 99.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;IMG\n  ng-srcset=\"\"&gt;\n...\n&lt;/IMG&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngSrcset </td> <td> <code class=\"label type-hint type-hint-template\">template</code> </td> <td> <p>any string which can contain <code>{{}}</code> markup.</p> </td> </tr> </tbody> </table> </section> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngSrcset\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngSrcset</a>\n  </p>\n</div>\n","api/ng/directive/ngstyle":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngStyle.js?message=docs(ngStyle)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngStyle.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngStyle</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngStyle</code> directive allows you to set CSS style on an HTML element conditionally.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-style=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> <li>as CSS class: <pre data-language=\"html\">&lt;ANY class=\"ng-style: ;\"&gt; ... &lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngStyle </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> which evals to an object whose keys are CSS style names and values are corresponding values for those CSS keys.</p> <p>Since some CSS style names are not valid keys for an object, they must be quoted. See the 'background-color' style in the example below.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngStyle\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngStyle</a>\n  </p>\n</div>\n","api/ng/directive/ngrepeat":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngRepeat.js?message=docs(ngRepeat)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngRepeat.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngRepeat</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngRepeat</code> directive instantiates a template once per item from a collection. Each template instance gets its own scope, where the given loop variable is set to the current collection item, and <code>$index</code> is set to the item index or key.</p> <p>Special properties are exposed on the local scope of each template instance, including:</p> <table> <thead> <tr> <th>Variable</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td><code>$index</code></td> <td><code class=\"label type-hint type-hint-number\">number</code></td> <td>iterator offset of the repeated element (0..length-1)</td> </tr> <tr> <td><code>$first</code></td> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>true if the repeated element is first in the iterator.</td> </tr> <tr> <td><code>$middle</code></td> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>true if the repeated element is between the first and last in the iterator.</td> </tr> <tr> <td><code>$last</code></td> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>true if the repeated element is last in the iterator.</td> </tr> <tr> <td><code>$even</code></td> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>true if the iterator position <code>$index</code> is even (otherwise false).</td> </tr> <tr> <td><code>$odd</code></td> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>true if the iterator position <code>$index</code> is odd (otherwise false).</td> </tr> </tbody> </table> <p>Creating aliases for these properties is possible with <a href=\"nginit\"><code>ngInit</code></a>. This may be useful when, for instance, nesting ngRepeats.</p> <h2 id=\"iterating-over-object-properties\">Iterating over object properties</h2> <p>It is possible to get <code>ngRepeat</code> to iterate over the properties of an object using the following syntax:</p> <pre data-language=\"html\">&lt;div ng-repeat=\"(key, value) in myObj\"&gt; ... &lt;/div&gt;\n</pre> <p>You need to be aware that the JavaScript specification does not define what order it will return the keys for an object. In order to have a guaranteed deterministic order for the keys, Angular versions up to and including 1.3 <strong>sort the keys alphabetically</strong>.</p> <p>If this is not desired, the recommended workaround is to convert your object into an array that is sorted into the order that you prefer before providing it to <code>ngRepeat</code>. You could do this with a filter such as <a href=\"http://ngmodules.org/modules/angular-toArrayFilter\">toArrayFilter</a> or implement a <code>$watch</code> on the object yourself.</p> <p>In version 1.4 we will remove the sorting, since it seems that browsers generally follow the strategy of providing keys in the order in which they were defined, although there are exceptions when keys are deleted and reinstated.</p> <h2 id=\"tracking-and-duplicates\">Tracking and Duplicates</h2> <p>When the contents of the collection change, <code>ngRepeat</code> makes the corresponding changes to the DOM:</p> <ul> <li>When an item is added, a new instance of the template is added to the DOM.</li> <li>When an item is removed, its template instance is removed from the DOM.</li> <li>When items are reordered, their respective templates are reordered in the DOM.</li> </ul> <p>By default, <code>ngRepeat</code> does not allow duplicate items in arrays. This is because when there are duplicates, it is not possible to maintain a one-to-one mapping between collection items and DOM elements.</p> <p>If you do need to repeat duplicate items, you can substitute the default tracking behavior with your own using the <code>track by</code> expression.</p> <p>For example, you may track items by the index of each item in the collection, using the special scope property <code>$index</code>:</p> <pre data-language=\"html\">&lt;div ng-repeat=\"n in [42, 42, 43, 43] track by $index\"&gt;\n  {{n}}\n&lt;/div&gt;\n</pre> <p>You may use arbitrary expressions in <code>track by</code>, including references to custom functions on the scope:</p> <pre data-language=\"html\">&lt;div ng-repeat=\"n in [42, 42, 43, 43] track by myTrackingFunction(n)\"&gt;\n  {{n}}\n&lt;/div&gt;\n</pre> <p>If you are working with objects that have an identifier property, you can track by the identifier instead of the whole object. Should you reload your data later, <code>ngRepeat</code> will not have to rebuild the DOM elements for items it has already rendered, even if the JavaScript objects in the collection have been substituted for new ones:</p> <pre data-language=\"html\">&lt;div ng-repeat=\"model in collection track by model.id\"&gt;\n  {{model.name}}\n&lt;/div&gt;\n</pre> <p>When no <code>track by</code> expression is provided, it is equivalent to tracking by the built-in <code>$id</code> function, which tracks items by their identity:</p> <pre data-language=\"html\">&lt;div ng-repeat=\"obj in collection track by $id(obj)\"&gt;\n  {{obj.prop}}\n&lt;/div&gt;\n</pre> <h2 id=\"special-repeat-start-and-end-points\">Special repeat start and end points</h2> <p>To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending the range of the repeater by defining explicit start and end points by using <strong>ng-repeat-start</strong> and <strong>ng-repeat-end</strong> respectively. The <strong>ng-repeat-start</strong> directive works the same as <strong>ng-repeat</strong>, but will repeat all the HTML code (including the tag it's defined on) up to and including the ending HTML tag where <strong>ng-repeat-end</strong> is placed.</p> <p>The example below makes use of this feature:</p> <pre data-language=\"html\">&lt;header ng-repeat-start=\"item in items\"&gt;\n  Header {{ item }}\n&lt;/header&gt;\n&lt;div class=\"body\"&gt;\n  Body {{ item }}\n&lt;/div&gt;\n&lt;footer ng-repeat-end&gt;\n  Footer {{ item }}\n&lt;/footer&gt;\n</pre> <p>And with an input of <code class=\"label type-hint type-hint-object\">['A','B']</code> for the items variable in the example above, the output will evaluate to:</p> <pre data-language=\"html\">&lt;header&gt;\n  Header A\n&lt;/header&gt;\n&lt;div class=\"body\"&gt;\n  Body A\n&lt;/div&gt;\n&lt;footer&gt;\n  Footer A\n&lt;/footer&gt;\n&lt;header&gt;\n  Header B\n&lt;/header&gt;\n&lt;div class=\"body\"&gt;\n  Body B\n&lt;/div&gt;\n&lt;footer&gt;\n  Footer B\n&lt;/footer&gt;\n</pre> <p>The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such as <strong>data-ng-repeat-start</strong>, <strong>x-ng-repeat-start</strong> and <strong>ng:repeat-start</strong>).</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive creates new scope.</li> <li>This directive executes at priority level 1000.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-repeat=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <h2 id=\"animations\">Animations</h2> <p><strong>.enter</strong> - when a new item is added to the list or when an item is revealed after a filter</p> <p><strong>.leave</strong> - when an item is removed from the list or when an item is filtered out</p> <p><strong>.move</strong> - when an adjacent item is filtered out causing a reorder or when the item contents are reordered</p> <a href=\"../../nganimate/service/%24animate\">Click here</a> to learn more about the steps involved in the animation. <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngRepeat </td> <td> <code class=\"label type-hint type-hint-repeat_expression\">repeat_expression</code> </td> <td> <p>The expression indicating how to enumerate a collection. These formats are currently supported:</p> <ul> <li>\n<p><code>variable in expression</code> – where variable is the user defined loop variable and <code>expression</code> is a scope expression giving the collection to enumerate.</p> <p>For example: <code>album in artist.albums</code>.</p> </li> <li>\n<p><code>(key, value) in expression</code> – where <code>key</code> and <code>value</code> can be any user defined identifiers, and <code>expression</code> is the scope expression giving the collection to enumerate.</p> <p>For example: <code>(name, age) in {'adam':10, 'amalie':12}</code>.</p> </li> <li>\n<p><code>variable in expression track by tracking_expression</code> – You can also provide an optional tracking expression which can be used to associate the objects in the collection with the DOM elements. If no tracking expression is specified, ng-repeat associates elements by identity. It is an error to have more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are mapped to the same DOM element, which is not possible.) If filters are used in the expression, they should be applied before the tracking expression.</p> <p>For example: <code>item in items</code> is equivalent to <code>item in items track by $id(item)</code>. This implies that the DOM elements will be associated by item identity in the array.</p> <p>For example: <code>item in items track by $id(item)</code>. A built in <code>$id()</code> function can be used to assign a unique <code>$$hashKey</code> property to each item in the array. This property is then used as a key to associated DOM elements with the corresponding item in the array by identity. Moving the same object in array would move the DOM element in the same way in the DOM.</p> <p>For example: <code>item in items track by item.id</code> is a typical pattern when the items come from the database. In this case the object identity does not matter. Two objects are considered equivalent as long as their <code>id</code> property is same.</p> <p>For example: <code>item in items | filter:searchText track by item.id</code> is a pattern that might be used to apply a filter to items in conjunction with a tracking expression.</p> </li> <li>\n<p><code>variable in expression as alias_expression</code> – You can also provide an optional alias expression which will then store the intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message when a filter is active on the repeater, but the filtered result set is empty.</p> <p>For example: <code>item in items | filter:x as results</code> will store the fragment of the repeated items as <code>results</code>, but only after the items have been processed through the filter.</p> </li> </ul> </td> </tr> </tbody> </table> </section> <p>This example initializes the scope to a list of names and then uses <code>ngRepeat</code> to display every person: </p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngRepeat\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngRepeat</a>\n  </p>\n</div>\n","api/ng/directive/ngsubmit":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngEventDirs.js?message=docs(ngSubmit)%3A%20describe%20your%20change...#L317\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngEventDirs.js#L317\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngSubmit</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Enables binding angular expressions to onsubmit events.</p> <p>Additionally it prevents the default action (which for form means sending the request to the server and reloading the current page), but only if the form does not contain <code>action</code>, <code>data-action</code>, or <code>x-action</code> attributes.</p> <div class=\"alert alert-warning\"> <strong>Warning:</strong> Be careful not to cause \"double-submission\" by using both the <code>ngClick</code> and <code>ngSubmit</code> handlers together. See the <a href=\"form#submitting-a-form-and-preventing-the-default-action.html\"><code>form</code> directive documentation</a> for a detailed discussion of when <code>ngSubmit</code> may be triggered. </div> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;form\n  ng-submit=\"\"&gt;\n...\n&lt;/form&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngSubmit </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to eval. (<a href=\"../../../guide/expression#-event-.html\">Event object is available as <code>$event</code></a>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngSubmit\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngSubmit</a>\n  </p>\n</div>\n","api/ng/directive/ngswitch":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngSwitch.js?message=docs(ngSwitch)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngSwitch.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngSwitch</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>ngSwitch</code> directive is used to conditionally swap DOM structure on your template based on a scope expression. Elements within <code>ngSwitch</code> but without <code>ngSwitchWhen</code> or <code>ngSwitchDefault</code> directives will be preserved at the location as specified in the template.</p> <p>The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it from the template cache), <code>ngSwitch</code> simply chooses one of the nested elements and makes it visible based on which element matches the value obtained from the evaluated expression. In other words, you define a container element (where you place the directive), place an expression on the <strong><code>on=\"...\"</code> attribute</strong> (or the <strong><code>ng-switch=\"...\"</code> attribute</strong>), define any inner elements inside of the directive and place a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on expression is evaluated. If a matching expression is not found via a when attribute then an element with the default attribute is displayed.</p> <div class=\"alert alert-info\"> Be aware that the attribute values to match against cannot be expressions. They are interpreted as literal string values to match against. For example, <strong><code>ng-switch-when=\"someVal\"</code></strong> will match against the string <code>\"someVal\"</code> not against the value of the expression <code>$scope.someVal</code>. </div> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive creates new scope.</li> <li>This directive executes at priority level 1200.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <pre data-language=\"html\">&lt;ANY ng-switch=\"expression\"&gt;\n  &lt;ANY ng-switch-when=\"matchValue1\"&gt;...&lt;/ANY&gt;\n  &lt;ANY ng-switch-when=\"matchValue2\"&gt;...&lt;/ANY&gt;\n  &lt;ANY ng-switch-default&gt;...&lt;/ANY&gt;\n&lt;/ANY&gt;\n</pre> </div> <h2 id=\"animations\">Animations</h2> <p>enter - happens after the ngSwitch contents change and the matched child element is placed inside the container leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM</p> <a href=\"../../nganimate/service/%24animate\">Click here</a> to learn more about the steps involved in the animation. <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngSwitch | on </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>expression to match against <code>ng-switch-when</code>. On child elements add:</p> <ul> <li>\n<code>ngSwitchWhen</code>: the case statement to match against. If match then this case will be displayed. If the same match appears multiple times, all the elements will be displayed.</li> <li>\n<code>ngSwitchDefault</code>: the default case when no other case match. If there are multiple default cases, all of them will be displayed when no other case match.</li> </ul> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngSwitch\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngSwitch</a>\n  </p>\n</div>\n","api/ng/directive/ngtransclude":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngTransclude.js?message=docs(ngTransclude)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngTransclude.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngTransclude</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.</p> <p>Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as element: (This directive can be used as custom element, but be aware of <a href=\"../../../guide/ie\">IE restrictions</a>). <pre data-language=\"html\">&lt;ng-transclude&gt;\n...\n&lt;/ng-transclude&gt;</pre> </li> <li>as attribute: <pre data-language=\"html\">&lt;ANY&gt;\n...\n&lt;/ANY&gt;</pre> </li> <li>as CSS class: <pre data-language=\"html\">&lt;ANY class=\"\"&gt; ... &lt;/ANY&gt;</pre> </li> </ul>\n</div>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngTransclude\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngTransclude</a>\n  </p>\n</div>\n","api/ng/directive/ngvalue":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(ngValue)%3A%20describe%20your%20change...#L1552\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L1552\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngValue</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Binds the given expression to the value of <code>&lt;option&gt;</code> or <a href=\"../input/input%5Bradio%5D\"><code>input[radio]</code></a>, so that when the element is selected, the <a href=\"ngmodel\"><code>ngModel</code></a> of that element is set to the bound value.</p> <p><code>ngValue</code> is useful when dynamically generating lists of radio buttons using <a href=\"ngrepeat\"><code>ngRepeat</code></a>, as shown below.</p> <p>Likewise, <code>ngValue</code> can be used to generate <code>&lt;option&gt;</code> elements for the <a href=\"select\"><code>select</code></a> element. In that case however, only strings are supported for the <code>value</code>attribute, so the resulting <code>ngModel</code> will always be a string. Support for <code>select</code> models with non-string values is available via <code>ngOptions</code>.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;input\n  [ng-value=\"\"]&gt;\n...\n&lt;/input&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngValue <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>angular expression, whose value will be bound to the <code>value</code> attribute of the <code>input</code> element</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngValue\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/ngValue</a>\n  </p>\n</div>\n","api/ng/directive/script":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/script.js?message=docs(script)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/script.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>script</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Load the content of a <code>&lt;script&gt;</code> element into <a href=\"../service/%24templatecache\"><code>$templateCache</code></a>, so that the template can be used by <a href=\"nginclude\"><code>ngInclude</code></a>, <a href=\"../../ngroute/directive/ngview\"><code>ngView</code></a>, or <a href=\"../../../guide/directive\">directives</a>. The type of the <code>&lt;script&gt;</code> element must be specified as <code>text/ng-template</code>, and a cache name for the template must be assigned through the element's <code>id</code>, which can then be used as a directive's <code>templateUrl</code>.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as element: <pre data-language=\"html\">&lt;script\n  type=\"\"\n  id=\"\"&gt;\n...\n&lt;/script&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> type </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Must be set to <code>'text/ng-template'</code>.</p> </td> </tr> <tr> <td> id </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Cache name of the template.</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/script\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/script</a>\n  </p>\n</div>\n","api/ng/directive/select":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/select.js?message=docs(select)%3A%20describe%20your%20change...#L4\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/select.js#L4\" class=\"view-source pull-right btn btn-primary\"> View Source </a>select</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>HTML <code>SELECT</code> element with angular data-binding.</p> <h2 id=\"-ngoptions-\">ngOptions</h2> <p>The <code>ngOptions</code> attribute can be used to dynamically generate a list of <code>&lt;option&gt;</code> elements for the <code>&lt;select&gt;</code> element using the array or object obtained by evaluating the <code>ngOptions</code> comprehension expression.</p> <p>In many cases, <code>ngRepeat</code> can be used on <code>&lt;option&gt;</code> elements instead of <code>ngOptions</code> to achieve a similar result. However, <code>ngOptions</code> provides some benefits such as reducing memory and increasing speed by not creating a new scope for each repeated instance, as well as providing more flexibility in how the <code>&lt;select&gt;</code>'s model is assigned via the <code>select</code> <strong><code>as</code></strong> part of the comprehension expression. <code>ngOptions</code> should be used when the <code>&lt;select&gt;</code> model needs to be bound to a non-string value. This is because an option element can only be bound to string values at present.</p> <p>When an item in the <code>&lt;select&gt;</code> menu is selected, the array element or object property represented by the selected option will be bound to the model identified by the <code>ngModel</code> directive.</p> <p>Optionally, a single hard-coded <code>&lt;option&gt;</code> element, with the value set to an empty string, can be nested into the <code>&lt;select&gt;</code> element. This element will then represent the <code>null</code> or \"not selected\" option. See example below for demonstration.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> <code>ngModel</code> compares by reference, not value. This is important when binding to an array of objects. See an example <a href=\"http://jsfiddle.net/qWzTb/\">in this jsfiddle</a>. </div> <h2 id=\"-select-as-\">select <strong><code>as</code></strong>\n</h2> <p>Using <code>select</code> <strong><code>as</code></strong> will bind the result of the <code>select</code> expression to the model, but the value of the <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> html elements will be either the index (for array data sources) or property name (for object data sources) of the value within the collection. If a <strong><code>track by</code></strong> expression is used, the result of that expression will be set as the value of the <code>option</code> and <code>select</code> elements.</p> <h3 id=\"-select-as-and-track-by-\">select <strong><code>as</code></strong> and <strong><code>track by</code></strong>\n</h3> <div class=\"alert alert-warning\"> Do not use <code>select</code> <strong><code>as</code></strong> and <strong><code>track by</code></strong> in the same expression. They are not designed to work together. </div> <p>Consider the following example:</p> <pre data-language=\"html\">&lt;select ng-options=\"item.subItem as item.label for item in values track by item.id\" ng-model=\"selected\"&gt;\n</pre> <pre data-language=\"javascript\">$scope.values = [{\n  id: 1,\n  label: 'aLabel',\n  subItem: { name: 'aSubItem' }\n}, {\n  id: 2,\n  label: 'bLabel',\n  subItem: { name: 'bSubItem' }\n}];\n\n$scope.selected = { name: 'aSubItem' };\n</pre> <p>With the purpose of preserving the selection, the <strong><code>track by</code></strong> expression is always applied to the element of the data source (to <code>item</code> in this example). To calculate whether an element is selected, we do the following:</p> <ol> <li>Apply <strong><code>track by</code></strong> to the elements in the array. In the example: <code>[1, 2]</code>\n</li> <li>Apply <strong><code>track by</code></strong> to the already selected value in <code>ngModel</code>. In the example: this is not possible as <strong><code>track by</code></strong> refers to <code>item.id</code>, but the selected value from <code>ngModel</code> is <code>{name: 'aSubItem'}</code>, so the <strong><code>track by</code></strong> expression is applied to a wrong object, the selected element can't be found, <code>&lt;select&gt;</code> is always reset to the \"not selected\" option.</li> </ol> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as element: <pre data-language=\"html\">&lt;select\n  ng-model=\"\"\n  [name=\"\"]\n  [required=\"\"]\n  [ng-required=\"\"]\n  [ng-options=\"\"]&gt;\n...\n&lt;/select&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> required <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The control is considered valid only if value is entered.</p> </td> </tr> <tr> <td> ngRequired <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Adds <code>required</code> attribute and <code>required</code> validation constraint to the element when the ngRequired expression evaluates to true. Use <code>ngRequired</code> instead of <code>required</code> when you want to data-bind to the <code>required</code> attribute.</p> </td> </tr> <tr> <td> ngOptions <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-comprehension_expression\">comprehension_expression</code> </td> <td> <p>in one of the following forms:</p> <ul> <li>for array data sources:<ul> <li>\n<code>label</code> <strong><code>for</code></strong> <code>value</code> <strong><code>in</code></strong> <code>array</code>\n</li> <li>\n<code>select</code> <strong><code>as</code></strong> <code>label</code> <strong><code>for</code></strong> <code>value</code> <strong><code>in</code></strong> <code>array</code>\n</li> <li>\n<code>label</code> <strong><code>group by</code></strong> <code>group</code> <strong><code>for</code></strong> <code>value</code> <strong><code>in</code></strong> <code>array</code>\n</li> <li>\n<code>label</code> <strong><code>group by</code></strong> <code>group</code> <strong><code>for</code></strong> <code>value</code> <strong><code>in</code></strong> <code>array</code> <strong><code>track by</code></strong> <code>trackexpr</code>\n</li> <li>\n<code>label</code> <strong><code>for</code></strong> <code>value</code> <strong><code>in</code></strong> <code>array</code> | orderBy:<code>orderexpr</code> <strong><code>track by</code></strong> <code>trackexpr</code> (for including a filter with <code>track by</code>)</li> </ul> </li> <li>for object data sources:<ul> <li>\n<code>label</code> <strong><code>for (</code></strong><code>key</code> <strong><code>,</code></strong> <code>value</code><strong><code>) in</code></strong> <code>object</code>\n</li> <li>\n<code>select</code> <strong><code>as</code></strong> <code>label</code> <strong><code>for (</code></strong><code>key</code> <strong><code>,</code></strong> <code>value</code><strong><code>) in</code></strong> <code>object</code>\n</li> <li>\n<code>label</code> <strong><code>group by</code></strong> <code>group</code> <strong><code>for (</code></strong><code>key</code><strong><code>,</code></strong> <code>value</code><strong><code>) in</code></strong> <code>object</code>\n</li> <li>\n<code>select</code> <strong><code>as</code></strong> <code>label</code> <strong><code>group by</code></strong> <code>group</code> <strong><code>for</code> <code>(</code></strong><code>key</code><strong><code>,</code></strong> <code>value</code><strong><code>) in</code></strong> <code>object</code>\n</li> </ul> </li> </ul> <p>Where:</p> <ul> <li>\n<code>array</code> / <code>object</code>: an expression which evaluates to an array / object to iterate over.</li> <li>\n<code>value</code>: local variable which will refer to each item in the <code>array</code> or each property value of <code>object</code> during iteration.</li> <li>\n<code>key</code>: local variable which will refer to a property name in <code>object</code> during iteration.</li> <li>\n<code>label</code>: The result of this expression will be the label for <code>&lt;option&gt;</code> element. The <code>expression</code> will most likely refer to the <code>value</code> variable (e.g. <code>value.propertyName</code>).</li> <li>\n<code>select</code>: The result of this expression will be bound to the model of the parent <code>&lt;select&gt;</code> element. If not specified, <code>select</code> expression will default to <code>value</code>.</li> <li>\n<code>group</code>: The result of this expression will be used to group options using the <code>&lt;optgroup&gt;</code> DOM element.</li> <li>\n<code>trackexpr</code>: Used when working with an array of objects. The result of this expression will be used to identify the objects in the array. The <code>trackexpr</code> will most likely refer to the <code>value</code> variable (e.g. <code>value.propertyName</code>). With this the selection is preserved even when the options are recreated (e.g. reloaded from the server).</li> </ul> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/select\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/select</a>\n  </p>\n</div>\n","api/ng/directive/textarea":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/input.js?message=docs(textarea)%3A%20describe%20your%20change...#L1382\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/input.js#L1382\" class=\"view-source pull-right btn btn-primary\"> View Source </a>textarea</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>HTML textarea element control with angular data-binding. The data-binding and validation properties of this element are exactly the same as those of the <a href=\"input\">input element</a>.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as element: <pre data-language=\"html\">&lt;textarea\n  ng-model=\"\"\n  [name=\"\"]\n  [required=\"\"]\n  [ng-required=\"\"]\n  [ng-minlength=\"\"]\n  [ng-maxlength=\"\"]\n  [ng-pattern=\"\"]\n  [ng-change=\"\"]\n  [ng-trim=\"\"]&gt;\n...\n&lt;/textarea&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngModel </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Assignable angular expression to data-bind to.</p> </td> </tr> <tr> <td> name <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Property name of the form under which the control is published.</p> </td> </tr> <tr> <td> required <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>required</code> validation error key if the value is not entered.</p> </td> </tr> <tr> <td> ngRequired <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Adds <code>required</code> attribute and <code>required</code> validation constraint to the element when the ngRequired expression evaluates to true. Use <code>ngRequired</code> instead of <code>required</code> when you want to data-bind to the <code>required</code> attribute.</p> </td> </tr> <tr> <td> ngMinlength <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Sets <code>minlength</code> validation error key if the value is shorter than minlength.</p> </td> </tr> <tr> <td> ngMaxlength <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Sets <code>maxlength</code> validation error key if the value is longer than maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any length.</p> </td> </tr> <tr> <td> ngPattern <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Sets <code>pattern</code> validation error key if the value does not match the RegExp pattern expression. Expected value is <code>/regexp/</code> for inline patterns or <code>regexp</code> for patterns defined as scope expressions.</p> </td> </tr> <tr> <td> ngChange <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Angular expression to be executed when input changes due to user interaction with the input element.</p> </td> </tr> <tr> <td> ngTrim <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>If set to false Angular will not automatically trim the input.</p> <p><em>(default: true)</em></p> </td> </tr> </tbody> </table> </section> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/directive/textarea\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/directive/textarea</a>\n  </p>\n</div>\n","api/ng/object":"<h1>Object components in ng</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"object/angular.version\">angular.version</a></td> <td>\n<p>An object that contains information about the current AngularJS version. This object has the following properties:</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/object\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/object</a>\n  </p>\n</div>\n","api/ng/object/angular.version":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/AngularPublic.js?message=docs(angular.version)%3A%20describe%20your%20change...#L91\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/AngularPublic.js#L91\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.version</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> object in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>An object that contains information about the current AngularJS version. This object has the following properties:</p> <ul> <li>\n<code>full</code> – <code>{string}</code> – Full version string, such as \"0.9.18\".</li> <li>\n<code>major</code> – <code>{number}</code> – Major version number, such as \"0\".</li> <li>\n<code>minor</code> – <code>{number}</code> – Minor version number, such as \"9\".</li> <li>\n<code>dot</code> – <code>{number}</code> – Dot version number, such as \"18\".</li> <li>\n<code>codeName</code> – <code>{string}</code> – Code name of the release, such as \"jiggling-armfat\".</li> </ul> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/object/angular.version\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/object/angular.version</a>\n  </p>\n</div>\n","api/ng/type":"<h1>Type components in ng</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"type/angular.module\">angular.Module</a></td> <td>\n<p>Interface for configuring angular <a href=\"function/angular.module\">modules</a>.</p> </td> </tr> <tr> <td><a href=\"type/%24cachefactory.cache\">$cacheFactory.Cache</a></td> <td>\n<p>A cache object used to store and retrieve data, primarily used by <a href=\"service/%24http\">$http</a> and the <a href=\"directive/script\">script</a> directive to cache templates and other data.</p> </td> </tr> <tr> <td><a href=\"type/%24compile.directive.attributes\">$compile.directive.Attributes</a></td> <td>\n<p>A shared object between directive compile / linking functions which contains normalized DOM element attributes. The values reflect current binding state <code>{{ }}</code>. The normalization is needed since all of these are treated as equivalent in Angular:</p> </td> </tr> <tr> <td><a href=\"type/form.formcontroller\">form.FormController</a></td> <td>\n<p><code>FormController</code> keeps track of all its controls and nested forms as well as the state of them, such as being valid/invalid or dirty/pristine.</p> </td> </tr> <tr> <td><a href=\"type/ngmodel.ngmodelcontroller\">ngModel.NgModelController</a></td> <td>\n<p><code>NgModelController</code> provides API for the <a href=\"directive/ngmodel\"><code>ngModel</code></a> directive. The controller contains services for data-binding, validation, CSS updates, and value formatting and parsing. It purposefully does not contain any logic which deals with DOM rendering or listening to DOM events. Such DOM related logic should be provided by other directives which make use of <code>NgModelController</code> for data-binding to control elements. Angular provides this DOM logic for most <a href=\"directive/input\"><code>input</code></a> elements. At the end of this page you can find a <a href=\"type/ngmodel.ngmodelcontroller#custom-control-example.html\">custom control example</a> that uses <code>ngModelController</code> to bind to <code>contenteditable</code> elements.</p> </td> </tr> <tr> <td><a href=\"type/%24rootscope.scope\">$rootScope.Scope</a></td> <td>\n<p>A root scope can be retrieved using the <a href=\"service/%24rootscope\">$rootScope</a> key from the <a href=\"../auto/service/%24injector\">$injector</a>. Child scopes are created using the <a href=\"type/%24rootscope.scope#%24new.html\">$new()</a> method. (Most scopes are created automatically when compiled HTML template is executed.) See also the <a href=\"../../guide/scope\">Scopes guide</a> for an in-depth introduction and usage examples.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/type\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/type</a>\n  </p>\n</div>\n","api/ng/type/$cachefactory.cache":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/cacheFactory.js?message=docs(%24cacheFactory.Cache)%3A%20describe%20your%20change...#L102\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/cacheFactory.js#L102\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$cacheFactory.Cache</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> type in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>A cache object used to store and retrieve data, primarily used by <a href=\"../service/%24http\">$http</a> and the <a href=\"../directive/script\">script</a> directive to cache templates and other data.</p> <pre data-language=\"javascript\">angular.module('superCache')\n  .factory('superCache', ['$cacheFactory', function($cacheFactory) {\n    return $cacheFactory('super-cache');\n  }]);\n</pre> <p>Example test:</p> <pre data-language=\"javascript\">it('should behave like a cache', inject(function(superCache) {\n  superCache.put('key', 'value');\n  superCache.put('another key', 'another value');\n\n  expect(superCache.info()).toEqual({\n    id: 'super-cache',\n    size: 2\n  });\n\n  superCache.remove('another key');\n  expect(superCache.get('another key')).toBeUndefined();\n\n  superCache.removeAll();\n  expect(superCache.info()).toEqual({\n    id: 'super-cache',\n    size: 0\n  });\n}));\n</pre> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"put\"> <h3>put(key, value);</h3> <div>\n<p>Inserts a named entry into the <a href=\"%24cachefactory.cache\">Cache</a> object to be retrieved later, and incrementing the size of the cache if the key was not already present in the cache. If behaving like an LRU cache, it will also remove stale entries from the set.</p> <p>It will not insert undefined values into the cache.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> key </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>the key under which the cached data is stored.</p> </td> </tr> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>the value to store alongside the key. If it is undefined, the key will not be stored.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>the value stored.</p> </td> </tr> </table> </li> <li id=\"get\"> <h3>get(key);</h3> <div>\n<p>Retrieves named data stored in the <a href=\"%24cachefactory.cache\">Cache</a> object.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> key </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>the key of the data to be retrieved</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>the value stored.</p> </td> </tr> </table> </li> <li id=\"remove\"> <h3>remove(key);</h3> <div>\n<p>Removes an entry from the <a href=\"%24cachefactory.cache\">Cache</a> object.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> key </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>the key of the entry to be removed</p> </td> </tr> </tbody> </table> </li> <li id=\"removeAll\"> <h3>removeAll();</h3> <div>\n<p>Clears the cache object of any entries.</p> </div> </li> <li id=\"destroy\"> <h3>destroy();</h3> <div>\n<p>Destroys the <a href=\"%24cachefactory.cache\">Cache</a> object entirely, removing it from the <a href=\"../service/%24cachefactory\">$cacheFactory</a> set.</p> </div> </li> <li id=\"info\"> <h3>info();</h3> <div>\n<p>Retrieve information regarding a particular <a href=\"%24cachefactory.cache\">Cache</a>.</p> </div> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">object</code></td> <td>\n<p>an object with the following properties: </p>\n<ul> <li>\n<strong>id</strong>: the id of the cache instance</li> <li>\n<strong>size</strong>: the number of entries kept in the cache instance</li> <li>\n<strong>...</strong>: any additional properties from the options object when creating the cache.</li> </ul> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/type/$cacheFactory.Cache\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/type/$cacheFactory.Cache</a>\n  </p>\n</div>\n","api/ng/type/$compile.directive.attributes":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/compile.js?message=docs(%24compile.directive.Attributes)%3A%20describe%20your%20change...#L2537\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/compile.js#L2537\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$compile.directive.Attributes</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> type in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>A shared object between directive compile / linking functions which contains normalized DOM element attributes. The values reflect current binding state <code>{{ }}</code>. The normalization is needed since all of these are treated as equivalent in Angular:</p> <pre data-language=\"html\">&lt;span ng:bind=\"a\" ng-bind=\"a\" data-ng-bind=\"a\" x-ng-bind=\"a\"&gt;\n</pre> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"$normalize\"> <h3>$normalize(name);</h3> <div>\n<p>Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with <code>x-</code> or <code>data-</code>) to its normalized, camelCase form.</p> <p>Also there is special case for Moz prefix starting with upper case letter.</p> <p>For further information check out the guide on <a href=\"../../../guide/directive#matching-directives.html\">Matching Directives</a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Name to normalize</p> </td> </tr> </tbody> </table> </li> <li id=\"$addClass\"> <h3>$addClass(classVal);</h3> <div>\n<p>Adds the CSS class value specified by the classVal parameter to the element. If animations are enabled then an animation will be triggered for the class addition.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> classVal </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The className value that will be added to the element</p> </td> </tr> </tbody> </table> </li> <li id=\"$removeClass\"> <h3>$removeClass(classVal);</h3> <div>\n<p>Removes the CSS class value specified by the classVal parameter from the element. If animations are enabled then an animation will be triggered for the class removal.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> classVal </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The className value that will be removed from the element</p> </td> </tr> </tbody> </table> </li> <li id=\"$updateClass\"> <h3>$updateClass(newClasses, oldClasses);</h3> <div>\n<p>Adds and removes the appropriate CSS class values to the element based on the difference between the new and old CSS class values (specified as newClasses and oldClasses).</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> newClasses </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The current CSS className value</p> </td> </tr> <tr> <td> oldClasses </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The former CSS className value</p> </td> </tr> </tbody> </table> </li> <li id=\"$observe\"> <h3>$observe(key, fn);</h3> <div>\n<p>Observes an interpolated attribute.</p> <p>The observer function will be invoked once during the next <code>$digest</code> following compilation. The observer is then invoked whenever the interpolated value changes.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> key </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Normalized key. (ie ngAttribute) .</p> </td> </tr> <tr> <td> fn </td> <td> <code class=\"label type-hint type-hint-function\">function(interpolatedValue)</code> </td> <td> <p>Function that will be called whenever the interpolated value of the attribute changes. See the <a href=\"../../../guide/directive#text-and-attribute-bindings.html\">Directives</a> guide for more info.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function()</code></td> <td>\n<p>Returns a deregistration function for this observer.</p> </td> </tr> </table> </li> <li id=\"$set\"> <h3>$set(name, value);</h3> <div>\n<p>Set DOM element attribute value.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Normalized element attribute name of the property to modify. The name is reverse-translated using the <a href=\"%24compile.directive.attributes#%24attr.html\">$attr</a> property to the original name.</p> </td> </tr> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Value to set the attribute to. The value can be an interpolated string.</p> </td> </tr> </tbody> </table> </li> </ul> <h2>Properties</h2> <ul class=\"properties defs\"> <li id=\"$attr\"> <h3>$attr</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>A map of DOM element attribute names to the normalized name. This is needed to do reverse lookup from normalized name back to actual name.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/type/$compile.directive.Attributes\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/type/$compile.directive.Attributes</a>\n  </p>\n</div>\n","api/ng/type/angular.module":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/loader.js?message=docs(angular.Module)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/loader.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.Module</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> type in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Interface for configuring angular <a href=\"../function/angular.module\">modules</a>.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"provider\"> <h3>provider(name, providerType);</h3> <div>\n<p>See <a href=\"../../auto/service/%24provide#provider.html\">$provide.provider()</a>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>service name</p> </td> </tr> <tr> <td> providerType </td> <td> <code class=\"label type-hint type-hint-function\">Function</code> </td> <td> <p>Construction function for creating new instance of the service.</p> </td> </tr> </tbody> </table> </li> <li id=\"factory\"> <h3>factory(name, providerFunction);</h3> <div>\n<p>See <a href=\"../../auto/service/%24provide#factory.html\">$provide.factory()</a>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>service name</p> </td> </tr> <tr> <td> providerFunction </td> <td> <code class=\"label type-hint type-hint-function\">Function</code> </td> <td> <p>Function for creating new instance of the service.</p> </td> </tr> </tbody> </table> </li> <li id=\"service\"> <h3>service(name, constructor);</h3> <div>\n<p>See <a href=\"../../auto/service/%24provide#service.html\">$provide.service()</a>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>service name</p> </td> </tr> <tr> <td> constructor </td> <td> <code class=\"label type-hint type-hint-function\">Function</code> </td> <td> <p>A constructor function that will be instantiated.</p> </td> </tr> </tbody> </table> </li> <li id=\"value\"> <h3>value(name, object);</h3> <div>\n<p>See <a href=\"../../auto/service/%24provide#value.html\">$provide.value()</a>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>service name</p> </td> </tr> <tr> <td> object </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Service instance object.</p> </td> </tr> </tbody> </table> </li> <li id=\"constant\"> <h3>constant(name, object);</h3> <div>\n<p>Because the constant are fixed, they get applied before other provide methods. See <a href=\"../../auto/service/%24provide#constant.html\">$provide.constant()</a>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>constant name</p> </td> </tr> <tr> <td> object </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Constant value.</p> </td> </tr> </tbody> </table> </li> <li id=\"animation\"> <h3>animation(name, animationFactory);</h3> <div>\n<p><strong>NOTE</strong>: animations take effect only if the <strong>ngAnimate</strong> module is loaded.</p> <p>Defines an animation hook that can be later used with <a href=\"../../nganimate/service/%24animate\">$animate</a> service and directives that use this service.</p> <pre data-language=\"javascript\">module.animation('.animation-name', function($inject1, $inject2) {\n  return {\n    eventName : function(element, done) {\n      //code to run the animation\n      //once complete, then run done()\n      return function cancellationFunction(element) {\n        //code to cancel the animation\n      }\n    }\n  }\n})\n</pre> <p>See <a href=\"../provider/%24animateprovider#register.html\">$animateProvider.register()</a> and <a href=\"../../nganimate\">ngAnimate module</a> for more information.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>animation name</p> </td> </tr> <tr> <td> animationFactory </td> <td> <code class=\"label type-hint type-hint-function\">Function</code> </td> <td> <p>Factory function for creating new instance of an animation.</p> </td> </tr> </tbody> </table> </li> <li id=\"filter\"> <h3>filter(name, filterFactory);</h3> <div>\n<p>See <a href=\"../provider/%24filterprovider#register.html\">$filterProvider.register()</a>.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> Filter names must be valid angular <a href=\"../../../guide/expression\"><code>Expressions</code></a> identifiers, such as <code>uppercase</code> or <code>orderBy</code>. Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace your filters, then you can use capitalization (<code>myappSubsectionFilterx</code>) or underscores (<code>myapp_subsection_filterx</code>). </div>\n</div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Filter name - this must be a valid angular expression identifier</p> </td> </tr> <tr> <td> filterFactory </td> <td> <code class=\"label type-hint type-hint-function\">Function</code> </td> <td> <p>Factory function for creating new instance of filter.</p> </td> </tr> </tbody> </table> </li> <li id=\"controller\"> <h3>controller(name, constructor);</h3> <div>\n<p>See <a href=\"../provider/%24controllerprovider#register.html\">$controllerProvider.register()</a>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Controller name, or an object map of controllers where the keys are the names and the values are the constructors.</p> </td> </tr> <tr> <td> constructor </td> <td> <code class=\"label type-hint type-hint-function\">Function</code> </td> <td> <p>Controller constructor function.</p> </td> </tr> </tbody> </table> </li> <li id=\"directive\"> <h3>directive(name, directiveFactory);</h3> <div>\n<p>See <a href=\"../provider/%24compileprovider#directive.html\">$compileProvider.directive()</a>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Directive name, or an object map of directives where the keys are the names and the values are the factories.</p> </td> </tr> <tr> <td> directiveFactory </td> <td> <code class=\"label type-hint type-hint-function\">Function</code> </td> <td> <p>Factory function for creating new instance of directives.</p> </td> </tr> </tbody> </table> </li> <li id=\"config\"> <h3>config(configFn);</h3> <div>\n<p>Use this method to register work which needs to be performed on module loading. For more about how to configure services, see <a href=\"../../../guide/providers#provider-recipe.html\">Provider Recipe</a>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> configFn </td> <td> <code class=\"label type-hint type-hint-function\">Function</code> </td> <td> <p>Execute this function on module load. Useful for service configuration.</p> </td> </tr> </tbody> </table> </li> <li id=\"run\"> <h3>run(initializationFn);</h3> <div>\n<p>Use this method to register work which should be performed when the injector is done loading all modules.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> initializationFn </td> <td> <code class=\"label type-hint type-hint-function\">Function</code> </td> <td> <p>Execute this function after injector creation. Useful for application initialization.</p> </td> </tr> </tbody> </table> </li> </ul> <h2>Properties</h2> <ul class=\"properties defs\"> <li id=\"requires\"> <h3>requires</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Holds the list of modules which the injector will load before the current module is loaded.</p> </td> </tr> </table> </li> <li id=\"name\"> <h3>name</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Name of the module.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/type/angular.Module\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/type/angular.Module</a>\n  </p>\n</div>\n","api/ng/type/form.formcontroller":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/form.js?message=docs(form.FormController)%3A%20describe%20your%20change...#L20\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/form.js#L20\" class=\"view-source pull-right btn btn-primary\"> View Source </a>form.FormController</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> type in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p><code>FormController</code> keeps track of all its controls and nested forms as well as the state of them, such as being valid/invalid or dirty/pristine.</p> <p>Each <a href=\"../directive/form\">form</a> directive creates an instance of <code>FormController</code>.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"$rollbackViewValue\"> <h3>$rollbackViewValue();</h3> <div>\n<p>Rollback all form controls pending updates to the <code>$modelValue</code>.</p> <p>Updates may be pending by a debounced event or because the input is waiting for a some future event defined in <code>ng-model-options</code>. This method is typically needed by the reset button of a form that uses <code>ng-model-options</code> to pend updates.</p> </div> </li> <li id=\"$commitViewValue\"> <h3>$commitViewValue();</h3> <div>\n<p>Commit all form controls pending updates to the <code>$modelValue</code>.</p> <p>Updates may be pending by a debounced event or because the input is waiting for a some future event defined in <code>ng-model-options</code>. This method is rarely needed as <code>NgModelController</code> usually handles calling this in response to input events.</p> </div> </li> <li id=\"$addControl\"> <h3>$addControl();</h3> <div>\n<p>Register a control with the form.</p> <p>Input elements using ngModelController do this automatically when they are linked.</p> </div> </li> <li id=\"$removeControl\"> <h3>$removeControl();</h3> <div>\n<p>Deregister a control from the form.</p> <p>Input elements using ngModelController do this automatically when they are destroyed.</p> </div> </li> <li id=\"$setValidity\"> <h3>$setValidity();</h3> <div>\n<p>Sets the validity of a form control.</p> <p>This method will also propagate to parent forms.</p> </div> </li> <li id=\"$setDirty\"> <h3>$setDirty();</h3> <div>\n<p>Sets the form to a dirty state.</p> <p>This method can be called to add the 'ng-dirty' class and set the form to a dirty state (ng-dirty class). This method will also propagate to parent forms.</p> </div> </li> <li id=\"$setPristine\"> <h3>$setPristine();</h3> <div>\n<p>Sets the form to its pristine state.</p> <p>This method can be called to remove the 'ng-dirty' class and set the form to its pristine state (ng-pristine class). This method will also propagate to all the controls contained in this form.</p> <p>Setting a form back to a pristine state is often useful when we want to 'reuse' a form after saving or resetting it.</p> </div> </li> <li id=\"$setUntouched\"> <h3>$setUntouched();</h3> <div>\n<p>Sets the form to its untouched state.</p> <p>This method can be called to remove the 'ng-touched' class and set the form controls to their untouched state (ng-untouched class).</p> <p>Setting a form controls back to their untouched state is often useful when setting the form back to its pristine state.</p> </div> </li> <li id=\"$setSubmitted\"> <h3>$setSubmitted();</h3> <div>\n<p>Sets the form to its submitted state.</p> </div> </li> </ul> <h2>Properties</h2> <ul class=\"properties defs\"> <li id=\"$pristine\"> <h3>$pristine</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if user has not interacted with the form yet.</p> </td> </tr> </table> </li> <li id=\"$dirty\"> <h3>$dirty</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if user has already interacted with the form.</p> </td> </tr> </table> </li> <li id=\"$valid\"> <h3>$valid</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if all of the containing forms and controls are valid.</p> </td> </tr> </table> </li> <li id=\"$invalid\"> <h3>$invalid</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if at least one containing control or form is invalid.</p> </td> </tr> </table> </li> <li id=\"$submitted\"> <h3>$submitted</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if user has submitted the form even if its invalid.</p> </td> </tr> </table> </li> <li id=\"$error\"> <h3>$error</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>Is an object hash, containing references to controls or forms with failing validators, where:</p> <ul> <li>keys are validation tokens (error names),</li> <li>\n<p>values are arrays of controls or forms that have a failing validator for given error name.</p> <p>Built-in validation tokens:</p> </li> <li>\n<p><code>email</code></p> </li> <li><code>max</code></li> <li><code>maxlength</code></li> <li><code>min</code></li> <li><code>minlength</code></li> <li><code>number</code></li> <li><code>pattern</code></li> <li><code>required</code></li> <li><code>url</code></li> <li><code>date</code></li> <li><code>datetimelocal</code></li> <li><code>time</code></li> <li><code>week</code></li> <li><code>month</code></li> </ul> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/type/form.FormController\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/type/form.FormController</a>\n  </p>\n</div>\n","api/ng/provider":"<h1>Provider components in ng</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"provider/%24anchorscrollprovider\">$anchorScrollProvider</a></td> <td>\n<p>Use <code>$anchorScrollProvider</code> to disable automatic scrolling whenever <a href=\"service/%24location#hash.html\">$location.hash()</a> changes.</p> </td> </tr> <tr> <td><a href=\"provider/%24animateprovider\">$animateProvider</a></td> <td>\n<p>Default implementation of $animate that doesn't perform any animations, instead just synchronously performs DOM updates and calls done() callbacks.</p> </td> </tr> <tr> <td><a href=\"provider/%24compileprovider\">$compileProvider</a></td> <td></td> </tr> <tr> <td><a href=\"provider/%24controllerprovider\">$controllerProvider</a></td> <td>\n<p>The <a href=\"service/%24controller\">$controller service</a> is used by Angular to create new controllers.</p> </td> </tr> <tr> <td><a href=\"provider/%24filterprovider\">$filterProvider</a></td> <td>\n<p>Filters are just functions which transform input to an output. However filters need to be Dependency Injected. To achieve this a filter definition consists of a factory function which is annotated with dependencies and is responsible for creating a filter function.</p> </td> </tr> <tr> <td><a href=\"provider/%24httpprovider\">$httpProvider</a></td> <td>\n<p>Use <code>$httpProvider</code> to change the default behavior of the <a href=\"service/%24http\">$http</a> service.</p> </td> </tr> <tr> <td><a href=\"provider/%24interpolateprovider\">$interpolateProvider</a></td> <td>\n<p>Used for configuring the interpolation markup. Defaults to <code>{{</code> and <code>}}</code>.</p> </td> </tr> <tr> <td><a href=\"provider/%24locationprovider\">$locationProvider</a></td> <td>\n<p>Use the <code>$locationProvider</code> to configure how the application deep linking paths are stored.</p> </td> </tr> <tr> <td><a href=\"provider/%24logprovider\">$logProvider</a></td> <td>\n<p>Use the <code>$logProvider</code> to configure how the application logs messages</p> </td> </tr> <tr> <td><a href=\"provider/%24parseprovider\">$parseProvider</a></td> <td>\n<p><code>$parseProvider</code> can be used for configuring the default behavior of the <a href=\"service/%24parse\">$parse</a> service.</p> </td> </tr> <tr> <td><a href=\"provider/%24rootscopeprovider\">$rootScopeProvider</a></td> <td>\n<p>Provider for the $rootScope service.</p> </td> </tr> <tr> <td><a href=\"provider/%24scedelegateprovider\">$sceDelegateProvider</a></td> <td>\n<p>The <code>$sceDelegateProvider</code> provider allows developers to configure the <a href=\"service/%24scedelegate\">$sceDelegate</a> service. This allows one to get/set the whitelists and blacklists used to ensure that the URLs used for sourcing Angular templates are safe. Refer <a href=\"provider/%24scedelegateprovider#resourceUrlWhitelist.html\">$sceDelegateProvider.resourceUrlWhitelist</a> and <a href=\"provider/%24scedelegateprovider#resourceUrlBlacklist.html\">$sceDelegateProvider.resourceUrlBlacklist</a></p> </td> </tr> <tr> <td><a href=\"provider/%24sceprovider\">$sceProvider</a></td> <td>\n<p>The $sceProvider provider allows developers to configure the <a href=\"service/%24sce\">$sce</a> service.</p> <ul> <li>enable/disable Strict Contextual Escaping (SCE) in a module</li> <li>override the default implementation with a custom delegate</li> </ul> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider</a>\n  </p>\n</div>\n","api/ng/provider/$anchorscrollprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/anchorScroll.js?message=docs(%24anchorScrollProvider)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/anchorScroll.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$anchorScrollProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24anchorscroll\">$anchorScroll</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Use <code>$anchorScrollProvider</code> to disable automatic scrolling whenever <a href=\"../service/%24location#hash.html\">$location.hash()</a> changes.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"disableAutoScrolling\"> <h3>disableAutoScrolling();</h3> <div>\n<p>By default, <a href=\"../service/%24anchorscroll\">$anchorScroll()</a> will automatically detect changes to <a href=\"../service/%24location#hash.html\">$location.hash()</a> and scroll to the element matching the new hash.<br> Use this method to disable automatic scrolling.</p> <p>If automatic scrolling is disabled, one must explicitly call <a href=\"../service/%24anchorscroll\">$anchorScroll()</a> in order to scroll to the element related to the current hash.</p> </div> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$anchorScrollProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$anchorScrollProvider</a>\n  </p>\n</div>\n","api/ng/provider/$animateprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/animate.js?message=docs(%24animateProvider)%3A%20describe%20your%20change...#L5\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/animate.js#L5\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$animateProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24animate\">$animate</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Default implementation of $animate that doesn't perform any animations, instead just synchronously performs DOM updates and calls done() callbacks.</p> <p>In order to enable animations the ngAnimate module has to be loaded.</p> <p>To see the functional implementation check out src/ngAnimate/animate.js</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"register\"> <h3>register(name, factory);</h3> <div>\n<p>Registers a new injectable animation factory function. The factory function produces the animation object which contains callback functions for each event that is expected to be animated.</p> <ul> <li>\n<code>eventFn</code>: <code>function(Element, doneFunction)</code> The element to animate, the <code>doneFunction</code> must be called once the element animation is complete. If a function is returned then the animation service will use this function to cancel the animation whenever a cancel event is triggered.</li> </ul> <pre data-language=\"javascript\">return {\n  eventFn : function(element, done) {\n    //code to run the animation\n    //once complete, then run done()\n    return function cancellationFunction() {\n      //code to cancel the animation\n    }\n  }\n}\n</pre> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The name of the animation.</p> </td> </tr> <tr> <td> factory </td> <td> <code class=\"label type-hint type-hint-function\">Function</code> </td> <td> <p>The factory function that will be executed to return the animation object.</p> </td> </tr> </tbody> </table> </li> <li id=\"classNameFilter\"> <h3>classNameFilter([expression]);</h3> <div>\n<p>Sets and/or returns the CSS class regular expression that is checked when performing an animation. Upon bootstrap the classNameFilter value is not set at all and will therefore enable $animate to attempt to perform an animation on any element. When setting the classNameFilter value, animations will only be performed on elements that successfully match the filter expression. This in turn can boost performance for low-powered devices as well as applications containing a lot of structural operations.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> expression <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-regexp\">RegExp</code> </td> <td> <p>The className expression which will be checked against all animations</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-regexp\">RegExp</code></td> <td>\n<p>The current CSS className expression value. If null then there is no expression value</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$animateProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$animateProvider</a>\n  </p>\n</div>\n","api/ng/type/ngmodel.ngmodelcontroller":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/directive/ngModel.js?message=docs(ngModel.NgModelController)%3A%20describe%20your%20change...#L21\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/directive/ngModel.js#L21\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngModel.NgModelController</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> type in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p><code>NgModelController</code> provides API for the <a href=\"../directive/ngmodel\"><code>ngModel</code></a> directive. The controller contains services for data-binding, validation, CSS updates, and value formatting and parsing. It purposefully does not contain any logic which deals with DOM rendering or listening to DOM events. Such DOM related logic should be provided by other directives which make use of <code>NgModelController</code> for data-binding to control elements. Angular provides this DOM logic for most <a href=\"../directive/input\"><code>input</code></a> elements. At the end of this page you can find a <a href=\"ngmodel.ngmodelcontroller#custom-control-example.html\">custom control example</a> that uses <code>ngModelController</code> to bind to <code>contenteditable</code> elements.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"$render\"> <h3>$render();</h3> <div>\n<p>Called when the view needs to be updated. It is expected that the user of the ng-model directive will implement this method.</p> <p>The <code>$render()</code> method is invoked in the following situations:</p> <ul> <li>\n<code>$rollbackViewValue()</code> is called. If we are rolling back the view value to the last committed value then <code>$render()</code> is called to update the input control.</li> <li>The value referenced by <code>ng-model</code> is changed programmatically and both the <code>$modelValue</code> and the <code>$viewValue</code> are different to last time.</li> </ul> <p>Since <code>ng-model</code> does not do a deep watch, <code>$render()</code> is only invoked if the values of <code>$modelValue</code> and <code>$viewValue</code> are actually different to their previous value. If <code>$modelValue</code> or <code>$viewValue</code> are objects (rather than a string or number) then <code>$render()</code> will not be invoked if you only change a property on the objects.</p> </div> </li> <li id=\"$isEmpty\"> <h3>$isEmpty(value);</h3> <div>\n<p>This is called when we need to determine if the value of an input is empty.</p> <p>For instance, the required directive does this to work out if the input has data or not.</p> <p>The default <code>$isEmpty</code> function checks whether the value is <code>undefined</code>, <code>''</code>, <code>null</code> or <code>NaN</code>.</p> <p>You can override this for input directives whose concept of being empty is different to the default. The <code>checkboxInputType</code> directive does this because in its case a value of <code>false</code> implies empty.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value of the input to check for emptiness.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if <code>value</code> is \"empty\".</p> </td> </tr> </table> </li> <li id=\"$setValidity\"> <h3>$setValidity(validationErrorKey, isValid);</h3> <div>\n<p>Change the validity state, and notify the form.</p> <p>This method can be called within $parsers/$formatters or a custom validation implementation. However, in most cases it should be sufficient to use the <code>ngModel.$validators</code> and <code>ngModel.$asyncValidators</code> collections which will call <code>$setValidity</code> automatically.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> validationErrorKey </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Name of the validator. The <code>validationErrorKey</code> will be assigned to either <code>$error[validationErrorKey]</code> or <code>$pending[validationErrorKey]</code> (for unfulfilled <code>$asyncValidators</code>), so that it is available for data-binding. The <code>validationErrorKey</code> should be in camelCase and will get converted into dash-case for class name. Example: <code>myError</code> will result in <code>ng-valid-my-error</code> and <code>ng-invalid-my-error</code> class and can be bound to as <code>{{someForm.someControl.$error.myError}}</code> .</p> </td> </tr> <tr> <td> isValid </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>Whether the current state is valid (true), invalid (false), pending (undefined), or skipped (null). Pending is used for unfulfilled <code>$asyncValidators</code>. Skipped is used by Angular when validators do not run because of parse errors and when <code>$asyncValidators</code> do not run because any of the <code>$validators</code> failed.</p> </td> </tr> </tbody> </table> </li> <li id=\"$setPristine\"> <h3>$setPristine();</h3> <div>\n<p>Sets the control to its pristine state.</p> <p>This method can be called to remove the <code>ng-dirty</code> class and set the control to its pristine state (<code>ng-pristine</code> class). A model is considered to be pristine when the control has not been changed from when first compiled.</p> </div> </li> <li id=\"$setDirty\"> <h3>$setDirty();</h3> <div>\n<p>Sets the control to its dirty state.</p> <p>This method can be called to remove the <code>ng-pristine</code> class and set the control to its dirty state (<code>ng-dirty</code> class). A model is considered to be dirty when the control has been changed from when first compiled.</p> </div> </li> <li id=\"$setUntouched\"> <h3>$setUntouched();</h3> <div>\n<p>Sets the control to its untouched state.</p> <p>This method can be called to remove the <code>ng-touched</code> class and set the control to its untouched state (<code>ng-untouched</code> class). Upon compilation, a model is set as untouched by default, however this function can be used to restore that state if the model has already been touched by the user.</p> </div> </li> <li id=\"$setTouched\"> <h3>$setTouched();</h3> <div>\n<p>Sets the control to its touched state.</p> <p>This method can be called to remove the <code>ng-untouched</code> class and set the control to its touched state (<code>ng-touched</code> class). A model is considered to be touched when the user has first focused the control element and then shifted focus away from the control (blur event).</p> </div> </li> <li id=\"$rollbackViewValue\"> <h3>$rollbackViewValue();</h3> <div>\n<p>Cancel an update and reset the input element's value to prevent an update to the <code>$modelValue</code>, which may be caused by a pending debounced event or because the input is waiting for a some future event.</p> <p>If you have an input that uses <code>ng-model-options</code> to set up debounced events or events such as blur you can have a situation where there is a period when the <code>$viewValue</code> is out of synch with the ngModel's <code>$modelValue</code>.</p> <p>In this case, you can run into difficulties if you try to update the ngModel's <code>$modelValue</code> programmatically before these debounced/future events have resolved/occurred, because Angular's dirty checking mechanism is not able to tell whether the model has actually changed or not.</p> <p>The <code>$rollbackViewValue()</code> method should be called before programmatically changing the model of an input which may have such events pending. This is important in order to make sure that the input field will be updated with the new model value and any pending operations are cancelled.</p>  </div> </li> <li id=\"$validate\"> <h3>$validate();</h3> <div>\n<p>Runs each of the registered validators (first synchronous validators and then asynchronous validators). If the validity changes to invalid, the model will be set to <code>undefined</code>, unless <a href=\"../directive/ngmodeloptions\"><code>ngModelOptions.allowInvalid</code></a> is <code>true</code>. If the validity changes to valid, it will set the model to the last available valid <code>$modelValue</code>, i.e. either the last parsed value or the last value set from the scope.</p> </div> </li> <li id=\"$commitViewValue\"> <h3>$commitViewValue();</h3> <div>\n<p>Commit a pending update to the <code>$modelValue</code>.</p> <p>Updates may be pending by a debounced event or because the input is waiting for a some future event defined in <code>ng-model-options</code>. this method is rarely needed as <code>NgModelController</code> usually handles calling this in response to input events.</p> </div> </li> <li id=\"$setViewValue\"> <h3>$setViewValue(value, trigger);</h3> <div>\n<p>Update the view value.</p> <p>This method should be called when an input directive want to change the view value; typically, this is done from within a DOM event handler.</p> <p>For example <a href=\"../directive/input\">input</a> calls it when the value of the input changes and <a href=\"../directive/select\">select</a> calls it when an option is selected.</p> <p>If the new <code>value</code> is an object (rather than a string or a number), we should make a copy of the object before passing it to <code>$setViewValue</code>. This is because <code>ngModel</code> does not perform a deep watch of objects, it only looks for a change of identity. If you only change the property of the object then ngModel will not realise that the object has changed and will not invoke the <code>$parsers</code> and <code>$validators</code> pipelines.</p> <p>For this reason, you should not change properties of the copy once it has been passed to <code>$setViewValue</code>. Otherwise you may cause the model value on the scope to change incorrectly.</p> <p>When this method is called, the new <code>value</code> will be staged for committing through the <code>$parsers</code> and <code>$validators</code> pipelines. If there are no special <a href=\"../directive/ngmodeloptions\"><code>ngModelOptions</code></a> specified then the staged value sent directly for processing, finally to be applied to <code>$modelValue</code> and then the <strong>expression</strong> specified in the <code>ng-model</code> attribute.</p> <p>Lastly, all the registered change listeners, in the <code>$viewChangeListeners</code> list, are called.</p> <p>In case the <a href=\"../directive/ngmodeloptions\">ngModelOptions</a> directive is used with <code>updateOn</code> and the <code>default</code> trigger is not listed, all those actions will remain pending until one of the <code>updateOn</code> events is triggered on the DOM element. All these actions will be debounced if the <a href=\"../directive/ngmodeloptions\">ngModelOptions</a> directive is used with a custom debounce for this particular event.</p> <p>Note that calling this function does not trigger a <code>$digest</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Value from the view.</p> </td> </tr> <tr> <td> trigger </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Event that triggered the update.</p> </td> </tr> </tbody> </table> </li> </ul> <h2>Properties</h2> <ul class=\"properties defs\"> <li id=\"$viewValue\"> <h3>$viewValue</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>Actual string value in the view.</p> </td> </tr> </table> </li> <li id=\"$modelValue\"> <h3>$modelValue</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The value in the model that the control is bound to.</p> </td> </tr> </table> </li> <li id=\"$parsers\"> <h3>$parsers</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-array\">Array.&lt;Function&gt;</code></td> <td>\n<p>Array of functions to execute, as a pipeline, whenever the control reads value from the DOM. The functions are called in array order, each passing its return value through to the next. The last return value is forwarded to the <a href=\"ngmodel.ngmodelcontroller#%24validators.html\"><code>$validators</code></a> collection.</p> <p>Parsers are used to sanitize / convert the <a href=\"ngmodel.ngmodelcontroller#%24viewValue.html\"><code>$viewValue</code></a>.</p> <p>Returning <code>undefined</code> from a parser means a parse error occurred. In that case, no <a href=\"ngmodel.ngmodelcontroller#%24validators.html\"><code>$validators</code></a> will run and the <code>ngModel</code> will be set to <code>undefined</code> unless <a href=\"../directive/ngmodeloptions\"><code>ngModelOptions.allowInvalid</code></a> is set to <code>true</code>. The parse error is stored in <code>ngModel.$error.parse</code>.</p> </td> </tr> </table> </li> <li id=\"$formatters\"> <h3>$formatters</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-array\">Array.&lt;Function&gt;</code></td> <td>\n<p>Array of functions to execute, as a pipeline, whenever the model value changes. The functions are called in reverse array order, each passing the value through to the next. The last return value is used as the actual DOM value. Used to format / convert values for display in the control.</p> <pre data-language=\"javascript\">function formatter(value) {\n  if (value) {\n    return value.toUpperCase();\n  }\n}\nngModel.$formatters.push(formatter);\n</pre> </td> </tr> </table> </li> <li id=\"$validators\"> <h3>$validators</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object.&lt;string, function&gt;</code></td> <td>\n<p>A collection of validators that are applied whenever the model value changes. The key value within the object refers to the name of the validator while the function refers to the validation operation. The validation operation is provided with the model value as an argument and must return a true or false value depending on the response of that validation.</p> <pre data-language=\"javascript\">ngModel.$validators.validCharacters = function(modelValue, viewValue) {\n  var value = modelValue || viewValue;\n  return /[0-9]+/.test(value) &amp;&amp;\n         /[a-z]+/.test(value) &amp;&amp;\n         /[A-Z]+/.test(value) &amp;&amp;\n         /\\W+/.test(value);\n};\n</pre> </td> </tr> </table> </li> <li id=\"$asyncValidators\"> <h3>$asyncValidators</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object.&lt;string, function&gt;</code></td> <td>\n<p>A collection of validations that are expected to perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided is expected to return a promise when it is run during the model validation process. Once the promise is delivered then the validation status will be set to true when fulfilled and false when rejected. When the asynchronous validators are triggered, each of the validators will run in parallel and the model value will only be updated once all validators have been fulfilled. As long as an asynchronous validator is unfulfilled, its key will be added to the controllers <code>$pending</code> property. Also, all asynchronous validators will only run once all synchronous validators have passed.</p> <p>Please note that if $http is used then it is important that the server returns a success HTTP response code in order to fulfill the validation and a status level of <code>4xx</code> in order to reject the validation.</p> <pre data-language=\"javascript\">ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {\n  var value = modelValue || viewValue;\n\n  // Lookup user by username\n  return $http.get('/api/users/' + value).\n     then(function resolved() {\n       //username exists, this means validation fails\n       return $q.reject('exists');\n     }, function rejected() {\n       //username does not exist, therefore this validation passes\n       return true;\n     });\n};\n</pre> </td> </tr> </table> </li> <li id=\"$viewChangeListeners\"> <h3>$viewChangeListeners</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-array\">Array.&lt;Function&gt;</code></td> <td>\n<p>Array of functions to execute whenever the view value has changed. It is called with no arguments, and its return value is ignored. This can be used in place of additional $watches against the model value.</p> </td> </tr> </table> </li> <li id=\"$error\"> <h3>$error</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>An object hash with all failing validator ids as keys.</p> </td> </tr> </table> </li> <li id=\"$pending\"> <h3>$pending</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>An object hash with all pending validator ids as keys.</p> </td> </tr> </table> </li> <li id=\"$untouched\"> <h3>$untouched</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if control has not lost focus yet.</p> </td> </tr> </table> </li> <li id=\"$touched\"> <h3>$touched</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if control has lost focus.</p> </td> </tr> </table> </li> <li id=\"$pristine\"> <h3>$pristine</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if user has not interacted with the control yet.</p> </td> </tr> </table> </li> <li id=\"$dirty\"> <h3>$dirty</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if user has already interacted with the control.</p> </td> </tr> </table> </li> <li id=\"$valid\"> <h3>$valid</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if there is no error.</p> </td> </tr> </table> </li> <li id=\"$invalid\"> <h3>$invalid</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>True if at least one error on the control.</p> </td> </tr> </table> </li> <li id=\"$name\"> <h3>$name</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>The name attribute of the control.</p> </td> </tr> </table> </li> </ul>  <p>This example shows how to use <code>NgModelController</code> with a custom control to achieve data-binding. Notice how different directives (<code>contenteditable</code>, <code>ng-model</code>, and <code>required</code>) collaborate together to achieve the desired result.</p> <p><code>contenteditable</code> is an HTML5 attribute, which tells the browser to let the element contents be edited in place by the user.</p> <p>We are using the <a href=\"../service/%24sce\">$sce</a> service here and include the <a href=\"../../ngsanitize\">$sanitize</a> module to automatically remove \"bad\" content like inline event listener (e.g. <code>&lt;span onclick=\"...\"&gt;</code>). However, as we are using <code>$sce</code> the model can still decide to provide unsafe content if it marks that content using the <code>$sce</code> service.</p>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/type/ngModel.NgModelController\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/type/ngModel.NgModelController</a>\n  </p>\n</div>\n","api/ng/provider/$compileprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/compile.js?message=docs(%24compileProvider)%3A%20describe%20your%20change...#L714\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/compile.js#L714\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$compileProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24compile\">$compile</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>   <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"directive\"> <h3>directive(name, directiveFactory);</h3> <div>\n<p>Register a new directive with the compiler.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Name of the directive in camel-case (i.e. <code>ngBind</code> which will match as <code>ng-bind</code>), or an object map of directives where the keys are the names and the values are the factories.</p> </td> </tr> <tr> <td> directiveFactory </td> <td> <code class=\"label type-hint type-hint-function\">function()</code><code class=\"label type-hint type-hint-array\">Array</code> </td> <td> <p>An injectable directive factory function. See <a href=\"../../../guide/directive\">directive</a> for more info.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-ng\">ng.$compileProvider</code></td> <td>\n<p>Self for chaining.</p> </td> </tr> </table> </li> <li id=\"aHrefSanitizationWhitelist\"> <h3>aHrefSanitizationWhitelist([regexp]);</h3> <div>\n<p>Retrieves or overrides the default regular expression that is used for whitelisting of safe urls during a[href] sanitization.</p> <p>The sanitization is a security measure aimed at preventing XSS attacks via html links.</p> <p>Any url about to be assigned to a[href] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the <code>aHrefSanitizationWhitelist</code> regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with <code>'unsafe:'</code> string and only then is it written into the DOM.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> regexp <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-regexp\">RegExp</code> </td> <td> <p>New regexp to whitelist urls with.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td>\n<code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-ng\">ng.$compileProvider</code>\n</td> <td>\n<p>Current RegExp if called without value or self for chaining otherwise.</p> </td> </tr> </table> </li> <li id=\"imgSrcSanitizationWhitelist\"> <h3>imgSrcSanitizationWhitelist([regexp]);</h3> <div>\n<p>Retrieves or overrides the default regular expression that is used for whitelisting of safe urls during img[src] sanitization.</p> <p>The sanitization is a security measure aimed at prevent XSS attacks via html links.</p> <p>Any url about to be assigned to img[src] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the <code>imgSrcSanitizationWhitelist</code> regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with <code>'unsafe:'</code> string and only then is it written into the DOM.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> regexp <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-regexp\">RegExp</code> </td> <td> <p>New regexp to whitelist urls with.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td>\n<code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-ng\">ng.$compileProvider</code>\n</td> <td>\n<p>Current RegExp if called without value or self for chaining otherwise.</p> </td> </tr> </table> </li> <li id=\"debugInfoEnabled\"> <h3>debugInfoEnabled([enabled]);</h3> <div>\n<p>Call this method to enable/disable various debug runtime information in the compiler such as adding binding information and a reference to the current scope on to DOM elements. If enabled, the compiler will add the following to DOM elements that have been bound to the scope</p> <ul> <li>\n<code>ng-binding</code> CSS class</li> <li>\n<code>$binding</code> data property containing an array of the binding expressions</li> </ul> <p>You may want to disable this in production for a significant performance boost. See <a href=\"../../../guide/production#disabling-debug-data.html\">Disabling Debug Data</a> for more.</p> <p>The default value is true.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> enabled <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>update the debugInfoEnabled state if provided, otherwise just return the current debugInfoEnabled state</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>current value if used as getter or itself (chaining) if used as setter</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$compileProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$compileProvider</a>\n  </p>\n</div>\n","api/ng/provider/$controllerprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/controller.js?message=docs(%24controllerProvider)%3A%20describe%20your%20change...#L5\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/controller.js#L5\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$controllerProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24controller\">$controller</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <a href=\"../service/%24controller\">$controller service</a> is used by Angular to create new controllers.</p> <p>This provider allows controller registration via the <a href=\"%24controllerprovider#register.html\">register</a> method.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"register\"> <h3>register(name, constructor);</h3>  <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Controller name, or an object map of controllers where the keys are the names and the values are the constructors.</p> </td> </tr> <tr> <td> constructor </td> <td> <code class=\"label type-hint type-hint-function\">function()</code><code class=\"label type-hint type-hint-array\">Array</code> </td> <td> <p>Controller constructor fn (optionally decorated with DI annotations in the array notation).</p> </td> </tr> </tbody> </table> </li> <li id=\"allowGlobals\"> <h3>allowGlobals();</h3> <div>\n<p>If called, allows <code>$controller</code> to find controller constructors on <code>window</code></p> </div> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$controllerProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$controllerProvider</a>\n  </p>\n</div>\n","api/ng/provider/$filterprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/filter.js?message=docs(%24filterProvider)%3A%20describe%20your%20change...#L14\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/filter.js#L14\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$filterProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24filter\">$filter</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Filters are just functions which transform input to an output. However filters need to be Dependency Injected. To achieve this a filter definition consists of a factory function which is annotated with dependencies and is responsible for creating a filter function.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> Filter names must be valid angular <a href=\"../../../guide/expression\"><code>Expressions</code></a> identifiers, such as <code>uppercase</code> or <code>orderBy</code>. Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace your filters, then you can use capitalization (<code>myappSubsectionFilterx</code>) or underscores (<code>myapp_subsection_filterx</code>). </div> <pre data-language=\"javascript\">// Filter registration\nfunction MyModule($provide, $filterProvider) {\n  // create a service to demonstrate injection (not always needed)\n  $provide.value('greet', function(name){\n    return 'Hello ' + name + '!';\n  });\n\n  // register a filter factory which uses the\n  // greet service to demonstrate DI.\n  $filterProvider.register('greet', function(greet){\n    // return the filter function which uses the greet service\n    // to generate salutation\n    return function(text) {\n      // filters need to be forgiving so check input validity\n      return text &amp;&amp; greet(text) || text;\n    };\n  });\n}\n</pre> <p>The filter function is registered with the <code>$injector</code> under the filter name suffix with <code>Filter</code>.</p> <pre data-language=\"javascript\">it('should be the same instance', inject(\n  function($filterProvider) {\n    $filterProvider.register('reverse', function(){\n      return ...;\n    });\n  },\n  function($filter, reverseFilter) {\n    expect($filter('reverse')).toBe(reverseFilter);\n  });\n</pre> <p>For more information about how angular filters work, and how to create your own filters, see <a href=\"../../../guide/filter\">Filters</a> in the Angular Developer Guide.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"register\"> <h3>register(name);</h3>  <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Name of the filter function, or an object map of filters where the keys are the filter names and the values are the filter factories.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> Filter names must be valid angular <a href=\"../../../guide/expression\"><code>Expressions</code></a> identifiers, such as <code>uppercase</code> or <code>orderBy</code>. Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace your filters, then you can use capitalization (<code>myappSubsectionFilterx</code>) or underscores (<code>myapp_subsection_filterx</code>). </div> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>Registered filter instance, or if a map of filters was provided then a map of the registered filter instances.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$filterProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$filterProvider</a>\n  </p>\n</div>\n","api/ng/provider/$httpprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/http.js?message=docs(%24httpProvider)%3A%20describe%20your%20change...#L117\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/http.js#L117\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$httpProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24http\">$http</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Use <code>$httpProvider</code> to change the default behavior of the <a href=\"../service/%24http\">$http</a> service.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"useApplyAsync\"> <h3>useApplyAsync([value]);</h3> <div>\n<p>Configure $http service to combine processing of multiple http responses received at around the same time via <a href=\"../type/%24rootscope.scope#%24applyAsync.html\">$rootScope.$applyAsync</a>. This can result in significant performance improvement for bigger applications that make many HTTP requests concurrently (common during application bootstrap).</p> <p>Defaults to false. If no value is specifed, returns the current configured value.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>If true, when requests are loaded, they will schedule a deferred \"apply\" on the next tick, giving time for subsequent requests in a roughly ~10ms window to load and share the same digest cycle.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td>\n<code class=\"label type-hint type-hint-boolean\">boolean</code><code class=\"label type-hint type-hint-object\">Object</code>\n</td> <td>\n<p>If a value is specified, returns the $httpProvider for chaining. otherwise, returns the current configured value.</p> </td> </tr> </table> </li> </ul> <h2>Properties</h2> <ul class=\"properties defs\"> <li id=\"defaults\"> <h3>defaults</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Object containing default values for all <a href=\"../service/%24http\">$http</a> requests.</p> <ul> <li>\n<p><strong><code>defaults.cache</code></strong> - {Object} - an object built with <a href=\"../service/%24cachefactory\"><code>$cacheFactory</code></a> that will provide the cache for all requests who set their <code>cache</code> property to <code>true</code>. If you set the <code>default.cache = false</code> then only requests that specify their own custom cache object will be cached. See <a href=\"../service/%24http#caching.html\">$http Caching</a> for more information.</p> </li> <li>\n<p><strong><code>defaults.xsrfCookieName</code></strong> - {string} - Name of cookie containing the XSRF token. Defaults value is <code>'XSRF-TOKEN'</code>.</p> </li> <li>\n<p><strong><code>defaults.xsrfHeaderName</code></strong> - {string} - Name of HTTP header to populate with the XSRF token. Defaults value is <code>'X-XSRF-TOKEN'</code>.</p> </li> <li>\n<p><strong><code>defaults.headers</code></strong> - {Object} - Default headers for all $http requests. Refer to <a href=\"../service/%24http#setting-http-headers.html\">$http</a> for documentation on setting default headers.</p> <ul> <li><strong><code>defaults.headers.common</code></strong></li> <li><strong><code>defaults.headers.post</code></strong></li> <li><strong><code>defaults.headers.put</code></strong></li> <li><strong><code>defaults.headers.patch</code></strong></li> </ul> </li> </ul> </td> </tr> </table> </li> <li id=\"interceptors\"> <h3>interceptors</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Array containing service factories for all synchronous or asynchronous <a href=\"../service/%24http\">$http</a> pre-processing of request or postprocessing of responses.</p> <p>These service factories are ordered by request, i.e. they are applied in the same order as the array, on request, but reverse order, on response.</p> <p><a href=\"../service/%24http#interceptors.html\">Interceptors detailed info</a></p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$httpProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$httpProvider</a>\n  </p>\n</div>\n","api/ng/provider/$interpolateprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/interpolate.js?message=docs(%24interpolateProvider)%3A%20describe%20your%20change...#L5\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/interpolate.js#L5\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$interpolateProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24interpolate\">$interpolate</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Used for configuring the interpolation markup. Defaults to <code>{{</code> and <code>}}</code>.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"startSymbol\"> <h3>startSymbol([value]);</h3> <div>\n<p>Symbol to denote start of expression in the interpolated string. Defaults to <code>{{</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>new value to set the starting symbol to.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td>\n<code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-self\">self</code>\n</td> <td>\n<p>Returns the symbol when used as getter and self if used as setter.</p> </td> </tr> </table> </li> <li id=\"endSymbol\"> <h3>endSymbol([value]);</h3> <div>\n<p>Symbol to denote the end of expression in the interpolated string. Defaults to <code>}}</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>new value to set the ending symbol to.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td>\n<code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-self\">self</code>\n</td> <td>\n<p>Returns the symbol when used as getter and self if used as setter.</p> </td> </tr> </table> </li> </ul>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$interpolateProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$interpolateProvider</a>\n  </p>\n</div>\n","api/ng/provider/$locationprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/location.js?message=docs(%24locationProvider)%3A%20describe%20your%20change...#L694\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/location.js#L694\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$locationProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24location\">$location</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Use the <code>$locationProvider</code> to configure how the application deep linking paths are stored.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"hashPrefix\"> <h3>hashPrefix([prefix]);</h3>  <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> prefix <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Prefix for hash part (containing path and search)</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>current value if used as getter or itself (chaining) if used as setter</p> </td> </tr> </table> </li> <li id=\"html5Mode\"> <h3>html5Mode([mode]);</h3>  <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> mode <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code><code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>If boolean, sets <code>html5Mode.enabled</code> to value. If object, sets <code>enabled</code>, <code>requireBase</code> and <code>rewriteLinks</code> to respective values. Supported properties:</p> <ul> <li>\n<strong>enabled</strong> – <code>{boolean}</code> – (default: false) If true, will rely on <code>history.pushState</code> to change urls where supported. Will fall back to hash-prefixed paths in browsers that do not support <code>pushState</code>.</li> <li>\n<strong>requireBase</strong> - <code>{boolean}</code> - (default: <code>true</code>) When html5Mode is enabled, specifies whether or not a <base> tag is required to be present. If <code>enabled</code> and <code>requireBase</code> are true, and a base tag is not present, an error will be thrown when <code>$location</code> is injected. See the <a href=\"../../../guide/%24location\">$location guide for more information</a>\n</li> <li>\n<strong>rewriteLinks</strong> - <code>{boolean}</code> - (default: <code>true</code>) When html5Mode is enabled, enables/disables url rewriting for relative links.</li> </ul> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>html5Mode object if used as getter or itself (chaining) if used as setter</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$locationProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$locationProvider</a>\n  </p>\n</div>\n","api/ng/provider/$logprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/log.js?message=docs(%24logProvider)%3A%20describe%20your%20change...#L41\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/log.js#L41\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$logProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24log\">$log</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Use the <code>$logProvider</code> to configure how the application logs messages</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"debugEnabled\"> <h3>debugEnabled([flag]);</h3>  <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> flag <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>enable or disable debug level messages</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>current value if used as getter or itself (chaining) if used as setter</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$logProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$logProvider</a>\n  </p>\n</div>\n","api/ng/provider/$parseprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/parse.js?message=docs(%24parseProvider)%3A%20describe%20your%20change...#L1033\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/parse.js#L1033\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$parseProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24parse\">$parse</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p><code>$parseProvider</code> can be used for configuring the default behavior of the <a href=\"../service/%24parse\">$parse</a> service.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$parseProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$parseProvider</a>\n  </p>\n</div>\n","api/ng/provider/$rootscopeprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/rootScope.js?message=docs(%24rootScopeProvider)%3A%20describe%20your%20change...#L29\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/rootScope.js#L29\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$rootScopeProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24rootscope\">$rootScope</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Provider for the $rootScope service.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"digestTtl\"> <h3>digestTtl(limit);</h3> <div>\n<p>Sets the number of <code>$digest</code> iterations the scope should attempt to execute before giving up and assuming that the model is unstable.</p> <p>The current default is 10 iterations.</p> <p>In complex applications it's possible that the dependencies between <code>$watch</code>s will result in several digest iterations. However if an application needs more than the default 10 digest iterations for its model to stabilize then you should investigate what is causing the model to continuously change during the digest.</p> <p>Increasing the TTL could have performance implications, so you should not change it without proper justification.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> limit </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>The number of digest iterations.</p> </td> </tr> </tbody> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$rootScopeProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$rootScopeProvider</a>\n  </p>\n</div>\n","api/ng/provider/$scedelegateprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/sce.js?message=docs(%24sceDelegateProvider)%3A%20describe%20your%20change...#L94\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/sce.js#L94\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$sceDelegateProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24scedelegate\">$sceDelegate</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>$sceDelegateProvider</code> provider allows developers to configure the <a href=\"../service/%24scedelegate\">$sceDelegate</a> service. This allows one to get/set the whitelists and blacklists used to ensure that the URLs used for sourcing Angular templates are safe. Refer <a href=\"%24scedelegateprovider#resourceUrlWhitelist.html\">$sceDelegateProvider.resourceUrlWhitelist</a> and <a href=\"%24scedelegateprovider#resourceUrlBlacklist.html\">$sceDelegateProvider.resourceUrlBlacklist</a></p> <p>For the general details about this service in Angular, read the main page for <a href=\"../service/%24sce\">Strict Contextual Escaping (SCE)</a>.</p> <p><strong>Example</strong>: Consider the following case. </p> <ul> <li>your app is hosted at url <code>http://myapp.example.com/</code>\n</li> <li>but some of your templates are hosted on other domains you control such as <code>http://srv01.assets.example.com/</code>, <code>http://srv02.assets.example.com/</code>, etc.</li> <li>and you have an open redirect at <code>http://myapp.example.com/clickThru?...</code>.</li> </ul> <p>Here is what a secure configuration for this scenario might look like:</p> <pre>angular.module('myApp', []).config(function($sceDelegateProvider) {\n  $sceDelegateProvider.resourceUrlWhitelist([\n    // Allow same origin resource loads.\n    'self',\n    // Allow loading from our assets domain.  Notice the difference between * and **.\n    'http://srv*.assets.example.com/**'\n  ]);\n\n  // The blacklist overrides the whitelist so the open redirect here is blocked.\n  $sceDelegateProvider.resourceUrlBlacklist([\n    'http://myapp.example.com/clickThru**'\n  ]);\n});\n</pre> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"resourceUrlWhitelist\"> <h3>resourceUrlWhitelist([whitelist]);</h3> <div>\n<p>Sets/Gets the whitelist of trusted resource URLs.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> whitelist <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-array\">Array</code> </td> <td> <p>When provided, replaces the resourceUrlWhitelist with the value provided. This must be an array or null. A snapshot of this array is used so further changes to the array are ignored.</p> <pre>Follow <a href=\"../service/%24sce#resourceUrlPatternItem.html\">this link</a> for a description of the items\nallowed in this array.\n\nNote: **an empty whitelist array will block all URLs**!\n</pre> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-array\">Array</code></td> <td>\n<p>the currently set whitelist array.</p> <p>The <strong>default value</strong> when no whitelist has been explicitly set is <code>['self']</code> allowing only same origin resource requests.</p> </td> </tr> </table> </li> <li id=\"resourceUrlBlacklist\"> <h3>resourceUrlBlacklist([blacklist]);</h3> <div>\n<p>Sets/Gets the blacklist of trusted resource URLs.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> blacklist <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-array\">Array</code> </td> <td> <p>When provided, replaces the resourceUrlBlacklist with the value provided. This must be an array or null. A snapshot of this array is used so further changes to the array are ignored.</p> <pre>Follow <a href=\"../service/%24sce#resourceUrlPatternItem.html\">this link</a> for a description of the items\nallowed in this array.\n\nThe typical usage for the blacklist is to **block\n[open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as\nthese would otherwise be trusted but actually return content from the redirected domain.\n\nFinally, **the blacklist overrides the whitelist** and has the final say.\n</pre> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-array\">Array</code></td> <td>\n<p>the currently set blacklist array.</p> <p>The <strong>default value</strong> when no whitelist has been explicitly set is the empty array (i.e. there is no blacklist.)</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$sceDelegateProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$sceDelegateProvider</a>\n  </p>\n</div>\n","api/ng/provider/$sceprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/sce.js?message=docs(%24sceProvider)%3A%20describe%20your%20change...#L383\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/sce.js#L383\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$sceProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24sce\">$sce</a> </li> <li> provider in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The $sceProvider provider allows developers to configure the <a href=\"../service/%24sce\">$sce</a> service.</p> <ul> <li>enable/disable Strict Contextual Escaping (SCE) in a module</li> <li>override the default implementation with a custom delegate</li> </ul> <p>Read more about <a href=\"../service/%24sce\">Strict Contextual Escaping (SCE)</a>.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"enabled\"> <h3>enabled([value]);</h3> <div>\n<p>Enables/disables SCE and returns the current value.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>If provided, then enables/disables SCE.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>true if SCE is enabled, false otherwise.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/provider/$sceProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/provider/$sceProvider</a>\n  </p>\n</div>\n","api/ng/service":"<h1>Service components in ng</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"service/%24anchorscroll\">$anchorScroll</a></td> <td>\n<p>When called, it checks the current value of <a href=\"service/%24location#hash.html\">$location.hash()</a> and scrolls to the related element, according to the rules specified in the <a href=\"http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document\">Html5 spec</a>.</p> </td> </tr> <tr> <td><a href=\"service/%24animate\">$animate</a></td> <td>\n<p>The $animate service provides rudimentary DOM manipulation functions to insert, remove and move elements within the DOM, as well as adding and removing classes. This service is the core service used by the ngAnimate $animator service which provides high-level animation hooks for CSS and JavaScript.</p> </td> </tr> <tr> <td><a href=\"service/%24cachefactory\">$cacheFactory</a></td> <td>\n<p>Factory that constructs <a href=\"type/%24cachefactory.cache\">Cache</a> objects and gives access to them.</p> </td> </tr> <tr> <td><a href=\"service/%24templatecache\">$templateCache</a></td> <td>\n<p>The first time a template is used, it is loaded in the template cache for quick retrieval. You can load templates directly into the cache in a <code>script</code> tag, or by consuming the <code>$templateCache</code> service directly.</p> </td> </tr> <tr> <td><a href=\"service/%24compile\">$compile</a></td> <td>\n<p>Compiles an HTML string or DOM into a template and produces a template function, which can then be used to link <a href=\"type/%24rootscope.scope\"><code>scope</code></a> and the template together.</p> </td> </tr> <tr> <td><a href=\"service/%24controller\">$controller</a></td> <td>\n<p><code>$controller</code> service is responsible for instantiating controllers.</p> </td> </tr> <tr> <td><a href=\"service/%24document\">$document</a></td> <td>\n<p>A <a href=\"function/angular.element\">jQuery or jqLite</a> wrapper for the browser's <code>window.document</code> object.</p> </td> </tr> <tr> <td><a href=\"service/%24exceptionhandler\">$exceptionHandler</a></td> <td>\n<p>Any uncaught exception in angular expressions is delegated to this service. The default implementation simply delegates to <code>$log.error</code> which logs it into the browser console.</p> </td> </tr> <tr> <td><a href=\"service/%24filter\">$filter</a></td> <td>\n<p>Filters are used for formatting data displayed to the user.</p> </td> </tr> <tr> <td><a href=\"service/%24http\">$http</a></td> <td>\n<p>The <code>$http</code> service is a core Angular service that facilitates communication with the remote HTTP servers via the browser's <a href=\"https://developer.mozilla.org/en/xmlhttprequest\">XMLHttpRequest</a> object or via <a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a>.</p> </td> </tr> <tr> <td><a href=\"service/%24httpbackend\">$httpBackend</a></td> <td>\n<p>HTTP backend used by the <a href=\"service/%24http\">service</a> that delegates to XMLHttpRequest object or JSONP and deals with browser incompatibilities.</p> </td> </tr> <tr> <td><a href=\"service/%24interpolate\">$interpolate</a></td> <td>\n<p>Compiles a string with markup into an interpolation function. This service is used by the HTML <a href=\"service/%24compile\">$compile</a> service for data binding. See <a href=\"provider/%24interpolateprovider\">$interpolateProvider</a> for configuring the interpolation markup.</p> </td> </tr> <tr> <td><a href=\"service/%24interval\">$interval</a></td> <td>\n<p>Angular's wrapper for <code>window.setInterval</code>. The <code>fn</code> function is executed every <code>delay</code> milliseconds.</p> </td> </tr> <tr> <td><a href=\"service/%24locale\">$locale</a></td> <td>\n<p>$locale service provides localization rules for various Angular components. As of right now the only public api is:</p> </td> </tr> <tr> <td><a href=\"service/%24location\">$location</a></td> <td>\n<p>The $location service parses the URL in the browser address bar (based on the <a href=\"https://developer.mozilla.org/en/window.location\">window.location</a>) and makes the URL available to your application. Changes to the URL in the address bar are reflected into $location service and changes to $location are reflected into the browser address bar.</p> </td> </tr> <tr> <td><a href=\"service/%24log\">$log</a></td> <td>\n<p>Simple service for logging. Default implementation safely writes the message into the browser's console (if present).</p> </td> </tr> <tr> <td><a href=\"service/%24parse\">$parse</a></td> <td>\n<p>Converts Angular <a href=\"../../guide/expression\">expression</a> into a function.</p> </td> </tr> <tr> <td><a href=\"service/%24q\">$q</a></td> <td>\n<p>A service that helps you run functions asynchronously, and use their return values (or exceptions) when they are done processing.</p> </td> </tr> <tr> <td><a href=\"service/%24rootelement\">$rootElement</a></td> <td>\n<p>The root element of Angular application. This is either the element where <a href=\"directive/ngapp\">ngApp</a> was declared or the element passed into <a href=\"function/angular.bootstrap\"><code>angular.bootstrap</code></a>. The element represents the root element of application. It is also the location where the application's <a href=\"../auto/service/%24injector\">$injector</a> service gets published, and can be retrieved using <code>$rootElement.injector()</code>.</p> </td> </tr> <tr> <td><a href=\"service/%24rootscope\">$rootScope</a></td> <td>\n<p>Every application has a single root <a href=\"type/%24rootscope.scope\">scope</a>. All other scopes are descendant scopes of the root scope. Scopes provide separation between the model and the view, via a mechanism for watching the model for changes. They also provide an event emission/broadcast and subscription facility. See the <a href=\"../../guide/scope\">developer guide on scopes</a>.</p> </td> </tr> <tr> <td><a href=\"service/%24scedelegate\">$sceDelegate</a></td> <td>\n<p><code>$sceDelegate</code> is a service that is used by the <code>$sce</code> service to provide <a href=\"service/%24sce\">Strict Contextual Escaping (SCE)</a> services to AngularJS.</p> </td> </tr> <tr> <td><a href=\"service/%24sce\">$sce</a></td> <td>\n<p><code>$sce</code> is a service that provides Strict Contextual Escaping services to AngularJS.</p> </td> </tr> <tr> <td><a href=\"service/%24templaterequest\">$templateRequest</a></td> <td>\n<p>The <code>$templateRequest</code> service runs security checks then downloads the provided template using <code>$http</code> and, upon success, stores the contents inside of <code>$templateCache</code>. If the HTTP request fails or the response data of the HTTP request is empty, a <code>$compile</code> error will be thrown (the exception can be thwarted by setting the 2nd parameter of the function to true). Note that the contents of <code>$templateCache</code> are trusted, so the call to <code>$sce.getTrustedUrl(tpl)</code> is omitted when <code>tpl</code> is of type string and <code>$templateCache</code> has the matching entry.</p> </td> </tr> <tr> <td><a href=\"service/%24timeout\">$timeout</a></td> <td>\n<p>Angular's wrapper for <code>window.setTimeout</code>. The <code>fn</code> function is wrapped into a try/catch block and delegates any exceptions to <a href=\"service/%24exceptionhandler\">$exceptionHandler</a> service.</p> </td> </tr> <tr> <td><a href=\"service/%24window\">$window</a></td> <td>\n<p>A reference to the browser's <code>window</code> object. While <code>window</code> is globally available in JavaScript, it causes testability problems, because it is a global variable. In angular we always refer to it through the <code>$window</code> service, so it may be overridden, removed or mocked for testing.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service</a>\n  </p>\n</div>\n","api/ng/service/$anchorscroll":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/anchorScroll.js?message=docs(%24anchorScroll)%3A%20describe%20your%20change...#L32\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/anchorScroll.js#L32\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$anchorScroll</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24anchorscrollprovider\">$anchorScrollProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>When called, it checks the current value of <a href=\"%24location#hash.html\">$location.hash()</a> and scrolls to the related element, according to the rules specified in the <a href=\"http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document\">Html5 spec</a>.</p> <p>It also watches the <a href=\"%24location#hash.html\">$location.hash()</a> and automatically scrolls to match any anchor whenever it changes. This can be disabled by calling <a href=\"../provider/%24anchorscrollprovider#disableAutoScrolling.html\">$anchorScrollProvider.disableAutoScrolling()</a>.</p> <p>Additionally, you can use its <a href=\"%24anchorscroll#yOffset.html\">yOffset</a> property to specify a vertical scroll-offset (either fixed or dynamic).</p> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"%24window\"><code>$window</code></a></li>\n<li><a href=\"%24location\"><code>$location</code></a></li>\n<li><a href=\"%24rootscope\"><code>$rootScope</code></a></li> </ul> <h2 id=\"usage\">Usage</h2> <p><code>$anchorScroll();</code></p> <h2>Properties</h2> <ul class=\"properties defs\"> <li id=\"yOffset\"> <h3>yOffset</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td>\n<code class=\"label type-hint type-hint-number\">number</code><code class=\"label type-hint type-hint-function\">function()</code><code class=\"label type-hint type-hint-jqlite\">jqLite</code>\n</td> <td>\n<p>If set, specifies a vertical scroll-offset. This is often useful when there are fixed positioned elements at the top of the page, such as navbars, headers etc.</p> <p><code>yOffset</code> can be specified in various ways:</p> <ul> <li>\n<strong>number</strong>: A fixed number of pixels to be used as offset.<br><br>\n</li> <li>\n<strong>function</strong>: A getter function called everytime <code>$anchorScroll()</code> is executed. Must return a number representing the offset (in pixels).<br><br>\n</li> <li>\n<strong>jqLite</strong>: A jqLite/jQuery element to be used for specifying the offset. The distance from the top of the page to the element's bottom will be used as offset.<br> <strong>Note</strong>: The element will be taken into account only as long as its <code>position</code> is set to <code>fixed</code>. This option is useful, when dealing with responsive navbars/headers that adjust their height and/or positioning according to the viewport's size.</li> </ul> <p><br></p> <div class=\"alert alert-warning\"> In order for <code>yOffset</code> to work properly, scrolling should take place on the document's root and not some child element. </div>\n</td> </tr> </table> </li> </ul>   The example below illustrates the use of a vertical scroll-offset (specified as a fixed value). See <a href=\"%24anchorscroll#yOffset.html\">$anchorScroll.yOffset</a> for more details.  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$anchorScroll\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$anchorScroll</a>\n  </p>\n</div>\n","api/ng/type/$rootscope.scope":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/rootScope.js?message=docs(%24rootScope.Scope)%3A%20describe%20your%20change...#L103\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/rootScope.js#L103\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$rootScope.Scope</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> type in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>A root scope can be retrieved using the <a href=\"../service/%24rootscope\">$rootScope</a> key from the <a href=\"../../auto/service/%24injector\">$injector</a>. Child scopes are created using the <a href=\"%24rootscope.scope#%24new.html\">$new()</a> method. (Most scopes are created automatically when compiled HTML template is executed.) See also the <a href=\"../../../guide/scope\">Scopes guide</a> for an in-depth introduction and usage examples.</p> <h2 id=\"inheritance\">Inheritance</h2> <p>A scope can inherit from a parent scope, as in this example:</p> <pre data-language=\"javascript\">var parent = $rootScope;\nvar child = parent.$new();\n\nparent.salutation = \"Hello\";\nexpect(child.salutation).toEqual('Hello');\n\nchild.salutation = \"Welcome\";\nexpect(child.salutation).toEqual('Welcome');\nexpect(parent.salutation).toEqual('Hello');\n</pre> <p>When interacting with <code>Scope</code> in tests, additional helper methods are available on the instances of <code>Scope</code> type. See <a href=\"../../ngmock/type/%24rootscope.scope\">ngMock Scope</a> for additional details.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$rootScope.Scope([providers], [instanceCache]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> providers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object.&lt;string, function()&gt;=</code> </td> <td> <p>Map of service factory which need to be provided for the current scope. Defaults to <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\"><code>ng</code></a>.</p> </td> </tr> <tr> <td> instanceCache <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object.&lt;string, *&gt;=</code> </td> <td> <p>Provides pre-instantiated services which should append/override services provided by <code>providers</code>. This is handy when unit-testing and having the need to override a default service.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>Newly created scope.</p> </td> </tr> </table> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"$new\"> <h3>$new(isolate, parent);</h3> <div>\n<p>Creates a new child <a href=\"%24rootscope.scope\">scope</a>.</p> <p>The parent scope will propagate the <a href=\"%24rootscope.scope#%24digest.html\">$digest()</a> event. The scope can be removed from the scope hierarchy using <a href=\"%24rootscope.scope#%24destroy.html\">$destroy()</a>.</p> <p><a href=\"%24rootscope.scope#%24destroy.html\">$destroy()</a> must be called on a scope when it is desired for the scope and its child scopes to be permanently detached from the parent and thus stop participating in model change detection and listener notification by invoking.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> isolate </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>If true, then the scope does not prototypically inherit from the parent scope. The scope is isolated, as it can not see parent scope properties. When creating widgets, it is useful for the widget to not accidentally read parent state.</p> </td> </tr> <tr> <td> parent <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-scope\">Scope</code> </td> <td> <p>The <a href=\"%24rootscope.scope\"><code>Scope</code></a> that will be the <code>$parent</code> of the newly created scope. Defaults to <code>this</code> scope if not provided. This is used when creating a transclude scope to correctly place it in the scope hierarchy while maintaining the correct prototypical inheritance.</p> <p><em>(default: this)</em></p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>The newly created child scope.</p> </td> </tr> </table> </li> <li id=\"$watch\"> <h3>$watch(watchExpression, listener, [objectEquality]);</h3> <div>\n<p>Registers a <code>listener</code> callback to be executed whenever the <code>watchExpression</code> changes.</p> <ul> <li>The <code>watchExpression</code> is called on every call to <a href=\"%24rootscope.scope#%24digest.html\">$digest()</a> and should return the value that will be watched. (Since <a href=\"%24rootscope.scope#%24digest.html\">$digest()</a> reruns when it detects changes the <code>watchExpression</code> can execute multiple times per <a href=\"%24rootscope.scope#%24digest.html\">$digest()</a> and should be idempotent.)</li> <li>The <code>listener</code> is called only when the value from the current <code>watchExpression</code> and the previous call to <code>watchExpression</code> are not equal (with the exception of the initial run, see below). Inequality is determined according to reference inequality, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">strict comparison</a> via the <code>!==</code> Javascript operator, unless <code>objectEquality == true</code> (see next point)</li> <li>When <code>objectEquality == true</code>, inequality of the <code>watchExpression</code> is determined according to the <a href=\"../function/angular.equals\"><code>angular.equals</code></a> function. To save the value of the object for later comparison, the <a href=\"../function/angular.copy\"><code>angular.copy</code></a> function is used. This therefore means that watching complex objects will have adverse memory and performance implications.</li> <li>The watch <code>listener</code> may change the model, which may trigger other <code>listener</code>s to fire. This is achieved by rerunning the watchers until no changes are detected. The rerun iteration limit is 10 to prevent an infinite loop deadlock.</li> </ul> <p>If you want to be notified whenever <a href=\"%24rootscope.scope#%24digest.html\">$digest</a> is called, you can register a <code>watchExpression</code> function with no <code>listener</code>. (Be prepared for multiple calls to your <code>watchExpression</code> because it will execute multiple times in a single <a href=\"%24rootscope.scope#%24digest.html\">$digest</a> cycle if a change is detected.)</p> <p>After a watcher is registered with the scope, the <code>listener</code> fn is called asynchronously (via <a href=\"%24rootscope.scope#%24evalAsync.html\">$evalAsync</a>) to initialize the watcher. In rare cases, this is undesirable because the listener is called when the result of <code>watchExpression</code> didn't change. To detect this scenario within the <code>listener</code> fn, you can compare the <code>newVal</code> and <code>oldVal</code>. If these two values are identical (<code>===</code>) then the listener was called due to initialization.</p>  <pre data-language=\"javascript\">// let's assume that scope was dependency injected as the $rootScope\nvar scope = $rootScope;\nscope.name = 'misko';\nscope.counter = 0;\n\nexpect(scope.counter).toEqual(0);\nscope.$watch('name', function(newValue, oldValue) {\n  scope.counter = scope.counter + 1;\n});\nexpect(scope.counter).toEqual(0);\n\nscope.$digest();\n// the listener is always called during the first $digest loop after it was registered\nexpect(scope.counter).toEqual(1);\n\nscope.$digest();\n// but now it will not be called unless the value changes\nexpect(scope.counter).toEqual(1);\n\nscope.name = 'adam';\nscope.$digest();\nexpect(scope.counter).toEqual(2);\n\n\n\n// Using a function as a watchExpression\nvar food;\nscope.foodCounter = 0;\nexpect(scope.foodCounter).toEqual(0);\nscope.$watch(\n  // This function returns the value being watched. It is called for each turn of the $digest loop\n  function() { return food; },\n  // This is the change listener, called when the value returned from the above function changes\n  function(newValue, oldValue) {\n    if ( newValue !== oldValue ) {\n      // Only increment the counter if the value changed\n      scope.foodCounter = scope.foodCounter + 1;\n    }\n  }\n);\n// No digest has been run so the counter will be zero\nexpect(scope.foodCounter).toEqual(0);\n\n// Run the digest but since food has not changed count will still be zero\nscope.$digest();\nexpect(scope.foodCounter).toEqual(0);\n\n// Update food and run digest.  Now the counter will increment\nfood = 'cheeseburger';\nscope.$digest();\nexpect(scope.foodCounter).toEqual(1);\n</pre> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> watchExpression </td> <td> <code class=\"label type-hint type-hint-function\">function()</code><code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Expression that is evaluated on each <a href=\"%24rootscope.scope#%24digest.html\">$digest</a> cycle. A change in the return value triggers a call to the <code>listener</code>.</p> <ul> <li>\n<code>string</code>: Evaluated as <a href=\"../../../guide/expression\">expression</a>\n</li> <li>\n<code>function(scope)</code>: called with current <code>scope</code> as a parameter.</li> </ul> </td> </tr> <tr> <td> listener </td> <td> <code class=\"label type-hint type-hint-function\">function(newVal, oldVal, scope)</code> </td> <td> <p>Callback called whenever the value of <code>watchExpression</code> changes.</p> <ul> <li>\n<code>newVal</code> contains the current value of the <code>watchExpression</code>\n</li> <li>\n<code>oldVal</code> contains the previous value of the <code>watchExpression</code>\n</li> <li>\n<code>scope</code> refers to the current scope</li> </ul> </td> </tr> <tr> <td> objectEquality <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>Compare for object equality using <a href=\"../function/angular.equals\"><code>angular.equals</code></a> instead of comparing for reference equality.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function()</code></td> <td>\n<p>Returns a deregistration function for this listener.</p> </td> </tr> </table> </li> <li id=\"$watchGroup\"> <h3>$watchGroup(watchExpressions, listener);</h3> <div>\n<p>A variant of <a href=\"%24rootscope.scope#%24watch.html\">$watch()</a> where it watches an array of <code>watchExpressions</code>. If any one expression in the collection changes the <code>listener</code> is executed.</p> <ul> <li>The items in the <code>watchExpressions</code> array are observed via standard $watch operation and are examined on every call to $digest() to see if any items changes.</li> <li>The <code>listener</code> is called whenever any expression in the <code>watchExpressions</code> array changes.</li> </ul> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> watchExpressions </td> <td> <code class=\"label type-hint type-hint-array\">Array.&lt;string|Function(scope)&gt;</code> </td> <td> <p>Array of expressions that will be individually watched using <a href=\"%24rootscope.scope#%24watch.html\">$watch()</a></p> </td> </tr> <tr> <td> listener </td> <td> <code class=\"label type-hint type-hint-function\">function(newValues, oldValues, scope)</code> </td> <td> <p>Callback called whenever the return value of any expression in <code>watchExpressions</code> changes The <code>newValues</code> array contains the current values of the <code>watchExpressions</code>, with the indexes matching those of <code>watchExpression</code> and the <code>oldValues</code> array contains the previous values of the <code>watchExpressions</code>, with the indexes matching those of <code>watchExpression</code> The <code>scope</code> refers to the current scope.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function()</code></td> <td>\n<p>Returns a de-registration function for all listeners.</p> </td> </tr> </table> </li> <li id=\"$watchCollection\"> <h3>$watchCollection(obj, listener);</h3> <div>\n<p>Shallow watches the properties of an object and fires whenever any of the properties change (for arrays, this implies watching the array items; for object maps, this implies watching the properties). If a change is detected, the <code>listener</code> callback is fired.</p> <ul> <li>The <code>obj</code> collection is observed via standard $watch operation and is examined on every call to $digest() to see if any items have been added, removed, or moved.</li> <li>The <code>listener</code> is called whenever anything within the <code>obj</code> has changed. Examples include adding, removing, and moving items belonging to an object or array.</li> </ul>  <pre data-language=\"javascript\">$scope.names = ['igor', 'matias', 'misko', 'james'];\n$scope.dataCount = 4;\n\n$scope.$watchCollection('names', function(newNames, oldNames) {\n  $scope.dataCount = newNames.length;\n});\n\nexpect($scope.dataCount).toEqual(4);\n$scope.$digest();\n\n//still at 4 ... no changes\nexpect($scope.dataCount).toEqual(4);\n\n$scope.names.pop();\n$scope.$digest();\n\n//now there's been a change\nexpect($scope.dataCount).toEqual(3);\n</pre> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> obj </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-function\">function(scope)</code> </td> <td> <p>Evaluated as <a href=\"../../../guide/expression\">expression</a>. The expression value should evaluate to an object or an array which is observed on each <a href=\"%24rootscope.scope#%24digest.html\">$digest</a> cycle. Any shallow change within the collection will trigger a call to the <code>listener</code>.</p> </td> </tr> <tr> <td> listener </td> <td> <code class=\"label type-hint type-hint-function\">function(newCollection, oldCollection, scope)</code> </td> <td> <p>a callback function called when a change is detected.</p> <ul> <li>The <code>newCollection</code> object is the newly modified data obtained from the <code>obj</code> expression</li> <li>The <code>oldCollection</code> object is a copy of the former collection data. Due to performance considerations, the<code>oldCollection</code> value is computed only if the <code>listener</code> function declares two or more arguments.</li> <li>The <code>scope</code> argument refers to the current scope.</li> </ul> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function()</code></td> <td>\n<p>Returns a de-registration function for this listener. When the de-registration function is executed, the internal watch operation is terminated.</p> </td> </tr> </table> </li> <li id=\"$digest\"> <h3>$digest();</h3> <div>\n<p>Processes all of the <a href=\"%24rootscope.scope#%24watch.html\">watchers</a> of the current scope and its children. Because a <a href=\"%24rootscope.scope#%24watch.html\">watcher</a>'s listener can change the model, the <code>$digest()</code> keeps calling the <a href=\"%24rootscope.scope#%24watch.html\">watchers</a> until no more listeners are firing. This means that it is possible to get into an infinite loop. This function will throw <code>'Maximum iteration limit exceeded.'</code> if the number of iterations exceeds 10.</p> <p>Usually, you don't call <code>$digest()</code> directly in <a href=\"../directive/ngcontroller\">controllers</a> or in <a href=\"../provider/%24compileprovider#directive.html\">directives</a>. Instead, you should call <a href=\"%24rootscope.scope#%24apply.html\">$apply()</a> (typically from within a <a href=\"../provider/%24compileprovider#directive.html\">directive</a>), which will force a <code>$digest()</code>.</p> <p>If you want to be notified whenever <code>$digest()</code> is called, you can register a <code>watchExpression</code> function with <a href=\"%24rootscope.scope#%24watch.html\">$watch()</a> with no <code>listener</code>.</p> <p>In unit tests, you may need to call <code>$digest()</code> to simulate the scope life cycle.</p>  <pre data-language=\"javascript\">var scope = ...;\nscope.name = 'misko';\nscope.counter = 0;\n\nexpect(scope.counter).toEqual(0);\nscope.$watch('name', function(newValue, oldValue) {\n  scope.counter = scope.counter + 1;\n});\nexpect(scope.counter).toEqual(0);\n\nscope.$digest();\n// the listener is always called during the first $digest loop after it was registered\nexpect(scope.counter).toEqual(1);\n\nscope.$digest();\n// but now it will not be called unless the value changes\nexpect(scope.counter).toEqual(1);\n\nscope.name = 'adam';\nscope.$digest();\nexpect(scope.counter).toEqual(2);\n</pre> </div> </li> <li id=\"$destroy\"> <h3>$destroy();</h3> <div>\n<p>Removes the current scope (and all of its children) from the parent scope. Removal implies that calls to <a href=\"%24rootscope.scope#%24digest.html\">$digest()</a> will no longer propagate to the current scope and its children. Removal also implies that the current scope is eligible for garbage collection.</p> <p>The <code>$destroy()</code> is usually used by directives such as <a href=\"../directive/ngrepeat\">ngRepeat</a> for managing the unrolling of the loop.</p> <p>Just before a scope is destroyed, a <code>$destroy</code> event is broadcasted on this scope. Application code can register a <code>$destroy</code> event handler that will give it a chance to perform any necessary cleanup.</p> <p>Note that, in AngularJS, there is also a <code>$destroy</code> jQuery event, which can be used to clean up DOM bindings before an element is removed from the DOM.</p> </div> </li> <li id=\"$eval\"> <h3>$eval([expression], [locals]);</h3> <div>\n<p>Executes the <code>expression</code> on the current scope and returns the result. Any exceptions in the expression are propagated (uncaught). This is useful when evaluating Angular expressions.</p>  <pre data-language=\"javascript\">var scope = ng.$rootScope.Scope();\nscope.a = 1;\nscope.b = 2;\n\nexpect(scope.$eval('a+b')).toEqual(3);\nexpect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);\n</pre> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> expression <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-function\">function()</code> </td> <td> <p>An angular expression to be executed.</p> <ul> <li>\n<code>string</code>: execute using the rules as defined in <a href=\"../../../guide/expression\">expression</a>.</li> <li>\n<code>function(scope)</code>: execute the function with the current <code>scope</code> parameter.</li> </ul> </td> </tr> <tr> <td> locals <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>Local variables object, useful for overriding values in scope.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The result of evaluating the expression.</p> </td> </tr> </table> </li> <li id=\"$evalAsync\"> <h3>$evalAsync([expression], [locals]);</h3> <div>\n<p>Executes the expression on the current scope at a later point in time.</p> <p>The <code>$evalAsync</code> makes no guarantees as to when the <code>expression</code> will be executed, only that:</p> <ul> <li>it will execute after the function that scheduled the evaluation (preferably before DOM rendering).</li> <li>at least one <a href=\"%24rootscope.scope#%24digest.html\">$digest cycle</a> will be performed after <code>expression</code> execution.</li> </ul> <p>Any exceptions from the execution of the expression are forwarded to the <a href=\"../service/%24exceptionhandler\">$exceptionHandler</a> service.</p> <p><strong>Note:</strong> if this function is called outside of a <code>$digest</code> cycle, a new <code>$digest</code> cycle will be scheduled. However, it is encouraged to always call code that changes the model from within an <code>$apply</code> call. That includes code evaluated via <code>$evalAsync</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> expression <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-function\">function()</code> </td> <td> <p>An angular expression to be executed.</p> <ul> <li>\n<code>string</code>: execute using the rules as defined in <a href=\"../../../guide/expression\">expression</a>.</li> <li>\n<code>function(scope)</code>: execute the function with the current <code>scope</code> parameter.</li> </ul> </td> </tr> <tr> <td> locals <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>Local variables object, useful for overriding values in scope.</p> </td> </tr> </tbody> </table> </li> <li id=\"$apply\"> <h3>$apply([exp]);</h3> <div>\n<p><code>$apply()</code> is used to execute an expression in angular from outside of the angular framework. (For example from browser DOM events, setTimeout, XHR or third party libraries). Because we are calling into the angular framework we need to perform proper scope life cycle of <a href=\"../service/%24exceptionhandler\">exception handling</a>, <a href=\"%24rootscope.scope#%24digest.html\">executing watches</a>.</p> <h2 id=\"life-cycle\">Life cycle</h2> <h2 id=\"pseudo-code-of-apply-\">Pseudo-Code of $apply()</h2> <pre data-language=\"javascript\">function $apply(expr) {\n  try {\n    return $eval(expr);\n  } catch (e) {\n    $exceptionHandler(e);\n  } finally {\n    $root.$digest();\n  }\n}\n</pre> <p>Scope's <code>$apply()</code> method transitions through the following stages:</p> <ol> <li>The <a href=\"../../../guide/expression\">expression</a> is executed using the <a href=\"%24rootscope.scope#%24eval.html\">$eval()</a> method.</li> <li>Any exceptions from the execution of the expression are forwarded to the <a href=\"../service/%24exceptionhandler\">$exceptionHandler</a> service.</li> <li>The <a href=\"%24rootscope.scope#%24watch.html\">watch</a> listeners are fired immediately after the expression was executed using the <a href=\"%24rootscope.scope#%24digest.html\">$digest()</a> method.</li> </ol> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> exp <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-function\">function()</code> </td> <td> <p>An angular expression to be executed.</p> <ul> <li>\n<code>string</code>: execute using the rules as defined in <a href=\"../../../guide/expression\">expression</a>.</li> <li>\n<code>function(scope)</code>: execute the function with current <code>scope</code> parameter.</li> </ul> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The result of evaluating the expression.</p> </td> </tr> </table> </li> <li id=\"$applyAsync\"> <h3>$applyAsync([exp]);</h3> <div>\n<p>Schedule the invocation of $apply to occur at a later time. The actual time difference varies across browsers, but is typically around ~10 milliseconds.</p> <p>This can be used to queue up multiple expressions which need to be evaluated in the same digest.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> exp <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-function\">function()</code> </td> <td> <p>An angular expression to be executed.</p> <ul> <li>\n<code>string</code>: execute using the rules as defined in <a href=\"../../../guide/expression\">expression</a>.</li> <li>\n<code>function(scope)</code>: execute the function with current <code>scope</code> parameter.</li> </ul> </td> </tr> </tbody> </table> </li> <li id=\"$on\"> <h3>$on(name, listener);</h3> <div>\n<p>Listens on events of a given type. See <a href=\"%24rootscope.scope#%24emit.html\">$emit</a> for discussion of event life cycle.</p> <p>The event listener function format is: <code>function(event, args...)</code>. The <code>event</code> object passed into the listener has the following attributes:</p> <ul> <li>\n<code>targetScope</code> - <code>{Scope}</code>: the scope on which the event was <code>$emit</code>-ed or <code>$broadcast</code>-ed.</li> <li>\n<code>currentScope</code> - <code>{Scope}</code>: the scope that is currently handling the event. Once the event propagates through the scope hierarchy, this property is set to null.</li> <li>\n<code>name</code> - <code>{string}</code>: name of the event.</li> <li>\n<code>stopPropagation</code> - <code>{function=}</code>: calling <code>stopPropagation</code> function will cancel further event propagation (available only for events that were <code>$emit</code>-ed).</li> <li>\n<code>preventDefault</code> - <code>{function}</code>: calling <code>preventDefault</code> sets <code>defaultPrevented</code> flag to true.</li> <li>\n<code>defaultPrevented</code> - <code>{boolean}</code>: true if <code>preventDefault</code> was called.</li> </ul> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Event name to listen on.</p> </td> </tr> <tr> <td> listener </td> <td> <code class=\"label type-hint type-hint-function\">function(event, ...args)</code> </td> <td> <p>Function to call when the event is emitted.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function()</code></td> <td>\n<p>Returns a deregistration function for this listener.</p> </td> </tr> </table> </li> <li id=\"$emit\"> <h3>$emit(name, args);</h3> <div>\n<p>Dispatches an event <code>name</code> upwards through the scope hierarchy notifying the registered <a href=\"%24rootscope.scope#%24on.html\"><code>$rootScope.Scope</code></a> listeners.</p> <p>The event life cycle starts at the scope on which <code>$emit</code> was called. All <a href=\"%24rootscope.scope#%24on.html\">listeners</a> listening for <code>name</code> event on this scope get notified. Afterwards, the event traverses upwards toward the root scope and calls all registered listeners along the way. The event will stop propagating if one of the listeners cancels it.</p> <p>Any exception emitted from the <a href=\"%24rootscope.scope#%24on.html\">listeners</a> will be passed onto the <a href=\"../service/%24exceptionhandler\">$exceptionHandler</a> service.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Event name to emit.</p> </td> </tr> <tr> <td> args </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Optional one or more arguments which will be passed onto the event listeners.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>Event object (see <a href=\"%24rootscope.scope#%24on.html\"><code>$rootScope.Scope</code></a>).</p> </td> </tr> </table> </li> <li id=\"$broadcast\"> <h3>$broadcast(name, args);</h3> <div>\n<p>Dispatches an event <code>name</code> downwards to all child scopes (and their children) notifying the registered <a href=\"%24rootscope.scope#%24on.html\"><code>$rootScope.Scope</code></a> listeners.</p> <p>The event life cycle starts at the scope on which <code>$broadcast</code> was called. All <a href=\"%24rootscope.scope#%24on.html\">listeners</a> listening for <code>name</code> event on this scope get notified. Afterwards, the event propagates to all direct and indirect scopes of the current scope and calls all registered listeners along the way. The event cannot be canceled.</p> <p>Any exception emitted from the <a href=\"%24rootscope.scope#%24on.html\">listeners</a> will be passed onto the <a href=\"../service/%24exceptionhandler\">$exceptionHandler</a> service.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Event name to broadcast.</p> </td> </tr> <tr> <td> args </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Optional one or more arguments which will be passed onto the event listeners.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>Event object, see <a href=\"%24rootscope.scope#%24on.html\"><code>$rootScope.Scope</code></a></p> </td> </tr> </table> </li> </ul> <h2>Events</h2> <ul class=\"events defs\"> <li id=\"$destroy\"> <h3>$destroy</h3> <div>\n<p>Broadcasted when a scope and its children are being destroyed.</p> <p>Note that, in AngularJS, there is also a <code>$destroy</code> jQuery event, which can be used to clean up DOM bindings before an element is removed from the DOM.</p> </div> <div class=\"inline\"> <h4>Type:</h4> <div class=\"type\">broadcast</div> </div> <div class=\"inline\"> <h4>Target:</h4> <div class=\"target\">scope being destroyed </div> </div> </li> </ul> <h2>Properties</h2> <ul class=\"properties defs\"> <li id=\"$id\"> <h3>$id</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Unique scope ID (monotonically increasing) useful for debugging.</p> </td> </tr> </table> </li> <li id=\"$parent\"> <h3>$parent</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Reference to the parent scope.</p> </td> </tr> </table> </li> <li id=\"$root\"> <h3>$root</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Reference to the root scope.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/type/$rootScope.Scope\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/type/$rootScope.Scope</a>\n  </p>\n</div>\n","api/ng/service/$animate":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/animate.js?message=docs(%24animate)%3A%20describe%20your%20change...#L155\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/animate.js#L155\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$animate</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24animateprovider\">$animateProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The $animate service provides rudimentary DOM manipulation functions to insert, remove and move elements within the DOM, as well as adding and removing classes. This service is the core service used by the ngAnimate $animator service which provides high-level animation hooks for CSS and JavaScript.</p> <p>$animate is available in the AngularJS core, however, the ngAnimate module must be included to enable full out animation support. Otherwise, $animate will only perform simple DOM manipulation operations.</p> <p>To learn more about enabling animation support, click here to visit the <a href=\"../../nganimate\">ngAnimate module page</a> as well as the <a href=\"../../nganimate/service/%24animate\">ngAnimate $animate service page</a>.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"enter\"> <h3>enter(element, parent, after, [options]);</h3> <div>\n<p>Inserts the element into the DOM either after the <code>after</code> element or as the first child within the <code>parent</code> element. When the function is called a promise is returned that will be resolved at a later time.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element which will be inserted into the DOM</p> </td> </tr> <tr> <td> parent </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the parent element which will append the element as a child (if the after element is not present)</p> </td> </tr> <tr> <td> after </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the sibling element which will append the element after itself</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of styles that will be applied to the element.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> <li id=\"leave\"> <h3>leave(element, [options]);</h3> <div>\n<p>Removes the element from the DOM. When the function is called a promise is returned that will be resolved at a later time.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element which will be removed from the DOM</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of options that will be applied to the element.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> <li id=\"move\"> <h3>move(element, parent, after, [options]);</h3> <div>\n<p>Moves the position of the provided element within the DOM to be placed either after the <code>after</code> element or inside of the <code>parent</code> element. When the function is called a promise is returned that will be resolved at a later time.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element which will be moved around within the DOM</p> </td> </tr> <tr> <td> parent </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the parent element where the element will be inserted into (if the after element is not present)</p> </td> </tr> <tr> <td> after </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the sibling element where the element will be positioned next to</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of options that will be applied to the element.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> <li id=\"addClass\"> <h3>addClass(element, className, [options]);</h3> <div>\n<p>Adds the provided className CSS class value to the provided element. When the function is called a promise is returned that will be resolved at a later time.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element which will have the className value added to it</p> </td> </tr> <tr> <td> className </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>the CSS class which will be added to the element</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of options that will be applied to the element.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> <li id=\"removeClass\"> <h3>removeClass(element, className, [options]);</h3> <div>\n<p>Removes the provided className CSS class value from the provided element. When the function is called a promise is returned that will be resolved at a later time.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element which will have the className value removed from it</p> </td> </tr> <tr> <td> className </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>the CSS class which will be removed from the element</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of options that will be applied to the element.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> <li id=\"setClass\"> <h3>setClass(element, add, remove, [options]);</h3> <div>\n<p>Adds and/or removes the given CSS classes to and from the element. When the function is called a promise is returned that will be resolved at a later time.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element which will have its CSS classes changed removed from it</p> </td> </tr> <tr> <td> add </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>the CSS classes which will be added to the element</p> </td> </tr> <tr> <td> remove </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>the CSS class which will be removed from the element</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of options that will be applied to the element.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$animate\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$animate</a>\n  </p>\n</div>\n","api/ng/service/$cachefactory":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/cacheFactory.js?message=docs(%24cacheFactory)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/cacheFactory.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$cacheFactory</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Factory that constructs <a href=\"../type/%24cachefactory.cache\">Cache</a> objects and gives access to them.</p> <pre data-language=\"javascript\">var cache = $cacheFactory('cacheId');\nexpect($cacheFactory.get('cacheId')).toBe(cache);\nexpect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();\n\ncache.put(\"key\", \"value\");\ncache.put(\"another key\", \"another value\");\n\n// We've specified no options on creation\nexpect(cache.info()).toEqual({id: 'cacheId', size: 2});\n</pre> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$cacheFactory(cacheId, [options]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> cacheId </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Name or id of the newly created cache.</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>Options object that specifies the cache behavior. Properties:</p> <ul> <li>\n<code>{number=}</code> <code>capacity</code> — turns the cache into LRU cache.</li> </ul> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">object</code></td> <td>\n<p>Newly created cache object with the following set of methods:</p> <ul> <li>\n<code>{object}</code> <code>info()</code> — Returns id, size, and options of cache.</li> <li>\n<code>{{*}}</code> <code>put({string} key, {*} value)</code> — Puts a new key-value pair into the cache and returns it.</li> <li>\n<code>{{*}}</code> <code>get({string} key)</code> — Returns cached value for <code>key</code> or undefined for cache miss.</li> <li>\n<code>{void}</code> <code>remove({string} key)</code> — Removes a key-value pair from the cache.</li> <li>\n<code>{void}</code> <code>removeAll()</code> — Removes all cached values.</li> <li>\n<code>{void}</code> <code>destroy()</code> — Removes references to this cache from $cacheFactory.</li> </ul> </td> </tr> </table> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"info\"> <h3>info();</h3> <div>\n<p>Get information about all the caches that have been created</p> </div> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<ul> <li>key-value map of <code>cacheId</code> to the result of calling <code>cache#info</code>\n</li> </ul> </td> </tr> </table> </li> <li id=\"get\"> <h3>get(cacheId);</h3> <div>\n<p>Get access to a cache object by the <code>cacheId</code> used when it was created.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> cacheId </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Name or id of a cache to access.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">object</code></td> <td>\n<p>Cache object identified by the cacheId or undefined if no such cache.</p> </td> </tr> </table> </li> </ul>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$cacheFactory\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$cacheFactory</a>\n  </p>\n</div>\n","api/ng/service/$controller":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/controller.js?message=docs(%24controller)%3A%20describe%20your%20change...#L50\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/controller.js#L50\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$controller</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24controllerprovider\">$controllerProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p><code>$controller</code> service is responsible for instantiating controllers.</p> <p>It's just a simple call to <a href=\"../../auto/service/%24injector\">$injector</a>, but extracted into a service, so that one can override this service with <a href=\"https://gist.github.com/1649788\">BC version</a>.</p> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"../../auto/service/%24injector\"><code>$injector</code></a></li> </ul> <h2 id=\"usage\">Usage</h2> <p><code>$controller(constructor, locals);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> constructor </td> <td> <code class=\"label type-hint type-hint-function\">function()</code><code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>If called with a function then it's considered to be the controller constructor function. Otherwise it's considered to be a string which is used to retrieve the controller constructor using the following steps:</p> <ul> <li>check if a controller with given name is registered via <code>$controllerProvider</code>\n</li> <li>check if evaluating the string on the current scope returns a constructor</li> <li>\n<p>if $controllerProvider#allowGlobals, check <code>window[constructor]</code> on the global <code>window</code> object (not recommended)</p> <p>The string can use the <code>controller as property</code> syntax, where the controller instance is published as the specified property on the <code>scope</code>; the <code>scope</code> must be injected into <code>locals</code> param for this to work correctly.</p> </li> </ul> </td> </tr> <tr> <td> locals </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Injection locals for Controller.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>Instance of given controller.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$controller\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$controller</a>\n  </p>\n</div>\n","api/ng/service/$document":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/document.js?message=docs(%24document)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/document.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$document</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>A <a href=\"../function/angular.element\">jQuery or jqLite</a> wrapper for the browser's <code>window.document</code> object.</p> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"%24window\"><code>$window</code></a></li> </ul>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$document\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$document</a>\n  </p>\n</div>\n","api/ng/service/$exceptionhandler":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/exceptionHandler.js?message=docs(%24exceptionHandler)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/exceptionHandler.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$exceptionHandler</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Any uncaught exception in angular expressions is delegated to this service. The default implementation simply delegates to <code>$log.error</code> which logs it into the browser console.</p> <p>In unit tests, if <code>angular-mocks.js</code> is loaded, this service is overridden by <a href=\"../../ngmock/service/%24exceptionhandler\">mock $exceptionHandler</a> which aids in testing.</p> <h2 id=\"example-\">Example:</h2> <pre data-language=\"javascript\">angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {\n  return function(exception, cause) {\n    exception.message += ' (caused by \"' + cause + '\")';\n    throw exception;\n  };\n});\n</pre> <p>This example will override the normal action of <code>$exceptionHandler</code>, to make angular exceptions fail hard when they happen, instead of just logging to the console.</p>  Note, that code executed in event-listeners (even those registered using jqLite's <code>on</code>/<code>bind</code> methods) does not delegate exceptions to the <a href=\"%24exceptionhandler\">$exceptionHandler</a> (unless executed during a digest). <p>If you wish, you can manually delegate exceptions, e.g. <code>try { ... } catch(e) { $exceptionHandler(e); }</code></p> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"%24log\"><code>$log</code></a></li> </ul> <h2 id=\"usage\">Usage</h2> <p><code>$exceptionHandler(exception, [cause]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> exception </td> <td> <code class=\"label type-hint type-hint-error\">Error</code> </td> <td> <p>Exception associated with the error.</p> </td> </tr> <tr> <td> cause <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>optional information about the context in which the error was thrown.</p> </td> </tr> </tbody> </table> </section> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$exceptionHandler\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$exceptionHandler</a>\n  </p>\n</div>\n","api/ng/service/$filter":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/filter.js?message=docs(%24filter)%3A%20describe%20your%20change...#L71\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/filter.js#L71\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$filter</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24filterprovider\">$filterProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Filters are used for formatting data displayed to the user.</p> <p>The general syntax in templates is as follows:</p> <pre>{{ expression [| filter_name[:parameter_value] ... ] }}\n</pre> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$filter(name);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">String</code> </td> <td> <p>Name of the filter function to retrieve</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">Function</code></td> <td>\n<p>the filter function</p> </td> </tr> </table>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$filter\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$filter</a>\n  </p>\n</div>\n","api/ng/service/$httpbackend":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/httpBackend.js?message=docs(%24httpBackend)%3A%20describe%20your%20change...#L7\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/httpBackend.js#L7\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$httpBackend</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>HTTP backend used by the <a href=\"%24http\">service</a> that delegates to XMLHttpRequest object or JSONP and deals with browser incompatibilities.</p> <p>You should never need to use this service directly, instead use the higher-level abstractions: <a href=\"%24http\">$http</a> or <a href=\"../../ngresource/service/%24resource\">$resource</a>.</p> <p>During testing this implementation is swapped with <a href=\"../../ngmock/service/%24httpbackend\">mock $httpBackend</a> which can be trained with responses.</p> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"%24window\"><code>$window</code></a></li>\n<li><a href=\"%24document\"><code>$document</code></a></li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$httpBackend\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$httpBackend</a>\n  </p>\n</div>\n","api/ng/service/$interpolate":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/interpolate.js?message=docs(%24interpolate)%3A%20describe%20your%20change...#L91\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/interpolate.js#L91\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$interpolate</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24interpolateprovider\">$interpolateProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Compiles a string with markup into an interpolation function. This service is used by the HTML <a href=\"%24compile\">$compile</a> service for data binding. See <a href=\"../provider/%24interpolateprovider\">$interpolateProvider</a> for configuring the interpolation markup.</p> <pre data-language=\"javascript\">var $interpolate = ...; // injected\nvar exp = $interpolate('Hello {{name | uppercase}}!');\nexpect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');\n</pre> <p><code>$interpolate</code> takes an optional fourth argument, <code>allOrNothing</code>. If <code>allOrNothing</code> is <code>true</code>, the interpolation function will return <code>undefined</code> unless all embedded expressions evaluate to a value other than <code>undefined</code>.</p> <pre data-language=\"javascript\">var $interpolate = ...; // injected\nvar context = {greeting: 'Hello', name: undefined };\n\n// default \"forgiving\" mode\nvar exp = $interpolate('{{greeting}} {{name}}!');\nexpect(exp(context)).toEqual('Hello !');\n\n// \"allOrNothing\" mode\nexp = $interpolate('{{greeting}} {{name}}!', false, null, true);\nexpect(exp(context)).toBeUndefined();\ncontext.name = 'Angular';\nexpect(exp(context)).toEqual('Hello Angular!');\n</pre> <p><code>allOrNothing</code> is useful for interpolating URLs. <code>ngSrc</code> and <code>ngSrcset</code> use this behavior.</p> <h4 id=\"escaped-interpolation\">Escaped Interpolation</h4> <p>$interpolate provides a mechanism for escaping interpolation markers. Start and end markers can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash). It will be rendered as a regular start/end marker, and will not be interpreted as an expression or binding.</p> <p>This enables web-servers to prevent script injection attacks and defacing attacks, to some degree, while also enabling code examples to work without relying on the <a href=\"../directive/ngnonbindable\">ngNonBindable</a> directive.</p> <p><strong>For security purposes, it is strongly encouraged that web servers escape user-supplied data, replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all interpolation start/end markers with their escaped counterparts.</strong></p> <p>Escaped interpolation markers are only replaced with the actual interpolation markers in rendered output when the $interpolate service processes the text. So, for HTML elements interpolated by <a href=\"%24compile\">$compile</a>, or otherwise interpolated with the <code>mustHaveExpression</code> parameter set to <code>true</code>, the interpolated text must contain an unescaped interpolation expression. As such, this is typically useful only when user-data is used in rendering a template from the server, or when otherwise untrusted data is used by a directive.</p>  </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"%24parse\"><code>$parse</code></a></li>\n<li><a href=\"%24sce\"><code>$sce</code></a></li> </ul> <h2 id=\"usage\">Usage</h2> <p><code>$interpolate(text, [mustHaveExpression], [trustedContext], [allOrNothing]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> text </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The text with markup to interpolate.</p> </td> </tr> <tr> <td> mustHaveExpression <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>if set to true then the interpolation string must have embedded expression in order to return an interpolation function. Strings with no embedded expression will return null for the interpolation function.</p> </td> </tr> <tr> <td> trustedContext <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>when provided, the returned function passes the interpolated result through <a href=\"%24sce#getTrusted.html\">$sce.getTrusted(interpolatedResult, trustedContext)</a> before returning it. Refer to the <a href=\"%24sce\">$sce</a> service that provides Strict Contextual Escaping for details.</p> </td> </tr> <tr> <td> allOrNothing <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>if <code>true</code>, then the returned function returns undefined unless all embedded expressions evaluate to a value other than <code>undefined</code>.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function(context)</code></td> <td>\n<p>an interpolation function which is used to compute the interpolated string. The function has these parameters:</p> <ul> <li>\n<code>context</code>: evaluation context for all expressions embedded in the interpolated text</li> </ul> </td> </tr> </table> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"startSymbol\"> <h3>startSymbol();</h3> <div>\n<p>Symbol to denote the start of expression in the interpolated string. Defaults to <code>{{</code>.</p> <p>Use <a href=\"../provider/%24interpolateprovider#startSymbol.html\"><code>$interpolateProvider.startSymbol</code></a> to change the symbol.</p> </div> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>start symbol.</p> </td> </tr> </table> </li> <li id=\"endSymbol\"> <h3>endSymbol();</h3> <div>\n<p>Symbol to denote the end of expression in the interpolated string. Defaults to <code>}}</code>.</p> <p>Use <a href=\"../provider/%24interpolateprovider#endSymbol.html\"><code>$interpolateProvider.endSymbol</code></a> to change the symbol.</p> </div> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>end symbol.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$interpolate\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$interpolate</a>\n  </p>\n</div>\n","api/ng/service/$interval":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/interval.js?message=docs(%24interval)%3A%20describe%20your%20change...#L10\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/interval.js#L10\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$interval</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Angular's wrapper for <code>window.setInterval</code>. The <code>fn</code> function is executed every <code>delay</code> milliseconds.</p> <p>The return value of registering an interval function is a promise. This promise will be notified upon each tick of the interval, and will be resolved after <code>count</code> iterations, or run indefinitely if <code>count</code> is not defined. The value of the notification will be the number of iterations that have run. To cancel an interval, call <code>$interval.cancel(promise)</code>.</p> <p>In tests you can use <a href=\"../../ngmock/service/%24interval#flush.html\"><code>$interval.flush(millis)</code></a> to move forward by <code>millis</code> milliseconds and trigger any functions scheduled to run in that time.</p> <div class=\"alert alert-warning\"> <strong>Note</strong>: Intervals created by this service must be explicitly destroyed when you are finished with them. In particular they are not automatically destroyed when a controller's scope or a directive's element are destroyed. You should take this into consideration and make sure to always cancel the interval at the appropriate moment. See the example below for more details on how and when to do this. </div> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$interval(fn, delay, [count], [invokeApply]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> fn </td> <td> <code class=\"label type-hint type-hint-function\">function()</code> </td> <td> <p>A function that should be called repeatedly.</p> </td> </tr> <tr> <td> delay </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Number of milliseconds between each function call.</p> </td> </tr> <tr> <td> count <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Number of times to repeat. If not set, or 0, will repeat indefinitely.</p> <p><em>(default: 0)</em></p> </td> </tr> <tr> <td> invokeApply <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>If set to <code>false</code> skips model dirty checking, otherwise will invoke <code>fn</code> within the <a href=\"../type/%24rootscope.scope#%24apply.html\">$apply</a> block.</p> <p><em>(default: true)</em></p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">promise</code></td> <td>\n<p>A promise which will be notified on each iteration.</p> </td> </tr> </table> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"cancel\"> <h3>cancel(promise);</h3> <div>\n<p>Cancels a task associated with the <code>promise</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> promise </td> <td> <code class=\"label type-hint type-hint-promise\">promise</code> </td> <td> <p>returned by the <code>$interval</code> function.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>Returns <code>true</code> if the task was successfully canceled.</p> </td> </tr> </table> </li> </ul>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$interval\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$interval</a>\n  </p>\n</div>\n","api/ng/service/$locale":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/locale.js?message=docs(%24locale)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/locale.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$locale</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>$locale service provides localization rules for various Angular components. As of right now the only public api is:</p> <ul> <li>\n<code>id</code> – <code>{string}</code> – locale id formatted as <code>languageId-countryId</code> (e.g. <code>en-us</code>)</li> </ul> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$locale\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$locale</a>\n  </p>\n</div>\n","api/ng/service/$log":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/log.js?message=docs(%24log)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/log.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$log</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24logprovider\">$logProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Simple service for logging. Default implementation safely writes the message into the browser's console (if present).</p> <p>The main purpose of this service is to simplify debugging and troubleshooting.</p> <p>The default is to log <code>debug</code> messages. You can use <a href=\"../provider/%24logprovider\">ng.$logProvider#debugEnabled</a> to change this.</p> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"%24window\"><code>$window</code></a></li> </ul> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"log\"> <h3>log();</h3> <div>\n<p>Write a log message</p> </div> </li> <li id=\"info\"> <h3>info();</h3> <div>\n<p>Write an information message</p> </div> </li> <li id=\"warn\"> <h3>warn();</h3> <div>\n<p>Write a warning message</p> </div> </li> <li id=\"error\"> <h3>error();</h3> <div>\n<p>Write an error message</p> </div> </li> <li id=\"debug\"> <h3>debug();</h3> <div>\n<p>Write a debug message</p> </div> </li> </ul>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$log\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$log</a>\n  </p>\n</div>\n","api/ng/service/$parse":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/parse.js?message=docs(%24parse)%3A%20describe%20your%20change...#L992\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/parse.js#L992\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$parse</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24parseprovider\">$parseProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Converts Angular <a href=\"../../../guide/expression\">expression</a> into a function.</p> <pre data-language=\"javascript\">var getter = $parse('user.name');\nvar setter = getter.assign;\nvar context = {user:{name:'angular'}};\nvar locals = {user:{name:'local'}};\n\nexpect(getter(context)).toEqual('angular');\nsetter(context, 'newValue');\nexpect(context.user.name).toEqual('newValue');\nexpect(getter(context, locals)).toEqual('local');\n</pre> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$parse(expression);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> expression </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>String expression to compile.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function(context, locals)</code></td> <td>\n<p>a function which represents the compiled expression:</p> <ul> <li>\n<code>context</code> – <code>{object}</code> – an object against which any expressions embedded in the strings are evaluated against (typically a scope object).</li> <li>\n<p><code>locals</code> – <code>{object=}</code> – local variables context object, useful for overriding values in <code>context</code>.</p> <p>The returned function also has the following properties:</p> <ul> <li>\n<code>literal</code> – <code>{boolean}</code> – whether the expression's top-level node is a JavaScript literal.</li> <li>\n<code>constant</code> – <code>{boolean}</code> – whether the expression is made entirely of JavaScript constant literals.</li> <li>\n<code>assign</code> – <code>{?function(context, value)}</code> – if the expression is assignable, this will be set to a function to change its value on the given context.</li> </ul> </li> </ul> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$parse\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$parse</a>\n  </p>\n</div>\n","api/ng/service/$rootelement":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/rootElement.js?message=docs(%24rootElement)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/rootElement.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$rootElement</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The root element of Angular application. This is either the element where <a href=\"../directive/ngapp\">ngApp</a> was declared or the element passed into <a href=\"../function/angular.bootstrap\"><code>angular.bootstrap</code></a>. The element represents the root element of application. It is also the location where the application's <a href=\"../../auto/service/%24injector\">$injector</a> service gets published, and can be retrieved using <code>$rootElement.injector()</code>.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$rootElement\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$rootElement</a>\n  </p>\n</div>\n","api/ng/service/$rootscope":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/rootScope.js?message=docs(%24rootScope)%3A%20describe%20your%20change...#L59\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/rootScope.js#L59\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$rootScope</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24rootscopeprovider\">$rootScopeProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Every application has a single root <a href=\"../type/%24rootscope.scope\">scope</a>. All other scopes are descendant scopes of the root scope. Scopes provide separation between the model and the view, via a mechanism for watching the model for changes. They also provide an event emission/broadcast and subscription facility. See the <a href=\"../../../guide/scope\">developer guide on scopes</a>.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$rootScope\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$rootScope</a>\n  </p>\n</div>\n","api/ng/service/$compile":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/compile.js?message=docs(%24compile)%3A%20describe%20your%20change...#L32\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/compile.js#L32\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$compile</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24compileprovider\">$compileProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Compiles an HTML string or DOM into a template and produces a template function, which can then be used to link <a href=\"../type/%24rootscope.scope\"><code>scope</code></a> and the template together.</p> <p>The compilation is a process of walking the DOM tree and matching DOM elements to <a href=\"../provider/%24compileprovider#directive.html\">directives</a>.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> This document is an in-depth reference of all directive options. For a gentle introduction to directives with examples of common use cases, see the <a href=\"../../../guide/directive\">directive guide</a>. </div> <h2 id=\"comprehensive-directive-api\">Comprehensive Directive API</h2> <p>There are many different options for a directive.</p> <p>The difference resides in the return value of the factory function. You can either return a \"Directive Definition Object\" (see below) that defines the directive properties, or just the <code>postLink</code> function (all other properties will have the default values).</p> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> It's recommended to use the \"directive definition object\" form. </div> <p>Here's an example directive declared with a Directive Definition Object:</p> <pre data-language=\"javascript\">var myModule = angular.module(...);\n\nmyModule.directive('directiveName', function factory(injectables) {\n  var directiveDefinitionObject = {\n    priority: 0,\n    template: '&lt;div&gt;&lt;/div&gt;', // or // function(tElement, tAttrs) { ... },\n    // or\n    // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },\n    transclude: false,\n    restrict: 'A',\n    templateNamespace: 'html',\n    scope: false,\n    controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },\n    controllerAs: 'stringIdentifier',\n    bindToController: false,\n    require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],\n    compile: function compile(tElement, tAttrs, transclude) {\n      return {\n        pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n        post: function postLink(scope, iElement, iAttrs, controller) { ... }\n      }\n      // or\n      // return function postLink( ... ) { ... }\n    },\n    // or\n    // link: {\n    //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n    //  post: function postLink(scope, iElement, iAttrs, controller) { ... }\n    // }\n    // or\n    // link: function postLink( ... ) { ... }\n  };\n  return directiveDefinitionObject;\n});\n</pre> <div class=\"alert alert-warning\"> <strong>Note:</strong> Any unspecified options will use the default value. You can see the default values below. </div> <p>Therefore the above can be simplified as:</p> <pre data-language=\"javascript\">var myModule = angular.module(...);\n\nmyModule.directive('directiveName', function factory(injectables) {\n  var directiveDefinitionObject = {\n    link: function postLink(scope, iElement, iAttrs) { ... }\n  };\n  return directiveDefinitionObject;\n  // or\n  // return function postLink(scope, iElement, iAttrs) { ... }\n});\n</pre> <h3 id=\"directive-definition-object\">Directive Definition Object</h3> <p>The directive definition object provides instructions to the <a href=\"%24compile\">compiler</a>. The attributes are:</p> <h4 id=\"-multielement-\">multiElement</h4> <p>When this property is set to true, the HTML compiler will collect DOM nodes between nodes with the attributes <code>directive-name-start</code> and <code>directive-name-end</code>, and group them together as the directive elements. It is recommended that this feature be used on directives which are not strictly behavioural (such as <a href=\"../directive/ngclick\"><code>ngClick</code></a>), and which do not manipulate or replace child nodes (such as <a href=\"../directive/nginclude\"><code>ngInclude</code></a>).</p> <h4 id=\"-priority-\">priority</h4> <p>When there are multiple directives defined on a single DOM element, sometimes it is necessary to specify the order in which the directives are applied. The <code>priority</code> is used to sort the directives before their <code>compile</code> functions get called. Priority is defined as a number. Directives with greater numerical <code>priority</code> are compiled first. Pre-link functions are also run in priority order, but post-link functions are run in reverse order. The order of directives with the same priority is undefined. The default priority is <code>0</code>.</p> <h4 id=\"-terminal-\">terminal</h4> <p>If set to true then the current <code>priority</code> will be the last set of directives which will execute (any directives at the current priority will still execute as the order of execution on same <code>priority</code> is undefined). Note that expressions and other directives used in the directive's template will also be excluded from execution.</p> <h4 id=\"-scope-\">scope</h4> <p><strong>If set to <code>true</code>,</strong> then a new scope will be created for this directive. If multiple directives on the same element request a new scope, only one new scope is created. The new scope rule does not apply for the root of the template since the root of the template always gets a new scope.</p> <p><strong>If set to <code>{}</code> (object hash),</strong> then a new \"isolate\" scope is created. The 'isolate' scope differs from normal scope in that it does not prototypically inherit from the parent scope. This is useful when creating reusable components, which should not accidentally read or modify data in the parent scope.</p> <p>The 'isolate' scope takes an object hash which defines a set of local scope properties derived from the parent scope. These local properties are useful for aliasing values for templates. Locals definition is a hash of local scope property to its source:</p> <ul> <li>\n<p><code>@</code> or <code>@attr</code> - bind a local scope property to the value of DOM attribute. The result is always a string since DOM attributes are strings. If no <code>attr</code> name is specified then the attribute name is assumed to be the same as the local name. Given <code>&lt;widget my-attr=\"hello {{name}}\"&gt;</code> and widget definition of <code>scope: { localName:'@myAttr' }</code>, then widget scope property <code>localName</code> will reflect the interpolated value of <code>hello {{name}}</code>. As the <code>name</code> attribute changes so will the <code>localName</code> property on the widget scope. The <code>name</code> is read from the parent scope (not component scope).</p> </li> <li>\n<p><code>=</code> or <code>=attr</code> - set up bi-directional binding between a local scope property and the parent scope property of name defined via the value of the <code>attr</code> attribute. If no <code>attr</code> name is specified then the attribute name is assumed to be the same as the local name. Given <code>&lt;widget my-attr=\"parentModel\"&gt;</code> and widget definition of <code>scope: { localModel:'=myAttr' }</code>, then widget scope property <code>localModel</code> will reflect the value of <code>parentModel</code> on the parent scope. Any changes to <code>parentModel</code> will be reflected in <code>localModel</code> and any changes in <code>localModel</code> will reflect in <code>parentModel</code>. If the parent scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You can avoid this behavior using <code>=?</code> or <code>=?attr</code> in order to flag the property as optional. If you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use <code>=*</code> or <code>=*attr</code> (<code>=*?</code> or <code>=*?attr</code> if the property is optional).</p> </li> <li>\n<p><code>&amp;</code> or <code>&amp;attr</code> - provides a way to execute an expression in the context of the parent scope. If no <code>attr</code> name is specified then the attribute name is assumed to be the same as the local name. Given <code>&lt;widget my-attr=\"count = count + value\"&gt;</code> and widget definition of <code>scope: { localFn:'&amp;myAttr' }</code>, then isolate scope property <code>localFn</code> will point to a function wrapper for the <code>count = count + value</code> expression. Often it's desirable to pass data from the isolated scope via an expression to the parent scope, this can be done by passing a map of local variable names and values into the expression wrapper fn. For example, if the expression is <code>increment(amount)</code> then we can specify the amount value by calling the <code>localFn</code> as <code>localFn({amount: 22})</code>.</p> </li> </ul> <h4 id=\"-bindtocontroller-\">bindToController</h4> <p>When an isolate scope is used for a component (see above), and <code>controllerAs</code> is used, <code>bindToController: true</code> will allow a component to have its properties bound to the controller, rather than to scope. When the controller is instantiated, the initial values of the isolate scope bindings are already available.</p> <h4 id=\"-controller-\">controller</h4> <p>Controller constructor function. The controller is instantiated before the pre-linking phase and it is shared with other directives (see <code>require</code> attribute). This allows the directives to communicate with each other and augment each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:</p> <ul> <li>\n<code>$scope</code> - Current scope associated with the element</li> <li>\n<code>$element</code> - Current element</li> <li>\n<code>$attrs</code> - Current attributes object for the element</li> <li>\n<code>$transclude</code> - A transclude linking function pre-bound to the correct transclusion scope: <code>function([scope], cloneLinkingFn, futureParentElement)</code>.<ul> <li>\n<code>scope</code>: optional argument to override the scope.</li> <li>\n<code>cloneLinkingFn</code>: optional argument to create clones of the original transcluded content.</li> <li>\n<code>futureParentElement</code>:<ul> <li>defines the parent to which the <code>cloneLinkingFn</code> will add the cloned elements.</li> <li>default: <code>$element.parent()</code> resp. <code>$element</code> for <code>transclude:'element'</code> resp. <code>transclude:true</code>.</li> <li>only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements) and when the <code>cloneLinkinFn</code> is passed, as those elements need to created and cloned in a special way when they are defined outside their usual containers (e.g. like <code>&lt;svg&gt;</code>).</li> <li>See also the <code>directive.templateNamespace</code> property.</li> </ul> </li> </ul> </li> </ul> <h4 id=\"-require-\">require</h4> <p>Require another directive and inject its controller as the fourth argument to the linking function. The <code>require</code> takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the injected argument will be an array in corresponding order. If no such directive can be found, or if the directive does not have a controller, then an error is raised (unless no link function is specified, in which case error checking is skipped). The name can be prefixed with:</p> <ul> <li>(no prefix) - Locate the required controller on the current element. Throw an error if not found.</li> <li>\n<code>?</code> - Attempt to locate the required controller or pass <code>null</code> to the <code>link</code> fn if not found.</li> <li>\n<code>^</code> - Locate the required controller by searching the element and its parents. Throw an error if not found.</li> <li>\n<code>^^</code> - Locate the required controller by searching the element's parents. Throw an error if not found.</li> <li>\n<code>?^</code> - Attempt to locate the required controller by searching the element and its parents or pass <code>null</code> to the <code>link</code> fn if not found.</li> <li>\n<code>?^^</code> - Attempt to locate the required controller by searching the element's parents, or pass <code>null</code> to the <code>link</code> fn if not found.</li> </ul> <h4 id=\"-controlleras-\">controllerAs</h4> <p>Controller alias at the directive scope. An alias for the controller so it can be referenced at the directive template. The directive needs to define a scope for this configuration to be used. Useful in the case when directive is used as component.</p> <h4 id=\"-restrict-\">restrict</h4> <p>String of subset of <code>EACM</code> which restricts the directive to a specific directive declaration style. If omitted, the defaults (elements and attributes) are used.</p> <ul> <li>\n<code>E</code> - Element name (default): <code>&lt;my-directive&gt;&lt;/my-directive&gt;</code>\n</li> <li>\n<code>A</code> - Attribute (default): <code>&lt;div my-directive=\"exp\"&gt;&lt;/div&gt;</code>\n</li> <li>\n<code>C</code> - Class: <code>&lt;div class=\"my-directive: exp;\"&gt;&lt;/div&gt;</code>\n</li> <li>\n<code>M</code> - Comment: <code>&lt;!-- directive: my-directive exp --&gt;</code>\n</li> </ul> <h4 id=\"-templatenamespace-\">templateNamespace</h4> <p>String representing the document type used by the markup in the template. AngularJS needs this information as those elements need to be created and cloned in a special way when they are defined outside their usual containers like <code>&lt;svg&gt;</code> and <code>&lt;math&gt;</code>.</p> <ul> <li>\n<code>html</code> - All root nodes in the template are HTML. Root nodes may also be top-level elements such as <code>&lt;svg&gt;</code> or <code>&lt;math&gt;</code>.</li> <li>\n<code>svg</code> - The root nodes in the template are SVG elements (excluding <code>&lt;math&gt;</code>).</li> <li>\n<code>math</code> - The root nodes in the template are MathML elements (excluding <code>&lt;svg&gt;</code>).</li> </ul> <p>If no <code>templateNamespace</code> is specified, then the namespace is considered to be <code>html</code>.</p> <h4 id=\"-template-\">template</h4> <p>HTML markup that may:</p> <ul> <li>Replace the contents of the directive's element (default).</li> <li>Replace the directive's element itself (if <code>replace</code> is true - DEPRECATED).</li> <li>Wrap the contents of the directive's element (if <code>transclude</code> is true).</li> </ul> <p>Value may be:</p> <ul> <li>A string. For example <code>&lt;div red-on-hover&gt;{{delete_str}}&lt;/div&gt;</code>.</li> <li>A function which takes two arguments <code>tElement</code> and <code>tAttrs</code> (described in the <code>compile</code> function api below) and returns a string value.</li> </ul> <h4 id=\"-templateurl-\">templateUrl</h4> <p>This is similar to <code>template</code> but the template is loaded from the specified URL, asynchronously.</p> <p>Because template loading is asynchronous the compiler will suspend compilation of directives on that element for later when the template has been resolved. In the meantime it will continue to compile and link sibling and parent elements as though this element had not contained any directives.</p> <p>The compiler does not suspend the entire compilation to wait for templates to be loaded because this would result in the whole app \"stalling\" until all templates are loaded asynchronously - even in the case when only one deeply nested directive has <code>templateUrl</code>.</p> <p>Template loading is asynchronous even if the template has been preloaded into the <a href=\"%24templatecache\"><code>$templateCache</code></a></p> <p>You can specify <code>templateUrl</code> as a string representing the URL or as a function which takes two arguments <code>tElement</code> and <code>tAttrs</code> (described in the <code>compile</code> function api below) and returns a string value representing the url. In either case, the template URL is passed through <a href=\"%24sce#getTrustedResourceUrl.html\">$sce.getTrustedResourceUrl</a>.</p> <h4 id=\"-replace-deprecated-will-be-removed-in-next-major-release-i-e-v2-0-\">replace ([<em>DEPRECATED</em>!], will be removed in next major release - i.e. v2.0)</h4> <p>specify what the template should replace. Defaults to <code>false</code>.</p> <ul> <li>\n<code>true</code> - the template will replace the directive's element.</li> <li>\n<code>false</code> - the template will replace the contents of the directive's element.</li> </ul> <p>The replacement process migrates all of the attributes / classes from the old element to the new one. See the <a href=\"../../../guide/directive#template-expanding-directive.html\">Directives Guide</a> for an example.</p> <p>There are very few scenarios where element replacement is required for the application function, the main one being reusable custom components that are used within SVG contexts (because SVG doesn't work with custom elements in the DOM tree).</p> <h4 id=\"-transclude-\">transclude</h4> <p>Extract the contents of the element where the directive appears and make it available to the directive. The contents are compiled and provided to the directive as a <strong>transclusion function</strong>. See the <a href=\"%24compile#transclusion.html\">Transclusion</a> section below.</p> <p>There are two kinds of transclusion depending upon whether you want to transclude just the contents of the directive's element or the entire element:</p> <ul> <li>\n<code>true</code> - transclude the content (i.e. the child nodes) of the directive's element.</li> <li>\n<code>'element'</code> - transclude the whole of the directive's element including any directives on this element that defined at a lower priority than this directive. When used, the <code>template</code> property is ignored.</li> </ul> <h4 id=\"-compile-\">compile</h4> <pre data-language=\"javascript\">function compile(tElement, tAttrs, transclude) { ... }\n</pre> <p>The compile function deals with transforming the template DOM. Since most directives do not do template transformation, it is not used often. The compile function takes the following arguments:</p> <ul> <li>\n<p><code>tElement</code> - template element - The element where the directive has been declared. It is safe to do template transformation on the element and child elements only.</p> </li> <li>\n<p><code>tAttrs</code> - template attributes - Normalized list of attributes declared on this element shared between all directive compile functions.</p> </li> <li>\n<p><code>transclude</code> - [<em>DEPRECATED</em>!] A transclude linking function: <code>function(scope, cloneLinkingFn)</code></p> </li> </ul> <div class=\"alert alert-warning\"> <strong>Note:</strong> The template instance and the link instance may be different objects if the template has been cloned. For this reason it is <strong>not</strong> safe to do anything other than DOM transformations that apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration should be done in a linking function rather than in a compile function. </div> <div class=\"alert alert-warning\"> <strong>Note:</strong> The compile function cannot handle directives that recursively use themselves in their own templates or compile functions. Compiling these directives results in an infinite loop and a stack overflow errors. This can be avoided by manually using $compile in the postLink function to imperatively compile a directive's template instead of relying on automatic template compilation via <code>template</code> or <code>templateUrl</code> declaration or manual compilation inside the compile function. </div> <div class=\"alert alert-error\"> <strong>Note:</strong> The <code>transclude</code> function that is passed to the compile function is deprecated, as it e.g. does not know about the right outer scope. Please use the transclude function that is passed to the link function instead. </div> <p>A compile function can have a return value which can be either a function or an object.</p> <ul> <li>\n<p>returning a (post-link) function - is equivalent to registering the linking function via the <code>link</code> property of the config object when the compile function is empty.</p> </li> <li>\n<p>returning an object with function(s) registered via <code>pre</code> and <code>post</code> properties - allows you to control when a linking function should be called during the linking phase. See info about pre-linking and post-linking functions below.</p> </li> </ul> <h4 id=\"-link-\">link</h4> <p>This property is used only if the <code>compile</code> property is not defined.</p> <pre data-language=\"javascript\">function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }\n</pre> <p>The link function is responsible for registering DOM listeners as well as updating the DOM. It is executed after the template has been cloned. This is where most of the directive logic will be put.</p> <ul> <li>\n<p><code>scope</code> - <a href=\"../type/%24rootscope.scope\">Scope</a> - The scope to be used by the directive for registering <a href=\"../type/%24rootscope.scope#%24watch.html\">watches</a>.</p> </li> <li>\n<p><code>iElement</code> - instance element - The element where the directive is to be used. It is safe to manipulate the children of the element only in <code>postLink</code> function since the children have already been linked.</p> </li> <li>\n<p><code>iAttrs</code> - instance attributes - Normalized list of attributes declared on this element shared between all directive linking functions.</p> </li> <li>\n<p><code>controller</code> - the directive's required controller instance(s) - Instances are shared among all directives, which allows the directives to use the controllers as a communication channel. The exact value depends on the directive's <code>require</code> property:</p> <ul> <li>\n<code>string</code>: the controller instance</li> <li>\n<code>array</code>: array of controller instances</li> <li>no controller(s) required: <code>undefined</code>\n</li> </ul> <p>If a required controller cannot be found, and it is optional, the instance is <code>null</code>, otherwise the <a href=\"error/%24compile/ctreq\">Missing Required Controller</a> error is thrown.</p> </li> <li>\n<p><code>transcludeFn</code> - A transclude linking function pre-bound to the correct transclusion scope. This is the same as the <code>$transclude</code> parameter of directive controllers, see there for details. <code>function([scope], cloneLinkingFn, futureParentElement)</code>.</p> </li> </ul> <h4 id=\"pre-linking-function\">Pre-linking function</h4> <p>Executed before the child elements are linked. Not safe to do DOM transformation since the compiler linking function will fail to locate the correct elements for linking.</p> <h4 id=\"post-linking-function\">Post-linking function</h4> <p>Executed after the child elements are linked.</p> <p>Note that child elements that contain <code>templateUrl</code> directives will not have been compiled and linked since they are waiting for their template to load asynchronously and their own compilation and linking has been suspended until that occurs.</p> <p>It is safe to do DOM transformation in the post-linking function on elements that are not waiting for their async templates to be resolved.</p> <h3 id=\"transclusion\">Transclusion</h3> <p>Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and copying them to another part of the DOM, while maintaining their connection to the original AngularJS scope from where they were taken.</p> <p>Transclusion is used (often with <a href=\"../directive/ngtransclude\"><code>ngTransclude</code></a>) to insert the original contents of a directive's element into a specified place in the template of the directive. The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded content has access to the properties on the scope from which it was taken, even if the directive has isolated scope. See the <a href=\"../../../guide/directive#creating-a-directive-that-wraps-other-elements.html\">Directives Guide</a>.</p> <p>This makes it possible for the widget to have private state for its template, while the transcluded content has access to its originating scope.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> When testing an element transclude directive you must not place the directive at the root of the DOM fragment that is being compiled. See <a href=\"../../../guide/unit-testing#testing-transclusion-directives.html\">Testing Transclusion Directives</a>. </div> <h4 id=\"transclusion-functions\">Transclusion Functions</h4> <p>When a directive requests transclusion, the compiler extracts its contents and provides a <strong>transclusion function</strong> to the directive's <code>link</code> function and <code>controller</code>. This transclusion function is a special <strong>linking function</strong> that will return the compiled contents linked to a new transclusion scope.</p> <div class=\"alert alert-info\"> If you are just using <a href=\"../directive/ngtransclude\"><code>ngTransclude</code></a> then you don't need to worry about this function, since ngTransclude will deal with it for us. </div> <p>If you want to manually control the insertion and removal of the transcluded content in your directive then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery object that contains the compiled DOM, which is linked to the correct transclusion scope.</p> <p>When you call a transclusion function you can pass in a <strong>clone attach function</strong>. This function accepts two parameters, <code>function(clone, scope) { ... }</code>, where the <code>clone</code> is a fresh compiled copy of your transcluded content and the <code>scope</code> is the newly created transclusion scope, to which the clone is bound.</p> <div class=\"alert alert-info\"> <strong>Best Practice</strong>: Always provide a <code>cloneFn</code> (clone attach function) when you call a translude function since you then get a fresh clone of the original DOM and also have access to the new transclusion scope. </div> <p>It is normal practice to attach your transcluded content (<code>clone</code>) to the DOM inside your <strong>clone attach function</strong>:</p> <pre data-language=\"javascript\">var transcludedContent, transclusionScope;\n\n$transclude(function(clone, scope) {\n  element.append(clone);\n  transcludedContent = clone;\n  transclusionScope = scope;\n});\n</pre> <p>Later, if you want to remove the transcluded content from your DOM then you should also destroy the associated transclusion scope:</p> <pre data-language=\"javascript\">transcludedContent.remove();\ntransclusionScope.$destroy();\n</pre> <div class=\"alert alert-info\"> <strong>Best Practice</strong>: if you intend to add and remove transcluded content manually in your directive (by calling the transclude function to get the DOM and and calling <code>element.remove()</code> to remove it), then you are also responsible for calling <code>$destroy</code> on the transclusion scope. </div> <p>The built-in DOM manipulation directives, such as <a href=\"../directive/ngif\"><code>ngIf</code></a>, <a href=\"../directive/ngswitch\"><code>ngSwitch</code></a> and <a href=\"../directive/ngrepeat\"><code>ngRepeat</code></a> automatically destroy their transluded clones as necessary so you do not need to worry about this if you are simply using <a href=\"../directive/ngtransclude\"><code>ngTransclude</code></a> to inject the transclusion into your directive.</p> <h4 id=\"transclusion-scopes\">Transclusion Scopes</h4> <p>When you call a transclude function it returns a DOM fragment that is pre-bound to a <strong>transclusion scope</strong>. This scope is special, in that it is a child of the directive's scope (and so gets destroyed when the directive's scope gets destroyed) but it inherits the properties of the scope from which it was taken.</p> <p>For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look like this:</p> <pre data-language=\"html\">&lt;div ng-app&gt;\n  &lt;div isolate&gt;\n    &lt;div transclusion&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre> <p>The <code>$parent</code> scope hierarchy will look like this:</p> <pre>- $rootScope\n- isolate\n  - transclusion\n</pre> <p>but the scopes will inherit prototypically from different scopes to their <code>$parent</code>.</p> <pre>- $rootScope\n  - transclusion\n- isolate\n</pre> <h3 id=\"attributes\">Attributes</h3> <p>The <a href=\"../type/%24compile.directive.attributes\">Attributes</a> object - passed as a parameter in the <code>link()</code> or <code>compile()</code> functions. It has a variety of uses.</p> <p>accessing <em>Normalized attribute names:</em> Directives like 'ngBind' can be expressed in many ways: 'ng:bind', <code>data-ng-bind</code>, or 'x-ng-bind'. the attributes object allows for normalized access to the attributes.</p> <ul> <li>\n<p><em>Directive inter-communication:</em> All directives share the same instance of the attributes object which allows the directives to use the attributes object as inter directive communication.</p> </li> <li>\n<p><em>Supports interpolation:</em> Interpolation attributes are assigned to the attribute object allowing other directives to read the interpolated value.</p> </li> <li>\n<p><em>Observing interpolated attributes:</em> Use <code>$observe</code> to observe the value changes of attributes that contain interpolation (e.g. <code>src=\"{{bar}}\"</code>). Not only is this very efficient but it's also the only way to easily get the actual value because during the linking phase the interpolation hasn't been evaluated yet and so the value is at this time set to <code>undefined</code>.</p> </li> </ul> <pre data-language=\"javascript\">function linkingFn(scope, elm, attrs, ctrl) {\n  // get the attribute value\n  console.log(attrs.ngModel);\n\n  // change the attribute\n  attrs.$set('ngModel', 'new value');\n\n  // observe changes to interpolated attribute\n  attrs.$observe('ngModel', function(value) {\n    console.log('ngModel has changed value to ' + value);\n  });\n}\n</pre>  <div class=\"alert alert-warning\"> <strong>Note</strong>: Typically directives are registered with <code>module.directive</code>. The example below is to illustrate how <code>$compile</code> works. </div>  </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$compile(element, transclude, maxPriority);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>Element or HTML string to compile into a template function.</p> </td> </tr> <tr> <td> transclude </td> <td> <code class=\"label type-hint type-hint-function\">function(angular.Scope, cloneAttachFn=)</code> </td> <td> <p>function available to directives - DEPRECATED.</p> <div class=\"alert alert-error\"> <strong>Note:</strong> Passing a <code>transclude</code> function to the $compile function is deprecated, as it e.g. will not use the right outer scope. Please pass the transclude function as a <code>parentBoundTranscludeFn</code> to the link function instead. </div> </td> </tr> <tr> <td> maxPriority </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>only apply directives lower than given priority (Only effects the root element(s), not their children)</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function(scope, cloneAttachFn=, options=)</code></td> <td>\n<p>a link function which is used to bind template (a DOM element/tree) to a scope. Where:</p> <ul> <li>\n<code>scope</code> - A <a href=\"../type/%24rootscope.scope\">Scope</a> to bind to.</li> <li>\n<p><code>cloneAttachFn</code> - If <code>cloneAttachFn</code> is provided, then the link function will clone the <code>template</code> and call the <code>cloneAttachFn</code> function allowing the caller to attach the cloned elements to the DOM document at the appropriate place. The <code>cloneAttachFn</code> is called as: <br> <code>cloneAttachFn(clonedElement, scope)</code> where:</p> <ul> <li>\n<code>clonedElement</code> - is a clone of the original <code>element</code> passed into the compiler.</li> <li>\n<code>scope</code> - is the current scope with which the linking function is working with.</li> </ul> </li> <li>\n<p><code>options</code> - An optional object hash with linking options. If <code>options</code> is provided, then the following keys may be used to control linking behavior:</p> <ul> <li>\n<code>parentBoundTranscludeFn</code> - the transclude function made available to directives; if given, it will be passed through to the link functions of directives found in <code>element</code> during compilation.</li> <li>\n<code>transcludeControllers</code> - an object hash with keys that map controller names to controller instances; if given, it will make the controllers available to directives.</li> <li>\n<code>futureParentElement</code> - defines the parent to which the <code>cloneAttachFn</code> will add the cloned elements; only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements). See also the directive.controller property.</li> </ul> </li> </ul> <p>Calling the linking function returns the element of the template. It is either the original element passed in, or the clone of the element if the <code>cloneAttachFn</code> is provided.</p> <p>After linking the view is not updated until after a call to $digest which typically is done by Angular automatically.</p> <p>If you need access to the bound view, there are two ways to do it:</p> <ul> <li>\n<p>If you are not asking the linking function to clone the template, create the DOM element(s) before you send them to the compiler and keep this reference around.</p> <pre data-language=\"javascript\">var element = $compile('&lt;p&gt;{{total}}&lt;/p&gt;')(scope);\n</pre> </li> <li>\n<p>if on the other hand, you need the element to be cloned, the view reference from the original example would not point to the clone, but rather to the original template that was cloned. In this case, you can access the clone via the cloneAttachFn:</p> <pre data-language=\"javascript\">var templateElement = angular.element('&lt;p&gt;{{total}}&lt;/p&gt;'),\n    scope = ....;\n\nvar clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {\n  //attach the clone to DOM document at the right place\n});\n\n//now we have reference to the cloned DOM via `clonedElement`\n</pre> </li> </ul> <p>For information on how the compiler works, see the <a href=\"../../../guide/compiler\">Angular HTML Compiler</a> section of the Developer Guide.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$compile\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$compile</a>\n  </p>\n</div>\n","api/ng/service/$location":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/location.js?message=docs(%24location)%3A%20describe%20your%20change...#L668\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/location.js#L668\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$location</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24locationprovider\">$locationProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The $location service parses the URL in the browser address bar (based on the <a href=\"https://developer.mozilla.org/en/window.location\">window.location</a>) and makes the URL available to your application. Changes to the URL in the address bar are reflected into $location service and changes to $location are reflected into the browser address bar.</p> <p><strong>The $location service:</strong></p> <ul> <li>Exposes the current URL in the browser address bar, so you can<ul> <li>Watch and observe the URL.</li> <li>Change the URL.</li> </ul> </li> <li>Synchronizes the URL with the browser when the user<ul> <li>Changes the address bar.</li> <li>Clicks the back or forward button (or clicks a History link).</li> <li>Clicks on a link.</li> </ul> </li> <li>Represents the URL object as a set of methods (protocol, host, port, path, search, hash).</li> </ul> <p>For more information see <a href=\"../../../guide/%24location\">Developer Guide: Using $location</a></p> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"%24rootelement\"><code>$rootElement</code></a></li> </ul> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"absUrl\"> <h3>absUrl();</h3> <div>\n<p>This method is getter only.</p> <p>Return full url representation with all segments encoded according to rules specified in <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>.</p> <pre data-language=\"javascript\">// given url http://example.com/#/some/path?foo=bar&amp;baz=xoxo\nvar absUrl = $location.absUrl();\n// =&gt; \"http://example.com/#/some/path?foo=bar&amp;baz=xoxo\"\n</pre> </div> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>full url</p> </td> </tr> </table> </li> <li id=\"url\"> <h3>url([url]);</h3> <div>\n<p>This method is getter / setter.</p> <p>Return url (e.g. <code>/path?a=b#hash</code>) when called without any parameter.</p> <p>Change path, search and hash, when called with parameter and return <code>$location</code>.</p> <pre data-language=\"javascript\">// given url http://example.com/#/some/path?foo=bar&amp;baz=xoxo\nvar url = $location.url();\n// =&gt; \"/some/path?foo=bar&amp;baz=xoxo\"\n</pre> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>New url without base prefix (e.g. <code>/path?a=b#hash</code>)</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>url</p> </td> </tr> </table> </li> <li id=\"protocol\"> <h3>protocol();</h3> <div>\n<p>This method is getter only.</p> <p>Return protocol of current url.</p> <pre data-language=\"javascript\">// given url http://example.com/#/some/path?foo=bar&amp;baz=xoxo\nvar protocol = $location.protocol();\n// =&gt; \"http\"\n</pre> </div> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>protocol of current url</p> </td> </tr> </table> </li> <li id=\"host\"> <h3>host();</h3> <div>\n<p>This method is getter only.</p> <p>Return host of current url.</p> <p>Note: compared to the non-angular version <code>location.host</code> which returns <code>hostname:port</code>, this returns the <code>hostname</code> portion only.</p> <pre data-language=\"javascript\">// given url http://example.com/#/some/path?foo=bar&amp;baz=xoxo\nvar host = $location.host();\n// =&gt; \"example.com\"\n\n// given url http://user:password@example.com:8080/#/some/path?foo=bar&amp;baz=xoxo\nhost = $location.host();\n// =&gt; \"example.com\"\nhost = location.host;\n// =&gt; \"example.com:8080\"\n</pre> </div> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>host of current url.</p> </td> </tr> </table> </li> <li id=\"port\"> <h3>port();</h3> <div>\n<p>This method is getter only.</p> <p>Return port of current url.</p> <pre data-language=\"javascript\">// given url http://example.com/#/some/path?foo=bar&amp;baz=xoxo\nvar port = $location.port();\n// =&gt; 80\n</pre> </div> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-number\">Number</code></td> <td>\n<p>port</p> </td> </tr> </table> </li> <li id=\"path\"> <h3>path([path]);</h3> <div>\n<p>This method is getter / setter.</p> <p>Return path of current url when called without any parameter.</p> <p>Change path when called with parameter and return <code>$location</code>.</p> <p>Note: Path should always begin with forward slash (/), this method will add the forward slash if it is missing.</p> <pre data-language=\"javascript\">// given url http://example.com/#/some/path?foo=bar&amp;baz=xoxo\nvar path = $location.path();\n// =&gt; \"/some/path\"\n</pre> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> path <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>New path</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>path</p> </td> </tr> </table> </li> <li id=\"search\"> <h3>search(search, [paramValue]);</h3> <div>\n<p>This method is getter / setter.</p> <p>Return search part (as object) of current url when called without any parameter.</p> <p>Change search part when called with parameter and return <code>$location</code>.</p> <pre data-language=\"javascript\">// given url http://example.com/#/some/path?foo=bar&amp;baz=xoxo\nvar searchObject = $location.search();\n// =&gt; {foo: 'bar', baz: 'xoxo'}\n\n// set foo to 'yipee'\n$location.search('foo', 'yipee');\n// $location.search() =&gt; {foo: 'yipee', baz: 'xoxo'}\n</pre> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> search </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-object\">Object.&lt;string&gt;</code><code class=\"label type-hint type-hint-object\">Object.&lt;Array.&lt;string&gt;&gt;</code> </td> <td> <p>New search params - string or hash object.</p> <p>When called with a single argument the method acts as a setter, setting the <code>search</code> component of <code>$location</code> to the specified value.</p> <p>If the argument is a hash object containing an array of values, these values will be encoded as duplicate search parameters in the url.</p> </td> </tr> <tr> <td> paramValue <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-number\">Number</code><code class=\"label type-hint type-hint-array\">Array.&lt;string&gt;</code><code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>If <code>search</code> is a string or number, then <code>paramValue</code> will override only a single search property.</p> <p>If <code>paramValue</code> is an array, it will override the property of the <code>search</code> component of <code>$location</code> specified via the first argument.</p> <p>If <code>paramValue</code> is <code>null</code>, the property specified via the first argument will be deleted.</p> <p>If <code>paramValue</code> is <code>true</code>, the property specified via the first argument will be added with no value nor trailing equal sign.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>If called with no arguments returns the parsed <code>search</code> object. If called with one or more arguments returns <code>$location</code> object itself.</p> </td> </tr> </table> </li> <li id=\"hash\"> <h3>hash([hash]);</h3> <div>\n<p>This method is getter / setter.</p> <p>Return hash fragment when called without any parameter.</p> <p>Change hash fragment when called with parameter and return <code>$location</code>.</p> <pre data-language=\"javascript\">// given url http://example.com/#/some/path?foo=bar&amp;baz=xoxo#hashValue\nvar hash = $location.hash();\n// =&gt; \"hashValue\"\n</pre> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> hash <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>New hash fragment</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>hash</p> </td> </tr> </table> </li> <li id=\"replace\"> <h3>replace();</h3> <div>\n<p>If called, all changes to $location during current <code>$digest</code> will be replacing current history record, instead of adding new one.</p> </div> </li> <li id=\"state\"> <h3>state([state]);</h3> <div>\n<p>This method is getter / setter.</p> <p>Return the history state object when called without any parameter.</p> <p>Change the history state object when called with one parameter and return <code>$location</code>. The state object is later passed to <code>pushState</code> or <code>replaceState</code>.</p> <p>NOTE: This method is supported only in HTML5 mode and only in browsers supporting the HTML5 History API (i.e. methods <code>pushState</code> and <code>replaceState</code>). If you need to support older browsers (like IE9 or Android &lt; 4.0), don't use this method.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> state <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>State object for pushState or replaceState</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">object</code></td> <td>\n<p>state</p> </td> </tr> </table> </li> </ul> <h2>Events</h2> <ul class=\"events defs\"> <li id=\"$locationChangeStart\"> <h3>$locationChangeStart</h3> <div>\n<p>Broadcasted before a URL will change.</p> <p>This change can be prevented by calling <code>preventDefault</code> method of the event. See <a href=\"../type/%24rootscope.scope#%24on.html\"><code>$rootScope.Scope</code></a> for more details about event object. Upon successful change <a href=\"%24location#%24locationChangeSuccess.html\">$locationChangeSuccess</a> is fired.</p> <p>The <code>newState</code> and <code>oldState</code> parameters may be defined only in HTML5 mode and when the browser supports the HTML5 History API.</p> </div> <div class=\"inline\"> <h4>Type:</h4> <div class=\"type\">broadcast</div> </div> <div class=\"inline\"> <h4>Target:</h4> <div class=\"target\">root scope</div> </div> <section class=\"api-section\"> <h3>Parameters</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> angularEvent </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Synthetic event object.</p> </td> </tr> <tr> <td> newUrl </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>New URL</p> </td> </tr> <tr> <td> oldUrl <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>URL that was before it was changed.</p> </td> </tr> <tr> <td> newState <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>New history state object</p> </td> </tr> <tr> <td> oldState <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>History state object that was before it was changed.</p> </td> </tr> </tbody> </table> </section>\n</li> <li id=\"$locationChangeSuccess\"> <h3>$locationChangeSuccess</h3> <div>\n<p>Broadcasted after a URL was changed.</p> <p>The <code>newState</code> and <code>oldState</code> parameters may be defined only in HTML5 mode and when the browser supports the HTML5 History API.</p> </div> <div class=\"inline\"> <h4>Type:</h4> <div class=\"type\">broadcast</div> </div> <div class=\"inline\"> <h4>Target:</h4> <div class=\"target\">root scope</div> </div> <section class=\"api-section\"> <h3>Parameters</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> angularEvent </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Synthetic event object.</p> </td> </tr> <tr> <td> newUrl </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>New URL</p> </td> </tr> <tr> <td> oldUrl <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>URL that was before it was changed.</p> </td> </tr> <tr> <td> newState <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>New history state object</p> </td> </tr> <tr> <td> oldState <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>History state object that was before it was changed.</p> </td> </tr> </tbody> </table> </section>\n</li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$location\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$location</a>\n  </p>\n</div>\n","api/ng/service/$q":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/q.js?message=docs(%24q)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/q.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$q</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>A service that helps you run functions asynchronously, and use their return values (or exceptions) when they are done processing.</p> <p>This is an implementation of promises/deferred objects inspired by <a href=\"https://github.com/kriskowal/q\">Kris Kowal's Q</a>.</p> <p>$q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred implementations, and the other which resembles ES6 promises to some degree.</p> <h2 id=\"-q-constructor\">$q constructor</h2> <p>The streamlined ES6 style promise is essentially just using $q as a constructor which takes a <code>resolver</code> function as the first argument. This is similar to the native Promise implementation from ES6 Harmony, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN</a>.</p> <p>While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are available yet.</p> <p>It can be used like so:</p> <pre data-language=\"javascript\">// for the purpose of this example let's assume that variables `$q` and `okToGreet`\n// are available in the current lexical scope (they could have been injected or passed in).\n\nfunction asyncGreet(name) {\n  // perform some asynchronous operation, resolve or reject the promise when appropriate.\n  return $q(function(resolve, reject) {\n    setTimeout(function() {\n      if (okToGreet(name)) {\n        resolve('Hello, ' + name + '!');\n      } else {\n        reject('Greeting ' + name + ' is not allowed.');\n      }\n    }, 1000);\n  });\n}\n\nvar promise = asyncGreet('Robin Hood');\npromise.then(function(greeting) {\n  alert('Success: ' + greeting);\n}, function(reason) {\n  alert('Failed: ' + reason);\n});\n</pre> <p>Note: progress/notify callbacks are not currently supported via the ES6-style interface.</p> <p>However, the more traditional CommonJS-style usage is still available, and documented below.</p> <p><a href=\"http://wiki.commonjs.org/wiki/Promises\">The CommonJS Promise proposal</a> describes a promise as an interface for interacting with an object that represents the result of an action that is performed asynchronously, and may or may not be finished at any given point in time.</p> <p>From the perspective of dealing with error handling, deferred and promise APIs are to asynchronous programming what <code>try</code>, <code>catch</code> and <code>throw</code> keywords are to synchronous programming.</p> <pre data-language=\"javascript\">// for the purpose of this example let's assume that variables `$q` and `okToGreet`\n// are available in the current lexical scope (they could have been injected or passed in).\n\nfunction asyncGreet(name) {\n  var deferred = $q.defer();\n\n  setTimeout(function() {\n    deferred.notify('About to greet ' + name + '.');\n\n    if (okToGreet(name)) {\n      deferred.resolve('Hello, ' + name + '!');\n    } else {\n      deferred.reject('Greeting ' + name + ' is not allowed.');\n    }\n  }, 1000);\n\n  return deferred.promise;\n}\n\nvar promise = asyncGreet('Robin Hood');\npromise.then(function(greeting) {\n  alert('Success: ' + greeting);\n}, function(reason) {\n  alert('Failed: ' + reason);\n}, function(update) {\n  alert('Got notification: ' + update);\n});\n</pre> <p>At first it might not be obvious why this extra complexity is worth the trouble. The payoff comes in the way of guarantees that promise and deferred APIs make, see <a href=\"https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md\">https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md</a>.</p> <p>Additionally the promise api allows for composition that is very hard to do with the traditional callback (<a href=\"http://en.wikipedia.org/wiki/Continuation-passing_style\">CPS</a>) approach. For more on this please see the <a href=\"https://github.com/kriskowal/q\">Q documentation</a> especially the section on serial or parallel joining of promises.</p> <h2 id=\"the-deferred-api\">The Deferred API</h2> <p>A new instance of deferred is constructed by calling <code>$q.defer()</code>.</p> <p>The purpose of the deferred object is to expose the associated Promise instance as well as APIs that can be used for signaling the successful or unsuccessful completion, as well as the status of the task.</p> <p><strong>Methods</strong></p> <ul> <li>\n<code>resolve(value)</code> – resolves the derived promise with the <code>value</code>. If the value is a rejection constructed via <code>$q.reject</code>, the promise will be rejected instead.</li> <li>\n<code>reject(reason)</code> – rejects the derived promise with the <code>reason</code>. This is equivalent to resolving it with a rejection constructed via <code>$q.reject</code>.</li> <li>\n<code>notify(value)</code> - provides updates on the status of the promise's execution. This may be called multiple times before the promise is either resolved or rejected.</li> </ul> <p><strong>Properties</strong></p> <ul> <li>promise – <code>{Promise}</code> – promise object associated with this deferred.</li> </ul> <h2 id=\"the-promise-api\">The Promise API</h2> <p>A new promise instance is created when a deferred instance is created and can be retrieved by calling <code>deferred.promise</code>.</p> <p>The purpose of the promise object is to allow for interested parties to get access to the result of the deferred task when it completes.</p> <p><strong>Methods</strong></p> <ul> <li>\n<p><code>then(successCallback, errorCallback, notifyCallback)</code> – regardless of when the promise was or will be resolved or rejected, <code>then</code> calls one of the success or error callbacks asynchronously as soon as the result is available. The callbacks are called with a single argument: the result or rejection reason. Additionally, the notify callback may be called zero or more times to provide a progress indication, before the promise is resolved or rejected.</p> <p>This method <em>returns a new promise</em> which is resolved or rejected via the return value of the <code>successCallback</code>, <code>errorCallback</code>. It also notifies via the return value of the <code>notifyCallback</code> method. The promise cannot be resolved or rejected from the notifyCallback method.</p> </li> <li>\n<p><code>catch(errorCallback)</code> – shorthand for <code>promise.then(null, errorCallback)</code></p> </li> <li>\n<p><code>finally(callback, notifyCallback)</code> – allows you to observe either the fulfillment or rejection of a promise, but to do so without modifying the final value. This is useful to release resources or do some clean-up that needs to be done whether the promise was rejected or resolved. See the <a href=\"https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback\">full specification</a> for more information.</p> </li> </ul> <h2 id=\"chaining-promises\">Chaining promises</h2> <p>Because calling the <code>then</code> method of a promise returns a new derived promise, it is easily possible to create a chain of promises:</p> <pre data-language=\"javascript\">promiseB = promiseA.then(function(result) {\n  return result + 1;\n});\n\n// promiseB will be resolved immediately after promiseA is resolved and its value\n// will be the result of promiseA incremented by 1\n</pre> <p>It is possible to create chains of any length and since a promise can be resolved with another promise (which will defer its resolution further), it is possible to pause/defer resolution of the promises at any point in the chain. This makes it possible to implement powerful APIs like $http's response interceptors.</p> <h2 id=\"differences-between-kris-kowal-s-q-and-q\">Differences between Kris Kowal's Q and $q</h2> <p> There are two main differences:</p> <ul> <li>$q is integrated with the <a href=\"../type/%24rootscope.scope\"><code>$rootScope.Scope</code></a> Scope model observation mechanism in angular, which means faster propagation of resolution or rejection into your models and avoiding unnecessary browser repaints, which would result in flickering UI.</li> <li>\n<p>Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains all the important functionality needed for common async tasks.</p> <h2 id=\"testing\">Testing</h2> <pre data-language=\"javascript\">it('should simulate promise', inject(function($q, $rootScope) {\n  var deferred = $q.defer();\n  var promise = deferred.promise;\n  var resolvedValue;\n\n  promise.then(function(value) { resolvedValue = value; });\n  expect(resolvedValue).toBeUndefined();\n\n  // Simulate resolving of promise\n  deferred.resolve(123);\n  // Note that the 'then' function does not get called synchronously.\n  // This is because we want the promise API to always be async, whether or not\n  // it got called synchronously or asynchronously.\n  expect(resolvedValue).toBeUndefined();\n\n  // Propagate promise resolution to 'then' functions using $apply().\n  $rootScope.$apply();\n  expect(resolvedValue).toEqual(123);\n}));\n</pre> </li> </ul> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"%24rootscope\"><code>$rootScope</code></a></li> </ul> <h2 id=\"usage\">Usage</h2> <p><code>$q(resolver);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> resolver </td> <td> <code class=\"label type-hint type-hint-function\">function(function, function)</code> </td> <td> <p>Function which is responsible for resolving or rejecting the newly created promise. The first parameter is a function which resolves the promise, the second parameter is a function which rejects the promise.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>The newly created promise.</p> </td> </tr> </table> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"defer\"> <h3>defer();</h3> <div>\n<p>Creates a <code>Deferred</code> object which represents a task which will finish in the future.</p> </div> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-deferred\">Deferred</code></td> <td>\n<p>Returns a new instance of deferred.</p> </td> </tr> </table> </li> <li id=\"reject\"> <h3>reject(reason);</h3> <div>\n<p>Creates a promise that is resolved as rejected with the specified <code>reason</code>. This api should be used to forward rejection in a chain of promises. If you are dealing with the last promise in a promise chain, you don't need to worry about it.</p> <p>When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of <code>reject</code> as the <code>throw</code> keyword in JavaScript. This also means that if you \"catch\" an error via a promise error callback and you want to forward the error to the promise derived from the current promise, you have to \"rethrow\" the error by returning a rejection constructed via <code>reject</code>.</p> <pre data-language=\"javascript\">promiseB = promiseA.then(function(result) {\n  // success: do something and resolve promiseB\n  //          with the old or a new result\n  return result;\n}, function(reason) {\n  // error: handle the error if possible and\n  //        resolve promiseB with newPromiseOrValue,\n  //        otherwise forward the rejection to promiseB\n  if (canHandle(reason)) {\n   // handle the error and recover\n   return newPromiseOrValue;\n  }\n  return $q.reject(reason);\n});\n</pre> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> reason </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Constant, message, exception or an object representing the rejection reason.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>Returns a promise that was already resolved as rejected with the <code>reason</code>.</p> </td> </tr> </table> </li> <li id=\"when\"> <h3>when(value);</h3> <div>\n<p>Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise. This is useful when you are dealing with an object that might or might not be a promise, or if the promise comes from a source that can't be trusted.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Value or a promise</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>Returns a promise of the passed value or promise</p> </td> </tr> </table> </li> <li id=\"all\"> <h3>all(promises);</h3> <div>\n<p>Combines multiple promises into a single promise that is resolved when all of the input promises are resolved.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> promises </td> <td> <code class=\"label type-hint type-hint-array\">Array.&lt;Promise&gt;</code><code class=\"label type-hint type-hint-object\">Object.&lt;Promise&gt;</code> </td> <td> <p>An array or hash of promises.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>Returns a single promise that will be resolved with an array/hash of values, each value corresponding to the promise at the same index/key in the <code>promises</code> array/hash. If any of the promises is resolved with a rejection, this resulting promise will be rejected with the same rejection value.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$q\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$q</a>\n  </p>\n</div>\n","api/ng/service/$scedelegate":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/sce.js?message=docs(%24sceDelegate)%3A%20describe%20your%20change...#L67\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/sce.js#L67\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$sceDelegate</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24scedelegateprovider\">$sceDelegateProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p><code>$sceDelegate</code> is a service that is used by the <code>$sce</code> service to provide <a href=\"%24sce\">Strict Contextual Escaping (SCE)</a> services to AngularJS.</p> <p>Typically, you would configure or override the <a href=\"%24scedelegate\">$sceDelegate</a> instead of the <code>$sce</code> service to customize the way Strict Contextual Escaping works in AngularJS. This is because, while the <code>$sce</code> provides numerous shorthand methods, etc., you really only need to override 3 core functions (<code>trustAs</code>, <code>getTrusted</code> and <code>valueOf</code>) to replace the way things work because <code>$sce</code> delegates to <code>$sceDelegate</code> for these operations.</p> <p>Refer <a href=\"../provider/%24scedelegateprovider\">$sceDelegateProvider</a> to configure this service.</p> <p>The default instance of <code>$sceDelegate</code> should work out of the box with little pain. While you can override it completely to change the behavior of <code>$sce</code>, the common case would involve configuring the <a href=\"../provider/%24scedelegateprovider\">$sceDelegateProvider</a> instead by setting your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as templates. Refer <a href=\"../provider/%24scedelegateprovider#resourceUrlWhitelist.html\">$sceDelegateProvider.resourceUrlWhitelist</a> and <a href=\"../provider/%24scedelegateprovider#resourceUrlBlacklist.html\">$sceDelegateProvider.resourceUrlBlacklist</a></p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$sceDelegate();</code></p> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"trustAs\"> <h3>trustAs(type, value);</h3> <div>\n<p>Returns an object that is trusted by angular for use in specified strict contextual escaping contexts (such as ng-bind-html, ng-include, any src attribute interpolation, any dom event binding attribute interpolation such as for onclick, etc.) that uses the provided value. See <a href=\"%24sce\">$sce</a> for enabling strict contextual escaping.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> type </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The kind of context in which this value is safe for use. e.g. url, resourceUrl, html, js and css.</p> </td> </tr> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value that that should be considered trusted/safe.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>A value that can be used to stand in for the provided <code>value</code> in places where Angular expects a $sce.trustAs() return value.</p> </td> </tr> </table> </li> <li id=\"valueOf\"> <h3>valueOf(value);</h3> <div>\n<p>If the passed parameter had been returned by a prior call to <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs</code></a>, returns the value that had been passed to <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs</code></a>.</p> <p>If the passed parameter is not a value that had been returned by <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs</code></a>, returns it as-is.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The result of a prior <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs</code></a> call or anything else.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The <code>value</code> that was originally provided to <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs</code></a> if <code>value</code> is the result of such a call. Otherwise, returns <code>value</code> unchanged.</p> </td> </tr> </table> </li> <li id=\"getTrusted\"> <h3>getTrusted(type, maybeTrusted);</h3> <div>\n<p>Takes the result of a <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs</code></a> call and returns the originally supplied value if the queried context type is a supertype of the created type. If this condition isn't satisfied, throws an exception.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> type </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The kind of context in which this value is to be used.</p> </td> </tr> <tr> <td> maybeTrusted </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The result of a prior <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs</code></a> call.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The value the was originally provided to <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs</code></a> if valid in this context. Otherwise, throws an exception.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$sceDelegate\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$sceDelegate</a>\n  </p>\n</div>\n","api/ng/service/$templatecache":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/cacheFactory.js?message=docs(%24templateCache)%3A%20describe%20your%20change...#L354\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/cacheFactory.js#L354\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$templateCache</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The first time a template is used, it is loaded in the template cache for quick retrieval. You can load templates directly into the cache in a <code>script</code> tag, or by consuming the <code>$templateCache</code> service directly.</p> <p>Adding via the <code>script</code> tag:</p> <pre data-language=\"html\">&lt;script type=\"text/ng-template\" id=\"templateId.html\"&gt;\n  &lt;p&gt;This is the content of the template&lt;/p&gt;\n&lt;/script&gt;\n</pre> <p><strong>Note:</strong> the <code>script</code> tag containing the template does not need to be included in the <code>head</code> of the document, but it must be a descendent of the <a href=\"%24rootelement\">$rootElement</a> (IE, element with ng-app attribute), otherwise the template will be ignored.</p> <p>Adding via the <code>$templateCache</code> service:</p> <pre data-language=\"javascript\">var myApp = angular.module('myApp', []);\nmyApp.run(function($templateCache) {\n  $templateCache.put('templateId.html', 'This is the content of the template');\n});\n</pre> <p>To retrieve the template later, simply use it in your HTML:</p> <pre data-language=\"html\">&lt;div ng-include=\" 'templateId.html' \"&gt;&lt;/div&gt;\n</pre> <p>or get it via Javascript:</p> <pre data-language=\"javascript\">$templateCache.get('templateId.html')\n</pre> <p>See <a href=\"%24cachefactory\">$cacheFactory</a>.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$templateCache\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$templateCache</a>\n  </p>\n</div>\n","api/ng/service/$templaterequest":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/templateRequest.js?message=docs(%24templateRequest)%3A%20describe%20your%20change...#L5\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/templateRequest.js#L5\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$templateRequest</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>$templateRequest</code> service runs security checks then downloads the provided template using <code>$http</code> and, upon success, stores the contents inside of <code>$templateCache</code>. If the HTTP request fails or the response data of the HTTP request is empty, a <code>$compile</code> error will be thrown (the exception can be thwarted by setting the 2nd parameter of the function to true). Note that the contents of <code>$templateCache</code> are trusted, so the call to <code>$sce.getTrustedUrl(tpl)</code> is omitted when <code>tpl</code> is of type string and <code>$templateCache</code> has the matching entry.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$templateRequest(tpl, [ignoreRequestError]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> tpl </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-trustedresourceurl\">TrustedResourceUrl</code> </td> <td> <p>The HTTP request template URL</p> </td> </tr> <tr> <td> ignoreRequestError <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>Whether or not to ignore the exception when the request fails or the template is empty</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the HTTP Promise for the given.</p> </td> </tr> </table> <h2>Properties</h2> <ul class=\"properties defs\"> <li id=\"totalPendingRequests\"> <h3>totalPendingRequests</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-number\">number</code></td> <td>\n<p>total amount of pending template requests being downloaded.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$templateRequest\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$templateRequest</a>\n  </p>\n</div>\n","api/ng/service/$timeout":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/timeout.js?message=docs(%24timeout)%3A%20describe%20your%20change...#L10\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/timeout.js#L10\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$timeout</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Angular's wrapper for <code>window.setTimeout</code>. The <code>fn</code> function is wrapped into a try/catch block and delegates any exceptions to <a href=\"%24exceptionhandler\">$exceptionHandler</a> service.</p> <p>The return value of registering a timeout function is a promise, which will be resolved when the timeout is reached and the timeout function is executed.</p> <p>To cancel a timeout request, call <code>$timeout.cancel(promise)</code>.</p> <p>In tests you can use <a href=\"../../ngmock/service/%24timeout\"><code>$timeout.flush()</code></a> to synchronously flush the queue of deferred functions.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$timeout(fn, [delay], [invokeApply]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> fn </td> <td> <code class=\"label type-hint type-hint-function\">function()</code> </td> <td> <p>A function, whose execution should be delayed.</p> </td> </tr> <tr> <td> delay <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Delay in milliseconds.</p> <p><em>(default: 0)</em></p> </td> </tr> <tr> <td> invokeApply <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>If set to <code>false</code> skips model dirty checking, otherwise will invoke <code>fn</code> within the <a href=\"../type/%24rootscope.scope#%24apply.html\">$apply</a> block.</p> <p><em>(default: true)</em></p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>Promise that will be resolved when the timeout is reached. The value this promise will be resolved with is the return value of the <code>fn</code> function.</p> </td> </tr> </table> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"cancel\"> <h3>cancel([promise]);</h3> <div>\n<p>Cancels a task associated with the <code>promise</code>. As a result of this, the promise will be resolved with a rejection.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> promise <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-promise\">Promise</code> </td> <td> <p>Promise returned by the <code>$timeout</code> function.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>Returns <code>true</code> if the task hasn't executed yet and was successfully canceled.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$timeout\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$timeout</a>\n  </p>\n</div>\n","api/ng/service/$window":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/window.js?message=docs(%24window)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/window.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$window</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>A reference to the browser's <code>window</code> object. While <code>window</code> is globally available in JavaScript, it causes testability problems, because it is a global variable. In angular we always refer to it through the <code>$window</code> service, so it may be overridden, removed or mocked for testing.</p> <p>Expressions, like the one defined for the <code>ngClick</code> directive in the example below, are evaluated with respect to the current scope. Therefore, there is no risk of inadvertently coding in a dependency on a global value in such an expression.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$window\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$window</a>\n  </p>\n</div>\n","api/ng/service/$http":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/http.js?message=docs(%24http)%3A%20describe%20your%20change...#L234\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/http.js#L234\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$http</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24httpprovider\">$httpProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>$http</code> service is a core Angular service that facilitates communication with the remote HTTP servers via the browser's <a href=\"https://developer.mozilla.org/en/xmlhttprequest\">XMLHttpRequest</a> object or via <a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a>.</p> <p>For unit testing applications that use <code>$http</code> service, see <a href=\"../../ngmock/service/%24httpbackend\">$httpBackend mock</a>.</p> <p>For a higher level of abstraction, please check out the <a href=\"../../ngresource/service/%24resource\">$resource</a> service.</p> <p>The $http API is based on the <a href=\"%24q\">deferred/promise APIs</a> exposed by the $q service. While for simple usage patterns this doesn't matter much, for advanced usage it is important to familiarize yourself with these APIs and the guarantees they provide.</p> <h2 id=\"general-usage\">General usage</h2> <p>The <code>$http</code> service is a function which takes a single argument — a configuration object — that is used to generate an HTTP request and returns a <a href=\"%24q\">promise</a> with two $http specific methods: <code>success</code> and <code>error</code>.</p> <pre data-language=\"javascript\">// Simple GET request example :\n$http.get('/someUrl').\n  success(function(data, status, headers, config) {\n    // this callback will be called asynchronously\n    // when the response is available\n  }).\n  error(function(data, status, headers, config) {\n    // called asynchronously if an error occurs\n    // or server returns response with an error status.\n  });\n</pre> <pre data-language=\"javascript\">// Simple POST request example (passing data) :\n$http.post('/someUrl', {msg:'hello word!'}).\n  success(function(data, status, headers, config) {\n    // this callback will be called asynchronously\n    // when the response is available\n  }).\n  error(function(data, status, headers, config) {\n    // called asynchronously if an error occurs\n    // or server returns response with an error status.\n  });\n</pre> <p>Since the returned value of calling the $http function is a <code>promise</code>, you can also use the <code>then</code> method to register callbacks, and these callbacks will receive a single argument – an object representing the response. See the API signature and type info below for more details.</p> <p>A response status code between 200 and 299 is considered a success status and will result in the success callback being called. Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning that the error callback will not be called for such responses.</p> <h2 id=\"writing-unit-tests-that-use-http\">Writing Unit Tests that use $http</h2> <p>When unit testing (using <a href=\"../../ngmock\">ngMock</a>), it is necessary to call <a href=\"../../ngmock/service/%24httpbackend#flush.html\">$httpBackend.flush()</a> to flush each pending request using trained responses.</p> <pre>$httpBackend.expectGET(...);\n$http.get(...);\n$httpBackend.flush();\n</pre> <h2 id=\"shortcut-methods\">Shortcut methods</h2> <p>Shortcut methods are also available. All shortcut methods require passing in the URL, and request data must be passed in for POST/PUT requests.</p> <pre data-language=\"javascript\">$http.get('/someUrl').success(successCallback);\n$http.post('/someUrl', data).success(successCallback);\n</pre> <p>Complete list of shortcut methods:</p> <ul> <li><a href=\"%24http#get.html\">$http.get</a></li> <li><a href=\"%24http#head.html\">$http.head</a></li> <li><a href=\"%24http#post.html\">$http.post</a></li> <li><a href=\"%24http#put.html\">$http.put</a></li> <li><a href=\"%24http#delete.html\">$http.delete</a></li> <li><a href=\"%24http#jsonp.html\">$http.jsonp</a></li> <li><a href=\"%24http#patch.html\">$http.patch</a></li> </ul> <h2 id=\"setting-http-headers\">Setting HTTP Headers</h2> <p>The $http service will automatically add certain HTTP headers to all requests. These defaults can be fully configured by accessing the <code>$httpProvider.defaults.headers</code> configuration object, which currently contains this default configuration:</p> <ul> <li>\n<code>$httpProvider.defaults.headers.common</code> (headers that are common for all requests):<ul> <li><code>Accept: application/json, text/plain, * / *</code></li> </ul> </li> <li>\n<code>$httpProvider.defaults.headers.post</code>: (header defaults for POST requests)<ul> <li><code>Content-Type: application/json</code></li> </ul> </li> <li>\n<code>$httpProvider.defaults.headers.put</code> (header defaults for PUT requests)<ul> <li><code>Content-Type: application/json</code></li> </ul> </li> </ul> <p>To add or overwrite these defaults, simply add or remove a property from these configuration objects. To add headers for an HTTP method other than POST or PUT, simply add a new object with the lowercased HTTP method name as the key, e.g. `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.</p> <p>The defaults can also be set at runtime via the <code>$http.defaults</code> object in the same fashion. For example:</p> <pre>module.run(function($http) {\n  $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'\n});\n</pre> <p>In addition, you can supply a <code>headers</code> property in the config object passed when calling <code>$http(config)</code>, which overrides the defaults without changing them globally.</p> <p>To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis, Use the <code>headers</code> property, setting the desired header to <code>undefined</code>. For example:</p> <pre data-language=\"javascript\">var req = {\n method: 'POST',\n url: 'http://example.com',\n headers: {\n   'Content-Type': undefined\n },\n data: { test: 'test' }\n}\n\n$http(req).success(function(){...}).error(function(){...});\n</pre> <h2 id=\"transforming-requests-and-responses\">Transforming Requests and Responses</h2> <p>Both requests and responses can be transformed using transformation functions: <code>transformRequest</code> and <code>transformResponse</code>. These properties can be a single function that returns the transformed value (<code>function(data, headersGetter, status)</code>) or an array of such transformation functions, which allows you to <code>push</code> or <code>unshift</code> a new transformation function into the transformation chain.</p> <h3 id=\"default-transformations\">Default Transformations</h3> <p>The <code>$httpProvider</code> provider and <code>$http</code> service expose <code>defaults.transformRequest</code> and <code>defaults.transformResponse</code> properties. If a request does not provide its own transformations then these will be applied.</p> <p>You can augment or replace the default transformations by modifying these properties by adding to or replacing the array.</p> <p>Angular provides the following default transformations:</p> <p>Request transformations (<code>$httpProvider.defaults.transformRequest</code> and <code>$http.defaults.transformRequest</code>):</p> <ul> <li>If the <code>data</code> property of the request configuration object contains an object, serialize it into JSON format.</li> </ul> <p>Response transformations (<code>$httpProvider.defaults.transformResponse</code> and <code>$http.defaults.transformResponse</code>):</p> <ul> <li>If XSRF prefix is detected, strip it (see Security Considerations section below).</li> <li>If JSON response is detected, deserialize it using a JSON parser.</li> </ul> <h3 id=\"overriding-the-default-transformations-per-request\">Overriding the Default Transformations Per Request</h3> <p>If you wish override the request/response transformations only for a single request then provide <code>transformRequest</code> and/or <code>transformResponse</code> properties on the configuration object passed into <code>$http</code>.</p> <p>Note that if you provide these properties on the config object the default transformations will be overwritten. If you wish to augment the default transformations then you must include them in your local transformation array.</p> <p>The following code demonstrates adding a new response transformation to be run after the default response transformations have been run.</p> <pre data-language=\"javascript\">function appendTransform(defaults, transform) {\n\n  // We can't guarantee that the default transformation is an array\n  defaults = angular.isArray(defaults) ? defaults : [defaults];\n\n  // Append the new transformation to the defaults\n  return defaults.concat(transform);\n}\n\n$http({\n  url: '...',\n  method: 'GET',\n  transformResponse: appendTransform($http.defaults.transformResponse, function(value) {\n    return doTransform(value);\n  })\n});\n</pre> <h2 id=\"caching\">Caching</h2> <p>To enable caching, set the request configuration <code>cache</code> property to <code>true</code> (to use default cache) or to a custom cache object (built with <a href=\"%24cachefactory\"><code>$cacheFactory</code></a>). When the cache is enabled, <code>$http</code> stores the response from the server in the specified cache. The next time the same request is made, the response is served from the cache without sending a request to the server.</p> <p>Note that even if the response is served from cache, delivery of the data is asynchronous in the same way that real requests are.</p> <p>If there are multiple GET requests for the same URL that should be cached using the same cache, but the cache is not populated yet, only one request to the server will be made and the remaining requests will be fulfilled using the response from the first request.</p> <p>You can change the default cache to a new object (built with <a href=\"%24cachefactory\"><code>$cacheFactory</code></a>) by updating the <a href=\"%24http#defaults.html\"><code>$http.defaults.cache</code></a> property. All requests who set their <code>cache</code> property to <code>true</code> will now use this cache object.</p> <p>If you set the default cache to <code>false</code> then only requests that specify their own custom cache object will be cached.</p> <h2 id=\"interceptors\">Interceptors</h2> <p>Before you start creating interceptors, be sure to understand the <a href=\"%24q\">$q and deferred/promise APIs</a>.</p> <p>For purposes of global error handling, authentication, or any kind of synchronous or asynchronous pre-processing of request or postprocessing of responses, it is desirable to be able to intercept requests before they are handed to the server and responses before they are handed over to the application code that initiated these requests. The interceptors leverage the <a href=\"%24q\">promise APIs</a> to fulfill this need for both synchronous and asynchronous pre-processing.</p> <p>The interceptors are service factories that are registered with the <code>$httpProvider</code> by adding them to the <code>$httpProvider.interceptors</code> array. The factory is called and injected with dependencies (if specified) and returns the interceptor.</p> <p>There are two kinds of interceptors (and two kinds of rejection interceptors):</p> <ul> <li>\n<code>request</code>: interceptors get called with a http <code>config</code> object. The function is free to modify the <code>config</code> object or create a new one. The function needs to return the <code>config</code> object directly, or a promise containing the <code>config</code> or a new <code>config</code> object.</li> <li>\n<code>requestError</code>: interceptor gets called when a previous interceptor threw an error or resolved with a rejection.</li> <li>\n<code>response</code>: interceptors get called with http <code>response</code> object. The function is free to modify the <code>response</code> object or create a new one. The function needs to return the <code>response</code> object directly, or as a promise containing the <code>response</code> or a new <code>response</code> object.</li> <li>\n<code>responseError</code>: interceptor gets called when a previous interceptor threw an error or resolved with a rejection.</li> </ul> <pre data-language=\"javascript\">// register the interceptor as a service\n$provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {\n  return {\n    // optional method\n    'request': function(config) {\n      // do something on success\n      return config;\n    },\n\n    // optional method\n   'requestError': function(rejection) {\n      // do something on error\n      if (canRecover(rejection)) {\n        return responseOrNewPromise\n      }\n      return $q.reject(rejection);\n    },\n\n\n\n    // optional method\n    'response': function(response) {\n      // do something on success\n      return response;\n    },\n\n    // optional method\n   'responseError': function(rejection) {\n      // do something on error\n      if (canRecover(rejection)) {\n        return responseOrNewPromise\n      }\n      return $q.reject(rejection);\n    }\n  };\n});\n\n$httpProvider.interceptors.push('myHttpInterceptor');\n\n\n// alternatively, register the interceptor via an anonymous factory\n$httpProvider.interceptors.push(function($q, dependency1, dependency2) {\n  return {\n   'request': function(config) {\n       // same as above\n    },\n\n    'response': function(response) {\n       // same as above\n    }\n  };\n});\n</pre> <h2 id=\"security-considerations\">Security Considerations</h2> <p>When designing web applications, consider security threats from:</p> <ul> <li><a href=\"http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx\">JSON vulnerability</a></li> <li><a href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\">XSRF</a></li> </ul> <p>Both server and the client must cooperate in order to eliminate these threats. Angular comes pre-configured with strategies that address these issues, but for this to work backend server cooperation is required.</p> <h3 id=\"json-vulnerability-protection\">JSON Vulnerability Protection</h3> <p>A <a href=\"http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx\">JSON vulnerability</a> allows third party website to turn your JSON resource URL into <a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a> request under some conditions. To counter this your server can prefix all JSON requests with following string <code>\")]}',\\n\"</code>. Angular will automatically strip the prefix before processing it as JSON.</p> <p>For example if your server needs to return:</p> <pre data-language=\"javascript\">['one','two']\n</pre> <p>which is vulnerable to attack, your server can return:</p> <pre data-language=\"javascript\">)]}',\n['one','two']\n</pre> <p>Angular will strip the prefix, before processing the JSON.</p> <h3 id=\"cross-site-request-forgery-xsrf-protection\">Cross Site Request Forgery (XSRF) Protection</h3> <p><a href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\">XSRF</a> is a technique by which an unauthorized site can gain your user's private data. Angular provides a mechanism to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie (by default, <code>XSRF-TOKEN</code>) and sets it as an HTTP header (<code>X-XSRF-TOKEN</code>). Since only JavaScript that runs on your domain could read the cookie, your server can be assured that the XHR came from JavaScript running on your domain. The header will not be set for cross-domain requests.</p> <p>To take advantage of this, your server needs to set a token in a JavaScript readable session cookie called <code>XSRF-TOKEN</code> on the first HTTP GET request. On subsequent XHR requests the server can verify that the cookie matches <code>X-XSRF-TOKEN</code> HTTP header, and therefore be sure that only JavaScript running on your domain could have sent the request. The token must be unique for each user and must be verifiable by the server (to prevent the JavaScript from making up its own tokens). We recommend that the token is a digest of your site's authentication cookie with a <a href=\"https://en.wikipedia.org/wiki/Salt_(cryptography)\">salt</a> for added security.</p> <p>The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName properties of either $httpProvider.defaults at config-time, $http.defaults at run-time, or the per-request config object.</p> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"%24httpbackend\"><code>$httpBackend</code></a></li>\n<li><a href=\"%24cachefactory\"><code>$cacheFactory</code></a></li>\n<li><a href=\"%24rootscope\"><code>$rootScope</code></a></li>\n<li><a href=\"%24q\"><code>$q</code></a></li>\n<li><a href=\"../../auto/service/%24injector\"><code>$injector</code></a></li> </ul> <h2 id=\"usage\">Usage</h2> <p><code>$http(config);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> config </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>Object describing the request to be made and how it should be processed. The object has following properties:</p> <ul> <li>\n<strong>method</strong> – <code>{string}</code> – HTTP method (e.g. 'GET', 'POST', etc)</li> <li>\n<strong>url</strong> – <code>{string}</code> – Absolute or relative URL of the resource that is being requested.</li> <li>\n<strong>params</strong> – <code>{Object.&lt;string|Object&gt;}</code> – Map of strings or objects which will be turned to <code>?key1=value1&amp;key2=value2</code> after the url. If the value is not a string, it will be JSONified.</li> <li>\n<strong>data</strong> – <code>{string|Object}</code> – Data to be sent as the request message data.</li> <li>\n<strong>headers</strong> – <code>{Object}</code> – Map of strings or functions which return strings representing HTTP headers to send to the server. If the return value of a function is null, the header will not be sent.</li> <li>\n<strong>xsrfHeaderName</strong> – <code>{string}</code> – Name of HTTP header to populate with the XSRF token.</li> <li>\n<strong>xsrfCookieName</strong> – <code>{string}</code> – Name of cookie containing the XSRF token.</li> <li>\n<strong>transformRequest</strong> – <code>{function(data, headersGetter)|Array.&lt;function(data, headersGetter)&gt;}</code> – transform function or an array of such functions. The transform function takes the http request body and headers and returns its transformed (typically serialized) version. See <a href=\"%24http#overriding-the-default-transformations-per-request.html\">Overriding the Default Transformations</a>\n</li> <li>\n<strong>transformResponse</strong> – <code>{function(data, headersGetter, status)|Array.&lt;function(data, headersGetter, status)&gt;}</code> – transform function or an array of such functions. The transform function takes the http response body, headers and status and returns its transformed (typically deserialized) version. See <a href=\"%24http#overriding-the-default-transformations-per-request.html\">Overriding the Default Transformations</a>\n</li> <li>\n<strong>cache</strong> – <code>{boolean|Cache}</code> – If true, a default $http cache will be used to cache the GET request, otherwise if a cache instance built with <a href=\"%24cachefactory\">$cacheFactory</a>, this cache will be used for caching.</li> <li>\n<strong>timeout</strong> – <code>{number|Promise}</code> – timeout in milliseconds, or <a href=\"%24q\">promise</a> that should abort the request when resolved.</li> <li>\n<strong>withCredentials</strong> - <code>{boolean}</code> - whether to set the <code>withCredentials</code> flag on the XHR object. See <a href=\"https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials\">requests with credentials</a> for more information.</li> <li>\n<strong>responseType</strong> - <code>{string}</code> - see <a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType\">requestType</a>.</li> </ul> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-httppromise\">HttpPromise</code></td> <td>\n<p>Returns a <a href=\"%24q\">promise</a> object with the standard <code>then</code> method and two http specific methods: <code>success</code> and <code>error</code>. The <code>then</code> method takes two arguments a success and an error callback which will be called with a response object. The <code>success</code> and <code>error</code> methods take a single argument - a function that will be called when the request succeeds or fails respectively. The arguments passed into these functions are destructured representation of the response object passed into the <code>then</code> method. The response object has these properties:</p> <ul> <li>\n<strong>data</strong> – <code>{string|Object}</code> – The response body transformed with the transform functions.</li> <li>\n<strong>status</strong> – <code>{number}</code> – HTTP status code of the response.</li> <li>\n<strong>headers</strong> – <code>{function([headerName])}</code> – Header getter function.</li> <li>\n<strong>config</strong> – <code>{Object}</code> – The configuration object that was used to generate the request.</li> <li>\n<strong>statusText</strong> – <code>{string}</code> – HTTP status text of the response.</li> </ul> </td> </tr> </table> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"get\"> <h3>get(url, [config]);</h3> <div>\n<p>Shortcut method to perform <code>GET</code> request.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Relative or absolute URL specifying the destination of the request</p> </td> </tr> <tr> <td> config <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Optional configuration object</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-httppromise\">HttpPromise</code></td> <td>\n<p>Future object</p> </td> </tr> </table> </li> <li id=\"delete\"> <h3>delete(url, [config]);</h3> <div>\n<p>Shortcut method to perform <code>DELETE</code> request.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Relative or absolute URL specifying the destination of the request</p> </td> </tr> <tr> <td> config <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Optional configuration object</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-httppromise\">HttpPromise</code></td> <td>\n<p>Future object</p> </td> </tr> </table> </li> <li id=\"head\"> <h3>head(url, [config]);</h3> <div>\n<p>Shortcut method to perform <code>HEAD</code> request.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Relative or absolute URL specifying the destination of the request</p> </td> </tr> <tr> <td> config <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Optional configuration object</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-httppromise\">HttpPromise</code></td> <td>\n<p>Future object</p> </td> </tr> </table> </li> <li id=\"jsonp\"> <h3>jsonp(url, [config]);</h3> <div>\n<p>Shortcut method to perform <code>JSONP</code> request.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Relative or absolute URL specifying the destination of the request. The name of the callback should be the string <code>JSON_CALLBACK</code>.</p> </td> </tr> <tr> <td> config <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Optional configuration object</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-httppromise\">HttpPromise</code></td> <td>\n<p>Future object</p> </td> </tr> </table> </li> <li id=\"post\"> <h3>post(url, data, [config]);</h3> <div>\n<p>Shortcut method to perform <code>POST</code> request.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Relative or absolute URL specifying the destination of the request</p> </td> </tr> <tr> <td> data </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Request content</p> </td> </tr> <tr> <td> config <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Optional configuration object</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-httppromise\">HttpPromise</code></td> <td>\n<p>Future object</p> </td> </tr> </table> </li> <li id=\"put\"> <h3>put(url, data, [config]);</h3> <div>\n<p>Shortcut method to perform <code>PUT</code> request.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Relative or absolute URL specifying the destination of the request</p> </td> </tr> <tr> <td> data </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Request content</p> </td> </tr> <tr> <td> config <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Optional configuration object</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-httppromise\">HttpPromise</code></td> <td>\n<p>Future object</p> </td> </tr> </table> </li> <li id=\"patch\"> <h3>patch(url, data, [config]);</h3> <div>\n<p>Shortcut method to perform <code>PATCH</code> request.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Relative or absolute URL specifying the destination of the request</p> </td> </tr> <tr> <td> data </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Request content</p> </td> </tr> <tr> <td> config <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Optional configuration object</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-httppromise\">HttpPromise</code></td> <td>\n<p>Future object</p> </td> </tr> </table> </li> </ul> <h2>Properties</h2> <ul class=\"properties defs\"> <li id=\"pendingRequests\"> <h3>pendingRequests</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-array\">Array.&lt;Object&gt;</code></td> <td>\n<p>Array of config objects for currently pending requests. This is primarily meant to be used for debugging purposes.</p> </td> </tr> </table> </li> <li id=\"defaults\"> <h3>defaults</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Runtime equivalent of the <code>$httpProvider.defaults</code> property. Allows configuration of default headers, withCredentials as well as request and response transformations.</p> <p>See \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.</p> </td> </tr> </table> </li> </ul>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$http\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$http</a>\n  </p>\n</div>\n","api/ng/service/$sce":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/sce.js?message=docs(%24sce)%3A%20describe%20your%20change...#L397\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/sce.js#L397\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$sce</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24sceprovider\">$sceProvider</a> </li> <li> service in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p><code>$sce</code> is a service that provides Strict Contextual Escaping services to AngularJS.</p> <h2 id=\"strict-contextual-escaping\">Strict Contextual Escaping</h2> <p>Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain contexts to result in a value that is marked as safe to use for that context. One example of such a context is binding arbitrary html controlled by the user via <code>ng-bind-html</code>. We refer to these contexts as privileged or SCE contexts.</p> <p>As of version 1.2, Angular ships with SCE enabled by default.</p> <p>Note: When enabled (the default), IE&lt;11 in quirks mode is not supported. In this mode, IE&lt;11 allow one to execute arbitrary javascript by the use of the expression() syntax. Refer <http:> to learn more about them. You can ensure your document is in standards mode and not quirks mode by adding <code>&lt;!doctype html&gt;</code> to the top of your HTML document.</http:></p> <p>SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for security vulnerabilities such as XSS, clickjacking, etc. a lot easier.</p> <p>Here's an example of a binding in a privileged context:</p> <pre data-language=\"html\">&lt;input ng-model=\"userHtml\"&gt;\n&lt;div ng-bind-html=\"userHtml\"&gt;&lt;/div&gt;\n</pre> <p>Notice that <code>ng-bind-html</code> is bound to <code>userHtml</code> controlled by the user. With SCE disabled, this application allows the user to render arbitrary HTML into the DIV. In a more realistic example, one may be rendering user comments, blog articles, etc. via bindings. (HTML is just one example of a context where rendering user controlled input creates security vulnerabilities.)</p> <p>For the case of HTML, you might use a library, either on the client side, or on the server side, to sanitize unsafe HTML before binding to the value and rendering it in the document.</p> <p>How would you ensure that every place that used these types of bindings was bound to a value that was sanitized by your library (or returned as safe for rendering by your server?) How can you ensure that you didn't accidentally delete the line that sanitized the value, or renamed some properties/fields and forgot to update the binding to the sanitized value?</p> <p>To be secure by default, you want to ensure that any such bindings are disallowed unless you can determine that something explicitly says it's safe to use a value for binding in that context. You can then audit your code (a simple grep would do) to ensure that this is only done for those values that you can easily tell are safe - because they were received from your server, sanitized by your library, etc. You can organize your codebase to help with this - perhaps allowing only the files in a specific directory to do this. Ensuring that the internal API exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.</p> <p>In the case of AngularJS' SCE service, one uses <a href=\"%24sce#trustAs.html\">$sce.trustAs</a> (and shorthand methods such as <a href=\"%24sce#trustAsHtml.html\">$sce.trustAsHtml</a>, etc.) to obtain values that will be accepted by SCE / privileged contexts.</p> <h2 id=\"how-does-it-work-\">How does it work?</h2> <p>In privileged contexts, directives and code will bind to the result of <a href=\"%24sce#getTrusted.html\">$sce.getTrusted(context, value)</a> rather than to the value directly. Directives use <a href=\"%24sce#parseAs.html\">$sce.parseAs</a> rather than <code>$parse</code> to watch attribute bindings, which performs the <a href=\"%24sce#getTrusted.html\">$sce.getTrusted</a> behind the scenes on non-constant literals.</p> <p>As an example, <a href=\"../directive/ngbindhtml\">ngBindHtml</a> uses <a href=\"%24sce#parseAsHtml.html\">$sce.parseAsHtml(binding expression)</a>. Here's the actual code (slightly simplified):</p> <pre>var ngBindHtmlDirective = ['$sce', function($sce) {\n  return function(scope, element, attr) {\n    scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {\n      element.html(value || '');\n    });\n  };\n}];\n</pre> <h2 id=\"impact-on-loading-templates\">Impact on loading templates</h2> <p>This applies both to the <a href=\"../directive/nginclude\"><code>ng-include</code></a> directive as well as <code>templateUrl</code>'s specified by <a href=\"../../../guide/directive\">directives</a>.</p> <p>By default, Angular only loads templates from the same domain and protocol as the application document. This is done by calling <a href=\"%24sce#getTrustedResourceUrl.html\">$sce.getTrustedResourceUrl</a> on the template URL. To load templates from other domains and/or protocols, you may either either <a href=\"../provider/%24scedelegateprovider#resourceUrlWhitelist.html\">whitelist them</a> or <a href=\"%24sce#trustAsResourceUrl.html\">wrap it</a> into a trusted value.</p> <p><em>Please note</em>: The browser's <a href=\"https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest\">Same Origin Policy</a> and <a href=\"http://www.w3.org/TR/cors/\">Cross-Origin Resource Sharing (CORS)</a> policy apply in addition to this and may further restrict whether the template is successfully loaded. This means that without the right CORS policy, loading templates from a different domain won't work on all browsers. Also, loading templates from <code>file://</code> URL does not work on some browsers.</p> <h2 id=\"this-feels-like-too-much-overhead\">This feels like too much overhead</h2> <p>It's important to remember that SCE only applies to interpolation expressions.</p> <p>If your expressions are constant literals, they're automatically trusted and you don't need to call <code>$sce.trustAs</code> on them (remember to include the <code>ngSanitize</code> module) (e.g. <code>&lt;div ng-bind-html=\"'&lt;b&gt;implicitly trusted&lt;/b&gt;'\"&gt;&lt;/div&gt;</code>) just works.</p> <p>Additionally, <code>a[href]</code> and <code>img[src]</code> automatically sanitize their URLs and do not pass them through <a href=\"%24sce#getTrusted.html\">$sce.getTrusted</a>. SCE doesn't play a role here.</p> <p>The included <a href=\"%24scedelegate\">$sceDelegate</a> comes with sane defaults to allow you to load templates in <code>ng-include</code> from your application's domain without having to even know about SCE. It blocks loading templates from other domains or loading templates over http from an https served document. You can change these by setting your own custom <a href=\"../provider/%24scedelegateprovider#resourceUrlWhitelist.html\">whitelists</a> and <a href=\"../provider/%24scedelegateprovider#resourceUrlBlacklist.html\">blacklists</a> for matching such URLs.</p> <p>This significantly reduces the overhead. It is far easier to pay the small overhead and have an application that's secure and can be audited to verify that with much more ease than bolting security onto an application later.</p>  <h2 id=\"what-trusted-context-types-are-supported-\">What trusted context types are supported?</h2> <table> <thead> <tr> <th>Context</th> <th>Notes</th> </tr> </thead> <tbody> <tr> <td><code>$sce.HTML</code></td> <td>For HTML that's safe to source into the application. The <a href=\"../directive/ngbindhtml\">ngBindHtml</a> directive uses this context for bindings. If an unsafe value is encountered and the <a href=\"../../ngsanitize\">$sanitize</a> module is present this will sanitize the value instead of throwing an error.</td> </tr> <tr> <td><code>$sce.CSS</code></td> <td>For CSS that's safe to source into the application. Currently unused. Feel free to use it in your own directives.</td> </tr> <tr> <td><code>$sce.URL</code></td> <td>For URLs that are safe to follow as links. Currently unused (<code>&lt;a href=</code> and <code>&lt;img src=</code> sanitize their urls and don't constitute an SCE context.</td> </tr> <tr> <td><code>$sce.RESOURCE_URL</code></td> <td>For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application. Examples include <code>ng-include</code>, <code>src</code> / <code>ngSrc</code> bindings for tags other than <code>IMG</code> (e.g. <code>IFRAME</code>, <code>OBJECT</code>, etc.) <br><br>Note that <code>$sce.RESOURCE_URL</code> makes a stronger statement about the URL than <code>$sce.URL</code> does and therefore contexts requiring values trusted for <code>$sce.RESOURCE_URL</code> can be used anywhere that values trusted for <code>$sce.URL</code> are required.</td> </tr> <tr> <td><code>$sce.JS</code></td> <td>For JavaScript that is safe to execute in your application's context. Currently unused. Feel free to use it in your own directives.</td> </tr> </tbody> </table> <h2 id=\"format-of-items-in-link-ng-scedelegateprovider-resourceurlwhitelist-resourceurlwhitelist-link-ng-scedelegateprovider-resourceurlblacklist-blacklist-a-name-resourceurlpatternitem-a-\">Format of items in <a href=\"../provider/%24scedelegateprovider#resourceUrlWhitelist.html\">resourceUrlWhitelist</a>/<a href=\"../provider/%24scedelegateprovider#resourceUrlBlacklist.html\">Blacklist</a> \n</h2> <p> Each element in these arrays must be one of the following:</p> <ul> <li>\n<strong>'self'</strong><ul> <li>The special <strong>string</strong>, <code>'self'</code>, can be used to match against all URLs of the <strong>same domain</strong> as the application document using the <strong>same protocol</strong>.</li> </ul> </li> <li>\n<strong>String</strong> (except the special value <code>'self'</code>)<ul> <li>The string is matched against the full <em>normalized / absolute URL</em> of the resource being tested (substring matches are not good enough.)</li> <li>There are exactly <strong>two wildcard sequences</strong> - <code>*</code> and <code>**</code>. All other characters match themselves.</li> <li>\n<code>*</code>: matches zero or more occurrences of any character other than one of the following 6 characters: '<code>:</code>', '<code>/</code>', '<code>.</code>', '<code>?</code>', '<code>&amp;</code>' and ';'. It's a useful wildcard for use in a whitelist.</li> <li>\n<code>**</code>: matches zero or more occurrences of <em>any</em> character. As such, it's not appropriate for use in a scheme, domain, etc. as it would match too much. (e.g. <a href=\"#\">http://**.example.com/</a> would match <a href=\"http://evil.com/?ignore=.example.com/\">http://evil.com/?ignore=.example.com/</a> and that might not have been the intention.) Its usage at the very end of the path is ok. (e.g. <a href=\"http://foo.example.com/templates/**\">http://foo.example.com/templates/**</a>).</li> </ul> </li> <li>\n<strong>RegExp</strong> (<em>see caveat below</em>)<ul> <li>\n<em>Caveat</em>: While regular expressions are powerful and offer great flexibility, their syntax (and all the inevitable escaping) makes them <em>harder to maintain</em>. It's easy to accidentally introduce a bug when one updates a complex expression (imho, all regexes should have good test coverage). For instance, the use of <code>.</code> in the regex is correct only in a small number of cases. A <code>.</code> character in the regex used when matching the scheme or a subdomain could be matched against a <code>:</code> or literal <code>.</code> that was likely not intended. It is highly recommended to use the string patterns and only fall back to regular expressions as a last resort.</li> <li>The regular expression must be an instance of RegExp (i.e. not a string.) It is matched against the <strong>entire</strong> <em>normalized / absolute URL</em> of the resource being tested (even when the RegExp did not have the <code>^</code> and <code>$</code> codes.) In addition, any flags present on the RegExp (such as multiline, global, ignoreCase) are ignored.</li> <li>If you are generating your JavaScript from some other templating engine (not recommended, e.g. in issue <a href=\"https://github.com/angular/angular.js/issues/4006\">#4006</a>), remember to escape your regular expression (and be aware that you might need more than one level of escaping depending on your templating engine and the way you interpolated the value.) Do make use of your platform's escaping mechanism as it might be good enough before coding your own. E.g. Ruby has <a href=\"http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape\">Regexp.escape(str)</a> and Python has <a href=\"http://docs.python.org/library/re.html#re.escape\">re.escape</a>. Javascript lacks a similar built in function for escaping. Take a look at Google Closure library's <a href=\"http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962\">goog.string.regExpEscape(s)</a>.</li> </ul> </li> </ul> <p>Refer <a href=\"../provider/%24scedelegateprovider\">$sceDelegateProvider</a> for an example.</p> <h2 id=\"show-me-an-example-using-sce-\">Show me an example using SCE.</h2>  <h2 id=\"can-i-disable-sce-completely-\">Can I disable SCE completely?</h2> <p>Yes, you can. However, this is strongly discouraged. SCE gives you a lot of security benefits for little coding overhead. It will be much harder to take an SCE disabled application and either secure it on your own or enable SCE at a later stage. It might make sense to disable SCE for cases where you have a lot of existing code that was written before SCE was introduced and you're migrating them a module at a time.</p> <p>That said, here's how you can completely disable SCE:</p> <pre>angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {\n  // Completely disable SCE.  For demonstration purposes only!\n  // Do not use in new projects.\n  $sceProvider.enabled(false);\n});\n</pre> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$sce();</code></p> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"isEnabled\"> <h3>isEnabled();</h3> <div>\n<p>Returns a boolean indicating if SCE is enabled.</p> </div> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">Boolean</code></td> <td>\n<p>true if SCE is enabled, false otherwise. If you want to set the value, you have to do it at module config time on <a href=\"../provider/%24sceprovider\">$sceProvider</a>.</p> </td> </tr> </table> </li> <li id=\"parseAs\"> <h3>parseAs(type, expression);</h3> <div>\n<p>Converts Angular <a href=\"../../../guide/expression\">expression</a> into a function. This is like <a href=\"%24parse\">$parse</a> and is identical when the expression is a literal constant. Otherwise, it wraps the expression in a call to <a href=\"%24sce#getTrusted.html\">$sce.getTrusted(<em>type</em>, <em>result</em>)</a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> type </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The kind of SCE context in which this result will be used.</p> </td> </tr> <tr> <td> expression </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>String expression to compile.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function(context, locals)</code></td> <td>\n<p>a function which represents the compiled expression:</p> <ul> <li>\n<code>context</code> – <code>{object}</code> – an object against which any expressions embedded in the strings are evaluated against (typically a scope object).</li> <li>\n<code>locals</code> – <code>{object=}</code> – local variables context object, useful for overriding values in <code>context</code>.</li> </ul> </td> </tr> </table> </li> <li id=\"trustAs\"> <h3>trustAs(type, value);</h3> <div>\n<p>Delegates to <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs</code></a>. As such, returns an object that is trusted by angular for use in specified strict contextual escaping contexts (such as ng-bind-html, ng-include, any src attribute interpolation, any dom event binding attribute interpolation such as for onclick, etc.) that uses the provided value. See * <a href=\"%24sce\">$sce</a> for enabling strict contextual escaping.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> type </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The kind of context in which this value is safe for use. e.g. url, resource_url, html, js and css.</p> </td> </tr> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value that that should be considered trusted/safe.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>A value that can be used to stand in for the provided <code>value</code> in places where Angular expects a $sce.trustAs() return value.</p> </td> </tr> </table> </li> <li id=\"trustAsHtml\"> <h3>trustAsHtml(value);</h3> <div>\n<p>Shorthand method. <code>$sce.trustAsHtml(value)</code> → <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs($sce.HTML, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value to trustAs.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>An object that can be passed to <a href=\"%24sce#getTrustedHtml.html\">$sce.getTrustedHtml(value)</a> to obtain the original value. (privileged directives only accept expressions that are either literal constants or are the return value of <a href=\"%24sce#trustAs.html\">$sce.trustAs</a>.)</p> </td> </tr> </table> </li> <li id=\"trustAsUrl\"> <h3>trustAsUrl(value);</h3> <div>\n<p>Shorthand method. <code>$sce.trustAsUrl(value)</code> → <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs($sce.URL, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value to trustAs.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>An object that can be passed to <a href=\"%24sce#getTrustedUrl.html\">$sce.getTrustedUrl(value)</a> to obtain the original value. (privileged directives only accept expressions that are either literal constants or are the return value of <a href=\"%24sce#trustAs.html\">$sce.trustAs</a>.)</p> </td> </tr> </table> </li> <li id=\"trustAsResourceUrl\"> <h3>trustAsResourceUrl(value);</h3> <div>\n<p>Shorthand method. <code>$sce.trustAsResourceUrl(value)</code> → <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs($sce.RESOURCE_URL, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value to trustAs.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>An object that can be passed to <a href=\"%24sce#getTrustedResourceUrl.html\">$sce.getTrustedResourceUrl(value)</a> to obtain the original value. (privileged directives only accept expressions that are either literal constants or are the return value of <a href=\"%24sce#trustAs.html\">$sce.trustAs</a>.)</p> </td> </tr> </table> </li> <li id=\"trustAsJs\"> <h3>trustAsJs(value);</h3> <div>\n<p>Shorthand method. <code>$sce.trustAsJs(value)</code> → <a href=\"%24scedelegate#trustAs.html\"><code>$sceDelegate.trustAs($sce.JS, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value to trustAs.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>An object that can be passed to <a href=\"%24sce#getTrustedJs.html\">$sce.getTrustedJs(value)</a> to obtain the original value. (privileged directives only accept expressions that are either literal constants or are the return value of <a href=\"%24sce#trustAs.html\">$sce.trustAs</a>.)</p> </td> </tr> </table> </li> <li id=\"getTrusted\"> <h3>getTrusted(type, maybeTrusted);</h3> <div>\n<p>Delegates to <a href=\"%24scedelegate#getTrusted.html\"><code>$sceDelegate.getTrusted</code></a>. As such, takes the result of a <a href=\"%24sce#trustAs.html\"><code>$sce.trustAs</code></a>() call and returns the originally supplied value if the queried context type is a supertype of the created type. If this condition isn't satisfied, throws an exception.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> type </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The kind of context in which this value is to be used.</p> </td> </tr> <tr> <td> maybeTrusted </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The result of a prior <a href=\"%24sce#trustAs.html\"><code>$sce.trustAs</code></a> call.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The value the was originally provided to <a href=\"%24sce#trustAs.html\"><code>$sce.trustAs</code></a> if valid in this context. Otherwise, throws an exception.</p> </td> </tr> </table> </li> <li id=\"getTrustedHtml\"> <h3>getTrustedHtml(value);</h3> <div>\n<p>Shorthand method. <code>$sce.getTrustedHtml(value)</code> → <a href=\"%24scedelegate#getTrusted.html\"><code>$sceDelegate.getTrusted($sce.HTML, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value to pass to <code>$sce.getTrusted</code>.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The return value of <code>$sce.getTrusted($sce.HTML, value)</code></p> </td> </tr> </table> </li> <li id=\"getTrustedCss\"> <h3>getTrustedCss(value);</h3> <div>\n<p>Shorthand method. <code>$sce.getTrustedCss(value)</code> → <a href=\"%24scedelegate#getTrusted.html\"><code>$sceDelegate.getTrusted($sce.CSS, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value to pass to <code>$sce.getTrusted</code>.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The return value of <code>$sce.getTrusted($sce.CSS, value)</code></p> </td> </tr> </table> </li> <li id=\"getTrustedUrl\"> <h3>getTrustedUrl(value);</h3> <div>\n<p>Shorthand method. <code>$sce.getTrustedUrl(value)</code> → <a href=\"%24scedelegate#getTrusted.html\"><code>$sceDelegate.getTrusted($sce.URL, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value to pass to <code>$sce.getTrusted</code>.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The return value of <code>$sce.getTrusted($sce.URL, value)</code></p> </td> </tr> </table> </li> <li id=\"getTrustedResourceUrl\"> <h3>getTrustedResourceUrl(value);</h3> <div>\n<p>Shorthand method. <code>$sce.getTrustedResourceUrl(value)</code> → <a href=\"%24scedelegate#getTrusted.html\"><code>$sceDelegate.getTrusted($sce.RESOURCE_URL, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value to pass to <code>$sceDelegate.getTrusted</code>.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The return value of <code>$sce.getTrusted($sce.RESOURCE_URL, value)</code></p> </td> </tr> </table> </li> <li id=\"getTrustedJs\"> <h3>getTrustedJs(value);</h3> <div>\n<p>Shorthand method. <code>$sce.getTrustedJs(value)</code> → <a href=\"%24scedelegate#getTrusted.html\"><code>$sceDelegate.getTrusted($sce.JS, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value to pass to <code>$sce.getTrusted</code>.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The return value of <code>$sce.getTrusted($sce.JS, value)</code></p> </td> </tr> </table> </li> <li id=\"parseAsHtml\"> <h3>parseAsHtml(expression);</h3> <div>\n<p>Shorthand method. <code>$sce.parseAsHtml(expression string)</code> → <a href=\"%24sce#parseAs.html\"><code>$sce.parseAs($sce.HTML, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> expression </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>String expression to compile.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function(context, locals)</code></td> <td>\n<p>a function which represents the compiled expression:</p> <ul> <li>\n<code>context</code> – <code>{object}</code> – an object against which any expressions embedded in the strings are evaluated against (typically a scope object).</li> <li>\n<code>locals</code> – <code>{object=}</code> – local variables context object, useful for overriding values in <code>context</code>.</li> </ul> </td> </tr> </table> </li> <li id=\"parseAsCss\"> <h3>parseAsCss(expression);</h3> <div>\n<p>Shorthand method. <code>$sce.parseAsCss(value)</code> → <a href=\"%24sce#parseAs.html\"><code>$sce.parseAs($sce.CSS, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> expression </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>String expression to compile.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function(context, locals)</code></td> <td>\n<p>a function which represents the compiled expression:</p> <ul> <li>\n<code>context</code> – <code>{object}</code> – an object against which any expressions embedded in the strings are evaluated against (typically a scope object).</li> <li>\n<code>locals</code> – <code>{object=}</code> – local variables context object, useful for overriding values in <code>context</code>.</li> </ul> </td> </tr> </table> </li> <li id=\"parseAsUrl\"> <h3>parseAsUrl(expression);</h3> <div>\n<p>Shorthand method. <code>$sce.parseAsUrl(value)</code> → <a href=\"%24sce#parseAs.html\"><code>$sce.parseAs($sce.URL, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> expression </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>String expression to compile.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function(context, locals)</code></td> <td>\n<p>a function which represents the compiled expression:</p> <ul> <li>\n<code>context</code> – <code>{object}</code> – an object against which any expressions embedded in the strings are evaluated against (typically a scope object).</li> <li>\n<code>locals</code> – <code>{object=}</code> – local variables context object, useful for overriding values in <code>context</code>.</li> </ul> </td> </tr> </table> </li> <li id=\"parseAsResourceUrl\"> <h3>parseAsResourceUrl(expression);</h3> <div>\n<p>Shorthand method. <code>$sce.parseAsResourceUrl(value)</code> → <a href=\"%24sce#parseAs.html\"><code>$sce.parseAs($sce.RESOURCE_URL, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> expression </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>String expression to compile.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function(context, locals)</code></td> <td>\n<p>a function which represents the compiled expression:</p> <ul> <li>\n<code>context</code> – <code>{object}</code> – an object against which any expressions embedded in the strings are evaluated against (typically a scope object).</li> <li>\n<code>locals</code> – <code>{object=}</code> – local variables context object, useful for overriding values in <code>context</code>.</li> </ul> </td> </tr> </table> </li> <li id=\"parseAsJs\"> <h3>parseAsJs(expression);</h3> <div>\n<p>Shorthand method. <code>$sce.parseAsJs(value)</code> → <a href=\"%24sce#parseAs.html\"><code>$sce.parseAs($sce.JS, value)</code></a></p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> expression </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>String expression to compile.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-function\">function(context, locals)</code></td> <td>\n<p>a function which represents the compiled expression:</p> <ul> <li>\n<code>context</code> – <code>{object}</code> – an object against which any expressions embedded in the strings are evaluated against (typically a scope object).</li> <li>\n<code>locals</code> – <code>{object=}</code> – local variables context object, useful for overriding values in <code>context</code>.</li> </ul> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/service/$sce\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/service/$sce</a>\n  </p>\n</div>\n","api/ng/filter":"<h1>Filter components in ng</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"filter/filter\">filter</a></td> <td>\n<p>Selects a subset of items from <code>array</code> and returns it as a new array.</p> </td> </tr> <tr> <td><a href=\"filter/currency\">currency</a></td> <td>\n<p>Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default symbol for current locale is used.</p> </td> </tr> <tr> <td><a href=\"filter/number\">number</a></td> <td>\n<p>Formats a number as text.</p> </td> </tr> <tr> <td><a href=\"filter/date\">date</a></td> <td>\n<p>Formats <code>date</code> to a string based on the requested <code>format</code>.</p> </td> </tr> <tr> <td><a href=\"filter/json\">json</a></td> <td>\n<p>Allows you to convert a JavaScript object into JSON string.</p> </td> </tr> <tr> <td><a href=\"filter/lowercase\">lowercase</a></td> <td>\n<p>Converts string to lowercase.</p> </td> </tr> <tr> <td><a href=\"filter/uppercase\">uppercase</a></td> <td>\n<p>Converts string to uppercase.</p> </td> </tr> <tr> <td><a href=\"filter/limitto\">limitTo</a></td> <td>\n<p>Creates a new array or string containing only a specified number of elements. The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of <code>limit</code>. If a number is used as input, it is converted to a string.</p> </td> </tr> <tr> <td><a href=\"filter/orderby\">orderBy</a></td> <td>\n<p>Orders a specified <code>array</code> by the <code>expression</code> predicate. It is ordered alphabetically for strings and numerically for numbers. Note: if you notice numbers are not being sorted correctly, make sure they are actually being saved as numbers and not strings.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/filter\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/filter</a>\n  </p>\n</div>\n","api/ng/filter/currency":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/filter/filters.js?message=docs(currency)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/filter/filters.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>currency</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> filter in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default symbol for current locale is used.</p> </div> <div> <h2>Usage</h2> <h3>In HTML Template Binding</h3> <pre>{{ currency_expression | currency : symbol : fractionSize}}</pre> <h3>In JavaScript</h3> <pre>$filter('currency')(amount, symbol, fractionSize)</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> amount </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Input to filter.</p> </td> </tr> <tr> <td> symbol <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Currency symbol or identifier to be displayed.</p> </td> </tr> <tr> <td> fractionSize <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Number of decimal places to round the amount to, defaults to default max fraction size for current locale</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>Formatted number.</p> </td> </tr> </table>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/filter/currency\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/filter/currency</a>\n  </p>\n</div>\n","api/ng/filter/date":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/filter/filters.js?message=docs(date)%3A%20describe%20your%20change...#L341\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/filter/filters.js#L341\" class=\"view-source pull-right btn btn-primary\"> View Source </a>date</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> filter in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Formats <code>date</code> to a string based on the requested <code>format</code>.</p> <p> <code>format</code> string can be composed of the following elements:</p> <ul> <li>\n<code>'yyyy'</code>: 4 digit representation of year (e.g. AD 1 =&gt; 0001, AD 2010 =&gt; 2010)</li> <li>\n<code>'yy'</code>: 2 digit representation of year, padded (00-99). (e.g. AD 2001 =&gt; 01, AD 2010 =&gt; 10)</li> <li>\n<code>'y'</code>: 1 digit representation of year, e.g. (AD 1 =&gt; 1, AD 199 =&gt; 199)</li> <li>\n<code>'MMMM'</code>: Month in year (January-December)</li> <li>\n<code>'MMM'</code>: Month in year (Jan-Dec)</li> <li>\n<code>'MM'</code>: Month in year, padded (01-12)</li> <li>\n<code>'M'</code>: Month in year (1-12)</li> <li>\n<code>'dd'</code>: Day in month, padded (01-31)</li> <li>\n<code>'d'</code>: Day in month (1-31)</li> <li>\n<code>'EEEE'</code>: Day in Week,(Sunday-Saturday)</li> <li>\n<code>'EEE'</code>: Day in Week, (Sun-Sat)</li> <li>\n<code>'HH'</code>: Hour in day, padded (00-23)</li> <li>\n<code>'H'</code>: Hour in day (0-23)</li> <li>\n<code>'hh'</code>: Hour in AM/PM, padded (01-12)</li> <li>\n<code>'h'</code>: Hour in AM/PM, (1-12)</li> <li>\n<code>'mm'</code>: Minute in hour, padded (00-59)</li> <li>\n<code>'m'</code>: Minute in hour (0-59)</li> <li>\n<code>'ss'</code>: Second in minute, padded (00-59)</li> <li>\n<code>'s'</code>: Second in minute (0-59)</li> <li>\n<code>'sss'</code>: Millisecond in second, padded (000-999)</li> <li>\n<code>'a'</code>: AM/PM marker</li> <li>\n<code>'Z'</code>: 4 digit (+sign) representation of the timezone offset (-1200-+1200)</li> <li>\n<code>'ww'</code>: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year</li> <li>\n<code>'w'</code>: Week of year (0-53). Week 1 is the week with the first Thursday of the year</li> <li>\n<code>'G'</code>, <code>'GG'</code>, <code>'GGG'</code>: The abbreviated form of the era string (e.g. 'AD')</li> <li>\n<p><code>'GGGG'</code>: The long form of the era string (e.g. 'Anno Domini')</p> <p><code>format</code> string can also be one of the following predefined <a href=\"../../../guide/i18n\">localizable formats</a>:</p> </li> <li>\n<p><code>'medium'</code>: equivalent to <code>'MMM d, y h:mm:ss a'</code> for en_US locale (e.g. Sep 3, 2010 12:05:08 PM)</p> </li> <li>\n<code>'short'</code>: equivalent to <code>'M/d/yy h:mm a'</code> for en_US locale (e.g. 9/3/10 12:05 PM)</li> <li>\n<code>'fullDate'</code>: equivalent to <code>'EEEE, MMMM d, y'</code> for en_US locale (e.g. Friday, September 3, 2010)</li> <li>\n<code>'longDate'</code>: equivalent to <code>'MMMM d, y'</code> for en_US locale (e.g. September 3, 2010)</li> <li>\n<code>'mediumDate'</code>: equivalent to <code>'MMM d, y'</code> for en_US locale (e.g. Sep 3, 2010)</li> <li>\n<code>'shortDate'</code>: equivalent to <code>'M/d/yy'</code> for en_US locale (e.g. 9/3/10)</li> <li>\n<code>'mediumTime'</code>: equivalent to <code>'h:mm:ss a'</code> for en_US locale (e.g. 12:05:08 PM)</li> <li>\n<p><code>'shortTime'</code>: equivalent to <code>'h:mm a'</code> for en_US locale (e.g. 12:05 PM)</p> <p><code>format</code> string can contain literal values. These need to be escaped by surrounding with single quotes (e.g. <code>\"h 'in the morning'\"</code>). In order to output a single quote, escape it - i.e., two single quotes in a sequence (e.g. <code>\"h 'o''clock'\"</code>).</p> </li> </ul> </div> <div> <h2>Usage</h2> <h3>In HTML Template Binding</h3> <pre>{{ date_expression | date : format : timezone}}</pre> <h3>In JavaScript</h3> <pre>$filter('date')(date, format, timezone)</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> date </td> <td> <code class=\"label type-hint type-hint-date\">Date</code><code class=\"label type-hint type-hint-number\">number</code><code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Date to format either as Date object, milliseconds (string or number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is specified in the string input, the time is considered to be in the local timezone.</p> </td> </tr> <tr> <td> format <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Formatting rules (see Description). If not specified, <code>mediumDate</code> is used.</p> </td> </tr> <tr> <td> timezone <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Timezone to be used for formatting. Right now, only <code>'UTC'</code> is supported. If not specified, the timezone of the browser will be used.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>Formatted string or the input if input is not recognized as date/millis.</p> </td> </tr> </table>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/filter/date\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/filter/date</a>\n  </p>\n</div>\n","api/ng/filter/filter":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/filter/filter.js?message=docs(filter)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/filter/filter.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>filter</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> filter in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Selects a subset of items from <code>array</code> and returns it as a new array.</p> </div> <div> <h2>Usage</h2> <h3>In HTML Template Binding</h3> <pre>{{ filter_expression | filter : expression : comparator}}</pre> <h3>In JavaScript</h3> <pre>$filter('filter')(array, expression, comparator)</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> array </td> <td> <code class=\"label type-hint type-hint-array\">Array</code> </td> <td> <p>The source array.</p> </td> </tr> <tr> <td> expression </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function()</code> </td> <td> <p>The predicate to be used for selecting items from <code>array</code>.</p> <p> Can be one of:</p> <ul> <li>\n<p><code>string</code>: The string is used for matching against the contents of the <code>array</code>. All strings or objects with string properties in <code>array</code> that match this string will be returned. This also applies to nested object properties. The predicate can be negated by prefixing the string with <code>!</code>.</p> </li> <li>\n<p><code>Object</code>: A pattern object can be used to filter specific properties on objects contained by <code>array</code>. For example <code>{name:\"M\", phone:\"1\"}</code> predicate will return an array of items which have property <code>name</code> containing \"M\" and property <code>phone</code> containing \"1\". A special property name <code>$</code> can be used (as in <code>{$:\"text\"}</code>) to accept a match against any property of the object or its nested object properties. That's equivalent to the simple substring match with a <code>string</code> as described above. The predicate can be negated by prefixing the string with <code>!</code>. For example <code>{name: \"!M\"}</code> predicate will return an array of items which have property <code>name</code> not containing \"M\".</p> <p>Note that a named property will match properties on the same level only, while the special <code>$</code> property will match properties on the same level or deeper. E.g. an array item like <code>{name: {first: 'John', last: 'Doe'}}</code> will <strong>not</strong> be matched by <code>{name: 'John'}</code>, but <strong>will</strong> be matched by <code>{$: 'John'}</code>.</p> </li> <li>\n<p><code>function(value, index)</code>: A predicate function can be used to write arbitrary filters. The function is called for each element of <code>array</code>. The final result is an array of those elements that the predicate returned true for.</p> </li> </ul> </td> </tr> <tr> <td> comparator </td> <td> <code class=\"label type-hint type-hint-function\">function(actual, expected)</code><code class=\"label type-hint type-hint-true\">true</code><code class=\"label type-hint type-hint-undefined\">undefined</code> </td> <td> <p>Comparator which is used in determining if the expected value (from the filter expression) and actual value (from the object in the array) should be considered a match.</p> <p> Can be one of:</p> <ul> <li>\n<p><code>function(actual, expected)</code>: The function will be given the object value and the predicate value to compare and should return true if both values should be considered equal.</p> </li> <li>\n<p><code>true</code>: A shorthand for <code>function(actual, expected) { return angular.equals(actual, expected)}</code>. This is essentially strict comparison of expected and actual.</p> </li> <li>\n<p><code>false|undefined</code>: A short hand for a function which will look for a substring match in case insensitive way.</p> </li> </ul> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/filter/filter\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/filter/filter</a>\n  </p>\n</div>\n","api/ng/filter/json":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/filter/filters.js?message=docs(json)%3A%20describe%20your%20change...#L508\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/filter/filters.js#L508\" class=\"view-source pull-right btn btn-primary\"> View Source </a>json</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> filter in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Allows you to convert a JavaScript object into JSON string.</p> <p> This filter is mostly useful for debugging. When using the double curly {{value}} notation the binding is automatically converted to JSON.</p> </div> <div> <h2>Usage</h2> <h3>In HTML Template Binding</h3> <pre>{{ json_expression | json : spacing}}</pre> <h3>In JavaScript</h3> <pre>$filter('json')(object, spacing)</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> object </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>Any JavaScript object (including arrays and primitive types) to filter.</p> </td> </tr> <tr> <td> spacing <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>The number of spaces to use per indentation, defaults to 2.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>JSON string.</p> </td> </tr> </table>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/filter/json\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/filter/json</a>\n  </p>\n</div>\n","api/ng/filter/limitto":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/filter/limitTo.js?message=docs(limitTo)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/filter/limitTo.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>limitTo</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> filter in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Creates a new array or string containing only a specified number of elements. The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of <code>limit</code>. If a number is used as input, it is converted to a string.</p> </div> <div> <h2>Usage</h2> <h3>In HTML Template Binding</h3> <pre>{{ limitTo_expression | limitTo : limit}}</pre> <h3>In JavaScript</h3> <pre>$filter('limitTo')(input, limit)</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> input </td> <td> <code class=\"label type-hint type-hint-array\">Array</code><code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Source array, string or number to be limited.</p> </td> </tr> <tr> <td> limit </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>The length of the returned array or string. If the <code>limit</code> number is positive, <code>limit</code> number of items from the beginning of the source array/string are copied. If the number is negative, <code>limit</code> number of items from the end of the source array/string are copied. The <code>limit</code> will be trimmed if it exceeds <code>array.length</code></p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td>\n<code class=\"label type-hint type-hint-array\">Array</code><code class=\"label type-hint type-hint-string\">string</code>\n</td> <td>\n<p>A new sub-array or substring of length <code>limit</code> or less if input array had less than <code>limit</code> elements.</p> </td> </tr> </table>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/filter/limitTo\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/filter/limitTo</a>\n  </p>\n</div>\n","api/ng/filter/lowercase":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/filter/filters.js?message=docs(lowercase)%3A%20describe%20your%20change...#L549\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/filter/filters.js#L549\" class=\"view-source pull-right btn btn-primary\"> View Source </a>lowercase</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> filter in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Converts string to lowercase.</p> </div> <div> <h2>Usage</h2> <h3>In HTML Template Binding</h3> <pre>{{ lowercase_expression | lowercase}}</pre> <h3>In JavaScript</h3> <pre>$filter('lowercase')()</pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/filter/lowercase\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/filter/lowercase</a>\n  </p>\n</div>\n","api/ng/filter/number":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/filter/filters.js?message=docs(number)%3A%20describe%20your%20change...#L75\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/filter/filters.js#L75\" class=\"view-source pull-right btn btn-primary\"> View Source </a>number</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> filter in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Formats a number as text.</p> <p>If the input is null or undefined, it will just be returned. If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned. If the input is not a number an empty string is returned.</p> </div> <div> <h2>Usage</h2> <h3>In HTML Template Binding</h3> <pre>{{ number_expression | number : fractionSize}}</pre> <h3>In JavaScript</h3> <pre>$filter('number')(number, fractionSize)</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> number </td> <td> <code class=\"label type-hint type-hint-number\">number</code><code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Number to format.</p> </td> </tr> <tr> <td> fractionSize <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code><code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Number of decimal places to round the number to. If this is not provided then the fraction size is computed from the current locale's number formatting pattern. In the case of the default locale, it will be 3.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>Number rounded to decimalPlaces and places a “,” after each third digit.</p> </td> </tr> </table>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/filter/number\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/filter/number</a>\n  </p>\n</div>\n","api/ng/filter/orderby":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/filter/orderBy.js?message=docs(orderBy)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/filter/orderBy.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>orderBy</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> filter in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Orders a specified <code>array</code> by the <code>expression</code> predicate. It is ordered alphabetically for strings and numerically for numbers. Note: if you notice numbers are not being sorted correctly, make sure they are actually being saved as numbers and not strings.</p> </div> <div> <h2>Usage</h2> <h3>In HTML Template Binding</h3> <pre>{{ orderBy_expression | orderBy : expression : reverse}}</pre> <h3>In JavaScript</h3> <pre>$filter('orderBy')(array, expression, reverse)</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> array </td> <td> <code class=\"label type-hint type-hint-array\">Array</code> </td> <td> <p>The array to sort.</p> </td> </tr> <tr> <td> expression </td> <td> <code class=\"label type-hint type-hint-function\">function(*)</code><code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-array\">Array.&lt;(function(*)|string)&gt;=</code> </td> <td> <p>A predicate to be used by the comparator to determine the order of elements.</p> <p> Can be one of:</p> <ul> <li>\n<code>function</code>: Getter function. The result of this function will be sorted using the <code>&lt;</code>, <code>===</code>, <code>&gt;</code> operator.</li> <li>\n<code>string</code>: An Angular expression. The result of this expression is used to compare elements (for example <code>name</code> to sort by a property called <code>name</code> or <code>name.substr(0, 3)</code> to sort by 3 first characters of a property called <code>name</code>). The result of a constant expression is interpreted as a property name to be used in comparisons (for example <code>\"special name\"</code> to sort object by the value of their <code>special name</code> property). An expression can be optionally prefixed with <code>+</code> or <code>-</code> to control ascending or descending sort order (for example, <code>+name</code> or <code>-name</code>). If no property is provided, (e.g. <code>'+'</code>) then the array element itself is used to compare where sorting.</li> <li>\n<p><code>Array</code>: An array of function or string predicates. The first predicate in the array is used for sorting, but when two items are equivalent, the next predicate is used.</p> <p>If the predicate is missing or empty then it defaults to <code>'+'</code>.</p> </li> </ul> </td> </tr> <tr> <td> reverse <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>Reverse the order of the array.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-array\">Array</code></td> <td>\n<p>Sorted copy of the source array.</p> </td> </tr> </table> <p>The example below demonstrates a simple ngRepeat, where the data is sorted by age in descending order (predicate is set to <code>'-age'</code>). <code>reverse</code> is not set, which means it defaults to <code>false</code>. </p> <p>The predicate and reverse parameters can be controlled dynamically through scope properties, as shown in the next example.</p>  <p>It's also possible to call the orderBy filter manually, by injecting <code>$filter</code>, retrieving the filter routine with <code>$filter('orderBy')</code>, and calling the returned filter routine with the desired parameters.</p> <p>Example:</p>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/filter/orderBy\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/filter/orderBy</a>\n  </p>\n</div>\n","api/ng/filter/uppercase":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ng/filter/filters.js?message=docs(uppercase)%3A%20describe%20your%20change...#L560\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ng/filter/filters.js#L560\" class=\"view-source pull-right btn btn-primary\"> View Source </a>uppercase</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> filter in module <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng\">ng</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Converts string to uppercase.</p> </div> <div> <h2>Usage</h2> <h3>In HTML Template Binding</h3> <pre>{{ uppercase_expression | uppercase}}</pre> <h3>In JavaScript</h3> <pre>$filter('uppercase')()</pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ng/filter/uppercase\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ng/filter/uppercase</a>\n  </p>\n</div>\n","api/auto":"<h1>\n<a href=\"https://github.com/angular/angular.js/edit//src/auto/injector.js?message=docs(auto)%3A%20describe%20your%20change...#L57\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> auto </h1> <p>Implicit module which gets automatically added to each <a href=\"auto/service/%24injector\">$injector</a>.</p> <div class=\"component-breakdown\"> <h2>Module Components</h2> <div> <h3 class=\"component-heading\" id=\"service\">Service</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"auto/service/%24injector\">$injector</a></td> <td>\n<p><code>$injector</code> is used to retrieve object instances as defined by <a href=\"auto/service/%24provide\">provider</a>, instantiate types, invoke methods, and load modules.</p> </td> </tr> <tr> <td><a href=\"auto/service/%24provide\">$provide</a></td> <td>\n<p>The <a href=\"auto/service/%24provide\">$provide</a> service has a number of methods for registering components with the <a href=\"auto/service/%24injector\">$injector</a>. Many of these functions are also exposed on <a href=\"ng/type/angular.module\"><code>angular.Module</code></a>.</p> </td> </tr> </table> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/auto\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/auto</a>\n  </p>\n</div>\n","api/auto/service":"<h1>Service components in auto</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"service/%24injector\">$injector</a></td> <td>\n<p><code>$injector</code> is used to retrieve object instances as defined by <a href=\"service/%24provide\">provider</a>, instantiate types, invoke methods, and load modules.</p> </td> </tr> <tr> <td><a href=\"service/%24provide\">$provide</a></td> <td>\n<p>The <a href=\"service/%24provide\">$provide</a> service has a number of methods for registering components with the <a href=\"service/%24injector\">$injector</a>. Many of these functions are also exposed on <a href=\"../ng/type/angular.module\"><code>angular.Module</code></a>.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/auto/service\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/auto/service</a>\n  </p>\n</div>\n","api/auto/service/$injector":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/auto/injector.js?message=docs(%24injector)%3A%20describe%20your%20change...#L121\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/auto/injector.js#L121\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$injector</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../auto\">auto</a> </li> </ol>  <div class=\"api-profile-description\"> <p><code>$injector</code> is used to retrieve object instances as defined by <a href=\"%24provide\">provider</a>, instantiate types, invoke methods, and load modules.</p> <p>The following always holds true:</p> <pre data-language=\"javascript\">var $injector = angular.injector();\nexpect($injector.get('$injector')).toBe($injector);\nexpect($injector.invoke(function($injector) {\n  return $injector;\n})).toBe($injector);\n</pre> <h2 id=\"injection-function-annotation\">Injection Function Annotation</h2> <p>JavaScript does not have annotations, and annotations are needed for dependency injection. The following are all valid ways of annotating function with injection arguments and are equivalent.</p> <pre data-language=\"javascript\">// inferred (only works if code not minified/obfuscated)\n$injector.invoke(function(serviceA){});\n\n// annotated\nfunction explicit(serviceA) {};\nexplicit.$inject = ['serviceA'];\n$injector.invoke(explicit);\n\n// inline\n$injector.invoke(['serviceA', function(serviceA){}]);\n</pre> <h2 id=\"inference\">Inference</h2> <p>In JavaScript calling <code>toString()</code> on a function returns the function definition. The definition can then be parsed and the function arguments can be extracted. This method of discovering annotations is disallowed when the injector is in strict mode. <em>NOTE:</em> This does not work with minification, and obfuscation tools since these tools change the argument names.</p> <h2 id=\"-inject-annotation\">$inject Annotation</h2> <p>By adding an <code>$inject</code> property onto a function the injection parameters can be specified.</p> <h2 id=\"inline\">Inline</h2> <p>As an array of injection names, where the last item in the array is the function to call.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"get\"> <h3>get(name, [caller]);</h3> <div>\n<p>Return an instance of the service.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The name of the instance to retrieve.</p> </td> </tr> <tr> <td> caller <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>An optional string to provide the origin of the function call for error messages.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>The instance.</p> </td> </tr> </table> </li> <li id=\"invoke\"> <h3>invoke(fn, [self], [locals]);</h3> <div>\n<p>Invoke the method and supply the method arguments from the <code>$injector</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> fn </td> <td> <code class=\"label type-hint type-hint-function\">function()</code><code class=\"label type-hint type-hint-array\">Array.&lt;(string|function())&gt;</code> </td> <td> <p>The injectable function to invoke. Function parameters are injected according to the <a href=\"../../../guide/di\">$inject Annotation</a> rules.</p> </td> </tr> <tr> <td> self <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>The <code>this</code> for the invoked method.</p> </td> </tr> <tr> <td> locals <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Optional object. If preset then any argument names are read from this object first, before the <code>$injector</code> is consulted.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">*</code></td> <td>\n<p>the value returned by the invoked <code>fn</code> function.</p> </td> </tr> </table> </li> <li id=\"has\"> <h3>has(name);</h3> <div>\n<p>Allows the user to query if the particular service exists.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Name of the service to query.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p><code>true</code> if injector has given service.</p> </td> </tr> </table> </li> <li id=\"instantiate\"> <h3>instantiate(Type, [locals]);</h3> <div>\n<p>Create a new instance of JS type. The method takes a constructor function, invokes the new operator, and supplies all of the arguments to the constructor function as specified by the constructor annotation.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> Type </td> <td> <code class=\"label type-hint type-hint-function\">Function</code> </td> <td> <p>Annotated constructor function.</p> </td> </tr> <tr> <td> locals <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Optional object. If preset then any argument names are read from this object first, before the <code>$injector</code> is consulted.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>new instance of <code>Type</code>.</p> </td> </tr> </table> </li> <li id=\"annotate\"> <h3>annotate(fn, [strictDi]);</h3> <div>\n<p>Returns an array of service names which the function is requesting for injection. This API is used by the injector to determine which services need to be injected into the function when the function is invoked. There are three ways in which the function can be annotated with the needed dependencies.</p> <h2 id=\"argument-names\">Argument names</h2> <p>The simplest form is to extract the dependencies from the arguments of the function. This is done by converting the function into a string using <code>toString()</code> method and extracting the argument names.</p> <pre data-language=\"javascript\">// Given\nfunction MyController($scope, $route) {\n  // ...\n}\n\n// Then\nexpect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n</pre> <p>You can disallow this method by using strict injection mode.</p> <p>This method does not work with code minification / obfuscation. For this reason the following annotation strategies are supported.</p> <h2 id=\"the-inject-property\">The $inject property</h2> <p>If a function has an <code>$inject</code> property and its value is an array of strings, then the strings represent names of services to be injected into the function.</p> <pre data-language=\"javascript\">// Given\nvar MyController = function(obfuscatedScope, obfuscatedRoute) {\n  // ...\n}\n// Define function dependencies\nMyController['$inject'] = ['$scope', '$route'];\n\n// Then\nexpect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n</pre> <h2 id=\"the-array-notation\">The array notation</h2> <p>It is often desirable to inline Injected functions and that's when setting the <code>$inject</code> property is very inconvenient. In these situations using the array notation to specify the dependencies in a way that survives minification is a better choice:</p> <pre data-language=\"javascript\">// We wish to write this (not minification / obfuscation safe)\ninjector.invoke(function($compile, $rootScope) {\n  // ...\n});\n\n// We are forced to write break inlining\nvar tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {\n  // ...\n};\ntmpFn.$inject = ['$compile', '$rootScope'];\ninjector.invoke(tmpFn);\n\n// To better support inline function the inline annotation is supported\ninjector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {\n  // ...\n}]);\n\n// Therefore\nexpect(injector.annotate(\n   ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])\n ).toEqual(['$compile', '$rootScope']);\n</pre> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> fn </td> <td> <code class=\"label type-hint type-hint-function\">function()</code><code class=\"label type-hint type-hint-array\">Array.&lt;(string|function())&gt;</code> </td> <td> <p>Function for which dependent service names need to be retrieved as described above.</p> </td> </tr> <tr> <td> strictDi <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>Disallow argument name annotation inference.</p> <p><em>(default: false)</em></p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-array\">Array.&lt;string&gt;</code></td> <td>\n<p>The names of the services which the function requires.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/auto/service/$injector\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/auto/service/$injector</a>\n  </p>\n</div>\n","api/auto/service/$provide":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/auto/injector.js?message=docs(%24provide)%3A%20describe%20your%20change...#L313\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/auto/injector.js#L313\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$provide</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../auto\">auto</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <a href=\"%24provide\">$provide</a> service has a number of methods for registering components with the <a href=\"%24injector\">$injector</a>. Many of these functions are also exposed on <a href=\"../../ng/type/angular.module\"><code>angular.Module</code></a>.</p> <p>An Angular <strong>service</strong> is a singleton object created by a <strong>service factory</strong>. These <strong>service factories</strong> are functions which, in turn, are created by a <strong>service provider</strong>. The <strong>service providers</strong> are constructor functions. When instantiated they must contain a property called <code>$get</code>, which holds the <strong>service factory</strong> function.</p> <p>When you request a service, the <a href=\"%24injector\">$injector</a> is responsible for finding the correct <strong>service provider</strong>, instantiating it and then calling its <code>$get</code> <strong>service factory</strong> function to get the instance of the <strong>service</strong>.</p> <p>Often services have no configuration options and there is no need to add methods to the service provider. The provider will be no more than a constructor function with a <code>$get</code> property. For these cases the <a href=\"%24provide\">$provide</a> service has additional helper methods to register services without specifying a provider.</p> <ul> <li>\n<a href=\"%24provide#provider.html\">provider(provider)</a> - registers a <strong>service provider</strong> with the <a href=\"%24injector\">$injector</a>\n</li> <li>\n<a href=\"%24provide#constant.html\">constant(obj)</a> - registers a value/object that can be accessed by providers and services.</li> <li>\n<a href=\"%24provide#value.html\">value(obj)</a> - registers a value/object that can only be accessed by services, not providers.</li> <li>\n<a href=\"%24provide#factory.html\">factory(fn)</a> - registers a service <strong>factory function</strong>, <code>fn</code>, that will be wrapped in a <strong>service provider</strong> object, whose <code>$get</code> property will contain the given factory function.</li> <li>\n<a href=\"%24provide#service.html\">service(class)</a> - registers a <strong>constructor function</strong>, <code>class</code> that will be wrapped in a <strong>service provider</strong> object, whose <code>$get</code> property will instantiate a new object using the given constructor function.</li> </ul> <p>See the individual methods for more information and examples.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"provider\"> <h3>provider(name, provider);</h3> <div>\n<p>Register a <strong>provider function</strong> with the <a href=\"%24injector\">$injector</a>. Provider functions are constructor functions, whose instances are responsible for \"providing\" a factory for a service.</p> <p>Service provider names start with the name of the service they provide followed by <code>Provider</code>. For example, the <a href=\"../../ng/service/%24log\">$log</a> service has a provider called <a href=\"../../ng/provider/%24logprovider\">$logProvider</a>.</p> <p>Service provider objects can have additional methods which allow configuration of the provider and its service. Importantly, you can configure what kind of service is created by the <code>$get</code> method, or how that service will act. For example, the <a href=\"../../ng/provider/%24logprovider\">$logProvider</a> has a method <a href=\"../../ng/provider/%24logprovider#debugEnabled.html\">debugEnabled</a> which lets you specify whether the <a href=\"../../ng/service/%24log\">$log</a> service will log debug messages to the console or not.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The name of the instance. NOTE: the provider will be available under <code>name +\n                        'Provider'</code> key.</p> </td> </tr> <tr> <td> provider </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function()</code> </td> <td> <p>If the provider is:</p> <ul> <li>\n<code>Object</code>: then it should have a <code>$get</code> method. The <code>$get</code> method will be invoked using <a href=\"%24injector#invoke.html\">$injector.invoke()</a> when an instance needs to be created.</li> <li>\n<code>Constructor</code>: a new instance of the provider will be created using <a href=\"%24injector#instantiate.html\">$injector.instantiate()</a>, then treated as <code>object</code>.</li> </ul> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>registered provider instance</p> </td> </tr> </table> </li> <li id=\"factory\"> <h3>factory(name, $getFn);</h3> <div>\n<p>Register a <strong>service factory</strong>, which will be called to return the service instance. This is short for registering a service where its provider consists of only a <code>$get</code> property, which is the given service factory function. You should use <a href=\"%24provide#factory.html\">$provide.factory(getFn)</a> if you do not need to configure your service in a provider.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The name of the instance.</p> </td> </tr> <tr> <td> $getFn </td> <td> <code class=\"label type-hint type-hint-function\">function()</code><code class=\"label type-hint type-hint-array\">Array.&lt;(string|function())&gt;</code> </td> <td> <p>The injectable $getFn for the instance creation. Internally this is a short hand for <code>$provide.provider(name, {$get: $getFn})</code>.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>registered provider instance</p> </td> </tr> </table> </li> <li id=\"service\"> <h3>service(name, constructor);</h3> <div>\n<p>Register a <strong>service constructor</strong>, which will be invoked with <code>new</code> to create the service instance. This is short for registering a service where its provider's <code>$get</code> property is the service constructor function that will be used to instantiate the service instance.</p> <p>You should use <a href=\"%24provide#service.html\">$provide.service(class)</a> if you define your service as a type/class.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The name of the instance.</p> </td> </tr> <tr> <td> constructor </td> <td> <code class=\"label type-hint type-hint-function\">function()</code><code class=\"label type-hint type-hint-array\">Array.&lt;(string|function())&gt;</code> </td> <td> <p>An injectable class (constructor function) that will be instantiated.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>registered provider instance</p> </td> </tr> </table> </li> <li id=\"value\"> <h3>value(name, value);</h3> <div>\n<p>Register a <strong>value service</strong> with the <a href=\"%24injector\">$injector</a>, such as a string, a number, an array, an object or a function. This is short for registering a service where its provider's <code>$get</code> property is a factory function that takes no arguments and returns the <strong>value service</strong>.</p> <p>Value services are similar to constant services, except that they cannot be injected into a module configuration function (see <a href=\"../../ng/type/angular.module#config.html\"><code>angular.Module</code></a>) but they can be overridden by an Angular <a href=\"%24provide#decorator.html\">decorator</a>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The name of the instance.</p> </td> </tr> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The value.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>registered provider instance</p> </td> </tr> </table> </li> <li id=\"constant\"> <h3>constant(name, value);</h3> <div>\n<p>Register a <strong>constant service</strong>, such as a string, a number, an array, an object or a function, with the <a href=\"%24injector\">$injector</a>. Unlike <a href=\"%24provide#value.html\">value</a> it can be injected into a module configuration function (see <a href=\"../../ng/type/angular.module#config.html\"><code>angular.Module</code></a>) and it cannot be overridden by an Angular <a href=\"%24provide#decorator.html\">decorator</a>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The name of the constant.</p> </td> </tr> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>The constant value.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>registered instance</p> </td> </tr> </table> </li> <li id=\"decorator\"> <h3>decorator(name, decorator);</h3> <div>\n<p>Register a <strong>service decorator</strong> with the <a href=\"%24injector\">$injector</a>. A service decorator intercepts the creation of a service, allowing it to override or modify the behaviour of the service. The object returned by the decorator may be the original service, or a new service object which replaces or wraps and delegates to the original service.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> name </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>The name of the service to decorate.</p> </td> </tr> <tr> <td> decorator </td> <td> <code class=\"label type-hint type-hint-function\">function()</code><code class=\"label type-hint type-hint-array\">Array.&lt;(string|function())&gt;</code> </td> <td> <p>This function will be invoked when the service needs to be instantiated and should return the decorated service instance. The function is called using the <a href=\"%24injector#invoke.html\">injector.invoke</a> method and is therefore fully injectable. Local injection arguments:</p> <ul> <li>\n<code>$delegate</code> - The original service instance, which can be monkey patched, configured, decorated or delegated to.</li> </ul> </td> </tr> </tbody> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/auto/service/$provide\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/auto/service/$provide</a>\n  </p>\n</div>\n","api/nganimate/provider":"<h1>Provider components in ngAnimate</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"provider/%24animateprovider\">$animateProvider</a></td> <td>\n<p>The <code>$animateProvider</code> allows developers to register JavaScript animation event handlers directly inside of a module. When an animation is triggered, the $animate service will query the $animate service to find any animations that match the provided name value.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngAnimate/provider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngAnimate/provider</a>\n  </p>\n</div>\n","api/nganimate/provider/$animateprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngAnimate/animate.js?message=docs(%24animateProvider)%3A%20describe%20your%20change...#L394\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngAnimate/animate.js#L394\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$animateProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24animate\">$animate</a> </li> <li> provider in module <a href=\"../../nganimate\">ngAnimate</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>$animateProvider</code> allows developers to register JavaScript animation event handlers directly inside of a module. When an animation is triggered, the $animate service will query the $animate service to find any animations that match the provided name value.</p> <p>Requires the <a href=\"../../nganimate\"><code>ngAnimate</code></a> module to be installed.</p> <p>Please visit the <a href=\"../../nganimate\"><code>ngAnimate</code></a> module overview page learn more about how to use animations in your application.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngAnimate/provider/$animateProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngAnimate/provider/$animateProvider</a>\n  </p>\n</div>\n","api/nganimate/service":"<h1>Service components in ngAnimate</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"service/%24animate\">$animate</a></td> <td>\n<p>The <code>$animate</code> service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations. When any of these operations are run, the $animate service will examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object) as well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngAnimate/service\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngAnimate/service</a>\n  </p>\n</div>\n","api/nganimate":"<h1>\n<a href=\"https://github.com/angular/angular.js/edit//src/ngAnimate/animate.js?message=docs(ngAnimate)%3A%20describe%20your%20change...#L4\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> ngAnimate </h1> <p>The <code>ngAnimate</code> module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.</p>  <h2 id=\"usage\">Usage</h2> <p>To see animations in action, all that is required is to define the appropriate CSS classes or to register a JavaScript animation via the <code>myModule.animation()</code> function. The directives that support animation automatically are: <code>ngRepeat</code>, <code>ngInclude</code>, <code>ngIf</code>, <code>ngSwitch</code>, <code>ngShow</code>, <code>ngHide</code>, <code>ngView</code> and <code>ngClass</code>. Custom directives can take advantage of animation by using the <code>$animate</code> service.</p> <p>Below is a more detailed breakdown of the supported animation events provided by pre-existing ng directives:</p> <table> <thead> <tr> <th>Directive</th> <th>Supported Animations</th> </tr> </thead> <tbody> <tr> <td><a href=\"ng/directive/ngrepeat#animations.html\">ngRepeat</a></td> <td>enter, leave and move</td> </tr> <tr> <td><a href=\"ngroute/directive/ngview#animations.html\">ngView</a></td> <td>enter and leave</td> </tr> <tr> <td><a href=\"ng/directive/nginclude#animations.html\">ngInclude</a></td> <td>enter and leave</td> </tr> <tr> <td><a href=\"ng/directive/ngswitch#animations.html\">ngSwitch</a></td> <td>enter and leave</td> </tr> <tr> <td><a href=\"ng/directive/ngif#animations.html\">ngIf</a></td> <td>enter and leave</td> </tr> <tr> <td><a href=\"ng/directive/ngclass#animations.html\">ngClass</a></td> <td>add and remove (the CSS class(es) present)</td> </tr> <tr> <td>\n<a href=\"ng/directive/ngshow#animations.html\">ngShow</a> &amp; <a href=\"ng/directive/nghide#animations.html\">ngHide</a>\n</td> <td>add and remove (the ng-hide class value)</td> </tr> <tr> <td>\n<a href=\"ng/directive/form#animation-hooks.html\">form</a> &amp; <a href=\"ng/directive/ngmodel#animation-hooks.html\">ngModel</a>\n</td> <td>add and remove (dirty, pristine, valid, invalid &amp; all other validations)</td> </tr> <tr> <td><a href=\"ngmessages#animations.html\">ngMessages</a></td> <td>add and remove (ng-active &amp; ng-inactive)</td> </tr> <tr> <td><a href=\"ngmessages#animations.html\">ngMessage</a></td> <td>enter and leave</td> </tr> </tbody> </table> <p>You can find out more information about animations upon visiting each directive page.</p> <p>Below is an example of how to apply animations to a directive that supports animation hooks:</p> <pre data-language=\"html\">&lt;style type=\"text/css\"&gt;\n.slide.ng-enter, .slide.ng-leave {\n  -webkit-transition:0.5s linear all;\n  transition:0.5s linear all;\n}\n\n.slide.ng-enter { }        /* starting animations for enter */\n.slide.ng-enter.ng-enter-active { } /* terminal animations for enter */\n.slide.ng-leave { }        /* starting animations for leave */\n.slide.ng-leave.ng-leave-active { } /* terminal animations for leave */\n&lt;/style&gt;\n\n&lt;!--\nthe animate service will automatically add .ng-enter and .ng-leave to the element\nto trigger the CSS transition/animations\n--&gt;\n&lt;ANY class=\"slide\" ng-include=\"...\"&gt;&lt;/ANY&gt;\n</pre> <p>Keep in mind that, by default, if an animation is running, any child elements cannot be animated until the parent element's animation has completed. This blocking feature can be overridden by placing the <code>ng-animate-children</code> attribute on a parent container tag.</p> <pre data-language=\"html\">&lt;div class=\"slide-animation\" ng-if=\"on\" ng-animate-children&gt;\n  &lt;div class=\"fade-animation\" ng-if=\"on\"&gt;\n    &lt;div class=\"explode-animation\" ng-if=\"on\"&gt;\n       ...\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre> <p>When the <code>on</code> expression value changes and an animation is triggered then each of the elements within will all animate without the block being applied to child elements.</p> <h2 id=\"are-animations-run-when-the-application-starts-\">Are animations run when the application starts?</h2> <p>No they are not. When an application is bootstrapped Angular will disable animations from running to avoid a frenzy of animations from being triggered as soon as the browser has rendered the screen. For this to work, Angular will wait for two digest cycles until enabling animations. From there on, any animation-triggering layout changes in the application will trigger animations as normal.</p> <p>In addition, upon bootstrap, if the routing system or any directives or load remote data (via $http) then Angular will automatically extend the wait time to enable animations once <strong>all</strong> of the outbound HTTP requests are complete.</p> <h2 id=\"css-defined-animations\">CSS-defined Animations</h2> <p>The animate service will automatically apply two CSS classes to the animated element and these two CSS classes are designed to contain the start and end CSS styling. Both CSS transitions and keyframe animations are supported and can be used to play along with this naming structure.</p> <p>The following code below demonstrates how to perform animations using <strong>CSS transitions</strong> with Angular:</p> <pre data-language=\"html\">&lt;style type=\"text/css\"&gt;\n/*\n The animate class is apart of the element and the ng-enter class\n is attached to the element once the enter animation event is triggered\n*/\n.reveal-animation.ng-enter {\n -webkit-transition: 1s linear all; /* Safari/Chrome */\n transition: 1s linear all; /* All other modern browsers and IE10+ */\n\n /* The animation preparation code */\n opacity: 0;\n}\n\n/*\n Keep in mind that you want to combine both CSS\n classes together to avoid any CSS-specificity\n conflicts\n*/\n.reveal-animation.ng-enter.ng-enter-active {\n /* The animation code itself */\n opacity: 1;\n}\n&lt;/style&gt;\n\n&lt;div class=\"view-container\"&gt;\n  &lt;div ng-view class=\"reveal-animation\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</pre> <p>The following code below demonstrates how to perform animations using <strong>CSS animations</strong> with Angular:</p> <pre data-language=\"html\">&lt;style type=\"text/css\"&gt;\n.reveal-animation.ng-enter {\n  -webkit-animation: enter_sequence 1s linear; /* Safari/Chrome */\n  animation: enter_sequence 1s linear; /* IE10+ and Future Browsers */\n}\n@-webkit-keyframes enter_sequence {\n  from { opacity:0; }\n  to { opacity:1; }\n}\n@keyframes enter_sequence {\n  from { opacity:0; }\n  to { opacity:1; }\n}\n&lt;/style&gt;\n\n&lt;div class=\"view-container\"&gt;\n  &lt;div ng-view class=\"reveal-animation\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</pre> <p>Both CSS3 animations and transitions can be used together and the animate service will figure out the correct duration and delay timing.</p> <p>Upon DOM mutation, the event class is added first (something like <code>ng-enter</code>), then the browser prepares itself to add the active class (in this case <code>ng-enter-active</code>) which then triggers the animation. The animation module will automatically detect the CSS code to determine when the animation ends. Once the animation is over then both CSS classes will be removed from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end immediately resulting in a DOM element that is at its final state. This final state is when the DOM element has no CSS transition/animation classes applied to it.</p> <h3 id=\"structural-transition-animations\">Structural transition animations</h3> <p>Structural transitions (such as enter, leave and move) will always apply a <code>0s none</code> transition value to force the browser into rendering the styles defined in the setup (<code>.ng-enter</code>, <code>.ng-leave</code> or <code>.ng-move</code>) class. This means that any active transition animations operating on the element will be cut off to make way for the enter, leave or move animation.</p> <h3 id=\"class-based-transition-animations\">Class-based transition animations</h3> <p>Class-based transitions refer to transition animations that are triggered when a CSS class is added to or removed from the element (via <code>$animate.addClass</code>, <code>$animate.removeClass</code>, <code>$animate.setClass</code>, or by directives such as <code>ngClass</code>, <code>ngModel</code> and <code>form</code>). They are different when compared to structural animations since they <strong>do not cancel existing animations</strong> nor do they <strong>block successive transitions</strong> from rendering on the same element. This distinction allows for <strong>multiple class-based transitions</strong> to be performed on the same element.</p> <p>In addition to ngAnimate supporting the default (natural) functionality of class-based transition animations, ngAnimate also decorates the element with starting and ending CSS classes to aid the developer in further styling the element throughout the transition animation. Earlier versions of ngAnimate may have caused natural CSS transitions to break and not render properly due to $animate temporarily blocking transitions using <code>0s none</code> in order to allow the setup CSS class (the <code>-add</code> or <code>-remove</code> class) to be applied without triggering an animation. However, as of <strong>version 1.3</strong>, this workaround has been removed with ngAnimate and all non-ngAnimate CSS class transitions are compatible with ngAnimate.</p> <p>There is, however, one special case when dealing with class-based transitions in ngAnimate. When rendering class-based transitions that make use of the setup and active CSS classes (e.g. <code>.fade-add</code> and <code>.fade-add-active</code> for when <code>.fade</code> is added) be sure to define the transition value <strong>on the active CSS class</strong> and not the setup class.</p> <pre data-language=\"css\">.fade-add {\n  /* remember to place a 0s transition here\n     to ensure that the styles are applied instantly\n     even if the element already has a transition style */\n  transition:0s linear all;\n\n  /* starting CSS styles */\n  opacity:1;\n}\n.fade-add.fade-add-active {\n  /* this will be the length of the animation */\n  transition:1s linear all;\n  opacity:0;\n}\n</pre> <p>The setup CSS class (in this case <code>.fade-add</code>) also has a transition style property, however, it has a duration of zero. This may not be required, however, incase the browser is unable to render the styling present in this CSS class instantly then it could be that the browser is attempting to perform an unnecessary transition.</p> <p>This workaround, however, does not apply to standard class-based transitions that are rendered when a CSS class containing a transition is applied to an element:</p> <pre data-language=\"css\">/* this works as expected */\n.fade {\n  transition:1s linear all;\n  opacity:0;\n}\n</pre> <p>Please keep this in mind when coding the CSS markup that will be used within class-based transitions. Also, try not to mix the two class-based animation flavors together since the CSS code may become overly complex.</p> <h3 id=\"preventing-collisions-with-third-party-libraries\">Preventing Collisions With Third Party Libraries</h3> <p>Some third-party frameworks place animation duration defaults across many element or className selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which is expecting actual animations on these elements and has to wait for their completion.</p> <p>You can prevent this unwanted behavior by using a prefix on all your animation classes:</p> <pre data-language=\"css\">/* prefixed with animate- */\n.animate-fade-add.animate-fade-add-active {\n  transition:1s linear all;\n  opacity:0;\n}\n</pre> <p>You then configure <code>$animate</code> to enforce this prefix:</p> <pre data-language=\"javascript\">$animateProvider.classNameFilter(/animate-/);\n</pre>  <h3 id=\"css-staggering-animations\">CSS Staggering Animations</h3> <p>A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a curtain-like effect. The ngAnimate module (versions &gt;=1.2) supports staggering animations and the stagger effect can be performed by creating a <strong>ng-EVENT-stagger</strong> CSS class and attaching that class to the base CSS class used for the animation. The style property expected within the stagger class can either be a <strong>transition-delay</strong> or an <strong>animation-delay</strong> property (or both if your animation contains both transitions and keyframe animations).</p> <pre data-language=\"css\">.my-animation.ng-enter {\n  /* standard transition code */\n  -webkit-transition: 1s linear all;\n  transition: 1s linear all;\n  opacity:0;\n}\n.my-animation.ng-enter-stagger {\n  /* this will have a 100ms delay between each successive leave animation */\n  -webkit-transition-delay: 0.1s;\n  transition-delay: 0.1s;\n\n  /* in case the stagger doesn't work then these two values\n   must be set to 0 to avoid an accidental CSS inheritance */\n  -webkit-transition-duration: 0s;\n  transition-duration: 0s;\n}\n.my-animation.ng-enter.ng-enter-active {\n  /* standard transition styles */\n  opacity:1;\n}\n</pre> <p>Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation will also be reset if more than 10ms has passed after the last animation has been fired.</p> <p>The following code will issue the <strong>ng-leave-stagger</strong> event on the element provided:</p> <pre data-language=\"javascript\">var kids = parent.children();\n\n$animate.leave(kids[0]); //stagger index=0\n$animate.leave(kids[1]); //stagger index=1\n$animate.leave(kids[2]); //stagger index=2\n$animate.leave(kids[3]); //stagger index=3\n$animate.leave(kids[4]); //stagger index=4\n\n$timeout(function() {\n  //stagger has reset itself\n  $animate.leave(kids[5]); //stagger index=0\n  $animate.leave(kids[6]); //stagger index=1\n}, 100, false);\n</pre> <p>Stagger animations are currently only supported within CSS-defined animations.</p> <h2 id=\"javascript-defined-animations\">JavaScript-defined Animations</h2> <p>In the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations on browsers that do not yet support CSS transitions/animations, then you can make use of JavaScript animations defined inside of your AngularJS module.</p> <pre data-language=\"javascript\">//!annotate=\"YourApp\" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.\nvar ngModule = angular.module('YourApp', ['ngAnimate']);\nngModule.animation('.my-crazy-animation', function() {\n  return {\n    enter: function(element, done) {\n      //run the animation here and call done when the animation is complete\n      return function(cancelled) {\n        //this (optional) function will be called when the animation\n        //completes or when the animation is cancelled (the cancelled\n        //flag will be set to true if cancelled).\n      };\n    },\n    leave: function(element, done) { },\n    move: function(element, done) { },\n\n    //animation that can be triggered before the class is added\n    beforeAddClass: function(element, className, done) { },\n\n    //animation that can be triggered after the class is added\n    addClass: function(element, className, done) { },\n\n    //animation that can be triggered before the class is removed\n    beforeRemoveClass: function(element, className, done) { },\n\n    //animation that can be triggered after the class is removed\n    removeClass: function(element, className, done) { }\n  };\n});\n</pre> <p>JavaScript-defined animations are created with a CSS-like class selector and a collection of events which are set to run a javascript callback function. When an animation is triggered, $animate will look for a matching animation which fits the element's CSS class attribute value and then run the matching animation event function (if found). In other words, if the CSS classes present on the animated element match any of the JavaScript animations then the callback function will be executed. It should be also noted that only simple, single class selectors are allowed (compound class selectors are not supported).</p> <p>Within a JavaScript animation, an object containing various event callback animation functions is expected to be returned. As explained above, these callbacks are triggered based on the animation event. Therefore if an enter animation is run, and the JavaScript animation is found, then the enter callback will handle that animation (in addition to the CSS keyframe animation or transition code that is defined via a stylesheet).</p> <h3 id=\"applying-directive-specific-styles-to-an-animation\">Applying Directive-specific Styles to an Animation</h3> <p>In some cases a directive or service may want to provide <code>$animate</code> with extra details that the animation will include into its animation. Let's say for example we wanted to render an animation that animates an element towards the mouse coordinates as to where the user clicked last. By collecting the X/Y coordinates of the click (via the event parameter) we can set the <code>top</code> and <code>left</code> styles into an object and pass that into our function call to <code>$animate.addClass</code>.</p> <pre data-language=\"javascript\">canvas.on('click', function(e) {\n  $animate.addClass(element, 'on', {\n    to: {\n      left : e.client.x + 'px',\n      top : e.client.y + 'px'\n    }\n  }):\n});\n</pre> <p>Now when the animation runs, and a transition or keyframe animation is picked up, then the animation itself will also include and transition the styling of the <code>left</code> and <code>top</code> properties into its running animation. If we want to provide some starting animation values then we can do so by placing the starting animations styles into an object called <code>from</code> in the same object as the <code>to</code> animations.</p> <pre data-language=\"javascript\">canvas.on('click', function(e) {\n  $animate.addClass(element, 'on', {\n    from: {\n       position: 'absolute',\n       left: '0px',\n       top: '0px'\n    },\n    to: {\n      left : e.client.x + 'px',\n      top : e.client.y + 'px'\n    }\n  }):\n});\n</pre> <p>Once the animation is complete or cancelled then the union of both the before and after styles are applied to the element. If <code>ngAnimate</code> is not present then the styles will be applied immediately.</p> <h2>Installation</h2> <p>First include <code>angular-animate.js</code> in your HTML:</p> <pre data-language=\"html\">&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-animate.js\"&gt;</pre> <p>You can download this file from the following places:</p> <ul> <li> <a href=\"https://developers.google.com/speed/libraries/devguide#angularjs\">Google CDN</a><br> e.g. <code>//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-animate.js</code> </li> <li> <a href=\"http://bower.io\">Bower</a><br> e.g. <pre>bower install angular-animate@X.Y.Z</pre> </li> <li> <a href=\"http://code.angularjs.org/\">code.angularjs.org</a><br> e.g. <pre>\"//code.angularjs.org/X.Y.Z/angular-animate.js\"</pre> </li> </ul> <p>where X.Y.Z is the AngularJS version you are running.</p> <p>Then load the module in your application by adding it as a dependent module:</p> <pre>angular.module('app', ['ngAnimate']);</pre> <p>With that you're ready to get started!</p> <div class=\"component-breakdown\"> <h2>Module Components</h2> <div> <h3 class=\"component-heading\" id=\"provider\">Provider</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"nganimate/provider/%24animateprovider\">$animateProvider</a></td> <td>\n<p>The <code>$animateProvider</code> allows developers to register JavaScript animation event handlers directly inside of a module. When an animation is triggered, the $animate service will query the $animate service to find any animations that match the provided name value.</p> </td> </tr> </table> </div> <div> <h3 class=\"component-heading\" id=\"service\">Service</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"nganimate/service/%24animate\">$animate</a></td> <td>\n<p>The <code>$animate</code> service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations. When any of these operations are run, the $animate service will examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object) as well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.</p> </td> </tr> </table> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngAnimate\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngAnimate</a>\n  </p>\n</div>\n","api/ngaria":"<h1>\n<a href=\"https://github.com/angular/angular.js/edit//src/ngAria/aria.js?message=docs(ngAria)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> ngAria </h1> <p>The <code>ngAria</code> module provides support for common <a href=\"http://www.w3.org/TR/wai-aria/\"><abbr title=\"Accessible Rich Internet Applications\">ARIA</abbr></a> attributes that convey state or semantic information about the application for users of assistive technologies, such as screen readers.</p>  <h2 id=\"usage\">Usage</h2> <p>For ngAria to do its magic, simply include the module as a dependency. The directives supported by ngAria are: <code>ngModel</code>, <code>ngDisabled</code>, <code>ngShow</code>, <code>ngHide</code>, <code>ngClick</code>, <code>ngDblClick</code>, and <code>ngMessages</code>.</p> <p>Below is a more detailed breakdown of the attributes handled by ngAria:</p> <table> <thead> <tr> <th>Directive</th> <th>Supported Attributes</th> </tr> </thead> <tbody> <tr> <td><a href=\"ng/directive/ngdisabled\">ngDisabled</a></td> <td>aria-disabled</td> </tr> <tr> <td><a href=\"ng/directive/ngshow\">ngShow</a></td> <td>aria-hidden</td> </tr> <tr> <td><a href=\"ng/directive/nghide\">ngHide</a></td> <td>aria-hidden</td> </tr> <tr> <td><a href=\"ng/directive/ngdblclick\">ngDblclick</a></td> <td>tabindex</td> </tr> <tr> <td><a href=\"ngmessages\">ngMessages</a></td> <td>aria-live</td> </tr> <tr> <td><a href=\"ng/directive/ngmodel\">ngModel</a></td> <td>aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles</td> </tr> <tr> <td><a href=\"ng/directive/ngclick\">ngClick</a></td> <td>tabindex, keypress event, button role</td> </tr> </tbody> </table> <p>Find out more information about each directive by reading the <a href=\"../guide/accessibility\">ngAria Developer Guide</a>.</p>  <p>Using ngDisabled with ngAria:</p> <pre data-language=\"html\">&lt;md-checkbox ng-disabled=\"disabled\"&gt;\n</pre> <p>Becomes:</p> <pre data-language=\"html\">&lt;md-checkbox ng-disabled=\"disabled\" aria-disabled=\"true\"&gt;\n</pre> <h2 id=\"disabling-attributes\">Disabling Attributes</h2> <p>It's possible to disable individual attributes added by ngAria with the <a href=\"ngaria/provider/%24ariaprovider#config.html\">config</a> method. For more details, see the <a href=\"../guide/accessibility\">Developer Guide</a>.</p> <h2>Installation</h2> <p>First include <code>angular-aria.js</code> in your HTML:</p> <pre data-language=\"html\">&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-aria.js\"&gt;</pre> <p>You can download this file from the following places:</p> <ul> <li> <a href=\"https://developers.google.com/speed/libraries/devguide#angularjs\">Google CDN</a><br> e.g. <code>//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-aria.js</code> </li> <li> <a href=\"http://bower.io\">Bower</a><br> e.g. <pre>bower install angular-aria@X.Y.Z</pre> </li> <li> <a href=\"http://code.angularjs.org/\">code.angularjs.org</a><br> e.g. <pre>\"//code.angularjs.org/X.Y.Z/angular-aria.js\"</pre> </li> </ul> <p>where X.Y.Z is the AngularJS version you are running.</p> <p>Then load the module in your application by adding it as a dependent module:</p> <pre>angular.module('app', ['ngAria']);</pre> <p>With that you're ready to get started!</p> <div class=\"component-breakdown\"> <h2>Module Components</h2> <div> <h3 class=\"component-heading\" id=\"provider\">Provider</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngaria/provider/%24ariaprovider\">$ariaProvider</a></td> <td>\n<p>Used for configuring the ARIA attributes injected and managed by ngAria.</p> </td> </tr> </table> </div> <div> <h3 class=\"component-heading\" id=\"service\">Service</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngaria/service/%24aria\">$aria</a></td> <td></td> </tr> </table> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngAria\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngAria</a>\n  </p>\n</div>\n","api/ngaria/provider":"<h1>Provider components in ngAria</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"provider/%24ariaprovider\">$ariaProvider</a></td> <td>\n<p>Used for configuring the ARIA attributes injected and managed by ngAria.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngAria/provider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngAria/provider</a>\n  </p>\n</div>\n","api/ngaria/provider/$ariaprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngAria/aria.js?message=docs(%24ariaProvider)%3A%20describe%20your%20change...#L55\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngAria/aria.js#L55\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$ariaProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24aria\">$aria</a> </li> <li> provider in module <a href=\"../../ngaria\">ngAria</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Used for configuring the ARIA attributes injected and managed by ngAria.</p> <pre data-language=\"javascript\">angular.module('myApp', ['ngAria'], function config($ariaProvider) {\n  $ariaProvider.config({\n    ariaValue: true,\n    tabindex: false\n  });\n});\n</pre> <h2 id=\"dependencies\">Dependencies</h2> <p>Requires the <a href=\"../../ngaria\"><code>ngAria</code></a> module to be installed.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"config\"> <h3>config(config);</h3> <div>\n<p>Enables/disables various ARIA attributes</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> config </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>object to enable/disable specific ARIA attributes</p> <ul> <li>\n<strong>ariaHidden</strong> – <code>{boolean}</code> – Enables/disables aria-hidden tags</li> <li>\n<strong>ariaChecked</strong> – <code>{boolean}</code> – Enables/disables aria-checked tags</li> <li>\n<strong>ariaDisabled</strong> – <code>{boolean}</code> – Enables/disables aria-disabled tags</li> <li>\n<strong>ariaRequired</strong> – <code>{boolean}</code> – Enables/disables aria-required tags</li> <li>\n<strong>ariaInvalid</strong> – <code>{boolean}</code> – Enables/disables aria-invalid tags</li> <li>\n<strong>ariaMultiline</strong> – <code>{boolean}</code> – Enables/disables aria-multiline tags</li> <li>\n<strong>ariaValue</strong> – <code>{boolean}</code> – Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags</li> <li>\n<strong>tabindex</strong> – <code>{boolean}</code> – Enables/disables tabindex tags</li> <li>\n<strong>bindKeypress</strong> – <code>{boolean}</code> – Enables/disables keypress event binding on <code>&amp;lt;div&amp;gt;</code> and <code>&amp;lt;li&amp;gt;</code> elements with ng-click</li> </ul> </td> </tr> </tbody> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngAria/provider/$ariaProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngAria/provider/$ariaProvider</a>\n  </p>\n</div>\n","api/ngaria/service":"<h1>Service components in ngAria</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"service/%24aria\">$aria</a></td> <td></td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngAria/service\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngAria/service</a>\n  </p>\n</div>\n","api/ngaria/service/$aria":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngAria/aria.js?message=docs(%24aria)%3A%20describe%20your%20change...#L127\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngAria/aria.js#L127\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$aria</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24ariaprovider\">$ariaProvider</a> </li> <li> service in module <a href=\"../../ngaria\">ngAria</a> </li> </ol>   <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngAria/service/$aria\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngAria/service/$aria</a>\n  </p>\n</div>\n","api/ngcookies":"<h1>\n<a href=\"https://github.com/angular/angular.js/edit//src/ngCookies/cookies.js?message=docs(ngCookies)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> ngCookies </h1> <h2 id=\"ngcookies\">ngCookies</h2> <p>The <code>ngCookies</code> module provides a convenient wrapper for reading and writing browser cookies.</p>  <p>See <a href=\"ngcookies/service/%24cookies\"><code>$cookies</code></a> and <a href=\"ngcookies/service/%24cookiestore\"><code>$cookieStore</code></a> for usage.</p> <h2>Installation</h2> <p>First include <code>angular-cookies.js</code> in your HTML:</p> <pre data-language=\"html\">&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-cookies.js\"&gt;</pre> <p>You can download this file from the following places:</p> <ul> <li> <a href=\"https://developers.google.com/speed/libraries/devguide#angularjs\">Google CDN</a><br> e.g. <code>//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-cookies.js</code> </li> <li> <a href=\"http://bower.io\">Bower</a><br> e.g. <pre>bower install angular-cookies@X.Y.Z</pre> </li> <li> <a href=\"http://code.angularjs.org/\">code.angularjs.org</a><br> e.g. <pre>\"//code.angularjs.org/X.Y.Z/angular-cookies.js\"</pre> </li> </ul> <p>where X.Y.Z is the AngularJS version you are running.</p> <p>Then load the module in your application by adding it as a dependent module:</p> <pre>angular.module('app', ['ngCookies']);</pre> <p>With that you're ready to get started!</p> <div class=\"component-breakdown\"> <h2>Module Components</h2> <div> <h3 class=\"component-heading\" id=\"service\">Service</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngcookies/service/%24cookies\">$cookies</a></td> <td>\n<p>Provides read/write access to browser's cookies.</p> </td> </tr> <tr> <td><a href=\"ngcookies/service/%24cookiestore\">$cookieStore</a></td> <td>\n<p>Provides a key-value (string-object) storage, that is backed by session cookies. Objects put or retrieved from this storage are automatically serialized or deserialized by angular's toJson/fromJson.</p> </td> </tr> </table> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngCookies\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngCookies</a>\n  </p>\n</div>\n","api/ngcookies/service":"<h1>Service components in ngCookies</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"service/%24cookies\">$cookies</a></td> <td>\n<p>Provides read/write access to browser's cookies.</p> </td> </tr> <tr> <td><a href=\"service/%24cookiestore\">$cookieStore</a></td> <td>\n<p>Provides a key-value (string-object) storage, that is backed by session cookies. Objects put or retrieved from this storage are automatically serialized or deserialized by angular's toJson/fromJson.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngCookies/service\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngCookies/service</a>\n  </p>\n</div>\n","api/ngcookies/service/$cookiestore":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngCookies/cookies.js?message=docs(%24cookieStore)%3A%20describe%20your%20change...#L127\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngCookies/cookies.js#L127\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$cookieStore</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../ngcookies\">ngCookies</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Provides a key-value (string-object) storage, that is backed by session cookies. Objects put or retrieved from this storage are automatically serialized or deserialized by angular's toJson/fromJson.</p> <p>Requires the <a href=\"../../ngcookies\"><code>ngCookies</code></a> module to be installed.</p> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"%24cookies\"><code>$cookies</code></a></li> </ul> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"get\"> <h3>get(key);</h3> <div>\n<p>Returns the value of given cookie key</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> key </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Id to use for lookup.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>Deserialized cookie value.</p> </td> </tr> </table> </li> <li id=\"put\"> <h3>put(key, value);</h3> <div>\n<p>Sets a value for given cookie key</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> key </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Id for the <code>value</code>.</p> </td> </tr> <tr> <td> value </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Value to be stored.</p> </td> </tr> </tbody> </table> </li> <li id=\"remove\"> <h3>remove(key);</h3> <div>\n<p>Remove given cookie</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> key </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Id of the key-value pair to delete.</p> </td> </tr> </tbody> </table> </li> </ul> <pre data-language=\"javascript\">angular.module('cookieStoreExample', ['ngCookies'])\n.controller('ExampleController', ['$cookieStore', function($cookieStore) {\n  // Put cookie\n  $cookieStore.put('myFavorite','oatmeal');\n  // Get cookie\n  var favoriteCookie = $cookieStore.get('myFavorite');\n  // Removing a cookie\n  $cookieStore.remove('myFavorite');\n}]);\n</pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngCookies/service/$cookieStore\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngCookies/service/$cookieStore</a>\n  </p>\n</div>\n","api/ngcookies/service/$cookies":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngCookies/cookies.js?message=docs(%24cookies)%3A%20describe%20your%20change...#L21\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngCookies/cookies.js#L21\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$cookies</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../ngcookies\">ngCookies</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Provides read/write access to browser's cookies.</p> <p>Only a simple Object is exposed and by adding or removing properties to/from this object, new cookies are created/deleted at the end of current $eval. The object's properties can only be strings.</p> <p>Requires the <a href=\"../../ngcookies\"><code>ngCookies</code></a> module to be installed.</p> </div> <div> <pre data-language=\"javascript\">angular.module('cookiesExample', ['ngCookies'])\n.controller('ExampleController', ['$cookies', function($cookies) {\n  // Retrieving a cookie\n  var favoriteCookie = $cookies.myFavorite;\n  // Setting a cookie\n  $cookies.myFavorite = 'oatmeal';\n}]);\n</pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngCookies/service/$cookies\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngCookies/service/$cookies</a>\n  </p>\n</div>\n","api/ngmessages":"<h1>\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMessages/messages.js?message=docs(ngMessages)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> ngMessages </h1> <p>The <code>ngMessages</code> module provides enhanced support for displaying messages within templates (typically within forms or when rendering message objects that return key/value data). Instead of relying on JavaScript code and/or complex ng-if statements within your form template to show and hide error messages specific to the state of an input field, the <code>ngMessages</code> and <code>ngMessage</code> directives are designed to handle the complexity, inheritance and priority sequencing based on the order of how the messages are defined in the template.</p> <p>Currently, the ngMessages module only contains the code for the <code>ngMessages</code> and <code>ngMessage</code> directives.</p> <h2 id=\"usage\">Usage</h2> <p>The <code>ngMessages</code> directive listens on a key/value collection which is set on the ngMessages attribute. Since the <a href=\"ng/directive/ngmodel\">ngModel</a> directive exposes an <code>$error</code> object, this error object can be used with <code>ngMessages</code> to display control error messages in an easier way than with just regular angular template directives.</p> <pre data-language=\"html\">&lt;form name=\"myForm\"&gt;\n  &lt;input type=\"text\" ng-model=\"field\" name=\"myField\" required minlength=\"5\" /&gt;\n  &lt;div ng-messages=\"myForm.myField.$error\"&gt;\n    &lt;div ng-message=\"required\"&gt;You did not enter a field&lt;/div&gt;\n    &lt;div ng-message=\"minlength\"&gt;The value entered is too short&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n</pre> <p>Now whatever key/value entries are present within the provided object (in this case <code>$error</code>) then the ngMessages directive will render the inner first ngMessage directive (depending if the key values match the attribute value present on each ngMessage directive). In other words, if your errors object contains the following data:</p> <pre data-language=\"html\">&lt;!-- keep in mind that ngModel automatically sets these error flags --&gt;\nmyField.$error = { minlength : true, required : false };\n</pre> <p>Then the <code>required</code> message will be displayed first. When required is false then the <code>minlength</code> message will be displayed right after (since these messages are ordered this way in the template HTML code). The prioritization of each message is determined by what order they're present in the DOM. Therefore, instead of having custom JavaScript code determine the priority of what errors are present before others, the presentation of the errors are handled within the template.</p> <p>By default, ngMessages will only display one error at a time. However, if you wish to display all messages then the <code>ng-messages-multiple</code> attribute flag can be used on the element containing the ngMessages directive to make this happen.</p> <pre data-language=\"html\">&lt;div ng-messages=\"myForm.myField.$error\" ng-messages-multiple&gt;...&lt;/div&gt;\n</pre> <h2 id=\"reusing-and-overriding-messages\">Reusing and Overriding Messages</h2> <p>In addition to prioritization, ngMessages also allows for including messages from a remote or an inline template. This allows for generic collection of messages to be reused across multiple parts of an application.</p> <pre data-language=\"html\">&lt;script type=\"text/ng-template\" id=\"error-messages\"&gt;\n  &lt;div ng-message=\"required\"&gt;This field is required&lt;/div&gt;\n  &lt;div ng-message=\"minlength\"&gt;This field is too short&lt;/div&gt;\n&lt;/script&gt;\n&lt;div ng-messages=\"myForm.myField.$error\" ng-messages-include=\"error-messages\"&gt;&lt;/div&gt;\n</pre> <p>However, including generic messages may not be useful enough to match all input fields, therefore, <code>ngMessages</code> provides the ability to override messages defined in the remote template by redefining then within the directive container.</p> <pre data-language=\"html\">&lt;!-- a generic template of error messages known as \"my-custom-messages\" --&gt;\n&lt;script type=\"text/ng-template\" id=\"my-custom-messages\"&gt;\n  &lt;div ng-message=\"required\"&gt;This field is required&lt;/div&gt;\n  &lt;div ng-message=\"minlength\"&gt;This field is too short&lt;/div&gt;\n&lt;/script&gt;\n\n&lt;form name=\"myForm\"&gt;\n  &lt;input type=\"email\"\n         id=\"email\"\n         name=\"myEmail\"\n         ng-model=\"email\"\n         minlength=\"5\"\n         required /&gt;\n\n  &lt;div ng-messages=\"myForm.myEmail.$error\" ng-messages-include=\"my-custom-messages\"&gt;\n    &lt;!-- this required message has overridden the template message --&gt;\n    &lt;div ng-message=\"required\"&gt;You did not enter your email address&lt;/div&gt;\n\n    &lt;!-- this is a brand new message and will appear last in the prioritization --&gt;\n    &lt;div ng-message=\"email\"&gt;Your email address is invalid&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n</pre> <p>In the example HTML code above the message that is set on required will override the corresponding required message defined within the remote template. Therefore, with particular input fields (such email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied while more generic messages can be used to handle other, more general input errors.</p> <h2 id=\"animations\">Animations</h2> <p>If the <code>ngAnimate</code> module is active within the application then both the <code>ngMessages</code> and <code>ngMessage</code> directives will trigger animations whenever any messages are added and removed from the DOM by the <code>ngMessages</code> directive.</p> <p>Whenever the <code>ngMessages</code> directive contains one or more visible messages then the <code>.ng-active</code> CSS class will be added to the element. The <code>.ng-inactive</code> CSS class will be applied when there are no animations present. Therefore, CSS transitions and keyframes as well as JavaScript animations can hook into the animations whenever these classes are added/removed.</p> <p>Let's say that our HTML code for our messages container looks like so:</p> <pre data-language=\"html\">&lt;div ng-messages=\"myMessages\" class=\"my-messages\"&gt;\n  &lt;div ng-message=\"alert\" class=\"some-message\"&gt;...&lt;/div&gt;\n  &lt;div ng-message=\"fail\" class=\"some-message\"&gt;...&lt;/div&gt;\n&lt;/div&gt;\n</pre> <p>Then the CSS animation code for the message container looks like so:</p> <pre data-language=\"css\">.my-messages {\n  transition:1s linear all;\n}\n.my-messages.ng-active {\n  // messages are visible\n}\n.my-messages.ng-inactive {\n  // messages are hidden\n}\n</pre> <p>Whenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter and leave animation is triggered for each particular element bound to the <code>ngMessage</code> directive.</p> <p>Therefore, the CSS code for the inner messages looks like so:</p> <pre data-language=\"css\">.some-message {\n  transition:1s linear all;\n}\n\n.some-message.ng-enter {}\n.some-message.ng-enter.ng-enter-active {}\n\n.some-message.ng-leave {}\n.some-message.ng-leave.ng-leave-active {}\n</pre> <p><a href=\"nganimate\">Click here</a> to learn how to use JavaScript animations or to learn more about ngAnimate.</p> <h2>Installation</h2> <p>First include <code>angular-messages.js</code> in your HTML:</p> <pre data-language=\"html\">&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-messages.js\"&gt;</pre> <p>You can download this file from the following places:</p> <ul> <li> <a href=\"https://developers.google.com/speed/libraries/devguide#angularjs\">Google CDN</a><br> e.g. <code>//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-messages.js</code> </li> <li> <a href=\"http://bower.io\">Bower</a><br> e.g. <pre>bower install angular-messages@X.Y.Z</pre> </li> <li> <a href=\"http://code.angularjs.org/\">code.angularjs.org</a><br> e.g. <pre>\"//code.angularjs.org/X.Y.Z/angular-messages.js\"</pre> </li> </ul> <p>where X.Y.Z is the AngularJS version you are running.</p> <p>Then load the module in your application by adding it as a dependent module:</p> <pre>angular.module('app', ['ngMessages']);</pre> <p>With that you're ready to get started!</p> <div class=\"component-breakdown\"> <h2>Module Components</h2> <div> <h3 class=\"component-heading\" id=\"directive\">Directive</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngmessages/directive/ngmessages\">ngMessages</a></td> <td>\n<p><code>ngMessages</code> is a directive that is designed to show and hide messages based on the state of a key/value object that it listens on. The directive itself compliments error message reporting with the <code>ngModel</code> $error object (which stores a key/value state of validation errors).</p> </td> </tr> <tr> <td><a href=\"ngmessages/directive/ngmessage\">ngMessage</a></td> <td>\n<p><code>ngMessage</code> is a directive with the purpose to show and hide a particular message. For <code>ngMessage</code> to operate, a parent <code>ngMessages</code> directive on a parent DOM element must be situated since it determines which messages are visible based on the state of the provided key/value map that <code>ngMessages</code> listens on.</p> </td> </tr> </table> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMessages\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMessages</a>\n  </p>\n</div>\n","api/ngmessages/directive":"<h1>Directive components in ngMessages</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"directive/ngmessages\">ngMessages</a></td> <td>\n<p><code>ngMessages</code> is a directive that is designed to show and hide messages based on the state of a key/value object that it listens on. The directive itself compliments error message reporting with the <code>ngModel</code> $error object (which stores a key/value state of validation errors).</p> </td> </tr> <tr> <td><a href=\"directive/ngmessage\">ngMessage</a></td> <td>\n<p><code>ngMessage</code> is a directive with the purpose to show and hide a particular message. For <code>ngMessage</code> to operate, a parent <code>ngMessages</code> directive on a parent DOM element must be situated since it determines which messages are visible based on the state of the provided key/value map that <code>ngMessages</code> listens on.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMessages/directive\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMessages/directive</a>\n  </p>\n</div>\n","api/ngmessages/directive/ngmessage":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMessages/messages.js?message=docs(ngMessage)%3A%20describe%20your%20change...#L317\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMessages/messages.js#L317\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngMessage</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"../../ngmessages\">ngMessages</a> </li> </ol>  <div class=\"api-profile-description\"> <p><code>ngMessage</code> is a directive with the purpose to show and hide a particular message. For <code>ngMessage</code> to operate, a parent <code>ngMessages</code> directive on a parent DOM element must be situated since it determines which messages are visible based on the state of the provided key/value map that <code>ngMessages</code> listens on.</p> <p>More information about using <code>ngMessage</code> can be found in the <a href=\"../../ngmessages\"><code>ngMessages</code> module documentation</a>.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive creates new scope.</li> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <pre data-language=\"html\">&lt;!-- using attribute directives --&gt;\n&lt;ANY ng-messages=\"expression\"&gt;\n  &lt;ANY ng-message=\"keyValue1\"&gt;...&lt;/ANY&gt;\n  &lt;ANY ng-message=\"keyValue2\"&gt;...&lt;/ANY&gt;\n  &lt;ANY ng-message=\"keyValue3\"&gt;...&lt;/ANY&gt;\n&lt;/ANY&gt;\n\n&lt;!-- or by using element directives --&gt;\n&lt;ng-messages for=\"expression\"&gt;\n  &lt;ng-message when=\"keyValue1\"&gt;...&lt;/ng-message&gt;\n  &lt;ng-message when=\"keyValue2\"&gt;...&lt;/ng-message&gt;\n  &lt;ng-message when=\"keyValue3\"&gt;...&lt;/ng-message&gt;\n&lt;/ng-messages&gt;\n</pre> </div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngMessage </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>a string value corresponding to the message key.</p> </td> </tr> </tbody> </table> </section> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMessages/directive/ngMessage\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMessages/directive/ngMessage</a>\n  </p>\n</div>\n","api/ngmessages/directive/ngmessages":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMessages/messages.js?message=docs(ngMessages)%3A%20describe%20your%20change...#L159\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMessages/messages.js#L159\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngMessages</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"../../ngmessages\">ngMessages</a> </li> </ol>  <div class=\"api-profile-description\"> <p><code>ngMessages</code> is a directive that is designed to show and hide messages based on the state of a key/value object that it listens on. The directive itself compliments error message reporting with the <code>ngModel</code> $error object (which stores a key/value state of validation errors).</p> <p><code>ngMessages</code> manages the state of internal messages within its container element. The internal messages use the <code>ngMessage</code> directive and will be inserted/removed from the page depending on if they're present within the key/value object. By default, only one message will be displayed at a time and this depends on the prioritization of the messages within the template. (This can be changed by using the ng-messages-multiple on the directive container.)</p> <p>A remote template can also be used to promote message reusability and messages can also be overridden.</p> <p><a href=\"../../ngmessages\">Click here</a> to learn more about <code>ngMessages</code> and <code>ngMessage</code>.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <pre data-language=\"html\">&lt;!-- using attribute directives --&gt;\n&lt;ANY ng-messages=\"expression\"&gt;\n  &lt;ANY ng-message=\"keyValue1\"&gt;...&lt;/ANY&gt;\n  &lt;ANY ng-message=\"keyValue2\"&gt;...&lt;/ANY&gt;\n  &lt;ANY ng-message=\"keyValue3\"&gt;...&lt;/ANY&gt;\n&lt;/ANY&gt;\n\n&lt;!-- or by using element directives --&gt;\n&lt;ng-messages for=\"expression\"&gt;\n  &lt;ng-message when=\"keyValue1\"&gt;...&lt;/ng-message&gt;\n  &lt;ng-message when=\"keyValue2\"&gt;...&lt;/ng-message&gt;\n  &lt;ng-message when=\"keyValue3\"&gt;...&lt;/ng-message&gt;\n&lt;/ng-messages&gt;\n</pre> </div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngMessages </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>an angular expression evaluating to a key/value object (this is typically the $error object on an ngModel instance).</p> </td> </tr> <tr> <td> ngMessagesMultiple | multiple <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>when set, all messages will be displayed with true</p> </td> </tr> <tr> <td> ngMessagesInclude | include <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>when set, the specified template will be included into the ng-messages container</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMessages/directive/ngMessages\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMessages/directive/ngMessages</a>\n  </p>\n</div>\n","api/ngmock":"<h1>\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(ngMock)%3A%20describe%20your%20change...#L1914\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> ngMock </h1> <h2 id=\"ngmock\">ngMock</h2> <p>The <code>ngMock</code> module provides support to inject and mock Angular services into unit tests. In addition, ngMock also extends various core ng services such that they can be inspected and controlled in a synchronous manner within test code.</p>  <h2>Installation</h2> <p>First include <code>angular-mocks.js</code> in your HTML:</p> <pre data-language=\"html\">&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-mocks.js\"&gt;</pre> <p>You can download this file from the following places:</p> <ul> <li> <a href=\"https://developers.google.com/speed/libraries/devguide#angularjs\">Google CDN</a><br> e.g. <code>//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-mocks.js</code> </li> <li> <a href=\"http://bower.io\">Bower</a><br> e.g. <pre>bower install angular-mocks@X.Y.Z</pre> </li> <li> <a href=\"http://code.angularjs.org/\">code.angularjs.org</a><br> e.g. <pre>\"//code.angularjs.org/X.Y.Z/angular-mocks.js\"</pre> </li> </ul> <p>where X.Y.Z is the AngularJS version you are running.</p> <p>Then load the module in your application by adding it as a dependent module:</p> <pre>angular.module('app', ['ngMock']);</pre> <p>With that you're ready to get started!</p> <div class=\"component-breakdown\"> <h2>Module Components</h2> <div> <h3 class=\"component-heading\" id=\"object\">Object</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngmock/object/angular.mock\">angular.mock</a></td> <td>\n<p>Namespace from 'angular-mocks.js' which contains testing related code.</p> </td> </tr> </table> </div> <div> <h3 class=\"component-heading\" id=\"provider\">Provider</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngmock/provider/%24exceptionhandlerprovider\">$exceptionHandlerProvider</a></td> <td>\n<p>Configures the mock implementation of <a href=\"ng/service/%24exceptionhandler\"><code>$exceptionHandler</code></a> to rethrow or to log errors passed to the <code>$exceptionHandler</code>.</p> </td> </tr> </table> </div> <div> <h3 class=\"component-heading\" id=\"service\">Service</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngmock/service/%24exceptionhandler\">$exceptionHandler</a></td> <td>\n<p>Mock implementation of <a href=\"ng/service/%24exceptionhandler\"><code>$exceptionHandler</code></a> that rethrows or logs errors passed to it. See <a href=\"ngmock/provider/%24exceptionhandlerprovider\">$exceptionHandlerProvider</a> for configuration information.</p> </td> </tr> <tr> <td><a href=\"ngmock/service/%24log\">$log</a></td> <td>\n<p>Mock implementation of <a href=\"ng/service/%24log\"><code>$log</code></a> that gathers all logged messages in arrays (one array per logging level). These arrays are exposed as <code>logs</code> property of each of the level-specific log function, e.g. for level <code>error</code> the array is exposed as <code>$log.error.logs</code>.</p> </td> </tr> <tr> <td><a href=\"ngmock/service/%24interval\">$interval</a></td> <td>\n<p>Mock implementation of the $interval service.</p> </td> </tr> <tr> <td><a href=\"ngmock/service/%24httpbackend\">$httpBackend</a></td> <td>\n<p>Fake HTTP backend implementation suitable for unit testing applications that use the <a href=\"ng/service/%24http\">$http service</a>.</p> </td> </tr> <tr> <td><a href=\"ngmock/service/%24timeout\">$timeout</a></td> <td>\n<p>This service is just a simple decorator for <a href=\"ng/service/%24timeout\">$timeout</a> service that adds a \"flush\" and \"verifyNoPendingTasks\" methods.</p> </td> </tr> <tr> <td><a href=\"ngmock/service/%24controller\">$controller</a></td> <td>\n<p>A decorator for <a href=\"ng/service/%24controller\"><code>$controller</code></a> with additional <code>bindings</code> parameter, useful when testing controllers of directives that use <a href=\"ng/service/%24compile#-bindtocontroller-.html\"><code>bindToController</code></a>.</p> </td> </tr> </table> </div> <div> <h3 class=\"component-heading\" id=\"type\">Type</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngmock/type/angular.mock.tzdate\">angular.mock.TzDate</a></td> <td>\n<p><em>NOTE</em>: this is not an injectable instance, just a globally available mock class of <code>Date</code>.</p> </td> </tr> <tr> <td><a href=\"ngmock/type/%24rootscope.scope\">$rootScope.Scope</a></td> <td>\n<p><a href=\"ng/type/%24rootscope.scope\">Scope</a> type decorated with helper methods useful for testing. These methods are automatically available on any <a href=\"ng/type/%24rootscope.scope\">Scope</a> instance when <code>ngMock</code> module is loaded.</p> </td> </tr> </table> </div> <div> <h3 class=\"component-heading\" id=\"function\">Function</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngmock/function/angular.mock.dump\">angular.mock.dump</a></td> <td>\n<p><em>NOTE</em>: this is not an injectable instance, just a globally available function.</p> </td> </tr> <tr> <td><a href=\"ngmock/function/angular.mock.module\">angular.mock.module</a></td> <td>\n<p><em>NOTE</em>: This function is also published on window for easy access.<br> <em>NOTE</em>: This function is declared ONLY WHEN running tests with jasmine or mocha</p> </td> </tr> <tr> <td><a href=\"ngmock/function/angular.mock.inject\">angular.mock.inject</a></td> <td>\n<p><em>NOTE</em>: This function is also published on window for easy access.<br> <em>NOTE</em>: This function is declared ONLY WHEN running tests with jasmine or mocha</p> </td> </tr> </table> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock</a>\n  </p>\n</div>\n","api/ngmock/object":"<h1>Object components in ngMock</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"object/angular.mock\">angular.mock</a></td> <td>\n<p>Namespace from 'angular-mocks.js' which contains testing related code.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/object\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/object</a>\n  </p>\n</div>\n","api/ngmock/object/angular.mock":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(angular.mock)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L3\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.mock</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> object in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Namespace from 'angular-mocks.js' which contains testing related code.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/object/angular.mock\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/object/angular.mock</a>\n  </p>\n</div>\n","api/ngmock/provider":"<h1>Provider components in ngMock</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"provider/%24exceptionhandlerprovider\">$exceptionHandlerProvider</a></td> <td>\n<p>Configures the mock implementation of <a href=\"../ng/service/%24exceptionhandler\"><code>$exceptionHandler</code></a> to rethrow or to log errors passed to the <code>$exceptionHandler</code>.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/provider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/provider</a>\n  </p>\n</div>\n","api/ngmock/provider/$exceptionhandlerprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(%24exceptionHandlerProvider)%3A%20describe%20your%20change...#L191\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L191\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$exceptionHandlerProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24exceptionhandler\">$exceptionHandler</a> </li> <li> provider in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Configures the mock implementation of <a href=\"../../ng/service/%24exceptionhandler\"><code>$exceptionHandler</code></a> to rethrow or to log errors passed to the <code>$exceptionHandler</code>.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"mode\"> <h3>mode(mode);</h3> <div>\n<p>Sets the logging mode.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> mode </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Mode of operation, defaults to <code>rethrow</code>.</p> <ul> <li>\n<code>log</code>: Sometimes it is desirable to test that an error is thrown, for this case the <code>log</code><pre>mode stores an array of errors in `$exceptionHandler.errors`, to allow later\nassertion of them. See <a href=\"../service/%24log#assertEmpty.html\">assertEmpty()</a> and\n<a href=\"../service/%24log#reset.html\">reset()</a>\n</pre> </li> <li>\n<code>rethrow</code>: If any errors are passed to the handler in tests, it typically means that there<pre>is a bug in the application or test, so this mock will make these tests fail.\nFor any implementations that expect exceptions to be thrown, the `rethrow` mode\nwill also maintain a log of thrown errors.\n</pre> </li> </ul> </td> </tr> </tbody> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/provider/$exceptionHandlerProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/provider/$exceptionHandlerProvider</a>\n  </p>\n</div>\n","api/nganimate/service/$animate":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngAnimate/animate.js?message=docs(%24animate)%3A%20describe%20your%20change...#L793\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngAnimate/animate.js#L793\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$animate</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24animateprovider\">$animateProvider</a> </li> <li> service in module <a href=\"../../nganimate\">ngAnimate</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>$animate</code> service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations. When any of these operations are run, the $animate service will examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object) as well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.</p> <p>The <code>$animate</code> service is used behind the scenes with pre-existing directives and animation with these directives will work out of the box without any extra configuration.</p> <p>Requires the <a href=\"../../nganimate\"><code>ngAnimate</code></a> module to be installed.</p> <p>Please visit the <a href=\"../../nganimate\"><code>ngAnimate</code></a> module overview page learn more about how to use animations in your application.</p> <h2 id=\"callback-promises\">Callback Promises</h2> <p>With AngularJS 1.3, each of the animation methods, on the <code>$animate</code> service, return a promise when called. The promise itself is then resolved once the animation has completed itself, has been cancelled or has been skipped due to animations being disabled. (Note that even if the animation is cancelled it will still call the resolve function of the animation.)</p> <pre data-language=\"javascript\">$animate.enter(element, container).then(function() {\n  //...this is called once the animation is complete...\n});\n</pre> <p>Also note that, due to the nature of the callback promise, if any Angular-specific code (like changing the scope, location of the page, etc...) is executed within the callback promise then be sure to wrap the code using <code>$scope.$apply(...)</code>;</p> <pre data-language=\"javascript\">$animate.leave(element).then(function() {\n  $scope.$apply(function() {\n    $location.path('/new-page');\n  });\n});\n</pre> <p>An animation can also be cancelled by calling the <code>$animate.cancel(promise)</code> method with the provided promise that was returned when the animation was started.</p> <pre data-language=\"javascript\">var promise = $animate.addClass(element, 'super-long-animation');\npromise.then(function() {\n  //this will still be called even if cancelled\n});\n\nelement.on('click', function() {\n  //tooo lazy to wait for the animation to end\n  $animate.cancel(promise);\n});\n</pre> <p>(Keep in mind that the promise cancellation is unique to <code>$animate</code> since promises in general cannot be cancelled.)</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"animate\"> <h3>animate(element, from, to, [className], [options]);</h3> <div>\n<p>Performs an inline animation on the element which applies the provided <code>to</code> and <code>from</code> CSS styles to the element. If any detected CSS transition, keyframe or JavaScript matches the provided <code>className</code> value then the animation will take on the provided styles. For example, if a transition animation is set for the given className then the provided <code>from</code> and <code>to</code> styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles will be given in as function paramters.</p> <pre data-language=\"javascript\">ngModule.animation('.my-inline-animation', function() {\n  return {\n    animate : function(element, className, from, to, done) {\n      //styles\n    }\n  }\n});\n</pre> <p>Below is a breakdown of each step that occurs during the <code>animate</code> animation:</p> <table> <thead> <tr> <th>Animation Step</th> <th>What the element class attribute looks like</th> </tr> </thead> <tbody> <tr> <td>1. <code>$animate.animate(...)</code> is called</td> <td><code>class=\"my-animation\"</code></td> </tr> <tr> <td>2. <code>$animate</code> waits for the next digest to start the animation</td> <td><code>class=\"my-animation ng-animate\"</code></td> </tr> <tr> <td>3. <code>$animate</code> runs the JavaScript-defined animations detected on the element</td> <td><code>class=\"my-animation ng-animate\"</code></td> </tr> <tr> <td>4. the <code>className</code> class value is added to the element</td> <td><code>class=\"my-animation ng-animate className\"</code></td> </tr> <tr> <td>5. <code>$animate</code> scans the element styles to get the CSS transition/animation duration and delay</td> <td><code>class=\"my-animation ng-animate className\"</code></td> </tr> <tr> <td>6. <code>$animate</code> blocks all CSS transitions on the element to ensure the <code>.className</code> class styling is applied right away</td> <td><code>class=\"my-animation ng-animate className\"</code></td> </tr> <tr> <td>7. <code>$animate</code> applies the provided collection of <code>from</code> CSS styles to the element</td> <td><code>class=\"my-animation ng-animate className\"</code></td> </tr> <tr> <td>8. <code>$animate</code> waits for a single animation frame (this performs a reflow)</td> <td><code>class=\"my-animation ng-animate className\"</code></td> </tr> <tr> <td>9. <code>$animate</code> removes the CSS transition block placed on the element</td> <td><code>class=\"my-animation ng-animate className\"</code></td> </tr> <tr> <td>10. the <code>className-active</code> class is added (this triggers the CSS transition/animation)</td> <td><code>class=\"my-animation ng-animate className className-active\"</code></td> </tr> <tr> <td>11. <code>$animate</code> applies the collection of <code>to</code> CSS styles to the element which are then handled by the transition</td> <td><code>class=\"my-animation ng-animate className className-active\"</code></td> </tr> <tr> <td>12. <code>$animate</code> waits for the animation to complete (via events and timeout)</td> <td><code>class=\"my-animation ng-animate className className-active\"</code></td> </tr> <tr> <td>13. The animation ends and all generated CSS classes are removed from the element</td> <td><code>class=\"my-animation\"</code></td> </tr> <tr> <td>14. The returned promise is resolved.</td> <td><code>class=\"my-animation\"</code></td> </tr> </tbody> </table> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element that will be the focus of the enter animation</p> </td> </tr> <tr> <td> from </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>a collection of CSS styles that will be applied to the element at the start of the animation</p> </td> </tr> <tr> <td> to </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>a collection of CSS styles that the element will animate towards</p> </td> </tr> <tr> <td> className <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>an optional CSS class that will be added to the element for the duration of the animation (the default class is <code>ng-inline-animate</code>)</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of options that will be picked up by the CSS transition/animation</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> <li id=\"enter\"> <h3>enter(element, parentElement, afterElement, [options]);</h3> <div>\n<p>Appends the element to the parentElement element that resides in the document and then runs the enter animation. Once the animation is started, the following CSS classes will be present on the element for the duration of the animation:</p> <p>Below is a breakdown of each step that occurs during enter animation:</p> <table> <thead> <tr> <th>Animation Step</th> <th>What the element class attribute looks like</th> </tr> </thead> <tbody> <tr> <td>1. <code>$animate.enter(...)</code> is called</td> <td><code>class=\"my-animation\"</code></td> </tr> <tr> <td>2. element is inserted into the <code>parentElement</code> element or beside the <code>afterElement</code> element</td> <td><code>class=\"my-animation\"</code></td> </tr> <tr> <td>3. <code>$animate</code> waits for the next digest to start the animation</td> <td><code>class=\"my-animation ng-animate\"</code></td> </tr> <tr> <td>4. <code>$animate</code> runs the JavaScript-defined animations detected on the element</td> <td><code>class=\"my-animation ng-animate\"</code></td> </tr> <tr> <td>5. the <code>.ng-enter</code> class is added to the element</td> <td><code>class=\"my-animation ng-animate ng-enter\"</code></td> </tr> <tr> <td>6. <code>$animate</code> scans the element styles to get the CSS transition/animation duration and delay</td> <td><code>class=\"my-animation ng-animate ng-enter\"</code></td> </tr> <tr> <td>7. <code>$animate</code> blocks all CSS transitions on the element to ensure the <code>.ng-enter</code> class styling is applied right away</td> <td><code>class=\"my-animation ng-animate ng-enter\"</code></td> </tr> <tr> <td>8. <code>$animate</code> waits for a single animation frame (this performs a reflow)</td> <td><code>class=\"my-animation ng-animate ng-enter\"</code></td> </tr> <tr> <td>9. <code>$animate</code> removes the CSS transition block placed on the element</td> <td><code>class=\"my-animation ng-animate ng-enter\"</code></td> </tr> <tr> <td>10. the <code>.ng-enter-active</code> class is added (this triggers the CSS transition/animation)</td> <td><code>class=\"my-animation ng-animate ng-enter ng-enter-active\"</code></td> </tr> <tr> <td>11. <code>$animate</code> waits for the animation to complete (via events and timeout)</td> <td><code>class=\"my-animation ng-animate ng-enter ng-enter-active\"</code></td> </tr> <tr> <td>12. The animation ends and all generated CSS classes are removed from the element</td> <td><code>class=\"my-animation\"</code></td> </tr> <tr> <td>13. The returned promise is resolved.</td> <td><code>class=\"my-animation\"</code></td> </tr> </tbody> </table> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element that will be the focus of the enter animation</p> </td> </tr> <tr> <td> parentElement </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the parent element of the element that will be the focus of the enter animation</p> </td> </tr> <tr> <td> afterElement </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the sibling element (which is the previous element) of the element that will be the focus of the enter animation</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of options that will be picked up by the CSS transition/animation</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> <li id=\"leave\"> <h3>leave(element, [options]);</h3> <div>\n<p>Runs the leave animation operation and, upon completion, removes the element from the DOM. Once the animation is started, the following CSS classes will be added for the duration of the animation:</p> <p>Below is a breakdown of each step that occurs during leave animation:</p> <table> <thead> <tr> <th>Animation Step</th> <th>What the element class attribute looks like</th> </tr> </thead> <tbody> <tr> <td>1. <code>$animate.leave(...)</code> is called</td> <td><code>class=\"my-animation\"</code></td> </tr> <tr> <td>2. <code>$animate</code> runs the JavaScript-defined animations detected on the element</td> <td><code>class=\"my-animation ng-animate\"</code></td> </tr> <tr> <td>3. <code>$animate</code> waits for the next digest to start the animation</td> <td><code>class=\"my-animation ng-animate\"</code></td> </tr> <tr> <td>4. the <code>.ng-leave</code> class is added to the element</td> <td><code>class=\"my-animation ng-animate ng-leave\"</code></td> </tr> <tr> <td>5. <code>$animate</code> scans the element styles to get the CSS transition/animation duration and delay</td> <td><code>class=\"my-animation ng-animate ng-leave\"</code></td> </tr> <tr> <td>6. <code>$animate</code> blocks all CSS transitions on the element to ensure the <code>.ng-leave</code> class styling is applied right away</td> <td><code>class=\"my-animation ng-animate ng-leave\"</code></td> </tr> <tr> <td>7. <code>$animate</code> waits for a single animation frame (this performs a reflow)</td> <td><code>class=\"my-animation ng-animate ng-leave\"</code></td> </tr> <tr> <td>8. <code>$animate</code> removes the CSS transition block placed on the element</td> <td><code>class=\"my-animation ng-animate ng-leave\"</code></td> </tr> <tr> <td>9. the <code>.ng-leave-active</code> class is added (this triggers the CSS transition/animation)</td> <td><code>class=\"my-animation ng-animate ng-leave ng-leave-active\"</code></td> </tr> <tr> <td>10. <code>$animate</code> waits for the animation to complete (via events and timeout)</td> <td><code>class=\"my-animation ng-animate ng-leave ng-leave-active\"</code></td> </tr> <tr> <td>11. The animation ends and all generated CSS classes are removed from the element</td> <td><code>class=\"my-animation\"</code></td> </tr> <tr> <td>12. The element is removed from the DOM</td> <td>...</td> </tr> <tr> <td>13. The returned promise is resolved.</td> <td>...</td> </tr> </tbody> </table> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element that will be the focus of the leave animation</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of styles that will be picked up by the CSS transition/animation</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> <li id=\"move\"> <h3>move(element, parentElement, afterElement, [options]);</h3> <div>\n<p>Fires the move DOM operation. Just before the animation starts, the animate service will either append it into the parentElement container or add the element directly after the afterElement element if present. Then the move animation will be run. Once the animation is started, the following CSS classes will be added for the duration of the animation:</p> <p>Below is a breakdown of each step that occurs during move animation:</p> <table> <thead> <tr> <th>Animation Step</th> <th>What the element class attribute looks like</th> </tr> </thead> <tbody> <tr> <td>1. <code>$animate.move(...)</code> is called</td> <td><code>class=\"my-animation\"</code></td> </tr> <tr> <td>2. element is moved into the parentElement element or beside the afterElement element</td> <td><code>class=\"my-animation\"</code></td> </tr> <tr> <td>3. <code>$animate</code> waits for the next digest to start the animation</td> <td><code>class=\"my-animation ng-animate\"</code></td> </tr> <tr> <td>4. <code>$animate</code> runs the JavaScript-defined animations detected on the element</td> <td><code>class=\"my-animation ng-animate\"</code></td> </tr> <tr> <td>5. the <code>.ng-move</code> class is added to the element</td> <td><code>class=\"my-animation ng-animate ng-move\"</code></td> </tr> <tr> <td>6. <code>$animate</code> scans the element styles to get the CSS transition/animation duration and delay</td> <td><code>class=\"my-animation ng-animate ng-move\"</code></td> </tr> <tr> <td>7. <code>$animate</code> blocks all CSS transitions on the element to ensure the <code>.ng-move</code> class styling is applied right away</td> <td><code>class=\"my-animation ng-animate ng-move\"</code></td> </tr> <tr> <td>8. <code>$animate</code> waits for a single animation frame (this performs a reflow)</td> <td><code>class=\"my-animation ng-animate ng-move\"</code></td> </tr> <tr> <td>9. <code>$animate</code> removes the CSS transition block placed on the element</td> <td><code>class=\"my-animation ng-animate ng-move\"</code></td> </tr> <tr> <td>10. the <code>.ng-move-active</code> class is added (this triggers the CSS transition/animation)</td> <td><code>class=\"my-animation ng-animate ng-move ng-move-active\"</code></td> </tr> <tr> <td>11. <code>$animate</code> waits for the animation to complete (via events and timeout)</td> <td><code>class=\"my-animation ng-animate ng-move ng-move-active\"</code></td> </tr> <tr> <td>12. The animation ends and all generated CSS classes are removed from the element</td> <td><code>class=\"my-animation\"</code></td> </tr> <tr> <td>13. The returned promise is resolved.</td> <td><code>class=\"my-animation\"</code></td> </tr> </tbody> </table> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element that will be the focus of the move animation</p> </td> </tr> <tr> <td> parentElement </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the parentElement element of the element that will be the focus of the move animation</p> </td> </tr> <tr> <td> afterElement </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the sibling element (which is the previous element) of the element that will be the focus of the move animation</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of styles that will be picked up by the CSS transition/animation</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> <li id=\"addClass\"> <h3>addClass(element, className, [options]);</h3> <div>\n<p>Triggers a custom animation event based off the className variable and then attaches the className value to the element as a CSS class. Unlike the other animation methods, the animate service will suffix the className value with <code class=\"label type-hint type-hint--add\">-add</code> in order to provide the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if no CSS transitions or keyframes are defined on the -add-active or base CSS class).</p> <p>Below is a breakdown of each step that occurs during addClass animation:</p> <table> <thead> <tr> <th>Animation Step</th> <th>What the element class attribute looks like</th> </tr> </thead> <tbody> <tr> <td>1. <code>$animate.addClass(element, 'super')</code> is called</td> <td><code>class=\"my-animation\"</code></td> </tr> <tr> <td>2. <code>$animate</code> runs the JavaScript-defined animations detected on the element</td> <td><code>class=\"my-animation ng-animate\"</code></td> </tr> <tr> <td>3. the <code>.super-add</code> class is added to the element</td> <td><code>class=\"my-animation ng-animate super-add\"</code></td> </tr> <tr> <td>4. <code>$animate</code> waits for a single animation frame (this performs a reflow)</td> <td><code>class=\"my-animation ng-animate super-add\"</code></td> </tr> <tr> <td>5. the <code>.super</code> and <code>.super-add-active</code> classes are added (this triggers the CSS transition/animation)</td> <td><code>class=\"my-animation ng-animate super super-add super-add-active\"</code></td> </tr> <tr> <td>6. <code>$animate</code> scans the element styles to get the CSS transition/animation duration and delay</td> <td><code>class=\"my-animation ng-animate super super-add super-add-active\"</code></td> </tr> <tr> <td>7. <code>$animate</code> waits for the animation to complete (via events and timeout)</td> <td><code>class=\"my-animation ng-animate super super-add super-add-active\"</code></td> </tr> <tr> <td>8. The animation ends and all generated CSS classes are removed from the element</td> <td><code>class=\"my-animation super\"</code></td> </tr> <tr> <td>9. The super class is kept on the element</td> <td><code>class=\"my-animation super\"</code></td> </tr> <tr> <td>10. The returned promise is resolved.</td> <td><code>class=\"my-animation super\"</code></td> </tr> </tbody> </table> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element that will be animated</p> </td> </tr> <tr> <td> className </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>the CSS class that will be added to the element and then animated</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of styles that will be picked up by the CSS transition/animation</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> <li id=\"removeClass\"> <h3>removeClass(element, className, [options]);</h3> <div>\n<p>Triggers a custom animation event based off the className variable and then removes the CSS class provided by the className value from the element. Unlike the other animation methods, the animate service will suffix the className value with <code class=\"label type-hint type-hint--remove\">-remove</code> in order to provide the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if no CSS transitions or keyframes are defined on the -remove or base CSS classes).</p> <p>Below is a breakdown of each step that occurs during removeClass animation:</p> <table> <thead> <tr> <th>Animation Step</th> <th>What the element class attribute looks like</th> </tr> </thead> <tbody> <tr> <td>1. <code>$animate.removeClass(element, 'super')</code> is called</td> <td><code>class=\"my-animation super\"</code></td> </tr> <tr> <td>2. <code>$animate</code> runs the JavaScript-defined animations detected on the element</td> <td><code>class=\"my-animation super ng-animate\"</code></td> </tr> <tr> <td>3. the <code>.super-remove</code> class is added to the element</td> <td><code>class=\"my-animation super ng-animate super-remove\"</code></td> </tr> <tr> <td>4. <code>$animate</code> waits for a single animation frame (this performs a reflow)</td> <td><code>class=\"my-animation super ng-animate super-remove\"</code></td> </tr> <tr> <td>5. the <code>.super-remove-active</code> classes are added and <code>.super</code> is removed (this triggers the CSS transition/animation)</td> <td><code>class=\"my-animation ng-animate super-remove super-remove-active\"</code></td> </tr> <tr> <td>6. <code>$animate</code> scans the element styles to get the CSS transition/animation duration and delay</td> <td><code>class=\"my-animation ng-animate super-remove super-remove-active\"</code></td> </tr> <tr> <td>7. <code>$animate</code> waits for the animation to complete (via events and timeout)</td> <td><code>class=\"my-animation ng-animate super-remove super-remove-active\"</code></td> </tr> <tr> <td>8. The animation ends and all generated CSS classes are removed from the element</td> <td><code>class=\"my-animation\"</code></td> </tr> <tr> <td>9. The returned promise is resolved.</td> <td><code>class=\"my-animation\"</code></td> </tr> </tbody> </table> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element that will be animated</p> </td> </tr> <tr> <td> className </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>the CSS class that will be animated and then removed from the element</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of styles that will be picked up by the CSS transition/animation</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> <li id=\"setClass\"> <h3>setClass(element, add, remove, [options]);</h3> <div>\n<p>Adds and/or removes the given CSS classes to and from the element. Once complete, the <code>done()</code> callback will be fired (if provided).</p> <table> <thead> <tr> <th>Animation Step</th> <th>What the element class attribute looks like</th> </tr> </thead> <tbody> <tr> <td>1. <code>$animate.setClass(element, 'on', 'off')</code> is called</td> <td><code>class=\"my-animation off\"</code></td> </tr> <tr> <td>2. <code>$animate</code> runs the JavaScript-defined animations detected on the element</td> <td><code>class=\"my-animation ng-animate off\"</code></td> </tr> <tr> <td>3. the <code>.on-add</code> and <code>.off-remove</code> classes are added to the element</td> <td><code>class=\"my-animation ng-animate on-add off-remove off\"</code></td> </tr> <tr> <td>4. <code>$animate</code> waits for a single animation frame (this performs a reflow)</td> <td><code>class=\"my-animation ng-animate on-add off-remove off\"</code></td> </tr> <tr> <td>5. the <code>.on</code>, <code>.on-add-active</code> and <code>.off-remove-active</code> classes are added and <code>.off</code> is removed (this triggers the CSS transition/animation)</td> <td><code>class=\"my-animation ng-animate on on-add on-add-active off-remove off-remove-active\"</code></td> </tr> <tr> <td>6. <code>$animate</code> scans the element styles to get the CSS transition/animation duration and delay</td> <td><code>class=\"my-animation ng-animate on on-add on-add-active off-remove off-remove-active\"</code></td> </tr> <tr> <td>7. <code>$animate</code> waits for the animation to complete (via events and timeout)</td> <td><code>class=\"my-animation ng-animate on on-add on-add-active off-remove off-remove-active\"</code></td> </tr> <tr> <td>8. The animation ends and all generated CSS classes are removed from the element</td> <td><code>class=\"my-animation on\"</code></td> </tr> <tr> <td>9. The returned promise is resolved.</td> <td><code>class=\"my-animation on\"</code></td> </tr> </tbody> </table> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> element </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>the element which will have its CSS classes changed removed from it</p> </td> </tr> <tr> <td> add </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>the CSS classes which will be added to the element</p> </td> </tr> <tr> <td> remove </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>the CSS class which will be removed from the element CSS classes have been set on the element</p> </td> </tr> <tr> <td> options <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">object</code> </td> <td> <p>an optional collection of styles that will be picked up by the CSS transition/animation</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">Promise</code></td> <td>\n<p>the animation callback promise</p> </td> </tr> </table> </li> <li id=\"cancel\"> <h3>cancel(animationPromise);</h3> <div>\n<p>Cancels the provided animation.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> animationPromise </td> <td> <code class=\"label type-hint type-hint-promise\">Promise</code> </td> <td> <p>The animation promise that is returned when an animation is started.</p> </td> </tr> </tbody> </table> </li> <li id=\"enabled\"> <h3>enabled([value], [element]);</h3> <div>\n<p>Globally enables/disables animations.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> value <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>If provided then set the animation on or off.</p> </td> </tr> <tr> <td> element <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-domelement\">DOMElement</code> </td> <td> <p>If provided then the element will be used to represent the enable/disable operation</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>Current animation state.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngAnimate/service/$animate\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngAnimate/service/$animate</a>\n  </p>\n</div>\n","api/ngmock/service":"<h1>Service components in ngMock</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"service/%24exceptionhandler\">$exceptionHandler</a></td> <td>\n<p>Mock implementation of <a href=\"../ng/service/%24exceptionhandler\"><code>$exceptionHandler</code></a> that rethrows or logs errors passed to it. See <a href=\"provider/%24exceptionhandlerprovider\">$exceptionHandlerProvider</a> for configuration information.</p> </td> </tr> <tr> <td><a href=\"service/%24log\">$log</a></td> <td>\n<p>Mock implementation of <a href=\"../ng/service/%24log\"><code>$log</code></a> that gathers all logged messages in arrays (one array per logging level). These arrays are exposed as <code>logs</code> property of each of the level-specific log function, e.g. for level <code>error</code> the array is exposed as <code>$log.error.logs</code>.</p> </td> </tr> <tr> <td><a href=\"service/%24interval\">$interval</a></td> <td>\n<p>Mock implementation of the $interval service.</p> </td> </tr> <tr> <td><a href=\"service/%24httpbackend\">$httpBackend</a></td> <td>\n<p>Fake HTTP backend implementation suitable for unit testing applications that use the <a href=\"../ng/service/%24http\">$http service</a>.</p> </td> </tr> <tr> <td><a href=\"service/%24timeout\">$timeout</a></td> <td>\n<p>This service is just a simple decorator for <a href=\"../ng/service/%24timeout\">$timeout</a> service that adds a \"flush\" and \"verifyNoPendingTasks\" methods.</p> </td> </tr> <tr> <td><a href=\"service/%24controller\">$controller</a></td> <td>\n<p>A decorator for <a href=\"../ng/service/%24controller\"><code>$controller</code></a> with additional <code>bindings</code> parameter, useful when testing controllers of directives that use <a href=\"../ng/service/%24compile#-bindtocontroller-.html\"><code>bindToController</code></a>.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/service\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/service</a>\n  </p>\n</div>\n","api/ngmock/service/$controller":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(%24controller)%3A%20describe%20your%20change...#L1843\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L1843\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$controller</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p>A decorator for <a href=\"../../ng/service/%24controller\"><code>$controller</code></a> with additional <code>bindings</code> parameter, useful when testing controllers of directives that use <a href=\"../../ng/service/%24compile#-bindtocontroller-.html\"><code>bindToController</code></a>.</p>  <pre data-language=\"javascript\">// Directive definition ...\n\nmyMod.directive('myDirective', {\n  controller: 'MyDirectiveController',\n  bindToController: {\n    name: '@'\n  }\n});\n\n\n// Controller definition ...\n\nmyMod.controller('MyDirectiveController', ['log', function($log) {\n  $log.info(this.name);\n})];\n\n\n// In a test ...\n\ndescribe('myDirectiveController', function() {\n  it('should write the bound name to the log', inject(function($controller, $log) {\n    var ctrl = $controller('MyDirective', { /* no locals */ }, { name: 'Clark Kent' });\n    expect(ctrl.name).toEqual('Clark Kent');\n    expect($log.info.logs).toEqual(['Clark Kent']);\n  });\n});\n</pre> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$controller(constructor, locals, [bindings]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> constructor </td> <td> <code class=\"label type-hint type-hint-function\">function()</code><code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>If called with a function then it's considered to be the controller constructor function. Otherwise it's considered to be a string which is used to retrieve the controller constructor using the following steps:</p> <ul> <li>check if a controller with given name is registered via <code>$controllerProvider</code>\n</li> <li>check if evaluating the string on the current scope returns a constructor</li> <li>\n<p>if $controllerProvider#allowGlobals, check <code>window[constructor]</code> on the global <code>window</code> object (not recommended)</p> <p>The string can use the <code>controller as property</code> syntax, where the controller instance is published as the specified property on the <code>scope</code>; the <code>scope</code> must be injected into <code>locals</code> param for this to work correctly.</p> </li> </ul> </td> </tr> <tr> <td> locals </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Injection locals for Controller.</p> </td> </tr> <tr> <td> bindings <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Properties to add to the controller before invoking the constructor. This is used to simulate the <code>bindToController</code> feature and simplify certain kinds of tests.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>Instance of given controller.</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/service/$controller\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/service/$controller</a>\n  </p>\n</div>\n","api/ngmock/service/$exceptionhandler":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(%24exceptionHandler)%3A%20describe%20your%20change...#L200\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L200\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$exceptionHandler</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24exceptionhandlerprovider\">$exceptionHandlerProvider</a> </li> <li> service in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Mock implementation of <a href=\"../../ng/service/%24exceptionhandler\"><code>$exceptionHandler</code></a> that rethrows or logs errors passed to it. See <a href=\"../provider/%24exceptionhandlerprovider\">$exceptionHandlerProvider</a> for configuration information.</p> <pre data-language=\"javascript\">describe('$exceptionHandlerProvider', function() {\n\n  it('should capture log messages and exceptions', function() {\n\n    module(function($exceptionHandlerProvider) {\n      $exceptionHandlerProvider.mode('log');\n    });\n\n    inject(function($log, $exceptionHandler, $timeout) {\n      $timeout(function() { $log.log(1); });\n      $timeout(function() { $log.log(2); throw 'banana peel'; });\n      $timeout(function() { $log.log(3); });\n      expect($exceptionHandler.errors).toEqual([]);\n      expect($log.assertEmpty());\n      $timeout.flush();\n      expect($exceptionHandler.errors).toEqual(['banana peel']);\n      expect($log.log.logs).toEqual([[1], [2], [3]]);\n    });\n  });\n});\n</pre> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/service/$exceptionHandler\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/service/$exceptionHandler</a>\n  </p>\n</div>\n","api/ngmock/service/$interval":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(%24interval)%3A%20describe%20your%20change...#L437\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L437\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$interval</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Mock implementation of the $interval service.</p> <p>Use <a href=\"%24interval#flush.html\"><code>$interval.flush(millis)</code></a> to move forward by <code>millis</code> milliseconds and trigger any functions scheduled to run in that time.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$interval(fn, delay, [count], [invokeApply]);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> fn </td> <td> <code class=\"label type-hint type-hint-function\">function()</code> </td> <td> <p>A function that should be called repeatedly.</p> </td> </tr> <tr> <td> delay </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Number of milliseconds between each function call.</p> </td> </tr> <tr> <td> count <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Number of times to repeat. If not set, or 0, will repeat indefinitely.</p> <p><em>(default: 0)</em></p> </td> </tr> <tr> <td> invokeApply <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-boolean\">boolean</code> </td> <td> <p>If set to <code>false</code> skips model dirty checking, otherwise will invoke <code>fn</code> within the <a href=\"../../ng/type/%24rootscope.scope#%24apply.html\">$apply</a> block.</p> <p><em>(default: true)</em></p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-promise\">promise</code></td> <td>\n<p>A promise which will be notified on each iteration.</p> </td> </tr> </table> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"cancel\"> <h3>cancel(promise);</h3> <div>\n<p>Cancels a task associated with the <code>promise</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> promise </td> <td> <code class=\"label type-hint type-hint-promise\">promise</code> </td> <td> <p>A promise from calling the <code>$interval</code> function.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-boolean\">boolean</code></td> <td>\n<p>Returns <code>true</code> if the task was successfully cancelled.</p> </td> </tr> </table> </li> <li id=\"flush\"> <h3>flush([millis]);</h3> <div>\n<p>Runs interval tasks scheduled to be run in the next <code>millis</code> milliseconds.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> millis <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>maximum timeout amount to flush up until.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-number\">number</code></td> <td>\n<p>The amount of time moved forward.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/service/$interval\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/service/$interval</a>\n  </p>\n</div>\n","api/ngmock/service/$log":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(%24log)%3A%20describe%20your%20change...#L286\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L286\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$log</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Mock implementation of <a href=\"../../ng/service/%24log\"><code>$log</code></a> that gathers all logged messages in arrays (one array per logging level). These arrays are exposed as <code>logs</code> property of each of the level-specific log function, e.g. for level <code>error</code> the array is exposed as <code>$log.error.logs</code>.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"reset\"> <h3>reset();</h3> <div>\n<p>Reset all of the logging arrays to empty.</p> </div> </li> <li id=\"assertEmpty\"> <h3>assertEmpty();</h3> <div>\n<p>Assert that all of the logging methods have no logged messages. If any messages are present, an exception is thrown.</p> </div> </li> </ul> <h2>Properties</h2> <ul class=\"properties defs\"> <li id=\"log.logs\"> <h3>log.logs</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Array of messages logged using <a href=\"../../ng/service/%24log#log.html\"><code>log()</code></a>.</p> </td> </tr> </table> </li> <li id=\"info.logs\"> <h3>info.logs</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Array of messages logged using <a href=\"../../ng/service/%24log#info.html\"><code>info()</code></a>.</p> </td> </tr> </table> </li> <li id=\"warn.logs\"> <h3>warn.logs</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Array of messages logged using <a href=\"../../ng/service/%24log#warn.html\"><code>warn()</code></a>.</p> </td> </tr> </table> </li> <li id=\"error.logs\"> <h3>error.logs</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Array of messages logged using <a href=\"../../ng/service/%24log#error.html\"><code>error()</code></a>.</p> </td> </tr> </table> </li> <li id=\"debug.logs\"> <h3>debug.logs</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>Array of messages logged using <a href=\"../../ng/service/%24log#debug.html\"><code>debug()</code></a>.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/service/$log\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/service/$log</a>\n  </p>\n</div>\n","api/ngmock/service/$timeout":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(%24timeout)%3A%20describe%20your%20change...#L1741\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L1741\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$timeout</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p>This service is just a simple decorator for <a href=\"../../ng/service/%24timeout\">$timeout</a> service that adds a \"flush\" and \"verifyNoPendingTasks\" methods.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"flush\"> <h3>flush([delay]);</h3> <div>\n<p>Flushes the queue of pending tasks.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> delay <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>maximum timeout amount to flush up until</p> </td> </tr> </tbody> </table> </li> <li id=\"verifyNoPendingTasks\"> <h3>verifyNoPendingTasks();</h3> <div>\n<p>Verifies that there are no pending tasks that need to be flushed.</p> </div> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/service/$timeout\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/service/$timeout</a>\n  </p>\n</div>\n","api/ngmock/type":"<h1>Type components in ngMock</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"type/angular.mock.tzdate\">angular.mock.TzDate</a></td> <td>\n<p><em>NOTE</em>: this is not an injectable instance, just a globally available mock class of <code>Date</code>.</p> </td> </tr> <tr> <td><a href=\"type/%24rootscope.scope\">$rootScope.Scope</a></td> <td>\n<p><a href=\"../ng/type/%24rootscope.scope\">Scope</a> type decorated with helper methods useful for testing. These methods are automatically available on any <a href=\"../ng/type/%24rootscope.scope\">Scope</a> instance when <code>ngMock</code> module is loaded.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/type\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/type</a>\n  </p>\n</div>\n","api/ngmock/type/$rootscope.scope":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(%24rootScope.Scope)%3A%20describe%20your%20change...#L2151\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L2151\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$rootScope.Scope</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> type in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p><a href=\"../../ng/type/%24rootscope.scope\">Scope</a> type decorated with helper methods useful for testing. These methods are automatically available on any <a href=\"../../ng/type/%24rootscope.scope\">Scope</a> instance when <code>ngMock</code> module is loaded.</p> <p>In addition to all the regular <code>Scope</code> methods, the following helper methods are available:</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"$countChildScopes\"> <h3>$countChildScopes();</h3> <div>\n<p>Counts all the direct and indirect child scopes of the current scope.</p> <p>The current scope is excluded from the count. The count includes all isolate child scopes.</p> </div> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-number\">number</code></td> <td>\n<p>Total number of child scopes.</p> </td> </tr> </table> </li> <li id=\"$countWatchers\"> <h3>$countWatchers();</h3> <div>\n<p>Counts all the watchers of direct and indirect child scopes of the current scope.</p> <p>The watchers of the current scope are included in the count and so are all the watchers of isolate child scopes.</p> </div> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-number\">number</code></td> <td>\n<p>Total number of watchers.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/type/$rootScope.Scope\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/type/$rootScope.Scope</a>\n  </p>\n</div>\n","api/ngmock/type/angular.mock.tzdate":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(angular.mock.TzDate)%3A%20describe%20your%20change...#L608\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L608\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.mock.TzDate</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> type in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p><em>NOTE</em>: this is not an injectable instance, just a globally available mock class of <code>Date</code>.</p> <p>Mock of the Date type which has its timezone specified via constructor arg.</p> <p>The main purpose is to create Date-like instances with timezone fixed to the specified timezone offset, so that we can test code that depends on local timezone settings without dependency on the time zone settings of the machine where the code is running.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.mock.TzDate(offset, timestamp);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> offset </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Offset of the <em>desired</em> timezone in hours (fractions will be honored)</p> </td> </tr> <tr> <td> timestamp </td> <td> <code class=\"label type-hint type-hint-number\">number</code><code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Timestamp representing the desired time in <em>UTC</em></p> </td> </tr> </tbody> </table> </section> <p>!!!! WARNING !!!!! This is not a complete Date object so only methods that were implemented can be called safely. To make matters worse, TzDate instances inherit stuff from Date via a prototype.</p> <p>We do our best to intercept calls to \"unimplemented\" methods, but since the list of methods is incomplete we might be missing some non-standard methods. This can result in errors like: \"Date.prototype.foo called on incompatible Object\".</p> <pre data-language=\"javascript\">var newYearInBratislava = new TzDate(-1, '2009-12-31T23:00:00Z');\nnewYearInBratislava.getTimezoneOffset() =&gt; -60;\nnewYearInBratislava.getFullYear() =&gt; 2010;\nnewYearInBratislava.getMonth() =&gt; 0;\nnewYearInBratislava.getDate() =&gt; 1;\nnewYearInBratislava.getHours() =&gt; 0;\nnewYearInBratislava.getMinutes() =&gt; 0;\nnewYearInBratislava.getSeconds() =&gt; 0;\n</pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/type/angular.mock.TzDate\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/type/angular.mock.TzDate</a>\n  </p>\n</div>\n","api/ngmock/function":"<h1>Function components in ngMock</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"function/angular.mock.dump\">angular.mock.dump</a></td> <td>\n<p><em>NOTE</em>: this is not an injectable instance, just a globally available function.</p> </td> </tr> <tr> <td><a href=\"function/angular.mock.module\">angular.mock.module</a></td> <td>\n<p><em>NOTE</em>: This function is also published on window for easy access.<br> <em>NOTE</em>: This function is declared ONLY WHEN running tests with jasmine or mocha</p> </td> </tr> <tr> <td><a href=\"function/angular.mock.inject\">angular.mock.inject</a></td> <td>\n<p><em>NOTE</em>: This function is also published on window for easy access.<br> <em>NOTE</em>: This function is declared ONLY WHEN running tests with jasmine or mocha</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/function\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/function</a>\n  </p>\n</div>\n","api/ngmock/function/angular.mock.dump":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(angular.mock.dump)%3A%20describe%20your%20change...#L865\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L865\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.mock.dump</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p><em>NOTE</em>: this is not an injectable instance, just a globally available function.</p> <p>Method for serializing common angular objects (scope, elements, etc..) into strings, useful for debugging.</p> <p>This method is also available on window, where it can be used to display objects on debug console.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.mock.dump(object);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> object </td> <td> <code class=\"label type-hint type-hint-object\">*</code> </td> <td> <p>any object to turn into string.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>a serialized string of the argument</p> </td> </tr> </table> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/function/angular.mock.dump\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/function/angular.mock.dump</a>\n  </p>\n</div>\n","api/ngmock/function/angular.mock.inject":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(angular.mock.inject)%3A%20describe%20your%20change...#L2338\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L2338\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.mock.inject</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p><em>NOTE</em>: This function is also published on window for easy access.<br> <em>NOTE</em>: This function is declared ONLY WHEN running tests with jasmine or mocha</p> <p>The inject function wraps a function into an injectable function. The inject() creates new instance of <a href=\"../../auto/service/%24injector\">$injector</a> per test, which is then used for resolving references.</p> <h2 id=\"resolving-references-underscore-wrapping-\">Resolving References (Underscore Wrapping)</h2> <p>Often, we would like to inject a reference once, in a <code>beforeEach()</code> block and reuse this in multiple <code>it()</code> clauses. To be able to do this we must assign the reference to a variable that is declared in the scope of the <code>describe()</code> block. Since we would, most likely, want the variable to have the same name of the reference we have a problem, since the parameter to the <code>inject()</code> function would hide the outer variable.</p> <p>To help with this, the injected parameters can, optionally, be enclosed with underscores. These are ignored by the injector when the reference name is resolved.</p> <p>For example, the parameter <code>_myService_</code> would be resolved as the reference <code>myService</code>. Since it is available in the function body as <em>myService</em>, we can then assign it to a variable defined in an outer scope.</p> <pre>// Defined out reference variable outside\nvar myService;\n\n// Wrap the parameter in underscores\nbeforeEach( inject( function(_myService_){\n  myService = _myService_;\n}));\n\n// Use myService in a series of tests.\nit('makes use of myService', function() {\n  myService.doStuff();\n});\n</pre> <p>See also <a href=\"angular.mock.module\">angular.mock.module</a></p>  <p>Example of what a typical jasmine tests looks like with the inject method.</p> <pre data-language=\"javascript\">angular.module('myApplicationModule', [])\n    .value('mode', 'app')\n    .value('version', 'v1.0.1');\n\n\ndescribe('MyApp', function() {\n\n  // You need to load modules that you want to test,\n  // it loads only the \"ng\" module by default.\n  beforeEach(module('myApplicationModule'));\n\n\n  // inject() is used to inject arguments of all given functions\n  it('should provide a version', inject(function(mode, version) {\n    expect(version).toEqual('v1.0.1');\n    expect(mode).toEqual('app');\n  }));\n\n\n  // The inject and module method can also be used inside of the it or beforeEach\n  it('should override a version and test the new version is injected', function() {\n    // module() takes functions or strings (module aliases)\n    module(function($provide) {\n      $provide.value('version', 'overridden'); // override version here\n    });\n\n    inject(function(version) {\n      expect(version).toEqual('overridden');\n    });\n  });\n});\n</pre> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.mock.inject(fns);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> fns </td> <td> <code class=\"label type-hint type-hint-object\">...Function</code> </td> <td> <p>any number of functions which will be injected using the injector.</p> </td> </tr> </tbody> </table> </section> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/function/angular.mock.inject\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/function/angular.mock.inject</a>\n  </p>\n</div>\n","api/ngmock/function/angular.mock.module":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(angular.mock.module)%3A%20describe%20your%20change...#L2295\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L2295\" class=\"view-source pull-right btn btn-primary\"> View Source </a>angular.mock.module</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> function in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p><em>NOTE</em>: This function is also published on window for easy access.<br> <em>NOTE</em>: This function is declared ONLY WHEN running tests with jasmine or mocha</p> <p>This function registers a module configuration code. It collects the configuration information which will be used when the injector is created by <a href=\"angular.mock.inject\">inject</a>.</p> <p>See <a href=\"angular.mock.inject\">inject</a> for usage example</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>angular.mock.module(fns);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> fns </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-function\">function()</code><code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>any number of modules which are represented as string aliases or as anonymous module initialization functions. The modules are used to configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an object literal is passed they will be registered as values in the module, the key being the module name and the value being what is returned.</p> </td> </tr> </tbody> </table> </section> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/function/angular.mock.module\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/function/angular.mock.module</a>\n  </p>\n</div>\n","api/ngmocke2e":"<h1>\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(ngMockE2E)%3A%20describe%20your%20change...#L1945\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> ngMockE2E </h1> <p>The <code>ngMockE2E</code> is an angular module which contains mocks suitable for end-to-end testing. Currently there is only one mock present in this module - the <a href=\"ngmocke2e/service/%24httpbackend\">e2e $httpBackend</a> mock.</p> <h2>Installation</h2> <p>First include <code>angular-mocks.js</code> in your HTML:</p> <pre data-language=\"html\">&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-mocks.js\"&gt;</pre> <p>You can download this file from the following places:</p> <ul> <li> <a href=\"https://developers.google.com/speed/libraries/devguide#angularjs\">Google CDN</a><br> e.g. <code>//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-mocks.js</code> </li> <li> <a href=\"http://bower.io\">Bower</a><br> e.g. <pre>bower install angular-mocks@X.Y.Z</pre> </li> <li> <a href=\"http://code.angularjs.org/\">code.angularjs.org</a><br> e.g. <pre>\"//code.angularjs.org/X.Y.Z/angular-mocks.js\"</pre> </li> </ul> <p>where X.Y.Z is the AngularJS version you are running.</p> <p>Then load the module in your application by adding it as a dependent module:</p> <pre>angular.module('app', ['ngMockE2E']);</pre> <p>With that you're ready to get started!</p> <div class=\"component-breakdown\"> <h2>Module Components</h2> <div> <h3 class=\"component-heading\" id=\"service\">Service</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngmocke2e/service/%24httpbackend\">$httpBackend</a></td> <td>\n<p>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the <a href=\"ng/service/%24http\">$http service</a>.</p> </td> </tr> </table> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMockE2E\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMockE2E</a>\n  </p>\n</div>\n","api/ngmocke2e/service":"<h1>Service components in ngMockE2E</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"service/%24httpbackend\">$httpBackend</a></td> <td>\n<p>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the <a href=\"../ng/service/%24http\">$http service</a>.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMockE2E/service\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMockE2E/service</a>\n  </p>\n</div>\n","api/ngresource":"<h1>\n<a href=\"https://github.com/angular/angular.js/edit//src/ngResource/resource.js?message=docs(ngResource)%3A%20describe%20your%20change...#L46\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> ngResource </h1> <h2 id=\"ngresource\">ngResource</h2> <p>The <code>ngResource</code> module provides interaction support with RESTful services via the $resource service.</p>  <p>See <a href=\"ngresource/service/%24resource\"><code>$resource</code></a> for usage.</p> <h2>Installation</h2> <p>First include <code>angular-resource.js</code> in your HTML:</p> <pre data-language=\"html\">&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-resource.js\"&gt;</pre> <p>You can download this file from the following places:</p> <ul> <li> <a href=\"https://developers.google.com/speed/libraries/devguide#angularjs\">Google CDN</a><br> e.g. <code>//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-resource.js</code> </li> <li> <a href=\"http://bower.io\">Bower</a><br> e.g. <pre>bower install angular-resource@X.Y.Z</pre> </li> <li> <a href=\"http://code.angularjs.org/\">code.angularjs.org</a><br> e.g. <pre>\"//code.angularjs.org/X.Y.Z/angular-resource.js\"</pre> </li> </ul> <p>where X.Y.Z is the AngularJS version you are running.</p> <p>Then load the module in your application by adding it as a dependent module:</p> <pre>angular.module('app', ['ngResource']);</pre> <p>With that you're ready to get started!</p> <div class=\"component-breakdown\"> <h2>Module Components</h2> <div> <h3 class=\"component-heading\" id=\"service\">Service</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngresource/service/%24resource\">$resource</a></td> <td>\n<p>A factory which creates a resource object that lets you interact with <a href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\">RESTful</a> server-side data sources.</p> </td> </tr> </table> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngResource\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngResource</a>\n  </p>\n</div>\n","api/ngresource/service":"<h1>Service components in ngResource</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"service/%24resource\">$resource</a></td> <td>\n<p>A factory which creates a resource object that lets you interact with <a href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\">RESTful</a> server-side data sources.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngResource/service\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngResource/service</a>\n  </p>\n</div>\n","api/ngmock/service/$httpbackend":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(%24httpBackend)%3A%20describe%20your%20change...#L935\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L935\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$httpBackend</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../ngmock\">ngMock</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Fake HTTP backend implementation suitable for unit testing applications that use the <a href=\"../../ng/service/%24http\">$http service</a>.</p> <p><em>Note</em>: For fake HTTP backend implementation suitable for end-to-end testing or backend-less development please see <a href=\"../../ngmocke2e/service/%24httpbackend\">e2e $httpBackend mock</a>.</p> <p>During unit testing, we want our unit tests to run quickly and have no external dependencies so we don’t want to send <a href=\"https://developer.mozilla.org/en/xmlhttprequest\">XHR</a> or <a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a> requests to a real server. All we really need is to verify whether a certain request has been sent or not, or alternatively just let the application make requests, respond with pre-trained responses and assert that the end result is what we expect it to be.</p> <p>This mock implementation can be used to respond with static or dynamic responses via the <code>expect</code> and <code>when</code> apis and their shortcuts (<code>expectGET</code>, <code>whenPOST</code>, etc).</p> <p>When an Angular application needs some data from a server, it calls the $http service, which sends the request to a real server using $httpBackend service. With dependency injection, it is easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify the requests and respond with some testing data without sending a request to a real server.</p> <p>There are two ways to specify what test data should be returned as http responses by the mock backend when the code under test makes http requests:</p> <ul> <li>\n<code>$httpBackend.expect</code> - specifies a request expectation</li> <li>\n<code>$httpBackend.when</code> - specifies a backend definition</li> </ul> <h2 id=\"request-expectations-vs-backend-definitions\">Request Expectations vs Backend Definitions</h2> <p>Request expectations provide a way to make assertions about requests made by the application and to define responses for those requests. The test will fail if the expected requests are not made or they are made in the wrong order.</p> <p>Backend definitions allow you to define a fake backend for your application which doesn't assert if a particular request was made or not, it just returns a trained response if a request is made. The test will pass whether or not the request gets made during testing.</p> <table class=\"table\"> <tr>\n<th width=\"220px\"></th>\n<th>Request expectations</th>\n<th>Backend definitions</th>\n</tr> <tr> <th>Syntax</th> <td>.expect(...).respond(...)</td> <td>.when(...).respond(...)</td> </tr> <tr> <th>Typical usage</th> <td>strict unit tests</td> <td>loose (black-box) unit testing</td> </tr> <tr> <th>Fulfills multiple requests</th> <td>NO</td> <td>YES</td> </tr> <tr> <th>Order of requests matters</th> <td>YES</td> <td>NO</td> </tr> <tr> <th>Request required</th> <td>YES</td> <td>NO</td> </tr> <tr> <th>Response required</th> <td>optional (see below)</td> <td>YES</td> </tr> </table> <p>In cases where both backend definitions and request expectations are specified during unit testing, the request expectations are evaluated first.</p> <p>If a request expectation has no response specified, the algorithm will search your backend definitions for an appropriate response.</p> <p>If a request didn't match any expectation or if the expectation doesn't have the response defined, the backend definitions are evaluated in sequential order to see if any of them match the request. The response from the first matched definition is returned.</p> <h2 id=\"flushing-http-requests\">Flushing HTTP requests</h2> <p>The $httpBackend used in production always responds to requests asynchronously. If we preserved this behavior in unit testing, we'd have to create async unit tests, which are hard to write, to follow and to maintain. But neither can the testing mock respond synchronously; that would change the execution of the code under test. For this reason, the mock $httpBackend has a <code>flush()</code> method, which allows the test to explicitly flush pending requests. This preserves the async api of the backend, while allowing the test to execute synchronously.</p> <h2 id=\"unit-testing-with-mock-httpbackend\">Unit testing with mock $httpBackend</h2> <p>The following code shows how to setup and use the mock backend when unit testing a controller. First we create the controller under test:</p> <pre data-language=\"javascript\">// The module code\nangular\n  .module('MyApp', [])\n  .controller('MyController', MyController);\n\n// The controller code\nfunction MyController($scope, $http) {\n  var authToken;\n\n  $http.get('/auth.py').success(function(data, status, headers) {\n    authToken = headers('A-Token');\n    $scope.user = data;\n  });\n\n  $scope.saveMessage = function(message) {\n    var headers = { 'Authorization': authToken };\n    $scope.status = 'Saving...';\n\n    $http.post('/add-msg.py', message, { headers: headers } ).success(function(response) {\n      $scope.status = '';\n    }).error(function() {\n      $scope.status = 'ERROR!';\n    });\n  };\n}\n</pre> <p>Now we setup the mock backend and create the test specs:</p> <pre data-language=\"javascript\">// testing controller\ndescribe('MyController', function() {\n   var $httpBackend, $rootScope, createController, authRequestHandler;\n\n   // Set up the module\n   beforeEach(module('MyApp'));\n\n   beforeEach(inject(function($injector) {\n     // Set up the mock http service responses\n     $httpBackend = $injector.get('$httpBackend');\n     // backend definition common for all tests\n     authRequestHandler = $httpBackend.when('GET', '/auth.py')\n                            .respond({userId: 'userX'}, {'A-Token': 'xxx'});\n\n     // Get hold of a scope (i.e. the root scope)\n     $rootScope = $injector.get('$rootScope');\n     // The $controller service is used to create instances of controllers\n     var $controller = $injector.get('$controller');\n\n     createController = function() {\n       return $controller('MyController', {'$scope' : $rootScope });\n     };\n   }));\n\n\n   afterEach(function() {\n     $httpBackend.verifyNoOutstandingExpectation();\n     $httpBackend.verifyNoOutstandingRequest();\n   });\n\n\n   it('should fetch authentication token', function() {\n     $httpBackend.expectGET('/auth.py');\n     var controller = createController();\n     $httpBackend.flush();\n   });\n\n\n   it('should fail authentication', function() {\n\n     // Notice how you can change the response even after it was set\n     authRequestHandler.respond(401, '');\n\n     $httpBackend.expectGET('/auth.py');\n     var controller = createController();\n     $httpBackend.flush();\n     expect($rootScope.status).toBe('Failed...');\n   });\n\n\n   it('should send msg to server', function() {\n     var controller = createController();\n     $httpBackend.flush();\n\n     // now you don’t care about the authentication, but\n     // the controller will still send the request and\n     // $httpBackend will respond without you having to\n     // specify the expectation and response for this request\n\n     $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');\n     $rootScope.saveMessage('message content');\n     expect($rootScope.status).toBe('Saving...');\n     $httpBackend.flush();\n     expect($rootScope.status).toBe('');\n   });\n\n\n   it('should send auth header', function() {\n     var controller = createController();\n     $httpBackend.flush();\n\n     $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {\n       // check if the header was send, if it wasn't the expectation won't\n       // match the request and the test will fail\n       return headers['Authorization'] == 'xxx';\n     }).respond(201, '');\n\n     $rootScope.saveMessage('whatever');\n     $httpBackend.flush();\n   });\n});\n</pre> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"when\"> <h3>when(method, url, [data], [headers]);</h3> <div>\n<p>Creates a new backend definition.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> method </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>HTTP method.</p> </td> </tr> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> data <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP request body or function that receives data string and returns true if the data is as expected.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers or function that receives http header object and returns true if the headers match the current definition.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> <ul> <li>respond – <code>{function([status,] data[, headers, statusText])\n  | function(function(method, url, data, headers)}</code> – The respond method takes a set of static data to be returned or a function that can return an array containing response status (number), response data (string), response headers (Object), and the text for the status (string). The respond method returns the <code>requestHandler</code> object for possible overrides.</li> </ul> </td> </tr> </table> </li> <li id=\"whenGET\"> <h3>whenGET(url, [headers]);</h3> <div>\n<p>Creates a new backend definition for GET requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"whenHEAD\"> <h3>whenHEAD(url, [headers]);</h3> <div>\n<p>Creates a new backend definition for HEAD requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"whenDELETE\"> <h3>whenDELETE(url, [headers]);</h3> <div>\n<p>Creates a new backend definition for DELETE requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"whenPOST\"> <h3>whenPOST(url, [data], [headers]);</h3> <div>\n<p>Creates a new backend definition for POST requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> data <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP request body or function that receives data string and returns true if the data is as expected.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"whenPUT\"> <h3>whenPUT(url, [data], [headers]);</h3> <div>\n<p>Creates a new backend definition for PUT requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> data <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP request body or function that receives data string and returns true if the data is as expected.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"whenJSONP\"> <h3>whenJSONP(url);</h3> <div>\n<p>Creates a new backend definition for JSONP requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"expect\"> <h3>expect(method, url, [data], [headers]);</h3> <div>\n<p>Creates a new request expectation.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> method </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>HTTP method.</p> </td> </tr> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> data <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code><code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>HTTP request body or function that receives data string and returns true if the data is as expected, or Object if request body is in JSON format.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers or function that receives http header object and returns true if the headers match the current expectation.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> <ul> <li>respond – <code>{function([status,] data[, headers, statusText])\n| function(function(method, url, data, headers)}</code> – The respond method takes a set of static data to be returned or a function that can return an array containing response status (number), response data (string), response headers (Object), and the text for the status (string). The respond method returns the <code>requestHandler</code> object for possible overrides.</li> </ul> </td> </tr> </table> </li> <li id=\"expectGET\"> <h3>expectGET(url, [headers]);</h3> <div>\n<p>Creates a new request expectation for GET requests. For more info see <code>expect()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled. See #expect for more info.</p> </td> </tr> </table> </li> <li id=\"expectHEAD\"> <h3>expectHEAD(url, [headers]);</h3> <div>\n<p>Creates a new request expectation for HEAD requests. For more info see <code>expect()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"expectDELETE\"> <h3>expectDELETE(url, [headers]);</h3> <div>\n<p>Creates a new request expectation for DELETE requests. For more info see <code>expect()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"expectPOST\"> <h3>expectPOST(url, [data], [headers]);</h3> <div>\n<p>Creates a new request expectation for POST requests. For more info see <code>expect()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> data <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code><code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>HTTP request body or function that receives data string and returns true if the data is as expected, or Object if request body is in JSON format.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"expectPUT\"> <h3>expectPUT(url, [data], [headers]);</h3> <div>\n<p>Creates a new request expectation for PUT requests. For more info see <code>expect()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> data <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code><code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>HTTP request body or function that receives data string and returns true if the data is as expected, or Object if request body is in JSON format.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"expectPATCH\"> <h3>expectPATCH(url, [data], [headers]);</h3> <div>\n<p>Creates a new request expectation for PATCH requests. For more info see <code>expect()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> data <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code><code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>HTTP request body or function that receives data string and returns true if the data is as expected, or Object if request body is in JSON format.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"expectJSONP\"> <h3>expectJSONP(url);</h3> <div>\n<p>Creates a new request expectation for JSONP requests. For more info see <code>expect()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> method that controls how a matched request is handled. You can save this object for later use and invoke <code>respond</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"flush\"> <h3>flush([count]);</h3> <div>\n<p>Flushes all pending requests using the trained responses.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> count <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-number\">number</code> </td> <td> <p>Number of responses to flush (in the order they arrived). If undefined, all pending requests will be flushed. If there are no pending requests when the flush method is called an exception is thrown (as this typically a sign of programming error).</p> </td> </tr> </tbody> </table> </li> <li id=\"verifyNoOutstandingExpectation\"> <h3>verifyNoOutstandingExpectation();</h3> <div>\n<p>Verifies that all of the requests defined via the <code>expect</code> api were made. If any of the requests were not made, verifyNoOutstandingExpectation throws an exception.</p> <p>Typically, you would call this method following each test case that asserts requests using an \"afterEach\" clause.</p> <pre data-language=\"javascript\">afterEach($httpBackend.verifyNoOutstandingExpectation);\n</pre> </div> </li> <li id=\"verifyNoOutstandingRequest\"> <h3>verifyNoOutstandingRequest();</h3> <div>\n<p>Verifies that there are no outstanding requests that need to be flushed.</p> <p>Typically, you would call this method following each test case that asserts requests using an \"afterEach\" clause.</p> <pre data-language=\"javascript\">afterEach($httpBackend.verifyNoOutstandingRequest);\n</pre> </div> </li> <li id=\"resetExpectations\"> <h3>resetExpectations();</h3> <div>\n<p>Resets all request expectations, but preserves all backend definitions. Typically, you would call resetExpectations during a multiple-phase test when you want to reuse the same instance of $httpBackend mock.</p> </div> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMock/service/$httpBackend\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMock/service/$httpBackend</a>\n  </p>\n</div>\n","api/ngmocke2e/service/$httpbackend":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngMock/angular-mocks.js?message=docs(%24httpBackend)%3A%20describe%20your%20change...#L1960\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngMock/angular-mocks.js#L1960\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$httpBackend</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../ngmocke2e\">ngMockE2E</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the <a href=\"../../ng/service/%24http\">$http service</a>.</p> <p><em>Note</em>: For fake http backend implementation suitable for unit testing please see <a href=\"../../ngmock/service/%24httpbackend\">unit-testing $httpBackend mock</a>.</p> <p>This implementation can be used to respond with static or dynamic responses via the <code>when</code> api and its shortcuts (<code>whenGET</code>, <code>whenPOST</code>, etc) and optionally pass through requests to the real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch templates from a webserver).</p> <p>As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application is being developed with the real backend api replaced with a mock, it is often desirable for certain category of requests to bypass the mock and issue a real http request (e.g. to fetch templates or static files from the webserver). To configure the backend with this behavior use the <code>passThrough</code> request handler of <code>when</code> instead of <code>respond</code>.</p> <p>Additionally, we don't want to manually have to flush mocked out requests like we do during unit testing. For this reason the e2e $httpBackend flushes mocked out requests automatically, closely simulating the behavior of the XMLHttpRequest object.</p> <p>To setup the application to run with this http backend, you have to create a module that depends on the <code>ngMockE2E</code> and your application modules and defines the fake backend:</p> <pre data-language=\"javascript\">myAppDev = angular.module('myAppDev', ['myApp', 'ngMockE2E']);\nmyAppDev.run(function($httpBackend) {\n  phones = [{name: 'phone1'}, {name: 'phone2'}];\n\n  // returns the current list of phones\n  $httpBackend.whenGET('/phones').respond(phones);\n\n  // adds a new phone to the phones array\n  $httpBackend.whenPOST('/phones').respond(function(method, url, data) {\n    var phone = angular.fromJson(data);\n    phones.push(phone);\n    return [200, phone, {}];\n  });\n  $httpBackend.whenGET(/^\\/templates\\//).passThrough();\n  //...\n});\n</pre> <p>Afterwards, bootstrap your app with this new module.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"when\"> <h3>when(method, url, [data], [headers]);</h3> <div>\n<p>Creates a new backend definition.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> method </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>HTTP method.</p> </td> </tr> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> data <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code> </td> <td> <p>HTTP request body.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers or function that receives http header object and returns true if the headers match the current definition.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> and <code>passThrough</code> methods that control how a matched request is handled. You can save this object for later use and invoke <code>respond</code> or <code>passThrough</code> again in order to change how a matched request is handled.</p> <ul> <li>respond – <code>{function([status,] data[, headers, statusText])\n| function(function(method, url, data, headers)}</code> – The respond method takes a set of static data to be returned or a function that can return an array containing response status (number), response data (string), response headers (Object), and the text for the status (string).</li> <li>passThrough – <code>{function()}</code> – Any request matching a backend definition with <code>passThrough</code> handler will be passed through to the real backend (an XHR request will be made to the server.)</li> <li>Both methods return the <code>requestHandler</code> object for possible overrides.</li> </ul> </td> </tr> </table> </li> <li id=\"whenGET\"> <h3>whenGET(url, [headers]);</h3> <div>\n<p>Creates a new backend definition for GET requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> and <code>passThrough</code> methods that control how a matched request is handled. You can save this object for later use and invoke <code>respond</code> or <code>passThrough</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"whenHEAD\"> <h3>whenHEAD(url, [headers]);</h3> <div>\n<p>Creates a new backend definition for HEAD requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> and <code>passThrough</code> methods that control how a matched request is handled. You can save this object for later use and invoke <code>respond</code> or <code>passThrough</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"whenDELETE\"> <h3>whenDELETE(url, [headers]);</h3> <div>\n<p>Creates a new backend definition for DELETE requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> and <code>passThrough</code> methods that control how a matched request is handled. You can save this object for later use and invoke <code>respond</code> or <code>passThrough</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"whenPOST\"> <h3>whenPOST(url, [data], [headers]);</h3> <div>\n<p>Creates a new backend definition for POST requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> data <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code> </td> <td> <p>HTTP request body.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> and <code>passThrough</code> methods that control how a matched request is handled. You can save this object for later use and invoke <code>respond</code> or <code>passThrough</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"whenPUT\"> <h3>whenPUT(url, [data], [headers]);</h3> <div>\n<p>Creates a new backend definition for PUT requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> data <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code> </td> <td> <p>HTTP request body.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> and <code>passThrough</code> methods that control how a matched request is handled. You can save this object for later use and invoke <code>respond</code> or <code>passThrough</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"whenPATCH\"> <h3>whenPATCH(url, [data], [headers]);</h3> <div>\n<p>Creates a new backend definition for PATCH requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> <tr> <td> data <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code> </td> <td> <p>HTTP request body.</p> </td> </tr> <tr> <td> headers <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-function\">function(Object)</code> </td> <td> <p>HTTP headers.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> and <code>passThrough</code> methods that control how a matched request is handled. You can save this object for later use and invoke <code>respond</code> or <code>passThrough</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> <li id=\"whenJSONP\"> <h3>whenJSONP(url);</h3> <div>\n<p>Creates a new backend definition for JSONP requests. For more info see <code>when()</code>.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code><code class=\"label type-hint type-hint-regexp\">RegExp</code><code class=\"label type-hint type-hint-function\">function(string)</code> </td> <td> <p>HTTP url or function that receives the url and returns true if the url match the current definition.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-requesthandler\">requestHandler</code></td> <td>\n<p>Returns an object with <code>respond</code> and <code>passThrough</code> methods that control how a matched request is handled. You can save this object for later use and invoke <code>respond</code> or <code>passThrough</code> again in order to change how a matched request is handled.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngMockE2E/service/$httpBackend\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngMockE2E/service/$httpBackend</a>\n  </p>\n</div>\n","api/ngroute":"<h1>\n<a href=\"https://github.com/angular/angular.js/edit//src/ngRoute/route.js?message=docs(ngRoute)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> ngRoute </h1> <h2 id=\"ngroute\">ngRoute</h2> <p>The <code>ngRoute</code> module provides routing and deeplinking services and directives for angular apps.</p>  <p>See <a href=\"ngroute/service/%24route#example.html\">$route</a> for an example of configuring and using <code>ngRoute</code>.</p>  <h2>Installation</h2> <p>First include <code>angular-route.js</code> in your HTML:</p> <pre data-language=\"html\">&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-route.js\"&gt;</pre> <p>You can download this file from the following places:</p> <ul> <li> <a href=\"https://developers.google.com/speed/libraries/devguide#angularjs\">Google CDN</a><br> e.g. <code>//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-route.js</code> </li> <li> <a href=\"http://bower.io\">Bower</a><br> e.g. <pre>bower install angular-route@X.Y.Z</pre> </li> <li> <a href=\"http://code.angularjs.org/\">code.angularjs.org</a><br> e.g. <pre>\"//code.angularjs.org/X.Y.Z/angular-route.js\"</pre> </li> </ul> <p>where X.Y.Z is the AngularJS version you are running.</p> <p>Then load the module in your application by adding it as a dependent module:</p> <pre>angular.module('app', ['ngRoute']);</pre> <p>With that you're ready to get started!</p> <div class=\"component-breakdown\"> <h2>Module Components</h2> <div> <h3 class=\"component-heading\" id=\"directive\">Directive</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngroute/directive/ngview\">ngView</a></td> <td>\n<h2 id=\"overview\">Overview</h2> <p><code>ngView</code> is a directive that complements the <a href=\"ngroute/service/%24route\">$route</a> service by including the rendered template of the current route into the main layout (<code>index.html</code>) file. Every time the current route changes, the included view changes with it according to the configuration of the <code>$route</code> service.</p> </td> </tr> </table> </div> <div> <h3 class=\"component-heading\" id=\"provider\">Provider</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngroute/provider/%24routeprovider\">$routeProvider</a></td> <td>\n<p>Used for configuring routes.</p> </td> </tr> </table> </div> <div> <h3 class=\"component-heading\" id=\"service\">Service</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngroute/service/%24route\">$route</a></td> <td>\n<p><code>$route</code> is used for deep-linking URLs to controllers and views (HTML partials). It watches <code>$location.url()</code> and tries to map the path to an existing route definition.</p> </td> </tr> <tr> <td><a href=\"ngroute/service/%24routeparams\">$routeParams</a></td> <td>\n<p>The <code>$routeParams</code> service allows you to retrieve the current set of route parameters.</p> </td> </tr> </table> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngRoute\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngRoute</a>\n  </p>\n</div>\n","api/ngroute/directive":"<h1>Directive components in ngRoute</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"directive/ngview\">ngView</a></td> <td>\n<h2 id=\"overview\">Overview</h2> <p><code>ngView</code> is a directive that complements the <a href=\"service/%24route\">$route</a> service by including the rendered template of the current route into the main layout (<code>index.html</code>) file. Every time the current route changes, the included view changes with it according to the configuration of the <code>$route</code> service.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngRoute/directive\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngRoute/directive</a>\n  </p>\n</div>\n","api/ngroute/directive/ngview":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngRoute/directive/ngView.js?message=docs(ngView)%3A%20describe%20your%20change...#L7\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngRoute/directive/ngView.js#L7\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngView</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"../../ngroute\">ngRoute</a> </li> </ol>  <div class=\"api-profile-description\"> <h2 id=\"overview\">Overview</h2> <p><code>ngView</code> is a directive that complements the <a href=\"../service/%24route\">$route</a> service by including the rendered template of the current route into the main layout (<code>index.html</code>) file. Every time the current route changes, the included view changes with it according to the configuration of the <code>$route</code> service.</p> <p>Requires the <a href=\"../../ngroute\"><code>ngRoute</code></a> module to be installed.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive creates new scope.</li> <li>This directive executes at priority level 400.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as element: (This directive can be used as custom element, but be aware of <a href=\"../../../guide/ie\">IE restrictions</a>). <pre data-language=\"html\">&lt;ng-view\n  [onload=\"\"]\n  [autoscroll=\"\"]&gt;\n...\n&lt;/ng-view&gt;</pre> </li> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  [onload=\"\"]\n  [autoscroll=\"\"]&gt;\n...\n&lt;/ANY&gt;</pre> </li> <li>as CSS class: <pre data-language=\"html\">&lt;ANY class=\"[onload: ;] [autoscroll: ;]\"&gt; ... &lt;/ANY&gt;</pre> </li> </ul>\n</div> <h2 id=\"animations\">Animations</h2> <p>enter - animation is used to bring new content into the browser. leave - animation is used to animate existing content away.</p> <p>The enter and leave animation occur concurrently.</p> <a href=\"../../nganimate/service/%24animate\">Click here</a> to learn more about the steps involved in the animation. <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> onload <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Expression to evaluate whenever the view updates.</p> </td> </tr> <tr> <td> autoscroll <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Whether <code>ngView</code> should call <a href=\"../../ng/service/%24anchorscroll\">$anchorScroll</a> to scroll the viewport after the view is updated.</p> <pre>- If the attribute is not set, disable scrolling.\n- If the attribute is set without value, enable scrolling.\n- Otherwise enable scrolling only if the `autoscroll` attribute value evaluated\n  as an expression yields a truthy value.\n</pre> </td> </tr> </tbody> </table> </section> <h2>Events</h2> <ul class=\"events defs\"> <li id=\"$viewContentLoaded\"> <h3>$viewContentLoaded</h3> <div>\n<p>Emitted every time the ngView content is reloaded.</p> </div> <div class=\"inline\"> <h4>Type:</h4> <div class=\"type\">emit</div> </div> <div class=\"inline\"> <h4>Target:</h4> <div class=\"target\">the current ngView scope</div> </div> </li> </ul>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngRoute/directive/ngView\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngRoute/directive/ngView</a>\n  </p>\n</div>\n","api/ngroute/provider":"<h1>Provider components in ngRoute</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"provider/%24routeprovider\">$routeProvider</a></td> <td>\n<p>Used for configuring routes.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngRoute/provider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngRoute/provider</a>\n  </p>\n</div>\n","api/ngroute/provider/$routeprovider":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngRoute/route.js?message=docs(%24routeProvider)%3A%20describe%20your%20change...#L23\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngRoute/route.js#L23\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$routeProvider</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../service/%24route\">$route</a> </li> <li> provider in module <a href=\"../../ngroute\">ngRoute</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Used for configuring routes.</p>  <p>See <a href=\"../service/%24route#example.html\">$route</a> for an example of configuring and using <code>ngRoute</code>.</p> <h2 id=\"dependencies\">Dependencies</h2> <p>Requires the <a href=\"../../ngroute\"><code>ngRoute</code></a> module to be installed.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"when\"> <h3>when(path, route);</h3> <div>\n<p>Adds a new route definition to the <code>$route</code> service.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> path </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Route path (matched against <code>$location.path</code>). If <code>$location.path</code> contains redundant trailing slash or is missing one, the route will still match and the <code>$location.path</code> will be updated to add or drop the trailing slash to exactly match the route definition.</p> <ul> <li>\n<code>path</code> can contain named groups starting with a colon: e.g. <code>:name</code>. All characters up to the next slash are matched and stored in <code>$routeParams</code> under the given <code>name</code> when the route matches.</li> <li>\n<code>path</code> can contain named groups starting with a colon and ending with a star: e.g.<code>:name*</code>. All characters are eagerly stored in <code>$routeParams</code> under the given <code>name</code> when the route matches.</li> <li>\n<p><code>path</code> can contain optional named groups with a question mark: e.g.<code>:name?</code>.</p> <p>For example, routes like <code>/color/:color/largecode/:largecode*\\/edit</code> will match <code>/color/brown/largecode/code/with/slashes/edit</code> and extract:</p> </li> <li>\n<p><code>color: brown</code></p> </li> <li>\n<code>largecode: code/with/slashes</code>.</li> </ul> </td> </tr> <tr> <td> route </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Mapping information to be assigned to <code>$route.current</code> on route match.</p> <p> Object properties:</p> <ul> <li>\n<code>controller</code> – <code>{(string|function()=}</code> – Controller fn that should be associated with newly created scope or the name of a <a href=\"../../ng/type/angular.module#controller.html\">registered controller</a> if passed as a string.</li> <li>\n<code>controllerAs</code> – <code>{string=}</code> – A controller alias name. If present the controller will be published to scope under the <code>controllerAs</code> name.</li> <li>\n<p><code>template</code> – <code>{string=|function()=}</code> – html template as a string or a function that returns an html template as a string which should be used by <a href=\"../directive/ngview\">ngView</a> or <a href=\"../../ng/directive/nginclude\">ngInclude</a> directives. This property takes precedence over <code>templateUrl</code>.</p> <p>If <code>template</code> is a function, it will be called with the following parameters:</p> <ul> <li>\n<code>{Array.&lt;Object&gt;}</code> - route parameters extracted from the current <code>$location.path()</code> by applying the current route</li> </ul> </li> <li>\n<p><code>templateUrl</code> – <code>{string=|function()=}</code> – path or function that returns a path to an html template that should be used by <a href=\"../directive/ngview\">ngView</a>.</p> <p>If <code>templateUrl</code> is a function, it will be called with the following parameters:</p> <ul> <li>\n<code>{Array.&lt;Object&gt;}</code> - route parameters extracted from the current <code>$location.path()</code> by applying the current route</li> </ul> </li> <li>\n<p><code>resolve</code> - <code>{Object.&lt;string, function&gt;=}</code> - An optional map of dependencies which should be injected into the controller. If any of these dependencies are promises, the router will wait for them all to be resolved or one to be rejected before the controller is instantiated. If all the promises are resolved successfully, the values of the resolved promises are injected and <a href=\"../service/%24route#%24routeChangeSuccess.html\">$routeChangeSuccess</a> event is fired. If any of the promises are rejected the <a href=\"../service/%24route#%24routeChangeError.html\">$routeChangeError</a> event is fired. The map object is:</p> <ul> <li>\n<code>key</code> – <code>{string}</code>: a name of a dependency to be injected into the controller.</li> <li>\n<code>factory</code> - <code>{string|function}</code>: If <code>string</code> then it is an alias for a service. Otherwise if function, then it is <a href=\"../../auto/service/%24injector#invoke.html\">injected</a> and the return value is treated as the dependency. If the result is a promise, it is resolved before its value is injected into the controller. Be aware that <code>ngRoute.$routeParams</code> will still refer to the previous route within these resolve functions. Use <code>$route.current.params</code> to access the new route parameters, instead.</li> </ul> </li> <li>\n<p><code>redirectTo</code> – {(string|function())=} – value to update <a href=\"../../ng/service/%24location\">$location</a> path with and trigger route redirection.</p> <p>If <code>redirectTo</code> is a function, it will be called with the following parameters:</p> <ul> <li>\n<code>{Object.&lt;string&gt;}</code> - route parameters extracted from the current <code>$location.path()</code> by applying the current route templateUrl.</li> <li>\n<code>{string}</code> - current <code>$location.path()</code>\n</li> <li>\n<code>{Object}</code> - current <code>$location.search()</code>\n</li> </ul> <p>The custom <code>redirectTo</code> function is expected to return a string which will be used to update <code>$location.path()</code> and <code>$location.search()</code>.</p> </li> <li>\n<p><code>[reloadOnSearch=true]</code> - {boolean=} - reload route when only <code>$location.search()</code> or <code>$location.hash()</code> changes.</p> <p>If the option is set to <code>false</code> and url in the browser changes, then <code>$routeUpdate</code> event is broadcasted on the root scope.</p> </li> <li>\n<p><code>[caseInsensitiveMatch=false]</code> - {boolean=} - match routes without being case sensitive</p> <p>If the option is set to <code>true</code>, then the particular route can be matched without being case sensitive</p> </li> </ul> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>self</p> </td> </tr> </table> </li> <li id=\"otherwise\"> <h3>otherwise(params);</h3> <div>\n<p>Sets route definition that will be used on route change when no other route definition is matched.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> params </td> <td> <code class=\"label type-hint type-hint-object\">Object</code><code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Mapping information to be assigned to <code>$route.current</code>. If called with a string, the value maps to <code>redirectTo</code>.</p> </td> </tr> </tbody> </table> <h4>Returns</h4> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>self</p> </td> </tr> </table> </li> </ul> <h2>Properties</h2> <ul class=\"properties defs\"> <li id=\"caseInsensitiveMatch\"> <h3>caseInsensitiveMatch</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td></td> <td>\n<p>A boolean property indicating if routes defined using this provider should be matched using a case insensitive algorithm. Defaults to <code>false</code>.</p> </td> </tr> </table> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngRoute/provider/$routeProvider\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngRoute/provider/$routeProvider</a>\n  </p>\n</div>\n","api/ngroute/service":"<h1>Service components in ngRoute</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"service/%24route\">$route</a></td> <td>\n<p><code>$route</code> is used for deep-linking URLs to controllers and views (HTML partials). It watches <code>$location.url()</code> and tries to map the path to an existing route definition.</p> </td> </tr> <tr> <td><a href=\"service/%24routeparams\">$routeParams</a></td> <td>\n<p>The <code>$routeParams</code> service allows you to retrieve the current set of route parameters.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngRoute/service\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngRoute/service</a>\n  </p>\n</div>\n","api/ngroute/service/$route":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngRoute/route.js?message=docs(%24route)%3A%20describe%20your%20change...#L254\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngRoute/route.js#L254\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$route</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> <a href=\"../provider/%24routeprovider\">$routeProvider</a> </li> <li> service in module <a href=\"../../ngroute\">ngRoute</a> </li> </ol>  <div class=\"api-profile-description\"> <p><code>$route</code> is used for deep-linking URLs to controllers and views (HTML partials). It watches <code>$location.url()</code> and tries to map the path to an existing route definition.</p> <p>Requires the <a href=\"../../ngroute\"><code>ngRoute</code></a> module to be installed.</p> <p>You can define routes through <a href=\"../provider/%24routeprovider\">$routeProvider</a>'s API.</p> <p>The <code>$route</code> service is typically used in conjunction with the <a href=\"../directive/ngview\"><code>ngView</code></a> directive and the <a href=\"%24routeparams\"><code>$routeParams</code></a> service.</p> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"../../ng/service/%24location\"><code>$location</code></a></li>\n<li><a href=\"%24routeparams\"><code>$routeParams</code></a></li> </ul> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"reload\"> <h3>reload();</h3> <div>\n<p>Causes <code>$route</code> service to reload the current route even if <a href=\"../../ng/service/%24location\">$location</a> hasn't changed.</p> <p>As a result of that, <a href=\"../directive/ngview\">ngView</a> creates new scope and reinstantiates the controller.</p> </div> </li> <li id=\"updateParams\"> <h3>updateParams(newParams);</h3> <div>\n<p>Causes <code>$route</code> service to update the current URL, replacing current route parameters with those specified in <code>newParams</code>. Provided property names that match the route's path segment definitions will be interpolated into the location's path, while remaining properties will be treated as query params.</p> </div> <h4>Parameters</h4> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> newParams </td> <td> <code class=\"label type-hint type-hint-object\">!Object&lt;string, string&gt;</code> </td> <td> <p>mapping of URL parameter names to values</p> </td> </tr> </tbody> </table> </li> </ul> <h2>Events</h2> <ul class=\"events defs\"> <li id=\"$routeChangeStart\"> <h3>$routeChangeStart</h3> <div>\n<p>Broadcasted before a route change. At this point the route services starts resolving all of the dependencies needed for the route change to occur. Typically this involves fetching the view template as well as any dependencies defined in <code>resolve</code> route property. Once all of the dependencies are resolved <code>$routeChangeSuccess</code> is fired.</p> <p>The route change (and the <code>$location</code> change that triggered it) can be prevented by calling <code>preventDefault</code> method of the event. See <a href=\"../../ng/type/%24rootscope.scope#%24on.html\"><code>$rootScope.Scope</code></a> for more details about event object.</p> </div> <div class=\"inline\"> <h4>Type:</h4> <div class=\"type\">broadcast</div> </div> <div class=\"inline\"> <h4>Target:</h4> <div class=\"target\">root scope</div> </div> <section class=\"api-section\"> <h3>Parameters</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> angularEvent </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Synthetic event object.</p> </td> </tr> <tr> <td> next </td> <td> <code class=\"label type-hint type-hint-route\">Route</code> </td> <td> <p>Future route information.</p> </td> </tr> <tr> <td> current </td> <td> <code class=\"label type-hint type-hint-route\">Route</code> </td> <td> <p>Current route information.</p> </td> </tr> </tbody> </table> </section>\n</li> <li id=\"$routeChangeSuccess\"> <h3>$routeChangeSuccess</h3> <div>\n<p>Broadcasted after a route change has happened successfully. The <code>resolve</code> dependencies are now available in the <code>current.locals</code> property.</p> <p><a href=\"../directive/ngview\">ngView</a> listens for the directive to instantiate the controller and render the view.</p> </div> <div class=\"inline\"> <h4>Type:</h4> <div class=\"type\">broadcast</div> </div> <div class=\"inline\"> <h4>Target:</h4> <div class=\"target\">root scope</div> </div> <section class=\"api-section\"> <h3>Parameters</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> angularEvent </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Synthetic event object.</p> </td> </tr> <tr> <td> current </td> <td> <code class=\"label type-hint type-hint-route\">Route</code> </td> <td> <p>Current route information.</p> </td> </tr> <tr> <td> previous </td> <td> <code class=\"label type-hint type-hint-route\">Route</code><code class=\"label type-hint type-hint-undefined\">Undefined</code> </td> <td> <p>Previous route information, or undefined if current is first route entered.</p> </td> </tr> </tbody> </table> </section>\n</li> <li id=\"$routeChangeError\"> <h3>$routeChangeError</h3> <div>\n<p>Broadcasted if any of the resolve promises are rejected.</p> </div> <div class=\"inline\"> <h4>Type:</h4> <div class=\"type\">broadcast</div> </div> <div class=\"inline\"> <h4>Target:</h4> <div class=\"target\">root scope</div> </div> <section class=\"api-section\"> <h3>Parameters</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> angularEvent </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Synthetic event object</p> </td> </tr> <tr> <td> current </td> <td> <code class=\"label type-hint type-hint-route\">Route</code> </td> <td> <p>Current route information.</p> </td> </tr> <tr> <td> previous </td> <td> <code class=\"label type-hint type-hint-route\">Route</code> </td> <td> <p>Previous route information.</p> </td> </tr> <tr> <td> rejection </td> <td> <code class=\"label type-hint type-hint-route\">Route</code> </td> <td> <p>Rejection of the promise. Usually the error of the failed promise.</p> </td> </tr> </tbody> </table> </section>\n</li> <li id=\"$routeUpdate\"> <h3>$routeUpdate</h3> <div>\n<p>The <code>reloadOnSearch</code> property has been set to false, and we are reusing the same instance of the Controller.</p> </div> <div class=\"inline\"> <h4>Type:</h4> <div class=\"type\">broadcast</div> </div> <div class=\"inline\"> <h4>Target:</h4> <div class=\"target\">root scope</div> </div> <section class=\"api-section\"> <h3>Parameters</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> angularEvent </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Synthetic event object</p> </td> </tr> <tr> <td> current </td> <td> <code class=\"label type-hint type-hint-route\">Route</code> </td> <td> <p>Current/previous route information.</p> </td> </tr> </tbody> </table> </section>\n</li> </ul> <h2>Properties</h2> <ul class=\"properties defs\"> <li id=\"current\"> <h3>current</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>Reference to the current route definition. The route definition contains:</p> <ul> <li>\n<code>controller</code>: The controller constructor as define in route definition.</li> <li>\n<p><code>locals</code>: A map of locals which is used by <a href=\"../../ng/service/%24controller\">$controller</a> service for controller instantiation. The <code>locals</code> contain the resolved values of the <code>resolve</code> map. Additionally the <code>locals</code> also contain:</p> <ul> <li>\n<code>$scope</code> - The current route scope.</li> <li>\n<code>$template</code> - The current route template HTML.</li> </ul> </li> </ul> </td> </tr> </table> </li> <li id=\"routes\"> <h3>routes</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>Object with all route configuration Objects as its properties.</p> </td> </tr> </table> </li> </ul> <p>This example shows how changing the URL hash causes the <code>$route</code> to match a route against the URL, and the <code>ngView</code> pulls in the partial.</p>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngRoute/service/$route\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngRoute/service/$route</a>\n  </p>\n</div>\n","api/ngroute/service/$routeparams":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngRoute/routeParams.js?message=docs(%24routeParams)%3A%20describe%20your%20change...#L6\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngRoute/routeParams.js#L6\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$routeParams</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../ngroute\">ngRoute</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>$routeParams</code> service allows you to retrieve the current set of route parameters.</p> <p>Requires the <a href=\"../../ngroute\"><code>ngRoute</code></a> module to be installed.</p> <p>The route parameters are a combination of <a href=\"../../ng/service/%24location\"><code>$location</code></a>'s <a href=\"../../ng/service/%24location#search.html\"><code>search()</code></a> and <a href=\"../../ng/service/%24location#path.html\"><code>path()</code></a>. The <code>path</code> parameters are extracted when the <a href=\"%24route\"><code>$route</code></a> path is matched.</p> <p>In case of parameter name collision, <code>path</code> params take precedence over <code>search</code> params.</p> <p>The service guarantees that the identity of the <code>$routeParams</code> object will remain unchanged (but its properties will likely change) even when a route change occurs.</p> <p>Note that the <code>$routeParams</code> are only updated <em>after</em> a route change completes successfully. This means that you cannot rely on <code>$routeParams</code> being correct in route resolve functions. Instead you can use <code>$route.current.params</code> to access the new route's parameters.</p> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"%24route\"><code>$route</code></a></li> </ul> <pre data-language=\"javascript\">// Given:\n// URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n// Route: /Chapter/:chapterId/Section/:sectionId\n//\n// Then\n$routeParams ==&gt; {chapterId:'1', sectionId:'2', search:'moby'}\n</pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngRoute/service/$routeParams\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngRoute/service/$routeParams</a>\n  </p>\n</div>\n","api/ngsanitize":"<h1>\n<a href=\"https://github.com/angular/angular.js/edit//src/ngSanitize/sanitize.js?message=docs(ngSanitize)%3A%20describe%20your%20change...#L16\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> ngSanitize </h1> <h2 id=\"ngsanitize\">ngSanitize</h2> <p>The <code>ngSanitize</code> module provides functionality to sanitize HTML.</p>  <p>See <a href=\"ngsanitize/service/%24sanitize\"><code>$sanitize</code></a> for usage.</p> <h2>Installation</h2> <p>First include <code>angular-sanitize.js</code> in your HTML:</p> <pre data-language=\"html\">&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-sanitize.js\"&gt;</pre> <p>You can download this file from the following places:</p> <ul> <li> <a href=\"https://developers.google.com/speed/libraries/devguide#angularjs\">Google CDN</a><br> e.g. <code>//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-sanitize.js</code> </li> <li> <a href=\"http://bower.io\">Bower</a><br> e.g. <pre>bower install angular-sanitize@X.Y.Z</pre> </li> <li> <a href=\"http://code.angularjs.org/\">code.angularjs.org</a><br> e.g. <pre>\"//code.angularjs.org/X.Y.Z/angular-sanitize.js\"</pre> </li> </ul> <p>where X.Y.Z is the AngularJS version you are running.</p> <p>Then load the module in your application by adding it as a dependent module:</p> <pre>angular.module('app', ['ngSanitize']);</pre> <p>With that you're ready to get started!</p> <div class=\"component-breakdown\"> <h2>Module Components</h2> <div> <h3 class=\"component-heading\" id=\"filter\">Filter</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngsanitize/filter/linky\">linky</a></td> <td>\n<p>Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and plain email address links.</p> </td> </tr> </table> </div> <div> <h3 class=\"component-heading\" id=\"service\">Service</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngsanitize/service/%24sanitize\">$sanitize</a></td> <td>\n<p>The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are then serialized back to properly escaped html string. This means that no unsafe input can make it into the returned string, however, since our parser is more strict than a typical browser parser, it's possible that some obscure input, which would be recognized as valid HTML by a browser, won't make it through the sanitizer. The input may also contain SVG markup. The whitelist is configured using the functions <code>aHrefSanitizationWhitelist</code> and <code>imgSrcSanitizationWhitelist</code> of <a href=\"ng/provider/%24compileprovider\"><code>$compileProvider</code></a>.</p> </td> </tr> </table> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngSanitize\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngSanitize</a>\n  </p>\n</div>\n","api/ngsanitize/filter":"<h1>Filter components in ngSanitize</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"filter/linky\">linky</a></td> <td>\n<p>Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and plain email address links.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngSanitize/filter\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngSanitize/filter</a>\n  </p>\n</div>\n","api/ngsanitize/filter/linky":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngSanitize/filter/linky.js?message=docs(linky)%3A%20describe%20your%20change...#L5\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngSanitize/filter/linky.js#L5\" class=\"view-source pull-right btn btn-primary\"> View Source </a>linky</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> filter in module <a href=\"../../ngsanitize\">ngSanitize</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and plain email address links.</p> <p>Requires the <a href=\"../../ngsanitize\"><code>ngSanitize</code></a> module to be installed.</p> </div> <div> <h2>Usage</h2> <h3>In HTML Template Binding</h3> <code>&lt;span ng-bind-html=\"linky_expression | linky\"&gt;&lt;/span&gt;</code> <h3>In JavaScript</h3> <pre>$filter('linky')(text, target)</pre> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> text </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Input text.</p> </td> </tr> <tr> <td> target </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>Window (_blank|_self|_parent|_top) or named frame to open links in.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>Html-linkified text.</p> </td> </tr> </table>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngSanitize/filter/linky\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngSanitize/filter/linky</a>\n  </p>\n</div>\n","api/ngresource/service/$resource":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngResource/resource.js?message=docs(%24resource)%3A%20describe%20your%20change...#L62\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngResource/resource.js#L62\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$resource</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../ngresource\">ngResource</a> </li> </ol>  <div class=\"api-profile-description\"> <p>A factory which creates a resource object that lets you interact with <a href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\">RESTful</a> server-side data sources.</p> <p>The returned resource object has action methods which provide high-level behaviors without the need to interact with the low level <a href=\"../../ng/service/%24http\">$http</a> service.</p> <p>Requires the <a href=\"../../ngresource\"><code>ngResource</code></a> module to be installed.</p> <p>By default, trailing slashes will be stripped from the calculated URLs, which can pose problems with server backends that do not expect that behavior. This can be disabled by configuring the <code>$resourceProvider</code> like this:</p> <pre data-language=\"javascript\">app.config(['$resourceProvider', function($resourceProvider) {\n  // Don't strip trailing slashes from calculated URLs\n  $resourceProvider.defaults.stripTrailingSlashes = false;\n}]);\n</pre> </div> <div> <h2 id=\"dependencies\">Dependencies</h2> <ul> <li><a href=\"../../ng/service/%24http\"><code>$http</code></a></li> </ul> <h2 id=\"usage\">Usage</h2> <p><code>$resource(url, [paramDefaults], [actions], options);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> url </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>A parametrized URL template with parameters prefixed by <code>:</code> as in <code>/user/:username</code>. If you are using a URL with a port number (e.g. <code>http://example.com:8080/api</code>), it will be respected.</p> <p> If you are using a url with a suffix, just add the suffix, like this: <code>$resource('http://example.com/resource.json')</code> or <code>$resource('http://example.com/:id.json')</code> or even <code>$resource('http://example.com/resource/:resource_id.:format')</code> If the parameter before the suffix is empty, :resource_id in this case, then the <code>/.</code> will be collapsed down to a single <code>.</code>. If you need this sequence to appear and not collapse then you can escape it with <code>/\\.</code>.</p> </td> </tr> <tr> <td> paramDefaults <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Default values for <code>url</code> parameters. These can be overridden in <code>actions</code> methods. If any of the parameter value is a function, it will be executed every time when a param value needs to be obtained for a request (unless the param was overridden).</p> <p> Each key value in the parameter object is first bound to url template if present and then any excess keys are appended to the url search query after the <code>?</code>.</p> <p> Given a template <code>/path/:verb</code> and parameter <code>{verb:'greet', salutation:'Hello'}</code> results in URL <code>/path/greet?salutation=Hello</code>.</p> <p> If the parameter value is prefixed with <code>@</code> then the value for that parameter will be extracted from the corresponding property on the <code>data</code> object (provided when calling an action method). For example, if the <code>defaultParam</code> object is <code>{someParam: '@someProp'}</code> then the value of <code>someParam</code> will be <code>data.someProp</code>.</p> </td> </tr> <tr> <td> actions <div><em>(optional)</em></div> </td> <td> <code class=\"label type-hint type-hint-object\">Object.&lt;Object&gt;=</code> </td> <td> <p>Hash with declaration of custom actions that should extend the default set of resource actions. The declaration should be created in the format of <a href=\"../../ng/service/%24http#usage.html\">$http.config</a>:</p> <pre>{action1: {method:?, params:?, isArray:?, headers:?, ...},\n action2: {method:?, params:?, isArray:?, headers:?, ...},\n ...}\n</pre> <p> Where:</p> <ul> <li>\n<strong><code>action</code></strong> – {string} – The name of action. This name becomes the name of the method on your resource object.</li> <li>\n<strong><code>method</code></strong> – {string} – Case insensitive HTTP method (e.g. <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>JSONP</code>, etc).</li> <li>\n<strong><code>params</code></strong> – {Object=} – Optional set of pre-bound parameters for this action. If any of the parameter value is a function, it will be executed every time when a param value needs to be obtained for a request (unless the param was overridden).</li> <li>\n<strong><code>url</code></strong> – {string} – action specific <code>url</code> override. The url templating is supported just like for the resource-level urls.</li> <li>\n<strong><code>isArray</code></strong> – {boolean=} – If true then the returned object for this action is an array, see <code>returns</code> section.</li> <li>\n<strong><code>transformRequest</code></strong> – <code>{function(data, headersGetter)|Array.&lt;function(data, headersGetter)&gt;}</code> – transform function or an array of such functions. The transform function takes the http request body and headers and returns its transformed (typically serialized) version. By default, transformRequest will contain one function that checks if the request data is an object and serializes to using <code>angular.toJson</code>. To prevent this behavior, set <code>transformRequest</code> to an empty array: <code>transformRequest: []</code>\n</li> <li>\n<strong><code>transformResponse</code></strong> – <code>{function(data, headersGetter)|Array.&lt;function(data, headersGetter)&gt;}</code> – transform function or an array of such functions. The transform function takes the http response body and headers and returns its transformed (typically deserialized) version. By default, transformResponse will contain one function that checks if the response looks like a JSON string and deserializes it using <code>angular.fromJson</code>. To prevent this behavior, set <code>transformResponse</code> to an empty array: <code>transformResponse: []</code>\n</li> <li>\n<strong><code>cache</code></strong> – <code>{boolean|Cache}</code> – If true, a default $http cache will be used to cache the GET request, otherwise if a cache instance built with <a href=\"../../ng/service/%24cachefactory\">$cacheFactory</a>, this cache will be used for caching.</li> <li>\n<strong><code>timeout</code></strong> – <code>{number|Promise}</code> – timeout in milliseconds, or <a href=\"../../ng/service/%24q\">promise</a> that should abort the request when resolved.</li> <li>\n<strong><code>withCredentials</code></strong> - <code>{boolean}</code> - whether to set the <code>withCredentials</code> flag on the XHR object. See <a href=\"https://developer.mozilla.org/en/http_access_control#section_5\">requests with credentials</a> for more information.</li> <li>\n<strong><code>responseType</code></strong> - <code>{string}</code> - see <a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType\">requestType</a>.</li> <li>\n<strong><code>interceptor</code></strong> - <code>{Object=}</code> - The interceptor object has two optional methods - <code>response</code> and <code>responseError</code>. Both <code>response</code> and <code>responseError</code> interceptors get called with <code>http response</code> object. See <a href=\"../../ng/service/%24http\">$http interceptors</a>.</li> </ul> </td> </tr> <tr> <td> options </td> <td> <code class=\"label type-hint type-hint-object\">Object</code> </td> <td> <p>Hash with custom settings that should extend the default <code>$resourceProvider</code> behavior. The only supported option is</p> <p> Where:</p> <ul> <li>\n<strong><code>stripTrailingSlashes</code></strong> – {boolean} – If true then the trailing slashes from any calculated URL will be stripped. (Defaults to true.)</li> </ul> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-object\">Object</code></td> <td>\n<p>A resource \"class\" object with methods for the default set of resource actions optionally extended with custom <code>actions</code>. The default set contains these actions:</p> <pre data-language=\"javascript\">{ 'get':    {method:'GET'},\n  'save':   {method:'POST'},\n  'query':  {method:'GET', isArray:true},\n  'remove': {method:'DELETE'},\n  'delete': {method:'DELETE'} };\n</pre> <p> Calling these methods invoke an <a href=\"../../ng/service/%24http\"><code>$http</code></a> with the specified http method, destination and parameters. When the data is returned from the server then the object is an instance of the resource class. The actions <code>save</code>, <code>remove</code> and <code>delete</code> are available on it as methods with the <code>$</code> prefix. This allows you to easily perform CRUD operations (create, read, update, delete) on server-side data like this:</p> <pre data-language=\"javascript\">var User = $resource('/user/:userId', {userId:'@id'});\nvar user = User.get({userId:123}, function() {\n  user.abc = true;\n  user.$save();\n});\n</pre> <p> It is important to realize that invoking a $resource object method immediately returns an empty reference (object or array depending on <code>isArray</code>). Once the data is returned from the server the existing reference is populated with the actual data. This is a useful trick since usually the resource is assigned to a model which is then rendered by the view. Having an empty object results in no rendering, once the data arrives from the server then the object is populated with the data and the view automatically re-renders itself showing the new data. This means that in most cases one never has to write a callback function for the action methods.</p> <p> The action methods on the class object or instance object can be invoked with the following parameters:</p> <ul> <li>HTTP GET \"class\" actions: <code>Resource.action([parameters], [success], [error])</code>\n</li> <li>non-GET \"class\" actions: <code>Resource.action([parameters], postData, [success], [error])</code>\n</li> <li>non-GET instance actions: <code>instance.$action([parameters], [success], [error])</code>\n</li> </ul> <p> Success callback is called with (value, responseHeaders) arguments. Error callback is called with (httpResponse) argument.</p> <p> Class actions return empty instance (with additional properties below). Instance actions return promise of the action.</p> <p> The Resource instances and collection have these additional properties:</p> <ul> <li>\n<p><code>$promise</code>: the <a href=\"../../ng/service/%24q\">promise</a> of the original server interaction that created this instance or collection.</p> <p>On success, the promise is resolved with the same resource instance or collection object, updated with data from server. This makes it easy to use in <a href=\"../../ngroute/provider/%24routeprovider\">resolve section of $routeProvider.when()</a> to defer view rendering until the resource(s) are loaded.</p> <p>On failure, the promise is resolved with the <a href=\"../../ng/service/%24http\">http response</a> object, without the <code>resource</code> property.</p> <p>If an interceptor object was provided, the promise will instead be resolved with the value returned by the interceptor.</p> </li> <li>\n<p><code>$resolved</code>: <code>true</code> after first server interaction is completed (either with success or rejection), <code>false</code> before that. Knowing if the Resource has been resolved is useful in data-binding.</p> </li> </ul> </td> </tr> </table> <h2 id=\"credit-card-resource\">Credit card resource</h2> <pre data-language=\"javascript\">// Define CreditCard class\nvar CreditCard = $resource('/user/:userId/card/:cardId',\n {userId:123, cardId:'@id'}, {\n  charge: {method:'POST', params:{charge:true}}\n });\n\n// We can retrieve a collection from the server\nvar cards = CreditCard.query(function() {\n  // GET: /user/123/card\n  // server returns: [ {id:456, number:'1234', name:'Smith'} ];\n\n  var card = cards[0];\n  // each item is an instance of CreditCard\n  expect(card instanceof CreditCard).toEqual(true);\n  card.name = \"J. Smith\";\n  // non GET methods are mapped onto the instances\n  card.$save();\n  // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}\n  // server returns: {id:456, number:'1234', name: 'J. Smith'};\n\n  // our custom method is mapped as well.\n  card.$charge({amount:9.99});\n  // POST: /user/123/card/456?amount=9.99&amp;charge=true {id:456, number:'1234', name:'J. Smith'}\n});\n\n// we can create an instance as well\nvar newCard = new CreditCard({number:'0123'});\nnewCard.name = \"Mike Smith\";\nnewCard.$save();\n// POST: /user/123/card {number:'0123', name:'Mike Smith'}\n// server returns: {id:789, number:'0123', name: 'Mike Smith'};\nexpect(newCard.id).toEqual(789);\n</pre> <p>The object returned from this function execution is a resource \"class\" which has \"static\" method for each action in the definition.</p> <p>Calling these methods invoke <code>$http</code> on the <code>url</code> template with the given <code>method</code>, <code>params</code> and <code>headers</code>. When the data is returned from the server then the object is an instance of the resource type and all of the non-GET methods are available with <code>$</code> prefix. This allows you to easily support CRUD operations (create, read, update, delete) on server-side data.</p> <pre data-language=\"javascript\">var User = $resource('/user/:userId', {userId:'@id'});\nUser.get({userId:123}, function(user) {\n  user.abc = true;\n  user.$save();\n});\n</pre> <p>It's worth noting that the success callback for <code>get</code>, <code>query</code> and other methods gets passed in the response that came from the server as well as $http header getter function, so one could rewrite the above example and get access to http headers as:</p> <pre data-language=\"javascript\">var User = $resource('/user/:userId', {userId:'@id'});\nUser.get({userId:123}, function(u, getResponseHeaders){\n  u.abc = true;\n  u.$save(function(u, putResponseHeaders) {\n    //u =&gt; saved user object\n    //putResponseHeaders =&gt; $http header getter\n  });\n});\n</pre> <p>You can also access the raw <code>$http</code> promise via the <code>$promise</code> property on the object returned</p> <pre>var User = $resource('/user/:userId', {userId:'@id'});\nUser.get({userId:123})\n    .$promise.then(function(user) {\n      $scope.user = user;\n    });\n</pre> <h2 id=\"creating-a-custom-put-request\">Creating a custom 'PUT' request</h2> <p>In this example we create a custom method on our resource to make a PUT request</p> <pre data-language=\"javascript\">var app = angular.module('app', ['ngResource', 'ngRoute']);\n\n// Some APIs expect a PUT request in the format URL/object/ID\n// Here we are creating an 'update' method\napp.factory('Notes', ['$resource', function($resource) {\nreturn $resource('/notes/:id', null,\n    {\n        'update': { method:'PUT' }\n    });\n}]);\n\n// In our controller we get the ID from the URL using ngRoute and $routeParams\n// We pass in $routeParams and our Notes factory along with $scope\napp.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',\n                                   function($scope, $routeParams, Notes) {\n// First get a note object from the factory\nvar note = Notes.get({ id:$routeParams.id });\n$id = note.id;\n\n// Now call update passing in the ID first then the object you are updating\nNotes.update({ id:$id }, note);\n\n// This will PUT /notes/ID with the note object in the request payload\n}]);\n</pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngResource/service/$resource\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngResource/service/$resource</a>\n  </p>\n</div>\n","api/ngsanitize/service":"<h1>Service components in ngSanitize</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"service/%24sanitize\">$sanitize</a></td> <td>\n<p>The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are then serialized back to properly escaped html string. This means that no unsafe input can make it into the returned string, however, since our parser is more strict than a typical browser parser, it's possible that some obscure input, which would be recognized as valid HTML by a browser, won't make it through the sanitizer. The input may also contain SVG markup. The whitelist is configured using the functions <code>aHrefSanitizationWhitelist</code> and <code>imgSrcSanitizationWhitelist</code> of <a href=\"../ng/provider/%24compileprovider\"><code>$compileProvider</code></a>.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngSanitize/service\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngSanitize/service</a>\n  </p>\n</div>\n","api/ngsanitize/service/$sanitize":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngSanitize/sanitize.js?message=docs(%24sanitize)%3A%20describe%20your%20change...#L48\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngSanitize/sanitize.js#L48\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$sanitize</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../ngsanitize\">ngSanitize</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are then serialized back to properly escaped html string. This means that no unsafe input can make it into the returned string, however, since our parser is more strict than a typical browser parser, it's possible that some obscure input, which would be recognized as valid HTML by a browser, won't make it through the sanitizer. The input may also contain SVG markup. The whitelist is configured using the functions <code>aHrefSanitizationWhitelist</code> and <code>imgSrcSanitizationWhitelist</code> of <a href=\"../../ng/provider/%24compileprovider\"><code>$compileProvider</code></a>.</p> </div> <div> <h2 id=\"usage\">Usage</h2> <p><code>$sanitize(html);</code></p> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> html </td> <td> <code class=\"label type-hint type-hint-string\">string</code> </td> <td> <p>HTML input.</p> </td> </tr> </tbody> </table> </section> <h3>Returns</h3> <table class=\"variables-matrix return-arguments\"> <tr> <td><code class=\"label type-hint type-hint-string\">string</code></td> <td>\n<p>Sanitized HTML.</p> </td> </tr> </table>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngSanitize/service/$sanitize\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngSanitize/service/$sanitize</a>\n  </p>\n</div>\n","api/ngtouch":"<h1>\n<a href=\"https://github.com/angular/angular.js/edit//src/ngTouch/touch.js?message=docs(ngTouch)%3A%20describe%20your%20change...#L3\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> ngTouch </h1> <h2 id=\"ngtouch\">ngTouch</h2> <p>The <code>ngTouch</code> module provides touch events and other helpers for touch-enabled devices. The implementation is based on jQuery Mobile touch event handling (<a href=\"http://jquerymobile.com/\">jquerymobile.com</a>).</p> <p>See <a href=\"ngtouch/service/%24swipe\"><code>$swipe</code></a> for usage.</p>  <h2>Installation</h2> <p>First include <code>angular-touch.js</code> in your HTML:</p> <pre data-language=\"html\">&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-touch.js\"&gt;</pre> <p>You can download this file from the following places:</p> <ul> <li> <a href=\"https://developers.google.com/speed/libraries/devguide#angularjs\">Google CDN</a><br> e.g. <code>//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-touch.js</code> </li> <li> <a href=\"http://bower.io\">Bower</a><br> e.g. <pre>bower install angular-touch@X.Y.Z</pre> </li> <li> <a href=\"http://code.angularjs.org/\">code.angularjs.org</a><br> e.g. <pre>\"//code.angularjs.org/X.Y.Z/angular-touch.js\"</pre> </li> </ul> <p>where X.Y.Z is the AngularJS version you are running.</p> <p>Then load the module in your application by adding it as a dependent module:</p> <pre>angular.module('app', ['ngTouch']);</pre> <p>With that you're ready to get started!</p> <div class=\"component-breakdown\"> <h2>Module Components</h2> <div> <h3 class=\"component-heading\" id=\"directive\">Directive</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngtouch/directive/ngclick\">ngClick</a></td> <td>\n<p>A more powerful replacement for the default ngClick designed to be used on touchscreen devices. Most mobile browsers wait about 300ms after a tap-and-release before sending the click event. This version handles them immediately, and then prevents the following click event from propagating.</p> </td> </tr> <tr> <td><a href=\"ngtouch/directive/ngswipeleft\">ngSwipeLeft</a></td> <td>\n<p>Specify custom behavior when an element is swiped to the left on a touchscreen device. A leftward swipe is a quick, right-to-left slide of the finger. Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag too.</p> </td> </tr> <tr> <td><a href=\"ngtouch/directive/ngswiperight\">ngSwipeRight</a></td> <td>\n<p>Specify custom behavior when an element is swiped to the right on a touchscreen device. A rightward swipe is a quick, left-to-right slide of the finger. Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag too.</p> </td> </tr> </table> </div> <div> <h3 class=\"component-heading\" id=\"service\">Service</h3> <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"ngtouch/service/%24swipe\">$swipe</a></td> <td>\n<p>The <code>$swipe</code> service is a service that abstracts the messier details of hold-and-drag swipe behavior, to make implementing swipe-related directives more convenient.</p> </td> </tr> </table> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngTouch\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngTouch</a>\n  </p>\n</div>\n","api/ngtouch/directive":"<h1>Directive components in ngTouch</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"directive/ngclick\">ngClick</a></td> <td>\n<p>A more powerful replacement for the default ngClick designed to be used on touchscreen devices. Most mobile browsers wait about 300ms after a tap-and-release before sending the click event. This version handles them immediately, and then prevents the following click event from propagating.</p> </td> </tr> <tr> <td><a href=\"directive/ngswipeleft\">ngSwipeLeft</a></td> <td>\n<p>Specify custom behavior when an element is swiped to the left on a touchscreen device. A leftward swipe is a quick, right-to-left slide of the finger. Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag too.</p> </td> </tr> <tr> <td><a href=\"directive/ngswiperight\">ngSwipeRight</a></td> <td>\n<p>Specify custom behavior when an element is swiped to the right on a touchscreen device. A rightward swipe is a quick, left-to-right slide of the finger. Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag too.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngTouch/directive\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngTouch/directive</a>\n  </p>\n</div>\n","api/ngtouch/directive/ngclick":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngTouch/directive/ngClick.js?message=docs(ngClick)%3A%20describe%20your%20change...#L7\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngTouch/directive/ngClick.js#L7\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngClick</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"../../ngtouch\">ngTouch</a> </li> </ol>  <div class=\"api-profile-description\"> <p>A more powerful replacement for the default ngClick designed to be used on touchscreen devices. Most mobile browsers wait about 300ms after a tap-and-release before sending the click event. This version handles them immediately, and then prevents the following click event from propagating.</p> <p>Requires the <a href=\"../../ngtouch\"><code>ngTouch</code></a> module to be installed.</p> <p>This directive can fall back to using an ordinary click event, and so works on desktop browsers as well as mobile.</p> <p>This directive also sets the CSS class <code>ng-click-active</code> while the element is being held down (by a mouse click or touch) so you can restyle the depressed element if you wish.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-click=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngClick </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon tap. (Event object is available as <code>$event</code>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngTouch/directive/ngClick\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngTouch/directive/ngClick</a>\n  </p>\n</div>\n","api/ngtouch/directive/ngswipeleft":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngTouch/directive/ngSwipe.js?message=docs(ngSwipeLeft)%3A%20describe%20your%20change...#L5\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngTouch/directive/ngSwipe.js#L5\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngSwipeLeft</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"../../ngtouch\">ngTouch</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior when an element is swiped to the left on a touchscreen device. A leftward swipe is a quick, right-to-left slide of the finger. Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag too.</p> <p>To disable the mouse click and drag functionality, add <code>ng-swipe-disable-mouse</code> to the <code>ng-swipe-left</code> or <code>ng-swipe-right</code> DOM Element.</p> <p>Requires the <a href=\"../../ngtouch\"><code>ngTouch</code></a> module to be installed.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-swipe-left=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngSwipeLeft </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon left swipe. (Event object is available as <code>$event</code>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngTouch/directive/ngSwipeLeft\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngTouch/directive/ngSwipeLeft</a>\n  </p>\n</div>\n","api/ngtouch/directive/ngswiperight":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngTouch/directive/ngSwipe.js?message=docs(ngSwipeRight)%3A%20describe%20your%20change...#L41\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngTouch/directive/ngSwipe.js#L41\" class=\"view-source pull-right btn btn-primary\"> View Source </a>ngSwipeRight</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> directive in module <a href=\"../../ngtouch\">ngTouch</a> </li> </ol>  <div class=\"api-profile-description\"> <p>Specify custom behavior when an element is swiped to the right on a touchscreen device. A rightward swipe is a quick, left-to-right slide of the finger. Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag too.</p> <p>Requires the <a href=\"../../ngtouch\"><code>ngTouch</code></a> module to be installed.</p> </div> <div> <h2>Directive Info</h2> <ul> <li>This directive executes at priority level 0.</li> </ul> <h2 id=\"usage\">Usage</h2> <div class=\"usage\"> <ul> <li>as attribute: <pre data-language=\"html\">&lt;ANY\n  ng-swipe-right=\"\"&gt;\n...\n&lt;/ANY&gt;</pre> </li> </ul>\n</div> <section class=\"api-section\"> <h3>Arguments</h3> <table class=\"variables-matrix input-arguments\"> <thead> <tr> <th>Param</th> <th>Type</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td> ngSwipeRight </td> <td> <code class=\"label type-hint type-hint-expression\">expression</code> </td> <td> <p><a href=\"../../../guide/expression\">Expression</a> to evaluate upon right swipe. (Event object is available as <code>$event</code>)</p> </td> </tr> </tbody> </table> </section>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngTouch/directive/ngSwipeRight\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngTouch/directive/ngSwipeRight</a>\n  </p>\n</div>\n","api/ngtouch/service":"<h1>Service components in ngTouch</h1>   <table class=\"definition-table\"> <tr> <th>Name</th> <th>Description</th> </tr> <tr> <td><a href=\"service/%24swipe\">$swipe</a></td> <td>\n<p>The <code>$swipe</code> service is a service that abstracts the messier details of hold-and-drag swipe behavior, to make implementing swipe-related directives more convenient.</p> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngTouch/service\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngTouch/service</a>\n  </p>\n</div>\n","api/ngtouch/service/$swipe":"<h1 class=\"api-profile-header-heading\">\n<a href=\"https://github.com/angular/angular.js/edit//src/ngTouch/swipe.js?message=docs(%24swipe)%3A%20describe%20your%20change...#L5\" class=\"improve-docs btn btn-primary\">Improve this Doc</a><a href=\"https://github.com/angular/angular.js/tree/v1.3.20/src/ngTouch/swipe.js#L5\" class=\"view-source pull-right btn btn-primary\"> View Source </a>$swipe</h1> <ol class=\"api-profile-header-structure naked-list step-list\"> <li> service in module <a href=\"../../ngtouch\">ngTouch</a> </li> </ol>  <div class=\"api-profile-description\"> <p>The <code>$swipe</code> service is a service that abstracts the messier details of hold-and-drag swipe behavior, to make implementing swipe-related directives more convenient.</p> <p>Requires the <a href=\"../../ngtouch\"><code>ngTouch</code></a> module to be installed.</p> <p><code>$swipe</code> is used by the <code>ngSwipeLeft</code> and <code>ngSwipeRight</code> directives in <code>ngTouch</code>, and by <code>ngCarousel</code> in a separate component.</p> <h2 id=\"usage\">Usage</h2> <p>The <code>$swipe</code> service is an object with a single method: <code>bind</code>. <code>bind</code> takes an element which is to be watched for swipes, and an object with four handler functions. See the documentation for <code>bind</code> below.</p> </div> <div> <h2>Methods</h2> <ul class=\"methods defs\"> <li id=\"bind\"> <h3>bind();</h3> <div>\n<p>The main method of <code>$swipe</code>. It takes an element to be watched for swipe motions, and an object containing event handlers. The pointer types that should be used can be specified via the optional third argument, which is an array of strings <code>'mouse'</code> and <code>'touch'</code>. By default, <code>$swipe</code> will listen for <code>mouse</code> and <code>touch</code> events.</p> <p>The four events are <code>start</code>, <code>move</code>, <code>end</code>, and <code>cancel</code>. <code>start</code>, <code>move</code>, and <code>end</code> receive as a parameter a coordinates object of the form <code>{ x: 150, y: 310 }</code>.</p> <p><code>start</code> is called on either <code>mousedown</code> or <code>touchstart</code>. After this event, <code>$swipe</code> is watching for <code>touchmove</code> or <code>mousemove</code> events. These events are ignored until the total distance moved in either dimension exceeds a small threshold.</p> <p>Once this threshold is exceeded, either the horizontal or vertical delta is greater.</p> <ul> <li>If the horizontal distance is greater, this is a swipe and <code>move</code> and <code>end</code> events follow.</li> <li>If the vertical distance is greater, this is a scroll, and we let the browser take over. A <code>cancel</code> event is sent.</li> </ul> <p><code>move</code> is called on <code>mousemove</code> and <code>touchmove</code> after the above logic has determined that a swipe is in progress.</p> <p><code>end</code> is called when a swipe is successfully completed with a <code>touchend</code> or <code>mouseup</code>.</p> <p><code>cancel</code> is called either on a <code>touchcancel</code> from the browser, or when we begin scrolling as described above.</p> </div> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/api/ngTouch/service/$swipe\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/api/ngTouch/service/$swipe</a>\n  </p>\n</div>\n","guide/di":"<h1 id=\"dependency-injection\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/di.ngdoc?message=docs(guide%2FDependency%20Injection)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Dependency Injection</h1> <p>Dependency Injection (DI) is a software design pattern that deals with how components get hold of their dependencies.</p> <p>The Angular injector subsystem is in charge of creating components, resolving their dependencies, and providing them to other components as requested.</p> <h2 id=\"using-dependency-injection\">Using Dependency Injection</h2> <p>DI is pervasive throughout Angular. You can use it when defining components or when providing <code>run</code> and <code>config</code> blocks for a module.</p> <ul> <li>\n<p>Components such as services, directives, filters, and animations are defined by an injectable factory method or constructor function. These components can be injected with \"service\" and \"value\" components as dependencies.</p> </li> <li>\n<p>Controllers are defined by a constructor function, which can be injected with any of the \"service\" and \"value\" components as dependencies, but they can also be provided with special dependencies. See <a href=\"di#controllers.html\">Controllers</a> below for a list of these special dependencies.</p> </li> <li>\n<p>The <code>run</code> method accepts a function, which can be injected with \"service\", \"value\" and \"constant\" components as dependencies. Note that you cannot inject \"providers\" into <code>run</code> blocks.</p> </li> <li>\n<p>The <code>config</code> method accepts a function, which can be injected with \"provider\" and \"constant\" components as dependencies. Note that you cannot inject \"service\" or \"value\" components into configuration.</p> </li> </ul> <p>See <a href=\"module#module-loading-dependencies.html\">Modules</a> for more details about <code>run</code> and <code>config</code> blocks.</p> <h3 id=\"factory-methods\">Factory Methods</h3> <p>The way you define a directive, service, or filter is with a factory function. The factory methods are registered with modules. The recommended way of declaring factories is:</p> <pre data-language=\"javascript\">angular.module('myModule', [])\n.factory('serviceId', ['depService', function(depService) {\n  // ...\n}])\n.directive('directiveName', ['depService', function(depService) {\n  // ...\n}])\n.filter('filterName', ['depService', function(depService) {\n  // ...\n}]);\n</pre> <h3 id=\"module-methods\">Module Methods</h3> <p>We can specify functions to run at configuration and run time for a module by calling the <code>config</code> and <code>run</code> methods. These functions are injectable with dependencies just like the factory functions above.</p> <pre data-language=\"javascript\">angular.module('myModule', [])\n.config(['depProvider', function(depProvider) {\n  // ...\n}])\n.run(['depService', function(depService) {\n  // ...\n}]);\n</pre> <h3 id=\"controllers\">Controllers</h3> <p>Controllers are \"classes\" or \"constructor functions\" that are responsible for providing the application behavior that supports the declarative markup in the template. The recommended way of declaring Controllers is using the array notation:</p> <pre data-language=\"javascript\">someModule.controller('MyController', ['$scope', 'dep1', 'dep2', function($scope, dep1, dep2) {\n  ...\n  $scope.aMethod = function() {\n    ...\n  }\n  ...\n}]);\n</pre> <p>Unlike services, there can be many instances of the same type of controller in an application.</p> <p>Moreover, additional dependencies are made available to Controllers:</p> <ul> <li>\n<a href=\"scope\"><code>$scope</code></a>: Controllers are associated with an element in the DOM and so are provided with access to the <a href=\"scope\">scope</a>. Other components (like services) only have access to the <a href=\"../api/ng/service/%24rootscope\"><code>$rootScope</code></a> service.</li> <li>\n<a href=\"../api/ngroute/provider/%24routeprovider#when.html\">resolves</a>: If a controller is instantiated as part of a route, then any values that are resolved as part of the route are made available for injection into the controller.</li> </ul> <h2 id=\"dependency-annotation\">Dependency Annotation</h2> <p>Angular invokes certain functions (like service factories and controllers) via the injector. You need to annotate these functions so that the injector knows what services to inject into the function. There are three ways of annotating your code with service name information:</p> <ul> <li>Using the inline array annotation (preferred)</li> <li>Using the <code>$inject</code> property annotation</li> <li>Implicitly from the function parameter names (has caveats)</li> </ul> <h3 id=\"inline-array-annotation\">Inline Array Annotation</h3> <p>This is the preferred way to annotate application components. This is how the examples in the documentation are written.</p> <p>For example:</p> <pre data-language=\"javascript\">someModule.controller('MyController', ['$scope', 'greeter', function($scope, greeter) {\n  // ...\n}]);\n</pre> <p>Here we pass an array whose elements consist of a list of strings (the names of the dependencies) followed by the function itself.</p> <p>When using this type of annotation, take care to keep the annotation array in sync with the parameters in the function declaration.</p> <h3 id=\"-inject-property-annotation\">$inject Property Annotation</h3> <p>To allow the minifiers to rename the function parameters and still be able to inject the right services, the function needs to be annotated with the <code>$inject</code> property. The <code>$inject</code> property is an array of service names to inject.</p> <pre data-language=\"javascript\">var MyController = function($scope, greeter) {\n  // ...\n}\nMyController.$inject = ['$scope', 'greeter'];\nsomeModule.controller('MyController', MyController);\n</pre> <p>In this scenario the ordering of the values in the <code>$inject</code> array must match the ordering of the parameters in <code>MyController</code>.</p> <p>Just like with the array annotation, you'll need to take care to keep the <code>$inject</code> in sync with the parameters in the function declaration.</p> <h3 id=\"implicit-annotation\">Implicit Annotation</h3> <div class=\"alert alert-danger\"> <strong>Careful:</strong> If you plan to <a href=\"http://en.wikipedia.org/wiki/Minification_(programming)\">minify</a> your code, your service names will get renamed and break your app. </div> <p>The simplest way to get hold of the dependencies is to assume that the function parameter names are the names of the dependencies.</p> <pre data-language=\"javascript\">someModule.controller('MyController', function($scope, greeter) {\n  // ...\n});\n</pre> <p>Given a function, the injector can infer the names of the services to inject by examining the function declaration and extracting the parameter names. In the above example, <code>$scope</code> and <code>greeter</code> are two services which need to be injected into the function.</p> <p>One advantage of this approach is that there's no array of names to keep in sync with the function parameters. You can also freely reorder dependencies.</p> <p>However this method will not work with JavaScript minifiers/obfuscators because of how they rename parameters.</p> <p>Tools like <a href=\"https://github.com/olov/ng-annotate\">ng-annotate</a> let you use implicit dependency annotations in your app and automatically add inline array annotations prior to minifying. If you decide to take this approach, you probably want to use <code>ng-strict-di</code>.</p> <p>Because of these caveats, we recommend avoiding this style of annotation.</p> <h2 id=\"using-strict-dependency-injection\">Using Strict Dependency Injection</h2> <p>You can add an <code>ng-strict-di</code> directive on the same element as <code>ng-app</code> to opt into strict DI mode:</p> <pre data-language=\"html\">&lt;!doctype html&gt;\n&lt;html ng-app=\"myApp\" ng-strict-di&gt;\n&lt;body&gt;\n  I can add: {{ 1 + 2 }}.\n  &lt;script src=\"angular.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>Strict mode throws an error whenever a service tries to use implicit annotations.</p> <p>Consider this module, which includes a <code>willBreak</code> service that uses implicit DI:</p> <pre data-language=\"javascript\">angular.module('myApp', [])\n.factory('willBreak', function($rootScope) {\n  // $rootScope is implicitly injected\n})\n.run(['willBreak', function(willBreak) {\n  // Angular will throw when this runs\n}]);\n</pre> <p>When the <code>willBreak</code> service is instantiated, Angular will throw an error because of strict mode. This is useful when using a tool like <a href=\"https://github.com/olov/ng-annotate\">ng-annotate</a> to ensure that all of your application components have annotations.</p> <p>If you're using manual bootstrapping, you can also use strict DI by providing <code>strictDi: true</code> in the optional config argument:</p> <pre data-language=\"javascript\">angular.bootstrap(document, ['myApp'], {\n  strictDi: true\n});\n</pre> <h2 id=\"why-dependency-injection-\">Why Dependency Injection?</h2> <p>This section motivates and explains Angular's use of DI. For how to use DI, see above.</p> <p>For in-depth discussion about DI, see <a href=\"http://en.wikipedia.org/wiki/Dependency_injection\">Dependency Injection</a> at Wikipedia, <a href=\"http://martinfowler.com/articles/injection.html\">Inversion of Control</a> by Martin Fowler, or read about DI in your favorite software design pattern book.</p> <p>There are only three ways a component (object or function) can get a hold of its dependencies:</p> <ol> <li>The component can create the dependency, typically using the <code>new</code> operator.</li> <li>The component can look up the dependency, by referring to a global variable.</li> <li>The component can have the dependency passed to it where it is needed.</li> </ol> <p>The first two options of creating or looking up dependencies are not optimal because they hard code the dependency to the component. This makes it difficult, if not impossible, to modify the dependencies. This is especially problematic in tests, where it is often desirable to provide mock dependencies for test isolation.</p> <p>The third option is the most viable, since it removes the responsibility of locating the dependency from the component. The dependency is simply handed to the component.</p> <pre data-language=\"javascript\">function SomeClass(greeter) {\n  this.greeter = greeter;\n}\n\nSomeClass.prototype.doSomething = function(name) {\n  this.greeter.greet(name);\n}\n</pre> <p>In the above example <code>SomeClass</code> is not concerned with creating or locating the <code>greeter</code> dependency, it is simply handed the <code>greeter</code> when it is instantiated.</p> <p>This is desirable, but it puts the responsibility of getting hold of the dependency on the code that constructs <code>SomeClass</code>.</p> <p><img class=\"pull-right\" style=\"padding-left: 3em; padding-bottom: 1em;\" src=\"https://code.angularjs.org/1.3.20/docs/img/guide/concepts-module-injector.png\"></p> <p>To manage the responsibility of dependency creation, each Angular application has an <a href=\"../api/ng/function/angular.injector\">injector</a>. The injector is a <a href=\"http://en.wikipedia.org/wiki/Service_locator_pattern\">service locator</a> that is responsible for construction and lookup of dependencies.</p> <p>Here is an example of using the injector service:</p> <pre data-language=\"javascript\">// Provide the wiring information in a module\nvar myModule = angular.module('myModule', []);\n</pre> <p>Teach the injector how to build a <code>greeter</code> service. Notice that <code>greeter</code> is dependent on the <code>$window</code> service. The <code>greeter</code> service is an object that contains a <code>greet</code> method.</p> <pre data-language=\"javascript\">myModule.factory('greeter', function($window) {\n  return {\n    greet: function(text) {\n      $window.alert(text);\n    }\n  };\n});\n</pre> <p>Create a new injector that can provide components defined in our <code>myModule</code> module and request our <code>greeter</code> service from the injector. (This is usually done automatically by angular bootstrap).</p> <pre data-language=\"javascript\">var injector = angular.injector(['ng', 'myModule']);\nvar greeter = injector.get('greeter');\n</pre> <p>Asking for dependencies solves the issue of hard coding, but it also means that the injector needs to be passed throughout the application. Passing the injector breaks the <a href=\"http://en.wikipedia.org/wiki/Law_of_Demeter\">Law of Demeter</a>. To remedy this, we use a declarative notation in our HTML templates, to hand the responsibility of creating components over to the injector, as in this example:</p> <pre data-language=\"html\">&lt;div ng-controller=\"MyController\"&gt;\n  &lt;button ng-click=\"sayHello()\"&gt;Hello&lt;/button&gt;\n&lt;/div&gt;\n</pre> <pre data-language=\"javascript\">function MyController($scope, greeter) {\n  $scope.sayHello = function() {\n    greeter.greet('Hello World');\n  };\n}\n</pre> <p>When Angular compiles the HTML, it processes the <code>ng-controller</code> directive, which in turn asks the injector to create an instance of the controller and its dependencies.</p> <pre data-language=\"javascript\">injector.instantiate(MyController);\n</pre> <p>This is all done behind the scenes. Notice that by having the <code>ng-controller</code> ask the injector to instantiate the class, it can satisfy all of the dependencies of <code>MyController</code> without the controller ever knowing about the injector.</p> <p>This is the best outcome. The application code simply declares the dependencies it needs, without having to deal with the injector. This setup does not break the Law of Demeter.</p> <div class=\"alert alert-info\"> <strong>Note:</strong> Angular uses <a href=\"http://misko.hevery.com/2009/02/19/constructor-injection-vs-setter-injection/\"><strong>constructor injection</strong></a>. </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/di\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/di</a>\n  </p>\n</div>\n","guide/bootstrap":"<h1 id=\"bootstrap\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/bootstrap.ngdoc?message=docs(guide%2FBootstrap)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Bootstrap</h1> <p>This page explains the Angular initialization process and how you can manually initialize Angular if necessary.</p> <h2 id=\"angular-script-tag\">Angular  Tag</h2> <p>This example shows the recommended path for integrating Angular with what we call automatic initialization.</p> <pre data-language=\"html\">&lt;!doctype html&gt;\n&lt;html xmlns:ng=\"http://angularjs.org\" ng-app&gt;\n  &lt;body&gt;\n    ...\n    &lt;script src=\"angular.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre> <ol> <li>Place the <code>script</code> tag at the bottom of the page. Placing script tags at the end of the page improves app load time because the HTML loading is not blocked by loading of the <code>angular.js</code> script. You can get the latest bits from <a href=\"http://code.angularjs.org\">http://code.angularjs.org</a>. Please don't link your production code to this URL, as it will expose a security hole on your site. For experimental development linking to our site is fine.<ul> <li>Choose: <code>angular-[version].js</code> for a human-readable file, suitable for development and debugging.</li> <li>Choose: <code>angular-[version].min.js</code> for a compressed and obfuscated file, suitable for use in production.</li> </ul> </li> <li>\n<p>Place <code>ng-app</code> to the root of your application, typically on the <code>&lt;html&gt;</code> tag if you want angular to auto-bootstrap your application.</p> </li> <li>\n<p>If you choose to use the old style directive syntax <code>ng:</code> then include xml-namespace in <code>html</code> to make IE happy. (This is here for historical reasons, and we no longer recommend use of <code>ng:</code>.)</p> </li> </ol> <h2 id=\"automatic-initialization\">Automatic Initialization</h2> <p><img class=\"pull-right\" style=\"padding-left: 3em;\" src=\"https://code.angularjs.org/1.3.20/docs/img/guide/concepts-startup.png\"></p> <p>Angular initializes automatically upon <code>DOMContentLoaded</code> event or when the <code>angular.js</code> script is evaluated if at that time <code>document.readyState</code> is set to <code>'complete'</code>. At this point Angular looks for the <a href=\"../api/ng/directive/ngapp\"><code>ng-app</code></a> directive which designates your application root. If the <a href=\"../api/ng/directive/ngapp\"><code>ng-app</code></a> directive is found then Angular will:</p> <ul> <li>load the <a href=\"module\">module</a> associated with the directive.</li> <li>create the application <a href=\"../api/auto/service/%24injector\">injector</a>\n</li> <li>compile the DOM treating the <a href=\"../api/ng/directive/ngapp\"><code>ng-app</code></a> directive as the root of the compilation. This allows you to tell it to treat only a portion of the DOM as an Angular application.</li> </ul> <pre data-language=\"html\">&lt;!doctype html&gt;\n&lt;html ng-app=\"optionalModuleName\"&gt;\n  &lt;body&gt;\n    I can add: {{ 1+2 }}.\n    &lt;script src=\"angular.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>As a best practice, consider adding an <code>ng-strict-di</code> directive on the same element as <code>ng-app</code>:</p> <pre data-language=\"html\">&lt;!doctype html&gt;\n&lt;html ng-app=\"optionalModuleName\" ng-strict-di&gt;\n  &lt;body&gt;\n    I can add: {{ 1+2 }}.\n    &lt;script src=\"angular.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>This will ensure that all services in your application are properly annotated. See the <a href=\"di#using-strict-dependency-injection.html\">dependency injection strict mode</a> docs for more.</p> <h2 id=\"manual-initialization\">Manual Initialization</h2> <p>If you need to have more control over the initialization process, you can use a manual bootstrapping method instead. Examples of when you'd need to do this include using script loaders or the need to perform an operation before Angular compiles a page.</p> <p>Here is an example of manually initializing Angular:</p> <pre data-language=\"html\">&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;body&gt;\n  &lt;div ng-controller=\"MyController\"&gt;\n    Hello {{greetMe}}!\n  &lt;/div&gt;\n  &lt;script src=\"http://code.angularjs.org/snapshot/angular.js\"&gt;&lt;/script&gt;\n\n  &lt;script&gt;\n    angular.module('myApp', [])\n      .controller('MyController', ['$scope', function ($scope) {\n        $scope.greetMe = 'World';\n      }]);\n\n    angular.element(document).ready(function() {\n      angular.bootstrap(document, ['myApp']);\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>Note that we provided the name of our application module to be loaded into the injector as the second parameter of the <a href=\"../api/ng/function/angular.bootstrap\"><code>angular.bootstrap</code></a> function. Notice that <code>angular.bootstrap</code> will not create modules on the fly. You must create any custom <a href=\"module\">modules</a> before you pass them as a parameter.</p> <p>You should call <code>angular.bootstrap()</code> <em>after</em> you've loaded or defined your modules. You cannot add controllers, services, directives, etc after an application bootstraps.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> You should not use the ng-app directive when manually bootstrapping your app. </div> <p>This is the sequence that your code should follow:</p> <ol> <li>\n<p>After the page and all of the code is loaded, find the root element of your AngularJS application, which is typically the root of the document.</p> </li> <li>\n<p>Call <a href=\"../api/ng/function/angular.bootstrap\"><code>angular.bootstrap</code></a> to <a href=\"compiler\">compile</a> the element into an executable, bi-directionally bound application.</p> </li> </ol> <h2 id=\"deferred-bootstrap\">Deferred Bootstrap</h2> <p>This feature enables tools like <a href=\"https://github.com/angular/angularjs-batarang\">Batarang</a> and test runners to hook into angular's bootstrap process and sneak in more modules into the DI registry which can replace or augment DI services for the purpose of instrumentation or mocking out heavy dependencies.</p> <p>If <code>window.name</code> contains prefix <code>NG_DEFER_BOOTSTRAP!</code> when <a href=\"../api/ng/function/angular.bootstrap\"><code>angular.bootstrap</code></a> is called, the bootstrap process will be paused until <code>angular.resumeBootstrap()</code> is called.</p> <p><code>angular.resumeBootstrap()</code> takes an optional array of modules that should be added to the original list of modules that the app was about to be bootstrapped with.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/bootstrap\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/bootstrap</a>\n  </p>\n</div>\n","guide/production":"<h1 id=\"running-an-angularjs-app-in-production\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/production.ngdoc?message=docs(guide%2FRunning%20in%20Production)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Running an AngularJS App in Production</h1> <p>There are a few things you might consider when running your AngularJS application in production.</p> <h2 id=\"disabling-debug-data\">Disabling Debug Data</h2> <p>By default AngularJS attaches information about binding and scopes to DOM nodes, and adds CSS classes to data-bound elements:</p> <ul> <li>\n<p>As a result of <code>ngBind</code>, <code>ngBindHtml</code> or <code>{{...}}</code> interpolations, binding data and CSS class <code>ng-binding</code> are attached to the corresponding element.</p> </li> <li>\n<p>Where the compiler has created a new scope, the scope and either <code>ng-scope</code> or <code>ng-isolated-scope</code> CSS class are attached to the corresponding element. These scope references can then be accessed via <code>element.scope()</code> and <code>element.isolateScope()</code>.</p> </li> </ul> <p>Tools like <a href=\"https://github.com/angular/protractor\">Protractor</a> and <a href=\"https://github.com/angular/angularjs-batarang\">Batarang</a> need this information to run, but you can disable this in production for a significant performance boost with:</p> <pre data-language=\"javascript\">myApp.config(['$compileProvider', function ($compileProvider) {\n  $compileProvider.debugInfoEnabled(false);\n}]);\n</pre> <p>If you wish to debug an application with this information then you should open up a debug console in the browser then call this method directly in this console:</p> <pre data-language=\"javascript\">angular.reloadWithDebugInfo();\n</pre> <p>The page should reload and the debug information should now be available.</p> <p>For more see the docs pages on <a href=\"../api/ng/provider/%24compileprovider#debugInfoEnabled.html\"><code>$compileProvider</code></a> and <a href=\"../api/ng/function/angular.reloadwithdebuginfo\"><code>angular.reloadWithDebugInfo</code></a>.</p> <h2 id=\"strict-di-mode\">Strict DI Mode</h2> <p>Using strict di mode in your production application will throw errors when a injectable function is not <a href=\"di#dependency-annotation.html\">annotated explicitly</a>. Strict di mode is intended to help you make sure that your code will work when minified. However, it also will force you to make sure that your injectable functions are explicitly annotated which will improve angular's performance when injecting dependencies in your injectable functions because it doesn't have to dynamically discover a function's dependencies. It is recommended to automate the explicit annotation via a tool like <a href=\"https://github.com/olov/ng-annotate\">ng-annotate</a> when you deploy to production (and enable strict di mode)</p> <p>To enable strict di mode, you have two options:</p> <pre data-language=\"html\">&lt;div ng-app=\"myApp\" ng-strict-di&gt;\n  &lt;!-- your app here --&gt;\n&lt;/div&gt;\n</pre> <p>or</p> <pre data-language=\"javascript\">angular.bootstrap(document, ['myApp'], {\n  strictDi: true\n});\n</pre> <p>For more information, see the <a href=\"di#using-strict-dependency-injection.html\">DI Guide</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/production\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/production</a>\n  </p>\n</div>\n","guide/introduction":"<h1 id=\"what-is-angular-\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/introduction.ngdoc?message=docs(guide%2FIntroduction)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>What Is Angular?</h1> <p>AngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template language and lets you extend HTML's syntax to express your application's components clearly and succinctly. Angular's data binding and dependency injection eliminate much of the code you would otherwise have to write. And it all happens within the browser, making it an ideal partner with any server technology.</p> <p>Angular is what HTML would have been, had it been designed for applications. HTML is a great declarative language for static documents. It does not contain much in the way of creating applications, and as a result building web applications is an exercise in <em>what do I have to do to trick the browser into doing what I want?</em></p> <p>The impedance mismatch between dynamic applications and static documents is often solved with:</p> <ul> <li>\n<strong>a library</strong> - a collection of functions which are useful when writing web apps. Your code is in charge and it calls into the library when it sees fit. E.g., <code>jQuery</code>.</li> <li>\n<strong>frameworks</strong> - a particular implementation of a web application, where your code fills in the details. The framework is in charge and it calls into your code when it needs something app specific. E.g., <code>durandal</code>, <code>ember</code>, etc.</li> </ul> <p>Angular takes another approach. It attempts to minimize the impedance mismatch between document centric HTML and what an application needs by creating new HTML constructs. Angular teaches the browser new syntax through a construct we call <em>directives</em>. Examples include:</p> <ul> <li>Data binding, as in <code>{{}}</code>.</li> <li>DOM control structures for repeating, showing and hiding DOM fragments.</li> <li>Support for forms and form validation.</li> <li>Attaching new behavior to DOM elements, such as DOM event handling.</li> <li>Grouping of HTML into reusable components.</li> </ul> <h2 id=\"a-complete-client-side-solution\">A complete client-side solution</h2> <p>Angular is not a single piece in the overall puzzle of building the client-side of a web application. It handles all of the DOM and AJAX glue code you once wrote by hand and puts it in a well-defined structure. This makes Angular opinionated about how a CRUD (Create, Read, Update, Delete) application should be built. But while it is opinionated, it also tries to make sure that its opinion is just a starting point you can easily change. Angular comes with the following out-of-the-box:</p> <ul> <li>Everything you need to build a CRUD app in a cohesive set: Data-binding, basic templating directives, form validation, routing, deep-linking, reusable components and dependency injection.</li> <li>Testability story: Unit-testing, end-to-end testing, mocks and test harnesses.</li> <li>Seed application with directory layout and test scripts as a starting point.</li> </ul> <h2 id=\"angular-s-sweet-spot\">Angular's sweet spot</h2> <p>Angular simplifies application development by presenting a higher level of abstraction to the developer. Like any abstraction, it comes at a cost of flexibility. In other words, not every app is a good fit for Angular. Angular was built with the CRUD application in mind. Luckily CRUD applications represent the majority of web applications. To understand what Angular is good at, though, it helps to understand when an app is not a good fit for Angular.</p> <p>Games and GUI editors are examples of applications with intensive and tricky DOM manipulation. These kinds of apps are different from CRUD apps, and as a result are probably not a good fit for Angular. In these cases it may be better to use a library with a lower level of abstraction, such as <code>jQuery</code>.</p> <h2 id=\"the-zen-of-angular\">The Zen of Angular</h2> <p>Angular is built around the belief that declarative code is better than imperative when it comes to building UIs and wiring software components together, while imperative code is excellent for expressing business logic.</p> <ul> <li>It is a very good idea to decouple DOM manipulation from app logic. This dramatically improves the testability of the code.</li> <li>It is a really, <em>really</em> good idea to regard app testing as equal in importance to app writing. Testing difficulty is dramatically affected by the way the code is structured.</li> <li>It is an excellent idea to decouple the client side of an app from the server side. This allows development work to progress in parallel, and allows for reuse of both sides.</li> <li>It is very helpful indeed if the framework guides developers through the entire journey of building an app: From designing the UI, through writing the business logic, to testing.</li> <li>It is always good to make common tasks trivial and difficult tasks possible.</li> </ul> <p>Angular frees you from the following pains:</p> <ul> <li>\n<strong>Registering callbacks:</strong> Registering callbacks clutters your code, making it hard to see the forest for the trees. Removing common boilerplate code such as callbacks is a good thing. It vastly reduces the amount of JavaScript coding <em>you</em> have to do, and it makes it easier to see what your application does.</li> <li>\n<strong>Manipulating HTML DOM programmatically:</strong> Manipulating HTML DOM is a cornerstone of AJAX applications, but it's cumbersome and error-prone. By declaratively describing how the UI should change as your application state changes, you are freed from low-level DOM manipulation tasks. Most applications written with Angular never have to programmatically manipulate the DOM, although you can if you want to.</li> <li>\n<strong>Marshaling data to and from the UI:</strong> CRUD operations make up the majority of AJAX applications' tasks. The flow of marshaling data from the server to an internal object to an HTML form, allowing users to modify the form, validating the form, displaying validation errors, returning to an internal model, and then back to the server, creates a lot of boilerplate code. Angular eliminates almost all of this boilerplate, leaving code that describes the overall flow of the application rather than all of the implementation details.</li> <li>\n<strong>Writing tons of initialization code just to get started:</strong> Typically you need to write a lot of plumbing just to get a basic \"Hello World\" AJAX app working. With Angular you can bootstrap your app easily using services, which are auto-injected into your application in a <a href=\"https://github.com/google/guice\">Guice</a>-like dependency-injection style. This allows you to get started developing features quickly. As a bonus, you get full control over the initialization process in automated tests.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/introduction\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/introduction</a>\n  </p>\n</div>\n","guide/databinding":"<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/databinding.ngdoc?message=docs(guide%2FData%20Binding)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> <p>Data-binding in Angular apps is the automatic synchronization of data between the model and view components. The way that Angular implements data-binding lets you treat the model as the single-source-of-truth in your application. The view is a projection of the model at all times. When the model changes, the view reflects the change, and vice versa.</p> <h2 id=\"data-binding-in-classical-template-systems\">Data Binding in Classical Template Systems</h2> <p><img class=\"right\" src=\"https://code.angularjs.org/1.3.20/docs/img/One_Way_Data_Binding.png\"><br> Most templating systems bind data in only one direction: they merge template and model components together into a view. After the merge occurs, changes to the model or related sections of the view are NOT automatically reflected in the view. Worse, any changes that the user makes to the view are not reflected in the model. This means that the developer has to write code that constantly syncs the view with the model and the model with the view.</p> <h2 id=\"data-binding-in-angular-templates\">Data Binding in Angular Templates</h2> <p><img class=\"right\" src=\"https://code.angularjs.org/1.3.20/docs/img/Two_Way_Data_Binding.png\"><br> Angular templates work differently. First the template (which is the uncompiled HTML along with any additional markup or directives) is compiled on the browser. The compilation step produces a live view. Any changes to the view are immediately reflected in the model, and any changes in the model are propagated to the view. The model is the single-source-of-truth for the application state, greatly simplifying the programming model for the developer. You can think of the view as simply an instant projection of your model.</p> <p>Because the view is just a projection of the model, the controller is completely separated from the view and unaware of it. This makes testing a snap because it is easy to test your controller in isolation without the view and the related DOM/browser dependency.</p> <h2 id=\"related-topics\">Related Topics</h2> <ul> <li><a href=\"scope\">Angular Scopes</a></li> <li><a href=\"templates\">Angular Templates</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/databinding\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/databinding</a>\n  </p>\n</div>\n","guide/filter":"<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/filter.ngdoc?message=docs(guide%2FFilters)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> <p>A filter formats the value of an expression for display to the user. They can be used in view templates, controllers or services and it is easy to define your own filter.</p> <p>The underlying API is the <a href=\"../api/ng/provider/%24filterprovider\"><code>filterProvider</code></a>.</p> <h2 id=\"using-filters-in-view-templates\">Using filters in view templates</h2> <p>Filters can be applied to expressions in view templates using the following syntax:</p> <pre>{{ expression | filter }}\n</pre> <p>E.g. the markup <code>{{ 12 | currency }}</code> formats the number 12 as a currency using the <a href=\"../api/ng/filter/currency\"><code>currency</code></a> filter. The resulting value is <code>$12.00</code>.</p> <p>Filters can be applied to the result of another filter. This is called \"chaining\" and uses the following syntax:</p> <pre>{{ expression | filter1 | filter2 | ... }}\n</pre> <p>Filters may have arguments. The syntax for this is</p> <pre>{{ expression | filter:argument1:argument2:... }}\n</pre> <p>E.g. the markup <code>{{ 1234 | number:2 }}</code> formats the number 1234 with 2 decimal points using the <a href=\"../api/ng/filter/number\"><code>number</code></a> filter. The resulting value is <code>1,234.00</code>.</p> <h2 id=\"using-filters-in-controllers-services-and-directives\">Using filters in controllers, services, and directives</h2> <p>You can also use filters in controllers, services, and directives. For this, inject a dependency with the name <code>&lt;filterName&gt;Filter</code> to your controller/service/directive. E.g. using the dependency <code>numberFilter</code> will inject the number filter. The injected argument is a function that takes the value to format as first argument and filter parameters starting with the second argument.</p> <p>The example below uses the filter called <a href=\"../api/ng/filter/filter\"><code>filter</code></a>. This filter reduces arrays into sub arrays based on conditions. The filter can be applied in the view template with markup like <code>{{ctrl.array | filter:'a'}}</code>, which would do a fulltext search for \"a\". However, using a filter in a view template will reevaluate the filter on every digest, which can be costly if the array is big.</p> <p>The example below therefore calls the filter directly in the controller. By this, the controller is able to call the filter only when needed (e.g. when the data is loaded from the backend or the filter expression is changed).</p>  <h2 id=\"creating-custom-filters\">Creating custom filters</h2> <p>Writing your own filter is very easy: just register a new filter factory function with your module. Internally, this uses the <a href=\"../api/ng/provider/%24filterprovider\"><code>filterProvider</code></a>. This factory function should return a new filter function which takes the input value as the first argument. Any filter arguments are passed in as additional arguments to the filter function.</p> <p>The filter function should be a <a href=\"http://en.wikipedia.org/wiki/Pure_function\">pure function</a>, which means that it should be stateless and idempotent. Angular relies on these properties and executes the filter only when the inputs to the function change.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> Filter names must be valid angular <a href=\"expression\"><code>Expressions</code></a> identifiers, such as <code>uppercase</code> or <code>orderBy</code>. Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace your filters, then you can use capitalization (<code>myappSubsectionFilterx</code>) or underscores (<code>myapp_subsection_filterx</code>). </div> <p>The following sample filter reverses a text string. In addition, it conditionally makes the text upper-case.</p>  <h2 id=\"stateful-filters\">Stateful filters</h2> <p>It is strongly discouraged to write filters that are stateful, because the execution of those can't be optimized by Angular, which often leads to performance issues. Many stateful filters can be converted into stateless filters just by exposing the hidden state as a model and turning it into an argument for the filter.</p> <p>If you however do need to write a stateful filter, you have to mark the filter as <code>$stateful</code>, which means that it will be executed one or more times during the each <code>$digest</code> cycle.</p>  <h2 id=\"testing-custom-filters\">Testing custom filters</h2> <p>See the <a href=\"http://docs.angularjs.org/tutorial/step_09#test\">phonecat tutorial</a> for an example.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/filter\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/filter</a>\n  </p>\n</div>\n","guide/concepts":"<h1 id=\"conceptual-overview\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/concepts.ngdoc?message=docs(guide%2FConceptual%20Overview)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Conceptual Overview</h1> <p>This section briefly touches on all of the important parts of AngularJS using a simple example. For a more in-depth explanation, see the <a href=\"tutorial/\">tutorial</a>.</p> <table> <thead> <tr> <th>Concept</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><a href=\"concepts#template.html\">Template</a></td> <td>HTML with additional markup</td> </tr> <tr> <td><a href=\"concepts#directive.html\">Directives</a></td> <td>extend HTML with custom attributes and elements</td> </tr> <tr> <td><a href=\"concepts#model.html\">Model</a></td> <td>the data shown to the user in the view and with which the user interacts</td> </tr> <tr> <td><a href=\"concepts#scope.html\">Scope</a></td> <td>context where the model is stored so that controllers, directives and expressions can access it</td> </tr> <tr> <td><a href=\"concepts#expression.html\">Expressions</a></td> <td>access variables and functions from the scope</td> </tr> <tr> <td><a href=\"concepts#compiler.html\">Compiler</a></td> <td>parses the template and instantiates directives and expressions</td> </tr> <tr> <td><a href=\"concepts#filter.html\">Filter</a></td> <td>formats the value of an expression for display to the user</td> </tr> <tr> <td><a href=\"concepts#view.html\">View</a></td> <td>what the user sees (the DOM)</td> </tr> <tr> <td><a href=\"concepts#databinding.html\">Data Binding</a></td> <td>sync data between the model and the view</td> </tr> <tr> <td><a href=\"concepts#controller.html\">Controller</a></td> <td>the business logic behind views</td> </tr> <tr> <td><a href=\"concepts#di.html\">Dependency Injection</a></td> <td>Creates and wires objects and functions</td> </tr> <tr> <td><a href=\"concepts#injector.html\">Injector</a></td> <td>dependency injection container</td> </tr> <tr> <td><a href=\"concepts#module.html\">Module</a></td> <td>a container for the different parts of an app including controllers, services, filters, directives which configures the Injector</td> </tr> <tr> <td><a href=\"concepts#service.html\">Service</a></td> <td>reusable business logic independent of views</td> </tr> </tbody> </table> <h2 id=\"a-first-example-data-binding\">A first example: Data binding</h2> <p>In the following example we will build a form to calculate the costs of an invoice in different currencies.</p> <p>Let's start with input fields for quantity and cost whose values are multiplied to produce the total of the invoice:</p>  <p>Try out the Live Preview above, and then let's walk through the example and describe what's going on.</p> <p><img class=\"pull-right\" style=\"padding-left: 3em; padding-bottom: 1em;\" src=\"https://code.angularjs.org/1.3.20/docs/img/guide/concepts-databinding1.png\"></p> <p>This looks like normal HTML, with some new markup. In Angular, a file like this is called a <a name=\"template\">\"</a><a href=\"templates\">template</a>\". When Angular starts your application, it parses and processes this new markup from the template using the so-called <a name=\"compiler\">\"</a><a href=\"compiler\">compiler</a>\". The loaded, transformed and rendered DOM is then called the <a name=\"view\">\"view\"</a>.</p> <p>The first kind of new markup are the so-called <a name=\"directive\">\"</a><a href=\"directive\">directives</a>\". They apply special behavior to attributes or elements in the HTML. In the example above we use the <a href=\"../api/ng/directive/ngapp\"><code>ng-app</code></a> attribute, which is linked to a directive that automatically initializes our application. Angular also defines a directive for the <a href=\"../api/ng/directive/input\"><code>input</code></a> element that adds extra behavior to the element. The <a href=\"../api/ng/directive/ngmodel\"><code>ng-model</code></a> directive stores/updates the value of the input field into/from a variable.</p> <div class=\"alert alert-info\"> <strong>Custom directives to access the DOM</strong>: In Angular, the only place where an application should access the DOM is within directives. This is important because artifacts that access the DOM are hard to test. If you need to access the DOM directly you should write a custom directive for this. The <a href=\"directive\">directives guide</a> explains how to do this. </div> <p>The second kind of new markup are the double curly braces <code>{{ expression | filter }}</code>: When the compiler encounters this markup, it will replace it with the evaluated value of the markup. An <a name=\"expression\">\"</a><a href=\"expression\">expression</a>\" in a template is a JavaScript-like code snippet that allows to read and write variables. Note that those variables are not global variables. Just like variables in a JavaScript function live in a scope, Angular provides a <a name=\"scope\">\"</a><a href=\"scope\">scope</a>\" for the variables accessible to expressions. The values that are stored in variables on the scope are referred to as the <a name=\"model\">\"model\"</a> in the rest of the documentation. Applied to the example above, the markup directs Angular to \"take the data we got from the input widgets and multiply them together\".</p> <p>The example above also contains a <a name=\"filter\">\"</a><a href=\"filter\">filter</a>\". A filter formats the value of an expression for display to the user. In the example above, the filter <a href=\"../api/ng/filter/currency\"><code>currency</code></a> formats a number into an output that looks like money.</p> <p>The important thing in the example is that Angular provides <em>live</em> bindings: Whenever the input values change, the value of the expressions are automatically recalculated and the DOM is updated with their values. The concept behind this is <a name=\"databinding\">\"</a><a href=\"databinding\">two-way data binding</a>\".</p> <h2 id=\"adding-ui-logic-controllers\">Adding UI logic: Controllers</h2> <p>Let's add some more logic to the example that allows us to enter and calculate the costs in different currencies and also pay the invoice.</p>  <p>What changed?</p> <p>First, there is a new JavaScript file that contains a so-called <a name=\"controller\">\"</a><a href=\"controller\">controller</a>\". More exactly, the file contains a constructor function that creates the actual controller instance. The purpose of controllers is to expose variables and functionality to expressions and directives.</p> <p>Besides the new file that contains the controller code we also added an <a href=\"../api/ng/directive/ngcontroller\"><code>ng-controller</code></a> directive to the HTML. This directive tells Angular that the new <code>InvoiceController</code> is responsible for the element with the directive and all of the element's children. The syntax <code>InvoiceController as invoice</code> tells Angular to instantiate the controller and save it in the variable <code>invoice</code> in the current scope.</p> <p>We also changed all expressions in the page to read and write variables within that controller instance by prefixing them with <code>invoice.</code> . The possible currencies are defined in the controller and added to the template using <a href=\"../api/ng/directive/ngrepeat\"><code>ng-repeat</code></a>. As the controller contains a <code>total</code> function we are also able to bind the result of that function to the DOM using <code>{{ invoice.total(...) }}</code>.</p> <p>Again, this binding is live, i.e. the DOM will be automatically updated whenever the result of the function changes. The button to pay the invoice uses the directive <a href=\"../api/ng/directive/ngclick\"><code>ngClick</code></a>. This will evaluate the corresponding expression whenever the button is clicked.</p> <p>In the new JavaScript file we are also creating a <a href=\"concepts#module\">module</a> at which we register the controller. We will talk about modules in the next section.</p> <p>The following graphic shows how everything works together after we introduced the controller:</p> <p><img style=\"padding-left: 3em; padding-bottom: 1em;\" src=\"https://code.angularjs.org/1.3.20/docs/img/guide/concepts-databinding2.png\"></p> <h2 id=\"view-independent-business-logic-services\">View-independent business logic: Services</h2> <p>Right now, the <code>InvoiceController</code> contains all logic of our example. When the application grows it is a good practice to move view-independent logic from the controller into a <a href=\"services\">service</a>, so it can be reused by other parts of the application as well. Later on, we could also change that service to load the exchange rates from the web, e.g. by calling the Yahoo Finance API, without changing the controller.</p> <p>Let's refactor our example and move the currency conversion into a service in another file:</p>  <p><img class=\"pull-right\" style=\"padding-left: 3em; padding-bottom: 1em;\" src=\"https://code.angularjs.org/1.3.20/docs/img/guide/concepts-module-service.png\"></p> <p>What changed? We moved the <code>convertCurrency</code> function and the definition of the existing currencies into the new file <code>finance2.js</code>. But how does the controller get a hold of the now separated function?</p> <p>This is where <a name=\"di\">\"</a><a href=\"di\">Dependency Injection</a>\" comes into play. Dependency Injection (DI) is a software design pattern that deals with how objects and functions get created and how they get a hold of their dependencies. Everything within Angular (directives, filters, controllers, services, ...) is created and wired using dependency injection. Within Angular, the DI container is called the <a name=\"injector\">\"</a><a href=\"di\">injector</a>\".</p> <p>To use DI, there needs to be a place where all the things that should work together are registered. In Angular, this is the purpose of the so-called <a name=\"module\">\"</a><a href=\"module\">modules</a>\". When Angular starts, it will use the configuration of the module with the name defined by the <code>ng-app</code> directive, including the configuration of all modules that this module depends on.</p> <p>In the example above: The template contains the directive <code>ng-app=\"invoice2\"</code>. This tells Angular to use the <code>invoice2</code> module as the main module for the application. The code snippet <code>angular.module('invoice2', ['finance2'])</code> specifies that the <code>invoice2</code> module depends on the <code>finance2</code> module. By this, Angular uses the <code>InvoiceController</code> as well as the <code>currencyConverter</code> service.</p> <p>Now that Angular knows of all the parts of the application, it needs to create them. In the previous section we saw that controllers are created using a factory function. For services there are multiple ways to define their factory (see the <a href=\"services\">service guide</a>). In the example above, we are using a function that returns the <code>currencyConverter</code> function as the factory for the service.</p> <p>Back to the initial question: How does the <code>InvoiceController</code> get a reference to the <code>currencyConverter</code> function? In Angular, this is done by simply defining arguments on the constructor function. With this, the injector is able to create the objects in the right order and pass the previously created objects into the factories of the objects that depend on them. In our example, the <code>InvoiceController</code> has an argument named <code>currencyConverter</code>. By this, Angular knows about the dependency between the controller and the service and calls the controller with the service instance as argument.</p> <p>The last thing that changed in the example between the previous section and this section is that we now pass an array to the <code>module.controller</code> function, instead of a plain function. The array first contains the names of the service dependencies that the controller needs. The last entry in the array is the controller constructor function. Angular uses this array syntax to define the dependencies so that the DI also works after minifying the code, which will most probably rename the argument name of the controller constructor function to something shorter like <code>a</code>.</p> <h2 id=\"accessing-the-backend\">Accessing the backend</h2> <p>Let's finish our example by fetching the exchange rates from the Yahoo Finance API. The following example shows how this is done with Angular:</p>  <p>What changed? Our <code>currencyConverter</code> service of the <code>finance</code> module now uses the <a href=\"../api/ng/service/%24http\"><code>$http</code></a>, a built-in service provided by Angular for accessing a server backend. <code>$http</code> is a wrapper around <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> and <a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a> transports.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/concepts\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/concepts</a>\n  </p>\n</div>\n","guide/expression":"<h1 id=\"angular-expressions\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/expression.ngdoc?message=docs(guide%2FExpressions)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Angular Expressions</h1> <p>Angular expressions are JavaScript-like code snippets that are usually placed in bindings such as <code>{{ expression }}</code>.</p> <p>For example, these are valid expressions in Angular:</p> <ul> <li><code>1+2</code></li> <li><code>a+b</code></li> <li><code>user.name</code></li> <li><code>items[index]</code></li> </ul> <h2 id=\"angular-expressions-vs-javascript-expressions\">Angular Expressions vs. JavaScript Expressions</h2> <p>Angular expressions are like JavaScript expressions with the following differences:</p> <ul> <li>\n<p><strong>Context:</strong> JavaScript expressions are evaluated against the global <code>window</code>. In Angular, expressions are evaluated against a <a href=\"../api/ng/type/%24rootscope.scope\"><code>scope</code></a> object.</p> </li> <li>\n<p><strong>Forgiving:</strong> In JavaScript, trying to evaluate undefined properties generates <code>ReferenceError</code> or <code>TypeError</code>. In Angular, expression evaluation is forgiving to <code>undefined</code> and <code>null</code>.</p> </li> <li>\n<p><strong>No Control Flow Statements:</strong> You cannot use the following in an Angular expression: conditionals, loops, or exceptions.</p> </li> <li>\n<p><strong>No Function Declarations:</strong> You cannot declare functions in an Angular expression, even inside <code>ng-init</code> directive.</p> </li> <li>\n<p><strong>No RegExp Creation With Literal Notation:</strong> You cannot create regular expressions in an Angular expression.</p> </li> <li>\n<p><strong>No Comma And Void Operators:</strong> You cannot use <code>,</code> or <code>void</code> in an Angular expression.</p> </li> <li>\n<p><strong>Filters:</strong> You can use <a href=\"filter\">filters</a> within expressions to format data before displaying it.</p> </li> </ul> <p>If you want to run more complex JavaScript code, you should make it a controller method and call the method from your view. If you want to <code>eval()</code> an Angular expression yourself, use the <a href=\"../api/ng/type/%24rootscope.scope#%24eval.html\"><code>$eval()</code></a> method.</p>   <p>You can try evaluating different expressions here:</p>  <h2 id=\"context\">Context</h2> <p>Angular does not use JavaScript's <code>eval()</code> to evaluate expressions. Instead Angular's <a href=\"../api/ng/service/%24parse\">$parse</a> service processes these expressions.</p> <p>Angular expressions do not have access to global variables like <code>window</code>, <code>document</code> or <code>location</code>. This restriction is intentional. It prevents accidental access to the global state – a common source of subtle bugs.</p> <p>Instead use services like <code>$window</code> and <code>$location</code> in functions called from expressions. Such services provide mockable access to globals.</p>  <h2 id=\"forgiving\">Forgiving</h2> <p>Expression evaluation is forgiving to undefined and null. In JavaScript, evaluating <code>a.b.c</code> throws an exception if <code>a</code> is not an object. While this makes sense for a general purpose language, the expression evaluations are primarily used for data binding, which often look like this:</p> <pre>{{a.b.c}}\n</pre> <p>It makes more sense to show nothing than to throw an exception if <code>a</code> is undefined (perhaps we are waiting for the server response, and it will become defined soon). If expression evaluation wasn't forgiving we'd have to write bindings that clutter the code, for example: <code>{{((a||{}).b||{}).c}}</code></p> <p>Similarly, invoking a function <code>a.b.c()</code> on <code>undefined</code> or <code>null</code> simply returns <code>undefined</code>.</p> <h2 id=\"no-control-flow-statements\">No Control Flow Statements</h2> <p>Apart from the ternary operator (<code>a ? b : c</code>), you cannot write a control flow statement in an expression. The reason behind this is core to the Angular philosophy that application logic should be in controllers, not the views. If you need a real conditional, loop, or to throw from a view expression, delegate to a JavaScript method instead.</p> <h2 id=\"no-function-declarations-or-regexp-creation-with-literal-notation\">No function declarations or RegExp creation with literal notation</h2> <p>You can't declare functions or create regular expressions from within AngularJS expressions. This is to avoid complex model transformation logic inside templates. Such logic is better placed in a controller or in a dedicated filter where it can be tested properly.</p> <h2 id=\"-event-\">$event</h2> <p>Directives like <a href=\"../api/ng/directive/ngclick\"><code>ngClick</code></a> and <a href=\"../api/ng/directive/ngfocus\"><code>ngFocus</code></a> expose a <code>$event</code> object within the scope of that expression. The object is an instance of a <a href=\"http://api.jquery.com/category/events/event-object/\">jQuery Event Object</a> when jQuery is present or a similar jqLite object.</p>  <p>Note in the example above how we can pass in <code>$event</code> to <code>clickMe</code>, but how it does not show up in <code>{{$event}}</code>. This is because <code>$event</code> is outside the scope of that binding.</p> <h2 id=\"one-time-binding\">One-time binding</h2> <p>An expression that starts with <code>::</code> is considered a one-time expression. One-time expressions will stop recalculating once they are stable, which happens after the first digest if the expression result is a non-undefined value (see value stabilization algorithm below).</p>  <h3 id=\"why-this-feature\">Why this feature</h3> <p>The main purpose of one-time binding expression is to provide a way to create a binding that gets deregistered and frees up resources once the binding is stabilized. Reducing the number of expressions being watched makes the digest loop faster and allows more information to be displayed at the same time.</p> <h3 id=\"value-stabilization-algorithm\">Value stabilization algorithm</h3> <p>One-time binding expressions will retain the value of the expression at the end of the digest cycle as long as that value is not undefined. If the value of the expression is set within the digest loop and later, within the same digest loop, it is set to undefined, then the expression is not fulfilled and will remain watched.</p> <ol> <li>Given an expression that starts with <code>::</code>, when a digest loop is entered and expression is dirty-checked, store the value as V</li> <li>If V is not undefined, mark the result of the expression as stable and schedule a task to deregister the watch for this expression when we exit the digest loop</li> <li>Process the digest loop as normal</li> <li>When digest loop is done and all the values have settled process the queue of watch deregistration tasks. For each watch to be deregistered check if it still evaluates to value that is not <code>undefined</code>. If that's the case, deregister the watch. Otherwise keep dirty-checking the watch in the future digest loops by following the same algorithm starting from step 1</li> </ol> <h4 id=\"special-case-for-object-literals\">Special case for object literals</h4> <p>Unlike simple values, object-literals are watched until every key is defined. See <a href=\"http://www.bennadel.com/blog/2760-one-time-data-bindings-for-object-literal-expressions-in-angularjs-1-3.htm\">http://www.bennadel.com/blog/2760-one-time-data-bindings-for-object-literal-expressions-in-angularjs-1-3.htm</a></p> <h3 id=\"how-to-benefit-from-one-time-binding\">How to benefit from one-time binding</h3> <p>If the expression will not change once set, it is a candidate for one-time binding. Here are three example cases.</p> <p>When interpolating text or attributes:</p> <pre data-language=\"html\">&lt;div name=\"attr: {{::color}}\"&gt;text: {{::name}}&lt;/div&gt;\n</pre> <p>When using a directive with bidirectional binding and the parameters will not change:</p> <pre data-language=\"javascript\">someModule.directive('someDirective', function() {\n  return {\n    scope: {\n      name: '=',\n      color: '@'\n    },\n    template: '{{name}}: {{color}}'\n  };\n});\n</pre> <pre data-language=\"html\">&lt;div some-directive name=\"::myName\" color=\"My color is {{::myColor}}\"&gt;&lt;/div&gt;\n</pre> <p>When using a directive that takes an expression:</p> <pre data-language=\"html\">&lt;ul&gt;\n  &lt;li ng-repeat=\"item in ::items\"&gt;{{item.name}};&lt;/li&gt;\n&lt;/ul&gt;\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/expression\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/expression</a>\n  </p>\n</div>\n","guide/forms":"<p>Controls (<code>input</code>, <code>select</code>, <code>textarea</code>) are ways for a user to enter data. A Form is a collection of controls for the purpose of grouping related controls together.</p> <p>Form and controls provide validation services, so that the user can be notified of invalid input before submitting a form. This provides a better user experience than server-side validation alone because the user gets instant feedback on how to correct the error. Keep in mind that while client-side validation plays an important role in providing good user experience, it can easily be circumvented and thus can not be trusted. Server-side validation is still necessary for a secure application.</p> <h1 id=\"simple-form\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/forms.ngdoc?message=docs(guide%2FForms)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Simple form</h1> <p>The key directive in understanding two-way data-binding is <a href=\"../api/ng/directive/ngmodel\">ngModel</a>. The <code>ngModel</code> directive provides the two-way data-binding by synchronizing the model to the view, as well as view to the model. In addition it provides an <a href=\"../api/ng/type/ngmodel.ngmodelcontroller\">API</a> for other directives to augment its behavior.</p>  <p>Note that <code>novalidate</code> is used to disable browser's native form validation.</p> <p>The value of <code>ngModel</code> won't be set unless it passes validation for the input field. For example: inputs of type <code>email</code> must have a value in the form of <code>user@domain</code>.</p> <h2 id=\"using-css-classes\">Using CSS classes</h2> <p>To allow styling of form as well as controls, <code>ngModel</code> adds these CSS classes:</p> <ul> <li>\n<code>ng-valid</code>: the model is valid</li> <li>\n<code>ng-invalid</code>: the model is invalid</li> <li>\n<code>ng-valid-[key]</code>: for each valid key added by <code>$setValidity</code>\n</li> <li>\n<code>ng-invalid-[key]</code>: for each invalid key added by <code>$setValidity</code>\n</li> <li>\n<code>ng-pristine</code>: the control hasn't been interacted with yet</li> <li>\n<code>ng-dirty</code>: the control has been interacted with</li> <li>\n<code>ng-touched</code>: the control has been blurred</li> <li>\n<code>ng-untouched</code>: the control hasn't been blurred</li> <li>\n<code>ng-pending</code>: any <code>$asyncValidators</code> are unfulfilled</li> </ul> <p>The following example uses the CSS to display validity of each form control. In the example both <code>user.name</code> and <code>user.email</code> are required, but are rendered with red background only after the input is blurred (loses focus). This ensures that the user is not distracted with an error until after interacting with the control, and failing to satisfy its validity.</p>  <h2 id=\"binding-to-form-and-control-state\">Binding to form and control state</h2> <p>A form is an instance of <a href=\"../api/ng/type/form.formcontroller\">FormController</a>. The form instance can optionally be published into the scope using the <code>name</code> attribute.</p> <p>Similarly, an input control that has the <a href=\"../api/ng/directive/ngmodel\">ngModel</a> directive holds an instance of <a href=\"../api/ng/type/ngmodel.ngmodelcontroller\">NgModelController</a>. Such a control instance can be published as a property of the form instance using the <code>name</code> attribute on the input control. The name attribute specifies the name of the property on the form instance.</p> <p>This implies that the internal state of both the form and the control is available for binding in the view using the standard binding primitives.</p> <p>This allows us to extend the above example with these features:</p> <ul> <li>Custom error message displayed after the user interacted with a control (i.e. when <code>$touched</code> is set)</li> <li>Custom error message displayed upon submitting the form (<code>$submitted</code> is set), even if the user didn't interact with a control</li> </ul>  <h2 id=\"custom-model-update-triggers\">Custom model update triggers</h2> <p>By default, any change to the content will trigger a model update and form validation. You can override this behavior using the <a href=\"../api/ng/directive/ngmodeloptions\">ngModelOptions</a> directive to bind only to specified list of events. I.e. <code>ng-model-options=\"{ updateOn: 'blur' }\"</code> will update and validate only after the control loses focus. You can set several events using a space delimited list. I.e. <code>ng-model-options=\"{ updateOn: 'mousedown blur' }\"</code></p> <p><img alt=\"animation showing debounced input\" src=\"https://code.angularjs.org/1.3.20/docs/img/guide/forms-update-on-blur.gif\"></p> <p>If you want to keep the default behavior and just add new events that may trigger the model update and validation, add \"default\" as one of the specified events.</p> <p>I.e. <code>ng-model-options=\"{ updateOn: 'default blur' }\"</code></p> <p>The following example shows how to override immediate updates. Changes on the inputs within the form will update the model only when the control loses focus (blur event).</p>  <h2 id=\"non-immediate-debounced-model-updates\">Non-immediate (debounced) model updates</h2> <p>You can delay the model update/validation by using the <code>debounce</code> key with the <a href=\"../api/ng/directive/ngmodeloptions\">ngModelOptions</a> directive. This delay will also apply to parsers, validators and model flags like <code>$dirty</code> or <code>$pristine</code>.</p> <p><img alt=\"animation showing debounced input\" src=\"https://code.angularjs.org/1.3.20/docs/img/guide/forms-debounce.gif\"></p> <p>I.e. <code>ng-model-options=\"{ debounce: 500 }\"</code> will wait for half a second since the last content change before triggering the model update and form validation.</p> <p>If custom triggers are used, custom debouncing timeouts can be set for each event using an object in <code>debounce</code>. This can be useful to force immediate updates on some specific circumstances (like blur events).</p> <p>I.e. <code>ng-model-options=\"{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }\"</code></p> <p>If those attributes are added to an element, they will be applied to all the child elements and controls that inherit from it unless they are overridden.</p> <p>This example shows how to debounce model changes. Model will be updated only 250 milliseconds after last change.</p>  <h2 id=\"custom-validation\">Custom Validation</h2> <p>Angular provides basic implementation for most common HTML5 <a href=\"../api/ng/directive/input\">input</a> types: (<a href=\"../api/ng/input/input%5Btext%5D\">text</a>, <a href=\"../api/ng/input/input%5Bnumber%5D\">number</a>, <a href=\"../api/ng/input/input%5Burl%5D\">url</a>, <a href=\"../api/ng/input/input%5Bemail%5D\">email</a>, <a href=\"../api/ng/input/input%5Bdate%5D\">date</a>, <a href=\"../api/ng/input/input%5Bradio%5D\">radio</a>, <a href=\"../api/ng/input/input%5Bcheckbox%5D\">checkbox</a>), as well as some directives for validation (<code>required</code>, <code>pattern</code>, <code>minlength</code>, <code>maxlength</code>, <code>min</code>, <code>max</code>).</p> <p>With a custom directive, you can add your own validation functions to the <code>$validators</code> object on the <a href=\"../api/ng/type/ngmodel.ngmodelcontroller\"><code>ngModelController</code></a>. To get a hold of the controller, you require it in the directive as shown in the example below.</p> <p>Each function in the <code>$validators</code> object receives the <code>modelValue</code> and the <code>viewValue</code> as parameters. Angular will then call <code>$setValidity</code> internally with the function's return value (<code>true</code>: valid, <code>false</code>: invalid). The validation functions are executed every time an input is changed (<code>$setViewValue</code> is called) or whenever the bound <code>model</code> changes. Validation happens after successfully running <code>$parsers</code> and <code>$formatters</code>, respectively. Failed validators are stored by key in <a href=\"../api/ng/type/ngmodel.ngmodelcontroller#%24error\"><code>ngModelController.$error</code></a>.</p> <p>Additionally, there is the <code>$asyncValidators</code> object which handles asynchronous validation, such as making an <code>$http</code> request to the backend. Functions added to the object must return a promise that must be <code>resolved</code> when valid or <code>rejected</code> when invalid. In-progress async validations are stored by key in <a href=\"../api/ng/type/ngmodel.ngmodelcontroller#%24pending.html\"><code>ngModelController.$pending</code></a>.</p> <p>In the following example we create two directives:</p> <ul> <li>\n<p>An <code>integer</code> directive that validates whether the input is a valid integer. For example, <code>1.23</code> is an invalid value, since it contains a fraction. Note that we validate the viewValue (the string value of the control), and not the modelValue. This is because input[number] converts the viewValue to a number when running the <code>$parsers</code>.</p> </li> <li>\n<p>A <code>username</code> directive that asynchronously checks if a user-entered value is already taken. We mock the server request with a <code>$q</code> deferred.</p> </li> </ul>  <h2 id=\"modifying-built-in-validators\">Modifying built-in validators</h2> <p>Since Angular itself uses <code>$validators</code>, you can easily replace or remove built-in validators, should you find it necessary. The following example shows you how to overwrite the email validator in <code>input[email]</code> from a custom directive so that it requires a specific top-level domain, <code>example.com</code> to be present. Note that you can alternatively use <code>ng-pattern</code> to further restrict the validation.</p>  <h2 id=\"implementing-custom-form-controls-using-ngmodel-\">Implementing custom form controls (using ngModel)</h2> <p>Angular implements all of the basic HTML form controls (<a href=\"../api/ng/directive/input\">input</a>, <a href=\"../api/ng/directive/select\">select</a>, <a href=\"../api/ng/directive/textarea\">textarea</a>), which should be sufficient for most cases. However, if you need more flexibility, you can write your own form control as a directive.</p> <p>In order for custom control to work with <code>ngModel</code> and to achieve two-way data-binding it needs to:</p> <ul> <li>implement <code>$render</code> method, which is responsible for rendering the data after it passed the <a href=\"../api/ng/type/ngmodel.ngmodelcontroller#%24formatters.html\"><code>NgModelController.$formatters</code></a>,</li> <li>call <code>$setViewValue</code> method, whenever the user interacts with the control and model needs to be updated. This is usually done inside a DOM Event listener.</li> </ul> <p>See <a href=\"directive\"><code>$compileProvider.directive</code></a> for more info.</p> <p>The following example shows how to add two-way data-binding to contentEditable elements.</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/forms\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/forms</a>\n  </p>\n</div>\n","guide/animations":"<h1 id=\"animations\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/animations.ngdoc?message=docs(guide%2FAnimations)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Animations</h1> <p>AngularJS 1.3 provides animation hooks for common directives such as <code>ngRepeat</code>, <code>ngSwitch</code>, and <code>ngView</code>, as well as custom directives via the <code>$animate</code> service. These animation hooks are set in place to trigger animations during the life cycle of various directives and when triggered, will attempt to perform a CSS Transition, CSS Keyframe Animation or a JavaScript callback Animation (depending on if an animation is placed on the given directive). Animations can be placed using vanilla CSS by following the naming conventions set in place by AngularJS or with JavaScript code when it's defined as a factory.</p> <p>Animations are not available unless you include the <a href=\"../api/nganimate\"><code>ngAnimate</code> module</a> as a dependency within your application.</p> <p>Below is a quick example of animations being enabled for <code>ngShow</code> and <code>ngHide</code>:</p>  <h2 id=\"installation\">Installation</h2> <p>See the <a href=\"../api/nganimate\">API docs for <code>ngAnimate</code></a> for instructions on installing the module.</p> <p>You may also want to setup a separate CSS file for defining CSS-based animations.</p> <h2 id=\"how-they-work\">How they work</h2> <p>Animations in AngularJS are completely based on CSS classes. As long as you have a CSS class attached to a HTML element within your website, you can apply animations to it. Lets say for example that we have an HTML template with a repeater in it like so:</p> <pre data-language=\"html\">&lt;div ng-repeat=\"item in items\" class=\"repeated-item\"&gt;\n  {{ item.id }}\n&lt;/div&gt;\n</pre> <p>As you can see, the <code>.repeated-item</code> class is present on the element that will be repeated and this class will be used as a reference within our application's CSS and/or JavaScript animation code to tell AngularJS to perform an animation.</p> <p>As ngRepeat does its thing, each time a new item is added into the list, ngRepeat will add a <code>ng-enter</code> class name to the element that is being added. When removed it will apply a <code>ng-leave</code> class name and when moved around it will apply a <code>ng-move</code> class name.</p> <p>Taking a look at the following CSS code, we can see some transition and keyframe animation code set for each of those events that occur when ngRepeat triggers them:</p> <pre data-language=\"css\">/*\n  We're using CSS transitions for when\n  the enter and move events are triggered\n  for the element that has the .repeated-item\n  class\n*/\n.repeated-item.ng-enter, .repeated-item.ng-move {\n  -webkit-transition:0.5s linear all;\n  -moz-transition:0.5s linear all;\n  -o-transition:0.5s linear all;\n  transition:0.5s linear all;\n  opacity:0;\n}\n\n/*\n The ng-enter-active and ng-move-active\n are where the transition destination properties\n are set so that the animation knows what to\n animate.\n*/\n.repeated-item.ng-enter.ng-enter-active,\n.repeated-item.ng-move.ng-move-active {\n  opacity:1;\n}\n\n/*\n  We're using CSS keyframe animations for when\n  the leave event is triggered for the element\n  that has the .repeated-item class\n*/\n.repeated-item.ng-leave {\n  -webkit-animation:0.5s my_animation;\n  -moz-animation:0.5s my_animation;\n  -o-animation:0.5s my_animation;\n  animation:0.5s my_animation;\n}\n\n@keyframes my_animation {\n  from { opacity:1; }\n  to { opacity:0; }\n}\n\n/*\n  Unfortunately each browser vendor requires\n  its own definition of keyframe animation code...\n*/\n@-webkit-keyframes my_animation {\n  from { opacity:1; }\n  to { opacity:0; }\n}\n\n@-moz-keyframes my_animation {\n  from { opacity:1; }\n  to { opacity:0; }\n}\n\n@-o-keyframes my_animation {\n  from { opacity:1; }\n  to { opacity:0; }\n}\n</pre> <p>The same approach to animation can be used using JavaScript code (<strong>jQuery is used within to perform animations</strong>):</p> <pre data-language=\"javascript\">myModule.animation('.repeated-item', function() {\n  return {\n    enter : function(element, done) {\n      element.css('opacity',0);\n      jQuery(element).animate({\n        opacity: 1\n      }, done);\n\n      // optional onDone or onCancel callback\n      // function to handle any post-animation\n      // cleanup operations\n      return function(isCancelled) {\n        if(isCancelled) {\n          jQuery(element).stop();\n        }\n      }\n    },\n    leave : function(element, done) {\n      element.css('opacity', 1);\n      jQuery(element).animate({\n        opacity: 0\n      }, done);\n\n      // optional onDone or onCancel callback\n      // function to handle any post-animation\n      // cleanup operations\n      return function(isCancelled) {\n        if(isCancelled) {\n          jQuery(element).stop();\n        }\n      }\n    },\n    move : function(element, done) {\n      element.css('opacity', 0);\n      jQuery(element).animate({\n        opacity: 1\n      }, done);\n\n      // optional onDone or onCancel callback\n      // function to handle any post-animation\n      // cleanup operations\n      return function(isCancelled) {\n        if(isCancelled) {\n          jQuery(element).stop();\n        }\n      }\n    },\n\n    // you can also capture these animation events\n    addClass : function(element, className, done) {},\n    removeClass : function(element, className, done) {}\n  }\n});\n</pre> <p>With these generated CSS class names present on the element at the time, AngularJS automatically figures out whether to perform a CSS and/or JavaScript animation. If both CSS and JavaScript animation code is present, and match the CSS class name on the element, then AngularJS will run both animations at the same time.</p> <h2 id=\"class-and-ngclass-animation-hooks\">Class and ngClass animation hooks</h2> <p>AngularJS also pays attention to CSS class changes on elements by triggering the <strong>add</strong> and <strong>remove</strong> hooks. This means that if a CSS class is added to or removed from an element then an animation can be executed in between, before the CSS class addition or removal is finalized. (Keep in mind that AngularJS will only be able to capture class changes if an <strong>expression</strong> or the <strong>ng-class</strong> directive is used on the element.)</p> <p>The example below shows how to perform animations during class changes:</p>  <p>Although the CSS is a little different than what we saw before, the idea is the same.</p> <h2 id=\"which-directives-support-animations-\">Which directives support animations?</h2> <p>A handful of common AngularJS directives support and trigger animation hooks whenever any major event occurs during its life cycle. The table below explains in detail which animation events are triggered</p> <table> <thead> <tr> <th>Directive</th> <th>Supported Animations</th> </tr> </thead> <tbody> <tr> <td><a href=\"../api/ng/directive/ngrepeat#animations.html\">ngRepeat</a></td> <td>enter, leave, and move</td> </tr> <tr> <td><a href=\"../api/ngroute/directive/ngview#animations.html\">ngView</a></td> <td>enter and leave</td> </tr> <tr> <td><a href=\"../api/ng/directive/nginclude#animations.html\">ngInclude</a></td> <td>enter and leave</td> </tr> <tr> <td><a href=\"../api/ng/directive/ngswitch#animations.html\">ngSwitch</a></td> <td>enter and leave</td> </tr> <tr> <td><a href=\"../api/ng/directive/ngif#animations.html\">ngIf</a></td> <td>enter and leave</td> </tr> <tr> <td><a href=\"../api/ng/directive/ngclass#animations.html\">ngClass or {{class}}</a></td> <td>add and remove</td> </tr> <tr> <td><a href=\"../api/ng/directive/ngshow#animations.html\">ngShow &amp; ngHide</a></td> <td>add and remove (the ng-hide class value)</td> </tr> </tbody> </table> <p>For a full breakdown of the steps involved during each animation event, refer to the <a href=\"../api/nganimate/service/%24animate\">API docs</a>.</p> <h2 id=\"how-do-i-use-animations-in-my-own-directives-\">How do I use animations in my own directives?</h2> <p>Animations within custom directives can also be established by injecting <code>$animate</code> directly into your directive and making calls to it when needed.</p> <pre data-language=\"javascript\">myModule.directive('my-directive', ['$animate', function($animate) {\n  return function(scope, element, attrs) {\n    element.on('click', function() {\n      if(element.hasClass('clicked')) {\n        $animate.removeClass(element, 'clicked');\n      } else {\n        $animate.addClass(element, 'clicked');\n      }\n    });\n  };\n}]);\n</pre> <h2 id=\"more-about-animations\">More about animations</h2> <p>For a full breakdown of each method available on <code>$animate</code>, see the <a href=\"../api/nganimate/service/%24animate\">API documentation</a>.</p> <p>To see a complete demo, see the <a href=\"tutorial/step_12\">animation step within the AngularJS phonecat tutorial</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/animations\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/animations</a>\n  </p>\n</div>\n","guide/security":"<h1 id=\"security\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/security.ngdoc?message=docs(guide%2FSecurity)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Security</h1> <p>This document explains some of AngularJS's security features and best practices that you should keep in mind as you build your application.</p> <h2 id=\"expression-sandboxing\">Expression Sandboxing</h2> <p>AngularJS's expressions are sandboxed not for security reasons, but instead to maintain a proper separation of application responsibilities. For example, access to <code>window</code> is disallowed because it makes it easy to introduce brittle global state into your application.</p> <p>However, this sandbox is not intended to stop attackers who can edit the template before it's processed by Angular. It may be possible to run arbitrary JavaScript inside double-curly bindings if an attacker can modify them.</p> <p>But if an attacker can change arbitrary HTML templates, there's nothing stopping them from doing:</p> <pre data-language=\"html\">&lt;script&gt;somethingEvil();&lt;/script&gt;\n</pre> <p>It's better to design your application in such a way that users cannot change client-side templates. For instance:</p> <ul> <li>Do not mix client and server templates</li> <li>Do not use user input to generate templates dynamically</li> <li>Do not run user input through <code>$scope.$eval</code>\n</li> <li>Consider using <a href=\"../api/ng/directive/ngcsp\">CSP</a> (but don't rely only on CSP)</li> </ul> <h2 id=\"mixing-client-side-and-server-side-templates\">Mixing client-side and server-side templates</h2> <p>In general, we recommend against this because it can create unintended XSS vectors.</p> <p>However, it's ok to mix server-side templating in the bootstrap template (<code>index.html</code>) as long as user input cannot be used on the server to output html that would then be processed by Angular in a way that would cause allow for arbitrary code execution.</p> <p>For instance, you can use server-side templating to dynamically generate CSS, URLs, etc, but not for generating templates that are bootstrapped/compiled by Angular.</p> <h2 id=\"reporting-a-security-issue\">Reporting a security issue</h2> <p>Email us at <a href=\"mailto:security@angularjs.org\">security@angularjs.org</a> to report any potential security issues in AngularJS.</p> <p>Please keep in mind the above points about Angular's expression language.</p> <h2 id=\"see-also\">See also</h2> <ul> <li><a href=\"../api/ng/directive/ngcsp\">Content Security Policy</a></li> <li><a href=\"../api/ng/service/%24sce\">Strict Contextual Escaping</a></li> <li><a href=\"../api/ngsanitize/service/%24sanitize\">$sanitize</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/security\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/security</a>\n  </p>\n</div>\n","guide/i18n":"<h1 id=\"i18n-and-l10n\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/i18n.ngdoc?message=docs(guide%2Fi18n%20and%20l10n)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>i18n and l10n</h1> <p>Internationalization (i18n) is the process of developing products in such a way that they can be localized for languages and cultures easily. Localization (l10n), is the process of adapting applications and text to enable their usability in a particular cultural or linguistic market. For application developers, internationalizing an application means abstracting all of the strings and other locale-specific bits (such as date or currency formats) out of the application. Localizing an application means providing translations and localized formats for the abstracted bits.</p> <h2 id=\"how-does-angular-support-i18n-l10n-\">How does Angular support i18n/l10n?</h2> <p>Angular supports i18n/l10n for <a href=\"../api/ng/filter/date\">date</a>, <a href=\"../api/ng/filter/number\">number</a> and <a href=\"../api/ng/filter/currency\">currency</a> filters.</p> <p>Additionally, Angular supports localizable pluralization support through the <a href=\"../api/ng/directive/ngpluralize\"><code>ngPluralize</code> directive</a>.</p> <p>All localizable Angular components depend on locale-specific rule sets managed by the <a href=\"../api/ng/service/%24locale\"><code>$locale</code> service</a>.</p> <p>There a few examples that showcase how to use Angular filters with various locale rule sets in the <a href=\"https://github.com/angular/angular.js/tree/master/i18n/e2e\"><code>i18n/e2e</code> directory</a> of the Angular source code.</p> <h2 id=\"what-is-a-locale-id-\">What is a locale ID?</h2> <p>A locale is a specific geographical, political, or cultural region. The most commonly used locale ID consists of two parts: language code and country code. For example, <code>en-US</code>, <code>en-AU</code>, and <code>zh-CN</code> are all valid locale IDs that have both language codes and country codes. Because specifying a country code in locale ID is optional, locale IDs such as <code>en</code>, <code>zh</code>, and <code>sk</code> are also valid. See the <a href=\"http://userguide.icu-project.org/locale\">ICU</a> website for more information about using locale IDs.</p> <h2 id=\"supported-locales-in-angular\">Supported locales in Angular</h2> <p>Angular separates number and datetime format rule sets into different files, each file for a particular locale. You can find a list of currently supported locales <a href=\"https://github.com/angular/angular.js/tree/master/src/ngLocale\">here</a></p> <h2 id=\"providing-locale-rules-to-angular\">Providing locale rules to Angular</h2> <p>There are two approaches to providing locale rules to Angular:</p> <h3 id=\"1-pre-bundled-rule-sets\">1. Pre-bundled rule sets</h3> <p>You can pre-bundle the desired locale file with Angular by concatenating the content of the locale-specific file to the end of <code>angular.js</code> or <code>angular.min.js</code> file.</p> <p>For example on *nix, to create an angular.js file that contains localization rules for german locale, you can do the following:</p> <p><code>cat angular.js i18n/angular-locale_de-de.js &gt; angular_de-de.js</code></p> <p>When the application containing <code>angular_de-de.js</code> script instead of the generic angular.js script starts, Angular is automatically pre-configured with localization rules for the german locale.</p> <h3 id=\"2-including-a-locale-script-in-index-html-\">2. Including a locale script in index.html</h3> <p>You can also include the locale specific js file in the index.html page. For example, if one client requires German locale, you would serve index_de-de.html which will look something like this:</p> <pre data-language=\"html\">&lt;html ng-app&gt;\n &lt;head&gt;\n….\n   &lt;script src=\"angular.js\"&gt;&lt;/script&gt;\n   &lt;script src=\"i18n/angular-locale_de-de.js\"&gt;&lt;/script&gt;\n….\n &lt;/head&gt;\n&lt;/html&gt;\n</pre> <h3 id=\"comparison-of-the-two-approaches\">Comparison of the two approaches</h3> <p>Both approaches described above require you to prepare different <code>index.html</code> pages or JavaScript files for each locale that your app may use. You also need to configure your server to serve the correct file that correspond to the desired locale.</p> <p>The second approach (including the locale JavaScript file in <code>index.html</code>) may be slower because an extra script needs to be loaded.</p> <h2 id=\"caveats\">Caveats</h2> <p>Although Angular makes i18n convenient, there are several things you need to be conscious of as you develop your app.</p> <h3 id=\"currency-symbol\">Currency symbol</h3> <p>Angular's <a href=\"../api/ng/filter/currency\">currency filter</a> allows you to use the default currency symbol from the <a href=\"../api/ng/service/%24locale\">locale service</a>, or you can provide the filter with a custom currency symbol.</p> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> If your app will be used only in one locale, it is fine to rely on the default currency symbol. If you anticipate that viewers in other locales might use your app, you should explicitly provide a currency symbol. </div> <p>Let's say you are writing a banking app and you want to display an account balance of 1000 dollars. You write the following binding using the currency filter:</p> <pre data-language=\"html\">{{ 1000 | currency }}\n</pre> <p>If your app is currently in the <code>en-US</code> locale, the browser will show <code>$1000.00</code>. If someone in the Japanese locale (<code>ja</code>) views your app, their browser will show a balance of <code>¥1000.00</code> instead. This is problematic because $1000 is not the same as ¥1000.</p> <p>In this case, you need to override the default currency symbol by providing the <a href=\"../api/ng/filter/currency\"><code>currency</code></a> currency filter with a currency symbol as a parameter.</p> <p>If we change the above to <code>{{ 1000 | currency:\"USD$\"}}</code>, Angular will always show a balance of <code>USD$1000</code> regardless of locale.</p> <h3 id=\"translation-length\">Translation length</h3> <p>Translated strings/datetime formats can vary greatly in length. For example, <code>June 3, 1977</code> will be translated to Spanish as <code>3 de junio de 1977</code>.</p> <p>When internationalizing your app, you need to do thorough testing to make sure UI components behave as expected even when their contents vary greatly in content size.</p> <h3 id=\"timezones\">Timezones</h3> <p>The Angular datetime filter uses the time zone settings of the browser. The same application will show different time information depending on the time zone settings of the computer that the application is running on. Neither JavaScript nor Angular currently supports displaying the date with a timezone specified by the developer.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/i18n\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/i18n</a>\n  </p>\n</div>\n","guide/services":"<h1 id=\"services\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/services.ngdoc?message=docs(guide%2FServices)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Services</h1> <p>Angular services are substitutable objects that are wired together using <a href=\"di\">dependency injection (DI)</a>. You can use services to organize and share code across your app.</p> <p>Angular services are:</p> <ul> <li>Lazily instantiated – Angular only instantiates a service when an application component depends on it.</li> <li>Singletons – Each component dependent on a service gets a reference to the single instance generated by the service factory.</li> </ul> <p>Angular offers several useful services (like <a href=\"../api/ng/service/%24http\"><code>$http</code></a>), but for most applications you'll also want to <a href=\"services#creating-services.html\">create your own</a>.</p> <div class=\"alert alert-info\"> <strong>Note:</strong> Like other core Angular identifiers, built-in services always start with <code>$</code> (e.g. <code>$http</code>). </div> <h2 id=\"using-a-service\">Using a Service</h2> <p>To use an Angular service, you add it as a dependency for the component (controller, service, filter or directive) that depends on the service. Angular's <a href=\"di\">dependency injection</a> subsystem takes care of the rest.</p>  <h2 id=\"creating-services\">Creating Services</h2> <p>Application developers are free to define their own services by registering the service's name and <strong>service factory function</strong>, with an Angular module.</p> <p>The <strong>service factory function</strong> generates the single object or function that represents the service to the rest of the application. The object or function returned by the service is injected into any component (controller, service, filter or directive) that specifies a dependency on the service.</p> <h3 id=\"registering-services\">Registering Services</h3> <p>Services are registered to modules via the <a href=\"../api/ng/type/angular.module\">Module API</a>. Typically you use the <a href=\"../api/ng/function/angular.module\">Module#factory</a> API to register a service:</p> <pre data-language=\"javascript\">var myModule = angular.module('myModule', []);\nmyModule.factory('serviceId', function() {\n  var shinyNewServiceInstance;\n  // factory function body that constructs shinyNewServiceInstance\n  return shinyNewServiceInstance;\n});\n</pre> <p>Note that you are not registering a <strong>service instance</strong>, but rather a <strong>factory function</strong> that will create this instance when called.</p> <h3 id=\"dependencies\">Dependencies</h3> <p>Services can have their own dependencies. Just like declaring dependencies in a controller, you declare dependencies by specifying them in the service's factory function signature.</p> <p>For more on dependencies, see the <a href=\"di\">dependency injection</a> docs.</p> <p>The example module below has two services, each with various dependencies:</p> <pre data-language=\"javascript\">var batchModule = angular.module('batchModule', []);\n\n/**\n * The `batchLog` service allows for messages to be queued in memory and flushed\n * to the console.log every 50 seconds.\n *\n * @param {*} message Message to be logged.\n */\nbatchModule.factory('batchLog', ['$interval', '$log', function($interval, $log) {\n  var messageQueue = [];\n\n  function log() {\n    if (messageQueue.length) {\n      $log.log('batchLog messages: ', messageQueue);\n      messageQueue = [];\n    }\n  }\n\n  // start periodic checking\n  $interval(log, 50000);\n\n  return function(message) {\n    messageQueue.push(message);\n  }\n}]);\n\n/**\n * `routeTemplateMonitor` monitors each `$route` change and logs the current\n * template via the `batchLog` service.\n */\nbatchModule.factory('routeTemplateMonitor', ['$route', 'batchLog', '$rootScope',\n  function($route, batchLog, $rootScope) {\n    $rootScope.$on('$routeChangeSuccess', function() {\n      batchLog($route.current ? $route.current.template : null);\n    });\n  }]);\n</pre> <p>In the example, note that:</p> <ul> <li>The <code>batchLog</code> service depends on the built-in <a href=\"../api/ng/service/%24interval\"><code>$interval</code></a> and <a href=\"../api/ng/service/%24log\"><code>$log</code></a> services.</li> <li>The <code>routeTemplateMonitor</code> service depends on the built-in <a href=\"../api/ngroute/service/%24route\"><code>$route</code></a> service and our custom <code>batchLog</code> service.</li> <li>Both services use the array notation to declare their dependencies.</li> <li>The order of identifiers in the array is the same as the order of argument names in the factory function.</li> </ul> <h3 id=\"registering-a-service-with-provide-\">Registering a Service with $provide</h3> <p>You can also register services via the <a href=\"../api/auto/service/%24provide\"><code>$provide</code></a> service inside of a module's <code>config</code> function:</p> <pre data-language=\"javascript\">angular.module('myModule', []).config(['$provide', function($provide) {\n  $provide.factory('serviceId', function() {\n    var shinyNewServiceInstance;\n    // factory function body that constructs shinyNewServiceInstance\n    return shinyNewServiceInstance;\n  });\n}]);\n</pre> <p>This technique is often used in unit tests to mock out a service's dependencies.</p> <h2 id=\"unit-testing\">Unit Testing</h2> <p>The following is a unit test for the <code>notify</code> service from the <a href=\"services#creating-services.html\">Creating Angular Services</a> example above. The unit test example uses a Jasmine spy (mock) instead of a real browser alert.</p> <pre data-language=\"javascript\">var mock, notify;\n\nbeforeEach(function() {\n  mock = {alert: jasmine.createSpy()};\n\n  module(function($provide) {\n    $provide.value('$window', mock);\n  });\n\n  inject(function($injector) {\n    notify = $injector.get('notify');\n  });\n});\n\nit('should not alert first two notifications', function() {\n  notify('one');\n  notify('two');\n\n  expect(mock.alert).not.toHaveBeenCalled();\n});\n\nit('should alert all after third notification', function() {\n  notify('one');\n  notify('two');\n  notify('three');\n\n  expect(mock.alert).toHaveBeenCalledWith(\"one\\ntwo\\nthree\");\n});\n\nit('should clear messages after alert', function() {\n  notify('one');\n  notify('two');\n  notify('third');\n  notify('more');\n  notify('two');\n  notify('third');\n\n  expect(mock.alert.callCount).toEqual(2);\n  expect(mock.alert.mostRecentCall.args).toEqual([\"more\\ntwo\\nthird\"]);\n});\n</pre> <h2 id=\"related-topics\">Related Topics</h2> <ul> <li><a href=\"di\">Dependency Injection in AngularJS</a></li> </ul> <h2 id=\"related-api\">Related API</h2> <ul> <li><a href=\"../api/ng/service\">Angular Service API</a></li> <li><a href=\"../api/ng/function/angular.injector\">Injector API</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/services\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/services</a>\n  </p>\n</div>\n","guide/scope":"<h1 id=\"what-are-scopes-\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/scope.ngdoc?message=docs(guide%2FScopes)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>What are Scopes?</h1> <p><a href=\"../api/ng/type/%24rootscope.scope\">Scope</a> is an object that refers to the application model. It is an execution context for <a href=\"expression\">expressions</a>. Scopes are arranged in hierarchical structure which mimic the DOM structure of the application. Scopes can watch <a href=\"expression\">expressions</a> and propagate events.</p> <h2 id=\"scope-characteristics\">Scope characteristics</h2> <ul> <li>\n<p>Scopes provide APIs (<a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">$watch</a>) to observe model mutations.</p> </li> <li>\n<p>Scopes provide APIs (<a href=\"../api/ng/type/%24rootscope.scope#%24apply.html\">$apply</a>) to propagate any model changes through the system into the view from outside of the \"Angular realm\" (controllers, services, Angular event handlers).</p> </li> <li>\n<p>Scopes can be nested to limit access to the properties of application components while providing access to shared model properties. Nested scopes are either \"child scopes\" or \"isolate scopes\". A \"child scope\" (prototypically) inherits properties from its parent scope. An \"isolate scope\" does not. See <a href=\"directive#isolating-the-scope-of-a-directive.html\">isolated scopes</a> for more information.</p> </li> <li>\n<p>Scopes provide context against which <a href=\"expression\">expressions</a> are evaluated. For example <code>{{username}}</code> expression is meaningless, unless it is evaluated against a specific scope which defines the <code>username</code> property.</p> </li> </ul> <h2 id=\"scope-as-data-model\">Scope as Data-Model</h2> <p>Scope is the glue between application controller and the view. During the template <a href=\"compiler\">linking</a> phase the <a href=\"../api/ng/provider/%24compileprovider#directive.html\">directives</a> set up <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\"><code>$watch</code></a> expressions on the scope. The <code>$watch</code> allows the directives to be notified of property changes, which allows the directive to render the updated value to the DOM.</p> <p>Both controllers and directives have reference to the scope, but not to each other. This arrangement isolates the controller from the directive as well as from the DOM. This is an important point since it makes the controllers view agnostic, which greatly improves the testing story of the applications.</p>  <p>In the above example notice that the <code>MyController</code> assigns <code>World</code> to the <code>username</code> property of the scope. The scope then notifies the <code>input</code> of the assignment, which then renders the input with username pre-filled. This demonstrates how a controller can write data into the scope.</p> <p>Similarly the controller can assign behavior to scope as seen by the <code>sayHello</code> method, which is invoked when the user clicks on the 'greet' button. The <code>sayHello</code> method can read the <code>username</code> property and create a <code>greeting</code> property. This demonstrates that the properties on scope update automatically when they are bound to HTML input widgets.</p> <p>Logically the rendering of <code>{{greeting}}</code> involves:</p> <ul> <li>\n<p>retrieval of the scope associated with DOM node where <code>{{greeting}}</code> is defined in template. In this example this is the same scope as the scope which was passed into <code>MyController</code>. (We will discuss scope hierarchies later.)</p> </li> <li>\n<p>Evaluate the <code>greeting</code> <a href=\"expression\">expression</a> against the scope retrieved above, and assign the result to the text of the enclosing DOM element.</p> </li> </ul> <p>You can think of the scope and its properties as the data which is used to render the view. The scope is the single source-of-truth for all things view related.</p> <p>From a testability point of view, the separation of the controller and the view is desirable, because it allows us to test the behavior without being distracted by the rendering details.</p> <pre data-language=\"javascript\">it('should say hello', function() {\n  var scopeMock = {};\n  var cntl = new MyController(scopeMock);\n\n  // Assert that username is pre-filled\n  expect(scopeMock.username).toEqual('World');\n\n  // Assert that we read new username and greet\n  scopeMock.username = 'angular';\n  scopeMock.sayHello();\n  expect(scopeMock.greeting).toEqual('Hello angular!');\n});\n</pre> <h2 id=\"scope-hierarchies\">Scope Hierarchies</h2> <p>Each Angular application has exactly one <a href=\"../api/ng/service/%24rootscope\">root scope</a>, but may have several child scopes.</p> <p>The application can have multiple scopes, because some <a href=\"directive\">directives</a> create new child scopes (refer to directive documentation to see which directives create new scopes). When new scopes are created, they are added as children of their parent scope. This creates a tree structure which parallels the DOM where they're attached.</p> <p>When Angular evaluates <code>{{name}}</code>, it first looks at the scope associated with the given element for the <code>name</code> property. If no such property is found, it searches the parent scope and so on until the root scope is reached. In JavaScript this behavior is known as prototypical inheritance, and child scopes prototypically inherit from their parents.</p> <p>This example illustrates scopes in application, and prototypical inheritance of properties. The example is followed by a diagram depicting the scope boundaries.</p>  <p><img class=\"center\" src=\"https://code.angularjs.org/1.3.20/docs/img/guide/concepts-scope.png\"></p> <p>Notice that Angular automatically places <code>ng-scope</code> class on elements where scopes are attached. The <code>&lt;style&gt;</code> definition in this example highlights in red the new scope locations. The child scopes are necessary because the repeater evaluates <code>{{name}}</code> expression, but depending on which scope the expression is evaluated it produces different result. Similarly the evaluation of <code>{{department}}</code> prototypically inherits from root scope, as it is the only place where the <code>department</code> property is defined.</p> <h2 id=\"retrieving-scopes-from-the-dom-\">Retrieving Scopes from the DOM.</h2> <p>Scopes are attached to the DOM as <code>$scope</code> data property, and can be retrieved for debugging purposes. (It is unlikely that one would need to retrieve scopes in this way inside the application.) The location where the root scope is attached to the DOM is defined by the location of <a href=\"../api/ng/directive/ngapp\"><code>ng-app</code></a> directive. Typically <code>ng-app</code> is placed on the <code>&lt;html&gt;</code> element, but it can be placed on other elements as well, if, for example, only a portion of the view needs to be controlled by Angular.</p> <p>To examine the scope in the debugger:</p> <ol> <li>\n<p>Right click on the element of interest in your browser and select 'inspect element'. You should see the browser debugger with the element you clicked on highlighted.</p> </li> <li>\n<p>The debugger allows you to access the currently selected element in the console as <code>$0</code> variable.</p> </li> <li>\n<p>To retrieve the associated scope in console execute: <code>angular.element($0).scope()</code> or just type $scope</p> </li> </ol> <h2 id=\"scope-events-propagation\">Scope Events Propagation</h2> <p>Scopes can propagate events in similar fashion to DOM events. The event can be <a href=\"../api/ng/type/%24rootscope.scope#%24broadcast.html\">broadcasted</a> to the scope children or <a href=\"../api/ng/type/%24rootscope.scope#%24emit.html\">emitted</a> to scope parents.</p>  <h2 id=\"scope-life-cycle\">Scope Life Cycle</h2> <p>The normal flow of a browser receiving an event is that it executes a corresponding JavaScript callback. Once the callback completes the browser re-renders the DOM and returns to waiting for more events.</p> <p>When the browser calls into JavaScript the code executes outside the Angular execution context, which means that Angular is unaware of model modifications. To properly process model modifications the execution has to enter the Angular execution context using the <a href=\"../api/ng/type/%24rootscope.scope#%24apply.html\"><code>$apply</code></a> method. Only model modifications which execute inside the <code>$apply</code> method will be properly accounted for by Angular. For example if a directive listens on DOM events, such as <a href=\"../api/ng/directive/ngclick\"><code>ng-click</code></a> it must evaluate the expression inside the <code>$apply</code> method.</p> <p>After evaluating the expression, the <code>$apply</code> method performs a <a href=\"../api/ng/type/%24rootscope.scope#%24digest.html\"><code>$digest</code></a>. In the $digest phase the scope examines all of the <code>$watch</code> expressions and compares them with the previous value. This dirty checking is done asynchronously. This means that assignment such as <code>$scope.username=\"angular\"</code> will not immediately cause a <code>$watch</code> to be notified, instead the <code>$watch</code> notification is delayed until the <code>$digest</code> phase. This delay is desirable, since it coalesces multiple model updates into one <code>$watch</code> notification as well as guarantees that during the <code>$watch</code> notification no other <code>$watch</code>es are running. If a <code>$watch</code> changes the value of the model, it will force additional <code>$digest</code> cycle.</p> <ol> <li>\n<p><strong>Creation</strong></p> <p>The <a href=\"../api/ng/service/%24rootscope\">root scope</a> is created during the application bootstrap by the <a href=\"../api/auto/service/%24injector\">$injector</a>. During template linking, some directives create new child scopes.</p> </li> <li>\n<p><strong>Watcher registration</strong></p> <p>During template linking directives register <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">watches</a> on the scope. These watches will be used to propagate model values to the DOM.</p> </li> <li>\n<p><strong>Model mutation</strong></p> <p>For mutations to be properly observed, you should make them only within the <a href=\"../api/ng/type/%24rootscope.scope#%24apply.html\">scope.$apply()</a>. Angular APIs do this implicitly, so no extra <code>$apply</code> call is needed when doing synchronous work in controllers, or asynchronous work with <a href=\"../api/ng/service/%24http\">$http</a>, <a href=\"../api/ng/service/%24timeout\">$timeout</a> or <a href=\"../api/ng/service/%24interval\">$interval</a> services.</p> </li> <li>\n<p><strong>Mutation observation</strong></p> <p>At the end of <code>$apply</code>, Angular performs a <a href=\"../api/ng/type/%24rootscope.scope#%24digest.html\">$digest</a> cycle on the root scope, which then propagates throughout all child scopes. During the <code>$digest</code> cycle, all <code>$watch</code>ed expressions or functions are checked for model mutation and if a mutation is detected, the <code>$watch</code> listener is called.</p> </li> <li>\n<p><strong>Scope destruction</strong></p> <p>When child scopes are no longer needed, it is the responsibility of the child scope creator to destroy them via <a href=\"../api/ng/type/%24rootscope.scope#%24destroy.html\">scope.$destroy()</a> API. This will stop propagation of <code>$digest</code> calls into the child scope and allow for memory used by the child scope models to be reclaimed by the garbage collector.</p> </li> </ol> <h3 id=\"scopes-and-directives\">Scopes and Directives</h3> <p>During the compilation phase, the <a href=\"compiler\">compiler</a> matches <a href=\"../api/ng/provider/%24compileprovider#directive.html\">directives</a> against the DOM template. The directives usually fall into one of two categories:</p> <ul> <li>\n<p>Observing <a href=\"../api/ng/provider/%24compileprovider#directive.html\">directives</a>, such as double-curly expressions <code>{{expression}}</code>, register listeners using the <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">$watch()</a> method. This type of directive needs to be notified whenever the expression changes so that it can update the view.</p> </li> <li>\n<p>Listener directives, such as <a href=\"../api/ng/directive/ngclick\">ng-click</a>, register a listener with the DOM. When the DOM listener fires, the directive executes the associated expression and updates the view using the <a href=\"../api/ng/type/%24rootscope.scope#%24apply.html\">$apply()</a> method.</p> </li> </ul> <p>When an external event (such as a user action, timer or XHR) is received, the associated <a href=\"expression\">expression</a> must be applied to the scope through the <a href=\"../api/ng/type/%24rootscope.scope#%24apply.html\">$apply()</a> method so that all listeners are updated correctly.</p> <h3 id=\"directives-that-create-scopes\">Directives that Create Scopes</h3> <p>In most cases, <a href=\"../api/ng/provider/%24compileprovider#directive.html\">directives</a> and scopes interact but do not create new instances of scope. However, some directives, such as <a href=\"../api/ng/directive/ngcontroller\">ng-controller</a> and <a href=\"../api/ng/directive/ngrepeat\">ng-repeat</a>, create new child scopes and attach the child scope to the corresponding DOM element. You can retrieve a scope for any DOM element by using an <code>angular.element(aDomElement).scope()</code> method call. See the <a href=\"directive#isolating-the-scope-of-a-directive.html\">directives guide</a> for more information about isolate scopes.</p> <h3 id=\"controllers-and-scopes\">Controllers and Scopes</h3> <p>Scopes and controllers interact with each other in the following situations:</p> <ul> <li>\n<p>Controllers use scopes to expose controller methods to templates (see <a href=\"../api/ng/directive/ngcontroller\">ng-controller</a>).</p> </li> <li>\n<p>Controllers define methods (behavior) that can mutate the model (properties on the scope).</p> </li> <li>\n<p>Controllers may register <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">watches</a> on the model. These watches execute immediately after the controller behavior executes.</p> </li> </ul> <p>See the <a href=\"../api/ng/directive/ngcontroller\">ng-controller</a> for more information.</p> <h3 id=\"scope-watch-performance-considerations\">Scope $watch Performance Considerations</h3> <p>Dirty checking the scope for property changes is a common operation in Angular and for this reason the dirty checking function must be efficient. Care should be taken that the dirty checking function does not do any DOM access, as DOM access is orders of magnitude slower than property access on JavaScript object.</p> <h3 id=\"scope-watch-depths\">Scope $watch Depths</h3> <p><img class=\"pull-right\" style=\"padding-left: 3em; padding-bottom: 1em;\" src=\"https://code.angularjs.org/1.3.20/docs/img/guide/concepts-scope-watch-strategies.png\"></p> <p>Dirty checking can be done with three strategies: By reference, by collection contents, and by value. The strategies differ in the kinds of changes they detect, and in their performance characteristics.</p> <ul> <li>Watching <em>by reference</em> (<a href=\"../api/ng/type/%24rootscope.scope#%24watch\">scope.$watch</a> <code>(watchExpression, listener)</code>) detects a change when the whole value returned by the watch expression switches to a new value. If the value is an array or an object, changes inside it are not detected. This is the most efficient strategy.</li> <li>Watching <em>collection contents</em> (<a href=\"../api/ng/type/%24rootscope.scope#%24watchCollection.html\">scope.$watchCollection</a> <code>(watchExpression, listener)</code>) detects changes that occur inside an array or an object: When items are added, removed, or reordered. The detection is shallow - it does not reach into nested collections. Watching collection contents is more expensive than watching by reference, because copies of the collection contents need to be maintained. However, the strategy attempts to minimize the amount of copying required.</li> <li>Watching <em>by value</em> (<a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">scope.$watch</a> <code>(watchExpression, listener, true)</code>) detects any change in an arbitrarily nested data structure. It is the most powerful change detection strategy, but also the most expensive. A full traversal of the nested data structure is needed on each digest, and a full copy of it needs to be held in memory.</li> </ul> <h2 id=\"integration-with-the-browser-event-loop\">Integration with the browser event loop</h2> <p><img class=\"pull-right\" style=\"padding-left: 3em; padding-bottom: 1em;\" src=\"https://code.angularjs.org/1.3.20/docs/img/guide/concepts-runtime.png\"></p> <p>The diagram and the example below describe how Angular interacts with the browser's event loop.</p> <ol> <li>The browser's event-loop waits for an event to arrive. An event is a user interaction, timer event, or network event (response from a server).</li> <li>The event's callback gets executed. This enters the JavaScript context. The callback can modify the DOM structure.</li> <li>Once the callback executes, the browser leaves the JavaScript context and re-renders the view based on DOM changes.</li> </ol> <p>Angular modifies the normal JavaScript flow by providing its own event processing loop. This splits the JavaScript into classical and Angular execution context. Only operations which are applied in the Angular execution context will benefit from Angular data-binding, exception handling, property watching, etc... You can also use $apply() to enter the Angular execution context from JavaScript. Keep in mind that in most places (controllers, services) $apply has already been called for you by the directive which is handling the event. An explicit call to $apply is needed only when implementing custom event callbacks, or when working with third-party library callbacks.</p> <ol> <li>Enter the Angular execution context by calling <a href=\"scope\">scope</a><code>.</code><a href=\"../api/ng/type/%24rootscope.scope#%24apply\">$apply</a><code>(stimulusFn)</code>, where <code>stimulusFn</code> is the work you wish to do in the Angular execution context.</li> <li>Angular executes the <code>stimulusFn()</code>, which typically modifies application state.</li> <li>Angular enters the <a href=\"../api/ng/type/%24rootscope.scope#%24digest.html\">$digest</a> loop. The loop is made up of two smaller loops which process <a href=\"../api/ng/type/%24rootscope.scope#%24evalAsync.html\">$evalAsync</a> queue and the <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">$watch</a> list. The <a href=\"../api/ng/type/%24rootscope.scope#%24digest.html\">$digest</a> loop keeps iterating until the model stabilizes, which means that the <a href=\"../api/ng/type/%24rootscope.scope#%24evalAsync.html\">$evalAsync</a> queue is empty and the <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">$watch</a> list does not detect any changes.</li> <li>The <a href=\"../api/ng/type/%24rootscope.scope#%24evalAsync.html\">$evalAsync</a> queue is used to schedule work which needs to occur outside of current stack frame, but before the browser's view render. This is usually done with <code>setTimeout(0)</code>, but the <code>setTimeout(0)</code> approach suffers from slowness and may cause view flickering since the browser renders the view after each event.</li> <li>The <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">$watch</a> list is a set of expressions which may have changed since last iteration. If a change is detected then the <code>$watch</code> function is called which typically updates the DOM with the new value.</li> <li>Once the Angular <a href=\"../api/ng/type/%24rootscope.scope#%24digest.html\">$digest</a> loop finishes the execution leaves the Angular and JavaScript context. This is followed by the browser re-rendering the DOM to reflect any changes.</li> </ol> <p>Here is the explanation of how the <code>Hello world</code> example achieves the data-binding effect when the user enters text into the text field.</p> <ol> <li>During the compilation phase:<ol> <li>the <a href=\"../api/ng/directive/ngmodel\">ng-model</a> and <a href=\"../api/ng/directive/input\">input</a> <a href=\"directive\">directive</a> set up a <code>keydown</code> listener on the <code>&lt;input&gt;</code> control.</li> <li>the <a href=\"../api/ng/service/%24interpolate\">interpolation</a> sets up a <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">$watch</a> to be notified of <code>name</code> changes.</li> </ol> </li> <li>During the runtime phase:<ol> <li>Pressing an '<code>X</code>' key causes the browser to emit a <code>keydown</code> event on the input control.</li> <li>The <a href=\"../api/ng/directive/input\">input</a> directive captures the change to the input's value and calls <a href=\"../api/ng/type/%24rootscope.scope#%24apply.html\">$apply</a><code>(\"name = 'X';\")</code> to update the application model inside the Angular execution context.</li> <li>Angular applies the <code>name = 'X';</code> to the model.</li> <li>The <a href=\"../api/ng/type/%24rootscope.scope#%24digest.html\">$digest</a> loop begins</li> <li>The <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">$watch</a> list detects a change on the <code>name</code> property and notifies the <a href=\"../api/ng/service/%24interpolate\">interpolation</a>, which in turn updates the DOM.</li> <li>Angular exits the execution context, which in turn exits the <code>keydown</code> event and with it the JavaScript execution context.</li> <li>The browser re-renders the view with update text.</li> </ol> </li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/scope\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/scope</a>\n  </p>\n</div>\n","guide/accessibility":"<h1 id=\"accessibility-with-ngaria\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/accessibility.ngdoc?message=docs(guide%2FAccessibility)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Accessibility with ngAria</h1> <p>The goal of ngAria is to improve Angular's default accessibility by enabling common <a href=\"http://www.w3.org/TR/wai-aria/\">ARIA</a> attributes that convey state or semantic information for assistive technologies used by persons with disabilities.</p> <h2 id=\"including-ngaria\">Including ngAria</h2> <p>Using <a href=\"../api/ngaria\">ngAria</a> is as simple as requiring the ngAria module in your application. ngAria hooks into standard AngularJS directives and quietly injects accessibility support into your application at runtime.</p> <pre data-language=\"javascript\">angular.module('myApp', ['ngAria'])...\n</pre> <h3 id=\"using-ngaria\">Using ngAria</h3> <p>Most of what ngAria does is only visible \"under the hood\". To see the module in action, once you've added it as a dependency, you can test a few things:</p> <ul> <li>Using your favorite element inspector, look for ngAria attributes in your own code.</li> <li>Test using your keyboard to ensure <code>tabindex</code> is used correctly.</li> <li>Fire up a screen reader such as VoiceOver to listen for ARIA support. <a href=\"http://webaim.org/articles/screenreader_testing/\">Helpful screen reader tips.</a>\n</li> </ul> <h2 id=\"supported-directives\">Supported directives</h2> <p>Currently, ngAria interfaces with the following directives:</p> <ul> <li><a href=\"accessibility#ngmodel.html\">ngModel</a></li> <li><a href=\"accessibility#ngdisabled.html\">ngDisabled</a></li> <li><a href=\"accessibility#ngshow.html\">ngShow</a></li> <li><a href=\"accessibility#nghide.html\">ngHide</a></li> <li><a href=\"accessibility#ngclick.html\">ngClick</a></li> <li><a href=\"accessibility#ngdblclick.html\">ngDblClick</a></li> <li><a href=\"accessibility#ngmessages.html\">ngMessages</a></li> </ul> <h2 id=\"ngmodel\">ngModel</h2> <p>Most of ngAria's heavy lifting happens in the <a href=\"../api/ng/directive/ngmodel\">ngModel</a> directive. For elements using ngModel, special attention is paid by ngAria if that element also has a a role or type of <code>checkbox</code>, <code>radio</code>, <code>range</code> or <code>textbox</code>.</p> <p>For those elements using ngModel, ngAria will dynamically bind and update the following ARIA attributes (if they have not been explicitly specified by the developer):</p> <ul> <li>aria-checked</li> <li>aria-valuemin</li> <li>aria-valuemax</li> <li>aria-valuenow</li> <li>aria-invalid</li> <li>aria-required</li> </ul>   <p>ngAria will also add <code>tabIndex</code>, ensuring custom elements with these roles will be reachable from the keyboard. It is still up to <strong>you</strong> as a developer to <strong>ensure custom controls will be operable</strong> from the keybard. Think of <code>ng-click</code> on a <code>&lt;div&gt;</code> or <code>&lt;md-checkbox&gt;</code>: you still need to bind <code>ng-keypress</code> to make it fully operable from the keyboard. As a rule, any time you create a widget involving user interaction, be sure to test it with your keyboard and at least one mobile and desktop screen reader (preferably more).</p> <h2 id=\"ngdisabled\">ngDisabled</h2> <p>The <code>disabled</code> attribute is only valid for certain elements such as <code>button</code>, <code>input</code> and <code>textarea</code>. To properly disable custom element directives such as <code>&lt;md-checkbox&gt;</code> or <code>&lt;taco-tab&gt;</code>, using ngAria with <a href=\"https://docs.angularjs.org/api/ng/directive/ngDisabled\">ngDisabled</a> will also add <code>aria-disabled</code>. This tells assistive technologies when a non-native input is disabled, helping custom controls to be more accessible.</p>  <pre data-language=\"html\">&lt;md-checkbox ng-disabled=\"disabled\"&gt;\n</pre> <p>Becomes:</p> <pre data-language=\"html\">&lt;md-checkbox disabled aria-disabled=\"true\"&gt;\n</pre> <blockquote> <p>You can check whether a control is legitimately disabled for a screen reader by visiting <a href=\"chrome://accessibility\">chrome://accessibility</a>.</p> </blockquote> <h2 id=\"ngshow\">ngShow</h2> <blockquote> <p>The <a href=\"https://docs.angularjs.org/api/ng/directive/ngShow\">ngShow</a> directive shows or hides the given HTML element based on the expression provided to the <code>ngShow</code> attribute. The element is shown or hidden by removing or adding the <code>.ng-hide</code> CSS class onto the element.</p> </blockquote> <p>In its default setup, ngAria for <code>ngShow</code> is actually redundant. It toggles <code>aria-hidden</code> on the directive when it is hidden or shown. However, the default CSS of <code>display: none !important</code>, already hides child elements from a screen reader. It becomes more useful when the default CSS is overridden with properties that don’t affect assistive technologies, such as <code>opacity</code> or <code>transform</code>. By toggling <code>aria-hidden</code> dynamically with ngAria, we can ensure content visually hidden with this technique will not be read aloud in a screen reader.</p> <p>One caveat with this combination of CSS and <code>aria-hidden</code>: you must also remove links and other interactive child elements from the tab order using <code>tabIndex=“-1”</code> on each control. This ensures screen reader users won't accidentally focus on \"mystery elements\". Managing tab index on every child control can be complex and affect performance, so it’s best to just stick with the default <code>display: none</code> CSS. See the <a href=\"http://www.w3.org/TR/aria-in-html/#fourth-rule-of-aria-use\">fourth rule of ARIA use</a>.</p>  <pre data-language=\"css\">.ng-hide {\n  display: block;\n  opacity: 0;\n}\n</pre> <pre data-language=\"html\">&lt;div ng-show=\"false\" class=\"ng-hide\" aria-hidden=\"true\"&gt;&lt;/div&gt;\n</pre> <p>Becomes:</p> <pre data-language=\"html\">&lt;div ng-show=\"true\" aria-hidden=\"false\"&gt;&lt;/div&gt;\n</pre> <p><em>Note: Child links, buttons or other interactive controls must also be removed from the tab order.</em></p> <h2 id=\"nghide\">ngHide</h2> <blockquote> <p>The <a href=\"https://docs.angularjs.org/api/ng/directive/ngHide\">ngHide</a> directive shows or hides the given HTML element based on the expression provided to the <code>ngHide</code> attribute. The element is shown or hidden by removing or adding the <code>.ng-hide</code> CSS class onto the element.</p> </blockquote> <p>The default CSS for <code>ngHide</code>, the inverse method to <code>ngShow</code>, makes ngAria redundant. It toggles <code>aria-hidden</code> on the directive when it is hidden or shown, but the content is already hidden with <code>display: none</code>. See explanation for <a href=\"accessibility#ngshow.html\">ngShow</a> when overriding the default CSS.</p> <h2>\n<span id=\"ngclick\">ngClick</span> and <span id=\"ngdblclick\">ngDblclick</span>\n</h2> If <code>ng-click</code> or <code>ng-dblclick</code> is encountered, ngAria will add <code>tabindex=\"0\"</code> if it isn't there already. To fix widespread accessibility problems with <code>ng-click</code> on div elements, ngAria will dynamically bind keypress by default as long as the element isn't an anchor, button, input or textarea. You can turn this functionality on or off with the <code>bindKeypress</code> configuration option. ngAria will also add the <code>button</code> role to communicate to users of assistive technologies. For <code>ng-dblclick</code>, you must still manually add <code>ng-keypress</code> and role to non-interactive elements such as <code>div</code> or <code>taco-button</code> to enable keyboard access. <h3>Example</h3> <code>html\n&lt;div ng-click=\"toggleMenu()\"&gt;&lt;/div&gt;</code> Becomes: <code>html\n&lt;div ng-click=\"toggleMenu()\" tabindex=\"0\"&gt;&lt;/div&gt;</code> <h2 id=\"ngmessages\">ngMessages</h2> <p>The new ngMessages module makes it easy to display form validation or other messages with priority sequencing and animation. To expose these visual messages to screen readers, ngAria injects <code>aria-live=\"assertive\"</code>, causing them to be read aloud any time a message is shown, regardless of the user's focus location.</p>  <pre data-language=\"html\">&lt;div ng-messages=\"myForm.myName.$error\"&gt;\n  &lt;div ng-message=\"required\"&gt;You did not enter a field&lt;/div&gt;\n  &lt;div ng-message=\"maxlength\"&gt;Your field is too long&lt;/div&gt;\n&lt;/div&gt;\n</pre> <p>Becomes:</p> <pre data-language=\"html\">&lt;div ng-messages=\"myForm.myName.$error\" aria-live=\"assertive\"&gt;\n  &lt;div ng-message=\"required\"&gt;You did not enter a field&lt;/div&gt;\n  &lt;div ng-message=\"maxlength\"&gt;Your field is too long&lt;/div&gt;\n&lt;/div&gt;\n</pre> <h2 id=\"disabling-attributes\">Disabling attributes</h2> <p>The attribute magic of ngAria may not work for every scenario. To disable individual attributes, you can use the <a href=\"../api/ngaria/provider/%24ariaprovider#config.html\">config</a> method. Just keep in mind this will tell ngAria to ignore the attribute globally.</p>  <h2 id=\"common-accessibility-patterns\">Common Accessibility Patterns</h2> <p>Accessibility best practices that apply to web apps in general also apply to Angular.</p> <ul> <li>\n<strong>Text alternatives</strong>: Add alternate text content to make visual information accessible using <a href=\"http://www.w3.org/TR/html-alt-techniques/\">these W3C guidelines</a>. The appropriate technique depends on the specific markup but can be accomplished using offscreen spans, <code>aria-label</code> or label elements, image <code>alt</code> attributes, <code>figure</code>/<code>figcaption</code> elements and more.</li> <li>\n<strong>HTML Semantics</strong>: If you're creating custom element directives, Web Components or HTML in general, use native elements wherever possible to utilize built-in events and properties. Alternatively, use ARIA to communicate semantic meaning. See <a href=\"http://www.w3.org/TR/aria-in-html/#notes-on-aria-use-in-html\">notes on ARIA use</a>.</li> <li>\n<strong>Focus management</strong>: Guide the user around the app as views are appended/removed. Focus should <em>never</em> be lost, as this causes unexpected behavior and much confusion (referred to as \"freak-out mode\").</li> <li>\n<strong>Announcing changes</strong>: When filtering or other UI messaging happens away from the user's focus, notify with <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\">ARIA Live Regions</a>.</li> <li>\n<strong>Color contrast and scale</strong>: Make sure content is legible and interactive controls are usable at all screen sizes. Consider configurable UI themes for people with color blindness, low vision or other visual impairments.</li> <li>\n<strong>Progressive enhancement</strong>: Some users do not browse with JavaScript enabled or do not have the latest browser. An accessible message about site requirements can inform users and improve the experience.</li> </ul> <h2 id=\"additional-resources\">Additional Resources</h2> <ul> <li><a href=\"http://www.w3.org/TR/aria-in-html/\">Using ARIA in HTML</a></li> <li><a href=\"https://www.youtube.com/watch?v=dmYDggEgU-s&amp;list=UUEGUP3TJJfMsEM_1y8iviSQ\">AngularJS Accessibility at ngEurope</a></li> <li><a href=\"http://webaim.org/articles/screenreader_testing/\">Testing with Screen Readers</a></li> <li><a href=\"https://chrome.google.com/webstore/detail/accessibility-developer-t/fpkknkljclfencbdbgkenhalefipecmb?hl=en\">Chrome Accessibility Developer Tools</a></li> <li><a href=\"http://www.w3.org/wiki/Accessibility_testing\">W3C Accessibility Testing</a></li> <li><a href=\"http://webaim.org\">WebAIM</a></li> <li><a href=\"http://a11yproject.com\">A11y Project</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/accessibility\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/accessibility</a>\n  </p>\n</div>\n","guide/unit-testing":"<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/unit-testing.ngdoc?message=docs(guide%2FUnit%20Testing)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> <p>JavaScript is a dynamically typed language which comes with great power of expression, but it also comes with almost no help from the compiler. For this reason we feel very strongly that any code written in JavaScript needs to come with a strong set of tests. We have built many features into Angular which makes testing your Angular applications easy. So there is no excuse for not testing.</p> <h2 id=\"separation-of-concerns\">Separation of Concerns</h2> <p>Unit testing, as the name implies, is about testing individual units of code. Unit tests try to answer questions such as \"Did I think about the logic correctly?\" or \"Does the sort function order the list in the right order?\"</p> <p>In order to answer such a question it is very important that we can isolate the unit of code under test. That is because when we are testing the sort function we don't want to be forced into creating related pieces such as the DOM elements, or making any XHR calls to fetch the data to sort.</p> <p>While this may seem obvious it can be very difficult to call an individual function on a typical project. The reason is that the developers often mix concerns resulting in a piece of code which does everything. It makes an XHR request, it sorts the response data and then it manipulates the DOM.</p> <p>With Angular we try to make it easy for you to do the right thing, and so we provide dependency injection for your XHR requests, which can be mocked, and we provide abstractions which allow you to test your model without having to resort to manipulating the DOM. The test can then assert that the data has been sorted without having to create or look at the state of the DOM or wait for any XHR requests to return data. The individual sort function can be tested in isolation.</p> <h2 id=\"with-great-power-comes-great-responsibility\">With great power comes great responsibility</h2> <p>Angular is written with testability in mind, but it still requires that you do the right thing. We tried to make the right thing easy, but if you ignore these guidelines you may end up with an untestable application.</p> <h2 id=\"dependency-injection\">Dependency Injection</h2> <p>Angular comes with <a href=\"di\">dependency injection</a> built-in, which makes testing components much easier, because you can pass in a component's dependencies and stub or mock them as you wish.</p> <p>Components that have their dependencies injected allow them to be easily mocked on a test by test basis, without having to mess with any global variables that could inadvertently affect another test.</p> <h2 id=\"additional-tools-for-testing-angular-applications\">Additional tools for testing Angular applications</h2> <p>For testing Angular applications there are certain tools that you should use that will make testing much easier to set up and run.</p> <h3 id=\"karma\">Karma</h3> <p><a href=\"http://karma-runner.github.io/\">Karma</a> is a JavaScript command line tool that can be used to spawn a web server which loads your application's source code and executes your tests. You can configure Karma to run against a number of browsers, which is useful for being confident that your application works on all browsers you need to support. Karma is executed on the command line and will display the results of your tests on the command line once they have run in the browser.</p> <p>Karma is a NodeJS application, and should be installed through npm. Full installation instructions are available on <a href=\"http://karma-runner.github.io/0.12/intro/installation.html\">the Karma website</a>.</p> <h3 id=\"jasmine\">Jasmine</h3> <p><a href=\"http://jasmine.github.io/1.3/introduction.html\">Jasmine</a> is a behavior driven development framework for JavaScript that has become the most popular choice for testing Angular applications. Jasmine provides functions to help with structuring your tests and also making assertions. As your tests grow, keeping them well structured and documented is vital, and Jasmine helps achieve this.</p> <p>In Jasmine we use the <code>describe</code> function to group our tests together:</p> <pre data-language=\"javascript\">describe(\"sorting the list of users\", function() {\n  // individual tests go here\n});\n</pre> <p>And then each individual test is defined within a call to the <code>it</code> function:</p> <pre data-language=\"javascript\">describe('sorting the list of users', function() {\n  it('sorts in descending order by default', function() {\n    // your test assertion goes here\n  });\n});\n</pre> <p>Grouping related tests within <code>describe</code> blocks and describing each individual test within an <code>it</code> call keeps your tests self documenting.</p> <p>Finally, Jasmine provides matchers which let you make assertions:</p> <pre data-language=\"javascript\">describe('sorting the list of users', function() {\n  it('sorts in descending order by default', function() {\n    var users = ['jack', 'igor', 'jeff'];\n    var sorted = sortUsers(users);\n    expect(sorted).toEqual(['jeff', 'jack', 'igor']);\n  });\n});\n</pre> <p>Jasmine comes with a number of matchers that help you make a variety of assertions. You should <a href=\"http://jasmine.github.io/1.3/introduction.html#section-Matchers\">read the Jasmine documentation</a> to see what they are. To use Jasmine with Karma, we use the <a href=\"https://github.com/karma-runner/karma-jasmine\">karma-jasmine</a> test runner.</p> <h3 id=\"angular-mocks\">angular-mocks</h3> <p>Angular also provides the <a href=\"../api/ngmock\"><code>ngMock</code></a> module, which provides mocking for your tests. This is used to inject and mock Angular services within unit tests. In addition, it is able to extend other modules so they are synchronous. Having tests synchronous keeps them much cleaner and easier to work with. One of the most useful parts of ngMock is <a href=\"../api/ngmock/service/%24httpbackend\"><code>$httpBackend</code></a>, which lets us mock XHR requests in tests, and return sample data instead.</p> <h2 id=\"testing-a-controller\">Testing a Controller</h2> <p>Because Angular separates logic from the view layer, it keeps controllers easy to test. Let's take a look at how we might test the controller below, which provides <code>$scope.grade</code>, which sets a property on the scope based on the length of the password.</p> <pre data-language=\"javascript\">angular.module('app', [])\n.controller('PasswordController', function PasswordController($scope) {\n  $scope.password = '';\n  $scope.grade = function() {\n    var size = $scope.password.length;\n    if (size &gt; 8) {\n      $scope.strength = 'strong';\n    } else if (size &gt; 3) {\n      $scope.strength = 'medium';\n    } else {\n      $scope.strength = 'weak';\n    }\n  };\n});\n</pre> <p>Because controllers are not available on the global scope, we need to use <a href=\"../api/ngmock/function/angular.mock.inject\"><code>angular.mock.inject</code></a> to inject our controller first. The first step is to use the <code>module</code> function, which is provided by angular-mocks. This loads in the module it's given, so it is available in your tests. We pass this into <code>beforeEach</code>, which is a function Jasmine provides that lets us run code before each test. Then we can use <code>inject</code> to access <code>$controller</code>, the service that is responsible for instantiating controllers.</p> <pre data-language=\"javascript\">describe('PasswordController', function() {\n  beforeEach(module('app'));\n\n  var $controller;\n\n  beforeEach(inject(function(_$controller_){\n    // The injector unwraps the underscores (_) from around the parameter names when matching\n    $controller = _$controller_;\n  }));\n\n  describe('$scope.grade', function() {\n    it('sets the strength to \"strong\" if the password length is &gt;8 chars', function() {\n      var $scope = {};\n      var controller = $controller('PasswordController', { $scope: $scope });\n      $scope.password = 'longerthaneightchars';\n      $scope.grade();\n      expect($scope.strength).toEqual('strong');\n    });\n  });\n});\n</pre> <p>Notice how by nesting the <code>describe</code> calls and being descriptive when calling them with strings, the test is very clear. It documents exactly what it is testing, and at a glance you can quickly see what is happening. Now let's add the test for when the password is less than three characters, which should see <code>$scope.strength</code> set to \"weak\":</p> <pre data-language=\"javascript\">describe('PasswordController', function() {\n  beforeEach(module('app'));\n\n  var $controller;\n\n  beforeEach(inject(function(_$controller_){\n    // The injector unwraps the underscores (_) from around the parameter names when matching\n    $controller = _$controller_;\n  }));\n\n  describe('$scope.grade', function() {\n    it('sets the strength to \"strong\" if the password length is &gt;8 chars', function() {\n      var $scope = {};\n      var controller = $controller('PasswordController', { $scope: $scope });\n      $scope.password = 'longerthaneightchars';\n      $scope.grade();\n      expect($scope.strength).toEqual('strong');\n    });\n\n    it('sets the strength to \"weak\" if the password length &lt;3 chars', function() {\n      var $scope = {};\n      var controller = $controller('PasswordController', { $scope: $scope });\n      $scope.password = 'a';\n      $scope.grade();\n      expect($scope.strength).toEqual('weak');\n    });\n  });\n});\n</pre> <p>Now we have two tests, but notice the duplication between the tests. Both have to create the <code>$scope</code> variable and create the controller. As we add new tests, this duplication is only going to get worse. Thankfully, Jasmine provides <code>beforeEach</code>, which lets us run a function before each individual test. Let's see how that would tidy up our tests:</p> <pre data-language=\"javascript\">describe('PasswordController', function() {\n  beforeEach(module('app'));\n\n  var $controller;\n\n  beforeEach(inject(function(_$controller_){\n    // The injector unwraps the underscores (_) from around the parameter names when matching\n    $controller = _$controller_;\n  }));\n\n  describe('$scope.grade', function() {\n    var $scope, controller;\n\n    beforeEach(function() {\n      $scope = {};\n      controller = $controller('PasswordController', { $scope: $scope });\n    });\n\n    it('sets the strength to \"strong\" if the password length is &gt;8 chars', function() {\n      $scope.password = 'longerthaneightchars';\n      $scope.grade();\n      expect($scope.strength).toEqual('strong');\n    });\n\n    it('sets the strength to \"weak\" if the password length &lt;3 chars', function() {\n      $scope.password = 'a';\n      $scope.grade();\n      expect($scope.strength).toEqual('weak');\n    });\n  });\n});\n</pre> <p>We've moved the duplication out and into the <code>beforeEach</code> block. Each individual test now only contains the code specific to that test, and not code that is general across all tests. As you expand your tests, keep an eye out for locations where you can use <code>beforeEach</code> to tidy up tests. <code>beforeEach</code> isn't the only function of this sort that Jasmine provides, and the <a href=\"http://jasmine.github.io/1.3/introduction.html#section-Setup_and_Teardown\">documentation lists the others</a>.</p> <h2 id=\"testing-filters\">Testing Filters</h2> <p><a href=\"../api/ng/provider/%24filterprovider\">Filters</a> are functions which transform the data into a user readable format. They are important because they remove the formatting responsibility from the application logic, further simplifying the application logic.</p> <pre data-language=\"javascript\">myModule.filter('length', function() {\n  return function(text) {\n    return ('' + (text || '')).length;\n  }\n});\n\ndescribe('length filter', function() {\n\n  beforeEach(inject(function(_$filter_){\n    $filter= _$filter_;\n  }));\n\n  it('returns 0 when given null', function() {\n    var length = $filter('length');\n    expect(length(null)).toEqual(0);\n  });\n\n  it('returns the correct value when given a string of chars', function() {\n    var length = $filter('length');\n    expect(length('abc')).toEqual(3);\n  });\n});\n</pre> <h2 id=\"testing-directives\">Testing Directives</h2> <p>Directives in angular are responsible for encapsulating complex functionality within custom HTML tags, attributes, classes or comments. Unit tests are very important for directives because the components you create with directives may be used throughout your application and in many different contexts.</p> <h3 id=\"simple-html-element-directive\">Simple HTML Element Directive</h3> <p>Let's start with an angular app with no dependencies.</p> <pre data-language=\"javascript\">var app = angular.module('myApp', []);\n</pre> <p>Now we can add a directive to our app.</p> <pre data-language=\"javascript\">app.directive('aGreatEye', function () {\n    return {\n        restrict: 'E',\n        replace: true,\n        template: '&lt;h1&gt;lidless, wreathed in flame, {{1 + 1}} times&lt;/h1&gt;'\n    };\n});\n</pre> <p>This directive is used as a tag <code>&lt;a-great-eye&gt;&lt;/a-great-eye&gt;</code>. It replaces the entire tag with the template <code>&lt;h1&gt;lidless, wreathed in flame, {{1 + 1}} times&lt;/h1&gt;</code>. Now we are going to write a jasmine unit test to verify this functionality. Note that the expression <code>{{1 + 1}}</code> times will also be evaluated in the rendered content.</p> <pre data-language=\"javascript\">describe('Unit testing great quotes', function() {\n  var $compile,\n      $rootScope;\n\n  // Load the myApp module, which contains the directive\n  beforeEach(module('myApp'));\n\n  // Store references to $rootScope and $compile\n  // so they are available to all tests in this describe block\n  beforeEach(inject(function(_$compile_, _$rootScope_){\n    // The injector unwraps the underscores (_) from around the parameter names when matching\n    $compile = _$compile_;\n    $rootScope = _$rootScope_;\n  }));\n\n  it('Replaces the element with the appropriate content', function() {\n    // Compile a piece of HTML containing the directive\n    var element = $compile(\"&lt;a-great-eye&gt;&lt;/a-great-eye&gt;\")($rootScope);\n    // fire all the watches, so the scope expression {{1 + 1}} will be evaluated\n    $rootScope.$digest();\n    // Check that the compiled element contains the templated content\n    expect(element.html()).toContain(\"lidless, wreathed in flame, 2 times\");\n  });\n});\n</pre> <p>We inject the $compile service and $rootScope before each jasmine test. The $compile service is used to render the aGreatEye directive. After rendering the directive we ensure that the directive has replaced the content and \"lidless, wreathed in flame, 2 times\" is present.</p> <div class=\"alert alert-info\"> <strong>Underscore notation</strong>: The use of the underscore notation (e.g.: <code>_$rootScope_</code>) is a convention wide spread in AngularJS community to keep the variable names clean in your tests. That's why the <a href=\"../api/auto/service/%24injector\"><code>$injector</code></a> strips out the leading and the trailing underscores when matching the parameters. The underscore rule applies <strong><em>only</em></strong> if the name starts <strong>and</strong> ends with exactly one underscore, otherwise no replacing happens. </div> <h3 id=\"testing-transclusion-directives\">Testing Transclusion Directives</h3> <p>Directives that use transclusion are treated specially by the compiler. Before their compile function is called, the contents of the directive's element are removed from the element and provided via a transclusion function. The directive's template is then appended to the directive's element, to which it can then insert the transcluded content into its template.</p> <p>Before compilation:</p> <pre data-language=\"html\">&lt;div translude-directive&gt;\n  Some transcluded content\n&lt;/div&gt;\n</pre> <p>After transclusion extraction:</p> <pre data-language=\"html\">&lt;div transclude-directive&gt;&lt;/div&gt;\n</pre> <p>After compilation:</p> <pre data-language=\"html\">&lt;div transclude-directive&gt;\n  Some Template\n  &lt;span ng-transclude&gt;Some transcluded content&lt;/span&gt;\n&lt;/div&gt;\n</pre> <p>If the directive is using 'element' transclusion, the compiler will actually remove the directive's entire element from the DOM and replace it with a comment node. The compiler then inserts the directive's template \"after\" this comment node, as a sibling.</p> <p>Before compilation</p> <pre data-language=\"html\">&lt;div element-transclude&gt;\n  Some Content\n&lt;/div&gt;\n</pre> <p>After transclusion extraction</p> <pre data-language=\"html\">&lt;!-- elementTransclude --&gt;\n</pre> <p>After compilation:</p> <pre data-language=\"html\">&lt;!-- elementTransclude --&gt;\n&lt;div element-transclude&gt;\n  Some Template\n  &lt;span ng-transclude&gt;Some transcluded content&lt;/span&gt;\n&lt;/div&gt;\n</pre> <p>It is important to be aware of this when writing tests for directives that use 'element' transclusion. If you place the directive on the root element of the DOM fragment that you pass to <a href=\"../api/ng/service/%24compile\"><code>$compile</code></a>, then the DOM node returned from the linking function will be the comment node and you will lose the ability to access the template and transcluded content.</p> <pre data-language=\"javascript\">var node = $compile('&lt;div element-transclude&gt;&lt;/div&gt;')($rootScope);\nexpect(node[0].nodeType).toEqual(node.COMMENT_NODE);\nexpect(node[1]).toBeUndefined();\n</pre> <p>To cope with this you simply ensure that your 'element' transclude directive is wrapped in an element, such as a <code>&lt;div&gt;</code>.</p> <pre data-language=\"javascript\">var node = $compile('&lt;div&gt;&lt;div element-transclude&gt;&lt;/div&gt;&lt;/div&gt;')($rootScope);\nvar contents = node.contents();\nexpect(contents[0].nodeType).toEqual(node.COMMENT_NODE);\nexpect(contents[1].nodeType).toEqual(node.ELEMENT_NODE);\n</pre> <h3 id=\"testing-directives-with-external-templates\">Testing Directives With External Templates</h3> <p>If your directive uses <code>templateUrl</code>, consider using <a href=\"https://github.com/karma-runner/karma-ng-html2js-preprocessor\">karma-ng-html2js-preprocessor</a> to pre-compile HTML templates and thus avoid having to load them over HTTP during test execution. Otherwise you may run into issues if the test directory hierarchy differs from the application's.</p> <h2 id=\"sample-project\">Sample project</h2> <p>See the <a href=\"https://github.com/angular/angular-seed\">angular-seed</a> project for an example.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/unit-testing\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/unit-testing</a>\n  </p>\n</div>\n","guide/ie":"<h1 id=\"internet-explorer-compatibility\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/ie.ngdoc?message=docs(guide%2FInternet%20Explorer%20Compatibility)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Internet Explorer Compatibility</h1>  <strong>Note:</strong> AngularJS 1.3 has dropped support for IE8. Read more about it on <a href=\"http://blog.angularjs.org/2013/12/angularjs-13-new-release-approaches.html\">our blog</a>. AngularJS 1.2 will continue to support IE8, but the core team does not plan to spend time addressing issues specific to IE8 or earlier.  <p>This document describes the Internet Explorer (IE) idiosyncrasies when dealing with custom HTML attributes and tags. Read this document if you are planning on deploying your Angular application on IE.</p> <p>The project currently supports and will attempt to fix bugs for IE9 and above. The continuous integration server runs all the tests against IE9, IE10, and IE11. See <a href=\"https://travis-ci.org/angular/angular.js\">Travis CI</a> and <a href=\"http://ci.angularjs.org\">ci.angularjs.org</a>.</p> <p>We do not run tests on IE8 and below. A subset of the AngularJS functionality may work on these browsers, but it is up to you to test and decide whether it works for your particular app.</p> <p>To ensure your Angular application works on IE please consider:</p> <ol> <li>Use <code>ng-style</code> tags instead of <code>style=\"{{ someCss }}\"</code>. The latter works in Chrome and Firefox but does not work in Internet Explorer &lt;= 11 (the most recent version at time of writing).</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/ie\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/ie</a>\n  </p>\n</div>\n","guide/module":"<h1 id=\"what-is-a-module-\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/module.ngdoc?message=docs(guide%2FModules)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>What is a Module?</h1> <p>You can think of a module as a container for the different parts of your app – controllers, services, filters, directives, etc.</p> <h2 id=\"why-\">Why?</h2> <p>Most applications have a main method that instantiates and wires together the different parts of the application.</p> <p>Angular apps don't have a main method. Instead modules declaratively specify how an application should be bootstrapped. There are several advantages to this approach:</p> <ul> <li>The declarative process is easier to understand.</li> <li>You can package code as reusable modules.</li> <li>The modules can be loaded in any order (or even in parallel) because modules delay execution.</li> <li>Unit tests only have to load relevant modules, which keeps them fast.</li> <li>End-to-end tests can use modules to override configuration.</li> </ul> <h2 id=\"the-basics\">The Basics</h2> <p>I'm in a hurry. How do I get a Hello World module working?</p>  <p>Important things to notice:</p> <ul> <li>The <a href=\"../api/ng/type/angular.module\">Module</a> API</li> <li>The reference to <code>myApp</code> module in <code>&lt;div ng-app=\"myApp\"&gt;</code>. This is what bootstraps the app using your module.</li> <li>The empty array in <code>angular.module('myApp', [])</code>. This array is the list of modules <code>myApp</code> depends on.</li> </ul> <h2 id=\"recommended-setup\">Recommended Setup</h2> <p>While the example above is simple, it will not scale to large applications. Instead we recommend that you break your application to multiple modules like this:</p> <ul> <li>A module for each feature</li> <li>A module for each reusable component (especially directives and filters)</li> <li>And an application level module which depends on the above modules and contains any initialization code.</li> </ul> <p>We've also <a href=\"http://angularjs.blogspot.com/2014/02/an-angularjs-style-guide-and-best.html\">written a document</a> on how we organize large apps at Google.</p> <p>The above is a suggestion. Tailor it to your needs.</p>  <h2 id=\"module-loading-dependencies\">Module Loading &amp; Dependencies</h2> <p>A module is a collection of configuration and run blocks which get applied to the application during the bootstrap process. In its simplest form the module consist of a collection of two kinds of blocks:</p> <ol> <li>\n<strong>Configuration blocks</strong> - get executed during the provider registrations and configuration phase. Only providers and constants can be injected into configuration blocks. This is to prevent accidental instantiation of services before they have been fully configured.</li> <li>\n<strong>Run blocks</strong> - get executed after the injector is created and are used to kickstart the application. Only instances and constants can be injected into run blocks. This is to prevent further system configuration during application run time.</li> </ol> <pre data-language=\"javascript\">angular.module('myModule', []).\nconfig(function(injectables) { // provider-injector\n  // This is an example of config block.\n  // You can have as many of these as you want.\n  // You can only inject Providers (not instances)\n  // into config blocks.\n}).\nrun(function(injectables) { // instance-injector\n  // This is an example of a run block.\n  // You can have as many of these as you want.\n  // You can only inject instances (not Providers)\n  // into run blocks\n});\n</pre> <h2 id=\"configuration-blocks\">Configuration Blocks</h2> <p>There are some convenience methods on the module which are equivalent to the <code>config</code> block. For example:</p> <pre data-language=\"javascript\">angular.module('myModule', []).\n  value('a', 123).\n  factory('a', function() { return 123; }).\n  directive('directiveName', ...).\n  filter('filterName', ...);\n\n// is same as\n\nangular.module('myModule', []).\n  config(function($provide, $compileProvider, $filterProvider) {\n    $provide.value('a', 123);\n    $provide.factory('a', function() { return 123; });\n    $compileProvider.directive('directiveName', ...);\n    $filterProvider.register('filterName', ...);\n  });\n</pre> <div class=\"alert alert-info\"> When bootstrapping, first Angular applies all constant definitions. Then Angular applies configuration blocks in the same order they were registered. </div> <h2 id=\"run-blocks\">Run Blocks</h2> <p>Run blocks are the closest thing in Angular to the main method. A run block is the code which needs to run to kickstart the application. It is executed after all of the service have been configured and the injector has been created. Run blocks typically contain code which is hard to unit-test, and for this reason should be declared in isolated modules, so that they can be ignored in the unit-tests.</p> <h2 id=\"dependencies\">Dependencies</h2> <p>Modules can list other modules as their dependencies. Depending on a module implies that required module needs to be loaded before the requiring module is loaded. In other words the configuration blocks of the required modules execute before the configuration blocks of the requiring module. The same is true for the run blocks. Each module can only be loaded once, even if multiple other modules require it.</p> <h2 id=\"asynchronous-loading\">Asynchronous Loading</h2> <p>Modules are a way of managing $injector configuration, and have nothing to do with loading of scripts into a VM. There are existing projects which deal with script loading, which may be used with Angular. Because modules do nothing at load time they can be loaded into the VM in any order and thus script loaders can take advantage of this property and parallelize the loading process.</p> <h2 id=\"creation-versus-retrieval\">Creation versus Retrieval</h2> <p>Beware that using <code>angular.module('myModule', [])</code> will create the module <code>myModule</code> and overwrite any existing module named <code>myModule</code>. Use <code>angular.module('myModule')</code> to retrieve an existing module.</p> <pre data-language=\"javascript\">var myModule = angular.module('myModule', []);\n\n// add some directives and services\nmyModule.service('myService', ...);\nmyModule.directive('myDirective', ...);\n\n// overwrites both myService and myDirective by creating a new module\nvar myModule = angular.module('myModule', []);\n\n// throws an error because myOtherModule has yet to be defined\nvar myModule = angular.module('myOtherModule');\n</pre> <h2 id=\"unit-testing\">Unit Testing</h2> <p>A unit test is a way of instantiating a subset of an application to apply stimulus to it. Small, structured modules help keep unit tests concise and focused.</p> <div class=\"did you know...\"> Each module can only be loaded once per injector. Usually an Angular app has only one injector and modules are only loaded once. Each test has its own injector and modules are loaded multiple times. </div> <p>In all of these examples we are going to assume this module definition:</p> <pre data-language=\"javascript\">angular.module('greetMod', []).\n\nfactory('alert', function($window) {\n  return function(text) {\n    $window.alert(text);\n  }\n}).\n\nvalue('salutation', 'Hello').\n\nfactory('greet', function(alert, salutation) {\n  return function(name) {\n    alert(salutation + ' ' + name + '!');\n  }\n});\n</pre> <p>Let's write some tests to show how to override configuration in tests.</p> <pre data-language=\"javascript\">describe('myApp', function() {\n  // load application module (`greetMod`) then load a special\n  // test module which overrides `$window` with a mock version,\n  // so that calling `window.alert()` will not block the test\n  // runner with a real alert box.\n  beforeEach(module('greetMod', function($provide) {\n    $provide.value('$window', {\n      alert: jasmine.createSpy('alert')\n    });\n  }));\n\n  // inject() will create the injector and inject the `greet` and\n  // `$window` into the tests.\n  it('should alert on $window', inject(function(greet, $window) {\n    greet('World');\n    expect($window.alert).toHaveBeenCalledWith('Hello World!');\n  }));\n\n  // this is another way of overriding configuration in the\n  // tests using inline `module` and `inject` methods.\n  it('should alert using the alert service', function() {\n    var alertSpy = jasmine.createSpy('alert');\n    module(function($provide) {\n      $provide.value('alert', alertSpy);\n    });\n    inject(function(greet) {\n      greet('World');\n      expect(alertSpy).toHaveBeenCalledWith('Hello World!');\n    });\n  });\n});\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/module\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/module</a>\n  </p>\n</div>\n","guide/templates":"<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/templates.ngdoc?message=docs(guide%2FTemplates)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a> <p>In Angular, templates are written with HTML that contains Angular-specific elements and attributes. Angular combines the template with information from the model and controller to render the dynamic view that a user sees in the browser.</p> <p>These are the types of Angular elements and attributes you can use:</p> <ul> <li>\n<a href=\"directive\">Directive</a> — An attribute or element that augments an existing DOM element or represents a reusable DOM component.</li> <li>\n<a href=\"../api/ng/service/%24interpolate\">Markup</a> — The double curly brace notation <code>{{ }}</code> to bind expressions to elements is built-in Angular markup.</li> <li>\n<a href=\"filter\">Filter</a> — Formats data for display.</li> <li>\n<a href=\"forms\">Form controls</a> — Validates user input.</li> </ul> <p>The following code snippet shows a template with <a href=\"directive\">directives</a> and curly-brace <a href=\"expression\">expression</a> bindings:</p> <pre data-language=\"html\">&lt;html ng-app&gt;\n &lt;!-- Body tag augmented with ngController directive  --&gt;\n &lt;body ng-controller=\"MyController\"&gt;\n   &lt;input ng-model=\"foo\" value=\"bar\"&gt;\n   &lt;!-- Button tag with ng-click directive, and\n          string expression 'buttonText'\n          wrapped in \"{{ }}\" markup --&gt;\n   &lt;button ng-click=\"changeFoo()\"&gt;{{buttonText}}&lt;/button&gt;\n   &lt;script src=\"angular.js\"&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>In a simple app, the template consists of HTML, CSS, and Angular directives contained in just one HTML file (usually <code>index.html</code>).</p> <p>In a more complex app, you can display multiple views within one main page using \"partials\" – segments of template located in separate HTML files. You can use the <a href=\"../api/ngroute/directive/ngview\">ngView</a> directive to load partials based on configuration passed to the <a href=\"../api/ngroute/service/%24route\">$route</a> service. The <a href=\"tutorial/\">angular tutorial</a> shows this technique in steps seven and eight.</p> <h2 id=\"related-topics\">Related Topics</h2> <ul> <li><a href=\"filter\">Filters</a></li> <li><a href=\"forms\">Forms</a></li> </ul> <h2 id=\"related-api\">Related API</h2> <ul> <li><a href=\"api\">API Reference</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/templates\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/templates</a>\n  </p>\n</div>\n","guide/directive":"<h1 id=\"creating-custom-directives\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/directive.ngdoc?message=docs(guide%2FDirectives)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Creating Custom Directives</h1>  <strong>Note:</strong> this guide is targeted towards developers who are already familiar with AngularJS basics. If you're just getting started, we recommend the <a href=\"tutorial/\">tutorial</a> first. If you're looking for the <strong>directives API</strong>, we recently moved it to <a href=\"../api/ng/service/%24compile\"><code>$compile</code></a>.  <p>This document explains when you'd want to create your own directives in your AngularJS app, and how to implement them.</p> <h2 id=\"what-are-directives-\">What are Directives?</h2> <p>At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS's <strong>HTML compiler</strong> (<a href=\"../api/ng/service/%24compile\"><code>$compile</code></a>) to attach a specified behavior to that DOM element or even transform the DOM element and its children.</p> <p>Angular comes with a set of these directives built-in, like <code>ngBind</code>, <code>ngModel</code>, and <code>ngClass</code>. Much like you create controllers and services, you can create your own directives for Angular to use. When Angular <a href=\"bootstrap\">bootstraps</a> your application, the <a href=\"compiler\">HTML compiler</a> traverses the DOM matching directives against the DOM elements.</p> <div class=\"alert alert-info\"> <strong>What does it mean to \"compile\" an HTML template?</strong> For AngularJS, \"compilation\" means attaching event listeners to the HTML to make it interactive. The reason we use the term \"compile\" is that the recursive process of attaching directives mirrors the process of compiling source code in <a href=\"http://en.wikipedia.org/wiki/Compiled_languages\">compiled programming languages</a>. </div> <h2 id=\"matching-directives\">Matching Directives</h2> <p>Before we can write a directive, we need to know how Angular's <a href=\"compiler\">HTML compiler</a> determines when to use a given directive.</p> <p>In the following example, we say that the <code>&lt;input&gt;</code> element <strong>matches</strong> the <code>ngModel</code> directive.</p> <pre data-language=\"html\">&lt;input ng-model=\"foo\"&gt;\n</pre> <p>The following also <strong>matches</strong> <code>ngModel</code>:</p> <pre data-language=\"html\">&lt;input data-ng-model=\"foo\"&gt;\n</pre> <h3 id=\"normalization\">Normalization</h3> <p>Angular <strong>normalizes</strong> an element's tag and attribute name to determine which elements match which directives. We typically refer to directives by their case-sensitive <a href=\"http://en.wikipedia.org/wiki/CamelCase\">camelCase</a> <strong>normalized</strong> name (e.g. <code>ngModel</code>). However, since HTML is case-insensitive, we refer to directives in the DOM by lower-case forms, typically using <a href=\"http://en.wikipedia.org/wiki/Letter_case#Computers\">dash-delimited</a> attributes on DOM elements (e.g. <code>ng-model</code>).</p> <p>The <strong>normalization</strong> process is as follows:</p> <ol> <li>Strip <code>x-</code> and <code>data-</code> from the front of the element/attributes.</li> <li>Convert the <code>:</code>, <code>-</code>, or <code>_</code>-delimited name to <code>camelCase</code>.</li> </ol> <p>For example, the following forms are all equivalent and match the <a href=\"../api/ng/directive/ngbind\"><code>ngBind</code></a> directive:</p>  <div class=\"alert alert-success\"> <strong>Best Practice:</strong> Prefer using the dash-delimited format (e.g. <code>ng-bind</code> for <code>ngBind</code>). If you want to use an HTML validating tool, you can instead use the <code>data</code>-prefixed version (e.g. <code>data-ng-bind</code> for <code>ngBind</code>). The other forms shown above are accepted for legacy reasons but we advise you to avoid them. </div> <h3 id=\"directive-types\">Directive types</h3> <p><code>$compile</code> can match directives based on element names, attributes, class names, as well as comments.</p> <p>All of the Angular-provided directives match attribute name, tag name, comments, or class name. The following demonstrates the various ways a directive (<code>myDir</code> in this case) can be referenced from within a template:</p> <pre data-language=\"html\">&lt;my-dir&gt;&lt;/my-dir&gt;\n&lt;span my-dir=\"exp\"&gt;&lt;/span&gt;\n&lt;!-- directive: my-dir exp --&gt;\n&lt;span class=\"my-dir: exp;\"&gt;&lt;/span&gt;\n</pre> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> Prefer using directives via tag name and attributes over comment and class names. Doing so generally makes it easier to determine what directives a given element matches. </div> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> Comment directives were commonly used in places where the DOM API limits the ability to create directives that spanned multiple elements (e.g. inside <code>&lt;table&gt;</code> elements). AngularJS 1.2 introduces <a href=\"../api/ng/directive/ngrepeat\"><code>ng-repeat-start</code> and <code>ng-repeat-end</code></a> as a better solution to this problem. Developers are encouraged to use this over custom comment directives when possible. </div> <h3 id=\"text-and-attribute-bindings\">Text and attribute bindings</h3> <p>During the compilation process the <a href=\"../api/ng/service/%24compile\">compiler</a> matches text and attributes using the <a href=\"../api/ng/service/%24interpolate\">$interpolate</a> service to see if they contain embedded expressions. These expressions are registered as <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">watches</a> and will update as part of normal <a href=\"../api/ng/type/%24rootscope.scope#%24digest.html\">digest</a> cycle. An example of interpolation is shown below:</p> <pre data-language=\"html\">&lt;a ng-href=\"img/{{username}}.jpg\"&gt;Hello {{username}}!&lt;/a&gt;\n</pre> <h3 id=\"-ngattr-attribute-bindings\">ngAttr attribute bindings</h3> <p>Web browsers are sometimes picky about what values they consider valid for attributes.</p> <p>For example, considering this template:</p> <pre data-language=\"html\">&lt;svg&gt;\n  &lt;circle cx=\"{{cx}}\"&gt;&lt;/circle&gt;\n&lt;/svg&gt;\n</pre> <p>We would expect Angular to be able to bind to this, but when we check the console we see something like <code>Error: Invalid value for attribute cx=\"{{cx}}\"</code>. Because of the SVG DOM API's restrictions, you cannot simply write <code>cx=\"{{cx}}\"</code>.</p> <p>With <code>ng-attr-cx</code> you can work around this problem.</p> <p>If an attribute with a binding is prefixed with the <code>ngAttr</code> prefix (denormalized as <code>ng-attr-</code>) then during the binding it will be applied to the corresponding unprefixed attribute. This allows you to bind to attributes that would otherwise be eagerly processed by browsers (e.g. an SVG element's <code>circle[cx]</code> attributes). When using <code>ngAttr</code>, the <code>allOrNothing</code> flag of <a href=\"../api/ng/service/%24interpolate\">$interpolate</a> is used, so if any expression in the interpolated string results in <code>undefined</code>, the attribute is removed and not added to the element.</p> <p>For example, we could fix the example above by instead writing:</p> <pre data-language=\"html\">&lt;svg&gt;\n  &lt;circle ng-attr-cx=\"{{cx}}\"&gt;&lt;/circle&gt;\n&lt;/svg&gt;\n</pre> <p>If one wants to modify a camelcased attribute (SVG elements have valid camelcased attributes), such as <code>viewBox</code> on the <code>svg</code> element, one can use underscores to denote that the attribute to bind to is naturally camelcased.</p> <p>For example, to bind to <code>viewBox</code>, we can write:</p> <pre data-language=\"html\">&lt;svg ng-attr-view_box=\"{{viewBox}}\"&gt;\n&lt;/svg&gt;\n</pre> <h2 id=\"creating-directives\">Creating Directives</h2> <p>First let's talk about the <a href=\"../api/ng/provider/%24compileprovider#directive.html\">API for registering directives</a>. Much like controllers, directives are registered on modules. To register a directive, you use the <code>module.directive</code> API. <code>module.directive</code> takes the <a href=\"directive#matching-directives.html\">normalized</a> directive name followed by a <strong>factory function.</strong> This factory function should return an object with the different options to tell <code>$compile</code> how the directive should behave when matched.</p> <p>The factory function is invoked only once when the <a href=\"../api/ng/service/%24compile\">compiler</a> matches the directive for the first time. You can perform any initialization work here. The function is invoked using <a href=\"../api/auto/service/%24injector#invoke.html\">$injector.invoke</a> which makes it injectable just like a controller.</p> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> Prefer using the definition object over returning a function. </div> <p>We'll go over a few common examples of directives, then dive deep into the different options and compilation process.</p> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> In order to avoid collisions with some future standard, it's best to prefix your own directive names. For instance, if you created a <code>&lt;carousel&gt;</code> directive, it would be problematic if HTML7 introduced the same element. A two or three letter prefix (e.g. <code>btfCarousel</code>) works well. Similarly, do not prefix your own directives with <code>ng</code> or they might conflict with directives included in a future version of Angular. </div> <p>For the following examples, we'll use the prefix <code>my</code> (e.g. <code>myCustomer</code>).</p> <h3 id=\"template-expanding-directive\">Template-expanding directive</h3> <p>Let's say you have a chunk of your template that represents a customer's information. This template is repeated many times in your code. When you change it in one place, you have to change it in several others. This is a good opportunity to use a directive to simplify your template.</p> <p>Let's create a directive that simply replaces its contents with a static template:</p>  <p>Notice that we have bindings in this directive. After <code>$compile</code> compiles and links <code>&lt;div my-customer&gt;&lt;/div&gt;</code>, it will try to match directives on the element's children. This means you can compose directives of other directives. We'll see how to do that in <a href=\"directive#creating-directives-that-communicate.html\">an example</a> below.</p> <p>In the example above we in-lined the value of the <code>template</code> option, but this will become annoying as the size of your template grows.</p> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> Unless your template is very small, it's typically better to break it apart into its own HTML file and load it with the <code>templateUrl</code> option. </div> <p>If you are familiar with <code>ngInclude</code>, <code>templateUrl</code> works just like it. Here's the same example using <code>templateUrl</code> instead:</p>  <p><code>templateUrl</code> can also be a function which returns the URL of an HTML template to be loaded and used for the directive. Angular will call the <code>templateUrl</code> function with two parameters: the element that the directive was called on, and an <code>attr</code> object associated with that element.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> You do not currently have the ability to access scope variables from the <code>templateUrl</code> function, since the template is requested before the scope is initialized. </div>  <div class=\"alert alert-warning\"> <strong>Note:</strong> When you create a directive, it is restricted to attribute and elements only by default. In order to create directives that are triggered by class name, you need to use the <code>restrict</code> option. </div> <p>The <code>restrict</code> option is typically set to:</p> <ul> <li>\n<code>'A'</code> - only matches attribute name</li> <li>\n<code>'E'</code> - only matches element name</li> <li>\n<code>'C'</code> - only matches class name</li> </ul> <p>These restrictions can all be combined as needed:</p> <ul> <li>\n<code>'AEC'</code> - matches either attribute or element or class name</li> </ul> <p>Let's change our directive to use <code>restrict: 'E'</code>:</p>  <p>For more on the <a href=\"../api/ng/service/%24compile#directive-definition-object.html\"><code>restrict</code></a> property, see the <a href=\"../api/ng/service/%24compile#directive-definition-object.html\">API docs</a>.</p> <div class=\"alert alert-info\"> <strong>When should I use an attribute versus an element?</strong> Use an element when you are creating a component that is in control of the template. The common case for this is when you are creating a Domain-Specific Language for parts of your template. Use an attribute when you are decorating an existing element with new functionality. </div> <p>Using an element for the <code>myCustomer</code> directive is clearly the right choice because you're not decorating an element with some \"customer\" behavior; you're defining the core behavior of the element as a customer component.</p> <h3 id=\"isolating-the-scope-of-a-directive\">Isolating the Scope of a Directive</h3> <p>Our <code>myCustomer</code> directive above is great, but it has a fatal flaw. We can only use it once within a given scope.</p> <p>In its current implementation, we'd need to create a different controller each time in order to re-use such a directive:</p>  <p>This is clearly not a great solution.</p> <p>What we want to be able to do is separate the scope inside a directive from the scope outside, and then map the outer scope to a directive's inner scope. We can do this by creating what we call an <strong>isolate scope</strong>. To do this, we can use a directive's <code>scope</code> option:</p>  <p>Looking at <code>index.html</code>, the first <code>&lt;my-customer&gt;</code> element binds the <code>info</code> attribute to <code>naomi</code>, which we have exposed on our controller's scope. The second binds <code>info</code> to <code>igor</code>.</p> <p>Let's take a closer look at the scope option:</p> <pre data-language=\"javascript\">//...\nscope: {\n  customerInfo: '=info'\n},\n//...\n</pre> <p>The <strong>scope option</strong> is an object that contains a property for each isolate scope binding. In this case it has just one property:</p> <ul> <li>Its name (<code>customerInfo</code>) corresponds to the directive's <strong>isolate scope</strong> property <code>customerInfo</code>.</li> <li>Its value (<code>=info</code>) tells <code>$compile</code> to bind to the <code>info</code> attribute.</li> </ul> <div class=\"alert alert-warning\"> <strong>Note:</strong> These <code>=attr</code> attributes in the <code>scope</code> option of directives are normalized just like directive names. To bind to the attribute in <code>&lt;div bind-to-this=\"thing\"&gt;</code>, you'd specify a binding of <code>=bindToThis</code>. </div> <p>For cases where the attribute name is the same as the value you want to bind to inside the directive's scope, you can use this shorthand syntax:</p> <pre data-language=\"javascript\">...\nscope: {\n  // same as '=customer'\n  customer: '='\n},\n...\n</pre> <p>Besides making it possible to bind different data to the scope inside a directive, using an isolated scope has another effect.</p> <p>We can show this by adding another property, <code>vojta</code>, to our scope and trying to access it from within our directive's template:</p>  <p>Notice that <code>{{vojta.name}}</code> and <code>{{vojta.address}}</code> are empty, meaning they are undefined. Although we defined <code>vojta</code> in the controller, it's not available within the directive.</p> <p>As the name suggests, the <strong>isolate scope</strong> of the directive isolates everything except models that you've explicitly added to the <code>scope: {}</code> hash object. This is helpful when building reusable components because it prevents a component from changing your model state except for the models that you explicitly pass in.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> Normally, a scope prototypically inherits from its parent. An isolated scope does not. See the <a href=\"../api/ng/service/%24compile#directive-definition-object.html\">\"Directive Definition Object - scope\"</a> section for more information about isolate scopes. </div> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> Use the <code>scope</code> option to create isolate scopes when making components that you want to reuse throughout your app. </div> <h3 id=\"creating-a-directive-that-manipulates-the-dom\">Creating a Directive that Manipulates the DOM</h3> <p>In this example we will build a directive that displays the current time. Once a second, it updates the DOM to reflect the current time.</p> <p>Directives that want to modify the DOM typically use the <code>link</code> option. <code>link</code> takes a function with the following signature, <code>function link(scope, element, attrs) { ... }</code> where:</p> <ul> <li>\n<code>scope</code> is an Angular scope object.</li> <li>\n<code>element</code> is the jqLite-wrapped element that this directive matches.</li> <li>\n<code>attrs</code> is a hash object with key-value pairs of normalized attribute names and their corresponding attribute values.</li> </ul> <p>In our <code>link</code> function, we want to update the displayed time once a second, or whenever a user changes the time formatting string that our directive binds to. We will use the <code>$interval</code> service to call a handler on a regular basis. This is easier than using <code>$timeout</code> but also works better with end-to-end testing, where we want to ensure that all <code>$timeout</code>s have completed before completing the test. We also want to remove the <code>$interval</code> if the directive is deleted so we don't introduce a memory leak.</p>  <p>There are a couple of things to note here. Just like the <code>module.controller</code> API, the function argument in <code>module.directive</code> is dependency injected. Because of this, we can use <code>$interval</code> and <code>dateFilter</code> inside our directive's <code>link</code> function.</p> <p>We register an event <code>element.on('$destroy', ...)</code>. What fires this <code>$destroy</code> event?</p> <p>There are a few special events that AngularJS emits. When a DOM node that has been compiled with Angular's compiler is destroyed, it emits a <code>$destroy</code> event. Similarly, when an AngularJS scope is destroyed, it broadcasts a <code>$destroy</code> event to listening scopes.</p> <p>By listening to this event, you can remove event listeners that might cause memory leaks. Listeners registered to scopes and elements are automatically cleaned up when they are destroyed, but if you registered a listener on a service, or registered a listener on a DOM node that isn't being deleted, you'll have to clean it up yourself or you risk introducing a memory leak.</p> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> Directives should clean up after themselves. You can use <code>element.on('$destroy', ...)</code> or <code>scope.$on('$destroy', ...)</code> to run a clean-up function when the directive is removed. </div> <h3 id=\"creating-a-directive-that-wraps-other-elements\">Creating a Directive that Wraps Other Elements</h3> <p>We've seen that you can pass in models to a directive using the isolate scope, but sometimes it's desirable to be able to pass in an entire template rather than a string or an object. Let's say that we want to create a \"dialog box\" component. The dialog box should be able to wrap any arbitrary content.</p> <p>To do this, we need to use the <code>transclude</code> option.</p>  <p>What does this <code>transclude</code> option do, exactly? <code>transclude</code> makes the contents of a directive with this option have access to the scope <strong>outside</strong> of the directive rather than inside.</p> <p>To illustrate this, see the example below. Notice that we've added a <code>link</code> function in <code>script.js</code> that redefines <code>name</code> as <code>Jeff</code>. What do you think the <code>{{name}}</code> binding will resolve to now?</p>  <p>Ordinarily, we would expect that <code>{{name}}</code> would be <code>Jeff</code>. However, we see in this example that the <code>{{name}}</code> binding is still <code>Tobias</code>.</p> <p>The <code>transclude</code> option changes the way scopes are nested. It makes it so that the <strong>contents</strong> of a transcluded directive have whatever scope is outside the directive, rather than whatever scope is on the inside. In doing so, it gives the contents access to the outside scope.</p> <p>Note that if the directive did not create its own scope, then <code>scope</code> in <code>scope.name = 'Jeff';</code> would reference the outside scope and we would see <code>Jeff</code> in the output.</p> <p>This behavior makes sense for a directive that wraps some content, because otherwise you'd have to pass in each model you wanted to use separately. If you have to pass in each model that you want to use, then you can't really have arbitrary contents, can you?</p> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> only use <code>transclude: true</code> when you want to create a directive that wraps arbitrary content. </div> <p>Next, we want to add buttons to this dialog box, and allow someone using the directive to bind their own behavior to it.</p>  <p>We want to run the function we pass by invoking it from the directive's scope, but have it run in the context of the scope where it's registered.</p> <p>We saw earlier how to use <code>=attr</code> in the <code>scope</code> option, but in the above example, we're using <code>&amp;attr</code> instead. The <code>&amp;</code> binding allows a directive to trigger evaluation of an expression in the context of the original scope, at a specific time. Any legal expression is allowed, including an expression which contains a function call. Because of this, <code>&amp;</code> bindings are ideal for binding callback functions to directive behaviors.</p> <p>When the user clicks the <code>x</code> in the dialog, the directive's <code>close</code> function is called, thanks to <code>ng-click.</code> This call to <code>close</code> on the isolated scope actually evaluates the expression <code>hideDialog(message)</code> in the context of the original scope, thus running <code>Controller</code>'s <code>hideDialog</code> function.</p> <p>Often it's desirable to pass data from the isolate scope via an expression to the parent scope, this can be done by passing a map of local variable names and values into the expression wrapper fn. For example, the hideDialog function takes a message to display when the dialog is hidden. This is specified in the directive by calling <code>close({message: 'closing for now'})</code>. Then the local variable <code>message</code> will be available within the <code>on-close</code> expression.</p> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> use <code>&amp;attr</code> in the <code>scope</code> option when you want your directive to expose an API for binding to behaviors. </div> <h3 id=\"creating-a-directive-that-adds-event-listeners\">Creating a Directive that Adds Event Listeners</h3> <p>Previously, we used the <code>link</code> function to create a directive that manipulated its DOM elements. Building upon that example, let's make a directive that reacts to events on its elements.</p> <p>For instance, what if we wanted to create a directive that lets a user drag an element?</p>  <h3 id=\"creating-directives-that-communicate\">Creating Directives that Communicate</h3> <p>You can compose any directives by using them within templates.</p> <p>Sometimes, you want a component that's built from a combination of directives.</p> <p>Imagine you want to have a container with tabs in which the contents of the container correspond to which tab is active.</p>  <p>The <code>myPane</code> directive has a <code>require</code> option with value <code>^myTabs</code>. When a directive uses this option, <code>$compile</code> will throw an error unless the specified controller is found. The <code>^</code> prefix means that this directive searches for the controller on its parents (without the <code>^</code> prefix, the directive would look for the controller on just its own element).</p> <p>So where does this <code>myTabs</code> controller come from? Directives can specify controllers using the unsurprisingly named <code>controller</code> option. As you can see, the <code>myTabs</code> directive uses this option. Just like <code>ngController</code>, this option attaches a controller to the template of the directive.</p> <p>If it is necessary to reference the controller or any functions bound to the controller's scope in the template, you can use the option <code>controllerAs</code> to specify the name of the controller as an alias. The directive needs to define a scope for this configuration to be used. This is particularly useful in the case when the directive is used as a component.</p> <p>Looking back at <code>myPane</code>'s definition, notice the last argument in its <code>link</code> function: <code>tabsCtrl</code>. When a directive requires a controller, it receives that controller as the fourth argument of its <code>link</code> function. Taking advantage of this, <code>myPane</code> can call the <code>addPane</code> function of <code>myTabs</code>.</p> <p>If multiple controllers are required, the <code>require</code> option of the directive can take an array argument. The corresponding parameter being sent to the <code>link</code> function will also be an array.</p> <pre data-language=\"javascript\">angular.module('docsTabsExample', [])\n.directive('myPane', function() {\n  return {\n    require: ['^myTabs', '^ngModel'],\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      title: '@'\n    },\n    link: function(scope, element, attrs, controllers) {\n      var tabsCtrl = controllers[0],\n          modelCtrl = controllers[1];\n\n      tabsCtrl.addPane(scope);\n    },\n    templateUrl: 'my-pane.html'\n  };\n});\n</pre> <p>Savvy readers may be wondering what the difference is between <code>link</code> and <code>controller</code>. The basic difference is that <code>controller</code> can expose an API, and <code>link</code> functions can interact with controllers using <code>require</code>.</p> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> use <code>controller</code> when you want to expose an API to other directives. Otherwise use <code>link</code>. </div> <h3 id=\"summary\">Summary</h3> <p>Here we've seen the main use cases for directives. Each of these samples acts as a good starting point for creating your own directives.</p> <p>You might also be interested in an in-depth explanation of the compilation process that's available in the <a href=\"compiler\">compiler guide</a>.</p> <p>The <a href=\"../api/ng/service/%24compile\"><code>$compile</code> API</a> page has a comprehensive list of directive options for reference.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/directive\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/directive</a>\n  </p>\n</div>\n","guide/controller":"<h1 id=\"understanding-controllers\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/controller.ngdoc?message=docs(guide%2FControllers)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Understanding Controllers</h1> <p>In Angular, a Controller is defined by a JavaScript <strong>constructor function</strong> that is used to augment the <a href=\"scope\">Angular Scope</a>.</p> <p>When a Controller is attached to the DOM via the <a href=\"../api/ng/directive/ngcontroller\">ng-controller</a> directive, Angular will instantiate a new Controller object, using the specified Controller's <strong>constructor function</strong>. A new <strong>child scope</strong> will be created and made available as an injectable parameter to the Controller's constructor function as <code>$scope</code>.</p> <p>If the controller has been attached using the <code>controller as</code> syntax then the controller instance will be assigned to a property on the new scope.</p> <p>Use controllers to:</p> <ul> <li>Set up the initial state of the <code>$scope</code> object.</li> <li>Add behavior to the <code>$scope</code> object.</li> </ul> <p>Do not use controllers to:</p> <ul> <li>Manipulate DOM — Controllers should contain only business logic. Putting any presentation logic into Controllers significantly affects its testability. Angular has <a href=\"databinding\">databinding</a> for most cases and <a href=\"directive\">directives</a> to encapsulate manual DOM manipulation.</li> <li>Format input — Use <a href=\"forms\">angular form controls</a> instead.</li> <li>Filter output — Use <a href=\"filter\">angular filters</a> instead.</li> <li>Share code or state across controllers — Use <a href=\"services\">angular services</a> instead.</li> <li>Manage the life-cycle of other components (for example, to create service instances).</li> </ul> <h2 id=\"setting-up-the-initial-state-of-a-scope-object\">Setting up the initial state of a $scope object</h2> <p>Typically, when you create an application you need to set up the initial state for the Angular <code>$scope</code>. You set up the initial state of a scope by attaching properties to the <code>$scope</code> object. The properties contain the <strong>view model</strong> (the model that will be presented by the view). All the <code>$scope</code> properties will be available to the template at the point in the DOM where the Controller is registered.</p> <p>The following example demonstrates creating a <code>GreetingController</code>, which attaches a <code>greeting</code> property containing the string <code>'Hola!'</code> to the <code>$scope</code>:</p> <pre data-language=\"javascript\">var myApp = angular.module('myApp',[]);\n\nmyApp.controller('GreetingController', ['$scope', function($scope) {\n  $scope.greeting = 'Hola!';\n}]);\n</pre> <p>We create an <a href=\"module\">Angular Module</a>, <code>myApp</code>, for our application. Then we add the controller's constructor function to the module using the <code>.controller()</code> method. This keeps the controller's constructor function out of the global scope.</p> <div class=\"alert alert-info\"> We have used an <strong>inline injection annotation</strong> to explicitly specify the dependency of the Controller on the <code>$scope</code> service provided by Angular. See the guide on <a href=\"di\">Dependency Injection</a> for more information. </div> <p>We attach our controller to the DOM using the <code>ng-controller</code> directive. The <code>greeting</code> property can now be data-bound to the template:</p> <pre data-language=\"html\">&lt;div ng-controller=\"GreetingController\"&gt;\n  {{ greeting }}\n&lt;/div&gt;\n</pre> <h2 id=\"adding-behavior-to-a-scope-object\">Adding Behavior to a Scope Object</h2> <p>In order to react to events or execute computation in the view we must provide behavior to the scope. We add behavior to the scope by attaching methods to the <code>$scope</code> object. These methods are then available to be called from the template/view.</p> <p>The following example uses a Controller to add a method to the scope, which doubles a number:</p> <pre data-language=\"javascript\">var myApp = angular.module('myApp',[]);\n\nmyApp.controller('DoubleController', ['$scope', function($scope) {\n  $scope.double = function(value) { return value * 2; };\n}]);\n</pre> <p>Once the Controller has been attached to the DOM, the <code>double</code> method can be invoked in an Angular expression in the template:</p> <pre data-language=\"html\">&lt;div ng-controller=\"DoubleController\"&gt;\n  Two times &lt;input ng-model=\"num\"&gt; equals {{ double(num) }}\n&lt;/div&gt;\n</pre> <p>As discussed in the <a href=\"concepts\">Concepts</a> section of this guide, any objects (or primitives) assigned to the scope become model properties. Any methods assigned to the scope are available in the template/view, and can be invoked via angular expressions and <code>ng</code> event handler directives (e.g. <a href=\"../api/ng/directive/ngclick\">ngClick</a>).</p> <h2 id=\"using-controllers-correctly\">Using Controllers Correctly</h2> <p>In general, a Controller shouldn't try to do too much. It should contain only the business logic needed for a single view.</p> <p>The most common way to keep Controllers slim is by encapsulating work that doesn't belong to controllers into services and then using these services in Controllers via dependency injection. This is discussed in the <a href=\"di\">Dependency Injection</a> and <a href=\"services\">Services</a> sections of this guide.</p> <h2 id=\"associating-controllers-with-angular-scope-objects\">Associating Controllers with Angular Scope Objects</h2> <p>You can associate Controllers with scope objects implicitly via the <a href=\"../api/ng/directive/ngcontroller\">ngController directive</a> or <a href=\"../api/ngroute/service/%24route\">$route service</a>.</p>  <p>To illustrate further how Controller components work in Angular, let's create a little app with the following components:</p> <ul> <li>A <a href=\"templates\">template</a> with two buttons and a simple message</li> <li>A model consisting of a string named <code>spice</code>\n</li> <li>A Controller with two functions that set the value of <code>spice</code>\n</li> </ul> <p>The message in our template contains a binding to the <code>spice</code> model, which by default is set to the string \"very\". Depending on which button is clicked, the <code>spice</code> model is set to <code>chili</code> or <code>jalapeño</code>, and the message is automatically updated by data-binding.</p>  <p>Things to notice in the example above:</p> <ul> <li>The <code>ng-controller</code> directive is used to (implicitly) create a scope for our template, and the scope is augmented (managed) by the <code>SpicyController</code> Controller.</li> <li>\n<code>SpicyController</code> is just a plain JavaScript function. As an (optional) naming convention the name starts with capital letter and ends with \"Controller\".</li> <li>Assigning a property to <code>$scope</code> creates or updates the model.</li> <li>Controller methods can be created through direct assignment to scope (see the <code>chiliSpicy</code> method)</li> <li>The Controller methods and properties are available in the template (for both the <code>&lt;div&gt;</code> element and its children).</li> </ul>  <p>Controller methods can also take arguments, as demonstrated in the following variation of the previous example.</p>  <p>Notice that the <code>SpicyController</code> Controller now defines just one method called <code>spicy</code>, which takes one argument called <code>spice</code>. The template then refers to this Controller method and passes in a string constant <code>'chili'</code> in the binding for the first button and a model property <code>customSpice</code> (bound to an input box) in the second button.</p>  <p>It is common to attach Controllers at different levels of the DOM hierarchy. Since the <a href=\"../api/ng/directive/ngcontroller\">ng-controller</a> directive creates a new child scope, we get a hierarchy of scopes that inherit from each other. The <code>$scope</code> that each Controller receives will have access to properties and methods defined by Controllers higher up the hierarchy. See <a href=\"https://github.com/angular/angular.js/wiki/Understanding-Scopes\">Understanding Scopes</a> for more information about scope inheritance.</p>  <p>Notice how we nested three <code>ng-controller</code> directives in our template. This will result in four scopes being created for our view:</p> <ul> <li>The root scope</li> <li>The <code>MainController</code> scope, which contains <code>timeOfDay</code> and <code>name</code> properties</li> <li>The <code>ChildController</code> scope, which inherits the <code>timeOfDay</code> property but overrides (hides) the <code>name</code> property from the previous</li> <li>The <code>GrandChildController</code> scope, which overrides (hides) both the <code>timeOfDay</code> property defined in <code>MainController</code> and the <code>name</code> property defined in <code>ChildController</code>\n</li> </ul> <p>Inheritance works with methods in the same way as it does with properties. So in our previous examples, all of the properties could be replaced with methods that return string values.</p> <h2 id=\"testing-controllers\">Testing Controllers</h2> <p>Although there are many ways to test a Controller, one of the best conventions, shown below, involves injecting the <a href=\"../api/ng/service/%24rootscope\">$rootScope</a> and <a href=\"../api/ng/service/%24controller\">$controller</a>:</p> <p><strong>Controller Definition:</strong></p> <pre data-language=\"javascript\">var myApp = angular.module('myApp',[]);\n\nmyApp.controller('MyController', function($scope) {\n  $scope.spices = [{\"name\":\"pasilla\", \"spiciness\":\"mild\"},\n                   {\"name\":\"jalapeno\", \"spiciness\":\"hot hot hot!\"},\n                   {\"name\":\"habanero\", \"spiciness\":\"LAVA HOT!!\"}];\n  $scope.spice = \"habanero\";\n});\n</pre> <p><strong>Controller Test:</strong></p> <pre data-language=\"javascript\">describe('myController function', function() {\n\n  describe('myController', function() {\n    var $scope;\n\n    beforeEach(module('myApp'));\n\n    beforeEach(inject(function($rootScope, $controller) {\n      $scope = $rootScope.$new();\n      $controller('MyController', {$scope: $scope});\n    }));\n\n    it('should create \"spices\" model with 3 spices', function() {\n      expect($scope.spices.length).toBe(3);\n    });\n\n    it('should set the default value of spice', function() {\n      expect($scope.spice).toBe('habanero');\n    });\n  });\n});\n</pre> <p>If you need to test a nested Controller you must create the same scope hierarchy in your test that exists in the DOM:</p> <pre data-language=\"javascript\">describe('state', function() {\n    var mainScope, childScope, grandChildScope;\n\n    beforeEach(module('myApp'));\n\n    beforeEach(inject(function($rootScope, $controller) {\n        mainScope = $rootScope.$new();\n        $controller('MainController', {$scope: mainScope});\n        childScope = mainScope.$new();\n        $controller('ChildController', {$scope: childScope});\n        grandChildScope = childScope.$new();\n        $controller('GrandChildController', {$scope: grandChildScope});\n    }));\n\n    it('should have over and selected', function() {\n        expect(mainScope.timeOfDay).toBe('morning');\n        expect(mainScope.name).toBe('Nikki');\n        expect(childScope.timeOfDay).toBe('morning');\n        expect(childScope.name).toBe('Mattie');\n        expect(grandChildScope.timeOfDay).toBe('evening');\n        expect(grandChildScope.name).toBe('Gingerbread Baby');\n    });\n});\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/controller\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/controller</a>\n  </p>\n</div>\n","guide/providers":"<h1 id=\"providers\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/providers.ngdoc?message=docs(guide%2FProviders)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>Providers</h1> <p>Each web application you build is composed of objects that collaborate to get stuff done. These objects need to be instantiated and wired together for the app to work. In Angular apps most of these objects are instantiated and wired together automatically by the <a href=\"../api/auto/service/%24injector\">injector service</a>.</p> <p>The injector creates two types of objects, <strong>services</strong> and <strong>specialized objects</strong>.</p> <p>Services are objects whose API is defined by the developer writing the service.</p> <p>Specialized objects conform to a specific Angular framework API. These objects are one of controllers, directives, filters or animations.</p> <p>The injector needs to know how to create these objects. You tell it by registering a \"recipe\" for creating your object with the injector. There are five recipe types.</p> <p>The most verbose, but also the most comprehensive one is a Provider recipe. The remaining four recipe types — Value, Factory, Service and Constant — are just syntactic sugar on top of a provider recipe.</p> <p>Let's take a look at the different scenarios for creating and using services via various recipe types. We'll start with the simplest case possible where various places in your code need a shared string and we'll accomplish this via Value recipe.</p> <h2 id=\"note-a-word-on-modules\">Note: A Word on Modules</h2> <p>In order for the injector to know how to create and wire together all of these objects, it needs a registry of \"recipes\". Each recipe has an identifier of the object and the description of how to create this object.</p> <p>Each recipe belongs to an <a href=\"../api/ng/type/angular.module\">Angular module</a>. An Angular module is a bag that holds one or more recipes. And since manually keeping track of module dependencies is no fun, a module can contain information about dependencies on other modules as well.</p> <p>When an Angular application starts with a given application module, Angular creates a new instance of injector, which in turn creates a registry of recipes as a union of all recipes defined in the core \"ng\" module, application module and its dependencies. The injector then consults the recipe registry when it needs to create an object for your application.</p> <h2 id=\"value-recipe\">Value Recipe</h2> <p>Let's say that we want to have a very simple service called \"clientId\" that provides a string representing an authentication id used for some remote API. You would define it like this:</p> <pre data-language=\"javascript\">var myApp = angular.module('myApp', []);\nmyApp.value('clientId', 'a12345654321x');\n</pre> <p>Notice how we created an Angular module called <code>myApp</code>, and specified that this module definition contains a \"recipe\" for constructing the <code>clientId</code> service, which is a simple string in this case.</p> <p>And this is how you would display it via Angular's data-binding:</p> <pre data-language=\"javascript\">myApp.controller('DemoController', ['clientId', function DemoController(clientId) {\n  this.clientId = clientId;\n}]);\n</pre> <pre data-language=\"html\">&lt;html ng-app=\"myApp\"&gt;\n  &lt;body ng-controller=\"DemoController as demo\"&gt;\n    Client ID: {{demo.clientId}}\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>In this example, we've used the Value recipe to define the value to provide when <code>DemoController</code> asks for the service with id \"clientId\".</p> <p>On to more complex examples!</p> <h2 id=\"factory-recipe\">Factory Recipe</h2> <p>The Value recipe is very simple to write, but lacks some important features we often need when creating services. Let's now look at the Value recipe's more powerful sibling, the Factory. The Factory recipe adds the following abilities:</p> <ul> <li>ability to use other services (have dependencies)</li> <li>service initialization</li> <li>delayed/lazy initialization</li> </ul> <p>The Factory recipe constructs a new service using a function with zero or more arguments (these are dependencies on other services). The return value of this function is the service instance created by this recipe.</p> <p>Note: All services in Angular are singletons. That means that the injector uses each recipe at most once to create the object. The injector then caches the reference for all future needs.</p> <p>Since a Factory is a more powerful version of the Value recipe, the same service can be constructed with it. Using our previous <code>clientId</code> Value recipe example, we can rewrite it as a Factory recipe like this:</p> <pre data-language=\"javascript\">myApp.factory('clientId', function clientIdFactory() {\n  return 'a12345654321x';\n});\n</pre> <p>But given that the token is just a string literal, sticking with the Value recipe is still more appropriate as it makes the code easier to follow.</p> <p>Let's say, however, that we would also like to create a service that computes a token used for authentication against a remote API. This token will be called <code>apiToken</code> and will be computed based on the <code>clientId</code> value and a secret stored in the browser's local storage:</p> <pre data-language=\"javascript\">myApp.factory('apiToken', ['clientId', function apiTokenFactory(clientId) {\n  var encrypt = function(data1, data2) {\n    // NSA-proof encryption algorithm:\n    return (data1 + ':' + data2).toUpperCase();\n  };\n\n  var secret = window.localStorage.getItem('myApp.secret');\n  var apiToken = encrypt(clientId, secret);\n\n  return apiToken;\n}]);\n</pre> <p>In the code above, we see how the <code>apiToken</code> service is defined via the Factory recipe that depends on the <code>clientId</code> service. The factory service then uses NSA-proof encryption to produce an authentication token.</p> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> name the factory functions as <code>&lt;serviceId&gt;Factory</code> (e.g., apiTokenFactory). While this naming convention is not required, it helps when navigating the codebase or looking at stack traces in the debugger. </div> <p>Just like with the Value recipe, the Factory recipe can create a service of any type, whether it be a primitive, object literal, function, or even an instance of a custom type.</p> <h2 id=\"service-recipe\">Service Recipe</h2> <p>JavaScript developers often use custom types to write object-oriented code. Let's explore how we could launch a unicorn into space via our <code>unicornLauncher</code> service which is an instance of a custom type:</p> <pre data-language=\"javascript\">function UnicornLauncher(apiToken) {\n\n  this.launchedCount = 0;\n  this.launch = function() {\n    // Make a request to the remote API and include the apiToken\n    ...\n    this.launchedCount++;\n  }\n}\n</pre> <p>We are now ready to launch unicorns, but notice that UnicornLauncher depends on our <code>apiToken</code>. We can satisfy this dependency on <code>apiToken</code> using the Factory recipe:</p> <pre data-language=\"javascript\">myApp.factory('unicornLauncher', [\"apiToken\", function(apiToken) {\n  return new UnicornLauncher(apiToken);\n}]);\n</pre> <p>This is, however, exactly the use-case that the Service recipe is the most suitable for.</p> <p>The Service recipe produces a service just like the Value or Factory recipes, but it does so by <em>invoking a constructor with the <code>new</code> operator</em>. The constructor can take zero or more arguments, which represent dependencies needed by the instance of this type.</p> <p>Note: Service recipes follow a design pattern called <a href=\"http://www.martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer\">constructor injection</a>.</p> <p>Since we already have a constructor for our UnicornLauncher type, we can replace the Factory recipe above with a Service recipe like this:</p> <pre data-language=\"javascript\">myApp.service('unicornLauncher', [\"apiToken\", UnicornLauncher]);\n</pre> <p>Much simpler!</p> <p>Note: Yes, we have called one of our service recipes 'Service'. We regret this and know that we'll be somehow punished for our misdeed. It's like we named one of our offspring 'Child'. Boy, that would mess with the teachers.</p> <h2 id=\"provider-recipe\">Provider Recipe</h2> <p>As already mentioned in the intro, the Provider recipe is the core recipe type and all the other recipe types are just syntactic sugar on top of it. It is the most verbose recipe with the most abilities, but for most services it's overkill.</p> <p>The Provider recipe is syntactically defined as a custom type that implements a <code>$get</code> method. This method is a factory function just like the one we use in the Factory recipe. In fact, if you define a Factory recipe, an empty Provider type with the <code>$get</code> method set to your factory function is automatically created under the hood.</p> <p>You should use the Provider recipe only when you want to expose an API for application-wide configuration that must be made before the application starts. This is usually interesting only for reusable services whose behavior might need to vary slightly between applications.</p> <p>Let's say that our <code>unicornLauncher</code> service is so awesome that many apps use it. By default the launcher shoots unicorns into space without any protective shielding. But on some planets the atmosphere is so thick that we must wrap every unicorn in tinfoil before sending it on its intergalactic trip, otherwise they would burn while passing through the atmosphere. It would then be great if we could configure the launcher to use the tinfoil shielding for each launch in apps that need it. We can make it configurable like so:</p> <pre data-language=\"javascript\">myApp.provider('unicornLauncher', function UnicornLauncherProvider() {\n  var useTinfoilShielding = false;\n\n  this.useTinfoilShielding = function(value) {\n    useTinfoilShielding = !!value;\n  };\n\n  this.$get = [\"apiToken\", function unicornLauncherFactory(apiToken) {\n\n    // let's assume that the UnicornLauncher constructor was also changed to\n    // accept and use the useTinfoilShielding argument\n    return new UnicornLauncher(apiToken, useTinfoilShielding);\n  }];\n});\n</pre> <p>To turn the tinfoil shielding on in our app, we need to create a config function via the module API and have the UnicornLauncherProvider injected into it:</p> <pre data-language=\"javascript\">myApp.config([\"unicornLauncherProvider\", function(unicornLauncherProvider) {\n  unicornLauncherProvider.useTinfoilShielding(true);\n}]);\n</pre> <p>Notice that the unicorn provider is injected into the config function. This injection is done by a provider injector which is different from the regular instance injector, in that it instantiates and wires (injects) all provider instances only.</p> <p>During application bootstrap, before Angular goes off creating all services, it configures and instantiates all providers. We call this the configuration phase of the application life-cycle. During this phase, services aren't accessible because they haven't been created yet.</p> <p>Once the configuration phase is over, interaction with providers is disallowed and the process of creating services starts. We call this part of the application life-cycle the run phase.</p> <h2 id=\"constant-recipe\">Constant Recipe</h2> <p>We've just learned how Angular splits the life-cycle into configuration phase and run phase and how you can provide configuration to your application via the config function. Since the config function runs in the configuration phase when no services are available, it doesn't have access even to simple value objects created via the Value recipe.</p> <p>Since simple values, like URL prefixes, don't have dependencies or configuration, it's often handy to make them available in both the configuration and run phases. This is what the Constant recipe is for.</p> <p>Let's say that our <code>unicornLauncher</code> service can stamp a unicorn with the planet name it's being launched from if this name was provided during the configuration phase. The planet name is application specific and is used also by various controllers during the runtime of the application. We can then define the planet name as a constant like this:</p> <pre data-language=\"javascript\">myApp.constant('planetName', 'Greasy Giant');\n</pre> <p>We could then configure the unicornLauncherProvider like this:</p> <pre data-language=\"javascript\">myApp.config(['unicornLauncherProvider', 'planetName', function(unicornLauncherProvider, planetName) {\n  unicornLauncherProvider.useTinfoilShielding(true);\n  unicornLauncherProvider.stampText(planetName);\n}]);\n</pre> <p>And since Constant recipe makes the value also available at runtime just like the Value recipe, we can also use it in our controller and template:</p> <pre data-language=\"javascript\">myApp.controller('DemoController', [\"clientId\", \"planetName\", function DemoController(clientId, planetName) {\n  this.clientId = clientId;\n  this.planetName = planetName;\n}]);\n</pre> <pre data-language=\"html\">&lt;html ng-app=\"myApp\"&gt;\n  &lt;body ng-controller=\"DemoController as demo\"&gt;\n   Client ID: {{demo.clientId}}\n   &lt;br&gt;\n   Planet Name: {{demo.planetName}}\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre> <h2 id=\"special-purpose-objects\">Special Purpose Objects</h2> <p>Earlier we mentioned that we also have special purpose objects that are different from services. These objects extend the framework as plugins and therefore must implement interfaces specified by Angular. These interfaces are Controller, Directive, Filter and Animation.</p> <p>The instructions for the injector to create these special objects (with the exception of the Controller objects) use the Factory recipe behind the scenes.</p> <p>Let's take a look at how we would create a very simple component via the directive api that depends on the <code>planetName</code> constant we've just defined and displays the planet name, in our case: \"Planet Name: Greasy Giant\".</p> <p>Since the directives are registered via the Factory recipe, we can use the same syntax as with factories.</p> <pre data-language=\"javascript\">myApp.directive('myPlanet', ['planetName', function myPlanetDirectiveFactory(planetName) {\n  // directive definition object\n  return {\n    restrict: 'E',\n    scope: {},\n    link: function($scope, $element) { $element.text('Planet: ' + planetName); }\n  }\n}]);\n</pre> <p>We can then use the component like this:</p> <pre data-language=\"html\">&lt;html ng-app=\"myApp\"&gt;\n  &lt;body&gt;\n   &lt;my-planet&gt;&lt;/my-planet&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>Using Factory recipes, you can also define Angular's filters and animations, but the controllers are a bit special. You create a controller as a custom type that declares its dependencies as arguments for its constructor function. This constructor is then registered with a module. Let's take a look at the <code>DemoController</code>, created in one of the early examples:</p> <pre data-language=\"javascript\">myApp.controller('DemoController', ['clientId', function DemoController(clientId) {\n  this.clientId = clientId;\n}]);\n</pre> <p>The DemoController is instantiated via its constructor, every time the app needs an instance of DemoController (in our simple app it's just once). So unlike services, controllers are not singletons. The constructor is called with all the requested services, in our case the <code>clientId</code> service.</p> <h2 id=\"conclusion\">Conclusion</h2> <p>To wrap it up, let's summarize the most important points:</p> <ul> <li>The injector uses recipes to create two types of objects: services and special purpose objects</li> <li>There are five recipe types that define how to create objects: Value, Factory, Service, Provider and Constant.</li> <li>Factory and Service are the most commonly used recipes. The only difference between them is that the Service recipe works better for objects of a custom type, while the Factory can produce JavaScript primitives and functions.</li> <li>The Provider recipe is the core recipe type and all the other ones are just syntactic sugar on it.</li> <li>Provider is the most complex recipe type. You don't need it unless you are building a reusable piece of code that needs global configuration.</li> <li>All special purpose objects except for the Controller are defined via Factory recipes.</li> </ul> <table class=\"table table-bordered code-table\"> <thead> <tr> <th>Features / Recipe type</th> <th>Factory</th> <th>Service</th> <th>Value</th> <th>Constant</th> <th>Provider</th> </tr> </thead> <tbody> <tr> <td>can have dependencies</td> <td class=\"success\">yes</td> <td class=\"success\">yes</td> <td class=\"error\">no</td> <td class=\"error\">no</td> <td class=\"success\">yes</td> </tr> <tr> <td>uses type friendly injection</td> <td class=\"error\">no</td> <td class=\"success\">yes</td> <td class=\"success\">yes*</td> <td class=\"success\">yes*</td> <td class=\"error\">no</td> </tr> <tr> <td>object available in config phase</td> <td class=\"error\">no</td> <td class=\"error\">no</td> <td class=\"error\">no</td> <td class=\"success\">yes</td> <td class=\"success\">yes**</td> </tr> <tr> <td>can create functions</td> <td class=\"success\">yes</td> <td class=\"success\">yes</td> <td class=\"success\">yes</td> <td class=\"success\">yes</td> <td class=\"success\">yes</td> </tr> <tr> <td>can create primitives</td> <td class=\"success\">yes</td> <td class=\"error\">no</td> <td class=\"success\">yes</td> <td class=\"success\">yes</td> <td class=\"success\">yes</td> </tr> </tbody> </table> <p>* at the cost of eager initialization by using <code>new</code> operator directly</p> <p>** the service object is not available during the config phase, but the provider instance is (see the <code>unicornLauncherProvider</code> example above).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/providers\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/providers</a>\n  </p>\n</div>\n","guide/compiler":"<h1 id=\"html-compiler\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/compiler.ngdoc?message=docs(guide%2FHTML%20Compiler)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>HTML Compiler</h1>  <strong>Note:</strong> this guide is targeted towards developers who are already familiar with AngularJS basics. If you're just getting started, we recommend the <a href=\"tutorial/\">tutorial</a> first. If you just want to create custom directives, we recommend the <a href=\"directive\">directives guide</a>. If you want a deeper look into Angular's compilation process, you're in the right place.  <h2 id=\"overview\">Overview</h2> <p>Angular's <a href=\"../api/ng/service/%24compile\">HTML compiler</a> allows the developer to teach the browser new HTML syntax. The compiler allows you to attach behavior to any HTML element or attribute and even create new HTML elements or attributes with custom behavior. Angular calls these behavior extensions <a href=\"../api/ng/provider/%24compileprovider#directive.html\">directives</a>.</p> <p>HTML has a lot of constructs for formatting the HTML for static documents in a declarative fashion. For example if something needs to be centered, there is no need to provide instructions to the browser how the window size needs to be divided in half so that the center is found, and that this center needs to be aligned with the text's center. Simply add an <code>align=\"center\"</code> attribute to any element to achieve the desired behavior. Such is the power of declarative language.</p> <p>However, the declarative language is also limited, as it does not allow you to teach the browser new syntax. For example, there is no easy way to get the browser to align the text at 1/3 the position instead of 1/2. What is needed is a way to teach the browser new HTML syntax.</p> <p>Angular comes pre-bundled with common directives which are useful for building any app. We also expect that you will create directives that are specific to your app. These extensions become a Domain Specific Language for building your application.</p> <p>All of this compilation takes place in the web browser; no server side or pre-compilation step is involved.</p> <h2 id=\"compiler\">Compiler</h2> <p>Compiler is an Angular service which traverses the DOM looking for attributes. The compilation process happens in two phases.</p> <ol> <li>\n<p><strong>Compile:</strong> traverse the DOM and collect all of the directives. The result is a linking function.</p> </li> <li>\n<p><strong>Link:</strong> combine the directives with a scope and produce a live view. Any changes in the scope model are reflected in the view, and any user interactions with the view are reflected in the scope model. This makes the scope model the single source of truth.</p> </li> </ol> <p>Some directives such as <a href=\"../api/ng/directive/ngrepeat\"><code>ng-repeat</code></a> clone DOM elements once for each item in a collection. Having a compile and link phase improves performance since the cloned template only needs to be compiled once, and then linked once for each clone instance.</p> <h2 id=\"directive\">Directive</h2> <p>A directive is a behavior which should be triggered when specific HTML constructs are encountered during the compilation process. The directives can be placed in element names, attributes, class names, as well as comments. Here are some equivalent examples of invoking the <a href=\"../api/ng/directive/ngbind\"><code>ng-bind</code></a> directive.</p> <pre data-language=\"html\">&lt;span ng-bind=\"exp\"&gt;&lt;/span&gt;\n&lt;span class=\"ng-bind: exp;\"&gt;&lt;/span&gt;\n&lt;ng-bind&gt;&lt;/ng-bind&gt;\n&lt;!-- directive: ng-bind exp --&gt;\n</pre> <p>A directive is just a function which executes when the compiler encounters it in the DOM. See <a href=\"../api/ng/provider/%24compileprovider#directive.html\">directive API</a> for in-depth documentation on how to write directives.</p> <p>Here is a directive which makes any element draggable. Notice the <code>draggable</code> attribute on the <code>&lt;span&gt;</code> element.</p>  <p>The presence of the <code>draggable</code> attribute on any element gives the element new behavior. We extended the vocabulary of the browser in a way which is natural to anyone who is familiar with the principles of HTML.</p> <h2 id=\"understanding-view\">Understanding View</h2> <p>Most other templating systems consume a static string template and combine it with data, resulting in a new string. The resulting text is then <code>innerHTML</code>ed into an element.</p> <p><img src=\"https://code.angularjs.org/1.3.20/docs/img/One_Way_Data_Binding.png\"></p> <p>This means that any changes to the data need to be re-merged with the template and then <code>innerHTML</code>ed into the DOM. Some of the issues with this approach are:</p> <ol> <li>reading user input and merging it with data</li> <li>clobbering user input by overwriting it</li> <li>managing the whole update process</li> <li>lack of behavior expressiveness</li> </ol> <p>Angular is different. The Angular compiler consumes the DOM, not string templates. The result is a linking function, which when combined with a scope model results in a live view. The view and scope model bindings are transparent. The developer does not need to make any special calls to update the view. And because <code>innerHTML</code> is not used, you won't accidentally clobber user input. Furthermore, Angular directives can contain not just text bindings, but behavioral constructs as well.</p> <p><img src=\"https://code.angularjs.org/1.3.20/docs/img/Two_Way_Data_Binding.png\"></p> <p>The Angular approach produces a stable DOM. The DOM element instance bound to a model item instance does not change for the lifetime of the binding. This means that the code can get hold of the elements and register event handlers and know that the reference will not be destroyed by template data merge.</p> <h2 id=\"how-directives-are-compiled\">How directives are compiled</h2> <p>It's important to note that Angular operates on DOM nodes rather than strings. Usually, you don't notice this restriction because when a page loads, the web browser parses HTML into the DOM automatically.</p> <p>HTML compilation happens in three phases:</p> <ol> <li>\n<p><a href=\"../api/ng/service/%24compile\"><code>$compile</code></a> traverses the DOM and matches directives.</p> <p>If the compiler finds that an element matches a directive, then the directive is added to the list of directives that match the DOM element. A single element may match multiple directives.</p> </li> <li>\n<p>Once all directives matching a DOM element have been identified, the compiler sorts the directives by their <code>priority</code>.</p> <p>Each directive's <code>compile</code> functions are executed. Each <code>compile</code> function has a chance to modify the DOM. Each <code>compile</code> function returns a <code>link</code> function. These functions are composed into a \"combined\" link function, which invokes each directive's returned <code>link</code> function.</p> </li> <li>\n<p><code>$compile</code> links the template with the scope by calling the combined linking function from the previous step. This in turn will call the linking function of the individual directives, registering listeners on the elements and setting up <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\"><code>$watch</code>s</a> with the <a href=\"../api/ng/type/%24rootscope.scope\"><code>scope</code></a> as each directive is configured to do.</p> </li> </ol> <p>The result of this is a live binding between the scope and the DOM. So at this point, a change in a model on the compiled scope will be reflected in the DOM.</p> <p>Below is the corresponding code using the <code>$compile</code> service. This should help give you an idea of what Angular does internally.</p> <pre data-language=\"javascript\">var $compile = ...; // injected into your code\nvar scope = ...;\nvar parent = ...; // DOM element where the compiled template can be appended\n\nvar html = '&lt;div ng-bind=\"exp\"&gt;&lt;/div&gt;';\n\n// Step 1: parse HTML into DOM element\nvar template = angular.element(html);\n\n// Step 2: compile the template\nvar linkFn = $compile(template);\n\n// Step 3: link the compiled template with the scope.\nvar element = linkFn(scope);\n\n// Step 4: Append to DOM (optional)\nparent.appendChild(element);\n</pre> <h3 id=\"the-difference-between-compile-and-link\">The difference between Compile and Link</h3> <p>At this point you may wonder why the compile process has separate compile and link phases. The short answer is that compile and link separation is needed any time a change in a model causes a change in the <strong>structure</strong> of the DOM.</p> <p>It's rare for directives to have a <strong>compile function</strong>, since most directives are concerned with working with a specific DOM element instance rather than changing its overall structure.</p> <p>Directives often have a <strong>link function</strong>. A link function allows the directive to register listeners to the specific cloned DOM element instance as well as to copy content into the DOM from the scope.</p> <div class=\"alert alert-success\"> <strong>Best Practice:</strong> Any operation which can be shared among the instance of directives should be moved to the compile function for performance reasons. </div> <h4 id=\"an-example-of-compile-versus-link-\">An Example of \"Compile\" Versus \"Link\"</h4> <p>To understand, let's look at a real-world example with <code>ngRepeat</code>:</p> <pre data-language=\"html\">Hello {{user.name}}, you have these actions:\n&lt;ul&gt;\n  &lt;li ng-repeat=\"action in user.actions\"&gt;\n    {{action.description}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n</pre> <p>When the above example is compiled, the compiler visits every node and looks for directives.</p> <p><code>{{user.name}}</code> matches the <a href=\"../api/ng/service/%24interpolate\">interpolation directive</a> and <code>ng-repeat</code> matches the <a href=\"../api/ng/directive/ngrepeat\"><code>ngRepeat</code> directive</a>.</p> <p>But <a href=\"../api/ng/directive/ngrepeat\">ngRepeat</a> has a dilemma.</p> <p>It needs to be able to clone new <code>&lt;li&gt;</code> elements for every <code>action</code> in <code>user.actions</code>. This initially seems trivial, but it becomes more complicated when you consider that <code>user.actions</code> might have items added to it later. This means that it needs to save a clean copy of the <code>&lt;li&gt;</code> element for cloning purposes.</p> <p>As new <code>action</code>s are inserted, the template <code>&lt;li&gt;</code> element needs to be cloned and inserted into <code>ul</code>. But cloning the <code>&lt;li&gt;</code> element is not enough. It also needs to compile the <code>&lt;li&gt;</code> so that its directives, like <code>{{action.description}}</code>, evaluate against the right <a href=\"../api/ng/type/%24rootscope.scope\">scope</a>.</p> <p>A naive approach to solving this problem would be to simply insert a copy of the <code>&lt;li&gt;</code> element and then compile it. The problem with this approach is that compiling on every <code>&lt;li&gt;</code> element that we clone would duplicate a lot of the work. Specifically, we'd be traversing <code>&lt;li&gt;</code> each time before cloning it to find the directives. This would cause the compilation process to be slower, in turn making applications less responsive when inserting new nodes.</p> <p>The solution is to break the compilation process into two phases:</p> <p>the <strong>compile phase</strong> where all of the directives are identified and sorted by priority, and a <strong>linking phase</strong> where any work which \"links\" a specific instance of the <a href=\"../api/ng/type/%24rootscope.scope\">scope</a> and the specific instance of an <code>&lt;li&gt;</code> is performed.</p> <div class=\"alert alert-warning\"> <strong>Note:</strong> <em>Link</em> means setting up listeners on the DOM and setting up <code>$watch</code> on the Scope to keep the two in sync. </div> <p><a href=\"../api/ng/directive/ngrepeat\"><code>ngRepeat</code></a> works by preventing the compilation process from descending into the <code>&lt;li&gt;</code> element so it can make a clone of the original and handle inserting and removing DOM nodes itself.</p> <p>Instead the <a href=\"../api/ng/directive/ngrepeat\"><code>ngRepeat</code></a> directive compiles <code>&lt;li&gt;</code> separately. The result of the <code>&lt;li&gt;</code> element compilation is a linking function which contains all of the directives contained in the <code>&lt;li&gt;</code> element, ready to be attached to a specific clone of the <code>&lt;li&gt;</code> element.</p> <p>At runtime the <a href=\"../api/ng/directive/ngrepeat\"><code>ngRepeat</code></a> watches the expression and as items are added to the array it clones the <code>&lt;li&gt;</code> element, creates a new <a href=\"../api/ng/type/%24rootscope.scope\">scope</a> for the cloned <code>&lt;li&gt;</code> element and calls the link function on the cloned <code>&lt;li&gt;</code>.</p> <h3 id=\"understanding-how-scopes-work-with-transcluded-directives\">Understanding How Scopes Work with Transcluded Directives</h3> <p>One of the most common use cases for directives is to create reusable components.</p> <p>Below is a pseudo code showing how a simplified dialog component may work.</p> <pre data-language=\"html\">&lt;div&gt;\n  &lt;button ng-click=\"show=true\"&gt;show&lt;/button&gt;\n\n  &lt;dialog title=\"Hello {{username}}.\"\n          visible=\"show\"\n          on-cancel=\"show = false\"\n          on-ok=\"show = false; doSomething()\"&gt;\n     Body goes here: {{username}} is {{title}}.\n  &lt;/dialog&gt;\n&lt;/div&gt;\n</pre> <p>Clicking on the \"show\" button will open the dialog. The dialog will have a title, which is data bound to <code>username</code>, and it will also have a body which we would like to transclude into the dialog.</p> <p>Here is an example of what the template definition for the <code>dialog</code> widget may look like.</p> <pre data-language=\"html\">&lt;div ng-show=\"visible\"&gt;\n  &lt;h3&gt;{{title}}&lt;/h3&gt;\n  &lt;div class=\"body\" ng-transclude&gt;&lt;/div&gt;\n  &lt;div class=\"footer\"&gt;\n    &lt;button ng-click=\"onOk()\"&gt;Save changes&lt;/button&gt;\n    &lt;button ng-click=\"onCancel()\"&gt;Close&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre> <p>This will not render properly, unless we do some scope magic.</p> <p>The first issue we have to solve is that the dialog box template expects <code>title</code> to be defined. But we would like the template's scope property <code>title</code> to be the result of interpolating the <code>&lt;dialog&gt;</code> element's <code>title</code> attribute (i.e. <code>\"Hello {{username}}\"</code>). Furthermore, the buttons expect the <code>onOk</code> and <code>onCancel</code> functions to be present in the scope. This limits the usefulness of the widget. To solve the mapping issue we use the <code>scope</code> to create local variables which the template expects as follows:</p> <pre data-language=\"javascript\">scope: {\n  title: '@',             // the title uses the data-binding from the parent scope\n  onOk: '&amp;',              // create a delegate onOk function\n  onCancel: '&amp;',          // create a delegate onCancel function\n  visible: '='            // set up visible to accept data-binding\n}\n</pre> <p>Creating local properties on widget scope creates two problems:</p> <ol> <li>\n<p>isolation - if the user forgets to set <code>title</code> attribute of the dialog widget the dialog template will bind to parent scope property. This is unpredictable and undesirable.</p> </li> <li>\n<p>transclusion - the transcluded DOM can see the widget locals, which may overwrite the properties which the transclusion needs for data-binding. In our example the <code>title</code> property of the widget clobbers the <code>title</code> property of the transclusion.</p> </li> </ol> <p>To solve the issue of lack of isolation, the directive declares a new <code>isolated</code> scope. An isolated scope does not prototypically inherit from the parent scope, and therefore we don't have to worry about accidentally clobbering any properties.</p> <p>However <code>isolated</code> scope creates a new problem: if a transcluded DOM is a child of the widget isolated scope then it will not be able to bind to anything. For this reason the transcluded scope is a child of the original scope, before the widget created an isolated scope for its local variables. This makes the transcluded and widget isolated scope siblings.</p> <p>This may seem to be unexpected complexity, but it gives the widget user and developer the least surprise.</p> <p>Therefore the final directive definition looks something like this:</p> <pre data-language=\"javascript\">transclude: true,\nscope: {\n    title: '@',             // the title uses the data-binding from the parent scope\n    onOk: '&amp;',              // create a delegate onOk function\n    onCancel: '&amp;',          // create a delegate onCancel function\n    visible: '='            // set up visible to accept data-binding\n},\nrestrict: 'E',\nreplace: true\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/compiler\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/compiler</a>\n  </p>\n</div>\n","guide/$location":"<h1 id=\"what-does-it-do-\">\n<a href=\"https://github.com/angular/angular.js/edit//docs/content/guide/%24location.ngdoc?message=docs(guide%2FUsing%20%24location)%3A%20describe%20your%20change...\" class=\"improve-docs btn btn-primary\">Improve this Doc</a>What does it do?</h1> <p>The <code>$location</code> service parses the URL in the browser address bar (based on <a href=\"https://developer.mozilla.org/en/window.location\"><code>window.location</code></a>) and makes the URL available to your application. Changes to the URL in the address bar are reflected into the <code>$location</code> service and changes to <code>$location</code> are reflected into the browser address bar.</p> <p><strong>The $location service:</strong></p> <ul> <li>Exposes the current URL in the browser address bar, so you can<ul> <li>Watch and observe the URL.</li> <li>Change the URL.</li> </ul> </li> <li>Maintains synchronization between itself and the browser's URL when the user<ul> <li>Changes the address in the browser's address bar.</li> <li>Clicks the back or forward button in the browser (or clicks a History link).</li> <li>Clicks on a link in the page.</li> </ul> </li> <li>Represents the URL object as a set of methods (protocol, host, port, path, search, hash).</li> </ul> <h2 id=\"comparing-location-to-window-location-\">Comparing $location to window.location</h2> <table class=\"table\"> <thead> <tr> <th class=\"empty-corner-lt\"></th> <th>window.location</th> <th>$location service</th> </tr> </thead> <tbody> <tr> <td class=\"head\">purpose</td> <td>allow read/write access to the current browser location</td> <td>same</td> </tr> <tr> <td class=\"head\">API</td> <td>exposes \"raw\" object with properties that can be directly modified</td> <td>exposes jQuery-style getters and setters</td> </tr> <tr> <td class=\"head\">integration with angular application life-cycle</td> <td>none</td> <td>knows about all internal life-cycle phases, integrates with <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">$watch</a>, ...</td> </tr> <tr> <td class=\"head\">seamless integration with HTML5 API</td> <td>no</td> <td>yes (with a fallback for legacy browsers)</td> </tr> <tr> <td class=\"head\">aware of docroot/context from which the application is loaded</td> <td>no - window.location.pathname returns \"/docroot/actual/path\"</td> <td>yes - $location.path() returns \"/actual/path\"</td> </tr> </tbody> </table> <h2 id=\"when-should-i-use-location-\">When should I use $location?</h2> <p>Any time your application needs to react to a change in the current URL or if you want to change the current URL in the browser.</p> <h2 id=\"what-does-it-not-do-\">What does it not do?</h2> <p>It does not cause a full page reload when the browser URL is changed. To reload the page after changing the URL, use the lower-level API, <code>$window.location.href</code>.</p> <h2 id=\"general-overview-of-the-api\">General overview of the API</h2> <p>The <code>$location</code> service can behave differently, depending on the configuration that was provided to it when it was instantiated. The default configuration is suitable for many applications, for others customizing the configuration can enable new features.</p> <p>Once the <code>$location</code> service is instantiated, you can interact with it via jQuery-style getter and setter methods that allow you to get or change the current URL in the browser.</p> <h2 id=\"-location-service-configuration\">$location service configuration</h2> <p>To configure the <code>$location</code> service, retrieve the <a href=\"../api/ng/provider/%24locationprovider\">$locationProvider</a> and set the parameters as follows:</p> <ul> <li>\n<p><strong>html5Mode(mode)</strong>: {boolean|Object}<br> <code>true</code> or <code>enabled:true</code> - see HTML5 mode<br> <code>false</code> or <code>enabled:false</code> - see Hashbang mode<br> <code>requireBase:true</code> - see Relative links<br> default: <code>enabled:false</code></p> </li> <li>\n<p><strong>hashPrefix(prefix)</strong>: {string}<br> prefix used for Hashbang URLs (used in Hashbang mode or in legacy browser in Html5 mode)<br> default: <code>\"\"</code></p> </li> </ul> <h3 id=\"example-configuration\">Example configuration</h3> <pre data-language=\"javascript\">$locationProvider.html5Mode(true).hashPrefix('!');\n</pre> <h2 id=\"getter-and-setter-methods\">Getter and setter methods</h2> <p><code>$location</code> service provides getter methods for read-only parts of the URL (absUrl, protocol, host, port) and getter / setter methods for url, path, search, hash:</p> <pre data-language=\"javascript\">// get the current path\n$location.path();\n\n// change the path\n$location.path('/newValue')\n</pre> <p>All of the setter methods return the same <code>$location</code> object to allow chaining. For example, to change multiple segments in one go, chain setters like this:</p> <pre data-language=\"javascript\">$location.path('/newValue').search({key: value});\n</pre> <h2 id=\"replace-method\">Replace method</h2> <p>There is a special <code>replace</code> method which can be used to tell the $location service that the next time the $location service is synced with the browser, the last history record should be replaced instead of creating a new one. This is useful when you want to implement redirection, which would otherwise break the back button (navigating back would retrigger the redirection). To change the current URL without creating a new browser history record you can call:</p> <pre data-language=\"javascript\">$location.path('/someNewPath');\n$location.replace();\n// or you can chain these as: $location.path('/someNewPath').replace();\n</pre> <p>Note that the setters don't update <code>window.location</code> immediately. Instead, the <code>$location</code> service is aware of the <a href=\"../api/ng/type/%24rootscope.scope\">scope</a> life-cycle and coalesces multiple <code>$location</code> mutations into one \"commit\" to the <code>window.location</code> object during the scope <code>$digest</code> phase. Since multiple changes to the $location's state will be pushed to the browser as a single change, it's enough to call the <code>replace()</code> method just once to make the entire \"commit\" a replace operation rather than an addition to the browser history. Once the browser is updated, the $location service resets the flag set by <code>replace()</code> method and future mutations will create new history records, unless <code>replace()</code> is called again.</p> <h3 id=\"setters-and-character-encoding\">Setters and character encoding</h3> <p>You can pass special characters to <code>$location</code> service and it will encode them according to rules specified in <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>. When you access the methods:</p> <ul> <li>All values that are passed to <code>$location</code> setter methods, <code>path()</code>, <code>search()</code>, <code>hash()</code>, are encoded.</li> <li>Getters (calls to methods without parameters) return decoded values for the following methods <code>path()</code>, <code>search()</code>, <code>hash()</code>.</li> <li>When you call the <code>absUrl()</code> method, the returned value is a full url with its segments encoded.</li> <li>When you call the <code>url()</code> method, the returned value is path, search and hash, in the form <code>/path?search=a&amp;b=c#hash</code>. The segments are encoded as well.</li> </ul> <h2 id=\"hashbang-and-html5-modes\">Hashbang and HTML5 Modes</h2> <p><code>$location</code> service has two configuration modes which control the format of the URL in the browser address bar: <strong>Hashbang mode</strong> (the default) and the <strong>HTML5 mode</strong> which is based on using the HTML5 <a href=\"http://www.w3.org/TR/html5/introduction.html#history-0\">History API</a>. Applications use the same API in both modes and the <code>$location</code> service will work with appropriate URL segments and browser APIs to facilitate the browser URL change and history management.</p> <p><img src=\"https://code.angularjs.org/1.3.20/docs/img/guide/hashbang_vs_regular_url.jpg\"></p> <table class=\"table\"> <thead> <tr> <th class=\"empty-corner-lt\"></th> <th>Hashbang mode</th> <th>HTML5 mode</th> </tr> </thead> <tbody> <tr> <td class=\"head\">configuration</td> <td>the default</td> <td>{ html5Mode: true }</td> </tr> <tr> <td class=\"head\">URL format</td> <td>hashbang URLs in all browsers</td> <td>regular URLs in modern browser, hashbang URLs in old browser</td> </tr> <tr> <td class=\"head\">&lt;a href=\"\"&gt; link rewriting</td> <td>no</td> <td>yes</td> </tr> <tr> <td class=\"head\">requires server-side configuration</td> <td>no</td> <td>yes</td> </tr> </tbody> </table> <h2 id=\"hashbang-mode-default-mode-\">Hashbang mode (default mode)</h2> <p>In this mode, <code>$location</code> uses Hashbang URLs in all browsers. Angular also does not intercept and rewrite links in this mode. I.e. links work as expected and also perform full page reloads when other parts of the url than the hash fragment was changed.</p>  <pre data-language=\"javascript\">it('should show example', inject(\n  function($locationProvider) {\n    $locationProvider.html5Mode(false);\n    $locationProvider.hashPrefix('!');\n  },\n  function($location) {\n    // open http://example.com/base/index.html#!/a\n    $location.absUrl() == 'http://example.com/base/index.html#!/a'\n    $location.path() == '/a'\n\n    $location.path('/foo')\n    $location.absUrl() == 'http://example.com/base/index.html#!/foo'\n\n    $location.search() == {}\n    $location.search({a: 'b', c: true});\n    $location.absUrl() == 'http://example.com/base/index.html#!/foo?a=b&amp;c'\n\n    $location.path('/new').search('x=y');\n    $location.absUrl() == 'http://example.com/base/index.html#!/new?x=y'\n  }\n));\n</pre> <h2 id=\"html5-mode\">HTML5 mode</h2> <p>In HTML5 mode, the <code>$location</code> service getters and setters interact with the browser URL address through the HTML5 history API. This allows for use of regular URL path and search segments, instead of their hashbang equivalents. If the HTML5 History API is not supported by a browser, the <code>$location</code> service will fall back to using the hashbang URLs automatically. This frees you from having to worry about whether the browser displaying your app supports the history API or not; the <code>$location</code> service transparently uses the best available option.</p> <ul> <li>Opening a regular URL in a legacy browser -&gt; redirects to a hashbang URL</li> <li>Opening hashbang URL in a modern browser -&gt; rewrites to a regular URL</li> </ul> <p>Note that in this mode, Angular intercepts all links (subject to the \"Html link rewriting\" rules below) and updates the url in a way that never performs a full page reload.</p>  <pre data-language=\"javascript\">it('should show example', inject(\n  function($locationProvider) {\n    $locationProvider.html5Mode(true);\n    $locationProvider.hashPrefix('!');\n  },\n  function($location) {\n    // in browser with HTML5 history support:\n    // open http://example.com/#!/a -&gt; rewrite to http://example.com/a\n    // (replacing the http://example.com/#!/a history record)\n    $location.path() == '/a'\n\n    $location.path('/foo');\n    $location.absUrl() == 'http://example.com/foo'\n\n    $location.search() == {}\n    $location.search({a: 'b', c: true});\n    $location.absUrl() == 'http://example.com/foo?a=b&amp;c'\n\n    $location.path('/new').search('x=y');\n    $location.url() == 'new?x=y'\n    $location.absUrl() == 'http://example.com/new?x=y'\n\n    // in browser without html5 history support:\n    // open http://example.com/new?x=y -&gt; redirect to http://example.com/#!/new?x=y\n    // (again replacing the http://example.com/new?x=y history item)\n    $location.path() == '/new'\n    $location.search() == {x: 'y'}\n\n    $location.path('/foo/bar');\n    $location.path() == '/foo/bar'\n    $location.url() == '/foo/bar?x=y'\n    $location.absUrl() == 'http://example.com/#!/foo/bar?x=y'\n  }\n));\n</pre> <h3 id=\"fallback-for-legacy-browsers\">Fallback for legacy browsers</h3> <p>For browsers that support the HTML5 history API, <code>$location</code> uses the HTML5 history API to write path and search. If the history API is not supported by a browser, <code>$location</code> supplies a Hasbang URL. This frees you from having to worry about whether the browser viewing your app supports the history API or not; the <code>$location</code> service makes this transparent to you.</p> <h3 id=\"html-link-rewriting\">Html link rewriting</h3> <p>When you use HTML5 history API mode, you will not need special hashbang links. All you have to do is specify regular URL links, such as: <code>&lt;a href=\"/some?foo=bar\"&gt;link&lt;/a&gt;</code></p> <p>When a user clicks on this link,</p> <ul> <li>In a legacy browser, the URL changes to <code>/index.html#!/some?foo=bar</code>\n</li> <li>In a modern browser, the URL changes to <code>/some?foo=bar</code>\n</li> </ul> <p>In cases like the following, links are not rewritten; instead, the browser will perform a full page reload to the original link.</p> <ul> <li>Links that contain <code>target</code> element<br> Example: <code>&lt;a href=\"/ext/link?a=b\" target=\"_self\"&gt;link&lt;/a&gt;</code>\n</li> <li>Absolute links that go to a different domain<br> Example: <code>&lt;a href=\"http://angularjs.org/\"&gt;link&lt;/a&gt;</code>\n</li> <li>Links starting with '/' that lead to a different base path<br> Example: <code>&lt;a href=\"/not-my-base/link\"&gt;link&lt;/a&gt;</code>\n</li> </ul> <h3 id=\"relative-links\">Relative links</h3> <p>Be sure to check all relative links, images, scripts etc. Angular requires you to specify the url base in the head of your main html file (<code>&lt;base href=\"/my-base\"&gt;</code>) unless <code>html5Mode.requireBase</code> is set to <code>false</code> in the html5Mode definition object passed to <code>$locationProvider.html5Mode()</code>. With that, relative urls will always be resolved to this base url, even if the initial url of the document was different.</p> <p>There is one exception: Links that only contain a hash fragment (e.g. <code>&lt;a href=\"#target\"&gt;</code>) will only change <code>$location.hash()</code> and not modify the url otherwise. This is useful for scrolling to anchors on the same page without needing to know on which page the user currently is.</p> <h3 id=\"server-side\">Server side</h3> <p>Using this mode requires URL rewriting on server side, basically you have to rewrite all your links to entry point of your application (e.g. index.html). Requiring a <code>&lt;base&gt;</code> tag is also important for this case, as it allows Angular to differentiate between the part of the url that is the application base and the path that should be handled by the application.</p> <h3 id=\"sending-links-among-different-browsers\">Sending links among different browsers</h3> <p>Because of rewriting capability in HTML5 mode, your users will be able to open regular url links in legacy browsers and hashbang links in modern browser:</p> <ul> <li>Modern browser will rewrite hashbang URLs to regular URLs.</li> <li>Older browsers will redirect regular URLs to hashbang URLs.</li> </ul>  <p>Here you can see two <code>$location</code> instances, both in <strong>Html5 mode</strong>, but on different browsers, so that you can see the differences. These <code>$location</code> services are connected to a fake browsers. Each input represents the address bar of the browser.</p> <p>Note that when you type hashbang url into first browser (or vice versa) it doesn't rewrite / redirect to regular / hashbang url, as this conversion happens only during parsing the initial URL = on page reload.</p> <p>In these examples we use <code>&lt;base href=\"/base/index.html\" /&gt;</code></p> <h4 id=\"browser-in-html5-mode\">Browser in HTML5 mode</h4>  <h4 id=\"browser-in-html5-fallback-mode-hashbang-mode-\">Browser in HTML5 Fallback mode (Hashbang mode)</h4>  <h2 id=\"caveats\">Caveats</h2> <h2 id=\"page-reload-navigation\">Page reload navigation</h2> <p>The <code>$location</code> service allows you to change only the URL; it does not allow you to reload the page. When you need to change the URL and reload the page or navigate to a different page, please use a lower level API, <a href=\"../api/ng/service/%24window\">$window.location.href</a>.</p> <h2 id=\"using-location-outside-of-the-scope-life-cycle\">Using $location outside of the scope life-cycle</h2> <p><code>$location</code> knows about Angular's <a href=\"../api/ng/type/%24rootscope.scope\">scope</a> life-cycle. When a URL changes in the browser it updates the <code>$location</code> and calls <code>$apply</code> so that all <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">$watchers</a> / <a href=\"../api/ng/type/%24compile.directive.attributes#%24observe.html\">$observers</a> are notified. When you change the <code>$location</code> inside the <code>$digest</code> phase everything is ok; <code>$location</code> will propagate this change into browser and will notify all the <a href=\"../api/ng/type/%24rootscope.scope#%24watch.html\">$watchers</a> / <a href=\"../api/ng/type/%24compile.directive.attributes#%24observe.html\">$observers</a>. When you want to change the <code>$location</code> from outside Angular (for example, through a DOM Event or during testing) - you must call <code>$apply</code> to propagate the changes.</p> <h2 id=\"-location-path-and-or-prefixes\">$location.path() and ! or / prefixes</h2> <p>A path should always begin with forward slash (<code>/</code>); the <code>$location.path()</code> setter will add the forward slash if it is missing.</p> <p>Note that the <code>!</code> prefix in the hashbang mode is not part of <code>$location.path()</code>; it is actually hashPrefix.</p> <h2 id=\"crawling-your-app\">Crawling your app</h2> <p>To allow indexing of your AJAX application, you have to add special meta tag in the head section of your document:</p> <pre data-language=\"html\">&lt;meta name=\"fragment\" content=\"!\" /&gt;\n</pre> <p>This will cause crawler bot to request links with <code>_escaped_fragment_</code> param so that your server can recognize the crawler and serve a HTML snapshots. For more information about this technique, see <a href=\"http://code.google.com/web/ajaxcrawling/docs/specification.html\">Making AJAX Applications Crawlable</a>.</p> <h2 id=\"testing-with-the-location-service\">Testing with the $location service</h2> <p>When using <code>$location</code> service during testing, you are outside of the angular's <a href=\"../api/ng/type/%24rootscope.scope\">scope</a> life-cycle. This means it's your responsibility to call <code>scope.$apply()</code>.</p> <pre data-language=\"javascript\">describe('serviceUnderTest', function() {\n  beforeEach(module(function($provide) {\n    $provide.factory('serviceUnderTest', function($location){\n      // whatever it does...\n    });\n  });\n\n  it('should...', inject(function($location, $rootScope, serviceUnderTest) {\n    $location.path('/new/path');\n    $rootScope.$apply();\n\n    // test whatever the service should do...\n\n  }));\n});\n</pre> <h2 id=\"migrating-from-earlier-angularjs-releases\">Migrating from earlier AngularJS releases</h2> <p>In earlier releases of Angular, <code>$location</code> used <code>hashPath</code> or <code>hashSearch</code> to process path and search methods. With this release, the <code>$location</code> service processes path and search methods and then uses the information it obtains to compose hashbang URLs (such as <code>http://server.com/#!/path?search=a</code>), when necessary.</p> <h2 id=\"changes-to-your-code\">Changes to your code</h2> <table class=\"table\"> <thead> <tr class=\"head\"> <th>Navigation inside the app</th> <th>Change to</th> </tr> </thead> <tbody> <tr> <td>$location.href = value<br>$location.hash = value<br>$location.update(value)<br>$location.updateHash(value)</td> <td>$location.path(path).search(search)</td> </tr> <tr> <td>$location.hashPath = path</td> <td>$location.path(path)</td> </tr> <tr> <td>$location.hashSearch = search</td> <td>$location.search(search)</td> </tr> <tr class=\"head\"> <td>Navigation outside the app</td> <td>Use lower level API</td> </tr> <tr> <td>$location.href = value<br>$location.update(value)</td> <td>$window.location.href = value</td> </tr> <tr> <td>$location[protocol | host | port | path | search]</td> <td>$window.location[protocol | host | port | path | search]</td> </tr> <tr class=\"head\"> <td>Read access</td> <td>Change to</td> </tr> <tr> <td>$location.hashPath</td> <td>$location.path()</td> </tr> <tr> <td>$location.hashSearch</td> <td>$location.search()</td> </tr> <tr> <td>$location.href<br>$location.protocol<br>$location.host<br>$location.port<br>$location.hash</td> <td>$location.absUrl()<br>$location.protocol()<br>$location.host()<br>$location.port()<br>$location.path() + $location.search()</td> </tr> <tr> <td>$location.path<br>$location.search</td> <td>$window.location.path<br>$window.location.search</td> </tr> </tbody> </table> <h2 id=\"two-way-binding-to-location\">Two-way binding to $location</h2> <p>Because <code>$location</code> uses getters/setters, you can use <code>ng-model-options=\"{ getterSetter: true }\"</code> to bind it to <code>ngModel</code>:</p>  <h2 id=\"related-api\">Related API</h2> <ul> <li><a href=\"../api/ng/service/%24location\"><code>$location</code> API</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://code.angularjs.org/1.3.20/docs/guide/$location\" class=\"_attribution-link\">https://code.angularjs.org/1.3.20/docs/guide/$location</a>\n  </p>\n</div>\n"}