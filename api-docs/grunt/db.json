{"api/grunt":"<h1>grunt</h1>\n<p>Grunt exposes all of its methods and properties on the <code>grunt</code> object that gets passed into the <code>module.exports</code> function exported in your <a href=\"../index\">Gruntfile</a>, Grunt plugin or in a <a href=\"../creating-tasks\">tasks file</a>.</p> <p>Nearly all of the following methods are defined elsewhere, but are provided directly on the <code>grunt</code> object for convenience. See the individual api section docs for detailed explanations and examples.</p> <h2 id=\"config\">Config</h2> <h3 id=\"grunt.initconfig\">grunt.initConfig</h3> <p><em>This method is an alias for the <a href=\"http://gruntjs.com/grunt.config#grunt.config.init\">grunt.config.init</a> method.</em></p> <h2 id=\"creating-tasks\">Creating Tasks</h2> <h3 id=\"grunt.registertask\">grunt.registerTask</h3> <p><em>This method is an alias for the <a href=\"http://gruntjs.com/grunt.task#grunt.task.registertask\">grunt.task.registerTask</a> method.</em></p> <h3 id=\"grunt.registermultitask\">grunt.registerMultiTask</h3> <p><em>This method is an alias for the <a href=\"http://gruntjs.com/grunt.task#grunt.task.registermultitask\">grunt.task.registerMultiTask</a> method.</em></p> <h3 id=\"grunt.renametask\">grunt.renameTask</h3> <p><em>This method is an alias for the <a href=\"http://gruntjs.com/grunt.task#grunt.task.renametask\">grunt.task.renameTask</a> method.</em></p> <h2 id=\"loading-externally-defined-tasks\">Loading Externally-Defined Tasks</h2> <h3 id=\"grunt.loadtasks\">grunt.loadTasks</h3> <p><em>This method is an alias for the <a href=\"http://gruntjs.com/grunt.task#grunt.task.loadtasks\">grunt.task.loadTasks</a> method.</em></p> <h3 id=\"grunt.loadnpmtasks\">grunt.loadNpmTasks</h3> <p><em>This method is an alias for the <a href=\"http://gruntjs.com/grunt.task#grunt.task.loadnpmtasks\">grunt.task.loadNpmTasks</a> method.</em></p> <h2 id=\"warnings-and-fatal-errors\">Warnings and Fatal Errors</h2> <h3 id=\"grunt.warn\">grunt.warn</h3> <p><em>This method is an alias for the <a href=\"http://gruntjs.com/grunt.fail#grunt.fail.warn\">grunt.fail.warn</a> method.</em></p> <h3 id=\"grunt.fatal\">grunt.fatal</h3> <p><em>This method is an alias for the <a href=\"http://gruntjs.com/grunt.fail#grunt.fail.fatal\">grunt.fail.fatal</a> method.</em></p> <h2 id=\"command-line-options\">Command-line Options</h2> <h3 id=\"grunt.option\">grunt.option</h3> <p>Retrieve the value of a command-line option, eg. <code>debug</code>. Note that for each command-line option, the inverse can be tested, eg. <code>no-debug</code>.</p> <pre>grunt.option(optionName)</pre> <h2 id=\"miscellaneous\">Miscellaneous</h2> <h3 id=\"grunt.package\">grunt.package</h3> <p>The current Grunt <code>package.json</code> metadata, as an object.</p> <pre>grunt.package</pre> <h3 id=\"grunt.version\">grunt.version</h3> <p>The current Grunt version, as a string. This is just a shortcut to the <code>grunt.package.version</code> property.</p> <pre>grunt.version</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/api/grunt\" class=\"_attribution-link\">http://gruntjs.com/api/grunt</a>\n  </p>\n</div>\n","api/grunt.fail":"<h1>grunt.fail</h1>\n<p>For when something goes horribly wrong.</p> <p>See the <a href=\"https://github.com/gruntjs/grunt/blob/master/lib/grunt/fail.js\">fail lib source</a> for more information.</p> <h2 id=\"the-fail-api\">The fail API</h2> <p>If something explodes (or is about to explode) inside a task, it can force Grunt to abort. See the <a href=\"http://gruntjs.com/exit-codes\">exit codes documentation</a> for a list of all built-in Grunt exit codes.</p> <p>Note that any method marked with a ☃ (unicode snowman) is also available directly on the <code>grunt</code> object. Just so you know. See the <a href=\"http://gruntjs.com/grunt\">API main page</a> for more usage information.</p> <h3 id=\"grunt.fail.warn\">grunt.fail.warn ☃</h3> <p>Display a warning and abort Grunt immediately. Grunt will continue processing tasks if the <code>--force</code> command-line option was specified. The <code>error</code> argument can be a string message or an error object.</p> <pre>grunt.fail.warn(error [, errorcode])</pre> <p>If <code>--stack</code> is specified on the command-line and an error object was specified, a stack trace will be logged.</p> <p><em>This method is also available as <code>grunt.warn</code>.</em></p> <h3 id=\"grunt.fail.fatal\">grunt.fail.fatal ☃</h3> <p>Display a warning and abort Grunt immediately. The <code>error</code> argument can be a string message or an error object.</p> <pre>grunt.fail.fatal(error [, errorcode])</pre> <p>If <code>--stack</code> is specified on the command-line and an error object was specified, a stack trace will be logged.</p> <p>A beep is emitted on fatal unless the <code>--no-color</code> option is specified.</p> <p><em>This method is also available as <code>grunt.fatal</code>.</em></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/api/grunt.fail\" class=\"_attribution-link\">http://gruntjs.com/api/grunt.fail</a>\n  </p>\n</div>\n","creating-tasks":"<h1>Creating tasks</h1>\n<p>Tasks are grunt's bread and butter. The stuff you do most often, like <code>jshint</code> or <code>nodeunit</code>. Every time Grunt is run, you specify one or more tasks to run, which tells Grunt what you'd like it to do.</p> <p>If you don't specify a task, but a task named \"default\" has been defined, that task will run (unsurprisingly) by default.</p> <h2 id=\"alias-tasks\">Alias Tasks</h2> <p>If a task list is specified, the new task will be an alias for one or more other tasks. Whenever this \"alias task\" is run, every specified tasks in <code>taskList</code> will be run, in the order specified. The <code>taskList</code> argument must be an array of tasks.</p> <pre>grunt.registerTask(taskName, [description, ] taskList)</pre> <p>This example alias task defines a \"default\" task whereby the \"jshint\", \"qunit\", \"concat\" and \"uglify\" tasks are run automatically if Grunt is executed without specifying any tasks:</p> <pre>grunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);</pre> <p>Task arguments can be specified as well. In this example, the alias \"dist\" runs both the \"concat\" and \"uglify\" tasks, each with a \"dist\" argument:</p> <pre>grunt.registerTask('dist', ['concat:dist', 'uglify:dist']);</pre> <h2 id=\"multi-tasks\">Multi Tasks</h2> <p>When a multi task is run, Grunt looks for a property of the same name in the Grunt configuration. Multi-tasks can have multiple configurations, defined using arbitrarily named \"targets.\"</p> <p>Specifying both a task and target like <code>grunt concat:foo</code> or <code>grunt concat:bar</code> will process just the specified target's configuration, while running <code>grunt concat</code> will iterate over <em>all</em> targets, processing each in turn. Note that if a task has been renamed with <a href=\"http://gruntjs.com/grunt.task#grunt.task.renametask\">grunt.task.renameTask</a>, Grunt will look for a property with the <em>new</em> task name in the config object.</p> <p>Most of the contrib tasks, including the <a href=\"https://github.com/gruntjs/grunt-contrib-jshint#jshint-task\">grunt-contrib-jshint plugin jshint task</a> and <a href=\"https://github.com/gruntjs/grunt-contrib-concat#concat-task\">grunt-contrib-concat plugin concat task</a> are multi tasks.</p> <pre>grunt.registerMultiTask(taskName, [description, ] taskFunction)</pre> <p>Given the specified configuration, this example multi task would log <code>foo: 1,2,3</code> if Grunt was run via <code>grunt log:foo</code>, or it would log <code>bar: hello world</code> if Grunt was run via <code>grunt log:bar</code>. If Grunt was run as <code>grunt log</code> however, it would log <code>foo: 1,2,3</code> then <code>bar: hello world</code> then <code>baz: false</code>.</p> <pre>grunt.initConfig({\n  log: {\n    foo: [1, 2, 3],\n    bar: 'hello world',\n    baz: false\n  }\n});\n\ngrunt.registerMultiTask('log', 'Log stuff.', function() {\n  grunt.log.writeln(this.target + ': ' + this.data);\n});</pre> <h2 id=\"basic-tasks\">\"Basic\" Tasks</h2> <p>When a basic task is run, Grunt doesn't look at the configuration or environment—it just runs the specified task function, passing any specified colon-separated arguments in as function arguments.</p> <pre>grunt.registerTask(taskName, [description, ] taskFunction)</pre> <p>This example task logs <code>foo, testing 123</code> if Grunt is run via <code>grunt foo:testing:123</code>. If the task is run without arguments as <code>grunt foo</code> the task logs <code>foo, no args</code>.</p> <pre>grunt.registerTask('foo', 'A sample task that logs stuff.', function(arg1, arg2) {\n  if (arguments.length === 0) {\n    grunt.log.writeln(this.name + \", no args\");\n  } else {\n    grunt.log.writeln(this.name + \", \" + arg1 + \" \" + arg2);\n  }\n});</pre> <h2 id=\"custom-tasks\">Custom tasks</h2> <p>You can go crazy with tasks. If your tasks don't follow the \"multi task\" structure, use a custom task.</p> <pre>grunt.registerTask('default', 'My \"default\" task description.', function() {\n  grunt.log.writeln('Currently running the \"default\" task.');\n});</pre> <p>Inside a task, you can run other tasks.</p> <pre>grunt.registerTask('foo', 'My \"foo\" task.', function() {\n  // Enqueue \"bar\" and \"baz\" tasks, to run after \"foo\" finishes, in-order.\n  grunt.task.run('bar', 'baz');\n  // Or:\n  grunt.task.run(['bar', 'baz']);\n});</pre> <p>Tasks can be asynchronous.</p> <pre>grunt.registerTask('asyncfoo', 'My \"asyncfoo\" task.', function() {\n  // Force task into async mode and grab a handle to the \"done\" function.\n  var done = this.async();\n  // Run some sync stuff.\n  grunt.log.writeln('Processing task...');\n  // And some async stuff.\n  setTimeout(function() {\n    grunt.log.writeln('All done!');\n    done();\n  }, 1000);\n});</pre> <p>Tasks can access their own name and arguments.</p> <pre>grunt.registerTask('foo', 'My \"foo\" task.', function(a, b) {\n  grunt.log.writeln(this.name, a, b);\n});\n\n// Usage:\n// grunt foo\n//   logs: \"foo\", undefined, undefined\n// grunt foo:bar\n//   logs: \"foo\", \"bar\", undefined\n// grunt foo:bar:baz\n//   logs: \"foo\", \"bar\", \"baz\"</pre> <p>Tasks can fail if any errors were logged.</p> <pre>grunt.registerTask('foo', 'My \"foo\" task.', function() {\n  if (failureOfSomeKind) {\n    grunt.log.error('This is an error message.');\n  }\n\n  // Fail by returning false if this task had errors\n  if (ifErrors) { return false; }\n\n  grunt.log.writeln('This is the success message');\n});</pre> <p>When tasks fail, all subsequent tasks will be aborted unless <code>--force</code> was specified.</p> <pre>grunt.registerTask('foo', 'My \"foo\" task.', function() {\n  // Fail synchronously.\n  return false;\n});\n\ngrunt.registerTask('bar', 'My \"bar\" task.', function() {\n  var done = this.async();\n  setTimeout(function() {\n    // Fail asynchronously.\n    done(false);\n  }, 1000);\n});</pre> <p>Tasks can be dependent on the successful execution of other tasks. Note that <code>grunt.task.requires</code> won't actually RUN the other task(s). It'll just check to see that it has run and not failed.</p> <pre>grunt.registerTask('foo', 'My \"foo\" task.', function() {\n  return false;\n});\n\ngrunt.registerTask('bar', 'My \"bar\" task.', function() {\n  // Fail task if \"foo\" task failed or never ran.\n  grunt.task.requires('foo');\n  // This code executes if the \"foo\" task ran successfully.\n  grunt.log.writeln('Hello, world.');\n});\n\n// Usage:\n// grunt foo bar\n//   doesn't log, because foo failed.\n//   ***Note: This is an example of space-separated sequential commands,\n//   (similar to executing two lines of code: `grunt foo` then `grunt bar`)\n// grunt bar\n//   doesn't log, because foo never ran.</pre> <p>Tasks can fail if required configuration properties don't exist.</p> <pre>grunt.registerTask('foo', 'My \"foo\" task.', function() {\n  // Fail task if \"meta.name\" config prop is missing\n  // Format 1: String\n  grunt.config.requires('meta.name');\n  // or Format 2: Array\n  grunt.config.requires(['meta', 'name']);\n  // Log... conditionally.\n  grunt.log.writeln('This will only log if meta.name is defined in the config.');\n});</pre> <p>Tasks can access configuration properties.</p> <pre>grunt.registerTask('foo', 'My \"foo\" task.', function() {\n  // Log the property value. Returns null if the property is undefined.\n  grunt.log.writeln('The meta.name property is: ' + grunt.config('meta.name'));\n  // Also logs the property value. Returns null if the property is undefined.\n  grunt.log.writeln('The meta.name property is: ' + grunt.config(['meta', 'name']));\n});</pre> <p>Take a look at the <a href=\"https://github.com/gruntjs/\">contrib tasks</a> for more examples.</p> <h2 id=\"cli-options-environment\">CLI options / environment</h2> <p>Use <code>process.env</code> to access the <a href=\"https://en.wikipedia.org/wiki/Environment_variable\">environment variables</a>.</p> <p>Read more about the available command-line options on the <a href=\"using-the-cli\">Using the CLI</a> page.</p> <h2 id=\"why-doesn-t-my-asynchronous-task-complete\">Why doesn't my asynchronous task complete?</h2> <p>Chances are this is happening because you have forgotten to call the <a href=\"api/inside-tasks#this.async\">this.async</a> method to tell Grunt that your task is asynchronous. For simplicity's sake, Grunt uses a synchronous coding style, which can be switched to asynchronous by calling <code>this.async()</code> within the task body.</p> <p>Note that passing <code>false</code> to the <code>done()</code> function tells Grunt that the task has failed.</p> <p>For example:</p> <pre>grunt.registerTask('asyncme', 'My asynchronous task.', function() {\n  var done = this.async();\n  doSomethingAsync(done);\n});</pre> <h2 id=\"extra-reference\">Extra Reference</h2> <p>Checkout the <a href=\"http://gruntjs.com/api\">API</a> documentation if you need extra reference to create your tasks.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/creating-tasks\" class=\"_attribution-link\">http://gruntjs.com/creating-tasks</a>\n  </p>\n</div>\n","api/grunt.config":"<h1>grunt.config</h1>\n<p>Access project-specific configuration data defined in the <code>Gruntfile</code>.</p> <p>Note that any method marked with a ☃ (unicode snowman) is also available directly on the <code>grunt</code> object, and any method marked with a ☆ (white star) is also available inside tasks on the <code>this</code> object. Just so you know.</p> <h2 id=\"initializing-config-data\">Initializing Config Data</h2> <p><em>Note that the following method is also available on the <code>grunt</code> object as <code>grunt.initConfig</code>.</em></p> <h3 id=\"grunt.config.init\">grunt.config.init ☃</h3> <p>Initialize a configuration object for the current project. The specified <code>configObject</code> is used by tasks and can be accessed using the <code>grunt.config</code> method. Nearly every project's <code>Gruntfile</code> will call this method.</p> <pre>grunt.config.init(configObject)</pre> <p>Note that any specified <code>&lt;% %&gt;</code> template strings will be processed when config data is retrieved.</p> <p>This example contains sample config data for the <a href=\"https://github.com/gruntjs/grunt-contrib-jshint\">grunt-contrib-jshint plugin</a> <code>jshint</code> task:</p> <pre>grunt.config.init({\n  jshint: {\n    all: ['lib/*.js', 'test/*.js', 'Gruntfile.js']\n  }\n});</pre> <p>See the <a href=\"http://gruntjs.com/getting-started/\">Getting started</a> guide for more configuration examples.</p> <p><em>This method is also available as <code>grunt.initConfig</code>.</em></p> <h2 id=\"accessing-config-data\">Accessing Config Data</h2> <p>The following methods allow Grunt configuration data to be accessed either via dot-delimited string like <code>'pkg.author.name'</code> or via array of property name parts like <code>['pkg', 'author', 'name']</code>.</p> <p>Note that if a specified property name contains a <code>.</code> dot, it must be escaped with a literal backslash, eg. <code>'concat.dist/built\\\\.js'</code>. If an array of parts is specified, Grunt will handle the escaping internally with the <code>grunt.config.escape</code> method.</p> <h3 id=\"grunt.config\">grunt.config</h3> <p>Get or set a value from the project's Grunt configuration. This method serves as an alias to other methods; if two arguments are passed, <code>grunt.config.set</code> is called, otherwise <code>grunt.config.get</code> is called.</p> <pre>grunt.config([prop [, value]])</pre> <h3 id=\"grunt.config.get\">grunt.config.get</h3> <p>Get a value from the project's Grunt configuration. If <code>prop</code> is specified, that property's value is returned, or <code>null</code> if that property is not defined. If <code>prop</code> isn't specified, a copy of the entire config object is returned. Templates strings will be recursively processed using the <code>grunt.config.process</code> method.</p> <pre>grunt.config.get([prop])</pre> <h3 id=\"grunt.config.process\">grunt.config.process</h3> <p>Process a value, recursively expanding <code>&lt;% %&gt;</code> templates (via the <code>grunt.template.process</code> method) in the context of the Grunt config, as they are encountered. this method is called automatically by <code>grunt.config.get</code> but <em>not</em> by <code>grunt.config.getRaw</code>.</p> <pre>grunt.config.process(value)</pre> <p>If any retrieved value is entirely a single <code>'&lt;%= foo %&gt;'</code> or <code>'&lt;%= foo.bar %&gt;'</code> template string, and the specified <code>foo</code> or <code>foo.bar</code> property is a non-string (and not <code>null</code> or <code>undefined</code>) value, it will be expanded to the <em>actual</em> value. That, combined with grunt's task system automatically flattening arrays, can be extremely useful.</p> <h3 id=\"grunt.config.getraw\">grunt.config.getRaw</h3> <p>Get a raw value from the project's Grunt configuration, without processing <code>&lt;% %&gt;</code> template strings. If <code>prop</code> is specified, that property's value is returned, or <code>null</code> if that property is not defined. If <code>prop</code> isn't specified, a copy of the entire config object is returned.</p> <pre>grunt.config.getRaw([prop])</pre> <h3 id=\"grunt.config.set\">grunt.config.set</h3> <p>Set a value into the project's Grunt configuration.</p> <pre>grunt.config.set(prop, value)</pre> <p>Note that any specified <code>&lt;% %&gt;</code> template strings will only be processed when config data is retrieved.</p> <h3 id=\"grunt.config.escape\">grunt.config.escape</h3> <p>Escape <code>.</code> dots in the given <code>propString</code>. This should be used for property names that contain dots.</p> <pre>grunt.config.escape(propString)</pre> <h3 id=\"grunt.config.merge\">grunt.config.merge</h3> <p><em>Added in 0.4.5</em></p> <p>Recursively merges properties of the specified <code>configObject</code> into the current project configuration. Array and plain object properties are merged recursively while other value types are overridden.</p> <pre>grunt.config.merge(configObject)</pre> <p>You can use this method to append configuration options, targets, etc., to already defined tasks, for example:</p> <pre>grunt.config.merge({\n  watch: {\n    files: [\"path/to/files\"],\n    tasks: [\"task\"]\n  }\n});</pre> <p>Array values are merged based on their index. Consider the following code:</p> <pre>grunt.initConfig({\n  jshint: {\n    files: ['Gruntfile.js', 'src/**/*.js'],\n  }\n);\n\nvar config = {\n  jshint: {\n    files: ['hello.js'],\n  }\n};\n\ngrunt.config.merge(config);</pre> <p>It'll result in the configuration shown below:</p> <pre>jshint: {\n  files: ['hello.js', 'src/**/*.js'],\n}</pre> <p>In conclusion, the first value of the <code>files</code> array defined in the <code>config</code> variable (<code>hello.js</code>) overriddes the first value specified in the <code>initConfig</code> configuration call (<code>Gruntfile.js</code>).</p> <h2 id=\"requiring-config-data\">Requiring Config Data</h2> <p><em>Note that the method listed below is also available inside tasks on the <code>this</code> object as <code>this.requiresConfig</code>.</em></p> <h3 id=\"grunt.config.requires\">grunt.config.requires ☆</h3> <p>Fail the current task if one or more required config properties is missing, <code>null</code> or <code>undefined</code>. One or more string or array config properties may be specified.</p> <pre>grunt.config.requires(prop [, prop [, ...]])</pre> <p><em>This method is also available inside tasks as <code>this.requiresConfig</code>.</em></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/api/grunt.config\" class=\"_attribution-link\">http://gruntjs.com/api/grunt.config</a>\n  </p>\n</div>\n","api/grunt.event":"<h1>grunt.event</h1>\n<p>Even though only the most relevant methods are listed on this page, the full <a href=\"https://github.com/hij1nx/EventEmitter2\">EventEmitter2 API</a> is available on the <code>grunt.event</code> object. Event namespaces may be specified with the <code>.</code> (dot) separator, and namespace wildcards have been enabled.</p> <p><em>Note that Grunt doesn't yet emit any events, but can still be useful in your own tasks.</em></p> <h3 id=\"grunt.event.on\">grunt.event.on</h3> <p>Adds a listener to the end of the listeners array for the specified event.</p> <pre>grunt.event.on(event, listener)</pre> <h3 id=\"grunt.event.once\">grunt.event.once</h3> <p>Adds a <strong>one time</strong> listener for the event. The listener is invoked only the first time the event is fired, after which it is removed.</p> <pre>grunt.event.once(event, listener)</pre> <h3 id=\"grunt.event.many\">grunt.event.many</h3> <p>Adds a listener that will execute <strong>n times</strong> for the event before being removed.</p> <pre>grunt.event.many(event, timesToListen, listener)</pre> <h3 id=\"grunt.event.off\">grunt.event.off</h3> <p>Remove a listener from the listener array for the specified event.</p> <pre>grunt.event.off(event, listener)</pre> <h3 id=\"grunt.event.removealllisteners\">grunt.event.removeAllListeners</h3> <p>Removes all listeners, or those of the specified event.</p> <pre>grunt.event.removeAllListeners([event])</pre> <h3 id=\"grunt.event.emit\">grunt.event.emit</h3> <p>Execute each of the listeners that may be listening for the specified event name in order with the list of arguments.</p> <pre>grunt.event.emit(event, [arg1], [arg2], [...])</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/api/grunt.event\" class=\"_attribution-link\">http://gruntjs.com/api/grunt.event</a>\n  </p>\n</div>\n","api/grunt.log":"<h1>grunt.log</h1>\n<p>Output messages to the console.</p> <p>See the <a href=\"https://github.com/gruntjs/grunt-legacy-log/blob/master/index.js\">log lib source</a> for more information.</p> <h2 id=\"the-log-api\">The log API</h2> <p>Grunt output should look consistent, and maybe even pretty. As such, there is a plethora of logging methods, and a few useful patterns. All of the methods that actually log something are chainable.</p> <p><em>Note: all methods available under <code>grunt.verbose</code> work exactly like <code>grunt.log</code> methods, but only log if the <code>--verbose</code> command-line option was specified.</em></p> <h3 id=\"grunt.log.write-grunt.verbose.write\">grunt.log.write / grunt.verbose.write</h3> <p>Log the specified <code>msg</code> string, with no trailing newline.</p> <pre>grunt.log.write(msg)</pre> <h3 id=\"grunt.log.writeln-grunt.verbose.writeln\">grunt.log.writeln / grunt.verbose.writeln</h3> <p>Log the specified <code>msg</code> string, with trailing newline.</p> <pre>grunt.log.writeln([msg])</pre> <h3 id=\"grunt.log.error-grunt.verbose.error\">grunt.log.error / grunt.verbose.error</h3> <p>If <code>msg</code> string is omitted, logs <code>ERROR</code> in red, otherwise logs <code>&gt;&gt; msg</code>, with trailing newline.</p> <pre>grunt.log.error([msg])</pre> <h3 id=\"grunt.log.errorlns-grunt.verbose.errorlns\">grunt.log.errorlns / grunt.verbose.errorlns</h3> <p>Log an error with <code>grunt.log.error</code>, wrapping text to 80 columns using <code>grunt.log.wraptext</code>.</p> <pre>grunt.log.errorlns(msg)</pre> <h3 id=\"grunt.log.ok-grunt.verbose.ok\">grunt.log.ok / grunt.verbose.ok</h3> <p>If <code>msg</code> string is omitted, logs <code>OK</code> in green, otherwise logs <code>&gt;&gt; msg</code>, with trailing newline.</p> <pre>grunt.log.ok([msg])</pre> <h3 id=\"grunt.log.oklns-grunt.verbose.oklns\">grunt.log.oklns / grunt.verbose.oklns</h3> <p>Log an ok message with <code>grunt.log.ok</code>, wrapping text to 80 columns using <code>grunt.log.wraptext</code>.</p> <pre>grunt.log.oklns(msg)</pre> <h3 id=\"grunt.log.subhead-grunt.verbose.subhead\">grunt.log.subhead / grunt.verbose.subhead</h3> <p>Log the specified <code>msg</code> string in <strong>bold</strong>, with trailing newline.</p> <pre>grunt.log.subhead(msg)</pre> <h3 id=\"grunt.log.writeflags-grunt.verbose.writeflags\">grunt.log.writeflags / grunt.verbose.writeflags</h3> <p>Log a list of <code>obj</code> properties (good for debugging flags).</p> <pre>grunt.log.writeflags(obj, prefix)</pre> <h3 id=\"grunt.log.debug-grunt.verbose.debug\">grunt.log.debug / grunt.verbose.debug</h3> <p>Logs a debugging message, but only if the <code>--debug</code> command-line option was specified.</p> <pre>grunt.log.debug(msg)</pre> <h2 id=\"verbose-and-notverbose\">Verbose and Notverbose</h2> <p>All logging methods available under <code>grunt.verbose</code> work exactly like their <code>grunt.log</code> counterparts, but only log if the <code>--verbose</code> command-line option was specified. There is also a \"notverbose\" counterpart available at both <code>grunt.log.notverbose</code> and <code>grunt.log.verbose.or</code>. In fact, the <code>.or</code> property can be used on both <code>verbose</code> and <code>notverbose</code> to effectively toggle between the two.</p> <h3 id=\"grunt.verbose-grunt.log.verbose\">grunt.verbose / grunt.log.verbose</h3> <p>This object contains all methods of <code>grunt.log</code> but only logs if the <code>--verbose</code> command-line option was specified.</p> <pre>grunt.verbose</pre> <h3 id=\"grunt.verbose.or-grunt.log.notverbose\">grunt.verbose.or / grunt.log.notverbose</h3> <p>This object contains all methods of <code>grunt.log</code> but only logs if the <code>--verbose</code> command-line option was <em>not</em> specified.</p> <pre>grunt.verbose.or</pre> <h2 id=\"utility-methods\">Utility Methods</h2> <p>These methods don't actually log, they just return strings that can be used in other methods.</p> <h3 id=\"grunt.log.wordlist\">grunt.log.wordlist</h3> <p>Returns a comma-separated list of <code>arr</code> array items.</p> <pre>grunt.log.wordlist(arr [, options])</pre> <p>The <code>options</code> object has these possible properties, and default values:</p> <pre>var options = {\n  // The separator string (can be colored).\n  separator: ', ',\n  // The array item color (specify false to not colorize).\n  color: 'cyan',\n};</pre> <h3 id=\"grunt.log.uncolor\">grunt.log.uncolor</h3> <p>Removes all color information from a string, making it suitable for testing <code>.length</code> or perhaps logging to a file.</p> <pre>grunt.log.uncolor(str)</pre> <h3 id=\"grunt.log.wraptext\">grunt.log.wraptext</h3> <p>Wrap <code>text</code> string to <code>width</code> characters with <code>\\n</code>, ensuring that words are not split in the middle unless absolutely necessary.</p> <pre>grunt.log.wraptext(width, text)</pre> <h3 id=\"grunt.log.table\">grunt.log.table</h3> <p>Wrap <code>texts</code> array of strings to columns <code>widths</code> characters wide. A wrapper for the <code>grunt.log.wraptext</code> method that can be used to generate output in columns.</p> <pre>grunt.log.table(widths, texts)</pre> <h2 id=\"an-example\">An Example</h2> <p>A common pattern is to only log when in <code>--verbose</code> mode OR if an error occurs, like so:</p> <pre>grunt.registerTask('something', 'Do something interesting.', function(arg) {\n  var msg = 'Doing something...';\n  grunt.verbose.write(msg);\n  try {\n    doSomethingThatThrowsAnExceptionOnError(arg);\n    // Success!\n    grunt.verbose.ok();\n  } catch(e) {\n    // Something went wrong.\n    grunt.verbose.or.write(msg).error().error(e.message);\n    grunt.fail.warn('Something went wrong.');\n  }\n});</pre> <p>An explanation of the above code:</p> <ol> <li>\n<code>grunt.verbose.write(msg);</code> logs the message (no newline), but only in <code>--verbose</code> mode.</li> <li>\n<code>grunt.verbose.ok();</code> logs OK in green, with a newline.</li> <li>\n<code>grunt.verbose.or.write(msg).error().error(e.message);</code> does a few things:<ol> <li>\n<code>grunt.verbose.or.write(msg)</code> logs the message (no newline) if not in <code>--verbose</code> mode, and returns the <code>notverbose</code> object.</li> <li>\n<code>.error()</code> logs ERROR in red, with a newline, and returns the <code>notverbose</code> object.</li> <li>\n<code>.error(e.message);</code> logs the actual error message (and returns the <code>notverbose</code> object).</li> </ol> </li> <li>\n<code>grunt.fail.warn('Something went wrong.');</code> logs a warning in bright yellow, exiting Grunt with exit code 1, unless <code>--force</code> was specified.</li> </ol> <p>Take a look at the <a href=\"https://github.com/gruntjs\">grunt-contrib-* tasks source code</a> for more examples.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/api/grunt.log\" class=\"_attribution-link\">http://gruntjs.com/api/grunt.log</a>\n  </p>\n</div>\n","api/grunt.option":"<h1>grunt.option</h1>\n<p>The Grunt option API is for sharing parameters across multiple tasks and accessing parameters set on the command line.</p> <p>An example would be a flag to target whether your build is for development or staging. On the command line: <code>grunt deploy --target=staging</code> would cause <code>grunt.option('target')</code> to return <code>\"staging\"</code>.</p> <p>An example <code>Gruntfile</code> to utilize the <code>target</code> option could be:</p> <pre>grunt.initConfig({\n  compass: {\n    dev: {\n      options: {\n        /* ... */\n        outputStyle: 'expanded'\n      },\n    },\n    staging: {\n      options: {\n        /* ... */\n        outputStyle: 'compressed'\n      },\n    },\n  },\n});\nvar target = grunt.option('target') || 'dev';\ngrunt.registerTask('deploy', ['compass:' + target]);</pre> <p>As you run <code>grunt deploy</code> your stylesheets would default to the <code>dev</code> target and output the CSS in the expanded format. If you ran <code>grunt deploy --target=staging</code> the <code>staging</code> target would instead be ran and your CSS would be in the compressed format.</p> <p><code>grunt.option</code> can be used within tasks as well, for example:</p> <pre>grunt.registerTask('upload', 'Upload code to specified target.', function(n) {\n  var target = grunt.option('target');\n  // do something useful with target here\n});\ngrunt.registerTask('deploy', ['validate', 'upload']);</pre> <p><em>Note that boolean options can be specified using just a key without a value. For example, running <code>grunt deploy --staging</code> on the command line would cause <code>grunt.option('staging')</code> to return <code>true</code>.</em></p> <h3 id=\"grunt.option\">grunt.option ☃</h3> <p>Gets or sets an option.</p> <pre>grunt.option(key[, val])</pre> <p>Boolean options can be negated by prepending <code>no-</code> onto the <code>key</code>. For example:</p> <pre>grunt.option('staging', false);\nvar isDev = grunt.option('no-staging');\n// isDev === true</pre> <h3 id=\"grunt.option.init\">grunt.option.init</h3> <p>Initialize <code>grunt.option</code>. If <code>initObject</code> is omitted option will be initialized to an empty object otherwise will be set to <code>initObject</code>.</p> <pre>grunt.option.init([initObject])</pre> <h3 id=\"grunt.option.flags\">grunt.option.flags</h3> <p>Returns the options as an array of command line parameters.</p> <pre>grunt.option.flags()</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/api/grunt.option\" class=\"_attribution-link\">http://gruntjs.com/api/grunt.option</a>\n  </p>\n</div>\n","api/grunt.template":"<h1>grunt.template</h1>\n<p>Template strings can be processed manually using the provided template functions. In addition, the <code>config.get</code> method (used by many tasks) automatically expands <code>&lt;% %&gt;</code> style template strings specified as config data inside the <code>Gruntfile</code>.</p> <h3 id=\"grunt.template.process\">grunt.template.process</h3> <p>Process a <a href=\"http://lodash.com/docs/#template\">Lo-Dash template</a> string. The <code>template</code> argument will be processed recursively until there are no more templates to process.</p> <p>The default data object is the entire config object, but if <code>options.data</code> is set, that object will be used instead. The default template delimiters are <code>&lt;% %&gt;</code> but if <code>options.delimiters</code> is set to a custom delimiter name (set with <a href=\"http://api/grunt.template#grunt.template.adddelimiters\"><code>grunt.template.addDelimiters</code></a>), those template delimiters will be used instead.</p> <pre>grunt.template.process(template [, options])</pre> <p>Inside templates, the <code>grunt</code> object is exposed so that you can do things like <code>&lt;%= grunt.template.today('yyyy') %&gt;</code>. <em>Note that if the data object already has a <code>grunt</code> property, the <code>grunt</code> API will not be accessible in templates.</em></p> <p>In this example, the <code>baz</code> property is processed recursively until there are no more <code>&lt;% %&gt;</code> templates to process.</p> <pre>var obj = {\n  foo: 'c',\n  bar: 'b&lt;%= foo %&gt;d',\n  baz: 'a&lt;%= bar %&gt;e'\n};\ngrunt.template.process('&lt;%= baz %&gt;', {data: obj}) // 'abcde'</pre> <h3 id=\"grunt.template.setdelimiters\">grunt.template.setDelimiters</h3> <p>Set the <a href=\"http://lodash.com/docs/#template\">Lo-Dash template</a> delimiters to a predefined set in case <code>grunt.util._.template</code> needs to be called manually. The <code>config</code> delimiters <code>&lt;% %&gt;</code> are included by default.</p> <p><em>You probably won't need to use this method, because you'll be using <code>grunt.template.process</code> which uses this method internally.</em></p> <pre>grunt.template.setDelimiters(name)</pre> <h3 id=\"grunt.template.adddelimiters\">grunt.template.addDelimiters</h3> <p>Add a named set of <a href=\"http://lodash.com/docs/#template\">Lo-Dash template</a> delimiters. You probably won't need to use this method, because the built-in delimiters should be sufficient, but you could always add <code>{% %}</code> or <code>[% %]</code> style delimiters.</p> <p>The <code>name</code> argument should be unique since it is how we access the delimiters from <code>grunt.template.setDelimiters</code> and as an option for <code>grunt.template.process</code>.</p> <pre>grunt.template.addDelimiters(name, opener, closer)</pre> <p>In this example, if we were to use the <code>{% %}</code> style mentioned above we would use the following:</p> <pre>grunt.template.addDelimiters('myDelimiters', '{%', '%}')</pre> <h2 id=\"helpers\">Helpers</h2> <h3 id=\"grunt.template.date\">grunt.template.date</h3> <p>Format a date using the <a href=\"https://github.com/felixge/node-dateformat\">dateformat library</a>.</p> <pre>grunt.template.date(date, format)</pre> <p>In this example, a specific date is formatted as month/day/year.</p> <pre>grunt.template.date(847602000000, 'yyyy-mm-dd') // '1996-11-10'</pre> <h3 id=\"grunt.template.today\">grunt.template.today</h3> <p>Format today's date using the <a href=\"https://github.com/felixge/node-dateformat\">dateformat library</a>.</p> <pre>grunt.template.today(format)</pre> <p>In this example, today's date is formatted as a 4-digit year.</p> <pre>grunt.template.today('yyyy') // '2016'</pre> <p><em>(somebody remind me to update this date every year so the docs appear current)</em></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/api/grunt.template\" class=\"_attribution-link\">http://gruntjs.com/api/grunt.template</a>\n  </p>\n</div>\n","api/grunt.util":"<h1>grunt.util</h1>\n<p>Miscellaneous utilities for your Gruntfile and tasks.</p> <h3 id=\"grunt.util.kindof\">grunt.util.kindOf</h3> <p>Return the \"kind\" of a value. Like <code>typeof</code> but returns the internal <code>[Class](Class/)</code> value. Possible results are <code>\"number\"</code>, <code>\"string\"</code>, <code>\"boolean\"</code>, <code>\"function\"</code>, <code>\"regexp\"</code>, <code>\"array\"</code>, <code>\"date\"</code>, <code>\"error\"</code>, <code>\"null\"</code>, <code>\"undefined\"</code> and the catch-all <code>\"object\"</code>.</p> <pre>grunt.util.kindOf(value)</pre> <h3 id=\"grunt.util.error\">grunt.util.error</h3> <p>Return a new Error instance (that can be thrown) with the appropriate message. If an Error object is specified instead of <code>message</code> that object will be returned. Also, if an Error object is specified for <code>origError</code> and Grunt was run with the <code>--stack</code> option, the original Error stack will be dumped.</p> <pre>grunt.util.error(message [, origError])</pre> <h3 id=\"grunt.util.linefeed\">grunt.util.linefeed</h3> <p>The linefeed character, normalized for the current operating system. (<code>\\r\\n</code> on Windows, <code>\\n</code> otherwise)</p> <h3 id=\"grunt.util.normalizelf\">grunt.util.normalizelf</h3> <p>Given a string, return a new string with all the linefeeds normalized for the current operating system. (<code>\\r\\n</code> on Windows, <code>\\n</code> otherwise)</p> <pre>grunt.util.normalizelf(string)</pre> <h3 id=\"grunt.util.recurse\">grunt.util.recurse</h3> <p>Recurse through nested objects and arrays, executing <code>callbackFunction</code> for each non-object value. If <code>continueFunction</code> returns <code>false</code>, a given object or value will be skipped.</p> <pre>grunt.util.recurse(object, callbackFunction, continueFunction)</pre> <h3 id=\"grunt.util.repeat\">grunt.util.repeat</h3> <p>Return string <code>str</code> repeated <code>n</code> times.</p> <pre>grunt.util.repeat(n, str)</pre> <h3 id=\"grunt.util.pluralize\">grunt.util.pluralize</h3> <p>Given <code>str</code> of <code>\"a/b\"</code>, If <code>n</code> is <code>1</code>, return <code>\"a\"</code> otherwise <code>\"b\"</code>. You can specify a custom separator if '/' doesn't work for you.</p> <pre>grunt.util.pluralize(n, str, separator)</pre> <h3 id=\"grunt.util.spawn\">grunt.util.spawn</h3> <p>Spawn a child process, keeping track of its stdout, stderr and exit code. The method returns a reference to the spawned child. When the child exits, the <code>doneFunction</code> is called.</p> <pre>grunt.util.spawn(options, doneFunction)</pre> <p>The <code>options</code> object has these possible properties:</p> <pre>var options = {\n  // The command to execute. It should be in the system path.\n  cmd: commandToExecute,\n  // If specified, the same grunt bin that is currently running will be\n  // spawned as the child command, instead of the \"cmd\" option. Defaults\n  // to false.\n  grunt: boolean,\n  // An array of arguments to pass to the command.\n  args: arrayOfArguments,\n  // Additional options for the Node.js child_process spawn method.\n  opts: nodeSpawnOptions,\n  // If this value is set and an error occurs, it will be used as the value\n  // and null will be passed as the error value.\n  fallback: fallbackValue\n};</pre> <p>The <code>doneFunction</code> accepts these arguments:</p> <pre>function doneFunction(error, result, code) {\n  // If the exit code was non-zero and a fallback wasn't specified, an Error\n  // object, otherwise null.\n  error\n  // The result object is an object with the properties .stdout, .stderr, and\n  // .code (exit code).\n  result\n  // When result is coerced to a string, the value is stdout if the exit code\n  // was zero, the fallback if the exit code was non-zero and a fallback was\n  // specified, or stderr if the exit code was non-zero and a fallback was\n  // not specified.\n  String(result)\n  // The numeric exit code.\n  code\n}</pre> <h3 id=\"grunt.util.toarray\">grunt.util.toArray</h3> <p>Given an array or array-like object, return an array. Great for converting <code>arguments</code> objects into arrays.</p> <pre>grunt.util.toArray(arrayLikeObject)</pre> <h3 id=\"grunt.util.callbackify\">grunt.util.callbackify</h3> <p>Normalizes both \"returns a value\" and \"passes result to a callback\" functions to always pass a result to the specified callback. If the original function returns a value, that value will now be passed to the callback, which is specified as the last argument, after all other predefined arguments. If the original function passed a value to a callback, it will continue to do so.</p> <pre>grunt.util.callbackify(syncOrAsyncFunction)</pre> <p>This example might better illustrate:</p> <pre>function add1(a, b) {\n  return a + b;\n}\nfunction add2(a, b, callback) {\n  callback(a + b);\n}\n\nvar fn1 = grunt.util.callbackify(add1);\nvar fn2 = grunt.util.callbackify(add2);\n\nfn1(1, 2, function(result) {\n  console.log('1 plus 2 equals ' + result);\n});\nfn2(1, 2, function(result) {\n  console.log('1 plus 2 equals ' + result);\n});</pre> <h2 id=\"internal-libraries\">Internal libraries</h2> <h3 id=\"grunt.util.namespace\">grunt.util.namespace</h3> <p>An internal library for resolving deeply-nested properties in objects.</p> <h3 id=\"grunt.util.task\">grunt.util.task</h3> <p>An internal library for task running.</p> <h2 id=\"external-libraries\">External libraries</h2> <p><em>Deprecated</em></p> <p><strong>All external libraries that are listed below are now deprecated.</strong></p> <p>Please use <strong>npm</strong> to manage these external libraries in your project's dependencies.</p> <p>For example if you want to use <a href=\"https://www.npmjs.org/package/lodash\">Lo-Dash</a>, install it first: <code>npm install lodash</code>, then use it in your <code>Gruntfile</code>: <code>var _ = require('lodash');</code>.</p> <h4 id=\"grunt.util._\">grunt.util._</h4> <p><em>Deprecated</em></p> <p><a href=\"http://lodash.com/\">Lo-Dash</a> and <a href=\"https://github.com/epeli/underscore.string\">Underscore.string</a></p> <p><code>grunt.util._.str</code> is available for methods that conflict with existing Lo-Dash methods.</p> <h4 id=\"grunt.util.async\">grunt.util.async</h4> <p><em>Deprecated</em></p> <p><a href=\"https://github.com/caolan/async\">Async</a> - Async utilities for node and the browser.</p> <h4 id=\"grunt.util.hooker\">grunt.util.hooker</h4> <p><em>Deprecated</em></p> <p><a href=\"https://github.com/cowboy/javascript-hooker\">JavaScript Hooker</a> - Monkey-patch (hook) functions for debugging and stuff.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/api/grunt.util\" class=\"_attribution-link\">http://gruntjs.com/api/grunt.util</a>\n  </p>\n</div>\n","api/exit-codes":"<h1>Exit Codes</h1>\n<ul> <li>\n<code>0</code> - No errors!</li> <li>\n<code>1</code> - Fatal error</li> <li>\n<code>2</code> - Missing gruntfile error</li> <li>\n<code>3</code> - Task error</li> <li>\n<code>4</code> - Template processing error</li> <li>\n<code>5</code> - Invalid shell auto-completion rules error</li> <li>\n<code>6</code> - Warning</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/api/exit-codes\" class=\"_attribution-link\">http://gruntjs.com/api/exit-codes</a>\n  </p>\n</div>\n","index":"<h1>Grunt</h1>\n<p>Grunt and Grunt plugins are installed and managed via <a href=\"https://www.npmjs.org/\">npm</a>, the <a href=\"https://nodejs.org/\">Node.js</a> package manager. Grunt 0.4.x requires stable Node.js versions <code>&gt;= 0.8.0</code>. Odd version numbers of Node.js are considered unstable development versions.</p> <p>Before setting up Grunt ensure that your <a href=\"https://www.npmjs.org/\">npm</a> is up-to-date by running <code>npm update -g npm</code> (this might require <code>sudo</code> on certain systems).</p> <p>If you already have installed Grunt and are now searching for some quick reference, please checkout our <a href=\"sample-gruntfile\"><code>Gruntfile</code> example</a> and how to <a href=\"configuring-tasks\">configure a task</a>.</p> <h2 id=\"installing-the-cli\">Installing the CLI</h2> <p><strong>Using Grunt 0.3? Please see <a href=\"upgrading-from-0.3-to-0.4#grunt-0.3-notes\">Grunt 0.3 Notes</a></strong></p> <p>In order to get started, you'll want to install Grunt's command line interface (CLI) globally. You may need to use sudo (for OSX, *nix, BSD etc) or run your command shell as Administrator (for Windows) to do this.</p> <pre>npm install -g grunt-cli</pre> <p>This will put the <code>grunt</code> command in your system path, allowing it to be run from any directory.</p> <p>Note that installing <code>grunt-cli</code> does not install the Grunt task runner! The job of the Grunt CLI is simple: run the version of Grunt which has been installed next to a <code>Gruntfile</code>. This allows multiple versions of Grunt to be installed on the same machine simultaneously.</p> <h2 id=\"how-the-cli-works\">How the CLI works</h2> <p>Each time <code>grunt</code> is run, it looks for a locally installed Grunt using node's <code>require()</code> system. Because of this, you can run <code>grunt</code> from any subfolder in your project.</p> <p>If a locally installed Grunt is found, the CLI loads the local installation of the Grunt library, applies the configuration from your <code>Gruntfile</code>, and executes any tasks you've requested for it to run. To really understand what is happening, <a href=\"https://github.com/gruntjs/grunt-cli/blob/master/bin/grunt\">read the code</a>.</p> <h2 id=\"working-with-an-existing-grunt-project\">Working with an existing Grunt project</h2> <p>Assuming that the Grunt CLI has been installed and that the project has already been configured with a <code>package.json</code> and a <code>Gruntfile</code>, it's very easy to start working with Grunt:</p> <ol> <li>Change to the project's root directory.</li> <li>Install project dependencies with <code>npm install</code>.</li> <li>Run Grunt with <code>grunt</code>.</li> </ol> <p>That's really all there is to it. Installed Grunt tasks can be listed by running <code>grunt --help</code> but it's usually a good idea to start with the project's documentation.</p> <h2 id=\"preparing-a-new-grunt-project\">Preparing a new Grunt project</h2> <p>A typical setup will involve adding two files to your project: <code>package.json</code> and the <code>Gruntfile</code>.</p> <p><strong>package.json</strong>: This file is used by <a href=\"https://www.npmjs.org/\">npm</a> to store metadata for projects published as npm modules. You will list grunt and the Grunt plugins your project needs as <a href=\"https://docs.npmjs.com/files/package.json#devdependencies\">devDependencies</a> in this file.</p> <p><strong>Gruntfile</strong>: This file is named <code>Gruntfile.js</code> or <code>Gruntfile.coffee</code> and is used to configure or define tasks and load Grunt plugins. <strong>When this documentation mentions a <code>Gruntfile</code> it is talking about a file, which is either a <code>Gruntfile.js</code> or a <code>Gruntfile.coffee</code></strong>.</p> <h2 id=\"package.json\">package.json</h2> <p>The <code>package.json</code> file belongs in the root directory of your project, next to the <code>Gruntfile</code>, and should be committed with your project source. Running <code>npm install</code> in the same folder as a <code>package.json</code> file will install the correct version of each dependency listed therein.</p> <p>There are a few ways to create a <code>package.json</code> file for your project:</p> <ul> <li>Most <a href=\"project-scaffolding\">grunt-init</a> templates will automatically create a project-specific <code>package.json</code> file.</li> <li>The <a href=\"https://docs.npmjs.com/cli/init\">npm init</a> command will create a basic <code>package.json</code> file.</li> <li>Start with the example below, and expand as needed, following this <a href=\"https://docs.npmjs.com/files/package.json\">specification</a>.</li> </ul> <pre>{\n  \"name\": \"my-project-name\",\n  \"version\": \"0.1.0\",\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.5\",\n    \"grunt-contrib-jshint\": \"~0.10.0\",\n    \"grunt-contrib-nodeunit\": \"~0.4.1\",\n    \"grunt-contrib-uglify\": \"~0.5.0\"\n  }\n}</pre> <h3 id=\"installing-grunt-and-gruntplugins\">Installing Grunt and gruntplugins</h3> <p>The easiest way to add Grunt and gruntplugins to an existing <code>package.json</code> is with the command <code>npm install &lt;module&gt; --save-dev</code>. Not only will this install <code>&lt;module&gt;</code> locally, but it will automatically be added to the <a href=\"https://docs.npmjs.com/files/package.json#devdependencies\">devDependencies</a> section, using a <a href=\"https://www.npmjs.org/doc/misc/semver.html#Ranges\">tilde version range</a>.</p> <p>For example, this will install the latest version of Grunt in your project folder, adding it to your devDependencies:</p> <pre>npm install grunt --save-dev</pre> <p>The same can be done for gruntplugins and other node modules. As seen in the following example installing the JSHint task module:</p> <pre>npm install grunt-contrib-jshint --save-dev</pre> <p>Checkout the current available gruntplugins to be installed and used on your project at the <a href=\"http://gruntjs.com/plugins\">plugins</a> page.</p> <p>Be sure to commit the updated <code>package.json</code> file with your project when you're done!</p> <h2 id=\"the-gruntfile\">The Gruntfile</h2> <p>The <code>Gruntfile.js</code> or <code>Gruntfile.coffee</code> file is a valid JavaScript or CoffeeScript file that belongs in the root directory of your project, next to the <code>package.json</code> file, and should be committed with your project source.</p> <p>A <code>Gruntfile</code> is comprised of the following parts:</p> <ul> <li>The \"wrapper\" function</li> <li>Project and task configuration</li> <li>Loading Grunt plugins and tasks</li> <li>Custom tasks</li> </ul> <h3 id=\"an-example-gruntfile\">An example Gruntfile</h3> <p>In the following <code>Gruntfile</code>, project metadata is imported into the Grunt config from the project's <code>package.json</code> file and the <a href=\"https://github.com/gruntjs/grunt-contrib-uglify\">grunt-contrib-uglify</a> plugin's <code>uglify</code> task is configured to minify a source file and generate a banner comment dynamically using that metadata. When <code>grunt</code> is run on the command line, the <code>uglify</code> task will be run by default.</p> <pre>module.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    uglify: {\n      options: {\n        banner: '/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(\"yyyy-mm-dd\") %&gt; */\\n'\n      },\n      build: {\n        src: 'src/&lt;%= pkg.name %&gt;.js',\n        dest: 'build/&lt;%= pkg.name %&gt;.min.js'\n      }\n    }\n  });\n\n  // Load the plugin that provides the \"uglify\" task.\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n\n  // Default task(s).\n  grunt.registerTask('default', ['uglify']);\n\n};</pre> <p>Now that you've seen the whole <code>Gruntfile</code>, let's look at its component parts.</p> <h3 id=\"the-wrapper-function\">The \"wrapper\" function</h3> <p>Every <code>Gruntfile</code> (and gruntplugin) uses this basic format, and all of your Grunt code must be specified inside this function:</p> <pre>module.exports = function(grunt) {\n  // Do grunt-related things in here\n};</pre> <h3 id=\"project-and-task-configuration\">Project and task configuration</h3> <p>Most Grunt tasks rely on configuration data defined in an object passed to the <a href=\"http://gruntjs.com/grunt#grunt.initconfig\">grunt.initConfig</a> method.</p> <p>In this example, <code>grunt.file.readJSON('package.json')</code> imports the JSON metadata stored in <code>package.json</code> into the grunt config. Because <code>&lt;% %&gt;</code> template strings may reference any config properties, configuration data like filepaths and file lists may be specified this way to reduce repetition.</p> <p>You may store any arbitrary data inside of the configuration object, and as long as it doesn't conflict with properties your tasks require, it will be otherwise ignored. Also, because this is JavaScript, you're not limited to JSON; you may use any valid JS here. You can even programmatically generate the configuration if necessary.</p> <p>Like most tasks, the <a href=\"https://github.com/gruntjs/grunt-contrib-uglify\">grunt-contrib-uglify</a> plugin's <code>uglify</code> task expects its configuration to be specified in a property of the same name. Here, the <code>banner</code> option is specified, along with a single uglify target named <code>build</code> that minifies a single source file to a single destination file.</p> <pre>// Project configuration.\ngrunt.initConfig({\n  pkg: grunt.file.readJSON('package.json'),\n  uglify: {\n    options: {\n      banner: '/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(\"yyyy-mm-dd\") %&gt; */\\n'\n    },\n    build: {\n      src: 'src/&lt;%= pkg.name %&gt;.js',\n      dest: 'build/&lt;%= pkg.name %&gt;.min.js'\n    }\n  }\n});</pre> <h3 id=\"loading-grunt-plugins-and-tasks\">Loading Grunt plugins and tasks</h3> <p>Many commonly used tasks like <a href=\"https://github.com/gruntjs/grunt-contrib-concat\">concatenation</a>, <a href=\"https://github.com/gruntjs/grunt-contrib-uglify\">minification</a> and <a href=\"https://github.com/gruntjs/grunt-contrib-jshint\">linting</a> are available as <a href=\"https://github.com/gruntjs\">grunt plugins</a>. As long as a plugin is specified in <code>package.json</code> as a dependency, and has been installed via <code>npm install</code>, it may be enabled inside your <code>Gruntfile</code> with a simple command:</p> <pre>// Load the plugin that provides the \"uglify\" task.\ngrunt.loadNpmTasks('grunt-contrib-uglify');</pre> <p><strong>Note:</strong> the <code>grunt --help</code> command will list all available tasks.</p> <h3 id=\"custom-tasks\">Custom tasks</h3> <p>You can configure Grunt to run one or more tasks by default by defining a <code>default</code> task. In the following example, running <code>grunt</code> at the command line without specifying a task will run the <code>uglify</code> task. This is functionally the same as explicitly running <code>grunt uglify</code> or even <code>grunt default</code>. Any number of tasks (with or without arguments) may be specified in the array.</p> <pre>// Default task(s).\ngrunt.registerTask('default', ['uglify']);</pre> <p>If your project requires tasks not provided by a Grunt plugin, you may define custom tasks right inside the <code>Gruntfile</code>. For example, this <code>Gruntfile</code> defines a completely custom <code>default</code> task that doesn't even utilize task configuration:</p> <pre>module.exports = function(grunt) {\n\n  // A very basic default task.\n  grunt.registerTask('default', 'Log some stuff.', function() {\n    grunt.log.write('Logging some stuff...').ok();\n  });\n\n};</pre> <p>Custom project-specific tasks don't need to be defined in the <code>Gruntfile</code>; they may be defined in external <code>.js</code> files and loaded via the <a href=\"http://gruntjs.com/grunt#grunt.loadtasks\">grunt.loadTasks</a> method.</p> <h2 id=\"further-reading\">Further Reading</h2> <ul> <li>The <a href=\"http://gruntjs.com/installing-grunt/\">Installing grunt</a> guide has detailed information about installing specific, production or in-development, versions of Grunt and grunt-cli.</li> <li>The <a href=\"http://gruntjs.com/configuring-tasks/\">Configuring Tasks</a> guide has an in-depth explanation on how to configure tasks, targets, options and files inside the <code>Gruntfile</code>, along with an explanation of templates, globbing patterns and importing external data.</li> <li>The <a href=\"http://gruntjs.com/creating-tasks/\">Creating Tasks</a> guide lists the differences between the types of Grunt tasks and shows a number of sample tasks and configurations.</li> <li>For more information about writing custom tasks or Grunt plugins, check out the <a href=\"http://gruntjs.com/grunt\">developer documentation</a>.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/getting-started\" class=\"_attribution-link\">http://gruntjs.com/getting-started</a>\n  </p>\n</div>\n","api/grunt.file":"<h1>grunt.file</h1>\n<p>There are many provided methods for reading and writing files, traversing the filesystem and finding files by matching globbing patterns. Many of these methods are wrappers around built-in Node.js file functionality, but with additional error handling, logging and character encoding normalization.</p> <p><em>Note: all file paths are relative to the <code>Gruntfile</code> unless the current working directory is changed with <code>grunt.file.setBase</code> or the <code>--base</code> command-line option.</em></p> <h2 id=\"character-encoding\">Character encoding</h2> <h3 id=\"grunt.file.defaultencoding\">grunt.file.defaultEncoding</h3> <p>Set this property to change the default encoding used by all <code>grunt.file</code> methods. Defaults to <code>'utf8'</code>. If you do have to change this value, it's recommended that you change it as early as possible inside your Gruntfile.</p> <pre>grunt.file.defaultEncoding = 'utf8';</pre> <h3 id=\"grunt.file.preservebom\">grunt.file.preserveBOM</h3> <p><em>Added in 0.4.2</em></p> <p>Whether to preserve the Byte Order Mark (BOM) on <code>file.read</code> rather than strip it.</p> <pre>grunt.file.preserveBOM = false;</pre> <h2 id=\"reading-and-writing\">Reading and writing</h2> <h3 id=\"grunt.file.read\">grunt.file.read</h3> <p>Read and return a file's contents. Returns a string, unless <code>options.encoding</code> is <code>null</code> in which case it returns a <a href=\"https://nodejs.org/docs/latest/api/buffer.html\">Buffer</a>.</p> <pre>grunt.file.read(filepath [, options])</pre> <p>The <code>options</code> object has these possible properties:</p> <pre>var options = {\n  // If an encoding is not specified, default to grunt.file.defaultEncoding.\n  // If specified as null, returns a non-decoded Buffer instead of a string.\n  encoding: encodingName\n};</pre> <h3 id=\"grunt.file.readjson\">grunt.file.readJSON</h3> <p>Read a file's contents, parsing the data as JSON and returning the result. See <code>grunt.file.read</code> for a list of supported options.</p> <pre>grunt.file.readJSON(filepath [, options])</pre> <h3 id=\"grunt.file.readyaml\">grunt.file.readYAML</h3> <p>Read a file's contents, parsing the data as YAML and returning the result. See <code>grunt.file.read</code> for a list of supported options.</p> <pre>grunt.file.readYAML(filepath [, options])</pre> <h3 id=\"grunt.file.write\">grunt.file.write</h3> <p>Write the specified contents to a file, creating intermediate directories if necessary. Strings will be encoded using the specified character encoding, <a href=\"https://nodejs.org/docs/latest/api/buffer.html\">Buffers</a> will be written to disk as-specified.</p> <p><em>If the <code>--no-write</code> command-line option is specified, the file won't actually be written.</em></p> <pre>grunt.file.write(filepath, contents [, options])</pre> <p>The <code>options</code> object has these possible properties:</p> <pre>var options = {\n  // If an encoding is not specified, default to grunt.file.defaultEncoding.\n  // If `contents` is a Buffer, encoding is ignored.\n  encoding: encodingName\n};</pre> <h3 id=\"grunt.file.copy\">grunt.file.copy</h3> <p>Copy a source file to a destination path, creating intermediate directories if necessary.</p> <p><em>If the <code>--no-write</code> command-line option is specified, the file won't actually be written.</em></p> <pre>grunt.file.copy(srcpath, destpath [, options])</pre> <p>The <code>options</code> object has these possible properties:</p> <pre>var options = {\n  // If an encoding is not specified, default to grunt.file.defaultEncoding.\n  // If null, the `process` function will receive a Buffer instead of String.\n  encoding: encodingName,\n  // The source file contents, source file path, and destination file path\n  // are passed into this function, whose return value will be used as the\n  // destination file's contents. If this function returns `false`, the file\n  // copy will be aborted.\n  process: processFunction,\n  // These optional globbing patterns will be matched against the filepath\n  // (not the filename) using grunt.file.isMatch. If any specified globbing\n  // pattern matches, the file won't be processed via the `process` function.\n  // If `true` is specified, processing will be prevented.\n  noProcess: globbingPatterns\n};</pre> <h3 id=\"grunt.file.delete\">grunt.file.delete</h3> <p>Delete the specified filepath. Will delete files and folders recursively.</p> <p><em>Will not delete the current working directory or files outside the current working directory unless the <code>--force</code> command-line option is specified.</em></p> <p><em>If the <code>--no-write</code> command-line option is specified, the filepath won't actually be deleted.</em></p> <pre>grunt.file.delete(filepath [, options])</pre> <p>The <code>options</code> object has one possible property:</p> <pre>var options = {\n  // Enable deleting outside the current working directory. This option may\n  // be overridden by the --force command-line option.\n  force: true\n};</pre> <h2 id=\"directories\">Directories</h2> <h3 id=\"grunt.file.mkdir\">grunt.file.mkdir</h3> <p>Works like <code>mkdir -p</code>. Create a directory along with any intermediate directories. If <code>mode</code> isn't specified, it defaults to <code>0777 &amp; (~process.umask())</code>.</p> <p><em>If the <code>--no-write</code> command-line option is specified, directories won't actually be created.</em></p> <pre>grunt.file.mkdir(dirpath [, mode])</pre> <h3 id=\"grunt.file.recurse\">grunt.file.recurse</h3> <p>Recurse into a directory, executing <code>callback</code> for each file.</p> <pre>grunt.file.recurse(rootdir, callback)</pre> <p>The callback function receives the following arguments:</p> <pre>function callback(abspath, rootdir, subdir, filename) {\n  // The full path to the current file, which is nothing more than\n  // the rootdir + subdir + filename arguments, joined.\n  abspath\n  // The root director, as originally specified.\n  rootdir\n  // The current file's directory, relative to rootdir.\n  subdir\n  // The filename of the current file, without any directory parts.\n  filename\n}</pre> <h2 id=\"globbing-patterns\">Globbing patterns</h2> <p>It is often impractical to specify all source filepaths individually, so Grunt supports filename expansion (also know as globbing) via the built-in <a href=\"https://github.com/isaacs/node-glob\">node-glob</a> library.</p> <p>See the \"Globbing patterns\" section of the <a href=\"http://gruntjs.com/configuring-tasks/\">Configuring tasks</a> guide for globbing pattern examples.</p> <h3 id=\"grunt.file.expand\">grunt.file.expand</h3> <p>Return a unique array of all file or directory paths that match the given globbing pattern(s). This method accepts either comma separated globbing patterns or an array of globbing patterns. Paths matching patterns that begin with <code>!</code> will be excluded from the returned array. Patterns are processed in order, so inclusion and exclusion order is significant.</p> <pre>grunt.file.expand([options, ] patterns)</pre> <p>File paths are relative to the <code>Gruntfile</code> unless the current working directory is changed with <code>grunt.file.setBase</code> or the <code>--base</code> command-line option.</p> <p>The <code>options</code> object supports all <a href=\"https://github.com/isaacs/minimatch\">minimatch library</a> options, and a few others. For example:</p> <ul> <li>\n<code>filter</code> Either a valid <a href=\"https://nodejs.org/docs/latest/api/fs.html#fs_class_fs_stats\">fs.Stats method name</a> or a function that is passed the matched <code>src</code> filepath and returns <code>true</code> or <code>false</code>.</li> <li>\n<code>nonull</code> Retain <code>src</code> patterns even if they fail to match files. Combined with grunt's <code>--verbose</code> flag, this option can help debug file path issues.</li> <li>\n<code>matchBase</code> Patterns without slashes will match just the basename part. Eg. this makes <code>*.js</code> work like <code>**/*.js</code>.</li> <li>\n<code>cwd</code> Patterns will be matched relative to this path, and all returned filepaths will also be relative to this path.</li> </ul> <h3 id=\"grunt.file.expandmapping\">grunt.file.expandMapping</h3> <p>Returns an array of src-dest file mapping objects. For each source file matched by a specified pattern, join that file path to the specified <code>dest</code>. This file path may be flattened or renamed, depending on the options specified. See the <code>grunt.file.expand</code> method documentation for an explanation of how the <code>patterns</code> and <code>options</code> arguments may be specified.</p> <pre>grunt.file.expandMapping(patterns, dest [, options])</pre> <p><em>Note that while this method may be used to programmatically generate a <code>files</code> array for a multi task, the declarative syntax for doing this described in the \"Building the files object dynamically\" section of the <a href=\"http://gruntjs.com/configuring-tasks/\">Configuring tasks</a> guide is preferred.</em></p> <p>In addition to those the <code>grunt.file.expand</code> method supports, the <code>options</code> object also supports these properties:</p> <pre>var options = {\n  // The directory from which patterns are matched. Any string specified as\n  // cwd is effectively stripped from the beginning of all matched paths.\n  cwd: String,\n  // Remove the path component from all matched src files. The src file path\n  // is still joined to the specified dest.\n  flatten: Boolean,\n  // Remove anything after (and including) either the first or last \".\" in the\n  // destination path (indicated by options.extDot), then append this value.\n  ext: String,\n  // *Added in 0.4.3*\n  // Indicates where the period demarcating the extension is located. Can take:\n  // - 'first' (extension begins after the first period in the file name)\n  // - 'last' (extension begins after the last period)\n  // Default: 'first'\n  extDot: String,\n  // If specified, this function will be responsible for returning the final\n  // dest filepath. By default, it joins dest and matchedSrcPath like so:\n  rename: function(dest, matchedSrcPath, options) {\n    return path.join(dest, matchedSrcPath);\n  }\n};</pre> <h3 id=\"grunt.file.match\">grunt.file.match</h3> <p>Match one or more globbing patterns against one or more file paths. Returns a uniqued array of all file paths that match any of the specified globbing patterns. Both the <code>patterns</code> and <code>filepaths</code> argument can be a single string or array of strings. Paths matching patterns that begin with <code>!</code> will be excluded from the returned array. Patterns are processed in order, so inclusion and exclusion order is significant.</p> <pre>grunt.file.match([options, ] patterns, filepaths)</pre> <p>The <code>options</code> object supports all <a href=\"https://github.com/isaacs/minimatch\">minimatch library</a> options. For example, if <code>options.matchBase</code> is true, patterns without slashes will match against the basename of the path even if it contains slashes, eg. pattern <code>*.js</code> will match filepath <code>path/to/file.js</code>.</p> <h3 id=\"grunt.file.ismatch\">grunt.file.isMatch</h3> <p>This method contains the same signature and logic as the <code>grunt.file.match</code> method, but simply returns <code>true</code> if any files were matched, otherwise <code>false</code>.</p> <h2 id=\"file-types\">File types</h2> <h3 id=\"grunt.file.exists\">grunt.file.exists</h3> <p>Does the given path exist? Returns a boolean.</p> <p>Like the Node.js <a href=\"https://nodejs.org/docs/latest/api/path.html#path_path_join_path1_path2\">path.join</a> method, this method will join all arguments together and normalize the resulting path.</p> <pre>grunt.file.exists(path1 [, path2 [, ...]])</pre> <h3 id=\"grunt.file.islink\">grunt.file.isLink</h3> <p>Is the given path a symbolic link? Returns a boolean.</p> <p>Like the Node.js <a href=\"https://nodejs.org/docs/latest/api/path.html#path_path_join_path1_path2\">path.join</a> method, this method will join all arguments together and normalize the resulting path.</p> <pre>grunt.file.isLink(path1 [, path2 [, ...]])</pre> <p>Returns false if the path doesn't exist.</p> <h3 id=\"grunt.file.isdir\">grunt.file.isDir</h3> <p>Is the given path a directory? Returns a boolean.</p> <p>Like the Node.js <a href=\"https://nodejs.org/docs/latest/api/path.html#path_path_join_path1_path2\">path.join</a> method, this method will join all arguments together and normalize the resulting path.</p> <pre>grunt.file.isDir(path1 [, path2 [, ...]])</pre> <p>Returns false if the path doesn't exist.</p> <h3 id=\"grunt.file.isfile\">grunt.file.isFile</h3> <p>Is the given path a file? Returns a boolean.</p> <p>Like the Node.js <a href=\"https://nodejs.org/docs/latest/api/path.html#path_path_join_path1_path2\">path.join</a> method, this method will join all arguments together and normalize the resulting path.</p> <pre>grunt.file.isFile(path1 [, path2 [, ...]])</pre> <p>Returns false if the path doesn't exist.</p> <h2 id=\"paths\">Paths</h2> <h3 id=\"grunt.file.ispathabsolute\">grunt.file.isPathAbsolute</h3> <p>Is a given file path absolute? Returns a boolean.</p> <p>Like the Node.js <a href=\"https://nodejs.org/docs/latest/api/path.html#path_path_join_path1_path2\">path.join</a> method, this method will join all arguments together and normalize the resulting path.</p> <pre>grunt.file.isPathAbsolute(path1 [, path2 [, ...]])</pre> <h3 id=\"grunt.file.arepathsequivalent\">grunt.file.arePathsEquivalent</h3> <p>Do all the specified paths refer to the same path? Returns a boolean.</p> <pre>grunt.file.arePathsEquivalent(path1 [, path2 [, ...]])</pre> <h3 id=\"grunt.file.doespathcontain\">grunt.file.doesPathContain</h3> <p>Are all descendant path(s) contained within the specified ancestor path? Returns a boolean.</p> <p><em>Note: does not check to see if paths actually exist.</em></p> <pre>grunt.file.doesPathContain(ancestorPath, descendantPath1 [, descendantPath2 [, ...]])</pre> <h3 id=\"grunt.file.ispathcwd\">grunt.file.isPathCwd</h3> <p>Is a given file path the CWD? Returns a boolean.</p> <p>Like the Node.js <a href=\"https://nodejs.org/docs/latest/api/path.html#path_path_join_path1_path2\">path.join</a> method, this method will join all arguments together and normalize the resulting path.</p> <pre>grunt.file.isPathCwd(path1 [, path2 [, ...]])</pre> <h3 id=\"grunt.file.ispathincwd\">grunt.file.isPathInCwd</h3> <p>Is a given file path inside the CWD? Note: CWD is not <em>inside</em> CWD. Returns a boolean.</p> <p>Like the Node.js <a href=\"https://nodejs.org/docs/latest/api/path.html#path_path_join_path1_path2\">path.join</a> method, this method will join all arguments together and normalize the resulting path.</p> <pre>grunt.file.isPathInCwd(path1 [, path2 [, ...]])</pre> <h3 id=\"grunt.file.setbase\">grunt.file.setBase</h3> <p>Change grunt's current working directory (CWD). By default, all file paths are relative to the <code>Gruntfile</code>. This works just like the <code>--base</code> command-line option.</p> <pre>grunt.file.setBase(path1 [, path2 [, ...]])</pre> <p>Like the Node.js <a href=\"https://nodejs.org/docs/latest/api/path.html#path_path_join_path1_path2\">path.join</a> method, this method will join all arguments together and normalize the resulting path.</p> <h2 id=\"external-libraries\">External libraries</h2> <p><em>Deprecated</em></p> <p><strong>All external libraries that are listed below are now deprecated.</strong></p> <p>Please use <strong>npm</strong> to manage these external libraries in your project's dependencies.</p> <p>For example if you want use <a href=\"https://www.npmjs.org/package/lodash\">Lo-Dash</a>, install it first <code>npm install lodash</code>, then use it in your <code>Gruntfile</code>: <code>var _ = require('lodash');</code></p> <h3 id=\"grunt.file.glob\">grunt.file.glob</h3> <p><em>Deprecated</em></p> <p><a href=\"https://github.com/isaacs/node-glob\">glob</a> - File globbing utility.</p> <h3 id=\"grunt.file.minimatch\">grunt.file.minimatch</h3> <p><em>Deprecated</em></p> <p><a href=\"https://github.com/isaacs/minimatch\">minimatch</a> - File pattern matching utility.</p> <h3 id=\"grunt.file.findup\">grunt.file.findup</h3> <p><em>Deprecated</em></p> <p><a href=\"https://github.com/cowboy/node-findup-sync\">findup-sync</a> - Search upwards for matching file patterns.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/api/grunt.file\" class=\"_attribution-link\">http://gruntjs.com/api/grunt.file</a>\n  </p>\n</div>\n","api/grunt.task":"<h1>grunt.task</h1>\n<p>Register, run and load external tasks.</p> <p>See the <a href=\"https://github.com/gruntjs/grunt/blob/master/lib/grunt/task.js\">task lib source</a> and <a href=\"https://github.com/gruntjs/grunt/blob/master/lib/util/task.js\">task util lib source</a> for more information.</p> <h2 id=\"the-task-api\">The task API</h2> <p>While a task is running, Grunt exposes many task-specific utility properties and methods inside the task function via the <code>this</code> object. See the <a href=\"http://gruntjs.com/inside-tasks/\">Inside tasks</a> guide for a list of these properties and methods.</p> <p>Many utility properties and methods are available inside of tasks via the <code>this</code> object.</p> <p>Note that any method marked with a ☃ (unicode snowman) is also available directly on the <code>grunt</code> object. Just so you know. See the <a href=\"http://gruntjs.com/grunt\">API main page</a> for more usage information.</p> <h2 id=\"creating-tasks\">Creating Tasks</h2> <h3 id=\"grunt.task.registertask\">grunt.task.registerTask ☃</h3> <p>Register an \"alias task\" or a task function. This method supports the following two signatures:</p> <p><strong>Alias task</strong></p> <p>If a task list is specified, the new task will be an alias for one or more other tasks. Whenever this \"alias task\" is run, every specified task in <code>taskList</code> will be run, in the order specified. The <code>taskList</code> argument must be an array of tasks.</p> <pre>grunt.task.registerTask(taskName, taskList)</pre> <p>When the optional <code>description</code> string is passed it will be displayed when <code>grunt --help</code> is run:</p> <pre>grunt.task.registerTask(taskName, description, taskList)</pre> <p>This example alias task defines a \"default\" task whereby the \"jshint\", \"qunit\", \"concat\" and \"uglify\" tasks are run automatically if Grunt is executed without any tasks specified:</p> <pre>task.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);</pre> <p>Task arguments can be specified as well. In this example, the alias \"dist\" runs both the \"concat\" and \"uglify\" tasks, each with the \"dist\" argument:</p> <pre>task.registerTask('dist', ['concat:dist', 'uglify:dist']);</pre> <p><strong>Function task</strong></p> <p>If a <code>description</code> and <code>taskFunction</code> are passed, the specified function will be executed whenever the task is run. In addition, the specified description will be shown when <code>grunt --help</code> is run. Task-specific properties and methods are available inside the task function as properties of the <code>this</code> object. The task function can return <code>false</code> to indicate that the task has failed.</p> <p>Note that the <code>grunt.task.registerMultiTask</code> method, explained below, can be used to define a special type of task known as a \"multi task.\"</p> <pre>grunt.task.registerTask(taskName, description, taskFunction)</pre> <p>This example task logs <code>foo, testing 123</code> if Grunt is run via <code>grunt foo:testing:123</code>. If the task is run without arguments as <code>grunt foo</code> the task logs <code>foo, no args</code>.</p> <pre>grunt.task.registerTask('foo', 'A sample task that logs stuff.', function(arg1, arg2) {\n  if (arguments.length === 0) {\n    grunt.log.writeln(this.name + \", no args\");\n  } else {\n    grunt.log.writeln(this.name + \", \" + arg1 + \" \" + arg2);\n  }\n});</pre> <p>See the <a href=\"../creating-tasks\">creating tasks</a> documentation for more examples of tasks and alias tasks.</p> <p><em>This method is also available as <a href=\"http://gruntjs.com/grunt\">grunt.registerTask</a>.</em></p> <h3 id=\"grunt.task.registermultitask\">grunt.task.registerMultiTask ☃</h3> <p>Register a \"multi task.\" A multi task is a task that implicitly iterates over all of its named sub-properties (AKA targets) if no target was specified. In addition to the default properties and methods, extra multi task-specific properties are available inside the task function as properties of the <code>this</code> object.</p> <p>Many of the contrib tasks, including the <a href=\"https://github.com/gruntjs/grunt-contrib-jshint\">jshint task</a>, <a href=\"https://github.com/gruntjs/grunt-contrib-concat\">concat task</a> and <a href=\"https://github.com/gruntjs/grunt-contrib-uglify\">uglify task</a> are multi tasks.</p> <pre>grunt.task.registerMultiTask(taskName, description, taskFunction)</pre> <p>Given the specified configuration, this example multi task would log <code>foo: 1,2,3</code> if Grunt was run via <code>grunt log:foo</code>, or it would log <code>bar: hello world</code> if Grunt was run via <code>grunt log:bar</code>. If Grunt was run as <code>grunt log</code> however, it would log <code>foo: 1,2,3</code> then <code>bar: hello world</code> then <code>baz: false</code>.</p> <pre>grunt.initConfig({\n  log: {\n    foo: [1, 2, 3],\n    bar: 'hello world',\n    baz: false\n  }\n});\n\ngrunt.task.registerMultiTask('log', 'Log stuff.', function() {\n  grunt.log.writeln(this.target + ': ' + this.data);\n});</pre> <p>See the <a href=\"../creating-tasks\">creating tasks</a> documentation for more examples of multi tasks.</p> <p><em>This method is also available as <a href=\"http://gruntjs.com/grunt\">grunt.registerMultiTask</a>.</em></p> <h3 id=\"grunt.task.requires\">grunt.task.requires</h3> <p>Fail the task if some other task failed or never ran.</p> <pre>grunt.task.requires(taskName);</pre> <h3 id=\"grunt.task.exists\">grunt.task.exists</h3> <p><em>Added in 0.4.5</em></p> <p>Check with the name, if a task exists in the registered tasks. Return a boolean.</p> <pre>grunt.task.exists(name)</pre> <h3 id=\"grunt.task.renametask\">grunt.task.renameTask ☃</h3> <p>Rename a task. This might be useful if you want to override the default behavior of a task, while retaining the old name.</p> <p><em>Note that if a task has been renamed, the <a href=\"http://gruntjs.com/inside-tasks#this.name\">this.name</a> and <a href=\"http://gruntjs.com/inside-tasks#this.nameargs\">this.nameArgs</a> properties will change accordingly.</em></p> <pre>grunt.task.renameTask(oldname, newname)</pre> <p><em>This method is also available as <a href=\"http://gruntjs.com/grunt\">grunt.renameTask</a>.</em></p> <h2 id=\"loading-externally-defined-tasks\">Loading Externally-Defined Tasks</h2> <p>For most projects, tasks will be defined in the <a href=\"../index\">Gruntfile</a>. For larger projects, or in cases where tasks need to be shared across projects, tasks can be loaded from one or more external directories or Npm-installed Grunt plugins.</p> <h3 id=\"grunt.task.loadtasks\">grunt.task.loadTasks ☃</h3> <p>Load task-related files from the specified directory, relative to the <a href=\"../index\">Gruntfile</a>. This method can be used to load task-related files from a local Grunt plugin by specifying the path to that plugin's \"tasks\" subdirectory.</p> <pre>grunt.task.loadTasks(tasksPath)</pre> <p><em>This method is also available as <a href=\"http://gruntjs.com/grunt\">grunt.loadTasks</a>.</em></p> <h3 id=\"grunt.task.loadnpmtasks\">grunt.task.loadNpmTasks ☃</h3> <p>Load tasks from the specified Grunt plugin. This plugin must be installed locally via npm, and must be relative to the <a href=\"../index\">Gruntfile</a>. Grunt plugins can be created by using the <a href=\"https://github.com/gruntjs/grunt-init\">grunt-init gruntplugin template</a>: <code>grunt init:gruntplugin</code>.</p> <pre>grunt.task.loadNpmTasks(pluginName)</pre> <p><em>This method is also available as <a href=\"http://gruntjs.com/grunt\">grunt.loadNpmTasks</a>.</em></p> <h2 id=\"queueing-tasks\">Queueing Tasks</h2> <p>Grunt automatically enqueues and runs all tasks specified on the command line, but individual tasks can enqueue additional tasks to be run.</p> <h3 id=\"grunt.task.run\">grunt.task.run</h3> <p>Enqueue one or more tasks. Every specified task in <code>taskList</code> will be run immediately after the current task completes, in the order specified. The task list can be an array of tasks or individual task arguments.</p> <pre>grunt.task.run(taskList)</pre> <h3 id=\"grunt.task.clearqueue\">grunt.task.clearQueue</h3> <p>Empty the task queue completely. Unless additional tasks are enqueued, no more tasks will be run.</p> <pre>grunt.task.clearQueue()</pre> <h3 id=\"grunt.task.normalizemultitaskfiles\">grunt.task.normalizeMultiTaskFiles</h3> <p>Normalizes a task target configuration object into an array of src-dest file mappings. This method is used internally by the multi task system <a href=\"http://gruntjs.com/grunt.task#wiki-this-files\">this.files / grunt.task.current.files</a> property.</p> <pre>grunt.task.normalizeMultiTaskFiles(data [, targetname])</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/api/grunt.task\" class=\"_attribution-link\">http://gruntjs.com/api/grunt.task</a>\n  </p>\n</div>\n","api/inside-tasks":"<h1>Inside Tasks</h1>\n<p>While a task is running, Grunt exposes many task-specific utility properties and methods inside the task function via the <code>this</code> object. This same object is also exposed as <code>grunt.task.current</code> for use in <a href=\"http://gruntjs.com/grunt.template\">templates</a>, eg. the property <code>this.name</code> is also available as <code>grunt.task.current.name</code>.</p> <h2 id=\"inside-all-tasks\">Inside All Tasks</h2> <h3 id=\"this.async\">this.async</h3> <p>If a task is asynchronous, this method must be invoked to instruct Grunt to wait. It returns a handle to a \"done\" function that should be called when the task has completed. Either <code>false</code> or an <code>Error</code> object may be passed to the done function to instruct Grunt that the task has failed.</p> <p>If the <code>this.async</code> method isn't invoked, the task will execute synchronously.</p> <pre>// Tell Grunt this task is asynchronous.\nvar done = this.async();\n// Your async code.\nsetTimeout(function() {\n  // Let's simulate an error, sometimes.\n  var success = Math.random() &gt; 0.5;\n  // All done!\n  done(success);\n}, 1000);</pre> <h3 id=\"this.requires\">this.requires</h3> <p>If one task depends on the successful completion of another task (or tasks), this method can be used to force Grunt to abort if the other task didn't run, or if the other task failed. The tasks list can be an array of task names or individual task names, as arguments.</p> <p>Note that this won't actually run the specified task(s), it will just fail the current task if they haven't already run successfully.</p> <pre>this.requires(tasksList)</pre> <h3 id=\"this.requiresconfig\">this.requiresConfig</h3> <p>Fail the current task if one or more required <a href=\"http://gruntjs.com/grunt.config\">config</a> properties is missing. One or more string or array config properties may be specified.</p> <pre>this.requiresConfig(prop [, prop [, ...]])</pre> <p>See the <a href=\"http://gruntjs.com/grunt.config\">grunt.config documentation</a> for more information about config properties.</p> <p><em>This method is an alias for the <a href=\"http://gruntjs.com/grunt.config#grunt.config.requires\">grunt.config.requires</a> method.</em></p> <h3 id=\"this.name\">this.name</h3> <p>The name of the task, as defined in <code>grunt.registerTask</code>. For example, if a \"sample\" task was run as <code>grunt sample</code> or <code>grunt sample:foo</code>, inside the task function, <code>this.name</code> would be <code>\"sample\"</code>.</p> <p><em>Note that if a task has been renamed with <a href=\"http://gruntjs.com/grunt.task#grunt.task.renametask\">grunt.task.renameTask</a> this property will reflect the new name.</em></p> <h3 id=\"this.nameargs\">this.nameArgs</h3> <p>The name of the task, including any colon-separated arguments or flags specified on the command-line. For example, if a \"sample\" task was run as <code>grunt sample:foo</code>, inside the task function, <code>this.nameArgs</code> would be <code>\"sample:foo\"</code>.</p> <p><em>Note that if a task has been renamed with <a href=\"http://gruntjs.com/grunt.task#grunt.task.renametask\">grunt.task.renameTask</a> this property will reflect the new name.</em></p> <h3 id=\"this.args\">this.args</h3> <p>An array of arguments passed to the task. For example, if a \"sample\" task was run as <code>grunt sample:foo:bar</code>, inside the task function, <code>this.args</code> would be <code>[\"foo\", \"bar\"]</code>.</p> <p><em>Note that in multi tasks, the current target is omitted from the <code>this.args</code> array.</em></p> <h3 id=\"this.flags\">this.flags</h3> <p>An object generated from the arguments passed to the task. For example, if a \"sample\" task was run as <code>grunt sample:foo:bar</code>, inside the task function, <code>this.flags</code> would be <code>{foo: true, bar: true}</code>.</p> <p><em>Note that inside multi tasks, the target name is <strong>not</strong> set as a flag.</em></p> <h3 id=\"this.errorcount\">this.errorCount</h3> <p>The number of <a href=\"http://gruntjs.com/grunt.log#grunt.log.error\">grunt.log.error</a> calls that occurred during this task. This can be used to fail a task if errors were logged during the task.</p> <h3 id=\"this.options\">this.options</h3> <p>Returns an options object. Properties of the optional <code>defaultsObj</code> argument will be overridden by any task-level <code>options</code> object properties, which will be further overridden in multi tasks by any target-level <code>options</code> object properties.</p> <pre>this.options([defaultsObj])</pre> <p>This example shows how a task might use the <code>this.options</code> method:</p> <pre>var options = this.options({\n  enabled: false,\n});\n\ndoSomething(options.enabled);</pre> <p>The <a href=\"../configuring-tasks#options\">Configuring tasks</a> guide shows an example of how options may be specified, from the task user's point of view.</p> <h2 id=\"inside-multi-tasks\">Inside Multi Tasks</h2> <h3 id=\"this.target\">this.target</h3> <p>In a multi task, this property contains the name of the target currently being iterated over. For example, if a \"sample\" multi task was run as <code>grunt sample:foo</code> with the config data <code>{sample: {foo: \"bar\"}}</code>, inside the task function, <code>this.target</code> would be <code>\"foo\"</code>.</p> <h3 id=\"this.files\">this.files</h3> <p>In a multi task, all files specified using any Grunt-supported <a href=\"../configuring-tasks#files\">file formats and options</a>, <a href=\"../configuring-tasks#globbing-patterns\">globbing patterns</a> or <a href=\"../configuring-tasks#building-the-files-object-dynamically\">dynamic mappings</a> will automatically be normalized into a single format: the <a href=\"../configuring-tasks#files-array-format\">Files Array file format</a>.</p> <p>What this means is that tasks don't need to contain a ton of boilerplate for explicitly handling custom file formats, globbing patterns, mapping source files to destination files or filtering out files or directories. <em>A task user can just specify files per the <a href=\"../configuring-tasks#files\">Configuring tasks</a> guide, and <strong>Grunt will handle all the details.</strong></em></p> <p>Your task should iterate over the <code>this.files</code> array, utilizing the <code>src</code> and <code>dest</code> properties of each object in that array. The <code>this.files</code> property will always be an array. The <code>src</code> property will also always be an array, in case your task cares about multiple source files per destination file.</p> <p><em>Note that it's possible that nonexistent files might be included in <code>src</code> values, so you may want to explicitly test that source files exist before using them.</em></p> <p>This example shows how a simple \"concat\" task might use the <code>this.files</code> property:</p> <pre>this.files.forEach(function(file) {\n  var contents = file.src.filter(function(filepath) {\n    // Remove nonexistent files (it's up to you to filter or warn here).\n    if (!grunt.file.exists(filepath)) {\n      grunt.log.warn('Source file \"' + filepath + '\" not found.');\n      return false;\n    } else {\n      return true;\n    }\n  }).map(function(filepath) {\n    // Read and return the file's source.\n    return grunt.file.read(filepath);\n  }).join('\\n');\n  // Write joined contents to destination filepath.\n  grunt.file.write(file.dest, contents);\n  // Print a success message.\n  grunt.log.writeln('File \"' + file.dest + '\" created.');\n});</pre> <p><em>If you need the original file object properties, they are available on each individual file object under the <code>orig</code> property, but there is no known use-case for accessing the original properties.</em></p> <h3 id=\"this.filessrc\">this.filesSrc</h3> <p>In a multi task, all <code>src</code> files specified via any <a href=\"../configuring-tasks#files\">file format</a> are reduced to a single array. If your task is \"read only\" and doesn't care about destination filepaths, use this array instead of <code>this.files</code>.</p> <p>This example shows how a simple \"lint\" task might use the <code>this.filesSrc</code> property:</p> <pre>// Lint specified files.\nvar files = this.filesSrc;\nvar errorCount = 0;\nfiles.forEach(function(filepath) {\n  if (!lint(grunt.file.read(filepath))) {\n    errorCount++;\n  }\n});\n\n// Fail task if errors were logged.\nif (errorCount &gt; 0) { return false; }\n\n// Otherwise, print a success message.\ngrunt.log.ok('Files lint free: ' + files.length);</pre> <h3 id=\"this.data\">this.data</h3> <p>In a multi task, this is the actual data stored in the Grunt config object for the given target. For example, if a \"sample\" multi task was run as <code>grunt sample:foo</code> with the config data <code>{sample: {foo: \"bar\"}}</code>, inside the task function, <code>this.data</code> would be <code>\"bar\"</code>.</p> <p><em>It is recommended that <code>this.options</code> <code>this.files</code> and <code>this.filesSrc</code> are used instead of <code>this.data</code>, as their values are normalized.</em></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/api/inside-tasks\" class=\"_attribution-link\">http://gruntjs.com/api/inside-tasks</a>\n  </p>\n</div>\n","using-the-cli":"<h1>Using the CLI</h1>\n<h2 id=\"installing-the-cli\">Installing the CLI</h2> <p>Run <code>sudo npm install -g grunt-cli</code> (Windows users should omit \"sudo \", and may need to run the command-line with elevated privileges).</p> <p>The <code>grunt</code> command-line interface comes with a series of options. Use <code>grunt -h</code> from your terminal to show these options.</p> <h3 id=\"help-h\">--help, -h</h3> <p>Display help text</p> <h3 id=\"base-b\">--base, -b</h3> <p>Specify an alternate base path. By default, all file paths are relative to the <code>Gruntfile</code>.</p> <p>Alternative to <code>grunt.file.setBase(...)</code></p> <h3 id=\"no-color\">--no-color</h3> <p>Disable colored output.</p> <h3 id=\"gruntfile\">--gruntfile</h3> <p>Specify an alternate <code>Gruntfile</code>.</p> <p>By default, grunt looks in the current or parent directories for the nearest <code>Gruntfile.js</code> or <code>Gruntfile.coffee</code> file.</p> <h3 id=\"debug-d\">--debug, -d</h3> <p>Enable debugging mode for tasks that support it.</p> <h3 id=\"stack\">--stack</h3> <p>Print a stack trace when exiting with a warning or fatal error.</p> <h3 id=\"force-f\">--force, -f</h3> <p>A way to force your way past warnings.</p> <p>Want a suggestion? Don't use this option, fix your code.</p> <h3 id=\"tasks\">--tasks</h3> <p>Additional directory paths to scan for task and \"extra\" files.</p> <p>Alternative to <code>grunt.loadTasks(...)</code></p> <h3 id=\"npm\">--npm</h3> <p>Npm-installed grunt plugins to scan for task and \"extra\" files.</p> <p>Alternative to <code>grunt.loadNpmTasks(...)</code></p> <h3 id=\"no-write\">--no-write</h3> <p>Disable writing files (dry run).</p> <h3 id=\"verbose-v\">--verbose, -v</h3> <p>Verbose mode. A lot more information output.</p> <h3 id=\"version-v\">--version, -V</h3> <p>Print the grunt version. Combine with --verbose for more info.</p> <h3 id=\"completion\">--completion</h3> <p>Output shell auto-completion rules. See the grunt-cli documentation for more information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/using-the-cli\" class=\"_attribution-link\">http://gruntjs.com/using-the-cli</a>\n  </p>\n</div>\n","creating-plugins":"<h1>Creating plugins</h1>\n<ol> <li>Install <a href=\"https://github.com/gruntjs/grunt-init\">grunt-init</a> with <code>npm install -g grunt-init</code>\n</li> <li>Install the gruntplugin template with <code>git clone git://github.com/gruntjs/grunt-init-gruntplugin.git ~/.grunt-init/gruntplugin</code> (<code>%USERPROFILE%\\.grunt-init\\gruntplugin</code> on Windows).</li> <li>Run <code>grunt-init gruntplugin</code> in an empty directory.</li> <li>Run <code>npm install</code> to prepare the development environment.</li> <li>Author your plugin.</li> <li>Run <code>npm publish</code> to publish the Grunt plugin to npm!</li> </ol> <h2 id=\"notes\">Notes</h2> <h3 id=\"naming-your-task\">Naming your task</h3> <p>The \"grunt-contrib\" namespace is reserved for tasks maintained by the Grunt team, please name your task something appropriate that avoids that naming scheme.</p> <h3 id=\"debugging\">Debugging</h3> <p>Grunt hides error stack traces by default, but they can be enabled for easier task debugging with the <code>--stack</code> option. If you want Grunt to always log stack traces on errors, create an alias in your shell. Eg, in bash, you could do <code>alias grunt='grunt --stack'</code>.</p> <h3 id=\"storing-task-files\">Storing task files</h3> <p>Only store data files in a .grunt/[npm-module-name]/ directory at the project's root and clean up after yourself when appropriate. This is not a solution for temporary scratch files, use one of the common npm modules (eg <a href=\"https://www.npmjs.org/package/temporary\">temporary</a>, <a href=\"https://www.npmjs.org/package/tmp\">tmp</a>) that take advantage of the OS level temporary directories for that case.</p> <h3 id=\"avoid-changing-the-current-working-directory:-process.cwd\">Avoid Changing the Current Working Directory: <code>process.cwd()</code>\n</h3> <p>By default, the current working directory is set to be the directory that contains the gruntfile. The user can change it using <code>grunt.file.setBase()</code> in their gruntfile, but plugins should take care to not change it.</p> <p><code>path.resolve('foo')</code> can be used to get the absolute path of the filepath 'foo' relative to the <code>Gruntfile</code>.</p> <h3 id=\"creating-your-task\">Creating your task</h3> <p>You might also want to know how to <a href=\"creating-tasks\">create your own tasks</a> or take a look at the <a href=\"http://gruntjs.com/api\">API</a> reference.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/creating-plugins\" class=\"_attribution-link\">http://gruntjs.com/creating-plugins</a>\n  </p>\n</div>\n","installing-grunt":"<h1>Installing grunt</h1>\n<p>This document explains how to install specific versions of Grunt and Grunt plugins. If you haven't read the <a href=\"http://gruntjs.com/getting-started/\">Getting Started</a> guide, you should check that out first.</p> <h2 id=\"overview\">Overview</h2> <p>Grunt and Grunt plugins should be defined as <a href=\"https://docs.npmjs.com/files/package.json#devdependencies\">devDependencies</a> in your project's <a href=\"https://docs.npmjs.com/files/package.json\">package.json</a>. This will allow you to install all of your project's dependencies with a single command: <code>npm install</code>. The current stable and development versions of Grunt are always listed on the wiki's <a href=\"https://github.com/gruntjs/grunt/wiki/\">home page</a>.</p> <h2 id=\"installing-a-specific-version\">Installing a specific version</h2> <p>If you need a specific version of Grunt or a Grunt plugin, run <code>npm install grunt@VERSION --save-dev</code> where <code>VERSION</code> is the version you need. This will install the specified version, adding it to your package.json devDependencies.</p> <p>Note that a <a href=\"https://www.npmjs.org/doc/misc/semver.html#Ranges\">tilde version range</a> will be used in your <code>package.json</code> when you add the <code>--save-dev</code> flag to <code>npm install</code>. This is typically good, as new patch releases of the specified version will automatically be upgraded as development continues, per <a href=\"http://semver.org\">semver</a>.</p> <h2 id=\"installing-a-published-development-version\">Installing a published development version</h2> <p>Periodically, as new functionality is being developed, Grunt builds may be published to npm. These builds will <em>never</em> be installable without explicitly specifying a version number, and will typically have a build number or alpha/beta/release candidate designation.</p> <p>Like installing a specific version of grunt, run <code>npm install grunt@VERSION --save-dev</code> where <code>VERSION</code> is the version you need, and npm will install that version of Grunt in your project folder, adding it to your <code>package.json</code> devDependencies.</p> <p>Note that regardless of the version you specify, a <a href=\"https://www.npmjs.org/doc/misc/semver.html#Ranges\">tilde version range</a> will be specified in <code>package.json</code>. <strong>This is very bad</strong>, as new, possibly incompatible, patch releases of the specified development version may be installed by npm, breaking your build.</p> <p><em>In this case it is <strong>very important</strong> that you manually edit your <code>package.json</code> and remove the ~ (tilde) from the version number. This will lock in the exact development version that you have specified.</em></p> <p>The same process may be used to install a published development version of a Grunt plugin.</p> <h2 id=\"installing-directly-from-github\">Installing directly from GitHub</h2> <p>If you want to install a bleeding-edge, unpublished version of Grunt or Grunt plugin, follow the instructions for specifying a <a href=\"https://docs.npmjs.com/files/package.json#git-urls-as-dependencies\">git URL as a dependency</a> and be sure to specify an actual commit SHA (not a branch name) as the <code>commit-ish</code>. This will guarantee that your project always uses that exact version of grunt.</p> <p>The specified git URL may be that of the official Grunt repo or a fork.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/installing-grunt\" class=\"_attribution-link\">http://gruntjs.com/installing-grunt</a>\n  </p>\n</div>\n","upgrading-from-0.4-to-1.0":"<h1>Upgrading from 0.4 to 1.0</h1>\n<p>This guide is here to help you update your projects and plugins from Grunt 0.4.x to Grunt 1.0.</p> <p><strong>Be advised Grunt 1.0.0 no longer supports Node.js v0.8.</strong></p> <h2 id=\"for-projects-that-use-grunt\">For Projects that use Grunt</h2> <h3 id=\"peer-dependencies\">Peer Dependencies</h3> <p>You might receive <code>peerDependencies</code> errors when you install a project with Grunt 1.0. We ask you to send pull requests to your favourite plugins and ask them to update the peerDependencies section of their package.json. See below for details about plugin updates.</p> <h2 id=\"for-plugins-and-plugin-developers\">For Plugins and Plugin developers</h2> <h3 id=\"peer-dependencies\">Peer Dependencies</h3> <p>If you have a Grunt plugin that includes grunt in the peerDependencies section of your package.json, we recommend tagging with \"grunt\": \"&gt;=0.4.0\". Otherwise when grunt@1.0.0 is released, npm@2 users will receive a hard error when trying to install your plugin and npm@3 users will get a warning.</p> <p>Be aware, peer dependencies are no longer installed for users as of npm@3. Users of Grunt plugins are expected to npm install grunt --save-dev alongside any Grunt plugin install.</p> <p>We ask you to update your plugin with <code>\"grunt\": \"&gt;=0.4.0\"</code> in it and publish that on npm.</p> <h3 id=\"api-changes\">API Changes</h3> <h4 id=\"from-grunt-1.0-rc1:\">From Grunt 1.0 RC1:</h4> <p>Be aware, some APIs have changed warranting a major version update:</p> <ul> <li>\n<code>coffee-script</code> is upgraded to <code>~1.10.0</code> which could incur breaking changes when using the language with plugins and Gruntfiles.</li> <li>\n<code>nopt</code> is upgraded to <code>~3.0.6</code> which has fixed many issues, including passing multiple arguments and dealing with numbers as options. Be aware previously <code>--foo bar</code> used to pass the value <code>'bar'</code> to the option <code>foo</code>. It will now set the option <code>foo</code> to <code>true</code> and run the task <code>bar</code>.</li> <li>\n<code>glob</code> is upgraded to <code>~6.0.4</code> and <code>minimatch</code> is upgraded to <code>~3.0.0</code>. Results are now sorted by default with <code>grunt.file.expandMapping()</code>. Pass the <code>nosort: true</code> option if you don't want the results to be sorted.</li> <li>\n<code>lodash</code> was upgraded to <code>~4.3.0</code>. Many changes have occurred. Some of which that directly effect Grunt are <code>grunt.util._.template()</code> returns a compile function and <code>grunt.util._.flatten</code> no longer flattens deeply. <code>grunt.util._</code> is deprecated and we highly encourage you to <code>npm install lodash</code> and <code>var _ = require('lodash')</code> to use <code>lodash</code>. Please see the lodash changelog for a full list of changes: <a href=\"https://github.com/lodash/lodash/wiki/Changelog\">https://github.com/lodash/lodash/wiki/Changelog</a>\n</li> <li>\n<code>iconv-lite</code> is upgraded to <code>~0.4.13</code> and strips the BOM by default.</li> <li>\n<code>js-yaml</code> is upgraded to <code>~3.5.2</code> and may affect <code>grunt.file.readYAML</code>. We encourage you to please <code>npm install js-yaml</code> and use <code>var YAML = require('js-yaml')</code> directly in case of future deprecations.</li> <li>A file <code>mode</code> option can be passed into <a href=\"api/grunt.file#grunt.file.write\">grunt.file.write()</a>.</li> <li>\n<code>Done, without errors.</code> was changed to <code>Done.</code> to avoid failing by mistake on the word <code>errors</code>.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/upgrading-from-0.4-to-1.0\" class=\"_attribution-link\">http://gruntjs.com/upgrading-from-0.4-to-1.0</a>\n  </p>\n</div>\n","sample-gruntfile":"<h1>Sample Gruntfile</h1>\n<p>In this page we walk you through the creation of a <code>Gruntfile</code> that covers the usual needs of a simple project. If you already know how to set up a <code>Gruntfile</code> and you're looking for a quick example, here's one:</p> <pre>module.exports = function(grunt) {\n\n  grunt.initConfig({\n    jshint: {\n      files: ['Gruntfile.js', 'src/**/*.js', 'test/**/*.js'],\n      options: {\n        globals: {\n          jQuery: true\n        }\n      }\n    },\n    watch: {\n      files: ['&lt;%= jshint.files %&gt;'],\n      tasks: ['jshint']\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  grunt.registerTask('default', ['jshint']);\n\n};</pre> <h2 id=\"requirements\">Requirements</h2> <p>Every project has its own needs, but most of them have something in common. In this guide we introduce you to a few Grunt plugins to automate basic requirements. The final goal is to teach you how to configure these Grunt plugins so that you can use them in your projects.</p> <p>For the sake of the example, let's say that you're creating a JavaScript library. The typical folder structure features the following folders: <code>src</code>, <code>dist</code>, and <code>test</code>. The <code>src</code> folder (sometimes called <code>app</code>) contains the source code of the library as you author it. The <code>dist</code> folder (sometimes called <code>build</code>) contains the distribution, a minified version of the source code. A minified file is one where all unnecessary characters, such as spaces, new lines, comments are removed, without affecting the functionality of the source code. Minified source code is especially useful for users of the project because it reduces the amount of data that needs to be transferred. Finally, the <code>test</code> folder contains the code to test the project. This set up will be used in the next sections when creating the <code>Gruntfile</code> configuration.</p> <p>While developing the library and releasing new versions there are a few tasks that you need to perform on a regular basis. For example, you might want to ensure that the code you write adheres to best practices, or that the code you've written doesn't result in unexpected behaviors. To do that, you can employ a tool called <a href=\"http://jshint.com/about/\">JSHint</a>. Grunt has an official plugin for it called <a href=\"https://github.com/gruntjs/grunt-contrib-jshint\">grunt-contrib-jshint</a> which we'll adopt in this example. In particular, you might want to ensure that as you modify your code, you don't break any rules or best practices. So, a good strategy is to check the code at every change you perform. To do that, we'll cover a Grunt plugin called <a href=\"https://github.com/gruntjs/grunt-contrib-watch\">grunt-contrib-watch</a>. The latter runs predefined tasks, such as <code>grunt-contrib-jshint</code>, whenever files are added, changed, or deleted.</p> <p>Checking that your source code follows best practices is not enough to guarantee that it's stable and doesn't contain bugs. To create a robust project, you need to test it. There are several libraries you can adopt such as <a href=\"https://qunitjs.com/\">QUnit</a> or <a href=\"http://jasmine.github.io/\">Jasmine</a>. In this guide, we describe how to configure QUnit, and specifically <a href=\"https://github.com/gruntjs/grunt-contrib-qunit\">grunt-contrib-qunit</a>, to test your code.</p> <p>When it comes to distributing your work, you want to offer a version as small in size as possible. To create a minified version you need a Grunt plugin like <a href=\"https://github.com/gruntjs/grunt-contrib-uglify\">grunt-contrib-uglify</a>. Moreover, unless the project you're developing is very small, chances are that you've split the code in multiple files. While this is a good practice for the developer, you want users to include only one file. So, before minifying the code, you should concatenate the source files to create a single one. To achieve this goal you need a Grunt plugin like <a href=\"https://github.com/gruntjs/grunt-contrib-concat\">grunt-contrib-concat</a>.</p> <p>To sum up, in this guide we'll use the following five Grunt plugins:</p> <ul> <li><a href=\"https://github.com/gruntjs/grunt-contrib-uglify\">grunt-contrib-uglify</a></li> <li><a href=\"https://github.com/gruntjs/grunt-contrib-qunit\">grunt-contrib-qunit</a></li> <li><a href=\"https://github.com/gruntjs/grunt-contrib-concat\">grunt-contrib-concat</a></li> <li><a href=\"https://github.com/gruntjs/grunt-contrib-jshint\">grunt-contrib-jshint</a></li> <li><a href=\"https://github.com/gruntjs/grunt-contrib-watch\">grunt-contrib-watch</a></li> </ul> <p>If you're curious about what the final result looks like, the entire <code>Gruntfile</code> can be found at the bottom of this page.</p> <h2 id=\"setting-up-the-gruntfile\">Setting up the <code>Gruntfile</code>\n</h2> <p>The first part is the \"wrapper\" function, which encapsulates your Grunt configuration.</p> <pre>module.exports = function(grunt) {\n};</pre> <p>Within that function we can initialize our configuration object:</p> <pre>grunt.initConfig({\n});</pre> <p>Next, we can store the project settings from the <code>package.json</code> file into the <code>pkg</code> property. This allows us to refer to the values of properties within our <code>package.json</code> file, as we'll see shortly.</p> <pre>pkg: grunt.file.readJSON('package.json')</pre> <p>This leaves us with this so far:</p> <pre>module.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json')\n  });\n};</pre> <p>Now we can define a configuration for each of the tasks we mentioned. The configuration object for a plugin lives as a property on the configuration object, that often shares the same name as its plugin. The configuration for <code>grunt-contrib-concat</code> goes in the configuration object under the <code>concat</code> key as shown below:</p> <pre>concat: {\n  options: {\n    // define a string to put between each file in the concatenated output\n    separator: ';'\n  },\n  dist: {\n    // the files to concatenate\n    src: ['src/**/*.js'],\n    // the location of the resulting JS file\n    dest: 'dist/&lt;%= pkg.name %&gt;.js'\n  }\n}</pre> <p>Note how in the snippet above we refer to the <code>name</code> property that's in the JSON file. We access it by using <code>pkg.name</code> as earlier we defined the <code>pkg</code> property to be the result of loading the <code>package.json</code> file, which is then parsed to a JavaScript object. Grunt has a simple template engine to output the values of properties in the configuration object. Here we tell the <code>concat</code> task to concatenate all files that exist within <code>src/</code> and end in <code>.js</code>.</p> <p>Now let's configure the <code>grunt-contrib-uglify</code> plugin, which minifies the JavaScript code:</p> <pre>uglify: {\n  options: {\n    // the banner is inserted at the top of the output\n    banner: '/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(\"dd-mm-yyyy\") %&gt; */\\n'\n  },\n  dist: {\n    files: {\n      'dist/&lt;%= pkg.name %&gt;.min.js': ['&lt;%= concat.dist.dest %&gt;']\n    }\n  }\n}</pre> <p>This snippet tells <code>grunt-contrib-uglify</code> to create a file within <code>dist/</code> that contains the result of minifying the JavaScript files. Here we use <code>&lt;%= concat.dist.dest %&gt;</code> so uglify will minify the file that the concat task produces.</p> <p>Up to this point, we have configured the plugins to create the distribution version the library. It's now time to use <code>grunt-contrib-qunit</code> to automate the testing of the code. To do that, we need to give to specify the location of the test runner files, which are the HTML files QUnit runs on. The resulting code is reported below:</p> <pre>qunit: {\n  files: ['test/**/*.html']\n},</pre> <p>Once done, it's time to set up the configuration to ensure that the code of the project adheres to best practices. JSHint is a tool that can detect issues or potential issues like a high cyclomatic complexity, the use of the equality operator instead of the strict equality operator, and the definition of unused variables and functions.</p> <p>We advise you to analyze with <code>grunt-contrib-jshint</code> all the JavaScript files of your project, including <code>Gruntfile</code> and the test files. An example of configuration of <code>grunt-contrib-jshint</code> is the following:</p> <pre>jshint: {\n  // define the files to lint\n  files: ['Gruntfile.js', 'src/**/*.js', 'test/**/*.js'],\n  // configure JSHint (documented at http://www.jshint.com/docs/)\n  options: {\n    // more options here if you want to override JSHint defaults\n    globals: {\n      jQuery: true,\n      console: true,\n      module: true\n    }\n  }\n}</pre> <p>This plugin takes an array of files and then an object of options. These are all <a href=\"http://www.jshint.com/docs/\">documented on the JSHint site</a>. If you're happy with the plugin defaults, there's no need to redefine them in the Gruntfile.</p> <p>The last plugin left to configure is <code>grunt-contrib-watch</code>. We'll use it to run the <code>jshint</code> and the <code>qunit</code> tasks as soon as a JavaScript file is added, deleted, or modified. When it detects any of the files specified have changed (here, we use the same files we told JSHint to check), it will run the tasks you specify, in the order they appear. This can be run on the command line with <code>grunt watch</code>.</p> <p>Turning the previous description into a configuration for <code>grunt-contrib-watch</code> results in the snippet below:</p> <pre>watch: {\n  files: ['&lt;%= jshint.files %&gt;'],\n  tasks: ['jshint', 'qunit']\n}</pre> <p>With this snippet, we've set up the configuration for all the plugins mentioned in the introduction. The last step to perform is to load in the Grunt plugins we need. All of these should have been previously installed through npm.</p> <pre>grunt.loadNpmTasks('grunt-contrib-uglify');\ngrunt.loadNpmTasks('grunt-contrib-jshint');\ngrunt.loadNpmTasks('grunt-contrib-qunit');\ngrunt.loadNpmTasks('grunt-contrib-watch');\ngrunt.loadNpmTasks('grunt-contrib-concat');</pre> <p>And finally set up some tasks. The most important of these tasks is the default task:</p> <pre>// this would be run by typing \"grunt test\" on the command line\ngrunt.registerTask('test', ['jshint', 'qunit']);\n\n// the default task can be run just by typing \"grunt\" on the command line\ngrunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);</pre> <p>The default task is executed when you invoke <code>Grunt</code> without specifying a task to execute (<code>grunt</code>).</p> <h2 id=\"the-resulting-gruntfile\">The resulting <code>Gruntfile</code>\n</h2> <p>If you've followed this guide correctly you should have the following <code>Gruntfile</code>:</p> <pre>module.exports = function(grunt) {\n\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    concat: {\n      options: {\n        separator: ';'\n      },\n      dist: {\n        src: ['src/**/*.js'],\n        dest: 'dist/&lt;%= pkg.name %&gt;.js'\n      }\n    },\n    uglify: {\n      options: {\n        banner: '/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(\"dd-mm-yyyy\") %&gt; */\\n'\n      },\n      dist: {\n        files: {\n          'dist/&lt;%= pkg.name %&gt;.min.js': ['&lt;%= concat.dist.dest %&gt;']\n        }\n      }\n    },\n    qunit: {\n      files: ['test/**/*.html']\n    },\n    jshint: {\n      files: ['Gruntfile.js', 'src/**/*.js', 'test/**/*.js'],\n      options: {\n        // options here to override JSHint defaults\n        globals: {\n          jQuery: true,\n          console: true,\n          module: true,\n          document: true\n        }\n      }\n    },\n    watch: {\n      files: ['&lt;%= jshint.files %&gt;'],\n      tasks: ['jshint', 'qunit']\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-qunit');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-contrib-concat');\n\n  grunt.registerTask('test', ['jshint', 'qunit']);\n\n  grunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);\n\n};</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/sample-gruntfile\" class=\"_attribution-link\">http://gruntjs.com/sample-gruntfile</a>\n  </p>\n</div>\n","project-scaffolding":"<h1>Project Scaffolding</h1>\n<h2 id=\"grunt-init\">grunt-init</h2> <p>Grunt-init is a scaffolding tool used to automate project creation. It will build an entire directory structure based on current environment and answers to some questions. The exact files and contents created depend on the template chosen along with the answers to the questions asked.</p> <p><em>Note: This standalone utility used to be built-in to Grunt as the \"init\" task. See the Grunt <a href=\"upgrading-from-0.3-to-0.4\">Upgrading from 0.3 to 0.4</a> guide for more information about this change.</em></p> <h2 id=\"installation\">Installation</h2> <p>In order to use grunt-init, you'll want to install it globally.</p> <pre>npm install -g grunt-init</pre> <p>This will put the <code>grunt-init</code> command in your system path, allowing it to be run from anywhere.</p> <p><em>Notes: You may need to use sudo or run your command shell as Administrator to do this.</em></p> <h2 id=\"usage\">Usage</h2> <ul> <li>Get program help and a listing of available templates with <code>grunt-init --help</code>\n</li> <li>Create a project based around an available template with <code>grunt-init TEMPLATE</code>\n</li> <li>Create a project based around a arbitrarily-located template with <code>grunt-init /path/to/TEMPLATE</code>\n</li> </ul> <p>Note that most templates generate their files in the current directory, so be sure to change to a new directory first if you don't want to overwrite existing files.</p> <h2 id=\"installing-templates\">Installing templates</h2> <p>Once templates are installed into your <code>~/.grunt-init/</code> directory (<code>%USERPROFILE%\\.grunt-init\\</code> on Windows) they will be available for use via grunt-init. It's recommended that you use git to clone a template into that directory. For example, the <a href=\"https://github.com/gruntjs/grunt-init-jquery\">grunt-init-jquery</a> template can be installed like so:</p> <pre>git clone https://github.com/gruntjs/grunt-init-jquery.git ~/.grunt-init/jquery</pre> <p><em>Note: if you want to make the template available locally as \"foobarbaz\" you could specify <code>~/.grunt-init/foobarbaz</code> while cloning. Grunt-init will use the actual template directory name as it exists inside of the <code>~/.grunt-init/</code> directory.</em></p> <p>A few grunt-init templates are maintained officially:</p> <ul> <li>\n<a href=\"https://github.com/gruntjs/grunt-init-commonjs\">grunt-init-commonjs</a> - Create a commonjs module, including Nodeunit unit tests. (<a href=\"https://github.com/gruntjs/grunt-init-commonjs-sample/tree/generated\">sample \"generated\" repo</a> | <a href=\"https://github.com/gruntjs/grunt-init-commonjs-sample#project-creation-transcript\">creation transcript</a>)</li> <li>\n<a href=\"https://github.com/gruntjs/grunt-init-gruntfile\">grunt-init-gruntfile</a> - Create a basic Gruntfile. (<a href=\"https://github.com/gruntjs/grunt-init-gruntfile-sample/tree/generated\">sample \"generated\" repo</a> | <a href=\"https://github.com/gruntjs/grunt-init-gruntfile-sample#project-creation-transcript\">creation transcript</a>)</li> <li>\n<a href=\"https://github.com/gruntjs/grunt-init-gruntplugin\">grunt-init-gruntplugin</a> - Create a Grunt plugin, including Nodeunit unit tests. (<a href=\"https://github.com/gruntjs/grunt-init-gruntplugin-sample/tree/generated\">sample \"generated\" repo</a> | <a href=\"https://github.com/gruntjs/grunt-init-gruntplugin-sample#project-creation-transcript\">creation transcript</a>)</li> <li>\n<a href=\"https://github.com/gruntjs/grunt-init-jquery\">grunt-init-jquery</a> - Create a jQuery plugin, including QUnit unit tests. (<a href=\"https://github.com/gruntjs/grunt-init-jquery-sample/tree/generated\">sample \"generated\" repo</a> | <a href=\"https://github.com/gruntjs/grunt-init-jquery-sample#project-creation-transcript\">creation transcript</a>)</li> <li>\n<a href=\"https://github.com/gruntjs/grunt-init-node\">grunt-init-node</a> - Create a Node.js module, including Nodeunit unit tests. (<a href=\"https://github.com/gruntjs/grunt-init-node-sample/tree/generated\">sample \"generated\" repo</a> | <a href=\"https://github.com/gruntjs/grunt-init-node-sample#project-creation-transcript\">creation transcript</a>)</li> </ul> <h2 id=\"custom-templates\">Custom templates</h2> <p>You can create and use custom templates. Your template must follow the same structure as the aforementioned templates.</p> <p>A sample template named <code>my-template</code> would follow this general file structure:</p> <ul> <li>\n<code>my-template/template.js</code> - the main template file.</li> <li>\n<code>my-template/rename.json</code> - template-specific rename rules, processed as templates.</li> <li>\n<code>my-template/root/</code> - files to be copied into the target location.</li> </ul> <p>Assuming these files exist at <code>/path/to/my-template</code>, the command <code>grunt-init /path/to/my-template</code> would be used to process the template. Multiple uniquely-named templates may exist in the same directory.</p> <p>Additionally, if you place this custom template in your <code>~/.grunt-init/</code> directory (<code>%USERPROFILE%\\.grunt-init\\</code> on Windows) it will be automatically available to be used with just <code>grunt-init my-template</code>.</p> <h3 id=\"copying-files\">Copying files</h3> <p>As long as a template uses the <code>init.filesToCopy</code> and <code>init.copyAndProcess</code> methods, any files in the <code>root/</code> subdirectory will be copied to the current directory when the init template is run.</p> <p>Note that all copied files will be processed as templates, with any <code>{% %}</code> template being processed against the collected <code>props</code> data object, unless the <code>noProcess</code> option is set. See the <a href=\"https://github.com/gruntjs/grunt-init-jquery\">jquery template</a> for an example.</p> <h3 id=\"renaming-or-excluding-template-files\">Renaming or excluding template files</h3> <p>The <code>rename.json</code> describes <code>sourcepath</code> to <code>destpath</code> rename mappings. The <code>sourcepath</code> must be the path of the file-to-be-copied relative to the <code>root/</code> folder, but the <code>destpath</code> value can contain <code>{% %}</code> templates, describing what the destination path will be.</p> <p>If <code>false</code> is specified as a <code>destpath</code> the file will not be copied. Also, glob patterns are supported for <code>srcpath</code>.</p> <h2 id=\"specifying-default-prompt-answers\">Specifying default prompt answers</h2> <p>Each init prompt either has a default value hard-coded or it looks at the current environment to attempt to determine that default value. If you want to override a particular prompt's default value, you can do so in the optional OS X or Linux <code>~/.grunt-init/defaults.json</code> or Windows <code>%USERPROFILE%\\.grunt-init\\defaults.json</code> file.</p> <p>For example, my <code>defaults.json</code> file looks like this, because I want to use a slightly different name than the default name, I want to exclude my email address, and I want to specify an author URL automatically.</p> <pre>{\n  \"author_name\": \"\\\"Cowboy\\\" Ben Alman\",\n  \"author_email\": \"none\",\n  \"author_url\": \"http://benalman.com/\"\n}</pre> <p><em>Note: until all the built-in prompts have been documented, you can find their names and default values in the <a href=\"https://github.com/gruntjs/grunt-init/blob/master/tasks/init.js\">source code</a>.</em></p> <h2 id=\"defining-an-init-template\">Defining an init template</h2> <h3 id=\"exports.description\">exports.description</h3> <p>This brief template description will be displayed along with the template name when the user runs <code>grunt init</code> or <code>grunt-init</code> to display a list of all available init templates.</p> <pre>exports.description = descriptionString;</pre> <h3 id=\"exports.notes\">exports.notes</h3> <p>If specified, this optional extended description will be displayed before any prompts are displayed. This is a good place to give the user a little help explaining naming conventions, which prompts may be required or optional, etc.</p> <pre>exports.notes = notesString;</pre> <h3 id=\"exports.warnon\">exports.warnOn</h3> <p>If this optional (but recommended) wildcard pattern or array of wildcard patterns is matched, Grunt will abort with a warning that the user can override with <code>--force</code>. This is very useful in cases where the init template could potentially override existing files.</p> <pre>exports.warnOn = wildcardPattern;</pre> <p>While the most common value will be <code>'*'</code>, matching any file or directory, the <a href=\"https://github.com/isaacs/minimatch\">minimatch</a> wildcard pattern syntax used allows for a lot of flexibility. For example:</p> <pre>exports.warnOn = 'Gruntfile.js';        // Warn on a Gruntfile.js file.\nexports.warnOn = '*.js';            // Warn on any .js file.\nexports.warnOn = '*';               // Warn on any non-dotfile or non-dotdir.\nexports.warnOn = '.*';              // Warn on any dotfile or dotdir.\nexports.warnOn = '{.*,*}';          // Warn on any file or dir (dot or non-dot).\nexports.warnOn = '!*/**';           // Warn on any file (ignoring dirs).\nexports.warnOn = '*.{png,gif,jpg}'; // Warn on any image file.\n\n// This is another way of writing the last example.\nexports.warnOn = ['*.png', '*.gif', '*.jpg'];</pre> <h3 id=\"exports.template\">exports.template</h3> <p>While the <code>exports</code> properties are defined outside this function, all the actual init code is specified inside. Three arguments are passed into this function. The <code>grunt</code> argument is a reference to grunt, containing all the <a href=\"api/grunt\">grunt methods and libs</a>. The <code>init</code> argument is an object containing methods and properties specific to this init template. The <code>done</code> argument is a function that must be called when the init template is done executing.</p> <pre>exports.template = function(grunt, init, done) {\n  // See the \"Inside an init template\" section.\n};</pre> <h2 id=\"inside-an-init-template\">Inside an init template</h2> <h3 id=\"init.addlicensefiles\">init.addLicenseFiles</h3> <p>Add properly-named license files to the files object.</p> <pre>var files = {};\nvar licenses = ['MIT'];\ninit.addLicenseFiles(files, licenses);\n// files === {'LICENSE-MIT': 'licenses/LICENSE-MIT'}</pre> <h3 id=\"init.availablelicenses\">init.availableLicenses</h3> <p>Return an array of available licenses.</p> <pre>var licenses = init.availableLicenses();\n// licenses === [ 'Apache-2.0', 'GPL-2.0', 'MIT', 'MPL-2.0' ]</pre> <h3 id=\"init.copy\">init.copy</h3> <p>Given an absolute or relative source path, and an optional relative destination path, copy a file, optionally processing it through the passed callback.</p> <pre>init.copy(srcpath[, destpath], options)</pre> <h3 id=\"init.copyandprocess\">init.copyAndProcess</h3> <p>Iterate over all files in the passed object, copying the source file to the destination, processing the contents.</p> <pre>init.copyAndProcess(files, props[, options])</pre> <h3 id=\"init.defaults\">init.defaults</h3> <p>User-specified default init values from <code>defaults.json</code>.</p> <pre>init.defaults</pre> <h3 id=\"init.destpath\">init.destpath</h3> <p>Absolute destination file path.</p> <pre>init.destpath()</pre> <h3 id=\"init.expand\">init.expand</h3> <p>Same as <a href=\"https://github.com/gruntjs/grunt/wiki/grunt.file#wiki-grunt-file-expand\">grunt.file.expand</a>.</p> <p>Return a unique array of all file or directory paths that match the given wildcard pattern(s). This method accepts either comma separated wildcard patterns or an array of wildcard patterns. Paths matching patterns that begin with ! will be excluded from the returned array. Patterns are processed in order, so inclusion and exclusion order is significant.</p> <pre>init.expand([options, ] patterns)</pre> <h3 id=\"init.filestocopy\">init.filesToCopy</h3> <p>Return an object containing files to copy with their absolute source path and relative destination path, renamed (or omitted) according to rules in rename.json (if it exists).</p> <pre>var files = init.filesToCopy(props);\n/* files === { '.gitignore': 'template/root/.gitignore',\n  '.jshintrc': 'template/root/.jshintrc',\n  'Gruntfile.js': 'template/root/Gruntfile.js',\n  'README.md': 'template/root/README.md',\n  'test/test_test.js': 'template/root/test/name_test.js' } */</pre> <h3 id=\"init.getfile\">init.getFile</h3> <p>Get a single task file path.</p> <pre>init.getFile(filepath[, ...])</pre> <h3 id=\"init.gettemplates\">init.getTemplates</h3> <p>Returns an object of all the available templates.</p> <pre>init.getTemplates()</pre> <h3 id=\"init.initsearchdirs\">init.initSearchDirs</h3> <p>Initialize the directories to search for init templates. <code>template</code> is the location of a template. Will also include <code>~/.grunt-init/</code> and the core init tasks within grunt-init.</p> <pre>init.initSearchDirs([filename])</pre> <h3 id=\"init.process\">init.process</h3> <p>Start up the process to begin prompting for input.</p> <pre>init.process(options, prompts, done)</pre> <pre>init.process({}, [\n  // Prompt for these values\n  init.prompt('name'),\n  init.prompt('description'),\n  init.prompt('version')\n], function(err, props) {\n  // All finished, do something with the properties\n});</pre> <h3 id=\"init.prompt\">init.prompt</h3> <p>Prompt a user for a value.</p> <pre>init.prompt(name[, default])</pre> <h3 id=\"init.prompts\">init.prompts</h3> <p>An object of all the prompts.</p> <pre>var prompts = init.prompts;</pre> <h3 id=\"init.readdefaults\">init.readDefaults</h3> <p>Read JSON defaults from task files (if they exist), merging them into one data object.</p> <pre>init.readDefaults(filepath[, ...])</pre> <h3 id=\"init.renames\">init.renames</h3> <p>The rename rules for the template.</p> <pre>var renames = init.renames;\n// renames === { 'test/name_test.js': 'test/{%= name %}_test.js' }</pre> <h3 id=\"init.searchdirs\">init.searchDirs</h3> <p>An array of directories to search for templates in.</p> <pre>var dirs = init.searchDirs;\n/* dirs === [ '/Users/shama/.grunt-init',\n  '/usr/local/lib/node_modules/grunt-init/templates' ] */</pre> <h3 id=\"init.srcpath\">init.srcpath</h3> <p>Search init template paths for filename and return an absolute path.</p> <pre>init.srcpath(filepath[, ...])</pre> <h3 id=\"init.userdir\">init.userDir</h3> <p>Returns the absolute path to the user's template directory.</p> <pre>var dir = init.userDir();\n// dir === '/Users/shama/.grunt-init'</pre> <h3 id=\"init.writepackagejson\">init.writePackageJSON</h3> <p>Save a package.json file in the destination directory. The callback can be used to post-process properties to add/remove/whatever.</p> <pre>init.writePackageJSON(filename, props[, callback])</pre> <h2 id=\"built-in-prompts\">Built-in prompts</h2> <h3 id=\"author_email\">author_email</h3> <p>Author's email address to use in the <code>package.json</code>. Will attempt to find a default value from the user's git config.</p> <h3 id=\"author_name\">author_name</h3> <p>Author's full name to use in the <code>package.json</code> and copyright notices. Will attempt to find a default value from the user's git config.</p> <h3 id=\"author_url\">author_url</h3> <p>A public URL to the author's website to use in the <code>package.json</code>.</p> <h3 id=\"bin\">bin</h3> <p>A relative path from the project root for a cli script.</p> <h3 id=\"bugs\">bugs</h3> <p>A public URL to the project's issues tracker. Will default to the GitHub issue tracker if the project has a GitHub repository.</p> <h3 id=\"description\">description</h3> <p>A description of the project. Used in the <code>package.json</code> and README files.</p> <h3 id=\"grunt_version\">grunt_version</h3> <p>A valid semantic version range descriptor of Grunt the project requires.</p> <h3 id=\"homepage\">homepage</h3> <p>A public URL to the project's home page. Will default to the GitHub URL if a GitHub repository.</p> <h3 id=\"jquery_version\">jquery_version</h3> <p>If a jQuery project, the version of jQuery the project requires. Must be a valid semantic version range descriptor.</p> <h3 id=\"licenses\">licenses</h3> <p>The license(s) for the project. Multiple licenses are separated by spaces. The licenses built-in are: <code>MIT</code>, <code>MPL-2.0</code>, <code>GPL-2.0</code>, and <code>Apache-2.0</code>. Defaults to <code>MIT</code>. Add custom licenses with <a href=\"project-scaffolding#init.addlicensefiles\">init.addLicenseFiles</a>.</p> <h3 id=\"main\">main</h3> <p>The primary entry point of the project. Defaults to the project name within the <code>lib</code> folder.</p> <h3 id=\"name\">name</h3> <p>The name of the project. Will be used heavily throughout the project template. Defaults to the current working directory.</p> <h3 id=\"node_version\">node_version</h3> <p>The version of Node.js the project requires. Must be a valid semantic version range descriptor.</p> <h3 id=\"npm_test\">npm_test</h3> <p>The command to run tests on your project. Defaults to <code>grunt</code>.</p> <h3 id=\"repository\">repository</h3> <p>Project's git repository. Defaults to a guess of a GitHub URL.</p> <h3 id=\"title\">title</h3> <p>A human readable project name. Defaults to the actual project name altered to be more human readable.</p> <h3 id=\"version\">version</h3> <p>The version of the project. Defaults to the first valid semantic version, <code>0.1.0</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/project-scaffolding\" class=\"_attribution-link\">http://gruntjs.com/project-scaffolding</a>\n  </p>\n</div>\n","configuring-tasks":"<h1>Configuring tasks</h1>\n<p>This guide explains how to configure tasks for your project using a <code>Gruntfile</code>. If you don't know what a <code>Gruntfile</code> is, please read the <a href=\"http://gruntjs.com/getting-started/\">Getting Started</a> guide and check out a <a href=\"http://gruntjs.com/sample-gruntfile/\">Sample Gruntfile</a>.</p> <h2 id=\"grunt-configuration\">Grunt Configuration</h2> <p>Task configuration is specified in your <code>Gruntfile</code> via the <code>grunt.initConfig</code> method. This configuration will mostly be under task-named properties, but may contain any arbitrary data. As long as properties don't conflict with properties your tasks require, they will be otherwise ignored.</p> <p>Also, because this is JavaScript, you're not limited to JSON; you may use any valid JavaScript here. You may even programmatically generate the configuration if necessary.</p> <pre>grunt.initConfig({\n  concat: {\n    // concat task configuration goes here.\n  },\n  uglify: {\n    // uglify task configuration goes here.\n  },\n  // Arbitrary non-task-specific properties.\n  my_property: 'whatever',\n  my_src_files: ['foo/*.js', 'bar/*.js'],\n});</pre> <h2 id=\"task-configuration-and-targets\">Task Configuration and Targets</h2> <p>When a task is run, Grunt looks for its configuration under a property of the same name. Multi-tasks can have multiple configurations, defined using arbitrarily named \"targets.\" In the example below, the <code>concat</code> task has <code>foo</code> and <code>bar</code> targets, while the <code>uglify</code> task only has a <code>bar</code> target.</p> <pre>grunt.initConfig({\n  concat: {\n    foo: {\n      // concat task \"foo\" target options and files go here.\n    },\n    bar: {\n      // concat task \"bar\" target options and files go here.\n    },\n  },\n  uglify: {\n    bar: {\n      // uglify task \"bar\" target options and files go here.\n    },\n  },\n});</pre> <p>Specifying both a task and target like <code>grunt concat:foo</code> or <code>grunt concat:bar</code> will process just the specified target's configuration, while running <code>grunt concat</code> will iterate over <em>all</em> targets, processing each in turn. Note that if a task has been renamed with <a href=\"http://gruntjs.com/grunt.task#grunt.task.renametask\">grunt.task.renameTask</a>, Grunt will look for a property with the <em>new</em> task name in the config object.</p> <h2 id=\"options\">Options</h2> <p>Inside a task configuration, an <code>options</code> property may be specified to override built-in defaults. In addition, each target may have an <code>options</code> property which is specific to that target. Target-level options will override task-level options.</p> <p>The <code>options</code> object is optional and may be omitted if not needed.</p> <pre>grunt.initConfig({\n  concat: {\n    options: {\n      // Task-level options may go here, overriding task defaults.\n    },\n    foo: {\n      options: {\n        // \"foo\" target options may go here, overriding task-level options.\n      },\n    },\n    bar: {\n      // No options specified; this target will use task-level options.\n    },\n  },\n});</pre> <h2 id=\"files\">Files</h2> <p>Because most tasks perform file operations, Grunt has powerful abstractions for declaring on which files the task should operate. There are several ways to define <strong>src-dest</strong> (source-destination) file mappings, offering varying degrees of verbosity and control. Any multi task will understand all the following formats, so choose whichever format best meets your needs.</p> <p>All files formats support <code>src</code> and <code>dest</code> but the <a href=\"configuring-tasks#compact-format\">Compact</a> and <a href=\"configuring-tasks#files-array-format\">Files Array</a> formats support a few additional properties:</p> <ul> <li>\n<code>filter</code> Either a valid <a href=\"https://nodejs.org/docs/latest/api/fs.html#fs_class_fs_stats\">fs.Stats method name</a> or a function that is passed the matched <code>src</code> filepath and returns <code>true</code> or <code>false</code>. <a href=\"configuring-tasks#custom-filter-function\">See examples</a>\n</li> <li>\n<code>nonull</code> If set to <code>true</code> then the operation will include non-matching patterns. Combined with grunt's <code>--verbose</code> flag, this option can help debug file path issues.</li> <li>\n<code>dot</code> Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot.</li> <li>\n<code>matchBase</code> If set, patterns without slashes will be matched against the basename of the path if it contains slashes. For example, <code>a?b</code> would match the path <code>/xyz/123/acb</code>, but not <code>/xyz/acb/123</code>.</li> <li>\n<code>expand</code> Process a dynamic src-dest file mapping, see <a href=\"configuring-tasks#building-the-files-object-dynamically\">\"Building the files object dynamically\"</a> for more information.</li> <li>Other properties will be passed into the underlying libs as matching options. See the <a href=\"https://github.com/isaacs/node-glob\">node-glob</a> and <a href=\"https://github.com/isaacs/minimatch\">minimatch</a> documentation for more options.</li> </ul> <h3 id=\"difference-between-grunt-and-task-options\">Difference Between Grunt and Task Options</h3> <p>Most tasks perform file operations, so Grunt provides a built-in infrastructure to retrieve the files a task should process. The advantage is that this logic doesn't have to be implemented again by tasks authors. To allow a user to specify these files, Grunt provides options such as <code>nonull</code> and <code>filter</code>.</p> <p>In addition to the files to work on, each task has its own specific needs. A task author may want to allow its user to configure some options to override the default behavior. These task-specific options shall not be confused with the Grunt options described before.</p> <p>To further clarify this difference, let's see an example that uses <a href=\"https://github.com/gruntjs/grunt-contrib-jshint\">grunt-contrib-jshint</a>:</p> <pre>grunt.initConfig({\n  jshint: {\n    ignore_warning: {\n      options: {\n        '-W015': true,\n      },\n      src: 'js/**',\n      filter: 'isFile'\n    }\n  }\n});</pre> <p>This configuration employs the Grunt options <code>src</code> and <code>filter</code> to specify the files to process. It also uses the grunt-contrib-jshint task-specific option <code>-W015</code> to ignore a specific warning (the one having code <code>W015</code>).</p> <h3 id=\"compact-format\">Compact Format</h3> <p>This form allows a single <strong>src-dest</strong> (source-destination) file mapping per-target. It is most commonly used for read-only tasks, like <a href=\"https://github.com/gruntjs/grunt-contrib-jshint\">grunt-contrib-jshint</a>, where a single <code>src</code> property is needed, and no <code>dest</code> key is relevant. This format also supports additional properties per src-dest file mapping.</p> <pre>grunt.initConfig({\n  jshint: {\n    foo: {\n      src: ['src/aa.js', 'src/aaa.js']\n    },\n  },\n  concat: {\n    bar: {\n      src: ['src/bb.js', 'src/bbb.js'],\n      dest: 'dest/b.js',\n    },\n  },\n});</pre> <h3 id=\"files-object-format\">Files Object Format</h3> <p>This form supports multiple src-dest mappings per-target, where the property name is the destination file, and its value is the source file(s). Any number of src-dest file mappings may be specified in this way, but additional properties may not be specified per mapping.</p> <pre>grunt.initConfig({\n  concat: {\n    foo: {\n      files: {\n        'dest/a.js': ['src/aa.js', 'src/aaa.js'],\n        'dest/a1.js': ['src/aa1.js', 'src/aaa1.js'],\n      },\n    },\n    bar: {\n      files: {\n        'dest/b.js': ['src/bb.js', 'src/bbb.js'],\n        'dest/b1.js': ['src/bb1.js', 'src/bbb1.js'],\n      },\n    },\n  },\n});</pre> <h3 id=\"files-array-format\">Files Array Format</h3> <p>This form supports multiple src-dest file mappings per-target, while also allowing additional properties per mapping.</p> <pre>grunt.initConfig({\n  concat: {\n    foo: {\n      files: [\n        {src: ['src/aa.js', 'src/aaa.js'], dest: 'dest/a.js'},\n        {src: ['src/aa1.js', 'src/aaa1.js'], dest: 'dest/a1.js'},\n      ],\n    },\n    bar: {\n      files: [\n        {src: ['src/bb.js', 'src/bbb.js'], dest: 'dest/b/', nonull: true},\n        {src: ['src/bb1.js', 'src/bbb1.js'], dest: 'dest/b1/', filter: 'isFile'},\n      ],\n    },\n  },\n});</pre> <h3 id=\"older-formats\">Older Formats</h3> <p>The <strong>dest-as-target</strong> file format is a holdover from before multi tasks and targets existed, where the destination filepath is actually the target name. Unfortunately, because target names are filepaths, running <code>grunt task:target</code> can be awkward. Also, you can't specify target-level options or additional properties per src-dest file mapping.</p> <p>Consider this format deprecated, and avoid it where possible.</p> <pre>grunt.initConfig({\n  concat: {\n    'dest/a.js': ['src/aa.js', 'src/aaa.js'],\n    'dest/b.js': ['src/bb.js', 'src/bbb.js'],\n  },\n});</pre> <h3 id=\"custom-filter-function\">Custom Filter Function</h3> <p>The <code>filter</code> property can help you target files with a greater level of detail. Simply use a valid <a href=\"https://nodejs.org/docs/latest/api/fs.html#fs_class_fs_stats\">fs.Stats method name</a>. The following will clean only if the pattern matches an actual file:</p> <pre>grunt.initConfig({\n  clean: {\n    foo: {\n      src: ['tmp/**/*'],\n      filter: 'isFile',\n    },\n  },\n});</pre> <p>Or create your own <code>filter</code> function and return <code>true</code> or <code>false</code> whether the file should be matched. For example the following will only clean folders that are empty:</p> <pre>grunt.initConfig({\n  clean: {\n    foo: {\n      src: ['tmp/**/*'],\n      filter: function(filepath) {\n        return (grunt.file.isDir(filepath) &amp;&amp; require('fs').readdirSync(filepath).length === 0);\n      },\n    },\n  },\n});</pre> <p>Another example—which utilizes the <a href=\"configuring-tasks#globbing-patterns\">globbing</a> and <a href=\"configuring-tasks#building-the-files-object-dynamically\">expand: true</a> features—allows you to avoid overwriting files which already exist in the destination:</p> <pre>grunt.initConfig({\n  copy: {\n    templates: {\n      files: [{\n        expand: true,\n        cwd: ['templates/css/'],     // Parent folder of original CSS templates\n        src: '**/*.css',             // Collects all `*.css` files within the parent folder (and its subfolders)\n        dest: 'src/css/',            // Stores the collected `*.css` files in your `src/css/` folder\n        filter: function (dest) {    // `dest`, in this instance, is the filepath of each matched `src`\n          var cwd = this.cwd,        // Configures variables (these are documented for your convenience only)\n              src = dest.replace(new RegExp('^' + cwd), '');\n              dest = grunt.task.current.data.files[0].dest;\n          return (!grunt.file.exists(dest + src));    // Copies `src` files ONLY if their destinations are unoccupied\n        }\n      }]\n    }\n  }\n});</pre> <p>Keep in mind the above technique does not account for the <a href=\"configuring-tasks#building-the-files-object-dynamically\">rename property</a> when checking if the destination exists.</p> <h3 id=\"globbing-patterns\">Globbing patterns</h3> <p>It is often impractical to specify all source filepaths individually, so Grunt supports filename expansion (also known as globbing) via the built-in <a href=\"https://github.com/isaacs/node-glob\">node-glob</a> and <a href=\"https://github.com/isaacs/minimatch\">minimatch</a> libraries.</p> <p>While this isn't a comprehensive tutorial on globbing patterns, know that in a filepath:</p> <ul> <li>\n<code>*</code> matches any number of characters, but not <code>/</code>\n</li> <li>\n<code>?</code> matches a single character, but not <code>/</code>\n</li> <li>\n<code>**</code> matches any number of characters, including <code>/</code>, as long as it's the only thing in a path part</li> <li>\n<code>{}</code> allows for a comma-separated list of \"or\" expressions</li> <li>\n<code>!</code> at the beginning of a pattern will negate the match</li> </ul> <p>All most people need to know is that <code>foo/*.js</code> will match all files ending with <code>.js</code> in the <code>foo/</code> subdirectory, but <code>foo/**/*.js</code> will match all files ending with <code>.js</code> in the <code>foo/</code> subdirectory <em>and all of its subdirectories</em>.</p> <p>Also, in order to simplify otherwise complicated globbing patterns, Grunt allows arrays of file paths or globbing patterns to be specified. Patterns are processed in-order, with <code>!</code>-prefixed matches excluding matched files from the result set. The result set is uniqued.</p> <p>For example:</p> <pre>// You can specify single files:\n{src: 'foo/this.js', dest: ...}\n// Or arrays of files:\n{src: ['foo/this.js', 'foo/that.js', 'foo/the-other.js'], dest: ...}\n// Or you can generalize with a glob pattern:\n{src: 'foo/th*.js', dest: ...}\n\n// This single node-glob pattern:\n{src: 'foo/{a,b}*.js', dest: ...}\n// Could also be written like this:\n{src: ['foo/a*.js', 'foo/b*.js'], dest: ...}\n\n// All .js files, in foo/, in alpha order:\n{src: ['foo/*.js'], dest: ...}\n// Here, bar.js is first, followed by the remaining files, in alpha order:\n{src: ['foo/bar.js', 'foo/*.js'], dest: ...}\n\n// All files except for bar.js, in alpha order:\n{src: ['foo/*.js', '!foo/bar.js'], dest: ...}\n// All files in alpha order, but with bar.js at the end.\n{src: ['foo/*.js', '!foo/bar.js', 'foo/bar.js'], dest: ...}\n\n// Templates may be used in filepaths or glob patterns:\n{src: ['src/&lt;%= basename %&gt;.js'], dest: 'build/&lt;%= basename %&gt;.min.js'}\n// But they may also reference file lists defined elsewhere in the config:\n{src: ['foo/*.js', '&lt;%= jshint.all.src %&gt;'], dest: ...}</pre> <p>For more on glob pattern syntax, see the <a href=\"https://github.com/isaacs/node-glob\">node-glob</a> and <a href=\"https://github.com/isaacs/minimatch\">minimatch</a> documentation.</p> <h3 id=\"building-the-files-object-dynamically\">Building the files object dynamically</h3> <p>When you want to process many individual files, a few additional properties may be used to build a files list dynamically. These properties may be specified in both <a href=\"configuring-tasks#compact-format\">Compact</a> and <a href=\"configuring-tasks#files-array-format\">Files Array</a> mapping formats.</p> <p><code>expand</code> Set to <code>true</code> will enable the following properties:</p> <ul> <li>\n<code>cwd</code> All <code>src</code> matches are relative to (but don't include) this path.</li> <li>\n<code>src</code> Pattern(s) to match, relative to the <code>cwd</code>.</li> <li>\n<code>dest</code> Destination path prefix.</li> <li>\n<code>ext</code> Replace any existing extension with this value in generated <code>dest</code> paths.</li> <li>\n<code>extDot</code> Used to indicate where the period indicating the extension is located. Can take either <code>'first'</code> (extension begins after the first period in the file name) or <code>'last'</code> (extension begins after the last period), and is set by default to <code>'first'</code> <em>[Added in 0.4.3]</em>\n</li> <li>\n<code>flatten</code> Remove all path parts from generated <code>dest</code> paths.</li> <li>\n<code>rename</code> Embeds a customized function, which returns a string containing the new destination and filename. This function is called for each matched <code>src</code> file (after extension renaming and flattening). <a href=\"configuring-tasks#the-rename-property\">More information</a>\n</li> </ul> <p>In the following example, the <code>uglify</code> task will see the same list of src-dest file mappings for both the <code>static_mappings</code> and <code>dynamic_mappings</code> targets, because Grunt will automatically expand the <code>dynamic_mappings</code> files object into 4 individual static src-dest file mappings—assuming 4 files are found—when the task runs.</p> <p>Any combination of static src-dest and dynamic src-dest file mappings may be specified.</p> <pre>grunt.initConfig({\n  uglify: {\n    static_mappings: {\n      // Because these src-dest file mappings are manually specified, every\n      // time a new file is added or removed, the Gruntfile has to be updated.\n      files: [\n        {src: 'lib/a.js', dest: 'build/a.min.js'},\n        {src: 'lib/b.js', dest: 'build/b.min.js'},\n        {src: 'lib/subdir/c.js', dest: 'build/subdir/c.min.js'},\n        {src: 'lib/subdir/d.js', dest: 'build/subdir/d.min.js'},\n      ],\n    },\n    dynamic_mappings: {\n      // Grunt will search for \"**/*.js\" under \"lib/\" when the \"uglify\" task\n      // runs and build the appropriate src-dest file mappings then, so you\n      // don't need to update the Gruntfile when files are added or removed.\n      files: [\n        {\n          expand: true,     // Enable dynamic expansion.\n          cwd: 'lib/',      // Src matches are relative to this path.\n          src: ['**/*.js'], // Actual pattern(s) to match.\n          dest: 'build/',   // Destination path prefix.\n          ext: '.min.js',   // Dest filepaths will have this extension.\n          extDot: 'first'   // Extensions in filenames begin after the first dot\n        },\n      ],\n    },\n  },\n});</pre> <h4 id=\"the-rename-property\">The rename Property</h4> <p>The <code>rename</code> property is unique, as the only valid value for it is a JavaScript function. Although the function returns a string, you cannot simply use a string as a value for <code>rename</code> (doing so results in an error: <code>Property 'rename' of object # is not a function</code>). In the following example, the <code>copy</code> task will create a backup of README.md.</p> <pre>grunt.initConfig({\n  copy: {\n    backup: {\n      files: [{\n        expand: true,\n        src: ['docs/README.md'],    // The README.md file has been specified for backup\n        rename: function () {       // The value for rename must be a function\n          return 'docs/BACKUP.txt'; // The function must return a string with the complete destination\n        }\n      }]\n    }\n  }\n});</pre> <p>When the function is called, the <code>dest</code> and matched <code>src</code> path are passed in and can be used for returning the output string. In the following example, files are copied from the <code>dev</code> folder to the <code>dist</code> folder, and renamed to have the word \"beta\" removed .</p> <pre>grunt.initConfig({\n  copy: {\n    production: {\n      files: [{\n        expand: true,\n        cwd: 'dev/',\n        src: ['*'],\n        dest: 'dist/',\n        rename: function (dest, src) {          // The `dest` and `src` values can be passed into the function\n          return dest + src.replace('beta',''); // The `src` is being renamed; the `dest` remains the same\n        }\n      }]\n    }\n  }\n});</pre> <p>If multiple matched <code>src</code> paths are renamed to an identical destination (i.e. if two different files get renamed to the same file), each output will be added to an array of sources for it.</p> <h2 id=\"templates\">Templates</h2> <p>Templates specified using <code>&lt;% %&gt;</code> delimiters will be automatically expanded when tasks read them from the config. Templates are expanded recursively until no more remain.</p> <p>The entire config object is the context in which properties are resolved. Additionally, <code>grunt</code> and its methods are available inside templates, eg. <code>&lt;%= grunt.template.today('yyyy-mm-dd') %&gt;</code>.</p> <ul> <li>\n<code>&lt;%= prop.subprop %&gt;</code> Expand to the value of <code>prop.subprop</code> in the config, regardless of type. Templates like this can be used to reference not only string values, but also arrays or other objects.</li> <li>\n<code>&lt;% %&gt;</code> Execute arbitrary inline JavaScript code. This is useful with control flow or looping.</li> </ul> <p>Given the sample <code>concat</code> task configuration below, running <code>grunt concat:sample</code> will generate a file named <code>build/abcde.js</code> by concatenating the banner <code>/* abcde */</code> with all files matching <code>foo/*.js</code> + <code>bar/*.js</code> + <code>baz/*.js</code>.</p> <pre>grunt.initConfig({\n  concat: {\n    sample: {\n      options: {\n        banner: '/* &lt;%= baz %&gt; */\\n',   // '/* abcde */\\n'\n      },\n      src: ['&lt;%= qux %&gt;', 'baz/*.js'],  // [['foo/*.js', 'bar/*.js'], 'baz/*.js']\n      dest: 'build/&lt;%= baz %&gt;.js',      // 'build/abcde.js'\n    },\n  },\n  // Arbitrary properties used in task configuration templates.\n  foo: 'c',\n  bar: 'b&lt;%= foo %&gt;d', // 'bcd'\n  baz: 'a&lt;%= bar %&gt;e', // 'abcde'\n  qux: ['foo/*.js', 'bar/*.js'],\n});</pre> <h2 id=\"importing-external-data\">Importing External Data</h2> <p>In the following Gruntfile, project metadata is imported into the Grunt config from a <code>package.json</code> file, and the <a href=\"https://github.com/gruntjs/grunt-contrib-uglify\">grunt-contrib-uglify plugin</a> <code>uglify</code> task is configured to minify a source file and generate a banner comment dynamically using that metadata.</p> <p>Grunt has <code>grunt.file.readJSON</code> and <code>grunt.file.readYAML</code> methods for importing JSON and YAML data.</p> <pre>grunt.initConfig({\n  pkg: grunt.file.readJSON('package.json'),\n  uglify: {\n    options: {\n      banner: '/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(\"yyyy-mm-dd\") %&gt; */\\n'\n    },\n    dist: {\n      src: 'src/&lt;%= pkg.name %&gt;.js',\n      dest: 'dist/&lt;%= pkg.name %&gt;.min.js'\n    }\n  }\n});</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/configuring-tasks\" class=\"_attribution-link\">http://gruntjs.com/configuring-tasks</a>\n  </p>\n</div>\n","upgrading-from-0.3-to-0.4":"<h1>Upgrading from 0.3 to 0.4</h1>\n<p><em>Note that even if you are familiar with grunt, it would be worthwhile to read the new <a href=\"http://gruntjs.com/getting-started/\">Getting started</a> guide.</em></p> <p>Grunt is now split into three parts: <code>grunt</code>, <code>grunt-cli</code> and <code>grunt-init</code>.</p> <ol> <li>The npm module <code>grunt</code> should be installed locally to your project. It contains the code and logic for running tasks, loading plugins, etc.</li> <li>The npm module <code>grunt-cli</code> should be installed globally. It puts the <code>grunt</code> command in your PATH so you can execute it anywhere. By itself, it doesn't do anything; its job is to load and run the Grunt that has been installed locally to your project, regardless of the version. For more information about why this has changed, please read <a href=\"http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation\">npm 1.0: Global vs Local installation</a>.</li> <li>The <code>init</code> task has been broken into its own npm module, <code>grunt-init</code>. It should be installed globally with <code>npm install -g grunt-init</code> and run with the <code>grunt-init</code> command. In the coming months, <a href=\"http://yeoman.io/\">Yeoman</a> will completely replace grunt-init. See the <a href=\"https://github.com/gruntjs/grunt-init\">grunt-init project page</a> for more information.</li> </ol> <h2 id=\"grunt-0.3-notes\">Grunt 0.3 Notes</h2> <p>If you are upgrading from Grunt 0.3, make sure to uninstall global <code>grunt</code>:</p> <pre>npm uninstall -g grunt</pre> <p><em>Note that for 0.3.x, plugin names and task configuration options may be different than those shown in \"The Gruntfile\" section.</em></p> <p><em>This file was named <code>grunt.js</code> for 0.3.x versions of Grunt.</em></p> <h2 id=\"pre-existing-tasks-and-plugins\">Pre-existing tasks and plugins</h2> <p>All <code>grunt-contrib-*</code> series plugins are Grunt 0.4 ready. However, it is highly unlikely that third party plugins written for Grunt 0.3 will continue to work with 0.4 until they have been updated. We are actively working with plugin authors to ensure this happens as swiftly as possible.</p> <p><em>A forthcoming Grunt release will be focused on decoupling grunt's architecture so that plugins are not affected by future updates.</em></p> <h2 id=\"requirements\">Requirements</h2> <ul> <li>Grunt now requires Node.js version <code>&gt;= 0.8.0</code>\n</li> </ul> <h2 id=\"the-gruntfile\">The Gruntfile</h2> <ul> <li>The \"Gruntfile\" has changed from <code>grunt.js</code> to <code>Gruntfile.js</code>.</li> <li>CoffeeScript is supported in your <code>Gruntfile.coffee</code> project <code>Gruntfile</code> or <code>*.coffee</code> task files (transpiling to JS happens automatically).</li> </ul> <p>See the \"The Gruntfile\" section of the <a href=\"http://gruntjs.com/getting-started/\">Getting started</a> guide for more information.</p> <h2 id=\"core-tasks-are-now-grunt-plugins\">Core Tasks are now Grunt Plugins</h2> <p>The eight core tasks that were included in Grunt 0.3 are now separate Grunt plugins. Each is a discrete npm module that must be installed as a plugin per the \"Loading Grunt plugins and tasks\" section of the <a href=\"http://gruntjs.com/getting-started/\">Getting started</a> guide.</p> <ul> <li>concat → <a href=\"https://github.com/gruntjs/grunt-contrib-concat\">grunt-contrib-concat</a> plugin</li> <li>init → stand-alone <a href=\"https://github.com/gruntjs/grunt-init\">grunt-init</a> utility</li> <li>lint → <a href=\"https://github.com/gruntjs/grunt-contrib-jshint\">grunt-contrib-jshint</a> plugin</li> <li>min → <a href=\"https://github.com/gruntjs/grunt-contrib-uglify\">grunt-contrib-uglify</a> plugin</li> <li>qunit → <a href=\"https://github.com/gruntjs/grunt-contrib-qunit\">grunt-contrib-qunit</a> plugin</li> <li>server → <a href=\"https://github.com/gruntjs/grunt-contrib-connect\">grunt-contrib-connect</a> plugin</li> <li>test → <a href=\"https://github.com/gruntjs/grunt-contrib-nodeunit\">grunt-contrib-nodeunit</a> plugin</li> <li>watch → <a href=\"https://github.com/gruntjs/grunt-contrib-watch\">grunt-contrib-watch</a> plugin</li> </ul> <p>Some task names and options have changed. Be sure to see each plugin's documentation as linked above for the latest configuration details.</p> <h2 id=\"configuration\">Configuration</h2> <p>The configuration format for Grunt 0.4 tasks has been standardized and greatly enhanced. See the <a href=\"http://gruntjs.com/configuring-tasks/\">Configuring tasks</a> guide, as well as individual plugin documentation for more information.</p> <ul> <li>File globbing (wildcard) patterns may now be negated to exclude matched files.</li> <li>Tasks now support a standard <code>options</code> object.</li> <li>Tasks now support a standard <code>files</code> object.</li> </ul> <p><code>&lt;% %&gt;</code> style template strings specified as config data inside the <code>Gruntfile</code> are automatically expanded, see the <a href=\"http://gruntjs.com/grunt.template/\">grunt.template</a> documentation for more information.</p> <p><strong>Directives have been removed</strong>, but their functionality has been retained. These replacements can be made:</p> <ul> <li>\n<code>'&lt;config:prop.subprop&gt;'</code> → <code>'&lt;%= prop.subprop %&gt;'</code>\n</li> <li>\n<code>'&lt;json:file.json&gt;'</code> → <code>grunt.file.readJSON('file.json')</code>\n</li> <li>\n<code>'&lt;file_template:file.js&gt;'</code> → <code>grunt.template.process(grunt.file.read('file.js'))</code>\n</li> </ul> <p>Instead of specifying a banner in a file list with <code>'&lt;banner&gt;'</code> or <code>'&lt;banner:prop.subprop&gt;'</code>, the <a href=\"https://github.com/gruntjs/grunt-contrib-concat\">grunt-contrib-concat</a> and <a href=\"https://github.com/gruntjs/grunt-contrib-uglify\">grunt-contrib-uglify</a> plugins each have a <code>banner</code> option.</p> <p>Instead of stripping banners from files individually with <code>'&lt;file_strip_banner:file.js&gt;'</code>, the <a href=\"https://github.com/gruntjs/grunt-contrib-concat\">grunt-contrib-concat</a> and <a href=\"https://github.com/gruntjs/grunt-contrib-uglify\">grunt-contrib-uglify</a> plugins each have an option to strip/preserve banners.</p> <h2 id=\"alias-task-changes\">Alias task changes</h2> <p>When specifying an alias task, the list of tasks to run must now be specified as an array.</p> <pre>// v0.3.x (old format)\ngrunt.registerTask('default', 'jshint nodeunit concat');\n// v0.4.x (new format)\ngrunt.registerTask('default', ['jshint', 'nodeunit', 'concat']);</pre> <h2 id=\"task-arguments-may-now-contain-spaces\">Task arguments may now contain spaces</h2> <p>The aforementioned alias task change (task lists must be specified as an array) makes this possible. Just be sure to surround task arguments containing spaces with quotes when specifying them on the command line, so they can be properly parsed.</p> <pre>grunt my-task:argument-without-spaces \"other-task:argument with spaces\"</pre> <h2 id=\"character-encodings\">Character encodings</h2> <p>The <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-defaultencoding\">file.defaultEncoding</a> method was added to normalize character encodings, and all <code>grunt.file</code> methods have been updated to support the specified encoding.</p> <h2 id=\"helpers\">Helpers</h2> <p>Grunt's helper system has been removed in favor of node <code>require</code>. For a concise example on how to share functionality between Grunt plugins, please see <a href=\"https://github.com/gruntjs/grunt-lib-legacyhelpers\">grunt-lib-legacyhelpers</a>. Plugin authors are encouraged to upgrade their plugins.</p> <h2 id=\"api\">API</h2> <p>The Grunt API saw substantial changes from 0.3 to 0.4.</p> <ul> <li>\n<a href=\"http://gruntjs.com/grunt\">grunt</a><ul> <li>Removed <code>grunt.registerHelper</code> and <code>grunt.renameHelper</code> methods.</li> </ul> </li> <li>\n<a href=\"http://gruntjs.com/grunt.config\">grunt.config</a><ul> <li>Changed <a href=\"http://gruntjs.com/grunt.config#wiki-grunt-config-get\">config.get</a> method to automatically recursively expand <code>&lt;% %&gt;</code> templates.</li> <li>Added <a href=\"http://gruntjs.com/grunt.config#wiki-grunt-config-getraw\">config.getRaw</a> method that will retrieve raw (unexpanded) config data.</li> <li>Changed <a href=\"http://gruntjs.com/grunt.config#wiki-grunt-config-process\">config.process</a> method to now process a value as if it had been retrieved from the config, expanding templates recursively. This method is called internally inside of <code>config.get</code>, but <em>not</em> inside of <code>config.getRaw</code>.</li> </ul> </li> <li>\n<a href=\"http://gruntjs.com/grunt.event\">grunt.event</a> added so that tasks may emit events.</li> <li>\n<a href=\"http://gruntjs.com/grunt.fail\">grunt.fail</a><ul> <li>Won't emit a beep if <code>--no-color</code> option specified.</li> <li>Added <code>fail.code</code> exit code map.</li> <li>Removed <code>fail.warnAlternate</code> method.</li> </ul> </li> <li>\n<a href=\"http://gruntjs.com/grunt.file\">grunt.file</a><ul> <li>Tasks are no longer automatically loaded from <code>~/.grunt/tasks/</code> directory (install them locally to your project!).</li> <li>Added <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-defaultencoding\">file.defaultEncoding</a> method for normalizing character encoding across all <code>grunt.file</code> methods.</li> <li>Added <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-delete\">file.delete</a> method.</li> <li>Added relatively self-explanatory <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-exists\">file.exists</a>, <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-isdir\">file.isDir</a>, <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-isfile\">file.isFile</a>, <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-islink\">file.isLink</a>, <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-ispathcwd\">file.isPathCwd</a>, <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-ispathincwd\">file.isPathInCwd</a>, <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-doespathcontain\">file.doesPathContain</a>, <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-arepathsequivalent\">file.arePathsEquivalent</a> testing methods.</li> <li>Added <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-match\">file.match</a> and <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-ismatch\">file.isMatch</a> methods to facilitate matching wildcard patterns against file paths.</li> <li>Added <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-expandmapping\">file.expandMapping</a> method for use in generating 1-to-1 src-dest file mappings.</li> <li>Added <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-readyaml\">file.readYAML</a> method.</li> <li>Changed <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-findup\">file.findup</a> to use the <a href=\"https://github.com/cowboy/node-findup-sync\">findup-sync</a> module.</li> <li>Changed <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-glob\">file.glob</a> to use the <a href=\"https://github.com/isaacs/node-glob\">glob</a> module.</li> <li>Added <a href=\"http://gruntjs.com/grunt.file#wiki-grunt-file-minimatch\">file.minimatch</a> which exposes the <a href=\"https://github.com/isaacs/minimatch\">minimatch</a> module.</li> <li>Removed <code>file.userDir</code> method (moved into <a href=\"https://github.com/gruntjs/grunt-init\">grunt-init</a>).</li> <li>Removed <code>file.clearRequireCache</code> method.</li> <li>Removed <code>file.expandFiles</code> and <code>file.expandDirs</code> methods, use the <code>filter</code> option of <code>file.expand</code> instead.</li> <li>Removed <code>file.expandFileURLs</code> method. Don't specify URLs where files should be specified (eg. the qunit task now allows for a <code>urls</code> option).</li> </ul> </li> <li>\n<a href=\"http://gruntjs.com/grunt#wiki-grunt-task\">grunt.task</a><ul> <li>Tasks registered with both <a href=\"http://gruntjs.com/grunt.task#wiki-grunt-task-registertask\">task.registerTask</a> and <a href=\"http://gruntjs.com/grunt.task#wiki-grunt-task-registermultitask\">task.registerMultiTask</a> get a <code>this.options</code> method.</li> <li>Added <a href=\"http://gruntjs.com/grunt.task#wiki-grunt-task-normalizemultitaskfiles\">task.normalizeMultiTaskFiles</a> method to facilitate the normalization of multi task <code>files</code> objects into the <code>this.file</code> property.</li> <li>Removed <code>task.registerHelper</code> and <code>task.renameHelper</code> methods.</li> <li>Removed <code>task.searchDirs</code> property.</li> <li>Removed <code>task.expand</code> <code>task.expandDirs</code> <code>task.expandFiles</code> <code>task.getFile</code> <code>task.readDefaults</code> methods (moved into <a href=\"https://github.com/gruntjs/grunt-init\">grunt-init</a>).</li> </ul> </li> <li>\n<a href=\"http://gruntjs.com/grunt#wiki-grunt-package\">grunt.package</a> reflects the metadata stored in grunt's <code>package.json</code>.</li> <li>\n<a href=\"http://gruntjs.com/grunt#wiki-grunt-version\">grunt.version</a> is the current version of Grunt as a string.</li> <li>\n<a href=\"http://gruntjs.com/grunt.template\">grunt.template</a><ul> <li>Added <a href=\"http://gruntjs.com/grunt.template#wiki-grunt-template-adddelimiters\">template.addDelimiters</a> method to add new template delimiters.</li> <li>Added <a href=\"http://gruntjs.com/grunt.template#wiki-grunt-template-setdelimiters\">template.setDelimiters</a> method to select template delimiters.</li> <li>The <code>init</code> and <code>user</code> template delimiters have been removed, but you can add them in again if you need to with <code>template.addDelimiters</code> (<a href=\"https://github.com/gruntjs/grunt-init\">grunt-init</a> uses this to enable the <code>{% %}</code> template delimiters).</li> </ul> </li> <li>\n<a href=\"http://gruntjs.com/grunt.util\">grunt.util</a> replaces the now-removed <code>grunt.utils</code>.<ul> <li>Changed <code>util._</code> to use <a href=\"http://lodash.com/\">Lo-Dash</a>\n</li> <li>Added the <a href=\"http://gruntjs.com/grunt.util#wiki-grunt-util-callbackify\">util.callbackify</a> method.</li> <li>Changed the <a href=\"http://gruntjs.com/grunt.util#wiki-grunt-util-spawn\">util.spawn</a> method to be much better behaved and pass more consistent arguments into its callback.</li> </ul> </li> </ul> <h2 id=\"task-plugin-authors\">Task / plugin authors</h2> <p><strong>Plugin authors, please indicate clearly on your repository README which version number of your Grunt plugin breaks compatibility with Grunt 0.3.</strong></p> <h3 id=\"tasks\">Tasks</h3> <ul> <li>Multi tasks<ul> <li>Multiple src-dest file mappings may now be specified per target in a <code>files</code> object (this is optional).</li> </ul> </li> <li>\n<a href=\"http://gruntjs.com/grunt.task#wiki-this-files\">this.files / grunt.task.current.files</a><ul> <li>The <code>this.files</code> property is an array of src-dest file mapping objects to be iterated over in your multi task. It will always be an array, and you should always iterate over it, even if the most common use case is to specify a single file.</li> <li>Each src-dest file mapping object has a <code>src</code> and <code>dest</code> property (and possibly others, depending on what the user specified). The <code>src</code> property is already expanded from whatever glob pattern the user may have specified.</li> </ul> </li> <li>\n<a href=\"http://gruntjs.com/grunt.task#wiki-this-filessrc\">this.filesSrc / grunt.task.current.filesSrc</a><ul> <li>The <code>this.filesSrc</code> property is a reduced, uniqued array of all files matched by all specified <code>src</code> properties. Useful for read-only tasks.</li> </ul> </li> <li>\n<a href=\"http://gruntjs.com/grunt.task#wiki-this-options\">this.options / grunt.task.current.options</a><ul> <li>The <code>this.options</code> method may be used within tasks to normalize options. Inside a task, you may specify options defaults like: <code>var options = this.options({option: 'defaultvalue', ...});</code>\n</li> </ul> </li> </ul> <h3 id=\"plugins\">Plugins</h3> <ul> <li>An updated <code>gruntplugin</code> template has been created for Grunt 0.4-compatible plugins, and is available in the standalone <a href=\"https://github.com/gruntjs/grunt-init\">grunt-init</a>.</li> </ul> <h2 id=\"troubleshooting\">Troubleshooting</h2> <ul> <li>If you had previously installed a development version of Grunt 0.4 or any grunt-contrib plugins, be sure to flush your npm cache with <code>npm cache clean</code> first to ensure that you are pulling the final version of Grunt and grunt-contrib plugins.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; GruntJS Team<br>Licensed under the MIT License.<br>\n    <a href=\"http://gruntjs.com/upgrading-from-0.3-to-0.4\" class=\"_attribution-link\">http://gruntjs.com/upgrading-from-0.3-to-0.4</a>\n  </p>\n</div>\n"}