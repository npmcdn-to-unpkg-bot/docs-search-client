{"index":"<h1 class=\"page-title\">API</h1> <h2 id=\"commands\">Commands</h2> <p>Command line reference</p> <ul> <li><a href=\"#cache\">cache</a></li> <li><a href=\"#help\">help</a></li> <li><a href=\"#home\">home</a></li> <li><a href=\"#info\">info</a></li> <li><a href=\"#init\">init</a></li> <li><a href=\"#install\">install</a></li> <li><a href=\"#link\">link</a></li> <li><a href=\"#list\">list</a></li> <li><a href=\"#login\">login</a></li> <li><a href=\"#lookup\">lookup</a></li> <li><a href=\"#prune\">prune</a></li> <li><a href=\"#register\">register</a></li> <li><a href=\"#search\">search</a></li> <li><a href=\"#update\">update</a></li> <li><a href=\"#uninstall\">uninstall</a></li> <li><a href=\"#version\">version</a></li> </ul> <h3 id=\"cache\">cache</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower cache &lt;command&gt; [&lt;args&gt;]</pre> <p>Manage bower cache</p> <h4 id=\"cache-clean\">cache clean</h4> <pre class=\"highlight\" data-lang=\"sh\">$ bower cache clean\n$ bower cache clean &lt;name&gt; [&lt;name&gt; ...]\n$ bower cache clean &lt;name&gt;#&lt;version&gt; [&lt;name&gt;#&lt;version&gt; ..]</pre> <p>Cleans cached packages</p> <h4 id=\"cache-list\">cache list</h4> <pre class=\"highlight\" data-lang=\"sh\">$ bower cache list\n$ bower cache list &lt;name&gt; [&lt;name&gt; ...]</pre> <p>Lists cached packages</p> <h3 id=\"help\">help</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower help &lt;command&gt;</pre> <p>Display help information about Bower</p> <h3 id=\"home\">home</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower home\n$ bower home &lt;package&gt;\n$ bower home &lt;package&gt;#&lt;version&gt;</pre> <p>Opens a package homepage into your favorite browser.</p> <p>If no <code class=\"highlighter-rouge\">&lt;package&gt;</code> is passed, opens the homepage of the local package.</p> <h3 id=\"info\">info</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower info &lt;package&gt;\n$ bower info &lt;package&gt; [&lt;property&gt;]\n$ bower info &lt;package&gt;#&lt;version&gt; [&lt;property&gt;]</pre> <p>Displays overall information of a package or of a particular version.</p> <h3 id=\"init\">init</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower init</pre> <p>Interactively create a bower.json file</p> <h3 id=\"install\">install</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower install [&lt;options&gt;]\n$ bower install &lt;endpoint&gt; [&lt;endpoint&gt; ..] [&lt;options&gt;]</pre> <p>Installs project dependencies recursively.</p> <p>Project dependencies consist of:</p> <ol> <li>\n<code class=\"highlighter-rouge\">dependencies</code> specified in <code class=\"highlighter-rouge\">bower.json</code> of project</li> <li>All “external” dependencies not specified in <code class=\"highlighter-rouge\">bower.json</code>, but present in <code class=\"highlighter-rouge\">bower_components</code>\n</li> <li>Any additional <code class=\"highlighter-rouge\">&lt;endpoint&gt;</code> passed as an argument to this command</li> </ol> <p>When <code class=\"highlighter-rouge\">--save</code> flag is used, all additional endpoint are saved to <code class=\"highlighter-rouge\">dependencies</code> in <code class=\"highlighter-rouge\">bower.json</code>.</p> <p>Bower recommends to always use <code class=\"highlighter-rouge\">--save</code> flag to achieve reproducible installs between machines.</p> <p>Endpoints can have multiple forms:</p> <ul> <li><code class=\"highlighter-rouge\">&lt;package&gt;</code></li> <li><code class=\"highlighter-rouge\">&lt;package&gt;#&lt;version&gt;</code></li> <li><code class=\"highlighter-rouge\">&lt;name&gt;=&lt;package&gt;#&lt;version&gt;</code></li> </ul> <p>Where:</p> <ul> <li>\n<code class=\"highlighter-rouge\">&lt;package&gt;</code> is a package URL, physical location or registry name</li> <li>\n<code class=\"highlighter-rouge\">&lt;version&gt;</code> is a valid range, commit, branch, etc.</li> <li>\n<code class=\"highlighter-rouge\">&lt;name&gt;</code> is the name it should have locally.</li> </ul> <p><code class=\"highlighter-rouge\">&lt;package&gt;</code> can be any one of the following:</p> <table> <tr> <td>Registered package name</td> <td> <code>jquery</code><br> <code>normalize.css</code> </td> </tr> <tr> <td>Git endpoint</td> <td> <code>https://github.com/user/package.git</code><br> <code>git@github.com:user/package.git</code> </td> </tr> <tr> <td>Git endpoint without .git</td> <td> <code>git+https://github.com/user/package</code><br> <code>git+ssh://git@github.com/user/package</code> </td> </tr> <tr> <td>Local folder</td> <td><code>my/local/folder/</code></td> </tr> <tr> <td>Public Subversion endpoint</td> <td><code>svn+http://package.googlecode.com/svn/</code></td> </tr> <tr> <td>Private Subversion endpoint</td> <td> <code>svn+ssh://package.googlecode.com/svn/</code><br> <code>svn+https://package.googlecode.com/svn/</code> </td> </tr> <tr> <td>Shorthand (defaults to GitHub)</td> <td><code>user/package</code></td> </tr> <tr> <td>URL</td> <td> <code>http://example.com/script.js</code><br> <code>http://example.com/style.css</code><br> <code>http://example.com/package.zip</code> (contents will be extracted)<br> <code>http://example.com/package.tar</code> (contents will be extracted) </td> </tr> </table> <p>A version can be:</p> <table> <tr> <td>semver version</td> <td> <code>#1.2.3</code> </td> </tr> <tr> <td>version range</td> <td> <code>#1.2</code><br> <code>#~1.2.3</code><br> <code>#^1.2.3</code><br> <code>#&gt;=1.2.3 &lt;2.0</code><br> </td> </tr> <tr> <td>Git tag</td> <td><code>#&lt;tag&gt;</code></td> </tr> <tr> <td>Git commit SHA</td> <td><code>#&lt;sha&gt;</code></td> </tr> <tr> <td>Git branch</td> <td><code>#&lt;branch&gt;</code></td> </tr> <tr> <td>Subversion revision</td> <td><code>#&lt;revision&gt;</code></td> </tr> </table> <h4 id=\"install-options\">install options</h4> <ul> <li>\n<code class=\"highlighter-rouge\">-F</code>, <code class=\"highlighter-rouge\">--force-latest</code>: Force latest version on conflict</li> <li>\n<code class=\"highlighter-rouge\">-p</code>, <code class=\"highlighter-rouge\">--production</code>: Do not install project devDependencies</li> <li>\n<code class=\"highlighter-rouge\">-S</code>, <code class=\"highlighter-rouge\">--save</code>: Save installed packages into the project’s bower.json dependencies</li> <li>\n<code class=\"highlighter-rouge\">-D</code>, <code class=\"highlighter-rouge\">--save-dev</code>: Save installed packages into the project’s bower.json devDependencies</li> <li>\n<code class=\"highlighter-rouge\">-E</code>,<code class=\"highlighter-rouge\"> --save-exact</code>: Configure installed packages with an exact version rather than semver</li> </ul> <h3 id=\"link\">link</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower link\n$ bower link &lt;name&gt; [&lt;local name&gt;]</pre> <p>The link functionality allows developers to easily test their packages. Linking is a two-step process.</p> <p>Using ‘bower link’ in a project folder will create a global link. Then, in some other package, <code class=\"highlighter-rouge\">bower link &lt;name&gt;</code> will create a link in the components folder pointing to the previously created link.</p> <p>This allows you to easily test a package because changes will be reflected immediately. When the link is no longer necessary, simply remove it with <code class=\"highlighter-rouge\">bower uninstall &lt;name&gt;</code>.</p> <h3 id=\"list\">list</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower list [&lt;options&gt;]</pre> <p>List local packages and possible updates.</p> <h4 id=\"list-options\">list options</h4> <ul> <li>\n<code class=\"highlighter-rouge\">-p</code>, <code class=\"highlighter-rouge\">--paths</code>: Generates a simple JSON source mapping</li> <li>\n<code class=\"highlighter-rouge\">-r</code>, <code class=\"highlighter-rouge\">--relative</code>: Make paths relative to the directory config property, which defaults to bower_components</li> </ul> <h3 id=\"lookup\">lookup</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower lookup &lt;name&gt;</pre> <p>Look up a package URL by name</p> <h3 id=\"login\">login</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower login</pre> <p>Authenticate with GitHub and store credentials.</p> <h4 id=\"login-options\">login options</h4> <ul> <li>\n<code class=\"highlighter-rouge\">-t</code>, <code class=\"highlighter-rouge\">--token</code>: Pass an existing GitHub auth token rather than prompting for username and password</li> </ul> <h3 id=\"prune\">prune</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower prune</pre> <p>Uninstalls local extraneous packages</p> <h3 id=\"register\">register</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower register &lt;name&gt; &lt;url&gt;</pre> <p>Register a package</p> <h3 id=\"search\">search</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower search\n$ bower search &lt;name&gt;</pre> <p>Finds all packages or a specific package.</p> <h3 id=\"update\">update</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower update &lt;name&gt; [&lt;name&gt; ..] [&lt;options&gt;]</pre> <p>Updates installed packages to their newest version according to bower.json.</p> <h4 id=\"update-options\">update options</h4> <ul> <li>\n<code class=\"highlighter-rouge\">-F</code>, <code class=\"highlighter-rouge\">--force-latest</code>: Force latest version on conflict</li> <li>\n<code class=\"highlighter-rouge\">-p</code>, <code class=\"highlighter-rouge\">--production</code>: Do not install project devDependencies</li> <li>\n<code class=\"highlighter-rouge\">-S</code>, <code class=\"highlighter-rouge\">--save</code>: Update <code class=\"highlighter-rouge\">dependencies</code> in bower.json</li> <li>\n<code class=\"highlighter-rouge\">-D</code>, <code class=\"highlighter-rouge\">--save-dev</code>: Update <code class=\"highlighter-rouge\">devDependencies</code> in bower.json</li> </ul> <h3 id=\"uninstall\">uninstall</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower uninstall &lt;name&gt; [&lt;name&gt; ..] [&lt;options&gt;]</pre> <p>Uninstalls a package locally from your bower_components directory</p> <h4 id=\"uninstall-options\">uninstall options</h4> <ul> <li>\n<code class=\"highlighter-rouge\">-S</code>, <code class=\"highlighter-rouge\">--save</code>: Remove uninstalled packages from the project’s bower.json dependencies</li> <li>\n<code class=\"highlighter-rouge\">-D</code>, <code class=\"highlighter-rouge\">--save-dev</code>: Remove uninstalled packages from the project’s bower.json devDependencies</li> </ul> <h3 id=\"version\">version</h3> <pre class=\"highlight\" data-lang=\"sh\">$ bower version [&lt;newversion&gt; | major | minor | patch]</pre> <p>Run this in a package directory to bump the version and write the new data back to the bower.json file.</p> <p>The newversion argument should be a valid semver string, or a valid second argument to semver.inc (one of “build”, “patch”, “minor”, or “major”). In the second case, the existing version will be incremented by 1 in the specified field.</p> <p>If run in a git repo, it will also create a version commit and tag, and fail if the repo is not clean.</p> <h4 id=\"version-options\">version options</h4> <ul> <li>\n<code class=\"highlighter-rouge\">-m</code>, <code class=\"highlighter-rouge\">--message</code>: Custom git commit and tag message</li> </ul> <p>If supplied with <code class=\"highlighter-rouge\">--message</code> (shorthand: <code class=\"highlighter-rouge\">-m</code>) config option, bower will use it as a commit message when creating a version commit. If the message config contains %s then that will be replaced with the resulting version number. For example:</p> <pre class=\"highlight\" data-lang=\"sh\">$ bower version patch -m \"Upgrade to %s for reasons\"</pre> <h2 id=\"options\">Options</h2> <ul> <li><a href=\"#force\">force</a></li> <li><a href=\"#json\">json</a></li> <li><a href=\"#loglevel\">loglevel</a></li> <li><a href=\"#offline\">offline</a></li> <li><a href=\"#quiet\">quiet</a></li> <li><a href=\"#silent\">silent</a></li> <li><a href=\"#verbose\">verbose</a></li> <li><a href=\"#allow-root\">allow-root</a></li> </ul> <h3 id=\"force\">force</h3> <pre class=\"highlight\" data-lang=\"sh\">-f, --force</pre> <p>Makes various commands more forceful</p> <ul> <li>\n<code class=\"highlighter-rouge\">bower install --force</code> re-installs all installed components. It also forces installation even when there are non-bower directories with the same name in the components directory. Adding <code class=\"highlighter-rouge\">--force</code> also bypasses the cache, and writes to the cache anyway.</li> <li>\n<code class=\"highlighter-rouge\">bower uninstall &lt;package&gt; --force</code> continues uninstallation even after a dependency conflict</li> <li>\n<code class=\"highlighter-rouge\">bower register &lt;package&gt; --force</code> bypasses confirmation. Login is still needed.</li> </ul> <h3 id=\"json\">json</h3> <pre class=\"highlight\" data-lang=\"sh\">-j, --json</pre> <p>Output consumable JSON</p> <h3 id=\"loglevel\">loglevel</h3> <pre class=\"highlight\" data-lang=\"sh\">-l, --loglevel</pre> <p>What level of logs to report. Possible values: error, conflict, warn, action, info, debug</p> <h3 id=\"offline\">offline</h3> <pre class=\"highlight\" data-lang=\"sh\">-o, --offline</pre> <p>Do not use network connection</p> <h3 id=\"quiet\">quiet</h3> <pre class=\"highlight\" data-lang=\"sh\">-q, --quiet</pre> <p>Only output important information. It is an alias for <code class=\"highlighter-rouge\">--loglevel=warn</code>.</p> <h3 id=\"silent\">silent</h3> <pre class=\"highlight\" data-lang=\"sh\">-s, --silent</pre> <p>Do not output anything, besides errors. It is an alias for <code class=\"highlighter-rouge\">--loglevel=error</code>. Silent is also useful if you have private components that might leak credentials to your CI environment.</p> <h3 id=\"verbose\">verbose</h3> <pre class=\"highlight\" data-lang=\"sh\">-V, --verbose</pre> <p>Makes output more verbose. It is an alias for <code class=\"highlighter-rouge\">--loglevel=debug</code>.</p> <h3 id=\"allow-root\">allow-root</h3> <pre class=\"highlight\" data-lang=\"sh\">--allow-root</pre> <p>Allows running commands as root. Bower is a user command, there is no need to execute it with superuser permissions. However, if you still want to run commands with sudo, use <code class=\"highlighter-rouge\">--allow-root</code> option.</p> <h2 id=\"consuming-a-package\">Consuming a package</h2> <p>You can use <a href=\"http://bower.io/docs/tools\">build tools</a> to easily consume Bower packages.</p> <p>If you use <a href=\"#list\"><code class=\"highlighter-rouge\">bower list --paths</code></a> or <code class=\"highlighter-rouge\">bower list --paths --json</code>, you will get a simple name-to-path mapping:</p> <pre class=\"highlight\" data-lang=\"sh\">$ bower list --paths\n# or\n$ bower list --paths --json</pre> <pre class=\"highlight\" data-lang=\"json\">{\n  \"backbone\": \"bower_components/backbone/backbone.js\",\n  \"jquery\": \"bower_components/jquery/dist/jquery.js\",\n  \"underscore\": \"bower_components/underscore/underscore.js\"\n}</pre> <p>Every command supports the <a href=\"#json\"><code class=\"highlighter-rouge\">--json</code> option</a> that makes Bower output JSON. Command result is outputted to <code class=\"highlighter-rouge\">stdout</code> and error/logs to <code class=\"highlighter-rouge\">stderr</code>.</p> <h2 id=\"programmatic-api\">Programmatic API</h2> <p>Bower provides a powerful, programmatic API. All commands can be accessed through the <code class=\"highlighter-rouge\">bower.commands</code> object.</p> <pre class=\"highlight\" data-lang=\"js\">var bower = require('bower');\n\nbower.commands\n.install(['jquery'], { save: true }, { /* custom config */ })\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});</pre> <p>Commands emit four types of events: <code class=\"highlighter-rouge\">log</code>, <code class=\"highlighter-rouge\">prompt</code>, <code class=\"highlighter-rouge\">end</code>, <code class=\"highlighter-rouge\">error</code>.</p> <ul> <li>\n<code class=\"highlighter-rouge\">log</code> is emitted to report the state/progress of the command.</li> <li>\n<code class=\"highlighter-rouge\">prompt</code> is emitted whenever the user needs to be prompted.</li> <li>\n<code class=\"highlighter-rouge\">error</code> will only be emitted if something goes wrong.</li> <li>\n<code class=\"highlighter-rouge\">end</code> is emitted when the command successfully ends.</li> </ul> <p>For a better idea of how this works, you may want to check out <a href=\"https://github.com/bower/bower/blob/master/bin/bower\">our bin file</a>.</p> <p>When using Bower programmatically, prompting is disabled by default. You can enable it when calling commands with <code class=\"highlighter-rouge\">interactive: true</code> in the config. This requires you to listen for the <code class=\"highlighter-rouge\">prompt</code> event and handle the prompting yourself. The easiest way is to use the <a href=\"https://npmjs.org/package/inquirer\">inquirer</a> npm module like so:</p> <pre class=\"highlight\" data-lang=\"js\">var inquirer =  require('inquirer');\n\nbower.commands\n.install(['jquery'], { save: true }, { interactive: true })\n// ..\n.on('prompt', function (prompts, callback) {\n    inquirer.prompt(prompts, callback);\n});</pre> <h2 id=\"running-on-a-continuous-integration-server\">Running on a continuous integration server</h2> <p>Bower will skip some interactive and analytics operations if it finds a <code class=\"highlighter-rouge\">CI</code> environmental variable set to <code class=\"highlighter-rouge\">true</code>. You will find that the <code class=\"highlighter-rouge\">CI</code> variable is already set for you on many continuous integration servers, e.g., <a href=\"https://circleci.com/docs/environment-variables#basics\">CircleCI</a> and <a href=\"http://docs.travis-ci.com/user/ci-environment/#Environment-variables\">Travis-CI</a>.</p> <p>You may try to set the <code class=\"highlighter-rouge\">CI</code> variable manually before running your Bower commands. On Mac or Linux, <code class=\"highlighter-rouge\">export CI=true</code> and on Windows <code class=\"highlighter-rouge\">set CI=true</code></p> <p>If for some reason you are unable to set the <code class=\"highlighter-rouge\">CI</code> environment variable, you can alternately use the <code class=\"highlighter-rouge\">--config.interactive=false</code> flag.</p> <pre class=\"highlight\" data-lang=\"sh\">$ bower install --config.interactive=false</pre> <h2 id=\"non-interactive-mode\">Non-interactive mode</h2> <p>Bower works by default in interactive mode. There are few ways of disabling it:</p> <ul> <li>passing <code class=\"highlighter-rouge\">CI=true</code> in environment</li> <li>passing <code class=\"highlighter-rouge\">--config.interactive=false</code> to Bower command</li> <li>attaching a pipe to Bower (e.g. <code class=\"highlighter-rouge\">bower install | cat</code>)</li> <li>redirecting output to file (e.g. <code class=\"highlighter-rouge\">bower install &gt; logs.txt</code>)</li> <li>running Bower through its <a href=\"#programmatic-api\">Programmatic API</a>\n</li> </ul> <p>When interactive mode is disabled:</p> <ul> <li>\n<code class=\"highlighter-rouge\">bower init</code> does not work</li> <li>\n<code class=\"highlighter-rouge\">bower register</code> bypass confirmation</li> <li>\n<code class=\"highlighter-rouge\">bower login</code> fails unless <code class=\"highlighter-rouge\">--token</code> parameter is provided</li> <li>\n<code class=\"highlighter-rouge\">bower install</code> fails on resolution conflicts, instead of asking for choice</li> <li>\n<code class=\"highlighter-rouge\">bower uninstall</code> doesn’t ask for confirmation if dependency is to be removed</li> <li>Analytics is disabled by default (equivalent to passing <code class=\"highlighter-rouge\">--config.analytics=false</code>)</li> </ul> <h2 id=\"using-local-cache\">Using local cache</h2> <p>Bower supports installing packages from its local cache – without an internet connection – if the packages were installed before.</p> <pre class=\"highlight\" data-lang=\"sh\">$ bower install &lt;package&gt; --offline</pre> <p>The content of the cache can be listed with <a href=\"#cache-list\"><code class=\"highlighter-rouge\">bower cache list</code></a>:</p> <pre class=\"highlight\" data-lang=\"sh\">$ bower cache list</pre> <p>The cache can be cleaned with <a href=\"#cache-clean\"><code class=\"highlighter-rouge\">bower cache clean</code></a>:</p> <pre class=\"highlight\" data-lang=\"sh\">$ bower cache clean</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Bower contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://bower.io/docs/api\" class=\"_attribution-link\">http://bower.io/docs/api</a>\n  </p>\n</div>\n","creating-packages":"<h1 class=\"page-title\">Creating Packages</h1> <h2 id=\"bowerjson\">bower.json</h2> <p>Packages are defined by a manifest file <code class=\"highlighter-rouge\">bower.json</code>. This is similar to Node’s <code class=\"highlighter-rouge\">package.json</code> or Ruby’s <code class=\"highlighter-rouge\">Gemfile</code>.</p> <p>Interactively create a <code class=\"highlighter-rouge\">bower.json</code> with <a href=\"api#init\"><code class=\"highlighter-rouge\">bower init</code></a></p> <pre class=\"highlight\" data-lang=\"bash\">$ bower init</pre> <h2 id=\"specification\">Specification</h2> <p>Detailed specification of <code class=\"highlighter-rouge\">bower.json</code> file can be found in <a href=\"https://github.com/bower/spec/blob/master/json.md\">bower/spec</a> repository.</p> <h2 id=\"maintaining-dependencies\">Maintaining dependencies</h2> <p>Using <code class=\"highlighter-rouge\">bower install &lt;package&gt; --save</code> will add <code class=\"highlighter-rouge\">&lt;package&gt;</code> to your project’s bower.json <code class=\"highlighter-rouge\">dependencies</code> array.</p> <pre class=\"highlight\" data-lang=\"bash\"># install package and add it to bower.json dependencies\n$ bower install &lt;package&gt; --save</pre> <p>Similarly, using <code class=\"highlighter-rouge\">bower install &lt;package&gt; --save-dev</code> will add <code class=\"highlighter-rouge\">&lt;package&gt;</code> to your project’s bower.json <code class=\"highlighter-rouge\">devDependencies</code> array.</p> <pre class=\"highlight\" data-lang=\"bash\"># install package and add it to bower.json devDependencies\n$ bower install &lt;package&gt; --save-dev</pre> <h2 id=\"register\">Register</h2> <p>Registering your package allows others to install it with a short name, like <code class=\"highlighter-rouge\">bower install &lt;my-package-name&gt;</code>.</p> <p>To register a new package:</p> <ul> <li>The package name <strong>must</strong> adhere to the <a href=\"https://github.com/bower/spec/blob/master/json.md#name\">bower.json spec</a>.</li> <li>There <strong>must</strong> be a valid <code class=\"highlighter-rouge\">bower.json</code> in the project’s root directory.</li> <li>Your package should use <a href=\"http://semver.org/\">semver</a> Git tags. The <code class=\"highlighter-rouge\">v</code> prefix is allowed.</li> <li>Your package <strong>must</strong> be publically available at a Git endpoint (e.g., GitHub). Remember to push your Git tags!</li> <li>For private packages (e.g. GitHub Enterprise), please consider running a private <a href=\"https://github.com/bower/registry\">Bower registry</a>.</li> </ul> <p>Then use <a href=\"api#register\"><code class=\"highlighter-rouge\">bower register</code></a>:</p> <pre class=\"highlight\" data-lang=\"bash\">$ bower register &lt;my-package-name&gt; &lt;git-endpoint&gt;\n# for example\n$ bower register example git://github.com/user/example.git</pre> <p>Now anyone can run <code class=\"highlighter-rouge\">bower install &lt;my-package-name&gt;</code>, and get your library installed. The Bower registry does not have authentication or user management at this point in time. It’s on a first come, first served basis.</p> <p>Bower doesn’t support GitHub-style namespacing (<code class=\"highlighter-rouge\">org/repo</code>), however you are encouraged to namespace related packages with <code class=\"highlighter-rouge\">-</code>, for example, <code class=\"highlighter-rouge\">angular-</code> and <code class=\"highlighter-rouge\">paper-</code>.</p> <p>Please do not squat on package names. Register your package and claim your name after you have a valid public repo with working code.</p> <p>For package name transfers, intellectual property and other disputes, please try to resolve with the owner first. If no resolution, please submit a ticket in the <a href=\"https://github.com/bower/registry\">Bower Registry repo</a> and the Bower Core Team will assist.</p> <p>You’ll likely want to <a href=\"api#cache-clean\"><code class=\"highlighter-rouge\">bower cache clean</code></a> after your change. At the moment the <code class=\"highlighter-rouge\">unregister</code> command is temporarily disabled. You can check out this issue - <a href=\"https://github.com/bower/bower/issues/2210\">#2210</a>, for more information. However, you can <a href=\"https://github.com/bower/bower/issues/120\">request a package to be unregistered manually</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Bower contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://bower.io/docs/creating-packages\" class=\"_attribution-link\">http://bower.io/docs/creating-packages</a>\n  </p>\n</div>\n","config":"<h1 class=\"page-title\">Configuration</h1> <p class=\"lead\">Bower can be configured using JSON in a .bowerrc file. For example:</p> <pre class=\"highlight\" data-lang=\"json\">{\n  \"directory\": \"app/components/\",\n  \"analytics\": false,\n  \"timeout\": 120000,\n  \"registry\": {\n    \"search\": [\n      \"http://localhost:8000\",\n      \"https://bower.herokuapp.com\"\n    ]\n  }\n}</pre> <h2 id=\"placement--order\">Placement &amp; Order</h2> <p>The config is obtained by merging multiple configurations by this order of importance:</p> <ul> <li>CLI arguments via <code class=\"highlighter-rouge\">--config</code>\n</li> <li>Environment variables</li> <li>Local <code class=\"highlighter-rouge\">.bowerrc </code>located in the current working directory</li> <li>All <code class=\"highlighter-rouge\">.bowerrc </code>files upwards the directory tree</li> <li>\n<code class=\"highlighter-rouge\">.bowerrc</code> file located in user’s home folder (<code class=\"highlighter-rouge\">~</code>)</li> <li>\n<code class=\"highlighter-rouge\">.bowerrc</code> file located in the global folder (<code class=\"highlighter-rouge\">/</code>)</li> </ul> <p>Example of CLI arguments:</p> <ul> <li><code class=\"highlighter-rouge\">--config.endpoint-parser=&lt;parser&gt;</code></li> <li><code class=\"highlighter-rouge\">--config.storage.packages=&lt;packages_cache_dir&gt;</code></li> </ul> <p>Example of valid environment variables:</p> <ul> <li>\n<code class=\"highlighter-rouge\">bower_endpoint_parser</code> is evaluated as <code class=\"highlighter-rouge\">endpoint-parser</code>\n</li> <li>\n<code class=\"highlighter-rouge\">bower_storage__packages</code> is evaluated as <code class=\"highlighter-rouge\">storage.packages</code>\n</li> </ul> <p>Example of valid enviroment variables with Array convention:</p> <ul> <li><code class=\"highlighter-rouge\">export bower_registry__search='[http://localhost:8080, http://bower.herokuapp.com]'; bower install</code></li> </ul> <h2 id=\"bowerrc-specification\">.bowerrc specification</h2> <p>Available configuration variables, in <code class=\"highlighter-rouge\">.bowerrc</code> format:</p> <pre class=\"highlight\" data-lang=\"json\">{\n  \"analytics\": true,\n  \"cwd\": \"~/.my-project\",\n  \"directory\": \"bower_components\",\n  \"registry\": \"https://bower.herokuapp.com\",\n  \"shorthand-resolver\": \"git://github.com//.git\",\n  \"proxy\": \"http://proxy.local\",\n  \"https-proxy\": \"https://proxy.local\",\n  \"ca\": \"/var/certificate.pem\",\n  \"color\": true,\n  \"timeout\": 60000,\n  \"strict-ssl\": true,\n  \"storage\": {\n    \"packages\" : \"~/.bower/packages\",\n    \"registry\" : \"~/.bower/registry\",\n    \"links\" : \"~/.bower/links\"\n  },\n  \"interactive\": true,\n  \"resolvers\": [\n    \"mercurial-bower-resolver\"\n  ],\n  \"shallowCloneHosts\": [\n    \"myGitHost.example.com\"\n  ],\n  \"scripts\": {\n    \"preinstall\": \"\",\n    \"postinstall\": \"\",\n    \"preuninstall\": \"\"\n  },\n  \"ignoredDependencies\": [\n    \"jquery\"   \n  ]\n}</pre> <p>A detailed description of available configuration variables can be found in <a href=\"https://github.com/bower/spec/blob/master/config.md\">bower/spec</a> repository.</p> <h2 id=\"environment-variables-in-bowerrc\">Environment variables in .bowerrc</h2> <p>One can use environment variables in <code class=\"highlighter-rouge\">.bowerrc</code>, using the following syntax <code class=\"highlighter-rouge\">${ENV_VAR}</code>.</p> <pre class=\"highlight\" data-lang=\"json\">\"storage\" : {\n  \"packages\": \"/path/to/${USER}/packages\"\n}</pre> <h2 id=\"hooks\">Hooks</h2> <p>Bower provides 3 separate hooks that can be used to trigger other automated tools during Bower usage. Importantly, these hooks are intended to allow external tools to help wire up the newly installed components into the parent project and other similar tasks. These hooks are not intended to provide a post-installation build step for component authors. As such, the configuration for these hooks is provided in the <code class=\"highlighter-rouge\">.bowerrc</code> file in the parent project’s directory.</p> <p>In <code class=\"highlighter-rouge\">.bowerrc</code> do:</p> <pre class=\"highlight\" data-lang=\"js\">{\n  \"scripts\": {\n    \"preinstall\": \"&lt;your command here&gt;\",\n    \"postinstall\": \"&lt;your command here&gt;\",\n    \"preuninstall\": \"&lt;your command here&gt;\"\n  }\n}</pre> <p>The value of each script hook may contain a % character. When your script is called, the % will be replaced with a space-separated list of components being installed or uninstalled.</p> <p>Your script will also include an environment variable <code class=\"highlighter-rouge\">BOWER_PID</code> containing the PID of the parent Bower process that triggered the script. This can be used to verify that a <code class=\"highlighter-rouge\">preinstall</code> and <code class=\"highlighter-rouge\">postinstall</code> steps are part of the same Bower process.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Bower contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://bower.io/docs/config\" class=\"_attribution-link\">http://bower.io/docs/config</a>\n  </p>\n</div>\n","pluggable-resolvers":"<h1 class=\"page-title\">Pluggable Resolvers</h1> <p class=\"lead\">Pluggable resolvers allow you to use resolvers created by 3rd party JavaScript developers — including overriding default resolvers used by Bower.</p> <p>For example, resolvers can be used for:</p> <ul> <li>Handling <a href=\"https://mercurial.selenic.com/\">Mercurial</a> or <a href=\"http://bazaar.canonical.com/en/\">Bazaar</a> repositories</li> <li>Speeding up checkouts of services like <a href=\"https://about.gitlab.com/\">GitLab</a> or <a href=\"https://bitbucket.org/\">Bitbucket</a>\n</li> <li>Allowing to use packages from <a href=\"https://www.npmjs.com/\">npm</a> or <a href=\"https://github.com/component/component.github.io\">component.io</a>\n</li> <li>Proxying downloads through 3rd party service like <a href=\"http://www.jfrog.com/artifactory/\">Artifactory</a>\n</li> <li>Implementing custom private registry (hosted on GitHub?)</li> <li>Adding authentication support for private <a href=\"https://enterprise.github.com/\">GitHub Enterprise</a> instances</li> </ul> <p>Pluggable resolvers were introduced in Bower 1.5. Please make sure your Bower version is correct (<code class=\"highlighter-rouge\">bower --version</code>).</p> <h2 id=\"using\">Using</h2> <p>A Pluggable Resolver is just an npm package that you install as <code class=\"highlighter-rouge\">devDependency</code> in the <code class=\"highlighter-rouge\">package.json</code> of your repository, or install globally with <code class=\"highlighter-rouge\">npm install -g</code>.</p> <p>Declare what Pluggable resolvers your project uses by adding entries to the <code class=\"highlighter-rouge\">resolvers</code> section of <a href=\"config\">.bowerrc</a>.</p> <pre class=\"highlight\" data-lang=\"json\">{\n  \"resolvers\": [\n    \"bitbucket-resolver\",\n    \"github-enterprise-resolver\"\n  ]\n}</pre> <p>Bower tries to use resolvers in the order specified. If no custom resolver matches the source being processed, Bower fallbacks to default resolvers (git, github, filesystem, svn, registry).</p> <p>You can find the list of available Bower resolvers on <a href=\"https://www.npmjs.com/search?q=bower-resolver\">npm website</a>.</p> <h2 id=\"creating\">Creating</h2> <p>As mentioned, custom resolvers are <a href=\"https://www.npmjs.com/\">npm</a> packages with specific a API described below.</p> <p>The <code class=\"highlighter-rouge\">package.json</code> should not list <code class=\"highlighter-rouge\">bower</code> as a <code class=\"highlighter-rouge\">dependency</code> or <code class=\"highlighter-rouge\">peerDependency</code> (both have undesired behavior in npm 2.x, and we don’t want you to use bower internals). Instead, you can check for proper environment in resolver’s factory by reading provided <code class=\"highlighter-rouge\">bower.version</code> parameter and use any other packages on npm (like <a href=\"https://www.npmjs.com/package/request\">request</a>).</p> <p>Packages should list <code class=\"highlighter-rouge\">bower-resolver</code> as one of the <code class=\"highlighter-rouge\">keywords</code> in <code class=\"highlighter-rouge\">package.json</code>. Resolvers should also follow <a href=\"http://semver.org/\">semver</a> specification.</p> <p>Here is how an example <code class=\"highlighter-rouge\">package.json</code> of a custom resolver can look like:</p> <pre class=\"highlight\" data-lang=\"json\">{\n  \"name\": \"custom-bower-resolver\",\n  \"version\": \"1.0.0\",\n  \"keywords\": [\"bower-resolver\"],\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"request\": \"^2.61.0\"\n  }\n}</pre> <p>The <code class=\"highlighter-rouge\">index.js</code> should export factory for resolver, as follows:</p> <pre class=\"highlight\" data-lang=\"javascript\">var tmp = require('tmp');\n\n/**\n * Factory function for resolver\n * It is called only one time by Bower, to instantiate resolver.\n * You can instantiate here any caches or create helper functions.\n */\nmodule.exports = function resolver (bower) {\n\n  // Resolver factory returns an instance of resolver\n  return {\n\n    // Match method tells whether resolver supports given source\n    // It can return either boolean or promise of boolean\n    match: function (source) {\n      return source.indexOf('svn://') === 0\n    },\n\n    // Optional:\n    // Can resolve or normalize sources, like:\n    // \"jquery\" =&gt; \"git://github.com/jquery/jquery.git\"\n    locate: function (source) {\n      return source;\n    },\n\n    // Optional:\n    // Allows to list available versions of given source.\n    // Bower chooses matching release and passes it to \"fetch\"\n    releases: function (source) {\n      return [\n        { target: 'v1.0.0', version: '1.0.0' },\n        { target: 'v1.0.1', version: '1.0.1' }\n      ]\n    },\n\n    // It downloads package and extracts it to temporary directory\n    // You can use npm's \"tmp\" package to tmp directories\n    // See the \"Resolver API\" section for details on this method\n    fetch: function (endpoint, cached) {\n      // If cached version of package exists, re-use it\n      if (cached &amp;&amp; cached.version) {\n        return;\n      }\n\n      var tempDir = tmp.dirSync();\n\n      // ... download package to tempDir\n\n      return {\n        tempPath: tempDir.name,\n        removeIgnores: true\n      }\n    }\n  }\n}</pre> <p>If you need something more solid, see this real world example: <a href=\"https://github.com/phenomnomnominal/mercurial-bower-resolver\" target=\"_blank\">Mercurial Resolver</a>.</p> <h2 id=\"resolver-api\">Resolver API</h2> <h3 id=\"resolver-package\">Resolver package</h3> <pre class=\"highlight\" data-lang=\"javascript\">var plugResolver = require('pluggable-resolver')\n\nvar resolver = plugResolver({\n  version: '1.5.0',\n  config: {...},\n  logger: logger\n})</pre> <ul> <li>\n<code class=\"highlighter-rouge\">resolver</code>: <code class=\"highlighter-rouge\">Resolver</code> - instance of the resolver.</li> <li>\n<code class=\"highlighter-rouge\">version</code>: <code class=\"highlighter-rouge\">String</code> - Bower’s version that instantiates resolver. You can validate it.</li> <li>\n<code class=\"highlighter-rouge\">config</code>: <code class=\"highlighter-rouge\">Object</code> - Bower’s <a href=\"config\">config</a>. You can ask authors to put extra configuration in it.</li> <li>\n<code class=\"highlighter-rouge\">logger</code>: <code class=\"highlighter-rouge\">Object</code> - Bower’s <a href=\"https://github.com/bower/logger\">logger</a>. Use it to output important warnings / information.</li> </ul> <p><code class=\"highlighter-rouge\">plugResolver()</code> returns an instance of the resolver with the API described below.</p> <pre class=\"highlight\" data-lang=\"javascript\">resolver.match()\nresolver.locate()\nresolver.sources()\nresolver.fetch()</pre> <h3 id=\"resolvermatch\">resolver.match()</h3> <p>Tells Bower whether to use or not use this resolver for some source.</p> <pre class=\"highlight\" data-lang=\"javascript\">var isMatched = resolver.match( source )</pre> <ul> <li>\n<code class=\"highlighter-rouge\">source</code>: <code class=\"highlighter-rouge\">String</code> - source from bower.json, like <code class=\"highlighter-rouge\">git://github.com/jquery/jquery.git</code>\n</li> <li>\n<code class=\"highlighter-rouge\">isMatched</code>: <code class=\"highlighter-rouge\">Boolean</code> - <em>Returns</em> a boolean that tells whether resolver can handle given source (either by locating them with <code class=\"highlighter-rouge\">locate</code> method, or fetching it with <code class=\"highlighter-rouge\">fetch</code> + optional <code class=\"highlighter-rouge\">releases</code> method).</li> </ul> <p><code class=\"highlighter-rouge\">.match()</code> can also return a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> of the result. It’s useful e.g. for filesystem checks.</p> <h3 id=\"resolverlocate\">resolver.locate()</h3> <p>Allows to implement simplified registry.</p> <pre class=\"highlight\" data-lang=\"javascript\">var locatedSource = resolver.locate( source )</pre> <ul> <li>\n<code class=\"highlighter-rouge\">source</code>: <code class=\"highlighter-rouge\">String</code> - source from bower.json, like <code class=\"highlighter-rouge\">jquery/jquery</code>\n</li> <li>\n<code class=\"highlighter-rouge\">locatedSource</code>: <code class=\"highlighter-rouge\">String</code> - <em>Returns</em> a resolved source string, like <code class=\"highlighter-rouge\">\"git://github.com/jquery/jquery.git\"</code>\n</li> </ul> <p><code class=\"highlighter-rouge\">.locate()</code> can also return a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> of the result. It’s useful e.g. for remote registry calls.</p> <h3 id=\"resolverreleases\">resolver.releases()</h3> <p>Bower selects one matching <code class=\"highlighter-rouge\">version</code> from the result and passes matching <code class=\"highlighter-rouge\">target</code> field to <code class=\"highlighter-rouge\">fetch</code> method.</p> <pre class=\"highlight\" data-lang=\"javascript\">var resolvedReleases = resolver.releases( source )</pre> <ul> <li>\n<code class=\"highlighter-rouge\">source</code>: <code class=\"highlighter-rouge\">String</code> - source from bower.json, like <code class=\"highlighter-rouge\">git://github.com/jquery/jquery.git</code>\n</li> <li>\n<code class=\"highlighter-rouge\">resolvedReleases</code>: <code class=\"highlighter-rouge\">Array</code> - <em>Returns</em> available releases for given source (like list of available tags on GitHub) <ul> <li>\n<code class=\"highlighter-rouge\">target</code>: <code class=\"highlighter-rouge\">String</code> - unique target id for release (usually tag name)</li> <li>\n<code class=\"highlighter-rouge\">version</code>: <code class=\"highlighter-rouge\">String</code> - semantic version for the target above</li> </ul> </li> </ul> <p><code class=\"highlighter-rouge\">.releases()</code> can also return a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> of the result.</p> <h3 id=\"resolverfetch\">resolver.fetch()</h3> <p>Downloads given endpoint and returns path to temporary directory.</p> <pre class=\"highlight\" data-lang=\"javascript\">var fetched = resolver.fetch( endPoint, cached )</pre> <ul> <li>\n<code class=\"highlighter-rouge\">endpoint</code>: <code class=\"highlighter-rouge\">Object</code> - endpoint for the resource to download <ul> <li>\n<code class=\"highlighter-rouge\">name</code>: <code class=\"highlighter-rouge\">String</code> - name of resource (like <code class=\"highlighter-rouge\">jquery</code>)</li> <li>\n<code class=\"highlighter-rouge\">source</code>: <code class=\"highlighter-rouge\">String</code> - where to download resource from (like <code class=\"highlighter-rouge\">git://github.com/jquery/jquery.git</code>)</li> <li>\n<code class=\"highlighter-rouge\">target</code>: <code class=\"highlighter-rouge\">String</code> - the version or release of resource to download (like <code class=\"highlighter-rouge\">v1.0.0</code>)</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">cached</code>: <code class=\"highlighter-rouge\">Object</code> - contains information about cached resource <ul> <li>\n<code class=\"highlighter-rouge\">endpoint</code>: <code class=\"highlighter-rouge\">Object</code> - endpoint of cached resource (the same format as above)</li> <li>\n<code class=\"highlighter-rouge\">release</code>: <code class=\"highlighter-rouge\">String</code> - release of cached resource</li> <li>\n<code class=\"highlighter-rouge\">releases</code>: <code class=\"highlighter-rouge\">Array</code> - the result of <code class=\"highlighter-rouge\">releases</code> method</li> <li>\n<code class=\"highlighter-rouge\">version</code>: <code class=\"highlighter-rouge\">String</code> - present cached resource has been resolved as version (like <code class=\"highlighter-rouge\">1.0.0</code>)</li> <li>\n<code class=\"highlighter-rouge\">resolution</code>: <code class=\"highlighter-rouge\">String</code> - the “resolution” returned from previous fetch call for same resource</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">fetched</code>: <code class=\"highlighter-rouge\">Object</code> - <em>Returned</em> <ul> <li>\n<code class=\"highlighter-rouge\">tempPath</code>: <code class=\"highlighter-rouge\">String</code> - path to teporary directory with downloaded resource</li> <li>\n<code class=\"highlighter-rouge\">removeIgnores</code>: <code class=\"highlighter-rouge\">Boolean</code> - tells whether bower should remove files ignores in bower.json.</li> <li>\n<code class=\"highlighter-rouge\">resolution</code>: <code class=\"highlighter-rouge\">Object</code> - extra object that is saved in <code class=\"highlighter-rouge\">.bower.json</code> and passed in <code class=\"highlighter-rouge\">cached</code> field to the next <code class=\"highlighter-rouge\">fetch</code> call. It can be used e.g. to download resources conditionally, for example by storing e-tag or last-modified time.</li> </ul> </li> </ul> <p><code class=\"highlighter-rouge\">.fetch()</code> can also return a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> of the result.</p> <p><strong>If <code class=\"highlighter-rouge\">.fetch()</code> returns <code class=\"highlighter-rouge\">undefined</code>, then Bower re-uses cached package.</strong></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Bower contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://bower.io/docs/pluggable-resolvers\" class=\"_attribution-link\">http://bower.io/docs/pluggable-resolvers</a>\n  </p>\n</div>\n"}