{"index":"<h1>Minitest</h1>     <ul>  <li class=\"class\"> <a href=\"minitest/abstractreporter\">Minitest::AbstractReporter</a> </li> <li class=\"class\"> <a href=\"minitest/assertion\">Minitest::Assertion</a> </li> <li class=\"module\"> <a href=\"minitest/assertions\">Minitest::Assertions</a> </li> <li class=\"class\"> <a href=\"minitest/benchspec\">Minitest::BenchSpec</a> </li> <li class=\"class\"> <a href=\"minitest/benchmark\">Minitest::Benchmark</a> </li> <li class=\"class\"> <a href=\"minitest/compositereporter\">Minitest::CompositeReporter</a> </li> <li class=\"module\"> <a href=\"minitest/expectations\">Minitest::Expectations</a> </li> <li class=\"module\"> <a href=\"minitest/guard\">Minitest::Guard</a> </li> <li class=\"class\"> <a href=\"minitest/mock\">Minitest::Mock</a> </li> <li class=\"module\"> <a href=\"minitest/parallel\">Minitest::Parallel</a> </li> <li class=\"class\"> <a href=\"minitest/parallel/executor\">Minitest::Parallel::Executor</a> </li> <li class=\"class\"> <a href=\"minitest/prideio\">Minitest::PrideIO</a> </li> <li class=\"class\"> <a href=\"minitest/pridelol\">Minitest::PrideLOL</a> </li> <li class=\"module\"> <a href=\"minitest/process\">Minitest::Process</a> </li> <li class=\"class\"> <a href=\"minitest/progressreporter\">Minitest::ProgressReporter</a> </li> <li class=\"class\"> <a href=\"minitest/runnable\">Minitest::Runnable</a> </li> <li class=\"class\"> <a href=\"minitest/skip\">Minitest::Skip</a> </li> <li class=\"class\"> <a href=\"minitest/spec\">Minitest::Spec</a> </li> <li class=\"module\"> <a href=\"minitest/spec/dsl\">Minitest::Spec::DSL</a> </li> <li class=\"module\"> <a href=\"minitest/spec/dsl/instancemethods\">Minitest::Spec::DSL::InstanceMethods</a> </li> <li class=\"class\"> <a href=\"minitest/statisticsreporter\">Minitest::StatisticsReporter</a> </li> <li class=\"class\"> <a href=\"minitest/summaryreporter\">Minitest::SummaryReporter</a> </li> <li class=\"class\"> <a href=\"minitest/test\">Minitest::Test</a> </li> <li class=\"module\"> <a href=\"minitest/test/lifecyclehooks\">Minitest::Test::LifecycleHooks</a> </li> <li class=\"class\"> <a href=\"minitest/unexpectederror\">Minitest::UnexpectedError</a> </li>  </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/abstractreporter":"<h1 id=\"class-Minitest::AbstractReporter\" class=\"class\"> class Minitest::AbstractReporter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n<dt>Included modules:</dt>\n\n</dl> <section class=\"description\"> <p>Defines the API for Reporters. Subclass this and override whatever you want. Go nuts.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-passed-3F\"> <span class=\"method-name\">passed?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Did this run pass?</p> <div class=\"method-source-code\" id=\"passed-3F-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 434\ndef passed?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-record\"> <span class=\"method-name\">record</span><span class=\"method-args\">(result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Record a result and output the <a href=\"runnable#method-i-result_code\">Minitest::Runnable#result_code</a>. Stores the result of the run if the run did not pass.</p> <div class=\"method-source-code\" id=\"record-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 422\ndef record result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-report\"> <span class=\"method-name\">report</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Outputs the summary of the run.</p> <div class=\"method-source-code\" id=\"report-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 428\ndef report\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-start\"> <span class=\"method-name\">start</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Starts reporting on the run.</p> <div class=\"method-source-code\" id=\"start-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 415\ndef start\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/assertion":"<h1 id=\"class-Minitest::Assertion\" class=\"class\"> class Minitest::Assertion </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Exception</dd>\n</dl> <section class=\"description\"> <p>Represents run failures.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-location\"> <span class=\"method-name\">location</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Where was this run before an assertion was raised?</p> <div class=\"method-source-code\" id=\"location-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 655\ndef location\n  last_before_assertion = \"\"\n  self.backtrace.reverse_each do |s|\n    break if s =~ /in .(assert|refute|flunk|pass|fail|raise|must|wont)/\n    last_before_assertion = s\n  end\n  last_before_assertion.sub(/:in .*$/, \"\")\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/assertions":"<h1 id=\"module-Minitest::Assertions\" class=\"module\"> module Minitest::Assertions </h1> <section class=\"description\"> <p>Minitest <a href=\"assertions\">Assertions</a>. All assertion methods accept a <code>msg</code> which is printed if the assertion fails.</p> <p>Protocol: Nearly everything here boils up to <code>assert</code>, which expects to be able to increment an instance accessor named <code>assertions</code>. This is not provided by <a href=\"assertions\">Assertions</a> and must be provided by the thing including <a href=\"assertions\">Assertions</a>. See <a href=\"runnable\">Minitest::Runnable</a> for an example.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-diff\"> <span class=\"method-name\">diff</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the diff command to use in <a href=\"assertions#method-i-diff\">diff</a>. Tries to intelligently figure out what diff to use.</p> <div class=\"method-source-code\" id=\"diff-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 27\ndef self.diff\n  @diff = if (RbConfig::CONFIG[\"host_os\"] =~ /mswin|mingw/ &amp;&amp;\n              system(\"diff.exe\", __FILE__, __FILE__)) then\n            \"diff.exe -u\"\n          elsif Minitest::Test.maglev? then\n            \"diff -u\"\n          elsif system(\"gdiff\", __FILE__, __FILE__)\n            \"gdiff -u\" # solaris and kin suck\n          elsif system(\"diff\", __FILE__, __FILE__)\n            \"diff -u\"\n          else\n            nil\n          end unless defined? @diff\n\n  @diff\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-diff-3D\"> <span class=\"method-name\">diff=</span><span class=\"method-args\">(o)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the diff command to use in <a href=\"assertions#method-i-diff\">diff</a>.</p> <div class=\"method-source-code\" id=\"diff-3D-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 47\ndef self.diff= o\n  @diff = o\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert\"> <span class=\"method-name\">assert</span><span class=\"method-args\">(test, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails unless <code>test</code> is truthy.</p> <div class=\"method-source-code\" id=\"assert-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 124\ndef assert test, msg = nil\n  self.assertions += 1\n  unless test then\n    msg ||= \"Failed assertion, no message given.\"\n    msg = msg.call if Proc === msg\n    raise Minitest::Assertion, msg\n  end\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_empty\"> <span class=\"method-name\">assert_empty</span><span class=\"method-args\">(obj, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails unless <code>obj</code> is empty.</p> <div class=\"method-source-code\" id=\"assert_empty-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 141\ndef assert_empty obj, msg = nil\n  msg = message(msg) { \"Expected #{mu_pp(obj)} to be empty\" }\n  assert_respond_to obj, :empty?\n  assert obj.empty?, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_equal\"> <span class=\"method-name\">assert_equal</span><span class=\"method-args\">(exp, act, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails unless <code>exp == act</code> printing the difference between the two, if possible.</p> <p>If there is no visible difference but the assertion fails, you should suspect that your #== is buggy, or your inspect output is missing crucial details.</p> <p>For floats use assert_in_delta.</p> <p>See also: <a href=\"assertions#method-c-diff\">::diff</a></p> <div class=\"method-source-code\" id=\"assert_equal-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 161\ndef assert_equal exp, act, msg = nil\n  msg = message(msg, E) { diff exp, act }\n  assert exp == act, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_in_delta\"> <span class=\"method-name\">assert_in_delta</span><span class=\"method-args\">(exp, act, delta = 0.001, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>For comparing Floats. Fails unless <code>exp</code> and <code>act</code> are within <code>delta</code> of each other.</p> <pre class=\"ruby\">assert_in_delta Math::PI, (22.0 / 7.0), 0.01\n</pre> <div class=\"method-source-code\" id=\"assert_in_delta-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 172\ndef assert_in_delta exp, act, delta = 0.001, msg = nil\n  n = (exp - act).abs\n  msg = message(msg) {\n    \"Expected |#{exp} - #{act}| (#{n}) to be &lt;= #{delta}\"\n  }\n  assert delta &gt;= n, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_in_epsilon\"> <span class=\"method-name\">assert_in_epsilon</span><span class=\"method-args\">(a, b, epsilon = 0.001, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>For comparing Floats. Fails unless <code>exp</code> and <code>act</code> have a relative error less than <code>epsilon</code>.</p> <div class=\"method-source-code\" id=\"assert_in_epsilon-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 184\ndef assert_in_epsilon a, b, epsilon = 0.001, msg = nil\n  assert_in_delta a, b, [a.abs, b.abs].min * epsilon, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_includes\"> <span class=\"method-name\">assert_includes</span><span class=\"method-args\">(collection, obj, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails unless <code>collection</code> includes <code>obj</code>.</p> <div class=\"method-source-code\" id=\"assert_includes-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 191\ndef assert_includes collection, obj, msg = nil\n  msg = message(msg) {\n    \"Expected #{mu_pp(collection)} to include #{mu_pp(obj)}\"\n  }\n  assert_respond_to collection, :include?\n  assert collection.include?(obj), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_instance_of\"> <span class=\"method-name\">assert_instance_of</span><span class=\"method-args\">(cls, obj, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails unless <code>obj</code> is an instance of <code>cls</code>.</p> <div class=\"method-source-code\" id=\"assert_instance_of-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 202\ndef assert_instance_of cls, obj, msg = nil\n  msg = message(msg) {\n    \"Expected #{mu_pp(obj)} to be an instance of #{cls}, not #{obj.class}\"\n  }\n\n  assert obj.instance_of?(cls), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_kind_of\"> <span class=\"method-name\">assert_kind_of</span><span class=\"method-args\">(cls, obj, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails unless <code>obj</code> is a kind of <code>cls</code>.</p> <div class=\"method-source-code\" id=\"assert_kind_of-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 213\ndef assert_kind_of cls, obj, msg = nil\n  msg = message(msg) {\n    \"Expected #{mu_pp(obj)} to be a kind of #{cls}, not #{obj.class}\" }\n\n  assert obj.kind_of?(cls), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_match\"> <span class=\"method-name\">assert_match</span><span class=\"method-args\">(matcher, obj, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails unless <code>matcher</code> <code>=~</code> <code>obj</code>.</p> <div class=\"method-source-code\" id=\"assert_match-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 223\ndef assert_match matcher, obj, msg = nil\n  msg = message(msg) { \"Expected #{mu_pp matcher} to match #{mu_pp obj}\" }\n  assert_respond_to matcher, :\"=~\"\n  matcher = Regexp.new Regexp.escape matcher if String === matcher\n  assert matcher =~ obj, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_nil\"> <span class=\"method-name\">assert_nil</span><span class=\"method-args\">(obj, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails unless <code>obj</code> is nil</p> <div class=\"method-source-code\" id=\"assert_nil-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 233\ndef assert_nil obj, msg = nil\n  msg = message(msg) { \"Expected #{mu_pp(obj)} to be nil\" }\n  assert obj.nil?, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_operator\"> <span class=\"method-name\">assert_operator</span><span class=\"method-args\">(o1, op, o2 = UNDEFINED, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>For testing with binary operators. Eg:</p> <pre class=\"ruby\">assert_operator 5, :&lt;=, 4\n</pre> <div class=\"method-source-code\" id=\"assert_operator-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 243\ndef assert_operator o1, op, o2 = UNDEFINED, msg = nil\n  return assert_predicate o1, op, msg if UNDEFINED == o2\n  msg = message(msg) { \"Expected #{mu_pp(o1)} to be #{op} #{mu_pp(o2)}\" }\n  assert o1.__send__(op, o2), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_output\"> <span class=\"method-name\">assert_output</span><span class=\"method-args\">(stdout = nil, stderr = nil) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if stdout or stderr do not output the expected results. Pass in nil if you don't care about that streams output. Pass in “” if you require it to be silent. Pass in a regexp if you want to pattern match.</p> <p>NOTE: this uses <a href=\"assertions#method-i-capture_io\">capture_io</a>, not <a href=\"assertions#method-i-capture_subprocess_io\">capture_subprocess_io</a>.</p> <p>See also: <a href=\"assertions#method-i-assert_silent\">assert_silent</a></p> <div class=\"method-source-code\" id=\"assert_output-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 259\ndef assert_output stdout = nil, stderr = nil\n  out, err = capture_io do\n    yield\n  end\n\n  err_msg = Regexp === stderr ? :assert_match : :assert_equal if stderr\n  out_msg = Regexp === stdout ? :assert_match : :assert_equal if stdout\n\n  y = send err_msg, stderr, err, \"In stderr\" if err_msg\n  x = send out_msg, stdout, out, \"In stdout\" if out_msg\n\n  (!stdout || x) &amp;&amp; (!stderr || y)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_predicate\"> <span class=\"method-name\">assert_predicate</span><span class=\"method-args\">(o1, op, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>For testing with predicates. Eg:</p> <pre class=\"ruby\">assert_predicate str, :empty?\n</pre> <p>This is really meant for specs and is front-ended by <a href=\"assertions#method-i-assert_operator\">#assert_operator</a>:</p> <pre class=\"ruby\">str.must_be :empty?\n</pre> <div class=\"method-source-code\" id=\"assert_predicate-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 282\ndef assert_predicate o1, op, msg = nil\n  msg = message(msg) { \"Expected #{mu_pp(o1)} to be #{op}\" }\n  assert o1.__send__(op), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_raises\"> <span class=\"method-name\">assert_raises</span><span class=\"method-args\">(*exp) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails unless the block raises one of <code>exp</code>. Returns the exception matched so you can check the message, attributes, etc.</p> <p><code>exp</code> takes an optional message on the end to help explain failures and defaults to StandardError if no exception class is passed.</p> <div class=\"method-source-code\" id=\"assert_raises-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 295\ndef assert_raises *exp\n  msg = \"#{exp.pop}.\\n\" if String === exp.last\n  exp &lt;&lt; StandardError if exp.empty?\n\n  begin\n    yield\n  rescue *exp =&gt; e\n    pass # count assertion\n    return e\n  rescue Minitest::Skip\n    # don't count assertion\n    raise\n  rescue SignalException, SystemExit\n    raise\n  rescue Exception =&gt; e\n    flunk proc {\n      exception_details(e, \"#{msg}#{mu_pp(exp)} exception expected, not\")\n    }\n  end\n\n  exp = exp.first if exp.size == 1\n\n  flunk \"#{msg}#{mu_pp(exp)} expected but nothing was raised.\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_respond_to\"> <span class=\"method-name\">assert_respond_to</span><span class=\"method-args\">(obj, meth, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails unless <code>obj</code> responds to <code>meth</code>.</p> <div class=\"method-source-code\" id=\"assert_respond_to-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 323\ndef assert_respond_to obj, meth, msg = nil\n  msg = message(msg) {\n    \"Expected #{mu_pp(obj)} (#{obj.class}) to respond to ##{meth}\"\n  }\n  assert obj.respond_to?(meth), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_same\"> <span class=\"method-name\">assert_same</span><span class=\"method-args\">(exp, act, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails unless <code>exp</code> and <code>act</code> are equal?</p> <div class=\"method-source-code\" id=\"assert_same-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 333\ndef assert_same exp, act, msg = nil\n  msg = message(msg) {\n    data = [mu_pp(act), act.object_id, mu_pp(exp), exp.object_id]\n    \"Expected %s (oid=%d) to be the same as %s (oid=%d)\" % data\n  }\n  assert exp.equal?(act), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_send\"> <span class=\"method-name\">assert_send</span><span class=\"method-args\">(send_ary, m = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>send_ary</code> is a receiver, message and arguments.</p> <p>Fails unless the call returns a true value</p> <div class=\"method-source-code\" id=\"assert_send-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 346\ndef assert_send send_ary, m = nil\n  recv, msg, *args = send_ary\n  m = message(m) {\n    \"Expected #{mu_pp(recv)}.#{msg}(*#{mu_pp(args)}) to return true\" }\n  assert recv.__send__(msg, *args), m\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_silent\"> <span class=\"method-name\">assert_silent</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if the block outputs anything to stderr or stdout.</p> <p>See also: <a href=\"assertions#method-i-assert_output\">assert_output</a></p> <div class=\"method-source-code\" id=\"assert_silent-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 358\ndef assert_silent\n  assert_output \"\", \"\" do\n    yield\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_throws\"> <span class=\"method-name\">assert_throws</span><span class=\"method-args\">(sym, msg = nil) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails unless the block throws <code>sym</code></p> <div class=\"method-source-code\" id=\"assert_throws-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 367\ndef assert_throws sym, msg = nil\n  default = \"Expected #{mu_pp(sym)} to have been thrown\"\n  caught = true\n  catch(sym) do\n    begin\n      yield\n    rescue ThreadError =&gt; e       # wtf?!? 1.8 + threads == suck\n      default += \", not \\:#{e.message[/uncaught throw \\`(\\w+?)\\'/, 1]}\"\n    rescue ArgumentError =&gt; e     # 1.9 exception\n      default += \", not #{e.message.split(/ /).last}\"\n    rescue NameError =&gt; e         # 1.8 exception\n      default += \", not #{e.name.inspect}\"\n    end\n    caught = false\n  end\n\n  assert caught, message(msg) { default }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-capture_io\"> <span class=\"method-name\">capture_io</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Captures $stdout and $stderr into strings:</p> <pre class=\"ruby\">out, err = capture_io do\n  puts \"Some info\"\n  warn \"You did a bad thing\"\nend\n\nassert_match %r%info%, out\nassert_match %r%bad%, err\n</pre> <p>NOTE: For efficiency, this method uses StringIO and does not capture IO for subprocesses. Use <a href=\"assertions#method-i-capture_subprocess_io\">capture_subprocess_io</a> for that.</p> <div class=\"method-source-code\" id=\"capture_io-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 401\ndef capture_io\n  _synchronize do\n    begin\n      captured_stdout, captured_stderr = StringIO.new, StringIO.new\n\n      orig_stdout, orig_stderr = $stdout, $stderr\n      $stdout, $stderr         = captured_stdout, captured_stderr\n\n      yield\n\n      return captured_stdout.string, captured_stderr.string\n    ensure\n      $stdout = orig_stdout\n      $stderr = orig_stderr\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-capture_subprocess_io\"> <span class=\"method-name\">capture_subprocess_io</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Captures $stdout and $stderr into strings, using Tempfile to ensure that subprocess IO is captured as well.</p> <pre class=\"ruby\">out, err = capture_subprocess_io do\n  system \"echo Some info\"\n  system \"echo You did a bad thing 1&gt;&amp;2\"\nend\n\nassert_match %r%info%, out\nassert_match %r%bad%, err\n</pre> <p>NOTE: This method is approximately 10x slower than <a href=\"assertions#method-i-capture_io\">capture_io</a> so only use it when you need to test the output of a subprocess.</p> <div class=\"method-source-code\" id=\"capture_subprocess_io-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 434\ndef capture_subprocess_io\n  _synchronize do\n    begin\n      require \"tempfile\"\n\n      captured_stdout, captured_stderr = Tempfile.new(\"out\"), Tempfile.new(\"err\")\n\n      orig_stdout, orig_stderr = $stdout.dup, $stderr.dup\n      $stdout.reopen captured_stdout\n      $stderr.reopen captured_stderr\n\n      yield\n\n      $stdout.rewind\n      $stderr.rewind\n\n      return captured_stdout.read, captured_stderr.read\n    ensure\n      captured_stdout.unlink\n      captured_stderr.unlink\n      $stdout.reopen orig_stdout\n      $stderr.reopen orig_stderr\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-diff\"> <span class=\"method-name\">diff</span><span class=\"method-args\">(exp, act)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a diff between <code>exp</code> and <code>act</code>. If there is no known diff command or if it doesn't make sense to diff the output (single line, short output), then it simply returns a basic comparison between the two.</p> <div class=\"method-source-code\" id=\"diff-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 57\ndef diff exp, act\n  expect = mu_pp_for_diff exp\n  butwas = mu_pp_for_diff act\n  result = nil\n\n  need_to_diff =\n    (expect.include?(\"\\n\")    ||\n     butwas.include?(\"\\n\")    ||\n     expect.size &gt; 30         ||\n     butwas.size &gt; 30         ||\n     expect == butwas)        &amp;&amp;\n    Minitest::Assertions.diff\n\n  return \"Expected: #{mu_pp exp}\\n  Actual: #{mu_pp act}\" unless\n    need_to_diff\n\n  Tempfile.open(\"expect\") do |a|\n    a.puts expect\n    a.flush\n\n    Tempfile.open(\"butwas\") do |b|\n      b.puts butwas\n      b.flush\n\n      result = %x`#{Minitest::Assertions.diff} #{a.path} #{b.path}`\n      result.sub!(/^\\-\\-\\- .+/, \"--- expected\")\n      result.sub!(/^\\+\\+\\+ .+/, \"+++ actual\")\n\n      if result.empty? then\n        klass = exp.class\n        result = [\n                  \"No visible difference in the #{klass}#inspect output.\\n\",\n                  \"You should look at the implementation of #== on \",\n                  \"#{klass} or its members.\\n\",\n                  expect,\n                 ].join\n      end\n    end\n  end\n\n  result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exception_details\"> <span class=\"method-name\">exception_details</span><span class=\"method-args\">(e, msg)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns details for exception <code>e</code></p> <div class=\"method-source-code\" id=\"exception_details-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 463\ndef exception_details e, msg\n  [\n   \"#{msg}\",\n   \"Class: &lt;#{e.class}&gt;\",\n   \"Message: &lt;#{e.message.inspect}&gt;\",\n   \"---Backtrace---\",\n   \"#{Minitest.filter_backtrace(e.backtrace).join(\"\\n\")}\",\n   \"---------------\",\n  ].join \"\\n\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-flunk\"> <span class=\"method-name\">flunk</span><span class=\"method-args\">(msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails with <code>msg</code></p> <div class=\"method-source-code\" id=\"flunk-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 477\ndef flunk msg = nil\n  msg ||= \"Epic Fail!\"\n  assert false, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-message\"> <span class=\"method-name\">message</span><span class=\"method-args\">(msg = nil, ending = nil, &amp;default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a proc that will output <code>msg</code> along with the default message.</p> <div class=\"method-source-code\" id=\"message-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 485\ndef message msg = nil, ending = nil, &amp;default\n  proc {\n    msg = msg.call.chomp(\".\") if Proc === msg\n    custom_message = \"#{msg}.\\n\" unless msg.nil? or msg.to_s.empty?\n    \"#{custom_message}#{default.call}#{ending || \".\"}\"\n  }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mu_pp\"> <span class=\"method-name\">mu_pp</span><span class=\"method-args\">(obj)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This returns a human-readable version of <code>obj</code>. By default inspect is called. You can override this to use pretty_print if you want.</p> <div class=\"method-source-code\" id=\"mu_pp-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 105\ndef mu_pp obj\n  s = obj.inspect\n  s = s.encode Encoding.default_external if defined? Encoding\n  s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mu_pp_for_diff\"> <span class=\"method-name\">mu_pp_for_diff</span><span class=\"method-args\">(obj)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This returns a diff-able human-readable version of <code>obj</code>. This differs from the regular <a href=\"assertions#method-i-mu_pp\">#mu_pp</a> because it expands escaped newlines and makes hex-values generic (like object_ids). This uses <a href=\"assertions#method-i-mu_pp\">#mu_pp</a> to do the first pass and then cleans it up.</p> <div class=\"method-source-code\" id=\"mu_pp_for_diff-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 117\ndef mu_pp_for_diff obj\n  mu_pp(obj).gsub(/\\n/, \"\\n\").gsub(/:0x[a-fA-F0-9]{4,}/m, \":0xXXXXXX\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pass\"> <span class=\"method-name\">pass</span><span class=\"method-args\">(_msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>used for counting assertions</p> <div class=\"method-source-code\" id=\"pass-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 496\ndef pass _msg = nil\n  assert true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute\"> <span class=\"method-name\">refute</span><span class=\"method-args\">(test, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if <code>test</code> is truthy.</p> <div class=\"method-source-code\" id=\"refute-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 503\ndef refute test, msg = nil\n  msg ||= \"Failed refutation, no message given\"\n  not assert !test, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_empty\"> <span class=\"method-name\">refute_empty</span><span class=\"method-args\">(obj, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if <code>obj</code> is empty.</p> <div class=\"method-source-code\" id=\"refute_empty-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 511\ndef refute_empty obj, msg = nil\n  msg = message(msg) { \"Expected #{mu_pp(obj)} to not be empty\" }\n  assert_respond_to obj, :empty?\n  refute obj.empty?, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_equal\"> <span class=\"method-name\">refute_equal</span><span class=\"method-args\">(exp, act, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if <code>exp == act</code>.</p> <p>For floats use refute_in_delta.</p> <div class=\"method-source-code\" id=\"refute_equal-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 522\ndef refute_equal exp, act, msg = nil\n  msg = message(msg) {\n    \"Expected #{mu_pp(act)} to not be equal to #{mu_pp(exp)}\"\n  }\n  refute exp == act, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_in_delta\"> <span class=\"method-name\">refute_in_delta</span><span class=\"method-args\">(exp, act, delta = 0.001, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>For comparing Floats. Fails if <code>exp</code> is within <code>delta</code> of <code>act</code>.</p> <pre class=\"ruby\">refute_in_delta Math::PI, (22.0 / 7.0)\n</pre> <div class=\"method-source-code\" id=\"refute_in_delta-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 534\ndef refute_in_delta exp, act, delta = 0.001, msg = nil\n  n = (exp - act).abs\n  msg = message(msg) {\n    \"Expected |#{exp} - #{act}| (#{n}) to not be &lt;= #{delta}\"\n  }\n  refute delta &gt;= n, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_in_epsilon\"> <span class=\"method-name\">refute_in_epsilon</span><span class=\"method-args\">(a, b, epsilon = 0.001, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>For comparing Floats. Fails if <code>exp</code> and <code>act</code> have a relative error less than <code>epsilon</code>.</p> <div class=\"method-source-code\" id=\"refute_in_epsilon-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 546\ndef refute_in_epsilon a, b, epsilon = 0.001, msg = nil\n  refute_in_delta a, b, a * epsilon, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_includes\"> <span class=\"method-name\">refute_includes</span><span class=\"method-args\">(collection, obj, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if <code>collection</code> includes <code>obj</code>.</p> <div class=\"method-source-code\" id=\"refute_includes-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 553\ndef refute_includes collection, obj, msg = nil\n  msg = message(msg) {\n    \"Expected #{mu_pp(collection)} to not include #{mu_pp(obj)}\"\n  }\n  assert_respond_to collection, :include?\n  refute collection.include?(obj), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_instance_of\"> <span class=\"method-name\">refute_instance_of</span><span class=\"method-args\">(cls, obj, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if <code>obj</code> is an instance of <code>cls</code>.</p> <div class=\"method-source-code\" id=\"refute_instance_of-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 564\ndef refute_instance_of cls, obj, msg = nil\n  msg = message(msg) {\n    \"Expected #{mu_pp(obj)} to not be an instance of #{cls}\"\n  }\n  refute obj.instance_of?(cls), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_kind_of\"> <span class=\"method-name\">refute_kind_of</span><span class=\"method-args\">(cls, obj, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if <code>obj</code> is a kind of <code>cls</code>.</p> <div class=\"method-source-code\" id=\"refute_kind_of-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 574\ndef refute_kind_of cls, obj, msg = nil\n  msg = message(msg) { \"Expected #{mu_pp(obj)} to not be a kind of #{cls}\" }\n  refute obj.kind_of?(cls), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_match\"> <span class=\"method-name\">refute_match</span><span class=\"method-args\">(matcher, obj, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if <code>matcher</code> <code>=~</code> <code>obj</code>.</p> <div class=\"method-source-code\" id=\"refute_match-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 582\ndef refute_match matcher, obj, msg = nil\n  msg = message(msg) { \"Expected #{mu_pp matcher} to not match #{mu_pp obj}\" }\n  assert_respond_to matcher, :\"=~\"\n  matcher = Regexp.new Regexp.escape matcher if String === matcher\n  refute matcher =~ obj, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_nil\"> <span class=\"method-name\">refute_nil</span><span class=\"method-args\">(obj, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if <code>obj</code> is nil.</p> <div class=\"method-source-code\" id=\"refute_nil-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 592\ndef refute_nil obj, msg = nil\n  msg = message(msg) { \"Expected #{mu_pp(obj)} to not be nil\" }\n  refute obj.nil?, msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_operator\"> <span class=\"method-name\">refute_operator</span><span class=\"method-args\">(o1, op, o2 = UNDEFINED, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if <code>o1</code> is not <code>op</code> <code>o2</code>. Eg:</p> <pre class=\"ruby\">refute_operator 1, :&gt;, 2 #=&gt; pass\nrefute_operator 1, :&lt;, 2 #=&gt; fail\n</pre> <div class=\"method-source-code\" id=\"refute_operator-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 603\ndef refute_operator o1, op, o2 = UNDEFINED, msg = nil\n  return refute_predicate o1, op, msg if UNDEFINED == o2\n  msg = message(msg) { \"Expected #{mu_pp(o1)} to not be #{op} #{mu_pp(o2)}\" }\n  refute o1.__send__(op, o2), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_predicate\"> <span class=\"method-name\">refute_predicate</span><span class=\"method-args\">(o1, op, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>For testing with predicates.</p> <pre class=\"ruby\">refute_predicate str, :empty?\n</pre> <p>This is really meant for specs and is front-ended by <a href=\"assertions#method-i-refute_operator\">#refute_operator</a>:</p> <pre class=\"ruby\">str.wont_be :empty?\n</pre> <div class=\"method-source-code\" id=\"refute_predicate-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 618\ndef refute_predicate o1, op, msg = nil\n  msg = message(msg) { \"Expected #{mu_pp(o1)} to not be #{op}\" }\n  refute o1.__send__(op), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_respond_to\"> <span class=\"method-name\">refute_respond_to</span><span class=\"method-args\">(obj, meth, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if <code>obj</code> responds to the message <code>meth</code>.</p> <div class=\"method-source-code\" id=\"refute_respond_to-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 626\ndef refute_respond_to obj, meth, msg = nil\n  msg = message(msg) { \"Expected #{mu_pp(obj)} to not respond to #{meth}\" }\n\n  refute obj.respond_to?(meth), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refute_same\"> <span class=\"method-name\">refute_same</span><span class=\"method-args\">(exp, act, msg = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if <code>exp</code> is the same (by object identity) as <code>act</code>.</p> <div class=\"method-source-code\" id=\"refute_same-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 635\ndef refute_same exp, act, msg = nil\n  msg = message(msg) {\n    data = [mu_pp(act), act.object_id, mu_pp(exp), exp.object_id]\n    \"Expected %s (oid=%d) to not be the same as %s (oid=%d)\" % data\n  }\n  refute exp.equal?(act), msg\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-skip\"> <span class=\"method-name\">skip</span><span class=\"method-args\">(msg = nil, bt = caller)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Skips the current run. If run in verbose-mode, the skipped run gets listed at the end of the run but doesn't cause a failure exit code.</p> <div class=\"method-source-code\" id=\"skip-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 648\ndef skip msg = nil, bt = caller\n  msg ||= \"Skipped, no message given\"\n  @skip = true\n  raise Minitest::Skip, msg, bt\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-skipped-3F\"> <span class=\"method-name\">skipped?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Was this testcase skipped? Meant for teardown.</p> <div class=\"method-source-code\" id=\"skipped-3F-source\"> <pre class=\"ruby\"># File lib/minitest/assertions.rb, line 657\ndef skipped?\n  defined?(@skip) and @skip\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/benchspec":"<h1 id=\"class-Minitest::BenchSpec\" class=\"class\"> class Minitest::BenchSpec </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"benchmark\">Minitest::Benchmark</a></dd>\n</dl> <section class=\"description\"> <p>The spec version of <a href=\"benchmark\">Minitest::Benchmark</a>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-bench\"> <span class=\"method-name\">bench</span><span class=\"method-args\">(name, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This is used to define a new benchmark method. You usually don't use this directly and is intended for those needing to write new performance curve fits (eg: you need a specific polynomial fit).</p> <p>See <a href=\"benchspec#method-c-bench_performance_linear\">::bench_performance_linear</a> for an example of how to use this.</p> <div class=\"method-source-code\" id=\"bench-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 358\ndef self.bench name, &amp;block\n  define_method \"bench_#{name.gsub(/\\W+/, \"_\")}\", &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-bench_performance_constant\"> <span class=\"method-name\">bench_performance_constant</span><span class=\"method-args\">(name, threshold = 0.99, &amp;work)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a benchmark that verifies that the performance is constant.</p> <pre class=\"ruby\">describe \"my class Bench\" do\n  bench_performance_constant \"zoom_algorithm!\" do |n|\n    @obj.zoom_algorithm!(n)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"bench_performance_constant-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 402\ndef self.bench_performance_constant name, threshold = 0.99, &amp;work\n  bench name do\n    assert_performance_constant threshold, &amp;work\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-bench_performance_exponential\"> <span class=\"method-name\">bench_performance_exponential</span><span class=\"method-args\">(name, threshold = 0.99, &amp;work)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a benchmark that verifies that the performance is exponential.</p> <pre class=\"ruby\">describe \"my class Bench\" do\n  bench_performance_exponential \"algorithm\" do |n|\n    @obj.algorithm(n)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"bench_performance_exponential-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 417\ndef self.bench_performance_exponential name, threshold = 0.99, &amp;work\n  bench name do\n    assert_performance_exponential threshold, &amp;work\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-bench_performance_linear\"> <span class=\"method-name\">bench_performance_linear</span><span class=\"method-args\">(name, threshold = 0.99, &amp;work)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a benchmark that verifies that the performance is linear.</p> <pre class=\"ruby\">describe \"my class Bench\" do\n  bench_performance_linear \"fast_algorithm\", 0.9999 do |n|\n    @obj.fast_algorithm(n)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"bench_performance_linear-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 387\ndef self.bench_performance_linear name, threshold = 0.99, &amp;work\n  bench name do\n    assert_performance_linear threshold, &amp;work\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-bench_range\"> <span class=\"method-name\">bench_range</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies the ranges used for benchmarking for that class.</p> <pre class=\"ruby\">bench_range do\n  bench_exp(2, 16, 2)\nend\n</pre> <p>See Minitest::Benchmark#bench_range for more details.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"benchmark#method-c-bench_range\">Minitest::Benchmark.bench_range</a> </div> <div class=\"method-source-code\" id=\"bench_range-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 371\ndef self.bench_range &amp;block\n  return super unless block\n\n  meta = (class &lt;&lt; self; self; end)\n  meta.send :define_method, \"bench_range\", &amp;block\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/benchmark":"<h1 id=\"class-Minitest::Benchmark\" class=\"class\"> class Minitest::Benchmark </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Test</dd>\n</dl> <section class=\"description\"> <p>Subclass <a href=\"benchmark\">Benchmark</a> to create your own benchmark runs. Methods starting with “bench_” get executed on a per-class.</p> <p>See <a href=\"assertions\">Minitest::Assertions</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-bench_exp\"> <span class=\"method-name\">bench_exp</span><span class=\"method-args\">(min, max, base = 10)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a set of ranges stepped exponentially from <code>min</code> to <code>max</code> by powers of <code>base</code>. Eg:</p> <pre class=\"ruby\">bench_exp(2, 16, 2) # =&gt; [2, 4, 8, 16]\n</pre> <div class=\"method-source-code\" id=\"bench_exp-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 36\ndef self.bench_exp min, max, base = 10\n  min = (Math.log10(min) / Math.log10(base)).to_i\n  max = (Math.log10(max) / Math.log10(base)).to_i\n\n  (min..max).map { |m| base ** m }.to_a\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-bench_linear\"> <span class=\"method-name\">bench_linear</span><span class=\"method-args\">(min, max, step = 10)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a set of ranges stepped linearly from <code>min</code> to <code>max</code> by <code>step</code>. Eg:</p> <pre class=\"ruby\">bench_linear(20, 40, 10) # =&gt; [20, 30, 40]\n</pre> <div class=\"method-source-code\" id=\"bench_linear-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 49\ndef self.bench_linear min, max, step = 10\n  (min..max).step(step).to_a\nrescue LocalJumpError # 1.8.6\n  r = []; (min..max).step(step) { |n| r &lt;&lt; n }; r\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-bench_range\"> <span class=\"method-name\">bench_range</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies the ranges used for benchmarking for that class. Defaults to exponential growth from 1 to 10k by powers of 10. Override if you need different ranges for your benchmarks.</p> <p>See also: <a href=\"benchmark#method-c-bench_exp\">::bench_exp</a> and <a href=\"benchmark#method-c-bench_linear\">::bench_linear</a>.</p> <div class=\"method-source-code\" id=\"bench_range-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 62\ndef self.bench_range\n  bench_exp 1, 10_000\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_performance\"> <span class=\"method-name\">assert_performance</span><span class=\"method-args\">(validation, &amp;work)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs the given <code>work</code>, gathering the times of each run. Range and times are then passed to a given <code>validation</code> proc. Outputs the benchmark name and times in tab-separated format, making it easy to paste into a spreadsheet for graphing or further analysis.</p> <p>Ranges are specified by <a href=\"benchmark#method-c-bench_range\">::bench_range</a>.</p> <p>Eg:</p> <pre>def bench_algorithm\n  validation = proc { |x, y| ... }\n  assert_performance validation do |n|\n    @obj.algorithm(n)\n  end\nend</pre> <div class=\"method-source-code\" id=\"assert_performance-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 84\ndef assert_performance validation, &amp;work\n  range = self.class.bench_range\n\n  io.print \"#{self.name}\"\n\n  times = []\n\n  range.each do |x|\n    GC.start\n    t0 = Minitest.clock_time\n    instance_exec(x, &amp;work)\n    t = Minitest.clock_time - t0\n\n    io.print \"\\t%9.6f\" % t\n    times &lt;&lt; t\n  end\n  io.puts\n\n  validation[range, times]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_performance_constant\"> <span class=\"method-name\">assert_performance_constant</span><span class=\"method-args\">(threshold = 0.99, &amp;work)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs the given <code>work</code> and asserts that the times gathered fit to match a constant rate (eg, linear slope == 0) within a given <code>threshold</code>. Note: because we're testing for a slope of 0, R^2 is not a good determining factor for the fit, so the threshold is applied against the slope itself. As such, you probably want to tighten it from the default.</p> <p>See <a href=\"http://www.graphpad.com/curvefit/goodness_of_fit.htm\">www.graphpad.com/curvefit/goodness_of_fit.htm</a> for more details.</p> <p>Fit is calculated by <a href=\"benchmark#method-i-fit_linear\">fit_linear</a>.</p> <p>Ranges are specified by <a href=\"benchmark#method-c-bench_range\">::bench_range</a>.</p> <p>Eg:</p> <pre class=\"ruby\">def bench_algorithm\n  assert_performance_constant 0.9999 do |n|\n    @obj.algorithm(n)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_performance_constant-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 128\ndef assert_performance_constant threshold = 0.99, &amp;work\n  validation = proc do |range, times|\n    a, b, rr = fit_linear range, times\n    assert_in_delta 0, b, 1 - threshold\n    [a, b, rr]\n  end\n\n  assert_performance validation, &amp;work\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_performance_exponential\"> <span class=\"method-name\">assert_performance_exponential</span><span class=\"method-args\">(threshold = 0.99, &amp;work)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs the given <code>work</code> and asserts that the times gathered fit to match a exponential curve within a given error <code>threshold</code>.</p> <p>Fit is calculated by <a href=\"benchmark#method-i-fit_exponential\">fit_exponential</a>.</p> <p>Ranges are specified by <a href=\"benchmark#method-c-bench_range\">::bench_range</a>.</p> <p>Eg:</p> <pre class=\"ruby\">def bench_algorithm\n  assert_performance_exponential 0.9999 do |n|\n    @obj.algorithm(n)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_performance_exponential-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 154\ndef assert_performance_exponential threshold = 0.99, &amp;work\n  assert_performance validation_for_fit(:exponential, threshold), &amp;work\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_performance_linear\"> <span class=\"method-name\">assert_performance_linear</span><span class=\"method-args\">(threshold = 0.99, &amp;work)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs the given <code>work</code> and asserts that the times gathered fit to match a straight line within a given error <code>threshold</code>.</p> <p>Fit is calculated by <a href=\"benchmark#method-i-fit_linear\">fit_linear</a>.</p> <p>Ranges are specified by <a href=\"benchmark#method-c-bench_range\">::bench_range</a>.</p> <p>Eg:</p> <pre class=\"ruby\">def bench_algorithm\n  assert_performance_linear 0.9999 do |n|\n    @obj.algorithm(n)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_performance_linear-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 194\ndef assert_performance_linear threshold = 0.99, &amp;work\n  assert_performance validation_for_fit(:linear, threshold), &amp;work\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_performance_logarithmic\"> <span class=\"method-name\">assert_performance_logarithmic</span><span class=\"method-args\">(threshold = 0.99, &amp;work)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs the given <code>work</code> and asserts that the times gathered fit to match a logarithmic curve within a given error <code>threshold</code>.</p> <p>Fit is calculated by <a href=\"benchmark#method-i-fit_logarithmic\">fit_logarithmic</a>.</p> <p>Ranges are specified by <a href=\"benchmark#method-c-bench_range\">::bench_range</a>.</p> <p>Eg:</p> <pre class=\"ruby\">def bench_algorithm\n  assert_performance_logarithmic 0.9999 do |n|\n    @obj.algorithm(n)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_performance_logarithmic-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 174\ndef assert_performance_logarithmic threshold = 0.99, &amp;work\n  assert_performance validation_for_fit(:logarithmic, threshold), &amp;work\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_performance_power\"> <span class=\"method-name\">assert_performance_power</span><span class=\"method-args\">(threshold = 0.99, &amp;work)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs the given <code>work</code> and asserts that the times gathered curve fit to match a power curve within a given error <code>threshold</code>.</p> <p>Fit is calculated by <a href=\"benchmark#method-i-fit_power\">fit_power</a>.</p> <p>Ranges are specified by <a href=\"benchmark#method-c-bench_range\">::bench_range</a>.</p> <p>Eg:</p> <pre class=\"ruby\">def bench_algorithm\n  assert_performance_power 0.9999 do |x|\n    @obj.algorithm\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_performance_power-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 214\ndef assert_performance_power threshold = 0.99, &amp;work\n  assert_performance validation_for_fit(:power, threshold), &amp;work\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fit_error\"> <span class=\"method-name\">fit_error</span><span class=\"method-args\">(xys) { |x| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Takes an array of x/y pairs and calculates the general R^2 value.</p> <p>See: <a href=\"http://en.wikipedia.org/wiki/Coefficient_of_determination\">en.wikipedia.org/wiki/Coefficient_of_determination</a></p> <div class=\"method-source-code\" id=\"fit_error-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 223\ndef fit_error xys\n  y_bar  = sigma(xys) { |_, y| y } / xys.size.to_f\n  ss_tot = sigma(xys) { |_, y| (y    - y_bar) ** 2 }\n  ss_err = sigma(xys) { |x, y| (yield(x) - y) ** 2 }\n\n  1 - (ss_err / ss_tot)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fit_exponential\"> <span class=\"method-name\">fit_exponential</span><span class=\"method-args\">(xs, ys)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>To fit a functional form: y = ae^(bx).</p> <p>Takes x and y values and returns [a, b, r^2].</p> <p>See: <a href=\"http://mathworld.wolfram.com/LeastSquaresFittingExponential.html\">mathworld.wolfram.com/LeastSquaresFittingExponential.html</a></p> <div class=\"method-source-code\" id=\"fit_exponential-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 238\ndef fit_exponential xs, ys\n  n     = xs.size\n  xys   = xs.zip(ys)\n  sxlny = sigma(xys) { |x, y| x * Math.log(y) }\n  slny  = sigma(xys) { |_, y| Math.log(y)     }\n  sx2   = sigma(xys) { |x, _| x * x           }\n  sx    = sigma xs\n\n  c = n * sx2 - sx ** 2\n  a = (slny * sx2 - sx * sxlny) / c\n  b = ( n * sxlny - sx * slny ) / c\n\n  return Math.exp(a), b, fit_error(xys) { |x| Math.exp(a + b * x) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fit_linear\"> <span class=\"method-name\">fit_linear</span><span class=\"method-args\">(xs, ys)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fits the functional form: a + bx.</p> <p>Takes x and y values and returns [a, b, r^2].</p> <p>See: <a href=\"http://mathworld.wolfram.com/LeastSquaresFitting.html\">mathworld.wolfram.com/LeastSquaresFitting.html</a></p> <div class=\"method-source-code\" id=\"fit_linear-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 282\ndef fit_linear xs, ys\n  n   = xs.size\n  xys = xs.zip(ys)\n  sx  = sigma xs\n  sy  = sigma ys\n  sx2 = sigma(xs)  { |x|   x ** 2 }\n  sxy = sigma(xys) { |x, y| x * y  }\n\n  c = n * sx2 - sx**2\n  a = (sy * sx2 - sx * sxy) / c\n  b = ( n * sxy - sx * sy ) / c\n\n  return a, b, fit_error(xys) { |x| a + b * x }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fit_logarithmic\"> <span class=\"method-name\">fit_logarithmic</span><span class=\"method-args\">(xs, ys)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>To fit a functional form: y = a + b*ln(x).</p> <p>Takes x and y values and returns [a, b, r^2].</p> <p>See: <a href=\"http://mathworld.wolfram.com/LeastSquaresFittingLogarithmic.html\">mathworld.wolfram.com/LeastSquaresFittingLogarithmic.html</a></p> <div class=\"method-source-code\" id=\"fit_logarithmic-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 260\ndef fit_logarithmic xs, ys\n  n     = xs.size\n  xys   = xs.zip(ys)\n  slnx2 = sigma(xys) { |x, _| Math.log(x) ** 2 }\n  slnx  = sigma(xys) { |x, _| Math.log(x)      }\n  sylnx = sigma(xys) { |x, y| y * Math.log(x)  }\n  sy    = sigma(xys) { |_, y| y                }\n\n  c = n * slnx2 - slnx ** 2\n  b = ( n * sylnx - sy * slnx ) / c\n  a = (sy - b * slnx) / n\n\n  return a, b, fit_error(xys) { |x| a + b * Math.log(x) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fit_power\"> <span class=\"method-name\">fit_power</span><span class=\"method-args\">(xs, ys)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>To fit a functional form: y = ax^b.</p> <p>Takes x and y values and returns [a, b, r^2].</p> <p>See: <a href=\"http://mathworld.wolfram.com/LeastSquaresFittingPowerLaw.html\">mathworld.wolfram.com/LeastSquaresFittingPowerLaw.html</a></p> <div class=\"method-source-code\" id=\"fit_power-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 304\ndef fit_power xs, ys\n  n       = xs.size\n  xys     = xs.zip(ys)\n  slnxlny = sigma(xys) { |x, y| Math.log(x) * Math.log(y) }\n  slnx    = sigma(xs)  { |x   | Math.log(x)               }\n  slny    = sigma(ys)  { |   y| Math.log(y)               }\n  slnx2   = sigma(xs)  { |x   | Math.log(x) ** 2          }\n\n  b = (n * slnxlny - slnx * slny) / (n * slnx2 - slnx ** 2)\n  a = (slny - b * slnx) / n\n\n  return Math.exp(a), b, fit_error(xys) { |x| (Math.exp(a) * (x ** b)) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sigma\"> <span class=\"method-name\">sigma</span><span class=\"method-args\">(enum, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Enumerates over <code>enum</code> mapping <code>block</code> if given, returning the sum of the result. Eg:</p> <pre class=\"ruby\">sigma([1, 2, 3])                # =&gt; 1 + 2 + 3 =&gt; 7\nsigma([1, 2, 3]) { |n| n ** 2 } # =&gt; 1 + 4 + 9 =&gt; 14\n</pre> <div class=\"method-source-code\" id=\"sigma-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 325\ndef sigma enum, &amp;block\n  enum = enum.map(&amp;block) if block\n  enum.inject { |sum, n| sum + n }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validation_for_fit\"> <span class=\"method-name\">validation_for_fit</span><span class=\"method-args\">(msg, threshold)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a proc that calls the specified fit method and asserts that the error is within a tolerable threshold.</p> <div class=\"method-source-code\" id=\"validation_for_fit-source\"> <pre class=\"ruby\"># File lib/minitest/benchmark.rb, line 334\ndef validation_for_fit msg, threshold\n  proc do |range, times|\n    a, b, rr = send \"fit_#{msg}\", range, times\n    assert_operator rr, :&gt;=, threshold\n    [a, b, rr]\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/compositereporter":"<h1 id=\"class-Minitest::CompositeReporter\" class=\"class\"> class Minitest::CompositeReporter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"abstractreporter\">Minitest::AbstractReporter</a></dd>\n</dl> <section class=\"description\"> <p>Dispatch to multiple reporters as one.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-reporters\"> <span class=\"method-name\">reporters</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The list of reporters to dispatch to.</p> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3C-3C\"> <span class=\"method-name\">&lt;&lt;</span><span class=\"method-args\">(reporter)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add another reporter to the mix.</p> <div class=\"method-source-code\" id=\"3C-3C-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 621\ndef &lt;&lt; reporter\n  self.reporters &lt;&lt; reporter\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/expectations":"<h1 id=\"module-Minitest::Expectations\" class=\"module\"> module Minitest::Expectations </h1> <section class=\"description\"> <p>It's where you hide your “assertions”.</p> <p>Please note, because of the way that expectations are implemented, all expectations (eg <a href=\"expectations#method-i-must_equal\">#must_equal</a>) are dependent upon a thread local variable <code>:current_spec</code>. If your specs rely on mixing threads into the specs themselves, you're better off using assertions or the new _(value) wrapper. For example:</p> <pre class=\"ruby\">it \"should still work in threads\" do\n  my_threaded_thingy do\n    (1+1).must_equal 2         # bad\n    assert_equal 2, 1+1        # good\n    _(1 + 1).must_equal 2      # good\n    value(1 + 1).must_equal 2  # good, also #expect\n  end\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_be\"> <span class=\"method-name\">must_be</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_operator\">Minitest::Assertions#assert_operator</a></p> <pre class=\"ruby\">n.must_be :&lt;=, 42\n</pre> <p>This can also do predicates:</p> <pre class=\"ruby\">str.must_be :empty?\n</pre> <div class=\"method-source-code\" id=\"must_be-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 115\ninfect_an_assertion :assert_operator, :must_be, :reverse\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_be_close_to\"> <span class=\"method-name\">must_be_close_to</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_in_delta\">Minitest::Assertions#assert_in_delta</a></p> <pre>n.must_be_close_to m [, delta]</pre> <div class=\"method-source-code\" id=\"must_be_close_to-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 46\ninfect_an_assertion :assert_in_delta, :must_be_close_to\n</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"expectations#method-i-must_be_within_delta\">must_be_within_delta</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_be_empty\"> <span class=\"method-name\">must_be_empty</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_empty\">Minitest::Assertions#assert_empty</a>.</p> <pre class=\"ruby\">collection.must_be_empty\n</pre> <div class=\"method-source-code\" id=\"must_be_empty-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 28\ninfect_an_assertion :assert_empty, :must_be_empty, :unary\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_be_instance_of\"> <span class=\"method-name\">must_be_instance_of</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_instance_of\">Minitest::Assertions#assert_instance_of</a></p> <pre class=\"ruby\">obj.must_be_instance_of klass\n</pre> <div class=\"method-source-code\" id=\"must_be_instance_of-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 75\ninfect_an_assertion :assert_instance_of, :must_be_instance_of\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_be_kind_of\"> <span class=\"method-name\">must_be_kind_of</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_kind_of\">Minitest::Assertions#assert_kind_of</a></p> <pre class=\"ruby\">obj.must_be_kind_of mod\n</pre> <div class=\"method-source-code\" id=\"must_be_kind_of-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 84\ninfect_an_assertion :assert_kind_of, :must_be_kind_of\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_be_nil\"> <span class=\"method-name\">must_be_nil</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_nil\">Minitest::Assertions#assert_nil</a></p> <pre class=\"ruby\">obj.must_be_nil\n</pre> <div class=\"method-source-code\" id=\"must_be_nil-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 102\ninfect_an_assertion :assert_nil, :must_be_nil, :unary\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_be_same_as\"> <span class=\"method-name\">must_be_same_as</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_same\">Minitest::Assertions#assert_same</a></p> <pre class=\"ruby\">a.must_be_same_as b\n</pre> <div class=\"method-source-code\" id=\"must_be_same_as-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 151\ninfect_an_assertion :assert_same, :must_be_same_as\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_be_silent\"> <span class=\"method-name\">must_be_silent</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_silent\">Minitest::Assertions#assert_silent</a></p> <pre>proc { ... }.must_be_silent</pre> <div class=\"method-source-code\" id=\"must_be_silent-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 160\ninfect_an_assertion :assert_silent, :must_be_silent, :block\n</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-must_be_within_delta\"> <span class=\"method-name\">must_be_within_delta</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"expectations#method-i-must_be_close_to\">must_be_close_to</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_be_within_epsilon\"> <span class=\"method-name\">must_be_within_epsilon</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_in_epsilon\">Minitest::Assertions#assert_in_epsilon</a></p> <pre>n.must_be_within_epsilon m [, epsilon]</pre> <div class=\"method-source-code\" id=\"must_be_within_epsilon-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 57\ninfect_an_assertion :assert_in_epsilon, :must_be_within_epsilon\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_equal\"> <span class=\"method-name\">must_equal</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_equal\">Minitest::Assertions#assert_equal</a></p> <pre class=\"ruby\">a.must_equal b\n</pre> <div class=\"method-source-code\" id=\"must_equal-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 37\ninfect_an_assertion :assert_equal, :must_equal\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_include\"> <span class=\"method-name\">must_include</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_includes\">Minitest::Assertions#assert_includes</a></p> <pre class=\"ruby\">collection.must_include obj\n</pre> <div class=\"method-source-code\" id=\"must_include-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 66\ninfect_an_assertion :assert_includes, :must_include, :reverse\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_match\"> <span class=\"method-name\">must_match</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_match\">Minitest::Assertions#assert_match</a></p> <pre class=\"ruby\">a.must_match b\n</pre> <div class=\"method-source-code\" id=\"must_match-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 93\ninfect_an_assertion :assert_match, :must_match\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_output\"> <span class=\"method-name\">must_output</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_output\">Minitest::Assertions#assert_output</a></p> <pre>proc { ... }.must_output out_or_nil [, err]</pre> <div class=\"method-source-code\" id=\"must_output-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 124\ninfect_an_assertion :assert_output, :must_output, :block\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_raise\"> <span class=\"method-name\">must_raise</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_raises\">Minitest::Assertions#assert_raises</a></p> <pre>proc { ... }.must_raise exception</pre> <div class=\"method-source-code\" id=\"must_raise-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 133\ninfect_an_assertion :assert_raises, :must_raise, :block\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_respond_to\"> <span class=\"method-name\">must_respond_to</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_respond_to\">Minitest::Assertions#assert_respond_to</a></p> <pre class=\"ruby\">obj.must_respond_to msg\n</pre> <div class=\"method-source-code\" id=\"must_respond_to-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 142\ninfect_an_assertion :assert_respond_to, :must_respond_to, :reverse\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-must_throw\"> <span class=\"method-name\">must_throw</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-assert_throws\">Minitest::Assertions#assert_throws</a></p> <pre>proc { ... }.must_throw sym</pre> <div class=\"method-source-code\" id=\"must_throw-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 169\ninfect_an_assertion :assert_throws, :must_throw, :block\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wont_be\"> <span class=\"method-name\">wont_be</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-refute_operator\">Minitest::Assertions#refute_operator</a></p> <pre class=\"ruby\">n.wont_be :&lt;=, 42\n</pre> <p>This can also do predicates:</p> <pre class=\"ruby\">str.wont_be :empty?\n</pre> <div class=\"method-source-code\" id=\"wont_be-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 265\ninfect_an_assertion :refute_operator, :wont_be, :reverse\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wont_be_close_to\"> <span class=\"method-name\">wont_be_close_to</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-refute_in_delta\">Minitest::Assertions#refute_in_delta</a></p> <pre>n.wont_be_close_to m [, delta]</pre> <div class=\"method-source-code\" id=\"wont_be_close_to-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 196\ninfect_an_assertion :refute_in_delta, :wont_be_close_to\n</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"expectations#method-i-wont_be_within_delta\">wont_be_within_delta</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wont_be_empty\"> <span class=\"method-name\">wont_be_empty</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-refute_empty\">Minitest::Assertions#refute_empty</a></p> <pre class=\"ruby\">collection.wont_be_empty\n</pre> <div class=\"method-source-code\" id=\"wont_be_empty-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 178\ninfect_an_assertion :refute_empty, :wont_be_empty, :unary\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wont_be_instance_of\"> <span class=\"method-name\">wont_be_instance_of</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-refute_instance_of\">Minitest::Assertions#refute_instance_of</a></p> <pre class=\"ruby\">obj.wont_be_instance_of klass\n</pre> <div class=\"method-source-code\" id=\"wont_be_instance_of-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 225\ninfect_an_assertion :refute_instance_of, :wont_be_instance_of\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wont_be_kind_of\"> <span class=\"method-name\">wont_be_kind_of</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-refute_kind_of\">Minitest::Assertions#refute_kind_of</a></p> <pre class=\"ruby\">obj.wont_be_kind_of mod\n</pre> <div class=\"method-source-code\" id=\"wont_be_kind_of-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 234\ninfect_an_assertion :refute_kind_of, :wont_be_kind_of\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wont_be_nil\"> <span class=\"method-name\">wont_be_nil</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-refute_nil\">Minitest::Assertions#refute_nil</a></p> <pre class=\"ruby\">obj.wont_be_nil\n</pre> <div class=\"method-source-code\" id=\"wont_be_nil-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 252\ninfect_an_assertion :refute_nil, :wont_be_nil, :unary\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wont_be_same_as\"> <span class=\"method-name\">wont_be_same_as</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-refute_same\">Minitest::Assertions#refute_same</a></p> <pre class=\"ruby\">a.wont_be_same_as b\n</pre> <div class=\"method-source-code\" id=\"wont_be_same_as-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 283\ninfect_an_assertion :refute_same, :wont_be_same_as\n</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-wont_be_within_delta\"> <span class=\"method-name\">wont_be_within_delta</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"expectations#method-i-wont_be_close_to\">wont_be_close_to</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wont_be_within_epsilon\"> <span class=\"method-name\">wont_be_within_epsilon</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-refute_in_epsilon\">Minitest::Assertions#refute_in_epsilon</a></p> <pre>n.wont_be_within_epsilon m [, epsilon]</pre> <div class=\"method-source-code\" id=\"wont_be_within_epsilon-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 207\ninfect_an_assertion :refute_in_epsilon, :wont_be_within_epsilon\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wont_equal\"> <span class=\"method-name\">wont_equal</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-refute_equal\">Minitest::Assertions#refute_equal</a></p> <pre class=\"ruby\">a.wont_equal b\n</pre> <div class=\"method-source-code\" id=\"wont_equal-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 187\ninfect_an_assertion :refute_equal, :wont_equal\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wont_include\"> <span class=\"method-name\">wont_include</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-refute_includes\">Minitest::Assertions#refute_includes</a></p> <pre class=\"ruby\">collection.wont_include obj\n</pre> <div class=\"method-source-code\" id=\"wont_include-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 216\ninfect_an_assertion :refute_includes, :wont_include, :reverse\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wont_match\"> <span class=\"method-name\">wont_match</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-refute_match\">Minitest::Assertions#refute_match</a></p> <pre class=\"ruby\">a.wont_match b\n</pre> <div class=\"method-source-code\" id=\"wont_match-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 243\ninfect_an_assertion :refute_match, :wont_match\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wont_respond_to\"> <span class=\"method-name\">wont_respond_to</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"assertions#method-i-refute_respond_to\">Minitest::Assertions#refute_respond_to</a></p> <pre class=\"ruby\">obj.wont_respond_to msg\n</pre> <div class=\"method-source-code\" id=\"wont_respond_to-source\"> <pre class=\"c\"># File lib/minitest/expectations.rb, line 274\ninfect_an_assertion :refute_respond_to, :wont_respond_to, :reverse\n</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/guard":"<h1 id=\"module-Minitest::Guard\" class=\"module\"> module Minitest::Guard </h1> <section class=\"description\"> <p>Provides a simple set of guards that you can use in your tests to skip execution if it is not applicable. These methods are mixed into <a href=\"test\">Test</a> as both instance and class methods so you can use them inside or outside of the test methods.</p> <pre class=\"ruby\">def test_something_for_mri\n  skip \"bug 1234\"  if jruby?\n  # ...\nend\n\nif windows? then\n  # ... lots of test methods ...\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-jruby-3F\"> <span class=\"method-name\">jruby?</span><span class=\"method-args\">(platform = RUBY_PLATFORM)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this running on jruby?</p> <div class=\"method-source-code\" id=\"jruby-3F-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 731\ndef jruby? platform = RUBY_PLATFORM\n  \"java\" == platform\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-maglev-3F\"> <span class=\"method-name\">maglev?</span><span class=\"method-args\">(platform = defined?(RUBY_ENGINE) &amp;&amp; RUBY_ENGINE)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this running on maglev?</p> <div class=\"method-source-code\" id=\"maglev-3F-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 738\ndef maglev? platform = defined?(RUBY_ENGINE) &amp;&amp; RUBY_ENGINE\n  \"maglev\" == platform\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mri-3F\"> <span class=\"method-name\">mri?</span><span class=\"method-args\">(platform = RUBY_DESCRIPTION)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this running on mri?</p> <div class=\"method-source-code\" id=\"mri-3F-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 745\ndef mri? platform = RUBY_DESCRIPTION\n  /^ruby/ =~ platform\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rubinius-3F\"> <span class=\"method-name\">rubinius?</span><span class=\"method-args\">(platform = defined?(RUBY_ENGINE) &amp;&amp; RUBY_ENGINE)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this running on rubinius?</p> <div class=\"method-source-code\" id=\"rubinius-3F-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 752\ndef rubinius? platform = defined?(RUBY_ENGINE) &amp;&amp; RUBY_ENGINE\n  \"rbx\" == platform\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-windows-3F\"> <span class=\"method-name\">windows?</span><span class=\"method-args\">(platform = RUBY_PLATFORM)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this running on windows?</p> <div class=\"method-source-code\" id=\"windows-3F-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 759\ndef windows? platform = RUBY_PLATFORM\n  /mswin|mingw/ =~ platform\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/mock":"<h1 id=\"class-Minitest::Mock\" class=\"class\"> class Minitest::Mock </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p>A simple and clean mock object framework.</p> <p>All mock objects are an instance of <a href=\"mock\">Mock</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-expect\"> <span class=\"method-name\">expect</span><span class=\"method-args\">(name, retval, args = [], &amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Expect that method <code>name</code> is called, optionally with <code>args</code> or a <code>blk</code>, and returns <code>retval</code>.</p> <pre class=\"ruby\">@mock.expect(:meaning_of_life, 42)\n@mock.meaning_of_life # =&gt; 42\n\n@mock.expect(:do_something_with, true, [some_obj, true])\n@mock.do_something_with(some_obj, true) # =&gt; true\n\n@mock.expect(:do_something_else, true) do |a1, a2|\n  a1 == \"buggs\" &amp;&amp; a2 == :bunny\nend\n</pre> <p><code>args</code> is compared to the expected args using case equality (ie, the '===' operator), allowing for less specific expectations.</p> <pre class=\"ruby\">@mock.expect(:uses_any_string, true, [String])\n@mock.uses_any_string(\"foo\") # =&gt; true\n@mock.verify  # =&gt; true\n\n@mock.expect(:uses_one_string, true, [\"foo\"])\n@mock.uses_one_string(\"bar\") # =&gt; true\n@mock.verify  # =&gt; raises MockExpectationError\n</pre> <div class=\"method-source-code\" id=\"expect-source\"> <pre class=\"ruby\"># File lib/minitest/mock.rb, line 71\ndef expect(name, retval, args = [], &amp;blk)\n  name = name.to_sym\n\n  if block_given?\n    raise ArgumentError, \"args ignored when block given\" unless args.empty?\n    @expected_calls[name] &lt;&lt; { :retval =&gt; retval, :block =&gt; blk }\n  else\n    raise ArgumentError, \"args must be an array\" unless Array === args\n    @expected_calls[name] &lt;&lt; { :retval =&gt; retval, :args =&gt; args }\n  end\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-verify\"> <span class=\"method-name\">verify</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Verify that all methods were called as expected. Raises <code>MockExpectationError</code> if the mock object was not called as expected.</p> <div class=\"method-source-code\" id=\"verify-source\"> <pre class=\"ruby\"># File lib/minitest/mock.rb, line 98\ndef verify\n  @expected_calls.each do |name, calls|\n    calls.each do |expected|\n      raise MockExpectationError, \"expected #{__call name, expected}, got [#{__call name, @actual_calls[name]}]\" if\n        @actual_calls.key?(name) and\n        not @actual_calls[name].include?(expected)\n\n      raise MockExpectationError, \"expected #{__call name, expected}\" unless\n        @actual_calls.key?(name) and\n        @actual_calls[name].include?(expected)\n    end\n  end\n  true\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/parallel/executor":"<h1 id=\"class-Minitest::Parallel::Executor\" class=\"class\"> class Minitest::Parallel::Executor </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p>The engine used to run multiple tests in parallel.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-size\"> <span class=\"method-name\">size</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>The size of the pool of workers.</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(size)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a parallel test executor of with <code>size</code> workers.</p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/minitest/parallel.rb, line 17\ndef initialize size\n  @size  = size\n  @queue = Queue.new\n  @pool  = nil\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3C-3C\"> <span class=\"method-name\">&lt;&lt;</span><span class=\"method-args\">(work;)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add a job to the queue</p> <div class=\"method-source-code\" id=\"3C-3C-source\"> <pre class=\"ruby\"># File lib/minitest/parallel.rb, line 42\ndef &lt;&lt; work; @queue &lt;&lt; work; end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-shutdown\"> <span class=\"method-name\">shutdown</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Shuts down the pool of workers by signalling them to quit and waiting for them all to finish what they're currently working on.</p> <div class=\"method-source-code\" id=\"shutdown-source\"> <pre class=\"ruby\"># File lib/minitest/parallel.rb, line 49\ndef shutdown\n  size.times { @queue &lt;&lt; nil }\n  @pool.each(&amp;:join)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-start\"> <span class=\"method-name\">start</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Start the executor</p> <div class=\"method-source-code\" id=\"start-source\"> <pre class=\"ruby\"># File lib/minitest/parallel.rb, line 26\ndef start\n  @pool  = size.times.map {\n    Thread.new(@queue) do |queue|\n      Thread.current.abort_on_exception = true\n      while (job = queue.pop)\n        klass, method, reporter = job\n        result = Minitest.run_one_method klass, method\n        reporter.synchronize { reporter.record result }\n      end\n    end\n  }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/prideio":"<h1 id=\"class-Minitest::PrideIO\" class=\"class\"> class Minitest::PrideIO </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p>Show your testing pride!</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ESC\">ESC </dt>\n<dd>\n<p>Start an escape sequence</p> </dd>\n<dt id=\"NND\">NND </dt>\n<dd>\n<p>End the escape sequence</p> </dd>\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-io\"> <span class=\"method-name\">io</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>The IO we're going to pipe through.</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-pride-21\"> <span class=\"method-name\">pride!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Activate the pride plugin. Called from both -p option and minitest/pride</p> <div class=\"method-source-code\" id=\"pride-21-source\"> <pre class=\"ruby\"># File lib/minitest/pride_plugin.rb, line 28\ndef self.pride!\n  @pride = true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-pride-3F\"> <span class=\"method-name\">pride?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Are we showing our testing pride?</p> <div class=\"method-source-code\" id=\"pride-3F-source\"> <pre class=\"ruby\"># File lib/minitest/pride_plugin.rb, line 35\ndef self.pride?\n  @pride ||= false\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pride\"> <span class=\"method-name\">pride</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Color a string.</p> <div class=\"method-source-code\" id=\"pride-source\"> <pre class=\"ruby\"># File lib/minitest/pride_plugin.rb, line 89\ndef pride string\n  string = \"*\" if string == \".\"\n  c = @colors[@index % @size]\n  @index += 1\n  \"#{ESC}#{c}m#{string}#{NND}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-print\"> <span class=\"method-name\">print</span><span class=\"method-args\">(o)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wrap print to colorize the output.</p> <div class=\"method-source-code\" id=\"print-source\"> <pre class=\"ruby\"># File lib/minitest/pride_plugin.rb, line 60\ndef print o\n  case o\n  when \".\" then\n    io.print pride o\n  when \"E\", \"F\" then\n    io.print \"#{ESC}41m#{ESC}37m#{o}#{NND}\"\n  when \"S\" then\n    io.print pride o\n  else\n    io.print o\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/pridelol":"<h1 id=\"class-Minitest::PrideLOL\" class=\"class\"> class Minitest::PrideLOL </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"prideio\">Minitest::PrideIO</a></dd>\n</dl> <section class=\"description\"> <p>If you thought the <a href=\"prideio\">PrideIO</a> was colorful…</p> <p>(Inspired by lolcat, but with clean math)</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pride\"> <span class=\"method-name\">pride</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Make the string even more colorful. Damnit.</p> <div class=\"method-source-code\" id=\"pride-source\"> <pre class=\"ruby\"># File lib/minitest/pride_plugin.rb, line 136\ndef pride string\n  c = @colors[@index % @size]\n  @index += 1\n  \"#{ESC}38;5;#{c}m#{string}#{NND}\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/progressreporter":"<h1 id=\"class-Minitest::ProgressReporter\" class=\"class\"> class Minitest::ProgressReporter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Minitest::Reporter</dd>\n</dl> <section class=\"description\"> <p>A very simple reporter that prints the “dots” during the run.</p> <p>This is added to the top-level <a href=\"compositereporter\">CompositeReporter</a> at the start of the run. If you want to change the output of minitest via a plugin, pull this out of the composite and replace it with your own.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/runnable":"<h1 id=\"class-Minitest::Runnable\" class=\"class\"> class Minitest::Runnable </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p>Represents anything “runnable”, like <a href=\"test\">Test</a>, <a href=\"spec\">Spec</a>, <a href=\"benchmark\">Benchmark</a>, or whatever you can dream up.</p> <p>Subclasses of this are automatically registered and available in <a href=\"runnable#method-c-runnables\">::runnables</a>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-assertions\"> <span class=\"method-name\">assertions</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Number of assertions executed in this run.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-failures\"> <span class=\"method-name\">failures</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>An assertion raised during the run, if any.</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-methods_matching\"> <span class=\"method-name\">methods_matching</span><span class=\"method-args\">(re)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns all instance methods matching the pattern <code>re</code>.</p> <div class=\"method-source-code\" id=\"methods_matching-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 269\ndef self.methods_matching re\n  public_instance_methods(true).grep(re).map(&amp;:to_s)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-run\"> <span class=\"method-name\">run</span><span class=\"method-args\">(reporter, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Responsible for running all runnable methods in a given class, each in its own instance. Each instance is passed to the reporter to record.</p> <div class=\"method-source-code\" id=\"run-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 284\ndef self.run reporter, options = {}\n  filter = options[:filter] || \"/./\"\n  filter = Regexp.new $1 if filter =~ %r%/(.*)/%\n\n  filtered_methods = self.runnable_methods.find_all { |m|\n    filter === m || filter === \"#{self}##{m}\"\n  }\n\n  return if filtered_methods.empty?\n\n  with_info_handler reporter do\n    filtered_methods.each do |method_name|\n      run_one_method self, method_name, reporter\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-run_one_method\"> <span class=\"method-name\">run_one_method</span><span class=\"method-args\">(klass, method_name, reporter)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs a single method and has the reporter record the result. This was considered internal API but is factored out of run so that subclasses can specialize the running of an individual test. See Minitest::ParallelTest::ClassMethods for an example.</p> <div class=\"method-source-code\" id=\"run_one_method-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 307\ndef self.run_one_method klass, method_name, reporter\n  reporter.record Minitest.run_one_method(klass, method_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-runnable_methods\"> <span class=\"method-name\">runnable_methods</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Each subclass of <a href=\"runnable\">Runnable</a> is responsible for overriding this method to return all runnable methods. See methods_matching.</p> <div class=\"method-source-code\" id=\"runnable_methods-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 343\ndef self.runnable_methods\n  raise NotImplementedError, \"subclass responsibility\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-runnables\"> <span class=\"method-name\">runnables</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns all subclasses of <a href=\"runnable\">Runnable</a>.</p> <div class=\"method-source-code\" id=\"runnables-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 350\ndef self.runnables\n  @@runnables\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-name\"> <span class=\"method-name\">name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Name of the run.</p> <div class=\"method-source-code\" id=\"name-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 250\ndef name\n  @NAME\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-name-3D\"> <span class=\"method-name\">name=</span><span class=\"method-args\">(o)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the name of the run.</p> <div class=\"method-source-code\" id=\"name-3D-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 257\ndef name= o\n  @NAME = o\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-passed-3F\"> <span class=\"method-name\">passed?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Did this run pass?</p> <p>Note: skipped runs are not considered passing, but they don't cause the process to exit non-zero.</p> <div class=\"method-source-code\" id=\"passed-3F-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 385\ndef passed?\n  raise NotImplementedError, \"subclass responsibility\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-result_code\"> <span class=\"method-name\">result_code</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a single character string to print based on the result of the run. Eg “.”, “F”, or “E”.</p> <div class=\"method-source-code\" id=\"result_code-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 393\ndef result_code\n  raise NotImplementedError, \"subclass responsibility\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-run\"> <span class=\"method-name\">run</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs a single method. Needs to return self.</p> <div class=\"method-source-code\" id=\"run-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 375\ndef run\n  raise NotImplementedError, \"subclass responsibility\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-skipped-3F\"> <span class=\"method-name\">skipped?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Was this run skipped? See <a href=\"runnable#method-i-passed-3F\">passed?</a> for more information.</p> <div class=\"method-source-code\" id=\"skipped-3F-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 400\ndef skipped?\n  raise NotImplementedError, \"subclass responsibility\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/skip":"<h1 id=\"class-Minitest::Skip\" class=\"class\"> class Minitest::Skip </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"assertion\">Minitest::Assertion</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"assertion\">Assertion</a> raised when skipping a run.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/spec":"<h1 id=\"class-Minitest::Spec\" class=\"class\"> class Minitest::Spec </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"test\">Minitest::Test</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"spec\">Minitest::Spec</a> – The faster, better, less-magical spec framework!</p> <p>For a list of expectations, see <a href=\"expectations\">Minitest::Expectations</a>.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/spec/dsl":"<h1 id=\"module-Minitest::Spec::DSL\" class=\"module\"> module Minitest::Spec::DSL </h1> <section class=\"description\"> <p>Oh look! A <a href=\"dsl\">Minitest::Spec::DSL</a> module! Eat your heart out DHH.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"TYPES\">TYPES </dt>\n<dd>\n<p>Contains pairs of matchers and <a href=\"../spec\">Spec</a> classes to be used to calculate the superclass of a top-level describe. This allows for automatically customizable spec types.</p> <p>See: <a href=\"dsl#method-i-register_spec_type\">#register_spec_type</a> and <a href=\"dsl#method-i-spec_type\">#spec_type</a></p> </dd>\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after\"> <span class=\"method-name\">after</span><span class=\"method-args\">(_type = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define an 'after' action. Inherits the way normal methods should.</p> <p>NOTE: <code>type</code> is ignored and is only there to make porting easier.</p> <p>Equivalent to Minitest::Test#teardown.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"after-source\"> <pre class=\"ruby\"># File lib/minitest/spec.rb, line 194\ndef after _type = nil, &amp;block\n  define_method :teardown do\n    self.instance_eval(&amp;block)\n    super()\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before\"> <span class=\"method-name\">before</span><span class=\"method-args\">(_type = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define a 'before' action. Inherits the way normal methods should.</p> <p>NOTE: <code>type</code> is ignored and is only there to make porting easier.</p> <p>Equivalent to Minitest::Test#setup.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"before-source\"> <pre class=\"ruby\"># File lib/minitest/spec.rb, line 180\ndef before _type = nil, &amp;block\n  define_method :setup do\n    super()\n    self.instance_eval(&amp;block)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-it\"> <span class=\"method-name\">it</span><span class=\"method-args\">(desc = \"anonymous\", &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define an expectation with name <code>desc</code>. Name gets morphed to a proper test method name. For some freakish reason, people who write specs don't like class inheritance, so this goes way out of its way to make sure that expectations aren't inherited.</p> <p>This is also aliased to <a href=\"dsl#method-i-specify\">specify</a> and doesn't require a <code>desc</code> arg.</p> <p>Hint: If you <em>do</em> want inheritance, use minitest/test. You can mix and match between assertions and expectations as much as you want.</p> <div class=\"method-source-code\" id=\"it-source\"> <pre class=\"ruby\"># File lib/minitest/spec.rb, line 212\ndef it desc = \"anonymous\", &amp;block\n  block ||= proc { skip \"(no tests defined)\" }\n\n  @specs ||= 0\n  @specs += 1\n\n  name = \"test_%04d_%s\" % [ @specs, desc ]\n\n  undef_klasses = self.children.reject { |c| c.public_method_defined? name }\n\n  define_method name, &amp;block\n\n  undef_klasses.each do |undef_klass|\n    undef_klass.send :undef_method, name\n  end\n\n  name\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"dsl#method-i-specify\">specify</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-let\"> <span class=\"method-name\">let</span><span class=\"method-args\">(name, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Essentially, define an accessor for <code>name</code> with <code>block</code>.</p> <p>Why use let instead of def? I honestly don't know.</p> <div class=\"method-source-code\" id=\"let-source\"> <pre class=\"ruby\"># File lib/minitest/spec.rb, line 236\ndef let name, &amp;block\n  name = name.to_s\n  pre, post = \"let '#{name}' cannot \", \". Please use another name.\"\n  methods = Minitest::Spec.instance_methods.map(&amp;:to_s) - %w[subject]\n  raise ArgumentError, \"#{pre}begin with 'test'#{post}\" if\n    name =~ /\\Atest/\n  raise ArgumentError, \"#{pre}override a method in Minitest::Spec#{post}\" if\n    methods.include? name\n\n  define_method name do\n    @_memoized ||= {}\n    @_memoized.fetch(name) { |k| @_memoized[k] = instance_eval(&amp;block) }\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-register_spec_type\"> <span class=\"method-name\">register_spec_type</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Register a new type of spec that matches the spec's description. This method can take either a Regexp and a spec class or a spec class and a block that takes the description and returns true if it matches.</p> <p>Eg:</p> <pre class=\"ruby\">register_spec_type(/Controller$/, Minitest::Spec::Rails)\n</pre> <p>or:</p> <pre class=\"ruby\">register_spec_type(Minitest::Spec::RailsModel) do |desc|\n  desc.superclass == ActiveRecord::Base\nend\n</pre> <div class=\"method-source-code\" id=\"register_spec_type-source\"> <pre class=\"ruby\"># File lib/minitest/spec.rb, line 135\ndef register_spec_type(*args, &amp;block)\n  if block then\n    matcher, klass = block, args.first\n  else\n    matcher, klass = *args\n  end\n  TYPES.unshift [matcher, klass]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-spec_type\"> <span class=\"method-name\">spec_type</span><span class=\"method-args\">(desc, *additional)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Figure out the spec class to use based on a spec's description. Eg:</p> <pre class=\"ruby\">spec_type(\"BlahController\") # =&gt; Minitest::Spec::Rails\n</pre> <div class=\"method-source-code\" id=\"spec_type-source\"> <pre class=\"ruby\"># File lib/minitest/spec.rb, line 149\ndef spec_type desc, *additional\n  TYPES.find { |matcher, _klass|\n    if matcher.respond_to? :call then\n      matcher.call desc, *additional\n    else\n      matcher === desc.to_s\n    end\n  }.last\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-specify\"> <span class=\"method-name\">specify</span><span class=\"method-args\">(desc = \"anonymous\", &amp;block)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"dsl#method-i-it\">it</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-subject\"> <span class=\"method-name\">subject</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Another lazy man's accessor generator. Made even more lazy by setting the name for you to <code>subject</code>.</p> <div class=\"method-source-code\" id=\"subject-source\"> <pre class=\"ruby\"># File lib/minitest/spec.rb, line 255\ndef subject &amp;block\n  let :subject, &amp;block\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/spec/dsl/instancemethods":"<h1 id=\"module-Minitest::Spec::DSL::InstanceMethods\" class=\"module\"> module Minitest::Spec::DSL::InstanceMethods </h1> <section class=\"description\"> <p>Rdoc… why are you so dumb?</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_\"> <span class=\"method-name\">_</span><span class=\"method-args\">(value = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a value monad that has all of Expectations methods available to it.</p> <p>Also aliased to <a href=\"instancemethods#method-i-value\">value</a> and <a href=\"instancemethods#method-i-expect\">expect</a> for your aesthetic pleasure:</p> <pre class=\"ruby\">     _(1 + 1).must_equal 2\n value(1 + 1).must_equal 2\nexpect(1 + 1).must_equal 2\n</pre> <p>This method of expectation-based testing is preferable to straight-expectation methods (on <span>Object</span>) because it stores its test context, bypassing our hacky use of thread-local variables.</p> <p>At some point, the methods on <span>Object</span> will be deprecated and then removed.</p> <div class=\"method-source-code\" id=\"_-source\"> <pre class=\"ruby\"># File lib/minitest/spec.rb, line 304\ndef _ value = nil, &amp;block\n  Minitest::Expectation.new block || value, self\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"instancemethods#method-i-value\">value</a>, <a href=\"instancemethods#method-i-expect\">expect</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-expect\"> <span class=\"method-name\">expect</span><span class=\"method-args\">(value = nil, &amp;block)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"instancemethods#method-i-_\">_</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-value\"> <span class=\"method-name\">value</span><span class=\"method-args\">(value = nil, &amp;block)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"instancemethods#method-i-_\">_</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/statisticsreporter":"<h1 id=\"class-Minitest::StatisticsReporter\" class=\"class\"> class Minitest::StatisticsReporter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Minitest::Reporter</dd>\n</dl> <section class=\"description\"> <p>A reporter that gathers statistics about a test run. Does not do any IO because meant to be used as a parent class for a reporter that does.</p> <p>If you want to create an entirely different type of output (eg, CI, HTML, etc), this is the place to start.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/summaryreporter":"<h1 id=\"class-Minitest::SummaryReporter\" class=\"class\"> class Minitest::SummaryReporter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"statisticsreporter\">Minitest::StatisticsReporter</a></dd>\n</dl> <section class=\"description\"> <p>A reporter that prints the header, summary, and failure details at the end of the run.</p> <p>This is added to the top-level <a href=\"compositereporter\">CompositeReporter</a> at the start of the run. If you want to change the output of minitest via a plugin, pull this out of the composite and replace it with your own.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/test":"<h1 id=\"class-Minitest::Test\" class=\"class\"> class Minitest::Test </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"runnable\">Minitest::Runnable</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"assertions\">Minitest::Assertions</a></dd>\n</dl> <section class=\"description\"> <p>Subclass <a href=\"test\">Test</a> to create your own tests. Typically you'll want a <a href=\"test\">Test</a> subclass per implementation class.</p> <p>See <a href=\"assertions\">Minitest::Assertions</a></p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/test/lifecyclehooks":"<h1 id=\"module-Minitest::Test::LifecycleHooks\" class=\"module\"> module Minitest::Test::LifecycleHooks </h1> <section class=\"description\"> <p>Provides before/after hooks for setup and teardown. These are meant for library writers, NOT for regular test authors. See <a href=\"lifecyclehooks#method-i-before_setup\">before_setup</a> for an example.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after_setup\"> <span class=\"method-name\">after_setup</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs before every test, after setup. This hook is meant for libraries to extend minitest. It is not meant to be used by test developers.</p> <p>See <a href=\"lifecyclehooks#method-i-before_setup\">before_setup</a> for an example.</p> <div class=\"method-source-code\" id=\"after_setup-source\"> <pre class=\"ruby\"># File lib/minitest/test.rb, line 177\ndef after_setup; end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after_teardown\"> <span class=\"method-name\">after_teardown</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs after every test, after teardown. This hook is meant for libraries to extend minitest. It is not meant to be used by test developers.</p> <p>See <a href=\"lifecyclehooks#method-i-before_setup\">before_setup</a> for an example.</p> <div class=\"method-source-code\" id=\"after_teardown-source\"> <pre class=\"ruby\"># File lib/minitest/test.rb, line 201\ndef after_teardown; end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before_setup\"> <span class=\"method-name\">before_setup</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs before every test, before setup. This hook is meant for libraries to extend minitest. It is not meant to be used by test developers.</p> <p>As a simplistic example:</p> <pre class=\"ruby\">module MyMinitestPlugin\n  def before_setup\n    super\n    # ... stuff to do before setup is run\n  end\n\n  def after_setup\n    # ... stuff to do after setup is run\n    super\n  end\n\n  def before_teardown\n    super\n    # ... stuff to do before teardown is run\n  end\n\n  def after_teardown\n    # ... stuff to do after teardown is run\n    super\n  end\nend\n\nclass MiniTest::Test\n  include MyMinitestPlugin\nend\n</pre> <div class=\"method-source-code\" id=\"before_setup-source\"> <pre class=\"ruby\"># File lib/minitest/test.rb, line 162\ndef before_setup; end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before_teardown\"> <span class=\"method-name\">before_teardown</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs after every test, before teardown. This hook is meant for libraries to extend minitest. It is not meant to be used by test developers.</p> <p>See <a href=\"lifecyclehooks#method-i-before_setup\">before_setup</a> for an example.</p> <div class=\"method-source-code\" id=\"before_teardown-source\"> <pre class=\"ruby\"># File lib/minitest/test.rb, line 186\ndef before_teardown; end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-setup\"> <span class=\"method-name\">setup</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs before every test. Use this to set up before each test run.</p> <div class=\"method-source-code\" id=\"setup-source\"> <pre class=\"ruby\"># File lib/minitest/test.rb, line 168\ndef setup; end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-teardown\"> <span class=\"method-name\">teardown</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs after every test. Use this to clean up after each test run.</p> <div class=\"method-source-code\" id=\"teardown-source\"> <pre class=\"ruby\"># File lib/minitest/test.rb, line 192\ndef teardown; end</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest/unexpectederror":"<h1 id=\"class-Minitest::UnexpectedError\" class=\"class\"> class Minitest::UnexpectedError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"assertion\">Minitest::Assertion</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"assertion\">Assertion</a> wrapping an unexpected error that was raised during a run.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","minitest":"<h1 id=\"module-Minitest\" class=\"module\"> module Minitest </h1> <section class=\"description\"> <h1 id=\"module-Minitest-label-minitest-2F-7Bunit-2Cspec-2Cmock-2Cbenchmark-7D\">minitest/{unit,spec,mock,benchmark}</h1> <dl class=\"rdoc-list note-list\">\n<dt>home </dt>\n<dd> <p><a href=\"https://github.com/seattlerb/minitest\">github.com/seattlerb/minitest</a></p> </dd>\n<dt>bugs </dt>\n<dd> <p><a href=\"https://github.com/seattlerb/minitest/issues\">github.com/seattlerb/minitest/issues</a></p> </dd>\n<dt>rdoc </dt>\n<dd> <p><a href=\"http://docs.seattlerb.org/minitest\">docs.seattlerb.org/minitest</a></p> </dd>\n<dt>vim </dt>\n<dd> <p><a href=\"https://github.com/sunaku/vim-ruby-minitest\">github.com/sunaku/vim-ruby-minitest</a></p> </dd>\n<dt>emacs </dt>\n<dd> <p><a href=\"https://github.com/arthurnn/minitest-emacs\">github.com/arthurnn/minitest-emacs</a></p> </dd>\n</dl> <h2 id=\"module-Minitest-label-DESCRIPTION-3A\">DESCRIPTION:</h2> <p>minitest provides a complete suite of testing facilities supporting TDD, BDD, mocking, and benchmarking.</p> <pre>\"I had a class with Jim Weirich on testing last week and we were\n allowed to choose our testing frameworks. Kirk Haines and I were\n paired up and we cracked open the code for a few test\n frameworks...\n\n I MUST say that minitest is *very* readable / understandable\n compared to the 'other two' options we looked at. Nicely done and\n thank you for helping us keep our mental sanity.\"\n\n-- Wayne E. Seguin</pre> <p>minitest/unit is a small and incredibly fast unit testing framework. It provides a rich set of assertions to make your tests clean and readable.</p> <p>minitest/spec is a functionally complete spec engine. It hooks onto minitest/unit and seamlessly bridges test assertions over to spec expectations.</p> <p>minitest/benchmark is an awesome way to assert the performance of your algorithms in a repeatable manner. Now you can assert that your newb co-worker doesn't replace your linear algorithm with an exponential one!</p> <p>minitest/mock by Steven Baker, is a beautifully tiny mock (and stub) object framework.</p> <p>minitest/pride shows pride in testing and adds coloring to your test output. I guess it is an example of how to write IO pipes too. :P</p> <p>minitest/unit is meant to have a clean implementation for language implementors that need a minimal set of methods to bootstrap a working test suite. For example, there is no magic involved for test-case discovery.</p> <pre>\"Again, I can't praise enough the idea of a testing/specing\n framework that I can actually read in full in one sitting!\"\n\n-- Piotr Szotkowski</pre> <p>Comparing to rspec:</p> <pre>rspec is a testing DSL. minitest is ruby.\n\n-- Adam Hawkins, \"Bow Before MiniTest\"</pre> <p>minitest doesn't reinvent anything that ruby already provides, like: classes, modules, inheritance, methods. This means you only have to learn ruby to use minitest and all of your regular OO practices like extract-method refactorings still apply.</p> <h2 id=\"module-Minitest-label-FEATURES-2FPROBLEMS-3A\">FEATURES/PROBLEMS:</h2> <ul>\n<li> <p>minitest/autorun - the easy and explicit way to run all your tests.</p> </li>\n<li> <p>minitest/unit - a very fast, simple, and clean test system.</p> </li>\n<li> <p>minitest/spec - a very fast, simple, and clean spec system.</p> </li>\n<li> <p>minitest/mock - a simple and clean mock/stub system.</p> </li>\n<li> <p>minitest/benchmark - an awesome way to assert your algorithm's performance.</p> </li>\n<li> <p>minitest/pride - show your pride in testing!</p> </li>\n<li> <p>Incredibly small and fast runner, but no bells and whistles.</p> </li>\n</ul> <h2 id=\"module-Minitest-label-RATIONALE-3A\">RATIONALE:</h2> <p>See design_rationale.rb to see how specs and tests work in minitest.</p> <h2 id=\"module-Minitest-label-SYNOPSIS-3A\">SYNOPSIS:</h2> <p>Given that you'd like to test the following class:</p> <pre class=\"ruby\">class Meme\n  def i_can_has_cheezburger?\n    \"OHAI!\"\n  end\n\n  def will_it_blend?\n    \"YES!\"\n  end\nend\n</pre> <h3 id=\"module-Minitest-label-Unit+tests\">Unit tests</h3> <p>Define your tests as methods beginning with `test_`.</p> <pre class=\"ruby\">require \"minitest/autorun\"\n\nclass TestMeme &lt; Minitest::Test\n  def setup\n    @meme = Meme.new\n  end\n\n  def test_that_kitty_can_eat\n    assert_equal \"OHAI!\", @meme.i_can_has_cheezburger?\n  end\n\n  def test_that_it_will_not_blend\n    refute_match /^no/i, @meme.will_it_blend?\n  end\n\n  def test_that_will_be_skipped\n    skip \"test this later\"\n  end\nend\n</pre> <h3 id=\"module-Minitest-label-Specs\">Specs</h3> <pre class=\"ruby\">require \"minitest/autorun\"\n\ndescribe Meme do\n  before do\n    @meme = Meme.new\n  end\n\n  describe \"when asked about cheeseburgers\" do\n    it \"must respond positively\" do\n      @meme.i_can_has_cheezburger?.must_equal \"OHAI!\"\n    end\n  end\n\n  describe \"when asked about blending possibilities\" do\n    it \"won't say no\" do\n      @meme.will_it_blend?.wont_match /^no/i\n    end\n  end\nend\n</pre> <p>For matchers support check out:</p> <p><a href=\"https://github.com/wojtekmach/minitest-matchers\">github.com/wojtekmach/minitest-matchers</a> <a href=\"https://github.com/rmm5t/minitest-matchers_vaccine\">github.com/rmm5t/minitest-matchers_vaccine</a></p> <h3 id=\"module-Minitest-label-Benchmarks\">Benchmarks</h3> <p>Add benchmarks to your tests.</p> <pre class=\"ruby\"># optionally run benchmarks, good for CI-only work!\nrequire \"minitest/benchmark\" if ENV[\"BENCH\"]\n\nclass TestMeme &lt; Minitest::Benchmark\n  # Override self.bench_range or default range is [1, 10, 100, 1_000, 10_000]\n  def bench_my_algorithm\n    assert_performance_linear 0.9999 do |n| # n is a range value\n      @obj.my_algorithm(n)\n    end\n  end\nend\n</pre> <p>Or add them to your specs. If you make benchmarks optional, you'll need to wrap your benchmarks in a conditional since the methods won't be defined. In minitest 5, the describe name needs to match /Bench(mark)?$/.</p> <pre class=\"ruby\">describe \"Meme Benchmark\" do\n  if ENV[\"BENCH\"] then\n    bench_performance_linear \"my_algorithm\", 0.9999 do |n|\n      100.times do\n        @obj.my_algorithm(n)\n      end\n    end\n  end\nend\n</pre> <p>outputs something like:</p> <pre># Running benchmarks:\n\nTestBlah    100     1000    10000\nbench_my_algorithm   0.006167        0.079279        0.786993\nbench_other_algorithm        0.061679        0.792797        7.869932</pre> <p>Output is tab-delimited to make it easy to paste into a spreadsheet.</p> <h3 id=\"module-Minitest-label-Mocks\">Mocks</h3> <p>Mocks and stubs defined using terminology by Fowler &amp; Meszaros at <a href=\"http://www.martinfowler.com/bliki/TestDouble.html\">www.martinfowler.com/bliki/TestDouble.html</a>:</p> <p>“Mocks are pre-programmed with expectations which form a specification of the calls they are expected to receive. They can throw an exception if they receive a call they don't expect and are checked during verification to ensure they got all the calls they were expecting.”</p> <pre class=\"ruby\">class MemeAsker\n  def initialize(meme)\n    @meme = meme\n  end\n\n  def ask(question)\n    method = question.tr(\" \", \"_\") + \"?\"\n    @meme.__send__(method)\n  end\nend\n\nrequire \"minitest/autorun\"\n\ndescribe MemeAsker, :ask do\n  describe \"when passed an unpunctuated question\" do\n    it \"should invoke the appropriate predicate method on the meme\" do\n      @meme = Minitest::Mock.new\n      @meme_asker = MemeAsker.new @meme\n      @meme.expect :will_it_blend?, :return_value\n\n      @meme_asker.ask \"will it blend\"\n\n      @meme.verify\n    end\n  end\nend\n</pre> <h3 id=\"module-Minitest-label-Stubs\">Stubs</h3> <p>Mocks and stubs are defined using terminology by Fowler &amp; Meszaros at <a href=\"http://www.martinfowler.com/bliki/TestDouble.html\">www.martinfowler.com/bliki/TestDouble.html</a>:</p> <p>“Stubs provide canned answers to calls made during the test”.</p> <p>Minitest's stub method overrides a single method for the duration of the block.</p> <pre class=\"ruby\">def test_stale_eh\n  obj_under_test = Something.new\n\n  refute obj_under_test.stale?\n\n  Time.stub :now, Time.at(0) do   # stub goes away once the block is done\n    assert obj_under_test.stale?\n  end\nend\n</pre> <p>A note on stubbing: In order to stub a method, the method must actually exist prior to stubbing. Use a singleton method to create a new non-existing method:</p> <pre>def obj_under_test.fake_method\n  ...\nend</pre> <h3 id=\"module-Minitest-label-Running+Your+Tests\">Running Your Tests</h3> <p>Ideally, you'll use a rake task to run your tests, either piecemeal or all at once. Both rake and rails ship with rake tasks for running your tests. BUT! You don't have to:</p> <pre>% ruby -Ilib:test test/minitest/test_minitest_unit.rb\nRun options: --seed 37685\n\n# Running:\n\n...................................................................... (etc)\n\nFinished in 0.107130s, 1446.8403 runs/s, 2959.0217 assertions/s.\n\n155 runs, 317 assertions, 0 failures, 0 errors, 0 skips</pre> <p>There are runtime options available, both from minitest itself, and also provided via plugins. To see them, simply run with `–help`:</p> <pre>% ruby -Ilib:test test/minitest/test_minitest_unit.rb --help\nminitest options:\n    -h, --help                       Display this help.\n    -s, --seed SEED                  Sets random seed\n    -v, --verbose                    Verbose. Show progress processing files.\n    -n, --name PATTERN               Filter run on /pattern/ or string.\n\nKnown extensions: pride, autotest\n    -p, --pride                      Pride. Show your testing pride!\n    -a, --autotest                   Connect to autotest server.</pre> <h2 id=\"module-Minitest-label-Writing+Extensions\">Writing Extensions</h2> <p>To define a plugin, add a file named minitest/XXX_plugin.rb to your project/gem. That file must be discoverable via ruby's LOAD_PATH (via rubygems or otherwise). Minitest will find and require that file using Gem.find_files. It will then try to call plugin_XXX_init during startup. The option processor will also try to call plugin_XXX_options passing the OptionParser instance and the current options hash. This lets you register your own command-line options. Here's a totally bogus example:</p> <pre class=\"ruby\"># minitest/bogus_plugin.rb:\n\nmodule Minitest\n  def self.plugin_bogus_options(opts, options)\n    opts.on \"--myci\", \"Report results to my CI\" do\n      options[:myci] = true\n      options[:myci_addr] = get_myci_addr\n      options[:myci_port] = get_myci_port\n    end\n  end\n\n  def self.plugin_bogus_init(options)\n    self.reporter &lt;&lt; MyCI.new(options) if options[:myci]\n  end\nend\n</pre> <h3 id=\"module-Minitest-label-Adding+custom+reporters\">Adding custom reporters</h3> <p>Minitest uses composite reporter to output test results using multiple reporter instances. You can add new reporters to the composite during the init_plugins phase. As we saw in <code>plugin_bonus_init</code> above, you simply add your reporter instance to the composite via +&lt;&lt;+.</p> <p><code>AbstractReporter</code> defines the API for reporters. You may subclass it and override any method you want to achieve your desired behavior.</p> <dl class=\"rdoc-list note-list\">\n<dt>start </dt>\n<dd> <p>Called when the run has started.</p> </dd>\n<dt>record </dt>\n<dd> <p>Called for each result, passed or otherwise.</p> </dd>\n<dt>report </dt>\n<dd> <p>Called at the end of the run.</p> </dd>\n<dt>passed? </dt>\n<dd> <p>Called to see if you detected any problems.</p> </dd>\n</dl> <p>Using our example above, here is how we might implement MyCI:</p> <pre class=\"ruby\"># minitest/bogus_plugin.rb\n\nmodule Minitest\n  class MyCI &lt; AbstractReporter\n    attr_accessor :results, :addr, :port\n\n    def initialize options\n      self.results = []\n      self.addr = options[:myci_addr]\n      self.port = options[:myci_port]\n    end\n\n    def record result\n      self.results &lt;&lt; result\n    end\n\n    def report\n      CI.connect(addr, port).send_results self.results\n    end\n  end\n\n  # code from above...\nend\n</pre> <h2 id=\"module-Minitest-label-FAQ\">FAQ</h2> <h3 id=\"module-Minitest-label-How+to+test+SimpleDelegates-3F\">How to test SimpleDelegates?</h3> <p>The following implementation and test:</p> <pre class=\"ruby\">class Worker &lt; SimpleDelegator\n  def work\n  end\nend\n\ndescribe Worker do\n  before do\n    @worker = Worker.new(Object.new)\n  end\n\n  it \"must respond to work\" do\n    @worker.must_respond_to :work\n  end\nend\n</pre> <p>outputs a failure:</p> <pre>  1) Failure:\nWorker#test_0001_must respond to work [bug11.rb:16]:\nExpected #&lt;Object:0x007f9e7184f0a0&gt; (Object) to respond to #work.</pre> <p>Worker is a SimpleDelegate which in 1.9+ is a subclass of BasicObject. <a href=\"minitest/expectations\">Expectations</a> are put on <span>Object</span> (one level down) so the Worker (SimpleDelegate) hits `method_missing` and delegates down to the `Object.new` instance. That object doesn't respond to work so the test fails.</p> <p>You can bypass `SimpleDelegate#method_missing` by extending the worker with `Minitest::Expectations`. You can either do that in your setup at the instance level, like:</p> <pre class=\"ruby\">before do\n  @worker = Worker.new(Object.new)\n  @worker.extend Minitest::Expectations\nend\n</pre> <p>or you can extend the Worker class (within the test file!), like:</p> <pre class=\"ruby\">class Worker\n  include ::Minitest::Expectations\nend\n</pre> <h3 id=\"module-Minitest-label-How+to+share+code+across+test+classes-3F\">How to share code across test classes?</h3> <p>Use a module. That's exactly what they're for:</p> <pre class=\"ruby\">module UsefulStuff\n  def useful_method\n    # ...\n  end\nend\n\ndescribe Blah do\n  include UsefulStuff\n\n  def test_whatever\n    # useful_method available here\n  end\nend\n</pre> <p>Remember, `describe` simply creates test classes. It's just ruby at the end of the day and all your normal Good Ruby Rules (tm) apply. If you want to extend your test using setup/teardown via a module, just make sure you ALWAYS call super. before/after automatically call super for you, so make sure you don't do it twice.</p> <h3 id=\"module-Minitest-label-Why+am+I+seeing+-60uninitialized+constant+MiniTest-3A-3ATest+-28NameError-29-60-3F\">Why am I seeing `uninitialized constant MiniTest::Test (NameError)`?</h3> <p>Are you running the test with Bundler (e.g. via `bundle exec`)? If so, in order to require minitest, you must first add the `gem 'minitest'` to your Gemfile and run `bundle`. Once it's installed, you should be able to require minitest and run your tests.</p> <h2 id=\"module-Minitest-label-Prominent+Projects+using+Minitest-3A\">Prominent Projects using Minitest:</h2> <ul>\n<li> <p>arel</p> </li>\n<li> <p>journey</p> </li>\n<li> <p>mime-types</p> </li>\n<li> <p>nokogiri</p> </li>\n<li> <p>rails (active_support et al)</p> </li>\n<li> <p>rake</p> </li>\n<li> <p>rdoc</p> </li>\n<li> <p>…and of course, everything from seattle.rb…</p> </li>\n</ul> <h2 id=\"module-Minitest-label-Known+Extensions-3A\">Known Extensions:</h2> <dl class=\"rdoc-list note-list\">\n<dt>capybara_minitest_spec </dt>\n<dd> <p>Bridge between Capybara RSpec matchers and <a href=\"minitest/spec\">Minitest::Spec</a> expectations (e.g. page.must_have_content(“Title”)).</p> </dd>\n<dt>color_pound_spec_reporter </dt>\n<dd> <p><a href=\"minitest/test\">Test</a> names print Ruby <span>Object</span> types in color with your Minitest <a href=\"minitest/spec\">Spec</a> style tests.</p> </dd>\n<dt>minispec-metadata </dt>\n<dd> <p>Metadata for describe/it blocks &amp; CLI tag filter. E.g. `it “requires JS driver”, js: true do` &amp; `ruby test.rb –tag js` runs tests tagged :js.</p> </dd>\n<dt>minitest-around </dt>\n<dd> <p>Around block for minitest. An alternative to setup/teardown dance.</p> </dd>\n<dt>minitest-autotest </dt>\n<dd> <p>autotest is a continous testing facility meant to be used during development.</p> </dd>\n<dt>minitest-bacon </dt>\n<dd> <p>minitest-bacon extends minitest with bacon-like functionality.</p> </dd>\n<dt>minitest-bang </dt>\n<dd> <p>Adds support for RSpec-style let! to immediately invoke let statements before each test.</p> </dd>\n<dt>minitest-bisect </dt>\n<dd> <p>Helps you isolate and debug random test failures.</p> </dd>\n<dt>minitest-blink1_reporter </dt>\n<dd> <p>Display test results with a Blink1.</p> </dd>\n<dt>minitest-capistrano </dt>\n<dd> <p><a href=\"minitest/assertions\">Assertions</a> and expectations for testing Capistrano recipes.</p> </dd>\n<dt>minitest-capybara </dt>\n<dd> <p>Capybara matchers support for minitest unit and spec.</p> </dd>\n<dt>minitest-chef-handler </dt>\n<dd> <p>Run Minitest suites as Chef report handlers</p> </dd>\n<dt>minitest-ci </dt>\n<dd> <p>CI reporter plugin for Minitest.</p> </dd>\n<dt>minitest-context </dt>\n<dd> <p>Defines contexts for code reuse in Minitest specs that share common expectations.</p> </dd>\n<dt>minitest-debugger </dt>\n<dd> <p>Wraps assert so failed assertions drop into the ruby debugger.</p> </dd>\n<dt>minitest-display </dt>\n<dd> <p>Patches Minitest to allow for an easily configurable output.</p> </dd>\n<dt>minitest-documentation </dt>\n<dd> <p>Minimal documentation format inspired by rspec's.</p> </dd>\n<dt>minitest-doc_reporter </dt>\n<dd> <p>Detailed output inspired by rspec's documentation format.</p> </dd>\n<dt>minitest-emoji </dt>\n<dd> <p>Print out emoji for your test passes, fails, and skips.</p> </dd>\n<dt>minitest-english </dt>\n<dd> <p>Semantically symmetric aliases for assertions and expectations.</p> </dd>\n<dt>minitest-excludes </dt>\n<dd> <p>Clean API for excluding certain tests you don't want to run under certain conditions.</p> </dd>\n<dt>minitest-fail-fast </dt>\n<dd> <p>Reimplements RSpec's “fail fast” feature</p> </dd>\n<dt>minitest-filecontent </dt>\n<dd> <p>Support unit tests with expectation results in files. Differing results will be stored again in files.</p> </dd>\n<dt>minitest-filesystem </dt>\n<dd> <p>Adds assertion and expectation to help testing filesystem contents.</p> </dd>\n<dt>minitest-firemock </dt>\n<dd> <p>Makes your Minitest mocks more resilient.</p> </dd>\n<dt>minitest-focus </dt>\n<dd> <p>Focus on one test at a time.</p> </dd>\n<dt>minitest-gcstats </dt>\n<dd> <p>A minitest plugin that adds a report of the top tests by number of objects allocated.</p> </dd>\n<dt>minitest-great_expectations </dt>\n<dd> <p>Generally useful additions to minitest's assertions and expectations.</p> </dd>\n<dt>minitest-growl </dt>\n<dd> <p><a href=\"minitest/test\">Test</a> notifier for minitest via growl.</p> </dd>\n<dt>minitest-happy </dt>\n<dd> <p>GLOBALLY ACTIVATE MINITEST PRIDE! RAWR!</p> </dd>\n<dt>minitest-hooks </dt>\n<dd> <p>Around and before_all/after_all/around_all hooks</p> </dd>\n<dt>minitest-implicit-subject </dt>\n<dd> <p>Implicit declaration of the test subject.</p> </dd>\n<dt>minitest-instrument </dt>\n<dd> <p>Instrument ActiveSupport::Notifications when test method is executed.</p> </dd>\n<dt>minitest-instrument-db </dt>\n<dd> <p>Store information about speed of test execution provided by minitest-instrument in database.</p> </dd>\n<dt>minitest-junit </dt>\n<dd> <p>JUnit-style XML reporter for minitest.</p> </dd>\n<dt>minitest-libnotify </dt>\n<dd> <p><a href=\"minitest/test\">Test</a> notifier for minitest via libnotify.</p> </dd>\n<dt>minitest-line </dt>\n<dd> <p>Run test at line number.</p> </dd>\n<dt>minitest-logger </dt>\n<dd> <p>Define assert_log and enable minitest to test log messages. Supports Logger and Log4r::Logger.</p> </dd>\n<dt>minitest-macruby </dt>\n<dd> <p>Provides extensions to minitest for macruby UI testing.</p> </dd>\n<dt>minitest-matchers </dt>\n<dd> <p>Adds support for RSpec-style matchers to minitest.</p> </dd>\n<dt>minitest-matchers_vaccine </dt>\n<dd> <p>Adds assertions that adhere to the matcher spec, but without any expectation infections.</p> </dd>\n<dt>minitest-metadata </dt>\n<dd> <p>Annotate tests with metadata (key-value).</p> </dd>\n<dt>minitest-mongoid </dt>\n<dd> <p>Mongoid assertion matchers for Minitest.</p> </dd>\n<dt>minitest-must_not </dt>\n<dd> <p>Provides must_not as an alias for wont in Minitest.</p> </dd>\n<dt>minitest-osx </dt>\n<dd> <p>Reporter for the Mac OS X notification center.</p> </dd>\n<dt>minitest-parallel_fork </dt>\n<dd> <p>Fork-based parallelization</p> </dd>\n<dt>minitest-parallel-db </dt>\n<dd> <p>Run tests in parallel with a single database.</p> </dd>\n<dt>minitest-power_assert </dt>\n<dd> <p>PowerAssert for Minitest.</p> </dd>\n<dt>minitest-predicates </dt>\n<dd> <p>Adds support for .predicate? methods.</p> </dd>\n<dt>minitest-profile </dt>\n<dd> <p>List the 10 slowest tests in your suite.</p> </dd>\n<dt>minitest-rails </dt>\n<dd> <p>Minitest integration for Rails 3.x.</p> </dd>\n<dt>minitest-rails-capybara </dt>\n<dd> <p>Capybara integration for Minitest::Rails.</p> </dd>\n<dt>minitest-reporters </dt>\n<dd> <p>Create customizable Minitest output formats.</p> </dd>\n<dt>minitest-rg </dt>\n<dd> <p>Colored red/green output for Minitest.</p> </dd>\n<dt>minitest-rspec_mocks </dt>\n<dd> <p>Use RSpec Mocks with Minitest.</p> </dd>\n<dt>minitest-server </dt>\n<dd> <p>minitest-server provides a client/server setup with your minitest process, allowing your test run to send its results directly to a handler.</p> </dd>\n<dt>minitest-shared_description </dt>\n<dd> <p>Support for shared specs and shared spec subclasses</p> </dd>\n<dt>minitest-should_syntax </dt>\n<dd> <p>RSpec-style +x.should == y+ assertions for Minitest.</p> </dd>\n<dt>minitest-shouldify </dt>\n<dd> <p>Adding all manner of shoulds to Minitest (bad idea)</p> </dd>\n<dt>minitest-snail </dt>\n<dd> <p>Print a list of tests that take too long</p> </dd>\n<dt>minitest-spec-context </dt>\n<dd> <p>Provides rspec-ish context method to <a href=\"minitest/spec\">Minitest::Spec</a>.</p> </dd>\n<dt>minitest-spec-expect </dt>\n<dd> <p>Expect syntax for <a href=\"minitest/spec\">Minitest::Spec</a> (e.g. expect(sequences).to_include :celery_man).</p> </dd>\n<dt>minitest-spec-magic </dt>\n<dd> <p><a href=\"minitest/spec\">Minitest::Spec</a> extensions for Rails and beyond.</p> </dd>\n<dt>minitest-spec-rails </dt>\n<dd> <p>Drop in <a href=\"minitest/spec\">Minitest::Spec</a> superclass for ActiveSupport::TestCase.</p> </dd>\n<dt>minitest-sprint </dt>\n<dd> <p>Runs (Get it? It's fast!) your tests and makes it easier to rerun individual failures.</p> </dd>\n<dt>minitest-stately </dt>\n<dd> <p>Find leaking state between tests</p> </dd>\n<dt>minitest-stub_any_instance </dt>\n<dd> <p>Stub any instance of a method on the given class for the duration of a block.</p> </dd>\n<dt>minitest-stub-const </dt>\n<dd> <p>Stub constants for the duration of a block.</p> </dd>\n<dt>minitest-tags </dt>\n<dd> <p>Add tags for minitest.</p> </dd>\n<dt>minitest-unordered </dt>\n<dd> <p>Adds a new assertion to minitest for checking the contents of a collection, ignoring element order.</p> </dd>\n<dt>minitest-vcr </dt>\n<dd> <p>Automatic cassette managment with <a href=\"minitest/spec\">Minitest::Spec</a> and VCR.</p> </dd>\n<dt>minitest_owrapper </dt>\n<dd> <p>Get tests results as a TestResult object.</p> </dd>\n<dt>minitest_should </dt>\n<dd> <p>Shoulda style syntax for minitest test::unit.</p> </dd>\n<dt>minitest_tu_shim </dt>\n<dd> <p>Bridges between test/unit and minitest.</p> </dd>\n<dt>mongoid-minitest </dt>\n<dd> <p>Minitest matchers for Mongoid.</p> </dd>\n<dt>pry-rescue </dt>\n<dd> <p>A pry plugin w/ minitest support. See pry-rescue/minitest.rb.</p> </dd>\n<dt>rspec2minitest </dt>\n<dd> <p>Easily translate any RSpec matchers to Minitest assertions and expectations.</p> </dd>\n</dl> <h2 id=\"module-Minitest-label-Unknown+Extensions-3A\">Unknown Extensions:</h2> <p>Authors… Please send me a pull request with a description of your minitest extension.</p> <ul>\n<li> <p>assay-minitest</p> </li>\n<li> <p>detroit-minitest</p> </li>\n<li> <p>em-minitest-spec</p> </li>\n<li> <p>flexmock-minitest</p> </li>\n<li> <p>guard-minitest</p> </li>\n<li> <p>guard-minitest-decisiv</p> </li>\n<li> <p>minitest-activemodel</p> </li>\n<li> <p>minitest-ar-assertions</p> </li>\n<li> <p>minitest-capybara-unit</p> </li>\n<li> <p>minitest-colorer</p> </li>\n<li> <p>minitest-deluxe</p> </li>\n<li> <p>minitest-extra-assertions</p> </li>\n<li> <p>minitest-rails-shoulda</p> </li>\n<li> <p>minitest-spec</p> </li>\n<li> <p>minitest-spec-should</p> </li>\n<li> <p>minitest-sugar</p> </li>\n<li> <p>spork-minitest</p> </li>\n</ul> <h2 id=\"module-Minitest-label-REQUIREMENTS-3A\">REQUIREMENTS:</h2> <ul><li> <p>Ruby 1.8.7+. No magic is involved. I hope.</p> </li></ul> <h2 id=\"module-Minitest-label-INSTALL-3A\">INSTALL:</h2> <pre class=\"ruby\">sudo gem install minitest\n</pre> <p>On 1.9, you already have it. To get newer candy you can still install the gem, and then requiring “minitest/autorun” should automatically pull it in. If not, you'll need to do it yourself:</p> <pre class=\"ruby\">gem \"minitest\"     # ensures you\"re using the gem, and not the built-in MT\nrequire \"minitest/autorun\"\n\n# ... usual testing stuffs ...\n</pre> <p>DO NOTE: There is a serious problem with the way that ruby 1.9/2.0 packages their own gems. They install a gem specification file, but don't install the gem contents in the gem path. This messes up Gem.find_files and many other things (gem which, gem contents, etc).</p> <p>Just install minitest as a gem for real and you'll be happier.</p> <h2 id=\"module-Minitest-label-LICENSE-3A\">LICENSE:</h2> <p>(The MIT License)</p> <p>Copyright © Ryan Davis, seattle.rb</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-__run\"> <span class=\"method-name\">__run</span><span class=\"method-args\">(reporter, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Internal run method. Responsible for telling all <a href=\"minitest/runnable\">Runnable</a> sub-classes to run.</p> <p>NOTE: this method is redefined in parallel_each.rb, which is loaded if a <a href=\"minitest/runnable\">Runnable</a> calls parallelize_me!.</p> <div class=\"method-source-code\" id=\"__run-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 146\ndef self.__run reporter, options\n  suites = Runnable.runnables.shuffle\n  parallel, serial = suites.partition { |s| s.test_order == :parallel }\n\n  # If we run the parallel tests before the serial tests, the parallel tests\n  # could run in parallel with the serial tests. This would be bad because\n  # the serial tests won't lock around Reporter#record. Run the serial tests\n  # first, so that after they complete, the parallel tests will lock when\n  # recording results.\n  serial.map { |suite| suite.run reporter, options } +\n    parallel.map { |suite| suite.run reporter, options }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-after_run\"> <span class=\"method-name\">after_run</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A simple hook allowing you to run a block of code after everything is done running. Eg:</p> <pre class=\"ruby\">Minitest.after_run { p $debugging_info }\n</pre> <div class=\"method-source-code\" id=\"after_run-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 67\ndef self.after_run &amp;block\n  @@after_run &lt;&lt; block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-autorun\"> <span class=\"method-name\">autorun</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Registers Minitest to run at process exit</p> <div class=\"method-source-code\" id=\"autorun-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 45\ndef self.autorun\n  at_exit {\n    next if $! and not ($!.kind_of? SystemExit and $!.success?)\n\n    exit_code = nil\n\n    at_exit {\n      @@after_run.reverse_each(&amp;:call)\n      exit exit_code || false\n    }\n\n    exit_code = Minitest.run ARGV\n  } unless @@installed_at_exit\n  @@installed_at_exit = true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-clock_time\"> <span class=\"method-name\">clock_time</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"clock_time-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 787\ndef self.clock_time\n  Process.clock_gettime Process::CLOCK_MONOTONIC\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-run\"> <span class=\"method-name\">run</span><span class=\"method-args\">(args = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This is the top-level run method. Everything starts from here. It tells each <a href=\"minitest/runnable\">Runnable</a> sub-class to run, and each of those are responsible for doing whatever they do.</p> <p>The overall structure of a run looks like this:</p> <pre class=\"ruby\">Minitest.autorun\n  Minitest.run(args)\n    Minitest.__run(reporter, options)\n      Runnable.runnables.each\n        runnable.run(reporter, options)\n          self.runnable_methods.each\n            self.run_one_method(self, runnable_method, reporter)\n              Minitest.run_one_method(klass, runnable_method)\n                klass.new(runnable_method).run\n</pre> <div class=\"method-source-code\" id=\"run-source\"> <pre class=\"ruby\"># File lib/minitest.rb, line 113\ndef self.run args = []\n  self.load_plugins\n\n  options = process_args args\n\n  reporter = CompositeReporter.new\n  reporter &lt;&lt; SummaryReporter.new(options[:io], options)\n  reporter &lt;&lt; ProgressReporter.new(options[:io], options)\n\n  self.reporter = reporter # this makes it available to plugins\n  self.init_plugins options\n  self.reporter = nil # runnables shouldn't depend on the reporter, ever\n\n  self.parallel_executor.start if parallel_executor.respond_to?(:start)\n  reporter.start\n  begin\n    __run reporter, options\n  rescue Interrupt\n    warn \"Interrupted. Exiting...\"\n  end\n  self.parallel_executor.shutdown\n  reporter.report\n\n  reporter.passed?\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unknown\"> <span class=\"method-name\">unknown</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"minitest/parallel\">Parallel</a> test executor</p> <div class=\"method-source-code\" id=\"unknown-source\"> <pre class=\"c\"># File lib/minitest.rb, line 22\nmc.send :attr_accessor, :parallel_executor\n</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Ryan Davis, seattle.rb<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n"}