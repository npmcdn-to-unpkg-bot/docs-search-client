{"index":"<h1>Redis</h1>   <ul class=\"commands\"> <li data-group=\"string\" data-name=\"append\"> <a href=\"append\"> <span class=\"command\"> APPEND <span class=\"args\"> key value </span> </span> <span class=\"summary\">Append a value to a key</span> </a> </li> <li data-group=\"connection\" data-name=\"auth\"> <a href=\"auth\"> <span class=\"command\"> AUTH <span class=\"args\"> password </span> </span> <span class=\"summary\">Authenticate to the server</span> </a> </li> <li data-group=\"server\" data-name=\"bgrewriteaof\"> <a href=\"bgrewriteaof\"> <span class=\"command\"> BGREWRITEAOF  </span> <span class=\"summary\">Asynchronously rewrite the append-only file</span> </a> </li> <li data-group=\"server\" data-name=\"bgsave\"> <a href=\"bgsave\"> <span class=\"command\"> BGSAVE  </span> <span class=\"summary\">Asynchronously save the dataset to disk</span> </a> </li> <li data-group=\"string\" data-name=\"bitcount\"> <a href=\"bitcount\"> <span class=\"command\"> BITCOUNT <span class=\"args\"> key [start end] </span> </span> <span class=\"summary\">Count set bits in a string</span> </a> </li> <li data-group=\"string\" data-name=\"bitfield\"> <a href=\"bitfield\"> <span class=\"command\"> BITFIELD <span class=\"args\"> key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL] </span> </span> <span class=\"summary\">Perform arbitrary bitfield integer operations on strings</span> </a> </li> <li data-group=\"string\" data-name=\"bitop\"> <a href=\"bitop\"> <span class=\"command\"> BITOP <span class=\"args\"> operation destkey key [key ...] </span> </span> <span class=\"summary\">Perform bitwise operations between strings</span> </a> </li> <li data-group=\"string\" data-name=\"bitpos\"> <a href=\"bitpos\"> <span class=\"command\"> BITPOS <span class=\"args\"> key bit [start] [end] </span> </span> <span class=\"summary\">Find first bit set or clear in a string</span> </a> </li> <li data-group=\"list\" data-name=\"blpop\"> <a href=\"blpop\"> <span class=\"command\"> BLPOP <span class=\"args\"> key [key ...] timeout </span> </span> <span class=\"summary\">Remove and get the first element in a list, or block until one is available</span> </a> </li> <li data-group=\"list\" data-name=\"brpop\"> <a href=\"brpop\"> <span class=\"command\"> BRPOP <span class=\"args\"> key [key ...] timeout </span> </span> <span class=\"summary\">Remove and get the last element in a list, or block until one is available</span> </a> </li> <li data-group=\"list\" data-name=\"brpoplpush\"> <a href=\"brpoplpush\"> <span class=\"command\"> BRPOPLPUSH <span class=\"args\"> source destination timeout </span> </span> <span class=\"summary\">Pop a value from a list, push it to another list and return it; or block until one is available</span> </a> </li> <li data-group=\"server\" data-name=\"client kill\"> <a href=\"client-kill\"> <span class=\"command\"> CLIENT KILL <span class=\"args\"> [ip:port] [ID client-id] [TYPE normal|master|slave|pubsub] [ADDR ip:port] [SKIPME yes/no] </span> </span> <span class=\"summary\">Kill the connection of a client</span> </a> </li> <li data-group=\"server\" data-name=\"client list\"> <a href=\"client-list\"> <span class=\"command\"> CLIENT LIST  </span> <span class=\"summary\">Get the list of client connections</span> </a> </li> <li data-group=\"server\" data-name=\"client getname\"> <a href=\"client-getname\"> <span class=\"command\"> CLIENT GETNAME  </span> <span class=\"summary\">Get the current connection name</span> </a> </li> <li data-group=\"server\" data-name=\"client pause\"> <a href=\"client-pause\"> <span class=\"command\"> CLIENT PAUSE <span class=\"args\"> timeout </span> </span> <span class=\"summary\">Stop processing commands from clients for some time</span> </a> </li> <li data-group=\"server\" data-name=\"client reply\"> <a href=\"client-reply\"> <span class=\"command\"> CLIENT REPLY <span class=\"args\"> ON|OFF|SKIP </span> </span> <span class=\"summary\">Instruct the server whether to reply to commands</span> </a> </li> <li data-group=\"server\" data-name=\"client setname\"> <a href=\"client-setname\"> <span class=\"command\"> CLIENT SETNAME <span class=\"args\"> connection-name </span> </span> <span class=\"summary\">Set the current connection name</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster addslots\"> <a href=\"cluster-addslots\"> <span class=\"command\"> CLUSTER ADDSLOTS <span class=\"args\"> slot [slot ...] </span> </span> <span class=\"summary\">Assign new hash slots to receiving node</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster count-failure-reports\"> <a href=\"cluster-count-failure-reports\"> <span class=\"command\"> CLUSTER COUNT-FAILURE-REPORTS <span class=\"args\"> node-id </span> </span> <span class=\"summary\">Return the number of failure reports active for a given node</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster countkeysinslot\"> <a href=\"cluster-countkeysinslot\"> <span class=\"command\"> CLUSTER COUNTKEYSINSLOT <span class=\"args\"> slot </span> </span> <span class=\"summary\">Return the number of local keys in the specified hash slot</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster delslots\"> <a href=\"cluster-delslots\"> <span class=\"command\"> CLUSTER DELSLOTS <span class=\"args\"> slot [slot ...] </span> </span> <span class=\"summary\">Set hash slots as unbound in receiving node</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster failover\"> <a href=\"cluster-failover\"> <span class=\"command\"> CLUSTER FAILOVER <span class=\"args\"> [FORCE|TAKEOVER] </span> </span> <span class=\"summary\">Forces a slave to perform a manual failover of its master.</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster forget\"> <a href=\"cluster-forget\"> <span class=\"command\"> CLUSTER FORGET <span class=\"args\"> node-id </span> </span> <span class=\"summary\">Remove a node from the nodes table</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster getkeysinslot\"> <a href=\"cluster-getkeysinslot\"> <span class=\"command\"> CLUSTER GETKEYSINSLOT <span class=\"args\"> slot count </span> </span> <span class=\"summary\">Return local key names in the specified hash slot</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster info\"> <a href=\"cluster-info\"> <span class=\"command\"> CLUSTER INFO  </span> <span class=\"summary\">Provides info about Redis Cluster node state</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster keyslot\"> <a href=\"cluster-keyslot\"> <span class=\"command\"> CLUSTER KEYSLOT <span class=\"args\"> key </span> </span> <span class=\"summary\">Returns the hash slot of the specified key</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster meet\"> <a href=\"cluster-meet\"> <span class=\"command\"> CLUSTER MEET <span class=\"args\"> ip port </span> </span> <span class=\"summary\">Force a node cluster to handshake with another node</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster nodes\"> <a href=\"cluster-nodes\"> <span class=\"command\"> CLUSTER NODES  </span> <span class=\"summary\">Get Cluster config for the node</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster replicate\"> <a href=\"cluster-replicate\"> <span class=\"command\"> CLUSTER REPLICATE <span class=\"args\"> node-id </span> </span> <span class=\"summary\">Reconfigure a node as a slave of the specified master node</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster reset\"> <a href=\"cluster-reset\"> <span class=\"command\"> CLUSTER RESET <span class=\"args\"> [HARD|SOFT] </span> </span> <span class=\"summary\">Reset a Redis Cluster node</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster saveconfig\"> <a href=\"cluster-saveconfig\"> <span class=\"command\"> CLUSTER SAVECONFIG  </span> <span class=\"summary\">Forces the node to save cluster state on disk</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster set-config-epoch\"> <a href=\"cluster-set-config-epoch\"> <span class=\"command\"> CLUSTER SET-CONFIG-EPOCH <span class=\"args\"> config-epoch </span> </span> <span class=\"summary\">Set the configuration epoch in a new node</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster setslot\"> <a href=\"cluster-setslot\"> <span class=\"command\"> CLUSTER SETSLOT <span class=\"args\"> slot IMPORTING|MIGRATING|STABLE|NODE [node-id] </span> </span> <span class=\"summary\">Bind a hash slot to a specific node</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster slaves\"> <a href=\"cluster-slaves\"> <span class=\"command\"> CLUSTER SLAVES <span class=\"args\"> node-id </span> </span> <span class=\"summary\">List slave nodes of the specified master node</span> </a> </li> <li data-group=\"cluster\" data-name=\"cluster slots\"> <a href=\"cluster-slots\"> <span class=\"command\"> CLUSTER SLOTS  </span> <span class=\"summary\">Get array of Cluster slot to node mappings</span> </a> </li> <li data-group=\"server\" data-name=\"command\"> <a href=\"command\"> <span class=\"command\"> COMMAND  </span> <span class=\"summary\">Get array of Redis command details</span> </a> </li> <li data-group=\"server\" data-name=\"command count\"> <a href=\"command-count\"> <span class=\"command\"> COMMAND COUNT  </span> <span class=\"summary\">Get total number of Redis commands</span> </a> </li> <li data-group=\"server\" data-name=\"command getkeys\"> <a href=\"command-getkeys\"> <span class=\"command\"> COMMAND GETKEYS  </span> <span class=\"summary\">Extract keys given a full Redis command</span> </a> </li> <li data-group=\"server\" data-name=\"command info\"> <a href=\"command-info\"> <span class=\"command\"> COMMAND INFO <span class=\"args\"> command-name [command-name ...] </span> </span> <span class=\"summary\">Get array of specific Redis command details</span> </a> </li> <li data-group=\"server\" data-name=\"config get\"> <a href=\"config-get\"> <span class=\"command\"> CONFIG GET <span class=\"args\"> parameter </span> </span> <span class=\"summary\">Get the value of a configuration parameter</span> </a> </li> <li data-group=\"server\" data-name=\"config rewrite\"> <a href=\"config-rewrite\"> <span class=\"command\"> CONFIG REWRITE  </span> <span class=\"summary\">Rewrite the configuration file with the in memory configuration</span> </a> </li> <li data-group=\"server\" data-name=\"config set\"> <a href=\"config-set\"> <span class=\"command\"> CONFIG SET <span class=\"args\"> parameter value </span> </span> <span class=\"summary\">Set a configuration parameter to the given value</span> </a> </li> <li data-group=\"server\" data-name=\"config resetstat\"> <a href=\"config-resetstat\"> <span class=\"command\"> CONFIG RESETSTAT  </span> <span class=\"summary\">Reset the stats returned by INFO</span> </a> </li> <li data-group=\"server\" data-name=\"dbsize\"> <a href=\"dbsize\"> <span class=\"command\"> DBSIZE  </span> <span class=\"summary\">Return the number of keys in the selected database</span> </a> </li> <li data-group=\"server\" data-name=\"debug object\"> <a href=\"debug-object\"> <span class=\"command\"> DEBUG OBJECT <span class=\"args\"> key </span> </span> <span class=\"summary\">Get debugging information about a key</span> </a> </li> <li data-group=\"server\" data-name=\"debug segfault\"> <a href=\"debug-segfault\"> <span class=\"command\"> DEBUG SEGFAULT  </span> <span class=\"summary\">Make the server crash</span> </a> </li> <li data-group=\"string\" data-name=\"decr\"> <a href=\"decr\"> <span class=\"command\"> DECR <span class=\"args\"> key </span> </span> <span class=\"summary\">Decrement the integer value of a key by one</span> </a> </li> <li data-group=\"string\" data-name=\"decrby\"> <a href=\"decrby\"> <span class=\"command\"> DECRBY <span class=\"args\"> key decrement </span> </span> <span class=\"summary\">Decrement the integer value of a key by the given number</span> </a> </li> <li data-group=\"generic\" data-name=\"del\"> <a href=\"del\"> <span class=\"command\"> DEL <span class=\"args\"> key [key ...] </span> </span> <span class=\"summary\">Delete a key</span> </a> </li> <li data-group=\"transactions\" data-name=\"discard\"> <a href=\"discard\"> <span class=\"command\"> DISCARD  </span> <span class=\"summary\">Discard all commands issued after MULTI</span> </a> </li> <li data-group=\"generic\" data-name=\"dump\"> <a href=\"dump\"> <span class=\"command\"> DUMP <span class=\"args\"> key </span> </span> <span class=\"summary\">Return a serialized version of the value stored at the specified key.</span> </a> </li> <li data-group=\"connection\" data-name=\"echo\"> <a href=\"echo\"> <span class=\"command\"> ECHO <span class=\"args\"> message </span> </span> <span class=\"summary\">Echo the given string</span> </a> </li> <li data-group=\"scripting\" data-name=\"eval\"> <a href=\"eval\"> <span class=\"command\"> EVAL <span class=\"args\"> script numkeys key [key ...] arg [arg ...] </span> </span> <span class=\"summary\">Execute a Lua script server side</span> </a> </li> <li data-group=\"scripting\" data-name=\"evalsha\"> <a href=\"evalsha\"> <span class=\"command\"> EVALSHA <span class=\"args\"> sha1 numkeys key [key ...] arg [arg ...] </span> </span> <span class=\"summary\">Execute a Lua script server side</span> </a> </li> <li data-group=\"transactions\" data-name=\"exec\"> <a href=\"exec\"> <span class=\"command\"> EXEC  </span> <span class=\"summary\">Execute all commands issued after MULTI</span> </a> </li> <li data-group=\"generic\" data-name=\"exists\"> <a href=\"exists\"> <span class=\"command\"> EXISTS <span class=\"args\"> key [key ...] </span> </span> <span class=\"summary\">Determine if a key exists</span> </a> </li> <li data-group=\"generic\" data-name=\"expire\"> <a href=\"expire\"> <span class=\"command\"> EXPIRE <span class=\"args\"> key seconds </span> </span> <span class=\"summary\">Set a key's time to live in seconds</span> </a> </li> <li data-group=\"generic\" data-name=\"expireat\"> <a href=\"expireat\"> <span class=\"command\"> EXPIREAT <span class=\"args\"> key timestamp </span> </span> <span class=\"summary\">Set the expiration for a key as a UNIX timestamp</span> </a> </li> <li data-group=\"server\" data-name=\"flushall\"> <a href=\"flushall\"> <span class=\"command\"> FLUSHALL  </span> <span class=\"summary\">Remove all keys from all databases</span> </a> </li> <li data-group=\"server\" data-name=\"flushdb\"> <a href=\"flushdb\"> <span class=\"command\"> FLUSHDB  </span> <span class=\"summary\">Remove all keys from the current database</span> </a> </li> <li data-group=\"geo\" data-name=\"geoadd\"> <a href=\"geoadd\"> <span class=\"command\"> GEOADD <span class=\"args\"> key longitude latitude member [longitude latitude member ...] </span> </span> <span class=\"summary\">Add one or more geospatial items in the geospatial index represented using a sorted set</span> </a> </li> <li data-group=\"geo\" data-name=\"geohash\"> <a href=\"geohash\"> <span class=\"command\"> GEOHASH <span class=\"args\"> key member [member ...] </span> </span> <span class=\"summary\">Returns members of a geospatial index as standard geohash strings</span> </a> </li> <li data-group=\"geo\" data-name=\"geopos\"> <a href=\"geopos\"> <span class=\"command\"> GEOPOS <span class=\"args\"> key member [member ...] </span> </span> <span class=\"summary\">Returns longitude and latitude of members of a geospatial index</span> </a> </li> <li data-group=\"geo\" data-name=\"geodist\"> <a href=\"geodist\"> <span class=\"command\"> GEODIST <span class=\"args\"> key member1 member2 [unit] </span> </span> <span class=\"summary\">Returns the distance between two members of a geospatial index</span> </a> </li> <li data-group=\"geo\" data-name=\"georadius\"> <a href=\"georadius\"> <span class=\"command\"> GEORADIUS <span class=\"args\"> key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key] </span> </span> <span class=\"summary\">Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point</span> </a> </li> <li data-group=\"geo\" data-name=\"georadiusbymember\"> <a href=\"georadiusbymember\"> <span class=\"command\"> GEORADIUSBYMEMBER <span class=\"args\"> key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key] </span> </span> <span class=\"summary\">Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member</span> </a> </li> <li data-group=\"string\" data-name=\"get\"> <a href=\"get\"> <span class=\"command\"> GET <span class=\"args\"> key </span> </span> <span class=\"summary\">Get the value of a key</span> </a> </li> <li data-group=\"string\" data-name=\"getbit\"> <a href=\"getbit\"> <span class=\"command\"> GETBIT <span class=\"args\"> key offset </span> </span> <span class=\"summary\">Returns the bit value at offset in the string value stored at key</span> </a> </li> <li data-group=\"string\" data-name=\"getrange\"> <a href=\"getrange\"> <span class=\"command\"> GETRANGE <span class=\"args\"> key start end </span> </span> <span class=\"summary\">Get a substring of the string stored at a key</span> </a> </li> <li data-group=\"string\" data-name=\"getset\"> <a href=\"getset\"> <span class=\"command\"> GETSET <span class=\"args\"> key value </span> </span> <span class=\"summary\">Set the string value of a key and return its old value</span> </a> </li> <li data-group=\"hash\" data-name=\"hdel\"> <a href=\"hdel\"> <span class=\"command\"> HDEL <span class=\"args\"> key field [field ...] </span> </span> <span class=\"summary\">Delete one or more hash fields</span> </a> </li> <li data-group=\"hash\" data-name=\"hexists\"> <a href=\"hexists\"> <span class=\"command\"> HEXISTS <span class=\"args\"> key field </span> </span> <span class=\"summary\">Determine if a hash field exists</span> </a> </li> <li data-group=\"hash\" data-name=\"hget\"> <a href=\"hget\"> <span class=\"command\"> HGET <span class=\"args\"> key field </span> </span> <span class=\"summary\">Get the value of a hash field</span> </a> </li> <li data-group=\"hash\" data-name=\"hgetall\"> <a href=\"hgetall\"> <span class=\"command\"> HGETALL <span class=\"args\"> key </span> </span> <span class=\"summary\">Get all the fields and values in a hash</span> </a> </li> <li data-group=\"hash\" data-name=\"hincrby\"> <a href=\"hincrby\"> <span class=\"command\"> HINCRBY <span class=\"args\"> key field increment </span> </span> <span class=\"summary\">Increment the integer value of a hash field by the given number</span> </a> </li> <li data-group=\"hash\" data-name=\"hincrbyfloat\"> <a href=\"hincrbyfloat\"> <span class=\"command\"> HINCRBYFLOAT <span class=\"args\"> key field increment </span> </span> <span class=\"summary\">Increment the float value of a hash field by the given amount</span> </a> </li> <li data-group=\"hash\" data-name=\"hkeys\"> <a href=\"hkeys\"> <span class=\"command\"> HKEYS <span class=\"args\"> key </span> </span> <span class=\"summary\">Get all the fields in a hash</span> </a> </li> <li data-group=\"hash\" data-name=\"hlen\"> <a href=\"hlen\"> <span class=\"command\"> HLEN <span class=\"args\"> key </span> </span> <span class=\"summary\">Get the number of fields in a hash</span> </a> </li> <li data-group=\"hash\" data-name=\"hmget\"> <a href=\"hmget\"> <span class=\"command\"> HMGET <span class=\"args\"> key field [field ...] </span> </span> <span class=\"summary\">Get the values of all the given hash fields</span> </a> </li> <li data-group=\"hash\" data-name=\"hmset\"> <a href=\"hmset\"> <span class=\"command\"> HMSET <span class=\"args\"> key field value [field value ...] </span> </span> <span class=\"summary\">Set multiple hash fields to multiple values</span> </a> </li> <li data-group=\"hash\" data-name=\"hset\"> <a href=\"hset\"> <span class=\"command\"> HSET <span class=\"args\"> key field value </span> </span> <span class=\"summary\">Set the string value of a hash field</span> </a> </li> <li data-group=\"hash\" data-name=\"hsetnx\"> <a href=\"hsetnx\"> <span class=\"command\"> HSETNX <span class=\"args\"> key field value </span> </span> <span class=\"summary\">Set the value of a hash field, only if the field does not exist</span> </a> </li> <li data-group=\"hash\" data-name=\"hstrlen\"> <a href=\"hstrlen\"> <span class=\"command\"> HSTRLEN <span class=\"args\"> key field </span> </span> <span class=\"summary\">Get the length of the value of a hash field</span> </a> </li> <li data-group=\"hash\" data-name=\"hvals\"> <a href=\"hvals\"> <span class=\"command\"> HVALS <span class=\"args\"> key </span> </span> <span class=\"summary\">Get all the values in a hash</span> </a> </li> <li data-group=\"string\" data-name=\"incr\"> <a href=\"incr\"> <span class=\"command\"> INCR <span class=\"args\"> key </span> </span> <span class=\"summary\">Increment the integer value of a key by one</span> </a> </li> <li data-group=\"string\" data-name=\"incrby\"> <a href=\"incrby\"> <span class=\"command\"> INCRBY <span class=\"args\"> key increment </span> </span> <span class=\"summary\">Increment the integer value of a key by the given amount</span> </a> </li> <li data-group=\"string\" data-name=\"incrbyfloat\"> <a href=\"incrbyfloat\"> <span class=\"command\"> INCRBYFLOAT <span class=\"args\"> key increment </span> </span> <span class=\"summary\">Increment the float value of a key by the given amount</span> </a> </li> <li data-group=\"server\" data-name=\"info\"> <a href=\"info\"> <span class=\"command\"> INFO <span class=\"args\"> [section] </span> </span> <span class=\"summary\">Get information and statistics about the server</span> </a> </li> <li data-group=\"generic\" data-name=\"keys\"> <a href=\"keys\"> <span class=\"command\"> KEYS <span class=\"args\"> pattern </span> </span> <span class=\"summary\">Find all keys matching the given pattern</span> </a> </li> <li data-group=\"server\" data-name=\"lastsave\"> <a href=\"lastsave\"> <span class=\"command\"> LASTSAVE  </span> <span class=\"summary\">Get the UNIX time stamp of the last successful save to disk</span> </a> </li> <li data-group=\"list\" data-name=\"lindex\"> <a href=\"lindex\"> <span class=\"command\"> LINDEX <span class=\"args\"> key index </span> </span> <span class=\"summary\">Get an element from a list by its index</span> </a> </li> <li data-group=\"list\" data-name=\"linsert\"> <a href=\"linsert\"> <span class=\"command\"> LINSERT <span class=\"args\"> key BEFORE|AFTER pivot value </span> </span> <span class=\"summary\">Insert an element before or after another element in a list</span> </a> </li> <li data-group=\"list\" data-name=\"llen\"> <a href=\"llen\"> <span class=\"command\"> LLEN <span class=\"args\"> key </span> </span> <span class=\"summary\">Get the length of a list</span> </a> </li> <li data-group=\"list\" data-name=\"lpop\"> <a href=\"lpop\"> <span class=\"command\"> LPOP <span class=\"args\"> key </span> </span> <span class=\"summary\">Remove and get the first element in a list</span> </a> </li> <li data-group=\"list\" data-name=\"lpush\"> <a href=\"lpush\"> <span class=\"command\"> LPUSH <span class=\"args\"> key value [value ...] </span> </span> <span class=\"summary\">Prepend one or multiple values to a list</span> </a> </li> <li data-group=\"list\" data-name=\"lpushx\"> <a href=\"lpushx\"> <span class=\"command\"> LPUSHX <span class=\"args\"> key value </span> </span> <span class=\"summary\">Prepend a value to a list, only if the list exists</span> </a> </li> <li data-group=\"list\" data-name=\"lrange\"> <a href=\"lrange\"> <span class=\"command\"> LRANGE <span class=\"args\"> key start stop </span> </span> <span class=\"summary\">Get a range of elements from a list</span> </a> </li> <li data-group=\"list\" data-name=\"lrem\"> <a href=\"lrem\"> <span class=\"command\"> LREM <span class=\"args\"> key count value </span> </span> <span class=\"summary\">Remove elements from a list</span> </a> </li> <li data-group=\"list\" data-name=\"lset\"> <a href=\"lset\"> <span class=\"command\"> LSET <span class=\"args\"> key index value </span> </span> <span class=\"summary\">Set the value of an element in a list by its index</span> </a> </li> <li data-group=\"list\" data-name=\"ltrim\"> <a href=\"ltrim\"> <span class=\"command\"> LTRIM <span class=\"args\"> key start stop </span> </span> <span class=\"summary\">Trim a list to the specified range</span> </a> </li> <li data-group=\"string\" data-name=\"mget\"> <a href=\"mget\"> <span class=\"command\"> MGET <span class=\"args\"> key [key ...] </span> </span> <span class=\"summary\">Get the values of all the given keys</span> </a> </li> <li data-group=\"generic\" data-name=\"migrate\"> <a href=\"migrate\"> <span class=\"command\"> MIGRATE <span class=\"args\"> host port key|\"\" destination-db timeout [COPY] [REPLACE] [KEYS key [key ...]] </span> </span> <span class=\"summary\">Atomically transfer a key from a Redis instance to another one.</span> </a> </li> <li data-group=\"server\" data-name=\"monitor\"> <a href=\"monitor\"> <span class=\"command\"> MONITOR  </span> <span class=\"summary\">Listen for all requests received by the server in real time</span> </a> </li> <li data-group=\"generic\" data-name=\"move\"> <a href=\"move\"> <span class=\"command\"> MOVE <span class=\"args\"> key db </span> </span> <span class=\"summary\">Move a key to another database</span> </a> </li> <li data-group=\"string\" data-name=\"mset\"> <a href=\"mset\"> <span class=\"command\"> MSET <span class=\"args\"> key value [key value ...] </span> </span> <span class=\"summary\">Set multiple keys to multiple values</span> </a> </li> <li data-group=\"string\" data-name=\"msetnx\"> <a href=\"msetnx\"> <span class=\"command\"> MSETNX <span class=\"args\"> key value [key value ...] </span> </span> <span class=\"summary\">Set multiple keys to multiple values, only if none of the keys exist</span> </a> </li> <li data-group=\"transactions\" data-name=\"multi\"> <a href=\"multi\"> <span class=\"command\"> MULTI  </span> <span class=\"summary\">Mark the start of a transaction block</span> </a> </li> <li data-group=\"generic\" data-name=\"object\"> <a href=\"object\"> <span class=\"command\"> OBJECT <span class=\"args\"> subcommand [arguments [arguments ...]] </span> </span> <span class=\"summary\">Inspect the internals of Redis objects</span> </a> </li> <li data-group=\"generic\" data-name=\"persist\"> <a href=\"persist\"> <span class=\"command\"> PERSIST <span class=\"args\"> key </span> </span> <span class=\"summary\">Remove the expiration from a key</span> </a> </li> <li data-group=\"generic\" data-name=\"pexpire\"> <a href=\"pexpire\"> <span class=\"command\"> PEXPIRE <span class=\"args\"> key milliseconds </span> </span> <span class=\"summary\">Set a key's time to live in milliseconds</span> </a> </li> <li data-group=\"generic\" data-name=\"pexpireat\"> <a href=\"pexpireat\"> <span class=\"command\"> PEXPIREAT <span class=\"args\"> key milliseconds-timestamp </span> </span> <span class=\"summary\">Set the expiration for a key as a UNIX timestamp specified in milliseconds</span> </a> </li> <li data-group=\"hyperloglog\" data-name=\"pfadd\"> <a href=\"pfadd\"> <span class=\"command\"> PFADD <span class=\"args\"> key element [element ...] </span> </span> <span class=\"summary\">Adds the specified elements to the specified HyperLogLog.</span> </a> </li> <li data-group=\"hyperloglog\" data-name=\"pfcount\"> <a href=\"pfcount\"> <span class=\"command\"> PFCOUNT <span class=\"args\"> key [key ...] </span> </span> <span class=\"summary\">Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).</span> </a> </li> <li data-group=\"hyperloglog\" data-name=\"pfmerge\"> <a href=\"pfmerge\"> <span class=\"command\"> PFMERGE <span class=\"args\"> destkey sourcekey [sourcekey ...] </span> </span> <span class=\"summary\">Merge N different HyperLogLogs into a single one.</span> </a> </li> <li data-group=\"connection\" data-name=\"ping\"> <a href=\"ping\"> <span class=\"command\"> PING <span class=\"args\"> [message] </span> </span> <span class=\"summary\">Ping the server</span> </a> </li> <li data-group=\"string\" data-name=\"psetex\"> <a href=\"psetex\"> <span class=\"command\"> PSETEX <span class=\"args\"> key milliseconds value </span> </span> <span class=\"summary\">Set the value and expiration in milliseconds of a key</span> </a> </li> <li data-group=\"pubsub\" data-name=\"psubscribe\"> <a href=\"psubscribe\"> <span class=\"command\"> PSUBSCRIBE <span class=\"args\"> pattern [pattern ...] </span> </span> <span class=\"summary\">Listen for messages published to channels matching the given patterns</span> </a> </li> <li data-group=\"pubsub\" data-name=\"pubsub\"> <a href=\"pubsub\"> <span class=\"command\"> PUBSUB <span class=\"args\"> subcommand [argument [argument ...]] </span> </span> <span class=\"summary\">Inspect the state of the Pub/Sub subsystem</span> </a> </li> <li data-group=\"generic\" data-name=\"pttl\"> <a href=\"pttl\"> <span class=\"command\"> PTTL <span class=\"args\"> key </span> </span> <span class=\"summary\">Get the time to live for a key in milliseconds</span> </a> </li> <li data-group=\"pubsub\" data-name=\"publish\"> <a href=\"publish\"> <span class=\"command\"> PUBLISH <span class=\"args\"> channel message </span> </span> <span class=\"summary\">Post a message to a channel</span> </a> </li> <li data-group=\"pubsub\" data-name=\"punsubscribe\"> <a href=\"punsubscribe\"> <span class=\"command\"> PUNSUBSCRIBE <span class=\"args\"> [pattern [pattern ...]] </span> </span> <span class=\"summary\">Stop listening for messages posted to channels matching the given patterns</span> </a> </li> <li data-group=\"connection\" data-name=\"quit\"> <a href=\"quit\"> <span class=\"command\"> QUIT  </span> <span class=\"summary\">Close the connection</span> </a> </li> <li data-group=\"generic\" data-name=\"randomkey\"> <a href=\"randomkey\"> <span class=\"command\"> RANDOMKEY  </span> <span class=\"summary\">Return a random key from the keyspace</span> </a> </li> <li data-group=\"cluster\" data-name=\"readonly\"> <a href=\"readonly\"> <span class=\"command\"> READONLY  </span> <span class=\"summary\">Enables read queries for a connection to a cluster slave node</span> </a> </li> <li data-group=\"cluster\" data-name=\"readwrite\"> <a href=\"readwrite\"> <span class=\"command\"> READWRITE  </span> <span class=\"summary\">Disables read queries for a connection to a cluster slave node</span> </a> </li> <li data-group=\"generic\" data-name=\"rename\"> <a href=\"rename\"> <span class=\"command\"> RENAME <span class=\"args\"> key newkey </span> </span> <span class=\"summary\">Rename a key</span> </a> </li> <li data-group=\"generic\" data-name=\"renamenx\"> <a href=\"renamenx\"> <span class=\"command\"> RENAMENX <span class=\"args\"> key newkey </span> </span> <span class=\"summary\">Rename a key, only if the new key does not exist</span> </a> </li> <li data-group=\"generic\" data-name=\"restore\"> <a href=\"restore\"> <span class=\"command\"> RESTORE <span class=\"args\"> key ttl serialized-value [REPLACE] </span> </span> <span class=\"summary\">Create a key using the provided serialized value, previously obtained using DUMP.</span> </a> </li> <li data-group=\"server\" data-name=\"role\"> <a href=\"role\"> <span class=\"command\"> ROLE  </span> <span class=\"summary\">Return the role of the instance in the context of replication</span> </a> </li> <li data-group=\"list\" data-name=\"rpop\"> <a href=\"rpop\"> <span class=\"command\"> RPOP <span class=\"args\"> key </span> </span> <span class=\"summary\">Remove and get the last element in a list</span> </a> </li> <li data-group=\"list\" data-name=\"rpoplpush\"> <a href=\"rpoplpush\"> <span class=\"command\"> RPOPLPUSH <span class=\"args\"> source destination </span> </span> <span class=\"summary\">Remove the last element in a list, prepend it to another list and return it</span> </a> </li> <li data-group=\"list\" data-name=\"rpush\"> <a href=\"rpush\"> <span class=\"command\"> RPUSH <span class=\"args\"> key value [value ...] </span> </span> <span class=\"summary\">Append one or multiple values to a list</span> </a> </li> <li data-group=\"list\" data-name=\"rpushx\"> <a href=\"rpushx\"> <span class=\"command\"> RPUSHX <span class=\"args\"> key value </span> </span> <span class=\"summary\">Append a value to a list, only if the list exists</span> </a> </li> <li data-group=\"set\" data-name=\"sadd\"> <a href=\"sadd\"> <span class=\"command\"> SADD <span class=\"args\"> key member [member ...] </span> </span> <span class=\"summary\">Add one or more members to a set</span> </a> </li> <li data-group=\"server\" data-name=\"save\"> <a href=\"save\"> <span class=\"command\"> SAVE  </span> <span class=\"summary\">Synchronously save the dataset to disk</span> </a> </li> <li data-group=\"set\" data-name=\"scard\"> <a href=\"scard\"> <span class=\"command\"> SCARD <span class=\"args\"> key </span> </span> <span class=\"summary\">Get the number of members in a set</span> </a> </li> <li data-group=\"scripting\" data-name=\"script debug\"> <a href=\"script-debug\"> <span class=\"command\"> SCRIPT DEBUG <span class=\"args\"> YES|SYNC|NO </span> </span> <span class=\"summary\">Set the debug mode for executed scripts.</span> </a> </li> <li data-group=\"scripting\" data-name=\"script exists\"> <a href=\"script-exists\"> <span class=\"command\"> SCRIPT EXISTS <span class=\"args\"> script [script ...] </span> </span> <span class=\"summary\">Check existence of scripts in the script cache.</span> </a> </li> <li data-group=\"scripting\" data-name=\"script flush\"> <a href=\"script-flush\"> <span class=\"command\"> SCRIPT FLUSH  </span> <span class=\"summary\">Remove all the scripts from the script cache.</span> </a> </li> <li data-group=\"scripting\" data-name=\"script kill\"> <a href=\"script-kill\"> <span class=\"command\"> SCRIPT KILL  </span> <span class=\"summary\">Kill the script currently in execution.</span> </a> </li> <li data-group=\"scripting\" data-name=\"script load\"> <a href=\"script-load\"> <span class=\"command\"> SCRIPT LOAD <span class=\"args\"> script </span> </span> <span class=\"summary\">Load the specified Lua script into the script cache.</span> </a> </li> <li data-group=\"set\" data-name=\"sdiff\"> <a href=\"sdiff\"> <span class=\"command\"> SDIFF <span class=\"args\"> key [key ...] </span> </span> <span class=\"summary\">Subtract multiple sets</span> </a> </li> <li data-group=\"set\" data-name=\"sdiffstore\"> <a href=\"sdiffstore\"> <span class=\"command\"> SDIFFSTORE <span class=\"args\"> destination key [key ...] </span> </span> <span class=\"summary\">Subtract multiple sets and store the resulting set in a key</span> </a> </li> <li data-group=\"connection\" data-name=\"select\"> <a href=\"select\"> <span class=\"command\"> SELECT <span class=\"args\"> index </span> </span> <span class=\"summary\">Change the selected database for the current connection</span> </a> </li> <li data-group=\"string\" data-name=\"set\"> <a href=\"set\"> <span class=\"command\"> SET <span class=\"args\"> key value [EX seconds] [PX milliseconds] [NX|XX] </span> </span> <span class=\"summary\">Set the string value of a key</span> </a> </li> <li data-group=\"string\" data-name=\"setbit\"> <a href=\"setbit\"> <span class=\"command\"> SETBIT <span class=\"args\"> key offset value </span> </span> <span class=\"summary\">Sets or clears the bit at offset in the string value stored at key</span> </a> </li> <li data-group=\"string\" data-name=\"setex\"> <a href=\"setex\"> <span class=\"command\"> SETEX <span class=\"args\"> key seconds value </span> </span> <span class=\"summary\">Set the value and expiration of a key</span> </a> </li> <li data-group=\"string\" data-name=\"setnx\"> <a href=\"setnx\"> <span class=\"command\"> SETNX <span class=\"args\"> key value </span> </span> <span class=\"summary\">Set the value of a key, only if the key does not exist</span> </a> </li> <li data-group=\"string\" data-name=\"setrange\"> <a href=\"setrange\"> <span class=\"command\"> SETRANGE <span class=\"args\"> key offset value </span> </span> <span class=\"summary\">Overwrite part of a string at key starting at the specified offset</span> </a> </li> <li data-group=\"server\" data-name=\"shutdown\"> <a href=\"shutdown\"> <span class=\"command\"> SHUTDOWN <span class=\"args\"> [NOSAVE|SAVE] </span> </span> <span class=\"summary\">Synchronously save the dataset to disk and then shut down the server</span> </a> </li> <li data-group=\"set\" data-name=\"sinter\"> <a href=\"sinter\"> <span class=\"command\"> SINTER <span class=\"args\"> key [key ...] </span> </span> <span class=\"summary\">Intersect multiple sets</span> </a> </li> <li data-group=\"set\" data-name=\"sinterstore\"> <a href=\"sinterstore\"> <span class=\"command\"> SINTERSTORE <span class=\"args\"> destination key [key ...] </span> </span> <span class=\"summary\">Intersect multiple sets and store the resulting set in a key</span> </a> </li> <li data-group=\"set\" data-name=\"sismember\"> <a href=\"sismember\"> <span class=\"command\"> SISMEMBER <span class=\"args\"> key member </span> </span> <span class=\"summary\">Determine if a given value is a member of a set</span> </a> </li> <li data-group=\"server\" data-name=\"slaveof\"> <a href=\"slaveof\"> <span class=\"command\"> SLAVEOF <span class=\"args\"> host port </span> </span> <span class=\"summary\">Make the server a slave of another instance, or promote it as master</span> </a> </li> <li data-group=\"server\" data-name=\"slowlog\"> <a href=\"slowlog\"> <span class=\"command\"> SLOWLOG <span class=\"args\"> subcommand [argument] </span> </span> <span class=\"summary\">Manages the Redis slow queries log</span> </a> </li> <li data-group=\"set\" data-name=\"smembers\"> <a href=\"smembers\"> <span class=\"command\"> SMEMBERS <span class=\"args\"> key </span> </span> <span class=\"summary\">Get all the members in a set</span> </a> </li> <li data-group=\"set\" data-name=\"smove\"> <a href=\"smove\"> <span class=\"command\"> SMOVE <span class=\"args\"> source destination member </span> </span> <span class=\"summary\">Move a member from one set to another</span> </a> </li> <li data-group=\"generic\" data-name=\"sort\"> <a href=\"sort\"> <span class=\"command\"> SORT <span class=\"args\"> key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination] </span> </span> <span class=\"summary\">Sort the elements in a list, set or sorted set</span> </a> </li> <li data-group=\"set\" data-name=\"spop\"> <a href=\"spop\"> <span class=\"command\"> SPOP <span class=\"args\"> key [count] </span> </span> <span class=\"summary\">Remove and return one or multiple random members from a set</span> </a> </li> <li data-group=\"set\" data-name=\"srandmember\"> <a href=\"srandmember\"> <span class=\"command\"> SRANDMEMBER <span class=\"args\"> key [count] </span> </span> <span class=\"summary\">Get one or multiple random members from a set</span> </a> </li> <li data-group=\"set\" data-name=\"srem\"> <a href=\"srem\"> <span class=\"command\"> SREM <span class=\"args\"> key member [member ...] </span> </span> <span class=\"summary\">Remove one or more members from a set</span> </a> </li> <li data-group=\"string\" data-name=\"strlen\"> <a href=\"strlen\"> <span class=\"command\"> STRLEN <span class=\"args\"> key </span> </span> <span class=\"summary\">Get the length of the value stored in a key</span> </a> </li> <li data-group=\"pubsub\" data-name=\"subscribe\"> <a href=\"subscribe\"> <span class=\"command\"> SUBSCRIBE <span class=\"args\"> channel [channel ...] </span> </span> <span class=\"summary\">Listen for messages published to the given channels</span> </a> </li> <li data-group=\"set\" data-name=\"sunion\"> <a href=\"sunion\"> <span class=\"command\"> SUNION <span class=\"args\"> key [key ...] </span> </span> <span class=\"summary\">Add multiple sets</span> </a> </li> <li data-group=\"set\" data-name=\"sunionstore\"> <a href=\"sunionstore\"> <span class=\"command\"> SUNIONSTORE <span class=\"args\"> destination key [key ...] </span> </span> <span class=\"summary\">Add multiple sets and store the resulting set in a key</span> </a> </li> <li data-group=\"server\" data-name=\"sync\"> <a href=\"sync\"> <span class=\"command\"> SYNC  </span> <span class=\"summary\">Internal command used for replication</span> </a> </li> <li data-group=\"server\" data-name=\"time\"> <a href=\"time\"> <span class=\"command\"> TIME  </span> <span class=\"summary\">Return the current server time</span> </a> </li> <li data-group=\"generic\" data-name=\"ttl\"> <a href=\"ttl\"> <span class=\"command\"> TTL <span class=\"args\"> key </span> </span> <span class=\"summary\">Get the time to live for a key</span> </a> </li> <li data-group=\"generic\" data-name=\"type\"> <a href=\"type\"> <span class=\"command\"> TYPE <span class=\"args\"> key </span> </span> <span class=\"summary\">Determine the type stored at key</span> </a> </li> <li data-group=\"pubsub\" data-name=\"unsubscribe\"> <a href=\"unsubscribe\"> <span class=\"command\"> UNSUBSCRIBE <span class=\"args\"> [channel [channel ...]] </span> </span> <span class=\"summary\">Stop listening for messages posted to the given channels</span> </a> </li> <li data-group=\"transactions\" data-name=\"unwatch\"> <a href=\"unwatch\"> <span class=\"command\"> UNWATCH  </span> <span class=\"summary\">Forget about all watched keys</span> </a> </li> <li data-group=\"generic\" data-name=\"wait\"> <a href=\"wait\"> <span class=\"command\"> WAIT <span class=\"args\"> numslaves timeout </span> </span> <span class=\"summary\">Wait for the synchronous replication of all the write commands sent in the context of the current connection</span> </a> </li> <li data-group=\"transactions\" data-name=\"watch\"> <a href=\"watch\"> <span class=\"command\"> WATCH <span class=\"args\"> key [key ...] </span> </span> <span class=\"summary\">Watch the given keys to determine execution of the MULTI/EXEC block</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zadd\"> <a href=\"zadd\"> <span class=\"command\"> ZADD <span class=\"args\"> key [NX|XX] [CH] [INCR] score member [score member ...] </span> </span> <span class=\"summary\">Add one or more members to a sorted set, or update its score if it already exists</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zcard\"> <a href=\"zcard\"> <span class=\"command\"> ZCARD <span class=\"args\"> key </span> </span> <span class=\"summary\">Get the number of members in a sorted set</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zcount\"> <a href=\"zcount\"> <span class=\"command\"> ZCOUNT <span class=\"args\"> key min max </span> </span> <span class=\"summary\">Count the members in a sorted set with scores within the given values</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zincrby\"> <a href=\"zincrby\"> <span class=\"command\"> ZINCRBY <span class=\"args\"> key increment member </span> </span> <span class=\"summary\">Increment the score of a member in a sorted set</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zinterstore\"> <a href=\"zinterstore\"> <span class=\"command\"> ZINTERSTORE <span class=\"args\"> destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX] </span> </span> <span class=\"summary\">Intersect multiple sorted sets and store the resulting sorted set in a new key</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zlexcount\"> <a href=\"zlexcount\"> <span class=\"command\"> ZLEXCOUNT <span class=\"args\"> key min max </span> </span> <span class=\"summary\">Count the number of members in a sorted set between a given lexicographical range</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zrange\"> <a href=\"zrange\"> <span class=\"command\"> ZRANGE <span class=\"args\"> key start stop [WITHSCORES] </span> </span> <span class=\"summary\">Return a range of members in a sorted set, by index</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zrangebylex\"> <a href=\"zrangebylex\"> <span class=\"command\"> ZRANGEBYLEX <span class=\"args\"> key min max [LIMIT offset count] </span> </span> <span class=\"summary\">Return a range of members in a sorted set, by lexicographical range</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zrevrangebylex\"> <a href=\"zrevrangebylex\"> <span class=\"command\"> ZREVRANGEBYLEX <span class=\"args\"> key max min [LIMIT offset count] </span> </span> <span class=\"summary\">Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zrangebyscore\"> <a href=\"zrangebyscore\"> <span class=\"command\"> ZRANGEBYSCORE <span class=\"args\"> key min max [WITHSCORES] [LIMIT offset count] </span> </span> <span class=\"summary\">Return a range of members in a sorted set, by score</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zrank\"> <a href=\"zrank\"> <span class=\"command\"> ZRANK <span class=\"args\"> key member </span> </span> <span class=\"summary\">Determine the index of a member in a sorted set</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zrem\"> <a href=\"zrem\"> <span class=\"command\"> ZREM <span class=\"args\"> key member [member ...] </span> </span> <span class=\"summary\">Remove one or more members from a sorted set</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zremrangebylex\"> <a href=\"zremrangebylex\"> <span class=\"command\"> ZREMRANGEBYLEX <span class=\"args\"> key min max </span> </span> <span class=\"summary\">Remove all members in a sorted set between the given lexicographical range</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zremrangebyrank\"> <a href=\"zremrangebyrank\"> <span class=\"command\"> ZREMRANGEBYRANK <span class=\"args\"> key start stop </span> </span> <span class=\"summary\">Remove all members in a sorted set within the given indexes</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zremrangebyscore\"> <a href=\"zremrangebyscore\"> <span class=\"command\"> ZREMRANGEBYSCORE <span class=\"args\"> key min max </span> </span> <span class=\"summary\">Remove all members in a sorted set within the given scores</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zrevrange\"> <a href=\"zrevrange\"> <span class=\"command\"> ZREVRANGE <span class=\"args\"> key start stop [WITHSCORES] </span> </span> <span class=\"summary\">Return a range of members in a sorted set, by index, with scores ordered from high to low</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zrevrangebyscore\"> <a href=\"zrevrangebyscore\"> <span class=\"command\"> ZREVRANGEBYSCORE <span class=\"args\"> key max min [WITHSCORES] [LIMIT offset count] </span> </span> <span class=\"summary\">Return a range of members in a sorted set, by score, with scores ordered from high to low</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zrevrank\"> <a href=\"zrevrank\"> <span class=\"command\"> ZREVRANK <span class=\"args\"> key member </span> </span> <span class=\"summary\">Determine the index of a member in a sorted set, with scores ordered from high to low</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zscore\"> <a href=\"zscore\"> <span class=\"command\"> ZSCORE <span class=\"args\"> key member </span> </span> <span class=\"summary\">Get the score associated with the given member in a sorted set</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zunionstore\"> <a href=\"zunionstore\"> <span class=\"command\"> ZUNIONSTORE <span class=\"args\"> destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX] </span> </span> <span class=\"summary\">Add multiple sorted sets and store the resulting sorted set in a new key</span> </a> </li> <li data-group=\"generic\" data-name=\"scan\"> <a href=\"scan\"> <span class=\"command\"> SCAN <span class=\"args\"> cursor [MATCH pattern] [COUNT count] </span> </span> <span class=\"summary\">Incrementally iterate the keys space</span> </a> </li> <li data-group=\"set\" data-name=\"sscan\"> <a href=\"sscan\"> <span class=\"command\"> SSCAN <span class=\"args\"> key cursor [MATCH pattern] [COUNT count] </span> </span> <span class=\"summary\">Incrementally iterate Set elements</span> </a> </li> <li data-group=\"hash\" data-name=\"hscan\"> <a href=\"hscan\"> <span class=\"command\"> HSCAN <span class=\"args\"> key cursor [MATCH pattern] [COUNT count] </span> </span> <span class=\"summary\">Incrementally iterate hash fields and associated values</span> </a> </li> <li data-group=\"sorted_set\" data-name=\"zscan\"> <a href=\"zscan\"> <span class=\"command\"> ZSCAN <span class=\"args\"> key cursor [MATCH pattern] [COUNT count] </span> </span> <span class=\"summary\">Incrementally iterate sorted sets elements and associated scores</span> </a> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands\" class=\"_attribution-link\">http://redis.io/commands</a>\n  </p>\n</div>\n","append":"<h1 class=\"command\">APPEND</h1>\n<pre>APPEND key value</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.</p> </div> <p>If <code>key</code> already exists and is a string, this command appends the <code>value</code> at the end of the string. If <code>key</code> does not exist it is created and set as an empty string, so <a href=\"append\">APPEND</a> will be similar to <a href=\"set\">SET</a> in this special case.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the length of the string after the append operation.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"2c0feebe13230f8cb30b9fee82a6b77b\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">EXISTS mykey</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">APPEND mykey \"Hello\"</span> <code>(integer) 5</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">APPEND mykey \" World\"</span> <code>(integer) 11</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET mykey</span> <code>\"Hello World\"</code>\n</div> <h2>Pattern: Time series</h2> <p>The <a href=\"append\">APPEND</a> command can be used to create a very compact representation of a list of fixed-size samples, usually referred as <em>time series</em>. Every time a new sample arrives we can store it using the command</p> <pre>APPEND timeseries \"fixed-size sample\"\n</pre> <p>Accessing individual elements in the time series is not hard:</p> <ul> <li>\n<a href=\"strlen\">STRLEN</a> can be used in order to obtain the number of samples.</li> <li>\n<a href=\"getrange\">GETRANGE</a> allows for random access of elements. If our time series have associated time information we can easily implement a binary search to get range combining <a href=\"getrange\">GETRANGE</a> with the Lua scripting engine available in Redis 2.6.</li> <li>\n<a href=\"setrange\">SETRANGE</a> can be used to overwrite an existing time series.</li> </ul> <p>The limitation of this pattern is that we are forced into an append-only mode of operation, there is no way to cut the time series to a given size easily because Redis currently lacks a command able to trim string objects. However the space efficiency of time series stored in this way is remarkable.</p> <p>Hint: it is possible to switch to a different key based on the current Unix time, in this way it is possible to have just a relatively small amount of samples per key, to avoid dealing with very big keys, and to make this pattern more friendly to be distributed across many Redis instances.</p> <p>An example sampling the temperature of a sensor using fixed-size strings (using a binary format is better in real implementations).</p> <div class=\"example\" data-session=\"2c0feebe13230f8cb30b9fee82a6b77b\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">APPEND ts \"0043\"</span> <code>(integer) 4</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">APPEND ts \"0035\"</span> <code>(integer) 8</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GETRANGE ts 0 3</span> <code>\"0043\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GETRANGE ts 4 7</span> <code>\"0035\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/append\" class=\"_attribution-link\">http://redis.io/commands/append</a>\n  </p>\n</div>\n","bgrewriteaof":"<h1 class=\"command\">BGREWRITEAOF</h1>\n<pre>BGREWRITEAOF</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>Instruct Redis to start an <a href=\"http://redis.io/topics/persistence#append-only-file\">Append Only File</a> rewrite process. The rewrite will create a small optimized version of the current Append Only File.</p> <p>If <a href=\"bgrewriteaof\">BGREWRITEAOF</a> fails, no data gets lost as the old AOF will be untouched.</p> <p>The rewrite will be only triggered by Redis if there is not already a background process doing persistence. Specifically:</p> <ul> <li>If a Redis child is creating a snapshot on disk, the AOF rewrite is <em>scheduled</em> but not started until the saving child producing the RDB file terminates. In this case the <a href=\"bgrewriteaof\">BGREWRITEAOF</a> will still return an OK code, but with an appropriate message. You can check if an AOF rewrite is scheduled looking at the <a href=\"info\">INFO</a> command as of Redis 2.6.</li> <li>If an AOF rewrite is already in progress the command returns an error and no AOF rewrite will be scheduled for a later time.</li> </ul> <p>Since Redis 2.4 the AOF rewrite is automatically triggered by Redis, however the <a href=\"bgrewriteaof\">BGREWRITEAOF</a> command can be used to trigger a rewrite at any time.</p> <p>Please refer to the <a href=\"http://redis.io/topics/persistence\">persistence documentation</a> for detailed information.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: always <code>OK</code>.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/bgrewriteaof\" class=\"_attribution-link\">http://redis.io/commands/bgrewriteaof</a>\n  </p>\n</div>\n","auth":"<h1 class=\"command\">AUTH</h1>\n<pre>AUTH password</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>Request for authentication in a password-protected Redis server. Redis can be instructed to require a password before allowing clients to execute commands. This is done using the <code>requirepass</code> directive in the configuration file.</p> <p>If <code>password</code> matches the password in the configuration file, the server replies with the <code>OK</code> status code and starts accepting commands. Otherwise, an error is returned and the clients needs to try a new password.</p> <p><strong>Note</strong>: because of the high performance nature of Redis, it is possible to try a lot of passwords in parallel in very short time, so make sure to generate a strong and very long password so that this attack is infeasible.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/auth\" class=\"_attribution-link\">http://redis.io/commands/auth</a>\n  </p>\n</div>\n","bgsave":"<h1 class=\"command\">BGSAVE</h1>\n<pre>BGSAVE</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>Save the DB in background. The OK code is immediately returned. Redis forks, the parent continues to serve the clients, the child saves the DB on disk then exits. A client may be able to check if the operation succeeded using the <a href=\"lastsave\">LASTSAVE</a> command.</p> <p>Please refer to the <a href=\"http://redis.io/topics/persistence\">persistence documentation</a> for detailed information.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/bgsave\" class=\"_attribution-link\">http://redis.io/commands/bgsave</a>\n  </p>\n</div>\n","brpop":"<h1 class=\"command\">BRPOP</h1>\n<pre>BRPOP key [key ...] timeout</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p><a href=\"brpop\">BRPOP</a> is a blocking list pop primitive. It is the blocking version of <a href=\"rpop\">RPOP</a> because it blocks the connection when there are no elements to pop from any of the given lists. An element is popped from the tail of the first list that is non-empty, with the given keys being checked in the order that they are given.</p> <p>See the <a href=\"blpop\">BLPOP documentation</a> for the exact semantics, since <a href=\"brpop\">BRPOP</a> is identical to <a href=\"blpop\">BLPOP</a> with the only difference being that it pops elements from the tail of a list instead of popping from the head.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: specifically:</p> <ul> <li>A <code>nil</code> multi-bulk when no element could be popped and the timeout expired.</li> <li>A two-element multi-bulk with the first element being the name of the key where an element was popped and the second element being the value of the popped element.</li> </ul> <h2>Examples</h2> <pre>redis&gt; DEL list1 list2\n(integer) 0\nredis&gt; RPUSH list1 a b c\n(integer) 3\nredis&gt; BRPOP list1 list2 0\n1) \"list1\"\n2) \"c\"\n</pre>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/brpop\" class=\"_attribution-link\">http://redis.io/commands/brpop</a>\n  </p>\n</div>\n","brpoplpush":"<h1 class=\"command\">BRPOPLPUSH</h1>\n<pre>BRPOPLPUSH source destination timeout</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p><a href=\"brpoplpush\">BRPOPLPUSH</a> is the blocking variant of <a href=\"rpoplpush\">RPOPLPUSH</a>. When <code>source</code> contains elements, this command behaves exactly like <a href=\"rpoplpush\">RPOPLPUSH</a>. When used inside a <a href=\"multi\">MULTI</a>/<a href=\"exec\">EXEC</a> block, this command behaves exactly like <a href=\"rpoplpush\">RPOPLPUSH</a>. When <code>source</code> is empty, Redis will block the connection until another client pushes to it or until <code>timeout</code> is reached. A <code>timeout</code> of zero can be used to block indefinitely.</p> <p>See <a href=\"rpoplpush\">RPOPLPUSH</a> for more information.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the element being popped from <code>source</code> and pushed to <code>destination</code>. If <code>timeout</code> is reached, a <a href=\"http://redis.io/topics/protocol#nil-reply\">Null reply</a> is returned.</p> <h2>Pattern: Reliable queue</h2> <p>Please see the pattern description in the <a href=\"rpoplpush\">RPOPLPUSH</a> documentation.</p> <h2>Pattern: Circular list</h2> <p>Please see the pattern description in the <a href=\"rpoplpush\">RPOPLPUSH</a> documentation.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/brpoplpush\" class=\"_attribution-link\">http://redis.io/commands/brpoplpush</a>\n  </p>\n</div>\n","client-getname":"<h1 class=\"command\">CLIENT</h1>\n<pre>CLIENT GETNAME</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.9.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>The <a href=\"client-getname\">CLIENT GETNAME</a> returns the name of the current connection as set by <a href=\"client-setname\">CLIENT SETNAME</a>. Since every new connection starts without an associated name, if no name was assigned a null bulk reply is returned.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: The connection name, or a null bulk reply if no name is set.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/client-getname\" class=\"_attribution-link\">http://redis.io/commands/client-getname</a>\n  </p>\n</div>\n","client-reply":"<h1 class=\"command\">CLIENT</h1>\n<pre>CLIENT REPLY ON|OFF|SKIP</pre>   <div class=\"metadata\"> <p><strong>Available since 3.2.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Sometimes it can be useful for clients to completely disable replies from the Redis server. For example when the client sends fire and forget commands or performs a mass loading of data, or in caching contexts where new data is streamed constantly. In such contexts to use server time and bandwidth in order to send back replies to clients, which are going to be ignored, is considered wasteful.</p> <p>The <a href=\"client-reply\">CLIENT REPLY</a> command controls whether the server will reply the client's commands. The following modes are available:</p> <ul> <li>\n<code>ON</code>. This is the default mode in which the server returns a reply to every command.</li> <li>\n<code>OFF</code>. In this mode the server will not reply to client commands.</li> <li>\n<code>SKIP</code>. This mode skips the reply of command immediately after it.</li> </ul> <h2>Return value</h2> <p>When called with either <code>OFF</code> or <code>SKIP</code> subcommands, no reply is made. When called with <code>ON</code>:</p> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code>.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/client-reply\" class=\"_attribution-link\">http://redis.io/commands/client-reply</a>\n  </p>\n</div>\n","client-setname":"<h1 class=\"command\">CLIENT</h1>\n<pre>CLIENT SETNAME connection-name</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.9.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>The <a href=\"client-setname\">CLIENT SETNAME</a> command assigns a name to the current connection.</p> <p>The assigned name is displayed in the output of <a href=\"client-list\">CLIENT LIST</a> so that it is possible to identify the client that performed a given connection.</p> <p>For instance when Redis is used in order to implement a queue, producers and consumers of messages may want to set the name of the connection according to their role.</p> <p>There is no limit to the length of the name that can be assigned if not the usual limits of the Redis string type (512 MB). However it is not possible to use spaces in the connection name as this would violate the format of the <a href=\"client-list\">CLIENT LIST</a> reply.</p> <p>It is possible to entirely remove the connection name setting it to the empty string, that is not a valid connection name since it serves to this specific purpose.</p> <p>The connection name can be inspected using <a href=\"client-getname\">CLIENT GETNAME</a>.</p> <p>Every new connection starts without an assigned name.</p> <p>Tip: setting names to connections is a good way to debug connection leaks due to bugs in the application using Redis.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> if the connection name was successfully set.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/client-setname\" class=\"_attribution-link\">http://redis.io/commands/client-setname</a>\n  </p>\n</div>\n","cluster-count-failure-reports":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER COUNT-FAILURE-REPORTS node-id</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of failure reports</p> </div> <p>The command returns the number of <em>failure reports</em> for the specified node. Failure reports are the way Redis Cluster uses in order to promote a <code>PFAIL</code> state, that means a node is not reachable, to a <code>FAIL</code> state, that means that the majority of masters in the cluster agreed within a window of time that the node is not reachable.</p> <p>A few more details:</p> <ul> <li>A node flags another node with <code>PFAIL</code> when the node is not reachable for a time greater than the configured <em>node timeout</em>, which is a fundamental configuration parameter of a Redis Cluster.</li> <li>Nodes in <code>PFAIL</code> state are provided in gossip sections of heartbeat packets.</li> <li>Every time a node processes gossip packets from other nodes, it creates (and refreshes the TTL if needed) <strong>failure reports</strong>, remembering that a given node said another given node is in <code>PFAIL</code> condition.</li> <li>Each failure report has a time to live of two times the <em>node timeout</em> time.</li> <li>If at a given time a node has another node flagged with <code>PFAIL</code>, and at the same time collected the majority of other master nodes <em>failure reports</em> about this node (including itself if it is a master), then it elevates the failure state of the node from <code>PFAIL</code> to <code>FAIL</code>, and broadcasts a message forcing all the nodes that can be reached to flag the node as <code>FAIL</code>.</li> </ul> <p>This command returns the number of failure reports for the current node which are currently not expired (so received within two times the <em>node timeout</em> time). The count does not include what the node we are asking this count believes about the node ID we pass as argument, the count <em>only</em> includes the failure reports the node received from other nodes.</p> <p>This command is mainly useful for debugging, when the failure detector of Redis Cluster is not operating as we believe it should.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of active failure reports for the node.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-count-failure-reports\" class=\"_attribution-link\">http://redis.io/commands/cluster-count-failure-reports</a>\n  </p>\n</div>\n","cluster-delslots":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER DELSLOTS slot [slot ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the total number of hash slot arguments</p> </div> <p>In Redis Cluster, each node keeps track of which master is serving a particular hash slot.</p> <p>The <code>DELSLOTS</code> command asks a particular Redis Cluster node to forget which master is serving the hash slots specified as arguments.</p> <p>In the context of a node that has received a <code>DELSLOTS</code> command and has consequently removed the associations for the passed hash slots, we say those hash slots are <em>unbound</em>. Note that the existence of unbound hash slots occurs naturally when a node has not been configured to handle them (something that can be done with the <code>ADDSLOTS</code> command) and if it has not received any information about who owns those hash slots (something that it can learn from heartbeat or update messages).</p> <p>If a node with unbound hash slots receives a heartbeat packet from another node that claims to be the owner of some of those hash slots, the association is established instantly. Moreover, if a heartbeat or update message is received with a configuration epoch greater than the node's own, the association is re-established.</p> <p>However, note that:</p> <ol> <li>The command only works if all the specified slots are already associated with some node.</li> <li>The command fails if the same slot is specified multiple times.</li> <li>As a side effect of the command execution, the node may go into <em>down</em> state because not all hash slots are covered.</li> </ol> <h2>Example</h2> <p>The following command removes the association for slots 5000 and 5001 from the node receiving the command:</p> <pre>&gt; CLUSTER DELSLOTS 5000 5001\nOK\n</pre> <h2>Usage in Redis Cluster</h2> <p>This command only works in cluster mode and may be useful for debugging and in order to manually orchestrate a cluster configuration when a new cluster is created. It is currently not used by <code>redis-trib</code>, and mainly exists for API completeness.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> if the command was successful. Otherwise an error is returned.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-delslots\" class=\"_attribution-link\">http://redis.io/commands/cluster-delslots</a>\n  </p>\n</div>\n","bitcount":"<h1 class=\"command\">BITCOUNT</h1>\n<pre>BITCOUNT key [start end]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(N)</p> </div> <p>Count the number of set bits (population counting) in a string.</p> <p>By default all the bytes contained in the string are examined. It is possible to specify the counting operation only in an interval passing the additional arguments <em>start</em> and <em>end</em>.</p> <p>Like for the <a href=\"getrange\">GETRANGE</a> command start and end can contain negative values in order to index bytes starting from the end of the string, where -1 is the last byte, -2 is the penultimate, and so forth.</p> <p>Non-existent keys are treated as empty strings, so the command will return zero.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a></p> <p>The number of bits set to 1.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"5e9c1dae5245762757c0bbfa3b85e584\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"foobar\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">BITCOUNT mykey</span> <code>(integer) 26</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">BITCOUNT mykey 0 0</span> <code>(integer) 4</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">BITCOUNT mykey 1 1</span> <code>(integer) 6</code>\n</div> <h2>Pattern: real-time metrics using bitmaps</h2> <p>Bitmaps are a very space-efficient representation of certain kinds of information. One example is a Web application that needs the history of user visits, so that for instance it is possible to determine what users are good targets of beta features.</p> <p>Using the <a href=\"setbit\">SETBIT</a> command this is trivial to accomplish, identifying every day with a small progressive integer. For instance day 0 is the first day the application was put online, day 1 the next day, and so forth.</p> <p>Every time a user performs a page view, the application can register that in the current day the user visited the web site using the <a href=\"setbit\">SETBIT</a> command setting the bit corresponding to the current day.</p> <p>Later it will be trivial to know the number of single days the user visited the web site simply calling the <a href=\"bitcount\">BITCOUNT</a> command against the bitmap.</p> <p>A similar pattern where user IDs are used instead of days is described in the article called \"<a href=\"http://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps\">Fast easy realtime metrics using Redis bitmaps</a>\".</p> <h2>Performance considerations</h2> <p>In the above example of counting days, even after 10 years the application is online we still have just <code>365*10</code> bits of data per user, that is just 456 bytes per user. With this amount of data <a href=\"bitcount\">BITCOUNT</a> is still as fast as any other <span class=\"math\">O(1) </span>Redis command like <a href=\"get\">GET</a> or <a href=\"incr\">INCR</a>.</p> <p>When the bitmap is big, there are two alternatives:</p> <ul> <li>Taking a separated key that is incremented every time the bitmap is modified. This can be very efficient and atomic using a small Redis Lua script.</li> <li>Running the bitmap incrementally using the <a href=\"bitcount\">BITCOUNT</a> <em>start</em> and <em>end</em> optional parameters, accumulating the results client-side, and optionally caching the result into a key.</li> </ul>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/bitcount\" class=\"_attribution-link\">http://redis.io/commands/bitcount</a>\n  </p>\n</div>\n","bitfield":"<h1 class=\"command\">BITFIELD</h1>\n<pre>BITFIELD key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]</pre>   <div class=\"metadata\"> <p><strong>Available since 3.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1) for each subcommand specified</p> </div> <p>The command treats a Redis string as a array of bits, and is capable of addressing specific integer fields of varying bit widths and arbitrary non (necessary) aligned offset. In practical terms using this command you can set, for example, a signed 5 bits integer at bit offset 1234 to a specific value, retrieve a 31 bit unsigned integer from offset 4567. Similarly the command handles increments and decrements of the specified integers, providing guaranteed and well specified overflow and underflow behavior that the user can configure.</p> <p><a href=\"bitfield\">BITFIELD</a> is able to operate with multiple bit fields in the same command call. It takes a list of operations to perform, and returns an array of replies, where each array matches the corresponding operation in the list of arguments.</p> <p>For example the following command increments an 8 bit signed integer at bit offset 100, and gets the value of the 4 bit unsigned integer at bit offset 0:</p> <pre>&gt; BITFIELD mykey INCRBY i5 100 1 GET u4 0\n1) (integer) 1\n2) (integer) 0\n</pre> <p>Note that:</p> <ol> <li>Addressing with <a href=\"get\">GET</a> bits outside the current string length (including the case the key does not exist at all), results in the operation to be performed like the missing part all consists of bits set to 0.</li> <li>Addressing with <a href=\"set\">SET</a> or <a href=\"incrby\">INCRBY</a> bits outside the current string length will enlarge the string, zero-padding it, as needed, for the minimal length needed, according to the most far bit touched.</li> </ol> <h2>Supported subcommands and integer types</h2> <p>The following is the list of supported commands.</p> <ul> <li>\n<strong>GET</strong> <code>&lt;type&gt;</code> <code>&lt;offset&gt;</code> -- Returns the specified bit field.</li> <li>\n<strong>SET</strong> <code>&lt;type&gt;</code> <code>&lt;offset&gt;</code> <code>&lt;value&gt;</code> -- Set the specified bit field and returns its old value.</li> <li>\n<strong>INCRBY</strong> <code>&lt;type&gt;</code> <code>&lt;offset&gt;</code> <code>&lt;increment&gt;</code> -- Increments or decrements (if a negative increment is given) the specified bit field and returns the new value.</li> </ul> <p>There is another subcommand that only changes the behavior of successive <a href=\"incrby\">INCRBY</a> subcommand calls by setting the overflow behavior:</p> <ul> <li>\n<strong>OVERFLOW</strong> <code>[WRAP|SAT|FAIL]</code>\n</li> </ul> <p>Where an integer type is expected, it can be composed by prefixing with <code>i</code> for signed integers and <code>u</code> for unsigned integers with the number of bits of our integer type. So for example <code>u8</code> is an unsigned integer of 8 bits and <code>i16</code> is a signed integer of 16 bits.</p> <p>The supported types are up to 64 bits for signed integers, and up to 63 bits for unsigned integers. This limitation with unsigned integers is due to the fact that currently the Redis protocol is unable to return 64 bit unsigned integers as replies.</p> <h2>Bits and positional offsets</h2> <p>There are two ways in order to specify offsets in the bitfield command. If a number without any prefix is specified, it is used just as a zero based bit offset inside the string.</p> <p>However if the offset is prefixed with a <code>#</code> character, the specified offset is multiplied by the integer type width, so for example:</p> <pre>BITFIELD mystring SET i8 #0 100 i8 #1 200\n</pre> <p>Will set the first i8 integer at offset 0 and the second at offset 8. This way you don't have to do the math yourself inside your client if what you want is a plain array of integers of a given size.</p> <h2>Overflow control</h2> <p>Using the <code>OVERFLOW</code> command the user is able to fine-tune the behavior of the increment or decrement overflow (or underflow) by specifying one of the following behaviors:</p> <ul> <li>\n<strong>WRAP</strong>: wrap around, both with signed and unsigned integers. In the case of unsigned integers, wrapping is like performing the operation modulo the maximum value the integer can contain (the C standard behavior). With signed integers instead wrapping means that overflows restart towards the most negative value and underflows towards the most positive ones, so for example if an <code>i8</code> integer is set to the value 127, incrementing it by 1 will yield <code>-128</code>.</li> <li>\n<strong>SAT</strong>: uses saturation arithmetic, that is, on underflows the value is set to the minimum integer value, and on overflows to the maximum integer value. For example incrementing an <code>i8</code> integer starting from value 120 with an increment of 10, will result into the value 127, and further increments will always keep the value at 127. The same happens on underflows, but towards the value is blocked at the most negative value.</li> <li>\n<strong>FAIL</strong>: in this mode no operation is performed on overflows or underflows detected. The corresponding return value is set to NULL to signal the condition to the caller.</li> </ul> <p>Note that each <code>OVERFLOW</code> statement only affects the <a href=\"incrby\">INCRBY</a> commands that follow it in the list of subcommands, up to the next <code>OVERFLOW</code> statement.</p> <p>By default, <strong>WRAP</strong> is used if not otherwise specified.</p> <pre>&gt; BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) (integer) 1\n2) (integer) 1\n&gt; BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) (integer) 2\n2) (integer) 2\n&gt; BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) (integer) 3\n2) (integer) 3\n&gt; BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) (integer) 0\n2) (integer) 3\n</pre> <h2>Return value</h2> <p>The command returns an array with each entry being the corresponding result of the sub command given at the same position. <code>OVERFLOW</code> subcommands don't count as generating a reply.</p> <p>The following is an example of <code>OVERFLOW FAIL</code> returning NULL.</p> <pre>&gt; BITFIELD mykey OVERFLOW FAIL incrby u2 102 1\n1) (nil)\n</pre> <h2>Motivations</h2> <p>The motivation for this command is that the ability to store many small integers as a single large bitmap (or segmented over a few keys to avoid having huge keys) is extremely memory efficient, and opens new use cases for Redis to be applied, especially in the field of real time analytics. This use cases are supported by the ability to specify the overflow in a controlled way.</p> <h2>Performance considerations</h2> <p>Usually <a href=\"bitfield\">BITFIELD</a> is a fast command, however note that addressing far bits of currently short strings will trigger an allocation that may be more costly than executing the command on bits already existing.</p> <h2>Orders of bits</h2> <p>The representation used by <a href=\"bitfield\">BITFIELD</a> considers the bitmap as having the bit number 0 to be the most significant bit of the first byte, and so forth, so for example setting a 5 bits unsigned integer to value 23 at offset 7 into a bitmap previously set to all zeroes, will produce the following representation:</p> <pre>+--------+--------+\n|00000001|01110000|\n+--------+--------+\n</pre> <p>When offsets and integer sizes are aligned to bytes boundaries, this is the same as big endian, however when such alignment does not exist, its important to also understand how the bits inside a byte are ordered.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/bitfield\" class=\"_attribution-link\">http://redis.io/commands/bitfield</a>\n  </p>\n</div>\n","bitop":"<h1 class=\"command\">BITOP</h1>\n<pre>BITOP operation destkey key [key ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(N)</p> </div> <p>Perform a bitwise operation between multiple keys (containing string values) and store the result in the destination key.</p> <p>The <a href=\"bitop\">BITOP</a> command supports four bitwise operations: <strong>AND</strong>, <strong>OR</strong>, <strong>XOR</strong> and <strong>NOT</strong>, thus the valid forms to call the command are:</p> <ul> <li><code>BITOP AND destkey srckey1 srckey2 srckey3 ... srckeyN</code></li> <li><code>BITOP OR  destkey srckey1 srckey2 srckey3 ... srckeyN</code></li> <li><code>BITOP XOR destkey srckey1 srckey2 srckey3 ... srckeyN</code></li> <li><code>BITOP NOT destkey srckey</code></li> </ul> <p>As you can see <strong>NOT</strong> is special as it only takes an input key, because it performs inversion of bits so it only makes sense as an unary operator.</p> <p>The result of the operation is always stored at <code>destkey</code>.</p> <h2>Handling of strings with different lengths</h2> <p>When an operation is performed between strings having different lengths, all the strings shorter than the longest string in the set are treated as if they were zero-padded up to the length of the longest string.</p> <p>The same holds true for non-existent keys, that are considered as a stream of zero bytes up to the length of the longest string.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a></p> <p>The size of the string stored in the destination key, that is equal to the size of the longest input string.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"a5d7d5343fbb937e015c3239cbef9d7d\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET key1 \"foobar\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET key2 \"abcdef\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">BITOP AND dest key1 key2</span> <code>(integer) 6</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET dest</span> <code>\"`bc`ab\"</code>\n</div> <h2>Pattern: real time metrics using bitmaps</h2> <p><a href=\"bitop\">BITOP</a> is a good complement to the pattern documented in the <a href=\"bitcount\">BITCOUNT</a> command documentation. Different bitmaps can be combined in order to obtain a target bitmap where the population counting operation is performed.</p> <p>See the article called \"<a href=\"http://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps\">Fast easy realtime metrics using Redis bitmaps</a>\" for a interesting use cases.</p> <h2>Performance considerations</h2> <p><a href=\"bitop\">BITOP</a> is a potentially slow command as it runs in <span class=\"math\">O(N) </span>time. Care should be taken when running it against long input strings.</p> <p>For real-time metrics and statistics involving large inputs a good approach is to use a slave (with read-only option disabled) where the bit-wise operations are performed to avoid blocking the master instance.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/bitop\" class=\"_attribution-link\">http://redis.io/commands/bitop</a>\n  </p>\n</div>\n","bitpos":"<h1 class=\"command\">BITPOS</h1>\n<pre>BITPOS key bit [start] [end]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.7.</strong></p> <p><strong>Time complexity:</strong> O(N)</p> </div> <p>Return the position of the first bit set to 1 or 0 in a string.</p> <p>The position is returned, thinking of the string as an array of bits from left to right, where the first byte's most significant bit is at position 0, the second byte's most significant bit is at position 8, and so forth.</p> <p>The same bit position convention is followed by <a href=\"getbit\">GETBIT</a> and <a href=\"setbit\">SETBIT</a>.</p> <p>By default, all the bytes contained in the string are examined. It is possible to look for bits only in a specified interval passing the additional arguments <em>start</em> and <em>end</em> (it is possible to just pass <em>start</em>, the operation will assume that the end is the last byte of the string. However there are semantic differences as explained later). The range is interpreted as a range of bytes and not a range of bits, so <code>start=0</code> and <code>end=2</code> means to look at the first three bytes.</p> <p>Note that bit positions are returned always as absolute values starting from bit zero even when <em>start</em> and <em>end</em> are used to specify a range.</p> <p>Like for the <a href=\"getrange\">GETRANGE</a> command start and end can contain negative values in order to index bytes starting from the end of the string, where -1 is the last byte, -2 is the penultimate, and so forth.</p> <p>Non-existent keys are treated as empty strings.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a></p> <p>The command returns the position of the first bit set to 1 or 0 according to the request.</p> <p>If we look for set bits (the bit argument is 1) and the string is empty or composed of just zero bytes, -1 is returned.</p> <p>If we look for clear bits (the bit argument is 0) and the string only contains bit set to 1, the function returns the first bit not part of the string on the right. So if the string is three bytes set to the value <code>0xff</code> the command <code>BITPOS key 0</code> will return 24, since up to bit 23 all the bits are 1.</p> <p>Basically, the function considers the right of the string as padded with zeros if you look for clear bits and specify no range or the <em>start</em> argument <strong>only</strong>.</p> <p>However, this behavior changes if you are looking for clear bits and specify a range with both <strong>start</strong> and <strong>end</strong>. If no clear bit is found in the specified range, the function returns -1 as the user specified a clear range and there are no 0 bits in that range.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"dc2c8b3b78fa37aa5e460ed3f58e6669\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"\\xff\\xf0\\x00\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">BITPOS mykey 0</span> <code>(integer) 12</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"\\x00\\xff\\xf0\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">BITPOS mykey 1 0</span> <code>(integer) 8</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">BITPOS mykey 1 2</span> <code>(integer) 16</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">set mykey \"\\x00\\x00\\x00\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">BITPOS mykey 1</span> <code>(integer) -1</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/bitpos\" class=\"_attribution-link\">http://redis.io/commands/bitpos</a>\n  </p>\n</div>\n","blpop":"<h1 class=\"command\">BLPOP</h1>\n<pre>BLPOP key [key ...] timeout</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p><a href=\"blpop\">BLPOP</a> is a blocking list pop primitive. It is the blocking version of <a href=\"lpop\">LPOP</a> because it blocks the connection when there are no elements to pop from any of the given lists. An element is popped from the head of the first list that is non-empty, with the given keys being checked in the order that they are given.</p> <h2>Non-blocking behavior</h2> <p>When <a href=\"blpop\">BLPOP</a> is called, if at least one of the specified keys contains a non-empty list, an element is popped from the head of the list and returned to the caller together with the <code>key</code> it was popped from.</p> <p>Keys are checked in the order that they are given. Let's say that the key <code>list1</code> doesn't exist and <code>list2</code> and <code>list3</code> hold non-empty lists. Consider the following command:</p> <pre>BLPOP list1 list2 list3 0\n</pre> <p><a href=\"blpop\">BLPOP</a> guarantees to return an element from the list stored at <code>list2</code> (since it is the first non empty list when checking <code>list1</code>, <code>list2</code> and <code>list3</code> in that order).</p> <h2>Blocking behavior</h2> <p>If none of the specified keys exist, <a href=\"blpop\">BLPOP</a> blocks the connection until another client performs an <a href=\"lpush\">LPUSH</a> or <a href=\"rpush\">RPUSH</a> operation against one of the keys.</p> <p>Once new data is present on one of the lists, the client returns with the name of the key unblocking it and the popped value.</p> <p>When <a href=\"blpop\">BLPOP</a> causes a client to block and a non-zero timeout is specified, the client will unblock returning a <code>nil</code> multi-bulk value when the specified timeout has expired without a push operation against at least one of the specified keys.</p> <p><strong>The timeout argument is interpreted as an integer value specifying the maximum number of seconds to block</strong>. A timeout of zero can be used to block indefinitely.</p> <h2>What key is served first? What client? What element? Priority ordering details.</h2> <ul> <li>If the client tries to blocks for multiple keys, but at least one key contains elements, the returned key / element pair is the first key from left to right that has one or more elements. In this case the client is not blocked. So for instance <code>BLPOP key1 key2 key3 key4 0</code>, assuming that both <code>key2</code> and <code>key4</code> are non-empty, will always return an element from <code>key2</code>.</li> <li>If multiple clients are blocked for the same key, the first client to be served is the one that was waiting for more time (the first that blocked for the key). Once a client is unblocked it does not retain any priority, when it blocks again with the next call to <a href=\"blpop\">BLPOP</a> it will be served accordingly to the number of clients already blocked for the same key, that will all be served before it (from the first to the last that blocked).</li> <li>When a client is blocking for multiple keys at the same time, and elements are available at the same time in multiple keys (because of a transaction or a Lua script added elements to multiple lists), the client will be unblocked using the first key that received a push operation (assuming it has enough elements to serve our client, as there may be other clients as well waiting for this key). Basically after the execution of every command Redis will run a list of all the keys that received data AND that have at least a client blocked. The list is ordered by new element arrival time, from the first key that received data to the last. For every key processed, Redis will serve all the clients waiting for that key in a FIFO fashion, as long as there are elements in this key. When the key is empty or there are no longer clients waiting for this key, the next key that received new data in the previous command / transaction / script is processed, and so forth.</li> </ul> <h2>Behavior of <code>BLPOP</code> when multiple elements are pushed inside a list.</h2> <p>There are times when a list can receive multiple elements in the context of the same conceptual command:</p> <ul> <li>Variadic push operations such as <code>LPUSH mylist a b c</code>.</li> <li>After an <a href=\"exec\">EXEC</a> of a <a href=\"multi\">MULTI</a> block with multiple push operations against the same list.</li> <li>Executing a Lua Script with Redis 2.6 or newer.</li> </ul> <p>When multiple elements are pushed inside a list where there are clients blocking, the behavior is different for Redis 2.4 and Redis 2.6 or newer.</p> <p>For Redis 2.6 what happens is that the command performing multiple pushes is executed, and <em>only after</em> the execution of the command the blocked clients are served. Consider this sequence of commands.</p> <pre>Client A:   BLPOP foo 0\nClient B:   LPUSH foo a b c\n</pre> <p>If the above condition happens using a Redis 2.6 server or greater, Client <strong>A</strong> will be served with the <code>c</code> element, because after the <a href=\"lpush\">LPUSH</a> command the list contains <code>c,b,a</code>, so taking an element from the left means to return <code>c</code>.</p> <p>Instead Redis 2.4 works in a different way: clients are served <em>in the context</em> of the push operation, so as long as <code>LPUSH foo a b c</code> starts pushing the first element to the list, it will be delivered to the Client <strong>A</strong>, that will receive <code>a</code> (the first element pushed).</p> <p>The behavior of Redis 2.4 creates a lot of problems when replicating or persisting data into the AOF file, so the much more generic and semantically simpler behavior was introduced into Redis 2.6 to prevent problems.</p> <p>Note that for the same reason a Lua script or a <code>MULTI/EXEC</code> block may push elements into a list and afterward <strong>delete the list</strong>. In this case the blocked clients will not be served at all and will continue to be blocked as long as no data is present on the list after the execution of a single command, transaction, or script.</p> <h2>\n<code>BLPOP</code> inside a <code>MULTI</code> / <code>EXEC</code> transaction</h2> <p><a href=\"blpop\">BLPOP</a> can be used with pipelining (sending multiple commands and reading the replies in batch), however this setup makes sense almost solely when it is the last command of the pipeline.</p> <p>Using <a href=\"blpop\">BLPOP</a> inside a <a href=\"multi\">MULTI</a> / <a href=\"exec\">EXEC</a> block does not make a lot of sense as it would require blocking the entire server in order to execute the block atomically, which in turn does not allow other clients to perform a push operation. For this reason the behavior of <a href=\"blpop\">BLPOP</a> inside <a href=\"multi\">MULTI</a> / <a href=\"exec\">EXEC</a> when the list is empty is to return a <code>nil</code> multi-bulk reply, which is the same thing that happens when the timeout is reached.</p> <p>If you like science fiction, think of time flowing at infinite speed inside a <a href=\"multi\">MULTI</a> / <a href=\"exec\">EXEC</a> block...</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: specifically:</p> <ul> <li>A <code>nil</code> multi-bulk when no element could be popped and the timeout expired.</li> <li>A two-element multi-bulk with the first element being the name of the key where an element was popped and the second element being the value of the popped element.</li> </ul> <h2>Examples</h2> <pre>redis&gt; DEL list1 list2\n(integer) 0\nredis&gt; RPUSH list1 a b c\n(integer) 3\nredis&gt; BLPOP list1 list2 0\n1) \"list1\"\n2) \"a\"\n</pre> <h2>Reliable queues</h2> <p>When <a href=\"blpop\">BLPOP</a> returns an element to the client, it also removes the element from the list. This means that the element only exists in the context of the client: if the client crashes while processing the returned element, it is lost forever.</p> <p>This can be a problem with some application where we want a more reliable messaging system. When this is the case, please check the <a href=\"brpoplpush\">BRPOPLPUSH</a> command, that is a variant of <a href=\"blpop\">BLPOP</a> that adds the returned element to a target list before returning it to the client.</p> <h2>Pattern: Event notification</h2> <p>Using blocking list operations it is possible to mount different blocking primitives. For instance for some application you may need to block waiting for elements into a Redis Set, so that as far as a new element is added to the Set, it is possible to retrieve it without resort to polling. This would require a blocking version of <a href=\"spop\">SPOP</a> that is not available, but using blocking list operations we can easily accomplish this task.</p> <p>The consumer will do:</p> <pre>LOOP forever\n    WHILE SPOP(key) returns elements\n        ... process elements ...\n    END\n    BRPOP helper_key\nEND\n</pre> <p>While in the producer side we'll use simply:</p> <pre>MULTI\nSADD key element\nLPUSH helper_key x\nEXEC\n</pre>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/blpop\" class=\"_attribution-link\">http://redis.io/commands/blpop</a>\n  </p>\n</div>\n","client-kill":"<h1 class=\"command\">CLIENT</h1>\n<pre>CLIENT KILL [ip:port] [ID client-id] [TYPE normal|master|slave|pubsub] [ADDR ip:port] [SKIPME yes/no]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.4.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of client connections</p> </div> <p>The <a href=\"client-kill\">CLIENT KILL</a> command closes a given client connection. Up to Redis 2.8.11 it was possible to close a connection only by client address, using the following form:</p> <pre>CLIENT KILL addr:port\n</pre> <p>The <code>ip:port</code> should match a line returned by the <a href=\"client-list\">CLIENT LIST</a> command (<code>addr</code> field).</p> <p>However starting with Redis 2.8.12 or greater, the command accepts the following form:</p> <pre>CLIENT KILL &lt;filter&gt; &lt;value&gt; ... ... &lt;filter&gt; &lt;value&gt;\n</pre> <p>With the new form it is possible to kill clients by different attributes instead of killing just by address. The following filters are available:</p> <ul> <li>\n<code>CLIENT KILL ADDR ip:port</code>. This is exactly the same as the old three-arguments behavior.</li> <li>\n<code>CLIENT KILL ID client-id</code>. Allows to kill a client by its unique <code>ID</code> field, which was introduced in the <a href=\"client-list\">CLIENT LIST</a> command starting from Redis 2.8.12.</li> <li>\n<code>CLIENT KILL TYPE type</code>, where <em>type</em> is one of <code>normal</code>, <code>master</code>, <code>slave</code> and <code>pubsub</code> (the <code>master</code> type is available from v3.2). This closes the connections of <strong>all the clients</strong> in the specified class. Note that clients blocked into the <a href=\"monitor\">MONITOR</a> command are considered to belong to the <code>normal</code> class.</li> <li>\n<code>CLIENT KILL SKIPME yes/no</code>. By default this option is set to <code>yes</code>, that is, the client calling the command will not get killed, however setting this option to <code>no</code> will have the effect of also killing the client calling the command.</li> </ul> <p>It is possible to provide multiple filters at the same time. The command will handle multiple filters via logical AND. For example:</p> <pre>CLIENT KILL addr 127.0.0.1:6379 type slave\n</pre> <p>is valid and will kill only a slaves with the specified address. This format containing multiple filters is rarely useful currently.</p> <p>When the new form is used the command no longer returns <code>OK</code> or an error, but instead the number of killed clients, that may be zero.</p> <h2>CLIENT KILL and Redis Sentinel</h2> <p>Recent versions of Redis Sentinel (Redis 2.8.12 or greater) use CLIENT KILL in order to kill clients when an instance is reconfigured, in order to force clients to perform the handshake with one Sentinel again and update its configuration.</p> <h2>Notes</h2> <p>Due to the single-threaded nature of Redis, it is not possible to kill a client connection while it is executing a command. From the client point of view, the connection can never be closed in the middle of the execution of a command. However, the client will notice the connection has been closed only when the next command is sent (and results in network error).</p> <h2>Return value</h2> <p>When called with the three arguments format:</p> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> if the connection exists and has been closed</p> <p>When called with the filter / value format:</p> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of clients killed.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/client-kill\" class=\"_attribution-link\">http://redis.io/commands/client-kill</a>\n  </p>\n</div>\n","client-list":"<h1 class=\"command\">CLIENT</h1>\n<pre>CLIENT LIST</pre>   <div class=\"metadata\"> <p><strong>Available since 2.4.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of client connections</p> </div> <p>The <a href=\"client-list\">CLIENT LIST</a> command returns information and statistics about the client connections server in a mostly human readable format.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: a unique string, formatted as follows:</p> <ul> <li>One client connection per line (separated by LF)</li> <li>Each line is composed of a succession of <code>property=value</code> fields separated by a space character.</li> </ul> <p>Here is the meaning of the fields:</p> <ul> <li>\n<code>id</code>: an unique 64-bit client ID (introduced in Redis 2.8.12).</li> <li>\n<code>addr</code>: address/port of the client</li> <li>\n<code>fd</code>: file descriptor corresponding to the socket</li> <li>\n<code>age</code>: total duration of the connection in seconds</li> <li>\n<code>idle</code>: idle time of the connection in seconds</li> <li>\n<code>flags</code>: client flags (see below)</li> <li>\n<code>db</code>: current database ID</li> <li>\n<code>sub</code>: number of channel subscriptions</li> <li>\n<code>psub</code>: number of pattern matching subscriptions</li> <li>\n<code>multi</code>: number of commands in a MULTI/EXEC context</li> <li>\n<code>qbuf</code>: query buffer length (0 means no query pending)</li> <li>\n<code>qbuf-free</code>: free space of the query buffer (0 means the buffer is full)</li> <li>\n<code>obl</code>: output buffer length</li> <li>\n<code>oll</code>: output list length (replies are queued in this list when the buffer is full)</li> <li>\n<code>omem</code>: output buffer memory usage</li> <li>\n<code>events</code>: file descriptor events (see below)</li> <li>\n<code>cmd</code>: last command played</li> </ul> <p>The client flags can be a combination of:</p> <pre>O: the client is a slave in MONITOR mode\nS: the client is a normal slave server\nM: the client is a master\nx: the client is in a MULTI/EXEC context\nb: the client is waiting in a blocking operation\ni: the client is waiting for a VM I/O (deprecated)\nd: a watched keys has been modified - EXEC will fail\nc: connection to be closed after writing entire reply\nu: the client is unblocked\nU: the client is connected via a Unix domain socket\nr: the client is in readonly mode against a cluster node\nA: connection to be closed ASAP\nN: no specific flag set\n</pre> <p>The file descriptor events can be:</p> <pre>r: the client socket is readable (event loop)\nw: the client socket is writable (event loop)\n</pre> <h2>Notes</h2> <p>New fields are regularly added for debugging purpose. Some could be removed in the future. A version safe Redis client using this command should parse the output accordingly (i.e. handling gracefully missing fields, skipping unknown fields).</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/client-list\" class=\"_attribution-link\">http://redis.io/commands/client-list</a>\n  </p>\n</div>\n","client-pause":"<h1 class=\"command\">CLIENT</h1>\n<pre>CLIENT PAUSE timeout</pre>   <div class=\"metadata\"> <p><strong>Available since 2.9.50.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p><a href=\"client-pause\">CLIENT PAUSE</a> is a connections control command able to suspend all the Redis clients for the specified amount of time (in milliseconds).</p> <p>The command performs the following actions:</p> <ul> <li>It stops processing all the pending commands from normal and pub/sub clients. However interactions with slaves will continue normally.</li> <li>However it returns OK to the caller ASAP, so the <a href=\"client-pause\">CLIENT PAUSE</a> command execution is not paused by itself.</li> <li>When the specified amount of time has elapsed, all the clients are unblocked: this will trigger the processing of all the commands accumulated in the query buffer of every client during the pause.</li> </ul> <p>This command is useful as it makes able to switch clients from a Redis instance to another one in a controlled way. For example during an instance upgrade the system administrator could do the following:</p> <ul> <li>Pause the clients using <a href=\"client-pause\">CLIENT PAUSE</a>\n</li> <li>Wait a few seconds to make sure the slaves processed the latest replication stream from the master.</li> <li>Turn one of the slaves into a master.</li> <li>Reconfigure clients to connect with the new master.</li> </ul> <p>It is possible to send <a href=\"client-pause\">CLIENT PAUSE</a> in a MULTI/EXEC block together with the <code>INFO replication</code> command in order to get the current master offset at the time the clients are blocked. This way it is possible to wait for a specific offset in the slave side in order to make sure all the replication stream was processed.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: The command returns OK or an error if the timeout is invalid.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/client-pause\" class=\"_attribution-link\">http://redis.io/commands/client-pause</a>\n  </p>\n</div>\n","cluster-addslots":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER ADDSLOTS slot [slot ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the total number of hash slot arguments</p> </div> <p>This command is useful in order to modify a node's view of the cluster configuration. Specifically it assigns a set of hash slots to the node receiving the command. If the command is successful, the node will map the specified hash slots to itself, and will start broadcasting the new configuration.</p> <p>However note that:</p> <ol> <li>The command only works if all the specified slots are, from the point of view of the node receiving the command, currently not assigned. A node will refuse to take ownership for slots that already belong to some other node (including itself).</li> <li>The command fails if the same slot is specified multiple times.</li> <li>As a side effect of the command execution, if a slot among the ones specified as argument is set as <code>importing</code>, this state gets cleared once the node assigns the (previously unbound) slot to itself.</li> </ol> <h2>Example</h2> <p>For example the following command assigns slots 1 2 3 to the node receiving the command:</p> <pre>&gt; CLUSTER ADDSLOTS 1 2 3\nOK\n</pre> <p>However trying to execute it again results into an error since the slots are already assigned:</p> <pre>&gt; CLUSTER ADDSLOTS 1 2 3\nERR Slot 1 is already busy\n</pre> <h2>Usage in Redis Cluster</h2> <p>This command only works in cluster mode and is useful in the following Redis Cluster operations:</p> <ol> <li>To create a new cluster ADDSLOTS is used in order to initially setup master nodes splitting the available hash slots among them.</li> <li>In order to fix a broken cluster where certain slots are unassigned.</li> </ol> <h2>Information about slots propagation and warnings</h2> <p>Note that once a node assigns a set of slots to itself, it will start propagating this information in heartbeat packet headers. However the other nodes will accept the information only if they have the slot as not already bound with another node, or if the configuration epoch of the node advertising the new hash slot, is greater than the node currently listed in the table.</p> <p>This means that this command should be used with care only by applications orchestrating Redis Cluster, like <code>redis-trib</code>, and the command if used out of the right context can leave the cluster in a wrong state or cause data loss.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> if the command was successful. Otherwise an error is returned.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-addslots\" class=\"_attribution-link\">http://redis.io/commands/cluster-addslots</a>\n  </p>\n</div>\n","cluster-countkeysinslot":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER COUNTKEYSINSLOT slot</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns the number of keys in the specified Redis Cluster hash slot. The command only queries the local data set, so contacting a node that is not serving the specified hash slot will always result in a count of zero being returned.</p> <pre>&gt; CLUSTER COUNTKEYSINSLOT 7000\n(integer) 50341\n</pre> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: The number of keys in the specified hash slot, or an error if the hash slot is invalid.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-countkeysinslot\" class=\"_attribution-link\">http://redis.io/commands/cluster-countkeysinslot</a>\n  </p>\n</div>\n","cluster-failover":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER FAILOVER [FORCE|TAKEOVER]</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>This command, that can only be send to a Redis Cluster slave node, forces the slave to start a manual failover of its master instance.</p> <p>A manual failover is a special kind of failover that is usually executed when there are no actual failures, but we wish to swap the current master with one of its slaves (which is the node we send the command to), in a safe way, without any window for data loss. It works in the following way:</p> <ol> <li>The slave tells the master to stop processing queries from clients.</li> <li>The master replies to the slave with the current <em>replication offset</em>.</li> <li>The slave waits for the replication offset to match on its side, to make sure it processed all the data from the master before it continues.</li> <li>The slave starts a failover, obtains a new configuration epoch from the majority of the masters, and broadcast the new configuration.</li> <li>The old master receives the configuration update: unblocks its clients and start replying with redirection messages so that they'll continue the chat with the new master.</li> </ol> <p>This way clients are moved away from the old master to the new master atomically and only when the slave that is turning in the new master processed all the replication stream from the old master.</p> <h2>FORCE option: manual failover when the master is down</h2> <p>The command behavior can be modified by two options: <strong>FORCE</strong> and <strong>TAKEOVER</strong>.</p> <p>If the <strong>FORCE</strong> option is given, the slave does not perform any handshake with the master, that may be not reachable, but instead just starts a failover ASAP starting from point 4. This is useful when we want to start a manual failover while the master is no longer reachable.</p> <p>However using <strong>FORCE</strong> we still need the majority of masters to be available in order to authorize the failover and generate a new configuration epoch for the slave that is going to become master.</p> <h2>TAKEOVER option: manual failover without cluster consensus</h2> <p>There are situations where this is not enough, and we want a slave to failover without any agreement with the rest of the cluster. A real world use case for this is to mass promote slaves in a different data center to masters in order to perform a data center switch, while all the masters are down or partitioned away.</p> <p>The <strong>TAKEOVER</strong> option implies everything <strong>FORCE</strong> implies, but also does not uses any cluster authorization in order to failover. A slave receiving <code>CLUSTER FAILOVER TAKEOVER</code> will instead:</p> <ol> <li>Generate a new <code>configEpoch</code> unilaterally, just taking the current greatest epoch available and incrementing it if its local configuration epoch is not already the greatest.</li> <li>Assign itself all the hash slots of its master, and propagate the new configuration to every node which is reachable ASAP, and eventually to every other node.</li> </ol> <p>Note that <strong>TAKEOVER violates the last-failover-wins principle</strong> of Redis Cluster, since the configuration epoch generated by the slave violates the normal generation of configuration epochs in several ways:</p> <ol> <li>There is no guarantee that it is actually the higher configuration epoch, since, for example, we can use the <strong>TAKEOVER</strong> option within a minority, nor any message exchange is performed to generate the new configuration epoch.</li> <li>If we generate a configuration epoch which happens to collide with another instance, eventually our configuration epoch, or the one of another instance with our same epoch, will be moved away using the <em>configuration epoch collision resolution algorithm</em>.</li> </ol> <p>Because of this the <strong>TAKEOVER</strong> option should be used with care.</p> <h2>Implementation details and notes</h2> <p><a href=\"cluster-failover\">CLUSTER FAILOVER</a>, unless the <strong>TAKEOVER</strong> option is specified, does not execute a failover synchronously, it only <em>schedules</em> a manual failover, bypassing the failure detection stage, so to check if the failover actually happened, <a href=\"cluster-nodes\">CLUSTER NODES</a> or other means should be used in order to verify that the state of the cluster changes after some time the command was sent.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> if the command was accepted and a manual failover is going to be attempted. An error if the operation cannot be executed, for example if we are talking with a node which is already a master.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-failover\" class=\"_attribution-link\">http://redis.io/commands/cluster-failover</a>\n  </p>\n</div>\n","cluster-forget":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER FORGET node-id</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>The command is used in order to remove a node, specified via its node ID, from the set of <em>known nodes</em> of the Redis Cluster node receiving the command. In other words the specified node is removed from the <em>nodes table</em> of the node receiving the command.</p> <p>Because when a given node is part of the cluster, all the other nodes participating in the cluster knows about it, in order for a node to be completely removed from a cluster, the <a href=\"cluster-forget\">CLUSTER FORGET</a> command must be sent to all the remaining nodes, regardless of the fact they are masters or slaves.</p> <p>However the command cannot simply drop the node from the internal node table of the node receiving the command, it also implements a ban-list, not allowing the same node to be added again as a side effect of processing the <em>gossip section</em> of the heartbeat packets received from other nodes.</p> <h2>Details on why the ban-list is needed</h2> <p>In the following example we'll show why the command must not just remove a given node from the nodes table, but also prevent it for being re-inserted again for some time.</p> <p>Let's assume we have four nodes, A, B, C and D. In order to end with just a three nodes cluster A, B, C we may follow these steps:</p> <ol> <li>Reshard all the hash slots from D to nodes A, B, C.</li> <li>D is now empty, but still listed in the nodes table of A, B and C.</li> <li>We contact A, and send <code>CLUSTER FORGET D</code>.</li> <li>B sends node A a heartbeat packet, where node D is listed.</li> <li>A does no longer known node D (see step 3), so it starts an handshake with D.</li> <li>D ends re-added in the nodes table of A.</li> </ol> <p>As you can see in this way removing a node is fragile, we need to send <a href=\"cluster-forget\">CLUSTER FORGET</a> commands to all the nodes ASAP hoping there are no gossip sections processing in the meantime. Because of this problem the command implements a ban-list with an expire time for each entry.</p> <p>So what the command really does is:</p> <ol> <li>The specified node gets removed from the nodes table.</li> <li>The node ID of the removed node gets added to the ban-list, for 1 minute.</li> <li>The node will skip all the node IDs listed in the ban-list when processing gossip sections received in heartbeat packets from other nodes.</li> </ol> <p>This way we have a 60 second window to inform all the nodes in the cluster that we want to remove a node.</p> <h2>Special conditions not allowing the command execution</h2> <p>The command does not succeed and returns an error in the following cases:</p> <ol> <li>The specified node ID is not found in the nodes table.</li> <li>The node receiving the command is a slave, and the specified node ID identifies its current master.</li> <li>The node ID identifies the same node we are sending the command to.</li> </ol> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> if the command was executed successfully, otherwise an error is returned.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-forget\" class=\"_attribution-link\">http://redis.io/commands/cluster-forget</a>\n  </p>\n</div>\n","cluster-getkeysinslot":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER GETKEYSINSLOT slot count</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N)) where N is the number of requested keys</p> </div> <p>The command returns an array of keys names stored in the contacted node and hashing to the specified hash slot. The maximum number of keys to return is specified via the <code>count</code> argument, so that it is possible for the user of this API to batch-processing keys.</p> <p>The main usage of this command is during rehashing of cluster slots from one node to another. The way the rehashing is performed is exposed in the Redis Cluster specification, or in a more simple to digest form, as an appendix of the <a href=\"cluster-setslot\">CLUSTER SETSLOT</a> command documentation.</p> <pre>&gt; CLUSTER GETKEYSINSLOT 7000 3\n\"47344|273766|70329104160040|key_39015\"\n\"47344|273766|70329104160040|key_89793\"\n\"47344|273766|70329104160040|key_92937\"\n</pre> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: From 0 to <em>count</em> key names in a Redis array reply.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-getkeysinslot\" class=\"_attribution-link\">http://redis.io/commands/cluster-getkeysinslot</a>\n  </p>\n</div>\n","cluster-info":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER INFO</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p><a href=\"cluster-info\">CLUSTER INFO</a> provides <a href=\"info\">INFO</a> style information about Redis Cluster vital parameters. The following is a sample output, followed by the description of each field reported.</p> <pre>cluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:6\ncluster_my_epoch:2\ncluster_stats_messages_sent:1483972\ncluster_stats_messages_received:1483968\n</pre> <ul> <li>\n<code>cluster_state</code>: State is <code>ok</code> if the node is able to receive queries. <code>fail</code> if there is at least one hash slot which is unbound (no node associated), in error state (node serving it is flagged with FAIL flag), or if the majority of masters can't be reached by this node.</li> <li>\n<code>cluster_slots_assigned</code>: Number of slots which are associated to some node (not unbound). This number should be 16384 for the node to work properly, which means that each hash slot should be mapped to a node.</li> <li>\n<code>cluster_slots_ok</code>: Number of hash slots mapping to a node not in <code>FAIL</code> or <code>PFAIL</code> state.</li> <li>\n<code>cluster_slots_pfail</code>: Number of hash slots mapping to a node in <code>PFAIL</code> state. Note that those hash slots still work correctly, as long as the <code>PFAIL</code> state is not promoted to <code>FAIL</code> by the failure detection algorithm. <code>PFAIL</code> only means that we are currently not able to talk with the node, but may be just a transient error.</li> <li>\n<code>cluster_slots_fail</code>: Number of hash slots mapping to a node in <code>FAIL</code> state. If this number is not zero the node is not able to serve queries unless <code>cluster-require-full-coverage</code> is set to <code>no</code> in the configuration.</li> <li>\n<code>cluster_known_nodes</code>: The total number of known nodes in the cluster, including nodes in <code>HANDSHAKE</code> state that may not currently be proper members of the cluster.</li> <li>\n<code>cluster_size</code>: The number of master nodes serving at least one hash slot in the cluster.</li> <li>\n<code>cluster_current_epoch</code>: The local <code>Current Epoch</code> variable. This is used in order to create unique increasing version numbers during fail overs.</li> <li>\n<code>cluster_my_epoch</code>: The <code>Config Epoch</code> of the node we are talking with. This is the current configuration version assigned to this node.</li> <li>\n<code>cluster_stats_messages_sent</code>: Number of messages sent via the cluster node-to-node binary bus.</li> <li>\n<code>cluster_stats_messages_received</code>: Number of messages received via the cluster node-to-node binary bus.</li> </ul> <p>More information about the Current Epoch and Config Epoch variables are available in the Redis Cluster specification document.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: A map between named fields and values in the form of <code>&lt;field&gt;:&lt;value&gt;</code> lines separated by newlines composed by the two bytes <code>CRLF</code>.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-info\" class=\"_attribution-link\">http://redis.io/commands/cluster-info</a>\n  </p>\n</div>\n","cluster-keyslot":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER KEYSLOT key</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of bytes in the key</p> </div> <p>Returns an integer identifying the hash slot the specified key hashes to. This command is mainly useful for debugging and testing, since it exposes via an API the underlying Redis implementation of the hashing algorithm. Example use cases for this command:</p> <ol> <li>Client libraries may use Redis in order to test their own hashing algorithm, generating random keys and hashing them with both their local implementation and using Redis <a href=\"cluster-keyslot\">CLUSTER KEYSLOT</a> command, then checking if the result is the same.</li> <li>Humans may use this command in order to check what is the hash slot, and then the associated Redis Cluster node, responsible for a given key.</li> </ol> <h2>Example</h2> <pre>&gt; CLUSTER KEYSLOT somekey\n11058\n&gt; CLUSTER KEYSLOT foo{hash_tag}\n(integer) 2515\n&gt; CLUSTER KEYSLOT bar{hash_tag}\n(integer) 2515\n</pre> <p>Note that the command implements the full hashing algorithm, including support for <strong>hash tags</strong>, that is the special property of Redis Cluster key hashing algorithm, of hashing just what is between <code>{</code> and <code>}</code> if such a pattern is found inside the key name, in order to force multiple keys to be handled by the same node.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: The hash slot number.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-keyslot\" class=\"_attribution-link\">http://redis.io/commands/cluster-keyslot</a>\n  </p>\n</div>\n","cluster-meet":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER MEET ip port</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p><a href=\"cluster-meet\">CLUSTER MEET</a> is used in order to connect different Redis nodes with cluster support enabled, into a working cluster.</p> <p>The basic idea is that nodes by default don't trust each other, and are considered unknown, so that it is unlikely that different cluster nodes will mix into a single one because of system administration errors or network addresses modifications.</p> <p>So in order for a given node to accept another one into the list of nodes composing a Redis Cluster, there are only two ways:</p> <ol> <li>The system administrator sends a <a href=\"cluster-meet\">CLUSTER MEET</a> command to force a node to meet another one.</li> <li>An already known node sends a list of nodes in the gossip section that we are not aware of. If the receiving node trusts the sending node as a known node, it will process the gossip section and send an handshake to the nodes that are still not known.</li> </ol> <p>Note that Redis Cluster needs to form a full mesh (each node is connected with each other node), but in order to create a cluster, there is no need to send all the <a href=\"cluster-meet\">CLUSTER MEET</a> commands needed to form the full mesh. What matter is to send enough <a href=\"cluster-meet\">CLUSTER MEET</a> messages so that each node can reach each other node through a <em>chain of known nodes</em>. Thanks to the exchange of gossip information in heartbeat packets, the missing links will be created.</p> <p>So, if we link node A with node B via <a href=\"cluster-meet\">CLUSTER MEET</a>, and B with C, A and C will find their ways to handshake and create a link.</p> <p>Another example: if we imagine a cluster formed of the following four nodes called A, B, C and D, we may send just the following set of commands to A:</p> <ol> <li><code>CLUSTER MEET B-ip B-port</code></li> <li><code>CLUSTER MEET C-ip C-port</code></li> <li><code>CLUSTER MEET D-ip D-port</code></li> </ol> <p>As a side effect of <code>A</code> knowing and being known by all the other nodes, it will send gossip sections in the heartbeat packets that will allow each other node to create a link with each other one, forming a full mesh in a matter of seconds, even if the cluster is large.</p> <p>Moreover <a href=\"cluster-meet\">CLUSTER MEET</a> does not need to be reciprocal. If I send the command to A in order to join B, I don't need to also send it to B in order to join A.</p> <h2>Implementation details: MEET and PING packets</h2> <p>When a given node receives a <a href=\"cluster-meet\">CLUSTER MEET</a> message, the node specified in the command still does not know the node we sent the command to. So in order for the node to force the receiver to accept it as a trusted node, it sends a <code>MEET</code> packet instead of a <a href=\"ping\">PING</a> packet. The two packets have exactly the same format, but the former forces the receiver to acknowledge the node as trusted.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> if the command was successful. If the address or port specified are invalid an error is returned.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-meet\" class=\"_attribution-link\">http://redis.io/commands/cluster-meet</a>\n  </p>\n</div>\n","cluster-replicate":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER REPLICATE node-id</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>The command reconfigures a node as a slave of the specified master. If the node receiving the command is an <em>empty master</em>, as a side effect of the command, the node role is changed from master to slave.</p> <p>Once a node is turned into the slave of another master node, there is no need to inform the other cluster nodes about the change: heartbeat packets exchanged between nodes will propagate the new configuration automatically.</p> <p>A slave will always accept the command, assuming that:</p> <ol> <li>The specified node ID exists in its nodes table.</li> <li>The specified node ID does not identify the instance we are sending the command to.</li> <li>The specified node ID is a master.</li> </ol> <p>If the node receiving the command is not already a slave, but is a master, the command will only succeed, and the node will be converted into a slave, only if the following additional conditions are met:</p> <ol> <li>The node is not serving any hash slots.</li> <li>The node is empty, no keys are stored at all in the key space.</li> </ol> <p>If the command succeeds the new slave will immediately try to contact its master in order to replicate from it.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> if the command was executed successfully, otherwise an error is returned.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-replicate\" class=\"_attribution-link\">http://redis.io/commands/cluster-replicate</a>\n  </p>\n</div>\n","cluster-reset":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER RESET [HARD|SOFT]</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.</p> </div> <p>Reset a Redis Cluster node, in a more or less drastic way depending on the reset type, that can be <strong>hard</strong> or <strong>soft</strong>. Note that this command <strong>does not work for masters if they hold one or more keys</strong>, in that case to completely reset a master node keys must be removed first, e.g. by using <a href=\"flushall\">FLUSHALL</a> first, and then <a href=\"cluster-reset\">CLUSTER RESET</a>.</p> <p>Effects on the node:</p> <ol> <li>All the other nodes in the cluster are forgotten.</li> <li>All the assigned / open slots are reset, so the slots-to-nodes mapping is totally cleared.</li> <li>If the node is a slave it is turned into an (empty) master. Its dataset is flushed, so at the end the node will be an empty master.</li> <li>\n<strong>Hard reset only</strong>: a new Node ID is generated.</li> <li>\n<strong>Hard reset only</strong>: <code>currentEpoch</code> and <code>configEpoch</code> vars are set to 0.</li> <li>The new configuration is persisted on disk in the node cluster configuration file.</li> </ol> <p>This command is mainly useful to re-provision a Redis Cluster node in order to be used in the context of a new, different cluster. The command is also extensively used by the Redis Cluster testing framework in order to reset the state of the cluster every time a new test unit is executed.</p> <p>If no reset type is specified, the default is <strong>soft</strong>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> if the command was successful. Otherwise an error is returned.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-reset\" class=\"_attribution-link\">http://redis.io/commands/cluster-reset</a>\n  </p>\n</div>\n","cluster-saveconfig":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER SAVECONFIG</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Forces a node to save the <code>nodes.conf</code> configuration on disk. Before to return the command calls <code>fsync(2)</code> in order to make sure the configuration is flushed on the computer disk.</p> <p>This command is mainly used in the event a <code>nodes.conf</code> node state file gets lost / deleted for some reason, and we want to generate it again from scratch. It can also be useful in case of mundane alterations of a node cluster configuration via the <code>CLUSTER</code> command in order to ensure the new configuration is persisted on disk, however all the commands should normally be able to auto schedule to persist the configuration on disk when it is important to do so for the correctness of the system in the event of a restart.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> or an error if the operation fails.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-saveconfig\" class=\"_attribution-link\">http://redis.io/commands/cluster-saveconfig</a>\n  </p>\n</div>\n","cluster-nodes":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER NODES</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the total number of Cluster nodes</p> </div> <p>Each node in a Redis Cluster has its view of the current cluster configuration, given by the set of known nodes, the state of the connection we have with such nodes, their flags, properties and assigned slots, and so forth.</p> <p><a href=\"cluster-nodes\">CLUSTER NODES</a> provides all this information, that is, the current cluster configuration of the node we are contacting, in a serialization format which happens to be exactly the same as the one used by Redis Cluster itself in order to store on disk the cluster state (however the on disk cluster state has a few additional info appended at the end).</p> <p>Note that normally clients willing to fetch the map between Cluster hash slots and node addresses should use <a href=\"cluster-slots\">CLUSTER SLOTS</a> instead. <a href=\"cluster-nodes\">CLUSTER NODES</a>, that provides more information, should be used for administrative tasks, debugging, and configuration inspections. It is also used by <code>redis-trib</code> in order to manage a cluster.</p> <h2>Serialization format</h2> <p>The output of the command is just a space-separated CSV string, where each line represents a node in the cluster. The following is an example of output:</p> <pre>07c37dfeb235213a872192d90877d0cd55635b91 127.0.0.1:30004 slave e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 0 1426238317239 4 connected\n67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 127.0.0.1:30002 master - 0 1426238316232 2 connected 5461-10922\n292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 127.0.0.1:30003 master - 0 1426238318243 3 connected 10923-16383\n6ec23923021cf3ffec47632106199cb7f496ce01 127.0.0.1:30005 slave 67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 0 1426238316232 5 connected\n824fe116063bc5fcf9f4ffd895bc17aee7731ac3 127.0.0.1:30006 slave 292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 0 1426238317741 6 connected\ne7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 127.0.0.1:30001 myself,master - 0 0 1 connected 0-5460\n</pre> <p>Each line is composed of the following fields:</p> <pre>&lt;id&gt; &lt;ip:port&gt; &lt;flags&gt; &lt;master&gt; &lt;ping-sent&gt; &lt;pong-recv&gt; &lt;config-epoch&gt; &lt;link-state&gt; &lt;slot&gt; &lt;slot&gt; ... &lt;slot&gt;\n</pre> <p>The meaning of each filed is the following:</p> <ol> <li>\n<code>id</code>: The node ID, a 40 characters random string generated when a node is created and never changed again (unless <code>CLUSTER RESET HARD</code> is used).</li> <li>\n<code>ip:port</code>: The node address where clients should contact the node to run queries.</li> <li>\n<code>flags</code>: A list of comma separated flags: <code>myself</code>, <code>master</code>, <code>slave</code>, <code>fail?</code>, <code>fail</code>, <code>handshake</code>, <code>noaddr</code>, <code>noflags</code>. Flags are explained in detail in the next section.</li> <li>\n<code>master</code>: If the node is a slave, and the master is known, the master node ID, otherwise the \"-\" character.</li> <li>\n<code>ping-sent</code>: Milliseconds unix time at which the currently active ping was sent, or zero if there are no pending pings.</li> <li>\n<code>pong-recv</code>: Milliseconds unix time the last pong was received.</li> <li>\n<code>config-epoch</code>: The configuration epoch (or version) of the current node (or of the current master if the node is a slave). Each time there is a failover, a new, unique, monotonically increasing configuration epoch is created. If multiple nodes claim to serve the same hash slots, the one with higher configuration epoch wins.</li> <li>\n<code>link-state</code>: The state of the link used for the node-to-node cluster bus. We use this link to communicate with the node. Can be <code>connected</code> or <code>disconnected</code>.</li> <li>\n<code>slot</code>: A hash slot number or range. Starting from argument number 9, but there may be up to 16384 entries in total (limit never reached). This is the list of hash slots served by this node. If the entry is just a number, is parsed as such. If it is a range, it is in the form <code>start-end</code>, and means that the node is responsible for all the hash slots from <code>start</code> to <code>end</code> including the start and end values.</li> </ol> <p>Meaning of the flags (field number 3):</p> <ul> <li>\n<code>myself</code>: The node you are contacting.</li> <li>\n<code>master</code>: Node is a master.</li> <li>\n<code>slave</code>: Node is a slave.</li> <li>\n<code>fail?</code>: Node is in <code>PFAIL</code> state. Not reachable for the node you are contacting, but still logically reachable (not in <code>FAIL</code> state).</li> <li>\n<code>fail</code>: Node is in <code>FAIL</code> state. It was not reachable for multiple nodes that promoted the <code>PFAIL</code> state to <code>FAIL</code>.</li> <li>\n<code>handshake</code>: Untrusted node, we are handshaking.</li> <li>\n<code>noaddr</code>: No address known for this node.</li> <li>\n<code>noflags</code>: No flags at all.</li> </ul> <h2>Notes on published config epochs</h2> <p>Slaves broadcast their master's config epochs (in order to get an <code>UPDATE</code> message if they are found to be stale), so the real config epoch of the slave (which is meaningless more or less, since they don't serve hash slots) can be only obtained checking the node flagged as <code>myself</code>, which is the entry of the node we are asking to generate <a href=\"cluster-nodes\">CLUSTER NODES</a> output. The other slaves epochs reflect what they publish in heartbeat packets, which is, the configuration epoch of the masters they are currently replicating.</p> <h2>Special slot entries</h2> <p>Normally hash slots associated to a given node are in one of the following formats, as already explained above:</p> <ol> <li>Single number: 3894</li> <li>Range: 3900-4000</li> </ol> <p>However node hash slots can be in a special state, used in order to communicate errors after a node restart (mismatch between the keys in the AOF/RDB file, and the node hash slots configuration), or when there is a resharding operation in progress. This two states are <strong>importing</strong> and <strong>migrating</strong>.</p> <p>The meaning of the two states is explained in the Redis Specification, however the gist of the two states is the following:</p> <ul> <li>\n<strong>Importing</strong> slots are yet not part of the nodes hash slot, there is a migration in progress. The node will accept queries about these slots only if the <code>ASK</code> command is used.</li> <li>\n<strong>Migrating</strong> slots are assigned to the node, but are being migrated to some other node. The node will accept queries if all the keys in the command exist already, otherwise it will emit what is called an <strong>ASK redirection</strong>, to force new keys creation directly in the importing node.</li> </ul> <p>Importing and migrating slots are emitted in the <a href=\"cluster-nodes\">CLUSTER NODES</a> output as follows:</p> <ul> <li>\n<strong>Importing slot:</strong> <code>[slot_number-&lt;-importing_from_node_id]</code>\n</li> <li>\n<strong>Migrating slot:</strong> <code>[slot_number-&gt;-migrating_to_node_id]</code>\n</li> </ul> <p>The following are a few examples of importing and migrating slots:</p> <ul> <li><code>[93-&lt;-292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f]</code></li> <li><code>[1002-&lt;-67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1]</code></li> <li><code>[77-&gt;-e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca]</code></li> <li><code>[16311-&gt;-292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f]</code></li> </ul> <p>Note that the format does not have any space, so <a href=\"cluster-nodes\">CLUSTER NODES</a> output format is plain CSV with space as separator even when this special slots are emitted. However a complete parser for the format should be able to handle them.</p> <p>Note that:</p> <ol> <li>Migration and importing slots are only added to the node flagged as <code>myself</code>. This information is local to a node, for its own slots.</li> <li>Importing and migrating slots are provided as <strong>additional info</strong>. If the node has a given hash slot assigned, it will be also a plain number in the list of hash slots, so clients that don't have a clue about hash slots migrations can just skip this special fields.</li> </ol> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: The serialized cluster configuration.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-nodes\" class=\"_attribution-link\">http://redis.io/commands/cluster-nodes</a>\n  </p>\n</div>\n","cluster-set-config-epoch":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER SET-CONFIG-EPOCH config-epoch</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>This command sets a specific <em>config epoch</em> in a fresh node. It only works when:</p> <ol> <li>The nodes table of the node is empty.</li> <li>The node current <em>config epoch</em> is zero.</li> </ol> <p>These prerequisites are needed since usually, manually altering the configuration epoch of a node is unsafe, we want to be sure that the node with the higher configuration epoch value (that is the last that failed over) wins over other nodes in claiming the hash slots ownership.</p> <p>However there is an exception to this rule, and it is when a new cluster is created from scratch. Redis Cluster <em>config epoch collision resolution</em> algorithm can deal with new nodes all configured with the same configuration at startup, but this process is slow and should be the exception, only to make sure that whatever happens, two more nodes eventually always move away from the state of having the same configuration epoch.</p> <p>So, using <code>CONFIG SET-CONFIG-EPOCH</code>, when a new cluster is created, we can assign a different progressive configuration epoch to each node before joining the cluster together.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> if the command was executed successfully, otherwise an error is returned.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-set-config-epoch\" class=\"_attribution-link\">http://redis.io/commands/cluster-set-config-epoch</a>\n  </p>\n</div>\n","cluster-slaves":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER SLAVES node-id</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>The command provides a list of slave nodes replicating from the specified master node. The list is provided in the same format used by <a href=\"cluster-nodes\">CLUSTER NODES</a> (please refer to its documentation for the specification of the format).</p> <p>The command will fail if the specified node is not known or if it is not a master according to the node table of the node receiving the command.</p> <p>Note that if a slave is added, moved, or removed from a given master node, and we ask <a href=\"cluster-slaves\">CLUSTER SLAVES</a> to a node that has not yet received the configuration update, it may show stale information. However eventually (in a matter of seconds if there are no network partitions) all the nodes will agree about the set of nodes associated with a given master.</p> <h2>Return value</h2> <p>The command returns data in the same format as <a href=\"cluster-nodes\">CLUSTER NODES</a>.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-slaves\" class=\"_attribution-link\">http://redis.io/commands/cluster-slaves</a>\n  </p>\n</div>\n","command-getkeys":"<h1 class=\"command\">COMMAND</h1>\n<pre>COMMAND GETKEYS</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.13.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of arguments to the command</p> </div> <p>Returns <a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a> of keys from a full Redis command.</p> <p><a href=\"command-getkeys\">COMMAND GETKEYS</a> is a helper command to let you find the keys from a full Redis command.</p> <p><a href=\"command\">COMMAND</a> shows some commands as having movablekeys meaning the entire command must be parsed to discover storage or retrieval keys. You can use <a href=\"command-getkeys\">COMMAND GETKEYS</a> to discover key positions directly from how Redis parses the commands.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of keys from your command.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"8bc5da0df173889cf03c41269018b9ef\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">COMMAND GETKEYS MSET a b c d e f</span> <code>1) \"a\"\n2) \"c\"\n3) \"e\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">COMMAND GETKEYS EVAL \"not consulted\" 3 key1 key2 key3 arg1 arg2 arg3 argN</span> <code>1) \"key1\"\n2) \"key2\"\n3) \"key3\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">COMMAND GETKEYS SORT mylist ALPHA STORE outlist</span> <code>1) \"mylist\"\n2) \"outlist\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/command-getkeys\" class=\"_attribution-link\">http://redis.io/commands/command-getkeys</a>\n  </p>\n</div>\n","command-info":"<h1 class=\"command\">COMMAND</h1>\n<pre>COMMAND INFO command-name [command-name ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.13.</strong></p> <p><strong>Time complexity:</strong> O(N) when N is number of commands to look up</p> </div> <p>Returns <a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a> of details about multiple Redis commands.</p> <p>Same result format as <a href=\"command\">COMMAND</a> except you can specify which commands get returned.</p> <p>If you request details about non-existing commands, their return position will be nil.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: nested list of command details.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"abcfa5e2076e2616d8d51b43b368df2c\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">COMMAND INFO get set eval</span> <code>1) 1) \"get\"\n   2) (integer) 2\n   3) 1) readonly\n      2) fast\n   4) (integer) 1\n   5) (integer) 1\n   6) (integer) 1\n2) 1) \"set\"\n   2) (integer) -3\n   3) 1) write\n      2) denyoom\n   4) (integer) 1\n   5) (integer) 1\n   6) (integer) 1\n3) 1) \"eval\"\n   2) (integer) -3\n   3) 1) noscript\n      2) movablekeys\n   4) (integer) 0\n   5) (integer) 0\n   6) (integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">COMMAND INFO foo evalsha config bar</span> <code>1) (nil)\n2) 1) \"evalsha\"\n   2) (integer) -3\n   3) 1) noscript\n      2) movablekeys\n   4) (integer) 0\n   5) (integer) 0\n   6) (integer) 0\n3) 1) \"config\"\n   2) (integer) -2\n   3) 1) readonly\n      2) admin\n      3) stale\n   4) (integer) 0\n   5) (integer) 0\n   6) (integer) 0\n4) (nil)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/command-info\" class=\"_attribution-link\">http://redis.io/commands/command-info</a>\n  </p>\n</div>\n","config-get":"<h1 class=\"command\">CONFIG</h1>\n<pre>CONFIG GET parameter</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> </div> <p>The <a href=\"config-get\">CONFIG GET</a> command is used to read the configuration parameters of a running Redis server. Not all the configuration parameters are supported in Redis 2.4, while Redis 2.6 can read the whole configuration of a server using this command.</p> <p>The symmetric command used to alter the configuration at run time is <code>CONFIG\nSET</code>.</p> <p><a href=\"config-get\">CONFIG GET</a> takes a single argument, which is a glob-style pattern. All the configuration parameters matching this parameter are reported as a list of key-value pairs. Example:</p> <pre>redis&gt; config get *max-*-entries*\n1) \"hash-max-zipmap-entries\"\n2) \"512\"\n3) \"list-max-ziplist-entries\"\n4) \"512\"\n5) \"set-max-intset-entries\"\n6) \"512\"\n</pre> <p>You can obtain a list of all the supported configuration parameters by typing <code>CONFIG GET *</code> in an open <code>redis-cli</code> prompt.</p> <p>All the supported parameters have the same meaning of the equivalent configuration parameter used in the <a href=\"http://github.com/antirez/redis/raw/2.8/redis.conf\">redis.conf</a> file, with the following important differences:</p> <ul> <li>Where bytes or other quantities are specified, it is not possible to use the <code>redis.conf</code> abbreviated form (<code>10k</code>, <code>2gb</code> ... and so forth), everything should be specified as a well-formed 64-bit integer, in the base unit of the configuration directive.</li> <li>The save parameter is a single string of space-separated integers. Every pair of integers represent a seconds/modifications threshold.</li> </ul> <p>For instance what in <code>redis.conf</code> looks like:</p> <pre>save 900 1\nsave 300 10\n</pre> <p>that means, save after 900 seconds if there is at least 1 change to the dataset, and after 300 seconds if there are at least 10 changes to the dataset, will be reported by <a href=\"config-get\">CONFIG GET</a> as \"900 1 300 10\".</p> <h2>Return value</h2> <p>The return type of the command is a <a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/config-get\" class=\"_attribution-link\">http://redis.io/commands/config-get</a>\n  </p>\n</div>\n","config-rewrite":"<h1 class=\"command\">CONFIG</h1>\n<pre>CONFIG REWRITE</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.0.</strong></p> </div> <p>The <a href=\"config-rewrite\">CONFIG REWRITE</a> command rewrites the <code>redis.conf</code> file the server was started with, applying the minimal changes needed to make it reflecting the configuration currently used by the server, that may be different compared to the original one because of the use of the <a href=\"config-set\">CONFIG SET</a> command.</p> <p>The rewrite is performed in a very conservative way:</p> <ul> <li>Comments and the overall structure of the original redis.conf are preserved as much as possible.</li> <li>If an option already exists in the old redis.conf file, it will be rewritten at the same position (line number).</li> <li>If an option was not already present, but it is set to its default value, it is not added by the rewrite process.</li> <li>If an option was not already present, but it is set to a non-default value, it is appended at the end of the file.</li> <li>Non used lines are blanked. For instance if you used to have multiple <code>save</code> directives, but the current configuration has fewer or none as you disabled RDB persistence, all the lines will be blanked.</li> </ul> <p>CONFIG REWRITE is also able to rewrite the configuration file from scratch if the original one no longer exists for some reason. However if the server was started without a configuration file at all, the CONFIG REWRITE will just return an error.</p> <h2>Atomic rewrite process</h2> <p>In order to make sure the redis.conf file is always consistent, that is, on errors or crashes you always end with the old file, or the new one, the rewrite is performed with a single <code>write(2)</code> call that has enough content to be at least as big as the old file. Sometimes additional padding in the form of comments is added in order to make sure the resulting file is big enough, and later the file gets truncated to remove the padding at the end.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> when the configuration was rewritten properly. Otherwise an error is returned.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/config-rewrite\" class=\"_attribution-link\">http://redis.io/commands/config-rewrite</a>\n  </p>\n</div>\n","config-set":"<h1 class=\"command\">CONFIG</h1>\n<pre>CONFIG SET parameter value</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> </div> <p>The <a href=\"config-set\">CONFIG SET</a> command is used in order to reconfigure the server at run time without the need to restart Redis. You can change both trivial parameters or switch from one to another persistence option using this command.</p> <p>The list of configuration parameters supported by <a href=\"config-set\">CONFIG SET</a> can be obtained issuing a <code>CONFIG GET *</code> command, that is the symmetrical command used to obtain information about the configuration of a running Redis instance.</p> <p>All the configuration parameters set using <a href=\"config-set\">CONFIG SET</a> are immediately loaded by Redis and will take effect starting with the next command executed.</p> <p>All the supported parameters have the same meaning of the equivalent configuration parameter used in the <a href=\"http://github.com/antirez/redis/raw/2.8/redis.conf\">redis.conf</a> file, with the following important differences:</p> <ul> <li>In options where bytes or other quantities are specified, it is not possible to use the <code>redis.conf</code> abbreviated form (<code>10k</code>, <code>2gb</code> ... and so forth), everything should be specified as a well-formed 64-bit integer, in the base unit of the configuration directive. However since Redis version 3.0 or greater, it is possible to use <a href=\"config-set\">CONFIG SET</a> with memory units for <code>maxmemory</code>, client output buffers, and replication backlog size.</li> <li>The save parameter is a single string of space-separated integers. Every pair of integers represent a seconds/modifications threshold.</li> </ul> <p>For instance what in <code>redis.conf</code> looks like:</p> <pre>save 900 1\nsave 300 10\n</pre> <p>that means, save after 900 seconds if there is at least 1 change to the dataset, and after 300 seconds if there are at least 10 changes to the dataset, should be set using <code>CONFIG SET SAVE \"900 1 300 10\"</code>.</p> <p>It is possible to switch persistence from RDB snapshotting to append-only file (and the other way around) using the <a href=\"config-set\">CONFIG SET</a> command. For more information about how to do that please check the <a href=\"http://redis.io/topics/persistence\">persistence page</a>.</p> <p>In general what you should know is that setting the <code>appendonly</code> parameter to <code>yes</code> will start a background process to save the initial append-only file (obtained from the in memory data set), and will append all the subsequent commands on the append-only file, thus obtaining exactly the same effect of a Redis server that started with AOF turned on since the start.</p> <p>You can have both the AOF enabled with RDB snapshotting if you want, the two options are not mutually exclusive.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> when the configuration was set properly. Otherwise an error is returned.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/config-set\" class=\"_attribution-link\">http://redis.io/commands/config-set</a>\n  </p>\n</div>\n","cluster-setslot":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER SETSLOT slot IMPORTING|MIGRATING|STABLE|NODE [node-id]</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p><a href=\"cluster-setslot\">CLUSTER SETSLOT</a> is responsible of changing the state of a hash slot in the receiving node in different ways. It can, depending on the subcommand used:</p> <ol> <li>\n<code>MIGRATING</code> subcommand: Set a hash slot in <em>migrating</em> state.</li> <li>\n<code>IMPORTING</code> subcommand: Set a hash slot in <em>importing</em> state.</li> <li>\n<code>STABLE</code> subcommand: Clear any importing / migrating state from hash slot.</li> <li>\n<code>NODE</code> subcommand: Bind the hash slot to a different node.</li> </ol> <p>The command with its set of subcommands is useful in order to start and end cluster live resharding operations, which are accomplished by setting a hash slot in migrating state in the source node, and importing state in the destination node.</p> <p>Each subcommand is documented below. At the end you'll find a description of how live resharding is performed using this command and other related commands.</p> <h2>CLUSTER SETSLOT <code>&lt;slot&gt;</code> MIGRATING <code>&lt;destination-node-id&gt;</code>\n</h2> <p>This subcommand sets a slot to <em>migrating</em> state. In order to set a slot in this state, the node receiving the command must be the hash slot owner, otherwise an error is returned.</p> <p>When a slot is set in migrating state, the node changes behavior in the following way:</p> <ol> <li>If a command is received about an existing key, the command is processed as usually.</li> <li>If a command is received about a key that does not exists, an <code>ASK</code> redirection is emitted by the node, asking the client to retry only that specific query into <code>destination-node</code>. In this case the client should not update its hash slot to node mapping.</li> <li>If the command contains multiple keys, in case none exist, the behavior is the same as point 2, if all exist, it is the same as point 1, however if only a partial number of keys exist, the command emits a <code>TRYAGAIN</code> error in order for the keys interested to finish being migrated to the target node, so that the multi keys command can be executed.</li> </ol> <h2>CLUSTER SETSLOT <code>&lt;slot&gt;</code> IMPORTING <code>&lt;source-node-id&gt;</code>\n</h2> <p>This subcommand is the reverse of <code>MIGRATING</code>, and prepares the destination node to import keys from the specified source node. The command only works if the node is not already owner of the specified hash slot.</p> <p>When a slot is set in importing state, the node changes behavior in the following way:</p> <ol> <li>Commands about this hash slot are refused and a <code>MOVED</code> redirection is generated as usually, but in the case the command follows an <code>ASKING</code> command, in this case the command is executed.</li> </ol> <p>In this way when a node in migrating state generates an <code>ASK</code> redirection, the client contacts the target node, sends <code>ASKING</code>, and immediately after sends the command. This way commands about non-existing keys in the old node or keys already migrated to the target node are executed in the target node, so that:</p> <ol> <li>New keys are always created in the target node. During a hash slot migration we'll have to move only old keys, not new ones.</li> <li>Commands about keys already migrated are correctly processed in the context of the node which is the target of the migration, the new hash slot owner, in order to guarantee consistency.</li> <li>Without <code>ASKING</code> the behavior is the same as usually. This guarantees that clients with a broken hash slots mapping will not write for error in the target node, creating a new version of a key that has yet to be migrated.</li> </ol> <h2>CLUSTER SETSLOT <code>&lt;slot&gt;</code> STABLE</h2> <p>This subcommand just clears migrating / importing state from the slot. It is mainly used to fix a cluster stuck in a wrong state by <code>redis-trib fix</code>. Normally the two states are cleared automatically at the end of the migration using the <code>SETSLOT ... NODE ...</code> subcommand as explained in the next section.</p> <h2>CLUSTER SETSLOT <code>&lt;slot&gt;</code> NODE <code>&lt;node-id&gt;</code>\n</h2> <p>The <code>NODE</code> subcommand is the one with the most complex semantics. It associates the hash slot with the specified node, however the command works only in specific situations and has different side effects depending on the slot state. The following is the set of pre-conditions and side effects of the command:</p> <ol> <li>If the current hash slot owner is the node receiving the command, but for effect of the command the slot would be assigned to a different node, the command will return an error if there are still keys for that hash slot in the node receiving the command.</li> <li>If the slot is in <em>migrating</em> state, the state gets cleared when the slot is assigned to another node.</li> <li>If the slot was in <em>importing</em> state in the node receiving the command, and the command assigns the slot to this node (which happens in the target node at the end of the resharding of a hash slot from one node to another), the command has the following side effects: A) the <em>importing</em> state is cleared. B) If the node config epoch is not already the greatest of the cluster, it generates a new one and assigns the new config epoch to itself. This way its new hash slot ownership will win over any past configuration created by previous failovers or slot migrations.</li> </ol> <p>It is important to note that step 3 is the only time when a Redis Cluster node will create a new config epoch without agreement from other nodes. This only happens when a manual configuration is operated. However it is impossible that this creates a non-transient setup where two nodes have the same config epoch, since Redis Cluster uses a config epoch collision resolution algorithm.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: All the subcommands return <code>OK</code> if the command was successful. Otherwise an error is returned.</p> <h2>Redis Cluster live resharding explained</h2> <p>The <a href=\"cluster-setslot\">CLUSTER SETSLOT</a> command is an important piece used by Redis Cluster in order to migrate all the keys contained in one hash slot from one node to another. This is how the migration is orchestrated, with the help of other commands as well. We'll call the node that has the current ownership of the hash slot the <code>source</code> node, and the node where we want to migrate the <code>destination</code> node.</p> <ol> <li>Set the destination node slot to <em>importing</em> state using <code>CLUSTER SETSLOT &lt;slot&gt; IMPORTING &lt;source-node-id&gt;</code>.</li> <li>Set the source node slot to <em>migrating</em> state using <code>CLUSTER SETSLOT &lt;slot&gt; MIGRATING &lt;destination-node-id&gt;</code>.</li> <li>Get keys from the source node with <a href=\"cluster-getkeysinslot\">CLUSTER GETKEYSINSLOT</a> command and move them into the destination node using the <a href=\"migrate\">MIGRATE</a> command.</li> <li>Use <code>CLUSTER SETSLOT &lt;slot&gt; NODE &lt;destination-node-id&gt;</code> in the source or destination.</li> </ol> <p>Notes:</p> <ul> <li>The order of step 1 and 2 is important. We want the destination node to be ready to accept <code>ASK</code> redirections when the source node is configured to redirect.</li> <li>Step 4 does not technically need to use <code>SETSLOT</code> in the nodes not involved in the resharding, since the configuration will eventually propagate itself, however it is a good idea to do so in order to stop nodes from pointing to the wrong node for the hash slot moved as soon as possible, resulting in less redirections to find the right node.</li> </ul>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-setslot\" class=\"_attribution-link\">http://redis.io/commands/cluster-setslot</a>\n  </p>\n</div>\n","cluster-slots":"<h1 class=\"command\">CLUSTER</h1>\n<pre>CLUSTER SLOTS</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the total number of Cluster nodes</p> </div> <p><a href=\"cluster-slots\">CLUSTER SLOTS</a> returns details about which cluster slots map to which Redis instances. The command is suitable to be used by Redis Cluster client libraries implementations in order to retrieve (or update when a redirection is received) the map associating cluster <em>hash slots</em> with actual nodes network coordinates (composed of an IP address and a TCP port), so that when a command is received, it can be sent to what is likely the right instance for the keys specified in the command.</p> <h2>Nested Result Array</h2> <p>Each nested result is:</p> <ul> <li>Start slot range</li> <li>End slot range</li> <li>Master for slot range represented as nested IP/Port array </li> <li>First replica of master for slot range</li> <li>Second replica</li> <li>...continues until all replicas for this master are returned.</li> </ul> <p>Each result includes all active replicas of the master instance for the listed slot range. Failed replicas are not returned.</p> <p>The third nested reply is guaranteed to be the IP/Port pair of the master instance for the slot range. All IP/Port pairs after the third nested reply are replicas of the master.</p> <p>If a cluster instance has non-contiguous slots (e.g. 1-400,900,1800-6000) then master and replica IP/Port results will be duplicated for each top-level slot range reply.</p> <p><strong>Warning:</strong> Newer versions of Redis Cluster will output, for each Redis instance, not just the IP and port, but also the node ID as third element of the array. In future versions there could be more elements describing the node better. In general a client implementation should just rely on the fact that certain parameters are at fixed positions as specified, but more parameters may follow and should be ignored. Similarly a client library should try if possible to cope with the fact that older versions may just have the IP and port parameter.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: nested list of slot ranges with IP/Port mappings.</p> <h3>Sample Output (old version)</h3> <pre>127.0.0.1:7001&gt; cluster slots\n1) 1) (integer) 0\n   2) (integer) 4095\n   3) 1) \"127.0.0.1\"\n      2) (integer) 7000\n   4) 1) \"127.0.0.1\"\n      2) (integer) 7004\n2) 1) (integer) 12288\n   2) (integer) 16383\n   3) 1) \"127.0.0.1\"\n      2) (integer) 7003\n   4) 1) \"127.0.0.1\"\n      2) (integer) 7007\n3) 1) (integer) 4096\n   2) (integer) 8191\n   3) 1) \"127.0.0.1\"\n      2) (integer) 7001\n   4) 1) \"127.0.0.1\"\n      2) (integer) 7005\n4) 1) (integer) 8192\n   2) (integer) 12287\n   3) 1) \"127.0.0.1\"\n      2) (integer) 7002\n   4) 1) \"127.0.0.1\"\n      2) (integer) 7006\n</pre> <h3>Sample Output (new version, includes IDs)</h3> <pre>127.0.0.1:30001&gt; cluster slots\n1) 1) (integer) 0\n   2) (integer) 5460\n   3) 1) \"127.0.0.1\"\n      2) (integer) 30001\n      3) \"09dbe9720cda62f7865eabc5fd8857c5d2678366\"\n   4) 1) \"127.0.0.1\"\n      2) (integer) 30004\n      3) \"821d8ca00d7ccf931ed3ffc7e3db0599d2271abf\"\n2) 1) (integer) 5461\n   2) (integer) 10922\n   3) 1) \"127.0.0.1\"\n      2) (integer) 30002\n      3) \"c9d93d9f2c0c524ff34cc11838c2003d8c29e013\"\n   4) 1) \"127.0.0.1\"\n      2) (integer) 30005\n      3) \"faadb3eb99009de4ab72ad6b6ed87634c7ee410f\"\n3) 1) (integer) 10923\n   2) (integer) 16383\n   3) 1) \"127.0.0.1\"\n      2) (integer) 30003\n      3) \"044ec91f325b7595e76dbcb18cc688b6a5b434a1\"\n   4) 1) \"127.0.0.1\"\n      2) (integer) 30006\n      3) \"58e6e48d41228013e5d9c1c37c5060693925e97e\"\n</pre>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/cluster-slots\" class=\"_attribution-link\">http://redis.io/commands/cluster-slots</a>\n  </p>\n</div>\n","command-count":"<h1 class=\"command\">COMMAND</h1>\n<pre>COMMAND COUNT</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.13.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns <a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a> of number of total commands in this Redis server.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: number of commands returned by <a href=\"command\">COMMAND</a></p> <h2>Examples</h2> <div class=\"example\" data-session=\"31a5ec3cdfd258d93852c83d6d6d4de3\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">COMMAND COUNT</span> <code>(integer) 171</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/command-count\" class=\"_attribution-link\">http://redis.io/commands/command-count</a>\n  </p>\n</div>\n","config-resetstat":"<h1 class=\"command\">CONFIG</h1>\n<pre>CONFIG RESETSTAT</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Resets the statistics reported by Redis using the <a href=\"info\">INFO</a> command.</p> <p>These are the counters that are reset:</p> <ul> <li>Keyspace hits</li> <li>Keyspace misses</li> <li>Number of commands processed</li> <li>Number of connections received</li> <li>Number of expired keys</li> <li>Number of rejected connections</li> <li>Latest fork(2) time</li> <li>The <code>aof_delayed_fsync</code> counter</li> </ul> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: always <code>OK</code>.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/config-resetstat\" class=\"_attribution-link\">http://redis.io/commands/config-resetstat</a>\n  </p>\n</div>\n","command":"<h1 class=\"command\">COMMAND</h1>\n<pre>COMMAND</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.13.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the total number of Redis commands</p> </div> <p>Returns <a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a> of details about all Redis commands.</p> <p>Cluster clients must be aware of key positions in commands so commands can go to matching instances, but Redis commands vary between accepting one key, multiple keys, or even multiple keys separated by other data.</p> <p>You can use <a href=\"command\">COMMAND</a> to cache a mapping between commands and key positions for each command to enable exact routing of commands to cluster instances.</p> <h2>Nested Result Array</h2> <p>Each top-level result contains six nested results. Each nested result is:</p> <ul> <li>command name</li> <li>command arity specification</li> <li>nested <a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a> of command flags</li> <li>position of first key in argument list</li> <li>position of last key in argument list</li> <li>step count for locating repeating keys</li> </ul> <h3>Command Name</h3> <p>Command name is the command returned as a lowercase string.</p> <h3>Command Arity</h3> <table style=\"width:50%\"> <tr>\n<td> <pre>\n1) 1) \"get\"\n   2) (integer) 2\n   3) 1) readonly\n   4) (integer) 1\n   5) (integer) 1\n   6) (integer) 1\n</pre> </td> <td> <pre>\n1) 1) \"mget\"\n   2) (integer) -2\n   3) 1) readonly\n   4) (integer) 1\n   5) (integer) -1\n   6) (integer) 1\n</pre> </td>\n</tr> </table> <p>Command arity follows a simple pattern:</p> <ul> <li>positive if command has fixed number of required arguments.</li> <li>negative if command has minimum number of required arguments, but may have more.</li> </ul> <p>Command arity <em>includes</em> counting the command name itself.</p> <p>Examples:</p> <ul> <li>\n<a href=\"get\">GET</a> arity is 2 since the command only accepts one argument and always has the format <code>GET _key_</code>.</li> <li>\n<a href=\"mget\">MGET</a> arity is -2 since the command accepts at a minimum one argument, but up to an unlimited number: <code>MGET _key1_ [key2] [key3] ...</code>.</li> </ul> <p>Also note with <a href=\"mget\">MGET</a>, the -1 value for \"last key position\" means the list of keys may have unlimited length.</p> <h3>Flags</h3> <p>Command flags is <a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a> containing one or more status replies:</p> <ul> <li>\n<em>write</em> - command may result in modifications</li> <li>\n<em>readonly</em> - command will never modify keys</li> <li>\n<em>denyoom</em> - reject command if currently OOM</li> <li>\n<em>admin</em> - server admin command</li> <li>\n<em>pubsub</em> - pubsub-related command</li> <li>\n<em>noscript</em> - deny this command from scripts</li> <li>\n<em>random</em> - command has random results, dangerous for scripts</li> <li>\n<em>sort_for_script</em> - if called from script, sort output</li> <li>\n<em>loading</em> - allow command while database is loading</li> <li>\n<em>stale</em> - allow command while replica has stale data</li> <li>\n<em>skip_monitor</em> - do not show this command in MONITOR</li> <li>\n<em>asking</em> - cluster related - accept even if importing</li> <li>\n<em>fast</em> - command operates in constant or log(N) time. Used for latency monitoring.</li> <li>\n<em>movablekeys</em> - keys have no pre-determined position. You must discover keys yourself.</li> </ul> <h3>Movable Keys</h3> <pre>1) 1) \"sort\"\n   2) (integer) -2\n   3) 1) write\n      2) denyoom\n      3) movablekeys\n   4) (integer) 1\n   5) (integer) 1\n   6) (integer) 1\n</pre> <p>Some Redis commands have no predetermined key locations. For those commands, flag <code>movablekeys</code> is added to the command flags <a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>. Your Redis Cluster client needs to parse commands marked <code>movabkeleys</code> to locate all relevant key positions.</p> <p>Complete list of commands currently requiring key location parsing:</p> <ul> <li>\n<a href=\"sort\">SORT</a> - optional <code>STORE</code> key, optional <code>BY</code> weights, optional <a href=\"get\">GET</a> keys</li> <li>\n<a href=\"zunionstore\">ZUNIONSTORE</a> - keys stop when <code>WEIGHT</code> or <code>AGGREGATE</code> starts</li> <li>\n<a href=\"zinterstore\">ZINTERSTORE</a> - keys stop when <code>WEIGHT</code> or <code>AGGREGATE</code> starts</li> <li>\n<a href=\"eval\">EVAL</a> - keys stop after <code>numkeys</code> count arguments</li> <li>\n<a href=\"evalsha\">EVALSHA</a> - keys stop after <code>numkeys</code> count arguments</li> </ul> <p>Also see <a href=\"command-getkeys\">COMMAND GETKEYS</a> for getting your Redis server tell you where keys are in any given command.</p> <h3>First Key in Argument List</h3> <p>For most commands the first key is position 1. Position 0 is always the command name itself.</p> <h3>Last Key in Argument List</h3> <p>Redis commands usually accept one key, two keys, or an unlimited number of keys.</p> <p>If a command accepts one key, the first key and last key positions is 1.</p> <p>If a command accepts two keys (e.g. <a href=\"brpoplpush\">BRPOPLPUSH</a>, <a href=\"smove\">SMOVE</a>, <a href=\"rename\">RENAME</a>, ...) then the last key position is the location of the last key in the argument list.</p> <p>If a command accepts an unlimited number of keys, the last key position is -1.</p> <h3>Step Count</h3> <table style=\"width:50%\"> <tr>\n<td> <pre>\n1) 1) \"mset\"\n   2) (integer) -3\n   3) 1) write\n      2) denyoom\n   4) (integer) 1\n   5) (integer) -1\n   6) (integer) 2\n</pre> </td> <td> <pre>\n1) 1) \"mget\"\n   2) (integer) -2\n   3) 1) readonly\n   4) (integer) 1\n   5) (integer) -1\n   6) (integer) 1\n</pre> </td>\n</tr> </table> <p>Key step count allows us to find key positions in commands like <a href=\"mset\">MSET</a> where the format is <code>MSET _key1_ _val1_ [key2] [val2] [key3] [val3]...</code>.</p> <p>In the case of <a href=\"mset\">MSET</a>, keys are every other position so the step value is 2. Compare with <a href=\"mget\">MGET</a> above where the step value is just 1.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: nested list of command details. Commands are returned in random order.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"84d98269ea9b6df25384c47f5289962e\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">COMMAND</span> <code>1) 1) \"zrevrangebylex\"\n     2) (integer) -4\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n  2) 1) \"replconf\"\n     2) (integer) -1\n     3) 1) readonly\n        2) admin\n        3) noscript\n        4) loading\n        5) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n  3) 1) \"sadd\"\n     2) (integer) -3\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n  4) 1) \"blpop\"\n     2) (integer) -3\n     3) 1) write\n        2) noscript\n     4) (integer) 1\n     5) (integer) -2\n     6) (integer) 1\n  5) 1) \"getbit\"\n     2) (integer) 3\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n  6) 1) \"zremrangebyscore\"\n     2) (integer) 4\n     3) 1) write\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n  7) 1) \"type\"\n     2) (integer) 2\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n  8) 1) \"georadius\"\n     2) (integer) -6\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n  9) 1) \"zrange\"\n     2) (integer) -4\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 10) 1) \"sismember\"\n     2) (integer) 3\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 11) 1) \"bitcount\"\n     2) (integer) -2\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 12) 1) \"rpushx\"\n     2) (integer) 3\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 13) 1) \"slaveof\"\n     2) (integer) 3\n     3) 1) admin\n        2) noscript\n        3) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 14) 1) \"zrevrank\"\n     2) (integer) 3\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 15) 1) \"punsubscribe\"\n     2) (integer) -1\n     3) 1) readonly\n        2) pubsub\n        3) noscript\n        4) loading\n        5) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 16) 1) \"sscan\"\n     2) (integer) -3\n     3) 1) readonly\n        2) random\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 17) 1) \"lset\"\n     2) (integer) 4\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 18) 1) \"psetex\"\n     2) (integer) 4\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 19) 1) \"discard\"\n     2) (integer) 1\n     3) 1) readonly\n        2) noscript\n        3) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 20) 1) \"pfdebug\"\n     2) (integer) -3\n     3) 1) write\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 21) 1) \"pexpire\"\n     2) (integer) 3\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 22) 1) \"zrem\"\n     2) (integer) -3\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 23) 1) \"smembers\"\n     2) (integer) 2\n     3) 1) readonly\n        2) sort_for_script\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 24) 1) \"get\"\n     2) (integer) 2\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 25) 1) \"dbsize\"\n     2) (integer) 1\n     3) 1) readonly\n        2) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 26) 1) \"lastsave\"\n     2) (integer) 1\n     3) 1) readonly\n        2) random\n        3) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 27) 1) \"hkeys\"\n     2) (integer) 2\n     3) 1) readonly\n        2) sort_for_script\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 28) 1) \"geoadd\"\n     2) (integer) -5\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 29) 1) \"restore\"\n     2) (integer) -4\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 30) 1) \"scan\"\n     2) (integer) -2\n     3) 1) readonly\n        2) random\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 31) 1) \"set\"\n     2) (integer) -3\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 32) 1) \"ping\"\n     2) (integer) -1\n     3) 1) readonly\n        2) stale\n        3) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 33) 1) \"bitpos\"\n     2) (integer) -3\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 34) 1) \"psubscribe\"\n     2) (integer) -2\n     3) 1) readonly\n        2) pubsub\n        3) noscript\n        4) loading\n        5) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 35) 1) \"role\"\n     2) (integer) 1\n     3) 1) noscript\n        2) loading\n        3) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 36) 1) \"zcard\"\n     2) (integer) 2\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 37) 1) \"wait\"\n     2) (integer) 3\n     3) 1) readonly\n        2) noscript\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 38) 1) \"config\"\n     2) (integer) -2\n     3) 1) readonly\n        2) admin\n        3) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 39) 1) \"sdiffstore\"\n     2) (integer) -3\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n 40) 1) \"lrange\"\n     2) (integer) 4\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 41) 1) \"hsetnx\"\n     2) (integer) 4\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 42) 1) \"unwatch\"\n     2) (integer) 1\n     3) 1) readonly\n        2) noscript\n        3) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 43) 1) \"asking\"\n     2) (integer) 1\n     3) 1) readonly\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 44) 1) \"decr\"\n     2) (integer) 2\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 45) 1) \"client\"\n     2) (integer) -2\n     3) 1) readonly\n        2) noscript\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 46) 1) \"spop\"\n     2) (integer) -2\n     3) 1) write\n        2) noscript\n        3) random\n        4) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 47) 1) \"brpop\"\n     2) (integer) -3\n     3) 1) write\n        2) noscript\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 48) 1) \"lpushx\"\n     2) (integer) 3\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 49) 1) \"slowlog\"\n     2) (integer) -2\n     3) 1) readonly\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 50) 1) \"hexists\"\n     2) (integer) 3\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 51) 1) \"llen\"\n     2) (integer) 2\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 52) 1) \"lpush\"\n     2) (integer) -3\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 53) 1) \"rpoplpush\"\n     2) (integer) 3\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 2\n     6) (integer) 1\n 54) 1) \"restore-asking\"\n     2) (integer) -4\n     3) 1) write\n        2) denyoom\n        3) asking\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 55) 1) \"save\"\n     2) (integer) 1\n     3) 1) readonly\n        2) admin\n        3) noscript\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 56) 1) \"zunionstore\"\n     2) (integer) -4\n     3) 1) write\n        2) denyoom\n        3) movablekeys\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 57) 1) \"rpush\"\n     2) (integer) -3\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 58) 1) \"pexpireat\"\n     2) (integer) 3\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 59) 1) \"auth\"\n     2) (integer) 2\n     3) 1) readonly\n        2) noscript\n        3) loading\n        4) stale\n        5) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 60) 1) \"zrevrange\"\n     2) (integer) -4\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 61) 1) \"ttl\"\n     2) (integer) 2\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 62) 1) \"del\"\n     2) (integer) -2\n     3) 1) write\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n 63) 1) \"sinter\"\n     2) (integer) -2\n     3) 1) readonly\n        2) sort_for_script\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n 64) 1) \"strlen\"\n     2) (integer) 2\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 65) 1) \"incrbyfloat\"\n     2) (integer) 3\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 66) 1) \"sync\"\n     2) (integer) 1\n     3) 1) readonly\n        2) admin\n        3) noscript\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 67) 1) \"msetnx\"\n     2) (integer) -3\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 2\n 68) 1) \"pfcount\"\n     2) (integer) -2\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n 69) 1) \"command\"\n     2) (integer) 0\n     3) 1) readonly\n        2) loading\n        3) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 70) 1) \"zrank\"\n     2) (integer) 3\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 71) 1) \"sort\"\n     2) (integer) -2\n     3) 1) write\n        2) denyoom\n        3) movablekeys\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 72) 1) \"zinterstore\"\n     2) (integer) -4\n     3) 1) write\n        2) denyoom\n        3) movablekeys\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 73) 1) \"persist\"\n     2) (integer) 2\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 74) 1) \"incr\"\n     2) (integer) 2\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 75) 1) \"mget\"\n     2) (integer) -2\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n 76) 1) \"geopos\"\n     2) (integer) -2\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 77) 1) \"geodist\"\n     2) (integer) -4\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 78) 1) \"script\"\n     2) (integer) -2\n     3) 1) readonly\n        2) noscript\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 79) 1) \"georadiusbymember\"\n     2) (integer) -5\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 80) 1) \"srem\"\n     2) (integer) -3\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 81) 1) \"setrange\"\n     2) (integer) 4\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 82) 1) \"mset\"\n     2) (integer) -3\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 2\n 83) 1) \"flushall\"\n     2) (integer) -1\n     3) 1) write\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 84) 1) \"renamenx\"\n     2) (integer) 3\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 2\n     6) (integer) 1\n 85) 1) \"pfadd\"\n     2) (integer) -2\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 86) 1) \"select\"\n     2) (integer) 2\n     3) 1) readonly\n        2) loading\n        3) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 87) 1) \"zincrby\"\n     2) (integer) 4\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 88) 1) \"hgetall\"\n     2) (integer) 2\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 89) 1) \"bgrewriteaof\"\n     2) (integer) 1\n     3) 1) readonly\n        2) admin\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 90) 1) \"cluster\"\n     2) (integer) -2\n     3) 1) readonly\n        2) admin\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 91) 1) \"zcount\"\n     2) (integer) 4\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 92) 1) \"substr\"\n     2) (integer) 4\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 93) 1) \"incrby\"\n     2) (integer) 3\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 94) 1) \"debug\"\n     2) (integer) -2\n     3) 1) admin\n        2) noscript\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 95) 1) \"hget\"\n     2) (integer) 3\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n 96) 1) \"flushdb\"\n     2) (integer) -1\n     3) 1) write\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n 97) 1) \"sunionstore\"\n     2) (integer) -3\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n 98) 1) \"smove\"\n     2) (integer) 4\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 2\n     6) (integer) 1\n 99) 1) \"zrangebylex\"\n     2) (integer) -4\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n100) 1) \"zrevrangebyscore\"\n     2) (integer) -4\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n101) 1) \"setbit\"\n     2) (integer) 4\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n102) 1) \"multi\"\n     2) (integer) 1\n     3) 1) readonly\n        2) noscript\n        3) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n103) 1) \"sdiff\"\n     2) (integer) -2\n     3) 1) readonly\n        2) sort_for_script\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n104) 1) \"hscan\"\n     2) (integer) -3\n     3) 1) readonly\n        2) random\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n105) 1) \"time\"\n     2) (integer) 1\n     3) 1) readonly\n        2) random\n        3) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n106) 1) \"hset\"\n     2) (integer) 4\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n107) 1) \"dump\"\n     2) (integer) 2\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n108) 1) \"move\"\n     2) (integer) 3\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n109) 1) \"append\"\n     2) (integer) 3\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n110) 1) \"lpop\"\n     2) (integer) 2\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n111) 1) \"hvals\"\n     2) (integer) 2\n     3) 1) readonly\n        2) sort_for_script\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n112) 1) \"readonly\"\n     2) (integer) 1\n     3) 1) readonly\n        2) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n113) 1) \"zscan\"\n     2) (integer) -3\n     3) 1) readonly\n        2) random\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n114) 1) \"sinterstore\"\n     2) (integer) -3\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n115) 1) \"zadd\"\n     2) (integer) -4\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n116) 1) \"evalsha\"\n     2) (integer) -3\n     3) 1) noscript\n        2) movablekeys\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n117) 1) \"exec\"\n     2) (integer) 1\n     3) 1) noscript\n        2) skip_monitor\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n118) 1) \"unsubscribe\"\n     2) (integer) -1\n     3) 1) readonly\n        2) pubsub\n        3) noscript\n        4) loading\n        5) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n119) 1) \"eval\"\n     2) (integer) -3\n     3) 1) noscript\n        2) movablekeys\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n120) 1) \"setex\"\n     2) (integer) 4\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n121) 1) \"scard\"\n     2) (integer) 2\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n122) 1) \"expire\"\n     2) (integer) 3\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n123) 1) \"zremrangebylex\"\n     2) (integer) 4\n     3) 1) write\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n124) 1) \"unlink\"\n     2) (integer) -2\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n125) 1) \"pubsub\"\n     2) (integer) -2\n     3) 1) readonly\n        2) pubsub\n        3) random\n        4) loading\n        5) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n126) 1) \"object\"\n     2) (integer) 3\n     3) 1) readonly\n     4) (integer) 2\n     5) (integer) 2\n     6) (integer) 2\n127) 1) \"publish\"\n     2) (integer) 3\n     3) 1) readonly\n        2) pubsub\n        3) loading\n        4) stale\n        5) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n128) 1) \"keys\"\n     2) (integer) 2\n     3) 1) readonly\n        2) sort_for_script\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n129) 1) \"hdel\"\n     2) (integer) -3\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n130) 1) \"echo\"\n     2) (integer) 2\n     3) 1) readonly\n        2) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n131) 1) \"hstrlen\"\n     2) (integer) 3\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n132) 1) \"pfselftest\"\n     2) (integer) 1\n     3) 1) readonly\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n133) 1) \"linsert\"\n     2) (integer) 5\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n134) 1) \"subscribe\"\n     2) (integer) -2\n     3) 1) readonly\n        2) pubsub\n        3) noscript\n        4) loading\n        5) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n135) 1) \"pttl\"\n     2) (integer) 2\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n136) 1) \"hincrbyfloat\"\n     2) (integer) 4\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n137) 1) \"hlen\"\n     2) (integer) 2\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n138) 1) \"ltrim\"\n     2) (integer) 4\n     3) 1) write\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n139) 1) \"migrate\"\n     2) (integer) -6\n     3) 1) write\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n140) 1) \"zlexcount\"\n     2) (integer) 4\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n141) 1) \"getset\"\n     2) (integer) 3\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n142) 1) \"info\"\n     2) (integer) -1\n     3) 1) readonly\n        2) loading\n        3) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n143) 1) \"psync\"\n     2) (integer) 3\n     3) 1) readonly\n        2) admin\n        3) noscript\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n144) 1) \"lrem\"\n     2) (integer) 4\n     3) 1) write\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n145) 1) \"latency\"\n     2) (integer) -2\n     3) 1) readonly\n        2) admin\n        3) noscript\n        4) loading\n        5) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n146) 1) \"setnx\"\n     2) (integer) 3\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n147) 1) \"hmget\"\n     2) (integer) -3\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n148) 1) \"watch\"\n     2) (integer) -2\n     3) 1) readonly\n        2) noscript\n        3) fast\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n149) 1) \"rename\"\n     2) (integer) 3\n     3) 1) write\n     4) (integer) 1\n     5) (integer) 2\n     6) (integer) 1\n150) 1) \"bgsave\"\n     2) (integer) 1\n     3) 1) readonly\n        2) admin\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n151) 1) \"decrby\"\n     2) (integer) 3\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n152) 1) \"sunion\"\n     2) (integer) -2\n     3) 1) readonly\n        2) sort_for_script\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n153) 1) \"shutdown\"\n     2) (integer) -1\n     3) 1) readonly\n        2) admin\n        3) loading\n        4) stale\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n154) 1) \"zrangebyscore\"\n     2) (integer) -4\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n155) 1) \"bitop\"\n     2) (integer) -4\n     3) 1) write\n        2) denyoom\n     4) (integer) 2\n     5) (integer) -1\n     6) (integer) 1\n156) 1) \"geohash\"\n     2) (integer) -2\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n157) 1) \"exists\"\n     2) (integer) -2\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n158) 1) \"hmset\"\n     2) (integer) -4\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n159) 1) \"rpop\"\n     2) (integer) 2\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n160) 1) \"expireat\"\n     2) (integer) 3\n     3) 1) write\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n161) 1) \"lindex\"\n     2) (integer) 3\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n162) 1) \"pfmerge\"\n     2) (integer) -2\n     3) 1) write\n        2) denyoom\n     4) (integer) 1\n     5) (integer) -1\n     6) (integer) 1\n163) 1) \"readwrite\"\n     2) (integer) 1\n     3) 1) readonly\n        2) fast\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n164) 1) \"monitor\"\n     2) (integer) 1\n     3) 1) readonly\n        2) admin\n        3) noscript\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n165) 1) \"randomkey\"\n     2) (integer) 1\n     3) 1) readonly\n        2) random\n     4) (integer) 0\n     5) (integer) 0\n     6) (integer) 0\n166) 1) \"getrange\"\n     2) (integer) 4\n     3) 1) readonly\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n167) 1) \"hincrby\"\n     2) (integer) 4\n     3) 1) write\n        2) denyoom\n        3) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n168) 1) \"brpoplpush\"\n     2) (integer) 4\n     3) 1) write\n        2) denyoom\n        3) noscript\n     4) (integer) 1\n     5) (integer) 2\n     6) (integer) 1\n169) 1) \"srandmember\"\n     2) (integer) -2\n     3) 1) readonly\n        2) random\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n170) 1) \"zremrangebyrank\"\n     2) (integer) 4\n     3) 1) write\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n171) 1) \"zscore\"\n     2) (integer) 3\n     3) 1) readonly\n        2) fast\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/command\" class=\"_attribution-link\">http://redis.io/commands/command</a>\n  </p>\n</div>\n","debug-object":"<h1 class=\"command\">DEBUG</h1>\n<pre>DEBUG OBJECT key</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p><a href=\"debug-object\">DEBUG OBJECT</a> is a debugging command that should not be used by clients. Check the <a href=\"object\">OBJECT</a> command instead.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/debug-object\" class=\"_attribution-link\">http://redis.io/commands/debug-object</a>\n  </p>\n</div>\n","dbsize":"<h1 class=\"command\">DBSIZE</h1>\n<pre>DBSIZE</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>Return the number of keys in the currently-selected database.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/dbsize\" class=\"_attribution-link\">http://redis.io/commands/dbsize</a>\n  </p>\n</div>\n","debug-segfault":"<h1 class=\"command\">DEBUG</h1>\n<pre>DEBUG SEGFAULT</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p><a href=\"debug-segfault\">DEBUG SEGFAULT</a> performs an invalid memory access that crashes Redis. It is used to simulate bugs during the development.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/debug-segfault\" class=\"_attribution-link\">http://redis.io/commands/debug-segfault</a>\n  </p>\n</div>\n","discard":"<h1 class=\"command\">DISCARD</h1>\n<pre>DISCARD</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> </div> <p>Flushes all previously queued commands in a <a href=\"http://redis.io/topics/transactions\">transaction</a> and restores the connection state to normal.</p> <p>If <a href=\"watch\">WATCH</a> was used, <a href=\"discard\">DISCARD</a> unwatches all keys watched by the connection.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: always <code>OK</code>.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/discard\" class=\"_attribution-link\">http://redis.io/commands/discard</a>\n  </p>\n</div>\n","decr":"<h1 class=\"command\">DECR</h1>\n<pre>DECR key</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Decrements the number stored at <code>key</code> by one. If the key does not exist, it is set to <code>0</code> before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to <strong>64 bit signed integers</strong>.</p> <p>See <a href=\"incr\">INCR</a> for extra information on increment/decrement operations.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the value of <code>key</code> after the decrement</p> <h2>Examples</h2> <div class=\"example\" data-session=\"51e5e8ea2ed51e83ab9badd327968fd5\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"10\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">DECR mykey</span> <code>(integer) 9</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"234293482390480948029348230948\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">DECR mykey</span> <code>ERR value is not an integer or out of range</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/decr\" class=\"_attribution-link\">http://redis.io/commands/decr</a>\n  </p>\n</div>\n","decrby":"<h1 class=\"command\">DECRBY</h1>\n<pre>DECRBY key decrement</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Decrements the number stored at <code>key</code> by <code>decrement</code>. If the key does not exist, it is set to <code>0</code> before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64 bit signed integers.</p> <p>See <a href=\"incr\">INCR</a> for extra information on increment/decrement operations.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the value of <code>key</code> after the decrement</p> <h2>Examples</h2> <div class=\"example\" data-session=\"4686aab19a207bfb332d80cd47160d50\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"10\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">DECRBY mykey 3</span> <code>(integer) 7</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/decrby\" class=\"_attribution-link\">http://redis.io/commands/decrby</a>\n  </p>\n</div>\n","del":"<h1 class=\"command\">DEL</h1>\n<pre>DEL key [key ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).</p> </div> <p>Removes the specified keys. A key is ignored if it does not exist.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: The number of keys that were removed.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"3af7b0810eb273aa637458b296d48228\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET key1 \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET key2 \"World\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">DEL key1 key2 key3</span> <code>(integer) 2</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/del\" class=\"_attribution-link\">http://redis.io/commands/del</a>\n  </p>\n</div>\n","dump":"<h1 class=\"command\">DUMP</h1>\n<pre>DUMP key</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(1) to access the key and additional O(N*M) to serialized it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).</p> </div> <p>Serialize the value stored at key in a Redis-specific format and return it to the user. The returned value can be synthesized back into a Redis key using the <a href=\"restore\">RESTORE</a> command.</p> <p>The serialization format is opaque and non-standard, however it has a few semantic characteristics:</p> <ul> <li>It contains a 64-bit checksum that is used to make sure errors will be detected. The <a href=\"restore\">RESTORE</a> command makes sure to check the checksum before synthesizing a key using the serialized value.</li> <li>Values are encoded in the same format used by RDB.</li> <li>An RDB version is encoded inside the serialized value, so that different Redis versions with incompatible RDB formats will refuse to process the serialized value.</li> </ul> <p>The serialized value does NOT contain expire information. In order to capture the time to live of the current value the <a href=\"pttl\">PTTL</a> command should be used.</p> <p>If <code>key</code> does not exist a nil bulk reply is returned.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the serialized value.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"63c2b2094c9925e38a6864b606c0389e\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey 10</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">DUMP mykey</span> <code>\"\\u0000\\xC0\\n\\a\\u0000\\x91\\xAD\\x82\\xB6\\u0006d\\xB6\\xA1\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/dump\" class=\"_attribution-link\">http://redis.io/commands/dump</a>\n  </p>\n</div>\n","echo":"<h1 class=\"command\">ECHO</h1>\n<pre>ECHO message</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>Returns <code>message</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a></p> <h2>Examples</h2> <div class=\"example\" data-session=\"71bf56ee96572ce32490c8c5844b4ebf\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ECHO \"Hello World!\"</span> <code>\"Hello World!\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/echo\" class=\"_attribution-link\">http://redis.io/commands/echo</a>\n  </p>\n</div>\n","evalsha":"<h1 class=\"command\">EVALSHA</h1>\n<pre>EVALSHA sha1 numkeys key [key ...] arg [arg ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> Depends on the script that is executed.</p> </div> <p>Evaluates a script cached on the server side by its SHA1 digest. Scripts are cached on the server side using the <a href=\"script-load\">SCRIPT LOAD</a> command. The command is otherwise identical to <a href=\"eval\">EVAL</a>.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/evalsha\" class=\"_attribution-link\">http://redis.io/commands/evalsha</a>\n  </p>\n</div>\n","exec":"<h1 class=\"command\">EXEC</h1>\n<pre>EXEC</pre>   <div class=\"metadata\"> <p><strong>Available since 1.2.0.</strong></p> </div> <p>Executes all previously queued commands in a <a href=\"http://redis.io/topics/transactions\">transaction</a> and restores the connection state to normal.</p> <p>When using <a href=\"watch\">WATCH</a>, <a href=\"exec\">EXEC</a> will execute commands only if the watched keys were not modified, allowing for a <a href=\"http://redis.io/topics/transactions#cas\">check-and-set mechanism</a>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: each element being the reply to each of the commands in the atomic transaction.</p> <p>When using <a href=\"watch\">WATCH</a>, <a href=\"exec\">EXEC</a> can return a <a href=\"http://redis.io/topics/protocol#nil-reply\">Null reply</a> if the execution was aborted.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/exec\" class=\"_attribution-link\">http://redis.io/commands/exec</a>\n  </p>\n</div>\n","exists":"<h1 class=\"command\">EXISTS</h1>\n<pre>EXISTS key [key ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns if <code>key</code> exists.</p> <p>Since Redis 3.0.3 it is possible to specify multiple keys instead of a single one. In such a case, it returns the total number of keys existing. Note that returning 1 or 0 for a single key is just a special case of the variadic usage, so the command is completely backward compatible.</p> <p>The user should be aware that if the same existing key is mentioned in the arguments multiple times, it will be counted multiple times. So if <code>somekey</code> exists, <code>EXISTS somekey somekey</code> will return 2.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if the key exists.</li> <li>\n<code>0</code> if the key does not exist.</li> </ul> <p>Since Redis 3.0.3 the command accepts a variable number of keys and the return value is generalized:</p> <ul> <li>The number of keys existing among the ones specified as arguments. Keys mentioned multiple times and existing are counted multiple times.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"fa3ac87b53c2d6a4b73dc362d967959f\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET key1 \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">EXISTS key1</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">EXISTS nosuchkey</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET key2 \"World\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">EXISTS key1 key2 nosuchkey</span> <code>(integer) 2</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/exists\" class=\"_attribution-link\">http://redis.io/commands/exists</a>\n  </p>\n</div>\n","expireat":"<h1 class=\"command\">EXPIREAT</h1>\n<pre>EXPIREAT key timestamp</pre>   <div class=\"metadata\"> <p><strong>Available since 1.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p><a href=\"expireat\">EXPIREAT</a> has the same effect and semantic as <a href=\"expire\">EXPIRE</a>, but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute <a href=\"http://en.wikipedia.org/wiki/Unix_time\">Unix timestamp</a> (seconds since January 1, 1970).</p> <p>Please for the specific semantics of the command refer to the documentation of <a href=\"expire\">EXPIRE</a>.</p> <h2>Background</h2> <p><a href=\"expireat\">EXPIREAT</a> was introduced in order to convert relative timeouts to absolute timeouts for the AOF persistence mode. Of course, it can be used directly to specify that a given key should expire at a given time in the future.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if the timeout was set.</li> <li>\n<code>0</code> if <code>key</code> does not exist or the timeout could not be set (see: <a href=\"expire\">EXPIRE</a>).</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"4db874b4637ac4f86f7aedd0f9038202\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">EXISTS mykey</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">EXPIREAT mykey 1293840000</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">EXISTS mykey</span> <code>(integer) 0</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/expireat\" class=\"_attribution-link\">http://redis.io/commands/expireat</a>\n  </p>\n</div>\n","flushall":"<h1 class=\"command\">FLUSHALL</h1>\n<pre>FLUSHALL</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>Delete all the keys of all the existing databases, not just the currently selected one. This command never fails.</p> <p>The time-complexity for this operation is <span class=\"math\">O(N),</span> N being the number of keys in all existing databases.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/flushall\" class=\"_attribution-link\">http://redis.io/commands/flushall</a>\n  </p>\n</div>\n","flushdb":"<h1 class=\"command\">FLUSHDB</h1>\n<pre>FLUSHDB</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>Delete all the keys of the currently selected DB. This command never fails.</p> <p>The time-complexity for this operation is <span class=\"math\">O(N),</span> N being the number of keys in the database.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/flushdb\" class=\"_attribution-link\">http://redis.io/commands/flushdb</a>\n  </p>\n</div>\n","geoadd":"<h1 class=\"command\">GEOADD</h1>\n<pre>GEOADD key longitude latitude member [longitude latitude member ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 3.2.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N)) for each item added, where N is the number of elements in the sorted set.</p> </div> <p>Adds the specified geospatial items (latitude, longitude, name) to the specified key. Data is stored into the key as a sorted set, in a way that makes it possible to later retrieve items using a query by radius with the <a href=\"georadius\">GEORADIUS</a> or <a href=\"georadiusbymember\">GEORADIUSBYMEMBER</a> commands.</p> <p>The command takes arguments in the standard format x,y so the longitude must be specified before the latitude. There are limits to the coordinates that can be indexed: areas very near to the poles are not indexable. The exact limits, as specified by EPSG:900913 / EPSG:3785 / OSGEO:41001 are the following:</p> <ul> <li>Valid longitudes are from -180 to 180 degrees.</li> <li>Valid latitudes are from -85.05112878 to 85.05112878 degrees.</li> </ul> <p>The command will report an error when the user attempts to index coordinates outside the specified ranges.</p> <p><strong>Note:</strong> there is no <strong>GEODEL</strong> command because you can use <a href=\"zrem\">ZREM</a> in order to remove elements. The Geo index structure is just a sorted set.</p> <h2>How does it work?</h2> <p>The way the sorted set is populated is using a technique called <a href=\"https://en.wikipedia.org/wiki/Geohash\">Geohash</a>. Latitude and Longitude bits are interleaved in order to form an unique 52 bit integer. We know that a sorted set double score can represent a 52 bit integer without losing precision.</p> <p>This format allows for radius querying by checking the 1+8 areas needed to cover the whole radius, and discarding elements outside the radius. The areas are checked by calculating the range of the box covered removing enough bits from the less significant part of the sorted set score, and computing the score range to query in the sorted set for each area.</p> <h2>What Earth model does it use?</h2> <p>It just assumes that the Earth is a sphere, since the used distance formula is the Haversine formula. This formula is only an approximation when applied to the Earth, which is not a perfect sphere. The introduced errors are not an issue when used in the context of social network sites that need to query by radius and most other applications. However in the worst case the error may be up to 0.5%, so you may want to consider other systems for error-critical applications.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>The number of elements added to the sorted set, not including elements already existing for which the score was updated.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"1f5fca9d4e0602617757f0d035c31b53\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEODIST Sicily Palermo Catania</span> <code>\"166274.15156960039\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEORADIUS Sicily 15 37 100 km</span> <code>1) \"Catania\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEORADIUS Sicily 15 37 200 km</span> <code>1) \"Palermo\"\n2) \"Catania\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/geoadd\" class=\"_attribution-link\">http://redis.io/commands/geoadd</a>\n  </p>\n</div>\n","geohash":"<h1 class=\"command\">GEOHASH</h1>\n<pre>GEOHASH key member [member ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 3.2.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N)) for each member requested, where N is the number of elements in the sorted set.</p> </div> <p>Return valid <a href=\"https://en.wikipedia.org/wiki/Geohash\">Geohash</a> strings representing the position of one or more elements in a sorted set value representing a geospatial index (where elements were added using <a href=\"geoadd\">GEOADD</a>).</p> <p>Normally Redis represents positions of elements using a variation of the Geohash technique where positions are encoded using 52 bit integers. The encoding is also different compared to the standard because the initial min and max coordinates used during the encoding and decoding process are different. This command however <strong>returns a standard Geohash</strong> in the form of a string as described in the <a href=\"https://en.wikipedia.org/wiki/Geohash\">Wikipedia article</a> and compatible with the <a href=\"http://geohash.org\">geohash.org</a> web site.</p> <h2>Geohash string properties</h2> <p>The command returns 11 characters Geohash strings, so no precision is loss compared to the Redis internal 52 bit representation. The returned Geohashes have the following properties:</p> <ol> <li>They can be shortened removing characters from the right. It will lose precision but will still point to the same area.</li> <li>It is possible to use them in <code>geohash.org</code> URLs such as <code>http://geohash.org/&lt;geohash-string&gt;</code>. This is an <a href=\"http://geohash.org/sqdtr74hyu0\">example of such URL</a>.</li> <li>Strings with a similar prefix are nearby, but the contrary is not true, it is possible that strings with different prefixes are nearby too.</li> </ol> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>, specifically:</p> <p>The command returns an array where each element is the Geohash corresponding to each member name passed as argument to the command.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"0e3470dcc6193842d5e1c455ea8c8046\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEOHASH Sicily Palermo Catania</span> <code>1) \"sqc8b49rny0\"\n2) \"sqdtr74hyu0\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/geohash\" class=\"_attribution-link\">http://redis.io/commands/geohash</a>\n  </p>\n</div>\n","geopos":"<h1 class=\"command\">GEOPOS</h1>\n<pre>GEOPOS key member [member ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 3.2.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N)) for each member requested, where N is the number of elements in the sorted set.</p> </div> <p>Return the positions (longitude,latitude) of all the specified members of the geospatial index represented by the sorted set at <em>key</em>.</p> <p>Given a sorted set representing a geospatial index, populated using the <a href=\"geoadd\">GEOADD</a> command, it is often useful to obtain back the coordinates of specified members. When the geospatial index is populated via <a href=\"geoadd\">GEOADD</a> the coordinates are converted into a 52 bit geohash, so the coordinates returned may not be exactly the ones used in order to add the elements, but small errors may be introduced.</p> <p>The command can accept a variable number of arguments so it always returns an array of positions even when a single element is specified.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>, specifically:</p> <p>The command returns an array where each element is a two elements array representing longitude and latitude (x,y) of each member name passed as argument to the command.</p> <p>Non existing elements are reported as NULL elements of the array.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"f88c1183b49d029400e63ba7c0e730ae\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEOPOS Sicily Palermo Catania NonExisting</span> <code>1) 1) \"13.361389338970184\"\n   2) \"38.115556395496299\"\n2) 1) \"15.087267458438873\"\n   2) \"37.50266842333162\"\n3) (nil)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/geopos\" class=\"_attribution-link\">http://redis.io/commands/geopos</a>\n  </p>\n</div>\n","expire":"<h1 class=\"command\">EXPIRE</h1>\n<pre>EXPIRE key seconds</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Set a timeout on <code>key</code>. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be <em>volatile</em> in Redis terminology.</p> <p>The timeout will only be cleared by commands that delete or overwrite the contents of the key, including <a href=\"del\">DEL</a>, <a href=\"set\">SET</a>, <a href=\"getset\">GETSET</a> and all the <code>*STORE</code> commands. This means that all the operations that conceptually <em>alter</em> the value stored at the key without replacing it with a new one will leave the timeout untouched. For instance, incrementing the value of a key with <a href=\"incr\">INCR</a>, pushing a new value into a list with <a href=\"lpush\">LPUSH</a>, or altering the field value of a hash with <a href=\"hset\">HSET</a> are all operations that will leave the timeout untouched.</p> <p>The timeout can also be cleared, turning the key back into a persistent key, using the <a href=\"persist\">PERSIST</a> command.</p> <p>If a key is renamed with <a href=\"rename\">RENAME</a>, the associated time to live is transferred to the new key name.</p> <p>If a key is overwritten by <a href=\"rename\">RENAME</a>, like in the case of an existing key <code>Key_A</code> that is overwritten by a call like <code>RENAME Key_B Key_A</code>, it does not matter if the original <code>Key_A</code> had a timeout associated or not, the new key <code>Key_A</code> will inherit all the characteristics of <code>Key_B</code>.</p> <h2>Refreshing expires</h2> <p>It is possible to call <a href=\"expire\">EXPIRE</a> using as argument a key that already has an existing expire set. In this case the time to live of a key is <em>updated</em> to the new value. There are many useful applications for this, an example is documented in the <em>Navigation session</em> pattern section below.</p> <h2>Differences in Redis prior 2.1.3</h2> <p>In Redis versions prior <strong>2.1.3</strong> altering a key with an expire set using a command altering its value had the effect of removing the key entirely. This semantics was needed because of limitations in the replication layer that are now fixed.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if the timeout was set.</li> <li>\n<code>0</code> if <code>key</code> does not exist or the timeout could not be set.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"27d5d9ba8994650524e82d4c2c8c1335\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">EXPIRE mykey 10</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TTL mykey</span> <code>(integer) 10</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello World\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TTL mykey</span> <code>(integer) -1</code>\n</div> <h2>Pattern: Navigation session</h2> <p>Imagine you have a web service and you are interested in the latest N pages <em>recently</em> visited by your users, such that each adjacent page view was not performed more than 60 seconds after the previous. Conceptually you may think at this set of page views as a <em>Navigation session</em> if your user, that may contain interesting information about what kind of products he or she is looking for currently, so that you can recommend related products.</p> <p>You can easily model this pattern in Redis using the following strategy: every time the user does a page view you call the following commands:</p> <pre>MULTI\nRPUSH pagewviews.user:&lt;userid&gt; http://.....\nEXPIRE pagewviews.user:&lt;userid&gt; 60\nEXEC\n</pre> <p>If the user will be idle more than 60 seconds, the key will be deleted and only subsequent page views that have less than 60 seconds of difference will be recorded.</p> <p>This pattern is easily modified to use counters using <a href=\"incr\">INCR</a> instead of lists using <a href=\"rpush\">RPUSH</a>.</p> <h1>Appendix: Redis expires</h1> <h2>Keys with an expire</h2> <p>Normally Redis keys are created without an associated time to live. The key will simply live forever, unless it is removed by the user in an explicit way, for instance using the <a href=\"del\">DEL</a> command.</p> <p>The <a href=\"expire\">EXPIRE</a> family of commands is able to associate an expire to a given key, at the cost of some additional memory used by the key. When a key has an expire set, Redis will make sure to remove the key when the specified amount of time elapsed.</p> <p>The key time to live can be updated or entirely removed using the <a href=\"expire\">EXPIRE</a> and <a href=\"persist\">PERSIST</a> command (or other strictly related commands).</p> <h2>Expire accuracy</h2> <p>In Redis 2.4 the expire might not be pin-point accurate, and it could be between zero to one seconds out.</p> <p>Since Redis 2.6 the expire error is from 0 to 1 milliseconds.</p> <h2>Expires and persistence</h2> <p>Keys expiring information is stored as absolute Unix timestamps (in milliseconds in case of Redis version 2.6 or greater). This means that the time is flowing even when the Redis instance is not active.</p> <p>For expires to work well, the computer time must be taken stable. If you move an RDB file from two computers with a big desync in their clocks, funny things may happen (like all the keys loaded to be expired at loading time).</p> <p>Even running instances will always check the computer clock, so for instance if you set a key with a time to live of 1000 seconds, and then set your computer time 2000 seconds in the future, the key will be expired immediately, instead of lasting for 1000 seconds.</p> <h2>How Redis expires keys</h2> <p>Redis keys are expired in two ways: a passive way, and an active way.</p> <p>A key is actively expired simply when some client tries to access it, and the key is found to be timed out.</p> <p>Of course this is not enough as there are expired keys that will never be accessed again. These keys should be expired anyway, so periodically Redis tests a few keys at random among keys with an expire set. All the keys that are already expired are deleted from the keyspace.</p> <p>Specifically this is what Redis does 10 times per second:</p> <ol> <li>Test 20 random keys from the set of keys with an associated expire.</li> <li>Delete all the keys found expired.</li> <li>If more than 25% of keys were expired, start again from step 1.</li> </ol> <p>This is a trivial probabilistic algorithm, basically the assumption is that our sample is representative of the whole key space, and we continue to expire until the percentage of keys that are likely to be expired is under 25%</p> <p>This means that at any given moment the maximum amount of keys already expired that are using memory is at max equal to max amount of write operations per second divided by 4.</p> <h2>How expires are handled in the replication link and AOF file</h2> <p>In order to obtain a correct behavior without sacrificing consistency, when a key expires, a <a href=\"del\">DEL</a> operation is synthesized in both the AOF file and gains all the attached slaves. This way the expiration process is centralized in the master instance, and there is no chance of consistency errors.</p> <p>However while the slaves connected to a master will not expire keys independently (but will wait for the <a href=\"del\">DEL</a> coming from the master), they'll still take the full state of the expires existing in the dataset, so when a slave is elected to a master it will be able to expire the keys independently, fully acting as a master.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/expire\" class=\"_attribution-link\">http://redis.io/commands/expire</a>\n  </p>\n</div>\n","geodist":"<h1 class=\"command\">GEODIST</h1>\n<pre>GEODIST key member1 member2 [unit]</pre>   <div class=\"metadata\"> <p><strong>Available since 3.2.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N))</p> </div> <p>Return the distance between two members in the geospatial index represented by the sorted set.</p> <p>Given a sorted set representing a geospatial index, populated using the <a href=\"geoadd\">GEOADD</a> command, the command returns the distance between the two specified members in the specified unit.</p> <p>If one or both the members are missing, the command returns NULL.</p> <p>The unit must be one of the following, and defaults to meters:</p> <ul> <li>\n<strong>m</strong> for meters.</li> <li>\n<strong>km</strong> for kilometers.</li> <li>\n<strong>mi</strong> for miles.</li> <li>\n<strong>ft</strong> for feet.</li> </ul> <p>The distance is computed assuming that the Earth is a perfect sphere, so errors up to 0.5% are possible in edge cases.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>, specifically:</p> <p>The command returns the distance as a double (represented as a string) in the specified unit, or NULL if one or both the elements are missing.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"67836ece1347ea32da0f5692eb6d99b2\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEODIST Sicily Palermo Catania</span> <code>\"166274.15156960039\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEODIST Sicily Palermo Catania km</span> <code>\"166.27415156960038\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEODIST Sicily Palermo Catania mi</span> <code>\"103.31822459492736\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEODIST Sicily Foo Bar</span> <code>(nil)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/geodist\" class=\"_attribution-link\">http://redis.io/commands/geodist</a>\n  </p>\n</div>\n","georadius":"<h1 class=\"command\">GEORADIUS</h1>\n<pre>GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</pre>   <div class=\"metadata\"> <p><strong>Available since 3.2.0.</strong></p> <p><strong>Time complexity:</strong> O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.</p> </div> <p>Return the members of a sorted set populated with geospatial information using <a href=\"geoadd\">GEOADD</a>, which are within the borders of the area specified with the center location and the maximum distance from the center (the radius).</p> <p>The common use case for this command is to retrieve geospatial items near a specified point and no far than a given amount of meters (or other units). This allows, for example, to suggest mobile users of an application nearby places.</p> <p>The radius is specified in one of the following units:</p> <ul> <li>\n<strong>m</strong> for meters.</li> <li>\n<strong>km</strong> for kilometers.</li> <li>\n<strong>mi</strong> for miles.</li> <li>\n<strong>ft</strong> for feet.</li> </ul> <p>The command optionally returns additional information using the following options:</p> <ul> <li>\n<code>WITHDIST</code>: Also return the distance of the returned items from the specified center. The distance is returned in the same unit as the unit specified as the radius argument of the command.</li> <li>\n<code>WITHCOORD</code>: Also return the longitude,latitude coordinates of the matching items.</li> <li>\n<code>WITHHASH</code>: Also return the raw geohash-encoded sorted set score of the item, in the form of a 52 bit unsigned integer. This is only useful for low level hacks or debugging and is otherwise of little interest for the general user.</li> </ul> <p>The command default is to return unsorted items. Two different sorting methods can be invoked using the following two options:</p> <ul> <li>\n<code>ASC</code>: Sort returned items from the nearest to the fairest, relative to the center.</li> <li>\n<code>DESC</code>: Sort returned items from the fairest to the nearest, relative to the center.</li> </ul> <p>By default all the matching items are returned. It is possible to limit the results to the first N matching items by using the <strong>COUNT <code>&lt;count&gt;</code></strong> option. However note that internally the command needs to perform an effort proportional to the number of items matching the specified area, so to query very large areas with a very small <code>COUNT</code> option may be slow even if just a few results are returned. On the other hand <code>COUNT</code> can be a very effective way to reduce bandwidth usage if normally just the first results are used.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>, specifically:</p> <ul> <li>Without any <code>WITH</code> option specified, the command just returns a linear array like [\"New York\",\"Milan\",\"Paris\"].</li> <li>If <code>WITHCOORD</code>, <code>WITHDIST</code> or <code>WITHHASH</code> options are specified, the command returns an array of arrays, where each sub-array represents a single item.</li> </ul> <p>When additional information is returned as an array of arrays for each item, the first item in the sub-array is always the name of the returned item. The other information is returned in the following order as successive elements of the sub-array.</p> <ol> <li>The distance from the center as a floating point number, in the same unit specified in the radius.</li> <li>The geohash integer.</li> <li>The coordinates as a two items x,y array (longitude,latitude).</li> </ol> <p>So for example the command <code>GEORADIUS Sicily 15 37 200 km WITHCOORD WITHDIST</code> will return each item in the following way:</p> <pre>[\"Palermo\",\"190.4424\",[\"13.361389338970184\",\"38.115556395496299\"]]\n</pre> <h2>Examples</h2> <div class=\"example\" data-session=\"c137c993e4d81027c24e63c5e87a49d1\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEORADIUS Sicily 15 37 200 km WITHDIST</span> <code>1) 1) \"Palermo\"\n   2) \"190.4424\"\n2) 1) \"Catania\"\n   2) \"56.4413\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEORADIUS Sicily 15 37 200 km WITHCOORD</span> <code>1) 1) \"Palermo\"\n   2) 1) \"13.361389338970184\"\n      2) \"38.115556395496299\"\n2) 1) \"Catania\"\n   2) 1) \"15.087267458438873\"\n      2) \"37.50266842333162\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEORADIUS Sicily 15 37 200 km WITHDIST WITHCOORD</span> <code>1) 1) \"Palermo\"\n   2) \"190.4424\"\n   3) 1) \"13.361389338970184\"\n      2) \"38.115556395496299\"\n2) 1) \"Catania\"\n   2) \"56.4413\"\n   3) 1) \"15.087267458438873\"\n      2) \"37.50266842333162\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/georadius\" class=\"_attribution-link\">http://redis.io/commands/georadius</a>\n  </p>\n</div>\n","georadiusbymember":"<h1 class=\"command\">GEORADIUSBYMEMBER</h1>\n<pre>GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</pre>   <div class=\"metadata\"> <p><strong>Available since 3.2.0.</strong></p> <p><strong>Time complexity:</strong> O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.</p> </div> <p>This command is exactly like <a href=\"georadius\">GEORADIUS</a> with the sole difference that instead of taking, as the center of the area to query, a longitude and latitude value, it takes the name of a member already existing inside the geospatial index represented by the sorted set.</p> <p>The position of the specified member is used as the center of the query.</p> <p>Please check the example below and the <a href=\"georadius\">GEORADIUS</a> documentation for more information about the command and its options.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"0176980c0a3b7cbf16bda8b3d8ef0771\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEOADD Sicily 13.583333 37.316667 \"Agrigento\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GEORADIUSBYMEMBER Sicily Agrigento 100 km</span> <code>1) \"Agrigento\"\n2) \"Palermo\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/georadiusbymember\" class=\"_attribution-link\">http://redis.io/commands/georadiusbymember</a>\n  </p>\n</div>\n","get":"<h1 class=\"command\">GET</h1>\n<pre>GET key</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Get the value of <code>key</code>. If the key does not exist the special value <code>nil</code> is returned. An error is returned if the value stored at <code>key</code> is not a string, because <a href=\"get\">GET</a> only handles string values.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the value of <code>key</code>, or <code>nil</code> when <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"1ebc51151356889b26560cf7ce0e4471\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET nonexisting</span> <code>(nil)</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET mykey</span> <code>\"Hello\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/get\" class=\"_attribution-link\">http://redis.io/commands/get</a>\n  </p>\n</div>\n","eval":"<h1 class=\"command\">EVAL</h1>\n<pre>EVAL script numkeys key [key ...] arg [arg ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> Depends on the script that is executed.</p> </div> <h2>Introduction to EVAL</h2> <p><a href=\"eval\">EVAL</a> and <a href=\"evalsha\">EVALSHA</a> are used to evaluate scripts using the Lua interpreter built into Redis starting from version 2.6.0.</p> <p>The first argument of <a href=\"eval\">EVAL</a> is a Lua 5.1 script. The script does not need to define a Lua function (and should not). It is just a Lua program that will run in the context of the Redis server.</p> <p>The second argument of <a href=\"eval\">EVAL</a> is the number of arguments that follows the script (starting from the third argument) that represent Redis key names. The arguments can be accessed by Lua using the <code>KEYS</code> global variable in the form of a one-based array (so <code>KEYS[1]</code>, <code>KEYS[2]</code>, ...).</p> <p>All the additional arguments should not represent key names and can be accessed by Lua using the <code>ARGV</code> global variable, very similarly to what happens with keys (so <code>ARGV[1]</code>, <code>ARGV[2]</code>, ...).</p> <p>The following example should clarify what stated above:</p> <pre>&gt; eval \"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\" 2 key1 key2 first second\n1) \"key1\"\n2) \"key2\"\n3) \"first\"\n4) \"second\"\n</pre> <p>Note: as you can see Lua arrays are returned as Redis multi bulk replies, that is a Redis return type that your client library will likely convert into an Array type in your programming language.</p> <p>It is possible to call Redis commands from a Lua script using two different Lua functions:</p> <ul> <li><code>redis.call()</code></li> <li><code>redis.pcall()</code></li> </ul> <p><code>redis.call()</code> is similar to <code>redis.pcall()</code>, the only difference is that if a Redis command call will result in an error, <code>redis.call()</code> will raise a Lua error that in turn will force <a href=\"eval\">EVAL</a> to return an error to the command caller, while <code>redis.pcall</code> will trap the error and return a Lua table representing the error.</p> <p>The arguments of the <code>redis.call()</code> and <code>redis.pcall()</code> functions are all the arguments of a well formed Redis command:</p> <pre>&gt; eval \"return redis.call('set','foo','bar')\" 0\nOK\n</pre> <p>The above script sets the key <code>foo</code> to the string <code>bar</code>. However it violates the <a href=\"eval\">EVAL</a> command semantics as all the keys that the script uses should be passed using the <code>KEYS</code> array:</p> <pre>&gt; eval \"return redis.call('set',KEYS[1],'bar')\" 1 foo\nOK\n</pre> <p>All Redis commands must be analyzed before execution to determine which keys the command will operate on. In order for this to be true for <a href=\"eval\">EVAL</a>, keys must be passed explicitly. This is useful in many ways, but especially to make sure Redis Cluster can forward your request to the appropriate cluster node.</p> <p>Note this rule is not enforced in order to provide the user with opportunities to abuse the Redis single instance configuration, at the cost of writing scripts not compatible with Redis Cluster.</p> <p>Lua scripts can return a value that is converted from the Lua type to the Redis protocol using a set of conversion rules.</p> <h2>Conversion between Lua and Redis data types</h2> <p>Redis return values are converted into Lua data types when Lua calls a Redis command using call() or pcall(). Similarly Lua data types are converted into the Redis protocol when a Lua script returns a value, so that scripts can control what <a href=\"eval\">EVAL</a> will return to the client.</p> <p>This conversion between data types is designed in a way that if a Redis type is converted into a Lua type, and then the result is converted back into a Redis type, the result is the same as the initial value.</p> <p>In other words there is a one-to-one conversion between Lua and Redis types. The following table shows you all the conversions rules:</p> <p><strong>Redis to Lua</strong> conversion table.</p> <ul> <li>Redis integer reply -&gt; Lua number</li> <li>Redis bulk reply -&gt; Lua string</li> <li>Redis multi bulk reply -&gt; Lua table (may have other Redis data types nested)</li> <li>Redis status reply -&gt; Lua table with a single <code>ok</code> field containing the status</li> <li>Redis error reply -&gt; Lua table with a single <code>err</code> field containing the error</li> <li>Redis Nil bulk reply and Nil multi bulk reply -&gt; Lua false boolean type</li> </ul> <p><strong>Lua to Redis</strong> conversion table.</p> <ul> <li>Lua number -&gt; Redis integer reply (the number is converted into an integer)</li> <li>Lua string -&gt; Redis bulk reply</li> <li>Lua table (array) -&gt; Redis multi bulk reply (truncated to the first nil inside the Lua array if any)</li> <li>Lua table with a single <code>ok</code> field -&gt; Redis status reply</li> <li>Lua table with a single <code>err</code> field -&gt; Redis error reply</li> <li>Lua boolean false -&gt; Redis Nil bulk reply.</li> </ul> <p>There is an additional Lua-to-Redis conversion rule that has no corresponding Redis to Lua conversion rule:</p> <ul> <li>Lua boolean true -&gt; Redis integer reply with value of 1.</li> </ul> <p>Also there are two important rules to note:</p> <ul> <li>Lua has a single numerical type, Lua numbers. There is no distinction between integers and floats. So we always convert Lua numbers into integer replies, removing the decimal part of the number if any. <strong>If you want to return a float from Lua you should return it as a string</strong>, exactly like Redis itself does (see for instance the <a href=\"zscore\">ZSCORE</a> command).</li> <li>There is <a href=\"http://www.lua.org/pil/19.1.html\">no simple way to have nils inside Lua arrays</a>, this is a result of Lua table semantics, so when Redis converts a Lua array into Redis protocol the conversion is stopped if a nil is encountered.</li> </ul> <p>Here are a few conversion examples:</p> <pre>&gt; eval \"return 10\" 0\n(integer) 10\n\n&gt; eval \"return {1,2,{3,'Hello World!'}}\" 0\n1) (integer) 1\n2) (integer) 2\n3) 1) (integer) 3\n   2) \"Hello World!\"\n\n&gt; eval \"return redis.call('get','foo')\" 0\n\"bar\"\n</pre> <p>The last example shows how it is possible to receive the exact return value of <code>redis.call()</code> or <code>redis.pcall()</code> from Lua that would be returned if the command was called directly.</p> <p>In the following example we can see how floats and arrays with nils are handled:</p> <pre>&gt; eval \"return {1,2,3.3333,'foo',nil,'bar'}\" 0\n1) (integer) 1\n2) (integer) 2\n3) (integer) 3\n4) \"foo\"\n</pre> <p>As you can see 3.333 is converted into 3, and the <em>bar</em> string is never returned as there is a nil before.</p> <h2>Helper functions to return Redis types</h2> <p>There are two helper functions to return Redis types from Lua.</p> <ul> <li>\n<code>redis.error_reply(error_string)</code> returns an error reply. This function simply returns a single field table with the <code>err</code> field set to the specified string for you.</li> <li>\n<code>redis.status_reply(status_string)</code> returns a status reply. This function simply returns a single field table with the <code>ok</code> field set to the specified string for you.</li> </ul> <p>There is no difference between using the helper functions or directly returning the table with the specified format, so the following two forms are equivalent:</p> <pre>return {err=\"My Error\"}\nreturn redis.error_reply(\"My Error\")\n</pre> <h2>Atomicity of scripts</h2> <p>Redis uses the same Lua interpreter to run all the commands. Also Redis guarantees that a script is executed in an atomic way: no other script or Redis command will be executed while a script is being executed. This semantic is similar to the one of <a href=\"multi\">MULTI</a> / <a href=\"exec\">EXEC</a>. From the point of view of all the other clients the effects of a script are either still not visible or already completed.</p> <p>However this also means that executing slow scripts is not a good idea. It is not hard to create fast scripts, as the script overhead is very low, but if you are going to use slow scripts you should be aware that while the script is running no other client can execute commands.</p> <h2>Error handling</h2> <p>As already stated, calls to <code>redis.call()</code> resulting in a Redis command error will stop the execution of the script and return an error, in a way that makes it obvious that the error was generated by a script:</p> <pre>&gt; del foo\n(integer) 1\n&gt; lpush foo a\n(integer) 1\n&gt; eval \"return redis.call('get','foo')\" 0\n(error) ERR Error running script (call to f_6b1bf486c81ceb7edf3c093f4c48582e38c0e791): ERR Operation against a key holding the wrong kind of value\n</pre> <p>Using <code>redis.pcall()</code> no error is raised, but an error object is returned in the format specified above (as a Lua table with an <code>err</code> field). The script can pass the exact error to the user by returning the error object returned by <code>redis.pcall()</code>.</p> <h2>Bandwidth and EVALSHA</h2> <p>The <a href=\"eval\">EVAL</a> command forces you to send the script body again and again. Redis does not need to recompile the script every time as it uses an internal caching mechanism, however paying the cost of the additional bandwidth may not be optimal in many contexts.</p> <p>On the other hand, defining commands using a special command or via <code>redis.conf</code> would be a problem for a few reasons:</p> <ul> <li><p>Different instances may have different implementations of a command.</p></li> <li><p>Deployment is hard if we have to make sure all instances contain a given command, especially in a distributed environment.</p></li> <li><p>Reading application code, the complete semantics might not be clear since the application calls commands defined server side.</p></li> </ul> <p>In order to avoid these problems while avoiding the bandwidth penalty, Redis implements the <a href=\"evalsha\">EVALSHA</a> command.</p> <p><a href=\"evalsha\">EVALSHA</a> works exactly like <a href=\"eval\">EVAL</a>, but instead of having a script as the first argument it has the SHA1 digest of a script. The behavior is the following:</p> <ul> <li><p>If the server still remembers a script with a matching SHA1 digest, the script is executed.</p></li> <li><p>If the server does not remember a script with this SHA1 digest, a special error is returned telling the client to use <a href=\"eval\">EVAL</a> instead.</p></li> </ul> <p>Example:</p> <pre>&gt; set foo bar\nOK\n&gt; eval \"return redis.call('get','foo')\" 0\n\"bar\"\n&gt; evalsha 6b1bf486c81ceb7edf3c093f4c48582e38c0e791 0\n\"bar\"\n&gt; evalsha ffffffffffffffffffffffffffffffffffffffff 0\n(error) `NOSCRIPT` No matching script. Please use [EVAL](/commands/eval).\n</pre> <p>The client library implementation can always optimistically send <a href=\"evalsha\">EVALSHA</a> under the hood even when the client actually calls <a href=\"eval\">EVAL</a>, in the hope the script was already seen by the server. If the <code>NOSCRIPT</code> error is returned <a href=\"eval\">EVAL</a> will be used instead.</p> <p>Passing keys and arguments as additional <a href=\"eval\">EVAL</a> arguments is also very useful in this context as the script string remains constant and can be efficiently cached by Redis.</p> <h2>Script cache semantics</h2> <p>Executed scripts are guaranteed to be in the script cache of a given execution of a Redis instance forever. This means that if an <a href=\"eval\">EVAL</a> is performed against a Redis instance all the subsequent <a href=\"evalsha\">EVALSHA</a> calls will succeed.</p> <p>The reason why scripts can be cached for long time is that it is unlikely for a well written application to have enough different scripts to cause memory problems. Every script is conceptually like the implementation of a new command, and even a large application will likely have just a few hundred of them. Even if the application is modified many times and scripts will change, the memory used is negligible.</p> <p>The only way to flush the script cache is by explicitly calling the <a href=\"script-flush\">SCRIPT FLUSH</a> command, which will <em>completely flush</em> the scripts cache removing all the scripts executed so far.</p> <p>This is usually needed only when the instance is going to be instantiated for another customer or application in a cloud environment.</p> <p>Also, as already mentioned, restarting a Redis instance flushes the script cache, which is not persistent. However from the point of view of the client there are only two ways to make sure a Redis instance was not restarted between two different commands.</p> <ul> <li>The connection we have with the server is persistent and was never closed so far.</li> <li>The client explicitly checks the <code>runid</code> field in the <a href=\"info\">INFO</a> command in order to make sure the server was not restarted and is still the same process.</li> </ul> <p>Practically speaking, for the client it is much better to simply assume that in the context of a given connection, cached scripts are guaranteed to be there unless an administrator explicitly called the <a href=\"script-flush\">SCRIPT FLUSH</a> command.</p> <p>The fact that the user can count on Redis not removing scripts is semantically useful in the context of pipelining.</p> <p>For instance an application with a persistent connection to Redis can be sure that if a script was sent once it is still in memory, so EVALSHA can be used against those scripts in a pipeline without the chance of an error being generated due to an unknown script (we'll see this problem in detail later).</p> <p>A common pattern is to call <a href=\"script-load\">SCRIPT LOAD</a> to load all the scripts that will appear in a pipeline, then use <a href=\"evalsha\">EVALSHA</a> directly inside the pipeline without any need to check for errors resulting from the script hash not being recognized.</p> <h2>The SCRIPT command</h2> <p>Redis offers a SCRIPT command that can be used in order to control the scripting subsystem. SCRIPT currently accepts three different commands:</p> <ul> <li>\n<p><a href=\"script-flush\">SCRIPT FLUSH</a></p> <p>This command is the only way to force Redis to flush the scripts cache. It is most useful in a cloud environment where the same instance can be reassigned to a different user. It is also useful for testing client libraries' implementations of the scripting feature.</p>\n</li> <li>\n<p><code>SCRIPT EXISTS sha1 sha2 ... shaN</code></p> <p>Given a list of SHA1 digests as arguments this command returns an array of 1 or 0, where 1 means the specific SHA1 is recognized as a script already present in the scripting cache, while 0 means that a script with this SHA1 was never seen before (or at least never seen after the latest SCRIPT FLUSH command).</p>\n</li> <li>\n<p><code>SCRIPT LOAD script</code></p> <p>This command registers the specified script in the Redis script cache. The command is useful in all the contexts where we want to make sure that <a href=\"evalsha\">EVALSHA</a> will not fail (for instance during a pipeline or MULTI/EXEC operation), without the need to actually execute the script.</p>\n</li> <li>\n<p><a href=\"script-kill\">SCRIPT KILL</a></p> <p>This command is the only way to interrupt a long-running script that reaches the configured maximum execution time for scripts. The SCRIPT KILL command can only be used with scripts that did not modify the dataset during their execution (since stopping a read-only script does not violate the scripting engine's guaranteed atomicity). See the next sections for more information about long running scripts.</p>\n</li> </ul> <h2>Scripts as pure functions</h2> <p>A very important part of scripting is writing scripts that are pure functions. Scripts executed in a Redis instance are, by default, replicated on slaves and into the AOF file by sending the script itself -- not the resulting commands.</p> <p>The reason is that sending a script to another Redis instance is often much faster than sending the multiple commands the script generates, so if the client is sending many scripts to the master, converting the scripts into individual commands for the slave / AOF would result in too much bandwidth for the replication link or the Append Only File (and also too much CPU since dispatching a command received via network is a lot more work for Redis compared to dispatching a command invoked by Lua scripts).</p> <p>Normally replicating scripts instead of the effects of the scripts makes sense, however not in all the cases. So starting with Redis 3.2 (currently not stable), the scripting engine is able to, alternatively, replicate the sequence of write commands resulting from the script execution, instead of replication the script itself. See the next section for more information. In this section we'll assume that scripts are replicated by sending the whole script. Let's call this replication mode <strong>whole scripts replication</strong>.</p> <p>The main drawback with the <em>whole scripts replication</em> approach is that scripts are required to have the following property:</p> <ul> <li>The script must always evaluates the same Redis <em>write</em> commands with the same arguments given the same input data set. Operations performed by the script cannot depend on any hidden (non-explicit) information or state that may change as script execution proceeds or between different executions of the script, nor can it depend on any external input from I/O devices.</li> </ul> <p>Things like using the system time, calling Redis random commands like <a href=\"randomkey\">RANDOMKEY</a>, or using Lua random number generator, could result into scripts that will not always evaluate in the same way.</p> <p>In order to enforce this behavior in scripts Redis does the following:</p> <ul> <li>Lua does not export commands to access the system time or other external state.</li> <li>Redis will block the script with an error if a script calls a Redis command able to alter the data set <strong>after</strong> a Redis <em>random</em> command like <a href=\"randomkey\">RANDOMKEY</a>, <a href=\"srandmember\">SRANDMEMBER</a>, <a href=\"time\">TIME</a>. This means that if a script is read-only and does not modify the data set it is free to call those commands. Note that a <em>random command</em> does not necessarily mean a command that uses random numbers: any non-deterministic command is considered a random command (the best example in this regard is the <a href=\"time\">TIME</a> command).</li> <li>Redis commands that may return elements in random order, like <a href=\"smembers\">SMEMBERS</a> (because Redis Sets are <em>unordered</em>) have a different behavior when called from Lua, and undergo a silent lexicographical sorting filter before returning data to Lua scripts. So <code>redis.call(\"smembers\",KEYS[1])</code> will always return the Set elements in the same order, while the same command invoked from normal clients may return different results even if the key contains exactly the same elements.</li> <li>Lua pseudo random number generation functions <code>math.random</code> and <code>math.randomseed</code> are modified in order to always have the same seed every time a new script is executed. This means that calling <code>math.random</code> will always generate the same sequence of numbers every time a script is executed if <code>math.randomseed</code> is not used.</li> </ul> <p>However the user is still able to write commands with random behavior using the following simple trick. Imagine I want to write a Redis script that will populate a list with N random integers.</p> <p>I can start with this small Ruby program:</p> <pre>require 'rubygems'\nrequire 'redis'\n\nr = Redis.new\n\nRandomPushScript = &lt;&lt;EOF\n    local i = tonumber(ARGV[1])\n    local res\n    while (i &gt; 0) do\n        res = redis.call('lpush',KEYS[1],math.random())\n        i = i-1\n    end\n    return res\nEOF\n\nr.del(:mylist)\nputs r.eval(RandomPushScript,[:mylist],[10,rand(2**32)])\n</pre> <p>Every time this script executed the resulting list will have exactly the following elements:</p> <pre>&gt; lrange mylist 0 -1\n 1) \"0.74509509873814\"\n 2) \"0.87390407681181\"\n 3) \"0.36876626981831\"\n 4) \"0.6921941534114\"\n 5) \"0.7857992587545\"\n 6) \"0.57730350670279\"\n 7) \"0.87046522734243\"\n 8) \"0.09637165539729\"\n 9) \"0.74990198051087\"\n10) \"0.17082803611217\"\n</pre> <p>In order to make it a pure function, but still be sure that every invocation of the script will result in different random elements, we can simply add an additional argument to the script that will be used in order to seed the Lua pseudo-random number generator. The new script is as follows:</p> <pre>RandomPushScript = &lt;&lt;EOF\n    local i = tonumber(ARGV[1])\n    local res\n    math.randomseed(tonumber(ARGV[2]))\n    while (i &gt; 0) do\n        res = redis.call('lpush',KEYS[1],math.random())\n        i = i-1\n    end\n    return res\nEOF\n\nr.del(:mylist)\nputs r.eval(RandomPushScript,1,:mylist,10,rand(2**32))\n</pre> <p>What we are doing here is sending the seed of the PRNG as one of the arguments. This way the script output will be the same given the same arguments, but we are changing one of the arguments in every invocation, generating the random seed client-side. The seed will be propagated as one of the arguments both in the replication link and in the Append Only File, guaranteeing that the same changes will be generated when the AOF is reloaded or when the slave processes the script.</p> <p>Note: an important part of this behavior is that the PRNG that Redis implements as <code>math.random</code> and <code>math.randomseed</code> is guaranteed to have the same output regardless of the architecture of the system running Redis. 32-bit, 64-bit, big-endian and little-endian systems will all produce the same output.</p> <h2>Replicating commands instead of scripts</h2> <p>Starting with Redis 3.2 (not yet stable) it is possible to select an alternative replication method. Instead of replication whole scripts, we can just replicate single write commands generated by the script. We call this <strong>script effects replication</strong>.</p> <p>In this replication mode, while Lua scripts are executed, Redis collects all the commands executed by the Lua scripting engine that actually modify the dataset. When the script execution finishes, the sequence of commands that the script generated are wrapped into a MULTI / EXEC transaction and are sent to slaves and AOF.</p> <p>This is useful in several ways depending on the use case:</p> <ul> <li>When the script is slow to compute, but the effects can be summarized by a few write commands, it is a shame to re-compute the script on the slaves or when reloading the AOF. In this case to replicate just the effect of the script is much better.</li> <li>When script effects replication is enabled, the controls about non deterministic functions are disabled. You can, for example, use the <a href=\"time\">TIME</a> or <a href=\"srandmember\">SRANDMEMBER</a> commands inside your scripts freely at any place.</li> <li>The Lua PRNG in this mode is seeded randomly at every call.</li> </ul> <p>In order to enable script effects replication, you need to issue the following Lua command before any write operated by the script:</p> <pre>redis.replicate_commands()\n</pre> <p>The function returns true if the script effects replication was enabled, otherwise if the function was called after the script already called some write command, it returns false, and normal whole script replication is used.</p> <h2>Selective replication of commands</h2> <p>When script effects replication is selected (see the previous section), it is possible to have more control in the way commands are replicated to slaves and AOF. This is a very advanced feature since <strong>a misuse can do damage</strong> by breaking the contract that the master, slaves, and AOF, all must contain the same logical content.</p> <p>However this is a useful feature since, sometimes, we need to execute certain commands only in the master in order to create, for example, intermediate values.</p> <p>Think at a Lua script where we perform an intersection between two sets. Pick five random elements, and create a new set with this five random elements. Finally we delete the temporary key representing the intersection between the two original sets. What we want to replicate is only the creation of the new set with the five elements. It's not useful to also replicate the commands creating the temporary key.</p> <p>For this reason, Redis 3.2 introduces a new command that only works when script effects replication is enabled, and is able to control the scripting replication engine. The command is called <code>redis.set_repl()</code> and fails raising an error if called when script effects replication is disabled.</p> <p>The command can be called with four different arguments:</p> <pre>redis.set_repl(redis.REPL_ALL) -- Replicte to AOF and slaves.\nredis.set_repl(redis.REPL_AOF) -- Replicte only to AOF.\nredis.set_repl(redis.REPL_SLAVE) -- Replicte only to slaves.\nredis.set_repl(redis.REPL_NONE) -- Don't replicate at all.\n</pre> <p>By default the scripting engine is always set to <code>REPL_ALL</code>. By calling this function the user can switch on/off AOF and or slaves replication, and turn them back later at her/his wish.</p> <p>A simple example follows:</p> <pre>redis.replicate_commands() -- Enable effects replication.\nredis.call('set','A','1')\nredis.set_repl(redis.REPL_NONE)\nredis.call('set','B','2')\nredis.set_repl(redis.REPL_ALL)\nredis.call('set','C','3')\n</pre> <p>After running the above script, the result is that only keys A and C will be created on slaves and AOF.</p> <h2>Global variables protection</h2> <p>Redis scripts are not allowed to create global variables, in order to avoid leaking data into the Lua state. If a script needs to maintain state between calls (a pretty uncommon need) it should use Redis keys instead.</p> <p>When global variable access is attempted the script is terminated and EVAL returns with an error:</p> <pre>redis 127.0.0.1:6379&gt; eval 'a=10' 0\n(error) ERR Error running script (call to f_933044db579a2f8fd45d8065f04a8d0249383e57): user_script:1: Script attempted to create global variable 'a'\n</pre> <p>Accessing a <em>non existing</em> global variable generates a similar error.</p> <p>Using Lua debugging functionality or other approaches like altering the meta table used to implement global protections in order to circumvent globals protection is not hard. However it is difficult to do it accidentally. If the user messes with the Lua global state, the consistency of AOF and replication is not guaranteed: don't do it.</p> <p>Note for Lua newbies: in order to avoid using global variables in your scripts simply declare every variable you are going to use using the <em>local</em> keyword.</p> <h2>Using SELECT inside scripts</h2> <p>It is possible to call <a href=\"select\">SELECT</a> inside Lua scripts like with normal clients, However one subtle aspect of the behavior changes between Redis 2.8.11 and Redis 2.8.12. Before the 2.8.12 release the database selected by the Lua script was <em>transferred</em> to the calling script as current database. Starting from Redis 2.8.12 the database selected by the Lua script only affects the execution of the script itself, but does not modify the database selected by the client calling the script.</p> <p>The semantic change between patch level releases was needed since the old behavior was inherently incompatible with the Redis replication layer and was the cause of bugs.</p> <h2>Available libraries</h2> <p>The Redis Lua interpreter loads the following Lua libraries:</p> <ul> <li>\n<code>base</code> lib.</li> <li>\n<code>table</code> lib.</li> <li>\n<code>string</code> lib.</li> <li>\n<code>math</code> lib.</li> <li>\n<code>struct</code> lib.</li> <li>\n<code>cjson</code> lib.</li> <li>\n<code>cmsgpack</code> lib.</li> <li>\n<code>bitop</code> lib.</li> <li>\n<code>redis.sha1hex</code> function.</li> <li>\n<code>redis.breakpoint and redis.debug</code> function in the context of the <a href=\"http://redis.io/topics/ldb\">Redis Lua debugger</a>.</li> </ul> <p>Every Redis instance is <em>guaranteed</em> to have all the above libraries so you can be sure that the environment for your Redis scripts is always the same.</p> <p>struct, CJSON and cmsgpack are external libraries, all the other libraries are standard Lua libraries.</p> <h3>struct</h3> <p>struct is a library for packing/unpacking structures within Lua.</p> <pre>Valid formats:\n&gt; - big endian\n&lt; - little endian\n![num] - alignment\nx - pading\nb/B - signed/unsigned byte\nh/H - signed/unsigned short\nl/L - signed/unsigned long\nT   - size_t\ni/In - signed/unsigned integer with size `n' (default is size of int)\ncn - sequence of `n' chars (from/to a string); when packing, n==0 means\n     the whole string; when unpacking, n==0 means use the previous\n     read number as the string length\ns - zero-terminated string\nf - float\nd - double\n' ' - ignored\n</pre> <p>Example:</p> <pre>127.0.0.1:6379&gt; eval 'return struct.pack(\"HH\", 1, 2)' 0\n\"\\x01\\x00\\x02\\x00\"\n127.0.0.1:6379&gt; eval 'return {struct.unpack(\"HH\", ARGV[1])}' 0 \"\\x01\\x00\\x02\\x00\"\n1) (integer) 1\n2) (integer) 2\n3) (integer) 5\n127.0.0.1:6379&gt; eval 'return struct.size(\"HH\")' 0\n(integer) 4\n</pre> <h3>CJSON</h3> <p>The CJSON library provides extremely fast JSON manipulation within Lua.</p> <p>Example:</p> <pre>redis 127.0.0.1:6379&gt; eval 'return cjson.encode({[\"foo\"]= \"bar\"})' 0\n\"{\\\"foo\\\":\\\"bar\\\"}\"\nredis 127.0.0.1:6379&gt; eval 'return cjson.decode(ARGV[1])[\"foo\"]' 0 \"{\\\"foo\\\":\\\"bar\\\"}\"\n\"bar\"\n</pre> <h3>cmsgpack</h3> <p>The cmsgpack library provides simple and fast MessagePack manipulation within Lua.</p> <p>Example:</p> <pre>127.0.0.1:6379&gt; eval 'return cmsgpack.pack({\"foo\", \"bar\", \"baz\"})' 0\n\"\\x93\\xa3foo\\xa3bar\\xa3baz\"\n127.0.0.1:6379&gt; eval 'return cmsgpack.unpack(ARGV[1])' 0 \"\\x93\\xa3foo\\xa3bar\\xa3baz\"\n1) \"foo\"\n2) \"bar\"\n3) \"baz\"\n</pre> <h3>bitop</h3> <p>The Lua Bit Operations Module adds bitwise operations on numbers. It is available for scripting in Redis since version 2.8.18.</p> <p>Example:</p> <pre>127.0.0.1:6379&gt; eval 'return bit.tobit(1)' 0\n(integer) 1\n127.0.0.1:6379&gt; eval 'return bit.bor(1,2,4,8,16,32,64,128)' 0\n(integer) 255\n127.0.0.1:6379&gt; eval 'return bit.tohex(422342)' 0\n\"000671c6\"\n</pre> <p>It supports several other functions: <code>bit.tobit</code>, <code>bit.tohex</code>, <code>bit.bnot</code>, <code>bit.band</code>, <code>bit.bor</code>, <code>bit.bxor</code>, <code>bit.lshift</code>, <code>bit.rshift</code>, <code>bit.arshift</code>, <code>bit.rol</code>, <code>bit.ror</code>, <code>bit.bswap</code>. All available functions are documented in the <a href=\"http://bitop.luajit.org/api.html\">Lua BitOp documentation</a></p> <h3><code>redis.sha1hex</code></h3> <p>Perform the SHA1 of the input string.</p> <p>Example:</p> <pre>127.0.0.1:6379&gt; eval 'return redis.sha1hex(ARGV[1])' 0 \"foo\"\n\"0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33\"\n</pre> <h2>Emitting Redis logs from scripts</h2> <p>It is possible to write to the Redis log file from Lua scripts using the <code>redis.log</code> function.</p> <pre>redis.log(loglevel,message)\n</pre> <p><code>loglevel</code> is one of:</p> <ul> <li><code>redis.LOG_DEBUG</code></li> <li><code>redis.LOG_VERBOSE</code></li> <li><code>redis.LOG_NOTICE</code></li> <li><code>redis.LOG_WARNING</code></li> </ul> <p>They correspond directly to the normal Redis log levels. Only logs emitted by scripting using a log level that is equal or greater than the currently configured Redis instance log level will be emitted.</p> <p>The <code>message</code> argument is simply a string. Example:</p> <pre>redis.log(redis.LOG_WARNING,\"Something is wrong with this script.\")\n</pre> <p>Will generate the following:</p> <pre>[32343] 22 Mar 15:21:39 # Something is wrong with this script.\n</pre> <h2>Sandbox and maximum execution time</h2> <p>Scripts should never try to access the external system, like the file system or any other system call. A script should only operate on Redis data and passed arguments.</p> <p>Scripts are also subject to a maximum execution time (five seconds by default). This default timeout is huge since a script should usually run in under a millisecond. The limit is mostly to handle accidental infinite loops created during development.</p> <p>It is possible to modify the maximum time a script can be executed with millisecond precision, either via <code>redis.conf</code> or using the CONFIG GET / CONFIG SET command. The configuration parameter affecting max execution time is called <code>lua-time-limit</code>.</p> <p>When a script reaches the timeout it is not automatically terminated by Redis since this violates the contract Redis has with the scripting engine to ensure that scripts are atomic. Interrupting a script means potentially leaving the dataset with half-written data. For this reasons when a script executes for more than the specified time the following happens:</p> <ul> <li>Redis logs that a script is running too long.</li> <li>It starts accepting commands again from other clients, but will reply with a BUSY error to all the clients sending normal commands. The only allowed commands in this status are <a href=\"script-kill\">SCRIPT KILL</a> and <code>SHUTDOWN\nNOSAVE</code>.</li> <li>It is possible to terminate a script that executes only read-only commands using the <a href=\"script-kill\">SCRIPT KILL</a> command. This does not violate the scripting semantic as no data was yet written to the dataset by the script.</li> <li>If the script already called write commands the only allowed command becomes <code>SHUTDOWN NOSAVE</code> that stops the server without saving the current data set on disk (basically the server is aborted).</li> </ul> <h2>EVALSHA in the context of pipelining</h2> <p>Care should be taken when executing <a href=\"evalsha\">EVALSHA</a> in the context of a pipelined request, since even in a pipeline the order of execution of commands must be guaranteed. If <a href=\"evalsha\">EVALSHA</a> will return a <code>NOSCRIPT</code> error the command can not be reissued later otherwise the order of execution is violated.</p> <p>The client library implementation should take one of the following approaches:</p> <ul> <li><p>Always use plain <a href=\"eval\">EVAL</a> when in the context of a pipeline.</p></li> <li><p>Accumulate all the commands to send into the pipeline, then check for <a href=\"eval\">EVAL</a> commands and use the <a href=\"script-exists\">SCRIPT EXISTS</a> command to check if all the scripts are already defined. If not, add <a href=\"script-load\">SCRIPT LOAD</a> commands on top of the pipeline as required, and use <a href=\"evalsha\">EVALSHA</a> for all the <a href=\"eval\">EVAL</a> calls.</p></li> </ul> <h2>Debugging Lua scripts</h2> <p>Starting with Redis 3.2 (currently in beta), Redis has support for native Lua debugging. The Redis Lua debugger is a remote debugger consisting of a server, which is Redis itself, and a client, which is by default <code>redis-cli</code>.</p> <p>The Lua debugger is described in the <a href=\"http://redis.io/topics/ldb\">Lua scripts debugging</a> section of the Redis documentation.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/eval\" class=\"_attribution-link\">http://redis.io/commands/eval</a>\n  </p>\n</div>\n","hdel":"<h1 class=\"command\">HDEL</h1>\n<pre>HDEL key field [field ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of fields to be removed.</p> </div> <p>Removes the specified fields from the hash stored at <code>key</code>. Specified fields that do not exist within this hash are ignored. If <code>key</code> does not exist, it is treated as an empty hash and this command returns <code>0</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of fields that were removed from the hash, not including specified but non existing fields.</p> <h2>History</h2> <ul> <li>\n<p><code>&gt;= 2.4</code>: Accepts multiple <code>field</code> arguments. Redis versions older than 2.4 can only remove a field per call.</p> <p>To remove multiple fields from a hash in an atomic fashion in earlier versions, use a <a href=\"multi\">MULTI</a> / <a href=\"exec\">EXEC</a> block.</p>\n</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"e041eacf3e57895279d690ec04dec705\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field1 \"foo\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HDEL myhash field1</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HDEL myhash field2</span> <code>(integer) 0</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hdel\" class=\"_attribution-link\">http://redis.io/commands/hdel</a>\n  </p>\n</div>\n","getrange":"<h1 class=\"command\">GETRANGE</h1>\n<pre>GETRANGE key start end</pre>   <div class=\"metadata\"> <p><strong>Available since 2.4.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.</p> </div> <p><strong>Warning</strong>: this command was renamed to <a href=\"getrange\">GETRANGE</a>, it is called <code>SUBSTR</code> in Redis versions <code>&lt;= 2.0</code>.</p> <p>Returns the substring of the string value stored at <code>key</code>, determined by the offsets <code>start</code> and <code>end</code> (both are inclusive). Negative offsets can be used in order to provide an offset starting from the end of the string. So -1 means the last character, -2 the penultimate and so forth.</p> <p>The function handles out of range requests by limiting the resulting range to the actual length of the string.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a></p> <h2>Examples</h2> <div class=\"example\" data-session=\"150b4bb2d0085b27252e8cb770588131\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"This is a string\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GETRANGE mykey 0 3</span> <code>\"This\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GETRANGE mykey -3 -1</span> <code>\"ing\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GETRANGE mykey 0 -1</span> <code>\"This is a string\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GETRANGE mykey 10 100</span> <code>\"string\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/getrange\" class=\"_attribution-link\">http://redis.io/commands/getrange</a>\n  </p>\n</div>\n","hexists":"<h1 class=\"command\">HEXISTS</h1>\n<pre>HEXISTS key field</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns if <code>field</code> is an existing field in the hash stored at <code>key</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if the hash contains <code>field</code>.</li> <li>\n<code>0</code> if the hash does not contain <code>field</code>, or <code>key</code> does not exist.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"b4522f924bdcbfe233177bac99c4adc7\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field1 \"foo\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HEXISTS myhash field1</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HEXISTS myhash field2</span> <code>(integer) 0</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hexists\" class=\"_attribution-link\">http://redis.io/commands/hexists</a>\n  </p>\n</div>\n","hget":"<h1 class=\"command\">HGET</h1>\n<pre>HGET key field</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns the value associated with <code>field</code> in the hash stored at <code>key</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the value associated with <code>field</code>, or <code>nil</code> when <code>field</code> is not present in the hash or <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"212324943475fc3b9bead8df272ca880\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field1 \"foo\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HGET myhash field1</span> <code>\"foo\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HGET myhash field2</span> <code>(nil)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hget\" class=\"_attribution-link\">http://redis.io/commands/hget</a>\n  </p>\n</div>\n","getbit":"<h1 class=\"command\">GETBIT</h1>\n<pre>GETBIT key offset</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns the bit value at <em>offset</em> in the string value stored at <em>key</em>.</p> <p>When <em>offset</em> is beyond the string length, the string is assumed to be a contiguous space with 0 bits. When <em>key</em> does not exist it is assumed to be an empty string, so <em>offset</em> is always out of range and the value is also assumed to be a contiguous space with 0 bits.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the bit value stored at <em>offset</em>.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"d804c81624c5bbc533c59ab81106cb31\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SETBIT mykey 7 1</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GETBIT mykey 0</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GETBIT mykey 7</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GETBIT mykey 100</span> <code>(integer) 0</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/getbit\" class=\"_attribution-link\">http://redis.io/commands/getbit</a>\n  </p>\n</div>\n","getset":"<h1 class=\"command\">GETSET</h1>\n<pre>GETSET key value</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Atomically sets <code>key</code> to <code>value</code> and returns the old value stored at <code>key</code>. Returns an error when <code>key</code> exists but does not hold a string value.</p> <h2>Design pattern</h2> <p><a href=\"getset\">GETSET</a> can be used together with <a href=\"incr\">INCR</a> for counting with atomic reset. For example: a process may call <a href=\"incr\">INCR</a> against the key <code>mycounter</code> every time some event occurs, but from time to time we need to get the value of the counter and reset it to zero atomically. This can be done using <code>GETSET mycounter \"0\"</code>:</p> <div class=\"example\" data-session=\"3be5a1a8e51e64486c20b93c2ef662d5\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">INCR mycounter</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GETSET mycounter \"0\"</span> <code>\"1\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET mycounter</span> <code>\"0\"</code>\n</div> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the old value stored at <code>key</code>, or <code>nil</code> when <code>key</code> did not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"3be5a1a8e51e64486c20b93c2ef662d5\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GETSET mykey \"World\"</span> <code>\"Hello\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET mykey</span> <code>\"World\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/getset\" class=\"_attribution-link\">http://redis.io/commands/getset</a>\n  </p>\n</div>\n","hgetall":"<h1 class=\"command\">HGETALL</h1>\n<pre>HGETALL key</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the size of the hash.</p> </div> <p>Returns all fields and values of the hash stored at <code>key</code>. In the returned value, every field name is followed by its value, so the length of the reply is twice the size of the hash.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of fields and their values stored in the hash, or an empty list when <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"216ec47f63070007342424b5d1529d4b\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field1 \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field2 \"World\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HGETALL myhash</span> <code>1) \"field1\"\n2) \"Hello\"\n3) \"field2\"\n4) \"World\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hgetall\" class=\"_attribution-link\">http://redis.io/commands/hgetall</a>\n  </p>\n</div>\n","hincrby":"<h1 class=\"command\">HINCRBY</h1>\n<pre>HINCRBY key field increment</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Increments the number stored at <code>field</code> in the hash stored at <code>key</code> by <code>increment</code>. If <code>key</code> does not exist, a new key holding a hash is created. If <code>field</code> does not exist the value is set to <code>0</code> before the operation is performed.</p> <p>The range of values supported by <a href=\"hincrby\">HINCRBY</a> is limited to 64 bit signed integers.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the value at <code>field</code> after the increment operation.</p> <h2>Examples</h2> <p>Since the <code>increment</code> argument is signed, both increment and decrement operations can be performed:</p> <div class=\"example\" data-session=\"57acce62fde06fdc1b7ec759a20263d0\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field 5</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HINCRBY myhash field 1</span> <code>(integer) 6</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HINCRBY myhash field -1</span> <code>(integer) 5</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HINCRBY myhash field -10</span> <code>(integer) -5</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hincrby\" class=\"_attribution-link\">http://redis.io/commands/hincrby</a>\n  </p>\n</div>\n","hkeys":"<h1 class=\"command\">HKEYS</h1>\n<pre>HKEYS key</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the size of the hash.</p> </div> <p>Returns all field names in the hash stored at <code>key</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of fields in the hash, or an empty list when <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"9f6d154a534d5d4568267dcb13bd99d3\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field1 \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field2 \"World\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HKEYS myhash</span> <code>1) \"field1\"\n2) \"field2\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hkeys\" class=\"_attribution-link\">http://redis.io/commands/hkeys</a>\n  </p>\n</div>\n","hlen":"<h1 class=\"command\">HLEN</h1>\n<pre>HLEN key</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns the number of fields contained in the hash stored at <code>key</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: number of fields in the hash, or <code>0</code> when <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"659f3e21995486b09032ebb06a16dca3\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field1 \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field2 \"World\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HLEN myhash</span> <code>(integer) 2</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hlen\" class=\"_attribution-link\">http://redis.io/commands/hlen</a>\n  </p>\n</div>\n","hset":"<h1 class=\"command\">HSET</h1>\n<pre>HSET key field value</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Sets <code>field</code> in the hash stored at <code>key</code> to <code>value</code>. If <code>key</code> does not exist, a new key holding a hash is created. If <code>field</code> already exists in the hash, it is overwritten.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if <code>field</code> is a new field in the hash and <code>value</code> was set.</li> <li>\n<code>0</code> if <code>field</code> already exists in the hash and the value was updated.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"3b288154de7f74edaf5e1e0f61a9826c\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field1 \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HGET myhash field1</span> <code>\"Hello\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hset\" class=\"_attribution-link\">http://redis.io/commands/hset</a>\n  </p>\n</div>\n","hvals":"<h1 class=\"command\">HVALS</h1>\n<pre>HVALS key</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the size of the hash.</p> </div> <p>Returns all values in the hash stored at <code>key</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of values in the hash, or an empty list when <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"8b7c5501d2e2a4924b0b7929fc37535b\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field1 \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field2 \"World\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HVALS myhash</span> <code>1) \"Hello\"\n2) \"World\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hvals\" class=\"_attribution-link\">http://redis.io/commands/hvals</a>\n  </p>\n</div>\n","incrby":"<h1 class=\"command\">INCRBY</h1>\n<pre>INCRBY key increment</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Increments the number stored at <code>key</code> by <code>increment</code>. If the key does not exist, it is set to <code>0</code> before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64 bit signed integers.</p> <p>See <a href=\"incr\">INCR</a> for extra information on increment/decrement operations.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the value of <code>key</code> after the increment</p> <h2>Examples</h2> <div class=\"example\" data-session=\"7556c1b43f358a092ee885b7eea4285f\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"10\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">INCRBY mykey 5</span> <code>(integer) 15</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/incrby\" class=\"_attribution-link\">http://redis.io/commands/incrby</a>\n  </p>\n</div>\n","hsetnx":"<h1 class=\"command\">HSETNX</h1>\n<pre>HSETNX key field value</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Sets <code>field</code> in the hash stored at <code>key</code> to <code>value</code>, only if <code>field</code> does not yet exist. If <code>key</code> does not exist, a new key holding a hash is created. If <code>field</code> already exists, this operation has no effect.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if <code>field</code> is a new field in the hash and <code>value</code> was set.</li> <li>\n<code>0</code> if <code>field</code> already exists in the hash and no operation was performed.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"ffe7ee416d5c9477748b8f41010a93bf\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSETNX myhash field \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSETNX myhash field \"World\"</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HGET myhash field</span> <code>\"Hello\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hsetnx\" class=\"_attribution-link\">http://redis.io/commands/hsetnx</a>\n  </p>\n</div>\n","hstrlen":"<h1 class=\"command\">HSTRLEN</h1>\n<pre>HSTRLEN key field</pre>   <div class=\"metadata\"> <p><strong>Available since 3.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns the string length of the value associated with <code>field</code> in the hash stored at <code>key</code>. If the <code>key</code> or the <code>field</code> do not exist, 0 is returned.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the string length of the value associated with <code>field</code>, or zero when <code>field</code> is not present in the hash or <code>key</code> does not exist at all.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"92ad29c88bb9754e0329b623364382c9\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HMSET myhash f1 HelloWorld f2 99 f3 -256</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSTRLEN myhash f1</span> <code>(integer) 10</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSTRLEN myhash f2</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSTRLEN myhash f3</span> <code>(integer) 4</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hstrlen\" class=\"_attribution-link\">http://redis.io/commands/hstrlen</a>\n  </p>\n</div>\n","incr":"<h1 class=\"command\">INCR</h1>\n<pre>INCR key</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Increments the number stored at <code>key</code> by one. If the key does not exist, it is set to <code>0</code> before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64 bit signed integers.</p> <p><strong>Note</strong>: this is a string operation because Redis does not have a dedicated integer type. The string stored at the key is interpreted as a base-10 <strong>64 bit signed integer</strong> to execute the operation.</p> <p>Redis stores integers in their integer representation, so for string values that actually hold an integer, there is no overhead for storing the string representation of the integer.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the value of <code>key</code> after the increment</p> <h2>Examples</h2> <div class=\"example\" data-session=\"2b2f52ccb9f514a561181ddb5b064479\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"10\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">INCR mykey</span> <code>(integer) 11</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET mykey</span> <code>\"11\"</code>\n</div> <h2>Pattern: Counter</h2> <p>The counter pattern is the most obvious thing you can do with Redis atomic increment operations. The idea is simply send an <a href=\"incr\">INCR</a> command to Redis every time an operation occurs. For instance in a web application we may want to know how many page views this user did every day of the year.</p> <p>To do so the web application may simply increment a key every time the user performs a page view, creating the key name concatenating the User ID and a string representing the current date.</p> <p>This simple pattern can be extended in many ways:</p> <ul> <li>It is possible to use <a href=\"incr\">INCR</a> and <a href=\"expire\">EXPIRE</a> together at every page view to have a counter counting only the latest N page views separated by less than the specified amount of seconds.</li> <li>A client may use GETSET in order to atomically get the current counter value and reset it to zero.</li> <li>Using other atomic increment/decrement commands like <a href=\"decr\">DECR</a> or <a href=\"incrby\">INCRBY</a> it is possible to handle values that may get bigger or smaller depending on the operations performed by the user. Imagine for instance the score of different users in an online game.</li> </ul> <h2>Pattern: Rate limiter</h2> <p>The rate limiter pattern is a special counter that is used to limit the rate at which an operation can be performed. The classical materialization of this pattern involves limiting the number of requests that can be performed against a public API.</p> <p>We provide two implementations of this pattern using <a href=\"incr\">INCR</a>, where we assume that the problem to solve is limiting the number of API calls to a maximum of <em>ten requests per second per IP address</em>.</p> <h2>Pattern: Rate limiter 1</h2> <p>The more simple and direct implementation of this pattern is the following:</p> <pre>FUNCTION LIMIT_API_CALL(ip)\nts = CURRENT_UNIX_TIME()\nkeyname = ip+\":\"+ts\ncurrent = GET(keyname)\nIF current != NULL AND current &gt; 10 THEN\n    ERROR \"too many requests per second\"\nELSE\n    MULTI\n        INCR(keyname,1)\n        EXPIRE(keyname,10)\n    EXEC\n    PERFORM_API_CALL()\nEND\n</pre> <p>Basically we have a counter for every IP, for every different second. But this counters are always incremented setting an expire of 10 seconds so that they'll be removed by Redis automatically when the current second is a different one.</p> <p>Note the used of <a href=\"multi\">MULTI</a> and <a href=\"exec\">EXEC</a> in order to make sure that we'll both increment and set the expire at every API call.</p> <h2>Pattern: Rate limiter 2</h2> <p>An alternative implementation uses a single counter, but is a bit more complex to get it right without race conditions. We'll examine different variants.</p> <pre>FUNCTION LIMIT_API_CALL(ip):\ncurrent = GET(ip)\nIF current != NULL AND current &gt; 10 THEN\n    ERROR \"too many requests per second\"\nELSE\n    value = INCR(ip)\n    IF value == 1 THEN\n        EXPIRE(value,1)\n    END\n    PERFORM_API_CALL()\nEND\n</pre> <p>The counter is created in a way that it only will survive one second, starting from the first request performed in the current second. If there are more than 10 requests in the same second the counter will reach a value greater than 10, otherwise it will expire and start again from 0.</p> <p><strong>In the above code there is a race condition</strong>. If for some reason the client performs the <a href=\"incr\">INCR</a> command but does not perform the <a href=\"expire\">EXPIRE</a> the key will be leaked until we'll see the same IP address again.</p> <p>This can be fixed easily turning the <a href=\"incr\">INCR</a> with optional <a href=\"expire\">EXPIRE</a> into a Lua script that is send using the <a href=\"eval\">EVAL</a> command (only available since Redis version 2.6).</p> <pre>local current\ncurrent = redis.call(\"incr\",KEYS[1])\nif tonumber(current) == 1 then\n    redis.call(\"expire\",KEYS[1],1)\nend\n</pre> <p>There is a different way to fix this issue without using scripting, but using Redis lists instead of counters. The implementation is more complex and uses more advanced features but has the advantage of remembering the IP addresses of the clients currently performing an API call, that may be useful or not depending on the application.</p> <pre>FUNCTION LIMIT_API_CALL(ip)\ncurrent = LLEN(ip)\nIF current &gt; 10 THEN\n    ERROR \"too many requests per second\"\nELSE\n    IF EXISTS(ip) == FALSE\n        MULTI\n            RPUSH(ip,ip)\n            EXPIRE(ip,1)\n        EXEC\n    ELSE\n        RPUSHX(ip,ip)\n    END\n    PERFORM_API_CALL()\nEND\n</pre> <p>The <a href=\"rpushx\">RPUSHX</a> command only pushes the element if the key already exists.</p> <p>Note that we have a race here, but it is not a problem: <a href=\"exists\">EXISTS</a> may return false but the key may be created by another client before we create it inside the <a href=\"multi\">MULTI</a> / <a href=\"exec\">EXEC</a> block. However this race will just miss an API call under rare conditions, so the rate limiting will still work correctly.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/incr\" class=\"_attribution-link\">http://redis.io/commands/incr</a>\n  </p>\n</div>\n","incrbyfloat":"<h1 class=\"command\">INCRBYFLOAT</h1>\n<pre>INCRBYFLOAT key increment</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Increment the string representing a floating point number stored at <code>key</code> by the specified <code>increment</code>. By using a negative <code>increment</code> value, the result is that the value stored at the key is decremented (by the obvious properties of addition). If the key does not exist, it is set to <code>0</code> before performing the operation. An error is returned if one of the following conditions occur:</p> <ul> <li>The key contains a value of the wrong type (not a string).</li> <li>The current key content or the specified increment are not parsable as a double precision floating point number.</li> </ul> <p>If the command is successful the new incremented value is stored as the new value of the key (replacing the old one), and returned to the caller as a string.</p> <p>Both the value already contained in the string key and the increment argument can be optionally provided in exponential notation, however the value computed after the increment is stored consistently in the same format, that is, an integer number followed (if needed) by a dot, and a variable number of digits representing the decimal part of the number. Trailing zeroes are always removed.</p> <p>The precision of the output is fixed at 17 digits after the decimal point regardless of the actual internal precision of the computation.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the value of <code>key</code> after the increment.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"82c0c0fed579565c5b0fc2b758867300\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey 10.50</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">INCRBYFLOAT mykey 0.1</span> <code>\"10.6\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">INCRBYFLOAT mykey -5</span> <code>\"5.6\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey 5.0e3</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">INCRBYFLOAT mykey 2.0e2</span> <code>\"5200\"</code>\n</div> <h2>Implementation details</h2> <p>The command is always propagated in the replication link and the Append Only File as a <a href=\"set\">SET</a> operation, so that differences in the underlying floating point math implementation will not be sources of inconsistency.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/incrbyfloat\" class=\"_attribution-link\">http://redis.io/commands/incrbyfloat</a>\n  </p>\n</div>\n","info":"<h1 class=\"command\">INFO</h1>\n<pre>INFO [section]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>The <a href=\"info\">INFO</a> command returns information and statistics about the server in a format that is simple to parse by computers and easy to read by humans.</p> <p>The optional parameter can be used to select a specific section of information:</p> <ul> <li> <code>server</code>: General information about the Redis server</li> <li> <code>clients</code>: Client connections section</li> <li> <code>memory</code>: Memory consumption related information</li> <li> <code>persistence</code>: RDB and AOF related information</li> <li> <code>stats</code>: General statistics</li> <li> <code>replication</code>: Master/slave replication information</li> <li> <code>cpu</code>: CPU consumption statistics</li> <li> <code>commandstats</code>: Redis command statistics</li> <li> <code>cluster</code>: Redis Cluster section</li> <li> <code>keyspace</code>: Database related statistics</li> </ul> <p>It can also take the following values:</p> <ul> <li> <code>all</code>: Return all sections</li> <li> <code>default</code>: Return only the default set of sections</li> </ul> <p>When no parameter is provided, the <code>default</code> option is assumed.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: as a collection of text lines.</p> <p>Lines can contain a section name (starting with a # character) or a property. All the properties are in the form of <code>field:value</code> terminated by <code>\\r\\n</code>.</p> <div class=\"example\" data-session=\"a5874213f267b3981f31e5765482612d\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">INFO</span> <code># Server\nredis_version:999.999.999\nredis_git_sha1:ceaf58df\nredis_git_dirty:1\nredis_build_id:a5eeeb464ee54856\nredis_mode:standalone\nos:Linux 4.1.5-x86_64-linode61 x86_64\narch_bits:32\nmultiplexing_api:epoll\ngcc_version:4.4.1\nprocess_id:21798\nrun_id:2569bb7433bfe013c2627edf62d9bf21eaf8a010\ntcp_port:6379\nuptime_in_seconds:13231880\nuptime_in_days:153\nhz:10\nlru_clock:10374373\nconfig_file:/etc/redis/6379.conf\n\n# Clients\nconnected_clients:8\nclient_longest_output_list:0\nclient_biggest_input_buf:0\nblocked_clients:0\n\n# Memory\nused_memory:7529480\nused_memory_human:7.18M\nused_memory_rss:10203136\nused_memory_rss_human:9.73M\nused_memory_peak:8370272\nused_memory_peak_human:7.98M\ntotal_system_memory:4142215168\ntotal_system_memory_human:3.86G\nused_memory_lua:24576\nused_memory_lua_human:24.00K\nmaxmemory:3221225472\nmaxmemory_human:3.00G\nmaxmemory_policy:unknown\nmem_fragmentation_ratio:1.36\nmem_allocator:jemalloc-3.6.0\nlazyfree_pending_objects:0\n\n# Persistence\nloading:0\nrdb_changes_since_last_save:898\nrdb_bgsave_in_progress:0\nrdb_last_save_time:1469991940\nrdb_last_bgsave_status:ok\nrdb_last_bgsave_time_sec:0\nrdb_current_bgsave_time_sec:-1\naof_enabled:0\naof_rewrite_in_progress:0\naof_rewrite_scheduled:0\naof_last_rewrite_time_sec:-1\naof_current_rewrite_time_sec:-1\naof_last_bgrewrite_status:ok\naof_last_write_status:ok\n\n# Stats\ntotal_connections_received:4690\ntotal_commands_processed:78985304\ninstantaneous_ops_per_sec:496\ntotal_net_input_bytes:5970339373\ntotal_net_output_bytes:7956600296\ninstantaneous_input_kbps:36.96\ninstantaneous_output_kbps:531.07\nrejected_connections:0\nsync_full:0\nsync_partial_ok:0\nsync_partial_err:0\nexpired_keys:86758\nevicted_keys:0\nkeyspace_hits:19778387\nkeyspace_misses:5508105\npubsub_channels:0\npubsub_patterns:0\nlatest_fork_usec:527\nmigrate_cached_sockets:0\n\n# Replication\nrole:master\nconnected_slaves:0\nmaster_repl_offset:0\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n\n# CPU\nused_cpu_sys:10800.85\nused_cpu_user:9497.70\nused_cpu_sys_children:224.98\nused_cpu_user_children:4830.51\n\n# Cluster\ncluster_enabled:0\n\n# Keyspace\ndb0:keys=3508,expires=3,avg_ttl=85563389615</code>\n</div> <h2>Notes</h2> <p>Please note depending on the version of Redis some of the fields have been added or removed. A robust client application should therefore parse the result of this command by skipping unknown properties, and gracefully handle missing fields.</p> <p>Here is the description of fields for Redis &gt;= 2.4.</p> <p>Here is the meaning of all fields in the <strong>server</strong> section:</p> <ul> <li> <code>redis_version</code>: Version of the Redis server</li> <li> <code>redis_git_sha1</code>: Git SHA1</li> <li> <code>redis_git_dirty</code>: Git dirty flag</li> <li> <code>os</code>: Operating system hosting the Redis server</li> <li> <code>arch_bits</code>: Architecture (32 or 64 bits)</li> <li> <code>multiplexing_api</code>: event loop mechanism used by Redis</li> <li> <code>gcc_version</code>: Version of the GCC compiler used to compile the Redis server</li> <li> <code>process_id</code>: PID of the server process</li> <li> <code>run_id</code>: Random value identifying the Redis server (to be used by Sentinel and Cluster)</li> <li> <code>tcp_port</code>: TCP/IP listen port</li> <li> <code>uptime_in_seconds</code>: Number of seconds since Redis server start</li> <li> <code>uptime_in_days</code>: Same value expressed in days</li> <li> <code>lru_clock</code>: Clock incrementing every minute, for LRU management</li> </ul> <p>Here is the meaning of all fields in the <strong>clients</strong> section:</p> <ul> <li> <code>connected_clients</code>: Number of client connections (excluding connections from slaves)</li> <li> <code>client_longest_output_list</code>: longest output list among current client connections</li> <li> <code>client_biggest_input_buf</code>: biggest input buffer among current client connections</li> <li> <code>blocked_clients</code>: Number of clients pending on a blocking call (BLPOP, BRPOP, BRPOPLPUSH)</li> </ul> <p>Here is the meaning of all fields in the <strong>memory</strong> section:</p> <ul> <li> <code>used_memory</code>: total number of bytes allocated by Redis using its allocator (either standard <strong>libc</strong>, <strong>jemalloc</strong>, or an alternative allocator such as <a href=\"http://code.google.com/p/google-perftools/\"><strong>tcmalloc</strong></a>\n</li> <li> <code>used_memory_human</code>: Human readable representation of previous value</li> <li> <code>used_memory_rss</code>: Number of bytes that Redis allocated as seen by the operating system (a.k.a resident set size). This is the number reported by tools such as <code>top(1)</code> and <code>ps(1)</code>\n</li> <li> <code>used_memory_peak</code>: Peak memory consumed by Redis (in bytes)</li> <li> <code>used_memory_peak_human</code>: Human readable representation of previous value</li> <li> <code>used_memory_lua</code>: Number of bytes used by the Lua engine</li> <li> <code>mem_fragmentation_ratio</code>: Ratio between <code>used_memory_rss</code> and <code>used_memory</code>\n</li> <li> <code>mem_allocator</code>: Memory allocator, chosen at compile time</li> </ul> <p>Ideally, the <code>used_memory_rss</code> value should be only slightly higher than <code>used_memory</code>. When rss &gt;&gt; used, a large difference means there is memory fragmentation (internal or external), which can be evaluated by checking <code>mem_fragmentation_ratio</code>. When used &gt;&gt; rss, it means part of Redis memory has been swapped off by the operating system: expect some significant latencies.</p> <p>Because Redis does not have control over how its allocations are mapped to memory pages, high <code>used_memory_rss</code> is often the result of a spike in memory usage.</p> <p>When Redis frees memory, the memory is given back to the allocator, and the allocator may or may not give the memory back to the system. There may be a discrepancy between the <code>used_memory</code> value and memory consumption as reported by the operating system. It may be due to the fact memory has been used and released by Redis, but not given back to the system. The <code>used_memory_peak</code> value is generally useful to check this point.</p> <p>Here is the meaning of all fields in the <strong>persistence</strong> section:</p> <ul> <li> <code>loading</code>: Flag indicating if the load of a dump file is on-going</li> <li> <code>rdb_changes_since_last_save</code>: Number of changes since the last dump</li> <li> <code>rdb_bgsave_in_progress</code>: Flag indicating a RDB save is on-going</li> <li> <code>rdb_last_save_time</code>: Epoch-based timestamp of last successful RDB save</li> <li> <code>rdb_last_bgsave_status</code>: Status of the last RDB save operation</li> <li> <code>rdb_last_bgsave_time_sec</code>: Duration of the last RDB save operation in seconds</li> <li> <code>rdb_current_bgsave_time_sec</code>: Duration of the on-going RDB save operation if any</li> <li> <code>aof_enabled</code>: Flag indicating AOF logging is activated</li> <li> <code>aof_rewrite_in_progress</code>: Flag indicating a AOF rewrite operation is on-going</li> <li> <code>aof_rewrite_scheduled</code>: Flag indicating an AOF rewrite operation will be scheduled once the on-going RDB save is complete.</li> <li> <code>aof_last_rewrite_time_sec</code>: Duration of the last AOF rewrite operation in seconds</li> <li> <code>aof_current_rewrite_time_sec</code>: Duration of the on-going AOF rewrite operation if any</li> <li> <code>aof_last_bgrewrite_status</code>: Status of the last AOF rewrite operation</li> </ul> <p><code>changes_since_last_save</code> refers to the number of operations that produced some kind of changes in the dataset since the last time either <a href=\"save\">SAVE</a> or <a href=\"bgsave\">BGSAVE</a> was called.</p> <p>If AOF is activated, these additional fields will be added:</p> <ul> <li> <code>aof_current_size</code>: AOF current file size</li> <li> <code>aof_base_size</code>: AOF file size on latest startup or rewrite</li> <li> <code>aof_pending_rewrite</code>: Flag indicating an AOF rewrite operation will be scheduled once the on-going RDB save is complete.</li> <li> <code>aof_buffer_length</code>: Size of the AOF buffer</li> <li> <code>aof_rewrite_buffer_length</code>: Size of the AOF rewrite buffer</li> <li> <code>aof_pending_bio_fsync</code>: Number of fsync pending jobs in background I/O queue</li> <li> <code>aof_delayed_fsync</code>: Delayed fsync counter</li> </ul> <p>If a load operation is on-going, these additional fields will be added:</p> <ul> <li> <code>loading_start_time</code>: Epoch-based timestamp of the start of the load operation</li> <li> <code>loading_total_bytes</code>: Total file size</li> <li> <code>loading_loaded_bytes</code>: Number of bytes already loaded</li> <li> <code>loading_loaded_perc</code>: Same value expressed as a percentage</li> <li> <code>loading_eta_seconds</code>: ETA in seconds for the load to be complete</li> </ul> <p>Here is the meaning of all fields in the <strong>stats</strong> section:</p> <ul> <li> <code>total_connections_received</code>: Total number of connections accepted by the server</li> <li> <code>total_commands_processed</code>: Total number of commands processed by the server</li> <li> <code>instantaneous_ops_per_sec</code>: Number of commands processed per second</li> <li> <code>rejected_connections</code>: Number of connections rejected because of <code>maxclients</code> limit</li> <li> <code>expired_keys</code>: Total number of key expiration events</li> <li> <code>evicted_keys</code>: Number of evicted keys due to <code>maxmemory</code> limit</li> <li> <code>keyspace_hits</code>: Number of successful lookup of keys in the main dictionary</li> <li> <code>keyspace_misses</code>: Number of failed lookup of keys in the main dictionary</li> <li> <code>pubsub_channels</code>: Global number of pub/sub channels with client subscriptions</li> <li> <code>pubsub_patterns</code>: Global number of pub/sub pattern with client subscriptions</li> <li> <code>latest_fork_usec</code>: Duration of the latest fork operation in microseconds</li> </ul> <p>Here is the meaning of all fields in the <strong>replication</strong> section:</p> <ul> <li> <code>role</code>: Value is \"master\" if the instance is slave of no one, or \"slave\" if the instance is enslaved to a master. Note that a slave can be master of another slave (daisy chaining).</li> </ul> <p>If the instance is a slave, these additional fields are provided:</p> <ul> <li> <code>master_host</code>: Host or IP address of the master</li> <li> <code>master_port</code>: Master listening TCP port</li> <li> <code>master_link_status</code>: Status of the link (up/down)</li> <li> <code>master_last_io_seconds_ago</code>: Number of seconds since the last interaction with master</li> <li> <code>master_sync_in_progress</code>: Indicate the master is syncing to the slave</li> </ul> <p>If a SYNC operation is on-going, these additional fields are provided:</p> <ul> <li> <code>master_sync_left_bytes</code>: Number of bytes left before syncing is complete</li> <li> <code>master_sync_last_io_seconds_ago</code>: Number of seconds since last transfer I/O during a SYNC operation</li> </ul> <p>If the link between master and slave is down, an additional field is provided:</p> <ul> <li> <code>master_link_down_since_seconds</code>: Number of seconds since the link is down</li> </ul> <p>The following field is always provided:</p> <ul> <li> <code>connected_slaves</code>: Number of connected slaves</li> </ul> <p>For each slave, the following line is added:</p> <ul> <li> <code>slaveXXX</code>: id, IP address, port, state</li> </ul> <p>Here is the meaning of all fields in the <strong>cpu</strong> section:</p> <ul> <li> <code>used_cpu_sys</code>: System CPU consumed by the Redis server</li> <li> <code>used_cpu_user</code>:User CPU consumed by the Redis server</li> <li> <code>used_cpu_sys_children</code>: System CPU consumed by the background processes</li> <li> <code>used_cpu_user_children</code>: User CPU consumed by the background processes</li> </ul> <p>The <strong>commandstats</strong> section provides statistics based on the command type, including the number of calls, the total CPU time consumed by these commands, and the average CPU consumed per command execution.</p> <p>For each command type, the following line is added:</p> <ul> <li> <code>cmdstat_XXX</code>: <code>calls=XXX,usec=XXX,usec_per_call=XXX</code>\n</li> </ul> <p>The <strong>cluster</strong> section currently only contains a unique field:</p> <ul> <li> <code>cluster_enabled</code>: Indicate Redis cluster is enabled</li> </ul> <p>The <strong>keyspace</strong> section provides statistics on the main dictionary of each database. The statistics are the number of keys, and the number of keys with an expiration.</p> <p>For each database, the following line is added:</p> <ul> <li> <code>dbXXX</code>: <code>keys=XXX,expires=XXX</code>\n</li> </ul>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/info\" class=\"_attribution-link\">http://redis.io/commands/info</a>\n  </p>\n</div>\n","keys":"<h1 class=\"command\">KEYS</h1>\n<pre>KEYS pattern</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.</p> </div> <p>Returns all keys matching <code>pattern</code>.</p> <p>While the time complexity for this operation is <span class=\"math\">O(N),</span> the constant times are fairly low. For example, Redis running on an entry level laptop can scan a 1 million key database in 40 milliseconds.</p> <p><strong>Warning</strong>: consider <a href=\"keys\">KEYS</a> as a command that should only be used in production environments with extreme care. It may ruin performance when it is executed against large databases. This command is intended for debugging and special operations, such as changing your keyspace layout. Don't use <a href=\"keys\">KEYS</a> in your regular application code. If you're looking for a way to find keys in a subset of your keyspace, consider using <a href=\"scan\">SCAN</a> or <a href=\"http://redis.io/topics/data-types#sets\">sets</a>.</p> <p>Supported glob-style patterns:</p> <ul> <li>\n<code>h?llo</code> matches <code>hello</code>, <code>hallo</code> and <code>hxllo</code>\n</li> <li>\n<code>h*llo</code> matches <code>hllo</code> and <code>heeeello</code>\n</li> <li>\n<code>h[ae]llo</code> matches <code>hello</code> and <code>hallo,</code> but not <code>hillo</code>\n</li> <li>\n<code>h[^e]llo</code> matches <code>hallo</code>, <code>hbllo</code>, ... but not <code>hello</code>\n</li> <li>\n<code>h[a-b]llo</code> matches <code>hallo</code> and <code>hbllo</code>\n</li> </ul> <p>Use <code>\\</code> to escape special characters if you want to match them verbatim.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of keys matching <code>pattern</code>.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"06b8355ab8c678de70d2eb1bd6872890\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">MSET one 1 two 2 three 3 four 4</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">KEYS *o*</span> <code>1) \"two\"\n2) \"one\"\n3) \"four\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">KEYS t??</span> <code>1) \"two\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">KEYS *</span> <code>1) \"two\"\n2) \"one\"\n3) \"three\"\n4) \"four\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/keys\" class=\"_attribution-link\">http://redis.io/commands/keys</a>\n  </p>\n</div>\n","lastsave":"<h1 class=\"command\">LASTSAVE</h1>\n<pre>LASTSAVE</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>Return the UNIX TIME of the last DB save executed with success. A client may check if a <a href=\"bgsave\">BGSAVE</a> command succeeded reading the <a href=\"lastsave\">LASTSAVE</a> value, then issuing a <a href=\"bgsave\">BGSAVE</a> command and checking at regular intervals every N seconds if <a href=\"lastsave\">LASTSAVE</a> changed.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: an UNIX time stamp.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/lastsave\" class=\"_attribution-link\">http://redis.io/commands/lastsave</a>\n  </p>\n</div>\n","lindex":"<h1 class=\"command\">LINDEX</h1>\n<pre>LINDEX key index</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).</p> </div> <p>Returns the element at index <code>index</code> in the list stored at <code>key</code>. The index is zero-based, so <code>0</code> means the first element, <code>1</code> the second element and so on. Negative indices can be used to designate elements starting at the tail of the list. Here, <code>-1</code> means the last element, <code>-2</code> means the penultimate and so forth.</p> <p>When the value at <code>key</code> is not a list, an error is returned.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the requested element, or <code>nil</code> when <code>index</code> is out of range.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"ce97011a4806e20b0736760bdc7b04cb\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LPUSH mylist \"World\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LPUSH mylist \"Hello\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LINDEX mylist 0</span> <code>\"Hello\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LINDEX mylist -1</span> <code>\"World\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LINDEX mylist 3</span> <code>(nil)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/lindex\" class=\"_attribution-link\">http://redis.io/commands/lindex</a>\n  </p>\n</div>\n","hincrbyfloat":"<h1 class=\"command\">HINCRBYFLOAT</h1>\n<pre>HINCRBYFLOAT key field increment</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Increment the specified <code>field</code> of a hash stored at <code>key</code>, and representing a floating point number, by the specified <code>increment</code>. If the increment value is negative, the result is to have the hash field value <strong>decremented</strong> instead of incremented. If the field does not exist, it is set to <code>0</code> before performing the operation. An error is returned if one of the following conditions occur:</p> <ul> <li>The field contains a value of the wrong type (not a string).</li> <li>The current field content or the specified increment are not parsable as a double precision floating point number.</li> </ul> <p>The exact behavior of this command is identical to the one of the <a href=\"incrbyfloat\">INCRBYFLOAT</a> command, please refer to the documentation of <a href=\"incrbyfloat\">INCRBYFLOAT</a> for further information.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the value of <code>field</code> after the increment.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"77a2cf830f1f49c7ba24069fada009e1\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET mykey field 10.50</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HINCRBYFLOAT mykey field 0.1</span> <code>\"10.60000000000000001\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HINCRBYFLOAT mykey field -5</span> <code>\"5.59999999999999964\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET mykey field 5.0e3</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HINCRBYFLOAT mykey field 2.0e2</span> <code>\"5200\"</code>\n</div> <h2>Implementation details</h2> <p>The command is always propagated in the replication link and the Append Only File as a <a href=\"hset\">HSET</a> operation, so that differences in the underlying floating point math implementation will not be sources of inconsistency.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hincrbyfloat\" class=\"_attribution-link\">http://redis.io/commands/hincrbyfloat</a>\n  </p>\n</div>\n","lpush":"<h1 class=\"command\">LPUSH</h1>\n<pre>LPUSH key value [value ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Insert all the specified values at the head of the list stored at <code>key</code>. If <code>key</code> does not exist, it is created as empty list before performing the push operations. When <code>key</code> holds a value that is not a list, an error is returned.</p> <p>It is possible to push multiple elements using a single command call just specifying multiple arguments at the end of the command. Elements are inserted one after the other to the head of the list, from the leftmost element to the rightmost element. So for instance the command <code>LPUSH mylist a b c</code> will result into a list containing <code>c</code> as first element, <code>b</code> as second element and <code>a</code> as third element.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the length of the list after the push operations.</p> <h2>History</h2> <ul> <li>\n<code>&gt;= 2.4</code>: Accepts multiple <code>value</code> arguments. In Redis versions older than 2.4 it was possible to push a single value per command.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"7fbc8f88e2889ad6291456e0a448f92f\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LPUSH mylist \"world\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LPUSH mylist \"hello\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 0 -1</span> <code>1) \"hello\"\n2) \"world\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/lpush\" class=\"_attribution-link\">http://redis.io/commands/lpush</a>\n  </p>\n</div>\n","lpop":"<h1 class=\"command\">LPOP</h1>\n<pre>LPOP key</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Removes and returns the first element of the list stored at <code>key</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the value of the first element, or <code>nil</code> when <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"8101b05fa136df23cb9a84911b835825\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"two\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"three\"</span> <code>(integer) 3</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LPOP mylist</span> <code>\"one\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 0 -1</span> <code>1) \"two\"\n2) \"three\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/lpop\" class=\"_attribution-link\">http://redis.io/commands/lpop</a>\n  </p>\n</div>\n","lpushx":"<h1 class=\"command\">LPUSHX</h1>\n<pre>LPUSHX key value</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Inserts <code>value</code> at the head of the list stored at <code>key</code>, only if <code>key</code> already exists and holds a list. In contrary to <a href=\"lpush\">LPUSH</a>, no operation will be performed when <code>key</code> does not yet exist.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the length of the list after the push operation.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"8e41b5504ca55c8f4ea57150e511fe29\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LPUSH mylist \"World\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LPUSHX mylist \"Hello\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LPUSHX myotherlist \"Hello\"</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 0 -1</span> <code>1) \"Hello\"\n2) \"World\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE myotherlist 0 -1</span> <code>(empty list or set)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/lpushx\" class=\"_attribution-link\">http://redis.io/commands/lpushx</a>\n  </p>\n</div>\n","ltrim":"<h1 class=\"command\">LTRIM</h1>\n<pre>LTRIM key start stop</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of elements to be removed by the operation.</p> </div> <p>Trim an existing list so that it will contain only the specified range of elements specified. Both <code>start</code> and <code>stop</code> are zero-based indexes, where <code>0</code> is the first element of the list (the head), <code>1</code> the next element and so on.</p> <p>For example: <code>LTRIM foobar 0 2</code> will modify the list stored at <code>foobar</code> so that only the first three elements of the list will remain.</p> <p><code>start</code> and <code>end</code> can also be negative numbers indicating offsets from the end of the list, where <code>-1</code> is the last element of the list, <code>-2</code> the penultimate element and so on.</p> <p>Out of range indexes will not produce an error: if <code>start</code> is larger than the end of the list, or <code>start &gt; end</code>, the result will be an empty list (which causes <code>key</code> to be removed). If <code>end</code> is larger than the end of the list, Redis will treat it like the last element of the list.</p> <p>A common use of <a href=\"ltrim\">LTRIM</a> is together with <a href=\"lpush\">LPUSH</a> / <a href=\"rpush\">RPUSH</a>. For example:</p> <pre>LPUSH mylist someelement\nLTRIM mylist 0 99\n</pre> <p>This pair of commands will push a new element on the list, while making sure that the list will not grow larger than 100 elements. This is very useful when using Redis to store logs for example. It is important to note that when used in this way <a href=\"ltrim\">LTRIM</a> is an <span class=\"math\">O(1) </span>operation because in the average case just one element is removed from the tail of the list.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p> <h2>Examples</h2> <div class=\"example\" data-session=\"e304eabf1640c9ad77cd435594982621\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"two\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"three\"</span> <code>(integer) 3</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LTRIM mylist 1 -1</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 0 -1</span> <code>1) \"two\"\n2) \"three\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/ltrim\" class=\"_attribution-link\">http://redis.io/commands/ltrim</a>\n  </p>\n</div>\n","mget":"<h1 class=\"command\">MGET</h1>\n<pre>MGET key [key ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of keys to retrieve.</p> </div> <p>Returns the values of all specified keys. For every key that does not hold a string value or does not exist, the special value <code>nil</code> is returned. Because of this, the operation never fails.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of values at the specified keys.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"d884438e12c64b20c3a922739e989784\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET key1 \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET key2 \"World\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">MGET key1 key2 nonexisting</span> <code>1) \"Hello\"\n2) \"World\"\n3) (nil)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/mget\" class=\"_attribution-link\">http://redis.io/commands/mget</a>\n  </p>\n</div>\n","linsert":"<h1 class=\"command\">LINSERT</h1>\n<pre>LINSERT key BEFORE|AFTER pivot value</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).</p> </div> <p>Inserts <code>value</code> in the list stored at <code>key</code> either before or after the reference value <code>pivot</code>.</p> <p>When <code>key</code> does not exist, it is considered an empty list and no operation is performed.</p> <p>An error is returned when <code>key</code> exists but does not hold a list value.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the length of the list after the insert operation, or <code>-1</code> when the value <code>pivot</code> was not found.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"0038aeecd5c6085042db4b1aff5bf121\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"World\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LINSERT mylist BEFORE \"World\" \"There\"</span> <code>(integer) 3</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 0 -1</span> <code>1) \"Hello\"\n2) \"There\"\n3) \"World\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/linsert\" class=\"_attribution-link\">http://redis.io/commands/linsert</a>\n  </p>\n</div>\n","monitor":"<h1 class=\"command\">MONITOR</h1>\n<pre>MONITOR</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p><a href=\"monitor\">MONITOR</a> is a debugging command that streams back every command processed by the Redis server. It can help in understanding what is happening to the database. This command can both be used via <code>redis-cli</code> and via <code>telnet</code>.</p> <p>The ability to see all the requests processed by the server is useful in order to spot bugs in an application both when using Redis as a database and as a distributed caching system.</p> <pre>$ redis-cli monitor\n1339518083.107412 [0 127.0.0.1:60866] \"keys\" \"*\"\n1339518087.877697 [0 127.0.0.1:60866] \"dbsize\"\n1339518090.420270 [0 127.0.0.1:60866] \"set\" \"x\" \"6\"\n1339518096.506257 [0 127.0.0.1:60866] \"get\" \"x\"\n1339518099.363765 [0 127.0.0.1:60866] \"del\" \"x\"\n1339518100.544926 [0 127.0.0.1:60866] \"get\" \"x\"\n</pre> <p>Use <code>SIGINT</code> (Ctrl-C) to stop a <a href=\"monitor\">MONITOR</a> stream running via <code>redis-cli</code>.</p> <pre>$ telnet localhost 6379\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nMONITOR\n+OK\n+1339518083.107412 [0 127.0.0.1:60866] \"keys\" \"*\"\n+1339518087.877697 [0 127.0.0.1:60866] \"dbsize\"\n+1339518090.420270 [0 127.0.0.1:60866] \"set\" \"x\" \"6\"\n+1339518096.506257 [0 127.0.0.1:60866] \"get\" \"x\"\n+1339518099.363765 [0 127.0.0.1:60866] \"del\" \"x\"\n+1339518100.544926 [0 127.0.0.1:60866] \"get\" \"x\"\nQUIT\n+OK\nConnection closed by foreign host.\n</pre> <p>Manually issue the <a href=\"quit\">QUIT</a> command to stop a <a href=\"monitor\">MONITOR</a> stream running via <code>telnet</code>.</p> <h2>Commands not logged by MONITOR</h2> <p>For security concerns, certain special administration commands like <code>CONFIG</code> are not logged into the <a href=\"monitor\">MONITOR</a> output.</p> <h2>Cost of running <a href=\"monitor\">MONITOR</a>\n</h2> <p>Because <a href=\"monitor\">MONITOR</a> streams back <strong>all</strong> commands, its use comes at a cost. The following (totally unscientific) benchmark numbers illustrate what the cost of running <a href=\"monitor\">MONITOR</a> can be.</p> <p>Benchmark result <strong>without</strong> <a href=\"monitor\">MONITOR</a> running:</p> <pre>$ src/redis-benchmark -c 10 -n 100000 -q\nPING_INLINE: 101936.80 requests per second\nPING_BULK: 102880.66 requests per second\nSET: 95419.85 requests per second\nGET: 104275.29 requests per second\nINCR: 93283.58 requests per second\n</pre> <p>Benchmark result <strong>with</strong> <a href=\"monitor\">MONITOR</a> running (<code>redis-cli monitor &gt; /dev/null</code>):</p> <pre>$ src/redis-benchmark -c 10 -n 100000 -q\nPING_INLINE: 58479.53 requests per second\nPING_BULK: 59136.61 requests per second\nSET: 41823.50 requests per second\nGET: 45330.91 requests per second\nINCR: 41771.09 requests per second\n</pre> <p>In this particular case, running a single <a href=\"monitor\">MONITOR</a> client can reduce the throughput by more than 50%. Running more <a href=\"monitor\">MONITOR</a> clients will reduce throughput even more.</p> <h2>Return value</h2> <p><strong>Non standard return value</strong>, just dumps the received commands in an infinite flow.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/monitor\" class=\"_attribution-link\">http://redis.io/commands/monitor</a>\n  </p>\n</div>\n","move":"<h1 class=\"command\">MOVE</h1>\n<pre>MOVE key db</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Move <code>key</code> from the currently selected database (see <a href=\"select\">SELECT</a>) to the specified destination database. When <code>key</code> already exists in the destination database, or it does not exist in the source database, it does nothing. It is possible to use <a href=\"move\">MOVE</a> as a locking primitive because of this.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if <code>key</code> was moved.</li> <li>\n<code>0</code> if <code>key</code> was not moved.</li> </ul>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/move\" class=\"_attribution-link\">http://redis.io/commands/move</a>\n  </p>\n</div>\n","hmget":"<h1 class=\"command\">HMGET</h1>\n<pre>HMGET key field [field ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of fields being requested.</p> </div> <p>Returns the values associated with the specified <code>fields</code> in the hash stored at <code>key</code>.</p> <p>For every <code>field</code> that does not exist in the hash, a <code>nil</code> value is returned. Because a non-existing keys are treated as empty hashes, running <a href=\"hmget\">HMGET</a> against a non-existing <code>key</code> will return a list of <code>nil</code> values.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of values associated with the given fields, in the same order as they are requested.</p> <div class=\"example\" data-session=\"0a02e5681b2df11dd65a4e33d02e513d\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field1 \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HSET myhash field2 \"World\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HMGET myhash field1 field2 nofield</span> <code>1) \"Hello\"\n2) \"World\"\n3) (nil)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hmget\" class=\"_attribution-link\">http://redis.io/commands/hmget</a>\n  </p>\n</div>\n","llen":"<h1 class=\"command\">LLEN</h1>\n<pre>LLEN key</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns the length of the list stored at <code>key</code>. If <code>key</code> does not exist, it is interpreted as an empty list and <code>0</code> is returned. An error is returned when the value stored at <code>key</code> is not a list.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the length of the list at <code>key</code>.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"45af6367f7e7ec23765690244db11a9b\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LPUSH mylist \"World\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LPUSH mylist \"Hello\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LLEN mylist</span> <code>(integer) 2</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/llen\" class=\"_attribution-link\">http://redis.io/commands/llen</a>\n  </p>\n</div>\n","lrem":"<h1 class=\"command\">LREM</h1>\n<pre>LREM key count value</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the length of the list.</p> </div> <p>Removes the first <code>count</code> occurrences of elements equal to <code>value</code> from the list stored at <code>key</code>. The <code>count</code> argument influences the operation in the following ways:</p> <ul> <li>\n<code>count &gt; 0</code>: Remove elements equal to <code>value</code> moving from head to tail.</li> <li>\n<code>count &lt; 0</code>: Remove elements equal to <code>value</code> moving from tail to head.</li> <li>\n<code>count = 0</code>: Remove all elements equal to <code>value</code>.</li> </ul> <p>For example, <code>LREM list -2 \"hello\"</code> will remove the last two occurrences of <code>\"hello\"</code> in the list stored at <code>list</code>.</p> <p>Note that non-existing keys are treated like empty lists, so when <code>key</code> does not exist, the command will always return <code>0</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of removed elements.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"ad9235785faf4fed6381c5abc41fd334\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"hello\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"foo\"</span> <code>(integer) 3</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"hello\"</span> <code>(integer) 4</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LREM mylist -2 \"hello\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 0 -1</span> <code>1) \"hello\"\n2) \"foo\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/lrem\" class=\"_attribution-link\">http://redis.io/commands/lrem</a>\n  </p>\n</div>\n","lset":"<h1 class=\"command\">LSET</h1>\n<pre>LSET key index value</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).</p> </div> <p>Sets the list element at <code>index</code> to <code>value</code>. For more information on the <code>index</code> argument, see <a href=\"lindex\">LINDEX</a>.</p> <p>An error is returned for out of range indexes.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p> <h2>Examples</h2> <div class=\"example\" data-session=\"b3e52b7b31ce541471b767dc2fbd5293\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"two\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"three\"</span> <code>(integer) 3</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LSET mylist 0 \"four\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LSET mylist -2 \"five\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 0 -1</span> <code>1) \"four\"\n2) \"five\"\n3) \"three\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/lset\" class=\"_attribution-link\">http://redis.io/commands/lset</a>\n  </p>\n</div>\n","migrate":"<h1 class=\"command\">MIGRATE</h1>\n<pre>MIGRATE host port key|\"\" destination-db timeout [COPY] [REPLACE] [KEYS key [key ...]]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.</p> </div> <p>Atomically transfer a key from a source Redis instance to a destination Redis instance. On success the key is deleted from the original instance and is guaranteed to exist in the target instance.</p> <p>The command is atomic and blocks the two instances for the time required to transfer the key, at any given time the key will appear to exist in a given instance or in the other instance, unless a timeout error occurs. In 3.2 and above, multiple keys can be pipelined in a single call to <a href=\"migrate\">MIGRATE</a> by passing the empty string (\"\") as key and adding the <a href=\"keys\">KEYS</a> clause.</p> <p>The command internally uses <a href=\"dump\">DUMP</a> to generate the serialized version of the key value, and <a href=\"restore\">RESTORE</a> in order to synthesize the key in the target instance. The source instance acts as a client for the target instance. If the target instance returns OK to the <a href=\"restore\">RESTORE</a> command, the source instance deletes the key using <a href=\"del\">DEL</a>.</p> <p>The timeout specifies the maximum idle time in any moment of the communication with the destination instance in milliseconds. This means that the operation does not need to be completed within the specified amount of milliseconds, but that the transfer should make progresses without blocking for more than the specified amount of milliseconds.</p> <p><a href=\"migrate\">MIGRATE</a> needs to perform I/O operations and to honor the specified timeout. When there is an I/O error during the transfer or if the timeout is reached the operation is aborted and the special error - <code>IOERR</code> returned. When this happens the following two cases are possible:</p> <ul> <li>The key may be on both the instances.</li> <li>The key may be only in the source instance.</li> </ul> <p>It is not possible for the key to get lost in the event of a timeout, but the client calling <a href=\"migrate\">MIGRATE</a>, in the event of a timeout error, should check if the key is <em>also</em> present in the target instance and act accordingly.</p> <p>When any other error is returned (starting with <code>ERR</code>) <a href=\"migrate\">MIGRATE</a> guarantees that the key is still only present in the originating instance (unless a key with the same name was also <em>already</em> present on the target instance).</p> <p>If there are no keys to migrate in the source instance <code>NOKEY</code> is returned. Because missing keys are possible in normal conditions, from expiry for example, <code>NOKEY</code> isn't an error. </p> <h2>Migrating multiple keys with a single command call</h2> <p>Starting with Redis 3.0.6 <a href=\"migrate\">MIGRATE</a> supports a new bulk-migration mode that uses pipelining in order to migrate multiple keys between instances without incurring in the round trip time latency and other overheads that there are when moving each key with a single <a href=\"migrate\">MIGRATE</a> call.</p> <p>In order to enable this form, the <a href=\"keys\">KEYS</a> option is used, and the normal <em>key</em> argument is set to an empty string. The actual key names will be provided after the <a href=\"keys\">KEYS</a> argument itself, like in the following example:</p> <pre>MIGRATE 192.168.1.34 6379 \"\" 0 5000 KEYS key1 key2 key3\n</pre> <p>When this form is used the <code>NOKEY</code> status code is only returned when none of the keys is present in the instance, otherwise the command is executed, even if just a single key exists.</p> <h2>Options</h2> <ul> <li>\n<code>COPY</code> -- Do not remove the key from the local instance.</li> <li>\n<code>REPLACE</code> -- Replace existing key on the remote instance.</li> <li>\n<a href=\"keys\">KEYS</a> -- If the key argument is an empty string, the command will instead migrate all the keys that follow the <a href=\"keys\">KEYS</a> option (see the above section for more info).</li> </ul> <p><code>COPY</code> and <code>REPLACE</code> are available only in 3.0 and above. <a href=\"keys\">KEYS</a> is available starting with Redis 3.0.6.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: The command returns OK on success, or <code>NOKEY</code> if no keys were found in the source instance. </p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/migrate\" class=\"_attribution-link\">http://redis.io/commands/migrate</a>\n  </p>\n</div>\n","mset":"<h1 class=\"command\">MSET</h1>\n<pre>MSET key value [key value ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.1.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of keys to set.</p> </div> <p>Sets the given keys to their respective values. <a href=\"mset\">MSET</a> replaces existing values with new values, just as regular <a href=\"set\">SET</a>. See <a href=\"msetnx\">MSETNX</a> if you don't want to overwrite existing values.</p> <p><a href=\"mset\">MSET</a> is atomic, so all given keys are set at once. It is not possible for clients to see that some of the keys were updated while others are unchanged.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: always <code>OK</code> since <a href=\"mset\">MSET</a> can't fail.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"6da5a94ae804d82b51120880f190145d\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">MSET key1 \"Hello\" key2 \"World\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET key1</span> <code>\"Hello\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET key2</span> <code>\"World\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/mset\" class=\"_attribution-link\">http://redis.io/commands/mset</a>\n  </p>\n</div>\n","msetnx":"<h1 class=\"command\">MSETNX</h1>\n<pre>MSETNX key value [key value ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.1.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of keys to set.</p> </div> <p>Sets the given keys to their respective values. <a href=\"msetnx\">MSETNX</a> will not perform any operation at all even if just a single key already exists.</p> <p>Because of this semantic <a href=\"msetnx\">MSETNX</a> can be used in order to set different keys representing different fields of an unique logic object in a way that ensures that either all the fields or none at all are set.</p> <p><a href=\"msetnx\">MSETNX</a> is atomic, so all given keys are set at once. It is not possible for clients to see that some of the keys were updated while others are unchanged.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if the all the keys were set.</li> <li>\n<code>0</code> if no key was set (at least one key already existed).</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"c0e1f572027d8ae7b4b2a30dc424619f\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">MSETNX key1 \"Hello\" key2 \"there\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">MSETNX key2 \"there\" key3 \"world\"</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">MGET key1 key2 key3</span> <code>1) \"Hello\"\n2) \"there\"\n3) (nil)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/msetnx\" class=\"_attribution-link\">http://redis.io/commands/msetnx</a>\n  </p>\n</div>\n","multi":"<h1 class=\"command\">MULTI</h1>\n<pre>MULTI</pre>   <div class=\"metadata\"> <p><strong>Available since 1.2.0.</strong></p> </div> <p>Marks the start of a <a href=\"http://redis.io/topics/transactions\">transaction</a> block. Subsequent commands will be queued for atomic execution using <a href=\"exec\">EXEC</a>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: always <code>OK</code>.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/multi\" class=\"_attribution-link\">http://redis.io/commands/multi</a>\n  </p>\n</div>\n","object":"<h1 class=\"command\">OBJECT</h1>\n<pre>OBJECT subcommand [arguments [arguments ...]]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.3.</strong></p> <p><strong>Time complexity:</strong> O(1) for all the currently implemented subcommands.</p> </div> <p>The <a href=\"object\">OBJECT</a> command allows to inspect the internals of Redis Objects associated with keys. It is useful for debugging or to understand if your keys are using the specially encoded data types to save space. Your application may also use the information reported by the <a href=\"object\">OBJECT</a> command to implement application level key eviction policies when using Redis as a Cache.</p> <p>The <a href=\"object\">OBJECT</a> command supports multiple sub commands:</p> <ul> <li>\n<code>OBJECT REFCOUNT &lt;key&gt;</code> returns the number of references of the value associated with the specified key. This command is mainly useful for debugging.</li> <li>\n<code>OBJECT ENCODING &lt;key&gt;</code> returns the kind of internal representation used in order to store the value associated with a key.</li> <li>\n<code>OBJECT IDLETIME &lt;key&gt;</code> returns the number of seconds since the object stored at the specified key is idle (not requested by read or write operations). While the value is returned in seconds the actual resolution of this timer is 10 seconds, but may vary in future implementations.</li> </ul> <p>Objects can be encoded in different ways:</p> <ul> <li>Strings can be encoded as <code>raw</code> (normal string encoding) or <code>int</code> (strings representing integers in a 64 bit signed interval are encoded in this way in order to save space).</li> <li>Lists can be encoded as <code>ziplist</code> or <code>linkedlist</code>. The <code>ziplist</code> is the special representation that is used to save space for small lists.</li> <li>Sets can be encoded as <code>intset</code> or <code>hashtable</code>. The <code>intset</code> is a special encoding used for small sets composed solely of integers.</li> <li>Hashes can be encoded as <code>ziplist</code> or <code>hashtable</code>. The <code>ziplist</code> is a special encoding used for small hashes.</li> <li>Sorted Sets can be encoded as <code>ziplist</code> or <code>skiplist</code> format. As for the List type small sorted sets can be specially encoded using <code>ziplist</code>, while the <code>skiplist</code> encoding is the one that works with sorted sets of any size.</li> </ul> <p>All the specially encoded types are automatically converted to the general type once you perform an operation that makes it impossible for Redis to retain the space saving encoding.</p> <h2>Return value</h2> <p>Different return values are used for different subcommands.</p> <ul> <li>Subcommands <code>refcount</code> and <code>idletime</code> return integers.</li> <li>Subcommand <code>encoding</code> returns a bulk reply.</li> </ul> <p>If the object you try to inspect is missing, a null bulk reply is returned.</p> <h2>Examples</h2> <pre>redis&gt; lpush mylist \"Hello World\"\n(integer) 4\nredis&gt; object refcount mylist\n(integer) 1\nredis&gt; object encoding mylist\n\"ziplist\"\nredis&gt; object idletime mylist\n(integer) 10\n</pre> <p>In the following example you can see how the encoding changes once Redis is no longer able to use the space saving encoding.</p> <pre>redis&gt; set foo 1000\nOK\nredis&gt; object encoding foo\n\"int\"\nredis&gt; append foo bar\n(integer) 7\nredis&gt; get foo\n\"1000bar\"\nredis&gt; object encoding foo\n\"raw\"\n</pre>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/object\" class=\"_attribution-link\">http://redis.io/commands/object</a>\n  </p>\n</div>\n","persist":"<h1 class=\"command\">PERSIST</h1>\n<pre>PERSIST key</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Remove the existing timeout on <code>key</code>, turning the key from <em>volatile</em> (a key with an expire set) to <em>persistent</em> (a key that will never expire as no timeout is associated).</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if the timeout was removed.</li> <li>\n<code>0</code> if <code>key</code> does not exist or does not have an associated timeout.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"7ff82560b934380c83a7ec2f54bdf46d\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">EXPIRE mykey 10</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TTL mykey</span> <code>(integer) 10</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PERSIST mykey</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TTL mykey</span> <code>(integer) -1</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/persist\" class=\"_attribution-link\">http://redis.io/commands/persist</a>\n  </p>\n</div>\n","pexpire":"<h1 class=\"command\">PEXPIRE</h1>\n<pre>PEXPIRE key milliseconds</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>This command works exactly like <a href=\"expire\">EXPIRE</a> but the time to live of the key is specified in milliseconds instead of seconds.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if the timeout was set.</li> <li>\n<code>0</code> if <code>key</code> does not exist or the timeout could not be set.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"38a2b5b7a8959b4b4e36e03d1cfa2058\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PEXPIRE mykey 1500</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TTL mykey</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PTTL mykey</span> <code>(integer) 1498</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/pexpire\" class=\"_attribution-link\">http://redis.io/commands/pexpire</a>\n  </p>\n</div>\n","pexpireat":"<h1 class=\"command\">PEXPIREAT</h1>\n<pre>PEXPIREAT key milliseconds-timestamp</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p><a href=\"pexpireat\">PEXPIREAT</a> has the same effect and semantic as <a href=\"expireat\">EXPIREAT</a>, but the Unix time at which the key will expire is specified in milliseconds instead of seconds.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if the timeout was set.</li> <li>\n<code>0</code> if <code>key</code> does not exist or the timeout could not be set (see: <a href=\"expire\">EXPIRE</a>).</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"c29497718dd8f7a12eed87bc6b82b7dc\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PEXPIREAT mykey 1555555555005</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TTL mykey</span> <code>(integer) 85563389</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PTTL mykey</span> <code>(integer) 85563388962</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/pexpireat\" class=\"_attribution-link\">http://redis.io/commands/pexpireat</a>\n  </p>\n</div>\n","pfadd":"<h1 class=\"command\">PFADD</h1>\n<pre>PFADD key element [element ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.9.</strong></p> <p><strong>Time complexity:</strong> O(1) to add every element.</p> </div> <p>Adds all the element arguments to the HyperLogLog data structure stored at the variable name specified as first argument.</p> <p>As a side effect of this command the HyperLogLog internals may be updated to reflect a different estimation of the number of unique items added so far (the cardinality of the set).</p> <p>If the approximated cardinality estimated by the HyperLogLog changed after executing the command, <a href=\"pfadd\">PFADD</a> returns 1, otherwise 0 is returned. The command automatically creates an empty HyperLogLog structure (that is, a Redis String of a specified length and with a given encoding) if the specified key does not exist.</p> <p>To call the command without elements but just the variable name is valid, this will result into no operation performed if the variable already exists, or just the creation of the data structure if the key does not exist (in the latter case 1 is returned).</p> <p>For an introduction to HyperLogLog data structure check the <a href=\"pfcount\">PFCOUNT</a> command page.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"770046fb0e279f877259c105b3d398c4\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PFADD hll a b c d e f g</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PFCOUNT hll</span> <code>(integer) 7</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/pfadd\" class=\"_attribution-link\">http://redis.io/commands/pfadd</a>\n  </p>\n</div>\n","pfcount":"<h1 class=\"command\">PFCOUNT</h1>\n<pre>PFCOUNT key [key ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.9.</strong></p> <p><strong>Time complexity:</strong> O(1) with every small average constant times when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.</p> </div> <p>When called with a single key, returns the approximated cardinality computed by the HyperLogLog data structure stored at the specified variable, which is 0 if the variable does not exist.</p> <p>When called with multiple keys, returns the approximated cardinality of the union of the HyperLogLogs passed, by internally merging the HyperLogLogs stored at the provided keys into a temporary HyperLogLog.</p> <p>The HyperLogLog data structure can be used in order to count <strong>unique</strong> elements in a set using just a small constant amount of memory, specifically 12k bytes for every HyperLogLog (plus a few bytes for the key itself).</p> <p>The returned cardinality of the observed set is not exact, but approximated with a standard error of 0.81%.</p> <p>For example in order to take the count of all the unique search queries performed in a day, a program needs to call <a href=\"pfadd\">PFADD</a> every time a query is processed. The estimated number of unique queries can be retrieved with <a href=\"pfcount\">PFCOUNT</a> at any time.</p> <p>Note: as a side effect of calling this function, it is possible that the HyperLogLog is modified, since the last 8 bytes encode the latest computed cardinality for caching purposes. So <a href=\"pfcount\">PFCOUNT</a> is technically a write command.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>The approximated number of unique elements observed via <a href=\"pfadd\">PFADD</a>.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"6e99e4bbaece1bd68c666fdde3ff7a5d\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PFADD hll foo bar zap</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PFADD hll zap zap zap</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PFADD hll foo bar</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PFCOUNT hll</span> <code>(integer) 3</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PFADD some-other-hll 1 2 3</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PFCOUNT hll some-other-hll</span> <code>(integer) 6</code>\n</div> <h2>Performances</h2> <p>When <a href=\"pfcount\">PFCOUNT</a> is called with a single key, performances are excellent even if in theory constant times to process a dense HyperLogLog are high. This is possible because the <a href=\"pfcount\">PFCOUNT</a> uses caching in order to remember the cardinality previously computed, that rarely changes because most <a href=\"pfadd\">PFADD</a> operations will not update any register. Hundreds of operations per second are possible.</p> <p>When <a href=\"pfcount\">PFCOUNT</a> is called with multiple keys, an on-the-fly merge of the HyperLogLogs is performed, which is slow, moreover the cardinality of the union can't be cached, so when used with multiple keys <a href=\"pfcount\">PFCOUNT</a> may take a time in the order of magnitude of the millisecond, and should be not abused.</p> <p>The user should take in mind that single-key and multiple-keys executions of this command are semantically different and have different performances.</p> <h2>HyperLogLog representation</h2> <p>Redis HyperLogLogs are represented using a double representation: the <em>sparse</em> representation suitable for HLLs counting a small number of elements (resulting in a small number of registers set to non-zero value), and a <em>dense</em> representation suitable for higher cardinalities. Redis automatically switches from the sparse to the dense representation when needed.</p> <p>The sparse representation uses a run-length encoding optimized to store efficiently a big number of registers set to zero. The dense representation is a Redis string of 12288 bytes in order to store 16384 6-bit counters. The need for the double representation comes from the fact that using 12k (which is the dense representation memory requirement) to encode just a few registers for smaller cardinalities is extremely suboptimal.</p> <p>Both representations are prefixed with a 16 bytes header, that includes a magic, an encoding / version field, and the cached cardinality estimation computed, stored in little endian format (the most significant bit is 1 if the estimation is invalid since the HyperLogLog was updated since the cardinality was computed).</p> <p>The HyperLogLog, being a Redis string, can be retrieved with <a href=\"get\">GET</a> and restored with <a href=\"set\">SET</a>. Calling <a href=\"pfadd\">PFADD</a>, <a href=\"pfcount\">PFCOUNT</a> or <a href=\"pfmerge\">PFMERGE</a> commands with a corrupted HyperLogLog is never a problem, it may return random values but does not affect the stability of the server. Most of the times when corrupting a sparse representation, the server recognizes the corruption and returns an error.</p> <p>The representation is neutral from the point of view of the processor word size and endianness, so the same representation is used by 32 bit and 64 bit processor, big endian or little endian.</p> <p>More details about the Redis HyperLogLog implementation can be found in <a href=\"http://antirez.com/news/75\">this blog post</a>. The source code of the implementation in the <code>hyperloglog.c</code> file is also easy to read and understand, and includes a full specification for the exact encoding used for the sparse and dense representations.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/pfcount\" class=\"_attribution-link\">http://redis.io/commands/pfcount</a>\n  </p>\n</div>\n","pfmerge":"<h1 class=\"command\">PFMERGE</h1>\n<pre>PFMERGE destkey sourcekey [sourcekey ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.9.</strong></p> <p><strong>Time complexity:</strong> O(N) to merge N HyperLogLogs, but with high constant times.</p> </div> <p>Merge multiple HyperLogLog values into an unique value that will approximate the cardinality of the union of the observed Sets of the source HyperLogLog structures.</p> <p>The computed merged HyperLogLog is set to the destination variable, which is created if does not exist (defaulting to an empty HyperLogLog).</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: The command just returns <code>OK</code>.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"a9a5c00ded4ec110af5a110a5347b7da\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PFADD hll1 foo bar zap a</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PFADD hll2 a b c foo</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PFMERGE hll3 hll1 hll2</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PFCOUNT hll3</span> <code>(integer) 6</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/pfmerge\" class=\"_attribution-link\">http://redis.io/commands/pfmerge</a>\n  </p>\n</div>\n","ping":"<h1 class=\"command\">PING</h1>\n<pre>PING [message]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>Returns <code>PONG</code> if no argument is provided, otherwise return a copy of the argument as a bulk. This command is often used to test if a connection is still alive, or to measure latency.</p> <p>If the client is subscribed to a channel or a pattern, it will instead return a multi-bulk with a \"pong\" in the first position and an empty bulk in the second position, unless an argument is provided in which case it returns a copy of the argument.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p> <h2>Examples</h2> <div class=\"example\" data-session=\"f0d522782782e18b93d3e6c549b792f4\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PING</span> <code>PONG</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PING \"hello world\"</span> <code>\"hello world\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/ping\" class=\"_attribution-link\">http://redis.io/commands/ping</a>\n  </p>\n</div>\n","psubscribe":"<h1 class=\"command\">PSUBSCRIBE</h1>\n<pre>PSUBSCRIBE pattern [pattern ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of patterns the client is already subscribed to.</p> </div> <p>Subscribes the client to the given patterns.</p> <p>Supported glob-style patterns:</p> <ul> <li>\n<code>h?llo</code> subscribes to <code>hello</code>, <code>hallo</code> and <code>hxllo</code>\n</li> <li>\n<code>h*llo</code> subscribes to <code>hllo</code> and <code>heeeello</code>\n</li> <li>\n<code>h[ae]llo</code> subscribes to <code>hello</code> and <code>hallo,</code> but not <code>hillo</code>\n</li> </ul> <p>Use <code>\\</code> to escape special characters if you want to match them verbatim.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/psubscribe\" class=\"_attribution-link\">http://redis.io/commands/psubscribe</a>\n  </p>\n</div>\n","psetex":"<h1 class=\"command\">PSETEX</h1>\n<pre>PSETEX key milliseconds value</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p><a href=\"psetex\">PSETEX</a> works exactly like <a href=\"setex\">SETEX</a> with the sole difference that the expire time is specified in milliseconds instead of seconds.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"9e44c78f64ea4b7b4bdcf23495a7c01a\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PSETEX mykey 1000 \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PTTL mykey</span> <code>(integer) 998</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET mykey</span> <code>\"Hello\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/psetex\" class=\"_attribution-link\">http://redis.io/commands/psetex</a>\n  </p>\n</div>\n","punsubscribe":"<h1 class=\"command\">PUNSUBSCRIBE</h1>\n<pre>PUNSUBSCRIBE [pattern [pattern ...]]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N+M) where N is the number of patterns the client is already subscribed and M is the number of total patterns subscribed in the system (by any client).</p> </div> <p>Unsubscribes the client from the given patterns, or from all of them if none is given.</p> <p>When no patterns are specified, the client is unsubscribed from all the previously subscribed patterns. In this case, a message for every unsubscribed pattern will be sent to the client.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/punsubscribe\" class=\"_attribution-link\">http://redis.io/commands/punsubscribe</a>\n  </p>\n</div>\n","quit":"<h1 class=\"command\">QUIT</h1>\n<pre>QUIT</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>Ask the server to close the connection. The connection is closed as soon as all pending replies have been written to the client.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: always OK.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/quit\" class=\"_attribution-link\">http://redis.io/commands/quit</a>\n  </p>\n</div>\n","pubsub":"<h1 class=\"command\">PUBSUB</h1>\n<pre>PUBSUB subcommand [argument [argument ...]]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.0.</strong></p> <p><strong>Time complexity:</strong> O(N) for the CHANNELS subcommand, where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns). O(N) for the NUMSUB subcommand, where N is the number of requested channels. O(1) for the NUMPAT subcommand.</p> </div> <p>The PUBSUB command is an introspection command that allows to inspect the state of the Pub/Sub subsystem. It is composed of subcommands that are documented separately. The general form is:</p> <pre>PUBSUB &lt;subcommand&gt; ... args ...\n</pre> <h1>PUBSUB CHANNELS [pattern]</h1> <p>Lists the currently <em>active channels</em>. An active channel is a Pub/Sub channel with one or more subscribers (not including clients subscribed to patterns).</p> <p>If no <code>pattern</code> is specified, all the channels are listed, otherwise if pattern is specified only channels matching the specified glob-style pattern are listed.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: a list of active channels, optionally matching the specified pattern.</p> <h1><code>PUBSUB NUMSUB [channel-1 ... channel-N]</code></h1> <p>Returns the number of subscribers (not counting clients subscribed to patterns) for the specified channels.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: a list of channels and number of subscribers for every channel. The format is channel, count, channel, count, ..., so the list is flat. The order in which the channels are listed is the same as the order of the channels specified in the command call.</p> <p>Note that it is valid to call this command without channels. In this case it will just return an empty list.</p> <h1><code>PUBSUB NUMPAT</code></h1> <p>Returns the number of subscriptions to patterns (that are performed using the <a href=\"psubscribe\">PSUBSCRIBE</a> command). Note that this is not just the count of clients subscribed to patterns but the total number of patterns all the clients are subscribed to.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of patterns all the clients are subscribed to.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/pubsub\" class=\"_attribution-link\">http://redis.io/commands/pubsub</a>\n  </p>\n</div>\n","pttl":"<h1 class=\"command\">PTTL</h1>\n<pre>PTTL key</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Like <a href=\"ttl\">TTL</a> this command returns the remaining time to live of a key that has an expire set, with the sole difference that <a href=\"ttl\">TTL</a> returns the amount of remaining time in seconds while <a href=\"pttl\">PTTL</a> returns it in milliseconds.</p> <p>In Redis 2.6 or older the command returns <code>-1</code> if the key does not exist or if the key exist but has no associated expire.</p> <p>Starting with Redis 2.8 the return value in case of error changed:</p> <ul> <li>The command returns <code>-2</code> if the key does not exist.</li> <li>The command returns <code>-1</code> if the key exists but has no associated expire.</li> </ul> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: TTL in milliseconds, or a negative value in order to signal an error (see the description above).</p> <h2>Examples</h2> <div class=\"example\" data-session=\"f23172cf788f8e23d2198b57e5e43f02\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">EXPIRE mykey 1</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">PTTL mykey</span> <code>(integer) 999</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/pttl\" class=\"_attribution-link\">http://redis.io/commands/pttl</a>\n  </p>\n</div>\n","publish":"<h1 class=\"command\">PUBLISH</h1>\n<pre>PUBLISH channel message</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).</p> </div> <p>Posts a message to the given channel.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of clients that received the message.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/publish\" class=\"_attribution-link\">http://redis.io/commands/publish</a>\n  </p>\n</div>\n","randomkey":"<h1 class=\"command\">RANDOMKEY</h1>\n<pre>RANDOMKEY</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Return a random key from the currently selected database.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the random key, or <code>nil</code> when the database is empty.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/randomkey\" class=\"_attribution-link\">http://redis.io/commands/randomkey</a>\n  </p>\n</div>\n","readonly":"<h1 class=\"command\">READONLY</h1>\n<pre>READONLY</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Enables read queries for a connection to a Redis Cluster slave node. </p> <p>Normally slave nodes will redirect clients to the authoritative master for the hash slot involved in a given command, however clients can use slaves in order to scale reads using the <a href=\"readonly\">READONLY</a> command.</p> <p><a href=\"readonly\">READONLY</a> tells a Redis Cluster slave node that the client is willing to read possibly stale data and is not interested in running write queries.</p> <p>When the connection is in readonly mode, the cluster will send a redirection to the client only if the operation involves keys not served by the slave's master node. This may happen because:</p> <ol> <li>The client sent a command about hash slots never served by the master of this slave.</li> <li>The cluster was reconfigured (for example resharded) and the slave is no longer able to serve commands for a given hash slot.</li> </ol> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/readonly\" class=\"_attribution-link\">http://redis.io/commands/readonly</a>\n  </p>\n</div>\n","readwrite":"<h1 class=\"command\">READWRITE</h1>\n<pre>READWRITE</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Disables read queries for a connection to a Redis Cluster slave node.</p> <p>Read queries against a Redis Cluster slave node are disabled by default, but you can use the <a href=\"readonly\">READONLY</a> command to change this behavior on a per- connection basis. The <a href=\"readwrite\">READWRITE</a> command resets the readonly mode flag of a connection back to readwrite.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/readwrite\" class=\"_attribution-link\">http://redis.io/commands/readwrite</a>\n  </p>\n</div>\n","rename":"<h1 class=\"command\">RENAME</h1>\n<pre>RENAME key newkey</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Renames <code>key</code> to <code>newkey</code>. It returns an error when <code>key</code> does not exist. If <code>newkey</code> already exists it is overwritten, when this happens <a href=\"rename\">RENAME</a> executes an implicit <a href=\"del\">DEL</a> operation, so if the deleted key contains a very big value it may cause high latency even if <a href=\"rename\">RENAME</a> itself is usually a constant-time operation.</p> <p><strong>Note:</strong> Before Redis 3.2.0, an error is returned if source and destination names are the same.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p> <h2>Examples</h2> <div class=\"example\" data-session=\"7a2e4fa76cccabe843c8ad185bbdd82b\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RENAME mykey myotherkey</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET myotherkey</span> <code>\"Hello\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/rename\" class=\"_attribution-link\">http://redis.io/commands/rename</a>\n  </p>\n</div>\n","renamenx":"<h1 class=\"command\">RENAMENX</h1>\n<pre>RENAMENX key newkey</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Renames <code>key</code> to <code>newkey</code> if <code>newkey</code> does not yet exist. It returns an error when <code>key</code> does not exist.</p> <p><strong>Note:</strong> Before Redis 3.2.0, an error is returned if source and destination names are the same.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if <code>key</code> was renamed to <code>newkey</code>.</li> <li>\n<code>0</code> if <code>newkey</code> already exists.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"e5ac47b908a7a99852f72848285499c1\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET myotherkey \"World\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RENAMENX mykey myotherkey</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET myotherkey</span> <code>\"World\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/renamenx\" class=\"_attribution-link\">http://redis.io/commands/renamenx</a>\n  </p>\n</div>\n","restore":"<h1 class=\"command\">RESTORE</h1>\n<pre>RESTORE key ttl serialized-value [REPLACE]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).</p> </div> <p>Create a key associated with a value that is obtained by deserializing the provided serialized value (obtained via <a href=\"dump\">DUMP</a>).</p> <p>If <code>ttl</code> is 0 the key is created without any expire, otherwise the specified expire time (in milliseconds) is set.</p> <p><a href=\"restore\">RESTORE</a> will return a \"Target key name is busy\" error when <code>key</code> already exists unless you use the <code>REPLACE</code> modifier (Redis 3.0 or greater).</p> <p><a href=\"restore\">RESTORE</a> checks the RDB version and data checksum. If they don't match an error is returned.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: The command returns OK on success.</p> <h2>Examples</h2> <pre>redis&gt; DEL mykey\n0\nredis&gt; RESTORE mykey 0 \"\\n\\x17\\x17\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x03\\x00\\\n                        x00\\xc0\\x01\\x00\\x04\\xc0\\x02\\x00\\x04\\xc0\\x03\\x00\\\n                        xff\\x04\\x00u#&lt;\\xc0;.\\xe9\\xdd\"\nOK\nredis&gt; TYPE mykey\nlist\nredis&gt; LRANGE mykey 0 -1\n1) \"1\"\n2) \"2\"\n3) \"3\"\n</pre>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/restore\" class=\"_attribution-link\">http://redis.io/commands/restore</a>\n  </p>\n</div>\n","role":"<h1 class=\"command\">ROLE</h1>\n<pre>ROLE</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.12.</strong></p> </div> <p>Provide information on the role of a Redis instance in the context of replication, by returning if the instance is currently a <code>master</code>, <code>slave</code>, or <code>sentinel</code>. The command also returns additional information about the state of the replication (if the role is master or slave) or the list of monitored master names (if the role is sentinel).</p> <h2>Output format</h2> <p>The command returns an array of elements. The first element is the role of the instance, as one of the following three strings:</p> <ul> <li>\"master\"</li> <li>\"slave\"</li> <li>\"sentinel\"</li> </ul> <p>The additional elements of the array depends on the role.</p> <h2>Master output</h2> <p>An example of output when <a href=\"role\">ROLE</a> is called in a master instance:</p> <pre>1) \"master\"\n2) (integer) 3129659\n3) 1) 1) \"127.0.0.1\"\n      2) \"9001\"\n      3) \"3129242\"\n   2) 1) \"127.0.0.1\"\n      2) \"9002\"\n      3) \"3129543\"\n</pre> <p>The master output is composed of the following parts:</p> <ol> <li>The string <code>master</code>.</li> <li>The current master replication offset, which is an offset that masters and slaves share to understand, in partial resynchronizations, the part of the replication stream the slave needs to fetch to continue.</li> <li>An array composed of three elements array representing the connected slaves. Every sub-array contains the slave IP, port, and the last acknowledged replication offset.</li> </ol> <h2>Slave output</h2> <p>An example of output when <a href=\"role\">ROLE</a> is called in a slave instance:</p> <pre>1) \"slave\"\n2) \"127.0.0.1\"\n3) (integer) 9000\n4) \"connected\"\n5) (integer) 3167038\n</pre> <p>The slave output is composed of the following parts:</p> <ol> <li>The string <code>slave</code>.</li> <li>The IP of the master.</li> <li>The port number of the master.</li> <li>The state of the replication from the point of view of the master, that can be <code>connect</code> (the instance needs to connect to its master), <code>connecting</code> (the slave-master connection is in progress), <code>sync</code> (the master and slave are trying to perform the synchronization), <code>connected</code> (the slave is online).</li> <li>The amount of data received from the slave so far in terms of master replication offset.</li> </ol> <h2>Sentinel output</h2> <p>An example of Sentinel output:</p> <pre>1) \"sentinel\"\n2) 1) \"resque-master\"\n   2) \"html-fragments-master\"\n   3) \"stats-master\"\n   4) \"metadata-master\"\n</pre> <p>The sentinel output is composed of the following parts:</p> <ol> <li>The string <code>sentinel</code>.</li> <li>An array of master names monitored by this Sentinel instance.</li> </ol> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: where the first element is one of <code>master</code>, <code>slave</code>, <code>sentinel</code> and the additional elements are role-specific as illustrated above.</p> <h2>History</h2> <ul> <li>This command was introduced in the middle of a Redis stable release, specifically with Redis 2.8.12.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"d6c1e603be300c8078fe70e6cead57a5\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ROLE</span> <code>1) \"master\"\n2) (integer) 0\n3) (empty list or set)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/role\" class=\"_attribution-link\">http://redis.io/commands/role</a>\n  </p>\n</div>\n","rpop":"<h1 class=\"command\">RPOP</h1>\n<pre>RPOP key</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Removes and returns the last element of the list stored at <code>key</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the value of the last element, or <code>nil</code> when <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"2be689f82ca068af0c41dc3c4950a391\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"two\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"three\"</span> <code>(integer) 3</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPOP mylist</span> <code>\"three\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 0 -1</span> <code>1) \"one\"\n2) \"two\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/rpop\" class=\"_attribution-link\">http://redis.io/commands/rpop</a>\n  </p>\n</div>\n","rpoplpush":"<h1 class=\"command\">RPOPLPUSH</h1>\n<pre>RPOPLPUSH source destination</pre>   <div class=\"metadata\"> <p><strong>Available since 1.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Atomically returns and removes the last element (tail) of the list stored at <code>source</code>, and pushes the element at the first element (head) of the list stored at <code>destination</code>.</p> <p>For example: consider <code>source</code> holding the list <code>a,b,c</code>, and <code>destination</code> holding the list <code>x,y,z</code>. Executing <a href=\"rpoplpush\">RPOPLPUSH</a> results in <code>source</code> holding <code>a,b</code> and <code>destination</code> holding <code>c,x,y,z</code>.</p> <p>If <code>source</code> does not exist, the value <code>nil</code> is returned and no operation is performed. If <code>source</code> and <code>destination</code> are the same, the operation is equivalent to removing the last element from the list and pushing it as first element of the list, so it can be considered as a list rotation command.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the element being popped and pushed.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"f3a16d1e8b99729adc11617271c528fe\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"two\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"three\"</span> <code>(integer) 3</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPOPLPUSH mylist myotherlist</span> <code>\"three\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 0 -1</span> <code>1) \"one\"\n2) \"two\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE myotherlist 0 -1</span> <code>1) \"three\"</code>\n</div> <h2>Pattern: Reliable queue</h2> <p>Redis is often used as a messaging server to implement processing of background jobs or other kinds of messaging tasks. A simple form of queue is often obtained pushing values into a list in the producer side, and waiting for this values in the consumer side using <a href=\"rpop\">RPOP</a> (using polling), or <a href=\"brpop\">BRPOP</a> if the client is better served by a blocking operation.</p> <p>However in this context the obtained queue is not <em>reliable</em> as messages can be lost, for example in the case there is a network problem or if the consumer crashes just after the message is received but it is still to process.</p> <p><a href=\"rpoplpush\">RPOPLPUSH</a> (or <a href=\"brpoplpush\">BRPOPLPUSH</a> for the blocking variant) offers a way to avoid this problem: the consumer fetches the message and at the same time pushes it into a <em>processing</em> list. It will use the <a href=\"lrem\">LREM</a> command in order to remove the message from the <em>processing</em> list once the message has been processed.</p> <p>An additional client may monitor the <em>processing</em> list for items that remain there for too much time, and will push those timed out items into the queue again if needed.</p> <h2>Pattern: Circular list</h2> <p>Using <a href=\"rpoplpush\">RPOPLPUSH</a> with the same source and destination key, a client can visit all the elements of an N-elements list, one after the other, in <span class=\"math\">O(N) </span>without transferring the full list from the server to the client using a single <a href=\"lrange\">LRANGE</a> operation.</p> <p>The above pattern works even if the following two conditions: * There are multiple clients rotating the list: they'll fetch different elements, until all the elements of the list are visited, and the process restarts. * Even if other clients are actively pushing new items at the end of the list.</p> <p>The above makes it very simple to implement a system where a set of items must be processed by N workers continuously as fast as possible. An example is a monitoring system that must check that a set of web sites are reachable, with the smallest delay possible, using a number of parallel workers.</p> <p>Note that this implementation of workers is trivially scalable and reliable, because even if a message is lost the item is still in the queue and will be processed at the next iteration.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/rpoplpush\" class=\"_attribution-link\">http://redis.io/commands/rpoplpush</a>\n  </p>\n</div>\n","rpush":"<h1 class=\"command\">RPUSH</h1>\n<pre>RPUSH key value [value ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Insert all the specified values at the tail of the list stored at <code>key</code>. If <code>key</code> does not exist, it is created as empty list before performing the push operation. When <code>key</code> holds a value that is not a list, an error is returned.</p> <p>It is possible to push multiple elements using a single command call just specifying multiple arguments at the end of the command. Elements are inserted one after the other to the tail of the list, from the leftmost element to the rightmost element. So for instance the command <code>RPUSH mylist a b c</code> will result into a list containing <code>a</code> as first element, <code>b</code> as second element and <code>c</code> as third element.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the length of the list after the push operation.</p> <h2>History</h2> <ul> <li>\n<code>&gt;= 2.4</code>: Accepts multiple <code>value</code> arguments. In Redis versions older than 2.4 it was possible to push a single value per command.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"e581848b9823a8b3da9ce97c71d3031d\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"world\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 0 -1</span> <code>1) \"hello\"\n2) \"world\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/rpush\" class=\"_attribution-link\">http://redis.io/commands/rpush</a>\n  </p>\n</div>\n","rpushx":"<h1 class=\"command\">RPUSHX</h1>\n<pre>RPUSHX key value</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Inserts <code>value</code> at the tail of the list stored at <code>key</code>, only if <code>key</code> already exists and holds a list. In contrary to <a href=\"rpush\">RPUSH</a>, no operation will be performed when <code>key</code> does not yet exist.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the length of the list after the push operation.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"30f5baf3a9ef7d9ce9e3f1582d108f65\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSHX mylist \"World\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSHX myotherlist \"World\"</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 0 -1</span> <code>1) \"Hello\"\n2) \"World\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE myotherlist 0 -1</span> <code>(empty list or set)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/rpushx\" class=\"_attribution-link\">http://redis.io/commands/rpushx</a>\n  </p>\n</div>\n","save":"<h1 class=\"command\">SAVE</h1>\n<pre>SAVE</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>The <a href=\"save\">SAVE</a> commands performs a <strong>synchronous</strong> save of the dataset producing a <em>point in time</em> snapshot of all the data inside the Redis instance, in the form of an RDB file.</p> <p>You almost never want to call <a href=\"save\">SAVE</a> in production environments where it will block all the other clients. Instead usually <a href=\"bgsave\">BGSAVE</a> is used. However in case of issues preventing Redis to create the background saving child (for instance errors in the fork(2) system call), the <a href=\"save\">SAVE</a> command can be a good last resort to perform the dump of the latest dataset.</p> <p>Please refer to the <a href=\"http://redis.io/topics/persistence\">persistence documentation</a> for detailed information.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: The commands returns OK on success.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/save\" class=\"_attribution-link\">http://redis.io/commands/save</a>\n  </p>\n</div>\n","script-debug":"<h1 class=\"command\">SCRIPT</h1>\n<pre>SCRIPT DEBUG YES|SYNC|NO</pre>   <div class=\"metadata\"> <p><strong>Available since 3.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Set the debug mode for subsequent scripts executed with <a href=\"eval\">EVAL</a>. Redis includes a complete Lua debugger, codename LDB, that can be used to make the task of writing complex scripts much simpler. In debug mode Redis acts as a remote debugging server and a client, such as <code>redis-cli</code>, can execute scripts step by step, set breakpoints, inspect variables and more - for additional information about LDB refer to the <a href=\"http://redis.io/topics/ldb\">Redis Lua debugger</a> page.</p> <p><strong>Important note:</strong> avoid debugging Lua scripts using your Redis production server. Use a development server instead.</p> <p>LDB can be enabled in one of two modes: asynchronous or synchronous. In asynchronous mode the server creates a forked debugging session that does not block and all changes to the data are <strong>rolled back</strong> after the session finishes, so debugging can be restarted using the same initial state. The alternative synchronous debug mode blocks the server while the debugging session is active and retains all changes to the data set once it ends.</p> <ul> <li>\n<code>YES</code>. Enable non-blocking asynchronous debugging of Lua scripts (changes are discarded).</li> <li>\n<a href=\"sync\">SYNC</a>. Enable blocking synchronous debugging of Lua scripts (saves changes to data).</li> <li>\n<code>NO</code>. Disables scripts debug mode.</li> </ul> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code>.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/script-debug\" class=\"_attribution-link\">http://redis.io/commands/script-debug</a>\n  </p>\n</div>\n","scard":"<h1 class=\"command\">SCARD</h1>\n<pre>SCARD key</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns the set cardinality (number of elements) of the set stored at <code>key</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the cardinality (number of elements) of the set, or <code>0</code> if <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"181dea31a81368b8c28bbb2ef7be6ea0\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"World\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SCARD myset</span> <code>(integer) 2</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/scard\" class=\"_attribution-link\">http://redis.io/commands/scard</a>\n  </p>\n</div>\n","script-flush":"<h1 class=\"command\">SCRIPT</h1>\n<pre>SCRIPT FLUSH</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(N) with N being the number of scripts in cache</p> </div> <p>Flush the Lua scripts cache.</p> <p>Please refer to the <a href=\"eval\">EVAL</a> documentation for detailed information about Redis Lua scripting.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/script-flush\" class=\"_attribution-link\">http://redis.io/commands/script-flush</a>\n  </p>\n</div>\n","script-kill":"<h1 class=\"command\">SCRIPT</h1>\n<pre>SCRIPT KILL</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Kills the currently executing Lua script, assuming no write operation was yet performed by the script.</p> <p>This command is mainly useful to kill a script that is running for too much time(for instance because it entered an infinite loop because of a bug). The script will be killed and the client currently blocked into EVAL will see the command returning with an error.</p> <p>If the script already performed write operations it can not be killed in this way because it would violate Lua script atomicity contract. In such a case only <code>SHUTDOWN NOSAVE</code> is able to kill the script, killing the Redis process in an hard way preventing it to persist with half-written information.</p> <p>Please refer to the <a href=\"eval\">EVAL</a> documentation for detailed information about Redis Lua scripting.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/script-kill\" class=\"_attribution-link\">http://redis.io/commands/script-kill</a>\n  </p>\n</div>\n","script-load":"<h1 class=\"command\">SCRIPT</h1>\n<pre>SCRIPT LOAD script</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(N) with N being the length in bytes of the script body.</p> </div> <p>Load a script into the scripts cache, without executing it. After the specified command is loaded into the script cache it will be callable using <a href=\"evalsha\">EVALSHA</a> with the correct SHA1 digest of the script, exactly like after the first successful invocation of <a href=\"eval\">EVAL</a>.</p> <p>The script is guaranteed to stay in the script cache forever (unless <code>SCRIPT\nFLUSH</code> is called).</p> <p>The command works in the same way even if the script was already present in the script cache.</p> <p>Please refer to the <a href=\"eval\">EVAL</a> documentation for detailed information about Redis Lua scripting.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a> This command returns the SHA1 digest of the script added into the script cache.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/script-load\" class=\"_attribution-link\">http://redis.io/commands/script-load</a>\n  </p>\n</div>\n","select":"<h1 class=\"command\">SELECT</h1>\n<pre>SELECT index</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>Select the DB with having the specified zero-based numeric index. New connections always use DB 0.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/select\" class=\"_attribution-link\">http://redis.io/commands/select</a>\n  </p>\n</div>\n","setex":"<h1 class=\"command\">SETEX</h1>\n<pre>SETEX key seconds value</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Set <code>key</code> to hold the string <code>value</code> and set <code>key</code> to timeout after a given number of seconds. This command is equivalent to executing the following commands:</p> <pre>SET mykey value\nEXPIRE mykey seconds\n</pre> <p><a href=\"setex\">SETEX</a> is atomic, and can be reproduced by using the previous two commands inside an <a href=\"multi\">MULTI</a> / <a href=\"exec\">EXEC</a> block. It is provided as a faster alternative to the given sequence of operations, because this operation is very common when Redis is used as a cache.</p> <p>An error is returned when <code>seconds</code> is invalid.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p> <h2>Examples</h2> <div class=\"example\" data-session=\"7b657b0cc9007b04bb75a254765282a3\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SETEX mykey 10 \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TTL mykey</span> <code>(integer) 10</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET mykey</span> <code>\"Hello\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/setex\" class=\"_attribution-link\">http://redis.io/commands/setex</a>\n  </p>\n</div>\n","sadd":"<h1 class=\"command\">SADD</h1>\n<pre>SADD key member [member ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of members to be added.</p> </div> <p>Add the specified members to the set stored at <code>key</code>. Specified members that are already a member of this set are ignored. If <code>key</code> does not exist, a new set is created before adding the specified members.</p> <p>An error is returned when the value stored at <code>key</code> is not a set.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of elements that were added to the set, not including all the elements already present into the set.</p> <h2>History</h2> <ul> <li>\n<code>&gt;= 2.4</code>: Accepts multiple <code>member</code> arguments. Redis versions before 2.4 are only able to add a single member per call.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"574b26374c1be09cb32111a5340d7c68\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"World\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"World\"</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SMEMBERS myset</span> <code>1) \"Hello\"\n2) \"World\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/sadd\" class=\"_attribution-link\">http://redis.io/commands/sadd</a>\n  </p>\n</div>\n","sismember":"<h1 class=\"command\">SISMEMBER</h1>\n<pre>SISMEMBER key member</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns if <code>member</code> is a member of the set stored at <code>key</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if the element is a member of the set.</li> <li>\n<code>0</code> if the element is not a member of the set, or if <code>key</code> does not exist.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"a1c3a7807d0c1837d78e8b7a98a97e36\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SISMEMBER myset \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SISMEMBER myset \"two\"</span> <code>(integer) 0</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/sismember\" class=\"_attribution-link\">http://redis.io/commands/sismember</a>\n  </p>\n</div>\n","shutdown":"<h1 class=\"command\">SHUTDOWN</h1>\n<pre>SHUTDOWN [NOSAVE|SAVE]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>The command behavior is the following:</p> <ul> <li>Stop all the clients.</li> <li>Perform a blocking SAVE if at least one <strong>save point</strong> is configured.</li> <li>Flush the Append Only File if AOF is enabled.</li> <li>Quit the server.</li> </ul> <p>If persistence is enabled this commands makes sure that Redis is switched off without the lost of any data. This is not guaranteed if the client uses simply <a href=\"save\">SAVE</a> and then <a href=\"quit\">QUIT</a> because other clients may alter the DB data between the two commands.</p> <p>Note: A Redis instance that is configured for not persisting on disk (no AOF configured, nor \"save\" directive) will not dump the RDB file on <a href=\"shutdown\">SHUTDOWN</a>, as usually you don't want Redis instances used only for caching to block on when shutting down.</p> <h2>SAVE and NOSAVE modifiers</h2> <p>It is possible to specify an optional modifier to alter the behavior of the command. Specifically:</p> <ul> <li>\n<strong>SHUTDOWN SAVE</strong> will force a DB saving operation even if no save points are configured.</li> <li>\n<strong>SHUTDOWN NOSAVE</strong> will prevent a DB saving operation even if one or more save points are configured. (You can think at this variant as an hypothetical <strong>ABORT</strong> command that just stops the server).</li> </ul> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a> on error. On success nothing is returned since the server quits and the connection is closed.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/shutdown\" class=\"_attribution-link\">http://redis.io/commands/shutdown</a>\n  </p>\n</div>\n","script-exists":"<h1 class=\"command\">SCRIPT</h1>\n<pre>SCRIPT EXISTS script [script ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).</p> </div> <p>Returns information about the existence of the scripts in the script cache.</p> <p>This command accepts one or more SHA1 digests and returns a list of ones or zeros to signal if the scripts are already defined or not inside the script cache. This can be useful before a pipelining operation to ensure that scripts are loaded (and if not, to load them using <a href=\"script-load\">SCRIPT LOAD</a>) so that the pipelining operation can be performed solely using <a href=\"evalsha\">EVALSHA</a> instead of <a href=\"eval\">EVAL</a> to save bandwidth.</p> <p>Please refer to the <a href=\"eval\">EVAL</a> documentation for detailed information about Redis Lua scripting.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a> The command returns an array of integers that correspond to the specified SHA1 digest arguments. For every corresponding SHA1 digest of a script that actually exists in the script cache, an 1 is returned, otherwise 0 is returned.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/script-exists\" class=\"_attribution-link\">http://redis.io/commands/script-exists</a>\n  </p>\n</div>\n","sinter":"<h1 class=\"command\">SINTER</h1>\n<pre>SINTER key [key ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.</p> </div> <p>Returns the members of the set resulting from the intersection of all the given sets.</p> <p>For example:</p> <pre>key1 = {a,b,c,d}\nkey2 = {c}\nkey3 = {a,c,e}\nSINTER key1 key2 key3 = {c}\n</pre> <p>Keys that do not exist are considered to be empty sets. With one of the keys being an empty set, the resulting set is also empty (since set intersection with an empty set always results in an empty set).</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list with members of the resulting set.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"ae8a2dc608a91a83107200419d692c39\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"a\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"b\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"c\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"c\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"d\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"e\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SINTER key1 key2</span> <code>1) \"c\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/sinter\" class=\"_attribution-link\">http://redis.io/commands/sinter</a>\n  </p>\n</div>\n","hmset":"<h1 class=\"command\">HMSET</h1>\n<pre>HMSET key field value [field value ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of fields being set.</p> </div> <p>Sets the specified fields to their respective values in the hash stored at <code>key</code>. This command overwrites any existing fields in the hash. If <code>key</code> does not exist, a new key holding a hash is created.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p> <h2>Examples</h2> <div class=\"example\" data-session=\"dc59ebbe458d95e95d3f3f50d90e879c\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HMSET myhash field1 \"Hello\" field2 \"World\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HGET myhash field1</span> <code>\"Hello\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">HGET myhash field2</span> <code>\"World\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hmset\" class=\"_attribution-link\">http://redis.io/commands/hmset</a>\n  </p>\n</div>\n","sdiff":"<h1 class=\"command\">SDIFF</h1>\n<pre>SDIFF key [key ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the total number of elements in all given sets.</p> </div> <p>Returns the members of the set resulting from the difference between the first set and all the successive sets.</p> <p>For example:</p> <pre>key1 = {a,b,c,d}\nkey2 = {c}\nkey3 = {a,c,e}\nSDIFF key1 key2 key3 = {b,d}\n</pre> <p>Keys that do not exist are considered to be empty sets.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list with members of the resulting set.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"5ea19e7fe6214b6c765385a951cf5762\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"a\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"b\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"c\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"c\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"d\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"e\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SDIFF key1 key2</span> <code>1) \"b\"\n2) \"a\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/sdiff\" class=\"_attribution-link\">http://redis.io/commands/sdiff</a>\n  </p>\n</div>\n","sdiffstore":"<h1 class=\"command\">SDIFFSTORE</h1>\n<pre>SDIFFSTORE destination key [key ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the total number of elements in all given sets.</p> </div> <p>This command is equal to <a href=\"sdiff\">SDIFF</a>, but instead of returning the resulting set, it is stored in <code>destination</code>.</p> <p>If <code>destination</code> already exists, it is overwritten.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of elements in the resulting set.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"d33a7ca08ab135cf54f5f473650f7cb5\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"a\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"b\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"c\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"c\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"d\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"e\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SDIFFSTORE key key1 key2</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SMEMBERS key</span> <code>1) \"b\"\n2) \"a\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/sdiffstore\" class=\"_attribution-link\">http://redis.io/commands/sdiffstore</a>\n  </p>\n</div>\n","setbit":"<h1 class=\"command\">SETBIT</h1>\n<pre>SETBIT key offset value</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Sets or clears the bit at <em>offset</em> in the string value stored at <em>key</em>.</p> <p>The bit is either set or cleared depending on <em>value</em>, which can be either 0 or 1. When <em>key</em> does not exist, a new string value is created. The string is grown to make sure it can hold a bit at <em>offset</em>. The <em>offset</em> argument is required to be greater than or equal to 0, and smaller than 2<sup>32</sup> (this limits bitmaps to 512MB). When the string at <em>key</em> is grown, added bits are set to 0.</p> <p><strong>Warning</strong>: When setting the last possible bit (<em>offset</em> equal to 2<sup>32</sup> -1) and the string value stored at <em>key</em> does not yet hold a string value, or holds a small string value, Redis needs to allocate all intermediate memory which can block the server for some time. On a 2010 MacBook Pro, setting bit number 2<sup>32</sup> -1 (512MB allocation) takes ~300ms, setting bit number 2<sup>30</sup> -1 (128MB allocation) takes ~80ms, setting bit number 2<sup>28</sup> -1 (32MB allocation) takes ~30ms and setting bit number 2<sup>26</sup> -1 (8MB allocation) takes ~8ms. Note that once this first allocation is done, subsequent calls to <a href=\"setbit\">SETBIT</a> for the same <em>key</em> will not have the allocation overhead.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the original bit value stored at <em>offset</em>.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"ad527ce6868c23a184417a21da8fa49f\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SETBIT mykey 7 1</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SETBIT mykey 7 0</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET mykey</span> <code>\"\\u0000\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/setbit\" class=\"_attribution-link\">http://redis.io/commands/setbit</a>\n  </p>\n</div>\n","setnx":"<h1 class=\"command\">SETNX</h1>\n<pre>SETNX key value</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Set <code>key</code> to hold string <code>value</code> if <code>key</code> does not exist. In that case, it is equal to <a href=\"set\">SET</a>. When <code>key</code> already holds a value, no operation is performed. <a href=\"setnx\">SETNX</a> is short for \"<strong>SET</strong> if <strong>N</strong>ot e<strong>X</strong>ists\".</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if the key was set</li> <li>\n<code>0</code> if the key was not set</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"a9e55742130a81d6f1efe311553206e8\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SETNX mykey \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SETNX mykey \"World\"</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET mykey</span> <code>\"Hello\"</code>\n</div> <h2>Design pattern: Locking with <code>SETNX</code>\n</h2> <p><strong>Please note that:</strong></p> <ol> <li>The following pattern is discouraged in favor of <a href=\"http://redis.io/topics/distlock\">the Redlock algorithm</a> which is only a bit more complex to implement, but offers better guarantees and is fault tolerant.</li> <li>We document the old pattern anyway because certain existing implementations link to this page as a reference. Moreover it is an interesting example of how Redis commands can be used in order to mount programming primitives.</li> <li>Anyway even assuming a single-instance locking primitive, starting with 2.6.12 it is possible to create a much simpler locking primitive, equivalent to the one discussed here, using the <a href=\"set\">SET</a> command to acquire the lock, and a simple Lua script to release the lock. The pattern is documented in the <a href=\"set\">SET</a> command page.</li> </ol> <p>That said, <a href=\"setnx\">SETNX</a> can be used, and was historically used, as a locking primitive. For example, to acquire the lock of the key <code>foo</code>, the client could try the following:</p> <pre>SETNX lock.foo &lt;current Unix time + lock timeout + 1&gt;\n</pre> <p>If <a href=\"setnx\">SETNX</a> returns <code>1</code> the client acquired the lock, setting the <code>lock.foo</code> key to the Unix time at which the lock should no longer be considered valid. The client will later use <code>DEL lock.foo</code> in order to release the lock.</p> <p>If <a href=\"setnx\">SETNX</a> returns <code>0</code> the key is already locked by some other client. We can either return to the caller if it's a non blocking lock, or enter a loop retrying to hold the lock until we succeed or some kind of timeout expires.</p> <h3>Handling deadlocks</h3> <p>In the above locking algorithm there is a problem: what happens if a client fails, crashes, or is otherwise not able to release the lock? It's possible to detect this condition because the lock key contains a UNIX timestamp. If such a timestamp is equal to the current Unix time the lock is no longer valid.</p> <p>When this happens we can't just call <a href=\"del\">DEL</a> against the key to remove the lock and then try to issue a <a href=\"setnx\">SETNX</a>, as there is a race condition here, when multiple clients detected an expired lock and are trying to release it.</p> <ul> <li>C1 and C2 read <code>lock.foo</code> to check the timestamp, because they both received <code>0</code> after executing <a href=\"setnx\">SETNX</a>, as the lock is still held by C3 that crashed after holding the lock.</li> <li>C1 sends <code>DEL lock.foo</code>\n</li> <li>C1 sends <code>SETNX lock.foo</code> and it succeeds</li> <li>C2 sends <code>DEL lock.foo</code>\n</li> <li>C2 sends <code>SETNX lock.foo</code> and it succeeds</li> <li>\n<strong>ERROR</strong>: both C1 and C2 acquired the lock because of the race condition.</li> </ul> <p>Fortunately, it's possible to avoid this issue using the following algorithm. Let's see how C4, our sane client, uses the good algorithm:</p> <ul> <li><p>C4 sends <code>SETNX lock.foo</code> in order to acquire the lock</p></li> <li><p>The crashed client C3 still holds it, so Redis will reply with <code>0</code> to C4.</p></li> <li><p>C4 sends <code>GET lock.foo</code> to check if the lock expired. If it is not, it will sleep for some time and retry from the start.</p></li> <li>\n<p>Instead, if the lock is expired because the Unix time at <code>lock.foo</code> is older than the current Unix time, C4 tries to perform:</p> <pre>GETSET lock.foo &lt;current Unix timestamp + lock timeout + 1&gt;\n</pre>\n</li> <li><p>Because of the <a href=\"getset\">GETSET</a> semantic, C4 can check if the old value stored at <code>key</code> is still an expired timestamp. If it is, the lock was acquired.</p></li> <li><p>If another client, for instance C5, was faster than C4 and acquired the lock with the <a href=\"getset\">GETSET</a> operation, the C4 <a href=\"getset\">GETSET</a> operation will return a non expired timestamp. C4 will simply restart from the first step. Note that even if C4 set the key a bit a few seconds in the future this is not a problem.</p></li> </ul> <p>In order to make this locking algorithm more robust, a client holding a lock should always check the timeout didn't expire before unlocking the key with <a href=\"del\">DEL</a> because client failures can be complex, not just crashing but also blocking a lot of time against some operations and trying to issue <a href=\"del\">DEL</a> after a lot of time (when the LOCK is already held by another client).</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/setnx\" class=\"_attribution-link\">http://redis.io/commands/setnx</a>\n  </p>\n</div>\n","setrange":"<h1 class=\"command\">SETRANGE</h1>\n<pre>SETRANGE key offset value</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.</p> </div> <p>Overwrites part of the string stored at <em>key</em>, starting at the specified offset, for the entire length of <em>value</em>. If the offset is larger than the current length of the string at <em>key</em>, the string is padded with zero-bytes to make <em>offset</em> fit. Non-existing keys are considered as empty strings, so this command will make sure it holds a string large enough to be able to set <em>value</em> at <em>offset</em>.</p> <p>Note that the maximum offset that you can set is 2<sup>29</sup> -1 (536870911), as Redis Strings are limited to 512 megabytes. If you need to grow beyond this size, you can use multiple keys.</p> <p><strong>Warning</strong>: When setting the last possible byte and the string value stored at <em>key</em> does not yet hold a string value, or holds a small string value, Redis needs to allocate all intermediate memory which can block the server for some time. On a 2010 MacBook Pro, setting byte number 536870911 (512MB allocation) takes ~300ms, setting byte number 134217728 (128MB allocation) takes ~80ms, setting bit number 33554432 (32MB allocation) takes ~30ms and setting bit number 8388608 (8MB allocation) takes ~8ms. Note that once this first allocation is done, subsequent calls to <a href=\"setrange\">SETRANGE</a> for the same <em>key</em> will not have the allocation overhead.</p> <h2>Patterns</h2> <p>Thanks to <a href=\"setrange\">SETRANGE</a> and the analogous <a href=\"getrange\">GETRANGE</a> commands, you can use Redis strings as a linear array with <span class=\"math\">O(1) </span>random access. This is a very fast and efficient storage in many real world use cases.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the length of the string after it was modified by the command.</p> <h2>Examples</h2> <p>Basic usage:</p> <div class=\"example\" data-session=\"8f77f17c8336070d1d66a2b84fc9cc3d\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET key1 \"Hello World\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SETRANGE key1 6 \"Redis\"</span> <code>(integer) 11</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET key1</span> <code>\"Hello Redis\"</code>\n</div> <p>Example of zero padding:</p> <div class=\"example\" data-session=\"8f77f17c8336070d1d66a2b84fc9cc3d\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SETRANGE key2 6 \"Redis\"</span> <code>(integer) 11</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET key2</span> <code>\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000Redis\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/setrange\" class=\"_attribution-link\">http://redis.io/commands/setrange</a>\n  </p>\n</div>\n","sinterstore":"<h1 class=\"command\">SINTERSTORE</h1>\n<pre>SINTERSTORE destination key [key ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.</p> </div> <p>This command is equal to <a href=\"sinter\">SINTER</a>, but instead of returning the resulting set, it is stored in <code>destination</code>.</p> <p>If <code>destination</code> already exists, it is overwritten.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of elements in the resulting set.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"a11f6ef07e4a8e9b7549dce4f30f891f\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"a\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"b\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"c\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"c\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"d\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"e\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SINTERSTORE key key1 key2</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SMEMBERS key</span> <code>1) \"c\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/sinterstore\" class=\"_attribution-link\">http://redis.io/commands/sinterstore</a>\n  </p>\n</div>\n","slaveof":"<h1 class=\"command\">SLAVEOF</h1>\n<pre>SLAVEOF host port</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <p>The <a href=\"slaveof\">SLAVEOF</a> command can change the replication settings of a slave on the fly. If a Redis server is already acting as slave, the command <a href=\"slaveof\">SLAVEOF</a> NO ONE will turn off the replication, turning the Redis server into a MASTER. In the proper form <a href=\"slaveof\">SLAVEOF</a> hostname port will make the server a slave of another server listening at the specified hostname and port.</p> <p>If a server is already a slave of some master, <a href=\"slaveof\">SLAVEOF</a> hostname port will stop the replication against the old server and start the synchronization against the new one, discarding the old dataset.</p> <p>The form <a href=\"slaveof\">SLAVEOF</a> NO ONE will stop replication, turning the server into a MASTER, but will not discard the replication. So, if the old master stops working, it is possible to turn the slave into a master and set the application to use this new master in read/write. Later when the other Redis server is fixed, it can be reconfigured to work as a slave.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a></p> <p><strong>A note about slavery</strong>: it's unfortunate that originally the master-slave terminology was picked for databases. When Redis was designed the existing terminology was used without much analysis of alternatives, however a <strong>SLAVEOF NO ONE</strong> command was added as a freedom message. Instead of changing the terminology, that would require breaking backward compatible in the API and <a href=\"info\">INFO</a> output, we want to use this page to remember you about slavery, <strong>a crime against humanity now</strong> but something that was perpetuated <a href=\"https://en.wikipedia.org/wiki/Slavery\">throughout the whole human history</a>.</p> <p><em>If slavery is not wrong, nothing is wrong.</em> -- Abraham Lincoln</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/slaveof\" class=\"_attribution-link\">http://redis.io/commands/slaveof</a>\n  </p>\n</div>\n","slowlog":"<h1 class=\"command\">SLOWLOG</h1>\n<pre>SLOWLOG subcommand [argument]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.12.</strong></p> </div> <p>This command is used in order to read and reset the Redis slow queries log.</p> <h2>Redis slow log overview</h2> <p>The Redis Slow Log is a system to log queries that exceeded a specified execution time. The execution time does not include I/O operations like talking with the client, sending the reply and so forth, but just the time needed to actually execute the command (this is the only stage of command execution where the thread is blocked and can not serve other requests in the meantime).</p> <p>You can configure the slow log with two parameters: <em>slowlog-log-slower-than</em> tells Redis what is the execution time, in microseconds, to exceed in order for the command to get logged. Note that a negative number disables the slow log, while a value of zero forces the logging of every command. <em>slowlog-max-len</em> is the length of the slow log. The minimum value is zero. When a new command is logged and the slow log is already at its maximum length, the oldest one is removed from the queue of logged commands in order to make space.</p> <p>The configuration can be done by editing <code>redis.conf</code> or while the server is running using the <a href=\"config-get\">CONFIG GET</a> and <a href=\"config-set\">CONFIG SET</a> commands.</p> <h2>Reading the slow log</h2> <p>The slow log is accumulated in memory, so no file is written with information about the slow command executions. This makes the slow log remarkably fast at the point that you can enable the logging of all the commands (setting the <em>slowlog-log-slower-than</em> config parameter to zero) with minor performance hit.</p> <p>To read the slow log the <strong>SLOWLOG GET</strong> command is used, that returns every entry in the slow log. It is possible to return only the N most recent entries passing an additional argument to the command (for instance <strong>SLOWLOG GET 10</strong>).</p> <p>Note that you need a recent version of redis-cli in order to read the slow log output, since it uses some features of the protocol that were not formerly implemented in redis-cli (deeply nested multi bulk replies).</p> <h2>Output format</h2> <pre>redis 127.0.0.1:6379&gt; slowlog get 2\n1) 1) (integer) 14\n   2) (integer) 1309448221\n   3) (integer) 15\n   4) 1) \"ping\"\n2) 1) (integer) 13\n   2) (integer) 1309448128\n   3) (integer) 30\n   4) 1) \"slowlog\"\n      2) \"get\"\n      3) \"100\"\n</pre> <p>Every entry is composed of four fields:</p> <ul> <li>A unique progressive identifier for every slow log entry.</li> <li>The unix timestamp at which the logged command was processed.</li> <li>The amount of time needed for its execution, in microseconds.</li> <li>The array composing the arguments of the command.</li> </ul> <p>The entry's unique ID can be used in order to avoid processing slow log entries multiple times (for instance you may have a script sending you an email alert for every new slow log entry).</p> <p>The ID is never reset in the course of the Redis server execution, only a server restart will reset it.</p> <h2>Obtaining the current length of the slow log</h2> <p>It is possible to get just the length of the slow log using the command <strong>SLOWLOG LEN</strong>.</p> <h2>Resetting the slow log.</h2> <p>You can reset the slow log using the <strong>SLOWLOG RESET</strong> command. Once deleted the information is lost forever.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/slowlog\" class=\"_attribution-link\">http://redis.io/commands/slowlog</a>\n  </p>\n</div>\n","smembers":"<h1 class=\"command\">SMEMBERS</h1>\n<pre>SMEMBERS key</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the set cardinality.</p> </div> <p>Returns all the members of the set value stored at <code>key</code>.</p> <p>This has the same effect as running <a href=\"sinter\">SINTER</a> with one argument <code>key</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: all elements of the set.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"ffbaaf7e8b7ff1c78c1064fa586b2f87\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"Hello\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"World\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SMEMBERS myset</span> <code>1) \"Hello\"\n2) \"World\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/smembers\" class=\"_attribution-link\">http://redis.io/commands/smembers</a>\n  </p>\n</div>\n","smove":"<h1 class=\"command\">SMOVE</h1>\n<pre>SMOVE source destination member</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Move <code>member</code> from the set at <code>source</code> to the set at <code>destination</code>. This operation is atomic. In every given moment the element will appear to be a member of <code>source</code> <strong>or</strong> <code>destination</code> for other clients.</p> <p>If the source set does not exist or does not contain the specified element, no operation is performed and <code>0</code> is returned. Otherwise, the element is removed from the source set and added to the destination set. When the specified element already exists in the destination set, it is only removed from the source set.</p> <p>An error is returned if <code>source</code> or <code>destination</code> does not hold a set value.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>\n<code>1</code> if the element is moved.</li> <li>\n<code>0</code> if the element is not a member of <code>source</code> and no operation was performed.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"718ffdf6050a5979de5aad781335d0ae\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myotherset \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SMOVE myset myotherset \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SMEMBERS myset</span> <code>1) \"one\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SMEMBERS myotherset</span> <code>1) \"two\"\n2) \"three\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/smove\" class=\"_attribution-link\">http://redis.io/commands/smove</a>\n  </p>\n</div>\n","spop":"<h1 class=\"command\">SPOP</h1>\n<pre>SPOP key [count]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Removes and returns one or more random elements from the set value store at <code>key</code>.</p> <p>This operation is similar to <a href=\"srandmember\">SRANDMEMBER</a>, that returns one or more random elements from a set but does not remove it.</p> <p>The <code>count</code> argument will be available in a later version and is not available in 2.6, 2.8, 3.0</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the removed element, or <code>nil</code> when <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"47f6f7ce9fc8ff8f70364ce39c69edd1\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SPOP myset</span> <code>\"three\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SMEMBERS myset</span> <code>1) \"two\"\n2) \"one\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"four\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"five\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SPOP myset 3</span> <code>1) \"one\"\n2) \"four\"\n3) \"five\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SMEMBERS myset</span> <code>1) \"two\"</code>\n</div> <h2>Specification of the behavior when count is passed</h2> <p>If count is bigger than the number of elements inside the Set, the command will only return the whole set without additional elements.</p> <h2>Distribution of returned elements</h2> <p>Note that this command is not suitable when you need a guaranteed uniform distribution of the returned elements. For more information about the algorithms used for SPOP, look up both the Knuth sampling and Floyd sampling algorithms.</p> <h2>Count argument extension</h2> <p>Redis 3.2 will be the first version where an optional <code>count</code> argument can be passed to <a href=\"spop\">SPOP</a> in order to retrieve multiple elements in a single call. The implementation is already available in the <code>unstable</code> branch.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/spop\" class=\"_attribution-link\">http://redis.io/commands/spop</a>\n  </p>\n</div>\n","sort":"<h1 class=\"command\">SORT</h1>\n<pre>SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is currently O(N) as there is a copy step that will be avoided in next releases.</p> </div> <p>Returns or stores the elements contained in the <a href=\"http://redis.io/topics/data-types#lists\">list</a>, <a href=\"http://redis.io/topics/data-types#set\">set</a> or <a href=\"http://redis.io/topics/data-types#sorted-sets\">sorted set</a> at <code>key</code>. By default, sorting is numeric and elements are compared by their value interpreted as double precision floating point number. This is <a href=\"sort\">SORT</a> in its simplest form:</p> <pre>SORT mylist\n</pre> <p>Assuming <code>mylist</code> is a list of numbers, this command will return the same list with the elements sorted from small to large. In order to sort the numbers from large to small, use the <code>DESC</code> modifier:</p> <pre>SORT mylist DESC\n</pre> <p>When <code>mylist</code> contains string values and you want to sort them lexicographically, use the <code>ALPHA</code> modifier:</p> <pre>SORT mylist ALPHA\n</pre> <p>Redis is UTF-8 aware, assuming you correctly set the <code>!LC_COLLATE</code> environment variable.</p> <p>The number of returned elements can be limited using the <code>LIMIT</code> modifier. This modifier takes the <code>offset</code> argument, specifying the number of elements to skip and the <code>count</code> argument, specifying the number of elements to return from starting at <code>offset</code>. The following example will return 10 elements of the sorted version of <code>mylist</code>, starting at element 0 (<code>offset</code> is zero-based):</p> <pre>SORT mylist LIMIT 0 10\n</pre> <p>Almost all modifiers can be used together. The following example will return the first 5 elements, lexicographically sorted in descending order:</p> <pre>SORT mylist LIMIT 0 5 ALPHA DESC\n</pre> <h2>Sorting by external keys</h2> <p>Sometimes you want to sort elements using external keys as weights to compare instead of comparing the actual elements in the list, set or sorted set. Let's say the list <code>mylist</code> contains the elements <code>1</code>, <code>2</code> and <code>3</code> representing unique IDs of objects stored in <code>object_1</code>, <code>object_2</code> and <code>object_3</code>. When these objects have associated weights stored in <code>weight_1</code>, <code>weight_2</code> and <code>weight_3</code>, <a href=\"sort\">SORT</a> can be instructed to use these weights to sort <code>mylist</code> with the following statement:</p> <pre>SORT mylist BY weight_*\n</pre> <p>The <code>BY</code> option takes a pattern (equal to <code>weight_*</code> in this example) that is used to generate the keys that are used for sorting. These key names are obtained substituting the first occurrence of <code>*</code> with the actual value of the element in the list (<code>1</code>, <code>2</code> and <code>3</code> in this example).</p> <h2>Skip sorting the elements</h2> <p>The <code>BY</code> option can also take a non-existent key, which causes <a href=\"sort\">SORT</a> to skip the sorting operation. This is useful if you want to retrieve external keys (see the <code>GET</code> option below) without the overhead of sorting.</p> <pre>SORT mylist BY nosort\n</pre> <h2>Retrieving external keys</h2> <p>Our previous example returns just the sorted IDs. In some cases, it is more useful to get the actual objects instead of their IDs (<code>object_1</code>, <code>object_2</code> and <code>object_3</code>). Retrieving external keys based on the elements in a list, set or sorted set can be done with the following command:</p> <pre>SORT mylist BY weight_* GET object_*\n</pre> <p>The <code>GET</code> option can be used multiple times in order to get more keys for every element of the original list, set or sorted set.</p> <p>It is also possible to <code>GET</code> the element itself using the special pattern <code>#</code>:</p> <pre>SORT mylist BY weight_* GET object_* GET #\n</pre> <h2>Storing the result of a SORT operation</h2> <p>By default, <a href=\"sort\">SORT</a> returns the sorted elements to the client. With the <code>STORE</code> option, the result will be stored as a list at the specified key instead of being returned to the client.</p> <pre>SORT mylist BY weight_* STORE resultkey\n</pre> <p>An interesting pattern using <code>SORT ... STORE</code> consists in associating an <a href=\"expire\">EXPIRE</a> timeout to the resulting key so that in applications where the result of a <a href=\"sort\">SORT</a> operation can be cached for some time. Other clients will use the cached list instead of calling <a href=\"sort\">SORT</a> for every request. When the key will timeout, an updated version of the cache can be created by calling <code>SORT ... STORE</code> again.</p> <p>Note that for correctly implementing this pattern it is important to avoid multiple clients rebuilding the cache at the same time. Some kind of locking is needed here (for instance using <a href=\"setnx\">SETNX</a>).</p> <h2>Using hashes in <code>BY</code> and <code>GET</code>\n</h2> <p>It is possible to use <code>BY</code> and <code>GET</code> options against hash fields with the following syntax:</p> <pre>SORT mylist BY weight_*-&gt;fieldname GET object_*-&gt;fieldname\n</pre> <p>The string <code>-&gt;</code> is used to separate the key name from the hash field name. The key is substituted as documented above, and the hash stored at the resulting key is accessed to retrieve the specified hash field.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of sorted elements.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/sort\" class=\"_attribution-link\">http://redis.io/commands/sort</a>\n  </p>\n</div>\n","srem":"<h1 class=\"command\">SREM</h1>\n<pre>SREM key member [member ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of members to be removed.</p> </div> <p>Remove the specified members from the set stored at <code>key</code>. Specified members that are not a member of this set are ignored. If <code>key</code> does not exist, it is treated as an empty set and this command returns <code>0</code>.</p> <p>An error is returned when the value stored at <code>key</code> is not a set.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of members that were removed from the set, not including non existing members.</p> <h2>History</h2> <ul> <li>\n<code>&gt;= 2.4</code>: Accepts multiple <code>member</code> arguments. Redis versions older than 2.4 can only remove a set member per call.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"792def4f28fed199fcf38ff8d2843422\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SREM myset \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SREM myset \"four\"</span> <code>(integer) 0</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SMEMBERS myset</span> <code>1) \"three\"\n2) \"two\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/srem\" class=\"_attribution-link\">http://redis.io/commands/srem</a>\n  </p>\n</div>\n","sunion":"<h1 class=\"command\">SUNION</h1>\n<pre>SUNION key [key ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the total number of elements in all given sets.</p> </div> <p>Returns the members of the set resulting from the union of all the given sets.</p> <p>For example:</p> <pre>key1 = {a,b,c,d}\nkey2 = {c}\nkey3 = {a,c,e}\nSUNION key1 key2 key3 = {a,b,c,d,e}\n</pre> <p>Keys that do not exist are considered to be empty sets.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list with members of the resulting set.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"be716c01fdca670302d5ba6c734f36db\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"a\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"b\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"c\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"c\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"d\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"e\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SUNION key1 key2</span> <code>1) \"b\"\n2) \"a\"\n3) \"c\"\n4) \"e\"\n5) \"d\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/sunion\" class=\"_attribution-link\">http://redis.io/commands/sunion</a>\n  </p>\n</div>\n","set":"<h1 class=\"command\">SET</h1>\n<pre>SET key value [EX seconds] [PX milliseconds] [NX|XX]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Set <code>key</code> to hold the string <code>value</code>. If <code>key</code> already holds a value, it is overwritten, regardless of its type. Any previous time to live associated with the key is discarded on successful <a href=\"set\">SET</a> operation.</p> <h2>Options</h2> <p>Starting with Redis 2.6.12 <a href=\"set\">SET</a> supports a set of options that modify its behavior:</p> <ul> <li>\n<code>EX</code> <em>seconds</em> -- Set the specified expire time, in seconds.</li> <li>\n<code>PX</code> <em>milliseconds</em> -- Set the specified expire time, in milliseconds.</li> <li>\n<code>NX</code> -- Only set the key if it does not already exist.</li> <li>\n<code>XX</code> -- Only set the key if it already exist.</li> </ul> <p>Note: Since the <a href=\"set\">SET</a> command options can replace <a href=\"setnx\">SETNX</a>, <a href=\"setex\">SETEX</a>, <a href=\"psetex\">PSETEX</a>, it is possible that in future versions of Redis these three commands will be deprecated and finally removed.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: <code>OK</code> if <a href=\"set\">SET</a> was executed correctly. <a href=\"http://redis.io/topics/protocol#nil-reply\">Null reply</a>: a Null Bulk Reply is returned if the <a href=\"set\">SET</a> operation was not performed because the user specified the <code>NX</code> or <code>XX</code> option but the condition was not met.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"eebeff5a9a8f0a3dc2649e6f6302d536\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">GET mykey</span> <code>\"Hello\"</code>\n</div> <h2>Patterns</h2> <p><strong>Note:</strong> The following pattern is discouraged in favor of <a href=\"http://redis.io/topics/distlock\">the Redlock algorithm</a> which is only a bit more complex to implement, but offers better guarantees and is fault tolerant.</p> <p>The command <code>SET resource-name anystring NX EX max-lock-time</code> is a simple way to implement a locking system with Redis.</p> <p>A client can acquire the lock if the above command returns <code>OK</code> (or retry after some time if the command returns Nil), and remove the lock just using <a href=\"del\">DEL</a>.</p> <p>The lock will be auto-released after the expire time is reached.</p> <p>It is possible to make this system more robust modifying the unlock schema as follows:</p> <ul> <li>Instead of setting a fixed string, set a non-guessable large random string, called token.</li> <li>Instead of releasing the lock with <a href=\"del\">DEL</a>, send a script that only removes the key if the value matches.</li> </ul> <p>This avoids that a client will try to release the lock after the expire time deleting the key created by another client that acquired the lock later.</p> <p>An example of unlock script would be similar to the following:</p> <pre>if redis.call(\"get\",KEYS[1]) == ARGV[1]\nthen\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n</pre> <p>The script should be called with <code>EVAL ...script... 1 resource-name token-value</code></p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/set\" class=\"_attribution-link\">http://redis.io/commands/set</a>\n  </p>\n</div>\n","srandmember":"<h1 class=\"command\">SRANDMEMBER</h1>\n<pre>SRANDMEMBER key [count]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.</p> </div> <p>When called with just the <code>key</code> argument, return a random element from the set value stored at <code>key</code>.</p> <p>Starting from Redis version 2.6, when called with the additional <code>count</code> argument, return an array of <code>count</code> <strong>distinct elements</strong> if <code>count</code> is positive. If called with a negative <code>count</code> the behavior changes and the command is allowed to return the <strong>same element multiple times</strong>. In this case the number of returned elements is the absolute value of the specified <code>count</code>.</p> <p>When called with just the key argument, the operation is similar to <a href=\"spop\">SPOP</a>, however while <a href=\"spop\">SPOP</a> also removes the randomly selected element from the set, <a href=\"srandmember\">SRANDMEMBER</a> will just return a random element without altering the original set in any way.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: without the additional <code>count</code> argument the command returns a Bulk Reply with the randomly selected element, or <code>nil</code> when <code>key</code> does not exist. <a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: when the additional <code>count</code> argument is passed the command returns an array of elements, or an empty array when <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"e0f51ba3cf349dd7b652b2281a2897db\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD myset one two three</span> <code>(integer) 3</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SRANDMEMBER myset</span> <code>\"one\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SRANDMEMBER myset 2</span> <code>1) \"two\"\n2) \"three\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SRANDMEMBER myset -5</span> <code>1) \"two\"\n2) \"one\"\n3) \"two\"\n4) \"three\"\n5) \"two\"</code>\n</div> <h2>Specification of the behavior when count is passed</h2> <p>When a count argument is passed and is positive, the elements are returned as if every selected element is removed from the set (like the extraction of numbers in the game of Bingo). However elements are <strong>not removed</strong> from the Set. So basically:</p> <ul> <li>No repeated elements are returned.</li> <li>If count is bigger than the number of elements inside the Set, the command will only return the whole set without additional elements.</li> </ul> <p>When instead the count is negative, the behavior changes and the extraction happens as if you put the extracted element inside the bag again after every extraction, so repeated elements are possible, and the number of elements requested is always returned as we can repeat the same elements again and again, with the exception of an empty Set (non existing key) that will always produce an empty array as a result.</p> <h2>Distribution of returned elements</h2> <p>The distribution of the returned elements is far from perfect when the number of elements in the set is small, this is due to the fact that we used an approximated random element function that does not really guarantees good distribution.</p> <p>The algorithm used, that is implemented inside dict.c, samples the hash table buckets to find a non-empty one. Once a non empty bucket is found, since we use chaining in our hash table implementation, the number of elements inside the bucked is checked and a random element is selected.</p> <p>This means that if you have two non-empty buckets in the entire hash table, and one has three elements while one has just one, the element that is alone in its bucket will be returned with much higher probability.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/srandmember\" class=\"_attribution-link\">http://redis.io/commands/srandmember</a>\n  </p>\n</div>\n","strlen":"<h1 class=\"command\">STRLEN</h1>\n<pre>STRLEN key</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns the length of the string value stored at <code>key</code>. An error is returned when <code>key</code> holds a non-string value.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the length of the string at <code>key</code>, or <code>0</code> when <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"a49b7a77f08b0ac018ca7896eedca673\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello world\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">STRLEN mykey</span> <code>(integer) 11</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">STRLEN nonexisting</span> <code>(integer) 0</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/strlen\" class=\"_attribution-link\">http://redis.io/commands/strlen</a>\n  </p>\n</div>\n","subscribe":"<h1 class=\"command\">SUBSCRIBE</h1>\n<pre>SUBSCRIBE channel [channel ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of channels to subscribe to.</p> </div> <p>Subscribes the client to the specified channels.</p> <p>Once the client enters the subscribed state it is not supposed to issue any other commands, except for additional <a href=\"subscribe\">SUBSCRIBE</a>, <a href=\"psubscribe\">PSUBSCRIBE</a>, <a href=\"unsubscribe\">UNSUBSCRIBE</a> and <a href=\"punsubscribe\">PUNSUBSCRIBE</a> commands.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/subscribe\" class=\"_attribution-link\">http://redis.io/commands/subscribe</a>\n  </p>\n</div>\n","sunionstore":"<h1 class=\"command\">SUNIONSTORE</h1>\n<pre>SUNIONSTORE destination key [key ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the total number of elements in all given sets.</p> </div> <p>This command is equal to <a href=\"sunion\">SUNION</a>, but instead of returning the resulting set, it is stored in <code>destination</code>.</p> <p>If <code>destination</code> already exists, it is overwritten.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of elements in the resulting set.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"332f3d72bef2147762b81644bd82a875\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"a\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"b\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key1 \"c\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"c\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"d\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key2 \"e\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SUNIONSTORE key key1 key2</span> <code>(integer) 5</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SMEMBERS key</span> <code>1) \"b\"\n2) \"a\"\n3) \"c\"\n4) \"e\"\n5) \"d\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/sunionstore\" class=\"_attribution-link\">http://redis.io/commands/sunionstore</a>\n  </p>\n</div>\n","sync":"<h1 class=\"command\">SYNC</h1>\n<pre>SYNC</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> </div> <h2>Examples</h2> <h2>Return value</h2>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/sync\" class=\"_attribution-link\">http://redis.io/commands/sync</a>\n  </p>\n</div>\n","ttl":"<h1 class=\"command\">TTL</h1>\n<pre>TTL key</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns the remaining time to live of a key that has a timeout. This introspection capability allows a Redis client to check how many seconds a given key will continue to be part of the dataset.</p> <p>In Redis 2.6 or older the command returns <code>-1</code> if the key does not exist or if the key exist but has no associated expire.</p> <p>Starting with Redis 2.8 the return value in case of error changed:</p> <ul> <li>The command returns <code>-2</code> if the key does not exist.</li> <li>The command returns <code>-1</code> if the key exists but has no associated expire.</li> </ul> <p>See also the <a href=\"pttl\">PTTL</a> command that returns the same information with milliseconds resolution (Only available in Redis 2.6 or greater).</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: TTL in seconds, or a negative value in order to signal an error (see the description above).</p> <h2>Examples</h2> <div class=\"example\" data-session=\"b00f664b4ef03707040745e5ec69192e\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET mykey \"Hello\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">EXPIRE mykey 10</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TTL mykey</span> <code>(integer) 10</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/ttl\" class=\"_attribution-link\">http://redis.io/commands/ttl</a>\n  </p>\n</div>\n","lrange":"<h1 class=\"command\">LRANGE</h1>\n<pre>LRANGE key start stop</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.</p> </div> <p>Returns the specified elements of the list stored at <code>key</code>. The offsets <code>start</code> and <code>stop</code> are zero-based indexes, with <code>0</code> being the first element of the list (the head of the list), <code>1</code> being the next element and so on.</p> <p>These offsets can also be negative numbers indicating offsets starting at the end of the list. For example, <code>-1</code> is the last element of the list, <code>-2</code> the penultimate, and so on.</p> <h2>Consistency with range functions in various programming languages</h2> <p>Note that if you have a list of numbers from 0 to 100, <code>LRANGE list 0 10</code> will return 11 elements, that is, the rightmost item is included. This <strong>may or may not</strong> be consistent with behavior of range-related functions in your programming language of choice (think Ruby's <code>Range.new</code>, <code>Array#slice</code> or Python's <code>range()</code> function).</p> <h2>Out-of-range indexes</h2> <p>Out of range indexes will not produce an error. If <code>start</code> is larger than the end of the list, an empty list is returned. If <code>stop</code> is larger than the actual end of the list, Redis will treat it like the last element of the list.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of elements in the specified range.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"0718966314b3dac864a78c7dc4c4035a\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"two\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">RPUSH mylist \"three\"</span> <code>(integer) 3</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 0 0</span> <code>1) \"one\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist -3 2</span> <code>1) \"one\"\n2) \"two\"\n3) \"three\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist -100 100</span> <code>1) \"one\"\n2) \"two\"\n3) \"three\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LRANGE mylist 5 10</span> <code>(empty list or set)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/lrange\" class=\"_attribution-link\">http://redis.io/commands/lrange</a>\n  </p>\n</div>\n","time":"<h1 class=\"command\">TIME</h1>\n<pre>TIME</pre>   <div class=\"metadata\"> <p><strong>Available since 2.6.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>The <a href=\"time\">TIME</a> command returns the current server time as a two items lists: a Unix timestamp and the amount of microseconds already elapsed in the current second. Basically the interface is very similar to the one of the <code>gettimeofday</code> system call.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>, specifically:</p> <p>A multi bulk reply containing two elements:</p> <ul> <li>unix time in seconds.</li> <li>microseconds.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"e4003cf963d6857542492a131fbbb469\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TIME</span> <code>1) \"1469992167\"\n2) \"433303\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TIME</span> <code>1) \"1469992167\"\n2) \"434165\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/time\" class=\"_attribution-link\">http://redis.io/commands/time</a>\n  </p>\n</div>\n","type":"<h1 class=\"command\">TYPE</h1>\n<pre>TYPE key</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns the string representation of the type of the value stored at <code>key</code>. The different types that can be returned are: <code>string</code>, <code>list</code>, <code>set</code>, <code>zset</code> and <code>hash</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: type of <code>key</code>, or <code>none</code> when <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"f1de88fa75b2d24b8aa5909d57f72a4b\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SET key1 \"value\"</span> <code>OK</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">LPUSH key2 \"value\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">SADD key3 \"value\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TYPE key1</span> <code>string</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TYPE key2</span> <code>list</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">TYPE key3</span> <code>set</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/type\" class=\"_attribution-link\">http://redis.io/commands/type</a>\n  </p>\n</div>\n","unsubscribe":"<h1 class=\"command\">UNSUBSCRIBE</h1>\n<pre>UNSUBSCRIBE [channel [channel ...]]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N) where N is the number of clients already subscribed to a channel.</p> </div> <p>Unsubscribes the client from the given channels, or from all of them if none is given.</p> <p>When no channels are specified, the client is unsubscribed from all the previously subscribed channels. In this case, a message for every unsubscribed channel will be sent to the client.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/unsubscribe\" class=\"_attribution-link\">http://redis.io/commands/unsubscribe</a>\n  </p>\n</div>\n","unwatch":"<h1 class=\"command\">UNWATCH</h1>\n<pre>UNWATCH</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Flushes all the previously watched keys for a <a href=\"http://redis.io/topics/transactions\">transaction</a>.</p> <p>If you call <a href=\"exec\">EXEC</a> or <a href=\"discard\">DISCARD</a>, there's no need to manually call <a href=\"unwatch\">UNWATCH</a>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: always <code>OK</code>.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/unwatch\" class=\"_attribution-link\">http://redis.io/commands/unwatch</a>\n  </p>\n</div>\n","wait":"<h1 class=\"command\">WAIT</h1>\n<pre>WAIT numslaves timeout</pre>   <div class=\"metadata\"> <p><strong>Available since 3.0.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>This command blocks the current client until all the previous write commands are successfully transferred and acknowledged by at least the specified number of slaves. If the timeout, specified in milliseconds, is reached, the command returns even if the specified number of slaves were not yet reached.</p> <p>The command <strong>will always return</strong> the number of slaves that acknowledged the write commands sent before the <a href=\"wait\">WAIT</a> command, both in the case where the specified number of slaves are reached, or when the timeout is reached.</p> <p>A few remarks:</p> <ol> <li>When <a href=\"wait\">WAIT</a> returns, all the previous write commands sent in the context of the current connection are guaranteed to be received by the number of slaves returned by <a href=\"wait\">WAIT</a>.</li> <li>If the command is sent as part of a <a href=\"multi\">MULTI</a> transaction, the command does not block but instead just return ASAP the number of slaves that acknowledged the previous write commands.</li> <li>A timeout of 0 means to block forever.</li> <li>Since <a href=\"wait\">WAIT</a> returns the number of slaves reached both in case of failure and success, the client should check that the returned value is equal or greater to the replication level it demanded.</li> </ol> <h2>Consistency and WAIT</h2> <p>Note that <a href=\"wait\">WAIT</a> does not make Redis a strongly consistent store: while synchronous replication is part of a replicated state machine, it is not the only thing needed. However in the context of Sentinel or Redis Cluster failover, <a href=\"wait\">WAIT</a> improves the real world data safety.</p> <p>Specifically if a given write is transferred to one or more slaves, it is more likely (but not guaranteed) that if the master fails, we'll be able to promote, during a failover, a slave that received the write: both Sentinel and Redis Cluster will do a best-effort attempt to promote the best slave among the set of available slaves.</p> <p>However this is just a best-effort attempt so it is possible to still lose a write synchronously replicated to multiple slaves.</p> <h2>Implementation details</h2> <p>Since the introduction of partial resynchronization with slaves (PSYNC feature) Redis slaves asynchronously ping their master with the offset they already processed in the replication stream. This is used in multiple ways:</p> <ol> <li>Detect timed out slaves.</li> <li>Perform a partial resynchronization after a disconnection.</li> <li>Implement <a href=\"wait\">WAIT</a>.</li> </ol> <p>In the specific case of the implementation of <a href=\"wait\">WAIT</a>, Redis remembers, for each client, the replication offset of the produced replication stream when a given write command was executed in the context of a given client. When <a href=\"wait\">WAIT</a> is called Redis checks if the specified number of slaves already acknowledged this offset or a greater one.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: The command returns the number of slaves reached by all the writes performed in the context of the current connection.</p> <h2>Examples</h2> <pre>&gt; SET foo bar\nOK\n&gt; WAIT 1 0\n(integer) 1\n&gt; WAIT 2 1000\n(integer) 1\n</pre> <p>In the following example the first call to <a href=\"wait\">WAIT</a> does not use a timeout and asks for the write to reach 1 slave. It returns with success. In the second attempt instead we put a timeout, and ask for the replication of the write to two slaves. Since there is a single slave available, after one second <a href=\"wait\">WAIT</a> unblocks and returns 1, the number of slaves reached.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/wait\" class=\"_attribution-link\">http://redis.io/commands/wait</a>\n  </p>\n</div>\n","watch":"<h1 class=\"command\">WATCH</h1>\n<pre>WATCH key [key ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1) for every key.</p> </div> <p>Marks the given keys to be watched for conditional execution of a <a href=\"http://redis.io/topics/transactions\">transaction</a>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#simple-string-reply\">Simple string reply</a>: always <code>OK</code>.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/watch\" class=\"_attribution-link\">http://redis.io/commands/watch</a>\n  </p>\n</div>\n","zcard":"<h1 class=\"command\">ZCARD</h1>\n<pre>ZCARD key</pre>   <div class=\"metadata\"> <p><strong>Available since 1.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns the sorted set cardinality (number of elements) of the sorted set stored at <code>key</code>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the cardinality (number of elements) of the sorted set, or <code>0</code> if <code>key</code> does not exist.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"b2e4e7362c843f61a53a1a512c2d7217\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZCARD myzset</span> <code>(integer) 2</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zcard\" class=\"_attribution-link\">http://redis.io/commands/zcard</a>\n  </p>\n</div>\n","zcount":"<h1 class=\"command\">ZCOUNT</h1>\n<pre>ZCOUNT key min max</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N)) with N being the number of elements in the sorted set.</p> </div> <p>Returns the number of elements in the sorted set at <code>key</code> with a score between <code>min</code> and <code>max</code>.</p> <p>The <code>min</code> and <code>max</code> arguments have the same semantic as described for <a href=\"zrangebyscore\">ZRANGEBYSCORE</a>.</p> <p>Note: the command has a complexity of just <span class=\"math\">O(log(N)) </span>because it uses elements ranks (see <a href=\"zrank\">ZRANK</a>) to get an idea of the range. Because of this there is no need to do a work proportional to the size of the range.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of elements in the specified score range.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"d9f757c9f4b027ec1c79ab8288c5ecd5\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 3 \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZCOUNT myzset -inf +inf</span> <code>(integer) 3</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZCOUNT myzset (1 3</span> <code>(integer) 2</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zcount\" class=\"_attribution-link\">http://redis.io/commands/zcount</a>\n  </p>\n</div>\n","zadd":"<h1 class=\"command\">ZADD</h1>\n<pre>ZADD key [NX|XX] [CH] [INCR] score member [score member ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.2.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N)) for each item added, where N is the number of elements in the sorted set.</p> </div> <p>Adds all the specified members with the specified scores to the sorted set stored at <code>key</code>. It is possible to specify multiple score / member pairs. If a specified member is already a member of the sorted set, the score is updated and the element reinserted at the right position to ensure the correct ordering.</p> <p>If <code>key</code> does not exist, a new sorted set with the specified members as sole members is created, like if the sorted set was empty. If the key exists but does not hold a sorted set, an error is returned.</p> <p>The score values should be the string representation of a double precision floating point number. <code>+inf</code> and <code>-inf</code> values are valid values as well.</p> <h2>ZADD options (Redis 3.0.2 or greater)</h2> <p>ZADD supports a list of options, specified after the name of the key and before the first score argument. Options are:</p> <ul> <li>\n<strong>XX</strong>: Only update elements that already exist. Never add elements.</li> <li>\n<strong>NX</strong>: Don't update already existing elements. Always add new elements.</li> <li>\n<strong>CH</strong>: Modify the return value from the number of new elements added, to the total number of elements changed (CH is an abbreviation of <em>changed</em>). Changed elements are <strong>new elements added</strong> and elements already existing for which <strong>the score was updated</strong>. So elements specified in the command line having the same score as they had in the past are not counted. Note: normally the return value of <a href=\"zadd\">ZADD</a> only counts the number of new elements added.</li> <li>\n<strong>INCR</strong>: When this option is specified <a href=\"zadd\">ZADD</a> acts like <a href=\"zincrby\">ZINCRBY</a>. Only one score-element pair can be specified in this mode.</li> </ul> <h2>Range of integer scores that can be expressed precisely</h2> <p>Redis sorted sets use a <em>double 64-bit floating point number</em> to represent the score. In all the architectures we support, this is represented as an <strong>IEEE 754 floating point number</strong>, that is able to represent precisely integer numbers between <code>-(2^53)</code> and <code>+(2^53)</code> included. In more practical terms, all the integers between -9007199254740992 and 9007199254740992 are perfectly representable. Larger integers, or fractions, are internally represented in exponential form, so it is possible that you get only an approximation of the decimal number, or of the very big integer, that you set as score.</p> <h2>Sorted sets 101</h2> <p>Sorted sets are sorted by their score in an ascending way. The same element only exists a single time, no repeated elements are permitted. The score can be modified both by <a href=\"zadd\">ZADD</a> that will update the element score, and as a side effect, its position on the sorted set, and by <a href=\"zincrby\">ZINCRBY</a> that can be used in order to update the score relatively to its previous value.</p> <p>The current score of an element can be retrieved using the <a href=\"zscore\">ZSCORE</a> command, that can also be used to verify if an element already exists or not.</p> <p>For an introduction to sorted sets, see the data types page on <a href=\"http://redis.io/topics/data-types#sorted-sets\">sorted sets</a>.</p> <h2>Elements with the same score</h2> <p>While the same element can't be repeated in a sorted set since every element is unique, it is possible to add multiple different elements <em>having the same score</em>. When multiple elements have the same score, they are <em>ordered lexicographically</em> (they are still ordered by score as a first key, however, locally, all the elements with the same score are relatively ordered lexicographically).</p> <p>The lexicographic ordering used is binary, it compares strings as array of bytes.</p> <p>If the user inserts all the elements in a sorted set with the same score (for example 0), all the elements of the sorted set are sorted lexicographically, and range queries on elements are possible using the command <a href=\"zrangebylex\">ZRANGEBYLEX</a> (Note: it is also possible to query sorted sets by range of scores using <a href=\"zrangebyscore\">ZRANGEBYSCORE</a>).</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>The number of elements added to the sorted sets, not including elements already existing for which the score was updated.</li> </ul> <p>If the <a href=\"incr\">INCR</a> option is specified, the return value will be <a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>:</p> <ul> <li>the new score of <code>member</code> (a double precision floating point number), represented as string.</li> </ul> <h2>History</h2> <ul> <li>\n<code>&gt;= 2.4</code>: Accepts multiple elements. In Redis versions older than 2.4 it was possible to add or update a single member per call.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"e12579d3edad1f6093ba489407f2259f\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"uno\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\" 3 \"three\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE myzset 0 -1 WITHSCORES</span> <code>1) \"one\"\n2) \"1\"\n3) \"uno\"\n4) \"1\"\n5) \"two\"\n6) \"2\"\n7) \"three\"\n8) \"3\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zadd\" class=\"_attribution-link\">http://redis.io/commands/zadd</a>\n  </p>\n</div>\n","zincrby":"<h1 class=\"command\">ZINCRBY</h1>\n<pre>ZINCRBY key increment member</pre>   <div class=\"metadata\"> <p><strong>Available since 1.2.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N)) where N is the number of elements in the sorted set.</p> </div> <p>Increments the score of <code>member</code> in the sorted set stored at <code>key</code> by <code>increment</code>. If <code>member</code> does not exist in the sorted set, it is added with <code>increment</code> as its score (as if its previous score was <code>0.0</code>). If <code>key</code> does not exist, a new sorted set with the specified <code>member</code> as its sole member is created.</p> <p>An error is returned when <code>key</code> exists but does not hold a sorted set.</p> <p>The <code>score</code> value should be the string representation of a numeric value, and accepts double precision floating point numbers. It is possible to provide a negative value to decrement the score.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the new score of <code>member</code> (a double precision floating point number), represented as string.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"c87db6afe994f84f53a24536ebce9e3c\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZINCRBY myzset 2 \"one\"</span> <code>\"3\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE myzset 0 -1 WITHSCORES</span> <code>1) \"two\"\n2) \"2\"\n3) \"one\"\n4) \"3\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zincrby\" class=\"_attribution-link\">http://redis.io/commands/zincrby</a>\n  </p>\n</div>\n","zinterstore":"<h1 class=\"command\">ZINTERSTORE</h1>\n<pre>ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.</p> </div> <p>Computes the intersection of <code>numkeys</code> sorted sets given by the specified keys, and stores the result in <code>destination</code>. It is mandatory to provide the number of input keys (<code>numkeys</code>) before passing the input keys and the other (optional) arguments.</p> <p>By default, the resulting score of an element is the sum of its scores in the sorted sets where it exists. Because intersection requires an element to be a member of every given sorted set, this results in the score of every element in the resulting sorted set to be equal to the number of input sorted sets.</p> <p>For a description of the <code>WEIGHTS</code> and <code>AGGREGATE</code> options, see <a href=\"zunionstore\">ZUNIONSTORE</a>.</p> <p>If <code>destination</code> already exists, it is overwritten.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of elements in the resulting sorted set at <code>destination</code>.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"2d145cd0fb53c1937548f332dbcb9138\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD zset1 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD zset1 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD zset2 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD zset2 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD zset2 3 \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE out 0 -1 WITHSCORES</span> <code>1) \"one\"\n2) \"5\"\n3) \"two\"\n4) \"10\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zinterstore\" class=\"_attribution-link\">http://redis.io/commands/zinterstore</a>\n  </p>\n</div>\n","zlexcount":"<h1 class=\"command\">ZLEXCOUNT</h1>\n<pre>ZLEXCOUNT key min max</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.9.</strong></p> <p><strong>Time complexity:</strong> O(log(N)) with N being the number of elements in the sorted set.</p> </div> <p>When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns the number of elements in the sorted set at <code>key</code> with a value between <code>min</code> and <code>max</code>.</p> <p>The <code>min</code> and <code>max</code> arguments have the same meaning as described for <a href=\"zrangebylex\">ZRANGEBYLEX</a>.</p> <p>Note: the command has a complexity of just <span class=\"math\">O(log(N)) </span>because it uses elements ranks (see <a href=\"zrank\">ZRANK</a>) to get an idea of the range. Because of this there is no need to do a work proportional to the size of the range.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of elements in the specified score range.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"e6a5dc63060528c04a194b2f3cd6cda9\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 0 a 0 b 0 c 0 d 0 e</span> <code>(integer) 5</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 0 f 0 g</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZLEXCOUNT myzset - +</span> <code>(integer) 7</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZLEXCOUNT myzset [b [f</span> <code>(integer) 5</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zlexcount\" class=\"_attribution-link\">http://redis.io/commands/zlexcount</a>\n  </p>\n</div>\n","zrangebylex":"<h1 class=\"command\">ZRANGEBYLEX</h1>\n<pre>ZRANGEBYLEX key min max [LIMIT offset count]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.9.</strong></p> <p><strong>Time complexity:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).</p> </div> <p>When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns all the elements in the sorted set at <code>key</code> with a value between <code>min</code> and <code>max</code>.</p> <p>If the elements in the sorted set have different scores, the returned elements are unspecified.</p> <p>The elements are considered to be ordered from lower to higher strings as compared byte-by-byte using the <code>memcmp()</code> C function. Longer strings are considered greater than shorter strings if the common part is identical.</p> <p>The optional <code>LIMIT</code> argument can be used to only get a range of the matching elements (similar to <em>SELECT LIMIT offset, count</em> in SQL). Keep in mind that if <code>offset</code> is large, the sorted set needs to be traversed for <code>offset</code> elements before getting to the elements to return, which can add up to <span class=\"math\">O(N) </span>time complexity.</p> <h2>How to specify intervals</h2> <p>Valid <em>start</em> and <em>stop</em> must start with <code>(</code> or <code>[</code>, in order to specify if the range item is respectively exclusive or inclusive. The special values of <code>+</code> or <code>-</code> for <em>start</em> and <em>stop</em> have the special meaning or positively infinite and negatively infinite strings, so for instance the command <strong>ZRANGEBYLEX myzset - +</strong> is guaranteed to return all the elements in the sorted set, if all the elements have the same score.</p> <h2>Details on strings comparison</h2> <p>Strings are compared as binary array of bytes. Because of how the ASCII character set is specified, this means that usually this also have the effect of comparing normal ASCII characters in an obvious dictionary way. However this is not true if non plain ASCII strings are used (for example utf8 strings).</p> <p>However the user can apply a transformation to the encoded string so that the first part of the element inserted in the sorted set will compare as the user requires for the specific application. For example if I want to add strings that will be compared in a case-insensitive way, but I still want to retrieve the real case when querying, I can add strings in the following way:</p> <pre>ZADD autocomplete 0 foo:Foo 0 bar:BAR 0 zap:zap\n</pre> <p>Because of the first <em>normalized</em> part in every element (before the colon character), we are forcing a given comparison, however after the range is queries using <a href=\"zrangebylex\">ZRANGEBYLEX</a> the application can display to the user the second part of the string, after the colon.</p> <p>The binary nature of the comparison allows to use sorted sets as a general purpose index, for example the first part of the element can be a 64 bit big endian number: since big endian numbers have the most significant bytes in the initial positions, the binary comparison will match the numerical comparison of the numbers. This can be used in order to implement range queries on 64 bit values. As in the example below, after the first 8 bytes we can store the value of the element we are actually indexing.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of elements in the specified score range.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"ce2c52d0a6e9ef71b0114edeb60719bd\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g</span> <code>(integer) 7</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGEBYLEX myzset - [c</span> <code>1) \"a\"\n2) \"b\"\n3) \"c\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGEBYLEX myzset - (c</span> <code>1) \"a\"\n2) \"b\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGEBYLEX myzset [aaa (g</span> <code>1) \"b\"\n2) \"c\"\n3) \"d\"\n4) \"e\"\n5) \"f\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zrangebylex\" class=\"_attribution-link\">http://redis.io/commands/zrangebylex</a>\n  </p>\n</div>\n","zrank":"<h1 class=\"command\">ZRANK</h1>\n<pre>ZRANK key member</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N))</p> </div> <p>Returns the rank of <code>member</code> in the sorted set stored at <code>key</code>, with the scores ordered from low to high. The rank (or index) is 0-based, which means that the member with the lowest score has rank <code>0</code>.</p> <p>Use <a href=\"zrevrank\">ZREVRANK</a> to get the rank of an element with the scores ordered from high to low.</p> <h2>Return value</h2> <ul> <li>If <code>member</code> exists in the sorted set, <a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the rank of <code>member</code>.</li> <li>If <code>member</code> does not exist in the sorted set or <code>key</code> does not exist, <a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: <code>nil</code>.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"ed7b7306bfa59e11c2533a50d19133e4\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 3 \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANK myzset \"three\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANK myzset \"four\"</span> <code>(nil)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zrank\" class=\"_attribution-link\">http://redis.io/commands/zrank</a>\n  </p>\n</div>\n","zremrangebylex":"<h1 class=\"command\">ZREMRANGEBYLEX</h1>\n<pre>ZREMRANGEBYLEX key min max</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.9.</strong></p> <p><strong>Time complexity:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.</p> </div> <p>When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command removes all elements in the sorted set stored at <code>key</code> between the lexicographical range specified by <code>min</code> and <code>max</code>.</p> <p>The meaning of <code>min</code> and <code>max</code> are the same of the <a href=\"zrangebylex\">ZRANGEBYLEX</a> command. Similarly, this command actually returns the same elements that <a href=\"zrangebylex\">ZRANGEBYLEX</a> would return if called with the same <code>min</code> and <code>max</code> arguments.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of elements removed.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"86b8ff074f957d4979ab9863da981b37\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 0 aaaa 0 b 0 c 0 d 0 e</span> <code>(integer) 5</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 0 foo 0 zap 0 zip 0 ALPHA 0 alpha</span> <code>(integer) 5</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE myzset 0 -1</span> <code>1) \"ALPHA\"\n 2) \"aaaa\"\n 3) \"alpha\"\n 4) \"b\"\n 5) \"c\"\n 6) \"d\"\n 7) \"e\"\n 8) \"foo\"\n 9) \"zap\"\n10) \"zip\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREMRANGEBYLEX myzset [alpha [omega</span> <code>(integer) 6</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE myzset 0 -1</span> <code>1) \"ALPHA\"\n2) \"aaaa\"\n3) \"zap\"\n4) \"zip\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zremrangebylex\" class=\"_attribution-link\">http://redis.io/commands/zremrangebylex</a>\n  </p>\n</div>\n","zrange":"<h1 class=\"command\">ZRANGE</h1>\n<pre>ZRANGE key start stop [WITHSCORES]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.2.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.</p> </div> <p>Returns the specified range of elements in the sorted set stored at <code>key</code>. The elements are considered to be ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.</p> <p>See <a href=\"zrevrange\">ZREVRANGE</a> when you need the elements ordered from highest to lowest score (and descending lexicographical order for elements with equal score).</p> <p>Both <code>start</code> and <code>stop</code> are zero-based indexes, where <code>0</code> is the first element, <code>1</code> is the next element and so on. They can also be negative numbers indicating offsets from the end of the sorted set, with <code>-1</code> being the last element of the sorted set, <code>-2</code> the penultimate element and so on.</p> <p><code>start</code> and <code>stop</code> are <strong>inclusive ranges</strong>, so for example <code>ZRANGE myzset 0 1</code> will return both the first and the second element of the sorted set.</p> <p>Out of range indexes will not produce an error. If <code>start</code> is larger than the largest index in the sorted set, or <code>start &gt;\nstop</code>, an empty list is returned. If <code>stop</code> is larger than the end of the sorted set Redis will treat it like it is the last element of the sorted set.</p> <p>It is possible to pass the <code>WITHSCORES</code> option in order to return the scores of the elements together with the elements. The returned list will contain <code>value1,score1,...,valueN,scoreN</code> instead of <code>value1,...,valueN</code>. Client libraries are free to return a more appropriate data type (suggestion: an array with (value, score) arrays/tuples).</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of elements in the specified range (optionally with their scores, in case the <code>WITHSCORES</code> option is given).</p> <h2>Examples</h2> <div class=\"example\" data-session=\"c1aac300752642da3bb337fe353437b7\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 3 \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE myzset 0 -1</span> <code>1) \"one\"\n2) \"two\"\n3) \"three\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE myzset 2 3</span> <code>1) \"three\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE myzset -2 -1</span> <code>1) \"two\"\n2) \"three\"</code>\n</div> <p>The following example using <code>WITHSCORES</code> shows how the command returns always an array, but this time, populated with <em>element_1</em>, <em>score_1</em>, <em>element_2</em>, <em>score_2</em>, ..., <em>element_N</em>, <em>score_N</em>.</p> <div class=\"example\" data-session=\"c1aac300752642da3bb337fe353437b7\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE myzset 0 1 WITHSCORES</span> <code>1) \"one\"\n2) \"1\"\n3) \"two\"\n4) \"2\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zrange\" class=\"_attribution-link\">http://redis.io/commands/zrange</a>\n  </p>\n</div>\n","zrevrangebylex":"<h1 class=\"command\">ZREVRANGEBYLEX</h1>\n<pre>ZREVRANGEBYLEX key max min [LIMIT offset count]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.9.</strong></p> <p><strong>Time complexity:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).</p> </div> <p>When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns all the elements in the sorted set at <code>key</code> with a value between <code>max</code> and <code>min</code>.</p> <p>Apart from the reversed ordering, <a href=\"zrevrangebylex\">ZREVRANGEBYLEX</a> is similar to <a href=\"zrangebylex\">ZRANGEBYLEX</a>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of elements in the specified score range.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"49ca5e258865cd473a7b56e0b6521197\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g</span> <code>(integer) 7</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREVRANGEBYLEX myzset [c -</span> <code>1) \"c\"\n2) \"b\"\n3) \"a\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREVRANGEBYLEX myzset (c -</span> <code>1) \"b\"\n2) \"a\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREVRANGEBYLEX myzset (g [aaa</span> <code>1) \"f\"\n2) \"e\"\n3) \"d\"\n4) \"c\"\n5) \"b\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zrevrangebylex\" class=\"_attribution-link\">http://redis.io/commands/zrevrangebylex</a>\n  </p>\n</div>\n","zrangebyscore":"<h1 class=\"command\">ZRANGEBYSCORE</h1>\n<pre>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.0.5.</strong></p> <p><strong>Time complexity:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).</p> </div> <p>Returns all the elements in the sorted set at <code>key</code> with a score between <code>min</code> and <code>max</code> (including elements with score equal to <code>min</code> or <code>max</code>). The elements are considered to be ordered from low to high scores.</p> <p>The elements having the same score are returned in lexicographical order (this follows from a property of the sorted set implementation in Redis and does not involve further computation).</p> <p>The optional <code>LIMIT</code> argument can be used to only get a range of the matching elements (similar to <em>SELECT LIMIT offset, count</em> in SQL). Keep in mind that if <code>offset</code> is large, the sorted set needs to be traversed for <code>offset</code> elements before getting to the elements to return, which can add up to <span class=\"math\">O(N) </span>time complexity.</p> <p>The optional <code>WITHSCORES</code> argument makes the command return both the element and its score, instead of the element alone. This option is available since Redis 2.0.</p> <h2>Exclusive intervals and infinity</h2> <p><code>min</code> and <code>max</code> can be <code>-inf</code> and <code>+inf</code>, so that you are not required to know the highest or lowest score in the sorted set to get all elements from or up to a certain score.</p> <p>By default, the interval specified by <code>min</code> and <code>max</code> is closed (inclusive). It is possible to specify an open interval (exclusive) by prefixing the score with the character <code>(</code>. For example:</p> <pre>ZRANGEBYSCORE zset (1 5\n</pre> <p>Will return all elements with <code>1 &lt; score &lt;= 5</code> while:</p> <pre>ZRANGEBYSCORE zset (5 (10\n</pre> <p>Will return all the elements with <code>5 &lt; score &lt; 10</code> (5 and 10 excluded).</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of elements in the specified score range (optionally with their scores).</p> <h2>Examples</h2> <div class=\"example\" data-session=\"c94cbdbbbeb447f5fa407ef043d1ae98\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 3 \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGEBYSCORE myzset -inf +inf</span> <code>1) \"one\"\n2) \"two\"\n3) \"three\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGEBYSCORE myzset 1 2</span> <code>1) \"one\"\n2) \"two\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGEBYSCORE myzset (1 2</span> <code>1) \"two\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGEBYSCORE myzset (1 (2</span> <code>(empty list or set)</code>\n</div> <h2>Pattern: weighted random selection of an element</h2> <p>Normally <a href=\"zrangebyscore\">ZRANGEBYSCORE</a> is simply used in order to get range of items where the score is the indexed integer key, however it is possible to do less obvious things with the command.</p> <p>For example a common problem when implementing Markov chains and other algorithms is to select an element at random from a set, but different elements may have different weights that change how likely it is they are picked.</p> <p>This is how we use this command in order to mount such an algorithm:</p> <p>Imagine you have elements A, B and C with weights 1, 2 and 3. You compute the sum of the weights, which is 1+2+3 = 6</p> <p>At this point you add all the elements into a sorted set using this algorithm:</p> <pre>SUM = ELEMENTS.TOTAL_WEIGHT // 6 in this case.\nSCORE = 0\nFOREACH ELE in ELEMENTS\n    SCORE += ELE.weight / SUM\n    ZADD KEY SCORE ELE\nEND\n</pre> <p>This means that you set:</p> <pre>A to score 0.16\nB to score .5\nC to score 1\n</pre> <p>Since this involves approximations, in order to avoid C is set to, like, 0.998 instead of 1, we just modify the above algorithm to make sure the last score is 1 (left as an exercise for the reader...).</p> <p>At this point, each time you want to get a weighted random element, just compute a random number between 0 and 1 (which is like calling <code>rand()</code> in most languages), so you can just do:</p> <pre>RANDOM_ELE = ZRANGEBYSCORE key RAND() +inf LIMIT 0 1\n</pre>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zrangebyscore\" class=\"_attribution-link\">http://redis.io/commands/zrangebyscore</a>\n  </p>\n</div>\n","zrem":"<h1 class=\"command\">ZREM</h1>\n<pre>ZREM key member [member ...]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.2.0.</strong></p> <p><strong>Time complexity:</strong> O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.</p> </div> <p>Removes the specified members from the sorted set stored at <code>key</code>. Non existing members are ignored.</p> <p>An error is returned when <code>key</code> exists and does not hold a sorted set.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>, specifically:</p> <ul> <li>The number of members removed from the sorted set, not including non existing members.</li> </ul> <h2>History</h2> <ul> <li>\n<code>&gt;= 2.4</code>: Accepts multiple elements. In Redis versions older than 2.4 it was possible to remove a single member per call.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"a3194a3faf3484584893ec9c7ea3f12f\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 3 \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREM myzset \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE myzset 0 -1 WITHSCORES</span> <code>1) \"one\"\n2) \"1\"\n3) \"three\"\n4) \"3\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zrem\" class=\"_attribution-link\">http://redis.io/commands/zrem</a>\n  </p>\n</div>\n","zremrangebyscore":"<h1 class=\"command\">ZREMRANGEBYSCORE</h1>\n<pre>ZREMRANGEBYSCORE key min max</pre>   <div class=\"metadata\"> <p><strong>Available since 1.2.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.</p> </div> <p>Removes all elements in the sorted set stored at <code>key</code> with a score between <code>min</code> and <code>max</code> (inclusive).</p> <p>Since version 2.1.6, <code>min</code> and <code>max</code> can be exclusive, following the syntax of <a href=\"zrangebyscore\">ZRANGEBYSCORE</a>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of elements removed.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"0940fc29208e28cf06e2d23f33839eab\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 3 \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREMRANGEBYSCORE myzset -inf (2</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE myzset 0 -1 WITHSCORES</span> <code>1) \"two\"\n2) \"2\"\n3) \"three\"\n4) \"3\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zremrangebyscore\" class=\"_attribution-link\">http://redis.io/commands/zremrangebyscore</a>\n  </p>\n</div>\n","sscan":"<h1 class=\"command\">SSCAN</h1>\n<pre>SSCAN key cursor [MATCH pattern] [COUNT count]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.0.</strong></p> <p><strong>Time complexity:</strong> O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..</p> </div> <p>See <a href=\"scan\">SCAN</a> for <a href=\"sscan\">SSCAN</a> documentation.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/sscan\" class=\"_attribution-link\">http://redis.io/commands/sscan</a>\n  </p>\n</div>\n","zremrangebyrank":"<h1 class=\"command\">ZREMRANGEBYRANK</h1>\n<pre>ZREMRANGEBYRANK key start stop</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.</p> </div> <p>Removes all elements in the sorted set stored at <code>key</code> with rank between <code>start</code> and <code>stop</code>. Both <code>start</code> and <code>stop</code> are <code>0</code> -based indexes with <code>0</code> being the element with the lowest score. These indexes can be negative numbers, where they indicate offsets starting at the element with the highest score. For example: <code>-1</code> is the element with the highest score, <code>-2</code> the element with the second highest score and so forth.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of elements removed.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"97e6e74f0434575ec87425ed52db759e\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 3 \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREMRANGEBYRANK myzset 0 1</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE myzset 0 -1 WITHSCORES</span> <code>1) \"three\"\n2) \"3\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zremrangebyrank\" class=\"_attribution-link\">http://redis.io/commands/zremrangebyrank</a>\n  </p>\n</div>\n","zrevrange":"<h1 class=\"command\">ZREVRANGE</h1>\n<pre>ZREVRANGE key start stop [WITHSCORES]</pre>   <div class=\"metadata\"> <p><strong>Available since 1.2.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.</p> </div> <p>Returns the specified range of elements in the sorted set stored at <code>key</code>. The elements are considered to be ordered from the highest to the lowest score. Descending lexicographical order is used for elements with equal score.</p> <p>Apart from the reversed ordering, <a href=\"zrevrange\">ZREVRANGE</a> is similar to <a href=\"zrange\">ZRANGE</a>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of elements in the specified range (optionally with their scores).</p> <h2>Examples</h2> <div class=\"example\" data-session=\"818ac6a72712929f632e8167dc843560\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 3 \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREVRANGE myzset 0 -1</span> <code>1) \"three\"\n2) \"two\"\n3) \"one\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREVRANGE myzset 2 3</span> <code>1) \"one\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREVRANGE myzset -2 -1</span> <code>1) \"two\"\n2) \"one\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zrevrange\" class=\"_attribution-link\">http://redis.io/commands/zrevrange</a>\n  </p>\n</div>\n","zrevrangebyscore":"<h1 class=\"command\">ZREVRANGEBYSCORE</h1>\n<pre>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.2.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).</p> </div> <p>Returns all the elements in the sorted set at <code>key</code> with a score between <code>max</code> and <code>min</code> (including elements with score equal to <code>max</code> or <code>min</code>). In contrary to the default ordering of sorted sets, for this command the elements are considered to be ordered from high to low scores.</p> <p>The elements having the same score are returned in reverse lexicographical order.</p> <p>Apart from the reversed ordering, <a href=\"zrevrangebyscore\">ZREVRANGEBYSCORE</a> is similar to <a href=\"zrangebyscore\">ZRANGEBYSCORE</a>.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#array-reply\">Array reply</a>: list of elements in the specified score range (optionally with their scores).</p> <h2>Examples</h2> <div class=\"example\" data-session=\"dee90c3e9479d85fa50c272898bd0b9f\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 3 \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREVRANGEBYSCORE myzset +inf -inf</span> <code>1) \"three\"\n2) \"two\"\n3) \"one\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREVRANGEBYSCORE myzset 2 1</span> <code>1) \"two\"\n2) \"one\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREVRANGEBYSCORE myzset 2 (1</span> <code>1) \"two\"</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREVRANGEBYSCORE myzset (2 (1</span> <code>(empty list or set)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zrevrangebyscore\" class=\"_attribution-link\">http://redis.io/commands/zrevrangebyscore</a>\n  </p>\n</div>\n","zrevrank":"<h1 class=\"command\">ZREVRANK</h1>\n<pre>ZREVRANK key member</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(log(N))</p> </div> <p>Returns the rank of <code>member</code> in the sorted set stored at <code>key</code>, with the scores ordered from high to low. The rank (or index) is 0-based, which means that the member with the highest score has rank <code>0</code>.</p> <p>Use <a href=\"zrank\">ZRANK</a> to get the rank of an element with the scores ordered from low to high.</p> <h2>Return value</h2> <ul> <li>If <code>member</code> exists in the sorted set, <a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the rank of <code>member</code>.</li> <li>If <code>member</code> does not exist in the sorted set or <code>key</code> does not exist, <a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: <code>nil</code>.</li> </ul> <h2>Examples</h2> <div class=\"example\" data-session=\"ab9ca12218ffaaada01d7cc0c590cac0\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 3 \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREVRANK myzset \"one\"</span> <code>(integer) 2</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZREVRANK myzset \"four\"</span> <code>(nil)</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zrevrank\" class=\"_attribution-link\">http://redis.io/commands/zrevrank</a>\n  </p>\n</div>\n","zunionstore":"<h1 class=\"command\">ZUNIONSTORE</h1>\n<pre>ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.0.0.</strong></p> <p><strong>Time complexity:</strong> O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.</p> </div> <p>Computes the union of <code>numkeys</code> sorted sets given by the specified keys, and stores the result in <code>destination</code>. It is mandatory to provide the number of input keys (<code>numkeys</code>) before passing the input keys and the other (optional) arguments.</p> <p>By default, the resulting score of an element is the sum of its scores in the sorted sets where it exists.</p> <p>Using the <code>WEIGHTS</code> option, it is possible to specify a multiplication factor for each input sorted set. This means that the score of every element in every input sorted set is multiplied by this factor before being passed to the aggregation function. When <code>WEIGHTS</code> is not given, the multiplication factors default to <code>1</code>.</p> <p>With the <code>AGGREGATE</code> option, it is possible to specify how the results of the union are aggregated. This option defaults to <code>SUM</code>, where the score of an element is summed across the inputs where it exists. When this option is set to either <code>MIN</code> or <code>MAX</code>, the resulting set will contain the minimum or maximum score of an element across the inputs where it exists.</p> <p>If <code>destination</code> already exists, it is overwritten.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#integer-reply\">Integer reply</a>: the number of elements in the resulting sorted set at <code>destination</code>.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"5cd8db7d2ec0f38b0fbb485c81d4a015\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD zset1 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD zset1 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD zset2 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD zset2 2 \"two\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD zset2 3 \"three\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZUNIONSTORE out 2 zset1 zset2 WEIGHTS 2 3</span> <code>(integer) 3</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZRANGE out 0 -1 WITHSCORES</span> <code>1) \"one\"\n2) \"5\"\n3) \"three\"\n4) \"9\"\n5) \"two\"\n6) \"10\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zunionstore\" class=\"_attribution-link\">http://redis.io/commands/zunionstore</a>\n  </p>\n</div>\n","hscan":"<h1 class=\"command\">HSCAN</h1>\n<pre>HSCAN key cursor [MATCH pattern] [COUNT count]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.0.</strong></p> <p><strong>Time complexity:</strong> O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..</p> </div> <p>See <a href=\"scan\">SCAN</a> for <a href=\"hscan\">HSCAN</a> documentation.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/hscan\" class=\"_attribution-link\">http://redis.io/commands/hscan</a>\n  </p>\n</div>\n","zscan":"<h1 class=\"command\">ZSCAN</h1>\n<pre>ZSCAN key cursor [MATCH pattern] [COUNT count]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.0.</strong></p> <p><strong>Time complexity:</strong> O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..</p> </div> <p>See <a href=\"scan\">SCAN</a> for <a href=\"zscan\">ZSCAN</a> documentation.</p>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zscan\" class=\"_attribution-link\">http://redis.io/commands/zscan</a>\n  </p>\n</div>\n","scan":"<h1 class=\"command\">SCAN</h1>\n<pre>SCAN cursor [MATCH pattern] [COUNT count]</pre>   <div class=\"metadata\"> <p><strong>Available since 2.8.0.</strong></p> <p><strong>Time complexity:</strong> O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.</p> </div> <p>The <a href=\"scan\">SCAN</a> command and the closely related commands <a href=\"sscan\">SSCAN</a>, <a href=\"hscan\">HSCAN</a> and <a href=\"zscan\">ZSCAN</a> are used in order to incrementally iterate over a collection of elements.</p> <ul> <li>\n<a href=\"scan\">SCAN</a> iterates the set of keys in the currently selected Redis database.</li> <li>\n<a href=\"sscan\">SSCAN</a> iterates elements of Sets types.</li> <li>\n<a href=\"hscan\">HSCAN</a> iterates fields of Hash types and their associated values.</li> <li>\n<a href=\"zscan\">ZSCAN</a> iterates elements of Sorted Set types and their associated scores.</li> </ul> <p>Since these commands allow for incremental iteration, returning only a small number of elements per call, they can be used in production without the downside of commands like <a href=\"keys\">KEYS</a> or <a href=\"smembers\">SMEMBERS</a> that may block the server for a long time (even several seconds) when called against big collections of keys or elements.</p> <p>However while blocking commands like <a href=\"smembers\">SMEMBERS</a> are able to provide all the elements that are part of a Set in a given moment, The SCAN family of commands only offer limited guarantees about the returned elements since the collection that we incrementally iterate can change during the iteration process.</p> <p>Note that <a href=\"scan\">SCAN</a>, <a href=\"sscan\">SSCAN</a>, <a href=\"hscan\">HSCAN</a> and <a href=\"zscan\">ZSCAN</a> all work very similarly, so this documentation covers all the four commands. However an obvious difference is that in the case of <a href=\"sscan\">SSCAN</a>, <a href=\"hscan\">HSCAN</a> and <a href=\"zscan\">ZSCAN</a> the first argument is the name of the key holding the Set, Hash or Sorted Set value. The <a href=\"scan\">SCAN</a> command does not need any key name argument as it iterates keys in the current database, so the iterated object is the database itself.</p> <h2>SCAN basic usage</h2> <p>SCAN is a cursor based iterator. This means that at every call of the command, the server returns an updated cursor that the user needs to use as the cursor argument in the next call.</p> <p>An iteration starts when the cursor is set to 0, and terminates when the cursor returned by the server is 0. The following is an example of SCAN iteration:</p> <pre>redis 127.0.0.1:6379&gt; scan 0\n1) \"17\"\n2)  1) \"key:12\"\n    2) \"key:8\"\n    3) \"key:4\"\n    4) \"key:14\"\n    5) \"key:16\"\n    6) \"key:17\"\n    7) \"key:15\"\n    8) \"key:10\"\n    9) \"key:3\"\n   10) \"key:7\"\n   11) \"key:1\"\nredis 127.0.0.1:6379&gt; scan 17\n1) \"0\"\n2) 1) \"key:5\"\n   2) \"key:18\"\n   3) \"key:0\"\n   4) \"key:2\"\n   5) \"key:19\"\n   6) \"key:13\"\n   7) \"key:6\"\n   8) \"key:9\"\n   9) \"key:11\"\n</pre> <p>In the example above, the first call uses zero as a cursor, to start the iteration. The second call uses the cursor returned by the previous call as the first element of the reply, that is, 17.</p> <p>As you can see the <strong>SCAN return value</strong> is an array of two values: the first value is the new cursor to use in the next call, the second value is an array of elements.</p> <p>Since in the second call the returned cursor is 0, the server signaled to the caller that the iteration finished, and the collection was completely explored. Starting an iteration with a cursor value of 0, and calling <a href=\"scan\">SCAN</a> until the returned cursor is 0 again is called a <strong>full iteration</strong>.</p> <h2>Scan guarantees</h2> <p>The <a href=\"scan\">SCAN</a> command, and the other commands in the <a href=\"scan\">SCAN</a> family, are able to provide to the user a set of guarantees associated to full iterations.</p> <ul> <li>A full iteration always retrieves all the elements that were present in the collection from the start to the end of a full iteration. This means that if a given element is inside the collection when an iteration is started, and is still there when an iteration terminates, then at some point <a href=\"scan\">SCAN</a> returned it to the user.</li> <li>A full iteration never returns any element that was NOT present in the collection from the start to the end of a full iteration. So if an element was removed before the start of an iteration, and is never added back to the collection for all the time an iteration lasts, <a href=\"scan\">SCAN</a> ensures that this element will never be returned.</li> </ul> <p>However because <a href=\"scan\">SCAN</a> has very little state associated (just the cursor) it has the following drawbacks:</p> <ul> <li>A given element may be returned multiple times. It is up to the application to handle the case of duplicated elements, for example only using the returned elements in order to perform operations that are safe when re-applied multiple times.</li> <li>Elements that were not constantly present in the collection during a full iteration, may be returned or not: it is undefined.</li> </ul> <h2>Number of elements returned at every SCAN call</h2> <p><a href=\"scan\">SCAN</a> family functions do not guarantee that the number of elements returned per call are in a given range. The commands are also allowed to return zero elements, and the client should not consider the iteration complete as long as the returned cursor is not zero.</p> <p>However the number of returned elements is reasonable, that is, in practical terms SCAN may return a maximum number of elements in the order of a few tens of elements when iterating a large collection, or may return all the elements of the collection in a single call when the iterated collection is small enough to be internally represented as an encoded data structure (this happens for small sets, hashes and sorted sets).</p> <p>However there is a way for the user to tune the order of magnitude of the number of returned elements per call using the <strong>COUNT</strong> option.</p> <h2>The COUNT option</h2> <p>While <a href=\"scan\">SCAN</a> does not provide guarantees about the number of elements returned at every iteration, it is possible to empirically adjust the behavior of <a href=\"scan\">SCAN</a> using the <strong>COUNT</strong> option. Basically with COUNT the user specified the <em>amount of work that should be done at every call in order to retrieve elements from the collection</em>. This is <strong>just an hint</strong> for the implementation, however generally speaking this is what you could expect most of the times from the implementation.</p> <ul> <li>The default COUNT value is 10.</li> <li>When iterating the key space, or a Set, Hash or Sorted Set that is big enough to be represented by a hash table, assuming no <strong>MATCH</strong> option is used, the server will usually return <em>count</em> or a bit more than <em>count</em> elements per call.</li> <li>When iterating Sets encoded as intsets (small sets composed of just integers), or Hashes and Sorted Sets encoded as ziplists (small hashes and sets composed of small individual values), usually all the elements are returned in the first <a href=\"scan\">SCAN</a> call regardless of the COUNT value.</li> </ul> <p>Important: <strong>there is no need to use the same COUNT value</strong> for every iteration. The caller is free to change the count from one iteration to the other as required, as long as the cursor passed in the next call is the one obtained in the previous call to the command.</p> <h2>The MATCH option</h2> <p>It is possible to only iterate elements matching a given glob-style pattern, similarly to the behavior of the <a href=\"keys\">KEYS</a> command that takes a pattern as only argument.</p> <p>To do so, just append the <code>MATCH &lt;pattern&gt;</code> arguments at the end of the <a href=\"scan\">SCAN</a> command (it works with all the SCAN family commands).</p> <p>This is an example of iteration using <strong>MATCH</strong>:</p> <pre>redis 127.0.0.1:6379&gt; sadd myset 1 2 3 foo foobar feelsgood\n(integer) 6\nredis 127.0.0.1:6379&gt; sscan myset 0 match f*\n1) \"0\"\n2) 1) \"foo\"\n   2) \"feelsgood\"\n   3) \"foobar\"\nredis 127.0.0.1:6379&gt;\n</pre> <p>It is important to note that the <strong>MATCH</strong> filter is applied after elements are retrieved from the collection, just before returning data to the client. This means that if the pattern matches very little elements inside the collection, <a href=\"scan\">SCAN</a> will likely return no elements in most iterations. An example is shown below:</p> <pre>redis 127.0.0.1:6379&gt; scan 0 MATCH *11*\n1) \"288\"\n2) 1) \"key:911\"\nredis 127.0.0.1:6379&gt; scan 288 MATCH *11*\n1) \"224\"\n2) (empty list or set)\nredis 127.0.0.1:6379&gt; scan 224 MATCH *11*\n1) \"80\"\n2) (empty list or set)\nredis 127.0.0.1:6379&gt; scan 80 MATCH *11*\n1) \"176\"\n2) (empty list or set)\nredis 127.0.0.1:6379&gt; scan 176 MATCH *11* COUNT 1000\n1) \"0\"\n2)  1) \"key:611\"\n    2) \"key:711\"\n    3) \"key:118\"\n    4) \"key:117\"\n    5) \"key:311\"\n    6) \"key:112\"\n    7) \"key:111\"\n    8) \"key:110\"\n    9) \"key:113\"\n   10) \"key:211\"\n   11) \"key:411\"\n   12) \"key:115\"\n   13) \"key:116\"\n   14) \"key:114\"\n   15) \"key:119\"\n   16) \"key:811\"\n   17) \"key:511\"\n   18) \"key:11\"\nredis 127.0.0.1:6379&gt;\n</pre> <p>As you can see most of the calls returned zero elements, but the last call where a COUNT of 1000 was used in order to force the command to do more scanning for that iteration.</p> <h2>Multiple parallel iterations</h2> <p>It is possible for an infinite number of clients to iterate the same collection at the same time, as the full state of the iterator is in the cursor, that is obtained and returned to the client at every call. Server side no state is taken at all.</p> <h2>Terminating iterations in the middle</h2> <p>Since there is no state server side, but the full state is captured by the cursor, the caller is free to terminate an iteration half-way without signaling this to the server in any way. An infinite number of iterations can be started and never terminated without any issue.</p> <h2>Calling SCAN with a corrupted cursor</h2> <p>Calling <a href=\"scan\">SCAN</a> with a broken, negative, out of range, or otherwise invalid cursor, will result into undefined behavior but never into a crash. What will be undefined is that the guarantees about the returned elements can no longer be ensured by the <a href=\"scan\">SCAN</a> implementation.</p> <p>The only valid cursors to use are:</p> <ul> <li>The cursor value of 0 when starting an iteration.</li> <li>The cursor returned by the previous call to SCAN in order to continue the iteration.</li> </ul> <h2>Guarantee of termination</h2> <p>The <a href=\"scan\">SCAN</a> algorithm is guaranteed to terminate only if the size of the iterated collection remains bounded to a given maximum size, otherwise iterating a collection that always grows may result into <a href=\"scan\">SCAN</a> to never terminate a full iteration.</p> <p>This is easy to see intuitively: if the collection grows there is more and more work to do in order to visit all the possible elements, and the ability to terminate the iteration depends on the number of calls to <a href=\"scan\">SCAN</a> and its COUNT option value compared with the rate at which the collection grows.</p> <h2>Return value</h2> <p><a href=\"scan\">SCAN</a>, <a href=\"sscan\">SSCAN</a>, <a href=\"hscan\">HSCAN</a> and <a href=\"zscan\">ZSCAN</a> return a two elements multi-bulk reply, where the first element is a string representing an unsigned 64 bit number (the cursor), and the second element is a multi-bulk with an array of elements.</p> <ul> <li>\n<a href=\"scan\">SCAN</a> array of elements is a list of keys.</li> <li>\n<a href=\"sscan\">SSCAN</a> array of elements is a list of Set members.</li> <li>\n<a href=\"hscan\">HSCAN</a> array of elements contain two elements, a field and a value, for every returned element of the Hash.</li> <li>\n<a href=\"zscan\">ZSCAN</a> array of elements contain two elements, a member and its associated score, for every returned element of the sorted set.</li> </ul> <h2>Additional examples</h2> <p>Iteration of a Hash value.</p> <pre>redis 127.0.0.1:6379&gt; hmset hash name Jack age 33\nOK\nredis 127.0.0.1:6379&gt; hscan hash 0\n1) \"0\"\n2) 1) \"name\"\n   2) \"Jack\"\n   3) \"age\"\n   4) \"33\"\n</pre>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/scan\" class=\"_attribution-link\">http://redis.io/commands/scan</a>\n  </p>\n</div>\n","zscore":"<h1 class=\"command\">ZSCORE</h1>\n<pre>ZSCORE key member</pre>   <div class=\"metadata\"> <p><strong>Available since 1.2.0.</strong></p> <p><strong>Time complexity:</strong> O(1)</p> </div> <p>Returns the score of <code>member</code> in the sorted set at <code>key</code>.</p> <p>If <code>member</code> does not exist in the sorted set, or <code>key</code> does not exist, <code>nil</code> is returned.</p> <h2>Return value</h2> <p><a href=\"http://redis.io/topics/protocol#bulk-string-reply\">Bulk string reply</a>: the score of <code>member</code> (a double precision floating point number), represented as string.</p> <h2>Examples</h2> <div class=\"example\" data-session=\"8773e5b6a0aed99d6af64bc06e6e49e9\"> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZADD myzset 1 \"one\"</span> <code>(integer) 1</code> <span class=\"monospace prompt\">redis&gt; </span> <span class=\"monospace command\">ZSCORE myzset \"one\"</span> <code>\"1\"</code>\n</div>  <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 Salvatore Sanfilippo<br>Licensed under the Creative Commons Attribution-ShareAlike License 4.0.<br>\n    <a href=\"http://redis.io/commands/zscore\" class=\"_attribution-link\">http://redis.io/commands/zscore</a>\n  </p>\n</div>\n"}