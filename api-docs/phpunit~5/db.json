{"index":"<h1>PHPUnit</h1><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/index.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/index.html</a>\n  </p>\n</div>\n","installation":"<h1 class=\"title\" id=\"installation\">Installing PHPUnit</h1>\n<h2 class=\"title\" id=\"installation.requirements\">Requirements</h2>\n<p> PHPUnit 5.4 requires PHP 5.6; using the latest version of PHP is highly recommended. </p>\n<p> PHPUnit requires the <a class=\"ulink\" href=\"http://php.net/manual/en/dom.setup.php\" target=\"_top\">dom</a> and <a class=\"ulink\" href=\"http://php.net/manual/en/json.installation.php\" target=\"_top\">json</a> extensions, which are normally enabled by default. </p>\n<p> PHPUnit also requires the <a class=\"ulink\" href=\"http://php.net/manual/en/pcre.installation.php\" target=\"_top\">pcre</a>, <a class=\"ulink\" href=\"http://php.net/manual/en/reflection.installation.php\" target=\"_top\">reflection</a>, and <a class=\"ulink\" href=\"http://php.net/manual/en/spl.installation.php\" target=\"_top\">spl</a> extensions. These standard extensions are enabled by default and cannot be disabled without patching PHP's build system and/or C sources. </p>\n<p> The code coverage report feature requires the <a class=\"ulink\" href=\"http://xdebug.org/\" target=\"_top\">Xdebug</a> (2.2.1 or later) and <a class=\"ulink\" href=\"http://php.net/manual/en/tokenizer.installation.php\" target=\"_top\">tokenizer</a> extensions. Generating XML reports requires the <a class=\"ulink\" href=\"http://php.net/manual/en/xmlwriter.installation.php\" target=\"_top\">xmlwriter</a> extension. </p>\n<h2 class=\"title\" id=\"installation.phar\">PHP Archive (PHAR)</h2>\n<p> The easiest way to obtain PHPUnit is to download a <a class=\"ulink\" href=\"http://php.net/phar\" target=\"_top\">PHP Archive (PHAR)</a> that has all required (as well as some optional) dependencies of PHPUnit bundled in a single file. </p>\n<p> The <a class=\"ulink\" href=\"http://php.net/manual/en/phar.installation.php\" target=\"_top\">phar</a> extension is required for using PHP Archives (PHAR). </p>\n<p> The <a class=\"ulink\" href=\"http://php.net/manual/en/openssl.installation.php\" target=\"_top\">openssl</a> extension is required for using the <code class=\"literal\">--self-update</code> feature of the PHAR. </p>\n<p> If the <a class=\"ulink\" href=\"http://suhosin.org/\" target=\"_top\">Suhosin</a> extension is enabled, you need to allow execution of PHARs in your <code class=\"literal\">php.ini</code>: </p>\n<pre class=\"screen\">\nsuhosin.executor.include.whitelist = phar\n</pre>\n\n<p> To globally install the PHAR: </p>\n<pre class=\"screen\">\n$ wget https://phar.phpunit.de/phpunit.phar\n$ chmod +x phpunit.phar\n$ sudo mv phpunit.phar /usr/local/bin/phpunit\n$ phpunit --version\nPHPUnit x.y.z by Sebastian Bergmann and contributors.\n</pre>\n<p> You may also use the downloaded PHAR file directly: </p>\n<pre class=\"screen\">\n$ wget https://phar.phpunit.de/phpunit.phar\n$ php phpunit.phar --version\nPHPUnit x.y.z by Sebastian Bergmann and contributors.\n</pre>\n<h3 class=\"title\" id=\"installation.phar.windows\">Windows</h3>\n<p> Globally installing the PHAR involves the same procedure as manually <a class=\"ulink\" href=\"https://getcomposer.org/doc/00-intro.md#installation-windows\" target=\"_top\"> installing Composer on Windows</a>: </p>\n<div class=\"orderedlist\"><ol class=\"orderedlist\" type=\"1\">\n<li class=\"listitem\"><p> Create a directory for PHP binaries; e.g., <code class=\"filename\">C:\\bin</code> </p></li>\n<li class=\"listitem\"><p> Append <strong class=\"userinput\"><code>;C:\\bin</code></strong> to your <code class=\"varname\">PATH</code> environment variable (<a class=\"ulink\" href=\"http://stackoverflow.com/questions/6318156/adding-python-path-on-windows-7\" target=\"_top\">related help</a>) </p></li>\n<li class=\"listitem\"><p> Download <a class=\"ulink\" href=\"https://phar.phpunit.de/phpunit.phar\" target=\"_top\">https://phar.phpunit.de/phpunit.phar</a> and save the file as <code class=\"filename\">C:\\bin\\phpunit.phar</code> </p></li>\n<li class=\"listitem\"><p> Open a command line (e.g., press <span class=\"keycap\"><strong>Windows</strong></span>+<span class=\"keycap\"><strong>R</strong></span> » type <strong class=\"userinput\"><code>cmd</code></strong> » <span class=\"keycap\"><strong>ENTER</strong></span>) </p></li>\n<li class=\"listitem\">\n<p> Create a wrapping batch script (results in <code class=\"filename\">C:\\bin\\phpunit.cmd</code>): </p>\n<pre class=\"screen\">\nC:\\Users\\username&gt; cd C:\\bin\nC:\\bin&gt; echo @php \"%~dp0phpunit.phar\" %* &gt; phpunit.cmd\nC:\\bin&gt; exit\n</pre>\n</li>\n<li class=\"listitem\">\n<p> Open a new command line and confirm that you can execute PHPUnit from any path: </p>\n<pre class=\"screen\">\nC:\\Users\\username&gt; phpunit --version\nPHPUnit x.y.z by Sebastian Bergmann and contributors.\n</pre>\n</li>\n</ol></div>\n<p> For Cygwin and/or MingW32 (e.g., TortoiseGit) shell environments, you may skip step 5. above, simply save the file as <code class=\"filename\">phpunit</code> (without <code class=\"filename\">.phar</code> extension), and make it executable via <strong class=\"userinput\"><code>chmod 775 phpunit</code></strong>. </p>\n<h3 class=\"title\" id=\"installation.phar.verification\">Verifying PHPUnit PHAR Releases</h3>\n<p> All official releases of code distributed by the PHPUnit Project are signed by the release manager for the release. PGP signatures and SHA1 hashes are available for verification on <a class=\"ulink\" href=\"https://phar.phpunit.de/\" target=\"_top\">phar.phpunit.de</a>. </p>\n<p> The following example details how release verification works. We start by downloading <code class=\"filename\">phpunit.phar</code> as well as its detached PGP signature <code class=\"filename\">phpunit.phar.asc</code>: </p>\n<pre class=\"screen\">wget https://phar.phpunit.de/phpunit.phar\nwget https://phar.phpunit.de/phpunit.phar.asc</pre>\n<p> We want to verify PHPUnit's PHP Archive (<code class=\"filename\">phpunit.phar</code>) against its detached signature (<code class=\"filename\">phpunit.phar.asc</code>): </p>\n<pre class=\"screen\">gpg phpunit.phar.asc\ngpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A\ngpg: Can't check signature: public key not found</pre>\n<p> We don't have the release manager's public key (<code class=\"literal\">6372C20A</code>) in our local system. In order to proceed with the verification we need to retrieve the release manager's public key from a key server. One such server is <code class=\"filename\">pgp.uni-mainz.de</code>. The public key servers are linked together, so you should be able to connect to any key server. </p>\n<pre class=\"screen\">gpg --keyserver pgp.uni-mainz.de --recv-keys 0x4AA394086372C20A\ngpg: requesting key 6372C20A from hkp server pgp.uni-mainz.de\ngpg: key 6372C20A: public key \"Sebastian Bergmann &lt;sb@sebastian-bergmann.de&gt;\" imported\ngpg: Total number processed: 1\ngpg:               imported: 1  (RSA: 1)</pre>\n<p> Now we have received a public key for an entity known as \"Sebastian Bergmann &lt;sb@sebastian-bergmann.de&gt;\". However, we have no way of verifying this key was created by the person known as Sebastian Bergmann. But, let's try to verify the release signature again. </p>\n<pre class=\"screen\">gpg phpunit.phar.asc\ngpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A\ngpg: Good signature from \"Sebastian Bergmann &lt;sb@sebastian-bergmann.de&gt;\"\ngpg:                 aka \"Sebastian Bergmann &lt;sebastian@php.net&gt;\"\ngpg:                 aka \"Sebastian Bergmann &lt;sebastian@thephp.cc&gt;\"\ngpg:                 aka \"Sebastian Bergmann &lt;sebastian@phpunit.de&gt;\"\ngpg:                 aka \"Sebastian Bergmann &lt;sebastian.bergmann@thephp.cc&gt;\"\ngpg:                 aka \"[jpeg image of size 40635]\"\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg:          There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: D840 6D0D 8294 7747 2937  7831 4AA3 9408 6372 C20A</pre>\n<p> At this point, the signature is good, but we don't trust this key. A good signature means that the file has not been tampered. However, due to the nature of public key cryptography, you need to additionally verify that key <code class=\"literal\">6372C20A</code> was created by the real Sebastian Bergmann. </p>\n<p> Any attacker can create a public key and upload it to the public key servers. They can then create a malicious release signed by this fake key. Then, if you tried to verify the signature of this corrupt release, it would succeed because the key was not the \"real\" key. Therefore, you need to validate the authenticity of this key. Validating the authenticity of a public key, however, is outside the scope of this documentation. </p>\n<p> It may be prudent to create a shell script to manage PHPUnit installation that verifies the GnuPG signature before running your test suite. For example: </p>\n<pre class=\"screen\">\n#!/usr/bin/env bash\nclean=1 # Delete phpunit.phar after the tests are complete?\naftercmd=\"php phpunit.phar --bootstrap bootstrap.php src/tests\"\ngpg --fingerprint D8406D0D82947747293778314AA394086372C20A\nif [ $? -ne 0 ]; then\n    echo -e \"\\033[33mDownloading PGP Public Key...\\033[0m\"\n    gpg --recv-keys D8406D0D82947747293778314AA394086372C20A\n    # Sebastian Bergmann &lt;sb@sebastian-bergmann.de&gt;\n    gpg --fingerprint D8406D0D82947747293778314AA394086372C20A\n    if [ $? -ne 0 ]; then\n        echo -e \"\\033[31mCould not download PGP public key for verification\\033[0m\"\n        exit\n    fi\nfi\n\nif [ \"$clean\" -eq 1 ]; then\n    # Let's clean them up, if they exist\n    if [ -f phpunit.phar ]; then\n        rm -f phpunit.phar\n    fi\n    if [ -f phpunit.phar.asc ]; then\n        rm -f phpunit.phar.asc\n    fi\nfi\n\n# Let's grab the latest release and its signature\nif [ ! -f phpunit.phar ]; then\n    wget https://phar.phpunit.de/phpunit.phar\nfi\nif [ ! -f phpunit.phar.asc ]; then\n    wget https://phar.phpunit.de/phpunit.phar.asc\nfi\n\n# Verify before running\ngpg --verify phpunit.phar.asc phpunit.phar\nif [ $? -eq 0 ]; then\n    echo\n    echo -e \"\\033[33mBegin Unit Testing\\033[0m\"\n    # Run the testing suite\n    `$after_cmd`\n    # Cleanup\n    if [ \"$clean\" -eq 1 ]; then\n        echo -e \"\\033[32mCleaning Up!\\033[0m\"\n        rm -f phpunit.phar\n        rm -f phpunit.phar.asc\n    fi\nelse\n    echo\n    chmod -x phpunit.phar\n    mv phpunit.phar /tmp/bad-phpunit.phar\n    mv phpunit.phar.asc /tmp/bad-phpunit.phar.asc\n    echo -e \"\\033[31mSignature did not match! PHPUnit has been moved to /tmp/bad-phpunit.phar\\033[0m\"\n    exit 1\nfi\n      </pre>\n<h2 class=\"title\" id=\"installation.composer\">Composer</h2>\n<p> Simply add a dependency on <code class=\"literal\">phpunit/phpunit</code> to your project's <code class=\"literal\">composer.json</code> file if you use <a class=\"ulink\" href=\"https://getcomposer.org/\" target=\"_top\">Composer</a> to manage the dependencies of your project. Here is a minimal example of a <code class=\"literal\">composer.json</code> file that just defines a development-time dependency on PHPUnit 5.4: </p>\n<pre class=\"programlisting\" data-language=\"php\">{\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"5.4.*\"\n    }\n}</pre>\n<p> For a system-wide installation via Composer, you can run: </p>\n<pre class=\"screen\">composer global require \"phpunit/phpunit=5.4.*\"</pre>\n<p> Make sure you have <code class=\"literal\">~/.composer/vendor/bin/</code> in your path. </p>\n<h2 class=\"title\" id=\"installation.optional-packages\">Optional packages</h2>\n<p> The following optional packages are available: </p>\n<div class=\"variablelist\"><dl class=\"variablelist\">\n<dt><span class=\"term\"> PHP_Invoker </span></dt>\n<dd>\n<p> A utility class for invoking callables with a timeout. This package is required to enforce test timeouts in strict mode. </p>\n<p> This package is included in the PHAR distribution of PHPUnit. It can be installed via Composer by adding the following <code class=\"literal\">\"require-dev\"</code> dependency: </p>\n<pre class=\"screen\">\"phpunit/php-invoker\": \"*\"</pre>\n</dd>\n<dt><span class=\"term\"> DbUnit </span></dt>\n<dd>\n<p> DbUnit port for PHP/PHPUnit to support database interaction testing. </p>\n<p> This package is included in the PHAR distribution of PHPUnit. It can be installed via Composer by adding the following <code class=\"literal\">\"require-dev\"</code> dependency: </p>\n<pre class=\"screen\">\"phpunit/dbunit\": \"&gt;=1.2\"</pre>\n</dd>\n</dl></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/installation.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/installation.html</a>\n  </p>\n</div>\n","organizing-tests":"<h1 class=\"title\" id=\"organizing-tests\">Organizing Tests</h1>\n<p id=\"idp4656\">  One of the goals of PHPUnit is that tests should be composable: we want to be able to run any number or combination of tests together, for instance all tests for the whole project, or the tests for all classes of a component that is part of the project, or just the tests for a single class. </p>\n<p> PHPUnit supports different ways of organizing tests and composing them into a test suite. This chapter shows the most commonly used approaches. </p>\n<h2 class=\"title\" id=\"organizing-tests.filesystem\">Composing a Test Suite Using the Filesystem</h2>\n<p> Probably the easiest way to compose a test suite is to keep all test case source files in a test directory. PHPUnit can automatically discover and run the tests by recursively traversing the test directory. </p>\n<p> Lets take a look at the test suite of the <a class=\"ulink\" href=\"http://github.com/sebastianbergmann/money/\" target=\"_top\">sebastianbergmann/money</a> library. Looking at this project's directory structure, we see that the test case classes in the <code class=\"filename\">tests</code> directory mirror the package and class structure of the System Under Test (SUT) in the <code class=\"filename\">src</code> directory: </p>\n<pre class=\"screen\">src                                 tests\n`-- Currency.php                    `-- CurrencyTest.php\n`-- IntlFormatter.php               `-- IntlFormatterTest.php\n`-- Money.php                       `-- MoneyTest.php\n`-- autoload.php</pre>\n<p> To run all tests for the library we just need to point the PHPUnit command-line test runner to the test directory: </p>\n<pre class=\"screen\">phpunit --bootstrap src/autoload.php tests\nPHPUnit 5.4.0 by Sebastian Bergmann.\n\n.................................\n\nTime: 636 ms, Memory: 3.50Mb\n\nOK (33 tests, 52 assertions)</pre>\n<div class=\"alert alert-info\"><p> If you point the PHPUnit command-line test runner to a directory it will look for <code class=\"filename\">*Test.php</code> files. </p></div>\n<p> To run only the tests that are declared in the <code class=\"literal\">CurrencyTest</code> test case class in <code class=\"filename\">tests/CurrencyTest.php</code> we can use the following command: </p>\n<pre class=\"screen\">phpunit --bootstrap src/autoload.php tests/CurrencyTest\nPHPUnit 5.4.0 by Sebastian Bergmann.\n\n........\n\nTime: 280 ms, Memory: 2.75Mb\n\nOK (8 tests, 8 assertions)</pre>\n<p> For more fine-grained control of which tests to run we can use the <code class=\"literal\">--filter</code> option: </p>\n<pre class=\"screen\">phpunit --bootstrap src/autoload.php --filter testObjectCanBeConstructedForValidConstructorArgument tests\nPHPUnit 5.4.0 by Sebastian Bergmann.\n\n..\n\nTime: 167 ms, Memory: 3.00Mb\n\nOK (2 test, 2 assertions)</pre>\n<div class=\"alert alert-info\"><p> A drawback of this approach is that we have no control over the order in which the tests are run. This can lead to problems with regard to test dependencies, see <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.test-dependencies\" title=\"Test Dependencies\">the section called “Test Dependencies”</a>. In the next section you will see how you can make the test execution order explicit by using the XML configuration file. </p></div>\n<h2 class=\"title\" id=\"organizing-tests.xml-configuration\">Composing a Test Suite Using XML Configuration</h2>\n<p> PHPUnit's XML configuration file (<a class=\"xref\" href=\"appendixes.configuration\" title=\"Appendix C. The XML Configuration File\">Appendix C</a>) can also be used to compose a test suite. <a class=\"xref\" href=\"organizing-tests#organizing-tests.xml-configuration.examples.phpunit.xml\" title=\"Example 5.1: Composing a Test Suite Using XML Configuration\">Example 5.1</a> shows a minimal <code class=\"filename\">phpunit.xml</code> file that will add all <code class=\"literal\">*Test</code> classes that are found in <code class=\"filename\">*Test.php</code> files when the <code class=\"filename\">tests</code> directory is recursively traversed. </p>\n<div class=\"example\" id=\"organizing-tests.xml-configuration.examples.phpunit.xml\">\n<p class=\"title\"><strong>Example 5.1: Composing a Test Suite Using XML Configuration</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;phpunit bootstrap=\"src/autoload.php\"&gt;\n  &lt;testsuites&gt;\n    &lt;testsuite name=\"money\"&gt;\n      &lt;directory&gt;tests&lt;/directory&gt;\n    &lt;/testsuite&gt;\n  &lt;/testsuites&gt;\n&lt;/phpunit&gt;</pre></div>\n</div>\n<p> If <code class=\"filename\">phpunit.xml</code> or <code class=\"filename\">phpunit.xml.dist</code> (in that order) exist in the current working directory and <code class=\"literal\">--configuration</code> is <span class=\"emphasis\"><em>not</em></span> used, the configuration will be automatically read from that file. </p>\n<p> The order in which tests are executed can be made explicit: </p>\n<div class=\"example\" id=\"organizing-tests.xml-configuration.examples.phpunit.xml2\">\n<p class=\"title\"><strong>Example 5.2: Composing a Test Suite Using XML Configuration</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;phpunit bootstrap=\"src/autoload.php\"&gt;\n  &lt;testsuites&gt;\n    &lt;testsuite name=\"money\"&gt;\n      &lt;file&gt;tests/IntlFormatterTest.php&lt;/file&gt;\n      &lt;file&gt;tests/MoneyTest.php&lt;/file&gt;\n      &lt;file&gt;tests/CurrencyTest.php&lt;/file&gt;\n    &lt;/testsuite&gt;\n  &lt;/testsuites&gt;\n&lt;/phpunit&gt;</pre></div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/organizing-tests.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/organizing-tests.html</a>\n  </p>\n</div>\n","risky-tests":"<h1 class=\"title\" id=\"risky-tests\">Risky Tests</h1>\n<p> PHPUnit can perform the additional checks documented below while it executes the tests. </p>\n<h2 class=\"title\" id=\"risky-tests.useless-tests\">Useless Tests</h2>\n<p> PHPUnit can be strict about tests that do not test anything. This check can be enabled by using the <code class=\"literal\">--report-useless-tests</code> option on the commandline or by setting <code class=\"literal\">beStrictAboutTestsThatDoNotTestAnything=\"true\"</code> in PHPUnit's XML configuration file. </p>\n<p> A test that does not perform an assertion will be marked as risky when this check is enabled. Expectations on mock objects or annotations such as <code class=\"code\">@expectedException</code> count as an assertion. </p>\n<h2 class=\"title\" id=\"risky-tests.unintentionally-covered-code\">Unintentionally Covered Code</h2>\n<p> PHPUnit can be strict about unintentionally covered code. This check can be enabled by using the <code class=\"literal\">--strict-coverage</code> option on the commandline or by setting <code class=\"literal\">checkForUnintentionallyCoveredCode=\"true\"</code> in PHPUnit's XML configuration file. </p>\n<p> A test that is annotated with <code class=\"code\">@covers</code> and executes code that is not listed using a <code class=\"code\">@covers</code> or <code class=\"code\">@uses</code> annotation will be marked as risky when this check is enabled. </p>\n<h2 class=\"title\" id=\"risky-tests.output-during-test-execution\">Output During Test Execution</h2>\n<p> PHPUnit can be strict about output during tests. This check can be enabled by using the <code class=\"literal\">--disallow-test-output</code> option on the commandline or by setting <code class=\"literal\">beStrictAboutOutputDuringTests=\"true\"</code> in PHPUnit's XML configuration file. </p>\n<p> A test that emits output, for instance by invoking <code class=\"code\">print</code> in either the test code or the tested code, will be marked as risky when this check is enabled. </p>\n<h2 class=\"title\" id=\"risky-tests.test-execution-timeout\">Test Execution Timeout</h2>\n<p> A time limit can be enforced for the execution of a test if the <code class=\"literal\">PHP_Invoker</code> package is installed and the <code class=\"literal\">pcntl</code> extension is available. The enforcing of this time limit can be enabled by using the <code class=\"literal\">--enforce-time-limit</code> option on the commandline or by setting <code class=\"literal\">beStrictAboutTestSize=\"true\"</code> in PHPUnit's XML configuration file. </p>\n<p> A test annotated with <code class=\"literal\">@large</code> will fail if it takes longer than 60 seconds to execute. This timeout is configurable via the <code class=\"literal\">timeoutForLargeTests</code> attribute in the XML configuration file. </p>\n<p> A test annotated with <code class=\"literal\">@medium</code> will fail if it takes longer than 10 seconds to execute. This timeout is configurable via the <code class=\"literal\">timeoutForMediumTests</code> attribute in the XML configuration file. </p>\n<p> A test that is not annotated with <code class=\"literal\">@medium</code> or <code class=\"literal\">@large</code> will be treated as if it were annotated with <code class=\"literal\">@small</code>. A small test will fail if it takes longer than 1 second to execute. This timeout is configurable via the <code class=\"literal\">timeoutForSmallTests</code> attribute in the XML configuration file. </p>\n<h2 class=\"title\" id=\"risky-tests.global-state-manipulation\">Global State Manipulation</h2>\n<p> PHPUnit can be strict about tests that manipulate global state. This check can be enabled by using the <code class=\"literal\">--strict-global-state</code> option on the commandline or by setting <code class=\"literal\">beStrictAboutChangesToGlobalState=\"true\"</code> in PHPUnit's XML configuration file. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/risky-tests.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/risky-tests.html</a>\n  </p>\n</div>\n","textui":"<h1 class=\"title\" id=\"textui\">The Command-Line Test Runner</h1>\n<p> The PHPUnit command-line test runner can be invoked through the <code class=\"filename\">phpunit</code> command. The following code shows how to run tests with the PHPUnit command-line test runner: </p>\n<pre class=\"screen\">phpunit ArrayTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\n..\n\nTime: 0 seconds\n\n\nOK (2 tests, 2 assertions)</pre>\n<p> When invoked as shown above, the PHPUnit command-line test runner will look for a <code class=\"filename\">ArrayTest.php</code> sourcefile in the current working directory, load it, and expect to find a <code class=\"literal\">ArrayTest</code> test case class. It will then execute the tests of that class. </p>\n<p> For each test run, the PHPUnit command-line tool prints one character to indicate progress: </p>\n<div class=\"variablelist\"><dl class=\"variablelist\">\n<dt><span class=\"term\">.</span></dt>\n<dd><p> Printed when the test succeeds. </p></dd>\n<dt><span class=\"term\">F</span></dt>\n<dd><p> Printed when an assertion fails while running the test method. </p></dd>\n<dt><span class=\"term\">E</span></dt>\n<dd><p> Printed when an error occurs while running the test method. </p></dd>\n<dt><span class=\"term\">R</span></dt>\n<dd><p> Printed when the test has been marked as risky (see <a class=\"xref\" href=\"risky-tests\" title=\"Chapter 6. Risky Tests\">Chapter 6</a>). </p></dd>\n<dt><span class=\"term\">S</span></dt>\n<dd><p> Printed when the test has been skipped (see <a class=\"xref\" href=\"incomplete-and-skipped-tests\" title=\"Chapter 7. Incomplete and Skipped Tests\">Chapter 7</a>). </p></dd>\n<dt><span class=\"term\">I</span></dt>\n<dd><p> Printed when the test is marked as being incomplete or not yet implemented (see <a class=\"xref\" href=\"incomplete-and-skipped-tests\" title=\"Chapter 7. Incomplete and Skipped Tests\">Chapter 7</a>). </p></dd>\n</dl></div>\n<p id=\"idp285456\">   PHPUnit distinguishes between <span class=\"emphasis\"><em>failures</em></span> and <span class=\"emphasis\"><em>errors</em></span>. A failure is a violated PHPUnit assertion such as a failing <code class=\"literal\">assertEquals()</code> call. An error is an unexpected exception or a PHP error. Sometimes this distinction proves useful since errors tend to be easier to fix than failures. If you have a big list of problems, it is best to tackle the errors first and see if you have any failures left when they are all fixed. </p>\n<h2 class=\"title\" id=\"textui.clioptions\">Command-Line Options</h2>\n<p> Let's take a look at the command-line test runner's options in the following code: </p>\n<pre class=\"screen\">phpunit --help\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nUsage: phpunit [options] UnitTest [UnitTest.php]\n       phpunit [options] &lt;directory&gt;\n\nCode Coverage Options:\n\n  --coverage-clover &lt;file&gt;  Generate code coverage report in Clover XML format.\n  --coverage-crap4j &lt;file&gt;  Generate code coverage report in Crap4J XML format.\n  --coverage-html &lt;dir&gt;     Generate code coverage report in HTML format.\n  --coverage-php &lt;file&gt;     Export PHP_CodeCoverage object to file.\n  --coverage-text=&lt;file&gt;    Generate code coverage report in text format.\n                            Default: Standard output.\n  --coverage-xml &lt;dir&gt;      Generate code coverage report in PHPUnit XML format.\n\nLogging Options:\n\n  --log-junit &lt;file&gt;        Log test execution in JUnit XML format to file.\n  --log-tap &lt;file&gt;          Log test execution in TAP format to file.\n  --log-json &lt;file&gt;         Log test execution in JSON format.\n  --testdox-html &lt;file&gt;     Write agile documentation in HTML format to file.\n  --testdox-text &lt;file&gt;     Write agile documentation in Text format to file.\n\nTest Selection Options:\n\n  --filter &lt;pattern&gt;        Filter which tests to run.\n  --testsuite &lt;pattern&gt;     Filter which testsuite to run.\n  --group ...               Only runs tests from the specified group(s).\n  --exclude-group ...       Exclude tests from the specified group(s).\n  --list-groups             List available test groups.\n  --test-suffix ...         Only search for test in files with specified\n                            suffix(es). Default: Test.php,.phpt\n\nTest Execution Options:\n\n  --report-useless-tests    Be strict about tests that do not test anything.\n  --strict-coverage         Be strict about unintentionally covered code.\n  --strict-global-state     Be strict about changes to global state\n  --disallow-test-output    Be strict about output during tests.\n  --enforce-time-limit      Enforce time limit based on test size.\n  --disallow-todo-tests     Disallow @todo-annotated tests.\n\n  --process-isolation       Run each test in a separate PHP process.\n  --no-globals-backup       Do not backup and restore $GLOBALS for each test.\n  --static-backup           Backup and restore static attributes for each test.\n\n  --colors=&lt;flag&gt;           Use colors in output (\"never\", \"auto\" or \"always\").\n  --columns &lt;n&gt;             Number of columns to use for progress output.\n  --columns max             Use maximum number of columns for progress output.\n  --stderr                  Write to STDERR instead of STDOUT.\n  --stop-on-error           Stop execution upon first error.\n  --stop-on-failure         Stop execution upon first error or failure.\n  --stop-on-risky           Stop execution upon first risky test.\n  --stop-on-skipped         Stop execution upon first skipped test.\n  --stop-on-incomplete      Stop execution upon first incomplete test.\n  -v|--verbose              Output more verbose information.\n  --debug                   Display debugging information during test execution.\n\n  --loader &lt;loader&gt;         TestSuiteLoader implementation to use.\n  --repeat &lt;times&gt;          Runs the test(s) repeatedly.\n  --tap                     Report test execution progress in TAP format.\n  --testdox                 Report test execution progress in TestDox format.\n  --printer &lt;printer&gt;       TestListener implementation to use.\n\nConfiguration Options:\n\n  --bootstrap &lt;file&gt;        A \"bootstrap\" PHP file that is run before the tests.\n  -c|--configuration &lt;file&gt; Read configuration from XML file.\n  --no-configuration        Ignore default configuration file (phpunit.xml).\n  --include-path &lt;path(s)&gt;  Prepend PHP's include_path with given path(s).\n  -d key[=value]            Sets a php.ini value.\n\nMiscellaneous Options:\n\n  -h|--help                 Prints this usage information.\n  --version                 Prints the version and exits.</pre>\n<div class=\"variablelist\"><dl class=\"variablelist\">\n<dt><span class=\"term\">phpunit UnitTest</span></dt>\n<dd>\n<p> Runs the tests that are provided by the class <code class=\"literal\">UnitTest</code>. This class is expected to be declared in the <code class=\"filename\">UnitTest.php</code> sourcefile. </p>\n<p> <code class=\"literal\">UnitTest</code> must be either a class that inherits from <code class=\"literal\">phpunit\\framework\\TestCase</code> or a class that provides a <code class=\"literal\">public static suite()</code> method which returns a <code class=\"literal\">PHPUnit_Framework_Test</code> object, for example an instance of the <code class=\"literal\">PHPUnit_Framework_TestSuite</code> class. </p>\n</dd>\n<dt><span class=\"term\">phpunit UnitTest UnitTest.php</span></dt>\n<dd><p> Runs the tests that are provided by the class <code class=\"literal\">UnitTest</code>. This class is expected to be declared in the specified sourcefile. </p></dd>\n<dt><span class=\"term\">--coverage-clover</span></dt>\n<dd>\n<p> Generates a logfile in XML format with the code coverage information for the tests run. See <a class=\"xref\" href=\"logging\" title=\"Chapter 13. Logging\">Chapter 13</a> for more details. </p>\n<p> Please note that this functionality is only available when the tokenizer and Xdebug extensions are installed. </p>\n</dd>\n<dt><span class=\"term\">--coverage-crap4j</span></dt>\n<dd>\n<p> Generates a code coverage report in Crap4j format. See <a class=\"xref\" href=\"code-coverage-analysis\" title=\"Chapter 11. Code Coverage Analysis\">Chapter 11</a> for more details. </p>\n<p> Please note that this functionality is only available when the tokenizer and Xdebug extensions are installed. </p>\n</dd>\n<dt><span class=\"term\">--coverage-html</span></dt>\n<dd>\n<p> Generates a code coverage report in HTML format. See <a class=\"xref\" href=\"code-coverage-analysis\" title=\"Chapter 11. Code Coverage Analysis\">Chapter 11</a> for more details. </p>\n<p> Please note that this functionality is only available when the tokenizer and Xdebug extensions are installed. </p>\n</dd>\n<dt><span class=\"term\">--coverage-php</span></dt>\n<dd>\n<p> Generates a serialized PHP_CodeCoverage object with the code coverage information. </p>\n<p> Please note that this functionality is only available when the tokenizer and Xdebug extensions are installed. </p>\n</dd>\n<dt><span class=\"term\">--coverage-text</span></dt>\n<dd>\n<p> Generates a logfile or command-line output in human readable format with the code coverage information for the tests run. See <a class=\"xref\" href=\"logging\" title=\"Chapter 13. Logging\">Chapter 13</a> for more details. </p>\n<p> Please note that this functionality is only available when the tokenizer and Xdebug extensions are installed. </p>\n</dd>\n<dt><span class=\"term\">--log-junit</span></dt>\n<dd><p> Generates a logfile in JUnit XML format for the tests run. See <a class=\"xref\" href=\"logging\" title=\"Chapter 13. Logging\">Chapter 13</a> for more details. </p></dd>\n<dt><span class=\"term\">--log-tap</span></dt>\n<dd><p> Generates a logfile using the <a class=\"ulink\" href=\"http://testanything.org/\" target=\"_top\">Test Anything Protocol (TAP)</a> format for the tests run. See <a class=\"xref\" href=\"logging\" title=\"Chapter 13. Logging\">Chapter 13</a> for more details. </p></dd>\n<dt><span class=\"term\">--log-json</span></dt>\n<dd><p> Generates a logfile using the <a class=\"ulink\" href=\"http://www.json.org/\" target=\"_top\">JSON</a> format. See <a class=\"xref\" href=\"logging\" title=\"Chapter 13. Logging\">Chapter 13</a> for more details. </p></dd>\n<dt><span class=\"term\">--testdox-html and --testdox-text</span></dt>\n<dd><p> Generates agile documentation in HTML or plain text format for the tests that are run. See <a class=\"xref\" href=\"other-uses-for-tests\" title=\"Chapter 12. Other Uses for Tests\">Chapter 12</a> for more details. </p></dd>\n<dt><span class=\"term\">--filter</span></dt>\n<dd>\n<p> Only runs tests whose name matches the given regular expression pattern. If the pattern is not enclosed in delimiters, PHPUnit will enclose the pattern in <code class=\"literal\">/</code> delimiters. </p>\n<p> The test names to match will be in one of the following formats: </p>\n<div class=\"variablelist\"><dl class=\"variablelist\">\n<dt><span class=\"term\">TestNamespace\\TestCaseClass::testMethod</span></dt>\n<dd><p> The default test name format is the equivalent of using the <code class=\"literal\">__METHOD__</code> magic constant inside the test method. </p></dd>\n<dt><span class=\"term\">TestNamespace\\TestCaseClass::testMethod with data set #0</span></dt>\n<dd><p> When a test has a data provider, each iteration of the data gets the current index appended to the end of the default test name. </p></dd>\n<dt><span class=\"term\">TestNamespace\\TestCaseClass::testMethod with data set \"my named data\"</span></dt>\n<dd>\n<p> When a test has a data provider that uses named sets, each iteration of the data gets the current name appended to the end of the default test name. See <a class=\"xref\" href=\"textui#textui.examples.TestCaseClass.php\" title=\"Example 3.1: Named data sets\">Example 3.1</a> for an example of named data sets. </p>\n<div class=\"example\" id=\"textui.examples.TestCaseClass.php\">\n<p class=\"title\"><strong>Example 3.1: Named data sets</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nnamespace TestNamespace;\n\nclass TestCaseClass extends TestCase\n{\n    /**\n     * @dataProvider provider\n     */\n    public function testMethod($data)\n    {\n        $this-&gt;assertTrue($data);\n    }\n\n    public function provider()\n    {\n        return [\n            'my named data' =&gt; [true],\n            'my data'       =&gt; [true]\n        ];\n    }\n}\n?&gt;</pre></div>\n</div>\n</dd>\n<dt><span class=\"term\">/path/to/my/test.phpt</span></dt>\n<dd><p> The test name for a PHPT test is the filesystem path. </p></dd>\n</dl></div>\n<p> See <a class=\"xref\" href=\"textui#textui.examples.filter-patterns\" title=\"Example 3.2: Filter pattern examples\">Example 3.2</a> for examples of valid filter patterns. </p>\n<div class=\"example\" id=\"textui.examples.filter-patterns\">\n<p class=\"title\"><strong>Example 3.2: Filter pattern examples</strong></p>\n<div class=\"example-contents\"><div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter 'TestNamespace\\\\TestCaseClass::testMethod'</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter 'TestNamespace\\\\TestCaseClass'</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter TestNamespace</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter TestCaseClass</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter testMethod</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter '/::testMethod .*\"my named data\"/'</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter '/::testMethod .*#5$/'</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter '/::testMethod .*#(5|6|7)$/'</pre></li>\n</ul></div></div>\n</div>\n<p> See <a class=\"xref\" href=\"textui#textui.examples.filter-shortcuts\" title=\"Example 3.3: Filter shortcuts\">Example 3.3</a> for some additional shortcuts that are available for matching data providers. </p>\n<div class=\"example\" id=\"textui.examples.filter-shortcuts\">\n<p class=\"title\"><strong>Example 3.3: Filter shortcuts</strong></p>\n<div class=\"example-contents\"><div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter 'testMethod#2'</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter 'testMethod#2-4'</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter '#2'</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter '#2-4'</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter 'testMethod@my named data'</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter 'testMethod@my.*data'</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter '@my named data'</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--filter '@my.*data'</pre></li>\n</ul></div></div>\n</div>\n</dd>\n<dt><span class=\"term\">--testsuite</span></dt>\n<dd><p> Only runs the test suite whose name matches the given pattern. </p></dd>\n<dt><span class=\"term\">--group</span></dt>\n<dd>\n<p> Only runs tests from the specified group(s). A test can be tagged as belonging to a group using the <code class=\"literal\">@group</code> annotation. </p>\n<p> The <code class=\"literal\">@author</code> annotation is an alias for <code class=\"literal\">@group</code> allowing to filter tests based on their authors. </p>\n</dd>\n<dt><span class=\"term\">--exclude-group</span></dt>\n<dd><p> Exclude tests from the specified group(s). A test can be tagged as belonging to a group using the <code class=\"literal\">@group</code> annotation. </p></dd>\n<dt><span class=\"term\">--list-groups</span></dt>\n<dd><p> List available test groups. </p></dd>\n<dt><span class=\"term\">--test-suffix</span></dt>\n<dd><p> Only search for test files with specified suffix(es). </p></dd>\n<dt><span class=\"term\">--report-useless-tests</span></dt>\n<dd><p> Be strict about tests that do not test anything. See <a class=\"xref\" href=\"risky-tests\" title=\"Chapter 6. Risky Tests\">Chapter 6</a> for details. </p></dd>\n<dt><span class=\"term\">--strict-coverage</span></dt>\n<dd><p> Be strict about unintentionally covered code. See <a class=\"xref\" href=\"risky-tests\" title=\"Chapter 6. Risky Tests\">Chapter 6</a> for details. </p></dd>\n<dt><span class=\"term\">--strict-global-state</span></dt>\n<dd><p> Be strict about global state manipulation. See <a class=\"xref\" href=\"risky-tests\" title=\"Chapter 6. Risky Tests\">Chapter 6</a> for details. </p></dd>\n<dt><span class=\"term\">--disallow-test-output</span></dt>\n<dd><p> Be strict about output during tests. See <a class=\"xref\" href=\"risky-tests\" title=\"Chapter 6. Risky Tests\">Chapter 6</a> for details. </p></dd>\n<dt><span class=\"term\">--disallow-todo-tests</span></dt>\n<dd><p> Does not execute tests which have the <code class=\"literal\">@todo</code> annotation in its docblock. </p></dd>\n<dt><span class=\"term\">--enforce-time-limit</span></dt>\n<dd><p> Enforce time limit based on test size. See <a class=\"xref\" href=\"risky-tests\" title=\"Chapter 6. Risky Tests\">Chapter 6</a> for details. </p></dd>\n<dt><span class=\"term\">--process-isolation</span></dt>\n<dd><p> Run each test in a separate PHP process. </p></dd>\n<dt><span class=\"term\">--no-globals-backup</span></dt>\n<dd><p> Do not backup and restore $GLOBALS. See <a class=\"xref\" href=\"fixtures#fixtures.global-state\" title=\"Global State\">the section called “Global State”</a> for more details. </p></dd>\n<dt><span class=\"term\">--static-backup</span></dt>\n<dd><p> Backup and restore static attributes of user-defined classes. See <a class=\"xref\" href=\"fixtures#fixtures.global-state\" title=\"Global State\">the section called “Global State”</a> for more details. </p></dd>\n<dt><span class=\"term\">--colors</span></dt>\n<dd>\n<p> Use colors in output. On Windows, use <a class=\"ulink\" href=\"https://github.com/adoxa/ansicon\" target=\"_top\">ANSICON</a> or <a class=\"ulink\" href=\"https://github.com/Maximus5/ConEmu\" target=\"_top\">ConEmu</a>. </p>\n<p> There are three possible values for this option: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p> <code class=\"literal\">never</code>: never displays colors in the output. This is the default value when <code class=\"literal\">--colors</code> option is not used. </p></li>\n<li class=\"listitem\"><p> <code class=\"literal\">auto</code>: displays colors in the output unless the current terminal doesn't supports colors, or if the output is piped to a command or redirected to a file. </p></li>\n<li class=\"listitem\"><p> <code class=\"literal\">always</code>: always displays colors in the output even when the current terminal doesn't supports colors, or when the output is piped to a command or redirected to a file. </p></li>\n</ul></div>\n<p> When <code class=\"literal\">--colors</code> is used without any value, <code class=\"literal\">auto</code> is the chosen value. </p>\n</dd>\n<dt><span class=\"term\">--columns</span></dt>\n<dd><p> Defines the number of columns to use for progress output. If <code class=\"literal\">max</code> is defined as value, the number of columns will be maximum of the current terminal. </p></dd>\n<dt><span class=\"term\">--stderr</span></dt>\n<dd><p> Optionally print to <code class=\"literal\">STDERR</code> instead of <code class=\"literal\">STDOUT</code>. </p></dd>\n<dt><span class=\"term\">--stop-on-error</span></dt>\n<dd><p> Stop execution upon first error. </p></dd>\n<dt><span class=\"term\">--stop-on-failure</span></dt>\n<dd><p> Stop execution upon first error or failure. </p></dd>\n<dt><span class=\"term\">--stop-on-risky</span></dt>\n<dd><p> Stop execution upon first risky test. </p></dd>\n<dt><span class=\"term\">--stop-on-skipped</span></dt>\n<dd><p> Stop execution upon first skipped test. </p></dd>\n<dt><span class=\"term\">--stop-on-incomplete</span></dt>\n<dd><p> Stop execution upon first incomplete test. </p></dd>\n<dt><span class=\"term\">--verbose</span></dt>\n<dd><p> Output more verbose information, for instance the names of tests that were incomplete or have been skipped. </p></dd>\n<dt><span class=\"term\">--debug</span></dt>\n<dd><p> Output debug information such as the name of a test when its execution starts. </p></dd>\n<dt><span class=\"term\">--loader</span></dt>\n<dd>\n<p> Specifies the <code class=\"literal\">PHPUnit_Runner_TestSuiteLoader</code> implementation to use. </p>\n<p> The standard test suite loader will look for the sourcefile in the current working directory and in each directory that is specified in PHP's <code class=\"literal\">include_path</code> configuration directive. A class name such as <code class=\"literal\">Project_Package_Class</code> is mapped to the source filename <code class=\"filename\">Project/Package/Class.php</code>. </p>\n</dd>\n<dt><span class=\"term\">--repeat</span></dt>\n<dd><p> Repeatedly runs the test(s) the specified number of times. </p></dd>\n<dt><span class=\"term\">--tap</span></dt>\n<dd><p> Reports the test progress using the <a class=\"ulink\" href=\"http://testanything.org/\" target=\"_top\">Test Anything Protocol (TAP)</a>. See <a class=\"xref\" href=\"logging\" title=\"Chapter 13. Logging\">Chapter 13</a> for more details. </p></dd>\n<dt><span class=\"term\">--testdox</span></dt>\n<dd><p> Reports the test progress as agile documentation. See <a class=\"xref\" href=\"other-uses-for-tests\" title=\"Chapter 12. Other Uses for Tests\">Chapter 12</a> for more details. </p></dd>\n<dt><span class=\"term\">--printer</span></dt>\n<dd><p> Specifies the result printer to use. The printer class must extend <code class=\"literal\">PHPUnit_Util_Printer</code> and implement the <code class=\"literal\">PHPUnit_Framework_TestListener</code> interface. </p></dd>\n<dt><span class=\"term\">--bootstrap</span></dt>\n<dd><p> A \"bootstrap\" PHP file that is run before the tests. </p></dd>\n<dt>\n<span class=\"term\">--configuration, </span><span class=\"term\">-c</span>\n</dt>\n<dd>\n<p> Read configuration from XML file. See <a class=\"xref\" href=\"appendixes.configuration\" title=\"Appendix C. The XML Configuration File\">Appendix C</a> for more details. </p>\n<p> If <code class=\"filename\">phpunit.xml</code> or <code class=\"filename\">phpunit.xml.dist</code> (in that order) exist in the current working directory and <code class=\"literal\">--configuration</code> is <span class=\"emphasis\"><em>not</em></span> used, the configuration will be automatically read from that file. </p>\n</dd>\n<dt><span class=\"term\">--no-configuration</span></dt>\n<dd><p> Ignore <code class=\"filename\">phpunit.xml</code> and <code class=\"filename\">phpunit.xml.dist</code> from the current working directory. </p></dd>\n<dt><span class=\"term\">--include-path</span></dt>\n<dd><p> Prepend PHP's <code class=\"literal\">include_path</code> with given path(s). </p></dd>\n<dt><span class=\"term\">-d</span></dt>\n<dd><p> Sets the value of the given PHP configuration option. </p></dd>\n</dl></div>\n<div class=\"alert alert-info\"><p> Please note that as of 4.8, options can be put after the argument(s). </p></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/textui.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/textui.html</a>\n  </p>\n</div>\n","fixtures":"<h1 class=\"title\" id=\"fixtures\">Fixtures</h1>\n<p id=\"idp40064\">  One of the most time-consuming parts of writing tests is writing the code to set the world up in a known state and then return it to its original state when the test is complete. This known state is called the <span class=\"emphasis\"><em>fixture</em></span> of the test. </p>\n<p> In <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest.php\" title=\"Example 2.1: Testing array operations with PHPUnit\">Example 2.1</a>, the fixture was simply the array that is stored in the <code class=\"literal\">$stack</code> variable. Most of the time, though, the fixture will be more complex than a simple array, and the amount of code needed to set it up will grow accordingly. The actual content of the test gets lost in the noise of setting up the fixture. This problem gets even worse when you write several tests with similar fixtures. Without some help from the testing framework, we would have to duplicate the code that sets up the fixture for each test we write. </p>\n<p id=\"idp212192\">    PHPUnit supports sharing the setup code. Before a test method is run, a template method called <code class=\"literal\">setUp()</code> is invoked. <code class=\"literal\">setUp()</code> is where you create the objects against which you will test. Once the test method has finished running, whether it succeeded or failed, another template method called <code class=\"literal\">tearDown()</code> is invoked. <code class=\"literal\">tearDown()</code> is where you clean up the objects against which you tested. </p>\n<p> In <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php\" title=\"Example 2.2: Using the @depends annotation to express dependencies\">Example 2.2</a> we used the producer-consumer relationship between tests to share a fixture. This is not always desired or even possible. <a class=\"xref\" href=\"fixtures#fixtures.examples.StackTest.php\" title=\"Example 4.1: Using setUp() to create the stack fixture\">Example 4.1</a> shows how we can write the tests of the <code class=\"literal\">StackTest</code> in such a way that not the fixture itself is reused but the code that creates it. First we declare the instance variable, <code class=\"literal\">$stack</code>, that we are going to use instead of a method-local variable. Then we put the creation of the <code class=\"literal\">array</code> fixture into the <code class=\"literal\">setUp()</code> method. Finally, we remove the redundant code from the test methods and use the newly introduced instance variable, <code class=\"literal\">$this-&gt;stack</code>, instead of the method-local variable <code class=\"literal\">$stack</code> with the <code class=\"literal\">assertEquals()</code> assertion method. </p>\n<div class=\"example\" id=\"fixtures.examples.StackTest.php\">\n<p class=\"title\"><strong>Example 4.1: Using setUp() to create the stack fixture</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StackTest extends TestCase\n{\n    protected $stack;\n\n    protected function setUp()\n    {\n        $this-&gt;stack = [];\n    }\n\n    public function testEmpty()\n    {\n        $this-&gt;assertTrue(empty($this-&gt;stack));\n    }\n\n    public function testPush()\n    {\n        array_push($this-&gt;stack, 'foo');\n        $this-&gt;assertEquals('foo', $this-&gt;stack[count($this-&gt;stack)-1]);\n        $this-&gt;assertFalse(empty($this-&gt;stack));\n    }\n\n    public function testPop()\n    {\n        array_push($this-&gt;stack, 'foo');\n        $this-&gt;assertEquals('foo', array_pop($this-&gt;stack));\n        $this-&gt;assertTrue(empty($this-&gt;stack));\n    }\n}\n?&gt;</pre></div>\n</div>\n<p id=\"idp235120\">      The <code class=\"literal\">setUp()</code> and <code class=\"literal\">tearDown()</code> template methods are run once for each test method (and on fresh instances) of the test case class. </p>\n<p id=\"idp241168\">         In addition, the <code class=\"literal\">setUpBeforeClass()</code> and <code class=\"literal\">tearDownAfterClass()</code> template methods are called before the first test of the test case class is run and after the last test of the test case class is run, respectively. </p>\n<p id=\"idp243232\">  The example below shows all template methods that are available in a test case class. </p>\n<div class=\"example\" id=\"fixtures.examples.TemplateMethodsTest.php\">\n<p class=\"title\"><strong>Example 4.2: Example showing all template methods available</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass TemplateMethodsTest extends TestCase\n{\n    public static function setUpBeforeClass()\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n    }\n\n    protected function setUp()\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n    }\n\n    protected function assertPreConditions()\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n    }\n\n    public function testOne()\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n        $this-&gt;assertTrue(true);\n    }\n\n    public function testTwo()\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n        $this-&gt;assertTrue(false);\n    }\n\n    protected function assertPostConditions()\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n    }\n\n    protected function tearDown()\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n    }\n\n    public static function tearDownAfterClass()\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n    }\n\n    protected function onNotSuccessfulTest(Exception $e)\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n        throw $e;\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit TemplateMethodsTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nTemplateMethodsTest::setUpBeforeClass\nTemplateMethodsTest::setUp\nTemplateMethodsTest::assertPreConditions\nTemplateMethodsTest::testOne\nTemplateMethodsTest::assertPostConditions\nTemplateMethodsTest::tearDown\n.TemplateMethodsTest::setUp\nTemplateMethodsTest::assertPreConditions\nTemplateMethodsTest::testTwo\nTemplateMethodsTest::tearDown\nTemplateMethodsTest::onNotSuccessfulTest\nFTemplateMethodsTest::tearDownAfterClass\n\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) TemplateMethodsTest::testTwo\nFailed asserting that &lt;boolean:false&gt; is true.\n/home/sb/TemplateMethodsTest.php:30\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"fixtures.more-setup-than-teardown\">More setUp() than tearDown()</h2>\n<p> <code class=\"literal\">setUp()</code> and <code class=\"literal\">tearDown()</code> are nicely symmetrical in theory but not in practice. In practice, you only need to implement <code class=\"literal\">tearDown()</code> if you have allocated external resources like files or sockets in <code class=\"literal\">setUp()</code>. If your <code class=\"literal\">setUp()</code> just creates plain PHP objects, you can generally ignore <code class=\"literal\">tearDown()</code>. However, if you create many objects in your <code class=\"literal\">setUp()</code>, you might want to <code class=\"literal\">unset()</code> the variables pointing to those objects in your <code class=\"literal\">tearDown()</code> so they can be garbage collected. The garbage collection of test case objects is not predictable. </p>\n<h2 class=\"title\" id=\"fixtures.variations\">Variations</h2>\n<p> What happens when you have two tests with slightly different setups? There are two possibilities: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p> If the <code class=\"literal\">setUp()</code> code differs only slightly, move the code that differs from the <code class=\"literal\">setUp()</code> code to the test method. </p></li>\n<li class=\"listitem\"><p> If you really have a different <code class=\"literal\">setUp()</code>, you need a different test case class. Name the class after the difference in the setup. </p></li>\n</ul></div>\n<h2 class=\"title\" id=\"fixtures.sharing-fixture\">Sharing Fixture</h2>\n<p> There are few good reasons to share fixtures between tests, but in most cases the need to share a fixture between tests stems from an unresolved design problem. </p>\n<p> A good example of a fixture that makes sense to share across several tests is a database connection: you log into the database once and reuse the database connection instead of creating a new connection for each test. This makes your tests run faster. </p>\n<p id=\"idp440208\">   <a class=\"xref\" href=\"fixtures#fixtures.sharing-fixture.examples.DatabaseTest.php\" title=\"Example 4.3: Sharing fixture between the tests of a test suite\">Example 4.3</a> uses the <code class=\"literal\">setUpBeforeClass()</code> and <code class=\"literal\">tearDownAfterClass()</code> template methods to connect to the database before the test case class' first test and to disconnect from the database after the last test of the test case, respectively. </p>\n<div class=\"example\" id=\"fixtures.sharing-fixture.examples.DatabaseTest.php\">\n<p class=\"title\"><strong>Example 4.3: Sharing fixture between the tests of a test suite</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass DatabaseTest extends TestCase\n{\n    protected static $dbh;\n\n    public static function setUpBeforeClass()\n    {\n        self::$dbh = new PDO('sqlite::memory:');\n    }\n\n    public static function tearDownAfterClass()\n    {\n        self::$dbh = null;\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> It cannot be emphasized enough that sharing fixtures between tests reduces the value of the tests. The underlying design problem is that objects are not loosely coupled. You will achieve better results solving the underlying design problem and then writing tests using stubs (see <a class=\"xref\" href=\"test-doubles\" title=\"Chapter 9. Test Doubles\">Chapter 9</a>), than by creating dependencies between tests at runtime and ignoring the opportunity to improve your design. </p>\n<h2 class=\"title\" id=\"fixtures.global-state\">Global State</h2>\n<p> <a class=\"ulink\" href=\"http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html\" target=\"_top\">It is hard to test code that uses singletons.</a> The same is true for code that uses global variables. Typically, the code you want to test is coupled strongly with a global variable and you cannot control its creation. An additional problem is the fact that one test's change to a global variable might break another test. </p>\n<p> In PHP, global variables work like this: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p>A global variable <code class=\"literal\">$foo = 'bar';</code> is stored as <code class=\"literal\">$GLOBALS['foo'] = 'bar';</code>.</p></li>\n<li class=\"listitem\"><p>The <code class=\"literal\">$GLOBALS</code> variable is a so-called <span class=\"emphasis\"><em>super-global</em></span> variable.</p></li>\n<li class=\"listitem\"><p>Super-global variables are built-in variables that are always available in all scopes.</p></li>\n<li class=\"listitem\"><p>In the scope of a function or method, you may access the global variable <code class=\"literal\">$foo</code> by either directly accessing <code class=\"literal\">$GLOBALS['foo']</code> or by using <code class=\"literal\">global $foo;</code> to create a local variable with a reference to the global variable.</p></li>\n</ul></div>\n<p> Besides global variables, static attributes of classes are also part of the global state. </p>\n<p id=\"idp456608\">   By default, PHPUnit runs your tests in a way where changes to global and super-global variables (<code class=\"literal\">$GLOBALS</code>, <code class=\"literal\">$_ENV</code>, <code class=\"literal\">$_POST</code>, <code class=\"literal\">$_GET</code>, <code class=\"literal\">$_COOKIE</code>, <code class=\"literal\">$_SERVER</code>, <code class=\"literal\">$_FILES</code>, <code class=\"literal\">$_REQUEST</code>) do not affect other tests. Optionally, this isolation can be extended to static attributes of classes. </p>\n<div class=\"alert alert-info\">\n<p> The backup and restore operations for global variables and static class attributes use <code class=\"literal\">serialize()</code> and <code class=\"literal\">unserialize()</code>. </p>\n<p> Objects of some classes (e.g., <code class=\"literal\">PDO</code>) cannot be serialized and the backup operation will break when such an object is stored e.g. in the <code class=\"literal\">$GLOBALS</code> array. </p>\n</div>\n<p id=\"idp465472\">   The <code class=\"literal\">@backupGlobals</code> annotation that is discussed in <a class=\"xref\" href=\"appendixes.annotations#appendixes.annotations.backupGlobals\" title=\"@backupGlobals\">the section called “@backupGlobals”</a> can be used to control the backup and restore operations for global variables. Alternatively, you can provide a blacklist of global variables that are to be excluded from the backup and restore operations like this </p>\n<pre class=\"programlisting\" data-language=\"php\">class MyTest extends TestCase\n{\n    protected $backupGlobalsBlacklist = ['globalVariable'];\n\n    // ...\n}</pre>\n\n<div class=\"alert alert-info\"><p> Setting the <code class=\"literal\">$backupGlobalsBlacklist</code> property inside e.g. the <code class=\"literal\">setUp()</code> method has no effect. </p></div>\n<p id=\"idp470960\">   The <code class=\"literal\">@backupStaticAttributes</code> annotation discussed in <a class=\"xref\" href=\"appendixes.annotations#appendixes.annotations.backupStaticAttributes\" title=\"@backupStaticAttributes\">the section called “@backupStaticAttributes”</a> can be used to back up all static property values in all declared classes before each test and restore them afterwards. </p>\n<p> It processes all classes that are declared at the time a test starts, not only the test class itself. It only applies to static class properties, not static variables within functions. </p>\n<div class=\"alert alert-info\">\n<p> The <code class=\"literal\">@backupStaticAttributes</code> operation is executed before a test method, but only if it is enabled. If a static value was changed by a previously executed test that did not have <code class=\"literal\">@backupStaticAttributes</code> enabled, then that value will be backed up and restored — not the originally declared default value. PHP does not record the originally declared default value of any static variable. </p>\n<p> The same applies to static properties of classes that were newly loaded/declared within a test. They cannot be reset to their originally declared default value after the test, since that value is unknown. Whichever value is set will leak into subsequent tests. </p>\n<p> For unit tests, it is recommended to explicitly reset the values of static properties under test in your <code class=\"literal\">setUp()</code> code instead (and ideally also <code class=\"literal\">tearDown()</code>, so as to not affect subsequently executed tests). </p>\n</div>\n<p> You can provide a blacklist of static attributes that are to be excluded from the backup and restore operations: </p>\n<pre class=\"programlisting\" data-language=\"php\">\nclass MyTest extends TestCase\n{\n    protected $backupStaticAttributesBlacklist = [\n        'className' =&gt; ['attributeName']\n    ];\n\n    // ...\n}\n</pre>\n\n<div class=\"alert alert-info\"><p> Setting the <code class=\"literal\">$backupStaticAttributesBlacklist</code> property inside e.g. the <code class=\"literal\">setUp()</code> method has no effect. </p></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/fixtures.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/fixtures.html</a>\n  </p>\n</div>\n","incomplete-and-skipped-tests":"<h1 class=\"title\" id=\"incomplete-and-skipped-tests\">Incomplete and Skipped Tests</h1>\n<h2 class=\"title\" id=\"incomplete-and-skipped-tests.incomplete-tests\">Incomplete Tests</h2>\n<p> When you are working on a new test case class, you might want to begin by writing empty test methods such as: </p>\n<pre class=\"programlisting\" data-language=\"php\">public function testSomething()\n{\n}</pre>\n<p> to keep track of the tests that you have to write. The problem with empty test methods is that they are interpreted as a success by the PHPUnit framework. This misinterpretation leads to the test reports being useless -- you cannot see whether a test is actually successful or just not yet implemented. Calling <code class=\"literal\">$this-&gt;fail()</code> in the unimplemented test method does not help either, since then the test will be interpreted as a failure. This would be just as wrong as interpreting an unimplemented test as a success. </p>\n<p id=\"idp684240\">    If we think of a successful test as a green light and a test failure as a red light, we need an additional yellow light to mark a test as being incomplete or not yet implemented. <code class=\"literal\">PHPUnit_Framework_IncompleteTest</code> is a marker interface for marking an exception that is raised by a test method as the result of the test being incomplete or currently not implemented. <code class=\"literal\">PHPUnit_Framework_IncompleteTestError</code> is the standard implementation of this interface. </p>\n<p> <a class=\"xref\" href=\"incomplete-and-skipped-tests#incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php\" title=\"Example 7.1: Marking a test as incomplete\">Example 7.1</a> shows a test case class, <code class=\"literal\">SampleTest</code>, that contains one test method, <code class=\"literal\">testSomething()</code>. By calling the convenience method <code class=\"literal\">markTestIncomplete()</code> (which automatically raises an <code class=\"literal\">PHPUnit_Framework_IncompleteTestError</code> exception) in the test method, we mark the test as being incomplete. </p>\n<div class=\"example\" id=\"incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php\">\n<p class=\"title\"><strong>Example 7.1: Marking a test as incomplete</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass SampleTest extends TestCase\n{\n    public function testSomething()\n    {\n        // Optional: Test anything here, if you want.\n        $this-&gt;assertTrue(true, 'This should already work.');\n\n        // Stop here and mark this test as incomplete.\n        $this-&gt;markTestIncomplete(\n          'This test has not been implemented yet.'\n        );\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> An incomplete test is denoted by an <code class=\"literal\">I</code> in the output of the PHPUnit command-line test runner, as shown in the following example: </p>\n<pre class=\"screen\">phpunit --verbose SampleTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nI\n\nTime: 0 seconds, Memory: 3.95Mb\n\nThere was 1 incomplete test:\n\n1) SampleTest::testSomething\nThis test has not been implemented yet.\n\n/home/sb/SampleTest.php:12\nOK, but incomplete or skipped tests!\nTests: 1, Assertions: 1, Incomplete: 1.</pre>\n<p> <a class=\"xref\" href=\"incomplete-and-skipped-tests#incomplete-and-skipped-tests.incomplete-tests.tables.api\" title=\"Table 7.1. API for Incomplete Tests\">Table 7.1</a> shows the API for marking tests as incomplete. </p>\n<div class=\"table\" id=\"incomplete-and-skipped-tests.incomplete-tests.tables.api\">\n<p class=\"title\"><strong>Table 7.1. API for Incomplete Tests</strong></p>\n<div class=\"table-contents\"><table class=\"table\" summary=\"API for Incomplete Tests\">\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead><tr>\n<th align=\"left\">Method</th>\n<th align=\"left\">Meaning</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"literal\">void markTestIncomplete()</code></td>\n<td align=\"left\">Marks the current test as incomplete.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">void markTestIncomplete(string $message)</code></td>\n<td align=\"left\">Marks the current test as incomplete using <code class=\"literal\">$message</code> as an explanatory message.</td>\n</tr>\n</tbody>\n</table></div>\n</div>\n<h2 class=\"title\" id=\"incomplete-and-skipped-tests.skipping-tests\">Skipping Tests</h2>\n<p> Not all tests can be run in every environment. Consider, for instance, a database abstraction layer that has several drivers for the different database systems it supports. The tests for the MySQL driver can of course only be run if a MySQL server is available. </p>\n<p> <a class=\"xref\" href=\"incomplete-and-skipped-tests#incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php\" title=\"Example 7.2: Skipping a test\">Example 7.2</a> shows a test case class, <code class=\"literal\">DatabaseTest</code>, that contains one test method, <code class=\"literal\">testConnection()</code>. In the test case class' <code class=\"literal\">setUp()</code> template method we check whether the MySQLi extension is available and use the <code class=\"literal\">markTestSkipped()</code> method to skip the test if it is not. </p>\n<div class=\"example\" id=\"incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php\">\n<p class=\"title\"><strong>Example 7.2: Skipping a test</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass DatabaseTest extends TestCase\n{\n    protected function setUp()\n    {\n        if (!extension_loaded('mysqli')) {\n            $this-&gt;markTestSkipped(\n              'The MySQLi extension is not available.'\n            );\n        }\n    }\n\n    public function testConnection()\n    {\n        // ...\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> A test that has been skipped is denoted by an <code class=\"literal\">S</code> in the output of the PHPUnit command-line test runner, as shown in the following example: </p>\n<pre class=\"screen\">phpunit --verbose DatabaseTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nS\n\nTime: 0 seconds, Memory: 3.95Mb\n\nThere was 1 skipped test:\n\n1) DatabaseTest::testConnection\nThe MySQLi extension is not available.\n\n/home/sb/DatabaseTest.php:9\nOK, but incomplete or skipped tests!\nTests: 1, Assertions: 0, Skipped: 1.</pre>\n<p> <a class=\"xref\" href=\"incomplete-and-skipped-tests#incomplete-and-skipped-tests.skipped-tests.tables.api\" title=\"Table 7.2. API for Skipping Tests\">Table 7.2</a> shows the API for skipping tests. </p>\n<div class=\"table\" id=\"incomplete-and-skipped-tests.skipped-tests.tables.api\">\n<p class=\"title\"><strong>Table 7.2. API for Skipping Tests</strong></p>\n<div class=\"table-contents\"><table class=\"table\" summary=\"API for Skipping Tests\">\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead><tr>\n<th align=\"left\">Method</th>\n<th align=\"left\">Meaning</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"literal\">void markTestSkipped()</code></td>\n<td align=\"left\">Marks the current test as skipped.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">void markTestSkipped(string $message)</code></td>\n<td align=\"left\">Marks the current test as skipped using <code class=\"literal\">$message</code> as an explanatory message.</td>\n</tr>\n</tbody>\n</table></div>\n</div>\n<h2 class=\"title\" id=\"incomplete-and-skipped-tests.skipping-tests-using-requires\">Skipping Tests using @requires</h2>\n<p> In addition to the above methods it is also possible to use the <code class=\"literal\">@requires</code> annotation to express common preconditions for a test case. </p>\n<div class=\"table\" id=\"incomplete-and-skipped-tests.requires.tables.api\">\n<p class=\"title\"><strong>Table 7.3. Possible @requires usages</strong></p>\n<div class=\"table-contents\"><table class=\"table\" summary=\"Possible @requires usages\">\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead><tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Possible Values</th>\n<th align=\"left\">Examples</th>\n<th align=\"left\">Another example</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHP</code></td>\n<td align=\"left\">Any PHP version identifier</td>\n<td align=\"left\">@requires PHP 5.3.3</td>\n<td align=\"left\">@requires PHP 5.4-dev</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit</code></td>\n<td align=\"left\">Any PHPUnit version identifier</td>\n<td align=\"left\">@requires PHPUnit 3.6.3</td>\n<td align=\"left\">@requires PHPUnit 4.6</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">OS</code></td>\n<td align=\"left\">A regexp matching <a class=\"ulink\" href=\"http://php.net/manual/en/reserved.constants.php#constant.php-os\" target=\"_top\">PHP_OS</a>\n</td>\n<td align=\"left\">@requires OS Linux</td>\n<td align=\"left\">@requires OS WIN32|WINNT</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">function</code></td>\n<td align=\"left\">Any valid parameter to <a class=\"ulink\" href=\"http://php.net/function_exists\" target=\"_top\">function_exists</a>\n</td>\n<td align=\"left\">@requires function imap_open</td>\n<td align=\"left\">@requires function ReflectionMethod::setAccessible</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">extension</code></td>\n<td align=\"left\">Any extension name along with an optional version identifier</td>\n<td align=\"left\">@requires extension mysqli</td>\n<td align=\"left\">@requires extension redis 2.2.0</td>\n</tr>\n</tbody>\n</table></div>\n</div>\n<div class=\"example\" id=\"incomplete-and-skipped-tests.skipping-tests.examples.DatabaseClassSkippingTest.php\">\n<p class=\"title\"><strong>Example 7.3: Skipping test cases using @requires</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @requires extension mysqli\n */\nclass DatabaseTest extends TestCase\n{\n    /**\n     * @requires PHP 5.3\n     */\n    public function testConnection()\n    {\n        // Test requires the mysqli extension and PHP &gt;= 5.3\n    }\n\n    // ... All other tests require the mysqli extension\n}\n?&gt;</pre></div>\n</div>\n<p> If you are using syntax that doesn't compile with a certain PHP Version look into the xml configuration for version dependent includes in <a class=\"xref\" href=\"appendixes.configuration#appendixes.configuration.testsuites\" title=\"Test Suites\">the section called “Test Suites”</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/incomplete-and-skipped-tests.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/incomplete-and-skipped-tests.html</a>\n  </p>\n</div>\n","testing-practices":"<h1 class=\"title\" id=\"testing-practices\">Testing Practices</h1>\n<div class=\"blockquote\"><table class=\"blockquote\" summary=\"Block quote\">\n<tr>\n<td width=\"10%\"> </td>\n<td width=\"80%\"><p> You can always write more tests. However, you will quickly find that only a fraction of the tests you can imagine are actually useful. What you want is to write tests that fail even though you think they should work, or tests that succeed even though you think they should fail. Another way to think of it is in cost/benefit terms. You want to write tests that will pay you back with information. </p></td>\n<td width=\"10%\"> </td>\n</tr>\n<tr>\n<td width=\"10%\"> </td>\n<td colspan=\"2\" align=\"right\">--<span class=\"attribution\">Erich Gamma</span>\n</td>\n</tr>\n</table></div>\n<h2 class=\"title\" id=\"testing-practices.during-development\">During Development</h2>\n<p id=\"idp1182032\">  When you need to make a change to the internal structure of the software you are working on to make it easier to understand and cheaper to modify without changing its observable behavior, a test suite is invaluable in applying these so called <a class=\"ulink\" href=\"http://martinfowler.com/bliki/DefinitionOfRefactoring.html\" target=\"_top\">refactorings</a> safely. Otherwise, you might not notice the system breaking while you are carrying out the restructuring. </p>\n<p> The following conditions will help you to improve the code and design of your project, while using unit tests to verify that the refactoring's transformation steps are, indeed, behavior-preserving and do not introduce errors: </p>\n<div class=\"orderedlist\"><ol class=\"orderedlist\" type=\"1\">\n<li class=\"listitem\"><p>All unit tests run correctly.</p></li>\n<li class=\"listitem\"><p>The code communicates its design principles.</p></li>\n<li class=\"listitem\"><p>The code contains no redundancies.</p></li>\n<li class=\"listitem\"><p>The code contains the minimal number of classes and methods.</p></li>\n</ol></div>\n<p> When you need to add new functionality to the system, write the tests first. Then, you will be done developing when the test runs. This practice will be discussed in detail in the next chapter. </p>\n<h2 class=\"title\" id=\"testing-practices.during-debugging\">During Debugging</h2>\n<p> When you get a defect report, your impulse might be to fix the defect as quickly as possible. Experience shows that this impulse will not serve you well; it is likely that the fix for the defect causes another defect. </p>\n<p> You can hold your impulse in check by doing the following: </p>\n<div class=\"orderedlist\"><ol class=\"orderedlist\" type=\"1\">\n<li class=\"listitem\"><p> Verify that you can reproduce the defect. </p></li>\n<li class=\"listitem\"><p> Find the smallest-scale demonstration of the defect in the code. For example, if a number appears incorrectly in an output, find the object that is computing that number. </p></li>\n<li class=\"listitem\"><p> Write an automated test that fails now but will succeed when the defect is fixed. </p></li>\n<li class=\"listitem\"><p> Fix the defect. </p></li>\n</ol></div>\n<p> Finding the smallest reliable reproduction of the defect gives you the opportunity to really examine the cause of the defect. The test you write will improve the chances that when you fix the defect, you really fix it, because the new test reduces the likelihood of undoing the fix with future code changes. All the tests you wrote before reduce the likelihood of inadvertently causing a different problem. </p>\n<div class=\"blockquote\"><table class=\"blockquote\" summary=\"Block quote\">\n<tr>\n<td width=\"10%\"> </td>\n<td width=\"80%\">\n<p> Unit testing offers many advantages: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p>Testing gives code authors and reviewers confidence that patches produce the correct results.</p></li>\n<li class=\"listitem\"><p>Authoring testcases is a good impetus for developers to discover edge cases.</p></li>\n<li class=\"listitem\"><p>Testing provides a good way to catch regressions quickly, and to make sure that no regression will be repeated twice.</p></li>\n<li class=\"listitem\"><p>Unit tests provide working examples for how to use an API and can significantly aid documentation efforts.</p></li>\n</ul></div>\n<p> Overall, integrated unit testing makes the cost and risk of any individual change smaller. It will allow the project to make [...] major architectural improvements [...] quickly and confidently. </p>\n</td>\n<td width=\"10%\"> </td>\n</tr>\n<tr>\n<td width=\"10%\"> </td>\n<td colspan=\"2\" align=\"right\">--<span class=\"attribution\">Benjamin Smedberg</span>\n</td>\n</tr>\n</table></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/testing-practices.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/testing-practices.html</a>\n  </p>\n</div>\n","code-coverage-analysis":"<h1 class=\"title\" id=\"code-coverage-analysis\">Code Coverage Analysis</h1>\n<div class=\"blockquote\"><table class=\"blockquote\" summary=\"Block quote\">\n<tr>\n<td width=\"10%\"> </td>\n<td width=\"80%\"><p> In computer science, code coverage is a measure used to describe the degree to which the source code of a program is tested by a particular test suite. A program with high code coverage has been more thoroughly tested and has a lower chance of containing software bugs than a program with low code coverage. </p></td>\n<td width=\"10%\"> </td>\n</tr>\n<tr>\n<td width=\"10%\"> </td>\n<td colspan=\"2\" align=\"right\">--<span class=\"attribution\">Wikipedia</span>\n</td>\n</tr>\n</table></div>\n<p id=\"idp921712\">   In this chapter you will learn all about PHPUnit's code coverage functionality that provides an insight into what parts of the production code are executed when the tests are run. It makes use of the <a class=\"ulink\" href=\"https://github.com/sebastianbergmann/php-code-coverage\" target=\"_top\">PHP_CodeCoverage</a> component, which in turn leverages the code coverage functionality provided by the <a class=\"ulink\" href=\"http://xdebug.org/\" target=\"_top\">Xdebug</a> extension for PHP. </p>\n<div class=\"alert alert-info\"><p> Xdebug is not distributed as part of PHPUnit. If you receive a notice while running tests that the Xdebug extension is not loaded, it means that Xdebug is either not installed or not configured properly. Before you can use the code coverage analysis features in PHPUnit, you should read <a class=\"ulink\" href=\"http://xdebug.org/docs/install\" target=\"_top\">the Xdebug installation guide</a>. </p></div>\n<p> PHPUnit can generate an HTML-based code coverage report as well as XML-based logfiles with code coverage information in various formats (Clover, Crap4J, PHPUnit). Code coverage information can also be reported as text (and printed to STDOUT) and exported as PHP code for further processing. </p>\n<p> Please refer to <a class=\"xref\" href=\"textui\" title=\"Chapter 3. The Command-Line Test Runner\">Chapter 3</a> for a list of commandline switches that control code coverage functionality as well as <a class=\"xref\" href=\"appendixes.configuration#appendixes.configuration.logging\" title=\"Logging\">the section called “Logging”</a> for the relevant configuration settings. </p>\n<h2 class=\"title\" id=\"code-coverage-analysis.metrics\">Software Metrics for Code Coverage</h2>\n<p> Various software metrics exist to measure code coverage: </p>\n<div class=\"variablelist\"><dl class=\"variablelist\">\n<dt><span class=\"term\">Line Coverage</span></dt>\n<dd><p> The <span class=\"emphasis\"><em>Line Coverage</em></span> software metric measures whether each executable line was executed. </p></dd>\n<dt><span class=\"term\">Function and Method Coverage</span></dt>\n<dd><p> The <span class=\"emphasis\"><em>Function and Method Coverage</em></span> software metric measures whether each function or method has been invoked. PHP_CodeCoverage only considers a function or method as covered when all of its executable lines are covered. </p></dd>\n<dt><span class=\"term\">Class and Trait Coverage</span></dt>\n<dd><p> The <span class=\"emphasis\"><em>Class and Trait Coverage</em></span> software metric measures whether each method of a class or trait is covered. PHP_CodeCoverage only considers a class or trait as covered when all of its methods are covered. </p></dd>\n<dt><span class=\"term\">Opcode Coverage</span></dt>\n<dd><p> The <span class=\"emphasis\"><em>Opcode Coverage</em></span> software metric measures whether each opcode of a function or method has been executed while running the test suite. A line of code usually compiles into more than one opcode. Line Coverage regards a line of code as covered as soon as one of its opcodes is executed. </p></dd>\n<dt><span class=\"term\">Branch Coverage</span></dt>\n<dd><p> The <span class=\"emphasis\"><em>Branch Coverage</em></span> software metric measures whether the boolean expression of each control structure evaluated to both <code class=\"literal\">true</code> and <code class=\"literal\">false</code> while running the test suite. </p></dd>\n<dt><span class=\"term\">Path Coverage</span></dt>\n<dd><p> The <span class=\"emphasis\"><em>Path Coverage</em></span> software metric measures whether each of the possible execution paths in a function or method has been followed while running the test suite. An execution path is a unique sequence of branches from the entry of the function or method to its exit. </p></dd>\n<dt><span class=\"term\">Change Risk Anti-Patterns (CRAP) Index</span></dt>\n<dd><p> The <span class=\"emphasis\"><em>Change Risk Anti-Patterns (CRAP) Index</em></span> is calculated based on the cyclomatic complexity and code coverage of a unit of code. Code that is not too complex and has an adequate test coverage will have a low CRAP index. The CRAP index can be lowered by writing tests and by refactoring the code to lower its complexity. </p></dd>\n</dl></div>\n<div class=\"alert alert-info\"><p> The <span class=\"emphasis\"><em>Opcode Coverage</em></span>, <span class=\"emphasis\"><em>Branch Coverage</em></span>, and <span class=\"emphasis\"><em>Path Coverage</em></span> software metrics are not yet supported by PHP_CodeCoverage. </p></div>\n<h2 class=\"title\" id=\"code-coverage-analysis.whitelisting-files\">Whitelisting Files</h2>\n<p id=\"idp807968\">  It is mandatory to configure a <span class=\"emphasis\"><em>whitelist</em></span> for telling PHPUnit which sourcecode files to include in the code coverage report. This can either be done using the <code class=\"literal\">--whitelist</code> commandline option or via the configuration file (see <a class=\"xref\" href=\"appendixes.configuration#appendixes.configuration.whitelisting-files\" title=\"Whitelisting Files for Code Coverage\">the section called “Whitelisting Files for Code Coverage”</a>). </p>\n<p> Optionally, all whitelisted files can be added to the code coverage report by setting <code class=\"literal\">addUncoveredFilesFromWhitelist=\"true\"</code> in your PHPUnit configuration (see <a class=\"xref\" href=\"appendixes.configuration#appendixes.configuration.whitelisting-files\" title=\"Whitelisting Files for Code Coverage\">the section called “Whitelisting Files for Code Coverage”</a>). This allows the inclusion of files that are not tested yet at all. If you want to get information about which lines of such an uncovered file are executable, for instance, you also need to set <code class=\"literal\">processUncoveredFilesFromWhitelist=\"true\"</code> in your PHPUnit configuration (see <a class=\"xref\" href=\"appendixes.configuration#appendixes.configuration.whitelisting-files\" title=\"Whitelisting Files for Code Coverage\">the section called “Whitelisting Files for Code Coverage”</a>). </p>\n<div class=\"alert alert-info\"><p> Please note that the loading of sourcecode files that is performed when <code class=\"literal\">processUncoveredFilesFromWhitelist=\"true\"</code> is set can cause problems when a sourcecode file contains code outside the scope of a class or function, for instance. </p></div>\n<h2 class=\"title\" id=\"code-coverage-analysis.ignoring-code-blocks\">Ignoring Code Blocks</h2>\n<p id=\"idp818320\">     Sometimes you have blocks of code that you cannot test and that you may want to ignore during code coverage analysis. PHPUnit lets you do this using the <code class=\"literal\">@codeCoverageIgnore</code>, <code class=\"literal\">@codeCoverageIgnoreStart</code> and <code class=\"literal\">@codeCoverageIgnoreEnd</code> annotations as shown in <a class=\"xref\" href=\"code-coverage-analysis#code-coverage-analysis.ignoring-code-blocks.examples.Sample.php\" title=\"Example 11.1: Using the @codeCoverageIgnore, @codeCoverageIgnoreStart and @codeCoverageIgnoreEnd annotations\">Example 11.1</a>. </p>\n<div class=\"example\" id=\"code-coverage-analysis.ignoring-code-blocks.examples.Sample.php\">\n<p class=\"title\"><strong>Example 11.1: Using the <code class=\"literal\">@codeCoverageIgnore</code>, <code class=\"literal\">@codeCoverageIgnoreStart</code> and <code class=\"literal\">@codeCoverageIgnoreEnd</code> annotations</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @codeCoverageIgnore\n */\nclass Foo\n{\n    public function bar()\n    {\n    }\n}\n\nclass Bar\n{\n    /**\n     * @codeCoverageIgnore\n     */\n    public function foo()\n    {\n    }\n}\n\nif (false) {\n    // @codeCoverageIgnoreStart\n    print '*';\n    // @codeCoverageIgnoreEnd\n}\n\nexit; // @codeCoverageIgnore\n?&gt;</pre></div>\n</div>\n<p> The ignored lines of code (marked as ignored using the annotations) are counted as executed (if they are executable) and will not be highlighted. </p>\n<h2 class=\"title\" id=\"code-coverage-analysis.specifying-covered-methods\">Specifying Covered Methods</h2>\n<p id=\"idp827232\">   The <code class=\"literal\">@covers</code> annotation (see <a class=\"xref\" href=\"appendixes.annotations#appendixes.annotations.covers.tables.annotations\" title=\"Table B.1. Annotations for specifying which methods are covered by a test\">Table B.1</a>) can be used in the test code to specify which method(s) a test method wants to test. If provided, only the code coverage information for the specified method(s) will be considered. <a class=\"xref\" href=\"code-coverage-analysis#code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php\" title=\"Example 11.2: Tests that specify which method they want to cover\">Example 11.2</a> shows an example. </p>\n<div class=\"example\" id=\"code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php\">\n<p class=\"title\"><strong>Example 11.2: Tests that specify which method they want to cover</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass BankAccountTest extends TestCase\n{\n    protected $ba;\n\n    protected function setUp()\n    {\n        $this-&gt;ba = new BankAccount;\n    }\n\n    /**\n     * @covers BankAccount::getBalance\n     */\n    public function testBalanceIsInitiallyZero()\n    {\n        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());\n    }\n\n    /**\n     * @covers BankAccount::withdrawMoney\n     */\n    public function testBalanceCannotBecomeNegative()\n    {\n        try {\n            $this-&gt;ba-&gt;withdrawMoney(1);\n        }\n\n        catch (BankAccountException $e) {\n            $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());\n\n            return;\n        }\n\n        $this-&gt;fail();\n    }\n\n    /**\n     * @covers BankAccount::depositMoney\n     */\n    public function testBalanceCannotBecomeNegative2()\n    {\n        try {\n            $this-&gt;ba-&gt;depositMoney(-1);\n        }\n\n        catch (BankAccountException $e) {\n            $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());\n\n            return;\n        }\n\n        $this-&gt;fail();\n    }\n\n    /**\n     * @covers BankAccount::getBalance\n     * @covers BankAccount::depositMoney\n     * @covers BankAccount::withdrawMoney\n     */\n    public function testDepositWithdrawMoney()\n    {\n        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());\n        $this-&gt;ba-&gt;depositMoney(1);\n        $this-&gt;assertEquals(1, $this-&gt;ba-&gt;getBalance());\n        $this-&gt;ba-&gt;withdrawMoney(1);\n        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());\n    }\n}\n?&gt;</pre></div>\n</div>\n<p id=\"idp833808\">   It is also possible to specify that a test should not cover <span class=\"emphasis\"><em>any</em></span> method by using the <code class=\"literal\">@coversNothing</code> annotation (see <a class=\"xref\" href=\"appendixes.annotations#appendixes.annotations.coversNothing\" title=\"@coversNothing\">the section called “@coversNothing”</a>). This can be helpful when writing integration tests to make sure you only generate code coverage with unit tests. </p>\n<div class=\"example\" id=\"code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php\">\n<p class=\"title\"><strong>Example 11.3: A test that specifies that no method should be covered</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass GuestbookIntegrationTest extends PHPUnit_Extensions_Database_TestCase\n{\n    /**\n     * @coversNothing\n     */\n    public function testAddEntry()\n    {\n        $guestbook = new Guestbook();\n        $guestbook-&gt;addEntry(\"suzy\", \"Hello world!\");\n\n        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable(\n            'guestbook', 'SELECT * FROM guestbook'\n        );\n\n        $expectedTable = $this-&gt;createFlatXmlDataSet(\"expectedBook.xml\")\n                              -&gt;getTable(\"guestbook\");\n\n        $this-&gt;assertTablesEqual($expectedTable, $queryTable);\n    }\n}\n?&gt;\n      </pre></div>\n</div>\n<h2 class=\"title\" id=\"code-coverage-analysis.edge-cases\">Edge Cases</h2>\n<p> This section shows noteworthy edge cases that lead to confusing code coverage information. </p>\n<div class=\"example\" id=\"code-coverage-analysis.edge-cases.examples.Sample.php\">\n<p class=\"title\"><strong>Example 11.4: </strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\n// Because it is \"line based\" and not statement base coverage\n// one line will always have one coverage status\nif (false) this_function_call_shows_up_as_covered();\n\n// Due to how code coverage works internally these two lines are special.\n// This line will show up as non executable\nif (false)\n    // This line will show up as covered because it is actually the \n    // coverage of the if statement in the line above that gets shown here!\n    will_also_show_up_as_covered();\n\n// To avoid this it is necessary that braces are used\nif (false) {\n    this_call_will_never_show_up_as_covered();\n}\n?&gt;</pre></div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/code-coverage-analysis.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/code-coverage-analysis.html</a>\n  </p>\n</div>\n","other-uses-for-tests":"<h1 class=\"title\" id=\"other-uses-for-tests\">Other Uses for Tests</h1>\n<p> Once you get used to writing automated tests, you will likely discover more uses for tests. Here are some examples. </p>\n<h2 class=\"title\" id=\"other-uses-for-tests.agile-documentation\">Agile Documentation</h2>\n<p id=\"idp872704\">     Typically, in a project that is developed using an agile process, such as Extreme Programming, the documentation cannot keep up with the frequent changes to the project's design and code. Extreme Programming demands <span class=\"emphasis\"><em>collective code ownership</em></span>, so all developers need to know how the entire system works. If you are disciplined enough to consequently use \"speaking names\" for your tests that describe what a class should do, you can use PHPUnit's TestDox functionality to generate automated documentation for your project based on its tests. This documentation gives developers an overview of what each class of the project is supposed to do. </p>\n<p> PHPUnit's TestDox functionality looks at a test class and all the test method names and converts them from camel case PHP names to sentences: <code class=\"literal\">testBalanceIsInitiallyZero()</code> becomes \"Balance is initially zero\". If there are several test methods whose names only differ in a suffix of one or more digits, such as <code class=\"literal\">testBalanceCannotBecomeNegative()</code> and <code class=\"literal\">testBalanceCannotBecomeNegative2()</code>, the sentence \"Balance cannot become negative\" will appear only once, assuming that all of these tests succeed. </p>\n<p> Let us take a look at the agile documentation generated for a <code class=\"literal\">BankAccount</code> class: </p>\n<pre class=\"screen\">phpunit --testdox BankAccountTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nBankAccount\n [x] Balance is initially zero\n [x] Balance cannot become negative</pre>\n<p> Alternatively, the agile documentation can be generated in HTML or plain text format and written to a file using the <code class=\"literal\">--testdox-html</code> and <code class=\"literal\">--testdox-text</code> arguments. </p>\n<p id=\"idp1174864\">  Agile Documentation can be used to document the assumptions you make about the external packages that you use in your project. When you use an external package, you are exposed to the risks that the package will not behave as you expect, and that future versions of the package will change in subtle ways that will break your code, without you knowing it. You can address these risks by writing a test every time you make an assumption. If your test succeeds, your assumption is valid. If you document all your assumptions with tests, future releases of the external package will be no cause for concern: if the tests succeed, your system should continue working. </p>\n<h2 class=\"title\" id=\"other-uses-for-tests.cross-team-tests\">Cross-Team Tests</h2>\n<p> When you document assumptions with tests, you own the tests. The supplier of the package -- who you make assumptions about -- knows nothing about your tests. If you want to have a closer relationship with the supplier of a package, you can use the tests to communicate and coordinate your activities. </p>\n<p> When you agree on coordinating your activities with the supplier of a package, you can write the tests together. Do this in such a way that the tests reveal as many assumptions as possible. Hidden assumptions are the death of cooperation. With the tests, you document exactly what you expect from the supplied package. The supplier will know the package is complete when all the tests run. </p>\n<p id=\"idp846208\">  By using stubs (see the chapter on \"Mock Objects\", earlier in this book), you can further decouple yourself from the supplier: The job of the supplier is to make the tests run with the real implementation of the package. Your job is to make the tests run for your own code. Until such time as you have the real implementation of the supplied package, you use stub objects. Following this approach, the two teams can develop independently. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/other-uses-for-tests.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/other-uses-for-tests.html</a>\n  </p>\n</div>\n","logging":"<h1 class=\"title\" id=\"logging\">Logging</h1>\n<p id=\"idp8048\">  PHPUnit can produce several types of logfiles. </p>\n<h2 class=\"title\" id=\"logging.xml\">Test Results (XML)</h2>\n<p> The XML logfile for test results produced by PHPUnit is based upon the one used by the <a class=\"ulink\" href=\"http://ant.apache.org/manual/Tasks/junit.html\" target=\"_top\">JUnit task for Apache Ant</a>. The following example shows the XML logfile generated for the tests in <code class=\"literal\">ArrayTest</code>: </p>\n<pre class=\"screen\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;testsuites&gt;\n  &lt;testsuite name=\"ArrayTest\"\n             file=\"/home/sb/ArrayTest.php\"\n             tests=\"2\"\n             assertions=\"2\"\n             failures=\"0\"\n             errors=\"0\"\n             time=\"0.016030\"&gt;\n    &lt;testcase name=\"testNewArrayIsEmpty\"\n              class=\"ArrayTest\"\n              file=\"/home/sb/ArrayTest.php\"\n              line=\"6\"\n              assertions=\"1\"\n              time=\"0.008044\"/&gt;\n    &lt;testcase name=\"testArrayContainsAnElement\"\n              class=\"ArrayTest\"\n              file=\"/home/sb/ArrayTest.php\"\n              line=\"15\"\n              assertions=\"1\"\n              time=\"0.007986\"/&gt;\n  &lt;/testsuite&gt;\n&lt;/testsuites&gt;</pre>\n<p> The following XML logfile was generated for two tests, <code class=\"literal\">testFailure</code> and <code class=\"literal\">testError</code>, of a test case class named <code class=\"literal\">FailureErrorTest</code> and shows how failures and errors are denoted. </p>\n<pre class=\"screen\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;testsuites&gt;\n  &lt;testsuite name=\"FailureErrorTest\"\n             file=\"/home/sb/FailureErrorTest.php\"\n             tests=\"2\"\n             assertions=\"1\"\n             failures=\"1\"\n             errors=\"1\"\n             time=\"0.019744\"&gt;\n    &lt;testcase name=\"testFailure\"\n              class=\"FailureErrorTest\"\n              file=\"/home/sb/FailureErrorTest.php\"\n              line=\"6\"\n              assertions=\"1\"\n              time=\"0.011456\"&gt;\n      &lt;failure type=\"PHPUnit_Framework_ExpectationFailedException\"&gt;\ntestFailure(FailureErrorTest)\nFailed asserting that &amp;lt;integer:2&amp;gt; matches expected value &amp;lt;integer:1&amp;gt;.\n\n/home/sb/FailureErrorTest.php:8\n&lt;/failure&gt;\n    &lt;/testcase&gt;\n    &lt;testcase name=\"testError\"\n              class=\"FailureErrorTest\"\n              file=\"/home/sb/FailureErrorTest.php\"\n              line=\"11\"\n              assertions=\"0\"\n              time=\"0.008288\"&gt;\n      &lt;error type=\"Exception\"&gt;testError(FailureErrorTest)\nException:\n\n/home/sb/FailureErrorTest.php:13\n&lt;/error&gt;\n    &lt;/testcase&gt;\n  &lt;/testsuite&gt;\n&lt;/testsuites&gt;</pre>\n<h2 class=\"title\" id=\"logging.tap\">Test Results (TAP)</h2>\n<p> The <a class=\"ulink\" href=\"http://testanything.org/\" target=\"_top\">Test Anything Protocol (TAP)</a> is Perl's simple text-based interface between testing modules. The following example shows the TAP logfile generated for the tests in <code class=\"literal\">ArrayTest</code>: </p>\n<pre class=\"screen\">TAP version 13\nok 1 - testNewArrayIsEmpty(ArrayTest)\nok 2 - testArrayContainsAnElement(ArrayTest)\n1..2</pre>\n<p> The following TAP logfile was generated for two tests, <code class=\"literal\">testFailure</code> and <code class=\"literal\">testError</code>, of a test case class named <code class=\"literal\">FailureErrorTest</code> and shows how failures and errors are denoted. </p>\n<pre class=\"screen\">TAP version 13\nnot ok 1 - Failure: testFailure(FailureErrorTest)\n  ---\n  message: 'Failed asserting that &lt;integer:2&gt; matches expected value &lt;integer:1&gt;.'\n  severity: fail\n  data:\n    got: 2\n    expected: 1\n  ...\nnot ok 2 - Error: testError(FailureErrorTest)\n1..2</pre>\n<h2 class=\"title\" id=\"logging.json\">Test Results (JSON)</h2>\n<p> The <a class=\"ulink\" href=\"http://www.json.org/\" target=\"_top\">JavaScript Object Notation (JSON)</a> is a lightweight data-interchange format. The following example shows the JSON messages generated for the tests in <code class=\"literal\">ArrayTest</code>: </p>\n<pre class=\"screen\">{\"event\":\"suiteStart\",\"suite\":\"ArrayTest\",\"tests\":2}\n{\"event\":\"test\",\"suite\":\"ArrayTest\",\n \"test\":\"testNewArrayIsEmpty(ArrayTest)\",\"status\":\"pass\",\n \"time\":0.000460147858,\"trace\":[],\"message\":\"\"}\n{\"event\":\"test\",\"suite\":\"ArrayTest\",\n \"test\":\"testArrayContainsAnElement(ArrayTest)\",\"status\":\"pass\",\n \"time\":0.000422954559,\"trace\":[],\"message\":\"\"}</pre>\n<p> The following JSON messages were generated for two tests, <code class=\"literal\">testFailure</code> and <code class=\"literal\">testError</code>, of a test case class named <code class=\"literal\">FailureErrorTest</code> and show how failures and errors are denoted. </p>\n<pre class=\"screen\">{\"event\":\"suiteStart\",\"suite\":\"FailureErrorTest\",\"tests\":2}\n{\"event\":\"test\",\"suite\":\"FailureErrorTest\",\n \"test\":\"testFailure(FailureErrorTest)\",\"status\":\"fail\",\n \"time\":0.0082459449768066,\"trace\":[],\n \"message\":\"Failed asserting that &lt;integer:2&gt; is equal to &lt;integer:1&gt;.\"}\n{\"event\":\"test\",\"suite\":\"FailureErrorTest\",\n \"test\":\"testError(FailureErrorTest)\",\"status\":\"error\",\n \"time\":0.0083680152893066,\"trace\":[],\"message\":\"\"}</pre>\n<h2 class=\"title\" id=\"logging.codecoverage.xml\">Code Coverage (XML)</h2>\n<p> The XML format for code coverage information logging produced by PHPUnit is loosely based upon the one used by <a class=\"ulink\" href=\"http://www.atlassian.com/software/clover/\" target=\"_top\"> Clover</a>. The following example shows the XML logfile generated for the tests in <code class=\"literal\">BankAccountTest</code>: </p>\n<pre class=\"screen\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;coverage generated=\"1184835473\" phpunit=\"3.6.0\"&gt;\n  &lt;project name=\"BankAccountTest\" timestamp=\"1184835473\"&gt;\n    &lt;file name=\"/home/sb/BankAccount.php\"&gt;\n      &lt;class name=\"BankAccountException\"&gt;\n        &lt;metrics methods=\"0\" coveredmethods=\"0\" statements=\"0\"\n                 coveredstatements=\"0\" elements=\"0\" coveredelements=\"0\"/&gt;\n      &lt;/class&gt;\n      &lt;class name=\"BankAccount\"&gt;\n        &lt;metrics methods=\"4\" coveredmethods=\"4\" statements=\"13\"\n                 coveredstatements=\"5\" elements=\"17\" coveredelements=\"9\"/&gt;\n      &lt;/class&gt;\n      &lt;line num=\"77\" type=\"method\" count=\"3\"/&gt;\n      &lt;line num=\"79\" type=\"stmt\" count=\"3\"/&gt;\n      &lt;line num=\"89\" type=\"method\" count=\"2\"/&gt;\n      &lt;line num=\"91\" type=\"stmt\" count=\"2\"/&gt;\n      &lt;line num=\"92\" type=\"stmt\" count=\"0\"/&gt;\n      &lt;line num=\"93\" type=\"stmt\" count=\"0\"/&gt;\n      &lt;line num=\"94\" type=\"stmt\" count=\"2\"/&gt;\n      &lt;line num=\"96\" type=\"stmt\" count=\"0\"/&gt;\n      &lt;line num=\"105\" type=\"method\" count=\"1\"/&gt;\n      &lt;line num=\"107\" type=\"stmt\" count=\"1\"/&gt;\n      &lt;line num=\"109\" type=\"stmt\" count=\"0\"/&gt;\n      &lt;line num=\"119\" type=\"method\" count=\"1\"/&gt;\n      &lt;line num=\"121\" type=\"stmt\" count=\"1\"/&gt;\n      &lt;line num=\"123\" type=\"stmt\" count=\"0\"/&gt;\n      &lt;metrics loc=\"126\" ncloc=\"37\" classes=\"2\" methods=\"4\" coveredmethods=\"4\"\n               statements=\"13\" coveredstatements=\"5\" elements=\"17\"\n               coveredelements=\"9\"/&gt;\n    &lt;/file&gt;\n    &lt;metrics files=\"1\" loc=\"126\" ncloc=\"37\" classes=\"2\" methods=\"4\"\n             coveredmethods=\"4\" statements=\"13\" coveredstatements=\"5\"\n             elements=\"17\" coveredelements=\"9\"/&gt;\n  &lt;/project&gt;\n&lt;/coverage&gt;</pre>\n<h2 class=\"title\" id=\"logging.codecoverage.text\">Code Coverage (TEXT)</h2>\n<p> Human readable code coverage output for the command-line or a text file. The aim of this output format is to provide a quick coverage overview while working on a small set of classes. For bigger projects this output can be useful to get an quick overview of the projects coverage or when used with the <code class=\"literal\">--filter</code> functionality. When used from the command-line by writing to <code class=\"literal\">php://stdout</code> this will honor the <code class=\"literal\">--colors</code> setting. Writing to standard out is the default option when used from the command-line. By default this will only show files that have at least one covered line. This can only be changed via the <code class=\"literal\">showUncoveredFiles</code> xml configuration option. See <a class=\"xref\" href=\"appendixes.configuration#appendixes.configuration.logging\" title=\"Logging\">the section called “Logging”</a>. By default all files and their coverage status are shown in the detailed report. This can be changed via the <code class=\"literal\">showOnlySummary</code> xml configuration option. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/logging.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/logging.html</a>\n  </p>\n</div>\n","extending-phpunit":"<h1 class=\"title\" id=\"extending-phpunit\">Extending PHPUnit</h1>\n<p> PHPUnit can be extended in various ways to make the writing of tests easier and customize the feedback you get from running tests. Here are common starting points to extend PHPUnit. </p>\n<h2 class=\"title\" id=\"extending-phpunit.PHPUnit_Framework_TestCase\">Subclass phpunit\\framework\\TestCase</h2>\n<p id=\"idp1333728\">  Write custom assertions and utility methods in an abstract subclass of <code class=\"literal\">phpunit\\framework\\TestCase</code> and derive your test case classes from that class. This is one of the easiest ways to extend PHPUnit. </p>\n<h2 class=\"title\" id=\"extending-phpunit.custom-assertions\">Write custom assertions</h2>\n<p> When writing custom assertions it is the best practice to follow how PHPUnit's own assertions are implemented. As you can see in <a class=\"xref\" href=\"extending-phpunit#extending-phpunit.examples.Assert.php\" title=\"Example 14.1: The assertTrue() and isTrue() methods of the PHPUnit_Framework_Assert class\">Example 14.1</a>, the <code class=\"literal\">assertTrue()</code> method is just a wrapper around the <code class=\"literal\">isTrue()</code> and <code class=\"literal\">assertThat()</code> methods: <code class=\"literal\">isTrue()</code> creates a matcher object that is passed on to <code class=\"literal\">assertThat()</code> for evaluation. </p>\n<div class=\"example\" id=\"extending-phpunit.examples.Assert.php\">\n<p class=\"title\"><strong>Example 14.1: The assertTrue() and isTrue() methods of the PHPUnit_Framework_Assert class</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nabstract class PHPUnit_Framework_Assert\n{\n    // ...\n\n    /**\n     * Asserts that a condition is true.\n     *\n     * @param  boolean $condition\n     * @param  string  $message\n     * @throws PHPUnit_Framework_AssertionFailedError\n     */\n    public static function assertTrue($condition, $message = '')\n    {\n        self::assertThat($condition, self::isTrue(), $message);\n    }\n\n    // ...\n\n    /**\n     * Returns a PHPUnit_Framework_Constraint_IsTrue matcher object.\n     *\n     * @return PHPUnit_Framework_Constraint_IsTrue\n     * @since  Method available since Release 3.3.0\n     */\n    public static function isTrue()\n    {\n        return new PHPUnit_Framework_Constraint_IsTrue;\n    }\n\n    // ...\n}?&gt;</pre></div>\n</div>\n<p> <a class=\"xref\" href=\"extending-phpunit#extending-phpunit.examples.IsTrue.php\" title=\"Example 14.2: The PHPUnit_Framework_Constraint_IsTrue class\">Example 14.2</a> shows how <code class=\"literal\">PHPUnit_Framework_Constraint_IsTrue</code> extends the abstract base class for matcher objects (or constraints), <code class=\"literal\">PHPUnit_Framework_Constraint</code>. </p>\n<div class=\"example\" id=\"extending-phpunit.examples.IsTrue.php\">\n<p class=\"title\"><strong>Example 14.2: The PHPUnit_Framework_Constraint_IsTrue class</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass PHPUnit_Framework_Constraint_IsTrue extends PHPUnit_Framework_Constraint\n{\n    /**\n     * Evaluates the constraint for parameter $other. Returns true if the\n     * constraint is met, false otherwise.\n     *\n     * @param mixed $other Value or object to evaluate.\n     * @return bool\n     */\n    public function matches($other)\n    {\n        return $other === true;\n    }\n\n    /**\n     * Returns a string representation of the constraint.\n     *\n     * @return string\n     */\n    public function toString()\n    {\n        return 'is true';\n    }\n}?&gt;</pre></div>\n</div>\n<p> The effort of implementing the <code class=\"literal\">assertTrue()</code> and <code class=\"literal\">isTrue()</code> methods as well as the <code class=\"literal\">PHPUnit_Framework_Constraint_IsTrue</code> class yields the benefit that <code class=\"literal\">assertThat()</code> automatically takes care of evaluating the assertion and bookkeeping tasks such as counting it for statistics. Furthermore, the <code class=\"literal\">isTrue()</code> method can be used as a matcher when configuring mock objects. </p>\n<h2 class=\"title\" id=\"extending-phpunit.PHPUnit_Framework_TestListener\">Implement PHPUnit_Framework_TestListener</h2>\n<p id=\"idp891136\">  <a class=\"xref\" href=\"extending-phpunit#extending-phpunit.examples.SimpleTestListener.php\" title=\"Example 14.3: A simple test listener\">Example 14.3</a> shows a simple implementation of the <code class=\"literal\">PHPUnit_Framework_TestListener</code> interface. </p>\n<div class=\"example\" id=\"extending-phpunit.examples.SimpleTestListener.php\">\n<p class=\"title\"><strong>Example 14.3: A simple test listener</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass SimpleTestListener implements PHPUnit_Framework_TestListener\n{\n    public function addError(PHPUnit_Framework_Test $test, Exception $e, $time)\n    {\n        printf(\"Error while running test '%s'.\\n\", $test-&gt;getName());\n    }\n\n    public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time)\n    {\n        printf(\"Test '%s' failed.\\n\", $test-&gt;getName());\n    }\n\n    public function addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time)\n    {\n        printf(\"Test '%s' is incomplete.\\n\", $test-&gt;getName());\n    }\n\n    public function addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, $time)\n    {\n        printf(\"Test '%s' is deemed risky.\\n\", $test-&gt;getName());\n    }\n\n    public function addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time)\n    {\n        printf(\"Test '%s' has been skipped.\\n\", $test-&gt;getName());\n    }\n\n    public function startTest(PHPUnit_Framework_Test $test)\n    {\n        printf(\"Test '%s' started.\\n\", $test-&gt;getName());\n    }\n\n    public function endTest(PHPUnit_Framework_Test $test, $time)\n    {\n        printf(\"Test '%s' ended.\\n\", $test-&gt;getName());\n    }\n\n    public function startTestSuite(PHPUnit_Framework_TestSuite $suite)\n    {\n        printf(\"TestSuite '%s' started.\\n\", $suite-&gt;getName());\n    }\n\n    public function endTestSuite(PHPUnit_Framework_TestSuite $suite)\n    {\n        printf(\"TestSuite '%s' ended.\\n\", $suite-&gt;getName());\n    }\n}\n?&gt;</pre></div>\n</div>\n<p id=\"idp896400\">  <a class=\"xref\" href=\"extending-phpunit#extending-phpunit.examples.BaseTestListener.php\" title=\"Example 14.4: Using base test listener\">Example 14.4</a> shows how to subclass the <code class=\"literal\">PHPUnit_Framework_BaseTestListener</code> abstract class, which lets you specify only the interface methods that are interesting for your use case, while providing empty implementations for all the others. </p>\n<div class=\"example\" id=\"extending-phpunit.examples.BaseTestListener.php\">\n<p class=\"title\"><strong>Example 14.4: Using base test listener</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ShortTestListener extends PHPUnit_Framework_BaseTestListener\n{\n    public function endTest(PHPUnit_Framework_Test $test, $time)\n    {\n        printf(\"Test '%s' ended.\\n\", $test-&gt;getName());\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> In <a class=\"xref\" href=\"appendixes.configuration#appendixes.configuration.test-listeners\" title=\"Test Listeners\">the section called “Test Listeners”</a> you can see how to configure PHPUnit to attach your test listener to the test execution. </p>\n<h2 class=\"title\" id=\"extending-phpunit.PHPUnit_Extensions_TestDecorator\">Subclass PHPUnit_Extensions_TestDecorator</h2>\n<p id=\"idp902928\">  You can wrap test cases or test suites in a subclass of <code class=\"literal\">PHPUnit_Extensions_TestDecorator</code> and use the Decorator design pattern to perform some actions before and after the test runs. </p>\n<p id=\"idp904496\">  PHPUnit ships with one concrete test decorator: <code class=\"literal\">PHPUnit_Extensions_RepeatedTest</code>. It is used to run a test repeatedly and only count it as a success if all iterations are successful. </p>\n<p> <a class=\"xref\" href=\"extending-phpunit#extending-phpunit.examples.RepeatedTest.php\" title=\"Example 14.5: The RepeatedTest Decorator\">Example 14.5</a> shows a cut-down version of the <code class=\"literal\">PHPUnit_Extensions_RepeatedTest</code> test decorator that illustrates how to write your own test decorators. </p>\n<div class=\"example\" id=\"extending-phpunit.examples.RepeatedTest.php\">\n<p class=\"title\"><strong>Example 14.5: The RepeatedTest Decorator</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nrequire_once 'PHPUnit/Extensions/TestDecorator.php';\n\nclass PHPUnit_Extensions_RepeatedTest extends PHPUnit_Extensions_TestDecorator\n{\n    private $timesRepeat = 1;\n\n    public function __construct(PHPUnit_Framework_Test $test, $timesRepeat = 1)\n    {\n        parent::__construct($test);\n\n        if (is_integer($timesRepeat) &amp;&amp;\n            $timesRepeat &gt;= 0) {\n            $this-&gt;timesRepeat = $timesRepeat;\n        }\n    }\n\n    public function count()\n    {\n        return $this-&gt;timesRepeat * $this-&gt;test-&gt;count();\n    }\n\n    public function run(PHPUnit_Framework_TestResult $result = null)\n    {\n        if ($result === null) {\n            $result = $this-&gt;createResult();\n        }\n\n        for ($i = 0; $i &lt; $this-&gt;timesRepeat &amp;&amp; !$result-&gt;shouldStop(); $i++) {\n            $this-&gt;test-&gt;run($result);\n        }\n\n        return $result;\n    }\n}\n?&gt;</pre></div>\n</div>\n<h2 class=\"title\" id=\"extending-phpunit.PHPUnit_Framework_Test\">Implement PHPUnit_Framework_Test</h2>\n<p id=\"idp1368880\">   The <code class=\"literal\">PHPUnit_Framework_Test</code> interface is narrow and easy to implement. You can write an implementation of <code class=\"literal\">PHPUnit_Framework_Test</code> that is simpler than <code class=\"literal\">phpunit\\framework\\TestCase</code> and that runs <span class=\"emphasis\"><em>data-driven tests</em></span>, for instance. </p>\n<p> <a class=\"xref\" href=\"extending-phpunit#extending-phpunit.examples.DataDrivenTest.php\" title=\"Example 14.6: A data-driven test\">Example 14.6</a> shows a data-driven test case class that compares values from a file with Comma-Separated Values (CSV). Each line of such a file looks like <code class=\"literal\">foo;bar</code>, where the first value is the one we expect and the second value is the actual one. </p>\n<div class=\"example\" id=\"extending-phpunit.examples.DataDrivenTest.php\">\n<p class=\"title\"><strong>Example 14.6: A data-driven test</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass DataDrivenTest implements PHPUnit_Framework_Test\n{\n    private $lines;\n\n    public function __construct($dataFile)\n    {\n        $this-&gt;lines = file($dataFile);\n    }\n\n    public function count()\n    {\n        return 1;\n    }\n\n    public function run(PHPUnit_Framework_TestResult $result = null)\n    {\n        if ($result === null) {\n            $result = new PHPUnit_Framework_TestResult;\n        }\n\n        foreach ($this-&gt;lines as $line) {\n            $result-&gt;startTest($this);\n            PHP_Timer::start();\n            $stopTime = null;\n\n            list($expected, $actual) = explode(';', $line);\n\n            try {\n                PHPUnit_Framework_Assert::assertEquals(\n                  trim($expected), trim($actual)\n                );\n            }\n\n            catch (PHPUnit_Framework_AssertionFailedError $e) {\n                $stopTime = PHP_Timer::stop();\n                $result-&gt;addFailure($this, $e, $stopTime);\n            }\n\n            catch (Exception $e) {\n                $stopTime = PHP_Timer::stop();\n                $result-&gt;addError($this, $e, $stopTime);\n            }\n\n            if ($stopTime === null) {\n                $stopTime = PHP_Timer::stop();\n            }\n\n            $result-&gt;endTest($this, $stopTime);\n        }\n\n        return $result;\n    }\n}\n\n$test = new DataDrivenTest('data_file.csv');\n$result = PHPUnit_TextUI_TestRunner::run($test);\n?&gt;</pre>\n<pre class=\"screen\">PHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\n.F\n\nTime: 0 seconds\n\nThere was 1 failure:\n\n1) DataDrivenTest\nFailed asserting that two strings are equal.\nexpected string &lt;bar&gt;\ndifference      &lt;  x&gt;\ngot string      &lt;baz&gt;\n/home/sb/DataDrivenTest.php:32\n/home/sb/DataDrivenTest.php:53\n\nFAILURES!\nTests: 2, Failures: 1.</pre>\n</div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/extending-phpunit.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/extending-phpunit.html</a>\n  </p>\n</div>\n","appendixes.configuration":"<h1 class=\"title\" id=\"appendixes.configuration\">The XML Configuration File</h1>\n<h2 class=\"title\" id=\"appendixes.configuration.phpunit\">PHPUnit</h2>\n<p> The attributes of the <code class=\"literal\">&lt;phpunit&gt;</code> element can be used to configure PHPUnit's core functionality. </p>\n<pre class=\"screen\">&lt;phpunit\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/4.5/phpunit.xsd\"\n         backupGlobals=\"true\"\n         backupStaticAttributes=\"false\"\n         &lt;!--bootstrap=\"/path/to/bootstrap.php\"--&gt;\n         cacheTokens=\"false\"\n         colors=\"false\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         forceCoversAnnotation=\"false\"\n         mapTestClassNameToCoveredClassName=\"false\"\n         printerClass=\"PHPUnit_TextUI_ResultPrinter\"\n         &lt;!--printerFile=\"/path/to/ResultPrinter.php\"--&gt;\n         processIsolation=\"false\"\n         stopOnError=\"false\"\n         stopOnFailure=\"false\"\n         stopOnIncomplete=\"false\"\n         stopOnSkipped=\"false\"\n         stopOnRisky=\"false\"\n         testSuiteLoaderClass=\"PHPUnit_Runner_StandardTestSuiteLoader\"\n         &lt;!--testSuiteLoaderFile=\"/path/to/StandardTestSuiteLoader.php\"--&gt;\n         timeoutForSmallTests=\"1\"\n         timeoutForMediumTests=\"10\"\n         timeoutForLargeTests=\"60\"\n         verbose=\"false\"&gt;\n  &lt;!-- ... --&gt;\n&lt;/phpunit&gt;</pre>\n<p> The XML configuration above corresponds to the default behaviour of the TextUI test runner documented in <a class=\"xref\" href=\"textui#textui.clioptions\" title=\"Command-Line Options\">the section called “Command-Line Options”</a>. </p>\n<p> Additional options that are not available as command-line options are: </p>\n<div class=\"variablelist\"><dl class=\"variablelist\">\n<dt><span class=\"term\">convertErrorsToExceptions</span></dt>\n<dd>\n<p> By default, PHPUnit will install an error handler that converts the following errors to exceptions: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><code class=\"literal\">E_WARNING</code></li>\n<li class=\"listitem\"><code class=\"literal\">E_NOTICE</code></li>\n<li class=\"listitem\"><code class=\"literal\">E_USER_ERROR</code></li>\n<li class=\"listitem\"><code class=\"literal\">E_USER_WARNING</code></li>\n<li class=\"listitem\"><code class=\"literal\">E_USER_NOTICE</code></li>\n<li class=\"listitem\"><code class=\"literal\">E_STRICT</code></li>\n<li class=\"listitem\"><code class=\"literal\">E_RECOVERABLE_ERROR</code></li>\n<li class=\"listitem\"><code class=\"literal\">E_DEPRECATED</code></li>\n<li class=\"listitem\"><code class=\"literal\">E_USER_DEPRECATED</code></li>\n</ul></div>\n<p> Set <code class=\"literal\">convertErrorsToExceptions</code> to <code class=\"literal\">false</code> to disable this feature. </p>\n</dd>\n<dt><span class=\"term\">convertNoticesToExceptions</span></dt>\n<dd><p> When set to <code class=\"literal\">false</code>, the error handler installed by <code class=\"literal\">convertErrorsToExceptions</code> will not convert <code class=\"literal\">E_NOTICE</code>, <code class=\"literal\">E_USER_NOTICE</code>, or <code class=\"literal\">E_STRICT</code> errors to exceptions. </p></dd>\n<dt><span class=\"term\">convertWarningsToExceptions</span></dt>\n<dd><p> When set to <code class=\"literal\">false</code>, the error handler installed by <code class=\"literal\">convertErrorsToExceptions</code> will not convert <code class=\"literal\">E_WARNING</code> or <code class=\"literal\">E_USER_WARNING</code> errors to exceptions. </p></dd>\n<dt><span class=\"term\">forceCoversAnnotation</span></dt>\n<dd><p> Code Coverage will only be recorded for tests that use the <code class=\"literal\">@covers</code> annotation documented in <a class=\"xref\" href=\"appendixes.annotations#appendixes.annotations.covers\" title=\"@covers\">the section called “@covers”</a>. </p></dd>\n<dt><span class=\"term\">timeoutForLargeTests</span></dt>\n<dd><p> If time limits based on test size are enforced then this attribute sets the timeout for all tests marked as <code class=\"literal\">@large</code>. If a test does not complete within its configured timeout, it will fail. </p></dd>\n<dt><span class=\"term\">timeoutForMediumTests</span></dt>\n<dd><p> If time limits based on test size are enforced then this attribute sets the timeout for all tests marked as <code class=\"literal\">@medium</code>. If a test does not complete within its configured timeout, it will fail. </p></dd>\n<dt><span class=\"term\">timeoutForSmallTests</span></dt>\n<dd><p> If time limits based on test size are enforced then this attribute sets the timeout for all tests not marked as <code class=\"literal\">@medium</code> or <code class=\"literal\">@large</code>. If a test does not complete within its configured timeout, it will fail. </p></dd>\n</dl></div>\n<h2 class=\"title\" id=\"appendixes.configuration.testsuites\">Test Suites</h2>\n<p id=\"idp1513744\">  The <code class=\"literal\">&lt;testsuites&gt;</code> element and its one or more <code class=\"literal\">&lt;testsuite&gt;</code> children can be used to compose a test suite out of test suites and test cases. </p>\n<pre class=\"screen\">&lt;testsuites&gt;\n  &lt;testsuite name=\"My Test Suite\"&gt;\n    &lt;directory&gt;/path/to/*Test.php files&lt;/directory&gt;\n    &lt;file&gt;/path/to/MyTest.php&lt;/file&gt;\n    &lt;exclude&gt;/path/to/exclude&lt;/exclude&gt;\n  &lt;/testsuite&gt;\n&lt;/testsuites&gt;</pre>\n<p> Using the <code class=\"literal\">phpVersion</code> and <code class=\"literal\">phpVersionOperator</code> attributes, a required PHP version can be specified. The example below will only add the <code class=\"filename\">/path/to/*Test.php</code> files and <code class=\"filename\">/path/to/MyTest.php</code> file if the PHP version is at least 5.3.0. </p>\n<pre class=\"screen\">  &lt;testsuites&gt;\n    &lt;testsuite name=\"My Test Suite\"&gt;\n      &lt;directory suffix=\"Test.php\" phpVersion=\"5.3.0\" phpVersionOperator=\"&gt;=\"&gt;/path/to/files&lt;/directory&gt;\n      &lt;file phpVersion=\"5.3.0\" phpVersionOperator=\"&gt;=\"&gt;/path/to/MyTest.php&lt;/file&gt;\n    &lt;/testsuite&gt;\n  &lt;/testsuites&gt;</pre>\n<p> The <code class=\"literal\">phpVersionOperator</code> attribute is optional and defaults to <code class=\"literal\">&gt;=</code>. </p>\n<h2 class=\"title\" id=\"appendixes.configuration.groups\">Groups</h2>\n<p id=\"idp1522016\">  The <code class=\"literal\">&lt;groups&gt;</code> element and its <code class=\"literal\">&lt;include&gt;</code>, <code class=\"literal\">&lt;exclude&gt;</code>, and <code class=\"literal\">&lt;group&gt;</code> children can be used to select groups of tests marked with the <code class=\"literal\">@group</code> annotation (documented in <a class=\"xref\" href=\"appendixes.annotations#appendixes.annotations.group\" title=\"@group\">the section called “@group”</a>) that should (not) be run. </p>\n<pre class=\"screen\">&lt;groups&gt;\n  &lt;include&gt;\n    &lt;group&gt;name&lt;/group&gt;\n  &lt;/include&gt;\n  &lt;exclude&gt;\n    &lt;group&gt;name&lt;/group&gt;\n  &lt;/exclude&gt;\n&lt;/groups&gt;</pre>\n<p> The XML configuration above corresponds to invoking the TextUI test runner with the following options: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--group name</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--exclude-group name</pre></li>\n</ul></div>\n<h2 class=\"title\" id=\"appendixes.configuration.whitelisting-files\">Whitelisting Files for Code Coverage</h2>\n<p id=\"idp1682528\">   The <code class=\"literal\">&lt;filter&gt;</code> element and its children can be used to configure the whitelist for the code coverage reporting. </p>\n<pre class=\"screen\">&lt;filter&gt;\n  &lt;whitelist processUncoveredFilesFromWhitelist=\"true\"&gt;\n    &lt;directory suffix=\".php\"&gt;/path/to/files&lt;/directory&gt;\n    &lt;file&gt;/path/to/file&lt;/file&gt;\n    &lt;exclude&gt;\n      &lt;directory suffix=\".php\"&gt;/path/to/files&lt;/directory&gt;\n      &lt;file&gt;/path/to/file&lt;/file&gt;\n    &lt;/exclude&gt;\n  &lt;/whitelist&gt;\n&lt;/filter&gt;</pre>\n<h2 class=\"title\" id=\"appendixes.configuration.logging\">Logging</h2>\n<p id=\"idp1686016\">  The <code class=\"literal\">&lt;logging&gt;</code> element and its <code class=\"literal\">&lt;log&gt;</code> children can be used to configure the logging of the test execution. </p>\n<pre class=\"screen\">&lt;logging&gt;\n  &lt;log type=\"coverage-html\" target=\"/tmp/report\" lowUpperBound=\"35\"\n       highLowerBound=\"70\"/&gt;\n  &lt;log type=\"coverage-clover\" target=\"/tmp/coverage.xml\"/&gt;\n  &lt;log type=\"coverage-php\" target=\"/tmp/coverage.serialized\"/&gt;\n  &lt;log type=\"coverage-text\" target=\"php://stdout\" showUncoveredFiles=\"false\"/&gt;\n  &lt;log type=\"json\" target=\"/tmp/logfile.json\"/&gt;\n  &lt;log type=\"tap\" target=\"/tmp/logfile.tap\"/&gt;\n  &lt;log type=\"junit\" target=\"/tmp/logfile.xml\" logIncompleteSkipped=\"false\"/&gt;\n  &lt;log type=\"testdox-html\" target=\"/tmp/testdox.html\"/&gt;\n  &lt;log type=\"testdox-text\" target=\"/tmp/testdox.txt\"/&gt;\n&lt;/logging&gt;</pre>\n<p> The XML configuration above corresponds to invoking the TextUI test runner with the following options: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--coverage-html /tmp/report</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--coverage-clover /tmp/coverage.xml</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--coverage-php /tmp/coverage.serialized</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--coverage-text</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--log-json /tmp/logfile.json</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">&gt; /tmp/logfile.txt</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--log-tap /tmp/logfile.tap</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--log-junit /tmp/logfile.xml</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--testdox-html /tmp/testdox.html</pre></li>\n<li class=\"listitem\"><pre class=\"programlisting\" data-language=\"php\">--testdox-text /tmp/testdox.txt</pre></li>\n</ul></div>\n<p> The <code class=\"literal\">lowUpperBound</code>, <code class=\"literal\">highLowerBound</code>, <code class=\"literal\">logIncompleteSkipped</code> and <code class=\"literal\">showUncoveredFiles</code> attributes have no equivalent TextUI test runner option. </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p><code class=\"literal\">lowUpperBound</code>: Maximum coverage percentage to be considered \"lowly\" covered.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">highLowerBound</code>: Minimum coverage percentage to be considered \"highly\" covered.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">showUncoveredFiles</code>: Show all whitelisted files in <code class=\"literal\">--coverage-text</code> output not just the ones with coverage information.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">showOnlySummary</code>: Show only the summary in <code class=\"literal\">--coverage-text</code> output.</p></li>\n</ul></div>\n<h2 class=\"title\" id=\"appendixes.configuration.test-listeners\">Test Listeners</h2>\n<p id=\"idp1706064\">   The <code class=\"literal\">&lt;listeners&gt;</code> element and its <code class=\"literal\">&lt;listener&gt;</code> children can be used to attach additional test listeners to the test execution. </p>\n<pre class=\"screen\">&lt;listeners&gt;\n  &lt;listener class=\"MyListener\" file=\"/optional/path/to/MyListener.php\"&gt;\n    &lt;arguments&gt;\n      &lt;array&gt;\n        &lt;element key=\"0\"&gt;\n          &lt;string&gt;Sebastian&lt;/string&gt;\n        &lt;/element&gt;\n      &lt;/array&gt;\n      &lt;integer&gt;22&lt;/integer&gt;\n      &lt;string&gt;April&lt;/string&gt;\n      &lt;double&gt;19.78&lt;/double&gt;\n      &lt;null/&gt;\n      &lt;object class=\"stdClass\"/&gt;\n    &lt;/arguments&gt;\n  &lt;/listener&gt;\n&lt;/listeners&gt;</pre>\n<p> The XML configuration above corresponds to attaching the <code class=\"literal\">$listener</code> object (see below) to the test execution: </p>\n<pre class=\"screen\">$listener = new MyListener(\n    ['Sebastian'],\n    22,\n    'April',\n    19.78,\n    null,\n    new stdClass\n);</pre>\n<h2 class=\"title\" id=\"appendixes.configuration.php-ini-constants-variables\">Setting PHP INI settings, Constants and Global Variables</h2>\n<p id=\"idp1712800\">    The <code class=\"literal\">&lt;php&gt;</code> element and its children can be used to configure PHP settings, constants, and global variables. It can also be used to prepend the <code class=\"literal\">include_path</code>. </p>\n<pre class=\"screen\">&lt;php&gt;\n  &lt;includePath&gt;.&lt;/includePath&gt;\n  &lt;ini name=\"foo\" value=\"bar\"/&gt;\n  &lt;const name=\"foo\" value=\"bar\"/&gt;\n  &lt;var name=\"foo\" value=\"bar\"/&gt;\n  &lt;env name=\"foo\" value=\"bar\"/&gt;\n  &lt;post name=\"foo\" value=\"bar\"/&gt;\n  &lt;get name=\"foo\" value=\"bar\"/&gt;\n  &lt;cookie name=\"foo\" value=\"bar\"/&gt;\n  &lt;server name=\"foo\" value=\"bar\"/&gt;\n  &lt;files name=\"foo\" value=\"bar\"/&gt;\n  &lt;request name=\"foo\" value=\"bar\"/&gt;\n&lt;/php&gt;</pre>\n<p> The XML configuration above corresponds to the following PHP code: </p>\n<pre class=\"screen\">ini_set('foo', 'bar');\ndefine('foo', 'bar');\n$GLOBALS['foo'] = 'bar';\n$_ENV['foo'] = 'bar';\n$_POST['foo'] = 'bar';\n$_GET['foo'] = 'bar';\n$_COOKIE['foo'] = 'bar';\n$_SERVER['foo'] = 'bar';\n$_FILES['foo'] = 'bar';\n$_REQUEST['foo'] = 'bar';</pre>\n<h2 class=\"title\" id=\"appendixes.configuration.selenium-rc\">Configuring Browsers for Selenium RC</h2>\n<p id=\"idp1718176\">  The <code class=\"literal\">&lt;selenium&gt;</code> element and its <code class=\"literal\">&lt;browser&gt;</code> children can be used to configure a list of Selenium RC servers. </p>\n<pre class=\"screen\">&lt;selenium&gt;\n  &lt;browser name=\"Firefox on Linux\"\n           browser=\"*firefox /usr/lib/firefox/firefox-bin\"\n           host=\"my.linux.box\"\n           port=\"4444\"\n           timeout=\"30000\"/&gt;\n&lt;/selenium&gt;</pre>\n<p> The XML configuration above corresponds to the following PHP code: </p>\n<pre class=\"screen\">class WebTest extends PHPUnit_Extensions_SeleniumTestCase\n{\n    public static $browsers = [\n        [\n            'name'    =&gt; 'Firefox on Linux',\n            'browser' =&gt; '*firefox /usr/lib/firefox/firefox-bin',\n            'host'    =&gt; 'my.linux.box',\n            'port'    =&gt; 4444,\n            'timeout' =&gt; 30000\n        ]\n    ];\n\n    // ...\n}</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/appendixes.configuration.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/appendixes.configuration.html</a>\n  </p>\n</div>\n","appendixes.annotations":"<h1 class=\"title\" id=\"appendixes.annotations\">Annotations</h1>\n<p id=\"idp1676832\">  An annotation is a special form of syntactic metadata that can be added to the source code of some programming languages. While PHP has no dedicated language feature for annotating source code, the usage of tags such as <code class=\"literal\">@annotation arguments</code> in documentation block has been established in the PHP community to annotate source code. In PHP documentation blocks are reflective: they can be accessed through the Reflection API's <code class=\"literal\">getDocComment()</code> method on the function, class, method, and attribute level. Applications such as PHPUnit use this information at runtime to configure their behaviour. </p>\n<div class=\"alert alert-info\"><p> A doc comment in PHP must start with <code class=\"literal\">/**</code> and end with <code class=\"literal\">*/</code>. Annotations in any other style of comment will be ignored. </p></div>\n<p> This appendix shows all the varieties of annotations supported by PHPUnit. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.author\">@author</h2>\n<p id=\"idp1391952\">  The <code class=\"literal\">@author</code> annotation is an alias for the <code class=\"literal\">@group</code> annotation (see <a class=\"xref\" href=\"appendixes.annotations#appendixes.annotations.group\" title=\"@group\">the section called “@group”</a>) and allows to filter tests based on their authors. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.after\">@after</h2>\n<p> The <code class=\"literal\">@after</code> annotation can be used to specify methods that should be called after each test method in a test case class. </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n    /**\n     * @after\n     */\n    public function tearDownSomeFixtures()\n    {\n        // ...\n    }\n\n    /**\n     * @after\n     */\n    public function tearDownSomeOtherFixtures()\n    {\n        // ...\n    }\n}</pre>\n\n<h2 class=\"title\" id=\"appendixes.annotations.afterClass\">@afterClass</h2>\n<p> The <code class=\"literal\">@afterClass</code> annotation can be used to specify static methods that should be called after all test methods in a test class have been run to clean up shared fixtures. </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n    /**\n     * @afterClass\n     */\n    public static function tearDownSomeSharedFixtures()\n    {\n        // ...\n    }\n\n    /**\n     * @afterClass\n     */\n    public static function tearDownSomeOtherSharedFixtures()\n    {\n        // ...\n    }\n}</pre>\n\n<h2 class=\"title\" id=\"appendixes.annotations.backupGlobals\">@backupGlobals</h2>\n<p id=\"idp1401424\">  The backup and restore operations for global variables can be completely disabled for all tests of a test case class like this </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\n/**\n * @backupGlobals disabled\n */\nclass MyTest extends TestCase\n{\n    // ...\n}</pre>\n\n<p id=\"idp1403248\">  The <code class=\"literal\">@backupGlobals</code> annotation can also be used on the test method level. This allows for a fine-grained configuration of the backup and restore operations: </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\n/**\n * @backupGlobals disabled\n */\nclass MyTest extends TestCase\n{\n    /**\n     * @backupGlobals enabled\n     */\n    public function testThatInteractsWithGlobalVariables()\n    {\n        // ...\n    }\n}</pre>\n\n<h2 class=\"title\" id=\"appendixes.annotations.backupStaticAttributes\">@backupStaticAttributes</h2>\n<p id=\"idp1440640\">  The <code class=\"literal\">@backupStaticAttributes</code> annotation can be used to back up all static property values in all declared classes before each test and restore them afterwards. It may be used at the test case class or test method level: </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\n/**\n * @backupStaticAttributes enabled\n */\nclass MyTest extends TestCase\n{\n    /**\n     * @backupStaticAttributes disabled\n     */\n    public function testThatInteractsWithStaticAttributes()\n    {\n        // ...\n    }\n}\n</pre>\n\n<div class=\"alert alert-info\">\n<p> <code class=\"literal\">@backupStaticAttributes</code> is limited by PHP internals and may cause unintended static values to persist and leak into subsequent tests in some circumstances. </p>\n<p> See <a class=\"xref\" href=\"fixtures#fixtures.global-state\" title=\"Global State\">the section called “Global State”</a> for details. </p>\n</div>\n<h2 class=\"title\" id=\"appendixes.annotations.before\">@before</h2>\n<p> The <code class=\"literal\">@before</code> annotation can be used to specify methods that should be called before each test method in a test case class. </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n    /**\n     * @before\n     */\n    public function setupSomeFixtures()\n    {\n        // ...\n    }\n\n    /**\n     * @before\n     */\n    public function setupSomeOtherFixtures()\n    {\n        // ...\n    }\n}</pre>\n\n<h2 class=\"title\" id=\"appendixes.annotations.beforeClass\">@beforeClass</h2>\n<p> The <code class=\"literal\">@beforeClass</code> annotation can be used to specify static methods that should be called before any test methods in a test class are run to set up shared fixtures. </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n    /**\n     * @beforeClass\n     */\n    public static function setUpSomeSharedFixtures()\n    {\n        // ...\n    }\n\n    /**\n     * @beforeClass\n     */\n    public static function setUpSomeOtherSharedFixtures()\n    {\n        // ...\n    }\n}</pre>\n\n<h2 class=\"title\" id=\"appendixes.annotations.codeCoverageIgnore\">@codeCoverageIgnore*</h2>\n<p id=\"idp1453792\">    The <code class=\"literal\">@codeCoverageIgnore</code>, <code class=\"literal\">@codeCoverageIgnoreStart</code> and <code class=\"literal\">@codeCoverageIgnoreEnd</code> annotations can be used to exclude lines of code from the coverage analysis. </p>\n<p> For usage see <a class=\"xref\" href=\"code-coverage-analysis#code-coverage-analysis.ignoring-code-blocks\" title=\"Ignoring Code Blocks\">the section called “Ignoring Code Blocks”</a>. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.covers\">@covers</h2>\n<p id=\"idp1459056\">   The <code class=\"literal\">@covers</code> annotation can be used in the test code to specify which method(s) a test method wants to test: </p>\n<pre class=\"programlisting\" data-language=\"php\">/**\n * @covers BankAccount::getBalance\n */\npublic function testBalanceIsInitiallyZero()\n{\n    $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());\n}</pre>\n\n<p> If provided, only the code coverage information for the specified method(s) will be considered. </p>\n<p> <a class=\"xref\" href=\"appendixes.annotations#appendixes.annotations.covers.tables.annotations\" title=\"Table B.1. Annotations for specifying which methods are covered by a test\">Table B.1</a> shows the syntax of the <code class=\"literal\">@covers</code> annotation. </p>\n<div class=\"table\" id=\"appendixes.annotations.covers.tables.annotations\">\n<p class=\"title\"><strong>Table B.1. Annotations for specifying which methods are covered by a test</strong></p>\n<div class=\"table-contents\"><table class=\"table\" summary=\"Annotations for specifying which methods are covered by a test\">\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead><tr>\n<th align=\"left\">Annotation</th>\n<th align=\"left\">Description</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"literal\">@covers ClassName::methodName</code></td>\n<td align=\"left\"><code class=\"literal\">Specifies that the annotated test method covers the specified method.</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">@covers ClassName</code></td>\n<td align=\"left\"><code class=\"literal\">Specifies that the annotated test method covers all methods of a given class.</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">@covers ClassName&lt;extended&gt;</code></td>\n<td align=\"left\"><code class=\"literal\">Specifies that the annotated test method covers all methods of a given class and its parent class(es) and interface(s).</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">@covers ClassName::&lt;public&gt;</code></td>\n<td align=\"left\"><code class=\"literal\">Specifies that the annotated test method covers all public methods of a given class.</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">@covers ClassName::&lt;protected&gt;</code></td>\n<td align=\"left\"><code class=\"literal\">Specifies that the annotated test method covers all protected methods of a given class.</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">@covers ClassName::&lt;private&gt;</code></td>\n<td align=\"left\"><code class=\"literal\">Specifies that the annotated test method covers all private methods of a given class.</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">@covers ClassName::&lt;!public&gt;</code></td>\n<td align=\"left\"><code class=\"literal\">Specifies that the annotated test method covers all methods of a given class that are not public.</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">@covers ClassName::&lt;!protected&gt;</code></td>\n<td align=\"left\"><code class=\"literal\">Specifies that the annotated test method covers all methods of a given class that are not protected.</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">@covers ClassName::&lt;!private&gt;</code></td>\n<td align=\"left\"><code class=\"literal\">Specifies that the annotated test method covers all methods of a given class that are not private.</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">@covers ::functionName</code></td>\n<td align=\"left\"><code class=\"literal\">Specifies that the annotated test method covers the specified global function.</code></td>\n</tr>\n</tbody>\n</table></div>\n</div>\n<h2 class=\"title\" id=\"appendixes.annotations.coversDefaultClass\">@coversDefaultClass</h2>\n<p id=\"idp1486096\">  The <code class=\"literal\">@coversDefaultClass</code> annotation can be used to specify a default namespace or class name. That way long names don't need to be repeated for every <code class=\"literal\">@covers</code> annotation. See <a class=\"xref\" href=\"appendixes.annotations#appendixes.annotations.examples.CoversDefaultClassTest.php\" title=\"Example B.1: Using @coversDefaultClass to shorten annotations\">Example B.1</a>. </p>\n<div class=\"example\" id=\"appendixes.annotations.examples.CoversDefaultClassTest.php\">\n<p class=\"title\"><strong>Example B.1: Using @coversDefaultClass to shorten annotations</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @coversDefaultClass \\Foo\\CoveredClass\n */\nclass CoversDefaultClassTest extends TestCase\n{\n    /**\n     * @covers ::publicMethod\n     */\n    public function testSomething()\n    {\n        $o = new Foo\\CoveredClass;\n        $o-&gt;publicMethod();\n    }\n}\n?&gt;</pre></div>\n</div>\n<h2 class=\"title\" id=\"appendixes.annotations.coversNothing\">@coversNothing</h2>\n<p id=\"idp1564096\">  The <code class=\"literal\">@coversNothing</code> annotation can be used in the test code to specify that no code coverage information will be recorded for the annotated test case. </p>\n<p> This can be used for integration testing. See <a class=\"xref\" href=\"code-coverage-analysis#code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php\" title=\"Example 11.3: A test that specifies that no method should be covered\">Example 11.3</a> for an example. </p>\n<p> The annotation can be used on the class and the method level and will override any <code class=\"literal\">@covers</code> tags. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.dataProvider\">@dataProvider</h2>\n<p id=\"idp1568992\">  A test method can accept arbitrary arguments. These arguments are to be provided by a data provider method (<code class=\"literal\">provider()</code> in <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DataTest.php\" title=\"Example 2.5: Using a data provider that returns an array of arrays\">Example 2.5</a>). The data provider method to be used is specified using the <code class=\"literal\">@dataProvider</code> annotation. </p>\n<p> See <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers\" title=\"Data Providers\">the section called “Data Providers”</a> for more details. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.depends\">@depends</h2>\n<p id=\"idp1573936\">  PHPUnit supports the declaration of explicit dependencies between test methods. Such dependencies do not define the order in which the test methods are to be executed but they allow the returning of an instance of the test fixture by a producer and passing it to the dependent consumers. <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php\" title=\"Example 2.2: Using the @depends annotation to express dependencies\">Example 2.2</a> shows how to use the <code class=\"literal\">@depends</code> annotation to express dependencies between test methods. </p>\n<p> See <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.test-dependencies\" title=\"Test Dependencies\">the section called “Test Dependencies”</a> for more details. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.expectedException\">@expectedException</h2>\n<p id=\"idp1578624\">  <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php\" title=\"Example 2.10: Using the expectException() method\">Example 2.10</a> shows how to use the <code class=\"literal\">@expectedException</code> annotation to test whether an exception is thrown inside the tested code. </p>\n<p> See <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions\" title=\"Testing Exceptions\">the section called “Testing Exceptions”</a> for more details. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.expectedExceptionCode\">@expectedExceptionCode</h2>\n<p id=\"idp1583024\">  The <code class=\"literal\">@expectedExceptionCode</code> annotation, in conjunction with the <code class=\"literal\">@expectedException</code> allows making assertions on the error code of a thrown exception thus being able to narrow down a specific exception. </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n    /**\n     * @expectedException     MyException\n     * @expectedExceptionCode 20\n     */\n    public function testExceptionHasErrorcode20()\n    {\n        throw new MyException('Some Message', 20);\n    }\n}</pre>\n<p> To ease testing and reduce duplication a shortcut can be used to specify a class constant as an <code class=\"literal\">@expectedExceptionCode</code> using the \"<code class=\"literal\">@expectedExceptionCode ClassName::CONST</code>\" syntax. </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n    /**\n      * @expectedException     MyException\n      * @expectedExceptionCode MyClass::ERRORCODE\n      */\n    public function testExceptionHasErrorcode20()\n    {\n      throw new MyException('Some Message', 20);\n    }\n}\nclass MyClass\n{\n    const ERRORCODE = 20;\n}</pre>\n\n<h2 class=\"title\" id=\"appendixes.annotations.expectedExceptionMessage\">@expectedExceptionMessage</h2>\n<p id=\"idp1588800\">  The <code class=\"literal\">@expectedExceptionMessage</code> annotation works similar to <code class=\"literal\">@expectedExceptionCode</code> as it lets you make an assertion on the error message of an exception. </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n    /**\n     * @expectedException        MyException\n     * @expectedExceptionMessage Some Message\n     */\n    public function testExceptionHasRightMessage()\n    {\n        throw new MyException('Some Message', 20);\n    }\n}</pre>\n<p> The expected message can be a substring of the exception Message. This can be useful to only assert that a certain name or parameter that was passed in shows up in the exception and not fixate the whole exception message in the test. </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n     /**\n      * @expectedException        MyException\n      * @expectedExceptionMessage broken\n      */\n     public function testExceptionHasRightMessage()\n     {\n         $param = \"broken\";\n         throw new MyException('Invalid parameter \"'.$param.'\".', 20);\n     }\n}</pre>\n<p> To ease testing and reduce duplication a shortcut can be used to specify a class constant as an <code class=\"literal\">@expectedExceptionMessage</code> using the \"<code class=\"literal\">@expectedExceptionMessage ClassName::CONST</code>\" syntax. A sample can be found in <a class=\"xref\" href=\"appendixes.annotations#appendixes.annotations.expectedExceptionCode\" title=\"@expectedExceptionCode\">the section called “@expectedExceptionCode”</a>. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.expectedExceptionMessageRegExp\">@expectedExceptionMessageRegExp</h2>\n<p id=\"idp1595456\">  The expected message can also be specified as a regular expression using the <code class=\"literal\">@expectedExceptionMessageRegExp</code> annotation. This is helpful for situations where a substring is not adequate for matching a given message. </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n     /**\n      * @expectedException              MyException\n      * @expectedExceptionMessageRegExp /Argument \\d+ can not be an? \\w+/\n      */\n     public function testExceptionHasRightMessage()\n     {\n         throw new MyException('Argument 2 can not be an integer');\n     }\n}</pre>\n\n<h2 class=\"title\" id=\"appendixes.annotations.group\">@group</h2>\n<p id=\"idp1599120\">  A test can be tagged as belonging to one or more groups using the <code class=\"literal\">@group</code> annotation like this </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n    /**\n     * @group specification\n     */\n    public function testSomething()\n    {\n    }\n\n    /**\n     * @group regresssion\n     * @group bug2204\n     */\n    public function testSomethingElse()\n    {\n    }\n}</pre>\n\n<p> Tests can be selected for execution based on groups using the <code class=\"literal\">--group</code> and <code class=\"literal\">--exclude-group</code> options of the command-line test runner or using the respective directives of the XML configuration file. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.large\">@large</h2>\n<p id=\"idp1604064\">  The <code class=\"literal\">@large</code> annotation is an alias for <code class=\"literal\">@group large</code>. </p>\n<p id=\"idp1606832\">   If the <code class=\"literal\">PHP_Invoker</code> package is installed and strict mode is enabled, a large test will fail if it takes longer than 60 seconds to execute. This timeout is configurable via the <code class=\"literal\">timeoutForLargeTests</code> attribute in the XML configuration file. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.medium\">@medium</h2>\n<p id=\"idp1610256\">  The <code class=\"literal\">@medium</code> annotation is an alias for <code class=\"literal\">@group medium</code>. A medium test must not depend on a test marked as <code class=\"literal\">@large</code>. </p>\n<p id=\"idp1613520\">   If the <code class=\"literal\">PHP_Invoker</code> package is installed and strict mode is enabled, a medium test will fail if it takes longer than 10 seconds to execute. This timeout is configurable via the <code class=\"literal\">timeoutForMediumTests</code> attribute in the XML configuration file. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.preserveGlobalState\">@preserveGlobalState</h2>\n<p id=\"idp1616960\">  When a test is run in a separate process, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. To fix this, you can prevent PHPUnit from preserving global state with the <code class=\"literal\">@preserveGlobalState</code> annotation. </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState disabled\n     */\n    public function testInSeparateProcess()\n    {\n        // ...\n    }\n}</pre>\n\n<h2 class=\"title\" id=\"appendixes.annotations.requires\">@requires</h2>\n<p id=\"idp1620672\">  The <code class=\"literal\">@requires</code> annotation can be used skip tests when common preconditions, like the PHP Version or installed extensions, are not met. </p>\n<p id=\"idp1622384\">  A complete list of possibilities and examples can be found at <a class=\"xref\" href=\"incomplete-and-skipped-tests#incomplete-and-skipped-tests.requires.tables.api\" title=\"Table 7.3. Possible @requires usages\">Table 7.3</a> </p>\n<h2 class=\"title\" id=\"appendixes.annotations.runTestsInSeparateProcesses\">@runTestsInSeparateProcesses</h2>\n<p id=\"idp1625408\">  Indicates that all tests in a test class should be run in a separate PHP process. </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\n/**\n * @runTestsInSeparateProcesses\n */\nclass MyTest extends TestCase\n{\n    // ...\n}</pre>\n<p> <span class=\"strong\"><strong>Note:</strong></span> By default, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. See <a class=\"xref\" href=\"appendixes.annotations#appendixes.annotations.preserveGlobalState\" title=\"@preserveGlobalState\">the section called “@preserveGlobalState”</a> for information on how to fix this. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.runInSeparateProcess\">@runInSeparateProcess</h2>\n<p id=\"idp1629904\">  Indicates that a test should be run in a separate PHP process. </p>\n<pre class=\"programlisting\" data-language=\"php\">use PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n    /**\n     * @runInSeparateProcess\n     */\n    public function testInSeparateProcess()\n    {\n        // ...\n    }\n}</pre>\n<p> <span class=\"strong\"><strong>Note:</strong></span> By default, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. See <a class=\"xref\" href=\"appendixes.annotations#appendixes.annotations.preserveGlobalState\" title=\"@preserveGlobalState\">the section called “@preserveGlobalState”</a> for information on how to fix this. </p>\n<h2 class=\"title\" id=\"appendixes.annotations.small\">@small</h2>\n<p id=\"idp1634416\">  The <code class=\"literal\">@small</code> annotation is an alias for <code class=\"literal\">@group small</code>. A small test must not depend on a test marked as <code class=\"literal\">@medium</code> or <code class=\"literal\">@large</code>. </p>\n<p id=\"idp1638128\">   If the <code class=\"literal\">PHP_Invoker</code> package is installed and strict mode is enabled, a small test will fail if it takes longer than 1 second to execute. This timeout is configurable via the <code class=\"literal\">timeoutForSmallTests</code> attribute in the XML configuration file. </p>\n<div class=\"alert alert-info\"><p> Tests need to be explicitly annotated by either <code class=\"literal\">@small</code>, <code class=\"literal\">@medium</code>, or <code class=\"literal\">@large</code> to enable run time limits. </p></div>\n<h2 class=\"title\" id=\"appendixes.annotations.test\">@test</h2>\n<p id=\"idp1643856\">  As an alternative to prefixing your test method names with <code class=\"literal\">test</code>, you can use the <code class=\"literal\">@test</code> annotation in a method's DocBlock to mark it as a test method. </p>\n<pre class=\"programlisting\" data-language=\"php\">/**\n * @test\n */\npublic function initialBalanceShouldBe0()\n{\n    $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());\n}</pre>\n\n<h2 class=\"title\" id=\"appendixes.annotations.testdox\">@testdox</h2>\n\n\n<h2 class=\"title\" id=\"appendixes.annotations.ticket\">@ticket</h2>\n\n\n<h2 class=\"title\" id=\"appendixes.annotations.uses\">@uses</h2>\n<p id=\"idp1653200\">  The <code class=\"literal\">@uses</code> annotation specifies code which will be executed by a test, but is not intended to be covered by the test. A good example is a value object which is necessary for testing a unit of code. </p>\n<pre class=\"programlisting\" data-language=\"php\">/**\n * @covers BankAccount::deposit\n * @uses   Money\n */\npublic function testMoneyCanBeDepositedInAccount()\n{\n    // ...\n}</pre>\n\n<p> This annotation is especially useful in strict coverage mode where unintentionally covered code will cause a test to fail. See <a class=\"xref\" href=\"risky-tests#risky-tests.unintentionally-covered-code\" title=\"Unintentionally Covered Code\">the section called “Unintentionally Covered Code”</a> for more information regarding strict coverage mode. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/appendixes.annotations.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/appendixes.annotations.html</a>\n  </p>\n</div>\n","writing-tests-for-phpunit":"<h1 class=\"title\" id=\"writing-tests-for-phpunit\">Writing Tests for PHPUnit</h1>\n<p id=\"idp91936\">  <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest.php\" title=\"Example 2.1: Testing array operations with PHPUnit\">Example 2.1</a> shows how we can write tests using PHPUnit that exercise PHP's array operations. The example introduces the basic conventions and steps for writing tests with PHPUnit: </p>\n<div class=\"orderedlist\"><ol class=\"orderedlist\" type=\"1\">\n<li class=\"listitem\"><p>The tests for a class <code class=\"literal\">Class</code> go into a class <code class=\"literal\">ClassTest</code>.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">ClassTest</code> inherits (most of the time) from <code class=\"literal\">phpunit\\framework\\TestCase</code>.</p></li>\n<li class=\"listitem\">\n<p>The tests are public methods that are named <code class=\"literal\">test*</code>.</p>\n<p id=\"idp68800\">Alternatively, you can use the <code class=\"literal\">@test</code> annotation in a method's docblock to mark it as a test method.</p>\n</li>\n<li class=\"listitem\"><p>Inside the test methods, assertion methods such as <code class=\"literal\">assertEquals()</code> (see <a class=\"xref\" href=\"appendixes.assertions\" title=\"Appendix A. Assertions\">Appendix A</a>) are used to assert that an actual value matches an expected value.</p></li>\n</ol></div>\n<div class=\"example\" id=\"writing-tests-for-phpunit.examples.StackTest.php\">\n<p class=\"title\"><strong>Example 2.1: Testing array operations with PHPUnit</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StackTest extends TestCase\n{\n    public function testPushAndPop()\n    {\n        $stack = [];\n        $this-&gt;assertEquals(0, count($stack));\n\n        array_push($stack, 'foo');\n        $this-&gt;assertEquals('foo', $stack[count($stack)-1]);\n        $this-&gt;assertEquals(1, count($stack));\n\n        $this-&gt;assertEquals('foo', array_pop($stack));\n        $this-&gt;assertEquals(0, count($stack));\n    }\n}\n?&gt;</pre></div>\n</div>\n<div class=\"blockquote\"><table class=\"blockquote\" summary=\"Block quote\">\n<tr>\n<td width=\"10%\"> </td>\n<td width=\"80%\"><p> Whenever you are tempted to type something into a <code class=\"literal\">print</code> statement or a debugger expression, write it as a test instead. </p></td>\n<td width=\"10%\"> </td>\n</tr>\n<tr>\n<td width=\"10%\"> </td>\n<td colspan=\"2\" align=\"right\">--<span class=\"attribution\">Martin Fowler</span>\n</td>\n</tr>\n</table></div>\n<h2 class=\"title\" id=\"writing-tests-for-phpunit.test-dependencies\">Test Dependencies</h2>\n<div class=\"blockquote\"><table class=\"blockquote\" summary=\"Block quote\">\n<tr>\n<td width=\"10%\"> </td>\n<td width=\"80%\"><p> Unit Tests are primarily written as a good practice to help developers identify and fix bugs, to refactor code and to serve as documentation for a unit of software under test. To achieve these benefits, unit tests ideally should cover all the possible paths in a program. One unit test usually covers one specific path in one function or method. However a test method is not necessary an encapsulated, independent entity. Often there are implicit dependencies between test methods, hidden in the implementation scenario of a test. </p></td>\n<td width=\"10%\"> </td>\n</tr>\n<tr>\n<td width=\"10%\"> </td>\n<td colspan=\"2\" align=\"right\">--<span class=\"attribution\">Adrian Kuhn et. al.</span>\n</td>\n</tr>\n</table></div>\n<p id=\"idp196368\">  PHPUnit supports the declaration of explicit dependencies between test methods. Such dependencies do not define the order in which the test methods are to be executed but they allow the returning of an instance of the test fixture by a producer and passing it to the dependent consumers. </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p>A producer is a test method that yields its unit under test as return value.</p></li>\n<li class=\"listitem\"><p>A consumer is a test method that depends on one or more producers and their return values.</p></li>\n</ul></div>\n<p id=\"idp199920\">   <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php\" title=\"Example 2.2: Using the @depends annotation to express dependencies\">Example 2.2</a> shows how to use the <code class=\"literal\">@depends</code> annotation to express dependencies between test methods. </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.examples.StackTest2.php\">\n<p class=\"title\"><strong>Example 2.2: Using the <code class=\"literal\">@depends</code> annotation to express dependencies</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StackTest extends TestCase\n{\n    public function testEmpty()\n    {\n        $stack = [];\n        $this-&gt;assertEmpty($stack);\n\n        return $stack;\n    }\n\n    /**\n     * @depends testEmpty\n     */\n    public function testPush(array $stack)\n    {\n        array_push($stack, 'foo');\n        $this-&gt;assertEquals('foo', $stack[count($stack)-1]);\n        $this-&gt;assertNotEmpty($stack);\n\n        return $stack;\n    }\n\n    /**\n     * @depends testPush\n     */\n    public function testPop(array $stack)\n    {\n        $this-&gt;assertEquals('foo', array_pop($stack));\n        $this-&gt;assertEmpty($stack);\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> In the example above, the first test, <code class=\"literal\">testEmpty()</code>, creates a new array and asserts that it is empty. The test then returns the fixture as its result. The second test, <code class=\"literal\">testPush()</code>, depends on <code class=\"literal\">testEmpty()</code> and is passed the result of that depended-upon test as its argument. Finally, <code class=\"literal\">testPop()</code> depends upon <code class=\"literal\">testPush()</code>. </p>\n<div class=\"alert alert-info\"><p id=\"idp92848\">   The return value yielded by a producer is passed \"as-is\" to its consumers by default. This means that when a producer returns an object a reference to that object is passed to the consumers. When a copy should be used instead of a reference then <code class=\"code\">@depends clone</code> should be used instead of <code class=\"code\">@depends</code>. </p></div>\n<p id=\"idp95168\">  To quickly localize defects, we want our attention to be focussed on relevant failing tests. This is why PHPUnit skips the execution of a test when a depended-upon test has failed. This improves defect localization by exploiting the dependencies between tests as shown in <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.examples.DependencyFailureTest.php\" title=\"Example 2.3: Exploiting the dependencies between tests\">Example 2.3</a>. </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.examples.DependencyFailureTest.php\">\n<p class=\"title\"><strong>Example 2.3: Exploiting the dependencies between tests</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass DependencyFailureTest extends TestCase\n{\n    public function testOne()\n    {\n        $this-&gt;assertTrue(false);\n    }\n\n    /**\n     * @depends testOne\n     */\n    public function testTwo()\n    {\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit --verbose DependencyFailureTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nFS\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) DependencyFailureTest::testOne\nFailed asserting that false is true.\n\n/home/sb/DependencyFailureTest.php:6\n\nThere was 1 skipped test:\n\n1) DependencyFailureTest::testTwo\nThis test depends on \"DependencyFailureTest::testOne\" to pass.\n\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1, Skipped: 1.</pre>\n</div>\n</div>\n<p> A test may have more than one <code class=\"literal\">@depends</code> annotation. PHPUnit does not change the order in which tests are executed, you have to ensure that the dependencies of a test can actually be met before the test is run. </p>\n<p> A test that has more than one <code class=\"literal\">@depends</code> annotation will get a fixture from the first producer as the first argument, a fixture from the second producer as the second argument, and so on. See <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.examples.MultipleDependencies.php\" title=\"Example 2.4: Test with multiple dependencies\">Example 2.4</a> </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.examples.MultipleDependencies.php\">\n<p class=\"title\"><strong>Example 2.4: Test with multiple dependencies</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass MultipleDependenciesTest extends TestCase\n{\n    public function testProducerFirst()\n    {\n        $this-&gt;assertTrue(true);\n        return 'first';\n    }\n\n    public function testProducerSecond()\n    {\n        $this-&gt;assertTrue(true);\n        return 'second';\n    }\n\n    /**\n     * @depends testProducerFirst\n     * @depends testProducerSecond\n     */\n    public function testConsumer()\n    {\n        $this-&gt;assertEquals(\n            ['first', 'second'],\n            func_get_args()\n        );\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit --verbose MultipleDependenciesTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\n...\n\nTime: 0 seconds, Memory: 3.25Mb\n\nOK (3 tests, 3 assertions)</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"writing-tests-for-phpunit.data-providers\">Data Providers</h2>\n<p id=\"idp107728\">   A test method can accept arbitrary arguments. These arguments are to be provided by a data provider method (<code class=\"literal\">additionProvider()</code> in <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DataTest.php\" title=\"Example 2.5: Using a data provider that returns an array of arrays\">Example 2.5</a>). The data provider method to be used is specified using the <code class=\"literal\">@dataProvider</code> annotation. </p>\n<p> A data provider method must be <code class=\"literal\">public</code> and either return an array of arrays or an object that implements the <code class=\"literal\">Iterator</code> interface and yields an array for each iteration step. For each array that is part of the collection the test method will be called with the contents of the array as its arguments. </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.data-providers.examples.DataTest.php\">\n<p class=\"title\"><strong>Example 2.5: Using a data provider that returns an array of arrays</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass DataTest extends TestCase\n{\n    /**\n     * @dataProvider additionProvider\n     */\n    public function testAdd($a, $b, $expected)\n    {\n        $this-&gt;assertEquals($expected, $a + $b);\n    }\n\n    public function additionProvider()\n    {\n        return [\n            [0, 0, 0],\n            [0, 1, 1],\n            [1, 0, 1],\n            [1, 1, 3]\n        ];\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit DataTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\n...F\n\nTime: 0 seconds, Memory: 5.75Mb\n\nThere was 1 failure:\n\n1) DataTest::testAdd with data set #3 (1, 1, 3)\nFailed asserting that 2 matches expected 3.\n\n/home/sb/DataTest.php:9\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1.</pre>\n</div>\n</div>\n<p> When using a large number of datasets it's useful to name each one with string key instead of default numeric. Output will be more verbose as it'll contain that name of a dataset that breaks a test. </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.data-providers.examples.DataTest1.php\">\n<p class=\"title\"><strong>Example 2.6: Using a data provider with named datasets</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass DataTest extends TestCase\n{\n    /**\n     * @dataProvider additionProvider\n     */\n    public function testAdd($a, $b, $expected)\n    {\n        $this-&gt;assertEquals($expected, $a + $b);\n    }\n\n    public function additionProvider()\n    {\n        return [\n            'adding zeros'  =&gt; [0, 0, 0],\n            'zero plus one' =&gt; [0, 1, 1],\n            'one plus zero' =&gt; [1, 0, 1],\n            'one plus one'  =&gt; [1, 1, 3]\n        ];\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit DataTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\n...F\n\nTime: 0 seconds, Memory: 5.75Mb\n\nThere was 1 failure:\n\n1) DataTest::testAdd with data set \"one plus one\" (1, 1, 3)\nFailed asserting that 2 matches expected 3.\n\n/home/sb/DataTest.php:9\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1.</pre>\n</div>\n</div>\n<div class=\"example\" id=\"writing-tests-for-phpunit.data-providers.examples.DataTest2.php\">\n<p class=\"title\"><strong>Example 2.7: Using a data provider that returns an Iterator object</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nrequire 'CsvFileIterator.php';\n\nclass DataTest extends TestCase\n{\n    /**\n     * @dataProvider additionProvider\n     */\n    public function testAdd($a, $b, $expected)\n    {\n        $this-&gt;assertEquals($expected, $a + $b);\n    }\n\n    public function additionProvider()\n    {\n        return new CsvFileIterator('data.csv');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit DataTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\n...F\n\nTime: 0 seconds, Memory: 5.75Mb\n\nThere was 1 failure:\n\n1) DataTest::testAdd with data set #3 ('1', '1', '3')\nFailed asserting that 2 matches expected '3'.\n\n/home/sb/DataTest.php:11\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1.</pre>\n</div>\n</div>\n<div class=\"example\" id=\"writing-tests-for-phpunit.data-providers.examples.CsvFileIterator.php\">\n<p class=\"title\"><strong>Example 2.8: The CsvFileIterator class</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass CsvFileIterator implements Iterator {\n    protected $file;\n    protected $key = 0;\n    protected $current;\n\n    public function __construct($file) {\n        $this-&gt;file = fopen($file, 'r');\n    }\n\n    public function __destruct() {\n        fclose($this-&gt;file);\n    }\n\n    public function rewind() {\n        rewind($this-&gt;file);\n        $this-&gt;current = fgetcsv($this-&gt;file);\n        $this-&gt;key = 0;\n    }\n\n    public function valid() {\n        return !feof($this-&gt;file);\n    }\n\n    public function key() {\n        return $this-&gt;key;\n    }\n\n    public function current() {\n        return $this-&gt;current;\n    }\n\n    public function next() {\n        $this-&gt;current = fgetcsv($this-&gt;file);\n        $this-&gt;key++;\n    }\n}\n?&gt;</pre></div>\n</div>\n<p id=\"idp327856\">    When a test receives input from both a <code class=\"literal\">@dataProvider</code> method and from one or more tests it <code class=\"literal\">@depends</code> on, the arguments from the data provider will come before the ones from depended-upon tests. The arguments from depended-upon tests will be the same for each data set. See <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DependencyAndDataProviderCombo.php\" title=\"Example 2.9: Combination of @depends and @dataProvider in same test\">Example 2.9</a> </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.data-providers.examples.DependencyAndDataProviderCombo.php\">\n<p class=\"title\"><strong>Example 2.9: Combination of @depends and @dataProvider in same test</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass DependencyAndDataProviderComboTest extends TestCase\n{\n    public function provider()\n    {\n        return [['provider1'], ['provider2']];\n    }\n\n    public function testProducerFirst()\n    {\n        $this-&gt;assertTrue(true);\n        return 'first';\n    }\n\n    public function testProducerSecond()\n    {\n        $this-&gt;assertTrue(true);\n        return 'second';\n    }\n\n    /**\n     * @depends testProducerFirst\n     * @depends testProducerSecond\n     * @dataProvider provider\n     */\n    public function testConsumer()\n    {\n        $this-&gt;assertEquals(\n            ['provider1', 'first', 'second'],\n            func_get_args()\n        );\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit --verbose DependencyAndDataProviderComboTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\n...F\n\nTime: 0 seconds, Memory: 3.50Mb\n\nThere was 1 failure:\n\n1) DependencyAndDataProviderComboTest::testConsumer with data set #1 ('provider2')\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\nArray (\n-    0 =&gt; 'provider1'\n+    0 =&gt; 'provider2'\n1 =&gt; 'first'\n2 =&gt; 'second'\n)\n\n/home/sb/DependencyAndDataProviderComboTest.php:31\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1.\n</pre>\n</div>\n</div>\n<div class=\"alert alert-info\"><p id=\"idp335680\">    When a test depends on a test that uses data providers, the depending test will be executed when the test it depends upon is successful for at least one data set. The result of a test that uses data providers cannot be injected into a depending test. </p></div>\n<div class=\"alert alert-info\"><p id=\"idp338576\">    All data providers are executed before both the call to the <code class=\"literal\">setUpBeforeClass</code> static method and the first call to the <code class=\"literal\">setUp</code> method. Because of that you can't access any variables you create there from within a data provider. This is required in order for PHPUnit to be able to compute the total number of tests. </p></div>\n<h2 class=\"title\" id=\"writing-tests-for-phpunit.exceptions\">Testing Exceptions</h2>\n<p id=\"idp342704\">   <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php\" title=\"Example 2.10: Using the expectException() method\">Example 2.10</a> shows how to use the <code class=\"literal\">expectException()</code> method to test whether an exception is thrown by the code under test. </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php\">\n<p class=\"title\"><strong>Example 2.10: Using the expectException() method</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ExceptionTest extends TestCase\n{\n    public function testException()\n    {\n        $this-&gt;expectException(InvalidArgumentException::class);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ExceptionTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) ExceptionTest::testException\nExpected exception InvalidArgumentException\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<p id=\"idp348848\">    In addition to the <code class=\"literal\">expectException()</code> method the <code class=\"literal\">expectExceptionCode()</code>, <code class=\"literal\">expectExceptionMessage()</code>, and <code class=\"literal\">expectExceptionMessageRegExp()</code> methods exist to set up expectations for exceptions raised by the code under test. </p>\n<p id=\"idp352384\">   Alternatively, you can use the <code class=\"literal\">@expectedException</code>, <code class=\"literal\">@expectedExceptionCode</code>, <code class=\"literal\">@expectedExceptionMessage</code>, and <code class=\"literal\">@expectedExceptionMessageRegExp</code> annotations to set up expectations for exceptions raised by the code under test. <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php\" title=\"Example 2.11: Using the @expectedException annotation\">Example 2.11</a> shows an example. </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php\">\n<p class=\"title\"><strong>Example 2.11: Using the @expectedException annotation</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ExceptionTest extends TestCase\n{\n    /**\n     * @expectedException InvalidArgumentException\n     */\n    public function testException()\n    {\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ExceptionTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) ExceptionTest::testException\nExpected exception InvalidArgumentException\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"writing-tests-for-phpunit.errors\">Testing PHP Errors</h2>\n<p id=\"idp362256\">      By default, PHPUnit converts PHP errors, warnings, and notices that are triggered during the execution of a test to an exception. Using these exceptions, you can, for instance, expect a test to trigger a PHP error as shown in <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ErrorTest.php\" title=\"Example 2.12: Expecting a PHP error using @expectedException\">Example 2.12</a>. </p>\n<div class=\"alert alert-info\"><p> PHP's <code class=\"literal\">error_reporting</code> runtime configuration can limit which errors PHPUnit will convert to exceptions. If you are having issues with this feature, be sure PHP is not configured to suppress the type of errors you're testing. </p></div>\n<div class=\"example\" id=\"writing-tests-for-phpunit.exceptions.examples.ErrorTest.php\">\n<p class=\"title\"><strong>Example 2.12: Expecting a PHP error using @expectedException</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ExpectedErrorTest extends TestCase\n{\n    /**\n     * @expectedException PHPUnit_Framework_Error\n     */\n    public function testFailingInclude()\n    {\n        include 'not_existing_file.php';\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit -d error_reporting=2 ExpectedErrorTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\n.\n\nTime: 0 seconds, Memory: 5.25Mb\n\nOK (1 test, 1 assertion)</pre>\n</div>\n</div>\n<p id=\"idp369072\">   <code class=\"literal\">PHPUnit_Framework_Error_Notice</code> and <code class=\"literal\">PHPUnit_Framework_Error_Warning</code> represent PHP notices and warnings, respectively. </p>\n<div class=\"alert alert-info\"><p> You should be as specific as possible when testing exceptions. Testing for classes that are too generic might lead to undesirable side-effects. Accordingly, testing for the <code class=\"literal\">Exception</code> class with <code class=\"literal\">@expectedException</code> or <code class=\"literal\">setExpectedException()</code> is no longer permitted. </p></div>\n<p> When testing that relies on php functions that trigger errors like <code class=\"literal\">fopen</code> it can sometimes be useful to use error suppression while testing. This allows you to check the return values by suppressing notices that would lead to a phpunit <code class=\"literal\">PHPUnit_Framework_Error_Notice</code>. </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.exceptions.examples.TriggerErrorReturnValue.php\">\n<p class=\"title\"><strong>Example 2.13: Testing return values of code that uses PHP Errors</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ErrorSuppressionTest extends TestCase\n{\n    public function testFileWriting() {\n        $writer = new FileWriter;\n        $this-&gt;assertFalse(@$writer-&gt;write('/is-not-writeable/file', 'stuff'));\n    }\n}\nclass FileWriter\n{\n    public function write($file, $content) {\n        $file = fopen($file, 'w');\n        if($file == false) {\n            return false;\n        }\n        // ...\n    }\n}\n\n?&gt;</pre>\n<pre class=\"screen\">phpunit ErrorSuppressionTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\n.\n\nTime: 1 seconds, Memory: 5.25Mb\n\nOK (1 test, 1 assertion)</pre>\n</div>\n</div>\n<p> Without the error suppression the test would fail reporting <code class=\"literal\">fopen(/is-not-writeable/file): failed to open stream:\n    No such file or directory</code>. </p>\n<h2 class=\"title\" id=\"writing-tests-for-phpunit.output\">Testing Output</h2>\n<p> Sometimes you want to assert that the execution of a method, for instance, generates an expected output (via <code class=\"literal\">echo</code> or <code class=\"literal\">print</code>, for example). The <code class=\"literal\">phpunit\\framework\\TestCase</code> class uses PHP's <a class=\"ulink\" href=\"http://www.php.net/manual/en/ref.outcontrol.php\" target=\"_top\">Output Buffering</a> feature to provide the functionality that is necessary for this. </p>\n<p> <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.output.examples.OutputTest.php\" title=\"Example 2.14: Testing the output of a function or method\">Example 2.14</a> shows how to use the <code class=\"literal\">expectOutputString()</code> method to set the expected output. If this expected output is not generated, the test will be counted as a failure. </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.output.examples.OutputTest.php\">\n<p class=\"title\"><strong>Example 2.14: Testing the output of a function or method</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass OutputTest extends TestCase\n{\n    public function testExpectFooActualFoo()\n    {\n        $this-&gt;expectOutputString('foo');\n        print 'foo';\n    }\n\n    public function testExpectBarActualBaz()\n    {\n        $this-&gt;expectOutputString('bar');\n        print 'baz';\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit OutputTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\n.F\n\nTime: 0 seconds, Memory: 5.75Mb\n\nThere was 1 failure:\n\n1) OutputTest::testExpectBarActualBaz\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'bar'\n+'baz'\n\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1.</pre>\n</div>\n</div>\n<p> <a class=\"xref\" href=\"writing-tests-for-phpunit#writing-tests-for-phpunit.output.tables.api\" title=\"Table 2.1. Methods for testing output\">Table 2.1</a> shows the methods provided for testing output </p>\n<div class=\"table\" id=\"writing-tests-for-phpunit.output.tables.api\">\n<p class=\"title\"><strong>Table 2.1. Methods for testing output</strong></p>\n<div class=\"table-contents\"><table class=\"table\" summary=\"Methods for testing output\">\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead><tr>\n<th align=\"left\">Method</th>\n<th align=\"left\">Meaning</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"literal\">void expectOutputRegex(string $regularExpression)</code></td>\n<td align=\"left\">Set up the expectation that the output matches a <code class=\"literal\">$regularExpression</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">void expectOutputString(string $expectedString)</code></td>\n<td align=\"left\">Set up the expectation that the output is equal to an <code class=\"literal\">$expectedString</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">bool setOutputCallback(callable $callback)</code></td>\n<td align=\"left\">Sets up a callback that is used to, for instance, normalize the actual output.</td>\n</tr>\n</tbody>\n</table></div>\n</div>\n<div class=\"alert alert-info\"><p> A test that emits output will fail in strict mode. </p></div>\n<h2 class=\"title\" id=\"writing-tests-for-phpunit.error-output\">Error output</h2>\n<p> Whenever a test fails PHPUnit tries its best to provide you with as much context as possible that can help to identify the problem. </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.error-output.examples.ArrayDiffTest.php\">\n<p class=\"title\"><strong>Example 2.15: Error output generated when an array comparison fails</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ArrayDiffTest extends TestCase\n{\n    public function testEquality() {\n        $this-&gt;assertEquals(\n            [1, 2,  3, 4, 5, 6],\n            [1, 2, 33, 4, 5, 6]\n        );\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ArrayDiffTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) ArrayDiffTest::testEquality\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     0 =&gt; 1\n     1 =&gt; 2\n-    2 =&gt; 3\n+    2 =&gt; 33\n     3 =&gt; 4\n     4 =&gt; 5\n     5 =&gt; 6\n )\n\n/home/sb/ArrayDiffTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<p> In this example only one of the array values differs and the other values are shown to provide context on where the error occurred. </p>\n<p> When the generated output would be long to read PHPUnit will split it up and provide a few lines of context around every difference. </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.error-output.examples.LongArrayDiffTest.php\">\n<p class=\"title\"><strong>Example 2.16: Error output when an array comparison of an long array fails</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass LongArrayDiffTest extends TestCase\n{\n    public function testEquality() {\n        $this-&gt;assertEquals(\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,  3, 4, 5, 6],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 33, 4, 5, 6]\n        );\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit LongArrayDiffTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) LongArrayDiffTest::testEquality\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n     13 =&gt; 2\n-    14 =&gt; 3\n+    14 =&gt; 33\n     15 =&gt; 4\n     16 =&gt; 5\n     17 =&gt; 6\n )\n\n\n/home/sb/LongArrayDiffTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h3 class=\"title\" id=\"writing-tests-for-phpunit.error-output.edge-cases\">Edge cases</h3>\n<p> When a comparison fails PHPUnit creates textual representations of the input values and compares those. Due to that implementation a diff might show more problems than actually exist. </p>\n<p> This only happens when using assertEquals or other 'weak' comparison functions on arrays or objects. </p>\n<div class=\"example\" id=\"writing-tests-for-phpunit.error-output.edge-cases.examples.ArrayWeakComparisonTest.php\">\n<p class=\"title\"><strong>Example 2.17: Edge case in the diff generation when using weak comparison</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ArrayWeakComparisonTest extends TestCase\n{\n    public function testEquality() {\n        $this-&gt;assertEquals(\n            [1, 2, 3, 4, 5, 6],\n            ['1', 2, 33, 4, 5, 6]\n        );\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ArrayWeakComparisonTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) ArrayWeakComparisonTest::testEquality\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    0 =&gt; 1\n+    0 =&gt; '1'\n     1 =&gt; 2\n-    2 =&gt; 3\n+    2 =&gt; 33\n     3 =&gt; 4\n     4 =&gt; 5\n     5 =&gt; 6\n )\n\n\n/home/sb/ArrayWeakComparisonTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<p> In this example the difference in the first index between <code class=\"literal\">1</code> and <code class=\"literal\">'1'</code> is reported even though assertEquals considers the values as a match. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/writing-tests-for-phpunit.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/writing-tests-for-phpunit.html</a>\n  </p>\n</div>\n","test-doubles":"<h1 class=\"title\" id=\"test-doubles\">Test Doubles</h1>\n<p> Gerard Meszaros introduces the concept of Test Doubles in <a class=\"xref\" href=\"https://phpunit.de/manual/5.4/en/appendixes.bibliography.html#Meszaros2007\" title=\"xUnit Test Patterns: Refactoring Test Code\">[<abbr class=\"abbrev\">Meszaros2007</abbr>]</a> like this: </p>\n<div class=\"blockquote\"><table class=\"blockquote\" summary=\"Block quote\">\n<tr>\n<td width=\"10%\"> </td>\n<td width=\"80%\">\n<p id=\"idp864064\">  Sometimes it is just plain hard to test the system under test (SUT) because it depends on other components that cannot be used in the test environment. This could be because they aren't available, they will not return the results needed for the test or because executing them would have undesirable side effects. In other cases, our test strategy requires us to have more control or visibility of the internal behavior of the SUT. </p>\n<p id=\"idp866128\">   When we are writing a test in which we cannot (or chose not to) use a real depended-on component (DOC), we can replace it with a Test Double. The Test Double doesn't have to behave exactly like the real DOC; it merely has to provide the same API as the real one so that the SUT thinks it is the real one! </p>\n</td>\n<td width=\"10%\"> </td>\n</tr>\n<tr>\n<td width=\"10%\"> </td>\n<td colspan=\"2\" align=\"right\">--<span class=\"attribution\">Gerard Meszaros</span>\n</td>\n</tr>\n</table></div>\n<p> The <code class=\"literal\">createMock($type)</code> and <code class=\"literal\">getMockBuilder($type)</code> methods provided by PHPUnit can be used in a test to automatically generate an object that can act as a test double for the specified original type (interface or class name). This test double object can be used in every context where an object of the original type is expected or required. </p>\n<p> The <code class=\"literal\">createMock($type)</code> method immediately returns a test double object for the specified type (interface or class). The creation of this test double is performed using best practice defaults (the <code class=\"literal\">__construct()</code> and <code class=\"literal\">__clone()</code> methods of the original class are not executed and the arguments passed to a method of the test double will not be cloned. If these defaults are not what you need then you can use the <code class=\"literal\">getMockBuilder($type)</code> method to customize the test double generation using a fluent interface. </p>\n<p> By default, all methods of the original class are replaced with a dummy implementation that just returns <code class=\"literal\">null</code> (without calling the original method). Using the <code class=\"literal\">will($this-&gt;returnValue())</code> method, for instance, you can configure these dummy implementations to return a value when called. </p>\n<div class=\"alert alert-info\">\n<h3 class=\"title\">Limitation: final, private, and static methods</h3>\n<p> Please note that <code class=\"literal\">final</code>, <code class=\"literal\">private</code> and <code class=\"literal\">static</code> methods cannot be stubbed or mocked. They are ignored by PHPUnit's test double functionality and retain their original behavior. </p>\n</div>\n<h2 class=\"title\" id=\"test-doubles.stubs\">Stubs</h2>\n<p id=\"idp949488\">  The practice of replacing an object with a test double that (optionally) returns configured return values is referred to as <span class=\"emphasis\"><em>stubbing</em></span>. You can use a <span class=\"emphasis\"><em>stub</em></span> to \"replace a real component on which the SUT depends so that the test has a control point for the indirect inputs of the SUT. This allows the test to force the SUT down paths it might not otherwise execute\". </p>\n<p id=\"idp951760\">  <a class=\"xref\" href=\"test-doubles#test-doubles.stubs.examples.StubTest.php\" title=\"Example 9.2: Stubbing a method call to return a fixed value\">Example 9.2</a> shows how to stub method calls and set up return values. We first use the <code class=\"literal\">createMock()</code> method that is provided by the <code class=\"literal\">phpunit\\framework\\TestCase</code> class to set up a stub object that looks like an object of <code class=\"literal\">SomeClass</code> (<a class=\"xref\" href=\"test-doubles#test-doubles.stubs.examples.SomeClass.php\" title=\"Example 9.1: The class we want to stub\">Example 9.1</a>). We then use the <a class=\"ulink\" href=\"http://martinfowler.com/bliki/FluentInterface.html\" target=\"_top\">Fluent Interface</a> that PHPUnit provides to specify the behavior for the stub. In essence, this means that you do not need to create several temporary objects and wire them together afterwards. Instead, you chain method calls as shown in the example. This leads to more readable and \"fluent\" code. </p>\n<div class=\"example\" id=\"test-doubles.stubs.examples.SomeClass.php\">\n<p class=\"title\"><strong>Example 9.1: The class we want to stub</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass SomeClass\n{\n    public function doSomething()\n    {\n        // Do something.\n    }\n}\n?&gt;</pre></div>\n</div>\n<div class=\"example\" id=\"test-doubles.stubs.examples.StubTest.php\">\n<p class=\"title\"><strong>Example 9.2: Stubbing a method call to return a fixed value</strong></p>\n<div class=\"example-contents\" id=\"idp959424\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StubTest extends TestCase\n{\n    public function testStub()\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this-&gt;createMock(SomeClass::class);\n\n        // Configure the stub.\n        $stub-&gt;method('doSomething')\n             -&gt;willReturn('foo');\n\n        // Calling $stub-&gt;doSomething() will now return\n        // 'foo'.\n        $this-&gt;assertEquals('foo', $stub-&gt;doSomething());\n    }\n}\n?&gt;</pre></div>\n</div>\n<div class=\"alert alert-info\">\n<h3 class=\"title\">Limitation: Methods named \"method\"</h3>\n<p> The example shown above only works when the original class does not declare a method named \"method\". </p>\n<p> If the original class does declare a method named \"method\" then <code class=\"literal\">$stub-&gt;expects($this-&gt;any())-&gt;method('doSomething')-&gt;willReturn('foo');</code> has to be used. </p>\n</div>\n<p> \"Behind the scenes\", PHPUnit automatically generates a new PHP class that implements the desired behavior when the <code class=\"literal\">createMock()</code> method is used. </p>\n<p> <a class=\"xref\" href=\"test-doubles#test-doubles.stubs.examples.StubTest2.php\" title=\"Example 9.3: Using the Mock Builder API can be used to configure the generated test double class\">Example 9.3</a> shows an example of how to use the Mock Builder's fluent interface to configure the creation of the test double. </p>\n<div class=\"example\" id=\"test-doubles.stubs.examples.StubTest2.php\">\n<p class=\"title\"><strong>Example 9.3: Using the Mock Builder API can be used to configure the generated test double class</strong></p>\n<div class=\"example-contents\" id=\"idp777584\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StubTest extends TestCase\n{\n    public function testStub()\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this-&gt;createMock(SomeClass::class);\n\n        // Configure the stub.\n        $stub-&gt;method('doSomething')\n             -&gt;willReturn('foo');\n\n        // Calling $stub-&gt;doSomething() will now return\n        // 'foo'.\n        $this-&gt;assertEquals('foo', $stub-&gt;doSomething());\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> In the examples so far we have been returning simple values using <code class=\"literal\">willReturn($value)</code>. This short syntax is the same as <code class=\"literal\">will($this-&gt;returnValue($value))</code>. We can use variations on this longer syntax to achieve more complex stubbing behaviour. </p>\n<p> Sometimes you want to return one of the arguments of a method call (unchanged) as the result of a stubbed method call. <a class=\"xref\" href=\"test-doubles#test-doubles.stubs.examples.StubTest3.php\" title=\"Example 9.4: Stubbing a method call to return one of the arguments\">Example 9.4</a> shows how you can achieve this using <code class=\"literal\">returnArgument()</code> instead of <code class=\"literal\">returnValue()</code>. </p>\n<div class=\"example\" id=\"test-doubles.stubs.examples.StubTest3.php\">\n<p class=\"title\"><strong>Example 9.4: Stubbing a method call to return one of the arguments</strong></p>\n<div class=\"example-contents\" id=\"idp785680\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StubTest extends TestCase\n{\n    public function testReturnArgumentStub()\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this-&gt;createMock(SomeClass::class);\n\n        // Configure the stub.\n        $stub-&gt;method('doSomething')\n             -&gt;will($this-&gt;returnArgument(0));\n\n        // $stub-&gt;doSomething('foo') returns 'foo'\n        $this-&gt;assertEquals('foo', $stub-&gt;doSomething('foo'));\n\n        // $stub-&gt;doSomething('bar') returns 'bar'\n        $this-&gt;assertEquals('bar', $stub-&gt;doSomething('bar'));\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> When testing a fluent interface, it is sometimes useful to have a stubbed method return a reference to the stubbed object. <a class=\"xref\" href=\"test-doubles#test-doubles.stubs.examples.StubTest4.php\" title=\"Example 9.5: Stubbing a method call to return a reference to the stub object\">Example 9.5</a> shows how you can use <code class=\"literal\">returnSelf()</code> to achieve this. </p>\n<div class=\"example\" id=\"test-doubles.stubs.examples.StubTest4.php\">\n<p class=\"title\"><strong>Example 9.5: Stubbing a method call to return a reference to the stub object</strong></p>\n<div class=\"example-contents\" id=\"idp791856\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StubTest extends TestCase\n{\n    public function testReturnSelf()\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this-&gt;createMock(SomeClass::class);\n\n        // Configure the stub.\n        $stub-&gt;method('doSomething')\n             -&gt;will($this-&gt;returnSelf());\n\n        // $stub-&gt;doSomething() returns $stub\n        $this-&gt;assertSame($stub, $stub-&gt;doSomething());\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> Sometimes a stubbed method should return different values depending on a predefined list of arguments. You can use <code class=\"literal\">returnValueMap()</code> to create a map that associates arguments with corresponding return values. See <a class=\"xref\" href=\"test-doubles#test-doubles.stubs.examples.StubTest5.php\" title=\"Example 9.6: Stubbing a method call to return the value from a map\">Example 9.6</a> for an example. </p>\n<div class=\"example\" id=\"test-doubles.stubs.examples.StubTest5.php\">\n<p class=\"title\"><strong>Example 9.6: Stubbing a method call to return the value from a map</strong></p>\n<div class=\"example-contents\" id=\"idp797984\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StubTest extends TestCase\n{\n    public function testReturnValueMapStub()\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this-&gt;createMock(SomeClass::class);\n\n        // Create a map of arguments to return values.\n        $map = [\n            ['a', 'b', 'c', 'd'],\n            ['e', 'f', 'g', 'h']\n        );\n\n        // Configure the stub.\n        $stub-&gt;method('doSomething')\n             -&gt;will($this-&gt;returnValueMap($map));\n\n        // $stub-&gt;doSomething() returns different values depending on\n        // the provided arguments.\n        $this-&gt;assertEquals('d', $stub-&gt;doSomething('a', 'b', 'c'));\n        $this-&gt;assertEquals('h', $stub-&gt;doSomething('e', 'f', 'g'));\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> When the stubbed method call should return a calculated value instead of a fixed one (see <code class=\"literal\">returnValue()</code>) or an (unchanged) argument (see <code class=\"literal\">returnArgument()</code>), you can use <code class=\"literal\">returnCallback()</code> to have the stubbed method return the result of a callback function or method. See <a class=\"xref\" href=\"test-doubles#test-doubles.stubs.examples.StubTest6.php\" title=\"Example 9.7: Stubbing a method call to return a value from a callback\">Example 9.7</a> for an example. </p>\n<div class=\"example\" id=\"test-doubles.stubs.examples.StubTest6.php\">\n<p class=\"title\"><strong>Example 9.7: Stubbing a method call to return a value from a callback</strong></p>\n<div class=\"example-contents\" id=\"idp1184320\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StubTest extends TestCase\n{\n    public function testReturnCallbackStub()\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this-&gt;createMock(SomeClass::class);\n\n        // Configure the stub.\n        $stub-&gt;method('doSomething')\n             -&gt;will($this-&gt;returnCallback('str_rot13'));\n\n        // $stub-&gt;doSomething($argument) returns str_rot13($argument)\n        $this-&gt;assertEquals('fbzrguvat', $stub-&gt;doSomething('something'));\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> A simpler alternative to setting up a callback method may be to specify a list of desired return values. You can do this with the <code class=\"literal\">onConsecutiveCalls()</code> method. See <a class=\"xref\" href=\"test-doubles#test-doubles.stubs.examples.StubTest7.php\" title=\"Example 9.8: Stubbing a method call to return a list of values in the specified order\">Example 9.8</a> for an example. </p>\n<div class=\"example\" id=\"test-doubles.stubs.examples.StubTest7.php\">\n<p class=\"title\"><strong>Example 9.8: Stubbing a method call to return a list of values in the specified order</strong></p>\n<div class=\"example-contents\" id=\"idp1190448\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StubTest extends TestCase\n{\n    public function testOnConsecutiveCallsStub()\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this-&gt;createMock(SomeClass::class);\n\n        // Configure the stub.\n        $stub-&gt;method('doSomething')\n             -&gt;will($this-&gt;onConsecutiveCalls(2, 3, 5, 7));\n\n        // $stub-&gt;doSomething() returns a different value each time\n        $this-&gt;assertEquals(2, $stub-&gt;doSomething());\n        $this-&gt;assertEquals(3, $stub-&gt;doSomething());\n        $this-&gt;assertEquals(5, $stub-&gt;doSomething());\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> Instead of returning a value, a stubbed method can also raise an exception. <a class=\"xref\" href=\"test-doubles#test-doubles.stubs.examples.StubTest8.php\" title=\"Example 9.9: Stubbing a method call to throw an exception\">Example 9.9</a> shows how to use <code class=\"literal\">throwException()</code> to do this. </p>\n<div class=\"example\" id=\"test-doubles.stubs.examples.StubTest8.php\">\n<p class=\"title\"><strong>Example 9.9: Stubbing a method call to throw an exception</strong></p>\n<div class=\"example-contents\" id=\"idp1196640\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StubTest extends TestCase\n{\n    public function testThrowExceptionStub()\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this-&gt;createMock(SomeClass::class);\n\n        // Configure the stub.\n        $stub-&gt;method('doSomething')\n             -&gt;will($this-&gt;throwException(new Exception));\n\n        // $stub-&gt;doSomething() throws Exception\n        $stub-&gt;doSomething();\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> Alternatively, you can write the stub yourself and improve your design along the way. Widely used resources are accessed through a single façade, so you can easily replace the resource with the stub. For example, instead of having direct database calls scattered throughout the code, you have a single <code class=\"literal\">Database</code> object, an implementor of the <code class=\"literal\">IDatabase</code> interface. Then, you can create a stub implementation of <code class=\"literal\">IDatabase</code> and use it for your tests. You can even create an option for running the tests with the stub database or the real database, so you can use your tests for both local testing during development and integration testing with the real database. </p>\n<p> Functionality that needs to be stubbed out tends to cluster in the same object, improving cohesion. By presenting the functionality with a single, coherent interface you reduce the coupling with the rest of the system. </p>\n<h2 class=\"title\" id=\"test-doubles.mock-objects\">Mock Objects</h2>\n<p> The practice of replacing an object with a test double that verifies expectations, for instance asserting that a method has been called, is referred to as <span class=\"emphasis\"><em>mocking</em></span>. </p>\n<p id=\"idp1204384\">  You can use a <span class=\"emphasis\"><em>mock object</em></span> \"as an observation point that is used to verify the indirect outputs of the SUT as it is exercised. Typically, the mock object also includes the functionality of a test stub in that it must return values to the SUT if it hasn't already failed the tests but the emphasis is on the verification of the indirect outputs. Therefore, a mock object is a lot more than just a test stub plus assertions; it is used in a fundamentally different way\" (Gerard Meszaros). </p>\n<div class=\"alert alert-info\">\n<h3 class=\"title\">Limitation: Automatic verification of expectations</h3>\n<p> Only mock objects generated within the scope of a test will be verified automatically by PHPUnit. Mock objects generated in data providers, for instance, or injected into the test using the <code class=\"literal\">@depends</code> annotation will not be verified automatically by PHPUnit. </p>\n</div>\n<p> Here is an example: suppose we want to test that the correct method, <code class=\"literal\">update()</code> in our example, is called on an object that observes another object. <a class=\"xref\" href=\"test-doubles#test-doubles.mock-objects.examples.SUT.php\" title=\"Example 9.10: The Subject and Observer classes that are part of the System under Test (SUT)\">Example 9.10</a> shows the code for the <code class=\"literal\">Subject</code> and <code class=\"literal\">Observer</code> classes that are part of the System under Test (SUT). </p>\n<div class=\"example\" id=\"test-doubles.mock-objects.examples.SUT.php\">\n<p class=\"title\"><strong>Example 9.10: The Subject and Observer classes that are part of the System under Test (SUT)</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass Subject\n{\n    protected $observers = [];\n    protected $name;\n\n    public function __construct($name)\n    {\n        $this-&gt;name = $name;\n    }\n\n    public function getName()\n    {\n        return $this-&gt;name;\n    }\n\n    public function attach(Observer $observer)\n    {\n        $this-&gt;observers[] = $observer;\n    }\n\n    public function doSomething()\n    {\n        // Do something.\n        // ...\n\n        // Notify observers that we did something.\n        $this-&gt;notify('something');\n    }\n\n    public function doSomethingBad()\n    {\n        foreach ($this-&gt;observers as $observer) {\n            $observer-&gt;reportError(42, 'Something bad happened', $this);\n        }\n    }\n\n    protected function notify($argument)\n    {\n        foreach ($this-&gt;observers as $observer) {\n            $observer-&gt;update($argument);\n        }\n    }\n\n    // Other methods.\n}\n\nclass Observer\n{\n    public function update($argument)\n    {\n        // Do something.\n    }\n\n    public function reportError($errorCode, $errorMessage, Subject $subject)\n    {\n        // Do something\n    }\n\n    // Other methods.\n}\n?&gt;</pre></div>\n</div>\n<p id=\"idp1213824\">  <a class=\"xref\" href=\"test-doubles#test-doubles.mock-objects.examples.SubjectTest.php\" title=\"Example 9.11: Testing that a method gets called once and with a specified argument\">Example 9.11</a> shows how to use a mock object to test the interaction between <code class=\"literal\">Subject</code> and <code class=\"literal\">Observer</code> objects. </p>\n<p> We first use the <code class=\"literal\">getMockBuilder()</code> method that is provided by the <code class=\"literal\">phpunit\\framework\\TestCase</code> class to set up a mock object for the <code class=\"literal\">Observer</code>. Since we give an array as the second (optional) parameter for the <code class=\"literal\">getMock()</code> method, only the <code class=\"literal\">update()</code> method of the <code class=\"literal\">Observer</code> class is replaced by a mock implementation. </p>\n<p> Because we are interested in verifying that a method is called, and which arguments it is called with, we introduce the <code class=\"literal\">expects()</code> and <code class=\"literal\">with()</code> methods to specify how this interaction should look. </p>\n<div class=\"example\" id=\"test-doubles.mock-objects.examples.SubjectTest.php\">\n<p class=\"title\"><strong>Example 9.11: Testing that a method gets called once and with a specified argument</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass SubjectTest extends TestCase\n{\n    public function testObserversAreUpdated()\n    {\n        // Create a mock for the Observer class,\n        // only mock the update() method.\n        $observer = $this-&gt;getMockBuilder(Observer::class)\n                         -&gt;setMethods(['update'])\n                         -&gt;getMock();\n\n        // Set up the expectation for the update() method\n        // to be called only once and with the string 'something'\n        // as its parameter.\n        $observer-&gt;expects($this-&gt;once())\n                 -&gt;method('update')\n                 -&gt;with($this-&gt;equalTo('something'));\n\n        // Create a Subject object and attach the mocked\n        // Observer object to it.\n        $subject = new Subject('My subject');\n        $subject-&gt;attach($observer);\n\n        // Call the doSomething() method on the $subject object\n        // which we expect to call the mocked Observer object's\n        // update() method with the string 'something'.\n        $subject-&gt;doSomething();\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> The <code class=\"literal\">with()</code> method can take any number of arguments, corresponding to the number of arguments to the method being mocked. You can specify more advanced constraints on the method's arguments than a simple match. </p>\n<div class=\"example\" id=\"test-doubles.mock-objects.examples.SubjectTest2.php\">\n<p class=\"title\"><strong>Example 9.12: Testing that a method gets called with a number of arguments constrained in different ways</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass SubjectTest extends TestCase\n{\n    public function testErrorReported()\n    {\n        // Create a mock for the Observer class, mocking the\n        // reportError() method\n        $observer = $this-&gt;getMockBuilder(Observer::class)\n                         -&gt;setMethods(['reportError'])\n                         -&gt;getMock();\n\n        $observer-&gt;expects($this-&gt;once())\n                 -&gt;method('reportError')\n                 -&gt;with(\n                       $this-&gt;greaterThan(0),\n                       $this-&gt;stringContains('Something'),\n                       $this-&gt;anything()\n                   );\n\n        $subject = new Subject('My subject');\n        $subject-&gt;attach($observer);\n\n        // The doSomethingBad() method should report an error to the observer\n        // via the reportError() method\n        $subject-&gt;doSomethingBad();\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> The <code class=\"literal\">withConsecutive()</code> method can take any number of arrays of arguments, depending on the calls you want to test against. Each array is a list of constraints corresponding to the arguments of the method being mocked, like in <code class=\"literal\">with()</code>. </p>\n<div class=\"example\" id=\"test-doubles.mock-objects.examples.with-consecutive.php\">\n<p class=\"title\"><strong>Example 9.13: Testing that a method gets called two times with specific arguments.</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass FooTest extends TestCase\n{\n    public function testFunctionCalledTwoTimesWithSpecificArguments()\n    {\n        $mock = $this-&gt;getMockBuilder(stdClass::class)\n                     -&gt;setMethods(['set'])\n                     -&gt;getMock();\n\n        $mock-&gt;expects($this-&gt;exactly(2))\n             -&gt;method('set')\n             -&gt;withConsecutive(\n                 [$this-&gt;equalTo('foo'), $this-&gt;greaterThan(0)],\n                 [$this-&gt;equalTo('bar'), $this-&gt;greaterThan(0)]\n             );\n\n        $mock-&gt;set('foo', 21);\n        $mock-&gt;set('bar', 48);\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> The <code class=\"literal\">callback()</code> constraint can be used for more complex argument verification. This constraint takes a PHP callback as its only argument. The PHP callback will receive the argument to be verified as its only argument and should return <code class=\"literal\">true</code> if the argument passes verification and <code class=\"literal\">false</code> otherwise. </p>\n<div class=\"example\" id=\"test-doubles.mock-objects.examples.SubjectTest3.php\">\n<p class=\"title\"><strong>Example 9.14: More complex argument verification</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass SubjectTest extends TestCase\n{\n    public function testErrorReported()\n    {\n        // Create a mock for the Observer class, mocking the\n        // reportError() method\n        $observer = $this-&gt;getMockBuilder(Observer::class)\n                         -&gt;setMethods(['reportError'])\n                         -&gt;getMock();\n\n        $observer-&gt;expects($this-&gt;once())\n                 -&gt;method('reportError')\n                 -&gt;with($this-&gt;greaterThan(0),\n                        $this-&gt;stringContains('Something'),\n                        $this-&gt;callback(function($subject){\n                          return is_callable([$subject, 'getName')] &amp;&amp;\n                                 $subject-&gt;getName() == 'My subject';\n                        }));\n\n        $subject = new Subject('My subject');\n        $subject-&gt;attach($observer);\n\n        // The doSomethingBad() method should report an error to the observer\n        // via the reportError() method\n        $subject-&gt;doSomethingBad();\n    }\n}\n?&gt;</pre></div>\n</div>\n<div class=\"example\" id=\"test-doubles.mock-objects.examples.clone-object-parameters-usecase.php\">\n<p class=\"title\"><strong>Example 9.15: Testing that a method gets called once and with the identical object as was passed</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass FooTest extends TestCase\n{\n    public function testIdenticalObjectPassed()\n    {\n        $expectedObject = new stdClass;\n\n        $mock = $this-&gt;getMockBuilder(stdClass::class)\n                     -&gt;setMethods(['foo'])\n                     -&gt;getMock();\n\n        $mock-&gt;expects($this-&gt;once())\n             -&gt;method('foo')\n             -&gt;with($this-&gt;identicalTo($expectedObject));\n\n        $mock-&gt;foo($expectedObject);\n    }\n}\n?&gt;</pre></div>\n</div>\n<div class=\"example\" id=\"test-doubles.mock-objects.examples.enable-clone-object-parameters.php\">\n<p class=\"title\"><strong>Example 9.16: Create a mock object with cloning parameters enabled</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass FooTest extends TestCase\n{\n    public function testIdenticalObjectPassed()\n    {\n        $cloneArguments = true;\n\n        $mock = $this-&gt;getMockBuilder(stdClass::class)\n                     -&gt;enableArgumentCloning()\n                     -&gt;getMock();\n\n        // now your mock clones parameters so the identicalTo constraint\n        // will fail.\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> <a class=\"xref\" href=\"appendixes.assertions#appendixes.assertions.assertThat.tables.constraints\" title=\"Table A.1. Constraints\">Table A.1</a> shows the constraints that can be applied to method arguments and <a class=\"xref\" href=\"test-doubles#test-doubles.mock-objects.tables.matchers\" title=\"Table 9.1. Matchers\">Table 9.1</a> shows the matchers that are available to specify the number of invocations. </p>\n<div class=\"table\" id=\"test-doubles.mock-objects.tables.matchers\">\n<p class=\"title\"><strong>Table 9.1. Matchers</strong></p>\n<div class=\"table-contents\"><table class=\"table\" summary=\"Matchers\">\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead><tr>\n<th align=\"left\">Matcher</th>\n<th align=\"left\">Meaning</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_MockObject_Matcher_AnyInvokedCount any()</code></td>\n<td align=\"left\">Returns a matcher that matches when the method it is evaluated for is executed zero or more times.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_MockObject_Matcher_InvokedCount never()</code></td>\n<td align=\"left\">Returns a matcher that matches when the method it is evaluated for is never executed.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_MockObject_Matcher_InvokedAtLeastOnce atLeastOnce()</code></td>\n<td align=\"left\">Returns a matcher that matches when the method it is evaluated for is executed at least once.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_MockObject_Matcher_InvokedCount once()</code></td>\n<td align=\"left\">Returns a matcher that matches when the method it is evaluated for is executed exactly once.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_MockObject_Matcher_InvokedCount exactly(int $count)</code></td>\n<td align=\"left\">Returns a matcher that matches when the method it is evaluated for is executed exactly <code class=\"literal\">$count</code> times.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_MockObject_Matcher_InvokedAtIndex at(int $index)</code></td>\n<td align=\"left\">Returns a matcher that matches when the method it is evaluated for is invoked at the given <code class=\"literal\">$index</code>.</td>\n</tr>\n</tbody>\n</table></div>\n</div>\n<div class=\"alert alert-info\"><p> The <code class=\"literal\">$index</code> parameter for the <code class=\"literal\">at()</code> matcher refers to the index, starting at zero, in <span class=\"emphasis\"><em>all method invocations</em></span> for a given mock object. Exercise caution when using this matcher as it can lead to brittle tests which are too closely tied to specific implementation details. </p></div>\n<p id=\"idp1260224\">  As mentioned in the beginning, when the defaults used by the <code class=\"literal\">createMock()</code> method to generate the test double do not match your needs then you can use the <code class=\"literal\">getMockBuilder($type)</code> method to customize the test double generation using a fluent interface. Here is a list of methods provided by the Mock Builder: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p><code class=\"literal\">setMethods(array $methods)</code> can be called on the Mock Builder object to specify the methods that are to be replaced with a configurable test double. The behavior of the other methods is not changed. If you call <code class=\"literal\">setMethods(null)</code>, then no methods will be replaced.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">setConstructorArgs(array $args)</code> can be called to provide a parameter array that is passed to the original class' constructor (which is not replaced with a dummy implementation by default).</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">setMockClassName($name)</code> can be used to specify a class name for the generated test double class.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">disableOriginalConstructor()</code> can be used to disable the call to the original class' constructor.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">disableOriginalClone()</code> can be used to disable the call to the original class' clone constructor.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">disableAutoload()</code> can be used to disable <code class=\"literal\">__autoload()</code> during the generation of the test double class.</p></li>\n</ul></div>\n<h2 class=\"title\" id=\"test-doubles.prophecy\">Prophecy</h2>\n<p> <a class=\"ulink\" href=\"https://github.com/phpspec/prophecy\" target=\"_top\">Prophecy</a> is a \"highly opinionated yet very powerful and flexible PHP object mocking framework. Though initially it was created to fulfil phpspec2 needs, it is flexible enough to be used inside any testing framework out there with minimal effort\". </p>\n<p> PHPUnit has built-in support for using Prophecy to create test doubles. <a class=\"xref\" href=\"test-doubles#test-doubles.prophecy.examples.SubjectTest.php\" title=\"Example 9.17: Testing that a method gets called once and with a specified argument\">Example 9.17</a> shows how the same test shown in <a class=\"xref\" href=\"test-doubles#test-doubles.mock-objects.examples.SubjectTest.php\" title=\"Example 9.11: Testing that a method gets called once and with a specified argument\">Example 9.11</a> can be expressed using Prophecy's philosophy of prophecies and revelations: </p>\n<div class=\"example\" id=\"test-doubles.prophecy.examples.SubjectTest.php\">\n<p class=\"title\"><strong>Example 9.17: Testing that a method gets called once and with a specified argument</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass SubjectTest extends TestCase\n{\n    public function testObserversAreUpdated()\n    {\n        $subject = new Subject('My subject');\n\n        // Create a prophecy for the Observer class.\n        $observer = $this-&gt;prophesize(Observer::class);\n\n        // Set up the expectation for the update() method\n        // to be called only once and with the string 'something'\n        // as its parameter.\n        $observer-&gt;update('something')-&gt;shouldBeCalled();\n\n        // Reveal the prophecy and attach the mock object\n        // to the Subject.\n        $subject-&gt;attach($observer-&gt;reveal());\n\n        // Call the doSomething() method on the $subject object\n        // which we expect to call the mocked Observer object's\n        // update() method with the string 'something'.\n        $subject-&gt;doSomething();\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> Please refer to the <a class=\"ulink\" href=\"https://github.com/phpspec/prophecy#how-to-use-it\" target=\"_top\">documentation</a> for Prophecy for further details on how to create, configure, and use stubs, spies, and mocks using this alternative test double framework. </p>\n<h2 class=\"title\" id=\"test-doubles.mocking-traits-and-abstract-classes\">Mocking Traits and Abstract Classes</h2>\n<p id=\"idp1279072\">  The <code class=\"literal\">getMockForTrait()</code> method returns a mock object that uses a specified trait. All abstract methods of the given trait are mocked. This allows for testing the concrete methods of a trait. </p>\n<div class=\"example\" id=\"test-doubles.mock-objects.examples.TraitClassTest.php\">\n<p class=\"title\"><strong>Example 9.18: Testing the concrete methods of a trait</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\ntrait AbstractTrait\n{\n    public function concreteMethod()\n    {\n        return $this-&gt;abstractMethod();\n    }\n\n    public abstract function abstractMethod();\n}\n\nclass TraitClassTest extends TestCase\n{\n    public function testConcreteMethod()\n    {\n        $mock = $this-&gt;getMockForTrait(AbstractTrait::class);\n\n        $mock-&gt;expects($this-&gt;any())\n             -&gt;method('abstractMethod')\n             -&gt;will($this-&gt;returnValue(true));\n\n        $this-&gt;assertTrue($mock-&gt;concreteMethod());\n    }\n}\n?&gt;</pre></div>\n</div>\n<p id=\"idp1282912\">  The <code class=\"literal\">getMockForAbstractClass()</code> method returns a mock object for an abstract class. All abstract methods of the given abstract class are mocked. This allows for testing the concrete methods of an abstract class. </p>\n<div class=\"example\" id=\"test-doubles.mock-objects.examples.AbstractClassTest.php\">\n<p class=\"title\"><strong>Example 9.19: Testing the concrete methods of an abstract class</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nabstract class AbstractClass\n{\n    public function concreteMethod()\n    {\n        return $this-&gt;abstractMethod();\n    }\n\n    public abstract function abstractMethod();\n}\n\nclass AbstractClassTest extends TestCase\n{\n    public function testConcreteMethod()\n    {\n        $stub = $this-&gt;getMockForAbstractClass(AbstractClass::class);\n\n        $stub-&gt;expects($this-&gt;any())\n             -&gt;method('abstractMethod')\n             -&gt;will($this-&gt;returnValue(true));\n\n        $this-&gt;assertTrue($stub-&gt;concreteMethod());\n    }\n}\n?&gt;</pre></div>\n</div>\n<h2 class=\"title\" id=\"test-doubles.stubbing-and-mocking-web-services\">Stubbing and Mocking Web Services</h2>\n<p id=\"idp1288064\">  When your application interacts with a web service you want to test it without actually interacting with the web service. To make the stubbing and mocking of web services easy, the <code class=\"literal\">getMockFromWsdl()</code> can be used just like <code class=\"literal\">getMock()</code> (see above). The only difference is that <code class=\"literal\">getMockFromWsdl()</code> returns a stub or mock based on a web service description in WSDL and <code class=\"literal\">getMock()</code> returns a stub or mock based on a PHP class or interface. </p>\n<p> <a class=\"xref\" href=\"test-doubles#test-doubles.stubbing-and-mocking-web-services.examples.GoogleTest.php\" title=\"Example 9.20: Stubbing a web service\">Example 9.20</a> shows how <code class=\"literal\">getMockFromWsdl()</code> can be used to stub, for example, the web service described in <code class=\"filename\">GoogleSearch.wsdl</code>. </p>\n<div class=\"example\" id=\"test-doubles.stubbing-and-mocking-web-services.examples.GoogleTest.php\">\n<p class=\"title\"><strong>Example 9.20: Stubbing a web service</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass GoogleTest extends TestCase\n{\n    public function testSearch()\n    {\n        $googleSearch = $this-&gt;getMockFromWsdl(\n          'GoogleSearch.wsdl', 'GoogleSearch'\n        );\n\n        $directoryCategory = new stdClass;\n        $directoryCategory-&gt;fullViewableName = '';\n        $directoryCategory-&gt;specialEncoding = '';\n\n        $element = new stdClass;\n        $element-&gt;summary = '';\n        $element-&gt;URL = 'https://phpunit.de/';\n        $element-&gt;snippet = '...';\n        $element-&gt;title = '&lt;b&gt;PHPUnit&lt;/b&gt;';\n        $element-&gt;cachedSize = '11k';\n        $element-&gt;relatedInformationPresent = true;\n        $element-&gt;hostName = 'phpunit.de';\n        $element-&gt;directoryCategory = $directoryCategory;\n        $element-&gt;directoryTitle = '';\n\n        $result = new stdClass;\n        $result-&gt;documentFiltering = false;\n        $result-&gt;searchComments = '';\n        $result-&gt;estimatedTotalResultsCount = 3.9000;\n        $result-&gt;estimateIsExact = false;\n        $result-&gt;resultElements = [$element];\n        $result-&gt;searchQuery = 'PHPUnit';\n        $result-&gt;startIndex = 1;\n        $result-&gt;endIndex = 1;\n        $result-&gt;searchTips = '';\n        $result-&gt;directoryCategories = [];\n        $result-&gt;searchTime = 0.248822;\n\n        $googleSearch-&gt;expects($this-&gt;any())\n                     -&gt;method('doGoogleSearch')\n                     -&gt;will($this-&gt;returnValue($result));\n\n        /**\n         * $googleSearch-&gt;doGoogleSearch() will now return a stubbed result and\n         * the web service's doGoogleSearch() method will not be invoked.\n         */\n        $this-&gt;assertEquals(\n          $result,\n          $googleSearch-&gt;doGoogleSearch(\n            '00000000000000000000000000000000',\n            'PHPUnit',\n            0,\n            1,\n            false,\n            '',\n            false,\n            '',\n            '',\n            ''\n          )\n        );\n    }\n}\n?&gt;</pre></div>\n</div>\n<h2 class=\"title\" id=\"test-doubles.mocking-the-filesystem\">Mocking the Filesystem</h2>\n<p> <a class=\"ulink\" href=\"https://github.com/mikey179/vfsStream\" target=\"_top\">vfsStream</a> is a <a class=\"ulink\" href=\"http://www.php.net/streams\" target=\"_top\">stream wrapper</a> for a <a class=\"ulink\" href=\"http://en.wikipedia.org/wiki/Virtual_file_system\" target=\"_top\">virtual filesystem</a> that may be helpful in unit tests to mock the real filesystem. </p>\n<p> Simply add a dependency on <code class=\"literal\">mikey179/vfsStream</code> to your project's <code class=\"literal\">composer.json</code> file if you use <a class=\"ulink\" href=\"https://getcomposer.org/\" target=\"_top\">Composer</a> to manage the dependencies of your project. Here is a minimal example of a <code class=\"literal\">composer.json</code> file that just defines a development-time dependency on PHPUnit 4.6 and vfsStream: </p>\n<pre class=\"programlisting\" data-language=\"php\">{\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"~4.6\",\n        \"mikey179/vfsStream\": \"~1\"\n    }\n}</pre>\n<p> <a class=\"xref\" href=\"test-doubles#test-doubles.mocking-the-filesystem.examples.Example.php\" title=\"Example 9.21: A class that interacts with the filesystem\">Example 9.21</a> shows a class that interacts with the filesystem. </p>\n<div class=\"example\" id=\"test-doubles.mocking-the-filesystem.examples.Example.php\">\n<p class=\"title\"><strong>Example 9.21: A class that interacts with the filesystem</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass Example\n{\n    protected $id;\n    protected $directory;\n\n    public function __construct($id)\n    {\n        $this-&gt;id = $id;\n    }\n\n    public function setDirectory($directory)\n    {\n        $this-&gt;directory = $directory . DIRECTORY_SEPARATOR . $this-&gt;id;\n\n        if (!file_exists($this-&gt;directory)) {\n            mkdir($this-&gt;directory, 0700, true);\n        }\n    }\n}?&gt;</pre></div>\n</div>\n<p> Without a virtual filesystem such as vfsStream we cannot test the <code class=\"literal\">setDirectory()</code> method in isolation from external influence (see <a class=\"xref\" href=\"test-doubles#test-doubles.mocking-the-filesystem.examples.ExampleTest.php\" title=\"Example 9.22: Testing a class that interacts with the filesystem\">Example 9.22</a>). </p>\n<div class=\"example\" id=\"test-doubles.mocking-the-filesystem.examples.ExampleTest.php\">\n<p class=\"title\"><strong>Example 9.22: Testing a class that interacts with the filesystem</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    protected function setUp()\n    {\n        if (file_exists(dirname(__FILE__) . '/id')) {\n            rmdir(dirname(__FILE__) . '/id');\n        }\n    }\n\n    public function testDirectoryIsCreated()\n    {\n        $example = new Example('id');\n        $this-&gt;assertFalse(file_exists(dirname(__FILE__) . '/id'));\n\n        $example-&gt;setDirectory(dirname(__FILE__));\n        $this-&gt;assertTrue(file_exists(dirname(__FILE__) . '/id'));\n    }\n\n    protected function tearDown()\n    {\n        if (file_exists(dirname(__FILE__) . '/id')) {\n            rmdir(dirname(__FILE__) . '/id');\n        }\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> The approach above has several drawbacks: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p>As with any external resource, there might be intermittent problems with the filesystem. This makes tests interacting with it flaky.</p></li>\n<li class=\"listitem\"><p>In the <code class=\"literal\">setUp()</code> and <code class=\"literal\">tearDown()</code> methods we have to ensure that the directory does not exist before and after the test.</p></li>\n<li class=\"listitem\"><p>When the test execution terminates before the <code class=\"literal\">tearDown()</code> method is invoked the directory will stay in the filesystem.</p></li>\n</ul></div>\n<p> <a class=\"xref\" href=\"test-doubles#test-doubles.mocking-the-filesystem.examples.ExampleTest2.php\" title=\"Example 9.23: Mocking the filesystem in a test for a class that interacts with the filesystem\">Example 9.23</a> shows how vfsStream can be used to mock the filesystem in a test for a class that interacts with the filesystem. </p>\n<div class=\"example\" id=\"test-doubles.mocking-the-filesystem.examples.ExampleTest2.php\">\n<p class=\"title\"><strong>Example 9.23: Mocking the filesystem in a test for a class that interacts with the filesystem</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    public function setUp()\n    {\n        vfsStreamWrapper::register();\n        vfsStreamWrapper::setRoot(new vfsStreamDirectory('exampleDir'));\n    }\n\n    public function testDirectoryIsCreated()\n    {\n        $example = new Example('id');\n        $this-&gt;assertFalse(vfsStreamWrapper::getRoot()-&gt;hasChild('id'));\n\n        $example-&gt;setDirectory(vfsStream::url('exampleDir'));\n        $this-&gt;assertTrue(vfsStreamWrapper::getRoot()-&gt;hasChild('id'));\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> This has several advantages: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p>The test itself is more concise.</p></li>\n<li class=\"listitem\"><p>vfsStream gives the test developer full control over what the filesystem environment looks like to the tested code.</p></li>\n<li class=\"listitem\"><p>Since the filesystem operations do not operate on the real filesystem anymore, cleanup operations in a <code class=\"literal\">tearDown()</code> method are no longer required.</p></li>\n</ul></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/test-doubles.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/test-doubles.html</a>\n  </p>\n</div>\n","database":"<h1 class=\"title\" id=\"database\">Database Testing</h1>\n<p> Many beginner and intermediate unit testing examples in any programming language suggest that it is perfectly easy to test your application's logic with simple tests. For database-centric applications this is far away from the reality. Start using Wordpress, TYPO3 or Symfony with Doctrine or Propel, for example, and you will easily experience considerable problems with PHPUnit: just because the database is so tightly coupled to these libraries. </p>\n<div class=\"alert alert-info\"><p> Make sure you have the PHP extension <code class=\"literal\">pdo</code> and database specific extensions such as <code class=\"literal\">pdo_mysql</code> installed. Otherwise the examples shown below will not work. </p></div>\n<p> You probably know this scenario from your daily work and projects, where you want to put your fresh or experienced PHPUnit skills to work and get stuck by one of the following problems: </p>\n<div class=\"orderedlist\"><ol class=\"orderedlist\" type=\"1\">\n<li class=\"listitem\"><p> The method you want to test executes a rather large JOIN operation and uses the data to calculate some important results. </p></li>\n<li class=\"listitem\"><p> Your business logic performs a mix of SELECT, INSERT, UPDATE and DELETE statements. </p></li>\n<li class=\"listitem\"><p> You need to setup test data in (possibly much) more than two tables to get reasonable initial data for the methods you want to test. </p></li>\n</ol></div>\n<p> The DbUnit extension considerably simplifies the setup of a database for testing purposes and allows you to verify the contents of a database after performing a series of operations. </p>\n<h2 class=\"title\" id=\"database.supported-vendors-for-database-testing\">Supported Vendors for Database Testing</h2>\n<p> DbUnit currently supports MySQL, PostgreSQL, Oracle and SQLite. Through <a class=\"ulink\" href=\"http://framework.zend.com\" target=\"_top\">Zend Framework</a> or <a class=\"ulink\" href=\"http://www.doctrine-project.org\" target=\"_top\">Doctrine 2</a> integrations it has access to other database systems such as IBM DB2 or Microsoft SQL Server. </p>\n<h2 class=\"title\" id=\"database.difficulties-in-database-testing\">Difficulties in Database Testing</h2>\n<p> There is a good reason why all the examples on unit testing do not include interactions with the database: these kind of tests are both complex to setup and maintain. While testing against your database you need to take care of the following variables: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p> The database schema and tables </p></li>\n<li class=\"listitem\"><p> Inserting the rows required for the test into these tables </p></li>\n<li class=\"listitem\"><p> Verifying the state of the database after your test has run </p></li>\n<li class=\"listitem\"><p> Cleanup the database for each new test </p></li>\n</ul></div>\n<p> Because many database APIs such as PDO, MySQLi or OCI8 are cumbersome to use and verbose in writing doing these steps manually is an absolute nightmare. </p>\n<p> Test code should be as short and precise as possible for several reasons: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p> You do not want to modify considerable amount of test code for little changes in your production code. </p></li>\n<li class=\"listitem\"><p> You want to be able to read and understand the test code easily, even months after writing it. </p></li>\n</ul></div>\n<p> Additionally you have to realize that the database is essentially a global input variable to your code. Two tests in your test suite could run against the same database, possibly reusing data multiple times. Failures in one test can easily affect the result of the following tests making your testing experience very difficult. The previously mentioned cleanup step is of major importance to solve the <span class=\"quote\">“<span class=\"quote\">database is a global input</span>”</span> problem. </p>\n<p> DbUnit helps to simplify all these problems with database testing in an elegant way. </p>\n<p> What PHPUnit cannot help you with is the fact that database tests are very slow compared to tests not using the database. Depending on how large the interactions with your database are your tests could run a considerable amount of time. However, if you keep the amount of data used for each test small and try to test as much code using non-database tests you can easily get away in under a minute even for large test suites. </p>\n<p> The <a class=\"ulink\" href=\"http://www.doctrine-project.org\" target=\"_top\">Doctrine 2 project</a>'s test suite, for example, currently has a test suite of about 1000 tests where nearly half of them accesses the database and still runs in 15 seconds against a MySQL database on a standard desktop computer. </p>\n<h2 class=\"title\" id=\"database.the-four-stages-of-a-database-test\">The four stages of a database test</h2>\n<p> In his book on xUnit Test Patterns Gerard Meszaros lists the four stages of a unit-test: </p>\n<div class=\"orderedlist\"><ol class=\"orderedlist\" type=\"1\">\n<li class=\"listitem\"><p> Set up fixture </p></li>\n<li class=\"listitem\"><p> Exercise System Under Test </p></li>\n<li class=\"listitem\"><p> Verify outcome </p></li>\n<li class=\"listitem\"><p> Teardown </p></li>\n</ol></div>\n<div class=\"blockquote\"><blockquote class=\"blockquote\">\n<p> <span class=\"strong\"><strong>What is a Fixture?</strong></span> </p>\n<p> A fixture describes the initial state your application and database are in when you execute a test. </p>\n</blockquote></div>\n<p> Testing the database requires you to hook into at least the setup and teardown to clean-up and write the required fixture data into your tables. However, the database extension has good reason to revert the four stages in a database test to resemble the following workflow that is executed for each single test: </p>\n<h3 class=\"title\" id=\"database.clean-up-database\">1. Clean-Up Database</h3>\n<p> Since there is always a first test that runs against the database you do not know exactly if there is already data in the tables. PHPUnit will execute a TRUNCATE against all the tables you specified to reset their status to empty. </p>\n<h3 class=\"title\" id=\"database.set-up-fixture\">2. Set up fixture</h3>\n<p> PHPUnit will then iterate over all the fixture rows specified and insert them into their respective tables. </p>\n<h3 class=\"title\" id=\"database.run-test-verify-outcome-and-teardown\">3–5. Run Test, Verify outcome and Teardown</h3>\n<p> After the database is reset and loaded with its initial state the actual test is executed by PHPUnit. This part of the test code does not require awareness of the Database Extension at all, you can go on and test whatever you like with your code. </p>\n<p> In your test use a special assertion called <code class=\"literal\">assertDataSetsEqual()</code> for verification purposes, however, this is entirely optional. This feature will be explained in the section <span class=\"quote\">“<span class=\"quote\">Database Assertions</span>”</span>. </p>\n<h2 class=\"title\" id=\"database.configuration-of-a-phpunit-database-testcase\">Configuration of a PHPUnit Database TestCase</h2>\n<p> Usually when using PHPUnit your testcases would extend the <code class=\"literal\">phpunit\\framework\\TestCase</code> class in the following way: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass MyTest extends TestCase\n{\n    public function testCalculate()\n    {\n        $this-&gt;assertEquals(2, 1 + 1);\n    }\n}\n?&gt;</pre>\n<p> If you want to test code that works with the Database Extension the setup is a bit more complex and you have to extend a different abstract TestCase requiring you to implement two abstract methods <code class=\"literal\">getConnection()</code> and <code class=\"literal\">getDataSet()</code>: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass MyGuestbookTest extends PHPUnit_Extensions_Database_TestCase\n{\n    /**\n     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection\n     */\n    public function getConnection()\n    {\n        $pdo = new PDO('sqlite::memory:');\n        return $this-&gt;createDefaultDBConnection($pdo, ':memory:');\n    }\n\n    /**\n     * @return PHPUnit_Extensions_Database_DataSet_IDataSet\n     */\n    public function getDataSet()\n    {\n        return $this-&gt;createFlatXMLDataSet(dirname(__FILE__).'/_files/guestbook-seed.xml');\n    }\n}\n?&gt;</pre>\n<h3 class=\"title\" id=\"database.implementing-getconnection\">Implementing getConnection()</h3>\n<p> To allow the clean-up and fixture loading functionalities to work the PHPUnit Database Extension requires access to a database connection abstracted across vendors through the PDO library. It is important to note that your application does not need to be based on PDO to use PHPUnit's database extension, the connection is merely used for the clean-up and fixture setup. </p>\n<p> In the previous example we create an in-memory Sqlite connection and pass it to the <code class=\"literal\">createDefaultDBConnection</code> method which wraps the PDO instance and the second parameter (the database-name) in a very simple abstraction layer for database connections of the type <code class=\"literal\">PHPUnit_Extensions_Database_DB_IDatabaseConnection</code>. </p>\n<p> The section <span class=\"quote\">“<span class=\"quote\">Using the Database Connection</span>”</span> explains the API of this interface and how you can make the best use of it. </p>\n<h3 class=\"title\" id=\"database.implementing-getdataset\">Implementing getDataSet()</h3>\n<p> The <code class=\"literal\">getDataSet()</code> method defines how the initial state of the database should look before each test is executed. The state of a database is abstracted through the concepts DataSet and DataTable both being represented by the interfaces <code class=\"literal\">PHPUnit_Extensions_Database_DataSet_IDataSet</code> and <code class=\"literal\">PHPUnit_Extensions_Database_DataSet_IDataTable</code>. The next section will describe in detail how these concepts work and what the benefits are for using them in database testing. </p>\n<p> For the implementation we only need to know that the <code class=\"literal\">getDataSet()</code> method is called once during <code class=\"literal\">setUp()</code> to retrieve the fixture data-set and insert it into the database. In the example we are using a factory method <code class=\"literal\">createFlatXMLDataSet($filename)</code> that represents a data-set through an XML representation. </p>\n<h3 class=\"title\" id=\"database.what-about-the-database-schema-ddl\">What about the Database Schema (DDL)?</h3>\n<p> PHPUnit assumes that the database schema with all its tables, triggers, sequences and views is created before a test is run. This means you as developer have to make sure that the database is correctly setup before running the suite. </p>\n<p> There are several means to achieve this pre-condition to database testing. </p>\n<div class=\"orderedlist\"><ol class=\"orderedlist\" type=\"1\">\n<li class=\"listitem\"><p> If you are using a persistent database (not Sqlite Memory) you can easily setup the database once with tools such as phpMyAdmin for MySQL and re-use the database for every test-run. </p></li>\n<li class=\"listitem\"><p> If you are using libraries such as <a class=\"ulink\" href=\"http://www.doctrine-project.org\" target=\"_top\">Doctrine 2</a> or <a class=\"ulink\" href=\"http://www.propelorm.org/\" target=\"_top\">Propel</a> you can use their APIs to create the database schema you need once before you run the tests. You can utilize <a class=\"ulink\" href=\"textui\" target=\"_top\">PHPUnit's Bootstrap and Configuration</a> capabilities to execute this code whenever your tests are run. </p></li>\n</ol></div>\n<h3 class=\"title\" id=\"database.tip-use-your-own-abstract-database-testcase\">Tip: Use your own Abstract Database TestCase</h3>\n<p> From the previous implementation example you can easily see that <code class=\"literal\">getConnection()</code> method is pretty static and could be re-used in different database test-cases. Additionally to keep performance of your tests good and database overhead low you can refactor the code a little bit to get a generic abstract test case for your application, which still allows you to specify a different data-fixture for each test case: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nabstract class MyApp_Tests_DatabaseTestCase extends PHPUnit_Extensions_Database_TestCase\n{\n    // only instantiate pdo once for test clean-up/fixture load\n    static private $pdo = null;\n\n    // only instantiate PHPUnit_Extensions_Database_DB_IDatabaseConnection once per test\n    private $conn = null;\n\n    final public function getConnection()\n    {\n        if ($this-&gt;conn === null) {\n            if (self::$pdo == null) {\n                self::$pdo = new PDO('sqlite::memory:');\n            }\n            $this-&gt;conn = $this-&gt;createDefaultDBConnection(self::$pdo, ':memory:');\n        }\n\n        return $this-&gt;conn;\n    }\n}\n?&gt;</pre>\n<p> This has the database connection hardcoded in the PDO connection though. PHPUnit has another awesome feature that could make this testcase even more generic. If you use the <a class=\"ulink\" href=\"appendixes.configuration#appendixes.configuration.php-ini-constants-variables\" target=\"_top\">XML Configuration</a> you could make the database connection configurable per test-run. First let's create a <span class=\"quote\">“<span class=\"quote\">phpunit.xml</span>”</span> file in our tests/ directory of the application that looks like: </p>\n<pre class=\"screen\">\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;phpunit&gt;\n    &lt;php&gt;\n        &lt;var name=\"DB_DSN\" value=\"mysql:dbname=myguestbook;host=localhost\" /&gt;\n        &lt;var name=\"DB_USER\" value=\"user\" /&gt;\n        &lt;var name=\"DB_PASSWD\" value=\"passwd\" /&gt;\n        &lt;var name=\"DB_DBNAME\" value=\"myguestbook\" /&gt;\n    &lt;/php&gt;\n&lt;/phpunit&gt;\n</pre>\n<p> We can now modify our test-case to look like: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nabstract class Generic_Tests_DatabaseTestCase extends PHPUnit_Extensions_Database_TestCase\n{\n    // only instantiate pdo once for test clean-up/fixture load\n    static private $pdo = null;\n\n    // only instantiate PHPUnit_Extensions_Database_DB_IDatabaseConnection once per test\n    private $conn = null;\n\n    final public function getConnection()\n    {\n        if ($this-&gt;conn === null) {\n            if (self::$pdo == null) {\n                self::$pdo = new PDO( $GLOBALS['DB_DSN'], $GLOBALS['DB_USER'], $GLOBALS['DB_PASSWD'] );\n            }\n            $this-&gt;conn = $this-&gt;createDefaultDBConnection(self::$pdo, $GLOBALS['DB_DBNAME']);\n        }\n\n        return $this-&gt;conn;\n    }\n}\n?&gt;</pre>\n<p> We can now run the database test suite using different configurations from the command-line interface: </p>\n<pre class=\"screen\">user@desktop&gt; phpunit --configuration developer-a.xml MyTests/\nuser@desktop&gt; phpunit --configuration developer-b.xml MyTests/</pre>\n<p> The possibility to run the database tests against different database targets easily is very important if you are developing on the development machine. If several developers run the database tests against the same database connection you can easily experience test-failures because of race-conditions. </p>\n<h2 class=\"title\" id=\"database.understanding-datasets-and-datatables\">Understanding DataSets and DataTables</h2>\n<p> A central concept of PHPUnit's Database Extension are DataSets and DataTables. You should try to understand this simple concept to master database testing with PHPUnit. The DataSet and DataTable are an abstraction layer around your database tables, rows and columns. A simple API hides the underlying database contents in an object structure, which can also be implemented by other non-database sources. </p>\n<p> This abstraction is necessary to compare the actual contents of a database against the expected contents. Expectations can be represented as XML, YAML, CSV files or PHP array for example. The DataSet and DataTable interfaces enable the comparison of these conceptually different sources, emulating relational database storage in a semantically similar approach. </p>\n<p> A workflow for database assertions in your tests then consists of three simple steps: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p> Specify one or more tables in your database by table name (actual dataset) </p></li>\n<li class=\"listitem\"><p> Specify the expected dataset in your preferred format (YAML, XML, ..) </p></li>\n<li class=\"listitem\"><p> Assert that both dataset representations equal each other. </p></li>\n</ul></div>\n<p> Assertions are not the only use-case for the DataSet and DataTable in PHPUnit's Database Extension. As shown in the previous section they also describe the initial contents of a database. You are forced to define a fixture dataset by the Database TestCase, which is then used to: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p> Delete all the rows from the tables specified in the dataset. </p></li>\n<li class=\"listitem\"><p> Write all the rows in the data-tables into the database. </p></li>\n</ul></div>\n<h3 class=\"title\" id=\"database.available-implementations\">Available Implementations</h3>\n<p> There are three different types of datasets/datatables: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p> File-Based DataSets and DataTables </p></li>\n<li class=\"listitem\"><p> Query-Based DataSet and DataTable </p></li>\n<li class=\"listitem\"><p> Filter and Composition DataSets and DataTables </p></li>\n</ul></div>\n<p> The file-based datasets and tables are generally used for the initial fixture and to describe the expected state of the database. </p>\n<h4 class=\"title\" id=\"database.flat-xml-dataset\">Flat XML DataSet</h4>\n<p> The most common dataset is called Flat XML. It is a very simple xml format where a tag inside the root node <code class=\"literal\">&lt;dataset&gt;</code> represents exactly one row in the database. The tags name equals the table to insert the row into and an attribute represents the column. An example for a simple guestbook application could look like this: </p>\n<pre class=\"screen\">\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;dataset&gt;\n    &lt;guestbook id=\"1\" content=\"Hello buddy!\" user=\"joe\" created=\"2010-04-24 17:15:23\" /&gt;\n    &lt;guestbook id=\"2\" content=\"I like it!\" user=\"nancy\" created=\"2010-04-26 12:14:20\" /&gt;\n&lt;/dataset&gt;\n</pre>\n<p> This is obviously easy to write. Here <code class=\"literal\">&lt;guestbook&gt;</code> is the table name where two rows are inserted into each with four columns <span class=\"quote\">“<span class=\"quote\">id</span>”</span>, <span class=\"quote\">“<span class=\"quote\">content</span>”</span>, <span class=\"quote\">“<span class=\"quote\">user</span>”</span> and <span class=\"quote\">“<span class=\"quote\">created</span>”</span> with their respective values. </p>\n<p> However, this simplicity comes at a cost. </p>\n<p> From the previous example it isn't obvious how you would specify an empty table. You can insert a tag with no attributes with the name of the empty table. A flat xml file for an empty guestbook table would then look like: </p>\n<pre class=\"screen\">\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;dataset&gt;\n    &lt;guestbook /&gt;\n&lt;/dataset&gt;\n</pre>\n<p> The handling of NULL values with the flat xml dataset is tedious. A NULL value is different than an empty string value in almost any database (Oracle being an exception), something that is difficult to describe in the flat xml format. You can represent a NULL's value by omitting the attribute from the row specification. If our guestbook would allow anonymous entries represented by a NULL value in the user column, a hypothetical state of the guestbook table could look like: </p>\n<pre class=\"screen\">\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;dataset&gt;\n    &lt;guestbook id=\"1\" content=\"Hello buddy!\" user=\"joe\" created=\"2010-04-24 17:15:23\" /&gt;\n    &lt;guestbook id=\"2\" content=\"I like it!\" created=\"2010-04-26 12:14:20\" /&gt;\n&lt;/dataset&gt;\n</pre>\n<p> In this case the second entry is posted anonymously. However, this leads to a serious problem with column recognition. During dataset equality assertions each dataset has to specify what columns a table holds. If an attribute is NULL for all the rows of a data-table, how would the Database Extension know that the column should be part of the table? </p>\n<p> The flat xml dataset makes a crucial assumption now, defining that the attributes on the first defined row of a table define the columns of this table. In the previous example this would mean <span class=\"quote\">“<span class=\"quote\">id</span>”</span>, <span class=\"quote\">“<span class=\"quote\">content</span>”</span>, <span class=\"quote\">“<span class=\"quote\">user</span>”</span> and <span class=\"quote\">“<span class=\"quote\">created</span>”</span> are columns of the guestbook table. For the second row where <span class=\"quote\">“<span class=\"quote\">user</span>”</span> is not defined a NULL would be inserted into the database. </p>\n<p> When the first guestbook entry is deleted from the dataset only <span class=\"quote\">“<span class=\"quote\">id</span>”</span>, <span class=\"quote\">“<span class=\"quote\">content</span>”</span> and <span class=\"quote\">“<span class=\"quote\">created</span>”</span> would be columns of the guestbook table, since <span class=\"quote\">“<span class=\"quote\">user</span>”</span> is not specified. </p>\n<p> To use the Flat XML dataset effectively when NULL values are relevant the first row of each table must not contain any NULL value and only successive rows are allowed to omit attributes. This can be awkward, since the order of the rows is a relevant factor for database assertions. </p>\n<p> In turn, if you specify only a subset of the table columns in the Flat XML dataset all the omitted values are set to their default values. This will lead to errors if one of the omitted columns is defined as <span class=\"quote\">“<span class=\"quote\">NOT NULL DEFAULT NULL</span>”</span>. </p>\n<p> In conclusion I can only advise using the Flat XML datasets if you do not need NULL values. </p>\n<p> You can create a flat xml dataset instance from within your Database TestCase by calling the <code class=\"literal\">createFlatXmlDataSet($filename)</code> method: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass MyTestCase extends PHPUnit_Extensions_Database_TestCase\n{\n    public function getDataSet()\n    {\n        return $this-&gt;createFlatXmlDataSet('myFlatXmlFixture.xml');\n    }\n}\n?&gt;</pre>\n<h4 class=\"title\" id=\"database.xml-dataset\">XML DataSet</h4>\n<p> There is another more structured XML dataset, which is a bit more verbose to write but avoids the NULL problems of the Flat XML dataset. Inside the root node <code class=\"literal\">&lt;dataset&gt;</code> you can specify <code class=\"literal\">&lt;table&gt;</code>, <code class=\"literal\">&lt;column&gt;</code>, <code class=\"literal\">&lt;row&gt;</code>, <code class=\"literal\">&lt;value&gt;</code> and <code class=\"literal\">&lt;null /&gt;</code> tags. An equivalent dataset to the previously defined Guestbook Flat XML looks like: </p>\n<pre class=\"screen\">\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;dataset&gt;\n    &lt;table name=\"guestbook\"&gt;\n        &lt;column&gt;id&lt;/column&gt;\n        &lt;column&gt;content&lt;/column&gt;\n        &lt;column&gt;user&lt;/column&gt;\n        &lt;column&gt;created&lt;/column&gt;\n        &lt;row&gt;\n            &lt;value&gt;1&lt;/value&gt;\n            &lt;value&gt;Hello buddy!&lt;/value&gt;\n            &lt;value&gt;joe&lt;/value&gt;\n            &lt;value&gt;2010-04-24 17:15:23&lt;/value&gt;\n        &lt;/row&gt;\n        &lt;row&gt;\n            &lt;value&gt;2&lt;/value&gt;\n            &lt;value&gt;I like it!&lt;/value&gt;\n            &lt;null /&gt;\n            &lt;value&gt;2010-04-26 12:14:20&lt;/value&gt;\n        &lt;/row&gt;\n    &lt;/table&gt;\n&lt;/dataset&gt;\n</pre>\n<p> Any defined <code class=\"literal\">&lt;table&gt;</code> has a name and requires a definition of all the columns with their names. It can contain zero or any positive number of nested <code class=\"literal\">&lt;row&gt;</code> elements. Defining no <code class=\"literal\">&lt;row&gt;</code> element means the table is empty. The <code class=\"literal\">&lt;value&gt;</code> and <code class=\"literal\">&lt;null /&gt;</code> tags have to be specified in the order of the previously given <code class=\"literal\">&lt;column&gt;</code> elements. The <code class=\"literal\">&lt;null /&gt;</code> tag obviously means that the value is NULL. </p>\n<p> You can create a xml dataset instance from within your Database TestCase by calling the <code class=\"literal\">createXmlDataSet($filename)</code> method: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass MyTestCase extends PHPUnit_Extensions_Database_TestCase\n{\n    public function getDataSet()\n    {\n        return $this-&gt;createXMLDataSet('myXmlFixture.xml');\n    }\n}\n?&gt;</pre>\n<h4 class=\"title\" id=\"database.mysql-xml-dataset\">MySQL XML DataSet</h4>\n<p> This new XML format is specific to the <a class=\"ulink\" href=\"http://www.mysql.com\" target=\"_top\">MySQL database server</a>. Support for it was added in PHPUnit 3.5. Files in this format can be generated using the <a class=\"ulink\" href=\"http://dev.mysql.com/doc/refman/5.0/en/mysqldump.html\" target=\"_top\"><code class=\"literal\">mysqldump</code></a> utility. Unlike CSV datasets, which <code class=\"literal\">mysqldump</code> also supports, a single file in this XML format can contain data for multiple tables. You can create a file in this format by invoking <code class=\"literal\">mysqldump</code> like so: </p>\n<pre class=\"screen\">mysqldump --xml -t -u [username] --password=[password] [database] &gt; /path/to/file.xml</pre>\n<p> This file can be used in your Database TestCase by calling the <code class=\"literal\">createMySQLXMLDataSet($filename)</code> method: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass MyTestCase extends PHPUnit_Extensions_Database_TestCase\n{\n    public function getDataSet()\n    {\n        return $this-&gt;createMySQLXMLDataSet('/path/to/file.xml');\n    }\n}\n?&gt;</pre>\n<h4 class=\"title\" id=\"database.yaml-dataset\">YAML DataSet</h4>\n<p> Alternatively, you can use YAML dataset for the guestbook example: </p>\n<pre class=\"screen\">\nguestbook:\n  -\n    id: 1\n    content: \"Hello buddy!\"\n    user: \"joe\"\n    created: 2010-04-24 17:15:23\n  -\n    id: 2\n    content: \"I like it!\"\n    user:\n    created: 2010-04-26 12:14:20\n</pre>\n<p> This is simple, convient AND it solves the NULL issue that the similar Flat XML dataset has. A NULL in YAML is just the column name without no value specified. An empty string is specified as <code class=\"literal\">column1: \"\"</code>. </p>\n<p> The YAML Dataset has no factory method on the Database TestCase currently, so you have to instantiate it manually: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass YamlGuestbookTest extends PHPUnit_Extensions_Database_TestCase\n{\n    protected function getDataSet()\n    {\n        return new PHPUnit_Extensions_Database_DataSet_YamlDataSet(\n            dirname(__FILE__).\"/_files/guestbook.yml\"\n        );\n    }\n}\n?&gt;</pre>\n<h4 class=\"title\" id=\"database.csv-dataset\">CSV DataSet</h4>\n<p> Another file-based dataset is based on CSV files. Each table of the dataset is represented as a single CSV file. For our guestbook example we would define a guestbook-table.csv file: </p>\n<pre class=\"screen\">\nid,content,user,created\n1,\"Hello buddy!\",\"joe\",\"2010-04-24 17:15:23\"\n2,\"I like it!\",\"nancy\",\"2010-04-26 12:14:20\"\n</pre>\n<p> While this is very convenient for editing with Excel or OpenOffice, you cannot specify NULL values with the CSV dataset. An empty column will lead to the database default empty value being inserted into the column. </p>\n<p> You can create a CSV DataSet by calling: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass CsvGuestbookTest extends PHPUnit_Extensions_Database_TestCase\n{\n    protected function getDataSet()\n    {\n        $dataSet = new PHPUnit_Extensions_Database_DataSet_CsvDataSet();\n        $dataSet-&gt;addTable('guestbook', dirname(__FILE__).\"/_files/guestbook.csv\");\n        return $dataSet;\n    }\n}\n?&gt;</pre>\n<h4 class=\"title\" id=\"database.array-dataset\">Array DataSet</h4>\n<p> There is no Array based DataSet in PHPUnit's Database Extension (yet), but we can implement our own easily. Our guestbook example should look like: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass ArrayGuestbookTest extends PHPUnit_Extensions_Database_TestCase\n{\n    protected function getDataSet()\n    {\n        return new MyApp_DbUnit_ArrayDataSet(\n            [\n                'guestbook' =&gt; [\n                    [\n                        'id' =&gt; 1,\n                        'content' =&gt; 'Hello buddy!',\n                        'user' =&gt; 'joe',\n                        'created' =&gt; '2010-04-24 17:15:23'\n                    ],\n                    [\n                        'id' =&gt; 2,\n                        'content' =&gt; 'I like it!',\n                        'user' =&gt; null,\n                        'created' =&gt; '2010-04-26 12:14:20'\n                    ],\n                ],\n            ]\n        );\n    }\n}\n?&gt;</pre>\n<p> A PHP DataSet has obvious advantages over all the other file-based datasets: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p> PHP Arrays can obviously handle <code class=\"literal\">NULL</code> values. </p></li>\n<li class=\"listitem\"><p> You won't need additional files for assertions and can specify them directly in the TestCase. </p></li>\n</ul></div>\n<p> For this dataset like the Flat XML, CSV and YAML DataSets the keys of the first specified row define the table's column names, in the previous case this would be <span class=\"quote\">“<span class=\"quote\">id</span>”</span>, <span class=\"quote\">“<span class=\"quote\">content</span>”</span>, <span class=\"quote\">“<span class=\"quote\">user</span>”</span> and <span class=\"quote\">“<span class=\"quote\">created</span>”</span>. </p>\n<p> The implementation for this Array DataSet is simple and straightforward: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass MyApp_DbUnit_ArrayDataSet extends PHPUnit_Extensions_Database_DataSet_AbstractDataSet\n{\n    /**\n     * @var array\n     */\n    protected $tables = [];\n\n    /**\n     * @param array $data\n     */\n    public function __construct(array $data)\n    {\n        foreach ($data AS $tableName =&gt; $rows) {\n            $columns = [];\n            if (isset($rows[0])) {\n                $columns = array_keys($rows[0]);\n            }\n\n            $metaData = new PHPUnit_Extensions_Database_DataSet_DefaultTableMetaData($tableName, $columns);\n            $table = new PHPUnit_Extensions_Database_DataSet_DefaultTable($metaData);\n\n            foreach ($rows AS $row) {\n                $table-&gt;addRow($row);\n            }\n            $this-&gt;tables[$tableName] = $table;\n        }\n    }\n\n    protected function createIterator($reverse = false)\n    {\n        return new PHPUnit_Extensions_Database_DataSet_DefaultTableIterator($this-&gt;tables, $reverse);\n    }\n\n    public function getTable($tableName)\n    {\n        if (!isset($this-&gt;tables[$tableName])) {\n            throw new InvalidArgumentException(\"$tableName is not a table in the current database.\");\n        }\n\n        return $this-&gt;tables[$tableName];\n    }\n}\n?&gt;</pre>\n<h4 class=\"title\" id=\"database.query-sql-dataset\">Query (SQL) DataSet</h4>\n<p> For database assertions you do not only need the file-based datasets but also a Query/SQL based Dataset that contains the actual contents of the database. This is where the Query DataSet shines: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\n$ds = new PHPUnit_Extensions_Database_DataSet_QueryDataSet($this-&gt;getConnection());\n$ds-&gt;addTable('guestbook');\n?&gt;</pre>\n<p> Adding a table just by name is an implicit way to define the data-table with the following query: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\n$ds = new PHPUnit_Extensions_Database_DataSet_QueryDataSet($this-&gt;getConnection());\n$ds-&gt;addTable('guestbook', 'SELECT * FROM guestbook');\n?&gt;</pre>\n<p> You can make use of this by specifying arbitrary queries for your tables, for example restricting rows, column or adding <code class=\"literal\">ORDER BY</code> clauses: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\n$ds = new PHPUnit_Extensions_Database_DataSet_QueryDataSet($this-&gt;getConnection());\n$ds-&gt;addTable('guestbook', 'SELECT id, content FROM guestbook ORDER BY created DESC');\n?&gt;</pre>\n<p> The section on Database Assertions will show some more details on how to make use of the Query DataSet. </p>\n<h4 class=\"title\" id=\"database.database-db-dataset\">Database (DB) Dataset</h4>\n<p> Accessing the Test Connection you can automatically create a DataSet that consists of all the tables with their content in the database specified as second parameter to the Connections Factory method. </p>\n<p> You can either create a dataset for the complete database as shown in <code class=\"literal\">testGuestbook()</code>, or restrict it to a set of specified table names with a whitelist as shown in <code class=\"literal\">testFilteredGuestbook()</code> method. </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass MySqlGuestbookTest extends PHPUnit_Extensions_Database_TestCase\n{\n    /**\n     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection\n     */\n    public function getConnection()\n    {\n        $database = 'my_database';\n        $user = 'my_user';\n        $password = 'my_password';\n        $pdo = new PDO('mysql:...', $user, $password);\n        return $this-&gt;createDefaultDBConnection($pdo, $database);\n    }\n\n    public function testGuestbook()\n    {\n        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();\n        // ...\n    }\n\n    public function testFilteredGuestbook()\n    {\n        $tableNames = ['guestbook'];\n        $dataSet = $this-&gt;getConnection()-&gt;createDataSet($tableNames);\n        // ...\n    }\n}\n?&gt;</pre>\n<h4 class=\"title\" id=\"database.replacement-dataset\">Replacement DataSet</h4>\n<p> I have been talking about NULL problems with the Flat XML and CSV DataSet, but there is a slightly complicated workaround to get both types of datasets working with NULLs. </p>\n<p> The Replacement DataSet is a decorator for an existing dataset and allows you to replace values in any column of the dataset by another replacement value. To get our guestbook example working with NULL values we specify the file like: </p>\n<pre class=\"screen\">\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;dataset&gt;\n    &lt;guestbook id=\"1\" content=\"Hello buddy!\" user=\"joe\" created=\"2010-04-24 17:15:23\" /&gt;\n    &lt;guestbook id=\"2\" content=\"I like it!\" user=\"##NULL##\" created=\"2010-04-26 12:14:20\" /&gt;\n&lt;/dataset&gt;\n</pre>\n<p> We then wrap the Flat XML DataSet into a Replacement DataSet: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass ReplacementTest extends PHPUnit_Extensions_Database_TestCase\n{\n    public function getDataSet()\n    {\n        $ds = $this-&gt;createFlatXmlDataSet('myFlatXmlFixture.xml');\n        $rds = new PHPUnit_Extensions_Database_DataSet_ReplacementDataSet($ds);\n        $rds-&gt;addFullReplacement('##NULL##', null);\n        return $rds;\n    }\n}\n?&gt;</pre>\n<h4 class=\"title\" id=\"database.dataset-filter\">DataSet Filter</h4>\n<p> If you have a large fixture file you can use the DataSet Filter for white- and blacklisting of tables and columns that should be contained in a sub-dataset. This is especially handy in combination with the DB DataSet to filter the columns of the datasets. </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass DataSetFilterTest extends PHPUnit_Extensions_Database_TestCase\n{\n    public function testIncludeFilteredGuestbook()\n    {\n        $tableNames = ['guestbook'];\n        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();\n\n        $filterDataSet = new PHPUnit_Extensions_Database_DataSet_DataSetFilter($dataSet);\n        $filterDataSet-&gt;addIncludeTables(['guestbook']);\n        $filterDataSet-&gt;setIncludeColumnsForTable('guestbook', ['id', 'content']);\n        // ..\n    }\n\n    public function testExcludeFilteredGuestbook()\n    {\n        $tableNames = ['guestbook'];\n        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();\n\n        $filterDataSet = new PHPUnit_Extensions_Database_DataSet_DataSetFilter($dataSet);\n        $filterDataSet-&gt;addExcludeTables(['foo', 'bar', 'baz']); // only keep the guestbook table!\n        $filterDataSet-&gt;setExcludeColumnsForTable('guestbook', ['user', 'created']);\n        // ..\n    }\n}\n?&gt;</pre>\n<div class=\"blockquote\"><blockquote class=\"blockquote\"><p> <span class=\"strong\"><strong>NOTE</strong></span> You cannot use both exclude and include column filtering on the same table, only on different ones. Plus it is only possible to either white- or blacklist tables, not both of them. </p></blockquote></div>\n<h4 class=\"title\" id=\"database.composite-dataset\">Composite DataSet</h4>\n<p> The composite DataSet is very useful for aggregating several already existing datasets into a single dataset. When several datasets contain the same table the rows are appended in the specified order. For example if we have two datasets <span class=\"emphasis\"><em>fixture1.xml</em></span>: </p>\n<pre class=\"screen\">\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;dataset&gt;\n    &lt;guestbook id=\"1\" content=\"Hello buddy!\" user=\"joe\" created=\"2010-04-24 17:15:23\" /&gt;\n&lt;/dataset&gt;\n</pre>\n<p> and <span class=\"emphasis\"><em>fixture2.xml</em></span>: </p>\n<pre class=\"screen\">\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;dataset&gt;\n    &lt;guestbook id=\"2\" content=\"I like it!\" user=\"##NULL##\" created=\"2010-04-26 12:14:20\" /&gt;\n&lt;/dataset&gt;\n</pre>\n<p> Using the Composite DataSet we can aggregate both fixture files: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass CompositeTest extends PHPUnit_Extensions_Database_TestCase\n{\n    public function getDataSet()\n    {\n        $ds1 = $this-&gt;createFlatXmlDataSet('fixture1.xml');\n        $ds2 = $this-&gt;createFlatXmlDataSet('fixture2.xml');\n\n        $compositeDs = new PHPUnit_Extensions_Database_DataSet_CompositeDataSet();\n        $compositeDs-&gt;addDataSet($ds1);\n        $compositeDs-&gt;addDataSet($ds2);\n\n        return $compositeDs;\n    }\n}\n?&gt;</pre>\n<h3 class=\"title\" id=\"database.beware-of-foreign-keys\">Beware of Foreign Keys</h3>\n<p> During Fixture SetUp PHPUnit's Database Extension inserts the rows into the database in the order they are specified in your fixture. If your database schema uses foreign keys this means you have to specify the tables in an order that does not cause foreign key constraints to fail. </p>\n<h3 class=\"title\" id=\"database.implementing-your-own-datasetsdatatables\">Implementing your own DataSets/DataTables</h3>\n<p> To understand the internals of DataSets and DataTables, lets have a look at the interface of a DataSet. You can skip this part if you do not plan to implement your own DataSet or DataTable. </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\ninterface PHPUnit_Extensions_Database_DataSet_IDataSet extends IteratorAggregate\n{\n    public function getTableNames();\n    public function getTableMetaData($tableName);\n    public function getTable($tableName);\n    public function assertEquals(PHPUnit_Extensions_Database_DataSet_IDataSet $other);\n\n    public function getReverseIterator();\n}\n?&gt;</pre>\n<p> The public interface is used internally by the <code class=\"literal\">assertDataSetsEqual()</code> assertion on the Database TestCase to check for dataset quality. From the <code class=\"literal\">IteratorAggregate</code> interface the IDataSet inherits the <code class=\"literal\">getIterator()</code> method to iterate over all tables of the dataset. The reverse iterator allows PHPUnit to truncate tables opposite the order they were created to satisfy foreign key constraints. </p>\n<p> Depending on the implementation different approaches are taken to add table instances to a dataset. For example, tables are added internally during construction from the source file in all file-based datasets such as <code class=\"literal\">YamlDataSet</code>, <code class=\"literal\">XmlDataSet</code> or <code class=\"literal\">FlatXmlDataSet</code>. </p>\n<p> A table is also represented by the following interface: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\ninterface PHPUnit_Extensions_Database_DataSet_ITable\n{\n    public function getTableMetaData();\n    public function getRowCount();\n    public function getValue($row, $column);\n    public function getRow($row);\n    public function assertEquals(PHPUnit_Extensions_Database_DataSet_ITable $other);\n}\n?&gt;</pre>\n<p> Except the <code class=\"literal\">getTableMetaData()</code> method it is pretty self-explainatory. The used methods are all required for the different assertions of the Database Extension that are explained in the next chapter. The <code class=\"literal\">getTableMetaData()</code> method has to return an implementation of the <code class=\"literal\">PHPUnit_Extensions_Database_DataSet_ITableMetaData</code> interface, which describes the structure of the table. It holds information on: </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p> The table name </p></li>\n<li class=\"listitem\"><p> An array of column-names of the table, ordered by their appearance in the result-set. </p></li>\n<li class=\"listitem\"><p> An array of the primary-key columns. </p></li>\n</ul></div>\n<p> This interface also has an assertion that checks if two instances of Table Metadata equal each other, which is used by the data-set equality assertion. </p>\n<h2 class=\"title\" id=\"database.the-connection-api\">The Connection API</h2>\n<p> There are three interesting methods on the Connection interface which has to be returned from the <code class=\"literal\">getConnection()</code> method on the Database TestCase: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\ninterface PHPUnit_Extensions_Database_DB_IDatabaseConnection\n{\n    public function createDataSet(Array $tableNames = NULL);\n    public function createQueryTable($resultName, $sql);\n    public function getRowCount($tableName, $whereClause = NULL);\n\n    // ...\n}\n?&gt;</pre>\n<div class=\"orderedlist\"><ol class=\"orderedlist\" type=\"1\">\n<li class=\"listitem\">\n<p> The <code class=\"literal\">createDataSet()</code> method creates a Database (DB) DataSet as described in the DataSet implementations section. </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass ConnectionTest extends PHPUnit_Extensions_Database_TestCase\n{\n    public function testCreateDataSet()\n    {\n        $tableNames = ['guestbook'];\n        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();\n    }\n}\n?&gt;</pre>\n</li>\n<li class=\"listitem\">\n<p> The <code class=\"literal\">createQueryTable()</code> method can be used to create instances of a QueryTable, give them a result name and SQL query. This is a handy method when it comes to result/table assertions as will be shown in the next section on the Database Assertions API. </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass ConnectionTest extends PHPUnit_Extensions_Database_TestCase\n{\n    public function testCreateQueryTable()\n    {\n        $tableNames = ['guestbook'];\n        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable('guestbook', 'SELECT * FROM guestbook');\n    }\n}\n?&gt;</pre>\n</li>\n<li class=\"listitem\">\n<p> The <code class=\"literal\">getRowCount()</code> method is a convienent way to access the number of rows in a table, optionally filtered by an additional where clause. This can be used with a simple equality assertion: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass ConnectionTest extends PHPUnit_Extensions_Database_TestCase\n{\n    public function testGetRowCount()\n    {\n        $this-&gt;assertEquals(2, $this-&gt;getConnection()-&gt;getRowCount('guestbook'));\n    }\n}\n?&gt;</pre>\n</li>\n</ol></div>\n<h2 class=\"title\" id=\"database.database-assertions-api\">Database Assertions API</h2>\n<p> For a testing tool the Database Extension surely provides some assertions that you can use to verify the current state of the database, tables and the row-count of tables. This section describes this functionality in detail: </p>\n<h3 class=\"title\" id=\"database.asserting-the-row-count-of-a-table\">Asserting the Row-Count of a Table</h3>\n<p> It is often helpful to check if a table contains a specific amount of rows. You can easily achieve this without additional glue code using the Connection API. Say we wanted to check that after insertion of a row into our guestbook we not only have the two initial entries that have accompanied us in all the previous examples, but a third one: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass GuestbookTest extends PHPUnit_Extensions_Database_TestCase\n{\n    public function testAddEntry()\n    {\n        $this-&gt;assertEquals(2, $this-&gt;getConnection()-&gt;getRowCount('guestbook'), \"Pre-Condition\");\n\n        $guestbook = new Guestbook();\n        $guestbook-&gt;addEntry(\"suzy\", \"Hello world!\");\n\n        $this-&gt;assertEquals(3, $this-&gt;getConnection()-&gt;getRowCount('guestbook'), \"Inserting failed\");\n    }\n}\n?&gt;</pre>\n<h3 class=\"title\" id=\"database.asserting-the-state-of-a-table\">Asserting the State of a Table</h3>\n<p> The previous assertion is helpful, but we surely want to check the actual contents of the table to verify that all the values were written into the correct columns. This can be achieved by a table assertion. </p>\n<p> For this we would define a Query Table instance which derives its content from a table name and SQL query and compare it to a File/Array Based Data Set: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass GuestbookTest extends PHPUnit_Extensions_Database_TestCase\n{\n    public function testAddEntry()\n    {\n        $guestbook = new Guestbook();\n        $guestbook-&gt;addEntry(\"suzy\", \"Hello world!\");\n\n        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable(\n            'guestbook', 'SELECT * FROM guestbook'\n        );\n        $expectedTable = $this-&gt;createFlatXmlDataSet(\"expectedBook.xml\")\n                              -&gt;getTable(\"guestbook\");\n        $this-&gt;assertTablesEqual($expectedTable, $queryTable);\n    }\n}\n?&gt;</pre>\n<p> Now we have to write the <span class=\"emphasis\"><em>expectedBook.xml</em></span> Flat XML file for this assertion: </p>\n<pre class=\"screen\">\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;dataset&gt;\n    &lt;guestbook id=\"1\" content=\"Hello buddy!\" user=\"joe\" created=\"2010-04-24 17:15:23\" /&gt;\n    &lt;guestbook id=\"2\" content=\"I like it!\" user=\"nancy\" created=\"2010-04-26 12:14:20\" /&gt;\n    &lt;guestbook id=\"3\" content=\"Hello world!\" user=\"suzy\" created=\"2010-05-01 21:47:08\" /&gt;\n&lt;/dataset&gt;\n</pre>\n<p> This assertion would only pass on exactly one second of the universe though, on <span class=\"emphasis\"><em>2010–05–01 21:47:08</em></span>. Dates pose a special problem to database testing and we can circumvent the failure by omitting the <span class=\"quote\">“<span class=\"quote\">created</span>”</span> column from the assertion. </p>\n<p> The adjusted <span class=\"emphasis\"><em>expectedBook.xml</em></span> Flat XML file would probably have to look like the following to make the assertion pass: </p>\n<pre class=\"screen\">\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;dataset&gt;\n    &lt;guestbook id=\"1\" content=\"Hello buddy!\" user=\"joe\" /&gt;\n    &lt;guestbook id=\"2\" content=\"I like it!\" user=\"nancy\" /&gt;\n    &lt;guestbook id=\"3\" content=\"Hello world!\" user=\"suzy\" /&gt;\n&lt;/dataset&gt;\n</pre>\n<p> We have to fix up the Query Table call: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\n$queryTable = $this-&gt;getConnection()-&gt;createQueryTable(\n    'guestbook', 'SELECT id, content, user FROM guestbook'\n);\n?&gt;</pre>\n<h3 class=\"title\" id=\"database.asserting-the-result-of-a-query\">Asserting the Result of a Query</h3>\n<p> You can also assert the result of complex queries with the Query Table approach, just specify a result name with a query and compare it to a dataset: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass ComplexQueryTest extends PHPUnit_Extensions_Database_TestCase\n{\n    public function testComplexQuery()\n    {\n        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable(\n            'myComplexQuery', 'SELECT complexQuery...'\n        );\n        $expectedTable = $this-&gt;createFlatXmlDataSet(\"complexQueryAssertion.xml\")\n                              -&gt;getTable(\"myComplexQuery\");\n        $this-&gt;assertTablesEqual($expectedTable, $queryTable);\n    }\n}\n?&gt;</pre>\n<h3 class=\"title\" id=\"database.asserting-the-state-of-multiple-tables\">Asserting the State of Multiple Tables</h3>\n<p> For sure you can assert the state of multiple tables at once and compare a query dataset against a file based dataset. There are two different ways for DataSet assertions. </p>\n<div class=\"orderedlist\"><ol class=\"orderedlist\" type=\"1\">\n<li class=\"listitem\">\n<p> You can use the Database (DB) DataSet from the Connection and compare it to a File-Based DataSet. </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass DataSetAssertionsTest extends PHPUnit_Extensions_Database_TestCase\n{\n    public function testCreateDataSetAssertion()\n    {\n        $dataSet = $this-&gt;getConnection()-&gt;createDataSet(['guestbook']);\n        $expectedDataSet = $this-&gt;createFlatXmlDataSet('guestbook.xml');\n        $this-&gt;assertDataSetsEqual($expectedDataSet, $dataSet);\n    }\n}\n?&gt;</pre>\n</li>\n<li class=\"listitem\">\n<p> You can construct the DataSet on your own: </p>\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nclass DataSetAssertionsTest extends PHPUnit_Extensions_Database_TestCase\n{\n    public function testManualDataSetAssertion()\n    {\n        $dataSet = new PHPUnit_Extensions_Database_DataSet_QueryDataSet();\n        $dataSet-&gt;addTable('guestbook', 'SELECT id, content, user FROM guestbook'); // additional tables\n        $expectedDataSet = $this-&gt;createFlatXmlDataSet('guestbook.xml');\n\n        $this-&gt;assertDataSetsEqual($expectedDataSet, $dataSet);\n    }\n}\n?&gt;</pre>\n</li>\n</ol></div>\n<h2 class=\"title\" id=\"database.frequently-asked-questions\">Frequently Asked Questions</h2>\n<h3 class=\"title\" id=\"database.will-phpunit-re-create-the-database-schema-for-each-test\">Will PHPUnit (re-)create the database schema for each test?</h3>\n<p> No, PHPUnit requires all database objects to be available when the suite is started. The Database, tables, sequences, triggers and views have to be created before you run the test suite. </p>\n<p> <a class=\"ulink\" href=\"http://www.doctrine-project.org\" target=\"_top\">Doctrine 2</a> or <a class=\"ulink\" href=\"http://www.ezcomponents.org\" target=\"_top\">eZ Components</a> have powerful tools that allow you to create the database schema from pre-defined datastructures. However, these have to be hooked into the PHPUnit extension to allow an automatic database re-creation before the complete test-suite is run. </p>\n<p> Since each test completely cleans the database you are not even required to re-create the database for each test-run. A permanently available database works perfectly. </p>\n<h3 class=\"title\" id=\"database.am-i-required-to-use-pdo-in-my-application-for-the-database-extension-to-work\">Am I required to use PDO in my application for the Database Extension to work?</h3>\n<p> No, PDO is only required for the fixture clean- and set-up and for assertions. You can use whatever database abstraction you want inside your own code. </p>\n<h3 class=\"title\" id=\"database.what-can-i-do-when-i-get-a-too-much-connections-error\">What can I do, when I get a “Too much Connections” Error?</h3>\n<p> If you do not cache the PDO instance that is created from the TestCase <code class=\"literal\">getConnection()</code> method the number of connections to the database is increasing by one or more with each database test. With default configuration MySql only allows 100 concurrent connections other vendors also have maximum connection limits. </p>\n<p> The SubSection <span class=\"quote\">“<span class=\"quote\">Use your own Abstract Database TestCase</span>”</span> shows how you can prevent this error from happening by using a single cached PDO instance in all your tests. </p>\n<h3 class=\"title\" id=\"database.how-to-handle-null-with-flat-xml-csv-datasets\">How to handle NULL with Flat XML / CSV Datasets?</h3>\n<p> Do not do this. Instead, you should use either the XML or the YAML DataSets. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/database.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/database.html</a>\n  </p>\n</div>\n","appendixes.assertions":"<h1 class=\"title\" id=\"appendixes.assertions\">Assertions</h1>\n<p> This appendix lists the various assertion methods that are available. </p>\n<h2 class=\"title\" id=\"appendixes.assertions.assertArrayHasKey\">assertArrayHasKey()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertArrayHasKey(mixed $key, array $array[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$array</code> does not have the <code class=\"literal\">$key</code>.</p>\n<p><code class=\"literal\">assertArrayNotHasKey()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertArrayHasKey.example\">\n<p class=\"title\"><strong>Example A.1: Usage of assertArrayHasKey()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ArrayHasKeyTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertArrayHasKey('foo', ['bar' =&gt; 'baz']);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ArrayHasKeyTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ArrayHasKeyTest::testFailure\nFailed asserting that an array has the key 'foo'.\n\n/home/sb/ArrayHasKeyTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertClassHasAttribute\">assertClassHasAttribute()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertClassHasAttribute(string $attributeName, string $className[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$className::attributeName</code> does not exist.</p>\n<p><code class=\"literal\">assertClassNotHasAttribute()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertClassHasAttribute.example\">\n<p class=\"title\"><strong>Example A.2: Usage of assertClassHasAttribute()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ClassHasAttributeTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertClassHasAttribute('foo', stdClass::class);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ClassHasAttributeTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) ClassHasAttributeTest::testFailure\nFailed asserting that class \"stdClass\" has attribute \"foo\".\n\n/home/sb/ClassHasAttributeTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertArraySubset\">assertArraySubset()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertArraySubset(array $subset, array $array[, bool $strict = '', string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$array</code> does not contains the <code class=\"literal\">$subset</code>.</p>\n<p><code class=\"literal\">$strict</code> is a flag used to compare the identity of objects within arrays.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertArraySubset.example\">\n<p class=\"title\"><strong>Example A.3: Usage of assertArraySubset()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ArraySubsetTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertArraySubset(['config' =&gt; ['key-a', 'key-b']], ['config' =&gt; ['key-a']]);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ArrayHasKeyTest\nPHPUnit 4.4.0 by Sebastian Bergmann.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) Epilog\\EpilogTest::testNoFollowOption\nFailed asserting that an array has the subset Array &amp;0 (\n    'config' =&gt; Array &amp;1 (\n        0 =&gt; 'key-a'\n        1 =&gt; 'key-b'\n    )\n).\n\n/home/sb/ArraySubsetTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertClassHasStaticAttribute\">assertClassHasStaticAttribute()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertClassHasStaticAttribute(string $attributeName, string $className[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$className::attributeName</code> does not exist.</p>\n<p><code class=\"literal\">assertClassNotHasStaticAttribute()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertClassHasStaticAttribute.example\">\n<p class=\"title\"><strong>Example A.4: Usage of assertClassHasStaticAttribute()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ClassHasStaticAttributeTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertClassHasStaticAttribute('foo', stdClass::class);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ClassHasStaticAttributeTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) ClassHasStaticAttributeTest::testFailure\nFailed asserting that class \"stdClass\" has static attribute \"foo\".\n\n/home/sb/ClassHasStaticAttributeTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertContains\">assertContains()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertContains(mixed $needle, Iterator|array $haystack[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$needle</code> is not an element of <code class=\"literal\">$haystack</code>.</p>\n<p><code class=\"literal\">assertNotContains()</code> is the inverse of this assertion and takes the same arguments.</p>\n<p><code class=\"literal\">assertAttributeContains()</code> and <code class=\"literal\">assertAttributeNotContains()</code> are convenience wrappers that use a <code class=\"literal\">public</code>, <code class=\"literal\">protected</code>, or <code class=\"literal\">private</code> attribute of a class or object as the haystack.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertContains.example\">\n<p class=\"title\"><strong>Example A.5: Usage of assertContains()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ContainsTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertContains(4, [1, 2, 3]);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ContainsTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ContainsTest::testFailure\nFailed asserting that an array contains 4.\n\n/home/sb/ContainsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<pre class=\"programlisting\" data-language=\"php\">assertContains(string $needle, string $haystack[, string $message = '', boolean $ignoreCase = false])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$needle</code> is not a substring of <code class=\"literal\">$haystack</code>.</p>\n<p>If <code class=\"literal\">$ignoreCase</code> is <code class=\"literal\">true</code>, the test will be case insensitive.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertContains.example2\">\n<p class=\"title\"><strong>Example A.6: Usage of assertContains()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ContainsTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertContains('baz', 'foobar');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ContainsTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ContainsTest::testFailure\nFailed asserting that 'foobar' contains \"baz\".\n\n/home/sb/ContainsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<div class=\"example\" id=\"appendixes.assertions.assertContains.example3\">\n<p class=\"title\"><strong>Example A.7: Usage of assertContains() with $ignoreCase</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ContainsTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertContains('foo', 'FooBar');\n    }\n\n    public function testOK()\n    {\n        $this-&gt;assertContains('foo', 'FooBar', '', true);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ContainsTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF.\n\nTime: 0 seconds, Memory: 2.75Mb\n\nThere was 1 failure:\n\n1) ContainsTest::testFailure\nFailed asserting that 'FooBar' contains \"foo\".\n\n/home/sb/ContainsTest.php:6\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertContainsOnly\">assertContainsOnly()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertContainsOnly(string $type, Iterator|array $haystack[, boolean $isNativeType = null, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$haystack</code> does not contain only variables of type <code class=\"literal\">$type</code>.</p>\n<p><code class=\"literal\">$isNativeType</code> is a flag used to indicate whether <code class=\"literal\">$type</code> is a native PHP type or not.</p>\n<p><code class=\"literal\">assertNotContainsOnly()</code> is the inverse of this assertion and takes the same arguments.</p>\n<p><code class=\"literal\">assertAttributeContainsOnly()</code> and <code class=\"literal\">assertAttributeNotContainsOnly()</code> are convenience wrappers that use a <code class=\"literal\">public</code>, <code class=\"literal\">protected</code>, or <code class=\"literal\">private</code> attribute of a class or object as the haystack.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertContainsOnly.example\">\n<p class=\"title\"><strong>Example A.8: Usage of assertContainsOnly()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ContainsOnlyTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertContainsOnly('string', ['1', '2', 3]);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ContainsOnlyTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ContainsOnlyTest::testFailure\nFailed asserting that Array (\n    0 =&gt; '1'\n    1 =&gt; '2'\n    2 =&gt; 3\n) contains only values of type \"string\".\n\n/home/sb/ContainsOnlyTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertContainsOnlyInstancesOf\">assertContainsOnlyInstancesOf()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertContainsOnlyInstancesOf(string $classname, Traversable|array $haystack[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$haystack</code> does not contain only instances of class <code class=\"literal\">$classname</code>.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertContainsOnlyInstancesOf.example\">\n<p class=\"title\"><strong>Example A.9: Usage of assertContainsOnlyInstancesOf()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ContainsOnlyInstancesOfTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertContainsOnlyInstancesOf(\n            Foo::class,\n            [new Foo, new Bar, new Foo]\n        );\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ContainsOnlyInstancesOfTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ContainsOnlyInstancesOfTest::testFailure\nFailed asserting that Array ([0]=&gt; Bar Object(...)) is an instance of class \"Foo\".\n\n/home/sb/ContainsOnlyInstancesOfTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertCount\">assertCount()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertCount($expectedCount, $haystack[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the number of elements in <code class=\"literal\">$haystack</code> is not <code class=\"literal\">$expectedCount</code>.</p>\n<p><code class=\"literal\">assertNotCount()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertCount.example\">\n<p class=\"title\"><strong>Example A.10: Usage of assertCount()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass CountTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertCount(0, ['foo']);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit CountTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) CountTest::testFailure\nFailed asserting that actual size 1 matches expected size 0.\n\n/home/sb/CountTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertEmpty\">assertEmpty()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertEmpty(mixed $actual[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$actual</code> is not empty.</p>\n<p><code class=\"literal\">assertNotEmpty()</code> is the inverse of this assertion and takes the same arguments.</p>\n<p><code class=\"literal\">assertAttributeEmpty()</code> and <code class=\"literal\">assertAttributeNotEmpty()</code> are convenience wrappers that can be applied to a <code class=\"literal\">public</code>, <code class=\"literal\">protected</code>, or <code class=\"literal\">private</code> attribute of a class or object.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertEmpty.example\">\n<p class=\"title\"><strong>Example A.11: Usage of assertEmpty()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EmptyTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertEmpty(['foo']);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit EmptyTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) EmptyTest::testFailure\nFailed asserting that an array is empty.\n\n/home/sb/EmptyTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertEqualXMLStructure\">assertEqualXMLStructure()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement[, boolean $checkAttributes = false, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the XML Structure of the DOMElement in <code class=\"literal\">$actualElement</code> is not equal to the XML structure of the DOMElement in <code class=\"literal\">$expectedElement</code>.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertEqualXMLStructure.example\">\n<p class=\"title\"><strong>Example A.12: Usage of assertEqualXMLStructure()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualXMLStructureTest extends TestCase\n{\n    public function testFailureWithDifferentNodeNames()\n    {\n        $expected = new DOMElement('foo');\n        $actual = new DOMElement('bar');\n\n        $this-&gt;assertEqualXMLStructure($expected, $actual);\n    }\n\n    public function testFailureWithDifferentNodeAttributes()\n    {\n        $expected = new DOMDocument;\n        $expected-&gt;loadXML('&lt;foo bar=\"true\" /&gt;');\n\n        $actual = new DOMDocument;\n        $actual-&gt;loadXML('&lt;foo/&gt;');\n\n        $this-&gt;assertEqualXMLStructure(\n          $expected-&gt;firstChild, $actual-&gt;firstChild, true\n        );\n    }\n\n    public function testFailureWithDifferentChildrenCount()\n    {\n        $expected = new DOMDocument;\n        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');\n\n        $actual = new DOMDocument;\n        $actual-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;');\n\n        $this-&gt;assertEqualXMLStructure(\n          $expected-&gt;firstChild, $actual-&gt;firstChild\n        );\n    }\n\n    public function testFailureWithDifferentChildren()\n    {\n        $expected = new DOMDocument;\n        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');\n\n        $actual = new DOMDocument;\n        $actual-&gt;loadXML('&lt;foo&gt;&lt;baz/&gt;&lt;baz/&gt;&lt;baz/&gt;&lt;/foo&gt;');\n\n        $this-&gt;assertEqualXMLStructure(\n          $expected-&gt;firstChild, $actual-&gt;firstChild\n        );\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit EqualXMLStructureTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nFFFF\n\nTime: 0 seconds, Memory: 5.75Mb\n\nThere were 4 failures:\n\n1) EqualXMLStructureTest::testFailureWithDifferentNodeNames\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'foo'\n+'bar'\n\n/home/sb/EqualXMLStructureTest.php:9\n\n2) EqualXMLStructureTest::testFailureWithDifferentNodeAttributes\nNumber of attributes on node \"foo\" does not match\nFailed asserting that 0 matches expected 1.\n\n/home/sb/EqualXMLStructureTest.php:22\n\n3) EqualXMLStructureTest::testFailureWithDifferentChildrenCount\nNumber of child nodes of \"foo\" differs\nFailed asserting that 1 matches expected 3.\n\n/home/sb/EqualXMLStructureTest.php:35\n\n4) EqualXMLStructureTest::testFailureWithDifferentChildren\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'bar'\n+'baz'\n\n/home/sb/EqualXMLStructureTest.php:48\n\nFAILURES!\nTests: 4, Assertions: 8, Failures: 4.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertEquals\">assertEquals()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertEquals(mixed $expected, mixed $actual[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the two variables <code class=\"literal\">$expected</code> and <code class=\"literal\">$actual</code> are not equal.</p>\n<p><code class=\"literal\">assertNotEquals()</code> is the inverse of this assertion and takes the same arguments.</p>\n<p><code class=\"literal\">assertAttributeEquals()</code> and <code class=\"literal\">assertAttributeNotEquals()</code> are convenience wrappers that use a <code class=\"literal\">public</code>, <code class=\"literal\">protected</code>, or <code class=\"literal\">private</code> attribute of a class or object as the actual value.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertEquals.example\">\n<p class=\"title\"><strong>Example A.13: Usage of assertEquals()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualsTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertEquals(1, 0);\n    }\n\n    public function testFailure2()\n    {\n        $this-&gt;assertEquals('bar', 'baz');\n    }\n\n    public function testFailure3()\n    {\n        $this-&gt;assertEquals(\"foo\\nbar\\nbaz\\n\", \"foo\\nbah\\nbaz\\n\");\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit EqualsTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nFFF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere were 3 failures:\n\n1) EqualsTest::testFailure\nFailed asserting that 0 matches expected 1.\n\n/home/sb/EqualsTest.php:6\n\n2) EqualsTest::testFailure2\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'bar'\n+'baz'\n\n/home/sb/EqualsTest.php:11\n\n3) EqualsTest::testFailure3\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n 'foo\n-bar\n+bah\n baz\n '\n\n/home/sb/EqualsTest.php:16\n\nFAILURES!\nTests: 3, Assertions: 3, Failures: 3.</pre>\n</div>\n</div>\n<p>More specialized comparisons are used for specific argument types for <code class=\"literal\">$expected</code> and <code class=\"literal\">$actual</code>, see below.</p>\n<pre class=\"programlisting\" data-language=\"php\">assertEquals(float $expected, float $actual[, string $message = '', float $delta = 0])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the two floats <code class=\"literal\">$expected</code> and <code class=\"literal\">$actual</code> are not within <code class=\"literal\">$delta</code> of each other.</p>\n<p>Please read \"<a class=\"ulink\" href=\"http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html\" target=\"_top\">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a>\" to understand why <code class=\"literal\">$delta</code> is neccessary.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertEquals.example2\">\n<p class=\"title\"><strong>Example A.14: Usage of assertEquals() with floats</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualsTest extends TestCase\n{\n    public function testSuccess()\n    {\n        $this-&gt;assertEquals(1.0, 1.1, '', 0.2);\n    }\n\n    public function testFailure()\n    {\n        $this-&gt;assertEquals(1.0, 1.1);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit EqualsTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\n.F\n\nTime: 0 seconds, Memory: 5.75Mb\n\nThere was 1 failure:\n\n1) EqualsTest::testFailure\nFailed asserting that 1.1 matches expected 1.0.\n\n/home/sb/EqualsTest.php:11\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1.</pre>\n</div>\n</div>\n<pre class=\"programlisting\" data-language=\"php\">assertEquals(DOMDocument $expected, DOMDocument $actual[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the uncommented canonical form of the XML documents represented by the two DOMDocument objects <code class=\"literal\">$expected</code> and <code class=\"literal\">$actual</code> are not equal.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertEquals.example3\">\n<p class=\"title\"><strong>Example A.15: Usage of assertEquals() with DOMDocument objects</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualsTest extends TestCase\n{\n    public function testFailure()\n    {\n        $expected = new DOMDocument;\n        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;');\n\n        $actual = new DOMDocument;\n        $actual-&gt;loadXML('&lt;bar&gt;&lt;foo/&gt;&lt;/bar&gt;');\n\n        $this-&gt;assertEquals($expected, $actual);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit EqualsTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) EqualsTest::testFailure\nFailed asserting that two DOM documents are equal.\n--- Expected\n+++ Actual\n@@ @@\n &lt;?xml version=\"1.0\"?&gt;\n-&lt;foo&gt;\n-  &lt;bar/&gt;\n-&lt;/foo&gt;\n+&lt;bar&gt;\n+  &lt;foo/&gt;\n+&lt;/bar&gt;\n\n/home/sb/EqualsTest.php:12\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<pre class=\"programlisting\" data-language=\"php\">assertEquals(object $expected, object $actual[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the two objects <code class=\"literal\">$expected</code> and <code class=\"literal\">$actual</code> do not have equal attribute values.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertEquals.example4\">\n<p class=\"title\"><strong>Example A.16: Usage of assertEquals() with objects</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualsTest extends TestCase\n{\n    public function testFailure()\n    {\n        $expected = new stdClass;\n        $expected-&gt;foo = 'foo';\n        $expected-&gt;bar = 'bar';\n\n        $actual = new stdClass;\n        $actual-&gt;foo = 'bar';\n        $actual-&gt;baz = 'bar';\n\n        $this-&gt;assertEquals($expected, $actual);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit EqualsTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) EqualsTest::testFailure\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n stdClass Object (\n-    'foo' =&gt; 'foo'\n-    'bar' =&gt; 'bar'\n+    'foo' =&gt; 'bar'\n+    'baz' =&gt; 'bar'\n )\n\n/home/sb/EqualsTest.php:14\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<pre class=\"programlisting\" data-language=\"php\">assertEquals(array $expected, array $actual[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the two arrays <code class=\"literal\">$expected</code> and <code class=\"literal\">$actual</code> are not equal.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertEquals.example5\">\n<p class=\"title\"><strong>Example A.17: Usage of assertEquals() with arrays</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualsTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertEquals(['a', 'b', 'c'], ['a', 'c', 'd']);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit EqualsTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) EqualsTest::testFailure\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     0 =&gt; 'a'\n-    1 =&gt; 'b'\n-    2 =&gt; 'c'\n+    1 =&gt; 'c'\n+    2 =&gt; 'd'\n )\n\n/home/sb/EqualsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertFalse\">assertFalse()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertFalse(bool $condition[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$condition</code> is <code class=\"literal\">true</code>.</p>\n<p><code class=\"literal\">assertNotFalse()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertFalse.example\">\n<p class=\"title\"><strong>Example A.18: Usage of assertFalse()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass FalseTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertFalse(true);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit FalseTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) FalseTest::testFailure\nFailed asserting that true is false.\n\n/home/sb/FalseTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertFileEquals\">assertFileEquals()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertFileEquals(string $expected, string $actual[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the file specified by <code class=\"literal\">$expected</code> does not have the same contents as the file specified by <code class=\"literal\">$actual</code>.</p>\n<p><code class=\"literal\">assertFileNotEquals()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertFileEquals.example\">\n<p class=\"title\"><strong>Example A.19: Usage of assertFileEquals()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass FileEqualsTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertFileEquals('/home/sb/expected', '/home/sb/actual');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit FileEqualsTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) FileEqualsTest::testFailure\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'expected\n+'actual\n '\n\n/home/sb/FileEqualsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertFileExists\">assertFileExists()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertFileExists(string $filename[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the file specified by <code class=\"literal\">$filename</code> does not exist.</p>\n<p><code class=\"literal\">assertFileNotExists()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertFileExists.example\">\n<p class=\"title\"><strong>Example A.20: Usage of assertFileExists()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass FileExistsTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertFileExists('/path/to/file');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit FileExistsTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) FileExistsTest::testFailure\nFailed asserting that file \"/path/to/file\" exists.\n\n/home/sb/FileExistsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertGreaterThan\">assertGreaterThan()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertGreaterThan(mixed $expected, mixed $actual[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the value of <code class=\"literal\">$actual</code> is not greater than the value of <code class=\"literal\">$expected</code>.</p>\n<p><code class=\"literal\">assertAttributeGreaterThan()</code> is a convenience wrapper that uses a <code class=\"literal\">public</code>, <code class=\"literal\">protected</code>, or <code class=\"literal\">private</code> attribute of a class or object as the actual value.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertGreaterThan.example\">\n<p class=\"title\"><strong>Example A.21: Usage of assertGreaterThan()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass GreaterThanTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertGreaterThan(2, 1);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit GreaterThanTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) GreaterThanTest::testFailure\nFailed asserting that 1 is greater than 2.\n\n/home/sb/GreaterThanTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertGreaterThanOrEqual\">assertGreaterThanOrEqual()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertGreaterThanOrEqual(mixed $expected, mixed $actual[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the value of <code class=\"literal\">$actual</code> is not greater than or equal to the value of <code class=\"literal\">$expected</code>.</p>\n<p><code class=\"literal\">assertAttributeGreaterThanOrEqual()</code> is a convenience wrapper that uses a <code class=\"literal\">public</code>, <code class=\"literal\">protected</code>, or <code class=\"literal\">private</code> attribute of a class or object as the actual value.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertGreaterThanOrEqual.example\">\n<p class=\"title\"><strong>Example A.22: Usage of assertGreaterThanOrEqual()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass GreatThanOrEqualTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertGreaterThanOrEqual(2, 1);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit GreaterThanOrEqualTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) GreatThanOrEqualTest::testFailure\nFailed asserting that 1 is equal to 2 or is greater than 2.\n\n/home/sb/GreaterThanOrEqualTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertInfinite\">assertInfinite()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertInfinite(mixed $variable[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$variable</code> is not <code class=\"literal\">INF</code>.</p>\n<p><code class=\"literal\">assertFinite()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertInfinite.example\">\n<p class=\"title\"><strong>Example A.23: Usage of assertInfinite()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass InfiniteTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertInfinite(1);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit InfiniteTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) InfiniteTest::testFailure\nFailed asserting that 1 is infinite.\n\n/home/sb/InfiniteTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertInstanceOf\">assertInstanceOf()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertInstanceOf($expected, $actual[, $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$actual</code> is not an instance of <code class=\"literal\">$expected</code>.</p>\n<p><code class=\"literal\">assertNotInstanceOf()</code> is the inverse of this assertion and takes the same arguments.</p>\n<p><code class=\"literal\">assertAttributeInstanceOf()</code> and <code class=\"literal\">assertAttributeNotInstanceOf()</code> are convenience wrappers that can be applied to a <code class=\"literal\">public</code>, <code class=\"literal\">protected</code>, or <code class=\"literal\">private</code> attribute of a class or object.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertInstanceOf.example\">\n<p class=\"title\"><strong>Example A.24: Usage of assertInstanceOf()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass InstanceOfTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertInstanceOf(RuntimeException::class, new Exception);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit InstanceOfTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) InstanceOfTest::testFailure\nFailed asserting that Exception Object (...) is an instance of class \"RuntimeException\".\n\n/home/sb/InstanceOfTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertInternalType\">assertInternalType()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertInternalType($expected, $actual[, $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$actual</code> is not of the <code class=\"literal\">$expected</code> type.</p>\n<p><code class=\"literal\">assertNotInternalType()</code> is the inverse of this assertion and takes the same arguments.</p>\n<p><code class=\"literal\">assertAttributeInternalType()</code> and <code class=\"literal\">assertAttributeNotInternalType()</code> are convenience wrappers that can be applied to a <code class=\"literal\">public</code>, <code class=\"literal\">protected</code>, or <code class=\"literal\">private</code> attribute of a class or object.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertInternalType.example\">\n<p class=\"title\"><strong>Example A.25: Usage of assertInternalType()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass InternalTypeTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertInternalType('string', 42);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit InternalTypeTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) InternalTypeTest::testFailure\nFailed asserting that 42 is of type \"string\".\n\n/home/sb/InternalTypeTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertJsonFileEqualsJsonFile\">assertJsonFileEqualsJsonFile()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertJsonFileEqualsJsonFile(mixed $expectedFile, mixed $actualFile[, string $message = ''])</pre>\n<p> Reports an error identified by <code class=\"literal\">$message</code> if the value of <code class=\"literal\">$actualFile</code> does not match the value of <code class=\"literal\">$expectedFile</code>. </p>\n<div class=\"example\" id=\"appendixes.assertions.assertJsonFileEqualsJsonFile.example\">\n<p class=\"title\"><strong>Example A.26: Usage of assertJsonFileEqualsJsonFile()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass JsonFileEqualsJsonFileTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertJsonFileEqualsJsonFile(\n          'path/to/fixture/file', 'path/to/actual/file');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit JsonFileEqualsJsonFileTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) JsonFileEqualsJsonFile::testFailure\nFailed asserting that '{\"Mascott\":\"Tux\"}' matches JSON string \"[\"Mascott\", \"Tux\", \"OS\", \"Linux\"]\".\n\n/home/sb/JsonFileEqualsJsonFileTest.php:5\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertJsonStringEqualsJsonFile\">assertJsonStringEqualsJsonFile()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertJsonStringEqualsJsonFile(mixed $expectedFile, mixed $actualJson[, string $message = ''])</pre>\n<p> Reports an error identified by <code class=\"literal\">$message</code> if the value of <code class=\"literal\">$actualJson</code> does not match the value of <code class=\"literal\">$expectedFile</code>. </p>\n<div class=\"example\" id=\"appendixes.assertions.assertJsonStringEqualsJsonFile.example\">\n<p class=\"title\"><strong>Example A.27: Usage of assertJsonStringEqualsJsonFile()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass JsonStringEqualsJsonFileTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertJsonStringEqualsJsonFile(\n            'path/to/fixture/file', json_encode(['Mascott' =&gt; 'ux'])\n        );\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit JsonStringEqualsJsonFileTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) JsonStringEqualsJsonFile::testFailure\nFailed asserting that '{\"Mascott\":\"ux\"}' matches JSON string \"{\"Mascott\":\"Tux\"}\".\n\n/home/sb/JsonStringEqualsJsonFileTest.php:5\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertJsonStringEqualsJsonString\">assertJsonStringEqualsJsonString()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertJsonStringEqualsJsonString(mixed $expectedJson, mixed $actualJson[, string $message = ''])</pre>\n<p> Reports an error identified by <code class=\"literal\">$message</code> if the value of <code class=\"literal\">$actualJson</code> does not match the value of <code class=\"literal\">$expectedJson</code>. </p>\n<div class=\"example\" id=\"appendixes.assertions.assertJsonStringEqualsJsonString.example\">\n<p class=\"title\"><strong>Example A.28: Usage of assertJsonStringEqualsJsonString()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass JsonStringEqualsJsonStringTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertJsonStringEqualsJsonString(\n            json_encode(['Mascott' =&gt; 'Tux']),\n            json_encode(['Mascott' =&gt; 'ux'])\n        );\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit JsonStringEqualsJsonStringTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) JsonStringEqualsJsonStringTest::testFailure\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n stdClass Object (\n -    'Mascott' =&gt; 'Tux'\n +    'Mascott' =&gt; 'ux'\n)\n\n/home/sb/JsonStringEqualsJsonStringTest.php:5\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertLessThan\">assertLessThan()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertLessThan(mixed $expected, mixed $actual[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the value of <code class=\"literal\">$actual</code> is not less than the value of <code class=\"literal\">$expected</code>.</p>\n<p><code class=\"literal\">assertAttributeLessThan()</code> is a convenience wrapper that uses a <code class=\"literal\">public</code>, <code class=\"literal\">protected</code>, or <code class=\"literal\">private</code> attribute of a class or object as the actual value.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertLessThan.example\">\n<p class=\"title\"><strong>Example A.29: Usage of assertLessThan()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass LessThanTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertLessThan(1, 2);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit LessThanTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) LessThanTest::testFailure\nFailed asserting that 2 is less than 1.\n\n/home/sb/LessThanTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertLessThanOrEqual\">assertLessThanOrEqual()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertLessThanOrEqual(mixed $expected, mixed $actual[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the value of <code class=\"literal\">$actual</code> is not less than or equal to the value of <code class=\"literal\">$expected</code>.</p>\n<p><code class=\"literal\">assertAttributeLessThanOrEqual()</code> is a convenience wrapper that uses a <code class=\"literal\">public</code>, <code class=\"literal\">protected</code>, or <code class=\"literal\">private</code> attribute of a class or object as the actual value.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertLessThanOrEqual.example\">\n<p class=\"title\"><strong>Example A.30: Usage of assertLessThanOrEqual()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass LessThanOrEqualTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertLessThanOrEqual(1, 2);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit LessThanOrEqualTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) LessThanOrEqualTest::testFailure\nFailed asserting that 2 is equal to 1 or is less than 1.\n\n/home/sb/LessThanOrEqualTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertNan\">assertNan()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertNan(mixed $variable[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$variable</code> is not <code class=\"literal\">NAN</code>.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertNan.example\">\n<p class=\"title\"><strong>Example A.31: Usage of assertNan()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass NanTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertNan(1);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit NanTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) NanTest::testFailure\nFailed asserting that 1 is nan.\n\n/home/sb/NanTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertNull\">assertNull()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertNull(mixed $variable[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$variable</code> is not <code class=\"literal\">null</code>.</p>\n<p><code class=\"literal\">assertNotNull()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertNull.example\">\n<p class=\"title\"><strong>Example A.32: Usage of assertNull()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass NullTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertNull('foo');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit NotNullTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) NullTest::testFailure\nFailed asserting that 'foo' is null.\n\n/home/sb/NotNullTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertObjectHasAttribute\">assertObjectHasAttribute()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertObjectHasAttribute(string $attributeName, object $object[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$object-&gt;attributeName</code> does not exist.</p>\n<p><code class=\"literal\">assertObjectNotHasAttribute()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertObjectHasAttribute.example\">\n<p class=\"title\"><strong>Example A.33: Usage of assertObjectHasAttribute()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ObjectHasAttributeTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertObjectHasAttribute('foo', new stdClass);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit ObjectHasAttributeTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) ObjectHasAttributeTest::testFailure\nFailed asserting that object of class \"stdClass\" has attribute \"foo\".\n\n/home/sb/ObjectHasAttributeTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertRegExp\">assertRegExp()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertRegExp(string $pattern, string $string[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$string</code> does not match the regular expression <code class=\"literal\">$pattern</code>.</p>\n<p><code class=\"literal\">assertNotRegExp()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertRegExp.example\">\n<p class=\"title\"><strong>Example A.34: Usage of assertRegExp()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass RegExpTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertRegExp('/foo/', 'bar');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit RegExpTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) RegExpTest::testFailure\nFailed asserting that 'bar' matches PCRE pattern \"/foo/\".\n\n/home/sb/RegExpTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertStringMatchesFormat\">assertStringMatchesFormat()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertStringMatchesFormat(string $format, string $string[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the <code class=\"literal\">$string</code> does not match the <code class=\"literal\">$format</code> string.</p>\n<p><code class=\"literal\">assertStringNotMatchesFormat()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertStringMatchesFormat.example\">\n<p class=\"title\"><strong>Example A.35: Usage of assertStringMatchesFormat()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StringMatchesFormatTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertStringMatchesFormat('%i', 'foo');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit StringMatchesFormatTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringMatchesFormatTest::testFailure\nFailed asserting that 'foo' matches PCRE pattern \"/^[+-]?\\d+$/s\".\n\n/home/sb/StringMatchesFormatTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<p>The format string may contain the following placeholders:</p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\">\n<li class=\"listitem\"><p><code class=\"literal\">%e</code>: Represents a directory separator, for example <code class=\"literal\">/</code> on Linux. </p></li>\n<li class=\"listitem\"><p><code class=\"literal\">%s</code>: One or more of anything (character or white space) except the end of line character.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">%S</code>: Zero or more of anything (character or white space) except the end of line character.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">%a</code>: One or more of anything (character or white space) including the end of line character.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">%A</code>: Zero or more of anything (character or white space) including the end of line character.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">%w</code>: Zero or more white space characters.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">%i</code>: A signed integer value, for example <code class=\"literal\">+3142</code>, <code class=\"literal\">-3142</code>.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">%d</code>: An unsigned integer value, for example <code class=\"literal\">123456</code>.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">%x</code>: One or more hexadecimal character. That is, characters in the range <code class=\"literal\">0-9</code>, <code class=\"literal\">a-f</code>, <code class=\"literal\">A-F</code>.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">%f</code>: A floating point number, for example: <code class=\"literal\">3.142</code>, <code class=\"literal\">-3.142</code>, <code class=\"literal\">3.142E-10</code>, <code class=\"literal\">3.142e+10</code>.</p></li>\n<li class=\"listitem\"><p><code class=\"literal\">%c</code>: A single character of any sort.</p></li>\n</ul></div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertStringMatchesFormatFile\">assertStringMatchesFormatFile()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertStringMatchesFormatFile(string $formatFile, string $string[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the <code class=\"literal\">$string</code> does not match the contents of the <code class=\"literal\">$formatFile</code>.</p>\n<p><code class=\"literal\">assertStringNotMatchesFormatFile()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertStringMatchesFormatFile.example\">\n<p class=\"title\"><strong>Example A.36: Usage of assertStringMatchesFormatFile()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StringMatchesFormatFileTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertStringMatchesFormatFile('/path/to/expected.txt', 'foo');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit StringMatchesFormatFileTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringMatchesFormatFileTest::testFailure\nFailed asserting that 'foo' matches PCRE pattern \"/^[+-]?\\d+\n$/s\".\n\n/home/sb/StringMatchesFormatFileTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertSame\">assertSame()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertSame(mixed $expected, mixed $actual[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the two variables <code class=\"literal\">$expected</code> and <code class=\"literal\">$actual</code> do not have the same type and value.</p>\n<p><code class=\"literal\">assertNotSame()</code> is the inverse of this assertion and takes the same arguments.</p>\n<p><code class=\"literal\">assertAttributeSame()</code> and <code class=\"literal\">assertAttributeNotSame()</code> are convenience wrappers that use a <code class=\"literal\">public</code>, <code class=\"literal\">protected</code>, or <code class=\"literal\">private</code> attribute of a class or object as the actual value.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertSame.example\">\n<p class=\"title\"><strong>Example A.37: Usage of assertSame()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass SameTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertSame('2204', 2204);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit SameTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) SameTest::testFailure\nFailed asserting that 2204 is identical to '2204'.\n\n/home/sb/SameTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<pre class=\"programlisting\" data-language=\"php\">assertSame(object $expected, object $actual[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the two variables <code class=\"literal\">$expected</code> and <code class=\"literal\">$actual</code> do not reference the same object.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertSame.example2\">\n<p class=\"title\"><strong>Example A.38: Usage of assertSame() with objects</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass SameTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertSame(new stdClass, new stdClass);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit SameTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) SameTest::testFailure\nFailed asserting that two variables reference the same object.\n\n/home/sb/SameTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertStringEndsWith\">assertStringEndsWith()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertStringEndsWith(string $suffix, string $string[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the <code class=\"literal\">$string</code> does not end with <code class=\"literal\">$suffix</code>.</p>\n<p><code class=\"literal\">assertStringEndsNotWith()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertStringEndsWith.example\">\n<p class=\"title\"><strong>Example A.39: Usage of assertStringEndsWith()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StringEndsWithTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertStringEndsWith('suffix', 'foo');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit StringEndsWithTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 1 second, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringEndsWithTest::testFailure\nFailed asserting that 'foo' ends with \"suffix\".\n\n/home/sb/StringEndsWithTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertStringEqualsFile\">assertStringEqualsFile()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertStringEqualsFile(string $expectedFile, string $actualString[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the file specified by <code class=\"literal\">$expectedFile</code> does not have <code class=\"literal\">$actualString</code> as its contents.</p>\n<p><code class=\"literal\">assertStringNotEqualsFile()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertStringEqualsFile.example\">\n<p class=\"title\"><strong>Example A.40: Usage of assertStringEqualsFile()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StringEqualsFileTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertStringEqualsFile('/home/sb/expected', 'actual');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit StringEqualsFileTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) StringEqualsFileTest::testFailure\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'expected\n-'\n+'actual'\n\n/home/sb/StringEqualsFileTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertStringStartsWith\">assertStringStartsWith()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertStringStartsWith(string $prefix, string $string[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the <code class=\"literal\">$string</code> does not start with <code class=\"literal\">$prefix</code>.</p>\n<p><code class=\"literal\">assertStringStartsNotWith()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertStringStartsWith.example\">\n<p class=\"title\"><strong>Example A.41: Usage of assertStringStartsWith()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StringStartsWithTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertStringStartsWith('prefix', 'foo');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit StringStartsWithTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringStartsWithTest::testFailure\nFailed asserting that 'foo' starts with \"prefix\".\n\n/home/sb/StringStartsWithTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertThat\">assertThat()</h2>\n<p> More complex assertions can be formulated using the <code class=\"literal\">PHPUnit_Framework_Constraint</code> classes. They can be evaluated using the <code class=\"literal\">assertThat()</code> method. <a class=\"xref\" href=\"appendixes.assertions#appendixes.assertions.assertThat.example\" title=\"Example A.42: Usage of assertThat()\">Example A.42</a> shows how the <code class=\"literal\">logicalNot()</code> and <code class=\"literal\">equalTo()</code> constraints can be used to express the same assertion as <code class=\"literal\">assertNotEquals()</code>. </p>\n<pre class=\"programlisting\" data-language=\"php\">assertThat(mixed $value, PHPUnit_Framework_Constraint $constraint[, $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the <code class=\"literal\">$value</code> does not match the <code class=\"literal\">$constraint</code>.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertThat.example\">\n<p class=\"title\"><strong>Example A.42: Usage of assertThat()</strong></p>\n<div class=\"example-contents\"><pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass BiscuitTest extends TestCase\n{\n    public function testEquals()\n    {\n        $theBiscuit = new Biscuit('Ginger');\n        $myBiscuit  = new Biscuit('Ginger');\n\n        $this-&gt;assertThat(\n          $theBiscuit,\n          $this-&gt;logicalNot(\n            $this-&gt;equalTo($myBiscuit)\n          )\n        );\n    }\n}\n?&gt;</pre></div>\n</div>\n<p> <a class=\"xref\" href=\"appendixes.assertions#appendixes.assertions.assertThat.tables.constraints\" title=\"Table A.1. Constraints\">Table A.1</a> shows the available <code class=\"literal\">PHPUnit_Framework_Constraint</code> classes. </p>\n<div class=\"table\" id=\"appendixes.assertions.assertThat.tables.constraints\">\n<p class=\"title\"><strong>Table A.1. Constraints</strong></p>\n<div class=\"table-contents\"><table class=\"table\" summary=\"Constraints\">\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead><tr>\n<th align=\"left\">Constraint</th>\n<th align=\"left\">Meaning</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_Attribute attribute(PHPUnit_Framework_Constraint $constraint, $attributeName)</code></td>\n<td align=\"left\">Constraint that applies another constraint to an attribute of a class or an object.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_IsAnything anything()</code></td>\n<td align=\"left\">Constraint that accepts any input value.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_ArrayHasKey arrayHasKey(mixed $key)</code></td>\n<td align=\"left\">Constraint that asserts that the array it is evaluated for has a given key.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_TraversableContains contains(mixed $value)</code></td>\n<td align=\"left\">Constraint that asserts that the <code class=\"literal\">array</code> or object that implements the <code class=\"literal\">Iterator</code> interface it is evaluated for contains a given value.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_TraversableContainsOnly containsOnly(string $type)</code></td>\n<td align=\"left\">Constraint that asserts that the <code class=\"literal\">array</code> or object that implements the <code class=\"literal\">Iterator</code> interface it is evaluated for contains only values of a given type.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_TraversableContainsOnly containsOnlyInstancesOf(string $classname)</code></td>\n<td align=\"left\">Constraint that asserts that the <code class=\"literal\">array</code> or object that implements the <code class=\"literal\">Iterator</code> interface it is evaluated for contains only instances of a given classname.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_IsEqual equalTo($value, $delta = 0, $maxDepth = 10)</code></td>\n<td align=\"left\">Constraint that checks if one value is equal to another.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_Attribute attributeEqualTo($attributeName, $value, $delta = 0, $maxDepth = 10)</code></td>\n<td align=\"left\">Constraint that checks if a value is equal to an attribute of a class or of an object.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_FileExists fileExists()</code></td>\n<td align=\"left\">Constraint that checks if the file(name) that it is evaluated for exists.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_GreaterThan greaterThan(mixed $value)</code></td>\n<td align=\"left\">Constraint that asserts that the value it is evaluated for is greater than a given value.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_Or greaterThanOrEqual(mixed $value)</code></td>\n<td align=\"left\">Constraint that asserts that the value it is evaluated for is greater than or equal to a given value.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_ClassHasAttribute classHasAttribute(string $attributeName)</code></td>\n<td align=\"left\">Constraint that asserts that the class it is evaluated for has a given attribute.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_ClassHasStaticAttribute classHasStaticAttribute(string $attributeName)</code></td>\n<td align=\"left\">Constraint that asserts that the class it is evaluated for has a given static attribute.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_ObjectHasAttribute hasAttribute(string $attributeName)</code></td>\n<td align=\"left\">Constraint that asserts that the object it is evaluated for has a given attribute.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_IsIdentical identicalTo(mixed $value)</code></td>\n<td align=\"left\">Constraint that asserts that one value is identical to another.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_IsFalse isFalse()</code></td>\n<td align=\"left\">Constraint that asserts that the value it is evaluated is <code class=\"literal\">false</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_IsInstanceOf isInstanceOf(string $className)</code></td>\n<td align=\"left\">Constraint that asserts that the object it is evaluated for is an instance of a given class.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_IsNull isNull()</code></td>\n<td align=\"left\">Constraint that asserts that the value it is evaluated is <code class=\"literal\">null</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_IsTrue isTrue()</code></td>\n<td align=\"left\">Constraint that asserts that the value it is evaluated is <code class=\"literal\">true</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_IsType isType(string $type)</code></td>\n<td align=\"left\">Constraint that asserts that the value it is evaluated for is of a specified type.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_LessThan lessThan(mixed $value)</code></td>\n<td align=\"left\">Constraint that asserts that the value it is evaluated for is smaller than a given value.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_Or lessThanOrEqual(mixed $value)</code></td>\n<td align=\"left\">Constraint that asserts that the value it is evaluated for is smaller than or equal to a given value.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">logicalAnd()</code></td>\n<td align=\"left\">Logical AND.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">logicalNot(PHPUnit_Framework_Constraint $constraint)</code></td>\n<td align=\"left\">Logical NOT.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">logicalOr()</code></td>\n<td align=\"left\">Logical OR.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">logicalXor()</code></td>\n<td align=\"left\">Logical XOR.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_PCREMatch matchesRegularExpression(string $pattern)</code></td>\n<td align=\"left\">Constraint that asserts that the string it is evaluated for matches a regular expression.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_StringContains stringContains(string $string, bool $case)</code></td>\n<td align=\"left\">Constraint that asserts that the string it is evaluated for contains a given string.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_StringEndsWith stringEndsWith(string $suffix)</code></td>\n<td align=\"left\">Constraint that asserts that the string it is evaluated for ends with a given suffix.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"literal\">PHPUnit_Framework_Constraint_StringStartsWith stringStartsWith(string $prefix)</code></td>\n<td align=\"left\">Constraint that asserts that the string it is evaluated for starts with a given prefix.</td>\n</tr>\n</tbody>\n</table></div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertTrue\">assertTrue()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertTrue(bool $condition[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if <code class=\"literal\">$condition</code> is <code class=\"literal\">false</code>.</p>\n<p><code class=\"literal\">assertNotTrue()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertTrue.example\">\n<p class=\"title\"><strong>Example A.43: Usage of assertTrue()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass TrueTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertTrue(false);\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit TrueTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) TrueTest::testFailure\nFailed asserting that false is true.\n\n/home/sb/TrueTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertXmlFileEqualsXmlFile\">assertXmlFileEqualsXmlFile()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the XML document in <code class=\"literal\">$actualFile</code> is not equal to the XML document in <code class=\"literal\">$expectedFile</code>.</p>\n<p><code class=\"literal\">assertXmlFileNotEqualsXmlFile()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertXmlFileEqualsXmlFile.example\">\n<p class=\"title\"><strong>Example A.44: Usage of assertXmlFileEqualsXmlFile()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass XmlFileEqualsXmlFileTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertXmlFileEqualsXmlFile(\n          '/home/sb/expected.xml', '/home/sb/actual.xml');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit XmlFileEqualsXmlFileTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) XmlFileEqualsXmlFileTest::testFailure\nFailed asserting that two DOM documents are equal.\n--- Expected\n+++ Actual\n@@ @@\n &lt;?xml version=\"1.0\"?&gt;\n &lt;foo&gt;\n-  &lt;bar/&gt;\n+  &lt;baz/&gt;\n &lt;/foo&gt;\n\n/home/sb/XmlFileEqualsXmlFileTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertXmlStringEqualsXmlFile\">assertXmlStringEqualsXmlFile()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the XML document in <code class=\"literal\">$actualXml</code> is not equal to the XML document in <code class=\"literal\">$expectedFile</code>.</p>\n<p><code class=\"literal\">assertXmlStringNotEqualsXmlFile()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertXmlStringEqualsXmlFile.example\">\n<p class=\"title\"><strong>Example A.45: Usage of assertXmlStringEqualsXmlFile()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass XmlStringEqualsXmlFileTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertXmlStringEqualsXmlFile(\n          '/home/sb/expected.xml', '&lt;foo&gt;&lt;baz/&gt;&lt;/foo&gt;');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit XmlStringEqualsXmlFileTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) XmlStringEqualsXmlFileTest::testFailure\nFailed asserting that two DOM documents are equal.\n--- Expected\n+++ Actual\n@@ @@\n &lt;?xml version=\"1.0\"?&gt;\n &lt;foo&gt;\n-  &lt;bar/&gt;\n+  &lt;baz/&gt;\n &lt;/foo&gt;\n\n/home/sb/XmlStringEqualsXmlFileTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.</pre>\n</div>\n</div>\n<h2 class=\"title\" id=\"appendixes.assertions.assertXmlStringEqualsXmlString\">assertXmlStringEqualsXmlString()</h2>\n<pre class=\"programlisting\" data-language=\"php\">assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml[, string $message = ''])</pre>\n<p>Reports an error identified by <code class=\"literal\">$message</code> if the XML document in <code class=\"literal\">$actualXml</code> is not equal to the XML document in <code class=\"literal\">$expectedXml</code>.</p>\n<p><code class=\"literal\">assertXmlStringNotEqualsXmlString()</code> is the inverse of this assertion and takes the same arguments.</p>\n<div class=\"example\" id=\"appendixes.assertions.assertXmlStringEqualsXmlString.example\">\n<p class=\"title\"><strong>Example A.46: Usage of assertXmlStringEqualsXmlString()</strong></p>\n<div class=\"example-contents\">\n<pre class=\"programlisting\" data-language=\"php\">&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass XmlStringEqualsXmlStringTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this-&gt;assertXmlStringEqualsXmlString(\n          '&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;', '&lt;foo&gt;&lt;baz/&gt;&lt;/foo&gt;');\n    }\n}\n?&gt;</pre>\n<pre class=\"screen\">phpunit XmlStringEqualsXmlStringTest\nPHPUnit 5.4.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) XmlStringEqualsXmlStringTest::testFailure\nFailed asserting that two DOM documents are equal.\n--- Expected\n+++ Actual\n@@ @@\n &lt;?xml version=\"1.0\"?&gt;\n &lt;foo&gt;\n-  &lt;bar/&gt;\n+  &lt;baz/&gt;\n &lt;/foo&gt;\n\n/home/sb/XmlStringEqualsXmlStringTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.</pre>\n</div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Sebastian Bergmann<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>\n    <a href=\"https://phpunit.de/manual/5.4/en/appendixes.assertions.html\" class=\"_attribution-link\">https://phpunit.de/manual/5.4/en/appendixes.assertions.html</a>\n  </p>\n</div>\n"}